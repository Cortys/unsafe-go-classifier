{
  "usage" : {
    "file" : "mheap.go",
    "label1" : "delegate",
    "label2" : "layout",
    "line" : "876",
    "module" : "std",
    "pkg" : "runtime",
    "project" : "kubernetes/kubernetes",
    "snippet" : "memclrNoHeapPointers(unsafe.Pointer(s.base()), s.npages<<_PageShift)",
    "version" : "std"
  },
  "cfg" : {
    "blocks" : [ {
      "update-vars" : [ ],
      "successors" : [ 2 ],
      "in-vars" : [ 0, 1, 2, 5, 3 ],
      "exit" : false,
      "out-vars" : [ 0, 1, 2, 5, 3 ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[entry]",
      "entry" : true,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ ],
      "in-vars" : [ ],
      "exit" : true,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[exit]",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 3 ],
      "in-vars" : [ 0, 1, 2, 5, 3 ],
      "exit" : false,
      "out-vars" : [ 1, 2, 5, 3, 6, 0 ],
      "decl-vars" : [ 6 ],
      "line-start" : 864,
      "ast" : {
        "kind" : "statement",
        "target" : {
          "kind" : "decl",
          "specs" : [ {
            "comments" : [ ],
            "declared-type" : {
              "contained" : {
                "go-type" : 8,
                "kind" : "type",
                "type" : "identifier",
                "value" : {
                  "go-type" : 8,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "mspan"
                }
              },
              "go-type" : 7,
              "kind" : "type",
              "type" : "pointer"
            },
            "kind" : "spec",
            "names" : [ {
              "ident-kind" : "NoKind",
              "kind" : "ident",
              "value" : "s"
            } ],
            "type" : "var",
            "values" : [ ]
          } ],
          "type" : "var"
        },
        "type" : "declaration"
      },
      "assign-vars" : [ ],
      "line-end" : 864,
      "code" : "// Don't do any operations that lock the heap on the G stack.\n// It might trigger stack growth, and the stack growth code needs\n// to be able to allocate heap.\nvar s *mspan",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 4 ],
      "in-vars" : [ 6, 0, 1, 2, 5, 3 ],
      "exit" : false,
      "out-vars" : [ 6, 3 ],
      "decl-vars" : [ ],
      "line-start" : 865,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "body" : [ {
              "body" : [ {
                "kind" : "statement",
                "type" : "expression",
                "value" : {
                  "arguments" : [ {
                    "go-type" : 2,
                    "kind" : "expression",
                    "type" : "identifier",
                    "value" : {
                      "ident-kind" : "Var",
                      "kind" : "ident",
                      "value" : "npages",
                      "variable" : 1
                    }
                  } ],
                  "ellipsis" : false,
                  "function" : {
                    "field" : {
                      "ident-kind" : "Func",
                      "kind" : "ident",
                      "value" : "reclaim"
                    },
                    "go-type" : 37,
                    "kind" : "expression",
                    "target" : {
                      "go-type" : 0,
                      "kind" : "expression",
                      "type" : "identifier",
                      "value" : {
                        "ident-kind" : "Var",
                        "kind" : "ident",
                        "value" : "h",
                        "variable" : 0
                      }
                    },
                    "type" : "selector"
                  },
                  "go-type" : 58,
                  "kind" : "expression",
                  "type" : "call"
                }
              } ],
              "condition" : {
                "go-type" : 36,
                "kind" : "expression",
                "left" : {
                  "field" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "sweepdone",
                    "variable" : 7
                  },
                  "go-type" : 17,
                  "kind" : "expression",
                  "target" : {
                    "go-type" : 0,
                    "kind" : "expression",
                    "type" : "identifier",
                    "value" : {
                      "ident-kind" : "Var",
                      "kind" : "ident",
                      "value" : "h",
                      "variable" : 0
                    }
                  },
                  "type" : "selector"
                },
                "operator" : "==",
                "right" : {
                  "go-type" : 17,
                  "kind" : "constant",
                  "value" : {
                    "type" : "INT",
                    "value" : "0"
                  }
                },
                "type" : "binary"
              },
              "else" : null,
              "init" : null,
              "kind" : "statement",
              "type" : "if"
            }, {
              "kind" : "statement",
              "left" : [ {
                "go-type" : 7,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "s",
                  "variable" : 6
                }
              } ],
              "right" : [ {
                "arguments" : [ {
                  "go-type" : 2,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "npages",
                    "variable" : 1
                  }
                }, {
                  "go-type" : 5,
                  "kind" : "constant",
                  "value" : {
                    "type" : "BOOL",
                    "value" : "false"
                  }
                }, {
                  "go-type" : 3,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "spanclass",
                    "variable" : 2
                  }
                }, {
                  "go-type" : 23,
                  "kind" : "expression",
                  "operator" : "&",
                  "target" : {
                    "field" : {
                      "ident-kind" : "Var",
                      "kind" : "ident",
                      "value" : "heap_inuse",
                      "variable" : 8
                    },
                    "go-type" : 14,
                    "kind" : "expression",
                    "target" : {
                      "go-type" : 28,
                      "kind" : "expression",
                      "type" : "identifier",
                      "value" : {
                        "ident-kind" : "Var",
                        "kind" : "ident",
                        "value" : "memstats",
                        "variable" : 5
                      }
                    },
                    "type" : "selector"
                  },
                  "type" : "unary"
                } ],
                "ellipsis" : false,
                "function" : {
                  "field" : {
                    "ident-kind" : "Func",
                    "kind" : "ident",
                    "value" : "allocSpan"
                  },
                  "go-type" : 39,
                  "kind" : "expression",
                  "target" : {
                    "go-type" : 0,
                    "kind" : "expression",
                    "type" : "identifier",
                    "value" : {
                      "ident-kind" : "Var",
                      "kind" : "ident",
                      "value" : "h",
                      "variable" : 0
                    }
                  },
                  "type" : "selector"
                },
                "go-type" : 7,
                "kind" : "expression",
                "type" : "call"
              } ],
              "type" : "assign"
            } ],
            "go-type" : 35,
            "kind" : "literal",
            "params" : [ ],
            "results" : null,
            "type" : "function",
            "variadic" : null
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 33,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "systemstack"
            }
          },
          "go-type" : 58,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 872,
      "code" : "systemstack(func() {\n\n\tif h.sweepdone == 0 {\n\t\th.reclaim(npages)\n\t}\n\ts = h.allocSpan(npages, false, spanclass, &memstats.heap_inuse)\n})",
      "entry" : false,
      "use-vars" : [ 0, 1, 5, 2, 6 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 5, 8 ],
      "in-vars" : [ 6, 3 ],
      "exit" : false,
      "out-vars" : [ 6, 3 ],
      "decl-vars" : [ ],
      "line-start" : 874,
      "ast" : {
        "condition" : {
          "go-type" : 36,
          "kind" : "expression",
          "left" : {
            "go-type" : 7,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "s",
              "variable" : 6
            }
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 42,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Nil",
              "kind" : "ident",
              "value" : "nil"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 879,
      "code" : "if s != nil {\n\tif needzero && s.needzero != 0 {\n\t\tmemclrNoHeapPointers(unsafe.Pointer(s.base()), s.npages<<_PageShift)\n\t}\n\ts.needzero = 0\n}",
      "entry" : false,
      "use-vars" : [ 6 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 6, 7 ],
      "in-vars" : [ 3, 6 ],
      "exit" : false,
      "out-vars" : [ 6 ],
      "decl-vars" : [ ],
      "line-start" : 875,
      "ast" : {
        "condition" : {
          "go-type" : 5,
          "kind" : "expression",
          "left" : {
            "go-type" : 5,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "needzero",
              "variable" : 3
            }
          },
          "operator" : "&&",
          "right" : {
            "go-type" : 5,
            "kind" : "expression",
            "left" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "needzero",
                "variable" : 9
              },
              "go-type" : 4,
              "kind" : "expression",
              "target" : {
                "go-type" : 7,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "s",
                  "variable" : 6
                }
              },
              "type" : "selector"
            },
            "operator" : "!=",
            "right" : {
              "go-type" : 4,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "0"
              }
            },
            "type" : "binary"
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 877,
      "code" : "if needzero && s.needzero != 0 {\n\tmemclrNoHeapPointers(unsafe.Pointer(s.base()), s.npages<<_PageShift)\n}",
      "entry" : false,
      "use-vars" : [ 6, 3 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 7 ],
      "in-vars" : [ 6 ],
      "exit" : false,
      "out-vars" : [ 6 ],
      "decl-vars" : [ ],
      "line-start" : 876,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "coerced-to" : {
              "go-type" : 29,
              "kind" : "type",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 1,
                "value" : "unsafe"
              },
              "type" : "identifier",
              "value" : {
                "go-type" : 29,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "Pointer"
              }
            },
            "go-type" : 29,
            "kind" : "expression",
            "target" : {
              "arguments" : [ ],
              "ellipsis" : false,
              "function" : {
                "field" : {
                  "ident-kind" : "Func",
                  "kind" : "ident",
                  "value" : "base"
                },
                "go-type" : 45,
                "kind" : "expression",
                "target" : {
                  "go-type" : 7,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "s",
                    "variable" : 6
                  }
                },
                "type" : "selector"
              },
              "go-type" : 2,
              "kind" : "expression",
              "type" : "call"
            },
            "type" : "cast"
          }, {
            "go-type" : 2,
            "kind" : "expression",
            "left" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "npages",
                "variable" : 10
              },
              "go-type" : 2,
              "kind" : "expression",
              "target" : {
                "go-type" : 7,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "s",
                  "variable" : 6
                }
              },
              "type" : "selector"
            },
            "operator" : "<<",
            "right" : {
              "go-type" : 47,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "13"
              }
            },
            "type" : "binary"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 43,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "memclrNoHeapPointers"
            }
          },
          "go-type" : 58,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 876,
      "code" : "memclrNoHeapPointers(unsafe.Pointer(s.base()), s.npages<<_PageShift)",
      "entry" : false,
      "use-vars" : [ 6 ]
    }, {
      "update-vars" : [ 6 ],
      "successors" : [ 8 ],
      "in-vars" : [ 6 ],
      "exit" : false,
      "out-vars" : [ 6 ],
      "decl-vars" : [ ],
      "line-start" : 878,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "needzero",
            "variable" : 9
          },
          "go-type" : 4,
          "kind" : "expression",
          "target" : {
            "go-type" : 7,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "s",
              "variable" : 6
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "go-type" : 4,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "0"
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 878,
      "code" : "s.needzero = 0",
      "entry" : false,
      "use-vars" : [ 6 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 6 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 880,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 7,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "s",
            "variable" : 6
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 880,
      "code" : "return s",
      "entry" : false,
      "use-vars" : [ 6 ]
    } ],
    "code" : "// alloc allocates a new span of npage pages from the GC'd heap.\n//\n// spanclass indicates the span's size class and scannability.\n//\n// If needzero is true, the memory for the returned span will be zeroed.\nfunc (h *mheap) alloc(npages uintptr, spanclass spanClass, needzero bool) *mspan {\n\t// Don't do any operations that lock the heap on the G stack.\n\t// It might trigger stack growth, and the stack growth code needs\n\t// to be able to allocate heap.\n\tvar s *mspan\n\tsystemstack(func() {\n\n\t\tif h.sweepdone == 0 {\n\t\t\th.reclaim(npages)\n\t\t}\n\t\ts = h.allocSpan(npages, false, spanclass, &memstats.heap_inuse)\n\t})\n\n\tif s != nil {\n\t\tif needzero && s.needzero != 0 {\n\t\t\tmemclrNoHeapPointers(unsafe.Pointer(s.base()), s.npages<<_PageShift)\n\t\t}\n\t\ts.needzero = 0\n\t}\n\treturn s\n}",
    "defines" : [ 0 ],
    "functions" : [ {
      "name" : "alloc",
      "package" : 0,
      "type" : 0,
      "exported" : false
    }, {
      "name" : "systemstack",
      "package" : 0,
      "type" : 33,
      "exported" : false
    }, {
      "name" : "reclaim",
      "package" : 0,
      "type" : 37,
      "exported" : false
    }, {
      "name" : "allocSpan",
      "package" : 0,
      "type" : 39,
      "exported" : false
    }, {
      "name" : "memclrNoHeapPointers",
      "package" : 0,
      "type" : 43,
      "exported" : false
    }, {
      "name" : "base",
      "package" : 0,
      "type" : 45,
      "exported" : false
    } ],
    "line-end" : 881,
    "line-start" : 860,
    "names" : [ "alloc" ],
    "package" : 0,
    "packages" : [ {
      "name" : "runtime",
      "path" : "runtime"
    }, {
      "name" : "unsafe",
      "path" : "unsafe"
    } ],
    "params" : [ 1, 2, 3 ],
    "receivers" : [ 0 ],
    "results" : [ 4 ],
    "type" : "function",
    "types" : [ {
      "name" : "func(npages uintptr, spanclass runtime.spanClass, needzero bool) *runtime.mspan",
      "params" : 1,
      "recv" : 0,
      "results" : 6,
      "type" : "Signature",
      "underlying" : 0,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "npages",
        "type" : 2
      }, {
        "name" : "spanclass",
        "type" : 3
      }, {
        "name" : "needzero",
        "type" : 5
      } ],
      "name" : "(npages uintptr, spanclass runtime.spanClass, needzero bool)",
      "type" : "Tuple",
      "underlying" : 1
    }, {
      "name" : "uintptr",
      "type" : "Basic",
      "underlying" : 2
    }, {
      "local-name" : "spanClass",
      "name" : "runtime.spanClass",
      "package" : 0,
      "type" : "Named",
      "underlying" : 4
    }, {
      "name" : "uint8",
      "type" : "Basic",
      "underlying" : 4
    }, {
      "name" : "bool",
      "type" : "Basic",
      "underlying" : 5
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 7
      } ],
      "name" : "(*runtime.mspan)",
      "type" : "Tuple",
      "underlying" : 6
    }, {
      "elem" : 8,
      "name" : "*runtime.mspan",
      "type" : "Pointer",
      "underlying" : 7
    }, {
      "local-name" : "mspan",
      "name" : "runtime.mspan",
      "package" : 0,
      "type" : "Named",
      "underlying" : 9
    }, {
      "fields" : [ {
        "name" : "next",
        "type" : 7
      }, {
        "name" : "prev",
        "type" : 7
      }, {
        "name" : "list",
        "type" : 10
      }, {
        "name" : "startAddr",
        "type" : 2
      }, {
        "name" : "npages",
        "type" : 2
      }, {
        "name" : "manualFreeList",
        "type" : 13
      }, {
        "name" : "freeindex",
        "type" : 2
      }, {
        "name" : "nelems",
        "type" : 2
      }, {
        "name" : "allocCache",
        "type" : 14
      }, {
        "name" : "allocBits",
        "type" : 15
      }, {
        "name" : "gcmarkBits",
        "type" : 15
      }, {
        "name" : "sweepgen",
        "type" : 17
      }, {
        "name" : "divMul",
        "type" : 18
      }, {
        "name" : "baseMask",
        "type" : 18
      }, {
        "name" : "allocCount",
        "type" : 18
      }, {
        "name" : "spanclass",
        "type" : 3
      }, {
        "name" : "state",
        "type" : 19
      }, {
        "name" : "needzero",
        "type" : 4
      }, {
        "name" : "divShift",
        "type" : 4
      }, {
        "name" : "divShift2",
        "type" : 4
      }, {
        "name" : "elemsize",
        "type" : 2
      }, {
        "name" : "limit",
        "type" : 2
      }, {
        "name" : "speciallock",
        "type" : 22
      }, {
        "name" : "specials",
        "type" : 24
      } ],
      "name" : "struct{next *runtime.mspan; prev *runtime.mspan; list *runtime.mSpanList; startAddr uintptr; npages uintptr; manualFreeList runtime.gclinkptr; freeindex uintptr; nelems uintptr; allocCache uint64; allocBits *runtime.gcBits; gcmarkBits *runtime.gcBits; sweepgen uint32; divMul uint16; baseMask uint16; allocCount uint16; spanclass runtime.spanClass; state runtime.mSpanStateBox; needzero uint8; divShift uint8; divShift2 uint8; elemsize uintptr; limit uintptr; speciallock runtime.mutex; specials *runtime.special}",
      "type" : "Struct",
      "underlying" : 9
    }, {
      "elem" : 11,
      "name" : "*runtime.mSpanList",
      "type" : "Pointer",
      "underlying" : 10
    }, {
      "local-name" : "mSpanList",
      "name" : "runtime.mSpanList",
      "package" : 0,
      "type" : "Named",
      "underlying" : 12
    }, {
      "fields" : [ {
        "name" : "first",
        "type" : 7
      }, {
        "name" : "last",
        "type" : 7
      } ],
      "name" : "struct{first *runtime.mspan; last *runtime.mspan}",
      "type" : "Struct",
      "underlying" : 12
    }, {
      "local-name" : "gclinkptr",
      "name" : "runtime.gclinkptr",
      "package" : 0,
      "type" : "Named",
      "underlying" : 2
    }, {
      "name" : "uint64",
      "type" : "Basic",
      "underlying" : 14
    }, {
      "elem" : 16,
      "name" : "*runtime.gcBits",
      "type" : "Pointer",
      "underlying" : 15
    }, {
      "local-name" : "gcBits",
      "name" : "runtime.gcBits",
      "package" : 0,
      "type" : "Named",
      "underlying" : 4
    }, {
      "name" : "uint32",
      "type" : "Basic",
      "underlying" : 17
    }, {
      "name" : "uint16",
      "type" : "Basic",
      "underlying" : 18
    }, {
      "local-name" : "mSpanStateBox",
      "name" : "runtime.mSpanStateBox",
      "package" : 0,
      "type" : "Named",
      "underlying" : 20
    }, {
      "fields" : [ {
        "name" : "s",
        "type" : 21
      } ],
      "name" : "struct{s runtime.mSpanState}",
      "type" : "Struct",
      "underlying" : 20
    }, {
      "local-name" : "mSpanState",
      "name" : "runtime.mSpanState",
      "package" : 0,
      "type" : "Named",
      "underlying" : 4
    }, {
      "local-name" : "mutex",
      "name" : "runtime.mutex",
      "package" : 0,
      "type" : "Named",
      "underlying" : 23
    }, {
      "fields" : [ {
        "name" : "key",
        "type" : 2
      } ],
      "name" : "struct{key uintptr}",
      "type" : "Struct",
      "underlying" : 23
    }, {
      "elem" : 25,
      "name" : "*runtime.special",
      "type" : "Pointer",
      "underlying" : 24
    }, {
      "local-name" : "special",
      "name" : "runtime.special",
      "package" : 0,
      "type" : "Named",
      "underlying" : 26
    }, {
      "fields" : [ {
        "name" : "next",
        "type" : 24
      }, {
        "name" : "offset",
        "type" : 18
      }, {
        "name" : "kind",
        "type" : 27
      } ],
      "name" : "struct{next *runtime.special; offset uint16; kind byte}",
      "type" : "Struct",
      "underlying" : 26
    }, {
      "name" : "byte",
      "type" : "Basic",
      "underlying" : 27
    }, {
      "local-name" : "mstats",
      "name" : "runtime.mstats",
      "package" : 0,
      "type" : "Named",
      "underlying" : 29
    }, {
      "fields" : [ {
        "name" : "alloc",
        "type" : 14
      }, {
        "name" : "total_alloc",
        "type" : 14
      }, {
        "name" : "sys",
        "type" : 14
      }, {
        "name" : "nlookup",
        "type" : 14
      }, {
        "name" : "nmalloc",
        "type" : 14
      }, {
        "name" : "nfree",
        "type" : 14
      }, {
        "name" : "heap_alloc",
        "type" : 14
      }, {
        "name" : "heap_sys",
        "type" : 14
      }, {
        "name" : "heap_idle",
        "type" : 14
      }, {
        "name" : "heap_inuse",
        "type" : 14
      }, {
        "name" : "heap_released",
        "type" : 14
      }, {
        "name" : "heap_objects",
        "type" : 14
      }, {
        "name" : "stacks_inuse",
        "type" : 14
      }, {
        "name" : "stacks_sys",
        "type" : 14
      }, {
        "name" : "mspan_inuse",
        "type" : 14
      }, {
        "name" : "mspan_sys",
        "type" : 14
      }, {
        "name" : "mcache_inuse",
        "type" : 14
      }, {
        "name" : "mcache_sys",
        "type" : 14
      }, {
        "name" : "buckhash_sys",
        "type" : 14
      }, {
        "name" : "gc_sys",
        "type" : 14
      }, {
        "name" : "other_sys",
        "type" : 14
      }, {
        "name" : "next_gc",
        "type" : 14
      }, {
        "name" : "last_gc_unix",
        "type" : 14
      }, {
        "name" : "pause_total_ns",
        "type" : 14
      }, {
        "name" : "pause_ns",
        "type" : 30
      }, {
        "name" : "pause_end",
        "type" : 30
      }, {
        "name" : "numgc",
        "type" : 17
      }, {
        "name" : "numforcedgc",
        "type" : 17
      }, {
        "name" : "gc_cpu_fraction",
        "type" : 30
      }, {
        "name" : "enablegc",
        "type" : 5
      }, {
        "name" : "debuggc",
        "type" : 5
      }, {
        "name" : "by_size",
        "type" : 31
      }, {
        "name" : "last_gc_nanotime",
        "type" : 14
      }, {
        "name" : "tinyallocs",
        "type" : 14
      }, {
        "name" : "last_next_gc",
        "type" : 14
      }, {
        "name" : "last_heap_inuse",
        "type" : 14
      }, {
        "name" : "triggerRatio",
        "type" : 30
      }, {
        "name" : "gc_trigger",
        "type" : 14
      }, {
        "name" : "heap_live",
        "type" : 14
      }, {
        "name" : "heap_scan",
        "type" : 14
      }, {
        "name" : "heap_marked",
        "type" : 14
      } ],
      "name" : "struct{alloc uint64; total_alloc uint64; sys uint64; nlookup uint64; nmalloc uint64; nfree uint64; heap_alloc uint64; heap_sys uint64; heap_idle uint64; heap_inuse uint64; heap_released uint64; heap_objects uint64; stacks_inuse uint64; stacks_sys uint64; mspan_inuse uint64; mspan_sys uint64; mcache_inuse uint64; mcache_sys uint64; buckhash_sys uint64; gc_sys uint64; other_sys uint64; next_gc uint64; last_gc_unix uint64; pause_total_ns uint64; pause_ns [256]uint64; pause_end [256]uint64; numgc uint32; numforcedgc uint32; gc_cpu_fraction float64; enablegc bool; debuggc bool; by_size [67]struct{size uint32; nmalloc uint64; nfree uint64}; last_gc_nanotime uint64; tinyallocs uint64; last_next_gc uint64; last_heap_inuse uint64; triggerRatio float64; gc_trigger uint64; heap_live uint64; heap_scan uint64; heap_marked uint64}",
      "type" : "Struct",
      "underlying" : 29
    }, {
      "elem" : 14,
      "name" : "[256]uint64",
      "type" : "Array",
      "underlying" : 30
    }, {
      "elem" : 32,
      "name" : "[67]struct{size uint32; nmalloc uint64; nfree uint64}",
      "type" : "Array",
      "underlying" : 31
    }, {
      "fields" : [ {
        "name" : "size",
        "type" : 17
      }, {
        "name" : "nmalloc",
        "type" : 14
      }, {
        "name" : "nfree",
        "type" : 14
      } ],
      "name" : "struct{size uint32; nmalloc uint64; nfree uint64}",
      "type" : "Struct",
      "underlying" : 32
    }, {
      "name" : "func(fn func())",
      "params" : 34,
      "recv" : -1,
      "results" : 58,
      "type" : "Signature",
      "underlying" : 33,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "fn",
        "type" : 35
      } ],
      "name" : "(fn func())",
      "type" : "Tuple",
      "underlying" : 34
    }, {
      "name" : "func()",
      "params" : 58,
      "recv" : -1,
      "results" : 58,
      "type" : "Signature",
      "underlying" : 35,
      "variadic" : false
    }, {
      "name" : "untyped bool",
      "type" : "Basic",
      "underlying" : 36
    }, {
      "name" : "func(npage uintptr)",
      "params" : 38,
      "recv" : -1,
      "results" : 58,
      "type" : "Signature",
      "underlying" : 37,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "npage",
        "type" : 2
      } ],
      "name" : "(npage uintptr)",
      "type" : "Tuple",
      "underlying" : 38
    }, {
      "name" : "func(npages uintptr, manual bool, spanclass runtime.spanClass, sysStat *uint64) (s *runtime.mspan)",
      "params" : 40,
      "recv" : -1,
      "results" : 41,
      "type" : "Signature",
      "underlying" : 39,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "npages",
        "type" : 2
      }, {
        "name" : "manual",
        "type" : 5
      }, {
        "name" : "spanclass",
        "type" : 3
      }, {
        "name" : "sysStat",
        "type" : 23
      } ],
      "name" : "(npages uintptr, manual bool, spanclass runtime.spanClass, sysStat *uint64)",
      "type" : "Tuple",
      "underlying" : 40
    }, {
      "fields" : [ {
        "name" : "s",
        "type" : 7
      } ],
      "name" : "(s *runtime.mspan)",
      "type" : "Tuple",
      "underlying" : 41
    }, {
      "name" : "untyped nil",
      "type" : "Basic",
      "underlying" : 42
    }, {
      "name" : "func(ptr unsafe.Pointer, n uintptr)",
      "params" : 44,
      "recv" : -1,
      "results" : 58,
      "type" : "Signature",
      "underlying" : 43,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "ptr",
        "type" : 29
      }, {
        "name" : "n",
        "type" : 2
      } ],
      "name" : "(ptr unsafe.Pointer, n uintptr)",
      "type" : "Tuple",
      "underlying" : 44
    }, {
      "name" : "func() uintptr",
      "params" : 58,
      "recv" : -1,
      "results" : 46,
      "type" : "Signature",
      "underlying" : 45,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 2
      } ],
      "name" : "(uintptr)",
      "type" : "Tuple",
      "underlying" : 46
    }, {
      "name" : "untyped int",
      "type" : "Basic",
      "underlying" : 47
    } ],
    "variables" : [ {
      "name" : "h",
      "package" : 0,
      "type" : 0,
      "exported" : false
    }, {
      "name" : "npages",
      "package" : 0,
      "type" : 2,
      "exported" : false
    }, {
      "name" : "spanclass",
      "package" : 0,
      "type" : 3,
      "exported" : false
    }, {
      "name" : "needzero",
      "package" : 0,
      "type" : 5,
      "exported" : false
    }, {
      "name" : "[res0]",
      "package" : 0,
      "type" : 7,
      "exported" : false
    }, {
      "name" : "memstats",
      "package" : 0,
      "type" : 28,
      "exported" : false
    }, {
      "name" : "s",
      "package" : 0,
      "type" : 7,
      "exported" : false
    }, {
      "name" : "sweepdone",
      "package" : 0,
      "type" : 17,
      "exported" : false
    }, {
      "name" : "heap_inuse",
      "package" : 0,
      "type" : 14,
      "exported" : false
    }, {
      "name" : "needzero",
      "package" : 0,
      "type" : 4,
      "exported" : false
    }, {
      "name" : "npages",
      "package" : 0,
      "type" : 2,
      "exported" : false
    } ]
  },
  "go-version" : "1.14.3"
}