{
  "usage" : {
    "file" : "mfixalloc.go",
    "label1" : "delegate",
    "label2" : "layout",
    "line" : "84",
    "module" : "std",
    "pkg" : "runtime",
    "project" : "kubernetes/kubernetes",
    "snippet" : "v := unsafe.Pointer(f.chunk)",
    "version" : "std"
  },
  "cfg" : {
    "blocks" : [ {
      "update-vars" : [ ],
      "successors" : [ 2 ],
      "in-vars" : [ 0 ],
      "exit" : false,
      "out-vars" : [ 0 ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[entry]",
      "entry" : true,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ ],
      "in-vars" : [ ],
      "exit" : true,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[exit]",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 3, 5 ],
      "in-vars" : [ 0 ],
      "exit" : false,
      "out-vars" : [ 0 ],
      "decl-vars" : [ ],
      "line-start" : 65,
      "ast" : {
        "condition" : {
          "go-type" : 17,
          "kind" : "expression",
          "left" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "size",
              "variable" : 2
            },
            "go-type" : 7,
            "kind" : "expression",
            "target" : {
              "go-type" : 4,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "f",
                "variable" : 0
              }
            },
            "type" : "selector"
          },
          "operator" : "==",
          "right" : {
            "go-type" : 7,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 68,
      "code" : "if f.size == 0 {\n\tprint(\"runtime: use of FixAlloc_Alloc before FixAlloc_Init\\n\")\n\tthrow(\"runtime: internal error\")\n}",
      "entry" : false,
      "use-vars" : [ 0 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 4 ],
      "in-vars" : [ 0 ],
      "exit" : false,
      "out-vars" : [ 0 ],
      "decl-vars" : [ ],
      "line-start" : 66,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 20,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "runtime: use of FixAlloc_Alloc before FixAlloc_Init\n"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 18,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Builtin",
              "kind" : "ident",
              "value" : "print"
            }
          },
          "go-type" : 1,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 66,
      "code" : "print(\"runtime: use of FixAlloc_Alloc before FixAlloc_Init\\n\")",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 5 ],
      "in-vars" : [ 0 ],
      "exit" : false,
      "out-vars" : [ 0 ],
      "decl-vars" : [ ],
      "line-start" : 67,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 20,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "runtime: internal error"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 21,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 1,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "throw"
            }
          },
          "go-type" : 1,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 67,
      "code" : "throw(\"runtime: internal error\")",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 6, 12 ],
      "in-vars" : [ 0 ],
      "exit" : false,
      "out-vars" : [ 0 ],
      "decl-vars" : [ ],
      "line-start" : 70,
      "ast" : {
        "condition" : {
          "go-type" : 17,
          "kind" : "expression",
          "left" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "list",
              "variable" : 3
            },
            "go-type" : 10,
            "kind" : "expression",
            "target" : {
              "go-type" : 4,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "f",
                "variable" : 0
              }
            },
            "type" : "selector"
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 23,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Nil",
              "kind" : "ident",
              "value" : "nil"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 78,
      "code" : "if f.list != nil {\n\tv := unsafe.Pointer(f.list)\n\tf.list = f.list.next\n\tf.inuse += f.size\n\tif f.zero {\n\t\tmemclrNoHeapPointers(v, f.size)\n\t}\n\treturn v\n}",
      "entry" : false,
      "use-vars" : [ 0 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 7 ],
      "in-vars" : [ 0 ],
      "exit" : false,
      "out-vars" : [ 0, 7 ],
      "decl-vars" : [ 7 ],
      "line-start" : 71,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "v"
          }
        } ],
        "right" : [ {
          "coerced-to" : {
            "go-type" : 3,
            "kind" : "type",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 1,
              "value" : "unsafe"
            },
            "type" : "identifier",
            "value" : {
              "go-type" : 3,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "Pointer"
            }
          },
          "go-type" : 3,
          "kind" : "expression",
          "target" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "list",
              "variable" : 3
            },
            "go-type" : 10,
            "kind" : "expression",
            "target" : {
              "go-type" : 4,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "f",
                "variable" : 0
              }
            },
            "type" : "selector"
          },
          "type" : "cast"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 71,
      "code" : "v := unsafe.Pointer(f.list)",
      "entry" : false,
      "use-vars" : [ 0 ]
    }, {
      "update-vars" : [ 0 ],
      "successors" : [ 8 ],
      "in-vars" : [ 0, 7 ],
      "exit" : false,
      "out-vars" : [ 0, 7 ],
      "decl-vars" : [ ],
      "line-start" : 72,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "list",
            "variable" : 3
          },
          "go-type" : 10,
          "kind" : "expression",
          "target" : {
            "go-type" : 4,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "f",
              "variable" : 0
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "next",
            "variable" : 4
          },
          "go-type" : 10,
          "kind" : "expression",
          "target" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "list",
              "variable" : 3
            },
            "go-type" : 10,
            "kind" : "expression",
            "target" : {
              "go-type" : 4,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "f",
                "variable" : 0
              }
            },
            "type" : "selector"
          },
          "type" : "selector"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 72,
      "code" : "f.list = f.list.next",
      "entry" : false,
      "use-vars" : [ 0 ]
    }, {
      "update-vars" : [ 0 ],
      "successors" : [ 9 ],
      "in-vars" : [ 0, 7 ],
      "exit" : false,
      "out-vars" : [ 0, 7 ],
      "decl-vars" : [ ],
      "line-start" : 73,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "inuse",
            "variable" : 5
          },
          "go-type" : 7,
          "kind" : "expression",
          "target" : {
            "go-type" : 4,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "f",
              "variable" : 0
            }
          },
          "type" : "selector"
        } ],
        "operator" : "+",
        "right" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "size",
            "variable" : 2
          },
          "go-type" : 7,
          "kind" : "expression",
          "target" : {
            "go-type" : 4,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "f",
              "variable" : 0
            }
          },
          "type" : "selector"
        } ],
        "type" : "assign-operator"
      },
      "assign-vars" : [ ],
      "line-end" : 73,
      "code" : "f.inuse += f.size",
      "entry" : false,
      "use-vars" : [ 0 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 10, 11 ],
      "in-vars" : [ 0, 7 ],
      "exit" : false,
      "out-vars" : [ 0, 7 ],
      "decl-vars" : [ ],
      "line-start" : 74,
      "ast" : {
        "condition" : {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "zero",
            "variable" : 6
          },
          "go-type" : 16,
          "kind" : "expression",
          "target" : {
            "go-type" : 4,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "f",
              "variable" : 0
            }
          },
          "type" : "selector"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 76,
      "code" : "if f.zero {\n\tmemclrNoHeapPointers(v, f.size)\n}",
      "entry" : false,
      "use-vars" : [ 0 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 11 ],
      "in-vars" : [ 0, 7 ],
      "exit" : false,
      "out-vars" : [ 7 ],
      "decl-vars" : [ ],
      "line-start" : 75,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 3,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "v",
              "variable" : 7
            }
          }, {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "size",
              "variable" : 2
            },
            "go-type" : 7,
            "kind" : "expression",
            "target" : {
              "go-type" : 4,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "f",
                "variable" : 0
              }
            },
            "type" : "selector"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 24,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 2,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "memclrNoHeapPointers"
            }
          },
          "go-type" : 1,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 75,
      "code" : "memclrNoHeapPointers(v, f.size)",
      "entry" : false,
      "use-vars" : [ 7, 0 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 7 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 77,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 3,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "v",
            "variable" : 7
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 77,
      "code" : "return v",
      "entry" : false,
      "use-vars" : [ 7 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 13, 15 ],
      "in-vars" : [ 0 ],
      "exit" : false,
      "out-vars" : [ 0 ],
      "decl-vars" : [ ],
      "line-start" : 79,
      "ast" : {
        "condition" : {
          "go-type" : 17,
          "kind" : "expression",
          "left" : {
            "coerced-to" : {
              "go-type" : 7,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 7,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "uintptr"
              }
            },
            "go-type" : 7,
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "nchunk",
                "variable" : 8
              },
              "go-type" : 13,
              "kind" : "expression",
              "target" : {
                "go-type" : 4,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "f",
                  "variable" : 0
                }
              },
              "type" : "selector"
            },
            "type" : "cast"
          },
          "operator" : "<",
          "right" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "size",
              "variable" : 2
            },
            "go-type" : 7,
            "kind" : "expression",
            "target" : {
              "go-type" : 4,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "f",
                "variable" : 0
              }
            },
            "type" : "selector"
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 82,
      "code" : "if uintptr(f.nchunk) < f.size {\n\tf.chunk = uintptr(persistentalloc(_FixAllocChunk, 0, f.stat))\n\tf.nchunk = _FixAllocChunk\n}",
      "entry" : false,
      "use-vars" : [ 0 ]
    }, {
      "update-vars" : [ 0 ],
      "successors" : [ 14 ],
      "in-vars" : [ 0 ],
      "exit" : false,
      "out-vars" : [ 0 ],
      "decl-vars" : [ ],
      "line-start" : 80,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "chunk",
            "variable" : 9
          },
          "go-type" : 7,
          "kind" : "expression",
          "target" : {
            "go-type" : 4,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "f",
              "variable" : 0
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "coerced-to" : {
            "go-type" : 7,
            "kind" : "type",
            "type" : "identifier",
            "value" : {
              "go-type" : 7,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "uintptr"
            }
          },
          "go-type" : 7,
          "kind" : "expression",
          "target" : {
            "arguments" : [ {
              "go-type" : 7,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "16384"
              }
            }, {
              "go-type" : 7,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "0"
              }
            }, {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "stat",
                "variable" : 10
              },
              "go-type" : 14,
              "kind" : "expression",
              "target" : {
                "go-type" : 4,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "f",
                  "variable" : 0
                }
              },
              "type" : "selector"
            } ],
            "ellipsis" : false,
            "function" : {
              "go-type" : 26,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "function" : 3,
                "ident-kind" : "Func",
                "kind" : "ident",
                "value" : "persistentalloc"
              }
            },
            "go-type" : 3,
            "kind" : "expression",
            "type" : "call"
          },
          "type" : "cast"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 80,
      "code" : "f.chunk = uintptr(persistentalloc(_FixAllocChunk, 0, f.stat))",
      "entry" : false,
      "use-vars" : [ 0 ]
    }, {
      "update-vars" : [ 0 ],
      "successors" : [ 15 ],
      "in-vars" : [ 0 ],
      "exit" : false,
      "out-vars" : [ 0 ],
      "decl-vars" : [ ],
      "line-start" : 81,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "nchunk",
            "variable" : 8
          },
          "go-type" : 13,
          "kind" : "expression",
          "target" : {
            "go-type" : 4,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "f",
              "variable" : 0
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "go-type" : 13,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "16384"
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 81,
      "code" : "f.nchunk = _FixAllocChunk",
      "entry" : false,
      "use-vars" : [ 0 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 16 ],
      "in-vars" : [ 0 ],
      "exit" : false,
      "out-vars" : [ 0, 11 ],
      "decl-vars" : [ 11 ],
      "line-start" : 84,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "v"
          }
        } ],
        "right" : [ {
          "coerced-to" : {
            "go-type" : 3,
            "kind" : "type",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 1,
              "value" : "unsafe"
            },
            "type" : "identifier",
            "value" : {
              "go-type" : 3,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "Pointer"
            }
          },
          "go-type" : 3,
          "kind" : "expression",
          "target" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "chunk",
              "variable" : 9
            },
            "go-type" : 7,
            "kind" : "expression",
            "target" : {
              "go-type" : 4,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "f",
                "variable" : 0
              }
            },
            "type" : "selector"
          },
          "type" : "cast"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 84,
      "code" : "v := unsafe.Pointer(f.chunk)",
      "entry" : false,
      "use-vars" : [ 0 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 17, 18 ],
      "in-vars" : [ 11, 0 ],
      "exit" : false,
      "out-vars" : [ 0, 11 ],
      "decl-vars" : [ ],
      "line-start" : 85,
      "ast" : {
        "condition" : {
          "go-type" : 17,
          "kind" : "expression",
          "left" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "first",
              "variable" : 12
            },
            "go-type" : 8,
            "kind" : "expression",
            "target" : {
              "go-type" : 4,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "f",
                "variable" : 0
              }
            },
            "type" : "selector"
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 23,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Nil",
              "kind" : "ident",
              "value" : "nil"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 87,
      "code" : "if f.first != nil {\n\tf.first(f.arg, v)\n}",
      "entry" : false,
      "use-vars" : [ 0 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 18 ],
      "in-vars" : [ 0, 11 ],
      "exit" : false,
      "out-vars" : [ 0, 11 ],
      "decl-vars" : [ ],
      "line-start" : 86,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "arg",
              "variable" : 13
            },
            "go-type" : 3,
            "kind" : "expression",
            "target" : {
              "go-type" : 4,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "f",
                "variable" : 0
              }
            },
            "type" : "selector"
          }, {
            "go-type" : 3,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "v",
              "variable" : 11
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "first",
              "variable" : 12
            },
            "go-type" : 8,
            "kind" : "expression",
            "target" : {
              "go-type" : 4,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "f",
                "variable" : 0
              }
            },
            "type" : "selector"
          },
          "go-type" : 1,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 86,
      "code" : "f.first(f.arg, v)",
      "entry" : false,
      "use-vars" : [ 0, 11 ]
    }, {
      "update-vars" : [ 0 ],
      "successors" : [ 19 ],
      "in-vars" : [ 0, 11 ],
      "exit" : false,
      "out-vars" : [ 0, 11 ],
      "decl-vars" : [ ],
      "line-start" : 88,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "chunk",
            "variable" : 9
          },
          "go-type" : 7,
          "kind" : "expression",
          "target" : {
            "go-type" : 4,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "f",
              "variable" : 0
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "go-type" : 7,
          "kind" : "expression",
          "left" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "chunk",
              "variable" : 9
            },
            "go-type" : 7,
            "kind" : "expression",
            "target" : {
              "go-type" : 4,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "f",
                "variable" : 0
              }
            },
            "type" : "selector"
          },
          "operator" : "+",
          "right" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "size",
              "variable" : 2
            },
            "go-type" : 7,
            "kind" : "expression",
            "target" : {
              "go-type" : 4,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "f",
                "variable" : 0
              }
            },
            "type" : "selector"
          },
          "type" : "binary"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 88,
      "code" : "f.chunk = f.chunk + f.size",
      "entry" : false,
      "use-vars" : [ 0 ]
    }, {
      "update-vars" : [ 0 ],
      "successors" : [ 20 ],
      "in-vars" : [ 0, 11 ],
      "exit" : false,
      "out-vars" : [ 0, 11 ],
      "decl-vars" : [ ],
      "line-start" : 89,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "nchunk",
            "variable" : 8
          },
          "go-type" : 13,
          "kind" : "expression",
          "target" : {
            "go-type" : 4,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "f",
              "variable" : 0
            }
          },
          "type" : "selector"
        } ],
        "operator" : "-",
        "right" : [ {
          "coerced-to" : {
            "go-type" : 13,
            "kind" : "type",
            "type" : "identifier",
            "value" : {
              "go-type" : 13,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "uint32"
            }
          },
          "go-type" : 13,
          "kind" : "expression",
          "target" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "size",
              "variable" : 2
            },
            "go-type" : 7,
            "kind" : "expression",
            "target" : {
              "go-type" : 4,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "f",
                "variable" : 0
              }
            },
            "type" : "selector"
          },
          "type" : "cast"
        } ],
        "type" : "assign-operator"
      },
      "assign-vars" : [ ],
      "line-end" : 89,
      "code" : "f.nchunk -= uint32(f.size)",
      "entry" : false,
      "use-vars" : [ 0 ]
    }, {
      "update-vars" : [ 0 ],
      "successors" : [ 21 ],
      "in-vars" : [ 0, 11 ],
      "exit" : false,
      "out-vars" : [ 11 ],
      "decl-vars" : [ ],
      "line-start" : 90,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "inuse",
            "variable" : 5
          },
          "go-type" : 7,
          "kind" : "expression",
          "target" : {
            "go-type" : 4,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "f",
              "variable" : 0
            }
          },
          "type" : "selector"
        } ],
        "operator" : "+",
        "right" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "size",
            "variable" : 2
          },
          "go-type" : 7,
          "kind" : "expression",
          "target" : {
            "go-type" : 4,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "f",
              "variable" : 0
            }
          },
          "type" : "selector"
        } ],
        "type" : "assign-operator"
      },
      "assign-vars" : [ ],
      "line-end" : 90,
      "code" : "f.inuse += f.size",
      "entry" : false,
      "use-vars" : [ 0 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 11 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 91,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 3,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "v",
            "variable" : 11
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 91,
      "code" : "return v",
      "entry" : false,
      "use-vars" : [ 11 ]
    } ],
    "code" : "func (f *fixalloc) alloc() unsafe.Pointer {\n\tif f.size == 0 {\n\t\tprint(\"runtime: use of FixAlloc_Alloc before FixAlloc_Init\\n\")\n\t\tthrow(\"runtime: internal error\")\n\t}\n\n\tif f.list != nil {\n\t\tv := unsafe.Pointer(f.list)\n\t\tf.list = f.list.next\n\t\tf.inuse += f.size\n\t\tif f.zero {\n\t\t\tmemclrNoHeapPointers(v, f.size)\n\t\t}\n\t\treturn v\n\t}\n\tif uintptr(f.nchunk) < f.size {\n\t\tf.chunk = uintptr(persistentalloc(_FixAllocChunk, 0, f.stat))\n\t\tf.nchunk = _FixAllocChunk\n\t}\n\n\tv := unsafe.Pointer(f.chunk)\n\tif f.first != nil {\n\t\tf.first(f.arg, v)\n\t}\n\tf.chunk = f.chunk + f.size\n\tf.nchunk -= uint32(f.size)\n\tf.inuse += f.size\n\treturn v\n}",
    "defines" : [ 0 ],
    "functions" : [ {
      "name" : "alloc",
      "package" : 0,
      "type" : 0,
      "exported" : false
    }, {
      "name" : "throw",
      "package" : 0,
      "type" : 21,
      "exported" : false
    }, {
      "name" : "memclrNoHeapPointers",
      "package" : 0,
      "type" : 24,
      "exported" : false
    }, {
      "name" : "persistentalloc",
      "package" : 0,
      "type" : 26,
      "exported" : false
    } ],
    "line-end" : 92,
    "line-start" : 64,
    "names" : [ "alloc" ],
    "package" : 0,
    "packages" : [ {
      "name" : "runtime",
      "path" : "runtime"
    }, {
      "name" : "unsafe",
      "path" : "unsafe"
    } ],
    "params" : [ ],
    "receivers" : [ 0 ],
    "results" : [ 1 ],
    "type" : "function",
    "types" : [ {
      "name" : "func() unsafe.Pointer",
      "params" : 1,
      "recv" : 0,
      "results" : 2,
      "type" : "Signature",
      "underlying" : 0,
      "variadic" : false
    }, {
      "fields" : [ ],
      "name" : "()",
      "type" : "Tuple",
      "underlying" : 1
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 3
      } ],
      "name" : "(unsafe.Pointer)",
      "type" : "Tuple",
      "underlying" : 2
    }, {
      "local-name" : "Pointer",
      "name" : "unsafe.Pointer",
      "package" : 1,
      "type" : "Basic",
      "underlying" : 3
    }, {
      "elem" : 5,
      "name" : "*runtime.fixalloc",
      "type" : "Pointer",
      "underlying" : 4
    }, {
      "local-name" : "fixalloc",
      "name" : "runtime.fixalloc",
      "package" : 0,
      "type" : "Named",
      "underlying" : 6
    }, {
      "fields" : [ {
        "name" : "size",
        "type" : 7
      }, {
        "name" : "first",
        "type" : 8
      }, {
        "name" : "arg",
        "type" : 3
      }, {
        "name" : "list",
        "type" : 10
      }, {
        "name" : "chunk",
        "type" : 7
      }, {
        "name" : "nchunk",
        "type" : 13
      }, {
        "name" : "inuse",
        "type" : 7
      }, {
        "name" : "stat",
        "type" : 14
      }, {
        "name" : "zero",
        "type" : 16
      } ],
      "name" : "struct{size uintptr; first func(arg unsafe.Pointer, p unsafe.Pointer); arg unsafe.Pointer; list *runtime.mlink; chunk uintptr; nchunk uint32; inuse uintptr; stat *uint64; zero bool}",
      "type" : "Struct",
      "underlying" : 6
    }, {
      "name" : "uintptr",
      "type" : "Basic",
      "underlying" : 7
    }, {
      "name" : "func(arg unsafe.Pointer, p unsafe.Pointer)",
      "params" : 9,
      "recv" : -1,
      "results" : 1,
      "type" : "Signature",
      "underlying" : 8,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "arg",
        "type" : 3
      }, {
        "name" : "p",
        "type" : 3
      } ],
      "name" : "(arg unsafe.Pointer, p unsafe.Pointer)",
      "type" : "Tuple",
      "underlying" : 9
    }, {
      "elem" : 11,
      "name" : "*runtime.mlink",
      "type" : "Pointer",
      "underlying" : 10
    }, {
      "local-name" : "mlink",
      "name" : "runtime.mlink",
      "package" : 0,
      "type" : "Named",
      "underlying" : 12
    }, {
      "fields" : [ {
        "name" : "next",
        "type" : 10
      } ],
      "name" : "struct{next *runtime.mlink}",
      "type" : "Struct",
      "underlying" : 12
    }, {
      "name" : "uint32",
      "type" : "Basic",
      "underlying" : 13
    }, {
      "elem" : 15,
      "name" : "*uint64",
      "type" : "Pointer",
      "underlying" : 14
    }, {
      "name" : "uint64",
      "type" : "Basic",
      "underlying" : 15
    }, {
      "name" : "bool",
      "type" : "Basic",
      "underlying" : 16
    }, {
      "name" : "untyped bool",
      "type" : "Basic",
      "underlying" : 17
    }, {
      "name" : "func(string)",
      "params" : 19,
      "recv" : -1,
      "results" : 1,
      "type" : "Signature",
      "underlying" : 18,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 20
      } ],
      "name" : "(string)",
      "type" : "Tuple",
      "underlying" : 19
    }, {
      "name" : "string",
      "type" : "Basic",
      "underlying" : 20
    }, {
      "name" : "func(s string)",
      "params" : 22,
      "recv" : -1,
      "results" : 1,
      "type" : "Signature",
      "underlying" : 21,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "s",
        "type" : 20
      } ],
      "name" : "(s string)",
      "type" : "Tuple",
      "underlying" : 22
    }, {
      "name" : "untyped nil",
      "type" : "Basic",
      "underlying" : 23
    }, {
      "name" : "func(ptr unsafe.Pointer, n uintptr)",
      "params" : 25,
      "recv" : -1,
      "results" : 1,
      "type" : "Signature",
      "underlying" : 24,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "ptr",
        "type" : 3
      }, {
        "name" : "n",
        "type" : 7
      } ],
      "name" : "(ptr unsafe.Pointer, n uintptr)",
      "type" : "Tuple",
      "underlying" : 25
    }, {
      "name" : "func(size uintptr, align uintptr, sysStat *uint64) unsafe.Pointer",
      "params" : 27,
      "recv" : -1,
      "results" : 2,
      "type" : "Signature",
      "underlying" : 26,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "size",
        "type" : 7
      }, {
        "name" : "align",
        "type" : 7
      }, {
        "name" : "sysStat",
        "type" : 14
      } ],
      "name" : "(size uintptr, align uintptr, sysStat *uint64)",
      "type" : "Tuple",
      "underlying" : 27
    } ],
    "variables" : [ {
      "name" : "f",
      "package" : 0,
      "type" : 4,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "[res0]",
      "package" : 0,
      "type" : 3,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "size",
      "package" : 0,
      "type" : 7,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "list",
      "package" : 0,
      "type" : 10,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "next",
      "package" : 0,
      "type" : 10,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "inuse",
      "package" : 0,
      "type" : 7,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "zero",
      "package" : 0,
      "type" : 16,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "v",
      "package" : 0,
      "type" : 3,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "nchunk",
      "package" : 0,
      "type" : 13,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "chunk",
      "package" : 0,
      "type" : 7,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "stat",
      "package" : 0,
      "type" : 14,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "v",
      "package" : 0,
      "type" : 3,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "first",
      "package" : 0,
      "type" : 8,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "arg",
      "package" : 0,
      "type" : 3,
      "exported" : false,
      "embedded" : false,
      "field" : true
    } ]
  },
  "go-version" : "1.14.3"
}