{
  "usage" : {
    "file" : "stack.go",
    "label1" : "delegate",
    "label2" : "layout",
    "line" : "1063",
    "module" : "std",
    "pkg" : "runtime",
    "project" : "kubernetes/kubernetes",
    "snippet" : "fn = unsafe.Pointer(funcPC(nilfunc))",
    "version" : "std"
  },
  "cfg" : {
    "blocks" : [ {
      "update-vars" : [ ],
      "successors" : [ 2 ],
      "in-vars" : [ 1, 0 ],
      "exit" : false,
      "out-vars" : [ 1, 0 ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[entry]",
      "entry" : true,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ ],
      "in-vars" : [ ],
      "exit" : true,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[exit]",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 3 ],
      "in-vars" : [ 0, 1 ],
      "exit" : false,
      "out-vars" : [ 0, 1 ],
      "decl-vars" : [ 2 ],
      "line-start" : 1059,
      "ast" : {
        "kind" : "statement",
        "target" : {
          "kind" : "decl",
          "specs" : [ {
            "comments" : [ ],
            "declared-type" : {
              "go-type" : 7,
              "kind" : "type",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 1,
                "value" : "unsafe"
              },
              "type" : "identifier",
              "value" : {
                "go-type" : 7,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "Pointer"
              }
            },
            "kind" : "spec",
            "names" : [ {
              "ident-kind" : "NoKind",
              "kind" : "ident",
              "value" : "fn"
            } ],
            "type" : "var",
            "values" : [ ]
          } ],
          "type" : "var"
        },
        "type" : "declaration"
      },
      "assign-vars" : [ ],
      "line-end" : 1059,
      "code" : "var fn unsafe.Pointer",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 4, 5 ],
      "in-vars" : [ 0, 1 ],
      "exit" : false,
      "out-vars" : [ 0, 1 ],
      "decl-vars" : [ ],
      "line-start" : 1060,
      "ast" : {
        "condition" : {
          "go-type" : 14,
          "kind" : "expression",
          "left" : {
            "go-type" : 10,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "fv",
              "variable" : 1
            }
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 15,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Nil",
              "kind" : "ident",
              "value" : "nil"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 1064,
      "code" : "if fv != nil {\n\tfn = unsafe.Pointer(fv.fn)\n} else {\n\tfn = unsafe.Pointer(funcPC(nilfunc))\n}",
      "entry" : false,
      "use-vars" : [ 1 ]
    }, {
      "update-vars" : [ 2 ],
      "successors" : [ 6 ],
      "in-vars" : [ 0, 1 ],
      "exit" : false,
      "out-vars" : [ 0, 2, 1 ],
      "decl-vars" : [ ],
      "line-start" : 1061,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 7,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "fn",
            "variable" : 2
          }
        } ],
        "right" : [ {
          "coerced-to" : {
            "go-type" : 7,
            "kind" : "type",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 1,
              "value" : "unsafe"
            },
            "type" : "identifier",
            "value" : {
              "go-type" : 7,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "Pointer"
            }
          },
          "go-type" : 7,
          "kind" : "expression",
          "target" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "fn",
              "variable" : 3
            },
            "go-type" : 5,
            "kind" : "expression",
            "target" : {
              "go-type" : 10,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "fv",
                "variable" : 1
              }
            },
            "type" : "selector"
          },
          "type" : "cast"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 2 ],
      "line-end" : 1061,
      "code" : "fn = unsafe.Pointer(fv.fn)",
      "entry" : false,
      "use-vars" : [ 1 ]
    }, {
      "update-vars" : [ 2 ],
      "successors" : [ 6 ],
      "in-vars" : [ 1, 0 ],
      "exit" : false,
      "out-vars" : [ 0, 2, 1 ],
      "decl-vars" : [ ],
      "line-start" : 1063,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 7,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "fn",
            "variable" : 2
          }
        } ],
        "right" : [ {
          "coerced-to" : {
            "go-type" : 7,
            "kind" : "type",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 1,
              "value" : "unsafe"
            },
            "type" : "identifier",
            "value" : {
              "go-type" : 7,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "Pointer"
            }
          },
          "go-type" : 7,
          "kind" : "expression",
          "target" : {
            "arguments" : [ {
              "go-type" : 20,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "function" : 2,
                "ident-kind" : "Func",
                "kind" : "ident",
                "value" : "nilfunc"
              }
            } ],
            "ellipsis" : false,
            "function" : {
              "go-type" : 16,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "function" : 1,
                "ident-kind" : "Func",
                "kind" : "ident",
                "value" : "funcPC"
              }
            },
            "go-type" : 5,
            "kind" : "expression",
            "type" : "call"
          },
          "type" : "cast"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 2 ],
      "line-end" : 1063,
      "code" : "fn = unsafe.Pointer(funcPC(nilfunc))",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 0, 2, 1 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 1065,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "gobuf",
              "variable" : 0
            }
          }, {
            "go-type" : 7,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "fn",
              "variable" : 2
            }
          }, {
            "coerced-to" : {
              "go-type" : 7,
              "kind" : "type",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 1,
                "value" : "unsafe"
              },
              "type" : "identifier",
              "value" : {
                "go-type" : 7,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "Pointer"
              }
            },
            "go-type" : 7,
            "kind" : "expression",
            "target" : {
              "go-type" : 10,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "fv",
                "variable" : 1
              }
            },
            "type" : "cast"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 21,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 3,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "gostartcall"
            }
          },
          "go-type" : 13,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 1065,
      "code" : "gostartcall(gobuf, fn, unsafe.Pointer(fv))",
      "entry" : false,
      "use-vars" : [ 0, 2, 1 ]
    } ],
    "code" : "// adjust Gobuf as if it executed a call to fn\n// and then did an immediate gosave.\nfunc gostartcallfn(gobuf *gobuf, fv *funcval) {\n\tvar fn unsafe.Pointer\n\tif fv != nil {\n\t\tfn = unsafe.Pointer(fv.fn)\n\t} else {\n\t\tfn = unsafe.Pointer(funcPC(nilfunc))\n\t}\n\tgostartcall(gobuf, fn, unsafe.Pointer(fv))\n}",
    "defines" : [ 0 ],
    "functions" : [ {
      "name" : "gostartcallfn",
      "package" : 0,
      "type" : 0,
      "exported" : false
    }, {
      "name" : "funcPC",
      "package" : 0,
      "type" : 16,
      "exported" : false
    }, {
      "name" : "nilfunc",
      "package" : 0,
      "type" : 20,
      "exported" : false
    }, {
      "name" : "gostartcall",
      "package" : 0,
      "type" : 21,
      "exported" : false
    } ],
    "line-end" : 1066,
    "line-start" : 1058,
    "names" : [ "gostartcallfn" ],
    "package" : 0,
    "packages" : [ {
      "name" : "runtime",
      "path" : "runtime"
    }, {
      "name" : "unsafe",
      "path" : "unsafe"
    }, {
      "name" : "sys",
      "path" : "runtime/internal/sys"
    } ],
    "params" : [ 0, 1 ],
    "receivers" : [ ],
    "results" : [ ],
    "type" : "function",
    "types" : [ {
      "name" : "func(gobuf *runtime.gobuf, fv *runtime.funcval)",
      "params" : 1,
      "recv" : -1,
      "results" : 13,
      "type" : "Signature",
      "underlying" : 0,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "gobuf",
        "type" : 2
      }, {
        "name" : "fv",
        "type" : 10
      } ],
      "name" : "(gobuf *runtime.gobuf, fv *runtime.funcval)",
      "type" : "Tuple",
      "underlying" : 1
    }, {
      "elem" : 3,
      "name" : "*runtime.gobuf",
      "type" : "Pointer",
      "underlying" : 2
    }, {
      "local-name" : "gobuf",
      "name" : "runtime.gobuf",
      "package" : 0,
      "type" : "Named",
      "underlying" : 4
    }, {
      "fields" : [ {
        "name" : "sp",
        "type" : 5
      }, {
        "name" : "pc",
        "type" : 5
      }, {
        "name" : "g",
        "type" : 6
      }, {
        "name" : "ctxt",
        "type" : 7
      }, {
        "name" : "ret",
        "type" : 8
      }, {
        "name" : "lr",
        "type" : 5
      }, {
        "name" : "bp",
        "type" : 5
      } ],
      "name" : "struct{sp uintptr; pc uintptr; g runtime.guintptr; ctxt unsafe.Pointer; ret runtime/internal/sys.Uintreg; lr uintptr; bp uintptr}",
      "type" : "Struct",
      "underlying" : 4
    }, {
      "name" : "uintptr",
      "type" : "Basic",
      "underlying" : 5
    }, {
      "local-name" : "guintptr",
      "name" : "runtime.guintptr",
      "package" : 0,
      "type" : "Named",
      "underlying" : 5
    }, {
      "local-name" : "Pointer",
      "name" : "unsafe.Pointer",
      "package" : 1,
      "type" : "Basic",
      "underlying" : 7
    }, {
      "local-name" : "Uintreg",
      "name" : "runtime/internal/sys.Uintreg",
      "package" : 2,
      "type" : "Named",
      "underlying" : 9
    }, {
      "name" : "uint64",
      "type" : "Basic",
      "underlying" : 9
    }, {
      "elem" : 11,
      "name" : "*runtime.funcval",
      "type" : "Pointer",
      "underlying" : 10
    }, {
      "local-name" : "funcval",
      "name" : "runtime.funcval",
      "package" : 0,
      "type" : "Named",
      "underlying" : 12
    }, {
      "fields" : [ {
        "name" : "fn",
        "type" : 5
      } ],
      "name" : "struct{fn uintptr}",
      "type" : "Struct",
      "underlying" : 12
    }, {
      "fields" : [ ],
      "name" : "()",
      "type" : "Tuple",
      "underlying" : 13
    }, {
      "name" : "untyped bool",
      "type" : "Basic",
      "underlying" : 14
    }, {
      "name" : "untyped nil",
      "type" : "Basic",
      "underlying" : 15
    }, {
      "name" : "func(f interface{}) uintptr",
      "params" : 17,
      "recv" : -1,
      "results" : 19,
      "type" : "Signature",
      "underlying" : 16,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "f",
        "type" : 18
      } ],
      "name" : "(f interface{})",
      "type" : "Tuple",
      "underlying" : 17
    }, {
      "methods" : [ ],
      "name" : "interface{}",
      "type" : "Interface",
      "underlying" : 18
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 5
      } ],
      "name" : "(uintptr)",
      "type" : "Tuple",
      "underlying" : 19
    }, {
      "name" : "func()",
      "params" : 13,
      "recv" : -1,
      "results" : 13,
      "type" : "Signature",
      "underlying" : 20,
      "variadic" : false
    }, {
      "name" : "func(buf *runtime.gobuf, fn unsafe.Pointer, ctxt unsafe.Pointer)",
      "params" : 22,
      "recv" : -1,
      "results" : 13,
      "type" : "Signature",
      "underlying" : 21,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "buf",
        "type" : 2
      }, {
        "name" : "fn",
        "type" : 7
      }, {
        "name" : "ctxt",
        "type" : 7
      } ],
      "name" : "(buf *runtime.gobuf, fn unsafe.Pointer, ctxt unsafe.Pointer)",
      "type" : "Tuple",
      "underlying" : 22
    } ],
    "variables" : [ {
      "name" : "gobuf",
      "package" : 0,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "fv",
      "package" : 0,
      "type" : 10,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "fn",
      "package" : 0,
      "type" : 7,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "fn",
      "package" : 0,
      "type" : 5,
      "exported" : false,
      "embedded" : false,
      "field" : true
    } ]
  },
  "go-version" : "1.14.3"
}