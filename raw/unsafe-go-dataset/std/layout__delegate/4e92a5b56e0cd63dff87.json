{
  "usage" : {
    "file" : "malloc.go",
    "label1" : "delegate",
    "label2" : "layout",
    "line" : "1040",
    "module" : "std",
    "pkg" : "runtime",
    "project" : "kubernetes/kubernetes",
    "snippet" : "memclrNoHeapPointers(unsafe.Pointer(v), size)",
    "version" : "std"
  },
  "cfg" : {
    "blocks" : [ {
      "update-vars" : [ ],
      "successors" : [ 2 ],
      "in-vars" : [ 4, 2, 5, 6, 7, 0, 8, 9, 10, 11, 12, 1, 13 ],
      "exit" : false,
      "out-vars" : [ 8, 1, 13, 12, 0, 9, 2, 5, 6, 10, 7, 11, 4 ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[entry]",
      "entry" : true,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ ],
      "in-vars" : [ ],
      "exit" : true,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[exit]",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 3, 4 ],
      "in-vars" : [ 0, 8, 2, 5, 11, 4, 1, 13, 9, 6, 10, 7, 12 ],
      "exit" : false,
      "out-vars" : [ 5, 6, 7, 8, 13, 9, 2, 10, 11, 12, 0, 4, 1 ],
      "decl-vars" : [ ],
      "line-start" : 892,
      "ast" : {
        "condition" : {
          "go-type" : 33,
          "kind" : "expression",
          "left" : {
            "go-type" : 6,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "gcphase",
              "variable" : 6
            }
          },
          "operator" : "==",
          "right" : {
            "go-type" : 6,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "2"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 894,
      "code" : "if gcphase == _GCmarktermination {\n\tthrow(\"mallocgc called with gcphase == _GCmarktermination\")\n}",
      "entry" : false,
      "use-vars" : [ 6 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 4 ],
      "in-vars" : [ 1, 5, 10, 7, 11, 8, 4, 9, 2, 6, 12, 0, 13 ],
      "exit" : false,
      "out-vars" : [ 1, 13, 2, 10, 7, 11, 12, 4, 8, 9, 5, 6, 0 ],
      "decl-vars" : [ ],
      "line-start" : 893,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 37,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "mallocgc called with gcphase == _GCmarktermination"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 35,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 1,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "throw"
            }
          },
          "go-type" : 34,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 893,
      "code" : "throw(\"mallocgc called with gcphase == _GCmarktermination\")",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 5, 6 ],
      "in-vars" : [ 1, 2, 5, 7, 11, 0, 8, 9, 6, 10, 12, 4, 13 ],
      "exit" : false,
      "out-vars" : [ 0, 8, 4, 1, 13, 9, 2, 5, 6, 10, 7, 11, 12 ],
      "decl-vars" : [ ],
      "line-start" : 896,
      "ast" : {
        "condition" : {
          "go-type" : 33,
          "kind" : "expression",
          "left" : {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "size",
              "variable" : 0
            }
          },
          "operator" : "==",
          "right" : {
            "go-type" : 2,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 898,
      "code" : "if size == 0 {\n\treturn unsafe.Pointer(&zerobase)\n}",
      "entry" : false,
      "use-vars" : [ 0 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 4 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 897,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "coerced-to" : {
            "go-type" : 11,
            "kind" : "type",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 1,
              "value" : "unsafe"
            },
            "type" : "identifier",
            "value" : {
              "go-type" : 11,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "Pointer"
            }
          },
          "go-type" : 11,
          "kind" : "expression",
          "target" : {
            "go-type" : 38,
            "kind" : "expression",
            "operator" : "&",
            "target" : {
              "go-type" : 2,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "zerobase",
                "variable" : 4
              }
            },
            "type" : "unary"
          },
          "type" : "cast"
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 897,
      "code" : "return unsafe.Pointer(&zerobase)",
      "entry" : false,
      "use-vars" : [ 4 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 7, 17 ],
      "in-vars" : [ 13, 9, 10, 11, 12, 8, 1, 2, 5, 6, 7, 0 ],
      "exit" : false,
      "out-vars" : [ 10, 11, 12, 8, 1, 13, 9, 6, 0, 2, 5, 7 ],
      "decl-vars" : [ ],
      "line-start" : 900,
      "ast" : {
        "condition" : {
          "go-type" : 33,
          "kind" : "expression",
          "left" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "sbrk",
              "variable" : 14
            },
            "go-type" : 17,
            "kind" : "expression",
            "target" : {
              "go-type" : 32,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "debug",
                "variable" : 13
              }
            },
            "type" : "selector"
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 17,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 921,
      "code" : "if debug.sbrk != 0 {\n\talign := uintptr(16)\n\tif typ != nil {\n\n\t\tif size&7 == 0 {\n\t\t\talign = 8\n\t\t} else if size&3 == 0 {\n\t\t\talign = 4\n\t\t} else if size&1 == 0 {\n\t\t\talign = 2\n\t\t} else {\n\t\t\talign = 1\n\t\t}\n\t}\n\treturn persistentalloc(size, align, &memstats.other_sys)\n}",
      "entry" : false,
      "use-vars" : [ 13 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 8 ],
      "in-vars" : [ 0, 1, 10 ],
      "exit" : false,
      "out-vars" : [ 0, 1, 15, 10 ],
      "decl-vars" : [ 15 ],
      "line-start" : 901,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "align"
          }
        } ],
        "right" : [ {
          "go-type" : 2,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "16"
          }
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 901,
      "code" : "align := uintptr(16)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 9, 16 ],
      "in-vars" : [ 0, 1, 15, 10 ],
      "exit" : false,
      "out-vars" : [ 0, 15, 10 ],
      "decl-vars" : [ ],
      "line-start" : 902,
      "ast" : {
        "condition" : {
          "go-type" : 33,
          "kind" : "expression",
          "left" : {
            "go-type" : 3,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "typ",
              "variable" : 1
            }
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 39,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Nil",
              "kind" : "ident",
              "value" : "nil"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 919,
      "code" : "if typ != nil {\n\n\tif size&7 == 0 {\n\t\talign = 8\n\t} else if size&3 == 0 {\n\t\talign = 4\n\t} else if size&1 == 0 {\n\t\talign = 2\n\t} else {\n\t\talign = 1\n\t}\n}",
      "entry" : false,
      "use-vars" : [ 1 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 10, 11 ],
      "in-vars" : [ 0, 10 ],
      "exit" : false,
      "out-vars" : [ 0, 10 ],
      "decl-vars" : [ ],
      "line-start" : 910,
      "ast" : {
        "condition" : {
          "go-type" : 33,
          "kind" : "expression",
          "left" : {
            "go-type" : 2,
            "kind" : "expression",
            "left" : {
              "go-type" : 2,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "size",
                "variable" : 0
              }
            },
            "operator" : "&",
            "right" : {
              "go-type" : 2,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "7"
              }
            },
            "type" : "binary"
          },
          "operator" : "==",
          "right" : {
            "go-type" : 2,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 918,
      "code" : "if size&7 == 0 {\n\talign = 8\n} else if size&3 == 0 {\n\talign = 4\n} else if size&1 == 0 {\n\talign = 2\n} else {\n\talign = 1\n}",
      "entry" : false,
      "use-vars" : [ 0 ]
    }, {
      "update-vars" : [ 15 ],
      "successors" : [ 16 ],
      "in-vars" : [ 0, 10 ],
      "exit" : false,
      "out-vars" : [ 0, 15, 10 ],
      "decl-vars" : [ ],
      "line-start" : 911,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 2,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "align",
            "variable" : 15
          }
        } ],
        "right" : [ {
          "go-type" : 2,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "8"
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 15 ],
      "line-end" : 911,
      "code" : "align = 8",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 12, 13 ],
      "in-vars" : [ 0, 10 ],
      "exit" : false,
      "out-vars" : [ 0, 10 ],
      "decl-vars" : [ ],
      "line-start" : 912,
      "ast" : {
        "condition" : {
          "go-type" : 33,
          "kind" : "expression",
          "left" : {
            "go-type" : 2,
            "kind" : "expression",
            "left" : {
              "go-type" : 2,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "size",
                "variable" : 0
              }
            },
            "operator" : "&",
            "right" : {
              "go-type" : 2,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "3"
              }
            },
            "type" : "binary"
          },
          "operator" : "==",
          "right" : {
            "go-type" : 2,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 918,
      "code" : "if size&3 == 0 {\n\talign = 4\n} else if size&1 == 0 {\n\talign = 2\n} else {\n\talign = 1\n}",
      "entry" : false,
      "use-vars" : [ 0 ]
    }, {
      "update-vars" : [ 15 ],
      "successors" : [ 16 ],
      "in-vars" : [ 0, 10 ],
      "exit" : false,
      "out-vars" : [ 0, 15, 10 ],
      "decl-vars" : [ ],
      "line-start" : 913,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 2,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "align",
            "variable" : 15
          }
        } ],
        "right" : [ {
          "go-type" : 2,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "4"
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 15 ],
      "line-end" : 913,
      "code" : "align = 4",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 14, 15 ],
      "in-vars" : [ 0, 10 ],
      "exit" : false,
      "out-vars" : [ 10, 0 ],
      "decl-vars" : [ ],
      "line-start" : 914,
      "ast" : {
        "condition" : {
          "go-type" : 33,
          "kind" : "expression",
          "left" : {
            "go-type" : 2,
            "kind" : "expression",
            "left" : {
              "go-type" : 2,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "size",
                "variable" : 0
              }
            },
            "operator" : "&",
            "right" : {
              "go-type" : 2,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "1"
              }
            },
            "type" : "binary"
          },
          "operator" : "==",
          "right" : {
            "go-type" : 2,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 918,
      "code" : "if size&1 == 0 {\n\talign = 2\n} else {\n\talign = 1\n}",
      "entry" : false,
      "use-vars" : [ 0 ]
    }, {
      "update-vars" : [ 15 ],
      "successors" : [ 16 ],
      "in-vars" : [ 0, 10 ],
      "exit" : false,
      "out-vars" : [ 0, 15, 10 ],
      "decl-vars" : [ ],
      "line-start" : 915,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 2,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "align",
            "variable" : 15
          }
        } ],
        "right" : [ {
          "go-type" : 2,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "2"
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 15 ],
      "line-end" : 915,
      "code" : "align = 2",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ 15 ],
      "successors" : [ 16 ],
      "in-vars" : [ 0, 10 ],
      "exit" : false,
      "out-vars" : [ 0, 15, 10 ],
      "decl-vars" : [ ],
      "line-start" : 917,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 2,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "align",
            "variable" : 15
          }
        } ],
        "right" : [ {
          "go-type" : 2,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "1"
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 15 ],
      "line-end" : 917,
      "code" : "align = 1",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 0, 15, 10 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 920,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "arguments" : [ {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "size",
              "variable" : 0
            }
          }, {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "align",
              "variable" : 15
            }
          }, {
            "go-type" : 42,
            "kind" : "expression",
            "operator" : "&",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "other_sys",
                "variable" : 16
              },
              "go-type" : 26,
              "kind" : "expression",
              "target" : {
                "go-type" : 24,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "memstats",
                  "variable" : 10
                }
              },
              "type" : "selector"
            },
            "type" : "unary"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 40,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 2,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "persistentalloc"
            }
          },
          "go-type" : 11,
          "kind" : "expression",
          "type" : "call"
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 920,
      "code" : "return persistentalloc(size, align, &memstats.other_sys)",
      "entry" : false,
      "use-vars" : [ 15, 10, 0 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 18 ],
      "in-vars" : [ 5, 6, 0, 8, 13, 9, 12, 1, 2, 7, 11 ],
      "exit" : false,
      "out-vars" : [ 6, 7, 11, 12, 8, 1, 13, 9, 0, 17, 2, 5 ],
      "decl-vars" : [ 17 ],
      "line-start" : 925,
      "ast" : {
        "kind" : "statement",
        "target" : {
          "kind" : "decl",
          "specs" : [ {
            "comments" : [ ],
            "declared-type" : {
              "contained" : {
                "go-type" : 44,
                "kind" : "type",
                "type" : "identifier",
                "value" : {
                  "go-type" : 44,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "g"
                }
              },
              "go-type" : 43,
              "kind" : "type",
              "type" : "pointer"
            },
            "kind" : "spec",
            "names" : [ {
              "ident-kind" : "NoKind",
              "kind" : "ident",
              "value" : "assistG"
            } ],
            "type" : "var",
            "values" : [ ]
          } ],
          "type" : "var"
        },
        "type" : "declaration"
      },
      "assign-vars" : [ ],
      "line-end" : 925,
      "code" : "// assistG is the G to charge for this allocation, or nil if\n// GC is not currently active.\nvar assistG *g",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 19, 25 ],
      "in-vars" : [ 12, 7, 8, 1, 17, 13, 9, 2, 5, 0, 11, 6 ],
      "exit" : false,
      "out-vars" : [ 13, 9, 7, 11, 0, 8, 1, 17, 2, 6, 12 ],
      "decl-vars" : [ ],
      "line-start" : 926,
      "ast" : {
        "condition" : {
          "go-type" : 33,
          "kind" : "expression",
          "left" : {
            "go-type" : 6,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "gcBlackenEnabled",
              "variable" : 5
            }
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 6,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 942,
      "code" : "if gcBlackenEnabled != 0 {\n\n\tassistG = getg()\n\tif assistG.m.curg != nil {\n\t\tassistG = assistG.m.curg\n\t}\n\n\tassistG.gcAssistBytes -= int64(size)\n\n\tif assistG.gcAssistBytes < 0 {\n\n\t\tgcAssistAlloc(assistG)\n\t}\n}",
      "entry" : false,
      "use-vars" : [ 5 ]
    }, {
      "update-vars" : [ 17 ],
      "successors" : [ 20 ],
      "in-vars" : [ 9, 2, 6, 7, 11, 0, 8, 13, 12, 1 ],
      "exit" : false,
      "out-vars" : [ 8, 1, 13, 9, 2, 7, 12, 0, 17, 6, 11 ],
      "decl-vars" : [ ],
      "line-start" : 928,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 43,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "assistG",
            "variable" : 17
          }
        } ],
        "right" : [ {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 133,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 3,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "getg"
            }
          },
          "go-type" : 43,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 17 ],
      "line-end" : 928,
      "code" : "assistG = getg()",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 21, 22 ],
      "in-vars" : [ 9, 2, 6, 12, 0, 13, 17, 7, 11, 8, 1 ],
      "exit" : false,
      "out-vars" : [ 8, 13, 9, 2, 6, 7, 11, 0, 17, 12, 1 ],
      "decl-vars" : [ ],
      "line-start" : 929,
      "ast" : {
        "condition" : {
          "go-type" : 33,
          "kind" : "expression",
          "left" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "curg",
              "variable" : 19
            },
            "go-type" : 43,
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "m",
                "variable" : 18
              },
              "go-type" : 58,
              "kind" : "expression",
              "target" : {
                "go-type" : 43,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "assistG",
                  "variable" : 17
                }
              },
              "type" : "selector"
            },
            "type" : "selector"
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 39,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Nil",
              "kind" : "ident",
              "value" : "nil"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 931,
      "code" : "if assistG.m.curg != nil {\n\tassistG = assistG.m.curg\n}",
      "entry" : false,
      "use-vars" : [ 17 ]
    }, {
      "update-vars" : [ 17 ],
      "successors" : [ 22 ],
      "in-vars" : [ 8, 6, 7, 11, 0, 1, 17, 13, 9, 2, 12 ],
      "exit" : false,
      "out-vars" : [ 12, 0, 8, 17, 13, 2, 6, 7, 1, 9, 11 ],
      "decl-vars" : [ ],
      "line-start" : 930,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 43,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "assistG",
            "variable" : 17
          }
        } ],
        "right" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "curg",
            "variable" : 19
          },
          "go-type" : 43,
          "kind" : "expression",
          "target" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "m",
              "variable" : 18
            },
            "go-type" : 58,
            "kind" : "expression",
            "target" : {
              "go-type" : 43,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "assistG",
                "variable" : 17
              }
            },
            "type" : "selector"
          },
          "type" : "selector"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 17 ],
      "line-end" : 930,
      "code" : "assistG = assistG.m.curg",
      "entry" : false,
      "use-vars" : [ 17 ]
    }, {
      "update-vars" : [ 17 ],
      "successors" : [ 23 ],
      "in-vars" : [ 0, 8, 1, 17, 6, 7, 11, 12, 13, 9, 2 ],
      "exit" : false,
      "out-vars" : [ 0, 17, 2, 12, 7, 11, 8, 1, 13, 9, 6 ],
      "decl-vars" : [ ],
      "line-start" : 934,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "gcAssistBytes",
            "variable" : 20
          },
          "go-type" : 72,
          "kind" : "expression",
          "target" : {
            "go-type" : 43,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "assistG",
              "variable" : 17
            }
          },
          "type" : "selector"
        } ],
        "operator" : "-",
        "right" : [ {
          "coerced-to" : {
            "go-type" : 72,
            "kind" : "type",
            "type" : "identifier",
            "value" : {
              "go-type" : 72,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "int64"
            }
          },
          "go-type" : 72,
          "kind" : "expression",
          "target" : {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "size",
              "variable" : 0
            }
          },
          "type" : "cast"
        } ],
        "type" : "assign-operator"
      },
      "assign-vars" : [ ],
      "line-end" : 934,
      "code" : "assistG.gcAssistBytes -= int64(size)",
      "entry" : false,
      "use-vars" : [ 0, 17 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 24, 25 ],
      "in-vars" : [ 8, 13, 9, 2, 6, 0, 1, 17, 7, 11, 12 ],
      "exit" : false,
      "out-vars" : [ 1, 2, 6, 7, 11, 12, 0, 8, 17, 13, 9 ],
      "decl-vars" : [ ],
      "line-start" : 936,
      "ast" : {
        "condition" : {
          "go-type" : 33,
          "kind" : "expression",
          "left" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "gcAssistBytes",
              "variable" : 20
            },
            "go-type" : 72,
            "kind" : "expression",
            "target" : {
              "go-type" : 43,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "assistG",
                "variable" : 17
              }
            },
            "type" : "selector"
          },
          "operator" : "<",
          "right" : {
            "go-type" : 72,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 941,
      "code" : "if assistG.gcAssistBytes < 0 {\n\n\tgcAssistAlloc(assistG)\n}",
      "entry" : false,
      "use-vars" : [ 17 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 25 ],
      "in-vars" : [ 8, 17, 7, 12, 0, 13, 9, 2, 6, 11, 1 ],
      "exit" : false,
      "out-vars" : [ 0, 13, 9, 2, 7, 12, 8, 1, 17, 6, 11 ],
      "decl-vars" : [ ],
      "line-start" : 940,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 43,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "assistG",
              "variable" : 17
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 135,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 4,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "gcAssistAlloc"
            }
          },
          "go-type" : 34,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 940,
      "code" : "gcAssistAlloc(assistG)",
      "entry" : false,
      "use-vars" : [ 17 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 26 ],
      "in-vars" : [ 17, 2, 6, 11, 12, 8, 1, 9, 7, 0, 13 ],
      "exit" : false,
      "out-vars" : [ 13, 9, 7, 11, 0, 8, 1, 17, 12, 21, 2, 6 ],
      "decl-vars" : [ 21 ],
      "line-start" : 945,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "mp"
          }
        } ],
        "right" : [ {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 137,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 5,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "acquirem"
            }
          },
          "go-type" : 58,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 945,
      "code" : "mp := acquirem()",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 27, 28 ],
      "in-vars" : [ 12, 1, 17, 13, 9, 21, 2, 0, 8, 11, 6, 7 ],
      "exit" : false,
      "out-vars" : [ 17, 9, 2, 6, 11, 0, 8, 1, 13, 21, 7, 12 ],
      "decl-vars" : [ ],
      "line-start" : 946,
      "ast" : {
        "condition" : {
          "go-type" : 33,
          "kind" : "expression",
          "left" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "mallocing",
              "variable" : 22
            },
            "go-type" : 17,
            "kind" : "expression",
            "target" : {
              "go-type" : 58,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "mp",
                "variable" : 21
              }
            },
            "type" : "selector"
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 17,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 948,
      "code" : "if mp.mallocing != 0 {\n\tthrow(\"malloc deadlock\")\n}",
      "entry" : false,
      "use-vars" : [ 21 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 28 ],
      "in-vars" : [ 1, 13, 21, 12, 0, 17, 9, 2, 6, 7, 11, 8 ],
      "exit" : false,
      "out-vars" : [ 12, 0, 8, 9, 21, 6, 7, 11, 1, 17, 13, 2 ],
      "decl-vars" : [ ],
      "line-start" : 947,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 37,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "malloc deadlock"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 35,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 1,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "throw"
            }
          },
          "go-type" : 34,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 947,
      "code" : "throw(\"malloc deadlock\")",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 29, 30 ],
      "in-vars" : [ 6, 11, 12, 0, 8, 13, 9, 7, 1, 17, 21, 2 ],
      "exit" : false,
      "out-vars" : [ 8, 1, 17, 9, 7, 11, 12, 0, 21, 2, 6, 13 ],
      "decl-vars" : [ ],
      "line-start" : 949,
      "ast" : {
        "condition" : {
          "go-type" : 33,
          "kind" : "expression",
          "left" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "gsignal",
              "variable" : 23
            },
            "go-type" : 43,
            "kind" : "expression",
            "target" : {
              "go-type" : 58,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "mp",
                "variable" : 21
              }
            },
            "type" : "selector"
          },
          "operator" : "==",
          "right" : {
            "arguments" : [ ],
            "ellipsis" : false,
            "function" : {
              "go-type" : 133,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "function" : 3,
                "ident-kind" : "Func",
                "kind" : "ident",
                "value" : "getg"
              }
            },
            "go-type" : 43,
            "kind" : "expression",
            "type" : "call"
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 951,
      "code" : "if mp.gsignal == getg() {\n\tthrow(\"malloc during signal\")\n}",
      "entry" : false,
      "use-vars" : [ 21 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 30 ],
      "in-vars" : [ 8, 13, 21, 2, 6, 7, 0, 1, 17, 9, 11, 12 ],
      "exit" : false,
      "out-vars" : [ 17, 2, 11, 0, 8, 1, 13, 9, 21, 6, 7, 12 ],
      "decl-vars" : [ ],
      "line-start" : 950,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 37,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "malloc during signal"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 35,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 1,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "throw"
            }
          },
          "go-type" : 34,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 950,
      "code" : "throw(\"malloc during signal\")",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ 21 ],
      "successors" : [ 31 ],
      "in-vars" : [ 7, 12, 8, 13, 9, 21, 6, 0, 1, 17, 2, 11 ],
      "exit" : false,
      "out-vars" : [ 13, 9, 11, 0, 8, 21, 2, 6, 7, 12, 1, 17 ],
      "decl-vars" : [ ],
      "line-start" : 952,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "mallocing",
            "variable" : 22
          },
          "go-type" : 17,
          "kind" : "expression",
          "target" : {
            "go-type" : 58,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "mp",
              "variable" : 21
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "go-type" : 17,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "1"
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 952,
      "code" : "mp.mallocing = 1",
      "entry" : false,
      "use-vars" : [ 21 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 32 ],
      "in-vars" : [ 21, 6, 11, 9, 2, 7, 0, 8, 1, 17, 13, 12 ],
      "exit" : false,
      "out-vars" : [ 8, 21, 2, 24, 7, 11, 12, 0, 1, 17, 13, 9, 6 ],
      "decl-vars" : [ 24 ],
      "line-start" : 954,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "shouldhelpgc"
          }
        } ],
        "right" : [ {
          "go-type" : 13,
          "kind" : "constant",
          "value" : {
            "type" : "BOOL",
            "value" : "false"
          }
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 954,
      "code" : "shouldhelpgc := false",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 33 ],
      "in-vars" : [ 11, 0, 1, 24, 9, 21, 2, 6, 7, 8, 17, 13, 12 ],
      "exit" : false,
      "out-vars" : [ 2, 25, 0, 11, 17, 7, 6, 12, 8, 13, 21, 24, 1, 9 ],
      "decl-vars" : [ 25 ],
      "line-start" : 955,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "dataSize"
          }
        } ],
        "right" : [ {
          "go-type" : 2,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "size",
            "variable" : 0
          }
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 955,
      "code" : "dataSize := size",
      "entry" : false,
      "use-vars" : [ 0 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 34 ],
      "in-vars" : [ 0, 1, 6, 25, 17, 7, 11, 8, 13, 9, 21, 24, 2, 12 ],
      "exit" : false,
      "out-vars" : [ 1, 6, 25, 26, 13, 9, 2, 7, 11, 8, 17, 21, 24, 0, 12 ],
      "decl-vars" : [ 26 ],
      "line-start" : 956,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "c"
          }
        } ],
        "right" : [ {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 139,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 6,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "gomcache"
            }
          },
          "go-type" : 80,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 956,
      "code" : "c := gomcache()",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 35 ],
      "in-vars" : [ 9, 24, 11, 12, 25, 0, 8, 17, 21, 6, 26, 1, 13, 7, 2 ],
      "exit" : false,
      "out-vars" : [ 13, 6, 11, 25, 0, 17, 26, 8, 1, 21, 24, 12, 9, 2, 7 ],
      "decl-vars" : [ 27 ],
      "line-start" : 957,
      "ast" : {
        "kind" : "statement",
        "target" : {
          "kind" : "decl",
          "specs" : [ {
            "comments" : [ ],
            "declared-type" : {
              "go-type" : 11,
              "kind" : "type",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 1,
                "value" : "unsafe"
              },
              "type" : "identifier",
              "value" : {
                "go-type" : 11,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "Pointer"
              }
            },
            "kind" : "spec",
            "names" : [ {
              "ident-kind" : "NoKind",
              "kind" : "ident",
              "value" : "x"
            } ],
            "type" : "var",
            "values" : [ ]
          } ],
          "type" : "var"
        },
        "type" : "declaration"
      },
      "assign-vars" : [ ],
      "line-end" : 957,
      "code" : "var x unsafe.Pointer",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 36 ],
      "in-vars" : [ 12, 0, 26, 7, 11, 25, 9, 24, 6, 13, 1, 17, 21, 2, 8 ],
      "exit" : false,
      "out-vars" : [ 25, 0, 17, 13, 9, 2, 24, 6, 12, 11, 26, 8, 1, 21, 7, 29 ],
      "decl-vars" : [ 29 ],
      "line-start" : 958,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "noscan"
          }
        } ],
        "right" : [ {
          "go-type" : 13,
          "kind" : "expression",
          "left" : {
            "go-type" : 13,
            "kind" : "expression",
            "left" : {
              "go-type" : 3,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "typ",
                "variable" : 1
              }
            },
            "operator" : "==",
            "right" : {
              "go-type" : 39,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Nil",
                "kind" : "ident",
                "value" : "nil"
              }
            },
            "type" : "binary"
          },
          "operator" : "||",
          "right" : {
            "go-type" : 13,
            "kind" : "expression",
            "left" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "ptrdata",
                "variable" : 28
              },
              "go-type" : 2,
              "kind" : "expression",
              "target" : {
                "go-type" : 3,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "typ",
                  "variable" : 1
                }
              },
              "type" : "selector"
            },
            "operator" : "==",
            "right" : {
              "go-type" : 2,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "0"
              }
            },
            "type" : "binary"
          },
          "type" : "binary"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 958,
      "code" : "noscan := typ == nil || typ.ptrdata == 0",
      "entry" : false,
      "use-vars" : [ 1 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 37, 76 ],
      "in-vars" : [ 26, 9, 29, 7, 21, 0, 8, 1, 17, 12, 11, 25, 13, 2, 24, 6 ],
      "exit" : false,
      "out-vars" : [ 8, 1, 7, 26, 17, 2, 6, 11, 0, 9, 21, 29, 25, 13, 24, 12 ],
      "decl-vars" : [ ],
      "line-start" : 959,
      "ast" : {
        "condition" : {
          "go-type" : 33,
          "kind" : "expression",
          "left" : {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "size",
              "variable" : 0
            }
          },
          "operator" : "<=",
          "right" : {
            "go-type" : 2,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "32768"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 1053,
      "code" : "if size <= maxSmallSize {\n\tif noscan && size < maxTinySize {\n\n\t\toff := c.tinyoffset\n\n\t\tif size&7 == 0 {\n\t\t\toff = alignUp(off, 8)\n\t\t} else if size&3 == 0 {\n\t\t\toff = alignUp(off, 4)\n\t\t} else if size&1 == 0 {\n\t\t\toff = alignUp(off, 2)\n\t\t}\n\t\tif off+size <= maxTinySize && c.tiny != 0 {\n\n\t\t\tx = unsafe.Pointer(c.tiny + off)\n\t\t\tc.tinyoffset = off + size\n\t\t\tc.local_tinyallocs++\n\t\t\tmp.mallocing = 0\n\t\t\treleasem(mp)\n\t\t\treturn x\n\t\t}\n\n\t\tspan := c.alloc[tinySpanClass]\n\t\tv := nextFreeFast(span)\n\t\tif v == 0 {\n\t\t\tv, _, shouldhelpgc = c.nextFree(tinySpanClass)\n\t\t}\n\t\tx = unsafe.Pointer(v)\n\t\t(*[2]uint64)(x)[0] = 0\n\t\t(*[2]uint64)(x)[1] = 0\n\n\t\tif size < c.tinyoffset || c.tiny == 0 {\n\t\t\tc.tiny = uintptr(x)\n\t\t\tc.tinyoffset = size\n\t\t}\n\t\tsize = maxTinySize\n\t} else {\n\t\tvar sizeclass uint8\n\t\tif size <= smallSizeMax-8 {\n\t\t\tsizeclass = size_to_class8[(size+smallSizeDiv-1)/smallSizeDiv]\n\t\t} else {\n\t\t\tsizeclass = size_to_class128[(size-smallSizeMax+largeSizeDiv-1)/largeSizeDiv]\n\t\t}\n\t\tsize = uintptr(class_to_size[sizeclass])\n\t\tspc := makeSpanClass(sizeclass, noscan)\n\t\tspan := c.alloc[spc]\n\t\tv := nextFreeFast(span)\n\t\tif v == 0 {\n\t\t\tv, span, shouldhelpgc = c.nextFree(spc)\n\t\t}\n\t\tx = unsafe.Pointer(v)\n\t\tif needzero && span.needzero != 0 {\n\t\t\tmemclrNoHeapPointers(unsafe.Pointer(v), size)\n\t\t}\n\t}\n} else {\n\tvar s *mspan\n\tshouldhelpgc = true\n\tsystemstack(func() {\n\t\ts = largeAlloc(size, needzero, noscan)\n\t})\n\ts.freeindex = 1\n\ts.allocCount = 1\n\tx = unsafe.Pointer(s.base())\n\tsize = s.elemsize\n}",
      "entry" : false,
      "use-vars" : [ 0 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 38, 63 ],
      "in-vars" : [ 17, 13, 9, 2, 29, 7, 25, 1, 26, 21, 6, 12, 0, 8, 24, 11 ],
      "exit" : false,
      "out-vars" : [ 29, 13, 7, 21, 25, 0, 1, 9, 24, 6, 11, 12, 26, 8, 17, 2 ],
      "decl-vars" : [ ],
      "line-start" : 960,
      "ast" : {
        "condition" : {
          "go-type" : 13,
          "kind" : "expression",
          "left" : {
            "go-type" : 13,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "noscan",
              "variable" : 29
            }
          },
          "operator" : "&&",
          "right" : {
            "go-type" : 13,
            "kind" : "expression",
            "left" : {
              "go-type" : 2,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "size",
                "variable" : 0
              }
            },
            "operator" : "<",
            "right" : {
              "go-type" : 2,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "16"
              }
            },
            "type" : "binary"
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 1042,
      "code" : "if noscan && size < maxTinySize {\n\n\toff := c.tinyoffset\n\n\tif size&7 == 0 {\n\t\toff = alignUp(off, 8)\n\t} else if size&3 == 0 {\n\t\toff = alignUp(off, 4)\n\t} else if size&1 == 0 {\n\t\toff = alignUp(off, 2)\n\t}\n\tif off+size <= maxTinySize && c.tiny != 0 {\n\n\t\tx = unsafe.Pointer(c.tiny + off)\n\t\tc.tinyoffset = off + size\n\t\tc.local_tinyallocs++\n\t\tmp.mallocing = 0\n\t\treleasem(mp)\n\t\treturn x\n\t}\n\n\tspan := c.alloc[tinySpanClass]\n\tv := nextFreeFast(span)\n\tif v == 0 {\n\t\tv, _, shouldhelpgc = c.nextFree(tinySpanClass)\n\t}\n\tx = unsafe.Pointer(v)\n\t(*[2]uint64)(x)[0] = 0\n\t(*[2]uint64)(x)[1] = 0\n\n\tif size < c.tinyoffset || c.tiny == 0 {\n\t\tc.tiny = uintptr(x)\n\t\tc.tinyoffset = size\n\t}\n\tsize = maxTinySize\n} else {\n\tvar sizeclass uint8\n\tif size <= smallSizeMax-8 {\n\t\tsizeclass = size_to_class8[(size+smallSizeDiv-1)/smallSizeDiv]\n\t} else {\n\t\tsizeclass = size_to_class128[(size-smallSizeMax+largeSizeDiv-1)/largeSizeDiv]\n\t}\n\tsize = uintptr(class_to_size[sizeclass])\n\tspc := makeSpanClass(sizeclass, noscan)\n\tspan := c.alloc[spc]\n\tv := nextFreeFast(span)\n\tif v == 0 {\n\t\tv, span, shouldhelpgc = c.nextFree(spc)\n\t}\n\tx = unsafe.Pointer(v)\n\tif needzero && span.needzero != 0 {\n\t\tmemclrNoHeapPointers(unsafe.Pointer(v), size)\n\t}\n}",
      "entry" : false,
      "use-vars" : [ 29, 0 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 39 ],
      "in-vars" : [ 0, 17, 24, 11, 7, 25, 26, 1, 13, 21, 6, 29 ],
      "exit" : false,
      "out-vars" : [ 26, 1, 21, 24, 7, 11, 31, 0, 17, 13, 6, 29, 25 ],
      "decl-vars" : [ 31 ],
      "line-start" : 990,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "off"
          }
        } ],
        "right" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "tinyoffset",
            "variable" : 30
          },
          "go-type" : 2,
          "kind" : "expression",
          "target" : {
            "go-type" : 80,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "c",
              "variable" : 26
            }
          },
          "type" : "selector"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 990,
      "code" : "off := c.tinyoffset",
      "entry" : false,
      "use-vars" : [ 26 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 40, 41 ],
      "in-vars" : [ 29, 7, 11, 1, 17, 13, 6, 21, 24, 25, 0, 31, 26 ],
      "exit" : false,
      "out-vars" : [ 24, 6, 29, 7, 0, 31, 17, 21, 11, 25, 26, 1, 13 ],
      "decl-vars" : [ ],
      "line-start" : 992,
      "ast" : {
        "condition" : {
          "go-type" : 33,
          "kind" : "expression",
          "left" : {
            "go-type" : 2,
            "kind" : "expression",
            "left" : {
              "go-type" : 2,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "size",
                "variable" : 0
              }
            },
            "operator" : "&",
            "right" : {
              "go-type" : 2,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "7"
              }
            },
            "type" : "binary"
          },
          "operator" : "==",
          "right" : {
            "go-type" : 2,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 998,
      "code" : "if size&7 == 0 {\n\toff = alignUp(off, 8)\n} else if size&3 == 0 {\n\toff = alignUp(off, 4)\n} else if size&1 == 0 {\n\toff = alignUp(off, 2)\n}",
      "entry" : false,
      "use-vars" : [ 0 ]
    }, {
      "update-vars" : [ 31 ],
      "successors" : [ 45 ],
      "in-vars" : [ 26, 13, 21, 6, 7, 11, 25, 0, 17, 24, 29, 31, 1 ],
      "exit" : false,
      "out-vars" : [ 29, 11, 25, 0, 26, 1, 13, 21, 31, 17, 24, 6, 7 ],
      "decl-vars" : [ ],
      "line-start" : 993,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 2,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "off",
            "variable" : 31
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "off",
              "variable" : 31
            }
          }, {
            "go-type" : 2,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "8"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 141,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 7,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "alignUp"
            }
          },
          "go-type" : 2,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 31 ],
      "line-end" : 993,
      "code" : "off = alignUp(off, 8)",
      "entry" : false,
      "use-vars" : [ 31 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 42, 43 ],
      "in-vars" : [ 25, 0, 31, 1, 13, 29, 11, 26, 17, 21, 24, 6, 7 ],
      "exit" : false,
      "out-vars" : [ 31, 1, 17, 21, 25, 0, 26, 13, 24, 6, 29, 7, 11 ],
      "decl-vars" : [ ],
      "line-start" : 994,
      "ast" : {
        "condition" : {
          "go-type" : 33,
          "kind" : "expression",
          "left" : {
            "go-type" : 2,
            "kind" : "expression",
            "left" : {
              "go-type" : 2,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "size",
                "variable" : 0
              }
            },
            "operator" : "&",
            "right" : {
              "go-type" : 2,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "3"
              }
            },
            "type" : "binary"
          },
          "operator" : "==",
          "right" : {
            "go-type" : 2,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 998,
      "code" : "if size&3 == 0 {\n\toff = alignUp(off, 4)\n} else if size&1 == 0 {\n\toff = alignUp(off, 2)\n}",
      "entry" : false,
      "use-vars" : [ 0 ]
    }, {
      "update-vars" : [ 31 ],
      "successors" : [ 45 ],
      "in-vars" : [ 0, 21, 24, 29, 7, 25, 31, 26, 1, 17, 13, 6, 11 ],
      "exit" : false,
      "out-vars" : [ 31, 26, 17, 24, 6, 29, 25, 0, 7, 11, 21, 1, 13 ],
      "decl-vars" : [ ],
      "line-start" : 995,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 2,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "off",
            "variable" : 31
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "off",
              "variable" : 31
            }
          }, {
            "go-type" : 2,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "4"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 141,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 7,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "alignUp"
            }
          },
          "go-type" : 2,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 31 ],
      "line-end" : 995,
      "code" : "off = alignUp(off, 4)",
      "entry" : false,
      "use-vars" : [ 31 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 44, 45 ],
      "in-vars" : [ 31, 26, 13, 21, 11, 25, 1, 17, 24, 6, 29, 7, 0 ],
      "exit" : false,
      "out-vars" : [ 21, 24, 6, 29, 7, 25, 0, 13, 11, 17, 31, 26, 1 ],
      "decl-vars" : [ ],
      "line-start" : 996,
      "ast" : {
        "condition" : {
          "go-type" : 33,
          "kind" : "expression",
          "left" : {
            "go-type" : 2,
            "kind" : "expression",
            "left" : {
              "go-type" : 2,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "size",
                "variable" : 0
              }
            },
            "operator" : "&",
            "right" : {
              "go-type" : 2,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "1"
              }
            },
            "type" : "binary"
          },
          "operator" : "==",
          "right" : {
            "go-type" : 2,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 998,
      "code" : "if size&1 == 0 {\n\toff = alignUp(off, 2)\n}",
      "entry" : false,
      "use-vars" : [ 0 ]
    }, {
      "update-vars" : [ 31 ],
      "successors" : [ 45 ],
      "in-vars" : [ 1, 13, 6, 11, 29, 25, 0, 31, 26, 17, 21, 24, 7 ],
      "exit" : false,
      "out-vars" : [ 31, 24, 29, 11, 21, 6, 25, 0, 26, 1, 17, 13, 7 ],
      "decl-vars" : [ ],
      "line-start" : 997,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 2,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "off",
            "variable" : 31
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "off",
              "variable" : 31
            }
          }, {
            "go-type" : 2,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "2"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 141,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 7,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "alignUp"
            }
          },
          "go-type" : 2,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 31 ],
      "line-end" : 997,
      "code" : "off = alignUp(off, 2)",
      "entry" : false,
      "use-vars" : [ 31 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 46, 52 ],
      "in-vars" : [ 26, 13, 6, 11, 21, 24, 29, 25, 0, 31, 1, 17, 7 ],
      "exit" : false,
      "out-vars" : [ 1, 6, 7, 31, 0, 26, 17, 13, 21, 24, 29, 25, 11 ],
      "decl-vars" : [ ],
      "line-start" : 999,
      "ast" : {
        "condition" : {
          "go-type" : 33,
          "kind" : "expression",
          "left" : {
            "go-type" : 33,
            "kind" : "expression",
            "left" : {
              "go-type" : 2,
              "kind" : "expression",
              "left" : {
                "go-type" : 2,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "off",
                  "variable" : 31
                }
              },
              "operator" : "+",
              "right" : {
                "go-type" : 2,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "size",
                  "variable" : 0
                }
              },
              "type" : "binary"
            },
            "operator" : "<=",
            "right" : {
              "go-type" : 2,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "16"
              }
            },
            "type" : "binary"
          },
          "operator" : "&&",
          "right" : {
            "go-type" : 33,
            "kind" : "expression",
            "left" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "tiny",
                "variable" : 32
              },
              "go-type" : 2,
              "kind" : "expression",
              "target" : {
                "go-type" : 80,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "c",
                  "variable" : 26
                }
              },
              "type" : "selector"
            },
            "operator" : "!=",
            "right" : {
              "go-type" : 2,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "0"
              }
            },
            "type" : "binary"
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 1007,
      "code" : "if off+size <= maxTinySize && c.tiny != 0 {\n\n\tx = unsafe.Pointer(c.tiny + off)\n\tc.tinyoffset = off + size\n\tc.local_tinyallocs++\n\tmp.mallocing = 0\n\treleasem(mp)\n\treturn x\n}",
      "entry" : false,
      "use-vars" : [ 31, 0, 26 ]
    }, {
      "update-vars" : [ 27 ],
      "successors" : [ 47 ],
      "in-vars" : [ 21, 0, 31, 26 ],
      "exit" : false,
      "out-vars" : [ 0, 31, 26, 27, 21 ],
      "decl-vars" : [ ],
      "line-start" : 1001,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 11,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "x",
            "variable" : 27
          }
        } ],
        "right" : [ {
          "coerced-to" : {
            "go-type" : 11,
            "kind" : "type",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 1,
              "value" : "unsafe"
            },
            "type" : "identifier",
            "value" : {
              "go-type" : 11,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "Pointer"
            }
          },
          "go-type" : 11,
          "kind" : "expression",
          "target" : {
            "go-type" : 2,
            "kind" : "expression",
            "left" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "tiny",
                "variable" : 32
              },
              "go-type" : 2,
              "kind" : "expression",
              "target" : {
                "go-type" : 80,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "c",
                  "variable" : 26
                }
              },
              "type" : "selector"
            },
            "operator" : "+",
            "right" : {
              "go-type" : 2,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "off",
                "variable" : 31
              }
            },
            "type" : "binary"
          },
          "type" : "cast"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 27 ],
      "line-end" : 1001,
      "code" : "x = unsafe.Pointer(c.tiny + off)",
      "entry" : false,
      "use-vars" : [ 26, 31 ]
    }, {
      "update-vars" : [ 26 ],
      "successors" : [ 48 ],
      "in-vars" : [ 0, 31, 26, 27, 21 ],
      "exit" : false,
      "out-vars" : [ 21, 26, 27 ],
      "decl-vars" : [ ],
      "line-start" : 1002,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "tinyoffset",
            "variable" : 30
          },
          "go-type" : 2,
          "kind" : "expression",
          "target" : {
            "go-type" : 80,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "c",
              "variable" : 26
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "go-type" : 2,
          "kind" : "expression",
          "left" : {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "off",
              "variable" : 31
            }
          },
          "operator" : "+",
          "right" : {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "size",
              "variable" : 0
            }
          },
          "type" : "binary"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 1002,
      "code" : "c.tinyoffset = off + size",
      "entry" : false,
      "use-vars" : [ 31, 0, 26 ]
    }, {
      "update-vars" : [ 26 ],
      "successors" : [ 49 ],
      "in-vars" : [ 27, 21, 26 ],
      "exit" : false,
      "out-vars" : [ 27, 21 ],
      "decl-vars" : [ ],
      "line-start" : 1003,
      "ast" : {
        "kind" : "statement",
        "operation" : "++",
        "target" : {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "local_tinyallocs",
            "variable" : 33
          },
          "go-type" : 2,
          "kind" : "expression",
          "target" : {
            "go-type" : 80,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "c",
              "variable" : 26
            }
          },
          "type" : "selector"
        },
        "type" : "crement"
      },
      "assign-vars" : [ ],
      "line-end" : 1003,
      "code" : "c.local_tinyallocs++",
      "entry" : false,
      "use-vars" : [ 26 ]
    }, {
      "update-vars" : [ 21 ],
      "successors" : [ 50 ],
      "in-vars" : [ 27, 21 ],
      "exit" : false,
      "out-vars" : [ 27, 21 ],
      "decl-vars" : [ ],
      "line-start" : 1004,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "mallocing",
            "variable" : 22
          },
          "go-type" : 17,
          "kind" : "expression",
          "target" : {
            "go-type" : 58,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "mp",
              "variable" : 21
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "go-type" : 17,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "0"
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 1004,
      "code" : "mp.mallocing = 0",
      "entry" : false,
      "use-vars" : [ 21 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 51 ],
      "in-vars" : [ 27, 21 ],
      "exit" : false,
      "out-vars" : [ 27 ],
      "decl-vars" : [ ],
      "line-start" : 1005,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 58,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "mp",
              "variable" : 21
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 144,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 8,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "releasem"
            }
          },
          "go-type" : 34,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 1005,
      "code" : "releasem(mp)",
      "entry" : false,
      "use-vars" : [ 21 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 27 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 1006,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 11,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "x",
            "variable" : 27
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 1006,
      "code" : "return x",
      "entry" : false,
      "use-vars" : [ 27 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 53 ],
      "in-vars" : [ 26, 17, 21, 24, 6, 29, 7, 25, 11, 1, 13, 0 ],
      "exit" : false,
      "out-vars" : [ 35, 1, 21, 24, 7, 11, 26, 0, 17, 13, 6, 29, 25 ],
      "decl-vars" : [ 35 ],
      "line-start" : 1009,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "span"
          }
        } ],
        "right" : [ {
          "go-type" : 84,
          "index" : {
            "go-type" : 93,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "5"
            }
          },
          "kind" : "expression",
          "target" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "alloc",
              "variable" : 34
            },
            "go-type" : 83,
            "kind" : "expression",
            "target" : {
              "go-type" : 80,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "c",
                "variable" : 26
              }
            },
            "type" : "selector"
          },
          "type" : "index"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 1009,
      "code" : "span := c.alloc[tinySpanClass]",
      "entry" : false,
      "use-vars" : [ 26 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 54 ],
      "in-vars" : [ 26, 21, 6, 29, 25, 0, 35, 1, 17, 13, 24, 7, 11 ],
      "exit" : false,
      "out-vars" : [ 26, 13, 6, 29, 7, 25, 0, 17, 21, 24, 11, 36, 1 ],
      "decl-vars" : [ 36 ],
      "line-start" : 1010,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "v"
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 84,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "span",
              "variable" : 35
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 146,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 9,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "nextFreeFast"
            }
          },
          "go-type" : 90,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 1010,
      "code" : "v := nextFreeFast(span)",
      "entry" : false,
      "use-vars" : [ 35 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 55, 56 ],
      "in-vars" : [ 26, 13, 24, 29, 7, 21, 6, 11, 25, 0, 36, 1, 17 ],
      "exit" : false,
      "out-vars" : [ 0, 36, 1, 21, 29, 11, 7, 25, 26, 17, 13, 24, 6 ],
      "decl-vars" : [ ],
      "line-start" : 1011,
      "ast" : {
        "condition" : {
          "go-type" : 33,
          "kind" : "expression",
          "left" : {
            "go-type" : 90,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "v",
              "variable" : 36
            }
          },
          "operator" : "==",
          "right" : {
            "go-type" : 90,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 1013,
      "code" : "if v == 0 {\n\tv, _, shouldhelpgc = c.nextFree(tinySpanClass)\n}",
      "entry" : false,
      "use-vars" : [ 36 ]
    }, {
      "update-vars" : [ 36, 24 ],
      "successors" : [ 56 ],
      "in-vars" : [ 13, 21, 6, 11, 25, 0, 17, 29, 7, 26, 1 ],
      "exit" : false,
      "out-vars" : [ 21, 24, 6, 11, 25, 17, 13, 1, 29, 7, 0, 26, 36 ],
      "decl-vars" : [ ],
      "line-start" : 1012,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 90,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "v",
            "variable" : 36
          }
        }, {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "_"
          }
        }, {
          "go-type" : 13,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "shouldhelpgc",
            "variable" : 24
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 93,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "5"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "function" : 10,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "nextFree"
            },
            "go-type" : 150,
            "kind" : "expression",
            "target" : {
              "go-type" : 80,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "c",
                "variable" : 26
              }
            },
            "type" : "selector"
          },
          "go-type" : 149,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 24, 36 ],
      "line-end" : 1012,
      "code" : "v, _, shouldhelpgc = c.nextFree(tinySpanClass)",
      "entry" : false,
      "use-vars" : [ 26 ]
    }, {
      "update-vars" : [ 27 ],
      "successors" : [ 57 ],
      "in-vars" : [ 1, 17, 13, 24, 11, 0, 26, 36, 21, 6, 29, 7, 25 ],
      "exit" : false,
      "out-vars" : [ 21, 24, 6, 29, 25, 26, 17, 27, 11, 0, 1, 13, 7 ],
      "decl-vars" : [ ],
      "line-start" : 1014,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 11,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "x",
            "variable" : 27
          }
        } ],
        "right" : [ {
          "coerced-to" : {
            "go-type" : 11,
            "kind" : "type",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 1,
              "value" : "unsafe"
            },
            "type" : "identifier",
            "value" : {
              "go-type" : 11,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "Pointer"
            }
          },
          "go-type" : 11,
          "kind" : "expression",
          "target" : {
            "go-type" : 90,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "v",
              "variable" : 36
            }
          },
          "type" : "cast"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 27 ],
      "line-end" : 1014,
      "code" : "x = unsafe.Pointer(v)",
      "entry" : false,
      "use-vars" : [ 36 ]
    }, {
      "update-vars" : [ 27 ],
      "successors" : [ 58 ],
      "in-vars" : [ 24, 25, 26, 17, 27, 21, 7, 11, 0, 1, 13, 6, 29 ],
      "exit" : false,
      "out-vars" : [ 27, 24, 11, 25, 0, 1, 17, 13, 26, 21, 6, 29, 7 ],
      "decl-vars" : [ ],
      "line-start" : 1015,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 26,
          "index" : {
            "go-type" : 20,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "kind" : "expression",
          "target" : {
            "coerced-to" : {
              "contained" : {
                "element" : {
                  "go-type" : 26,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 26,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "uint64"
                  }
                },
                "go-type" : 153,
                "kind" : "type",
                "length" : {
                  "go-type" : 154,
                  "kind" : "constant",
                  "value" : {
                    "type" : "INT",
                    "value" : "2"
                  }
                },
                "type" : "array"
              },
              "go-type" : 152,
              "kind" : "type",
              "type" : "pointer"
            },
            "go-type" : 152,
            "kind" : "expression",
            "target" : {
              "go-type" : 11,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "x",
                "variable" : 27
              }
            },
            "type" : "cast"
          },
          "type" : "index"
        } ],
        "right" : [ {
          "go-type" : 26,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "0"
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 1015,
      "code" : "(*[2]uint64)(x)[0] = 0",
      "entry" : false,
      "use-vars" : [ 27 ]
    }, {
      "update-vars" : [ 27 ],
      "successors" : [ 59 ],
      "in-vars" : [ 1, 13, 27, 24, 6, 11, 0, 26, 17, 21, 29, 7, 25 ],
      "exit" : false,
      "out-vars" : [ 7, 11, 25, 0, 17, 21, 24, 29, 26, 1, 13, 27, 6 ],
      "decl-vars" : [ ],
      "line-start" : 1016,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 26,
          "index" : {
            "go-type" : 20,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "1"
            }
          },
          "kind" : "expression",
          "target" : {
            "coerced-to" : {
              "contained" : {
                "element" : {
                  "go-type" : 26,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 26,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "uint64"
                  }
                },
                "go-type" : 153,
                "kind" : "type",
                "length" : {
                  "go-type" : 154,
                  "kind" : "constant",
                  "value" : {
                    "type" : "INT",
                    "value" : "2"
                  }
                },
                "type" : "array"
              },
              "go-type" : 152,
              "kind" : "type",
              "type" : "pointer"
            },
            "go-type" : 152,
            "kind" : "expression",
            "target" : {
              "go-type" : 11,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "x",
                "variable" : 27
              }
            },
            "type" : "cast"
          },
          "type" : "index"
        } ],
        "right" : [ {
          "go-type" : 26,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "0"
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 1016,
      "code" : "(*[2]uint64)(x)[1] = 0",
      "entry" : false,
      "use-vars" : [ 27 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 60, 62 ],
      "in-vars" : [ 0, 17, 27, 21, 29, 7, 11, 25, 1, 13, 24, 6, 26 ],
      "exit" : false,
      "out-vars" : [ 17, 13, 27, 24, 25, 0, 26, 1, 21, 6, 29, 7, 11 ],
      "decl-vars" : [ ],
      "line-start" : 1019,
      "ast" : {
        "condition" : {
          "go-type" : 33,
          "kind" : "expression",
          "left" : {
            "go-type" : 33,
            "kind" : "expression",
            "left" : {
              "go-type" : 2,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "size",
                "variable" : 0
              }
            },
            "operator" : "<",
            "right" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "tinyoffset",
                "variable" : 30
              },
              "go-type" : 2,
              "kind" : "expression",
              "target" : {
                "go-type" : 80,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "c",
                  "variable" : 26
                }
              },
              "type" : "selector"
            },
            "type" : "binary"
          },
          "operator" : "||",
          "right" : {
            "go-type" : 33,
            "kind" : "expression",
            "left" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "tiny",
                "variable" : 32
              },
              "go-type" : 2,
              "kind" : "expression",
              "target" : {
                "go-type" : 80,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "c",
                  "variable" : 26
                }
              },
              "type" : "selector"
            },
            "operator" : "==",
            "right" : {
              "go-type" : 2,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "0"
              }
            },
            "type" : "binary"
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 1022,
      "code" : "if size < c.tinyoffset || c.tiny == 0 {\n\tc.tiny = uintptr(x)\n\tc.tinyoffset = size\n}",
      "entry" : false,
      "use-vars" : [ 26, 0 ]
    }, {
      "update-vars" : [ 26 ],
      "successors" : [ 61 ],
      "in-vars" : [ 21, 24, 6, 11, 25, 1, 17, 27, 7, 0, 26, 13, 29 ],
      "exit" : false,
      "out-vars" : [ 29, 7, 25, 0, 26, 1, 17, 24, 13, 27, 21, 6, 11 ],
      "decl-vars" : [ ],
      "line-start" : 1020,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "tiny",
            "variable" : 32
          },
          "go-type" : 2,
          "kind" : "expression",
          "target" : {
            "go-type" : 80,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "c",
              "variable" : 26
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "coerced-to" : {
            "go-type" : 2,
            "kind" : "type",
            "type" : "identifier",
            "value" : {
              "go-type" : 2,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "uintptr"
            }
          },
          "go-type" : 2,
          "kind" : "expression",
          "target" : {
            "go-type" : 11,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "x",
              "variable" : 27
            }
          },
          "type" : "cast"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 1020,
      "code" : "c.tiny = uintptr(x)",
      "entry" : false,
      "use-vars" : [ 27, 26 ]
    }, {
      "update-vars" : [ 26 ],
      "successors" : [ 62 ],
      "in-vars" : [ 25, 26, 1, 24, 7, 0, 17, 13, 27, 21, 6, 29, 11 ],
      "exit" : false,
      "out-vars" : [ 26, 17, 13, 25, 1, 27, 21, 24, 6, 29, 7, 11 ],
      "decl-vars" : [ ],
      "line-start" : 1021,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "tinyoffset",
            "variable" : 30
          },
          "go-type" : 2,
          "kind" : "expression",
          "target" : {
            "go-type" : 80,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "c",
              "variable" : 26
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "go-type" : 2,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "size",
            "variable" : 0
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 1021,
      "code" : "c.tinyoffset = size",
      "entry" : false,
      "use-vars" : [ 0, 26 ]
    }, {
      "update-vars" : [ 0 ],
      "successors" : [ 83 ],
      "in-vars" : [ 29, 11, 1, 13, 21, 24, 6, 7, 25, 26, 17, 27 ],
      "exit" : false,
      "out-vars" : [ 26, 1, 13, 21, 24, 6, 11, 25, 0, 17, 27, 29, 7 ],
      "decl-vars" : [ ],
      "line-start" : 1023,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 2,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "size",
            "variable" : 0
          }
        } ],
        "right" : [ {
          "go-type" : 2,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "16"
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 0 ],
      "line-end" : 1023,
      "code" : "size = maxTinySize",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 64 ],
      "in-vars" : [ 11, 12, 25, 9, 24, 29, 8, 13, 2, 7, 6, 0, 26, 1, 21, 17 ],
      "exit" : false,
      "out-vars" : [ 7, 0, 24, 6, 9, 2, 8, 1, 17, 12, 26, 21, 29, 25, 13, 11 ],
      "decl-vars" : [ 37 ],
      "line-start" : 1025,
      "ast" : {
        "kind" : "statement",
        "target" : {
          "kind" : "decl",
          "specs" : [ {
            "comments" : [ ],
            "declared-type" : {
              "go-type" : 8,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 8,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "uint8"
              }
            },
            "kind" : "spec",
            "names" : [ {
              "ident-kind" : "NoKind",
              "kind" : "ident",
              "value" : "sizeclass"
            } ],
            "type" : "var",
            "values" : [ ]
          } ],
          "type" : "var"
        },
        "type" : "declaration"
      },
      "assign-vars" : [ ],
      "line-end" : 1025,
      "code" : "var sizeclass uint8",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 65, 66 ],
      "in-vars" : [ 21, 24, 29, 8, 13, 9, 6, 0, 1, 2, 7, 11, 12, 25, 26, 17 ],
      "exit" : false,
      "out-vars" : [ 12, 1, 21, 7, 0, 2, 9, 6, 29, 11, 25, 13, 17, 24, 26, 8 ],
      "decl-vars" : [ ],
      "line-start" : 1026,
      "ast" : {
        "condition" : {
          "go-type" : 33,
          "kind" : "expression",
          "left" : {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "size",
              "variable" : 0
            }
          },
          "operator" : "<=",
          "right" : {
            "go-type" : 2,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "1016"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 1030,
      "code" : "if size <= smallSizeMax-8 {\n\tsizeclass = size_to_class8[(size+smallSizeDiv-1)/smallSizeDiv]\n} else {\n\tsizeclass = size_to_class128[(size-smallSizeMax+largeSizeDiv-1)/largeSizeDiv]\n}",
      "entry" : false,
      "use-vars" : [ 0 ]
    }, {
      "update-vars" : [ 37 ],
      "successors" : [ 67 ],
      "in-vars" : [ 1, 17, 13, 6, 29, 7, 0, 26, 9, 21, 25, 2, 11, 12, 24 ],
      "exit" : false,
      "out-vars" : [ 6, 29, 2, 25, 37, 17, 11, 26, 1, 21, 24, 7, 13, 9 ],
      "decl-vars" : [ ],
      "line-start" : 1027,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 8,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "sizeclass",
            "variable" : 37
          }
        } ],
        "right" : [ {
          "go-type" : 8,
          "index" : {
            "go-type" : 2,
            "kind" : "expression",
            "left" : {
              "go-type" : 2,
              "kind" : "expression",
              "target" : {
                "go-type" : 2,
                "kind" : "expression",
                "left" : {
                  "go-type" : 2,
                  "kind" : "expression",
                  "left" : {
                    "go-type" : 2,
                    "kind" : "expression",
                    "type" : "identifier",
                    "value" : {
                      "ident-kind" : "Var",
                      "kind" : "ident",
                      "value" : "size",
                      "variable" : 0
                    }
                  },
                  "operator" : "+",
                  "right" : {
                    "go-type" : 2,
                    "kind" : "constant",
                    "value" : {
                      "type" : "INT",
                      "value" : "8"
                    }
                  },
                  "type" : "binary"
                },
                "operator" : "-",
                "right" : {
                  "go-type" : 2,
                  "kind" : "constant",
                  "value" : {
                    "type" : "INT",
                    "value" : "1"
                  }
                },
                "type" : "binary"
              },
              "type" : "paren"
            },
            "operator" : "/",
            "right" : {
              "go-type" : 2,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "8"
              }
            },
            "type" : "binary"
          },
          "kind" : "expression",
          "target" : {
            "go-type" : 31,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "size_to_class8",
              "variable" : 12
            }
          },
          "type" : "index"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 37 ],
      "line-end" : 1027,
      "code" : "sizeclass = size_to_class8[(size+smallSizeDiv-1)/smallSizeDiv]",
      "entry" : false,
      "use-vars" : [ 12, 0 ]
    }, {
      "update-vars" : [ 37 ],
      "successors" : [ 67 ],
      "in-vars" : [ 26, 17, 6, 11, 13, 2, 25, 8, 9, 7, 0, 1, 21, 24, 29 ],
      "exit" : false,
      "out-vars" : [ 9, 24, 7, 25, 26, 1, 11, 37, 17, 6, 2, 13, 21, 29 ],
      "decl-vars" : [ ],
      "line-start" : 1029,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 8,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "sizeclass",
            "variable" : 37
          }
        } ],
        "right" : [ {
          "go-type" : 8,
          "index" : {
            "go-type" : 2,
            "kind" : "expression",
            "left" : {
              "go-type" : 2,
              "kind" : "expression",
              "target" : {
                "go-type" : 2,
                "kind" : "expression",
                "left" : {
                  "go-type" : 2,
                  "kind" : "expression",
                  "left" : {
                    "go-type" : 2,
                    "kind" : "expression",
                    "left" : {
                      "go-type" : 2,
                      "kind" : "expression",
                      "type" : "identifier",
                      "value" : {
                        "ident-kind" : "Var",
                        "kind" : "ident",
                        "value" : "size",
                        "variable" : 0
                      }
                    },
                    "operator" : "-",
                    "right" : {
                      "go-type" : 2,
                      "kind" : "constant",
                      "value" : {
                        "type" : "INT",
                        "value" : "1024"
                      }
                    },
                    "type" : "binary"
                  },
                  "operator" : "+",
                  "right" : {
                    "go-type" : 2,
                    "kind" : "constant",
                    "value" : {
                      "type" : "INT",
                      "value" : "128"
                    }
                  },
                  "type" : "binary"
                },
                "operator" : "-",
                "right" : {
                  "go-type" : 2,
                  "kind" : "constant",
                  "value" : {
                    "type" : "INT",
                    "value" : "1"
                  }
                },
                "type" : "binary"
              },
              "type" : "paren"
            },
            "operator" : "/",
            "right" : {
              "go-type" : 2,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "128"
              }
            },
            "type" : "binary"
          },
          "kind" : "expression",
          "target" : {
            "go-type" : 21,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "size_to_class128",
              "variable" : 8
            }
          },
          "type" : "index"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 37 ],
      "line-end" : 1029,
      "code" : "sizeclass = size_to_class128[(size-smallSizeMax+largeSizeDiv-1)/largeSizeDiv]",
      "entry" : false,
      "use-vars" : [ 0, 8 ]
    }, {
      "update-vars" : [ 0 ],
      "successors" : [ 68 ],
      "in-vars" : [ 9, 24, 29, 26, 1, 21, 7, 25, 11, 37, 13, 2, 6, 17 ],
      "exit" : false,
      "out-vars" : [ 26, 17, 29, 37, 1, 21, 7, 25, 2, 6, 11, 0, 13, 24 ],
      "decl-vars" : [ ],
      "line-start" : 1031,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 2,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "size",
            "variable" : 0
          }
        } ],
        "right" : [ {
          "coerced-to" : {
            "go-type" : 2,
            "kind" : "type",
            "type" : "identifier",
            "value" : {
              "go-type" : 2,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "uintptr"
            }
          },
          "go-type" : 2,
          "kind" : "expression",
          "target" : {
            "go-type" : 23,
            "index" : {
              "go-type" : 8,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "sizeclass",
                "variable" : 37
              }
            },
            "kind" : "expression",
            "target" : {
              "go-type" : 22,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "class_to_size",
                "variable" : 9
              }
            },
            "type" : "index"
          },
          "type" : "cast"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 0 ],
      "line-end" : 1031,
      "code" : "size = uintptr(class_to_size[sizeclass])",
      "entry" : false,
      "use-vars" : [ 9, 37 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 69 ],
      "in-vars" : [ 25, 0, 37, 13, 24, 29, 7, 26, 17, 2, 11, 1, 21, 6 ],
      "exit" : false,
      "out-vars" : [ 2, 6, 26, 13, 29, 38, 11, 1, 24, 17, 7, 25, 0, 21 ],
      "decl-vars" : [ 38 ],
      "line-start" : 1032,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "spc"
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 8,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "sizeclass",
              "variable" : 37
            }
          }, {
            "go-type" : 13,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "noscan",
              "variable" : 29
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 155,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 11,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "makeSpanClass"
            }
          },
          "go-type" : 93,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 1032,
      "code" : "spc := makeSpanClass(sizeclass, noscan)",
      "entry" : false,
      "use-vars" : [ 37, 29 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 70 ],
      "in-vars" : [ 6, 29, 38, 0, 1, 17, 7, 13, 21, 2, 24, 11, 25, 26 ],
      "exit" : false,
      "out-vars" : [ 25, 13, 2, 29, 26, 39, 38, 0, 17, 7, 1, 21, 24, 6, 11 ],
      "decl-vars" : [ 39 ],
      "line-start" : 1033,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "span"
          }
        } ],
        "right" : [ {
          "go-type" : 84,
          "index" : {
            "go-type" : 93,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "spc",
              "variable" : 38
            }
          },
          "kind" : "expression",
          "target" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "alloc",
              "variable" : 34
            },
            "go-type" : 83,
            "kind" : "expression",
            "target" : {
              "go-type" : 80,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "c",
                "variable" : 26
              }
            },
            "type" : "selector"
          },
          "type" : "index"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 1033,
      "code" : "span := c.alloc[spc]",
      "entry" : false,
      "use-vars" : [ 38, 26 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 71 ],
      "in-vars" : [ 1, 2, 6, 29, 7, 11, 0, 24, 38, 25, 13, 21, 39, 17, 26 ],
      "exit" : false,
      "out-vars" : [ 1, 2, 7, 11, 25, 40, 21, 24, 6, 29, 17, 13, 39, 0, 26, 38 ],
      "decl-vars" : [ 40 ],
      "line-start" : 1034,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "v"
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 84,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "span",
              "variable" : 39
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 146,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 9,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "nextFreeFast"
            }
          },
          "go-type" : 90,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 1034,
      "code" : "v := nextFreeFast(span)",
      "entry" : false,
      "use-vars" : [ 39 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 72, 73 ],
      "in-vars" : [ 0, 26, 17, 21, 39, 6, 29, 38, 40, 13, 2, 7, 11, 25, 1, 24 ],
      "exit" : false,
      "out-vars" : [ 0, 26, 1, 38, 11, 25, 13, 21, 39, 24, 29, 7, 17, 40, 2, 6 ],
      "decl-vars" : [ ],
      "line-start" : 1035,
      "ast" : {
        "condition" : {
          "go-type" : 33,
          "kind" : "expression",
          "left" : {
            "go-type" : 90,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "v",
              "variable" : 40
            }
          },
          "operator" : "==",
          "right" : {
            "go-type" : 90,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 1037,
      "code" : "if v == 0 {\n\tv, span, shouldhelpgc = c.nextFree(spc)\n}",
      "entry" : false,
      "use-vars" : [ 40 ]
    }, {
      "update-vars" : [ 24, 39, 40 ],
      "successors" : [ 73 ],
      "in-vars" : [ 0, 1, 21, 2, 6, 29, 38, 25, 26, 17, 13, 7, 11 ],
      "exit" : false,
      "out-vars" : [ 0, 40, 24, 29, 7, 26, 1, 39, 11, 25, 17, 13, 21, 2, 6 ],
      "decl-vars" : [ ],
      "line-start" : 1036,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 90,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "v",
            "variable" : 40
          }
        }, {
          "go-type" : 84,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "span",
            "variable" : 39
          }
        }, {
          "go-type" : 13,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "shouldhelpgc",
            "variable" : 24
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 93,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "spc",
              "variable" : 38
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "function" : 10,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "nextFree"
            },
            "go-type" : 150,
            "kind" : "expression",
            "target" : {
              "go-type" : 80,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "c",
                "variable" : 26
              }
            },
            "type" : "selector"
          },
          "go-type" : 149,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 40, 24, 39 ],
      "line-end" : 1036,
      "code" : "v, span, shouldhelpgc = c.nextFree(spc)",
      "entry" : false,
      "use-vars" : [ 26, 38 ]
    }, {
      "update-vars" : [ 27 ],
      "successors" : [ 74 ],
      "in-vars" : [ 11, 26, 39, 29, 17, 21, 2, 25, 0, 1, 13, 6, 7, 40, 24 ],
      "exit" : false,
      "out-vars" : [ 0, 27, 24, 6, 29, 26, 1, 17, 21, 39, 25, 40, 13, 2, 7, 11 ],
      "decl-vars" : [ ],
      "line-start" : 1038,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 11,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "x",
            "variable" : 27
          }
        } ],
        "right" : [ {
          "coerced-to" : {
            "go-type" : 11,
            "kind" : "type",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 1,
              "value" : "unsafe"
            },
            "type" : "identifier",
            "value" : {
              "go-type" : 11,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "Pointer"
            }
          },
          "go-type" : 11,
          "kind" : "expression",
          "target" : {
            "go-type" : 90,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "v",
              "variable" : 40
            }
          },
          "type" : "cast"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 27 ],
      "line-end" : 1038,
      "code" : "x = unsafe.Pointer(v)",
      "entry" : false,
      "use-vars" : [ 40 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 75, 83 ],
      "in-vars" : [ 0, 27, 39, 25, 29, 11, 26, 13, 21, 24, 6, 7, 40, 1, 17, 2 ],
      "exit" : false,
      "out-vars" : [ 24, 21, 25, 26, 1, 17, 27, 0, 29, 40, 13, 6, 7, 11 ],
      "decl-vars" : [ ],
      "line-start" : 1039,
      "ast" : {
        "condition" : {
          "go-type" : 13,
          "kind" : "expression",
          "left" : {
            "go-type" : 13,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "needzero",
              "variable" : 2
            }
          },
          "operator" : "&&",
          "right" : {
            "go-type" : 13,
            "kind" : "expression",
            "left" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "needzero",
                "variable" : 41
              },
              "go-type" : 8,
              "kind" : "expression",
              "target" : {
                "go-type" : 84,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "span",
                  "variable" : 39
                }
              },
              "type" : "selector"
            },
            "operator" : "!=",
            "right" : {
              "go-type" : 8,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "0"
              }
            },
            "type" : "binary"
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 1041,
      "code" : "if needzero && span.needzero != 0 {\n\tmemclrNoHeapPointers(unsafe.Pointer(v), size)\n}",
      "entry" : false,
      "use-vars" : [ 2, 39 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 83 ],
      "in-vars" : [ 25, 40, 29, 26, 13, 21, 1, 17, 7, 11, 0, 27, 24, 6 ],
      "exit" : false,
      "out-vars" : [ 24, 11, 0, 27, 1, 17, 13, 21, 6, 29, 25, 26, 7 ],
      "decl-vars" : [ ],
      "line-start" : 1040,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "coerced-to" : {
              "go-type" : 11,
              "kind" : "type",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 1,
                "value" : "unsafe"
              },
              "type" : "identifier",
              "value" : {
                "go-type" : 11,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "Pointer"
              }
            },
            "go-type" : 11,
            "kind" : "expression",
            "target" : {
              "go-type" : 90,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "v",
                "variable" : 40
              }
            },
            "type" : "cast"
          }, {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "size",
              "variable" : 0
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 158,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 12,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "memclrNoHeapPointers"
            }
          },
          "go-type" : 34,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 1040,
      "code" : "memclrNoHeapPointers(unsafe.Pointer(v), size)",
      "entry" : false,
      "use-vars" : [ 0, 40 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 77 ],
      "in-vars" : [ 26, 1, 13, 11, 29, 7, 25, 0, 17, 21, 2, 6 ],
      "exit" : false,
      "out-vars" : [ 17, 2, 29, 11, 26, 42, 1, 21, 6, 7, 25, 0, 13 ],
      "decl-vars" : [ 42 ],
      "line-start" : 1044,
      "ast" : {
        "kind" : "statement",
        "target" : {
          "kind" : "decl",
          "specs" : [ {
            "comments" : [ ],
            "declared-type" : {
              "contained" : {
                "go-type" : 85,
                "kind" : "type",
                "type" : "identifier",
                "value" : {
                  "go-type" : 85,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "mspan"
                }
              },
              "go-type" : 84,
              "kind" : "type",
              "type" : "pointer"
            },
            "kind" : "spec",
            "names" : [ {
              "ident-kind" : "NoKind",
              "kind" : "ident",
              "value" : "s"
            } ],
            "type" : "var",
            "values" : [ ]
          } ],
          "type" : "var"
        },
        "type" : "declaration"
      },
      "assign-vars" : [ ],
      "line-end" : 1044,
      "code" : "var s *mspan",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ 24 ],
      "successors" : [ 78 ],
      "in-vars" : [ 6, 25, 0, 26, 42, 17, 13, 2, 29, 7, 11, 1, 21 ],
      "exit" : false,
      "out-vars" : [ 13, 6, 11, 25, 26, 1, 2, 24, 17, 21, 29, 0, 42, 7 ],
      "decl-vars" : [ ],
      "line-start" : 1045,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 13,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "shouldhelpgc",
            "variable" : 24
          }
        } ],
        "right" : [ {
          "go-type" : 13,
          "kind" : "constant",
          "value" : {
            "type" : "BOOL",
            "value" : "true"
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 24 ],
      "line-end" : 1045,
      "code" : "shouldhelpgc = true",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 79 ],
      "in-vars" : [ 2, 6, 0, 26, 1, 13, 21, 24, 11, 42, 25, 17, 29, 7 ],
      "exit" : false,
      "out-vars" : [ 21, 24, 6, 42, 17, 1, 13, 29, 7, 11, 25, 26 ],
      "decl-vars" : [ ],
      "line-start" : 1046,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "body" : [ {
              "kind" : "statement",
              "left" : [ {
                "go-type" : 84,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "s",
                  "variable" : 42
                }
              } ],
              "right" : [ {
                "arguments" : [ {
                  "go-type" : 2,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "size",
                    "variable" : 0
                  }
                }, {
                  "go-type" : 13,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "needzero",
                    "variable" : 2
                  }
                }, {
                  "go-type" : 13,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "noscan",
                    "variable" : 29
                  }
                } ],
                "ellipsis" : false,
                "function" : {
                  "go-type" : 162,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "function" : 14,
                    "ident-kind" : "Func",
                    "kind" : "ident",
                    "value" : "largeAlloc"
                  }
                },
                "go-type" : 84,
                "kind" : "expression",
                "type" : "call"
              } ],
              "type" : "assign"
            } ],
            "go-type" : 70,
            "kind" : "literal",
            "params" : [ ],
            "results" : null,
            "type" : "function",
            "variadic" : null
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 160,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 13,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "systemstack"
            }
          },
          "go-type" : 34,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 1048,
      "code" : "systemstack(func() {\n\ts = largeAlloc(size, needzero, noscan)\n})",
      "entry" : false,
      "use-vars" : [ 2, 29, 42, 0 ]
    }, {
      "update-vars" : [ 42 ],
      "successors" : [ 80 ],
      "in-vars" : [ 21, 24, 7, 25, 42, 17, 13, 11, 26, 1, 6, 29 ],
      "exit" : false,
      "out-vars" : [ 25, 42, 1, 17, 13, 21, 24, 6, 7, 26, 29, 11 ],
      "decl-vars" : [ ],
      "line-start" : 1049,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "freeindex",
            "variable" : 43
          },
          "go-type" : 2,
          "kind" : "expression",
          "target" : {
            "go-type" : 84,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "s",
              "variable" : 42
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "go-type" : 2,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "1"
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 1049,
      "code" : "s.freeindex = 1",
      "entry" : false,
      "use-vars" : [ 42 ]
    }, {
      "update-vars" : [ 42 ],
      "successors" : [ 81 ],
      "in-vars" : [ 26, 21, 29, 7, 11, 25, 1, 17, 13, 24, 6, 42 ],
      "exit" : false,
      "out-vars" : [ 7, 26, 13, 21, 24, 6, 11, 25, 42, 1, 17, 29 ],
      "decl-vars" : [ ],
      "line-start" : 1050,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "allocCount",
            "variable" : 44
          },
          "go-type" : 23,
          "kind" : "expression",
          "target" : {
            "go-type" : 84,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "s",
              "variable" : 42
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "go-type" : 23,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "1"
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 1050,
      "code" : "s.allocCount = 1",
      "entry" : false,
      "use-vars" : [ 42 ]
    }, {
      "update-vars" : [ 27 ],
      "successors" : [ 82 ],
      "in-vars" : [ 24, 6, 29, 42, 17, 21, 13, 7, 11, 25, 26, 1 ],
      "exit" : false,
      "out-vars" : [ 21, 24, 11, 25, 42, 13, 27, 6, 29, 7, 26, 1, 17 ],
      "decl-vars" : [ ],
      "line-start" : 1051,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 11,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "x",
            "variable" : 27
          }
        } ],
        "right" : [ {
          "coerced-to" : {
            "go-type" : 11,
            "kind" : "type",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 1,
              "value" : "unsafe"
            },
            "type" : "identifier",
            "value" : {
              "go-type" : 11,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "Pointer"
            }
          },
          "go-type" : 11,
          "kind" : "expression",
          "target" : {
            "arguments" : [ ],
            "ellipsis" : false,
            "function" : {
              "field" : {
                "function" : 15,
                "ident-kind" : "Func",
                "kind" : "ident",
                "value" : "base"
              },
              "go-type" : 165,
              "kind" : "expression",
              "target" : {
                "go-type" : 84,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "s",
                  "variable" : 42
                }
              },
              "type" : "selector"
            },
            "go-type" : 2,
            "kind" : "expression",
            "type" : "call"
          },
          "type" : "cast"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 27 ],
      "line-end" : 1051,
      "code" : "x = unsafe.Pointer(s.base())",
      "entry" : false,
      "use-vars" : [ 42 ]
    }, {
      "update-vars" : [ 0 ],
      "successors" : [ 83 ],
      "in-vars" : [ 26, 42, 17, 27, 21, 24, 6, 25, 7, 11, 29, 13, 1 ],
      "exit" : false,
      "out-vars" : [ 17, 27, 21, 1, 0, 26, 13, 24, 6, 29, 7, 25, 11 ],
      "decl-vars" : [ ],
      "line-start" : 1052,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 2,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "size",
            "variable" : 0
          }
        } ],
        "right" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "elemsize",
            "variable" : 45
          },
          "go-type" : 2,
          "kind" : "expression",
          "target" : {
            "go-type" : 84,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "s",
              "variable" : 42
            }
          },
          "type" : "selector"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 0 ],
      "line-end" : 1052,
      "code" : "size = s.elemsize",
      "entry" : false,
      "use-vars" : [ 42 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 84 ],
      "in-vars" : [ 11, 0, 13, 27, 21, 29, 7, 25, 26, 1, 17, 24, 6 ],
      "exit" : false,
      "out-vars" : [ 27, 11, 17, 26, 29, 7, 25, 13, 21, 24, 6, 46, 1, 0 ],
      "decl-vars" : [ 46 ],
      "line-start" : 1055,
      "ast" : {
        "kind" : "statement",
        "target" : {
          "kind" : "decl",
          "specs" : [ {
            "comments" : [ ],
            "declared-type" : {
              "go-type" : 2,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 2,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "uintptr"
              }
            },
            "kind" : "spec",
            "names" : [ {
              "ident-kind" : "NoKind",
              "kind" : "ident",
              "value" : "scanSize"
            } ],
            "type" : "var",
            "values" : [ ]
          } ],
          "type" : "var"
        },
        "type" : "declaration"
      },
      "assign-vars" : [ ],
      "line-end" : 1055,
      "code" : "var scanSize uintptr",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 85, 93 ],
      "in-vars" : [ 29, 0, 46, 17, 27, 21, 7, 25, 26, 1, 13, 6, 11, 24 ],
      "exit" : false,
      "out-vars" : [ 25, 0, 17, 13, 27, 24, 6, 26, 46, 1, 21, 7, 11 ],
      "decl-vars" : [ ],
      "line-start" : 1056,
      "ast" : {
        "condition" : {
          "go-type" : 13,
          "kind" : "expression",
          "operator" : "!",
          "target" : {
            "go-type" : 13,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "noscan",
              "variable" : 29
            }
          },
          "type" : "unary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 1078,
      "code" : "if !noscan {\n\n\tif typ == deferType {\n\t\tdataSize = unsafe.Sizeof(_defer{})\n\t}\n\theapBitsSetType(uintptr(x), size, dataSize, typ)\n\tif dataSize > typ.size {\n\n\t\tif typ.ptrdata != 0 {\n\t\t\tscanSize = dataSize - typ.size + typ.ptrdata\n\t\t}\n\t} else {\n\t\tscanSize = typ.ptrdata\n\t}\n\tc.local_scan += scanSize\n}",
      "entry" : false,
      "use-vars" : [ 29 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 86, 87 ],
      "in-vars" : [ 6, 7, 25, 0, 13, 21, 27, 24, 11, 26, 46, 1, 17 ],
      "exit" : false,
      "out-vars" : [ 46, 17, 27, 24, 7, 0, 26, 1, 13, 21, 6, 25 ],
      "decl-vars" : [ ],
      "line-start" : 1063,
      "ast" : {
        "condition" : {
          "go-type" : 33,
          "kind" : "expression",
          "left" : {
            "go-type" : 3,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "typ",
              "variable" : 1
            }
          },
          "operator" : "==",
          "right" : {
            "go-type" : 3,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "deferType",
              "variable" : 11
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 1065,
      "code" : "if typ == deferType {\n\tdataSize = unsafe.Sizeof(_defer{})\n}",
      "entry" : false,
      "use-vars" : [ 1, 11 ]
    }, {
      "update-vars" : [ 25 ],
      "successors" : [ 87 ],
      "in-vars" : [ 1, 17, 27, 21, 6, 7, 26, 46, 13, 24, 0 ],
      "exit" : false,
      "out-vars" : [ 17, 13, 21, 6, 7, 25, 0, 46, 24, 26, 1, 27 ],
      "decl-vars" : [ ],
      "line-start" : 1064,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 2,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "dataSize",
            "variable" : 25
          }
        } ],
        "right" : [ {
          "go-type" : 2,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "72"
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 25 ],
      "line-end" : 1064,
      "code" : "dataSize = unsafe.Sizeof(_defer{})",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 88 ],
      "in-vars" : [ 46, 1, 17, 21, 6, 0, 26, 13, 27, 24, 7, 25 ],
      "exit" : false,
      "out-vars" : [ 0, 26, 46, 17, 27, 7, 25, 13, 21, 24, 6, 1 ],
      "decl-vars" : [ ],
      "line-start" : 1066,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "coerced-to" : {
              "go-type" : 2,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 2,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "uintptr"
              }
            },
            "go-type" : 2,
            "kind" : "expression",
            "target" : {
              "go-type" : 11,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "x",
                "variable" : 27
              }
            },
            "type" : "cast"
          }, {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "size",
              "variable" : 0
            }
          }, {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "dataSize",
              "variable" : 25
            }
          }, {
            "go-type" : 3,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "typ",
              "variable" : 1
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 166,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 16,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "heapBitsSetType"
            }
          },
          "go-type" : 34,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 1066,
      "code" : "heapBitsSetType(uintptr(x), size, dataSize, typ)",
      "entry" : false,
      "use-vars" : [ 0, 25, 1, 27 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 89, 91 ],
      "in-vars" : [ 13, 24, 6, 25, 26, 46, 1, 7, 0, 17, 27, 21 ],
      "exit" : false,
      "out-vars" : [ 6, 7, 25, 26, 13, 21, 27, 24, 0, 46, 1, 17 ],
      "decl-vars" : [ ],
      "line-start" : 1067,
      "ast" : {
        "condition" : {
          "go-type" : 33,
          "kind" : "expression",
          "left" : {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "dataSize",
              "variable" : 25
            }
          },
          "operator" : ">",
          "right" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "size",
              "variable" : 47
            },
            "go-type" : 2,
            "kind" : "expression",
            "target" : {
              "go-type" : 3,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "typ",
                "variable" : 1
              }
            },
            "type" : "selector"
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 1076,
      "code" : "if dataSize > typ.size {\n\n\tif typ.ptrdata != 0 {\n\t\tscanSize = dataSize - typ.size + typ.ptrdata\n\t}\n} else {\n\tscanSize = typ.ptrdata\n}",
      "entry" : false,
      "use-vars" : [ 1, 25 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 90, 92 ],
      "in-vars" : [ 25, 0, 46, 1, 13, 24, 7, 26, 17, 27, 21, 6 ],
      "exit" : false,
      "out-vars" : [ 13, 27, 6, 7, 25, 26, 17, 21, 24, 0, 46, 1 ],
      "decl-vars" : [ ],
      "line-start" : 1071,
      "ast" : {
        "condition" : {
          "go-type" : 33,
          "kind" : "expression",
          "left" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "ptrdata",
              "variable" : 28
            },
            "go-type" : 2,
            "kind" : "expression",
            "target" : {
              "go-type" : 3,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "typ",
                "variable" : 1
              }
            },
            "type" : "selector"
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 2,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 1073,
      "code" : "if typ.ptrdata != 0 {\n\tscanSize = dataSize - typ.size + typ.ptrdata\n}",
      "entry" : false,
      "use-vars" : [ 1 ]
    }, {
      "update-vars" : [ 46 ],
      "successors" : [ 92 ],
      "in-vars" : [ 1, 17, 27, 21, 24, 25, 0, 26, 13, 6, 7 ],
      "exit" : false,
      "out-vars" : [ 0, 26, 27, 21, 6, 7, 25, 46, 1, 17, 13, 24 ],
      "decl-vars" : [ ],
      "line-start" : 1072,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 2,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "scanSize",
            "variable" : 46
          }
        } ],
        "right" : [ {
          "go-type" : 2,
          "kind" : "expression",
          "left" : {
            "go-type" : 2,
            "kind" : "expression",
            "left" : {
              "go-type" : 2,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "dataSize",
                "variable" : 25
              }
            },
            "operator" : "-",
            "right" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "size",
                "variable" : 47
              },
              "go-type" : 2,
              "kind" : "expression",
              "target" : {
                "go-type" : 3,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "typ",
                  "variable" : 1
                }
              },
              "type" : "selector"
            },
            "type" : "binary"
          },
          "operator" : "+",
          "right" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "ptrdata",
              "variable" : 28
            },
            "go-type" : 2,
            "kind" : "expression",
            "target" : {
              "go-type" : 3,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "typ",
                "variable" : 1
              }
            },
            "type" : "selector"
          },
          "type" : "binary"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 46 ],
      "line-end" : 1072,
      "code" : "scanSize = dataSize - typ.size + typ.ptrdata",
      "entry" : false,
      "use-vars" : [ 25, 1 ]
    }, {
      "update-vars" : [ 46 ],
      "successors" : [ 92 ],
      "in-vars" : [ 25, 17, 7, 6, 0, 26, 1, 13, 27, 21, 24 ],
      "exit" : false,
      "out-vars" : [ 17, 6, 27, 21, 25, 0, 26, 46, 1, 13, 24, 7 ],
      "decl-vars" : [ ],
      "line-start" : 1075,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 2,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "scanSize",
            "variable" : 46
          }
        } ],
        "right" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "ptrdata",
            "variable" : 28
          },
          "go-type" : 2,
          "kind" : "expression",
          "target" : {
            "go-type" : 3,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "typ",
              "variable" : 1
            }
          },
          "type" : "selector"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 46 ],
      "line-end" : 1075,
      "code" : "scanSize = typ.ptrdata",
      "entry" : false,
      "use-vars" : [ 1 ]
    }, {
      "update-vars" : [ 26 ],
      "successors" : [ 93 ],
      "in-vars" : [ 27, 24, 25, 46, 17, 13, 6, 7, 0, 26, 1, 21 ],
      "exit" : false,
      "out-vars" : [ 27, 21, 24, 0, 46, 1, 13, 6, 7, 25, 26, 17 ],
      "decl-vars" : [ ],
      "line-start" : 1077,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "local_scan",
            "variable" : 48
          },
          "go-type" : 2,
          "kind" : "expression",
          "target" : {
            "go-type" : 80,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "c",
              "variable" : 26
            }
          },
          "type" : "selector"
        } ],
        "operator" : "+",
        "right" : [ {
          "go-type" : 2,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "scanSize",
            "variable" : 46
          }
        } ],
        "type" : "assign-operator"
      },
      "assign-vars" : [ ],
      "line-end" : 1077,
      "code" : "c.local_scan += scanSize",
      "entry" : false,
      "use-vars" : [ 26, 46 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 94 ],
      "in-vars" : [ 24, 25, 0, 1, 21, 27, 6, 7, 26, 46, 17, 13 ],
      "exit" : false,
      "out-vars" : [ 7, 0, 17, 13, 27, 6, 24, 25, 26, 46, 1, 21 ],
      "decl-vars" : [ ],
      "line-start" : 1086,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 70,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 17,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "publicationBarrier"
            }
          },
          "go-type" : 34,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 1086,
      "code" : "publicationBarrier()",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 95, 96 ],
      "in-vars" : [ 0, 26, 46, 1, 17, 24, 25, 13, 27, 21, 6, 7 ],
      "exit" : false,
      "out-vars" : [ 26, 46, 17, 27, 24, 25, 0, 21, 7, 1, 13 ],
      "decl-vars" : [ ],
      "line-start" : 1092,
      "ast" : {
        "condition" : {
          "go-type" : 33,
          "kind" : "expression",
          "left" : {
            "go-type" : 6,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "gcphase",
              "variable" : 6
            }
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 6,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 1094,
      "code" : "if gcphase != _GCoff {\n\tgcmarknewobject(uintptr(x), size, scanSize)\n}",
      "entry" : false,
      "use-vars" : [ 6 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 96 ],
      "in-vars" : [ 13, 24, 7, 25, 0, 46, 27, 21, 26, 1, 17 ],
      "exit" : false,
      "out-vars" : [ 0, 17, 27, 21, 7, 25, 26, 1, 13, 24 ],
      "decl-vars" : [ ],
      "line-start" : 1093,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "coerced-to" : {
              "go-type" : 2,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 2,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "uintptr"
              }
            },
            "go-type" : 2,
            "kind" : "expression",
            "target" : {
              "go-type" : 11,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "x",
                "variable" : 27
              }
            },
            "type" : "cast"
          }, {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "size",
              "variable" : 0
            }
          }, {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "scanSize",
              "variable" : 46
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 168,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 18,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "gcmarknewobject"
            }
          },
          "go-type" : 34,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 1093,
      "code" : "gcmarknewobject(uintptr(x), size, scanSize)",
      "entry" : false,
      "use-vars" : [ 27, 0, 46 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 97, 98 ],
      "in-vars" : [ 13, 21, 7, 25, 0, 26, 24, 1, 17, 27 ],
      "exit" : false,
      "out-vars" : [ 21, 7, 25, 26, 13, 27, 0, 1, 17, 24 ],
      "decl-vars" : [ ],
      "line-start" : 1096,
      "ast" : {
        "condition" : {
          "go-type" : 33,
          "kind" : "constant",
          "value" : {
            "type" : "BOOL",
            "value" : "false"
          }
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 1098,
      "code" : "if raceenabled {\n\tracemalloc(x, size)\n}",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 98 ],
      "in-vars" : [ 7, 25, 0, 13, 21, 24, 26, 1, 17, 27 ],
      "exit" : false,
      "out-vars" : [ 21, 7, 25, 1, 13, 27, 24, 0, 26, 17 ],
      "decl-vars" : [ ],
      "line-start" : 1097,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 11,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "x",
              "variable" : 27
            }
          }, {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "size",
              "variable" : 0
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 170,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 19,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "racemalloc"
            }
          },
          "go-type" : 34,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 1097,
      "code" : "racemalloc(x, size)",
      "entry" : false,
      "use-vars" : [ 27, 0 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 99, 100 ],
      "in-vars" : [ 27, 21, 24, 0, 26, 1, 17, 13, 7, 25 ],
      "exit" : false,
      "out-vars" : [ 17, 13, 25, 0, 26, 1, 27, 21, 24, 7 ],
      "decl-vars" : [ ],
      "line-start" : 1100,
      "ast" : {
        "condition" : {
          "go-type" : 33,
          "kind" : "constant",
          "value" : {
            "type" : "BOOL",
            "value" : "false"
          }
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 1102,
      "code" : "if msanenabled {\n\tmsanmalloc(x, size)\n}",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 100 ],
      "in-vars" : [ 13, 27, 24, 25, 26, 1, 7, 0, 17, 21 ],
      "exit" : false,
      "out-vars" : [ 25, 1, 17, 21, 24, 7, 0, 26, 13, 27 ],
      "decl-vars" : [ ],
      "line-start" : 1101,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 11,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "x",
              "variable" : 27
            }
          }, {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "size",
              "variable" : 0
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 172,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 20,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "msanmalloc"
            }
          },
          "go-type" : 34,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 1101,
      "code" : "msanmalloc(x, size)",
      "entry" : false,
      "use-vars" : [ 27, 0 ]
    }, {
      "update-vars" : [ 21 ],
      "successors" : [ 101 ],
      "in-vars" : [ 13, 27, 21, 0, 26, 1, 17, 25, 24, 7 ],
      "exit" : false,
      "out-vars" : [ 17, 13, 27, 21, 7, 0, 1, 24, 25, 26 ],
      "decl-vars" : [ ],
      "line-start" : 1104,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "mallocing",
            "variable" : 22
          },
          "go-type" : 17,
          "kind" : "expression",
          "target" : {
            "go-type" : 58,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "mp",
              "variable" : 21
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "go-type" : 17,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "0"
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 1104,
      "code" : "mp.mallocing = 0",
      "entry" : false,
      "use-vars" : [ 21 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 102 ],
      "in-vars" : [ 27, 24, 0, 17, 1, 13, 21, 7, 25, 26 ],
      "exit" : false,
      "out-vars" : [ 26, 24, 7, 0, 1, 17, 13, 27, 25 ],
      "decl-vars" : [ ],
      "line-start" : 1105,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 58,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "mp",
              "variable" : 21
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 144,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 8,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "releasem"
            }
          },
          "go-type" : 34,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 1105,
      "code" : "releasem(mp)",
      "entry" : false,
      "use-vars" : [ 21 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 103, 105 ],
      "in-vars" : [ 1, 13, 27, 24, 7, 25, 0, 26, 17 ],
      "exit" : false,
      "out-vars" : [ 27, 24, 7, 25, 0, 26, 1, 17 ],
      "decl-vars" : [ ],
      "line-start" : 1107,
      "ast" : {
        "condition" : {
          "go-type" : 33,
          "kind" : "expression",
          "left" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "allocfreetrace",
              "variable" : 49
            },
            "go-type" : 17,
            "kind" : "expression",
            "target" : {
              "go-type" : 32,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "debug",
                "variable" : 13
              }
            },
            "type" : "selector"
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 17,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 1109,
      "code" : "if debug.allocfreetrace != 0 {\n\ttracealloc(x, size, typ)\n}",
      "entry" : false,
      "use-vars" : [ 13 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 105 ],
      "in-vars" : [ 1, 17, 27, 24, 7, 25, 0, 26 ],
      "exit" : false,
      "out-vars" : [ 7, 25, 0, 26, 17, 27, 24 ],
      "decl-vars" : [ ],
      "line-start" : 1108,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 11,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "x",
              "variable" : 27
            }
          }, {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "size",
              "variable" : 0
            }
          }, {
            "go-type" : 3,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "typ",
              "variable" : 1
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 174,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 21,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "tracealloc"
            }
          },
          "go-type" : 34,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 1108,
      "code" : "tracealloc(x, size, typ)",
      "entry" : false,
      "use-vars" : [ 27, 0, 1 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 106, 111 ],
      "in-vars" : [ 26, 17, 27, 24, 50, 25, 0 ],
      "exit" : false,
      "out-vars" : [ 24, 50, 25, 0, 26, 17, 27 ],
      "decl-vars" : [ ],
      "line-start" : 1111,
      "ast" : {
        "condition" : {
          "go-type" : 33,
          "kind" : "expression",
          "left" : {
            "go-type" : 20,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "rate",
              "variable" : 50
            }
          },
          "operator" : ">",
          "right" : {
            "go-type" : 20,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 1119,
      "code" : "if rate := MemProfileRate; rate > 0 {\n\tif rate != 1 && size < c.next_sample {\n\t\tc.next_sample -= size\n\t} else {\n\t\tmp := acquirem()\n\t\tprofilealloc(mp, x, size)\n\t\treleasem(mp)\n\t}\n}",
      "entry" : false,
      "use-vars" : [ 50 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 104 ],
      "in-vars" : [ 25, 0, 26, 17, 27, 24, 7 ],
      "exit" : false,
      "out-vars" : [ 50, 25, 0, 26, 17, 27, 24 ],
      "decl-vars" : [ 50 ],
      "line-start" : 1111,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "rate"
          }
        } ],
        "right" : [ {
          "go-type" : 20,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "MemProfileRate",
            "variable" : 7
          }
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 1111,
      "code" : "rate := MemProfileRate",
      "entry" : false,
      "use-vars" : [ 7 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 107, 108 ],
      "in-vars" : [ 50, 25, 0, 26, 17, 27, 24 ],
      "exit" : false,
      "out-vars" : [ 26, 17, 27, 24, 25, 0 ],
      "decl-vars" : [ ],
      "line-start" : 1112,
      "ast" : {
        "condition" : {
          "go-type" : 33,
          "kind" : "expression",
          "left" : {
            "go-type" : 33,
            "kind" : "expression",
            "left" : {
              "go-type" : 20,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "rate",
                "variable" : 50
              }
            },
            "operator" : "!=",
            "right" : {
              "go-type" : 20,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "1"
              }
            },
            "type" : "binary"
          },
          "operator" : "&&",
          "right" : {
            "go-type" : 33,
            "kind" : "expression",
            "left" : {
              "go-type" : 2,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "size",
                "variable" : 0
              }
            },
            "operator" : "<",
            "right" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "next_sample",
                "variable" : 51
              },
              "go-type" : 2,
              "kind" : "expression",
              "target" : {
                "go-type" : 80,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "c",
                  "variable" : 26
                }
              },
              "type" : "selector"
            },
            "type" : "binary"
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 1118,
      "code" : "if rate != 1 && size < c.next_sample {\n\tc.next_sample -= size\n} else {\n\tmp := acquirem()\n\tprofilealloc(mp, x, size)\n\treleasem(mp)\n}",
      "entry" : false,
      "use-vars" : [ 0, 26, 50 ]
    }, {
      "update-vars" : [ 26 ],
      "successors" : [ 111 ],
      "in-vars" : [ 26, 17, 27, 24, 25, 0 ],
      "exit" : false,
      "out-vars" : [ 25, 0, 17, 27, 24 ],
      "decl-vars" : [ ],
      "line-start" : 1113,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "next_sample",
            "variable" : 51
          },
          "go-type" : 2,
          "kind" : "expression",
          "target" : {
            "go-type" : 80,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "c",
              "variable" : 26
            }
          },
          "type" : "selector"
        } ],
        "operator" : "-",
        "right" : [ {
          "go-type" : 2,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "size",
            "variable" : 0
          }
        } ],
        "type" : "assign-operator"
      },
      "assign-vars" : [ ],
      "line-end" : 1113,
      "code" : "c.next_sample -= size",
      "entry" : false,
      "use-vars" : [ 0, 26 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 109 ],
      "in-vars" : [ 25, 0, 17, 27, 24 ],
      "exit" : false,
      "out-vars" : [ 25, 0, 52, 17, 27, 24 ],
      "decl-vars" : [ 52 ],
      "line-start" : 1115,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "mp"
          }
        } ],
        "right" : [ {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 137,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 5,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "acquirem"
            }
          },
          "go-type" : 58,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 1115,
      "code" : "mp := acquirem()",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 110 ],
      "in-vars" : [ 52, 17, 27, 24, 25, 0 ],
      "exit" : false,
      "out-vars" : [ 25, 0, 52, 17, 27, 24 ],
      "decl-vars" : [ ],
      "line-start" : 1116,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 58,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "mp",
              "variable" : 52
            }
          }, {
            "go-type" : 11,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "x",
              "variable" : 27
            }
          }, {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "size",
              "variable" : 0
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 176,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 22,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "profilealloc"
            }
          },
          "go-type" : 34,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 1116,
      "code" : "profilealloc(mp, x, size)",
      "entry" : false,
      "use-vars" : [ 52, 27, 0 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 111 ],
      "in-vars" : [ 17, 27, 24, 25, 0, 52 ],
      "exit" : false,
      "out-vars" : [ 27, 24, 25, 0, 17 ],
      "decl-vars" : [ ],
      "line-start" : 1117,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 58,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "mp",
              "variable" : 52
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 144,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 8,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "releasem"
            }
          },
          "go-type" : 34,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 1117,
      "code" : "releasem(mp)",
      "entry" : false,
      "use-vars" : [ 52 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 112, 113 ],
      "in-vars" : [ 25, 0, 17, 27, 24 ],
      "exit" : false,
      "out-vars" : [ 25, 0, 17, 27, 24 ],
      "decl-vars" : [ ],
      "line-start" : 1121,
      "ast" : {
        "condition" : {
          "go-type" : 33,
          "kind" : "expression",
          "left" : {
            "go-type" : 43,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "assistG",
              "variable" : 17
            }
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 39,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Nil",
              "kind" : "ident",
              "value" : "nil"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 1125,
      "code" : "if assistG != nil {\n\n\tassistG.gcAssistBytes -= int64(size - dataSize)\n}",
      "entry" : false,
      "use-vars" : [ 17 ]
    }, {
      "update-vars" : [ 17 ],
      "successors" : [ 113 ],
      "in-vars" : [ 25, 0, 17, 27, 24 ],
      "exit" : false,
      "out-vars" : [ 27, 24 ],
      "decl-vars" : [ ],
      "line-start" : 1124,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "gcAssistBytes",
            "variable" : 20
          },
          "go-type" : 72,
          "kind" : "expression",
          "target" : {
            "go-type" : 43,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "assistG",
              "variable" : 17
            }
          },
          "type" : "selector"
        } ],
        "operator" : "-",
        "right" : [ {
          "coerced-to" : {
            "go-type" : 72,
            "kind" : "type",
            "type" : "identifier",
            "value" : {
              "go-type" : 72,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "int64"
            }
          },
          "go-type" : 72,
          "kind" : "expression",
          "target" : {
            "go-type" : 2,
            "kind" : "expression",
            "left" : {
              "go-type" : 2,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "size",
                "variable" : 0
              }
            },
            "operator" : "-",
            "right" : {
              "go-type" : 2,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "dataSize",
                "variable" : 25
              }
            },
            "type" : "binary"
          },
          "type" : "cast"
        } ],
        "type" : "assign-operator"
      },
      "assign-vars" : [ ],
      "line-end" : 1124,
      "code" : "assistG.gcAssistBytes -= int64(size - dataSize)",
      "entry" : false,
      "use-vars" : [ 25, 17, 0 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 115, 117 ],
      "in-vars" : [ 27, 24 ],
      "exit" : false,
      "out-vars" : [ 27 ],
      "decl-vars" : [ ],
      "line-start" : 1127,
      "ast" : {
        "condition" : {
          "go-type" : 13,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "shouldhelpgc",
            "variable" : 24
          }
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 1131,
      "code" : "if shouldhelpgc {\n\tif t := (gcTrigger{kind: gcTriggerHeap}); t.test() {\n\t\tgcStart(t)\n\t}\n}",
      "entry" : false,
      "use-vars" : [ 24 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 116, 117 ],
      "in-vars" : [ 54, 27 ],
      "exit" : false,
      "out-vars" : [ 27, 54 ],
      "decl-vars" : [ ],
      "line-start" : 1128,
      "ast" : {
        "condition" : {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "function" : 23,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "test"
            },
            "go-type" : 181,
            "kind" : "expression",
            "target" : {
              "go-type" : 178,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "t",
                "variable" : 54
              }
            },
            "type" : "selector"
          },
          "go-type" : 13,
          "kind" : "expression",
          "type" : "call"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 1130,
      "code" : "if t := (gcTrigger{kind: gcTriggerHeap}); t.test() {\n\tgcStart(t)\n}",
      "entry" : false,
      "use-vars" : [ 54 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 114 ],
      "in-vars" : [ 27 ],
      "exit" : false,
      "out-vars" : [ 27, 54 ],
      "decl-vars" : [ 54 ],
      "line-start" : 1128,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "t"
          }
        } ],
        "right" : [ {
          "go-type" : 178,
          "kind" : "expression",
          "target" : {
            "declared" : {
              "go-type" : 178,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 178,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "gcTrigger"
              }
            },
            "go-type" : 178,
            "kind" : "literal",
            "type" : "composite",
            "values" : [ {
              "go-type" : -1,
              "key" : {
                "go-type" : -1,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "kind",
                  "variable" : 53
                }
              },
              "kind" : "expression",
              "type" : "key-value",
              "value" : {
                "go-type" : 180,
                "kind" : "constant",
                "value" : {
                  "type" : "INT",
                  "value" : "0"
                }
              }
            } ]
          },
          "type" : "paren"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 1128,
      "code" : "t := (gcTrigger{kind: gcTriggerHeap})",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 117 ],
      "in-vars" : [ 27, 54 ],
      "exit" : false,
      "out-vars" : [ 27 ],
      "decl-vars" : [ ],
      "line-start" : 1129,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 178,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "t",
              "variable" : 54
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 182,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 24,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "gcStart"
            }
          },
          "go-type" : 34,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 1129,
      "code" : "gcStart(t)",
      "entry" : false,
      "use-vars" : [ 54 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 27 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 1133,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 11,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "x",
            "variable" : 27
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 1133,
      "code" : "return x",
      "entry" : false,
      "use-vars" : [ 27 ]
    } ],
    "code" : "// Allocate an object of size bytes.\n// Small objects are allocated from the per-P cache's free lists.\n// Large objects (> 32 kB) are allocated straight from the heap.\nfunc mallocgc(size uintptr, typ *_type, needzero bool) unsafe.Pointer {\n\tif gcphase == _GCmarktermination {\n\t\tthrow(\"mallocgc called with gcphase == _GCmarktermination\")\n\t}\n\n\tif size == 0 {\n\t\treturn unsafe.Pointer(&zerobase)\n\t}\n\n\tif debug.sbrk != 0 {\n\t\talign := uintptr(16)\n\t\tif typ != nil {\n\n\t\t\tif size&7 == 0 {\n\t\t\t\talign = 8\n\t\t\t} else if size&3 == 0 {\n\t\t\t\talign = 4\n\t\t\t} else if size&1 == 0 {\n\t\t\t\talign = 2\n\t\t\t} else {\n\t\t\t\talign = 1\n\t\t\t}\n\t\t}\n\t\treturn persistentalloc(size, align, &memstats.other_sys)\n\t}\n\n\t// assistG is the G to charge for this allocation, or nil if\n\t// GC is not currently active.\n\tvar assistG *g\n\tif gcBlackenEnabled != 0 {\n\n\t\tassistG = getg()\n\t\tif assistG.m.curg != nil {\n\t\t\tassistG = assistG.m.curg\n\t\t}\n\n\t\tassistG.gcAssistBytes -= int64(size)\n\n\t\tif assistG.gcAssistBytes < 0 {\n\n\t\t\tgcAssistAlloc(assistG)\n\t\t}\n\t}\n\n\tmp := acquirem()\n\tif mp.mallocing != 0 {\n\t\tthrow(\"malloc deadlock\")\n\t}\n\tif mp.gsignal == getg() {\n\t\tthrow(\"malloc during signal\")\n\t}\n\tmp.mallocing = 1\n\n\tshouldhelpgc := false\n\tdataSize := size\n\tc := gomcache()\n\tvar x unsafe.Pointer\n\tnoscan := typ == nil || typ.ptrdata == 0\n\tif size <= maxSmallSize {\n\t\tif noscan && size < maxTinySize {\n\n\t\t\toff := c.tinyoffset\n\n\t\t\tif size&7 == 0 {\n\t\t\t\toff = alignUp(off, 8)\n\t\t\t} else if size&3 == 0 {\n\t\t\t\toff = alignUp(off, 4)\n\t\t\t} else if size&1 == 0 {\n\t\t\t\toff = alignUp(off, 2)\n\t\t\t}\n\t\t\tif off+size <= maxTinySize && c.tiny != 0 {\n\n\t\t\t\tx = unsafe.Pointer(c.tiny + off)\n\t\t\t\tc.tinyoffset = off + size\n\t\t\t\tc.local_tinyallocs++\n\t\t\t\tmp.mallocing = 0\n\t\t\t\treleasem(mp)\n\t\t\t\treturn x\n\t\t\t}\n\n\t\t\tspan := c.alloc[tinySpanClass]\n\t\t\tv := nextFreeFast(span)\n\t\t\tif v == 0 {\n\t\t\t\tv, _, shouldhelpgc = c.nextFree(tinySpanClass)\n\t\t\t}\n\t\t\tx = unsafe.Pointer(v)\n\t\t\t(*[2]uint64)(x)[0] = 0\n\t\t\t(*[2]uint64)(x)[1] = 0\n\n\t\t\tif size < c.tinyoffset || c.tiny == 0 {\n\t\t\t\tc.tiny = uintptr(x)\n\t\t\t\tc.tinyoffset = size\n\t\t\t}\n\t\t\tsize = maxTinySize\n\t\t} else {\n\t\t\tvar sizeclass uint8\n\t\t\tif size <= smallSizeMax-8 {\n\t\t\t\tsizeclass = size_to_class8[(size+smallSizeDiv-1)/smallSizeDiv]\n\t\t\t} else {\n\t\t\t\tsizeclass = size_to_class128[(size-smallSizeMax+largeSizeDiv-1)/largeSizeDiv]\n\t\t\t}\n\t\t\tsize = uintptr(class_to_size[sizeclass])\n\t\t\tspc := makeSpanClass(sizeclass, noscan)\n\t\t\tspan := c.alloc[spc]\n\t\t\tv := nextFreeFast(span)\n\t\t\tif v == 0 {\n\t\t\t\tv, span, shouldhelpgc = c.nextFree(spc)\n\t\t\t}\n\t\t\tx = unsafe.Pointer(v)\n\t\t\tif needzero && span.needzero != 0 {\n\t\t\t\tmemclrNoHeapPointers(unsafe.Pointer(v), size)\n\t\t\t}\n\t\t}\n\t} else {\n\t\tvar s *mspan\n\t\tshouldhelpgc = true\n\t\tsystemstack(func() {\n\t\t\ts = largeAlloc(size, needzero, noscan)\n\t\t})\n\t\ts.freeindex = 1\n\t\ts.allocCount = 1\n\t\tx = unsafe.Pointer(s.base())\n\t\tsize = s.elemsize\n\t}\n\n\tvar scanSize uintptr\n\tif !noscan {\n\n\t\tif typ == deferType {\n\t\t\tdataSize = unsafe.Sizeof(_defer{})\n\t\t}\n\t\theapBitsSetType(uintptr(x), size, dataSize, typ)\n\t\tif dataSize > typ.size {\n\n\t\t\tif typ.ptrdata != 0 {\n\t\t\t\tscanSize = dataSize - typ.size + typ.ptrdata\n\t\t\t}\n\t\t} else {\n\t\t\tscanSize = typ.ptrdata\n\t\t}\n\t\tc.local_scan += scanSize\n\t}\n\n\tpublicationBarrier()\n\n\tif gcphase != _GCoff {\n\t\tgcmarknewobject(uintptr(x), size, scanSize)\n\t}\n\n\tif raceenabled {\n\t\tracemalloc(x, size)\n\t}\n\n\tif msanenabled {\n\t\tmsanmalloc(x, size)\n\t}\n\n\tmp.mallocing = 0\n\treleasem(mp)\n\n\tif debug.allocfreetrace != 0 {\n\t\ttracealloc(x, size, typ)\n\t}\n\n\tif rate := MemProfileRate; rate > 0 {\n\t\tif rate != 1 && size < c.next_sample {\n\t\t\tc.next_sample -= size\n\t\t} else {\n\t\t\tmp := acquirem()\n\t\t\tprofilealloc(mp, x, size)\n\t\t\treleasem(mp)\n\t\t}\n\t}\n\n\tif assistG != nil {\n\n\t\tassistG.gcAssistBytes -= int64(size - dataSize)\n\t}\n\n\tif shouldhelpgc {\n\t\tif t := (gcTrigger{kind: gcTriggerHeap}); t.test() {\n\t\t\tgcStart(t)\n\t\t}\n\t}\n\n\treturn x\n}",
    "defines" : [ 0 ],
    "functions" : [ {
      "name" : "mallocgc",
      "package" : 0,
      "type" : 0,
      "exported" : false
    }, {
      "name" : "throw",
      "package" : 0,
      "type" : 35,
      "exported" : false
    }, {
      "name" : "persistentalloc",
      "package" : 0,
      "type" : 40,
      "exported" : false
    }, {
      "name" : "getg",
      "package" : 0,
      "type" : 133,
      "exported" : false
    }, {
      "name" : "gcAssistAlloc",
      "package" : 0,
      "type" : 135,
      "exported" : false
    }, {
      "name" : "acquirem",
      "package" : 0,
      "type" : 137,
      "exported" : false
    }, {
      "name" : "gomcache",
      "package" : 0,
      "type" : 139,
      "exported" : false
    }, {
      "name" : "alignUp",
      "package" : 0,
      "type" : 141,
      "exported" : false
    }, {
      "name" : "releasem",
      "package" : 0,
      "type" : 144,
      "exported" : false
    }, {
      "name" : "nextFreeFast",
      "package" : 0,
      "type" : 146,
      "exported" : false
    }, {
      "name" : "nextFree",
      "package" : 0,
      "type" : 150,
      "exported" : false
    }, {
      "name" : "makeSpanClass",
      "package" : 0,
      "type" : 155,
      "exported" : false
    }, {
      "name" : "memclrNoHeapPointers",
      "package" : 0,
      "type" : 158,
      "exported" : false
    }, {
      "name" : "systemstack",
      "package" : 0,
      "type" : 160,
      "exported" : false
    }, {
      "name" : "largeAlloc",
      "package" : 0,
      "type" : 162,
      "exported" : false
    }, {
      "name" : "base",
      "package" : 0,
      "type" : 165,
      "exported" : false
    }, {
      "name" : "heapBitsSetType",
      "package" : 0,
      "type" : 166,
      "exported" : false
    }, {
      "name" : "publicationBarrier",
      "package" : 0,
      "type" : 70,
      "exported" : false
    }, {
      "name" : "gcmarknewobject",
      "package" : 0,
      "type" : 168,
      "exported" : false
    }, {
      "name" : "racemalloc",
      "package" : 0,
      "type" : 170,
      "exported" : false
    }, {
      "name" : "msanmalloc",
      "package" : 0,
      "type" : 172,
      "exported" : false
    }, {
      "name" : "tracealloc",
      "package" : 0,
      "type" : 174,
      "exported" : false
    }, {
      "name" : "profilealloc",
      "package" : 0,
      "type" : 176,
      "exported" : false
    }, {
      "name" : "test",
      "package" : 0,
      "type" : 181,
      "exported" : false
    }, {
      "name" : "gcStart",
      "package" : 0,
      "type" : 182,
      "exported" : false
    } ],
    "line-end" : 1134,
    "line-start" : 891,
    "names" : [ "mallocgc" ],
    "package" : 0,
    "packages" : [ {
      "name" : "runtime",
      "path" : "runtime"
    }, {
      "name" : "unsafe",
      "path" : "unsafe"
    }, {
      "name" : "sys",
      "path" : "runtime/internal/sys"
    } ],
    "params" : [ 0, 1, 2 ],
    "receivers" : [ ],
    "results" : [ 3 ],
    "type" : "function",
    "types" : [ {
      "name" : "func(size uintptr, typ *runtime._type, needzero bool) unsafe.Pointer",
      "params" : 1,
      "recv" : -1,
      "results" : 19,
      "type" : "Signature",
      "underlying" : 0,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "size",
        "type" : 2
      }, {
        "name" : "typ",
        "type" : 3
      }, {
        "name" : "needzero",
        "type" : 13
      } ],
      "name" : "(size uintptr, typ *runtime._type, needzero bool)",
      "type" : "Tuple",
      "underlying" : 1
    }, {
      "name" : "uintptr",
      "type" : "Basic",
      "underlying" : 2
    }, {
      "elem" : 4,
      "name" : "*runtime._type",
      "type" : "Pointer",
      "underlying" : 3
    }, {
      "local-name" : "_type",
      "name" : "runtime._type",
      "package" : 0,
      "type" : "Named",
      "underlying" : 5
    }, {
      "fields" : [ {
        "name" : "size",
        "type" : 2
      }, {
        "name" : "ptrdata",
        "type" : 2
      }, {
        "name" : "hash",
        "type" : 6
      }, {
        "name" : "tflag",
        "type" : 7
      }, {
        "name" : "align",
        "type" : 8
      }, {
        "name" : "fieldAlign",
        "type" : 8
      }, {
        "name" : "kind",
        "type" : 8
      }, {
        "name" : "equal",
        "type" : 9
      }, {
        "name" : "gcdata",
        "type" : 14
      }, {
        "name" : "str",
        "type" : 16
      }, {
        "name" : "ptrToThis",
        "type" : 18
      } ],
      "name" : "struct{size uintptr; ptrdata uintptr; hash uint32; tflag runtime.tflag; align uint8; fieldAlign uint8; kind uint8; equal func(unsafe.Pointer, unsafe.Pointer) bool; gcdata *byte; str runtime.nameOff; ptrToThis runtime.typeOff}",
      "type" : "Struct",
      "underlying" : 5
    }, {
      "name" : "uint32",
      "type" : "Basic",
      "underlying" : 6
    }, {
      "local-name" : "tflag",
      "name" : "runtime.tflag",
      "package" : 0,
      "type" : "Named",
      "underlying" : 8
    }, {
      "name" : "uint8",
      "type" : "Basic",
      "underlying" : 8
    }, {
      "name" : "func(unsafe.Pointer, unsafe.Pointer) bool",
      "params" : 10,
      "recv" : -1,
      "results" : 12,
      "type" : "Signature",
      "underlying" : 9,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 11
      }, {
        "name" : "",
        "type" : 11
      } ],
      "name" : "(unsafe.Pointer, unsafe.Pointer)",
      "type" : "Tuple",
      "underlying" : 10
    }, {
      "local-name" : "Pointer",
      "name" : "unsafe.Pointer",
      "package" : 1,
      "type" : "Basic",
      "underlying" : 11
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 13
      } ],
      "name" : "(bool)",
      "type" : "Tuple",
      "underlying" : 12
    }, {
      "name" : "bool",
      "type" : "Basic",
      "underlying" : 13
    }, {
      "elem" : 15,
      "name" : "*byte",
      "type" : "Pointer",
      "underlying" : 14
    }, {
      "name" : "byte",
      "type" : "Basic",
      "underlying" : 15
    }, {
      "local-name" : "nameOff",
      "name" : "runtime.nameOff",
      "package" : 0,
      "type" : "Named",
      "underlying" : 17
    }, {
      "name" : "int32",
      "type" : "Basic",
      "underlying" : 17
    }, {
      "local-name" : "typeOff",
      "name" : "runtime.typeOff",
      "package" : 0,
      "type" : "Named",
      "underlying" : 17
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 11
      } ],
      "name" : "(unsafe.Pointer)",
      "type" : "Tuple",
      "underlying" : 19
    }, {
      "name" : "int",
      "type" : "Basic",
      "underlying" : 20
    }, {
      "elem" : 8,
      "name" : "[249]uint8",
      "type" : "Array",
      "underlying" : 21
    }, {
      "elem" : 23,
      "name" : "[67]uint16",
      "type" : "Array",
      "underlying" : 22
    }, {
      "name" : "uint16",
      "type" : "Basic",
      "underlying" : 23
    }, {
      "local-name" : "mstats",
      "name" : "runtime.mstats",
      "package" : 0,
      "type" : "Named",
      "underlying" : 25
    }, {
      "fields" : [ {
        "name" : "alloc",
        "type" : 26
      }, {
        "name" : "total_alloc",
        "type" : 26
      }, {
        "name" : "sys",
        "type" : 26
      }, {
        "name" : "nlookup",
        "type" : 26
      }, {
        "name" : "nmalloc",
        "type" : 26
      }, {
        "name" : "nfree",
        "type" : 26
      }, {
        "name" : "heap_alloc",
        "type" : 26
      }, {
        "name" : "heap_sys",
        "type" : 26
      }, {
        "name" : "heap_idle",
        "type" : 26
      }, {
        "name" : "heap_inuse",
        "type" : 26
      }, {
        "name" : "heap_released",
        "type" : 26
      }, {
        "name" : "heap_objects",
        "type" : 26
      }, {
        "name" : "stacks_inuse",
        "type" : 26
      }, {
        "name" : "stacks_sys",
        "type" : 26
      }, {
        "name" : "mspan_inuse",
        "type" : 26
      }, {
        "name" : "mspan_sys",
        "type" : 26
      }, {
        "name" : "mcache_inuse",
        "type" : 26
      }, {
        "name" : "mcache_sys",
        "type" : 26
      }, {
        "name" : "buckhash_sys",
        "type" : 26
      }, {
        "name" : "gc_sys",
        "type" : 26
      }, {
        "name" : "other_sys",
        "type" : 26
      }, {
        "name" : "next_gc",
        "type" : 26
      }, {
        "name" : "last_gc_unix",
        "type" : 26
      }, {
        "name" : "pause_total_ns",
        "type" : 26
      }, {
        "name" : "pause_ns",
        "type" : 27
      }, {
        "name" : "pause_end",
        "type" : 27
      }, {
        "name" : "numgc",
        "type" : 6
      }, {
        "name" : "numforcedgc",
        "type" : 6
      }, {
        "name" : "gc_cpu_fraction",
        "type" : 28
      }, {
        "name" : "enablegc",
        "type" : 13
      }, {
        "name" : "debuggc",
        "type" : 13
      }, {
        "name" : "by_size",
        "type" : 29
      }, {
        "name" : "last_gc_nanotime",
        "type" : 26
      }, {
        "name" : "tinyallocs",
        "type" : 26
      }, {
        "name" : "last_next_gc",
        "type" : 26
      }, {
        "name" : "last_heap_inuse",
        "type" : 26
      }, {
        "name" : "triggerRatio",
        "type" : 28
      }, {
        "name" : "gc_trigger",
        "type" : 26
      }, {
        "name" : "heap_live",
        "type" : 26
      }, {
        "name" : "heap_scan",
        "type" : 26
      }, {
        "name" : "heap_marked",
        "type" : 26
      } ],
      "name" : "struct{alloc uint64; total_alloc uint64; sys uint64; nlookup uint64; nmalloc uint64; nfree uint64; heap_alloc uint64; heap_sys uint64; heap_idle uint64; heap_inuse uint64; heap_released uint64; heap_objects uint64; stacks_inuse uint64; stacks_sys uint64; mspan_inuse uint64; mspan_sys uint64; mcache_inuse uint64; mcache_sys uint64; buckhash_sys uint64; gc_sys uint64; other_sys uint64; next_gc uint64; last_gc_unix uint64; pause_total_ns uint64; pause_ns [256]uint64; pause_end [256]uint64; numgc uint32; numforcedgc uint32; gc_cpu_fraction float64; enablegc bool; debuggc bool; by_size [67]struct{size uint32; nmalloc uint64; nfree uint64}; last_gc_nanotime uint64; tinyallocs uint64; last_next_gc uint64; last_heap_inuse uint64; triggerRatio float64; gc_trigger uint64; heap_live uint64; heap_scan uint64; heap_marked uint64}",
      "type" : "Struct",
      "underlying" : 25
    }, {
      "name" : "uint64",
      "type" : "Basic",
      "underlying" : 26
    }, {
      "elem" : 26,
      "name" : "[256]uint64",
      "type" : "Array",
      "underlying" : 27
    }, {
      "name" : "float64",
      "type" : "Basic",
      "underlying" : 28
    }, {
      "elem" : 30,
      "name" : "[67]struct{size uint32; nmalloc uint64; nfree uint64}",
      "type" : "Array",
      "underlying" : 29
    }, {
      "fields" : [ {
        "name" : "size",
        "type" : 6
      }, {
        "name" : "nmalloc",
        "type" : 26
      }, {
        "name" : "nfree",
        "type" : 26
      } ],
      "name" : "struct{size uint32; nmalloc uint64; nfree uint64}",
      "type" : "Struct",
      "underlying" : 30
    }, {
      "elem" : 8,
      "name" : "[129]uint8",
      "type" : "Array",
      "underlying" : 31
    }, {
      "fields" : [ {
        "name" : "allocfreetrace",
        "type" : 17
      }, {
        "name" : "cgocheck",
        "type" : 17
      }, {
        "name" : "clobberfree",
        "type" : 17
      }, {
        "name" : "efence",
        "type" : 17
      }, {
        "name" : "gccheckmark",
        "type" : 17
      }, {
        "name" : "gcpacertrace",
        "type" : 17
      }, {
        "name" : "gcshrinkstackoff",
        "type" : 17
      }, {
        "name" : "gcstoptheworld",
        "type" : 17
      }, {
        "name" : "gctrace",
        "type" : 17
      }, {
        "name" : "invalidptr",
        "type" : 17
      }, {
        "name" : "madvdontneed",
        "type" : 17
      }, {
        "name" : "sbrk",
        "type" : 17
      }, {
        "name" : "scavenge",
        "type" : 17
      }, {
        "name" : "scavtrace",
        "type" : 17
      }, {
        "name" : "scheddetail",
        "type" : 17
      }, {
        "name" : "schedtrace",
        "type" : 17
      }, {
        "name" : "tracebackancestors",
        "type" : 17
      }, {
        "name" : "asyncpreemptoff",
        "type" : 17
      } ],
      "name" : "struct{allocfreetrace int32; cgocheck int32; clobberfree int32; efence int32; gccheckmark int32; gcpacertrace int32; gcshrinkstackoff int32; gcstoptheworld int32; gctrace int32; invalidptr int32; madvdontneed int32; sbrk int32; scavenge int32; scavtrace int32; scheddetail int32; schedtrace int32; tracebackancestors int32; asyncpreemptoff int32}",
      "type" : "Struct",
      "underlying" : 32
    }, {
      "name" : "untyped bool",
      "type" : "Basic",
      "underlying" : 33
    }, {
      "fields" : [ ],
      "name" : "()",
      "type" : "Tuple",
      "underlying" : 34
    }, {
      "name" : "func(s string)",
      "params" : 36,
      "recv" : -1,
      "results" : 34,
      "type" : "Signature",
      "underlying" : 35,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "s",
        "type" : 37
      } ],
      "name" : "(s string)",
      "type" : "Tuple",
      "underlying" : 36
    }, {
      "name" : "string",
      "type" : "Basic",
      "underlying" : 37
    }, {
      "elem" : 2,
      "name" : "*uintptr",
      "type" : "Pointer",
      "underlying" : 38
    }, {
      "name" : "untyped nil",
      "type" : "Basic",
      "underlying" : 39
    }, {
      "name" : "func(size uintptr, align uintptr, sysStat *uint64) unsafe.Pointer",
      "params" : 41,
      "recv" : -1,
      "results" : 19,
      "type" : "Signature",
      "underlying" : 40,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "size",
        "type" : 2
      }, {
        "name" : "align",
        "type" : 2
      }, {
        "name" : "sysStat",
        "type" : 42
      } ],
      "name" : "(size uintptr, align uintptr, sysStat *uint64)",
      "type" : "Tuple",
      "underlying" : 41
    }, {
      "elem" : 26,
      "name" : "*uint64",
      "type" : "Pointer",
      "underlying" : 42
    }, {
      "elem" : 44,
      "name" : "*runtime.g",
      "type" : "Pointer",
      "underlying" : 43
    }, {
      "local-name" : "g",
      "name" : "runtime.g",
      "package" : 0,
      "type" : "Named",
      "underlying" : 45
    }, {
      "fields" : [ {
        "name" : "stack",
        "type" : 46
      }, {
        "name" : "stackguard0",
        "type" : 2
      }, {
        "name" : "stackguard1",
        "type" : 2
      }, {
        "name" : "_panic",
        "type" : 48
      }, {
        "name" : "_defer",
        "type" : 52
      }, {
        "name" : "m",
        "type" : 58
      }, {
        "name" : "sched",
        "type" : 61
      }, {
        "name" : "syscallsp",
        "type" : 2
      }, {
        "name" : "syscallpc",
        "type" : 2
      }, {
        "name" : "stktopsp",
        "type" : 2
      }, {
        "name" : "param",
        "type" : 11
      }, {
        "name" : "atomicstatus",
        "type" : 6
      }, {
        "name" : "stackLock",
        "type" : 6
      }, {
        "name" : "goid",
        "type" : 72
      }, {
        "name" : "schedlink",
        "type" : 63
      }, {
        "name" : "waitsince",
        "type" : 72
      }, {
        "name" : "waitreason",
        "type" : 112
      }, {
        "name" : "preempt",
        "type" : 13
      }, {
        "name" : "preemptStop",
        "type" : 13
      }, {
        "name" : "preemptShrink",
        "type" : 13
      }, {
        "name" : "asyncSafePoint",
        "type" : 13
      }, {
        "name" : "paniconfault",
        "type" : 13
      }, {
        "name" : "gcscandone",
        "type" : 13
      }, {
        "name" : "throwsplit",
        "type" : 13
      }, {
        "name" : "activeStackChans",
        "type" : 13
      }, {
        "name" : "raceignore",
        "type" : 73
      }, {
        "name" : "sysblocktraced",
        "type" : 13
      }, {
        "name" : "sysexitticks",
        "type" : 72
      }, {
        "name" : "traceseq",
        "type" : 26
      }, {
        "name" : "tracelastp",
        "type" : 71
      }, {
        "name" : "lockedm",
        "type" : 79
      }, {
        "name" : "sig",
        "type" : 6
      }, {
        "name" : "writebuf",
        "type" : 113
      }, {
        "name" : "sigcode0",
        "type" : 2
      }, {
        "name" : "sigcode1",
        "type" : 2
      }, {
        "name" : "sigpc",
        "type" : 2
      }, {
        "name" : "gopc",
        "type" : 2
      }, {
        "name" : "ancestors",
        "type" : 114
      }, {
        "name" : "startpc",
        "type" : 2
      }, {
        "name" : "racectx",
        "type" : 2
      }, {
        "name" : "waiting",
        "type" : 119
      }, {
        "name" : "cgoCtxt",
        "type" : 118
      }, {
        "name" : "labels",
        "type" : 11
      }, {
        "name" : "timer",
        "type" : 128
      }, {
        "name" : "selectDone",
        "type" : 6
      }, {
        "name" : "gcAssistBytes",
        "type" : 72
      } ],
      "name" : "struct{stack runtime.stack; stackguard0 uintptr; stackguard1 uintptr; _panic *runtime._panic; _defer *runtime._defer; m *runtime.m; sched runtime.gobuf; syscallsp uintptr; syscallpc uintptr; stktopsp uintptr; param unsafe.Pointer; atomicstatus uint32; stackLock uint32; goid int64; schedlink runtime.guintptr; waitsince int64; waitreason runtime.waitReason; preempt bool; preemptStop bool; preemptShrink bool; asyncSafePoint bool; paniconfault bool; gcscandone bool; throwsplit bool; activeStackChans bool; raceignore int8; sysblocktraced bool; sysexitticks int64; traceseq uint64; tracelastp runtime.puintptr; lockedm runtime.muintptr; sig uint32; writebuf []byte; sigcode0 uintptr; sigcode1 uintptr; sigpc uintptr; gopc uintptr; ancestors *[]runtime.ancestorInfo; startpc uintptr; racectx uintptr; waiting *runtime.sudog; cgoCtxt []uintptr; labels unsafe.Pointer; timer *runtime.timer; selectDone uint32; gcAssistBytes int64}",
      "type" : "Struct",
      "underlying" : 45
    }, {
      "local-name" : "stack",
      "name" : "runtime.stack",
      "package" : 0,
      "type" : "Named",
      "underlying" : 47
    }, {
      "fields" : [ {
        "name" : "lo",
        "type" : 2
      }, {
        "name" : "hi",
        "type" : 2
      } ],
      "name" : "struct{lo uintptr; hi uintptr}",
      "type" : "Struct",
      "underlying" : 47
    }, {
      "elem" : 49,
      "name" : "*runtime._panic",
      "type" : "Pointer",
      "underlying" : 48
    }, {
      "local-name" : "_panic",
      "name" : "runtime._panic",
      "package" : 0,
      "type" : "Named",
      "underlying" : 50
    }, {
      "fields" : [ {
        "name" : "argp",
        "type" : 11
      }, {
        "name" : "arg",
        "type" : 51
      }, {
        "name" : "link",
        "type" : 48
      }, {
        "name" : "pc",
        "type" : 2
      }, {
        "name" : "sp",
        "type" : 11
      }, {
        "name" : "recovered",
        "type" : 13
      }, {
        "name" : "aborted",
        "type" : 13
      }, {
        "name" : "goexit",
        "type" : 13
      } ],
      "name" : "struct{argp unsafe.Pointer; arg interface{}; link *runtime._panic; pc uintptr; sp unsafe.Pointer; recovered bool; aborted bool; goexit bool}",
      "type" : "Struct",
      "underlying" : 50
    }, {
      "methods" : [ ],
      "name" : "interface{}",
      "type" : "Interface",
      "underlying" : 51
    }, {
      "elem" : 53,
      "name" : "*runtime._defer",
      "type" : "Pointer",
      "underlying" : 52
    }, {
      "local-name" : "_defer",
      "name" : "runtime._defer",
      "package" : 0,
      "type" : "Named",
      "underlying" : 54
    }, {
      "fields" : [ {
        "name" : "siz",
        "type" : 17
      }, {
        "name" : "started",
        "type" : 13
      }, {
        "name" : "heap",
        "type" : 13
      }, {
        "name" : "openDefer",
        "type" : 13
      }, {
        "name" : "sp",
        "type" : 2
      }, {
        "name" : "pc",
        "type" : 2
      }, {
        "name" : "fn",
        "type" : 55
      }, {
        "name" : "_panic",
        "type" : 48
      }, {
        "name" : "link",
        "type" : 52
      }, {
        "name" : "fd",
        "type" : 11
      }, {
        "name" : "varp",
        "type" : 2
      }, {
        "name" : "framepc",
        "type" : 2
      } ],
      "name" : "struct{siz int32; started bool; heap bool; openDefer bool; sp uintptr; pc uintptr; fn *runtime.funcval; _panic *runtime._panic; link *runtime._defer; fd unsafe.Pointer; varp uintptr; framepc uintptr}",
      "type" : "Struct",
      "underlying" : 54
    }, {
      "elem" : 56,
      "name" : "*runtime.funcval",
      "type" : "Pointer",
      "underlying" : 55
    }, {
      "local-name" : "funcval",
      "name" : "runtime.funcval",
      "package" : 0,
      "type" : "Named",
      "underlying" : 57
    }, {
      "fields" : [ {
        "name" : "fn",
        "type" : 2
      } ],
      "name" : "struct{fn uintptr}",
      "type" : "Struct",
      "underlying" : 57
    }, {
      "elem" : 59,
      "name" : "*runtime.m",
      "type" : "Pointer",
      "underlying" : 58
    }, {
      "local-name" : "m",
      "name" : "runtime.m",
      "package" : 0,
      "type" : "Named",
      "underlying" : 60
    }, {
      "fields" : [ {
        "name" : "g0",
        "type" : 43
      }, {
        "name" : "morebuf",
        "type" : 61
      }, {
        "name" : "divmod",
        "type" : 6
      }, {
        "name" : "procid",
        "type" : 26
      }, {
        "name" : "gsignal",
        "type" : 43
      }, {
        "name" : "goSigStack",
        "type" : 65
      }, {
        "name" : "sigmask",
        "type" : 67
      }, {
        "name" : "tls",
        "type" : 69
      }, {
        "name" : "mstartfn",
        "type" : 70
      }, {
        "name" : "curg",
        "type" : 43
      }, {
        "name" : "caughtsig",
        "type" : 63
      }, {
        "name" : "p",
        "type" : 71
      }, {
        "name" : "nextp",
        "type" : 71
      }, {
        "name" : "oldp",
        "type" : 71
      }, {
        "name" : "id",
        "type" : 72
      }, {
        "name" : "mallocing",
        "type" : 17
      }, {
        "name" : "throwing",
        "type" : 17
      }, {
        "name" : "preemptoff",
        "type" : 37
      }, {
        "name" : "locks",
        "type" : 17
      }, {
        "name" : "dying",
        "type" : 17
      }, {
        "name" : "profilehz",
        "type" : 17
      }, {
        "name" : "spinning",
        "type" : 13
      }, {
        "name" : "blocked",
        "type" : 13
      }, {
        "name" : "newSigstack",
        "type" : 13
      }, {
        "name" : "printlock",
        "type" : 73
      }, {
        "name" : "incgo",
        "type" : 13
      }, {
        "name" : "freeWait",
        "type" : 6
      }, {
        "name" : "fastrand",
        "type" : 68
      }, {
        "name" : "needextram",
        "type" : 13
      }, {
        "name" : "traceback",
        "type" : 8
      }, {
        "name" : "ncgocall",
        "type" : 26
      }, {
        "name" : "ncgo",
        "type" : 17
      }, {
        "name" : "cgoCallersUse",
        "type" : 6
      }, {
        "name" : "cgoCallers",
        "type" : 74
      }, {
        "name" : "park",
        "type" : 77
      }, {
        "name" : "alllink",
        "type" : 58
      }, {
        "name" : "schedlink",
        "type" : 79
      }, {
        "name" : "mcache",
        "type" : 80
      }, {
        "name" : "lockedg",
        "type" : 63
      }, {
        "name" : "createstack",
        "type" : 76
      }, {
        "name" : "lockedExt",
        "type" : 6
      }, {
        "name" : "lockedInt",
        "type" : 6
      }, {
        "name" : "nextwaitm",
        "type" : 79
      }, {
        "name" : "waitunlockf",
        "type" : 105
      }, {
        "name" : "waitlock",
        "type" : 11
      }, {
        "name" : "waittraceev",
        "type" : 15
      }, {
        "name" : "waittraceskip",
        "type" : 20
      }, {
        "name" : "startingtrace",
        "type" : 13
      }, {
        "name" : "syscalltick",
        "type" : 6
      }, {
        "name" : "freelink",
        "type" : 58
      }, {
        "name" : "libcall",
        "type" : 107
      }, {
        "name" : "libcallpc",
        "type" : 2
      }, {
        "name" : "libcallsp",
        "type" : 2
      }, {
        "name" : "libcallg",
        "type" : 63
      }, {
        "name" : "syscall",
        "type" : 107
      }, {
        "name" : "vdsoSP",
        "type" : 2
      }, {
        "name" : "vdsoPC",
        "type" : 2
      }, {
        "name" : "preemptGen",
        "type" : 6
      }, {
        "name" : "signalPending",
        "type" : 6
      }, {
        "name" : "dlogPerM",
        "type" : 109
      }, {
        "name" : "mOS",
        "type" : 111
      } ],
      "name" : "struct{g0 *runtime.g; morebuf runtime.gobuf; divmod uint32; procid uint64; gsignal *runtime.g; goSigStack runtime.gsignalStack; sigmask runtime.sigset; tls [6]uintptr; mstartfn func(); curg *runtime.g; caughtsig runtime.guintptr; p runtime.puintptr; nextp runtime.puintptr; oldp runtime.puintptr; id int64; mallocing int32; throwing int32; preemptoff string; locks int32; dying int32; profilehz int32; spinning bool; blocked bool; newSigstack bool; printlock int8; incgo bool; freeWait uint32; fastrand [2]uint32; needextram bool; traceback uint8; ncgocall uint64; ncgo int32; cgoCallersUse uint32; cgoCallers *runtime.cgoCallers; park runtime.note; alllink *runtime.m; schedlink runtime.muintptr; mcache *runtime.mcache; lockedg runtime.guintptr; createstack [32]uintptr; lockedExt uint32; lockedInt uint32; nextwaitm runtime.muintptr; waitunlockf func(*runtime.g, unsafe.Pointer) bool; waitlock unsafe.Pointer; waittraceev byte; waittraceskip int; startingtrace bool; syscalltick uint32; freelink *runtime.m; libcall runtime.libcall; libcallpc uintptr; libcallsp uintptr; libcallg runtime.guintptr; syscall runtime.libcall; vdsoSP uintptr; vdsoPC uintptr; preemptGen uint32; signalPending uint32; runtime.dlogPerM; runtime.mOS}",
      "type" : "Struct",
      "underlying" : 60
    }, {
      "local-name" : "gobuf",
      "name" : "runtime.gobuf",
      "package" : 0,
      "type" : "Named",
      "underlying" : 62
    }, {
      "fields" : [ {
        "name" : "sp",
        "type" : 2
      }, {
        "name" : "pc",
        "type" : 2
      }, {
        "name" : "g",
        "type" : 63
      }, {
        "name" : "ctxt",
        "type" : 11
      }, {
        "name" : "ret",
        "type" : 64
      }, {
        "name" : "lr",
        "type" : 2
      }, {
        "name" : "bp",
        "type" : 2
      } ],
      "name" : "struct{sp uintptr; pc uintptr; g runtime.guintptr; ctxt unsafe.Pointer; ret runtime/internal/sys.Uintreg; lr uintptr; bp uintptr}",
      "type" : "Struct",
      "underlying" : 62
    }, {
      "local-name" : "guintptr",
      "name" : "runtime.guintptr",
      "package" : 0,
      "type" : "Named",
      "underlying" : 2
    }, {
      "local-name" : "Uintreg",
      "name" : "runtime/internal/sys.Uintreg",
      "package" : 2,
      "type" : "Named",
      "underlying" : 26
    }, {
      "local-name" : "gsignalStack",
      "name" : "runtime.gsignalStack",
      "package" : 0,
      "type" : "Named",
      "underlying" : 66
    }, {
      "fields" : [ {
        "name" : "stack",
        "type" : 46
      }, {
        "name" : "stackguard0",
        "type" : 2
      }, {
        "name" : "stackguard1",
        "type" : 2
      }, {
        "name" : "stktopsp",
        "type" : 2
      } ],
      "name" : "struct{stack runtime.stack; stackguard0 uintptr; stackguard1 uintptr; stktopsp uintptr}",
      "type" : "Struct",
      "underlying" : 66
    }, {
      "local-name" : "sigset",
      "name" : "runtime.sigset",
      "package" : 0,
      "type" : "Named",
      "underlying" : 68
    }, {
      "elem" : 6,
      "name" : "[2]uint32",
      "type" : "Array",
      "underlying" : 68
    }, {
      "elem" : 2,
      "name" : "[6]uintptr",
      "type" : "Array",
      "underlying" : 69
    }, {
      "name" : "func()",
      "params" : 34,
      "recv" : -1,
      "results" : 34,
      "type" : "Signature",
      "underlying" : 70,
      "variadic" : false
    }, {
      "local-name" : "puintptr",
      "name" : "runtime.puintptr",
      "package" : 0,
      "type" : "Named",
      "underlying" : 2
    }, {
      "name" : "int64",
      "type" : "Basic",
      "underlying" : 72
    }, {
      "name" : "int8",
      "type" : "Basic",
      "underlying" : 73
    }, {
      "elem" : 75,
      "name" : "*runtime.cgoCallers",
      "type" : "Pointer",
      "underlying" : 74
    }, {
      "local-name" : "cgoCallers",
      "name" : "runtime.cgoCallers",
      "package" : 0,
      "type" : "Named",
      "underlying" : 76
    }, {
      "elem" : 2,
      "name" : "[32]uintptr",
      "type" : "Array",
      "underlying" : 76
    }, {
      "local-name" : "note",
      "name" : "runtime.note",
      "package" : 0,
      "type" : "Named",
      "underlying" : 78
    }, {
      "fields" : [ {
        "name" : "key",
        "type" : 2
      } ],
      "name" : "struct{key uintptr}",
      "type" : "Struct",
      "underlying" : 78
    }, {
      "local-name" : "muintptr",
      "name" : "runtime.muintptr",
      "package" : 0,
      "type" : "Named",
      "underlying" : 2
    }, {
      "elem" : 81,
      "name" : "*runtime.mcache",
      "type" : "Pointer",
      "underlying" : 80
    }, {
      "local-name" : "mcache",
      "name" : "runtime.mcache",
      "package" : 0,
      "type" : "Named",
      "underlying" : 82
    }, {
      "fields" : [ {
        "name" : "next_sample",
        "type" : 2
      }, {
        "name" : "local_scan",
        "type" : 2
      }, {
        "name" : "tiny",
        "type" : 2
      }, {
        "name" : "tinyoffset",
        "type" : 2
      }, {
        "name" : "local_tinyallocs",
        "type" : 2
      }, {
        "name" : "alloc",
        "type" : 83
      }, {
        "name" : "stackcache",
        "type" : 101
      }, {
        "name" : "local_largefree",
        "type" : 2
      }, {
        "name" : "local_nlargefree",
        "type" : 2
      }, {
        "name" : "local_nsmallfree",
        "type" : 104
      }, {
        "name" : "flushGen",
        "type" : 6
      } ],
      "name" : "struct{next_sample uintptr; local_scan uintptr; tiny uintptr; tinyoffset uintptr; local_tinyallocs uintptr; alloc [134]*runtime.mspan; stackcache [4]runtime.stackfreelist; local_largefree uintptr; local_nlargefree uintptr; local_nsmallfree [67]uintptr; flushGen uint32}",
      "type" : "Struct",
      "underlying" : 82
    }, {
      "elem" : 84,
      "name" : "[134]*runtime.mspan",
      "type" : "Array",
      "underlying" : 83
    }, {
      "elem" : 85,
      "name" : "*runtime.mspan",
      "type" : "Pointer",
      "underlying" : 84
    }, {
      "local-name" : "mspan",
      "name" : "runtime.mspan",
      "package" : 0,
      "type" : "Named",
      "underlying" : 86
    }, {
      "fields" : [ {
        "name" : "next",
        "type" : 84
      }, {
        "name" : "prev",
        "type" : 84
      }, {
        "name" : "list",
        "type" : 87
      }, {
        "name" : "startAddr",
        "type" : 2
      }, {
        "name" : "npages",
        "type" : 2
      }, {
        "name" : "manualFreeList",
        "type" : 90
      }, {
        "name" : "freeindex",
        "type" : 2
      }, {
        "name" : "nelems",
        "type" : 2
      }, {
        "name" : "allocCache",
        "type" : 26
      }, {
        "name" : "allocBits",
        "type" : 91
      }, {
        "name" : "gcmarkBits",
        "type" : 91
      }, {
        "name" : "sweepgen",
        "type" : 6
      }, {
        "name" : "divMul",
        "type" : 23
      }, {
        "name" : "baseMask",
        "type" : 23
      }, {
        "name" : "allocCount",
        "type" : 23
      }, {
        "name" : "spanclass",
        "type" : 93
      }, {
        "name" : "state",
        "type" : 94
      }, {
        "name" : "needzero",
        "type" : 8
      }, {
        "name" : "divShift",
        "type" : 8
      }, {
        "name" : "divShift2",
        "type" : 8
      }, {
        "name" : "elemsize",
        "type" : 2
      }, {
        "name" : "limit",
        "type" : 2
      }, {
        "name" : "speciallock",
        "type" : 97
      }, {
        "name" : "specials",
        "type" : 98
      } ],
      "name" : "struct{next *runtime.mspan; prev *runtime.mspan; list *runtime.mSpanList; startAddr uintptr; npages uintptr; manualFreeList runtime.gclinkptr; freeindex uintptr; nelems uintptr; allocCache uint64; allocBits *runtime.gcBits; gcmarkBits *runtime.gcBits; sweepgen uint32; divMul uint16; baseMask uint16; allocCount uint16; spanclass runtime.spanClass; state runtime.mSpanStateBox; needzero uint8; divShift uint8; divShift2 uint8; elemsize uintptr; limit uintptr; speciallock runtime.mutex; specials *runtime.special}",
      "type" : "Struct",
      "underlying" : 86
    }, {
      "elem" : 88,
      "name" : "*runtime.mSpanList",
      "type" : "Pointer",
      "underlying" : 87
    }, {
      "local-name" : "mSpanList",
      "name" : "runtime.mSpanList",
      "package" : 0,
      "type" : "Named",
      "underlying" : 89
    }, {
      "fields" : [ {
        "name" : "first",
        "type" : 84
      }, {
        "name" : "last",
        "type" : 84
      } ],
      "name" : "struct{first *runtime.mspan; last *runtime.mspan}",
      "type" : "Struct",
      "underlying" : 89
    }, {
      "local-name" : "gclinkptr",
      "name" : "runtime.gclinkptr",
      "package" : 0,
      "type" : "Named",
      "underlying" : 2
    }, {
      "elem" : 92,
      "name" : "*runtime.gcBits",
      "type" : "Pointer",
      "underlying" : 91
    }, {
      "local-name" : "gcBits",
      "name" : "runtime.gcBits",
      "package" : 0,
      "type" : "Named",
      "underlying" : 8
    }, {
      "local-name" : "spanClass",
      "name" : "runtime.spanClass",
      "package" : 0,
      "type" : "Named",
      "underlying" : 8
    }, {
      "local-name" : "mSpanStateBox",
      "name" : "runtime.mSpanStateBox",
      "package" : 0,
      "type" : "Named",
      "underlying" : 95
    }, {
      "fields" : [ {
        "name" : "s",
        "type" : 96
      } ],
      "name" : "struct{s runtime.mSpanState}",
      "type" : "Struct",
      "underlying" : 95
    }, {
      "local-name" : "mSpanState",
      "name" : "runtime.mSpanState",
      "package" : 0,
      "type" : "Named",
      "underlying" : 8
    }, {
      "local-name" : "mutex",
      "name" : "runtime.mutex",
      "package" : 0,
      "type" : "Named",
      "underlying" : 78
    }, {
      "elem" : 99,
      "name" : "*runtime.special",
      "type" : "Pointer",
      "underlying" : 98
    }, {
      "local-name" : "special",
      "name" : "runtime.special",
      "package" : 0,
      "type" : "Named",
      "underlying" : 100
    }, {
      "fields" : [ {
        "name" : "next",
        "type" : 98
      }, {
        "name" : "offset",
        "type" : 23
      }, {
        "name" : "kind",
        "type" : 15
      } ],
      "name" : "struct{next *runtime.special; offset uint16; kind byte}",
      "type" : "Struct",
      "underlying" : 100
    }, {
      "elem" : 102,
      "name" : "[4]runtime.stackfreelist",
      "type" : "Array",
      "underlying" : 101
    }, {
      "local-name" : "stackfreelist",
      "name" : "runtime.stackfreelist",
      "package" : 0,
      "type" : "Named",
      "underlying" : 103
    }, {
      "fields" : [ {
        "name" : "list",
        "type" : 90
      }, {
        "name" : "size",
        "type" : 2
      } ],
      "name" : "struct{list runtime.gclinkptr; size uintptr}",
      "type" : "Struct",
      "underlying" : 103
    }, {
      "elem" : 2,
      "name" : "[67]uintptr",
      "type" : "Array",
      "underlying" : 104
    }, {
      "name" : "func(*runtime.g, unsafe.Pointer) bool",
      "params" : 106,
      "recv" : -1,
      "results" : 12,
      "type" : "Signature",
      "underlying" : 105,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 43
      }, {
        "name" : "",
        "type" : 11
      } ],
      "name" : "(*runtime.g, unsafe.Pointer)",
      "type" : "Tuple",
      "underlying" : 106
    }, {
      "local-name" : "libcall",
      "name" : "runtime.libcall",
      "package" : 0,
      "type" : "Named",
      "underlying" : 108
    }, {
      "fields" : [ {
        "name" : "fn",
        "type" : 2
      }, {
        "name" : "n",
        "type" : 2
      }, {
        "name" : "args",
        "type" : 2
      }, {
        "name" : "r1",
        "type" : 2
      }, {
        "name" : "r2",
        "type" : 2
      }, {
        "name" : "err",
        "type" : 2
      } ],
      "name" : "struct{fn uintptr; n uintptr; args uintptr; r1 uintptr; r2 uintptr; err uintptr}",
      "type" : "Struct",
      "underlying" : 108
    }, {
      "local-name" : "dlogPerM",
      "name" : "runtime.dlogPerM",
      "package" : 0,
      "type" : "Named",
      "underlying" : 110
    }, {
      "fields" : [ ],
      "name" : "struct{}",
      "type" : "Struct",
      "underlying" : 110
    }, {
      "local-name" : "mOS",
      "name" : "runtime.mOS",
      "package" : 0,
      "type" : "Named",
      "underlying" : 110
    }, {
      "local-name" : "waitReason",
      "name" : "runtime.waitReason",
      "package" : 0,
      "type" : "Named",
      "underlying" : 8
    }, {
      "elem" : 15,
      "name" : "[]byte",
      "type" : "Slice",
      "underlying" : 113
    }, {
      "elem" : 115,
      "name" : "*[]runtime.ancestorInfo",
      "type" : "Pointer",
      "underlying" : 114
    }, {
      "elem" : 116,
      "name" : "[]runtime.ancestorInfo",
      "type" : "Slice",
      "underlying" : 115
    }, {
      "local-name" : "ancestorInfo",
      "name" : "runtime.ancestorInfo",
      "package" : 0,
      "type" : "Named",
      "underlying" : 117
    }, {
      "fields" : [ {
        "name" : "pcs",
        "type" : 118
      }, {
        "name" : "goid",
        "type" : 72
      }, {
        "name" : "gopc",
        "type" : 2
      } ],
      "name" : "struct{pcs []uintptr; goid int64; gopc uintptr}",
      "type" : "Struct",
      "underlying" : 117
    }, {
      "elem" : 2,
      "name" : "[]uintptr",
      "type" : "Slice",
      "underlying" : 118
    }, {
      "elem" : 120,
      "name" : "*runtime.sudog",
      "type" : "Pointer",
      "underlying" : 119
    }, {
      "local-name" : "sudog",
      "name" : "runtime.sudog",
      "package" : 0,
      "type" : "Named",
      "underlying" : 121
    }, {
      "fields" : [ {
        "name" : "g",
        "type" : 43
      }, {
        "name" : "isSelect",
        "type" : 13
      }, {
        "name" : "next",
        "type" : 119
      }, {
        "name" : "prev",
        "type" : 119
      }, {
        "name" : "elem",
        "type" : 11
      }, {
        "name" : "acquiretime",
        "type" : 72
      }, {
        "name" : "releasetime",
        "type" : 72
      }, {
        "name" : "ticket",
        "type" : 6
      }, {
        "name" : "parent",
        "type" : 119
      }, {
        "name" : "waitlink",
        "type" : 119
      }, {
        "name" : "waittail",
        "type" : 119
      }, {
        "name" : "c",
        "type" : 122
      } ],
      "name" : "struct{g *runtime.g; isSelect bool; next *runtime.sudog; prev *runtime.sudog; elem unsafe.Pointer; acquiretime int64; releasetime int64; ticket uint32; parent *runtime.sudog; waitlink *runtime.sudog; waittail *runtime.sudog; c *runtime.hchan}",
      "type" : "Struct",
      "underlying" : 121
    }, {
      "elem" : 123,
      "name" : "*runtime.hchan",
      "type" : "Pointer",
      "underlying" : 122
    }, {
      "local-name" : "hchan",
      "name" : "runtime.hchan",
      "package" : 0,
      "type" : "Named",
      "underlying" : 124
    }, {
      "fields" : [ {
        "name" : "qcount",
        "type" : 125
      }, {
        "name" : "dataqsiz",
        "type" : 125
      }, {
        "name" : "buf",
        "type" : 11
      }, {
        "name" : "elemsize",
        "type" : 23
      }, {
        "name" : "closed",
        "type" : 6
      }, {
        "name" : "elemtype",
        "type" : 3
      }, {
        "name" : "sendx",
        "type" : 125
      }, {
        "name" : "recvx",
        "type" : 125
      }, {
        "name" : "recvq",
        "type" : 126
      }, {
        "name" : "sendq",
        "type" : 126
      }, {
        "name" : "lock",
        "type" : 97
      } ],
      "name" : "struct{qcount uint; dataqsiz uint; buf unsafe.Pointer; elemsize uint16; closed uint32; elemtype *runtime._type; sendx uint; recvx uint; recvq runtime.waitq; sendq runtime.waitq; lock runtime.mutex}",
      "type" : "Struct",
      "underlying" : 124
    }, {
      "name" : "uint",
      "type" : "Basic",
      "underlying" : 125
    }, {
      "local-name" : "waitq",
      "name" : "runtime.waitq",
      "package" : 0,
      "type" : "Named",
      "underlying" : 127
    }, {
      "fields" : [ {
        "name" : "first",
        "type" : 119
      }, {
        "name" : "last",
        "type" : 119
      } ],
      "name" : "struct{first *runtime.sudog; last *runtime.sudog}",
      "type" : "Struct",
      "underlying" : 127
    }, {
      "elem" : 129,
      "name" : "*runtime.timer",
      "type" : "Pointer",
      "underlying" : 128
    }, {
      "local-name" : "timer",
      "name" : "runtime.timer",
      "package" : 0,
      "type" : "Named",
      "underlying" : 130
    }, {
      "fields" : [ {
        "name" : "pp",
        "type" : 71
      }, {
        "name" : "when",
        "type" : 72
      }, {
        "name" : "period",
        "type" : 72
      }, {
        "name" : "f",
        "type" : 131
      }, {
        "name" : "arg",
        "type" : 51
      }, {
        "name" : "seq",
        "type" : 2
      }, {
        "name" : "nextwhen",
        "type" : 72
      }, {
        "name" : "status",
        "type" : 6
      } ],
      "name" : "struct{pp runtime.puintptr; when int64; period int64; f func(interface{}, uintptr); arg interface{}; seq uintptr; nextwhen int64; status uint32}",
      "type" : "Struct",
      "underlying" : 130
    }, {
      "name" : "func(interface{}, uintptr)",
      "params" : 132,
      "recv" : -1,
      "results" : 34,
      "type" : "Signature",
      "underlying" : 131,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 51
      }, {
        "name" : "",
        "type" : 2
      } ],
      "name" : "(interface{}, uintptr)",
      "type" : "Tuple",
      "underlying" : 132
    }, {
      "name" : "func() *runtime.g",
      "params" : 34,
      "recv" : -1,
      "results" : 134,
      "type" : "Signature",
      "underlying" : 133,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 43
      } ],
      "name" : "(*runtime.g)",
      "type" : "Tuple",
      "underlying" : 134
    }, {
      "name" : "func(gp *runtime.g)",
      "params" : 136,
      "recv" : -1,
      "results" : 34,
      "type" : "Signature",
      "underlying" : 135,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "gp",
        "type" : 43
      } ],
      "name" : "(gp *runtime.g)",
      "type" : "Tuple",
      "underlying" : 136
    }, {
      "name" : "func() *runtime.m",
      "params" : 34,
      "recv" : -1,
      "results" : 138,
      "type" : "Signature",
      "underlying" : 137,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 58
      } ],
      "name" : "(*runtime.m)",
      "type" : "Tuple",
      "underlying" : 138
    }, {
      "name" : "func() *runtime.mcache",
      "params" : 34,
      "recv" : -1,
      "results" : 140,
      "type" : "Signature",
      "underlying" : 139,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 80
      } ],
      "name" : "(*runtime.mcache)",
      "type" : "Tuple",
      "underlying" : 140
    }, {
      "name" : "func(n uintptr, a uintptr) uintptr",
      "params" : 142,
      "recv" : -1,
      "results" : 143,
      "type" : "Signature",
      "underlying" : 141,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "n",
        "type" : 2
      }, {
        "name" : "a",
        "type" : 2
      } ],
      "name" : "(n uintptr, a uintptr)",
      "type" : "Tuple",
      "underlying" : 142
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 2
      } ],
      "name" : "(uintptr)",
      "type" : "Tuple",
      "underlying" : 143
    }, {
      "name" : "func(mp *runtime.m)",
      "params" : 145,
      "recv" : -1,
      "results" : 34,
      "type" : "Signature",
      "underlying" : 144,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "mp",
        "type" : 58
      } ],
      "name" : "(mp *runtime.m)",
      "type" : "Tuple",
      "underlying" : 145
    }, {
      "name" : "func(s *runtime.mspan) runtime.gclinkptr",
      "params" : 147,
      "recv" : -1,
      "results" : 148,
      "type" : "Signature",
      "underlying" : 146,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "s",
        "type" : 84
      } ],
      "name" : "(s *runtime.mspan)",
      "type" : "Tuple",
      "underlying" : 147
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 90
      } ],
      "name" : "(runtime.gclinkptr)",
      "type" : "Tuple",
      "underlying" : 148
    }, {
      "fields" : [ {
        "name" : "v",
        "type" : 90
      }, {
        "name" : "s",
        "type" : 84
      }, {
        "name" : "shouldhelpgc",
        "type" : 13
      } ],
      "name" : "(v runtime.gclinkptr, s *runtime.mspan, shouldhelpgc bool)",
      "type" : "Tuple",
      "underlying" : 149
    }, {
      "name" : "func(spc runtime.spanClass) (v runtime.gclinkptr, s *runtime.mspan, shouldhelpgc bool)",
      "params" : 151,
      "recv" : -1,
      "results" : 149,
      "type" : "Signature",
      "underlying" : 150,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "spc",
        "type" : 93
      } ],
      "name" : "(spc runtime.spanClass)",
      "type" : "Tuple",
      "underlying" : 151
    }, {
      "elem" : 153,
      "name" : "*[2]uint64",
      "type" : "Pointer",
      "underlying" : 152
    }, {
      "elem" : 26,
      "name" : "[2]uint64",
      "type" : "Array",
      "underlying" : 153
    }, {
      "name" : "untyped int",
      "type" : "Basic",
      "underlying" : 154
    }, {
      "name" : "func(sizeclass uint8, noscan bool) runtime.spanClass",
      "params" : 156,
      "recv" : -1,
      "results" : 157,
      "type" : "Signature",
      "underlying" : 155,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "sizeclass",
        "type" : 8
      }, {
        "name" : "noscan",
        "type" : 13
      } ],
      "name" : "(sizeclass uint8, noscan bool)",
      "type" : "Tuple",
      "underlying" : 156
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 93
      } ],
      "name" : "(runtime.spanClass)",
      "type" : "Tuple",
      "underlying" : 157
    }, {
      "name" : "func(ptr unsafe.Pointer, n uintptr)",
      "params" : 159,
      "recv" : -1,
      "results" : 34,
      "type" : "Signature",
      "underlying" : 158,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "ptr",
        "type" : 11
      }, {
        "name" : "n",
        "type" : 2
      } ],
      "name" : "(ptr unsafe.Pointer, n uintptr)",
      "type" : "Tuple",
      "underlying" : 159
    }, {
      "name" : "func(fn func())",
      "params" : 161,
      "recv" : -1,
      "results" : 34,
      "type" : "Signature",
      "underlying" : 160,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "fn",
        "type" : 70
      } ],
      "name" : "(fn func())",
      "type" : "Tuple",
      "underlying" : 161
    }, {
      "name" : "func(size uintptr, needzero bool, noscan bool) *runtime.mspan",
      "params" : 163,
      "recv" : -1,
      "results" : 164,
      "type" : "Signature",
      "underlying" : 162,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "size",
        "type" : 2
      }, {
        "name" : "needzero",
        "type" : 13
      }, {
        "name" : "noscan",
        "type" : 13
      } ],
      "name" : "(size uintptr, needzero bool, noscan bool)",
      "type" : "Tuple",
      "underlying" : 163
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 84
      } ],
      "name" : "(*runtime.mspan)",
      "type" : "Tuple",
      "underlying" : 164
    }, {
      "name" : "func() uintptr",
      "params" : 34,
      "recv" : -1,
      "results" : 143,
      "type" : "Signature",
      "underlying" : 165,
      "variadic" : false
    }, {
      "name" : "func(x uintptr, size uintptr, dataSize uintptr, typ *runtime._type)",
      "params" : 167,
      "recv" : -1,
      "results" : 34,
      "type" : "Signature",
      "underlying" : 166,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "x",
        "type" : 2
      }, {
        "name" : "size",
        "type" : 2
      }, {
        "name" : "dataSize",
        "type" : 2
      }, {
        "name" : "typ",
        "type" : 3
      } ],
      "name" : "(x uintptr, size uintptr, dataSize uintptr, typ *runtime._type)",
      "type" : "Tuple",
      "underlying" : 167
    }, {
      "name" : "func(obj uintptr, size uintptr, scanSize uintptr)",
      "params" : 169,
      "recv" : -1,
      "results" : 34,
      "type" : "Signature",
      "underlying" : 168,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "obj",
        "type" : 2
      }, {
        "name" : "size",
        "type" : 2
      }, {
        "name" : "scanSize",
        "type" : 2
      } ],
      "name" : "(obj uintptr, size uintptr, scanSize uintptr)",
      "type" : "Tuple",
      "underlying" : 169
    }, {
      "name" : "func(p unsafe.Pointer, sz uintptr)",
      "params" : 171,
      "recv" : -1,
      "results" : 34,
      "type" : "Signature",
      "underlying" : 170,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "p",
        "type" : 11
      }, {
        "name" : "sz",
        "type" : 2
      } ],
      "name" : "(p unsafe.Pointer, sz uintptr)",
      "type" : "Tuple",
      "underlying" : 171
    }, {
      "name" : "func(addr unsafe.Pointer, sz uintptr)",
      "params" : 173,
      "recv" : -1,
      "results" : 34,
      "type" : "Signature",
      "underlying" : 172,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "addr",
        "type" : 11
      }, {
        "name" : "sz",
        "type" : 2
      } ],
      "name" : "(addr unsafe.Pointer, sz uintptr)",
      "type" : "Tuple",
      "underlying" : 173
    }, {
      "name" : "func(p unsafe.Pointer, size uintptr, typ *runtime._type)",
      "params" : 175,
      "recv" : -1,
      "results" : 34,
      "type" : "Signature",
      "underlying" : 174,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "p",
        "type" : 11
      }, {
        "name" : "size",
        "type" : 2
      }, {
        "name" : "typ",
        "type" : 3
      } ],
      "name" : "(p unsafe.Pointer, size uintptr, typ *runtime._type)",
      "type" : "Tuple",
      "underlying" : 175
    }, {
      "name" : "func(mp *runtime.m, x unsafe.Pointer, size uintptr)",
      "params" : 177,
      "recv" : -1,
      "results" : 34,
      "type" : "Signature",
      "underlying" : 176,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "mp",
        "type" : 58
      }, {
        "name" : "x",
        "type" : 11
      }, {
        "name" : "size",
        "type" : 2
      } ],
      "name" : "(mp *runtime.m, x unsafe.Pointer, size uintptr)",
      "type" : "Tuple",
      "underlying" : 177
    }, {
      "local-name" : "gcTrigger",
      "name" : "runtime.gcTrigger",
      "package" : 0,
      "type" : "Named",
      "underlying" : 179
    }, {
      "fields" : [ {
        "name" : "kind",
        "type" : 180
      }, {
        "name" : "now",
        "type" : 72
      }, {
        "name" : "n",
        "type" : 6
      } ],
      "name" : "struct{kind runtime.gcTriggerKind; now int64; n uint32}",
      "type" : "Struct",
      "underlying" : 179
    }, {
      "local-name" : "gcTriggerKind",
      "name" : "runtime.gcTriggerKind",
      "package" : 0,
      "type" : "Named",
      "underlying" : 20
    }, {
      "name" : "func() bool",
      "params" : 34,
      "recv" : -1,
      "results" : 12,
      "type" : "Signature",
      "underlying" : 181,
      "variadic" : false
    }, {
      "name" : "func(trigger runtime.gcTrigger)",
      "params" : 183,
      "recv" : -1,
      "results" : 34,
      "type" : "Signature",
      "underlying" : 182,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "trigger",
        "type" : 178
      } ],
      "name" : "(trigger runtime.gcTrigger)",
      "type" : "Tuple",
      "underlying" : 183
    } ],
    "variables" : [ {
      "name" : "size",
      "package" : 0,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "typ",
      "package" : 0,
      "type" : 3,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "needzero",
      "package" : 0,
      "type" : 13,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "[res0]",
      "package" : 0,
      "type" : 11,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "zerobase",
      "package" : 0,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "gcBlackenEnabled",
      "package" : 0,
      "type" : 6,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "gcphase",
      "package" : 0,
      "type" : 6,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "MemProfileRate",
      "package" : 0,
      "type" : 20,
      "exported" : true,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "size_to_class128",
      "package" : 0,
      "type" : 21,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "class_to_size",
      "package" : 0,
      "type" : 22,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "memstats",
      "package" : 0,
      "type" : 24,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "deferType",
      "package" : 0,
      "type" : 3,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "size_to_class8",
      "package" : 0,
      "type" : 31,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "debug",
      "package" : 0,
      "type" : 32,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "sbrk",
      "package" : 0,
      "type" : 17,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "align",
      "package" : 0,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "other_sys",
      "package" : 0,
      "type" : 26,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "assistG",
      "package" : 0,
      "type" : 43,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "m",
      "package" : 0,
      "type" : 58,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "curg",
      "package" : 0,
      "type" : 43,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "gcAssistBytes",
      "package" : 0,
      "type" : 72,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "mp",
      "package" : 0,
      "type" : 58,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "mallocing",
      "package" : 0,
      "type" : 17,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "gsignal",
      "package" : 0,
      "type" : 43,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "shouldhelpgc",
      "package" : 0,
      "type" : 13,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "dataSize",
      "package" : 0,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "c",
      "package" : 0,
      "type" : 80,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "x",
      "package" : 0,
      "type" : 11,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "ptrdata",
      "package" : 0,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "noscan",
      "package" : 0,
      "type" : 13,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "tinyoffset",
      "package" : 0,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "off",
      "package" : 0,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "tiny",
      "package" : 0,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "local_tinyallocs",
      "package" : 0,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "alloc",
      "package" : 0,
      "type" : 83,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "span",
      "package" : 0,
      "type" : 84,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "v",
      "package" : 0,
      "type" : 90,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "sizeclass",
      "package" : 0,
      "type" : 8,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "spc",
      "package" : 0,
      "type" : 93,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "span",
      "package" : 0,
      "type" : 84,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "v",
      "package" : 0,
      "type" : 90,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "needzero",
      "package" : 0,
      "type" : 8,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "s",
      "package" : 0,
      "type" : 84,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "freeindex",
      "package" : 0,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "allocCount",
      "package" : 0,
      "type" : 23,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "elemsize",
      "package" : 0,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "scanSize",
      "package" : 0,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "size",
      "package" : 0,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "local_scan",
      "package" : 0,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "allocfreetrace",
      "package" : 0,
      "type" : 17,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "rate",
      "package" : 0,
      "type" : 20,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "next_sample",
      "package" : 0,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "mp",
      "package" : 0,
      "type" : 58,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "kind",
      "package" : 0,
      "type" : 180,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "t",
      "package" : 0,
      "type" : 178,
      "exported" : false,
      "embedded" : false,
      "field" : false
    } ]
  },
  "go-version" : "1.14.3"
}