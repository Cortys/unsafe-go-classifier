{
  "usage" : {
    "file" : "traceback.go",
    "label1" : "memory-access",
    "label2" : "layout",
    "line" : "646",
    "module" : "std",
    "pkg" : "runtime",
    "project" : "kubernetes/kubernetes",
    "snippet" : "(*[1 << 20]uintptr)(unsafe.Pointer(pcbuf))[n] = pc",
    "version" : "std"
  },
  "cfg" : {
    "blocks" : [ {
      "update-vars" : [ ],
      "successors" : [ 2 ],
      "in-vars" : [ 6, 3, 4, 0, 1, 2 ],
      "exit" : false,
      "out-vars" : [ 6, 3, 4, 0, 1, 2 ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[entry]",
      "entry" : true,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ ],
      "in-vars" : [ ],
      "exit" : true,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[exit]",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 3 ],
      "in-vars" : [ 6, 3, 4, 0, 1, 2 ],
      "exit" : false,
      "out-vars" : [ 6, 3, 7, 4, 0, 1, 2 ],
      "decl-vars" : [ 7 ],
      "line-start" : 637,
      "ast" : {
        "kind" : "statement",
        "target" : {
          "kind" : "decl",
          "specs" : [ {
            "comments" : [ ],
            "declared-type" : {
              "element" : {
                "go-type" : 3,
                "kind" : "type",
                "type" : "identifier",
                "value" : {
                  "go-type" : 3,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "uintptr"
                }
              },
              "go-type" : 8,
              "kind" : "type",
              "length" : {
                "go-type" : 9,
                "kind" : "constant",
                "value" : {
                  "type" : "INT",
                  "value" : "32"
                }
              },
              "type" : "array"
            },
            "kind" : "spec",
            "names" : [ {
              "ident-kind" : "NoKind",
              "kind" : "ident",
              "value" : "cgoPCs"
            } ],
            "type" : "var",
            "values" : [ ]
          } ],
          "type" : "var"
        },
        "type" : "declaration"
      },
      "assign-vars" : [ ],
      "line-end" : 637,
      "code" : "var cgoPCs [32]uintptr",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 4 ],
      "in-vars" : [ 6, 3, 7, 4, 0, 1, 2 ],
      "exit" : false,
      "out-vars" : [ 6, 3, 7, 4, 0, 1 ],
      "decl-vars" : [ ],
      "line-start" : 638,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 3,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "ctxt",
              "variable" : 2
            }
          }, {
            "go-type" : 13,
            "type" : "slice",
            "three" : false,
            "high" : null,
            "max" : null,
            "kind" : "expression",
            "low" : null,
            "target" : {
              "go-type" : 8,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "cgoPCs",
                "variable" : 7
              }
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 11,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 1,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "cgoContextPCs"
            }
          },
          "go-type" : 10,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 638,
      "code" : "cgoContextPCs(ctxt, cgoPCs[:])",
      "entry" : false,
      "use-vars" : [ 2, 7 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 5 ],
      "in-vars" : [ 4, 0, 1, 6, 3, 7 ],
      "exit" : false,
      "out-vars" : [ 8, 6, 3, 7, 4, 0, 1 ],
      "decl-vars" : [ 8 ],
      "line-start" : 639,
      "ast" : {
        "kind" : "statement",
        "target" : {
          "kind" : "decl",
          "specs" : [ {
            "comments" : [ ],
            "declared-type" : {
              "go-type" : 14,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 14,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "cgoSymbolizerArg"
              }
            },
            "kind" : "spec",
            "names" : [ {
              "ident-kind" : "NoKind",
              "kind" : "ident",
              "value" : "arg"
            } ],
            "type" : "var",
            "values" : [ ]
          } ],
          "type" : "var"
        },
        "type" : "declaration"
      },
      "assign-vars" : [ ],
      "line-end" : 639,
      "code" : "var arg cgoSymbolizerArg",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 6 ],
      "in-vars" : [ 7, 4, 0, 1, 8, 6, 3 ],
      "exit" : false,
      "out-vars" : [ 3, 7, 4, 0, 1, 8, 9, 6 ],
      "decl-vars" : [ 9 ],
      "line-start" : 640,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "anySymbolized"
          }
        } ],
        "right" : [ {
          "go-type" : 4,
          "kind" : "constant",
          "value" : {
            "type" : "BOOL",
            "value" : "false"
          }
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 640,
      "code" : "anySymbolized := false",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 7, 18 ],
      "in-vars" : [ 7, 4, 0, 1, 8, 9, 6, 3 ],
      "exit" : false,
      "out-vars" : [ 7, 4, 1, 3, 10, 0, 8, 9, 6 ],
      "decl-vars" : [ 12, 10 ],
      "line-start" : 641,
      "ast" : {
        "is-assign" : false,
        "key" : {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "_"
          }
        },
        "kind" : "statement",
        "target" : {
          "go-type" : 8,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "cgoPCs",
            "variable" : 7
          }
        },
        "type" : "range",
        "value" : {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "pc"
          }
        }
      },
      "assign-vars" : [ ],
      "line-end" : 658,
      "code" : "for _, pc := range cgoPCs {\n\tif pc == 0 || n >= max {\n\t\tbreak\n\t}\n\tif pcbuf != nil {\n\t\t(*[1 << 20]uintptr)(unsafe.Pointer(pcbuf))[n] = pc\n\t}\n\tif printing {\n\t\tif cgoSymbolizer == nil {\n\t\t\tprint(\"non-Go function at pc=\", hex(pc), \"\\n\")\n\t\t} else {\n\t\t\tc := printOneCgoTraceback(pc, max-n, &arg)\n\t\t\tn += c - 1\n\t\t\tanySymbolized = true\n\t\t}\n\t}\n\tn++\n}",
      "entry" : false,
      "use-vars" : [ 7 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 8, 9 ],
      "in-vars" : [ 6, 3, 0, 1, 8, 10, 7, 4, 9 ],
      "exit" : false,
      "out-vars" : [ 10, 3, 4, 0, 6, 7, 1, 8, 9 ],
      "decl-vars" : [ ],
      "line-start" : 642,
      "ast" : {
        "condition" : {
          "go-type" : 18,
          "kind" : "expression",
          "left" : {
            "go-type" : 18,
            "kind" : "expression",
            "left" : {
              "go-type" : 3,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "pc",
                "variable" : 10
              }
            },
            "operator" : "==",
            "right" : {
              "go-type" : 3,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "0"
              }
            },
            "type" : "binary"
          },
          "operator" : "||",
          "right" : {
            "go-type" : 18,
            "kind" : "expression",
            "left" : {
              "go-type" : 5,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "n",
                "variable" : 3
              }
            },
            "operator" : ">=",
            "right" : {
              "go-type" : 5,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "max",
                "variable" : 4
              }
            },
            "type" : "binary"
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 644,
      "code" : "if pc == 0 || n >= max {\n\tbreak\n}",
      "entry" : false,
      "use-vars" : [ 3, 4, 10 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 18 ],
      "in-vars" : [ 3, 8, 9 ],
      "exit" : false,
      "out-vars" : [ 3, 8, 9 ],
      "decl-vars" : [ ],
      "line-start" : 643,
      "ast" : {
        "kind" : "statement",
        "label" : null,
        "type" : "break"
      },
      "assign-vars" : [ ],
      "line-end" : 643,
      "code" : "break",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 10, 11 ],
      "in-vars" : [ 4, 0, 1, 8, 6, 10, 3, 7, 9 ],
      "exit" : false,
      "out-vars" : [ 10, 3, 7, 4, 8, 6, 0, 1, 9 ],
      "decl-vars" : [ ],
      "line-start" : 645,
      "ast" : {
        "condition" : {
          "go-type" : 18,
          "kind" : "expression",
          "left" : {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "pcbuf",
              "variable" : 0
            }
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 19,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Nil",
              "kind" : "ident",
              "value" : "nil"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 647,
      "code" : "if pcbuf != nil {\n\t(*[1 << 20]uintptr)(unsafe.Pointer(pcbuf))[n] = pc\n}",
      "entry" : false,
      "use-vars" : [ 0 ]
    }, {
      "update-vars" : [ 0 ],
      "successors" : [ 11 ],
      "in-vars" : [ 6, 7, 8, 1, 9, 10, 3, 4, 0 ],
      "exit" : false,
      "out-vars" : [ 6, 4, 1, 8, 9, 10, 3, 7, 0 ],
      "decl-vars" : [ ],
      "line-start" : 646,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 3,
          "index" : {
            "go-type" : 5,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "n",
              "variable" : 3
            }
          },
          "kind" : "expression",
          "target" : {
            "coerced-to" : {
              "contained" : {
                "element" : {
                  "go-type" : 3,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 3,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "uintptr"
                  }
                },
                "go-type" : 21,
                "kind" : "type",
                "length" : {
                  "go-type" : 9,
                  "kind" : "constant",
                  "value" : {
                    "type" : "INT",
                    "value" : "1048576"
                  }
                },
                "type" : "array"
              },
              "go-type" : 20,
              "kind" : "type",
              "type" : "pointer"
            },
            "go-type" : 20,
            "kind" : "expression",
            "target" : {
              "coerced-to" : {
                "go-type" : 7,
                "kind" : "type",
                "qualifier" : {
                  "ident-kind" : "PkgName",
                  "kind" : "ident",
                  "package" : 1,
                  "value" : "unsafe"
                },
                "type" : "identifier",
                "value" : {
                  "go-type" : 7,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "Pointer"
                }
              },
              "go-type" : 7,
              "kind" : "expression",
              "target" : {
                "go-type" : 2,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "pcbuf",
                  "variable" : 0
                }
              },
              "type" : "cast"
            },
            "type" : "cast"
          },
          "type" : "index"
        } ],
        "right" : [ {
          "go-type" : 3,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "pc",
            "variable" : 10
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 646,
      "code" : "(*[1 << 20]uintptr)(unsafe.Pointer(pcbuf))[n] = pc",
      "entry" : false,
      "use-vars" : [ 3, 10, 0 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 12, 17 ],
      "in-vars" : [ 6, 3, 0, 8, 10, 7, 4, 1, 9 ],
      "exit" : false,
      "out-vars" : [ 10, 7, 0, 9, 6, 3, 4, 1, 8 ],
      "decl-vars" : [ ],
      "line-start" : 648,
      "ast" : {
        "condition" : {
          "go-type" : 4,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "printing",
            "variable" : 1
          }
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 656,
      "code" : "if printing {\n\tif cgoSymbolizer == nil {\n\t\tprint(\"non-Go function at pc=\", hex(pc), \"\\n\")\n\t} else {\n\t\tc := printOneCgoTraceback(pc, max-n, &arg)\n\t\tn += c - 1\n\t\tanySymbolized = true\n\t}\n}",
      "entry" : false,
      "use-vars" : [ 1 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 13, 14 ],
      "in-vars" : [ 4, 1, 9, 6, 10, 3, 7, 0, 8 ],
      "exit" : false,
      "out-vars" : [ 8, 6, 0, 1, 4, 9, 10, 3, 7 ],
      "decl-vars" : [ ],
      "line-start" : 649,
      "ast" : {
        "condition" : {
          "go-type" : 18,
          "kind" : "expression",
          "left" : {
            "go-type" : 7,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "cgoSymbolizer",
              "variable" : 6
            }
          },
          "operator" : "==",
          "right" : {
            "go-type" : 7,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Nil",
              "kind" : "ident",
              "value" : "nil"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 655,
      "code" : "if cgoSymbolizer == nil {\n\tprint(\"non-Go function at pc=\", hex(pc), \"\\n\")\n} else {\n\tc := printOneCgoTraceback(pc, max-n, &arg)\n\tn += c - 1\n\tanySymbolized = true\n}",
      "entry" : false,
      "use-vars" : [ 6 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 17 ],
      "in-vars" : [ 1, 8, 9, 6, 0, 7, 4, 10, 3 ],
      "exit" : false,
      "out-vars" : [ 6, 3, 7, 4, 0, 1, 8, 9 ],
      "decl-vars" : [ ],
      "line-start" : 650,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 24,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "non-Go function at pc="
            }
          }, {
            "coerced-to" : {
              "go-type" : 25,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 25,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "hex"
              }
            },
            "go-type" : 25,
            "kind" : "expression",
            "target" : {
              "go-type" : 3,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "pc",
                "variable" : 10
              }
            },
            "type" : "cast"
          }, {
            "go-type" : 24,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "\n"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 22,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Builtin",
              "kind" : "ident",
              "value" : "print"
            }
          },
          "go-type" : 10,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 650,
      "code" : "print(\"non-Go function at pc=\", hex(pc), \"\\n\")",
      "entry" : false,
      "use-vars" : [ 10 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 15 ],
      "in-vars" : [ 0, 1, 8, 6, 10, 3, 7, 4 ],
      "exit" : false,
      "out-vars" : [ 6, 3, 11, 7, 4, 0, 1, 8 ],
      "decl-vars" : [ 11 ],
      "line-start" : 652,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "c"
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 3,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "pc",
              "variable" : 10
            }
          }, {
            "go-type" : 5,
            "kind" : "expression",
            "left" : {
              "go-type" : 5,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "max",
                "variable" : 4
              }
            },
            "operator" : "-",
            "right" : {
              "go-type" : 5,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "n",
                "variable" : 3
              }
            },
            "type" : "binary"
          }, {
            "go-type" : 29,
            "kind" : "expression",
            "operator" : "&",
            "target" : {
              "go-type" : 14,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "arg",
                "variable" : 8
              }
            },
            "type" : "unary"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 27,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 2,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "printOneCgoTraceback"
            }
          },
          "go-type" : 5,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 652,
      "code" : "c := printOneCgoTraceback(pc, max-n, &arg)",
      "entry" : false,
      "use-vars" : [ 8, 10, 4, 3 ]
    }, {
      "update-vars" : [ 3 ],
      "successors" : [ 16 ],
      "in-vars" : [ 8, 6, 3, 11, 7, 4, 0, 1 ],
      "exit" : false,
      "out-vars" : [ 0, 1, 8, 6, 3, 7, 4 ],
      "decl-vars" : [ ],
      "line-start" : 653,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 5,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "n",
            "variable" : 3
          }
        } ],
        "operator" : "+",
        "right" : [ {
          "go-type" : 5,
          "kind" : "expression",
          "left" : {
            "go-type" : 5,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "c",
              "variable" : 11
            }
          },
          "operator" : "-",
          "right" : {
            "go-type" : 5,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "1"
            }
          },
          "type" : "binary"
        } ],
        "type" : "assign-operator"
      },
      "assign-vars" : [ 3 ],
      "line-end" : 653,
      "code" : "n += c - 1",
      "entry" : false,
      "use-vars" : [ 11, 3 ]
    }, {
      "update-vars" : [ 9 ],
      "successors" : [ 17 ],
      "in-vars" : [ 7, 4, 0, 1, 8, 6, 3 ],
      "exit" : false,
      "out-vars" : [ 4, 0, 1, 8, 9, 6, 3, 7 ],
      "decl-vars" : [ ],
      "line-start" : 654,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 4,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "anySymbolized",
            "variable" : 9
          }
        } ],
        "right" : [ {
          "go-type" : 4,
          "kind" : "constant",
          "value" : {
            "type" : "BOOL",
            "value" : "true"
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 9 ],
      "line-end" : 654,
      "code" : "anySymbolized = true",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ 3 ],
      "successors" : [ 6 ],
      "in-vars" : [ 7, 4, 0, 1, 8, 9, 6, 3 ],
      "exit" : false,
      "out-vars" : [ 9, 6, 3, 7, 4, 0, 1, 8 ],
      "decl-vars" : [ ],
      "line-start" : 657,
      "ast" : {
        "kind" : "statement",
        "operation" : "++",
        "target" : {
          "go-type" : 5,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "n",
            "variable" : 3
          }
        },
        "type" : "crement"
      },
      "assign-vars" : [ 3 ],
      "line-end" : 657,
      "code" : "n++",
      "entry" : false,
      "use-vars" : [ 3 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 19, 21 ],
      "in-vars" : [ 3, 8, 9 ],
      "exit" : false,
      "out-vars" : [ 3, 8 ],
      "decl-vars" : [ ],
      "line-start" : 659,
      "ast" : {
        "condition" : {
          "go-type" : 4,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "anySymbolized",
            "variable" : 9
          }
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 662,
      "code" : "if anySymbolized {\n\targ.pc = 0\n\tcallCgoSymbolizer(&arg)\n}",
      "entry" : false,
      "use-vars" : [ 9 ]
    }, {
      "update-vars" : [ 8 ],
      "successors" : [ 20 ],
      "in-vars" : [ 3, 8 ],
      "exit" : false,
      "out-vars" : [ 3, 8 ],
      "decl-vars" : [ ],
      "line-start" : 660,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "pc",
            "variable" : 13
          },
          "go-type" : 3,
          "kind" : "expression",
          "target" : {
            "go-type" : 14,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "arg",
              "variable" : 8
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "go-type" : 3,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "0"
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 660,
      "code" : "arg.pc = 0",
      "entry" : false,
      "use-vars" : [ 8 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 21 ],
      "in-vars" : [ 3, 8 ],
      "exit" : false,
      "out-vars" : [ 3 ],
      "decl-vars" : [ ],
      "line-start" : 661,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 29,
            "kind" : "expression",
            "operator" : "&",
            "target" : {
              "go-type" : 14,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "arg",
                "variable" : 8
              }
            },
            "type" : "unary"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 30,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 3,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "callCgoSymbolizer"
            }
          },
          "go-type" : 10,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 661,
      "code" : "callCgoSymbolizer(&arg)",
      "entry" : false,
      "use-vars" : [ 8 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 3 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 663,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 5,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "n",
            "variable" : 3
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 663,
      "code" : "return n",
      "entry" : false,
      "use-vars" : [ 3 ]
    } ],
    "code" : "// tracebackCgoContext handles tracing back a cgo context value, from\n// the context argument to setCgoTraceback, for the gentraceback\n// function. It returns the new value of n.\nfunc tracebackCgoContext(pcbuf *uintptr, printing bool, ctxt uintptr, n, max int) int {\n\tvar cgoPCs [32]uintptr\n\tcgoContextPCs(ctxt, cgoPCs[:])\n\tvar arg cgoSymbolizerArg\n\tanySymbolized := false\n\tfor _, pc := range cgoPCs {\n\t\tif pc == 0 || n >= max {\n\t\t\tbreak\n\t\t}\n\t\tif pcbuf != nil {\n\t\t\t(*[1 << 20]uintptr)(unsafe.Pointer(pcbuf))[n] = pc\n\t\t}\n\t\tif printing {\n\t\t\tif cgoSymbolizer == nil {\n\t\t\t\tprint(\"non-Go function at pc=\", hex(pc), \"\\n\")\n\t\t\t} else {\n\t\t\t\tc := printOneCgoTraceback(pc, max-n, &arg)\n\t\t\t\tn += c - 1\n\t\t\t\tanySymbolized = true\n\t\t\t}\n\t\t}\n\t\tn++\n\t}\n\tif anySymbolized {\n\t\targ.pc = 0\n\t\tcallCgoSymbolizer(&arg)\n\t}\n\treturn n\n}",
    "defines" : [ 0 ],
    "functions" : [ {
      "name" : "tracebackCgoContext",
      "package" : 0,
      "type" : 0,
      "exported" : false
    }, {
      "name" : "cgoContextPCs",
      "package" : 0,
      "type" : 11,
      "exported" : false
    }, {
      "name" : "printOneCgoTraceback",
      "package" : 0,
      "type" : 27,
      "exported" : false
    }, {
      "name" : "callCgoSymbolizer",
      "package" : 0,
      "type" : 30,
      "exported" : false
    } ],
    "line-end" : 664,
    "line-start" : 636,
    "names" : [ "tracebackCgoContext" ],
    "package" : 0,
    "packages" : [ {
      "name" : "runtime",
      "path" : "runtime"
    }, {
      "name" : "unsafe",
      "path" : "unsafe"
    } ],
    "params" : [ 0, 1, 2, 3, 4 ],
    "receivers" : [ ],
    "results" : [ 5 ],
    "type" : "function",
    "types" : [ {
      "name" : "func(pcbuf *uintptr, printing bool, ctxt uintptr, n int, max int) int",
      "params" : 1,
      "recv" : -1,
      "results" : 6,
      "type" : "Signature",
      "underlying" : 0,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "pcbuf",
        "type" : 2
      }, {
        "name" : "printing",
        "type" : 4
      }, {
        "name" : "ctxt",
        "type" : 3
      }, {
        "name" : "n",
        "type" : 5
      }, {
        "name" : "max",
        "type" : 5
      } ],
      "name" : "(pcbuf *uintptr, printing bool, ctxt uintptr, n int, max int)",
      "type" : "Tuple",
      "underlying" : 1
    }, {
      "elem" : 3,
      "name" : "*uintptr",
      "type" : "Pointer",
      "underlying" : 2
    }, {
      "name" : "uintptr",
      "type" : "Basic",
      "underlying" : 3
    }, {
      "name" : "bool",
      "type" : "Basic",
      "underlying" : 4
    }, {
      "name" : "int",
      "type" : "Basic",
      "underlying" : 5
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 5
      } ],
      "name" : "(int)",
      "type" : "Tuple",
      "underlying" : 6
    }, {
      "local-name" : "Pointer",
      "name" : "unsafe.Pointer",
      "package" : 1,
      "type" : "Basic",
      "underlying" : 7
    }, {
      "elem" : 3,
      "name" : "[32]uintptr",
      "type" : "Array",
      "underlying" : 8
    }, {
      "name" : "untyped int",
      "type" : "Basic",
      "underlying" : 9
    }, {
      "fields" : [ ],
      "name" : "()",
      "type" : "Tuple",
      "underlying" : 10
    }, {
      "name" : "func(ctxt uintptr, buf []uintptr)",
      "params" : 12,
      "recv" : -1,
      "results" : 10,
      "type" : "Signature",
      "underlying" : 11,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "ctxt",
        "type" : 3
      }, {
        "name" : "buf",
        "type" : 13
      } ],
      "name" : "(ctxt uintptr, buf []uintptr)",
      "type" : "Tuple",
      "underlying" : 12
    }, {
      "elem" : 3,
      "name" : "[]uintptr",
      "type" : "Slice",
      "underlying" : 13
    }, {
      "local-name" : "cgoSymbolizerArg",
      "name" : "runtime.cgoSymbolizerArg",
      "package" : 0,
      "type" : "Named",
      "underlying" : 15
    }, {
      "fields" : [ {
        "name" : "pc",
        "type" : 3
      }, {
        "name" : "file",
        "type" : 16
      }, {
        "name" : "lineno",
        "type" : 3
      }, {
        "name" : "funcName",
        "type" : 16
      }, {
        "name" : "entry",
        "type" : 3
      }, {
        "name" : "more",
        "type" : 3
      }, {
        "name" : "data",
        "type" : 3
      } ],
      "name" : "struct{pc uintptr; file *byte; lineno uintptr; funcName *byte; entry uintptr; more uintptr; data uintptr}",
      "type" : "Struct",
      "underlying" : 15
    }, {
      "elem" : 17,
      "name" : "*byte",
      "type" : "Pointer",
      "underlying" : 16
    }, {
      "name" : "byte",
      "type" : "Basic",
      "underlying" : 17
    }, {
      "name" : "untyped bool",
      "type" : "Basic",
      "underlying" : 18
    }, {
      "name" : "untyped nil",
      "type" : "Basic",
      "underlying" : 19
    }, {
      "elem" : 21,
      "name" : "*[1048576]uintptr",
      "type" : "Pointer",
      "underlying" : 20
    }, {
      "elem" : 3,
      "name" : "[1048576]uintptr",
      "type" : "Array",
      "underlying" : 21
    }, {
      "name" : "func(string, runtime.hex, string)",
      "params" : 23,
      "recv" : -1,
      "results" : 10,
      "type" : "Signature",
      "underlying" : 22,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 24
      }, {
        "name" : "",
        "type" : 25
      }, {
        "name" : "",
        "type" : 24
      } ],
      "name" : "(string, runtime.hex, string)",
      "type" : "Tuple",
      "underlying" : 23
    }, {
      "name" : "string",
      "type" : "Basic",
      "underlying" : 24
    }, {
      "local-name" : "hex",
      "name" : "runtime.hex",
      "package" : 0,
      "type" : "Named",
      "underlying" : 26
    }, {
      "name" : "uint64",
      "type" : "Basic",
      "underlying" : 26
    }, {
      "name" : "func(pc uintptr, max int, arg *runtime.cgoSymbolizerArg) int",
      "params" : 28,
      "recv" : -1,
      "results" : 6,
      "type" : "Signature",
      "underlying" : 27,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "pc",
        "type" : 3
      }, {
        "name" : "max",
        "type" : 5
      }, {
        "name" : "arg",
        "type" : 29
      } ],
      "name" : "(pc uintptr, max int, arg *runtime.cgoSymbolizerArg)",
      "type" : "Tuple",
      "underlying" : 28
    }, {
      "elem" : 14,
      "name" : "*runtime.cgoSymbolizerArg",
      "type" : "Pointer",
      "underlying" : 29
    }, {
      "name" : "func(arg *runtime.cgoSymbolizerArg)",
      "params" : 31,
      "recv" : -1,
      "results" : 10,
      "type" : "Signature",
      "underlying" : 30,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "arg",
        "type" : 29
      } ],
      "name" : "(arg *runtime.cgoSymbolizerArg)",
      "type" : "Tuple",
      "underlying" : 31
    } ],
    "variables" : [ {
      "name" : "pcbuf",
      "package" : 0,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "printing",
      "package" : 0,
      "type" : 4,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "ctxt",
      "package" : 0,
      "type" : 3,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "n",
      "package" : 0,
      "type" : 5,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "max",
      "package" : 0,
      "type" : 5,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "[res0]",
      "package" : 0,
      "type" : 5,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "cgoSymbolizer",
      "package" : 0,
      "type" : 7,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "cgoPCs",
      "package" : 0,
      "type" : 8,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "arg",
      "package" : 0,
      "type" : 14,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "anySymbolized",
      "package" : 0,
      "type" : 4,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "pc",
      "package" : 0,
      "type" : 3,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "c",
      "package" : 0,
      "type" : 5,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "_",
      "package" : 0,
      "type" : 5,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "pc",
      "package" : 0,
      "type" : 3,
      "exported" : false,
      "embedded" : false,
      "field" : true
    } ]
  },
  "go-version" : "1.14.3"
}