{
  "usage" : {
    "file" : "trace.go",
    "label1" : "memory-access",
    "label2" : "layout",
    "line" : "924",
    "module" : "std",
    "pkg" : "runtime",
    "project" : "kubernetes/kubernetes",
    "snippet" : "func (a *traceAlloc) alloc(n uintptr) unsafe.Pointer {",
    "version" : "std"
  },
  "cfg" : {
    "blocks" : [ {
      "update-vars" : [ ],
      "successors" : [ 2 ],
      "in-vars" : [ 3, 1, 0 ],
      "exit" : false,
      "out-vars" : [ 0, 3, 1 ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[entry]",
      "entry" : true,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ ],
      "in-vars" : [ ],
      "exit" : true,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[exit]",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ 1 ],
      "successors" : [ 3 ],
      "in-vars" : [ 0, 3, 1 ],
      "exit" : false,
      "out-vars" : [ 3, 1, 0 ],
      "decl-vars" : [ ],
      "line-start" : 925,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 2,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "n",
            "variable" : 1
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "n",
              "variable" : 1
            }
          }, {
            "go-type" : 2,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "8"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 14,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "alignUp"
            }
          },
          "go-type" : 2,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 1 ],
      "line-end" : 925,
      "code" : "n = alignUp(n, sys.PtrSize)",
      "entry" : false,
      "use-vars" : [ 1 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 4, 12 ],
      "in-vars" : [ 1, 0, 3 ],
      "exit" : false,
      "out-vars" : [ 0, 3, 1 ],
      "decl-vars" : [ ],
      "line-start" : 926,
      "ast" : {
        "condition" : {
          "go-type" : 17,
          "kind" : "expression",
          "left" : {
            "go-type" : 17,
            "kind" : "expression",
            "left" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "head",
                "variable" : 4
              },
              "go-type" : 3,
              "kind" : "expression",
              "target" : {
                "go-type" : 0,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "a",
                  "variable" : 0
                }
              },
              "type" : "selector"
            },
            "operator" : "==",
            "right" : {
              "go-type" : 3,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "0"
              }
            },
            "type" : "binary"
          },
          "operator" : "||",
          "right" : {
            "go-type" : 17,
            "kind" : "expression",
            "left" : {
              "go-type" : 2,
              "kind" : "expression",
              "left" : {
                "field" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "off",
                  "variable" : 5
                },
                "go-type" : 2,
                "kind" : "expression",
                "target" : {
                  "go-type" : 0,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "a",
                    "variable" : 0
                  }
                },
                "type" : "selector"
              },
              "operator" : "+",
              "right" : {
                "go-type" : 2,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "n",
                  "variable" : 1
                }
              },
              "type" : "binary"
            },
            "operator" : ">",
            "right" : {
              "coerced-to" : {
                "go-type" : 2,
                "kind" : "type",
                "type" : "identifier",
                "value" : {
                  "go-type" : 2,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "uintptr"
                }
              },
              "go-type" : 2,
              "kind" : "expression",
              "target" : {
                "arguments" : [ {
                  "field" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "data",
                    "variable" : 6
                  },
                  "go-type" : 21,
                  "kind" : "expression",
                  "target" : {
                    "arguments" : [ ],
                    "ellipsis" : false,
                    "function" : {
                      "field" : {
                        "ident-kind" : "Func",
                        "kind" : "ident",
                        "value" : "ptr"
                      },
                      "go-type" : 27,
                      "kind" : "expression",
                      "target" : {
                        "field" : {
                          "ident-kind" : "Var",
                          "kind" : "ident",
                          "value" : "head",
                          "variable" : 4
                        },
                        "go-type" : 3,
                        "kind" : "expression",
                        "target" : {
                          "go-type" : 0,
                          "kind" : "expression",
                          "type" : "identifier",
                          "value" : {
                            "ident-kind" : "Var",
                            "kind" : "ident",
                            "value" : "a",
                            "variable" : 0
                          }
                        },
                        "type" : "selector"
                      },
                      "type" : "selector"
                    },
                    "go-type" : 24,
                    "kind" : "expression",
                    "type" : "call"
                  },
                  "type" : "selector"
                } ],
                "ellipsis" : false,
                "function" : {
                  "go-type" : 19,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Builtin",
                    "kind" : "ident",
                    "value" : "len"
                  }
                },
                "go-type" : 18,
                "kind" : "expression",
                "type" : "call"
              },
              "type" : "cast"
            },
            "type" : "binary"
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 937,
      "code" : "if a.head == 0 || a.off+n > uintptr(len(a.head.ptr().data)) {\n\tif n > uintptr(len(a.head.ptr().data)) {\n\t\tthrow(\"trace: alloc too large\")\n\t}\n\tblock := (*traceAllocBlock)(sysAlloc(unsafe.Sizeof(traceAllocBlock{}), &memstats.other_sys))\n\tif block == nil {\n\t\tthrow(\"trace: out of memory\")\n\t}\n\tblock.next.set(a.head.ptr())\n\ta.head.set(block)\n\ta.off = 0\n}",
      "entry" : false,
      "use-vars" : [ 0, 1 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 5, 6 ],
      "in-vars" : [ 1, 0, 3 ],
      "exit" : false,
      "out-vars" : [ 0, 3, 1 ],
      "decl-vars" : [ ],
      "line-start" : 927,
      "ast" : {
        "condition" : {
          "go-type" : 17,
          "kind" : "expression",
          "left" : {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "n",
              "variable" : 1
            }
          },
          "operator" : ">",
          "right" : {
            "coerced-to" : {
              "go-type" : 2,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 2,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "uintptr"
              }
            },
            "go-type" : 2,
            "kind" : "expression",
            "target" : {
              "arguments" : [ {
                "field" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "data",
                  "variable" : 6
                },
                "go-type" : 21,
                "kind" : "expression",
                "target" : {
                  "arguments" : [ ],
                  "ellipsis" : false,
                  "function" : {
                    "field" : {
                      "ident-kind" : "Func",
                      "kind" : "ident",
                      "value" : "ptr"
                    },
                    "go-type" : 27,
                    "kind" : "expression",
                    "target" : {
                      "field" : {
                        "ident-kind" : "Var",
                        "kind" : "ident",
                        "value" : "head",
                        "variable" : 4
                      },
                      "go-type" : 3,
                      "kind" : "expression",
                      "target" : {
                        "go-type" : 0,
                        "kind" : "expression",
                        "type" : "identifier",
                        "value" : {
                          "ident-kind" : "Var",
                          "kind" : "ident",
                          "value" : "a",
                          "variable" : 0
                        }
                      },
                      "type" : "selector"
                    },
                    "type" : "selector"
                  },
                  "go-type" : 24,
                  "kind" : "expression",
                  "type" : "call"
                },
                "type" : "selector"
              } ],
              "ellipsis" : false,
              "function" : {
                "go-type" : 19,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Builtin",
                  "kind" : "ident",
                  "value" : "len"
                }
              },
              "go-type" : 18,
              "kind" : "expression",
              "type" : "call"
            },
            "type" : "cast"
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 929,
      "code" : "if n > uintptr(len(a.head.ptr().data)) {\n\tthrow(\"trace: alloc too large\")\n}",
      "entry" : false,
      "use-vars" : [ 0, 1 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 6 ],
      "in-vars" : [ 0, 3, 1 ],
      "exit" : false,
      "out-vars" : [ 0, 3, 1 ],
      "decl-vars" : [ ],
      "line-start" : 928,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 32,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "trace: alloc too large"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 30,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "throw"
            }
          },
          "go-type" : 28,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 928,
      "code" : "throw(\"trace: alloc too large\")",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 7 ],
      "in-vars" : [ 0, 3, 1 ],
      "exit" : false,
      "out-vars" : [ 8, 0, 1 ],
      "decl-vars" : [ 8 ],
      "line-start" : 930,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "block"
          }
        } ],
        "right" : [ {
          "coerced-to" : {
            "contained" : {
              "go-type" : 25,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 25,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "traceAllocBlock"
              }
            },
            "go-type" : 24,
            "kind" : "type",
            "type" : "pointer"
          },
          "go-type" : 24,
          "kind" : "expression",
          "target" : {
            "arguments" : [ {
              "go-type" : 2,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "65536"
              }
            }, {
              "go-type" : 35,
              "kind" : "expression",
              "operator" : "&",
              "target" : {
                "field" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "other_sys",
                  "variable" : 7
                },
                "go-type" : 7,
                "kind" : "expression",
                "target" : {
                  "go-type" : 5,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "memstats",
                    "variable" : 3
                  }
                },
                "type" : "selector"
              },
              "type" : "unary"
            } ],
            "ellipsis" : false,
            "function" : {
              "go-type" : 33,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Func",
                "kind" : "ident",
                "value" : "sysAlloc"
              }
            },
            "go-type" : 4,
            "kind" : "expression",
            "type" : "call"
          },
          "type" : "cast"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 930,
      "code" : "block := (*traceAllocBlock)(sysAlloc(unsafe.Sizeof(traceAllocBlock{}), &memstats.other_sys))",
      "entry" : false,
      "use-vars" : [ 3 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 8, 9 ],
      "in-vars" : [ 1, 8, 0 ],
      "exit" : false,
      "out-vars" : [ 8, 0, 1 ],
      "decl-vars" : [ ],
      "line-start" : 931,
      "ast" : {
        "condition" : {
          "go-type" : 17,
          "kind" : "expression",
          "left" : {
            "go-type" : 24,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "block",
              "variable" : 8
            }
          },
          "operator" : "==",
          "right" : {
            "go-type" : 36,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Nil",
              "kind" : "ident",
              "value" : "nil"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 933,
      "code" : "if block == nil {\n\tthrow(\"trace: out of memory\")\n}",
      "entry" : false,
      "use-vars" : [ 8 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 9 ],
      "in-vars" : [ 8, 0, 1 ],
      "exit" : false,
      "out-vars" : [ 8, 0, 1 ],
      "decl-vars" : [ ],
      "line-start" : 932,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 32,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "trace: out of memory"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 30,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "throw"
            }
          },
          "go-type" : 28,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 932,
      "code" : "throw(\"trace: out of memory\")",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 10 ],
      "in-vars" : [ 8, 0, 1 ],
      "exit" : false,
      "out-vars" : [ 8, 0, 1 ],
      "decl-vars" : [ ],
      "line-start" : 934,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "arguments" : [ ],
            "ellipsis" : false,
            "function" : {
              "field" : {
                "ident-kind" : "Func",
                "kind" : "ident",
                "value" : "ptr"
              },
              "go-type" : 27,
              "kind" : "expression",
              "target" : {
                "field" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "head",
                  "variable" : 4
                },
                "go-type" : 3,
                "kind" : "expression",
                "target" : {
                  "go-type" : 0,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "a",
                    "variable" : 0
                  }
                },
                "type" : "selector"
              },
              "type" : "selector"
            },
            "go-type" : 24,
            "kind" : "expression",
            "type" : "call"
          } ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "set"
            },
            "go-type" : 37,
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "next",
                "variable" : 9
              },
              "go-type" : 3,
              "kind" : "expression",
              "target" : {
                "go-type" : 24,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "block",
                  "variable" : 8
                }
              },
              "type" : "selector"
            },
            "type" : "selector"
          },
          "go-type" : 28,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 934,
      "code" : "block.next.set(a.head.ptr())",
      "entry" : false,
      "use-vars" : [ 8, 0 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 11 ],
      "in-vars" : [ 8, 0, 1 ],
      "exit" : false,
      "out-vars" : [ 0, 1 ],
      "decl-vars" : [ ],
      "line-start" : 935,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 24,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "block",
              "variable" : 8
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "set"
            },
            "go-type" : 37,
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "head",
                "variable" : 4
              },
              "go-type" : 3,
              "kind" : "expression",
              "target" : {
                "go-type" : 0,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "a",
                  "variable" : 0
                }
              },
              "type" : "selector"
            },
            "type" : "selector"
          },
          "go-type" : 28,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 935,
      "code" : "a.head.set(block)",
      "entry" : false,
      "use-vars" : [ 0, 8 ]
    }, {
      "update-vars" : [ 0 ],
      "successors" : [ 12 ],
      "in-vars" : [ 1, 0 ],
      "exit" : false,
      "out-vars" : [ 0, 1 ],
      "decl-vars" : [ ],
      "line-start" : 936,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "off",
            "variable" : 5
          },
          "go-type" : 2,
          "kind" : "expression",
          "target" : {
            "go-type" : 0,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "a",
              "variable" : 0
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "go-type" : 2,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "0"
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 936,
      "code" : "a.off = 0",
      "entry" : false,
      "use-vars" : [ 0 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 13 ],
      "in-vars" : [ 1, 0 ],
      "exit" : false,
      "out-vars" : [ 0, 1, 10 ],
      "decl-vars" : [ 10 ],
      "line-start" : 938,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "p"
          }
        } ],
        "right" : [ {
          "go-type" : 39,
          "kind" : "expression",
          "operator" : "&",
          "target" : {
            "go-type" : 22,
            "index" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "off",
                "variable" : 5
              },
              "go-type" : 2,
              "kind" : "expression",
              "target" : {
                "go-type" : 0,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "a",
                  "variable" : 0
                }
              },
              "type" : "selector"
            },
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "data",
                "variable" : 6
              },
              "go-type" : 21,
              "kind" : "expression",
              "target" : {
                "arguments" : [ ],
                "ellipsis" : false,
                "function" : {
                  "field" : {
                    "ident-kind" : "Func",
                    "kind" : "ident",
                    "value" : "ptr"
                  },
                  "go-type" : 27,
                  "kind" : "expression",
                  "target" : {
                    "field" : {
                      "ident-kind" : "Var",
                      "kind" : "ident",
                      "value" : "head",
                      "variable" : 4
                    },
                    "go-type" : 3,
                    "kind" : "expression",
                    "target" : {
                      "go-type" : 0,
                      "kind" : "expression",
                      "type" : "identifier",
                      "value" : {
                        "ident-kind" : "Var",
                        "kind" : "ident",
                        "value" : "a",
                        "variable" : 0
                      }
                    },
                    "type" : "selector"
                  },
                  "type" : "selector"
                },
                "go-type" : 24,
                "kind" : "expression",
                "type" : "call"
              },
              "type" : "selector"
            },
            "type" : "index"
          },
          "type" : "unary"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 938,
      "code" : "p := &a.head.ptr().data[a.off]",
      "entry" : false,
      "use-vars" : [ 0 ]
    }, {
      "update-vars" : [ 0 ],
      "successors" : [ 14 ],
      "in-vars" : [ 10, 0, 1 ],
      "exit" : false,
      "out-vars" : [ 10 ],
      "decl-vars" : [ ],
      "line-start" : 939,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "off",
            "variable" : 5
          },
          "go-type" : 2,
          "kind" : "expression",
          "target" : {
            "go-type" : 0,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "a",
              "variable" : 0
            }
          },
          "type" : "selector"
        } ],
        "operator" : "+",
        "right" : [ {
          "go-type" : 2,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "n",
            "variable" : 1
          }
        } ],
        "type" : "assign-operator"
      },
      "assign-vars" : [ ],
      "line-end" : 939,
      "code" : "a.off += n",
      "entry" : false,
      "use-vars" : [ 1, 0 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 10 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 940,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "coerced-to" : {
            "go-type" : 4,
            "kind" : "type",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 1,
              "value" : "unsafe"
            },
            "type" : "identifier",
            "value" : {
              "go-type" : 4,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "Pointer"
            }
          },
          "go-type" : 4,
          "kind" : "expression",
          "target" : {
            "go-type" : 39,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "p",
              "variable" : 10
            }
          },
          "type" : "cast"
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 940,
      "code" : "return unsafe.Pointer(p)",
      "entry" : false,
      "use-vars" : [ 10 ]
    } ],
    "code" : "// alloc allocates n-byte block.\nfunc (a *traceAlloc) alloc(n uintptr) unsafe.Pointer {\n\tn = alignUp(n, sys.PtrSize)\n\tif a.head == 0 || a.off+n > uintptr(len(a.head.ptr().data)) {\n\t\tif n > uintptr(len(a.head.ptr().data)) {\n\t\t\tthrow(\"trace: alloc too large\")\n\t\t}\n\t\tblock := (*traceAllocBlock)(sysAlloc(unsafe.Sizeof(traceAllocBlock{}), &memstats.other_sys))\n\t\tif block == nil {\n\t\t\tthrow(\"trace: out of memory\")\n\t\t}\n\t\tblock.next.set(a.head.ptr())\n\t\ta.head.set(block)\n\t\ta.off = 0\n\t}\n\tp := &a.head.ptr().data[a.off]\n\ta.off += n\n\treturn unsafe.Pointer(p)\n}",
    "defines" : [ 0 ],
    "functions" : [ {
      "name" : "alloc",
      "package" : 0,
      "type" : 0,
      "exported" : false
    }, {
      "name" : "alignUp",
      "package" : 0,
      "type" : 14,
      "exported" : false
    }, {
      "name" : "ptr",
      "package" : 0,
      "type" : 27,
      "exported" : false
    }, {
      "name" : "throw",
      "package" : 0,
      "type" : 30,
      "exported" : false
    }, {
      "name" : "sysAlloc",
      "package" : 0,
      "type" : 33,
      "exported" : false
    }, {
      "name" : "set",
      "package" : 0,
      "type" : 37,
      "exported" : false
    } ],
    "line-end" : 941,
    "line-start" : 924,
    "names" : [ "alloc" ],
    "package" : 0,
    "packages" : [ {
      "name" : "runtime",
      "path" : "runtime"
    }, {
      "name" : "unsafe",
      "path" : "unsafe"
    } ],
    "params" : [ 1 ],
    "receivers" : [ 0 ],
    "results" : [ 2 ],
    "type" : "function",
    "types" : [ {
      "name" : "func(n uintptr) unsafe.Pointer",
      "params" : 1,
      "recv" : 0,
      "results" : 3,
      "type" : "Signature",
      "underlying" : 0,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "n",
        "type" : 2
      } ],
      "name" : "(n uintptr)",
      "type" : "Tuple",
      "underlying" : 1
    }, {
      "name" : "uintptr",
      "type" : "Basic",
      "underlying" : 2
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 4
      } ],
      "name" : "(unsafe.Pointer)",
      "type" : "Tuple",
      "underlying" : 3
    }, {
      "local-name" : "Pointer",
      "name" : "unsafe.Pointer",
      "package" : 1,
      "type" : "Basic",
      "underlying" : 4
    }, {
      "local-name" : "mstats",
      "name" : "runtime.mstats",
      "package" : 0,
      "type" : "Named",
      "underlying" : 6
    }, {
      "fields" : [ {
        "name" : "alloc",
        "type" : 7
      }, {
        "name" : "total_alloc",
        "type" : 7
      }, {
        "name" : "sys",
        "type" : 7
      }, {
        "name" : "nlookup",
        "type" : 7
      }, {
        "name" : "nmalloc",
        "type" : 7
      }, {
        "name" : "nfree",
        "type" : 7
      }, {
        "name" : "heap_alloc",
        "type" : 7
      }, {
        "name" : "heap_sys",
        "type" : 7
      }, {
        "name" : "heap_idle",
        "type" : 7
      }, {
        "name" : "heap_inuse",
        "type" : 7
      }, {
        "name" : "heap_released",
        "type" : 7
      }, {
        "name" : "heap_objects",
        "type" : 7
      }, {
        "name" : "stacks_inuse",
        "type" : 7
      }, {
        "name" : "stacks_sys",
        "type" : 7
      }, {
        "name" : "mspan_inuse",
        "type" : 7
      }, {
        "name" : "mspan_sys",
        "type" : 7
      }, {
        "name" : "mcache_inuse",
        "type" : 7
      }, {
        "name" : "mcache_sys",
        "type" : 7
      }, {
        "name" : "buckhash_sys",
        "type" : 7
      }, {
        "name" : "gc_sys",
        "type" : 7
      }, {
        "name" : "other_sys",
        "type" : 7
      }, {
        "name" : "next_gc",
        "type" : 7
      }, {
        "name" : "last_gc_unix",
        "type" : 7
      }, {
        "name" : "pause_total_ns",
        "type" : 7
      }, {
        "name" : "pause_ns",
        "type" : 8
      }, {
        "name" : "pause_end",
        "type" : 8
      }, {
        "name" : "numgc",
        "type" : 9
      }, {
        "name" : "numforcedgc",
        "type" : 9
      }, {
        "name" : "gc_cpu_fraction",
        "type" : 10
      }, {
        "name" : "enablegc",
        "type" : 11
      }, {
        "name" : "debuggc",
        "type" : 11
      }, {
        "name" : "by_size",
        "type" : 12
      }, {
        "name" : "last_gc_nanotime",
        "type" : 7
      }, {
        "name" : "tinyallocs",
        "type" : 7
      }, {
        "name" : "last_next_gc",
        "type" : 7
      }, {
        "name" : "last_heap_inuse",
        "type" : 7
      }, {
        "name" : "triggerRatio",
        "type" : 10
      }, {
        "name" : "gc_trigger",
        "type" : 7
      }, {
        "name" : "heap_live",
        "type" : 7
      }, {
        "name" : "heap_scan",
        "type" : 7
      }, {
        "name" : "heap_marked",
        "type" : 7
      } ],
      "name" : "struct{alloc uint64; total_alloc uint64; sys uint64; nlookup uint64; nmalloc uint64; nfree uint64; heap_alloc uint64; heap_sys uint64; heap_idle uint64; heap_inuse uint64; heap_released uint64; heap_objects uint64; stacks_inuse uint64; stacks_sys uint64; mspan_inuse uint64; mspan_sys uint64; mcache_inuse uint64; mcache_sys uint64; buckhash_sys uint64; gc_sys uint64; other_sys uint64; next_gc uint64; last_gc_unix uint64; pause_total_ns uint64; pause_ns [256]uint64; pause_end [256]uint64; numgc uint32; numforcedgc uint32; gc_cpu_fraction float64; enablegc bool; debuggc bool; by_size [67]struct{size uint32; nmalloc uint64; nfree uint64}; last_gc_nanotime uint64; tinyallocs uint64; last_next_gc uint64; last_heap_inuse uint64; triggerRatio float64; gc_trigger uint64; heap_live uint64; heap_scan uint64; heap_marked uint64}",
      "type" : "Struct",
      "underlying" : 6
    }, {
      "name" : "uint64",
      "type" : "Basic",
      "underlying" : 7
    }, {
      "elem" : 7,
      "name" : "[256]uint64",
      "type" : "Array",
      "underlying" : 8
    }, {
      "name" : "uint32",
      "type" : "Basic",
      "underlying" : 9
    }, {
      "name" : "float64",
      "type" : "Basic",
      "underlying" : 10
    }, {
      "name" : "bool",
      "type" : "Basic",
      "underlying" : 11
    }, {
      "elem" : 13,
      "name" : "[67]struct{size uint32; nmalloc uint64; nfree uint64}",
      "type" : "Array",
      "underlying" : 12
    }, {
      "fields" : [ {
        "name" : "size",
        "type" : 9
      }, {
        "name" : "nmalloc",
        "type" : 7
      }, {
        "name" : "nfree",
        "type" : 7
      } ],
      "name" : "struct{size uint32; nmalloc uint64; nfree uint64}",
      "type" : "Struct",
      "underlying" : 13
    }, {
      "name" : "func(n uintptr, a uintptr) uintptr",
      "params" : 15,
      "recv" : -1,
      "results" : 16,
      "type" : "Signature",
      "underlying" : 14,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "n",
        "type" : 2
      }, {
        "name" : "a",
        "type" : 2
      } ],
      "name" : "(n uintptr, a uintptr)",
      "type" : "Tuple",
      "underlying" : 15
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 2
      } ],
      "name" : "(uintptr)",
      "type" : "Tuple",
      "underlying" : 16
    }, {
      "name" : "untyped bool",
      "type" : "Basic",
      "underlying" : 17
    }, {
      "name" : "int",
      "type" : "Basic",
      "underlying" : 18
    }, {
      "name" : "func([65528]byte) int",
      "params" : 20,
      "recv" : -1,
      "results" : 23,
      "type" : "Signature",
      "underlying" : 19,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 21
      } ],
      "name" : "([65528]byte)",
      "type" : "Tuple",
      "underlying" : 20
    }, {
      "elem" : 22,
      "name" : "[65528]byte",
      "type" : "Array",
      "underlying" : 21
    }, {
      "name" : "byte",
      "type" : "Basic",
      "underlying" : 22
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 18
      } ],
      "name" : "(int)",
      "type" : "Tuple",
      "underlying" : 23
    }, {
      "elem" : 25,
      "name" : "*runtime.traceAllocBlock",
      "type" : "Pointer",
      "underlying" : 24
    }, {
      "local-name" : "traceAllocBlock",
      "name" : "runtime.traceAllocBlock",
      "package" : 0,
      "type" : "Named",
      "underlying" : 26
    }, {
      "fields" : [ {
        "name" : "next",
        "type" : 3
      }, {
        "name" : "data",
        "type" : 21
      } ],
      "name" : "struct{next runtime.traceAllocBlockPtr; data [65528]byte}",
      "type" : "Struct",
      "underlying" : 26
    }, {
      "name" : "func() *runtime.traceAllocBlock",
      "params" : 28,
      "recv" : -1,
      "results" : 29,
      "type" : "Signature",
      "underlying" : 27,
      "variadic" : false
    }, {
      "fields" : [ ],
      "name" : "()",
      "type" : "Tuple",
      "underlying" : 28
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 24
      } ],
      "name" : "(*runtime.traceAllocBlock)",
      "type" : "Tuple",
      "underlying" : 29
    }, {
      "name" : "func(s string)",
      "params" : 31,
      "recv" : -1,
      "results" : 28,
      "type" : "Signature",
      "underlying" : 30,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "s",
        "type" : 32
      } ],
      "name" : "(s string)",
      "type" : "Tuple",
      "underlying" : 31
    }, {
      "name" : "string",
      "type" : "Basic",
      "underlying" : 32
    }, {
      "name" : "func(n uintptr, sysStat *uint64) unsafe.Pointer",
      "params" : 34,
      "recv" : -1,
      "results" : 3,
      "type" : "Signature",
      "underlying" : 33,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "n",
        "type" : 2
      }, {
        "name" : "sysStat",
        "type" : 35
      } ],
      "name" : "(n uintptr, sysStat *uint64)",
      "type" : "Tuple",
      "underlying" : 34
    }, {
      "elem" : 7,
      "name" : "*uint64",
      "type" : "Pointer",
      "underlying" : 35
    }, {
      "name" : "untyped nil",
      "type" : "Basic",
      "underlying" : 36
    }, {
      "name" : "func(x *runtime.traceAllocBlock)",
      "params" : 38,
      "recv" : -1,
      "results" : 28,
      "type" : "Signature",
      "underlying" : 37,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "x",
        "type" : 24
      } ],
      "name" : "(x *runtime.traceAllocBlock)",
      "type" : "Tuple",
      "underlying" : 38
    }, {
      "elem" : 22,
      "name" : "*byte",
      "type" : "Pointer",
      "underlying" : 39
    } ],
    "variables" : [ {
      "name" : "a",
      "package" : 0,
      "type" : 0,
      "exported" : false
    }, {
      "name" : "n",
      "package" : 0,
      "type" : 2,
      "exported" : false
    }, {
      "name" : "[res0]",
      "package" : 0,
      "type" : 4,
      "exported" : false
    }, {
      "name" : "memstats",
      "package" : 0,
      "type" : 5,
      "exported" : false
    }, {
      "name" : "head",
      "package" : 0,
      "type" : 3,
      "exported" : false
    }, {
      "name" : "off",
      "package" : 0,
      "type" : 2,
      "exported" : false
    }, {
      "name" : "data",
      "package" : 0,
      "type" : 21,
      "exported" : false
    }, {
      "name" : "other_sys",
      "package" : 0,
      "type" : 7,
      "exported" : false
    }, {
      "name" : "block",
      "package" : 0,
      "type" : 24,
      "exported" : false
    }, {
      "name" : "next",
      "package" : 0,
      "type" : 3,
      "exported" : false
    }, {
      "name" : "p",
      "package" : 0,
      "type" : 39,
      "exported" : false
    } ]
  },
  "go-version" : "1.14.3"
}