{
  "usage" : {
    "file" : "stack.go",
    "label1" : "memory-access",
    "label2" : "layout",
    "line" : "351",
    "module" : "std",
    "pkg" : "runtime",
    "project" : "kubernetes/kubernetes",
    "snippet" : "var v unsafe.Pointer",
    "version" : "std"
  },
  "cfg" : {
    "blocks" : [ {
      "update-vars" : [ ],
      "successors" : [ 2 ],
      "in-vars" : [ 2, 3, 4, 5, 6, 0, 7 ],
      "exit" : false,
      "out-vars" : [ 2, 3, 4, 5, 6, 0, 7 ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[entry]",
      "entry" : true,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ ],
      "in-vars" : [ ],
      "exit" : true,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[exit]",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 3 ],
      "in-vars" : [ 3, 4, 5, 6, 0, 7, 2 ],
      "exit" : false,
      "out-vars" : [ 4, 5, 6, 0, 7, 2, 3, 8 ],
      "decl-vars" : [ 8 ],
      "line-start" : 328,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "thisg"
          }
        } ],
        "right" : [ {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 192,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 1,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "getg"
            }
          },
          "go-type" : 124,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 328,
      "code" : "thisg := getg()",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 4, 5 ],
      "in-vars" : [ 3, 8, 4, 5, 6, 0, 7, 2 ],
      "exit" : false,
      "out-vars" : [ 7, 2, 3, 8, 4, 5, 6, 0 ],
      "decl-vars" : [ ],
      "line-start" : 329,
      "ast" : {
        "condition" : {
          "go-type" : 194,
          "kind" : "expression",
          "left" : {
            "go-type" : 124,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "thisg",
              "variable" : 8
            }
          },
          "operator" : "!=",
          "right" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "g0",
              "variable" : 10
            },
            "go-type" : 124,
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "m",
                "variable" : 9
              },
              "go-type" : 134,
              "kind" : "expression",
              "target" : {
                "go-type" : 124,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "thisg",
                  "variable" : 8
                }
              },
              "type" : "selector"
            },
            "type" : "selector"
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 331,
      "code" : "if thisg != thisg.m.g0 {\n\tthrow(\"stackalloc not on scheduler stack\")\n}",
      "entry" : false,
      "use-vars" : [ 8 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 5 ],
      "in-vars" : [ 2, 3, 8, 4, 5, 6, 0, 7 ],
      "exit" : false,
      "out-vars" : [ 0, 7, 2, 3, 8, 4, 5, 6 ],
      "decl-vars" : [ ],
      "line-start" : 330,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 149,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "stackalloc not on scheduler stack"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 195,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 2,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "throw"
            }
          },
          "go-type" : 96,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 330,
      "code" : "throw(\"stackalloc not on scheduler stack\")",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 6, 7 ],
      "in-vars" : [ 4, 5, 6, 0, 7, 2, 3, 8 ],
      "exit" : false,
      "out-vars" : [ 2, 3, 8, 4, 5, 6, 0, 7 ],
      "decl-vars" : [ ],
      "line-start" : 332,
      "ast" : {
        "condition" : {
          "go-type" : 194,
          "kind" : "expression",
          "left" : {
            "go-type" : 2,
            "kind" : "expression",
            "left" : {
              "go-type" : 2,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "n",
                "variable" : 0
              }
            },
            "operator" : "&",
            "right" : {
              "go-type" : 2,
              "kind" : "expression",
              "target" : {
                "go-type" : 2,
                "kind" : "expression",
                "left" : {
                  "go-type" : 2,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "n",
                    "variable" : 0
                  }
                },
                "operator" : "-",
                "right" : {
                  "go-type" : 2,
                  "kind" : "constant",
                  "value" : {
                    "type" : "INT",
                    "value" : "1"
                  }
                },
                "type" : "binary"
              },
              "type" : "paren"
            },
            "type" : "binary"
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 2,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 334,
      "code" : "if n&(n-1) != 0 {\n\tthrow(\"stack size not a power of 2\")\n}",
      "entry" : false,
      "use-vars" : [ 0 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 7 ],
      "in-vars" : [ 3, 8, 4, 5, 6, 0, 7, 2 ],
      "exit" : false,
      "out-vars" : [ 2, 3, 8, 4, 5, 6, 0, 7 ],
      "decl-vars" : [ ],
      "line-start" : 333,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 149,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "stack size not a power of 2"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 195,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 2,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "throw"
            }
          },
          "go-type" : 96,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 333,
      "code" : "throw(\"stack size not a power of 2\")",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 8, 9 ],
      "in-vars" : [ 7, 2, 3, 8, 4, 5, 6, 0 ],
      "exit" : false,
      "out-vars" : [ 0, 7, 2, 3, 8, 4, 5, 6 ],
      "decl-vars" : [ ],
      "line-start" : 335,
      "ast" : {
        "condition" : {
          "go-type" : 194,
          "kind" : "constant",
          "value" : {
            "type" : "BOOL",
            "value" : "false"
          }
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 337,
      "code" : "if stackDebug >= 1 {\n\tprint(\"stackalloc \", n, \"\\n\")\n}",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 9 ],
      "in-vars" : [ 4, 5, 6, 0, 7, 2, 3, 8 ],
      "exit" : false,
      "out-vars" : [ 2, 3, 8, 4, 5, 6, 0, 7 ],
      "decl-vars" : [ ],
      "line-start" : 336,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 149,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "stackalloc "
            }
          }, {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "n",
              "variable" : 0
            }
          }, {
            "go-type" : 149,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "\n"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 197,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Builtin",
              "kind" : "ident",
              "value" : "print"
            }
          },
          "go-type" : 96,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 336,
      "code" : "print(\"stackalloc \", n, \"\\n\")",
      "entry" : false,
      "use-vars" : [ 0 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 10, 15 ],
      "in-vars" : [ 6, 0, 7, 2, 3, 8, 4, 5 ],
      "exit" : false,
      "out-vars" : [ 7, 2, 8, 4, 5, 6, 0 ],
      "decl-vars" : [ ],
      "line-start" : 339,
      "ast" : {
        "condition" : {
          "go-type" : 194,
          "kind" : "expression",
          "left" : {
            "go-type" : 194,
            "kind" : "expression",
            "left" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "efence",
                "variable" : 11
              },
              "go-type" : 32,
              "kind" : "expression",
              "target" : {
                "go-type" : 31,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "debug",
                  "variable" : 3
                }
              },
              "type" : "selector"
            },
            "operator" : "!=",
            "right" : {
              "go-type" : 32,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "0"
              }
            },
            "type" : "binary"
          },
          "operator" : "||",
          "right" : {
            "go-type" : 194,
            "kind" : "constant",
            "value" : {
              "type" : "BOOL",
              "value" : "false"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 346,
      "code" : "if debug.efence != 0 || stackFromSystem != 0 {\n\tn = uint32(alignUp(uintptr(n), physPageSize))\n\tv := sysAlloc(uintptr(n), &memstats.stacks_sys)\n\tif v == nil {\n\t\tthrow(\"out of memory (stackalloc)\")\n\t}\n\treturn stack{uintptr(v), uintptr(v) + uintptr(n)}\n}",
      "entry" : false,
      "use-vars" : [ 3 ]
    }, {
      "update-vars" : [ 0 ],
      "successors" : [ 11 ],
      "in-vars" : [ 0, 7, 6 ],
      "exit" : false,
      "out-vars" : [ 7, 0 ],
      "decl-vars" : [ ],
      "line-start" : 340,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 2,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "n",
            "variable" : 0
          }
        } ],
        "right" : [ {
          "coerced-to" : {
            "go-type" : 2,
            "kind" : "type",
            "type" : "identifier",
            "value" : {
              "go-type" : 2,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "uint32"
            }
          },
          "go-type" : 2,
          "kind" : "expression",
          "target" : {
            "arguments" : [ {
              "coerced-to" : {
                "go-type" : 6,
                "kind" : "type",
                "type" : "identifier",
                "value" : {
                  "go-type" : 6,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "uintptr"
                }
              },
              "go-type" : 6,
              "kind" : "expression",
              "target" : {
                "go-type" : 2,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "n",
                  "variable" : 0
                }
              },
              "type" : "cast"
            }, {
              "go-type" : 6,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "physPageSize",
                "variable" : 6
              }
            } ],
            "ellipsis" : false,
            "function" : {
              "go-type" : 199,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "function" : 3,
                "ident-kind" : "Func",
                "kind" : "ident",
                "value" : "alignUp"
              }
            },
            "go-type" : 6,
            "kind" : "expression",
            "type" : "call"
          },
          "type" : "cast"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 0 ],
      "line-end" : 340,
      "code" : "n = uint32(alignUp(uintptr(n), physPageSize))",
      "entry" : false,
      "use-vars" : [ 6, 0 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 12 ],
      "in-vars" : [ 0, 7 ],
      "exit" : false,
      "out-vars" : [ 13, 0 ],
      "decl-vars" : [ 13 ],
      "line-start" : 341,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "v"
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "coerced-to" : {
              "go-type" : 6,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 6,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "uintptr"
              }
            },
            "go-type" : 6,
            "kind" : "expression",
            "target" : {
              "go-type" : 2,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "n",
                "variable" : 0
              }
            },
            "type" : "cast"
          }, {
            "go-type" : 60,
            "kind" : "expression",
            "operator" : "&",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "stacks_sys",
                "variable" : 12
              },
              "go-type" : 18,
              "kind" : "expression",
              "target" : {
                "go-type" : 119,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "memstats",
                  "variable" : 7
                }
              },
              "type" : "selector"
            },
            "type" : "unary"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 202,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 4,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "sysAlloc"
            }
          },
          "go-type" : 67,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 341,
      "code" : "v := sysAlloc(uintptr(n), &memstats.stacks_sys)",
      "entry" : false,
      "use-vars" : [ 0, 7 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 13, 14 ],
      "in-vars" : [ 13, 0 ],
      "exit" : false,
      "out-vars" : [ 13, 0 ],
      "decl-vars" : [ ],
      "line-start" : 342,
      "ast" : {
        "condition" : {
          "go-type" : 194,
          "kind" : "expression",
          "left" : {
            "go-type" : 67,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "v",
              "variable" : 13
            }
          },
          "operator" : "==",
          "right" : {
            "go-type" : 67,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Nil",
              "kind" : "ident",
              "value" : "nil"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 344,
      "code" : "if v == nil {\n\tthrow(\"out of memory (stackalloc)\")\n}",
      "entry" : false,
      "use-vars" : [ 13 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 14 ],
      "in-vars" : [ 13, 0 ],
      "exit" : false,
      "out-vars" : [ 13, 0 ],
      "decl-vars" : [ ],
      "line-start" : 343,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 149,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "out of memory (stackalloc)"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 195,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 2,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "throw"
            }
          },
          "go-type" : 96,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 343,
      "code" : "throw(\"out of memory (stackalloc)\")",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 13, 0 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 345,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "declared" : {
            "go-type" : 4,
            "kind" : "type",
            "type" : "identifier",
            "value" : {
              "go-type" : 4,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "stack"
            }
          },
          "go-type" : 4,
          "kind" : "literal",
          "type" : "composite",
          "values" : [ {
            "coerced-to" : {
              "go-type" : 6,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 6,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "uintptr"
              }
            },
            "go-type" : 6,
            "kind" : "expression",
            "target" : {
              "go-type" : 67,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "v",
                "variable" : 13
              }
            },
            "type" : "cast"
          }, {
            "go-type" : 6,
            "kind" : "expression",
            "left" : {
              "coerced-to" : {
                "go-type" : 6,
                "kind" : "type",
                "type" : "identifier",
                "value" : {
                  "go-type" : 6,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "uintptr"
                }
              },
              "go-type" : 6,
              "kind" : "expression",
              "target" : {
                "go-type" : 67,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "v",
                  "variable" : 13
                }
              },
              "type" : "cast"
            },
            "operator" : "+",
            "right" : {
              "coerced-to" : {
                "go-type" : 6,
                "kind" : "type",
                "type" : "identifier",
                "value" : {
                  "go-type" : 6,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "uintptr"
                }
              },
              "go-type" : 6,
              "kind" : "expression",
              "target" : {
                "go-type" : 2,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "n",
                  "variable" : 0
                }
              },
              "type" : "cast"
            },
            "type" : "binary"
          } ]
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 345,
      "code" : "return stack{uintptr(v), uintptr(v) + uintptr(n)}",
      "entry" : false,
      "use-vars" : [ 13, 0 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 16 ],
      "in-vars" : [ 7, 2, 8, 4, 5, 0 ],
      "exit" : false,
      "out-vars" : [ 0, 7, 2, 8, 4, 5 ],
      "decl-vars" : [ 14 ],
      "line-start" : 351,
      "ast" : {
        "kind" : "statement",
        "target" : {
          "kind" : "decl",
          "specs" : [ {
            "comments" : [ ],
            "declared-type" : {
              "go-type" : 67,
              "kind" : "type",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 1,
                "value" : "unsafe"
              },
              "type" : "identifier",
              "value" : {
                "go-type" : 67,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "Pointer"
              }
            },
            "kind" : "spec",
            "names" : [ {
              "ident-kind" : "NoKind",
              "kind" : "ident",
              "value" : "v"
            } ],
            "type" : "var",
            "values" : [ ]
          } ],
          "type" : "var"
        },
        "type" : "declaration"
      },
      "assign-vars" : [ ],
      "line-end" : 351,
      "code" : "// Small stacks are allocated with a fixed-size free-list allocator.\n// If we need a stack of a bigger size, we fall back on allocating\n// a dedicated span.\nvar v unsafe.Pointer",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 17, 35 ],
      "in-vars" : [ 2, 8, 4, 5, 0, 7 ],
      "exit" : false,
      "out-vars" : [ 7, 2, 8, 4, 5, 0 ],
      "decl-vars" : [ ],
      "line-start" : 352,
      "ast" : {
        "condition" : {
          "go-type" : 194,
          "kind" : "expression",
          "left" : {
            "go-type" : 194,
            "kind" : "expression",
            "left" : {
              "go-type" : 2,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "n",
                "variable" : 0
              }
            },
            "operator" : "<",
            "right" : {
              "go-type" : 2,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "32768"
              }
            },
            "type" : "binary"
          },
          "operator" : "&&",
          "right" : {
            "go-type" : 194,
            "kind" : "expression",
            "left" : {
              "go-type" : 2,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "n",
                "variable" : 0
              }
            },
            "operator" : "<",
            "right" : {
              "go-type" : 2,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "32768"
              }
            },
            "type" : "binary"
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 402,
      "code" : "if n < _FixedStack<<_NumStackOrders && n < _StackCacheSize {\n\torder := uint8(0)\n\tn2 := n\n\tfor n2 > _FixedStack {\n\t\torder++\n\t\tn2 >>= 1\n\t}\n\tvar x gclinkptr\n\tc := thisg.m.mcache\n\tif stackNoCache != 0 || c == nil || thisg.m.preemptoff != \"\" {\n\n\t\tlock(&stackpool[order].item.mu)\n\t\tx = stackpoolalloc(order)\n\t\tunlock(&stackpool[order].item.mu)\n\t} else {\n\t\tx = c.stackcache[order].list\n\t\tif x.ptr() == nil {\n\t\t\tstackcacherefill(c, order)\n\t\t\tx = c.stackcache[order].list\n\t\t}\n\t\tc.stackcache[order].list = x.ptr().next\n\t\tc.stackcache[order].size -= uintptr(n)\n\t}\n\tv = unsafe.Pointer(x)\n} else {\n\tvar s *mspan\n\tnpage := uintptr(n) >> _PageShift\n\tlog2npage := stacklog2(npage)\n\n\tlock(&stackLarge.lock)\n\tif !stackLarge.free[log2npage].isEmpty() {\n\t\ts = stackLarge.free[log2npage].first\n\t\tstackLarge.free[log2npage].remove(s)\n\t}\n\tunlock(&stackLarge.lock)\n\n\tif s == nil {\n\n\t\ts = mheap_.allocManual(npage, &memstats.stacks_inuse)\n\t\tif s == nil {\n\t\t\tthrow(\"out of memory\")\n\t\t}\n\t\tosStackAlloc(s)\n\t\ts.elemsize = uintptr(n)\n\t}\n\tv = unsafe.Pointer(s.base())\n}",
      "entry" : false,
      "use-vars" : [ 0 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 18 ],
      "in-vars" : [ 8, 4, 0 ],
      "exit" : false,
      "out-vars" : [ 0, 16, 8, 4 ],
      "decl-vars" : [ 16 ],
      "line-start" : 353,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "order"
          }
        } ],
        "right" : [ {
          "go-type" : 21,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "0"
          }
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 353,
      "code" : "order := uint8(0)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 19 ],
      "in-vars" : [ 16, 8, 4, 0 ],
      "exit" : false,
      "out-vars" : [ 0, 16, 8, 4, 15 ],
      "decl-vars" : [ 15 ],
      "line-start" : 354,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "n2"
          }
        } ],
        "right" : [ {
          "go-type" : 2,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "n",
            "variable" : 0
          }
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 354,
      "code" : "n2 := n",
      "entry" : false,
      "use-vars" : [ 0 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 20, 22 ],
      "in-vars" : [ 15, 0, 16, 8, 4 ],
      "exit" : false,
      "out-vars" : [ 8, 4, 15, 0, 16 ],
      "decl-vars" : [ ],
      "line-start" : 355,
      "ast" : {
        "condition" : {
          "go-type" : 194,
          "kind" : "expression",
          "left" : {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "n2",
              "variable" : 15
            }
          },
          "operator" : ">",
          "right" : {
            "go-type" : 2,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "2048"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "for"
      },
      "assign-vars" : [ ],
      "line-end" : 358,
      "code" : "for n2 > _FixedStack {\n\torder++\n\tn2 >>= 1\n}",
      "entry" : false,
      "use-vars" : [ 15 ]
    }, {
      "update-vars" : [ 16 ],
      "successors" : [ 21 ],
      "in-vars" : [ 16, 8, 4, 15, 0 ],
      "exit" : false,
      "out-vars" : [ 0, 16, 8, 4, 15 ],
      "decl-vars" : [ ],
      "line-start" : 356,
      "ast" : {
        "kind" : "statement",
        "operation" : "++",
        "target" : {
          "go-type" : 21,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "order",
            "variable" : 16
          }
        },
        "type" : "crement"
      },
      "assign-vars" : [ 16 ],
      "line-end" : 356,
      "code" : "order++",
      "entry" : false,
      "use-vars" : [ 16 ]
    }, {
      "update-vars" : [ 15 ],
      "successors" : [ 19 ],
      "in-vars" : [ 0, 16, 8, 4, 15 ],
      "exit" : false,
      "out-vars" : [ 0, 16, 8, 4, 15 ],
      "decl-vars" : [ ],
      "line-start" : 357,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 2,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "n2",
            "variable" : 15
          }
        } ],
        "operator" : ">>",
        "right" : [ {
          "go-type" : 205,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "1"
          }
        } ],
        "type" : "assign-operator"
      },
      "assign-vars" : [ 15 ],
      "line-end" : 357,
      "code" : "n2 >>= 1",
      "entry" : false,
      "use-vars" : [ 15 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 23 ],
      "in-vars" : [ 0, 16, 8, 4 ],
      "exit" : false,
      "out-vars" : [ 0, 16, 8, 4 ],
      "decl-vars" : [ 22 ],
      "line-start" : 359,
      "ast" : {
        "kind" : "statement",
        "target" : {
          "kind" : "decl",
          "specs" : [ {
            "comments" : [ ],
            "declared-type" : {
              "go-type" : 17,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 17,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "gclinkptr"
              }
            },
            "kind" : "spec",
            "names" : [ {
              "ident-kind" : "NoKind",
              "kind" : "ident",
              "value" : "x"
            } ],
            "type" : "var",
            "values" : [ ]
          } ],
          "type" : "var"
        },
        "type" : "declaration"
      },
      "assign-vars" : [ ],
      "line-end" : 359,
      "code" : "var x gclinkptr",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 24 ],
      "in-vars" : [ 0, 16, 8, 4 ],
      "exit" : false,
      "out-vars" : [ 16, 8, 4, 0, 18 ],
      "decl-vars" : [ 18 ],
      "line-start" : 360,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "c"
          }
        } ],
        "right" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "mcache",
            "variable" : 17
          },
          "go-type" : 156,
          "kind" : "expression",
          "target" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "m",
              "variable" : 9
            },
            "go-type" : 134,
            "kind" : "expression",
            "target" : {
              "go-type" : 124,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "thisg",
                "variable" : 8
              }
            },
            "type" : "selector"
          },
          "type" : "selector"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 360,
      "code" : "c := thisg.m.mcache",
      "entry" : false,
      "use-vars" : [ 8 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 25, 28 ],
      "in-vars" : [ 18, 16, 8, 4, 0 ],
      "exit" : false,
      "out-vars" : [ 0, 18, 16, 4 ],
      "decl-vars" : [ ],
      "line-start" : 361,
      "ast" : {
        "condition" : {
          "go-type" : 194,
          "kind" : "expression",
          "left" : {
            "go-type" : 194,
            "kind" : "expression",
            "left" : {
              "go-type" : 194,
              "kind" : "constant",
              "value" : {
                "type" : "BOOL",
                "value" : "false"
              }
            },
            "operator" : "||",
            "right" : {
              "go-type" : 194,
              "kind" : "expression",
              "left" : {
                "go-type" : 156,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "c",
                  "variable" : 18
                }
              },
              "operator" : "==",
              "right" : {
                "go-type" : 206,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Nil",
                  "kind" : "ident",
                  "value" : "nil"
                }
              },
              "type" : "binary"
            },
            "type" : "binary"
          },
          "operator" : "||",
          "right" : {
            "go-type" : 194,
            "kind" : "expression",
            "left" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "preemptoff",
                "variable" : 19
              },
              "go-type" : 149,
              "kind" : "expression",
              "target" : {
                "field" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "m",
                  "variable" : 9
                },
                "go-type" : 134,
                "kind" : "expression",
                "target" : {
                  "go-type" : 124,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "thisg",
                    "variable" : 8
                  }
                },
                "type" : "selector"
              },
              "type" : "selector"
            },
            "operator" : "!=",
            "right" : {
              "go-type" : 149,
              "kind" : "constant",
              "value" : {
                "type" : "STRING",
                "value" : ""
              }
            },
            "type" : "binary"
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 377,
      "code" : "if stackNoCache != 0 || c == nil || thisg.m.preemptoff != \"\" {\n\n\tlock(&stackpool[order].item.mu)\n\tx = stackpoolalloc(order)\n\tunlock(&stackpool[order].item.mu)\n} else {\n\tx = c.stackcache[order].list\n\tif x.ptr() == nil {\n\t\tstackcacherefill(c, order)\n\t\tx = c.stackcache[order].list\n\t}\n\tc.stackcache[order].list = x.ptr().next\n\tc.stackcache[order].size -= uintptr(n)\n}",
      "entry" : false,
      "use-vars" : [ 18, 8 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 26 ],
      "in-vars" : [ 0, 16, 4 ],
      "exit" : false,
      "out-vars" : [ 0, 16, 4 ],
      "decl-vars" : [ ],
      "line-start" : 366,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 61,
            "kind" : "expression",
            "operator" : "&",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "mu",
                "variable" : 21
              },
              "go-type" : 8,
              "kind" : "expression",
              "target" : {
                "field" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "item",
                  "variable" : 20
                },
                "go-type" : 35,
                "kind" : "expression",
                "target" : {
                  "go-type" : 34,
                  "index" : {
                    "go-type" : 21,
                    "kind" : "expression",
                    "type" : "identifier",
                    "value" : {
                      "ident-kind" : "Var",
                      "kind" : "ident",
                      "value" : "order",
                      "variable" : 16
                    }
                  },
                  "kind" : "expression",
                  "target" : {
                    "go-type" : 33,
                    "kind" : "expression",
                    "type" : "identifier",
                    "value" : {
                      "ident-kind" : "Var",
                      "kind" : "ident",
                      "value" : "stackpool",
                      "variable" : 4
                    }
                  },
                  "type" : "index"
                },
                "type" : "selector"
              },
              "type" : "selector"
            },
            "type" : "unary"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 207,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 5,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "lock"
            }
          },
          "go-type" : 96,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 366,
      "code" : "lock(&stackpool[order].item.mu)",
      "entry" : false,
      "use-vars" : [ 16, 4 ]
    }, {
      "update-vars" : [ 22 ],
      "successors" : [ 27 ],
      "in-vars" : [ 16, 4, 0 ],
      "exit" : false,
      "out-vars" : [ 0, 16, 22, 4 ],
      "decl-vars" : [ ],
      "line-start" : 367,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 17,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "x",
            "variable" : 22
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 21,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "order",
              "variable" : 16
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 209,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 6,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "stackpoolalloc"
            }
          },
          "go-type" : 17,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 22 ],
      "line-end" : 367,
      "code" : "x = stackpoolalloc(order)",
      "entry" : false,
      "use-vars" : [ 16 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 34 ],
      "in-vars" : [ 16, 22, 4, 0 ],
      "exit" : false,
      "out-vars" : [ 22, 0 ],
      "decl-vars" : [ ],
      "line-start" : 368,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 61,
            "kind" : "expression",
            "operator" : "&",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "mu",
                "variable" : 21
              },
              "go-type" : 8,
              "kind" : "expression",
              "target" : {
                "field" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "item",
                  "variable" : 20
                },
                "go-type" : 35,
                "kind" : "expression",
                "target" : {
                  "go-type" : 34,
                  "index" : {
                    "go-type" : 21,
                    "kind" : "expression",
                    "type" : "identifier",
                    "value" : {
                      "ident-kind" : "Var",
                      "kind" : "ident",
                      "value" : "order",
                      "variable" : 16
                    }
                  },
                  "kind" : "expression",
                  "target" : {
                    "go-type" : 33,
                    "kind" : "expression",
                    "type" : "identifier",
                    "value" : {
                      "ident-kind" : "Var",
                      "kind" : "ident",
                      "value" : "stackpool",
                      "variable" : 4
                    }
                  },
                  "type" : "index"
                },
                "type" : "selector"
              },
              "type" : "selector"
            },
            "type" : "unary"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 207,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 7,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "unlock"
            }
          },
          "go-type" : 96,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 368,
      "code" : "unlock(&stackpool[order].item.mu)",
      "entry" : false,
      "use-vars" : [ 16, 4 ]
    }, {
      "update-vars" : [ 22 ],
      "successors" : [ 29 ],
      "in-vars" : [ 0, 18, 16 ],
      "exit" : false,
      "out-vars" : [ 18, 16, 22, 0 ],
      "decl-vars" : [ ],
      "line-start" : 370,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 17,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "x",
            "variable" : 22
          }
        } ],
        "right" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "list",
            "variable" : 24
          },
          "go-type" : 17,
          "kind" : "expression",
          "target" : {
            "go-type" : 161,
            "index" : {
              "go-type" : 21,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "order",
                "variable" : 16
              }
            },
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "stackcache",
                "variable" : 23
              },
              "go-type" : 160,
              "kind" : "expression",
              "target" : {
                "go-type" : 156,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "c",
                  "variable" : 18
                }
              },
              "type" : "selector"
            },
            "type" : "index"
          },
          "type" : "selector"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 22 ],
      "line-end" : 370,
      "code" : "x = c.stackcache[order].list",
      "entry" : false,
      "use-vars" : [ 16, 18 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 30, 32 ],
      "in-vars" : [ 18, 16, 22, 0 ],
      "exit" : false,
      "out-vars" : [ 0, 18, 16, 22 ],
      "decl-vars" : [ ],
      "line-start" : 371,
      "ast" : {
        "condition" : {
          "go-type" : 194,
          "kind" : "expression",
          "left" : {
            "arguments" : [ ],
            "ellipsis" : false,
            "function" : {
              "field" : {
                "function" : 8,
                "ident-kind" : "Func",
                "kind" : "ident",
                "value" : "ptr"
              },
              "go-type" : 215,
              "kind" : "expression",
              "target" : {
                "go-type" : 17,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "x",
                  "variable" : 22
                }
              },
              "type" : "selector"
            },
            "go-type" : 212,
            "kind" : "expression",
            "type" : "call"
          },
          "operator" : "==",
          "right" : {
            "go-type" : 206,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Nil",
              "kind" : "ident",
              "value" : "nil"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 374,
      "code" : "if x.ptr() == nil {\n\tstackcacherefill(c, order)\n\tx = c.stackcache[order].list\n}",
      "entry" : false,
      "use-vars" : [ 22 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 31 ],
      "in-vars" : [ 0, 18, 16 ],
      "exit" : false,
      "out-vars" : [ 0, 18, 16 ],
      "decl-vars" : [ ],
      "line-start" : 372,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 156,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "c",
              "variable" : 18
            }
          }, {
            "go-type" : 21,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "order",
              "variable" : 16
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 217,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 9,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "stackcacherefill"
            }
          },
          "go-type" : 96,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 372,
      "code" : "stackcacherefill(c, order)",
      "entry" : false,
      "use-vars" : [ 16, 18 ]
    }, {
      "update-vars" : [ 22 ],
      "successors" : [ 32 ],
      "in-vars" : [ 18, 16, 0 ],
      "exit" : false,
      "out-vars" : [ 0, 18, 16, 22 ],
      "decl-vars" : [ ],
      "line-start" : 373,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 17,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "x",
            "variable" : 22
          }
        } ],
        "right" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "list",
            "variable" : 24
          },
          "go-type" : 17,
          "kind" : "expression",
          "target" : {
            "go-type" : 161,
            "index" : {
              "go-type" : 21,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "order",
                "variable" : 16
              }
            },
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "stackcache",
                "variable" : 23
              },
              "go-type" : 160,
              "kind" : "expression",
              "target" : {
                "go-type" : 156,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "c",
                  "variable" : 18
                }
              },
              "type" : "selector"
            },
            "type" : "index"
          },
          "type" : "selector"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 22 ],
      "line-end" : 373,
      "code" : "x = c.stackcache[order].list",
      "entry" : false,
      "use-vars" : [ 18, 16 ]
    }, {
      "update-vars" : [ 18 ],
      "successors" : [ 33 ],
      "in-vars" : [ 0, 18, 16, 22 ],
      "exit" : false,
      "out-vars" : [ 0, 18, 16, 22 ],
      "decl-vars" : [ ],
      "line-start" : 375,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "list",
            "variable" : 24
          },
          "go-type" : 17,
          "kind" : "expression",
          "target" : {
            "go-type" : 161,
            "index" : {
              "go-type" : 21,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "order",
                "variable" : 16
              }
            },
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "stackcache",
                "variable" : 23
              },
              "go-type" : 160,
              "kind" : "expression",
              "target" : {
                "go-type" : 156,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "c",
                  "variable" : 18
                }
              },
              "type" : "selector"
            },
            "type" : "index"
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "next",
            "variable" : 25
          },
          "go-type" : 17,
          "kind" : "expression",
          "target" : {
            "arguments" : [ ],
            "ellipsis" : false,
            "function" : {
              "field" : {
                "function" : 8,
                "ident-kind" : "Func",
                "kind" : "ident",
                "value" : "ptr"
              },
              "go-type" : 215,
              "kind" : "expression",
              "target" : {
                "go-type" : 17,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "x",
                  "variable" : 22
                }
              },
              "type" : "selector"
            },
            "go-type" : 212,
            "kind" : "expression",
            "type" : "call"
          },
          "type" : "selector"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 375,
      "code" : "c.stackcache[order].list = x.ptr().next",
      "entry" : false,
      "use-vars" : [ 22, 16, 18 ]
    }, {
      "update-vars" : [ 18 ],
      "successors" : [ 34 ],
      "in-vars" : [ 18, 16, 22, 0 ],
      "exit" : false,
      "out-vars" : [ 0, 22 ],
      "decl-vars" : [ ],
      "line-start" : 376,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "size",
            "variable" : 26
          },
          "go-type" : 6,
          "kind" : "expression",
          "target" : {
            "go-type" : 161,
            "index" : {
              "go-type" : 21,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "order",
                "variable" : 16
              }
            },
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "stackcache",
                "variable" : 23
              },
              "go-type" : 160,
              "kind" : "expression",
              "target" : {
                "go-type" : 156,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "c",
                  "variable" : 18
                }
              },
              "type" : "selector"
            },
            "type" : "index"
          },
          "type" : "selector"
        } ],
        "operator" : "-",
        "right" : [ {
          "coerced-to" : {
            "go-type" : 6,
            "kind" : "type",
            "type" : "identifier",
            "value" : {
              "go-type" : 6,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "uintptr"
            }
          },
          "go-type" : 6,
          "kind" : "expression",
          "target" : {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "n",
              "variable" : 0
            }
          },
          "type" : "cast"
        } ],
        "type" : "assign-operator"
      },
      "assign-vars" : [ ],
      "line-end" : 376,
      "code" : "c.stackcache[order].size -= uintptr(n)",
      "entry" : false,
      "use-vars" : [ 0, 16, 18 ]
    }, {
      "update-vars" : [ 14 ],
      "successors" : [ 50 ],
      "in-vars" : [ 22, 0 ],
      "exit" : false,
      "out-vars" : [ 0, 14 ],
      "decl-vars" : [ ],
      "line-start" : 378,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 67,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "v",
            "variable" : 14
          }
        } ],
        "right" : [ {
          "coerced-to" : {
            "go-type" : 67,
            "kind" : "type",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 1,
              "value" : "unsafe"
            },
            "type" : "identifier",
            "value" : {
              "go-type" : 67,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "Pointer"
            }
          },
          "go-type" : 67,
          "kind" : "expression",
          "target" : {
            "go-type" : 17,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "x",
              "variable" : 22
            }
          },
          "type" : "cast"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 14 ],
      "line-end" : 378,
      "code" : "v = unsafe.Pointer(x)",
      "entry" : false,
      "use-vars" : [ 22 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 36 ],
      "in-vars" : [ 5, 0, 7, 2 ],
      "exit" : false,
      "out-vars" : [ 5, 0, 7, 31, 2 ],
      "decl-vars" : [ 31 ],
      "line-start" : 380,
      "ast" : {
        "kind" : "statement",
        "target" : {
          "kind" : "decl",
          "specs" : [ {
            "comments" : [ ],
            "declared-type" : {
              "contained" : {
                "go-type" : 14,
                "kind" : "type",
                "type" : "identifier",
                "value" : {
                  "go-type" : 14,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "mspan"
                }
              },
              "go-type" : 13,
              "kind" : "type",
              "type" : "pointer"
            },
            "kind" : "spec",
            "names" : [ {
              "ident-kind" : "NoKind",
              "kind" : "ident",
              "value" : "s"
            } ],
            "type" : "var",
            "values" : [ ]
          } ],
          "type" : "var"
        },
        "type" : "declaration"
      },
      "assign-vars" : [ ],
      "line-end" : 380,
      "code" : "var s *mspan",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 37 ],
      "in-vars" : [ 2, 5, 0, 7, 31 ],
      "exit" : false,
      "out-vars" : [ 0, 7, 31, 2, 27, 5 ],
      "decl-vars" : [ 27 ],
      "line-start" : 381,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "npage"
          }
        } ],
        "right" : [ {
          "go-type" : 6,
          "kind" : "expression",
          "left" : {
            "coerced-to" : {
              "go-type" : 6,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 6,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "uintptr"
              }
            },
            "go-type" : 6,
            "kind" : "expression",
            "target" : {
              "go-type" : 2,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "n",
                "variable" : 0
              }
            },
            "type" : "cast"
          },
          "operator" : ">>",
          "right" : {
            "go-type" : 205,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "13"
            }
          },
          "type" : "binary"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 381,
      "code" : "npage := uintptr(n) >> _PageShift",
      "entry" : false,
      "use-vars" : [ 0 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 38 ],
      "in-vars" : [ 7, 31, 2, 27, 5, 0 ],
      "exit" : false,
      "out-vars" : [ 27, 30, 5, 0, 7, 31, 2 ],
      "decl-vars" : [ 30 ],
      "line-start" : 382,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "log2npage"
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 6,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "npage",
              "variable" : 27
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 219,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 10,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "stacklog2"
            }
          },
          "go-type" : 166,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 382,
      "code" : "log2npage := stacklog2(npage)",
      "entry" : false,
      "use-vars" : [ 27 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 39 ],
      "in-vars" : [ 0, 7, 31, 2, 27, 30, 5 ],
      "exit" : false,
      "out-vars" : [ 31, 2, 27, 30, 5, 0, 7 ],
      "decl-vars" : [ ],
      "line-start" : 385,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 61,
            "kind" : "expression",
            "operator" : "&",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "lock",
                "variable" : 28
              },
              "go-type" : 8,
              "kind" : "expression",
              "target" : {
                "go-type" : 7,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "stackLarge",
                  "variable" : 2
                }
              },
              "type" : "selector"
            },
            "type" : "unary"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 207,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 5,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "lock"
            }
          },
          "go-type" : 96,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 385,
      "code" : "lock(&stackLarge.lock)",
      "entry" : false,
      "use-vars" : [ 2 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 40, 42 ],
      "in-vars" : [ 31, 2, 27, 30, 5, 0, 7 ],
      "exit" : false,
      "out-vars" : [ 0, 7, 31, 2, 27, 30, 5 ],
      "decl-vars" : [ ],
      "line-start" : 386,
      "ast" : {
        "condition" : {
          "go-type" : 62,
          "kind" : "expression",
          "operator" : "!",
          "target" : {
            "arguments" : [ ],
            "ellipsis" : false,
            "function" : {
              "field" : {
                "function" : 11,
                "ident-kind" : "Func",
                "kind" : "ident",
                "value" : "isEmpty"
              },
              "go-type" : 222,
              "kind" : "expression",
              "target" : {
                "go-type" : 11,
                "index" : {
                  "go-type" : 166,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "log2npage",
                    "variable" : 30
                  }
                },
                "kind" : "expression",
                "target" : {
                  "field" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "free",
                    "variable" : 29
                  },
                  "go-type" : 10,
                  "kind" : "expression",
                  "target" : {
                    "go-type" : 7,
                    "kind" : "expression",
                    "type" : "identifier",
                    "value" : {
                      "ident-kind" : "Var",
                      "kind" : "ident",
                      "value" : "stackLarge",
                      "variable" : 2
                    }
                  },
                  "type" : "selector"
                },
                "type" : "index"
              },
              "type" : "selector"
            },
            "go-type" : 62,
            "kind" : "expression",
            "type" : "call"
          },
          "type" : "unary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 389,
      "code" : "if !stackLarge.free[log2npage].isEmpty() {\n\ts = stackLarge.free[log2npage].first\n\tstackLarge.free[log2npage].remove(s)\n}",
      "entry" : false,
      "use-vars" : [ 2, 30 ]
    }, {
      "update-vars" : [ 31 ],
      "successors" : [ 41 ],
      "in-vars" : [ 0, 7, 2, 27, 30, 5 ],
      "exit" : false,
      "out-vars" : [ 0, 7, 31, 2, 27, 30, 5 ],
      "decl-vars" : [ ],
      "line-start" : 387,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 13,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "s",
            "variable" : 31
          }
        } ],
        "right" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "first",
            "variable" : 32
          },
          "go-type" : 13,
          "kind" : "expression",
          "target" : {
            "go-type" : 11,
            "index" : {
              "go-type" : 166,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "log2npage",
                "variable" : 30
              }
            },
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "free",
                "variable" : 29
              },
              "go-type" : 10,
              "kind" : "expression",
              "target" : {
                "go-type" : 7,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "stackLarge",
                  "variable" : 2
                }
              },
              "type" : "selector"
            },
            "type" : "index"
          },
          "type" : "selector"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 31 ],
      "line-end" : 387,
      "code" : "s = stackLarge.free[log2npage].first",
      "entry" : false,
      "use-vars" : [ 2, 30 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 42 ],
      "in-vars" : [ 30, 5, 0, 7, 31, 2, 27 ],
      "exit" : false,
      "out-vars" : [ 0, 7, 31, 2, 27, 5 ],
      "decl-vars" : [ ],
      "line-start" : 388,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 13,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "s",
              "variable" : 31
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "function" : 12,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "remove"
            },
            "go-type" : 223,
            "kind" : "expression",
            "target" : {
              "go-type" : 11,
              "index" : {
                "go-type" : 166,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "log2npage",
                  "variable" : 30
                }
              },
              "kind" : "expression",
              "target" : {
                "field" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "free",
                  "variable" : 29
                },
                "go-type" : 10,
                "kind" : "expression",
                "target" : {
                  "go-type" : 7,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "stackLarge",
                    "variable" : 2
                  }
                },
                "type" : "selector"
              },
              "type" : "index"
            },
            "type" : "selector"
          },
          "go-type" : 96,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 388,
      "code" : "stackLarge.free[log2npage].remove(s)",
      "entry" : false,
      "use-vars" : [ 31, 2, 30 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 43 ],
      "in-vars" : [ 0, 7, 31, 2, 27, 5 ],
      "exit" : false,
      "out-vars" : [ 27, 5, 0, 7, 31 ],
      "decl-vars" : [ ],
      "line-start" : 390,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 61,
            "kind" : "expression",
            "operator" : "&",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "lock",
                "variable" : 28
              },
              "go-type" : 8,
              "kind" : "expression",
              "target" : {
                "go-type" : 7,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "stackLarge",
                  "variable" : 2
                }
              },
              "type" : "selector"
            },
            "type" : "unary"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 207,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 7,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "unlock"
            }
          },
          "go-type" : 96,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 390,
      "code" : "unlock(&stackLarge.lock)",
      "entry" : false,
      "use-vars" : [ 2 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 44, 49 ],
      "in-vars" : [ 5, 0, 7, 31, 27 ],
      "exit" : false,
      "out-vars" : [ 7, 31, 27, 5, 0 ],
      "decl-vars" : [ ],
      "line-start" : 392,
      "ast" : {
        "condition" : {
          "go-type" : 194,
          "kind" : "expression",
          "left" : {
            "go-type" : 13,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "s",
              "variable" : 31
            }
          },
          "operator" : "==",
          "right" : {
            "go-type" : 206,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Nil",
              "kind" : "ident",
              "value" : "nil"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 400,
      "code" : "if s == nil {\n\n\ts = mheap_.allocManual(npage, &memstats.stacks_inuse)\n\tif s == nil {\n\t\tthrow(\"out of memory\")\n\t}\n\tosStackAlloc(s)\n\ts.elemsize = uintptr(n)\n}",
      "entry" : false,
      "use-vars" : [ 31 ]
    }, {
      "update-vars" : [ 31 ],
      "successors" : [ 45 ],
      "in-vars" : [ 0, 7, 27, 5 ],
      "exit" : false,
      "out-vars" : [ 0, 31 ],
      "decl-vars" : [ ],
      "line-start" : 394,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 13,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "s",
            "variable" : 31
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 6,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "npage",
              "variable" : 27
            }
          }, {
            "go-type" : 60,
            "kind" : "expression",
            "operator" : "&",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "stacks_inuse",
                "variable" : 33
              },
              "go-type" : 18,
              "kind" : "expression",
              "target" : {
                "go-type" : 119,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "memstats",
                  "variable" : 7
                }
              },
              "type" : "selector"
            },
            "type" : "unary"
          } ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "function" : 13,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "allocManual"
            },
            "go-type" : 225,
            "kind" : "expression",
            "target" : {
              "go-type" : 38,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "mheap_",
                "variable" : 5
              }
            },
            "type" : "selector"
          },
          "go-type" : 13,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 31 ],
      "line-end" : 394,
      "code" : "s = mheap_.allocManual(npage, &memstats.stacks_inuse)",
      "entry" : false,
      "use-vars" : [ 5, 27, 7 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 46, 47 ],
      "in-vars" : [ 0, 31 ],
      "exit" : false,
      "out-vars" : [ 0, 31 ],
      "decl-vars" : [ ],
      "line-start" : 395,
      "ast" : {
        "condition" : {
          "go-type" : 194,
          "kind" : "expression",
          "left" : {
            "go-type" : 13,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "s",
              "variable" : 31
            }
          },
          "operator" : "==",
          "right" : {
            "go-type" : 206,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Nil",
              "kind" : "ident",
              "value" : "nil"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 397,
      "code" : "if s == nil {\n\tthrow(\"out of memory\")\n}",
      "entry" : false,
      "use-vars" : [ 31 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 47 ],
      "in-vars" : [ 0, 31 ],
      "exit" : false,
      "out-vars" : [ 0, 31 ],
      "decl-vars" : [ ],
      "line-start" : 396,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 149,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "out of memory"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 195,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 2,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "throw"
            }
          },
          "go-type" : 96,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 396,
      "code" : "throw(\"out of memory\")",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 48 ],
      "in-vars" : [ 0, 31 ],
      "exit" : false,
      "out-vars" : [ 0, 31 ],
      "decl-vars" : [ ],
      "line-start" : 398,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 13,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "s",
              "variable" : 31
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 228,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 14,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "osStackAlloc"
            }
          },
          "go-type" : 96,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 398,
      "code" : "osStackAlloc(s)",
      "entry" : false,
      "use-vars" : [ 31 ]
    }, {
      "update-vars" : [ 31 ],
      "successors" : [ 49 ],
      "in-vars" : [ 31, 0 ],
      "exit" : false,
      "out-vars" : [ 0, 31 ],
      "decl-vars" : [ ],
      "line-start" : 399,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "elemsize",
            "variable" : 34
          },
          "go-type" : 6,
          "kind" : "expression",
          "target" : {
            "go-type" : 13,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "s",
              "variable" : 31
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "coerced-to" : {
            "go-type" : 6,
            "kind" : "type",
            "type" : "identifier",
            "value" : {
              "go-type" : 6,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "uintptr"
            }
          },
          "go-type" : 6,
          "kind" : "expression",
          "target" : {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "n",
              "variable" : 0
            }
          },
          "type" : "cast"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 399,
      "code" : "s.elemsize = uintptr(n)",
      "entry" : false,
      "use-vars" : [ 0, 31 ]
    }, {
      "update-vars" : [ 14 ],
      "successors" : [ 50 ],
      "in-vars" : [ 0, 31 ],
      "exit" : false,
      "out-vars" : [ 0, 14 ],
      "decl-vars" : [ ],
      "line-start" : 401,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 67,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "v",
            "variable" : 14
          }
        } ],
        "right" : [ {
          "coerced-to" : {
            "go-type" : 67,
            "kind" : "type",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 1,
              "value" : "unsafe"
            },
            "type" : "identifier",
            "value" : {
              "go-type" : 67,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "Pointer"
            }
          },
          "go-type" : 67,
          "kind" : "expression",
          "target" : {
            "arguments" : [ ],
            "ellipsis" : false,
            "function" : {
              "field" : {
                "function" : 15,
                "ident-kind" : "Func",
                "kind" : "ident",
                "value" : "base"
              },
              "go-type" : 230,
              "kind" : "expression",
              "target" : {
                "go-type" : 13,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "s",
                  "variable" : 31
                }
              },
              "type" : "selector"
            },
            "go-type" : 6,
            "kind" : "expression",
            "type" : "call"
          },
          "type" : "cast"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 14 ],
      "line-end" : 401,
      "code" : "v = unsafe.Pointer(s.base())",
      "entry" : false,
      "use-vars" : [ 31 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 51, 52 ],
      "in-vars" : [ 0, 14 ],
      "exit" : false,
      "out-vars" : [ 0, 14 ],
      "decl-vars" : [ ],
      "line-start" : 404,
      "ast" : {
        "condition" : {
          "go-type" : 194,
          "kind" : "constant",
          "value" : {
            "type" : "BOOL",
            "value" : "false"
          }
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 406,
      "code" : "if raceenabled {\n\tracemalloc(v, uintptr(n))\n}",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 52 ],
      "in-vars" : [ 0, 14 ],
      "exit" : false,
      "out-vars" : [ 0, 14 ],
      "decl-vars" : [ ],
      "line-start" : 405,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 67,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "v",
              "variable" : 14
            }
          }, {
            "coerced-to" : {
              "go-type" : 6,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 6,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "uintptr"
              }
            },
            "go-type" : 6,
            "kind" : "expression",
            "target" : {
              "go-type" : 2,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "n",
                "variable" : 0
              }
            },
            "type" : "cast"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 231,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 16,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "racemalloc"
            }
          },
          "go-type" : 96,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 405,
      "code" : "racemalloc(v, uintptr(n))",
      "entry" : false,
      "use-vars" : [ 14, 0 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 53, 54 ],
      "in-vars" : [ 0, 14 ],
      "exit" : false,
      "out-vars" : [ 0, 14 ],
      "decl-vars" : [ ],
      "line-start" : 407,
      "ast" : {
        "condition" : {
          "go-type" : 194,
          "kind" : "constant",
          "value" : {
            "type" : "BOOL",
            "value" : "false"
          }
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 409,
      "code" : "if msanenabled {\n\tmsanmalloc(v, uintptr(n))\n}",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 54 ],
      "in-vars" : [ 0, 14 ],
      "exit" : false,
      "out-vars" : [ 0, 14 ],
      "decl-vars" : [ ],
      "line-start" : 408,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 67,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "v",
              "variable" : 14
            }
          }, {
            "coerced-to" : {
              "go-type" : 6,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 6,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "uintptr"
              }
            },
            "go-type" : 6,
            "kind" : "expression",
            "target" : {
              "go-type" : 2,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "n",
                "variable" : 0
              }
            },
            "type" : "cast"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 233,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 17,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "msanmalloc"
            }
          },
          "go-type" : 96,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 408,
      "code" : "msanmalloc(v, uintptr(n))",
      "entry" : false,
      "use-vars" : [ 14, 0 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 55, 56 ],
      "in-vars" : [ 0, 14 ],
      "exit" : false,
      "out-vars" : [ 0, 14 ],
      "decl-vars" : [ ],
      "line-start" : 410,
      "ast" : {
        "condition" : {
          "go-type" : 194,
          "kind" : "constant",
          "value" : {
            "type" : "BOOL",
            "value" : "false"
          }
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 412,
      "code" : "if stackDebug >= 1 {\n\tprint(\"  allocated \", v, \"\\n\")\n}",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 56 ],
      "in-vars" : [ 14, 0 ],
      "exit" : false,
      "out-vars" : [ 0, 14 ],
      "decl-vars" : [ ],
      "line-start" : 411,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 149,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "  allocated "
            }
          }, {
            "go-type" : 67,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "v",
              "variable" : 14
            }
          }, {
            "go-type" : 149,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "\n"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 235,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Builtin",
              "kind" : "ident",
              "value" : "print"
            }
          },
          "go-type" : 96,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 411,
      "code" : "print(\"  allocated \", v, \"\\n\")",
      "entry" : false,
      "use-vars" : [ 14 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 0, 14 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 413,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "declared" : {
            "go-type" : 4,
            "kind" : "type",
            "type" : "identifier",
            "value" : {
              "go-type" : 4,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "stack"
            }
          },
          "go-type" : 4,
          "kind" : "literal",
          "type" : "composite",
          "values" : [ {
            "coerced-to" : {
              "go-type" : 6,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 6,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "uintptr"
              }
            },
            "go-type" : 6,
            "kind" : "expression",
            "target" : {
              "go-type" : 67,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "v",
                "variable" : 14
              }
            },
            "type" : "cast"
          }, {
            "go-type" : 6,
            "kind" : "expression",
            "left" : {
              "coerced-to" : {
                "go-type" : 6,
                "kind" : "type",
                "type" : "identifier",
                "value" : {
                  "go-type" : 6,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "uintptr"
                }
              },
              "go-type" : 6,
              "kind" : "expression",
              "target" : {
                "go-type" : 67,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "v",
                  "variable" : 14
                }
              },
              "type" : "cast"
            },
            "operator" : "+",
            "right" : {
              "coerced-to" : {
                "go-type" : 6,
                "kind" : "type",
                "type" : "identifier",
                "value" : {
                  "go-type" : 6,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "uintptr"
                }
              },
              "go-type" : 6,
              "kind" : "expression",
              "target" : {
                "go-type" : 2,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "n",
                  "variable" : 0
                }
              },
              "type" : "cast"
            },
            "type" : "binary"
          } ]
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 413,
      "code" : "return stack{uintptr(v), uintptr(v) + uintptr(n)}",
      "entry" : false,
      "use-vars" : [ 14, 0 ]
    } ],
    "code" : "// stackalloc allocates an n byte stack.\n//\n// stackalloc must run on the system stack because it uses per-P\n// resources and must not split the stack.\n//\n//go:systemstack\nfunc stackalloc(n uint32) stack {\n\n\tthisg := getg()\n\tif thisg != thisg.m.g0 {\n\t\tthrow(\"stackalloc not on scheduler stack\")\n\t}\n\tif n&(n-1) != 0 {\n\t\tthrow(\"stack size not a power of 2\")\n\t}\n\tif stackDebug >= 1 {\n\t\tprint(\"stackalloc \", n, \"\\n\")\n\t}\n\n\tif debug.efence != 0 || stackFromSystem != 0 {\n\t\tn = uint32(alignUp(uintptr(n), physPageSize))\n\t\tv := sysAlloc(uintptr(n), &memstats.stacks_sys)\n\t\tif v == nil {\n\t\t\tthrow(\"out of memory (stackalloc)\")\n\t\t}\n\t\treturn stack{uintptr(v), uintptr(v) + uintptr(n)}\n\t}\n\n\t// Small stacks are allocated with a fixed-size free-list allocator.\n\t// If we need a stack of a bigger size, we fall back on allocating\n\t// a dedicated span.\n\tvar v unsafe.Pointer\n\tif n < _FixedStack<<_NumStackOrders && n < _StackCacheSize {\n\t\torder := uint8(0)\n\t\tn2 := n\n\t\tfor n2 > _FixedStack {\n\t\t\torder++\n\t\t\tn2 >>= 1\n\t\t}\n\t\tvar x gclinkptr\n\t\tc := thisg.m.mcache\n\t\tif stackNoCache != 0 || c == nil || thisg.m.preemptoff != \"\" {\n\n\t\t\tlock(&stackpool[order].item.mu)\n\t\t\tx = stackpoolalloc(order)\n\t\t\tunlock(&stackpool[order].item.mu)\n\t\t} else {\n\t\t\tx = c.stackcache[order].list\n\t\t\tif x.ptr() == nil {\n\t\t\t\tstackcacherefill(c, order)\n\t\t\t\tx = c.stackcache[order].list\n\t\t\t}\n\t\t\tc.stackcache[order].list = x.ptr().next\n\t\t\tc.stackcache[order].size -= uintptr(n)\n\t\t}\n\t\tv = unsafe.Pointer(x)\n\t} else {\n\t\tvar s *mspan\n\t\tnpage := uintptr(n) >> _PageShift\n\t\tlog2npage := stacklog2(npage)\n\n\t\tlock(&stackLarge.lock)\n\t\tif !stackLarge.free[log2npage].isEmpty() {\n\t\t\ts = stackLarge.free[log2npage].first\n\t\t\tstackLarge.free[log2npage].remove(s)\n\t\t}\n\t\tunlock(&stackLarge.lock)\n\n\t\tif s == nil {\n\n\t\t\ts = mheap_.allocManual(npage, &memstats.stacks_inuse)\n\t\t\tif s == nil {\n\t\t\t\tthrow(\"out of memory\")\n\t\t\t}\n\t\t\tosStackAlloc(s)\n\t\t\ts.elemsize = uintptr(n)\n\t\t}\n\t\tv = unsafe.Pointer(s.base())\n\t}\n\n\tif raceenabled {\n\t\tracemalloc(v, uintptr(n))\n\t}\n\tif msanenabled {\n\t\tmsanmalloc(v, uintptr(n))\n\t}\n\tif stackDebug >= 1 {\n\t\tprint(\"  allocated \", v, \"\\n\")\n\t}\n\treturn stack{uintptr(v), uintptr(v) + uintptr(n)}\n}",
    "defines" : [ 0 ],
    "functions" : [ {
      "name" : "stackalloc",
      "package" : 0,
      "type" : 0,
      "exported" : false
    }, {
      "name" : "getg",
      "package" : 0,
      "type" : 192,
      "exported" : false
    }, {
      "name" : "throw",
      "package" : 0,
      "type" : 195,
      "exported" : false
    }, {
      "name" : "alignUp",
      "package" : 0,
      "type" : 199,
      "exported" : false
    }, {
      "name" : "sysAlloc",
      "package" : 0,
      "type" : 202,
      "exported" : false
    }, {
      "name" : "lock",
      "package" : 0,
      "type" : 207,
      "exported" : false
    }, {
      "name" : "stackpoolalloc",
      "package" : 0,
      "type" : 209,
      "exported" : false
    }, {
      "name" : "unlock",
      "package" : 0,
      "type" : 207,
      "exported" : false
    }, {
      "name" : "ptr",
      "package" : 0,
      "type" : 215,
      "exported" : false
    }, {
      "name" : "stackcacherefill",
      "package" : 0,
      "type" : 217,
      "exported" : false
    }, {
      "name" : "stacklog2",
      "package" : 0,
      "type" : 219,
      "exported" : false
    }, {
      "name" : "isEmpty",
      "package" : 0,
      "type" : 222,
      "exported" : false
    }, {
      "name" : "remove",
      "package" : 0,
      "type" : 223,
      "exported" : false
    }, {
      "name" : "allocManual",
      "package" : 0,
      "type" : 225,
      "exported" : false
    }, {
      "name" : "osStackAlloc",
      "package" : 0,
      "type" : 228,
      "exported" : false
    }, {
      "name" : "base",
      "package" : 0,
      "type" : 230,
      "exported" : false
    }, {
      "name" : "racemalloc",
      "package" : 0,
      "type" : 231,
      "exported" : false
    }, {
      "name" : "msanmalloc",
      "package" : 0,
      "type" : 233,
      "exported" : false
    } ],
    "line-end" : 414,
    "line-start" : 324,
    "names" : [ "stackalloc" ],
    "package" : 0,
    "packages" : [ {
      "name" : "runtime",
      "path" : "runtime"
    }, {
      "name" : "unsafe",
      "path" : "unsafe"
    }, {
      "name" : "sys",
      "path" : "runtime/internal/sys"
    } ],
    "params" : [ 0 ],
    "receivers" : [ ],
    "results" : [ 1 ],
    "type" : "function",
    "types" : [ {
      "name" : "func(n uint32) runtime.stack",
      "params" : 1,
      "recv" : -1,
      "results" : 3,
      "type" : "Signature",
      "underlying" : 0,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "n",
        "type" : 2
      } ],
      "name" : "(n uint32)",
      "type" : "Tuple",
      "underlying" : 1
    }, {
      "name" : "uint32",
      "type" : "Basic",
      "underlying" : 2
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 4
      } ],
      "name" : "(runtime.stack)",
      "type" : "Tuple",
      "underlying" : 3
    }, {
      "local-name" : "stack",
      "name" : "runtime.stack",
      "package" : 0,
      "type" : "Named",
      "underlying" : 5
    }, {
      "fields" : [ {
        "name" : "lo",
        "type" : 6
      }, {
        "name" : "hi",
        "type" : 6
      } ],
      "name" : "struct{lo uintptr; hi uintptr}",
      "type" : "Struct",
      "underlying" : 5
    }, {
      "name" : "uintptr",
      "type" : "Basic",
      "underlying" : 6
    }, {
      "fields" : [ {
        "name" : "lock",
        "type" : 8
      }, {
        "name" : "free",
        "type" : 10
      } ],
      "name" : "struct{lock runtime.mutex; free [35]runtime.mSpanList}",
      "type" : "Struct",
      "underlying" : 7
    }, {
      "local-name" : "mutex",
      "name" : "runtime.mutex",
      "package" : 0,
      "type" : "Named",
      "underlying" : 9
    }, {
      "fields" : [ {
        "name" : "key",
        "type" : 6
      } ],
      "name" : "struct{key uintptr}",
      "type" : "Struct",
      "underlying" : 9
    }, {
      "elem" : 11,
      "name" : "[35]runtime.mSpanList",
      "type" : "Array",
      "underlying" : 10
    }, {
      "local-name" : "mSpanList",
      "name" : "runtime.mSpanList",
      "package" : 0,
      "type" : "Named",
      "underlying" : 12
    }, {
      "fields" : [ {
        "name" : "first",
        "type" : 13
      }, {
        "name" : "last",
        "type" : 13
      } ],
      "name" : "struct{first *runtime.mspan; last *runtime.mspan}",
      "type" : "Struct",
      "underlying" : 12
    }, {
      "elem" : 14,
      "name" : "*runtime.mspan",
      "type" : "Pointer",
      "underlying" : 13
    }, {
      "local-name" : "mspan",
      "name" : "runtime.mspan",
      "package" : 0,
      "type" : "Named",
      "underlying" : 15
    }, {
      "fields" : [ {
        "name" : "next",
        "type" : 13
      }, {
        "name" : "prev",
        "type" : 13
      }, {
        "name" : "list",
        "type" : 16
      }, {
        "name" : "startAddr",
        "type" : 6
      }, {
        "name" : "npages",
        "type" : 6
      }, {
        "name" : "manualFreeList",
        "type" : 17
      }, {
        "name" : "freeindex",
        "type" : 6
      }, {
        "name" : "nelems",
        "type" : 6
      }, {
        "name" : "allocCache",
        "type" : 18
      }, {
        "name" : "allocBits",
        "type" : 19
      }, {
        "name" : "gcmarkBits",
        "type" : 19
      }, {
        "name" : "sweepgen",
        "type" : 2
      }, {
        "name" : "divMul",
        "type" : 22
      }, {
        "name" : "baseMask",
        "type" : 22
      }, {
        "name" : "allocCount",
        "type" : 22
      }, {
        "name" : "spanclass",
        "type" : 23
      }, {
        "name" : "state",
        "type" : 24
      }, {
        "name" : "needzero",
        "type" : 21
      }, {
        "name" : "divShift",
        "type" : 21
      }, {
        "name" : "divShift2",
        "type" : 21
      }, {
        "name" : "elemsize",
        "type" : 6
      }, {
        "name" : "limit",
        "type" : 6
      }, {
        "name" : "speciallock",
        "type" : 8
      }, {
        "name" : "specials",
        "type" : 27
      } ],
      "name" : "struct{next *runtime.mspan; prev *runtime.mspan; list *runtime.mSpanList; startAddr uintptr; npages uintptr; manualFreeList runtime.gclinkptr; freeindex uintptr; nelems uintptr; allocCache uint64; allocBits *runtime.gcBits; gcmarkBits *runtime.gcBits; sweepgen uint32; divMul uint16; baseMask uint16; allocCount uint16; spanclass runtime.spanClass; state runtime.mSpanStateBox; needzero uint8; divShift uint8; divShift2 uint8; elemsize uintptr; limit uintptr; speciallock runtime.mutex; specials *runtime.special}",
      "type" : "Struct",
      "underlying" : 15
    }, {
      "elem" : 11,
      "name" : "*runtime.mSpanList",
      "type" : "Pointer",
      "underlying" : 16
    }, {
      "local-name" : "gclinkptr",
      "name" : "runtime.gclinkptr",
      "package" : 0,
      "type" : "Named",
      "underlying" : 6
    }, {
      "name" : "uint64",
      "type" : "Basic",
      "underlying" : 18
    }, {
      "elem" : 20,
      "name" : "*runtime.gcBits",
      "type" : "Pointer",
      "underlying" : 19
    }, {
      "local-name" : "gcBits",
      "name" : "runtime.gcBits",
      "package" : 0,
      "type" : "Named",
      "underlying" : 21
    }, {
      "name" : "uint8",
      "type" : "Basic",
      "underlying" : 21
    }, {
      "name" : "uint16",
      "type" : "Basic",
      "underlying" : 22
    }, {
      "local-name" : "spanClass",
      "name" : "runtime.spanClass",
      "package" : 0,
      "type" : "Named",
      "underlying" : 21
    }, {
      "local-name" : "mSpanStateBox",
      "name" : "runtime.mSpanStateBox",
      "package" : 0,
      "type" : "Named",
      "underlying" : 25
    }, {
      "fields" : [ {
        "name" : "s",
        "type" : 26
      } ],
      "name" : "struct{s runtime.mSpanState}",
      "type" : "Struct",
      "underlying" : 25
    }, {
      "local-name" : "mSpanState",
      "name" : "runtime.mSpanState",
      "package" : 0,
      "type" : "Named",
      "underlying" : 21
    }, {
      "elem" : 28,
      "name" : "*runtime.special",
      "type" : "Pointer",
      "underlying" : 27
    }, {
      "local-name" : "special",
      "name" : "runtime.special",
      "package" : 0,
      "type" : "Named",
      "underlying" : 29
    }, {
      "fields" : [ {
        "name" : "next",
        "type" : 27
      }, {
        "name" : "offset",
        "type" : 22
      }, {
        "name" : "kind",
        "type" : 30
      } ],
      "name" : "struct{next *runtime.special; offset uint16; kind byte}",
      "type" : "Struct",
      "underlying" : 29
    }, {
      "name" : "byte",
      "type" : "Basic",
      "underlying" : 30
    }, {
      "fields" : [ {
        "name" : "allocfreetrace",
        "type" : 32
      }, {
        "name" : "cgocheck",
        "type" : 32
      }, {
        "name" : "clobberfree",
        "type" : 32
      }, {
        "name" : "efence",
        "type" : 32
      }, {
        "name" : "gccheckmark",
        "type" : 32
      }, {
        "name" : "gcpacertrace",
        "type" : 32
      }, {
        "name" : "gcshrinkstackoff",
        "type" : 32
      }, {
        "name" : "gcstoptheworld",
        "type" : 32
      }, {
        "name" : "gctrace",
        "type" : 32
      }, {
        "name" : "invalidptr",
        "type" : 32
      }, {
        "name" : "madvdontneed",
        "type" : 32
      }, {
        "name" : "sbrk",
        "type" : 32
      }, {
        "name" : "scavenge",
        "type" : 32
      }, {
        "name" : "scavtrace",
        "type" : 32
      }, {
        "name" : "scheddetail",
        "type" : 32
      }, {
        "name" : "schedtrace",
        "type" : 32
      }, {
        "name" : "tracebackancestors",
        "type" : 32
      }, {
        "name" : "asyncpreemptoff",
        "type" : 32
      } ],
      "name" : "struct{allocfreetrace int32; cgocheck int32; clobberfree int32; efence int32; gccheckmark int32; gcpacertrace int32; gcshrinkstackoff int32; gcstoptheworld int32; gctrace int32; invalidptr int32; madvdontneed int32; sbrk int32; scavenge int32; scavtrace int32; scheddetail int32; schedtrace int32; tracebackancestors int32; asyncpreemptoff int32}",
      "type" : "Struct",
      "underlying" : 31
    }, {
      "name" : "int32",
      "type" : "Basic",
      "underlying" : 32
    }, {
      "elem" : 34,
      "name" : "[4]struct{item runtime.stackpoolItem; _ [40]byte}",
      "type" : "Array",
      "underlying" : 33
    }, {
      "fields" : [ {
        "name" : "item",
        "type" : 35
      }, {
        "name" : "_",
        "type" : 37
      } ],
      "name" : "struct{item runtime.stackpoolItem; _ [40]byte}",
      "type" : "Struct",
      "underlying" : 34
    }, {
      "local-name" : "stackpoolItem",
      "name" : "runtime.stackpoolItem",
      "package" : 0,
      "type" : "Named",
      "underlying" : 36
    }, {
      "fields" : [ {
        "name" : "mu",
        "type" : 8
      }, {
        "name" : "span",
        "type" : 11
      } ],
      "name" : "struct{mu runtime.mutex; span runtime.mSpanList}",
      "type" : "Struct",
      "underlying" : 36
    }, {
      "elem" : 30,
      "name" : "[40]byte",
      "type" : "Array",
      "underlying" : 37
    }, {
      "local-name" : "mheap",
      "name" : "runtime.mheap",
      "package" : 0,
      "type" : "Named",
      "underlying" : 39
    }, {
      "fields" : [ {
        "name" : "lock",
        "type" : 8
      }, {
        "name" : "pages",
        "type" : 40
      }, {
        "name" : "sweepgen",
        "type" : 2
      }, {
        "name" : "sweepdone",
        "type" : 2
      }, {
        "name" : "sweepers",
        "type" : 2
      }, {
        "name" : "allspans",
        "type" : 63
      }, {
        "name" : "sweepSpans",
        "type" : 64
      }, {
        "name" : "pagesInUse",
        "type" : 18
      }, {
        "name" : "pagesSwept",
        "type" : 18
      }, {
        "name" : "pagesSweptBasis",
        "type" : 18
      }, {
        "name" : "sweepHeapLiveBasis",
        "type" : 18
      }, {
        "name" : "sweepPagesPerByte",
        "type" : 68
      }, {
        "name" : "scavengeGoal",
        "type" : 18
      }, {
        "name" : "reclaimIndex",
        "type" : 18
      }, {
        "name" : "reclaimCredit",
        "type" : 6
      }, {
        "name" : "largealloc",
        "type" : 18
      }, {
        "name" : "nlargealloc",
        "type" : 18
      }, {
        "name" : "largefree",
        "type" : 18
      }, {
        "name" : "nlargefree",
        "type" : 18
      }, {
        "name" : "nsmallfree",
        "type" : 69
      }, {
        "name" : "arenas",
        "type" : 70
      }, {
        "name" : "heapArenaAlloc",
        "type" : 79
      }, {
        "name" : "arenaHints",
        "type" : 81
      }, {
        "name" : "arena",
        "type" : 79
      }, {
        "name" : "allArenas",
        "type" : 84
      }, {
        "name" : "sweepArenas",
        "type" : 84
      }, {
        "name" : "curArena",
        "type" : 86
      }, {
        "name" : "_",
        "type" : 2
      }, {
        "name" : "central",
        "type" : 87
      }, {
        "name" : "spanalloc",
        "type" : 92
      }, {
        "name" : "cachealloc",
        "type" : 92
      }, {
        "name" : "specialfinalizeralloc",
        "type" : 92
      }, {
        "name" : "specialprofilealloc",
        "type" : 92
      }, {
        "name" : "speciallock",
        "type" : 8
      }, {
        "name" : "arenaHintAlloc",
        "type" : 92
      }, {
        "name" : "unused",
        "type" : 100
      } ],
      "name" : "struct{lock runtime.mutex; pages runtime.pageAlloc; sweepgen uint32; sweepdone uint32; sweepers uint32; allspans []*runtime.mspan; sweepSpans [2]runtime.gcSweepBuf; pagesInUse uint64; pagesSwept uint64; pagesSweptBasis uint64; sweepHeapLiveBasis uint64; sweepPagesPerByte float64; scavengeGoal uint64; reclaimIndex uint64; reclaimCredit uintptr; largealloc uint64; nlargealloc uint64; largefree uint64; nlargefree uint64; nsmallfree [67]uint64; arenas [1]*[4194304]*runtime.heapArena; heapArenaAlloc runtime.linearAlloc; arenaHints *runtime.arenaHint; arena runtime.linearAlloc; allArenas []runtime.arenaIdx; sweepArenas []runtime.arenaIdx; curArena struct{base uintptr; end uintptr}; _ uint32; central [134]struct{mcentral runtime.mcentral; pad [8]byte}; spanalloc runtime.fixalloc; cachealloc runtime.fixalloc; specialfinalizeralloc runtime.fixalloc; specialprofilealloc runtime.fixalloc; speciallock runtime.mutex; arenaHintAlloc runtime.fixalloc; unused *runtime.specialfinalizer}",
      "type" : "Struct",
      "underlying" : 39
    }, {
      "local-name" : "pageAlloc",
      "name" : "runtime.pageAlloc",
      "package" : 0,
      "type" : "Named",
      "underlying" : 41
    }, {
      "fields" : [ {
        "name" : "summary",
        "type" : 42
      }, {
        "name" : "chunks",
        "type" : 45
      }, {
        "name" : "searchAddr",
        "type" : 6
      }, {
        "name" : "scavAddr",
        "type" : 6
      }, {
        "name" : "scavReleased",
        "type" : 6
      }, {
        "name" : "start",
        "type" : 53
      }, {
        "name" : "end",
        "type" : 53
      }, {
        "name" : "inUse",
        "type" : 55
      }, {
        "name" : "mheapLock",
        "type" : 61
      }, {
        "name" : "sysStat",
        "type" : 60
      }, {
        "name" : "test",
        "type" : 62
      } ],
      "name" : "struct{summary [5][]runtime.pallocSum; chunks [8192]*[8192]runtime.pallocData; searchAddr uintptr; scavAddr uintptr; scavReleased uintptr; start runtime.chunkIdx; end runtime.chunkIdx; inUse runtime.addrRanges; mheapLock *runtime.mutex; sysStat *uint64; test bool}",
      "type" : "Struct",
      "underlying" : 41
    }, {
      "elem" : 43,
      "name" : "[5][]runtime.pallocSum",
      "type" : "Array",
      "underlying" : 42
    }, {
      "elem" : 44,
      "name" : "[]runtime.pallocSum",
      "type" : "Slice",
      "underlying" : 43
    }, {
      "local-name" : "pallocSum",
      "name" : "runtime.pallocSum",
      "package" : 0,
      "type" : "Named",
      "underlying" : 18
    }, {
      "elem" : 46,
      "name" : "[8192]*[8192]runtime.pallocData",
      "type" : "Array",
      "underlying" : 45
    }, {
      "elem" : 47,
      "name" : "*[8192]runtime.pallocData",
      "type" : "Pointer",
      "underlying" : 46
    }, {
      "elem" : 48,
      "name" : "[8192]runtime.pallocData",
      "type" : "Array",
      "underlying" : 47
    }, {
      "local-name" : "pallocData",
      "name" : "runtime.pallocData",
      "package" : 0,
      "type" : "Named",
      "underlying" : 49
    }, {
      "fields" : [ {
        "name" : "pallocBits",
        "type" : 50
      }, {
        "name" : "scavenged",
        "type" : 52
      } ],
      "name" : "struct{runtime.pallocBits; scavenged runtime.pageBits}",
      "type" : "Struct",
      "underlying" : 49
    }, {
      "local-name" : "pallocBits",
      "name" : "runtime.pallocBits",
      "package" : 0,
      "type" : "Named",
      "underlying" : 51
    }, {
      "elem" : 18,
      "name" : "[8]uint64",
      "type" : "Array",
      "underlying" : 51
    }, {
      "local-name" : "pageBits",
      "name" : "runtime.pageBits",
      "package" : 0,
      "type" : "Named",
      "underlying" : 51
    }, {
      "local-name" : "chunkIdx",
      "name" : "runtime.chunkIdx",
      "package" : 0,
      "type" : "Named",
      "underlying" : 54
    }, {
      "name" : "uint",
      "type" : "Basic",
      "underlying" : 54
    }, {
      "local-name" : "addrRanges",
      "name" : "runtime.addrRanges",
      "package" : 0,
      "type" : "Named",
      "underlying" : 56
    }, {
      "fields" : [ {
        "name" : "ranges",
        "type" : 57
      }, {
        "name" : "sysStat",
        "type" : 60
      } ],
      "name" : "struct{ranges []runtime.addrRange; sysStat *uint64}",
      "type" : "Struct",
      "underlying" : 56
    }, {
      "elem" : 58,
      "name" : "[]runtime.addrRange",
      "type" : "Slice",
      "underlying" : 57
    }, {
      "local-name" : "addrRange",
      "name" : "runtime.addrRange",
      "package" : 0,
      "type" : "Named",
      "underlying" : 59
    }, {
      "fields" : [ {
        "name" : "base",
        "type" : 6
      }, {
        "name" : "limit",
        "type" : 6
      } ],
      "name" : "struct{base uintptr; limit uintptr}",
      "type" : "Struct",
      "underlying" : 59
    }, {
      "elem" : 18,
      "name" : "*uint64",
      "type" : "Pointer",
      "underlying" : 60
    }, {
      "elem" : 8,
      "name" : "*runtime.mutex",
      "type" : "Pointer",
      "underlying" : 61
    }, {
      "name" : "bool",
      "type" : "Basic",
      "underlying" : 62
    }, {
      "elem" : 13,
      "name" : "[]*runtime.mspan",
      "type" : "Slice",
      "underlying" : 63
    }, {
      "elem" : 65,
      "name" : "[2]runtime.gcSweepBuf",
      "type" : "Array",
      "underlying" : 64
    }, {
      "local-name" : "gcSweepBuf",
      "name" : "runtime.gcSweepBuf",
      "package" : 0,
      "type" : "Named",
      "underlying" : 66
    }, {
      "fields" : [ {
        "name" : "spineLock",
        "type" : 8
      }, {
        "name" : "spine",
        "type" : 67
      }, {
        "name" : "spineLen",
        "type" : 6
      }, {
        "name" : "spineCap",
        "type" : 6
      }, {
        "name" : "index",
        "type" : 2
      } ],
      "name" : "struct{spineLock runtime.mutex; spine unsafe.Pointer; spineLen uintptr; spineCap uintptr; index uint32}",
      "type" : "Struct",
      "underlying" : 66
    }, {
      "local-name" : "Pointer",
      "name" : "unsafe.Pointer",
      "package" : 1,
      "type" : "Basic",
      "underlying" : 67
    }, {
      "name" : "float64",
      "type" : "Basic",
      "underlying" : 68
    }, {
      "elem" : 18,
      "name" : "[67]uint64",
      "type" : "Array",
      "underlying" : 69
    }, {
      "elem" : 71,
      "name" : "[1]*[4194304]*runtime.heapArena",
      "type" : "Array",
      "underlying" : 70
    }, {
      "elem" : 72,
      "name" : "*[4194304]*runtime.heapArena",
      "type" : "Pointer",
      "underlying" : 71
    }, {
      "elem" : 73,
      "name" : "[4194304]*runtime.heapArena",
      "type" : "Array",
      "underlying" : 72
    }, {
      "elem" : 74,
      "name" : "*runtime.heapArena",
      "type" : "Pointer",
      "underlying" : 73
    }, {
      "local-name" : "heapArena",
      "name" : "runtime.heapArena",
      "package" : 0,
      "type" : "Named",
      "underlying" : 75
    }, {
      "fields" : [ {
        "name" : "bitmap",
        "type" : 76
      }, {
        "name" : "spans",
        "type" : 77
      }, {
        "name" : "pageInUse",
        "type" : 78
      }, {
        "name" : "pageMarks",
        "type" : 78
      }, {
        "name" : "zeroedBase",
        "type" : 6
      } ],
      "name" : "struct{bitmap [2097152]byte; spans [8192]*runtime.mspan; pageInUse [1024]uint8; pageMarks [1024]uint8; zeroedBase uintptr}",
      "type" : "Struct",
      "underlying" : 75
    }, {
      "elem" : 30,
      "name" : "[2097152]byte",
      "type" : "Array",
      "underlying" : 76
    }, {
      "elem" : 13,
      "name" : "[8192]*runtime.mspan",
      "type" : "Array",
      "underlying" : 77
    }, {
      "elem" : 21,
      "name" : "[1024]uint8",
      "type" : "Array",
      "underlying" : 78
    }, {
      "local-name" : "linearAlloc",
      "name" : "runtime.linearAlloc",
      "package" : 0,
      "type" : "Named",
      "underlying" : 80
    }, {
      "fields" : [ {
        "name" : "next",
        "type" : 6
      }, {
        "name" : "mapped",
        "type" : 6
      }, {
        "name" : "end",
        "type" : 6
      } ],
      "name" : "struct{next uintptr; mapped uintptr; end uintptr}",
      "type" : "Struct",
      "underlying" : 80
    }, {
      "elem" : 82,
      "name" : "*runtime.arenaHint",
      "type" : "Pointer",
      "underlying" : 81
    }, {
      "local-name" : "arenaHint",
      "name" : "runtime.arenaHint",
      "package" : 0,
      "type" : "Named",
      "underlying" : 83
    }, {
      "fields" : [ {
        "name" : "addr",
        "type" : 6
      }, {
        "name" : "down",
        "type" : 62
      }, {
        "name" : "next",
        "type" : 81
      } ],
      "name" : "struct{addr uintptr; down bool; next *runtime.arenaHint}",
      "type" : "Struct",
      "underlying" : 83
    }, {
      "elem" : 85,
      "name" : "[]runtime.arenaIdx",
      "type" : "Slice",
      "underlying" : 84
    }, {
      "local-name" : "arenaIdx",
      "name" : "runtime.arenaIdx",
      "package" : 0,
      "type" : "Named",
      "underlying" : 54
    }, {
      "fields" : [ {
        "name" : "base",
        "type" : 6
      }, {
        "name" : "end",
        "type" : 6
      } ],
      "name" : "struct{base uintptr; end uintptr}",
      "type" : "Struct",
      "underlying" : 86
    }, {
      "elem" : 88,
      "name" : "[134]struct{mcentral runtime.mcentral; pad [8]byte}",
      "type" : "Array",
      "underlying" : 87
    }, {
      "fields" : [ {
        "name" : "mcentral",
        "type" : 89
      }, {
        "name" : "pad",
        "type" : 91
      } ],
      "name" : "struct{mcentral runtime.mcentral; pad [8]byte}",
      "type" : "Struct",
      "underlying" : 88
    }, {
      "local-name" : "mcentral",
      "name" : "runtime.mcentral",
      "package" : 0,
      "type" : "Named",
      "underlying" : 90
    }, {
      "fields" : [ {
        "name" : "lock",
        "type" : 8
      }, {
        "name" : "spanclass",
        "type" : 23
      }, {
        "name" : "nonempty",
        "type" : 11
      }, {
        "name" : "empty",
        "type" : 11
      }, {
        "name" : "nmalloc",
        "type" : 18
      } ],
      "name" : "struct{lock runtime.mutex; spanclass runtime.spanClass; nonempty runtime.mSpanList; empty runtime.mSpanList; nmalloc uint64}",
      "type" : "Struct",
      "underlying" : 90
    }, {
      "elem" : 30,
      "name" : "[8]byte",
      "type" : "Array",
      "underlying" : 91
    }, {
      "local-name" : "fixalloc",
      "name" : "runtime.fixalloc",
      "package" : 0,
      "type" : "Named",
      "underlying" : 93
    }, {
      "fields" : [ {
        "name" : "size",
        "type" : 6
      }, {
        "name" : "first",
        "type" : 94
      }, {
        "name" : "arg",
        "type" : 67
      }, {
        "name" : "list",
        "type" : 97
      }, {
        "name" : "chunk",
        "type" : 6
      }, {
        "name" : "nchunk",
        "type" : 2
      }, {
        "name" : "inuse",
        "type" : 6
      }, {
        "name" : "stat",
        "type" : 60
      }, {
        "name" : "zero",
        "type" : 62
      } ],
      "name" : "struct{size uintptr; first func(arg unsafe.Pointer, p unsafe.Pointer); arg unsafe.Pointer; list *runtime.mlink; chunk uintptr; nchunk uint32; inuse uintptr; stat *uint64; zero bool}",
      "type" : "Struct",
      "underlying" : 93
    }, {
      "name" : "func(arg unsafe.Pointer, p unsafe.Pointer)",
      "params" : 95,
      "recv" : -1,
      "results" : 96,
      "type" : "Signature",
      "underlying" : 94,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "arg",
        "type" : 67
      }, {
        "name" : "p",
        "type" : 67
      } ],
      "name" : "(arg unsafe.Pointer, p unsafe.Pointer)",
      "type" : "Tuple",
      "underlying" : 95
    }, {
      "fields" : [ ],
      "name" : "()",
      "type" : "Tuple",
      "underlying" : 96
    }, {
      "elem" : 98,
      "name" : "*runtime.mlink",
      "type" : "Pointer",
      "underlying" : 97
    }, {
      "local-name" : "mlink",
      "name" : "runtime.mlink",
      "package" : 0,
      "type" : "Named",
      "underlying" : 99
    }, {
      "fields" : [ {
        "name" : "next",
        "type" : 97
      } ],
      "name" : "struct{next *runtime.mlink}",
      "type" : "Struct",
      "underlying" : 99
    }, {
      "elem" : 101,
      "name" : "*runtime.specialfinalizer",
      "type" : "Pointer",
      "underlying" : 100
    }, {
      "local-name" : "specialfinalizer",
      "name" : "runtime.specialfinalizer",
      "package" : 0,
      "type" : "Named",
      "underlying" : 102
    }, {
      "fields" : [ {
        "name" : "special",
        "type" : 28
      }, {
        "name" : "fn",
        "type" : 103
      }, {
        "name" : "nret",
        "type" : 6
      }, {
        "name" : "fint",
        "type" : 106
      }, {
        "name" : "ot",
        "type" : 116
      } ],
      "name" : "struct{special runtime.special; fn *runtime.funcval; nret uintptr; fint *runtime._type; ot *runtime.ptrtype}",
      "type" : "Struct",
      "underlying" : 102
    }, {
      "elem" : 104,
      "name" : "*runtime.funcval",
      "type" : "Pointer",
      "underlying" : 103
    }, {
      "local-name" : "funcval",
      "name" : "runtime.funcval",
      "package" : 0,
      "type" : "Named",
      "underlying" : 105
    }, {
      "fields" : [ {
        "name" : "fn",
        "type" : 6
      } ],
      "name" : "struct{fn uintptr}",
      "type" : "Struct",
      "underlying" : 105
    }, {
      "elem" : 107,
      "name" : "*runtime._type",
      "type" : "Pointer",
      "underlying" : 106
    }, {
      "local-name" : "_type",
      "name" : "runtime._type",
      "package" : 0,
      "type" : "Named",
      "underlying" : 108
    }, {
      "fields" : [ {
        "name" : "size",
        "type" : 6
      }, {
        "name" : "ptrdata",
        "type" : 6
      }, {
        "name" : "hash",
        "type" : 2
      }, {
        "name" : "tflag",
        "type" : 109
      }, {
        "name" : "align",
        "type" : 21
      }, {
        "name" : "fieldAlign",
        "type" : 21
      }, {
        "name" : "kind",
        "type" : 21
      }, {
        "name" : "equal",
        "type" : 110
      }, {
        "name" : "gcdata",
        "type" : 113
      }, {
        "name" : "str",
        "type" : 114
      }, {
        "name" : "ptrToThis",
        "type" : 115
      } ],
      "name" : "struct{size uintptr; ptrdata uintptr; hash uint32; tflag runtime.tflag; align uint8; fieldAlign uint8; kind uint8; equal func(unsafe.Pointer, unsafe.Pointer) bool; gcdata *byte; str runtime.nameOff; ptrToThis runtime.typeOff}",
      "type" : "Struct",
      "underlying" : 108
    }, {
      "local-name" : "tflag",
      "name" : "runtime.tflag",
      "package" : 0,
      "type" : "Named",
      "underlying" : 21
    }, {
      "name" : "func(unsafe.Pointer, unsafe.Pointer) bool",
      "params" : 111,
      "recv" : -1,
      "results" : 112,
      "type" : "Signature",
      "underlying" : 110,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 67
      }, {
        "name" : "",
        "type" : 67
      } ],
      "name" : "(unsafe.Pointer, unsafe.Pointer)",
      "type" : "Tuple",
      "underlying" : 111
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 62
      } ],
      "name" : "(bool)",
      "type" : "Tuple",
      "underlying" : 112
    }, {
      "elem" : 30,
      "name" : "*byte",
      "type" : "Pointer",
      "underlying" : 113
    }, {
      "local-name" : "nameOff",
      "name" : "runtime.nameOff",
      "package" : 0,
      "type" : "Named",
      "underlying" : 32
    }, {
      "local-name" : "typeOff",
      "name" : "runtime.typeOff",
      "package" : 0,
      "type" : "Named",
      "underlying" : 32
    }, {
      "elem" : 117,
      "name" : "*runtime.ptrtype",
      "type" : "Pointer",
      "underlying" : 116
    }, {
      "local-name" : "ptrtype",
      "name" : "runtime.ptrtype",
      "package" : 0,
      "type" : "Named",
      "underlying" : 118
    }, {
      "fields" : [ {
        "name" : "typ",
        "type" : 107
      }, {
        "name" : "elem",
        "type" : 106
      } ],
      "name" : "struct{typ runtime._type; elem *runtime._type}",
      "type" : "Struct",
      "underlying" : 118
    }, {
      "local-name" : "mstats",
      "name" : "runtime.mstats",
      "package" : 0,
      "type" : "Named",
      "underlying" : 120
    }, {
      "fields" : [ {
        "name" : "alloc",
        "type" : 18
      }, {
        "name" : "total_alloc",
        "type" : 18
      }, {
        "name" : "sys",
        "type" : 18
      }, {
        "name" : "nlookup",
        "type" : 18
      }, {
        "name" : "nmalloc",
        "type" : 18
      }, {
        "name" : "nfree",
        "type" : 18
      }, {
        "name" : "heap_alloc",
        "type" : 18
      }, {
        "name" : "heap_sys",
        "type" : 18
      }, {
        "name" : "heap_idle",
        "type" : 18
      }, {
        "name" : "heap_inuse",
        "type" : 18
      }, {
        "name" : "heap_released",
        "type" : 18
      }, {
        "name" : "heap_objects",
        "type" : 18
      }, {
        "name" : "stacks_inuse",
        "type" : 18
      }, {
        "name" : "stacks_sys",
        "type" : 18
      }, {
        "name" : "mspan_inuse",
        "type" : 18
      }, {
        "name" : "mspan_sys",
        "type" : 18
      }, {
        "name" : "mcache_inuse",
        "type" : 18
      }, {
        "name" : "mcache_sys",
        "type" : 18
      }, {
        "name" : "buckhash_sys",
        "type" : 18
      }, {
        "name" : "gc_sys",
        "type" : 18
      }, {
        "name" : "other_sys",
        "type" : 18
      }, {
        "name" : "next_gc",
        "type" : 18
      }, {
        "name" : "last_gc_unix",
        "type" : 18
      }, {
        "name" : "pause_total_ns",
        "type" : 18
      }, {
        "name" : "pause_ns",
        "type" : 121
      }, {
        "name" : "pause_end",
        "type" : 121
      }, {
        "name" : "numgc",
        "type" : 2
      }, {
        "name" : "numforcedgc",
        "type" : 2
      }, {
        "name" : "gc_cpu_fraction",
        "type" : 68
      }, {
        "name" : "enablegc",
        "type" : 62
      }, {
        "name" : "debuggc",
        "type" : 62
      }, {
        "name" : "by_size",
        "type" : 122
      }, {
        "name" : "last_gc_nanotime",
        "type" : 18
      }, {
        "name" : "tinyallocs",
        "type" : 18
      }, {
        "name" : "last_next_gc",
        "type" : 18
      }, {
        "name" : "last_heap_inuse",
        "type" : 18
      }, {
        "name" : "triggerRatio",
        "type" : 68
      }, {
        "name" : "gc_trigger",
        "type" : 18
      }, {
        "name" : "heap_live",
        "type" : 18
      }, {
        "name" : "heap_scan",
        "type" : 18
      }, {
        "name" : "heap_marked",
        "type" : 18
      } ],
      "name" : "struct{alloc uint64; total_alloc uint64; sys uint64; nlookup uint64; nmalloc uint64; nfree uint64; heap_alloc uint64; heap_sys uint64; heap_idle uint64; heap_inuse uint64; heap_released uint64; heap_objects uint64; stacks_inuse uint64; stacks_sys uint64; mspan_inuse uint64; mspan_sys uint64; mcache_inuse uint64; mcache_sys uint64; buckhash_sys uint64; gc_sys uint64; other_sys uint64; next_gc uint64; last_gc_unix uint64; pause_total_ns uint64; pause_ns [256]uint64; pause_end [256]uint64; numgc uint32; numforcedgc uint32; gc_cpu_fraction float64; enablegc bool; debuggc bool; by_size [67]struct{size uint32; nmalloc uint64; nfree uint64}; last_gc_nanotime uint64; tinyallocs uint64; last_next_gc uint64; last_heap_inuse uint64; triggerRatio float64; gc_trigger uint64; heap_live uint64; heap_scan uint64; heap_marked uint64}",
      "type" : "Struct",
      "underlying" : 120
    }, {
      "elem" : 18,
      "name" : "[256]uint64",
      "type" : "Array",
      "underlying" : 121
    }, {
      "elem" : 123,
      "name" : "[67]struct{size uint32; nmalloc uint64; nfree uint64}",
      "type" : "Array",
      "underlying" : 122
    }, {
      "fields" : [ {
        "name" : "size",
        "type" : 2
      }, {
        "name" : "nmalloc",
        "type" : 18
      }, {
        "name" : "nfree",
        "type" : 18
      } ],
      "name" : "struct{size uint32; nmalloc uint64; nfree uint64}",
      "type" : "Struct",
      "underlying" : 123
    }, {
      "elem" : 125,
      "name" : "*runtime.g",
      "type" : "Pointer",
      "underlying" : 124
    }, {
      "local-name" : "g",
      "name" : "runtime.g",
      "package" : 0,
      "type" : "Named",
      "underlying" : 126
    }, {
      "fields" : [ {
        "name" : "stack",
        "type" : 4
      }, {
        "name" : "stackguard0",
        "type" : 6
      }, {
        "name" : "stackguard1",
        "type" : 6
      }, {
        "name" : "_panic",
        "type" : 127
      }, {
        "name" : "_defer",
        "type" : 131
      }, {
        "name" : "m",
        "type" : 134
      }, {
        "name" : "sched",
        "type" : 137
      }, {
        "name" : "syscallsp",
        "type" : 6
      }, {
        "name" : "syscallpc",
        "type" : 6
      }, {
        "name" : "stktopsp",
        "type" : 6
      }, {
        "name" : "param",
        "type" : 67
      }, {
        "name" : "atomicstatus",
        "type" : 2
      }, {
        "name" : "stackLock",
        "type" : 2
      }, {
        "name" : "goid",
        "type" : 148
      }, {
        "name" : "schedlink",
        "type" : 139
      }, {
        "name" : "waitsince",
        "type" : 148
      }, {
        "name" : "waitreason",
        "type" : 172
      }, {
        "name" : "preempt",
        "type" : 62
      }, {
        "name" : "preemptStop",
        "type" : 62
      }, {
        "name" : "preemptShrink",
        "type" : 62
      }, {
        "name" : "asyncSafePoint",
        "type" : 62
      }, {
        "name" : "paniconfault",
        "type" : 62
      }, {
        "name" : "gcscandone",
        "type" : 62
      }, {
        "name" : "throwsplit",
        "type" : 62
      }, {
        "name" : "activeStackChans",
        "type" : 62
      }, {
        "name" : "raceignore",
        "type" : 150
      }, {
        "name" : "sysblocktraced",
        "type" : 62
      }, {
        "name" : "sysexitticks",
        "type" : 148
      }, {
        "name" : "traceseq",
        "type" : 18
      }, {
        "name" : "tracelastp",
        "type" : 147
      }, {
        "name" : "lockedm",
        "type" : 155
      }, {
        "name" : "sig",
        "type" : 2
      }, {
        "name" : "writebuf",
        "type" : 173
      }, {
        "name" : "sigcode0",
        "type" : 6
      }, {
        "name" : "sigcode1",
        "type" : 6
      }, {
        "name" : "sigpc",
        "type" : 6
      }, {
        "name" : "gopc",
        "type" : 6
      }, {
        "name" : "ancestors",
        "type" : 174
      }, {
        "name" : "startpc",
        "type" : 6
      }, {
        "name" : "racectx",
        "type" : 6
      }, {
        "name" : "waiting",
        "type" : 179
      }, {
        "name" : "cgoCtxt",
        "type" : 178
      }, {
        "name" : "labels",
        "type" : 67
      }, {
        "name" : "timer",
        "type" : 187
      }, {
        "name" : "selectDone",
        "type" : 2
      }, {
        "name" : "gcAssistBytes",
        "type" : 148
      } ],
      "name" : "struct{stack runtime.stack; stackguard0 uintptr; stackguard1 uintptr; _panic *runtime._panic; _defer *runtime._defer; m *runtime.m; sched runtime.gobuf; syscallsp uintptr; syscallpc uintptr; stktopsp uintptr; param unsafe.Pointer; atomicstatus uint32; stackLock uint32; goid int64; schedlink runtime.guintptr; waitsince int64; waitreason runtime.waitReason; preempt bool; preemptStop bool; preemptShrink bool; asyncSafePoint bool; paniconfault bool; gcscandone bool; throwsplit bool; activeStackChans bool; raceignore int8; sysblocktraced bool; sysexitticks int64; traceseq uint64; tracelastp runtime.puintptr; lockedm runtime.muintptr; sig uint32; writebuf []byte; sigcode0 uintptr; sigcode1 uintptr; sigpc uintptr; gopc uintptr; ancestors *[]runtime.ancestorInfo; startpc uintptr; racectx uintptr; waiting *runtime.sudog; cgoCtxt []uintptr; labels unsafe.Pointer; timer *runtime.timer; selectDone uint32; gcAssistBytes int64}",
      "type" : "Struct",
      "underlying" : 126
    }, {
      "elem" : 128,
      "name" : "*runtime._panic",
      "type" : "Pointer",
      "underlying" : 127
    }, {
      "local-name" : "_panic",
      "name" : "runtime._panic",
      "package" : 0,
      "type" : "Named",
      "underlying" : 129
    }, {
      "fields" : [ {
        "name" : "argp",
        "type" : 67
      }, {
        "name" : "arg",
        "type" : 130
      }, {
        "name" : "link",
        "type" : 127
      }, {
        "name" : "pc",
        "type" : 6
      }, {
        "name" : "sp",
        "type" : 67
      }, {
        "name" : "recovered",
        "type" : 62
      }, {
        "name" : "aborted",
        "type" : 62
      }, {
        "name" : "goexit",
        "type" : 62
      } ],
      "name" : "struct{argp unsafe.Pointer; arg interface{}; link *runtime._panic; pc uintptr; sp unsafe.Pointer; recovered bool; aborted bool; goexit bool}",
      "type" : "Struct",
      "underlying" : 129
    }, {
      "methods" : [ ],
      "name" : "interface{}",
      "type" : "Interface",
      "underlying" : 130
    }, {
      "elem" : 132,
      "name" : "*runtime._defer",
      "type" : "Pointer",
      "underlying" : 131
    }, {
      "local-name" : "_defer",
      "name" : "runtime._defer",
      "package" : 0,
      "type" : "Named",
      "underlying" : 133
    }, {
      "fields" : [ {
        "name" : "siz",
        "type" : 32
      }, {
        "name" : "started",
        "type" : 62
      }, {
        "name" : "heap",
        "type" : 62
      }, {
        "name" : "openDefer",
        "type" : 62
      }, {
        "name" : "sp",
        "type" : 6
      }, {
        "name" : "pc",
        "type" : 6
      }, {
        "name" : "fn",
        "type" : 103
      }, {
        "name" : "_panic",
        "type" : 127
      }, {
        "name" : "link",
        "type" : 131
      }, {
        "name" : "fd",
        "type" : 67
      }, {
        "name" : "varp",
        "type" : 6
      }, {
        "name" : "framepc",
        "type" : 6
      } ],
      "name" : "struct{siz int32; started bool; heap bool; openDefer bool; sp uintptr; pc uintptr; fn *runtime.funcval; _panic *runtime._panic; link *runtime._defer; fd unsafe.Pointer; varp uintptr; framepc uintptr}",
      "type" : "Struct",
      "underlying" : 133
    }, {
      "elem" : 135,
      "name" : "*runtime.m",
      "type" : "Pointer",
      "underlying" : 134
    }, {
      "local-name" : "m",
      "name" : "runtime.m",
      "package" : 0,
      "type" : "Named",
      "underlying" : 136
    }, {
      "fields" : [ {
        "name" : "g0",
        "type" : 124
      }, {
        "name" : "morebuf",
        "type" : 137
      }, {
        "name" : "divmod",
        "type" : 2
      }, {
        "name" : "procid",
        "type" : 18
      }, {
        "name" : "gsignal",
        "type" : 124
      }, {
        "name" : "goSigStack",
        "type" : 141
      }, {
        "name" : "sigmask",
        "type" : 143
      }, {
        "name" : "tls",
        "type" : 145
      }, {
        "name" : "mstartfn",
        "type" : 146
      }, {
        "name" : "curg",
        "type" : 124
      }, {
        "name" : "caughtsig",
        "type" : 139
      }, {
        "name" : "p",
        "type" : 147
      }, {
        "name" : "nextp",
        "type" : 147
      }, {
        "name" : "oldp",
        "type" : 147
      }, {
        "name" : "id",
        "type" : 148
      }, {
        "name" : "mallocing",
        "type" : 32
      }, {
        "name" : "throwing",
        "type" : 32
      }, {
        "name" : "preemptoff",
        "type" : 149
      }, {
        "name" : "locks",
        "type" : 32
      }, {
        "name" : "dying",
        "type" : 32
      }, {
        "name" : "profilehz",
        "type" : 32
      }, {
        "name" : "spinning",
        "type" : 62
      }, {
        "name" : "blocked",
        "type" : 62
      }, {
        "name" : "newSigstack",
        "type" : 62
      }, {
        "name" : "printlock",
        "type" : 150
      }, {
        "name" : "incgo",
        "type" : 62
      }, {
        "name" : "freeWait",
        "type" : 2
      }, {
        "name" : "fastrand",
        "type" : 144
      }, {
        "name" : "needextram",
        "type" : 62
      }, {
        "name" : "traceback",
        "type" : 21
      }, {
        "name" : "ncgocall",
        "type" : 18
      }, {
        "name" : "ncgo",
        "type" : 32
      }, {
        "name" : "cgoCallersUse",
        "type" : 2
      }, {
        "name" : "cgoCallers",
        "type" : 151
      }, {
        "name" : "park",
        "type" : 154
      }, {
        "name" : "alllink",
        "type" : 134
      }, {
        "name" : "schedlink",
        "type" : 155
      }, {
        "name" : "mcache",
        "type" : 156
      }, {
        "name" : "lockedg",
        "type" : 139
      }, {
        "name" : "createstack",
        "type" : 153
      }, {
        "name" : "lockedExt",
        "type" : 2
      }, {
        "name" : "lockedInt",
        "type" : 2
      }, {
        "name" : "nextwaitm",
        "type" : 155
      }, {
        "name" : "waitunlockf",
        "type" : 164
      }, {
        "name" : "waitlock",
        "type" : 67
      }, {
        "name" : "waittraceev",
        "type" : 30
      }, {
        "name" : "waittraceskip",
        "type" : 166
      }, {
        "name" : "startingtrace",
        "type" : 62
      }, {
        "name" : "syscalltick",
        "type" : 2
      }, {
        "name" : "freelink",
        "type" : 134
      }, {
        "name" : "libcall",
        "type" : 167
      }, {
        "name" : "libcallpc",
        "type" : 6
      }, {
        "name" : "libcallsp",
        "type" : 6
      }, {
        "name" : "libcallg",
        "type" : 139
      }, {
        "name" : "syscall",
        "type" : 167
      }, {
        "name" : "vdsoSP",
        "type" : 6
      }, {
        "name" : "vdsoPC",
        "type" : 6
      }, {
        "name" : "preemptGen",
        "type" : 2
      }, {
        "name" : "signalPending",
        "type" : 2
      }, {
        "name" : "dlogPerM",
        "type" : 169
      }, {
        "name" : "mOS",
        "type" : 171
      } ],
      "name" : "struct{g0 *runtime.g; morebuf runtime.gobuf; divmod uint32; procid uint64; gsignal *runtime.g; goSigStack runtime.gsignalStack; sigmask runtime.sigset; tls [6]uintptr; mstartfn func(); curg *runtime.g; caughtsig runtime.guintptr; p runtime.puintptr; nextp runtime.puintptr; oldp runtime.puintptr; id int64; mallocing int32; throwing int32; preemptoff string; locks int32; dying int32; profilehz int32; spinning bool; blocked bool; newSigstack bool; printlock int8; incgo bool; freeWait uint32; fastrand [2]uint32; needextram bool; traceback uint8; ncgocall uint64; ncgo int32; cgoCallersUse uint32; cgoCallers *runtime.cgoCallers; park runtime.note; alllink *runtime.m; schedlink runtime.muintptr; mcache *runtime.mcache; lockedg runtime.guintptr; createstack [32]uintptr; lockedExt uint32; lockedInt uint32; nextwaitm runtime.muintptr; waitunlockf func(*runtime.g, unsafe.Pointer) bool; waitlock unsafe.Pointer; waittraceev byte; waittraceskip int; startingtrace bool; syscalltick uint32; freelink *runtime.m; libcall runtime.libcall; libcallpc uintptr; libcallsp uintptr; libcallg runtime.guintptr; syscall runtime.libcall; vdsoSP uintptr; vdsoPC uintptr; preemptGen uint32; signalPending uint32; runtime.dlogPerM; runtime.mOS}",
      "type" : "Struct",
      "underlying" : 136
    }, {
      "local-name" : "gobuf",
      "name" : "runtime.gobuf",
      "package" : 0,
      "type" : "Named",
      "underlying" : 138
    }, {
      "fields" : [ {
        "name" : "sp",
        "type" : 6
      }, {
        "name" : "pc",
        "type" : 6
      }, {
        "name" : "g",
        "type" : 139
      }, {
        "name" : "ctxt",
        "type" : 67
      }, {
        "name" : "ret",
        "type" : 140
      }, {
        "name" : "lr",
        "type" : 6
      }, {
        "name" : "bp",
        "type" : 6
      } ],
      "name" : "struct{sp uintptr; pc uintptr; g runtime.guintptr; ctxt unsafe.Pointer; ret runtime/internal/sys.Uintreg; lr uintptr; bp uintptr}",
      "type" : "Struct",
      "underlying" : 138
    }, {
      "local-name" : "guintptr",
      "name" : "runtime.guintptr",
      "package" : 0,
      "type" : "Named",
      "underlying" : 6
    }, {
      "local-name" : "Uintreg",
      "name" : "runtime/internal/sys.Uintreg",
      "package" : 2,
      "type" : "Named",
      "underlying" : 18
    }, {
      "local-name" : "gsignalStack",
      "name" : "runtime.gsignalStack",
      "package" : 0,
      "type" : "Named",
      "underlying" : 142
    }, {
      "fields" : [ {
        "name" : "stack",
        "type" : 4
      }, {
        "name" : "stackguard0",
        "type" : 6
      }, {
        "name" : "stackguard1",
        "type" : 6
      }, {
        "name" : "stktopsp",
        "type" : 6
      } ],
      "name" : "struct{stack runtime.stack; stackguard0 uintptr; stackguard1 uintptr; stktopsp uintptr}",
      "type" : "Struct",
      "underlying" : 142
    }, {
      "local-name" : "sigset",
      "name" : "runtime.sigset",
      "package" : 0,
      "type" : "Named",
      "underlying" : 144
    }, {
      "elem" : 2,
      "name" : "[2]uint32",
      "type" : "Array",
      "underlying" : 144
    }, {
      "elem" : 6,
      "name" : "[6]uintptr",
      "type" : "Array",
      "underlying" : 145
    }, {
      "name" : "func()",
      "params" : 96,
      "recv" : -1,
      "results" : 96,
      "type" : "Signature",
      "underlying" : 146,
      "variadic" : false
    }, {
      "local-name" : "puintptr",
      "name" : "runtime.puintptr",
      "package" : 0,
      "type" : "Named",
      "underlying" : 6
    }, {
      "name" : "int64",
      "type" : "Basic",
      "underlying" : 148
    }, {
      "name" : "string",
      "type" : "Basic",
      "underlying" : 149
    }, {
      "name" : "int8",
      "type" : "Basic",
      "underlying" : 150
    }, {
      "elem" : 152,
      "name" : "*runtime.cgoCallers",
      "type" : "Pointer",
      "underlying" : 151
    }, {
      "local-name" : "cgoCallers",
      "name" : "runtime.cgoCallers",
      "package" : 0,
      "type" : "Named",
      "underlying" : 153
    }, {
      "elem" : 6,
      "name" : "[32]uintptr",
      "type" : "Array",
      "underlying" : 153
    }, {
      "local-name" : "note",
      "name" : "runtime.note",
      "package" : 0,
      "type" : "Named",
      "underlying" : 9
    }, {
      "local-name" : "muintptr",
      "name" : "runtime.muintptr",
      "package" : 0,
      "type" : "Named",
      "underlying" : 6
    }, {
      "elem" : 157,
      "name" : "*runtime.mcache",
      "type" : "Pointer",
      "underlying" : 156
    }, {
      "local-name" : "mcache",
      "name" : "runtime.mcache",
      "package" : 0,
      "type" : "Named",
      "underlying" : 158
    }, {
      "fields" : [ {
        "name" : "next_sample",
        "type" : 6
      }, {
        "name" : "local_scan",
        "type" : 6
      }, {
        "name" : "tiny",
        "type" : 6
      }, {
        "name" : "tinyoffset",
        "type" : 6
      }, {
        "name" : "local_tinyallocs",
        "type" : 6
      }, {
        "name" : "alloc",
        "type" : 159
      }, {
        "name" : "stackcache",
        "type" : 160
      }, {
        "name" : "local_largefree",
        "type" : 6
      }, {
        "name" : "local_nlargefree",
        "type" : 6
      }, {
        "name" : "local_nsmallfree",
        "type" : 163
      }, {
        "name" : "flushGen",
        "type" : 2
      } ],
      "name" : "struct{next_sample uintptr; local_scan uintptr; tiny uintptr; tinyoffset uintptr; local_tinyallocs uintptr; alloc [134]*runtime.mspan; stackcache [4]runtime.stackfreelist; local_largefree uintptr; local_nlargefree uintptr; local_nsmallfree [67]uintptr; flushGen uint32}",
      "type" : "Struct",
      "underlying" : 158
    }, {
      "elem" : 13,
      "name" : "[134]*runtime.mspan",
      "type" : "Array",
      "underlying" : 159
    }, {
      "elem" : 161,
      "name" : "[4]runtime.stackfreelist",
      "type" : "Array",
      "underlying" : 160
    }, {
      "local-name" : "stackfreelist",
      "name" : "runtime.stackfreelist",
      "package" : 0,
      "type" : "Named",
      "underlying" : 162
    }, {
      "fields" : [ {
        "name" : "list",
        "type" : 17
      }, {
        "name" : "size",
        "type" : 6
      } ],
      "name" : "struct{list runtime.gclinkptr; size uintptr}",
      "type" : "Struct",
      "underlying" : 162
    }, {
      "elem" : 6,
      "name" : "[67]uintptr",
      "type" : "Array",
      "underlying" : 163
    }, {
      "name" : "func(*runtime.g, unsafe.Pointer) bool",
      "params" : 165,
      "recv" : -1,
      "results" : 112,
      "type" : "Signature",
      "underlying" : 164,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 124
      }, {
        "name" : "",
        "type" : 67
      } ],
      "name" : "(*runtime.g, unsafe.Pointer)",
      "type" : "Tuple",
      "underlying" : 165
    }, {
      "name" : "int",
      "type" : "Basic",
      "underlying" : 166
    }, {
      "local-name" : "libcall",
      "name" : "runtime.libcall",
      "package" : 0,
      "type" : "Named",
      "underlying" : 168
    }, {
      "fields" : [ {
        "name" : "fn",
        "type" : 6
      }, {
        "name" : "n",
        "type" : 6
      }, {
        "name" : "args",
        "type" : 6
      }, {
        "name" : "r1",
        "type" : 6
      }, {
        "name" : "r2",
        "type" : 6
      }, {
        "name" : "err",
        "type" : 6
      } ],
      "name" : "struct{fn uintptr; n uintptr; args uintptr; r1 uintptr; r2 uintptr; err uintptr}",
      "type" : "Struct",
      "underlying" : 168
    }, {
      "local-name" : "dlogPerM",
      "name" : "runtime.dlogPerM",
      "package" : 0,
      "type" : "Named",
      "underlying" : 170
    }, {
      "fields" : [ ],
      "name" : "struct{}",
      "type" : "Struct",
      "underlying" : 170
    }, {
      "local-name" : "mOS",
      "name" : "runtime.mOS",
      "package" : 0,
      "type" : "Named",
      "underlying" : 170
    }, {
      "local-name" : "waitReason",
      "name" : "runtime.waitReason",
      "package" : 0,
      "type" : "Named",
      "underlying" : 21
    }, {
      "elem" : 30,
      "name" : "[]byte",
      "type" : "Slice",
      "underlying" : 173
    }, {
      "elem" : 175,
      "name" : "*[]runtime.ancestorInfo",
      "type" : "Pointer",
      "underlying" : 174
    }, {
      "elem" : 176,
      "name" : "[]runtime.ancestorInfo",
      "type" : "Slice",
      "underlying" : 175
    }, {
      "local-name" : "ancestorInfo",
      "name" : "runtime.ancestorInfo",
      "package" : 0,
      "type" : "Named",
      "underlying" : 177
    }, {
      "fields" : [ {
        "name" : "pcs",
        "type" : 178
      }, {
        "name" : "goid",
        "type" : 148
      }, {
        "name" : "gopc",
        "type" : 6
      } ],
      "name" : "struct{pcs []uintptr; goid int64; gopc uintptr}",
      "type" : "Struct",
      "underlying" : 177
    }, {
      "elem" : 6,
      "name" : "[]uintptr",
      "type" : "Slice",
      "underlying" : 178
    }, {
      "elem" : 180,
      "name" : "*runtime.sudog",
      "type" : "Pointer",
      "underlying" : 179
    }, {
      "local-name" : "sudog",
      "name" : "runtime.sudog",
      "package" : 0,
      "type" : "Named",
      "underlying" : 181
    }, {
      "fields" : [ {
        "name" : "g",
        "type" : 124
      }, {
        "name" : "isSelect",
        "type" : 62
      }, {
        "name" : "next",
        "type" : 179
      }, {
        "name" : "prev",
        "type" : 179
      }, {
        "name" : "elem",
        "type" : 67
      }, {
        "name" : "acquiretime",
        "type" : 148
      }, {
        "name" : "releasetime",
        "type" : 148
      }, {
        "name" : "ticket",
        "type" : 2
      }, {
        "name" : "parent",
        "type" : 179
      }, {
        "name" : "waitlink",
        "type" : 179
      }, {
        "name" : "waittail",
        "type" : 179
      }, {
        "name" : "c",
        "type" : 182
      } ],
      "name" : "struct{g *runtime.g; isSelect bool; next *runtime.sudog; prev *runtime.sudog; elem unsafe.Pointer; acquiretime int64; releasetime int64; ticket uint32; parent *runtime.sudog; waitlink *runtime.sudog; waittail *runtime.sudog; c *runtime.hchan}",
      "type" : "Struct",
      "underlying" : 181
    }, {
      "elem" : 183,
      "name" : "*runtime.hchan",
      "type" : "Pointer",
      "underlying" : 182
    }, {
      "local-name" : "hchan",
      "name" : "runtime.hchan",
      "package" : 0,
      "type" : "Named",
      "underlying" : 184
    }, {
      "fields" : [ {
        "name" : "qcount",
        "type" : 54
      }, {
        "name" : "dataqsiz",
        "type" : 54
      }, {
        "name" : "buf",
        "type" : 67
      }, {
        "name" : "elemsize",
        "type" : 22
      }, {
        "name" : "closed",
        "type" : 2
      }, {
        "name" : "elemtype",
        "type" : 106
      }, {
        "name" : "sendx",
        "type" : 54
      }, {
        "name" : "recvx",
        "type" : 54
      }, {
        "name" : "recvq",
        "type" : 185
      }, {
        "name" : "sendq",
        "type" : 185
      }, {
        "name" : "lock",
        "type" : 8
      } ],
      "name" : "struct{qcount uint; dataqsiz uint; buf unsafe.Pointer; elemsize uint16; closed uint32; elemtype *runtime._type; sendx uint; recvx uint; recvq runtime.waitq; sendq runtime.waitq; lock runtime.mutex}",
      "type" : "Struct",
      "underlying" : 184
    }, {
      "local-name" : "waitq",
      "name" : "runtime.waitq",
      "package" : 0,
      "type" : "Named",
      "underlying" : 186
    }, {
      "fields" : [ {
        "name" : "first",
        "type" : 179
      }, {
        "name" : "last",
        "type" : 179
      } ],
      "name" : "struct{first *runtime.sudog; last *runtime.sudog}",
      "type" : "Struct",
      "underlying" : 186
    }, {
      "elem" : 188,
      "name" : "*runtime.timer",
      "type" : "Pointer",
      "underlying" : 187
    }, {
      "local-name" : "timer",
      "name" : "runtime.timer",
      "package" : 0,
      "type" : "Named",
      "underlying" : 189
    }, {
      "fields" : [ {
        "name" : "pp",
        "type" : 147
      }, {
        "name" : "when",
        "type" : 148
      }, {
        "name" : "period",
        "type" : 148
      }, {
        "name" : "f",
        "type" : 190
      }, {
        "name" : "arg",
        "type" : 130
      }, {
        "name" : "seq",
        "type" : 6
      }, {
        "name" : "nextwhen",
        "type" : 148
      }, {
        "name" : "status",
        "type" : 2
      } ],
      "name" : "struct{pp runtime.puintptr; when int64; period int64; f func(interface{}, uintptr); arg interface{}; seq uintptr; nextwhen int64; status uint32}",
      "type" : "Struct",
      "underlying" : 189
    }, {
      "name" : "func(interface{}, uintptr)",
      "params" : 191,
      "recv" : -1,
      "results" : 96,
      "type" : "Signature",
      "underlying" : 190,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 130
      }, {
        "name" : "",
        "type" : 6
      } ],
      "name" : "(interface{}, uintptr)",
      "type" : "Tuple",
      "underlying" : 191
    }, {
      "name" : "func() *runtime.g",
      "params" : 96,
      "recv" : -1,
      "results" : 193,
      "type" : "Signature",
      "underlying" : 192,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 124
      } ],
      "name" : "(*runtime.g)",
      "type" : "Tuple",
      "underlying" : 193
    }, {
      "name" : "untyped bool",
      "type" : "Basic",
      "underlying" : 194
    }, {
      "name" : "func(s string)",
      "params" : 196,
      "recv" : -1,
      "results" : 96,
      "type" : "Signature",
      "underlying" : 195,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "s",
        "type" : 149
      } ],
      "name" : "(s string)",
      "type" : "Tuple",
      "underlying" : 196
    }, {
      "name" : "func(string, uint32, string)",
      "params" : 198,
      "recv" : -1,
      "results" : 96,
      "type" : "Signature",
      "underlying" : 197,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 149
      }, {
        "name" : "",
        "type" : 2
      }, {
        "name" : "",
        "type" : 149
      } ],
      "name" : "(string, uint32, string)",
      "type" : "Tuple",
      "underlying" : 198
    }, {
      "name" : "func(n uintptr, a uintptr) uintptr",
      "params" : 200,
      "recv" : -1,
      "results" : 201,
      "type" : "Signature",
      "underlying" : 199,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "n",
        "type" : 6
      }, {
        "name" : "a",
        "type" : 6
      } ],
      "name" : "(n uintptr, a uintptr)",
      "type" : "Tuple",
      "underlying" : 200
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 6
      } ],
      "name" : "(uintptr)",
      "type" : "Tuple",
      "underlying" : 201
    }, {
      "name" : "func(n uintptr, sysStat *uint64) unsafe.Pointer",
      "params" : 203,
      "recv" : -1,
      "results" : 204,
      "type" : "Signature",
      "underlying" : 202,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "n",
        "type" : 6
      }, {
        "name" : "sysStat",
        "type" : 60
      } ],
      "name" : "(n uintptr, sysStat *uint64)",
      "type" : "Tuple",
      "underlying" : 203
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 67
      } ],
      "name" : "(unsafe.Pointer)",
      "type" : "Tuple",
      "underlying" : 204
    }, {
      "name" : "untyped int",
      "type" : "Basic",
      "underlying" : 205
    }, {
      "name" : "untyped nil",
      "type" : "Basic",
      "underlying" : 206
    }, {
      "name" : "func(l *runtime.mutex)",
      "params" : 208,
      "recv" : -1,
      "results" : 96,
      "type" : "Signature",
      "underlying" : 207,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "l",
        "type" : 61
      } ],
      "name" : "(l *runtime.mutex)",
      "type" : "Tuple",
      "underlying" : 208
    }, {
      "name" : "func(order uint8) runtime.gclinkptr",
      "params" : 210,
      "recv" : -1,
      "results" : 211,
      "type" : "Signature",
      "underlying" : 209,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "order",
        "type" : 21
      } ],
      "name" : "(order uint8)",
      "type" : "Tuple",
      "underlying" : 210
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 17
      } ],
      "name" : "(runtime.gclinkptr)",
      "type" : "Tuple",
      "underlying" : 211
    }, {
      "elem" : 213,
      "name" : "*runtime.gclink",
      "type" : "Pointer",
      "underlying" : 212
    }, {
      "local-name" : "gclink",
      "name" : "runtime.gclink",
      "package" : 0,
      "type" : "Named",
      "underlying" : 214
    }, {
      "fields" : [ {
        "name" : "next",
        "type" : 17
      } ],
      "name" : "struct{next runtime.gclinkptr}",
      "type" : "Struct",
      "underlying" : 214
    }, {
      "name" : "func() *runtime.gclink",
      "params" : 96,
      "recv" : -1,
      "results" : 216,
      "type" : "Signature",
      "underlying" : 215,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 212
      } ],
      "name" : "(*runtime.gclink)",
      "type" : "Tuple",
      "underlying" : 216
    }, {
      "name" : "func(c *runtime.mcache, order uint8)",
      "params" : 218,
      "recv" : -1,
      "results" : 96,
      "type" : "Signature",
      "underlying" : 217,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "c",
        "type" : 156
      }, {
        "name" : "order",
        "type" : 21
      } ],
      "name" : "(c *runtime.mcache, order uint8)",
      "type" : "Tuple",
      "underlying" : 218
    }, {
      "name" : "func(n uintptr) int",
      "params" : 220,
      "recv" : -1,
      "results" : 221,
      "type" : "Signature",
      "underlying" : 219,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "n",
        "type" : 6
      } ],
      "name" : "(n uintptr)",
      "type" : "Tuple",
      "underlying" : 220
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 166
      } ],
      "name" : "(int)",
      "type" : "Tuple",
      "underlying" : 221
    }, {
      "name" : "func() bool",
      "params" : 96,
      "recv" : -1,
      "results" : 112,
      "type" : "Signature",
      "underlying" : 222,
      "variadic" : false
    }, {
      "name" : "func(span *runtime.mspan)",
      "params" : 224,
      "recv" : -1,
      "results" : 96,
      "type" : "Signature",
      "underlying" : 223,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "span",
        "type" : 13
      } ],
      "name" : "(span *runtime.mspan)",
      "type" : "Tuple",
      "underlying" : 224
    }, {
      "name" : "func(npages uintptr, stat *uint64) *runtime.mspan",
      "params" : 226,
      "recv" : -1,
      "results" : 227,
      "type" : "Signature",
      "underlying" : 225,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "npages",
        "type" : 6
      }, {
        "name" : "stat",
        "type" : 60
      } ],
      "name" : "(npages uintptr, stat *uint64)",
      "type" : "Tuple",
      "underlying" : 226
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 13
      } ],
      "name" : "(*runtime.mspan)",
      "type" : "Tuple",
      "underlying" : 227
    }, {
      "name" : "func(s *runtime.mspan)",
      "params" : 229,
      "recv" : -1,
      "results" : 96,
      "type" : "Signature",
      "underlying" : 228,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "s",
        "type" : 13
      } ],
      "name" : "(s *runtime.mspan)",
      "type" : "Tuple",
      "underlying" : 229
    }, {
      "name" : "func() uintptr",
      "params" : 96,
      "recv" : -1,
      "results" : 201,
      "type" : "Signature",
      "underlying" : 230,
      "variadic" : false
    }, {
      "name" : "func(p unsafe.Pointer, sz uintptr)",
      "params" : 232,
      "recv" : -1,
      "results" : 96,
      "type" : "Signature",
      "underlying" : 231,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "p",
        "type" : 67
      }, {
        "name" : "sz",
        "type" : 6
      } ],
      "name" : "(p unsafe.Pointer, sz uintptr)",
      "type" : "Tuple",
      "underlying" : 232
    }, {
      "name" : "func(addr unsafe.Pointer, sz uintptr)",
      "params" : 234,
      "recv" : -1,
      "results" : 96,
      "type" : "Signature",
      "underlying" : 233,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "addr",
        "type" : 67
      }, {
        "name" : "sz",
        "type" : 6
      } ],
      "name" : "(addr unsafe.Pointer, sz uintptr)",
      "type" : "Tuple",
      "underlying" : 234
    }, {
      "name" : "func(string, unsafe.Pointer, string)",
      "params" : 236,
      "recv" : -1,
      "results" : 96,
      "type" : "Signature",
      "underlying" : 235,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 149
      }, {
        "name" : "",
        "type" : 67
      }, {
        "name" : "",
        "type" : 149
      } ],
      "name" : "(string, unsafe.Pointer, string)",
      "type" : "Tuple",
      "underlying" : 236
    } ],
    "variables" : [ {
      "name" : "n",
      "package" : 0,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "[res0]",
      "package" : 0,
      "type" : 4,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "stackLarge",
      "package" : 0,
      "type" : 7,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "debug",
      "package" : 0,
      "type" : 31,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "stackpool",
      "package" : 0,
      "type" : 33,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "mheap_",
      "package" : 0,
      "type" : 38,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "physPageSize",
      "package" : 0,
      "type" : 6,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "memstats",
      "package" : 0,
      "type" : 119,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "thisg",
      "package" : 0,
      "type" : 124,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "m",
      "package" : 0,
      "type" : 134,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "g0",
      "package" : 0,
      "type" : 124,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "efence",
      "package" : 0,
      "type" : 32,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "stacks_sys",
      "package" : 0,
      "type" : 18,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "v",
      "package" : 0,
      "type" : 67,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "v",
      "package" : 0,
      "type" : 67,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "n2",
      "package" : 0,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "order",
      "package" : 0,
      "type" : 21,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "mcache",
      "package" : 0,
      "type" : 156,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "c",
      "package" : 0,
      "type" : 156,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "preemptoff",
      "package" : 0,
      "type" : 149,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "item",
      "package" : 0,
      "type" : 35,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "mu",
      "package" : 0,
      "type" : 8,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "x",
      "package" : 0,
      "type" : 17,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "stackcache",
      "package" : 0,
      "type" : 160,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "list",
      "package" : 0,
      "type" : 17,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "next",
      "package" : 0,
      "type" : 17,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "size",
      "package" : 0,
      "type" : 6,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "npage",
      "package" : 0,
      "type" : 6,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "lock",
      "package" : 0,
      "type" : 8,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "free",
      "package" : 0,
      "type" : 10,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "log2npage",
      "package" : 0,
      "type" : 166,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "s",
      "package" : 0,
      "type" : 13,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "first",
      "package" : 0,
      "type" : 13,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "stacks_inuse",
      "package" : 0,
      "type" : 18,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "elemsize",
      "package" : 0,
      "type" : 6,
      "exported" : false,
      "embedded" : false,
      "field" : true
    } ]
  },
  "go-version" : "1.14.3"
}