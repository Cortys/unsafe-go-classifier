{
  "usage" : {
    "file" : "string.go",
    "label1" : "cast-bytes",
    "label2" : "types",
    "line" : "292",
    "module" : "std",
    "pkg" : "runtime",
    "project" : "kubernetes/kubernetes",
    "snippet" : "*(*slice)(unsafe.Pointer(&b)) = slice{p, size, int(mem / 4)}",
    "version" : "std"
  },
  "cfg" : {
    "blocks" : [ {
      "update-vars" : [ ],
      "successors" : [ 2 ],
      "in-vars" : [ 0 ],
      "exit" : false,
      "out-vars" : [ 0 ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[entry]",
      "entry" : true,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ ],
      "in-vars" : [ ],
      "exit" : true,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[exit]",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 3, 4 ],
      "in-vars" : [ 0 ],
      "exit" : false,
      "out-vars" : [ 0 ],
      "decl-vars" : [ ],
      "line-start" : 283,
      "ast" : {
        "condition" : {
          "go-type" : 6,
          "kind" : "expression",
          "left" : {
            "coerced-to" : {
              "go-type" : 7,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 7,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "uintptr"
              }
            },
            "go-type" : 7,
            "kind" : "expression",
            "target" : {
              "go-type" : 2,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "size",
                "variable" : 0
              }
            },
            "type" : "cast"
          },
          "operator" : ">",
          "right" : {
            "go-type" : 7,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "70368744177664"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 285,
      "code" : "if uintptr(size) > maxAlloc/4 {\n\tthrow(\"out of memory\")\n}",
      "entry" : false,
      "use-vars" : [ 0 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 4 ],
      "in-vars" : [ 0 ],
      "exit" : false,
      "out-vars" : [ 0 ],
      "decl-vars" : [ ],
      "line-start" : 284,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 11,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "out of memory"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 9,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "throw"
            }
          },
          "go-type" : 8,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 284,
      "code" : "throw(\"out of memory\")",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 5 ],
      "in-vars" : [ 0 ],
      "exit" : false,
      "out-vars" : [ 2, 0 ],
      "decl-vars" : [ 2 ],
      "line-start" : 286,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "mem"
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 7,
            "kind" : "expression",
            "left" : {
              "coerced-to" : {
                "go-type" : 7,
                "kind" : "type",
                "type" : "identifier",
                "value" : {
                  "go-type" : 7,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "uintptr"
                }
              },
              "go-type" : 7,
              "kind" : "expression",
              "target" : {
                "go-type" : 2,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "size",
                  "variable" : 0
                }
              },
              "type" : "cast"
            },
            "operator" : "*",
            "right" : {
              "go-type" : 7,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "4"
              }
            },
            "type" : "binary"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 12,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "roundupsize"
            }
          },
          "go-type" : 7,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 286,
      "code" : "mem := roundupsize(uintptr(size) * 4)",
      "entry" : false,
      "use-vars" : [ 0 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 6 ],
      "in-vars" : [ 2, 0 ],
      "exit" : false,
      "out-vars" : [ 2, 0, 3 ],
      "decl-vars" : [ 3 ],
      "line-start" : 287,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "p"
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 7,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "mem",
              "variable" : 2
            }
          }, {
            "go-type" : 34,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Nil",
              "kind" : "ident",
              "value" : "nil"
            }
          }, {
            "go-type" : 27,
            "kind" : "constant",
            "value" : {
              "type" : "BOOL",
              "value" : "false"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 16,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "mallocgc"
            }
          },
          "go-type" : 15,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 287,
      "code" : "p := mallocgc(mem, nil, false)",
      "entry" : false,
      "use-vars" : [ 2 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 7, 8 ],
      "in-vars" : [ 2, 0, 3 ],
      "exit" : false,
      "out-vars" : [ 0, 3, 2 ],
      "decl-vars" : [ ],
      "line-start" : 288,
      "ast" : {
        "condition" : {
          "go-type" : 6,
          "kind" : "expression",
          "left" : {
            "go-type" : 7,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "mem",
              "variable" : 2
            }
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 7,
            "kind" : "expression",
            "left" : {
              "coerced-to" : {
                "go-type" : 7,
                "kind" : "type",
                "type" : "identifier",
                "value" : {
                  "go-type" : 7,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "uintptr"
                }
              },
              "go-type" : 7,
              "kind" : "expression",
              "target" : {
                "go-type" : 2,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "size",
                  "variable" : 0
                }
              },
              "type" : "cast"
            },
            "operator" : "*",
            "right" : {
              "go-type" : 7,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "4"
              }
            },
            "type" : "binary"
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 290,
      "code" : "if mem != uintptr(size)*4 {\n\tmemclrNoHeapPointers(add(p, uintptr(size)*4), mem-uintptr(size)*4)\n}",
      "entry" : false,
      "use-vars" : [ 2, 0 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 8 ],
      "in-vars" : [ 2, 0, 3 ],
      "exit" : false,
      "out-vars" : [ 2, 0, 3 ],
      "decl-vars" : [ ],
      "line-start" : 289,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "arguments" : [ {
              "go-type" : 15,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "p",
                "variable" : 3
              }
            }, {
              "go-type" : 7,
              "kind" : "expression",
              "left" : {
                "coerced-to" : {
                  "go-type" : 7,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 7,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "uintptr"
                  }
                },
                "go-type" : 7,
                "kind" : "expression",
                "target" : {
                  "go-type" : 2,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "size",
                    "variable" : 0
                  }
                },
                "type" : "cast"
              },
              "operator" : "*",
              "right" : {
                "go-type" : 7,
                "kind" : "constant",
                "value" : {
                  "type" : "INT",
                  "value" : "4"
                }
              },
              "type" : "binary"
            } ],
            "ellipsis" : false,
            "function" : {
              "go-type" : 37,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Func",
                "kind" : "ident",
                "value" : "add"
              }
            },
            "go-type" : 15,
            "kind" : "expression",
            "type" : "call"
          }, {
            "go-type" : 7,
            "kind" : "expression",
            "left" : {
              "go-type" : 7,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "mem",
                "variable" : 2
              }
            },
            "operator" : "-",
            "right" : {
              "go-type" : 7,
              "kind" : "expression",
              "left" : {
                "coerced-to" : {
                  "go-type" : 7,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 7,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "uintptr"
                  }
                },
                "go-type" : 7,
                "kind" : "expression",
                "target" : {
                  "go-type" : 2,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "size",
                    "variable" : 0
                  }
                },
                "type" : "cast"
              },
              "operator" : "*",
              "right" : {
                "go-type" : 7,
                "kind" : "constant",
                "value" : {
                  "type" : "INT",
                  "value" : "4"
                }
              },
              "type" : "binary"
            },
            "type" : "binary"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 35,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "memclrNoHeapPointers"
            }
          },
          "go-type" : 8,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 289,
      "code" : "memclrNoHeapPointers(add(p, uintptr(size)*4), mem-uintptr(size)*4)",
      "entry" : false,
      "use-vars" : [ 3, 0, 2 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 9 ],
      "in-vars" : [ 2, 0, 3 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 292,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 39,
          "kind" : "expression",
          "target" : {
            "coerced-to" : {
              "contained" : {
                "go-type" : 39,
                "kind" : "type",
                "type" : "identifier",
                "value" : {
                  "go-type" : 39,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "slice"
                }
              },
              "go-type" : 41,
              "kind" : "type",
              "type" : "pointer"
            },
            "go-type" : 41,
            "kind" : "expression",
            "target" : {
              "coerced-to" : {
                "go-type" : 15,
                "kind" : "type",
                "qualifier" : {
                  "ident-kind" : "PkgName",
                  "kind" : "ident",
                  "package" : 1,
                  "value" : "unsafe"
                },
                "type" : "identifier",
                "value" : {
                  "go-type" : 15,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "Pointer"
                }
              },
              "go-type" : 15,
              "kind" : "expression",
              "target" : {
                "go-type" : 42,
                "kind" : "expression",
                "operator" : "&",
                "target" : {
                  "go-type" : 4,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "b",
                    "variable" : 1
                  }
                },
                "type" : "unary"
              },
              "type" : "cast"
            },
            "type" : "cast"
          },
          "type" : "star"
        } ],
        "right" : [ {
          "declared" : {
            "go-type" : 39,
            "kind" : "type",
            "type" : "identifier",
            "value" : {
              "go-type" : 39,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "slice"
            }
          },
          "go-type" : 39,
          "kind" : "literal",
          "type" : "composite",
          "values" : [ {
            "go-type" : 15,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "p",
              "variable" : 3
            }
          }, {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "size",
              "variable" : 0
            }
          }, {
            "coerced-to" : {
              "go-type" : 2,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 2,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "int"
              }
            },
            "go-type" : 2,
            "kind" : "expression",
            "target" : {
              "go-type" : 7,
              "kind" : "expression",
              "left" : {
                "go-type" : 7,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "mem",
                  "variable" : 2
                }
              },
              "operator" : "/",
              "right" : {
                "go-type" : 7,
                "kind" : "constant",
                "value" : {
                  "type" : "INT",
                  "value" : "4"
                }
              },
              "type" : "binary"
            },
            "type" : "cast"
          } ]
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 292,
      "code" : "*(*slice)(unsafe.Pointer(&b)) = slice{p, size, int(mem / 4)}",
      "entry" : false,
      "use-vars" : [ 0, 2, 3 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 293,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ ]
      },
      "assign-vars" : [ ],
      "line-end" : 293,
      "code" : "return",
      "entry" : false,
      "use-vars" : [ ]
    } ],
    "code" : "// rawruneslice allocates a new rune slice. The rune slice is not zeroed.\nfunc rawruneslice(size int) (b []rune) {\n\tif uintptr(size) > maxAlloc/4 {\n\t\tthrow(\"out of memory\")\n\t}\n\tmem := roundupsize(uintptr(size) * 4)\n\tp := mallocgc(mem, nil, false)\n\tif mem != uintptr(size)*4 {\n\t\tmemclrNoHeapPointers(add(p, uintptr(size)*4), mem-uintptr(size)*4)\n\t}\n\n\t*(*slice)(unsafe.Pointer(&b)) = slice{p, size, int(mem / 4)}\n\treturn\n}",
    "defines" : [ 0 ],
    "functions" : [ {
      "name" : "rawruneslice",
      "package" : 0,
      "type" : 0,
      "exported" : false
    }, {
      "name" : "throw",
      "package" : 0,
      "type" : 9,
      "exported" : false
    }, {
      "name" : "roundupsize",
      "package" : 0,
      "type" : 12,
      "exported" : false
    }, {
      "name" : "mallocgc",
      "package" : 0,
      "type" : 16,
      "exported" : false
    }, {
      "name" : "memclrNoHeapPointers",
      "package" : 0,
      "type" : 35,
      "exported" : false
    }, {
      "name" : "add",
      "package" : 0,
      "type" : 37,
      "exported" : false
    } ],
    "line-end" : 294,
    "line-start" : 282,
    "names" : [ "rawruneslice" ],
    "package" : 0,
    "packages" : [ {
      "name" : "runtime",
      "path" : "runtime"
    }, {
      "name" : "unsafe",
      "path" : "unsafe"
    } ],
    "params" : [ 0 ],
    "receivers" : [ ],
    "results" : [ 1 ],
    "type" : "function",
    "types" : [ {
      "name" : "func(size int) (b []rune)",
      "params" : 1,
      "recv" : -1,
      "results" : 3,
      "type" : "Signature",
      "underlying" : 0,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "size",
        "type" : 2
      } ],
      "name" : "(size int)",
      "type" : "Tuple",
      "underlying" : 1
    }, {
      "name" : "int",
      "type" : "Basic",
      "underlying" : 2
    }, {
      "fields" : [ {
        "name" : "b",
        "type" : 4
      } ],
      "name" : "(b []rune)",
      "type" : "Tuple",
      "underlying" : 3
    }, {
      "elem" : 5,
      "name" : "[]rune",
      "type" : "Slice",
      "underlying" : 4
    }, {
      "name" : "rune",
      "type" : "Basic",
      "underlying" : 5
    }, {
      "name" : "untyped bool",
      "type" : "Basic",
      "underlying" : 6
    }, {
      "name" : "uintptr",
      "type" : "Basic",
      "underlying" : 7
    }, {
      "fields" : [ ],
      "name" : "()",
      "type" : "Tuple",
      "underlying" : 8
    }, {
      "name" : "func(s string)",
      "params" : 10,
      "recv" : -1,
      "results" : 8,
      "type" : "Signature",
      "underlying" : 9,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "s",
        "type" : 11
      } ],
      "name" : "(s string)",
      "type" : "Tuple",
      "underlying" : 10
    }, {
      "name" : "string",
      "type" : "Basic",
      "underlying" : 11
    }, {
      "name" : "func(size uintptr) uintptr",
      "params" : 13,
      "recv" : -1,
      "results" : 14,
      "type" : "Signature",
      "underlying" : 12,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "size",
        "type" : 7
      } ],
      "name" : "(size uintptr)",
      "type" : "Tuple",
      "underlying" : 13
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 7
      } ],
      "name" : "(uintptr)",
      "type" : "Tuple",
      "underlying" : 14
    }, {
      "local-name" : "Pointer",
      "name" : "unsafe.Pointer",
      "package" : 1,
      "type" : "Basic",
      "underlying" : 15
    }, {
      "name" : "func(size uintptr, typ *runtime._type, needzero bool) unsafe.Pointer",
      "params" : 17,
      "recv" : -1,
      "results" : 33,
      "type" : "Signature",
      "underlying" : 16,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "size",
        "type" : 7
      }, {
        "name" : "typ",
        "type" : 18
      }, {
        "name" : "needzero",
        "type" : 27
      } ],
      "name" : "(size uintptr, typ *runtime._type, needzero bool)",
      "type" : "Tuple",
      "underlying" : 17
    }, {
      "elem" : 19,
      "name" : "*runtime._type",
      "type" : "Pointer",
      "underlying" : 18
    }, {
      "local-name" : "_type",
      "name" : "runtime._type",
      "package" : 0,
      "type" : "Named",
      "underlying" : 20
    }, {
      "fields" : [ {
        "name" : "size",
        "type" : 7
      }, {
        "name" : "ptrdata",
        "type" : 7
      }, {
        "name" : "hash",
        "type" : 21
      }, {
        "name" : "tflag",
        "type" : 22
      }, {
        "name" : "align",
        "type" : 23
      }, {
        "name" : "fieldAlign",
        "type" : 23
      }, {
        "name" : "kind",
        "type" : 23
      }, {
        "name" : "equal",
        "type" : 24
      }, {
        "name" : "gcdata",
        "type" : 28
      }, {
        "name" : "str",
        "type" : 30
      }, {
        "name" : "ptrToThis",
        "type" : 32
      } ],
      "name" : "struct{size uintptr; ptrdata uintptr; hash uint32; tflag runtime.tflag; align uint8; fieldAlign uint8; kind uint8; equal func(unsafe.Pointer, unsafe.Pointer) bool; gcdata *byte; str runtime.nameOff; ptrToThis runtime.typeOff}",
      "type" : "Struct",
      "underlying" : 20
    }, {
      "name" : "uint32",
      "type" : "Basic",
      "underlying" : 21
    }, {
      "local-name" : "tflag",
      "name" : "runtime.tflag",
      "package" : 0,
      "type" : "Named",
      "underlying" : 23
    }, {
      "name" : "uint8",
      "type" : "Basic",
      "underlying" : 23
    }, {
      "name" : "func(unsafe.Pointer, unsafe.Pointer) bool",
      "params" : 25,
      "recv" : -1,
      "results" : 26,
      "type" : "Signature",
      "underlying" : 24,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 15
      }, {
        "name" : "",
        "type" : 15
      } ],
      "name" : "(unsafe.Pointer, unsafe.Pointer)",
      "type" : "Tuple",
      "underlying" : 25
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 27
      } ],
      "name" : "(bool)",
      "type" : "Tuple",
      "underlying" : 26
    }, {
      "name" : "bool",
      "type" : "Basic",
      "underlying" : 27
    }, {
      "elem" : 29,
      "name" : "*byte",
      "type" : "Pointer",
      "underlying" : 28
    }, {
      "name" : "byte",
      "type" : "Basic",
      "underlying" : 29
    }, {
      "local-name" : "nameOff",
      "name" : "runtime.nameOff",
      "package" : 0,
      "type" : "Named",
      "underlying" : 31
    }, {
      "name" : "int32",
      "type" : "Basic",
      "underlying" : 31
    }, {
      "local-name" : "typeOff",
      "name" : "runtime.typeOff",
      "package" : 0,
      "type" : "Named",
      "underlying" : 31
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 15
      } ],
      "name" : "(unsafe.Pointer)",
      "type" : "Tuple",
      "underlying" : 33
    }, {
      "name" : "untyped nil",
      "type" : "Basic",
      "underlying" : 34
    }, {
      "name" : "func(ptr unsafe.Pointer, n uintptr)",
      "params" : 36,
      "recv" : -1,
      "results" : 8,
      "type" : "Signature",
      "underlying" : 35,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "ptr",
        "type" : 15
      }, {
        "name" : "n",
        "type" : 7
      } ],
      "name" : "(ptr unsafe.Pointer, n uintptr)",
      "type" : "Tuple",
      "underlying" : 36
    }, {
      "name" : "func(p unsafe.Pointer, x uintptr) unsafe.Pointer",
      "params" : 38,
      "recv" : -1,
      "results" : 33,
      "type" : "Signature",
      "underlying" : 37,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "p",
        "type" : 15
      }, {
        "name" : "x",
        "type" : 7
      } ],
      "name" : "(p unsafe.Pointer, x uintptr)",
      "type" : "Tuple",
      "underlying" : 38
    }, {
      "local-name" : "slice",
      "name" : "runtime.slice",
      "package" : 0,
      "type" : "Named",
      "underlying" : 40
    }, {
      "fields" : [ {
        "name" : "array",
        "type" : 15
      }, {
        "name" : "len",
        "type" : 2
      }, {
        "name" : "cap",
        "type" : 2
      } ],
      "name" : "struct{array unsafe.Pointer; len int; cap int}",
      "type" : "Struct",
      "underlying" : 40
    }, {
      "elem" : 39,
      "name" : "*runtime.slice",
      "type" : "Pointer",
      "underlying" : 41
    }, {
      "elem" : 4,
      "name" : "*[]rune",
      "type" : "Pointer",
      "underlying" : 42
    } ],
    "variables" : [ {
      "name" : "size",
      "package" : 0,
      "type" : 2,
      "exported" : false
    }, {
      "name" : "b",
      "package" : 0,
      "type" : 4,
      "exported" : false
    }, {
      "name" : "mem",
      "package" : 0,
      "type" : 7,
      "exported" : false
    }, {
      "name" : "p",
      "package" : 0,
      "type" : 15,
      "exported" : false
    } ]
  },
  "go-version" : "1.14.3"
}