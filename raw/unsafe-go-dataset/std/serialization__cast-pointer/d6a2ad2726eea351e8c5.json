{
  "usage" : {
    "file" : "syscall_linux.go",
    "label1" : "cast-pointer",
    "label2" : "serialization",
    "line" : "690",
    "module" : "golang.org/x/sys",
    "pkg" : "golang.org/x/sys/unix",
    "project" : "rancher/rancher",
    "snippet" : "return unsafe.Pointer(&sa.raw), SizeofSockaddrALG, nil",
    "version" : "v0.0.0-20200122134326-e047566fdf82"
  },
  "cfg" : {
    "blocks" : [ {
      "update-vars" : [ ],
      "successors" : [ 2 ],
      "in-vars" : [ 1 ],
      "exit" : false,
      "out-vars" : [ 1 ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[entry]",
      "entry" : true,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ ],
      "in-vars" : [ ],
      "exit" : true,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[exit]",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 3, 4 ],
      "in-vars" : [ 1 ],
      "exit" : false,
      "out-vars" : [ 1 ],
      "decl-vars" : [ ],
      "line-start" : 667,
      "ast" : {
        "condition" : {
          "go-type" : 20,
          "kind" : "expression",
          "left" : {
            "arguments" : [ {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "Type",
                "variable" : 5
              },
              "go-type" : 10,
              "kind" : "expression",
              "target" : {
                "go-type" : 11,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "sa",
                  "variable" : 1
                }
              },
              "type" : "selector"
            } ],
            "ellipsis" : false,
            "function" : {
              "go-type" : 22,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Builtin",
                "kind" : "ident",
                "value" : "len"
              }
            },
            "go-type" : 21,
            "kind" : "expression",
            "type" : "call"
          },
          "operator" : ">",
          "right" : {
            "go-type" : 21,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "13"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 669,
      "code" : "if len(sa.Type) > 13 {\n\treturn nil, 0, EINVAL\n}",
      "entry" : false,
      "use-vars" : [ 1 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 668,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 3,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Nil",
            "kind" : "ident",
            "value" : "nil"
          }
        }, {
          "go-type" : 4,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "0"
          }
        }, {
          "go-type" : 24,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "22"
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 668,
      "code" : "return nil, 0, EINVAL",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 5, 6 ],
      "in-vars" : [ 1 ],
      "exit" : false,
      "out-vars" : [ 1 ],
      "decl-vars" : [ ],
      "line-start" : 670,
      "ast" : {
        "condition" : {
          "go-type" : 20,
          "kind" : "expression",
          "left" : {
            "arguments" : [ {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "Name",
                "variable" : 6
              },
              "go-type" : 10,
              "kind" : "expression",
              "target" : {
                "go-type" : 11,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "sa",
                  "variable" : 1
                }
              },
              "type" : "selector"
            } ],
            "ellipsis" : false,
            "function" : {
              "go-type" : 22,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Builtin",
                "kind" : "ident",
                "value" : "len"
              }
            },
            "go-type" : 21,
            "kind" : "expression",
            "type" : "call"
          },
          "operator" : ">",
          "right" : {
            "go-type" : 21,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "63"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 672,
      "code" : "if len(sa.Name) > 63 {\n\treturn nil, 0, EINVAL\n}",
      "entry" : false,
      "use-vars" : [ 1 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 671,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 3,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Nil",
            "kind" : "ident",
            "value" : "nil"
          }
        }, {
          "go-type" : 4,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "0"
          }
        }, {
          "go-type" : 24,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "22"
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 671,
      "code" : "return nil, 0, EINVAL",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ 1 ],
      "successors" : [ 7 ],
      "in-vars" : [ 1 ],
      "exit" : false,
      "out-vars" : [ 1 ],
      "decl-vars" : [ ],
      "line-start" : 674,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "Family",
            "variable" : 8
          },
          "go-type" : 16,
          "kind" : "expression",
          "target" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "raw",
              "variable" : 7
            },
            "go-type" : 14,
            "kind" : "expression",
            "target" : {
              "go-type" : 11,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "sa",
                "variable" : 1
              }
            },
            "type" : "selector"
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "go-type" : 16,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "38"
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 674,
      "code" : "sa.raw.Family = AF_ALG",
      "entry" : false,
      "use-vars" : [ 1 ]
    }, {
      "update-vars" : [ 1 ],
      "successors" : [ 8 ],
      "in-vars" : [ 1 ],
      "exit" : false,
      "out-vars" : [ 1 ],
      "decl-vars" : [ ],
      "line-start" : 675,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "Feat",
            "variable" : 9
          },
          "go-type" : 5,
          "kind" : "expression",
          "target" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "raw",
              "variable" : 7
            },
            "go-type" : 14,
            "kind" : "expression",
            "target" : {
              "go-type" : 11,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "sa",
                "variable" : 1
              }
            },
            "type" : "selector"
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "Feature",
            "variable" : 10
          },
          "go-type" : 5,
          "kind" : "expression",
          "target" : {
            "go-type" : 11,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "sa",
              "variable" : 1
            }
          },
          "type" : "selector"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 675,
      "code" : "sa.raw.Feat = sa.Feature",
      "entry" : false,
      "use-vars" : [ 1 ]
    }, {
      "update-vars" : [ 1 ],
      "successors" : [ 9 ],
      "in-vars" : [ 1 ],
      "exit" : false,
      "out-vars" : [ 1 ],
      "decl-vars" : [ ],
      "line-start" : 676,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "Mask",
            "variable" : 11
          },
          "go-type" : 5,
          "kind" : "expression",
          "target" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "raw",
              "variable" : 7
            },
            "go-type" : 14,
            "kind" : "expression",
            "target" : {
              "go-type" : 11,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "sa",
                "variable" : 1
              }
            },
            "type" : "selector"
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "Mask",
            "variable" : 12
          },
          "go-type" : 5,
          "kind" : "expression",
          "target" : {
            "go-type" : 11,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "sa",
              "variable" : 1
            }
          },
          "type" : "selector"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 676,
      "code" : "sa.raw.Mask = sa.Mask",
      "entry" : false,
      "use-vars" : [ 1 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 10 ],
      "in-vars" : [ 1 ],
      "exit" : false,
      "out-vars" : [ 1, 13, 14 ],
      "decl-vars" : [ 13, 14 ],
      "line-start" : 678,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "typ"
          }
        }, {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "err"
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "Type",
              "variable" : 5
            },
            "go-type" : 10,
            "kind" : "expression",
            "target" : {
              "go-type" : 11,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "sa",
                "variable" : 1
              }
            },
            "type" : "selector"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 29,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 1,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "ByteSliceFromString"
            }
          },
          "go-type" : 26,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 678,
      "code" : "typ, err := ByteSliceFromString(sa.Type)",
      "entry" : false,
      "use-vars" : [ 1 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 11, 12 ],
      "in-vars" : [ 13, 14, 1 ],
      "exit" : false,
      "out-vars" : [ 1, 13, 14 ],
      "decl-vars" : [ ],
      "line-start" : 679,
      "ast" : {
        "condition" : {
          "go-type" : 20,
          "kind" : "expression",
          "left" : {
            "go-type" : 6,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "err",
              "variable" : 13
            }
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 31,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Nil",
              "kind" : "ident",
              "value" : "nil"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 681,
      "code" : "if err != nil {\n\treturn nil, 0, err\n}",
      "entry" : false,
      "use-vars" : [ 13 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 13 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 680,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 3,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Nil",
            "kind" : "ident",
            "value" : "nil"
          }
        }, {
          "go-type" : 4,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "0"
          }
        }, {
          "go-type" : 6,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "err",
            "variable" : 13
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 680,
      "code" : "return nil, 0, err",
      "entry" : false,
      "use-vars" : [ 13 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 13 ],
      "in-vars" : [ 1, 14 ],
      "exit" : false,
      "out-vars" : [ 1, 15, 13, 14 ],
      "decl-vars" : [ 13, 15 ],
      "line-start" : 682,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "name"
          }
        }, {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "err",
            "variable" : 13
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "Name",
              "variable" : 6
            },
            "go-type" : 10,
            "kind" : "expression",
            "target" : {
              "go-type" : 11,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "sa",
                "variable" : 1
              }
            },
            "type" : "selector"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 29,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 1,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "ByteSliceFromString"
            }
          },
          "go-type" : 26,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 682,
      "code" : "name, err := ByteSliceFromString(sa.Name)",
      "entry" : false,
      "use-vars" : [ 1 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 14, 15 ],
      "in-vars" : [ 1, 15, 13, 14 ],
      "exit" : false,
      "out-vars" : [ 1, 15, 13, 14 ],
      "decl-vars" : [ ],
      "line-start" : 683,
      "ast" : {
        "condition" : {
          "go-type" : 20,
          "kind" : "expression",
          "left" : {
            "go-type" : 6,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "err",
              "variable" : 13
            }
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 31,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Nil",
              "kind" : "ident",
              "value" : "nil"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 685,
      "code" : "if err != nil {\n\treturn nil, 0, err\n}",
      "entry" : false,
      "use-vars" : [ 13 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 13 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 684,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 3,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Nil",
            "kind" : "ident",
            "value" : "nil"
          }
        }, {
          "go-type" : 4,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "0"
          }
        }, {
          "go-type" : 6,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "err",
            "variable" : 13
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 684,
      "code" : "return nil, 0, err",
      "entry" : false,
      "use-vars" : [ 13 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 16 ],
      "in-vars" : [ 1, 15, 14 ],
      "exit" : false,
      "out-vars" : [ 1, 15 ],
      "decl-vars" : [ ],
      "line-start" : 687,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 34,
            "type" : "slice",
            "three" : false,
            "high" : null,
            "max" : null,
            "kind" : "expression",
            "low" : null,
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "Type",
                "variable" : 16
              },
              "go-type" : 17,
              "kind" : "expression",
              "target" : {
                "field" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "raw",
                  "variable" : 7
                },
                "go-type" : 14,
                "kind" : "expression",
                "target" : {
                  "go-type" : 11,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "sa",
                    "variable" : 1
                  }
                },
                "type" : "selector"
              },
              "type" : "selector"
            }
          }, {
            "go-type" : 27,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "typ",
              "variable" : 14
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 32,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Builtin",
              "kind" : "ident",
              "value" : "copy"
            }
          },
          "go-type" : 21,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 687,
      "code" : "copy(sa.raw.Type[:], typ)",
      "entry" : false,
      "use-vars" : [ 1, 14 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 17 ],
      "in-vars" : [ 1, 15 ],
      "exit" : false,
      "out-vars" : [ 1 ],
      "decl-vars" : [ ],
      "line-start" : 688,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 34,
            "type" : "slice",
            "three" : false,
            "high" : null,
            "max" : null,
            "kind" : "expression",
            "low" : null,
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "Name",
                "variable" : 17
              },
              "go-type" : 19,
              "kind" : "expression",
              "target" : {
                "field" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "raw",
                  "variable" : 7
                },
                "go-type" : 14,
                "kind" : "expression",
                "target" : {
                  "go-type" : 11,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "sa",
                    "variable" : 1
                  }
                },
                "type" : "selector"
              },
              "type" : "selector"
            }
          }, {
            "go-type" : 27,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "name",
              "variable" : 15
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 32,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Builtin",
              "kind" : "ident",
              "value" : "copy"
            }
          },
          "go-type" : 21,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 688,
      "code" : "copy(sa.raw.Name[:], name)",
      "entry" : false,
      "use-vars" : [ 1, 15 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 1 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 690,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "coerced-to" : {
            "go-type" : 3,
            "kind" : "type",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 1,
              "value" : "unsafe"
            },
            "type" : "identifier",
            "value" : {
              "go-type" : 3,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "Pointer"
            }
          },
          "go-type" : 3,
          "kind" : "expression",
          "target" : {
            "go-type" : 35,
            "kind" : "expression",
            "operator" : "&",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "raw",
                "variable" : 7
              },
              "go-type" : 14,
              "kind" : "expression",
              "target" : {
                "go-type" : 11,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "sa",
                  "variable" : 1
                }
              },
              "type" : "selector"
            },
            "type" : "unary"
          },
          "type" : "cast"
        }, {
          "go-type" : 4,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "88"
          }
        }, {
          "go-type" : 31,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Nil",
            "kind" : "ident",
            "value" : "nil"
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 690,
      "code" : "return unsafe.Pointer(&sa.raw), SizeofSockaddrALG, nil",
      "entry" : false,
      "use-vars" : [ 1 ]
    } ],
    "code" : "func (sa *SockaddrALG) sockaddr() (unsafe.Pointer, _Socklen, error) {\n\n\tif len(sa.Type) > 13 {\n\t\treturn nil, 0, EINVAL\n\t}\n\tif len(sa.Name) > 63 {\n\t\treturn nil, 0, EINVAL\n\t}\n\n\tsa.raw.Family = AF_ALG\n\tsa.raw.Feat = sa.Feature\n\tsa.raw.Mask = sa.Mask\n\n\ttyp, err := ByteSliceFromString(sa.Type)\n\tif err != nil {\n\t\treturn nil, 0, err\n\t}\n\tname, err := ByteSliceFromString(sa.Name)\n\tif err != nil {\n\t\treturn nil, 0, err\n\t}\n\n\tcopy(sa.raw.Type[:], typ)\n\tcopy(sa.raw.Name[:], name)\n\n\treturn unsafe.Pointer(&sa.raw), SizeofSockaddrALG, nil\n}",
    "defines" : [ 0 ],
    "functions" : [ {
      "name" : "sockaddr",
      "package" : 0,
      "type" : 0,
      "exported" : false
    }, {
      "name" : "ByteSliceFromString",
      "package" : 0,
      "type" : 29,
      "exported" : true
    } ],
    "line-end" : 691,
    "line-start" : 665,
    "names" : [ "sockaddr" ],
    "package" : 0,
    "packages" : [ {
      "name" : "unix",
      "path" : "golang.org/x/sys/unix"
    }, {
      "name" : "unsafe",
      "path" : "unsafe"
    }, {
      "name" : "syscall",
      "path" : "syscall"
    } ],
    "params" : [ ],
    "receivers" : [ 1 ],
    "results" : [ 2, 3, 4 ],
    "type" : "function",
    "types" : [ {
      "name" : "func() (unsafe.Pointer, golang.org/x/sys/unix._Socklen, error)",
      "params" : 1,
      "recv" : 1,
      "results" : 2,
      "type" : "Signature",
      "underlying" : 0,
      "variadic" : false
    }, {
      "fields" : [ ],
      "name" : "()",
      "type" : "Tuple",
      "underlying" : 1
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 3
      }, {
        "name" : "",
        "type" : 4
      }, {
        "name" : "",
        "type" : 6
      } ],
      "name" : "(unsafe.Pointer, golang.org/x/sys/unix._Socklen, error)",
      "type" : "Tuple",
      "underlying" : 2
    }, {
      "local-name" : "Pointer",
      "name" : "unsafe.Pointer",
      "package" : 1,
      "type" : "Basic",
      "underlying" : 3
    }, {
      "local-name" : "_Socklen",
      "name" : "golang.org/x/sys/unix._Socklen",
      "package" : 0,
      "type" : "Named",
      "underlying" : 5
    }, {
      "name" : "uint32",
      "type" : "Basic",
      "underlying" : 5
    }, {
      "local-name" : "error",
      "name" : "error",
      "package" : -1,
      "type" : "Named",
      "underlying" : 7
    }, {
      "methods" : [ {
        "name" : "Error",
        "type" : 8
      } ],
      "name" : "interface{Error() string}",
      "type" : "Interface",
      "underlying" : 7
    }, {
      "name" : "func() string",
      "params" : 1,
      "recv" : 0,
      "results" : 9,
      "type" : "Signature",
      "underlying" : 8,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 10
      } ],
      "name" : "(string)",
      "type" : "Tuple",
      "underlying" : 9
    }, {
      "name" : "string",
      "type" : "Basic",
      "underlying" : 10
    }, {
      "elem" : 12,
      "name" : "*golang.org/x/sys/unix.SockaddrALG",
      "type" : "Pointer",
      "underlying" : 11
    }, {
      "local-name" : "SockaddrALG",
      "name" : "golang.org/x/sys/unix.SockaddrALG",
      "package" : 0,
      "type" : "Named",
      "underlying" : 13
    }, {
      "fields" : [ {
        "name" : "Type",
        "type" : 10
      }, {
        "name" : "Name",
        "type" : 10
      }, {
        "name" : "Feature",
        "type" : 5
      }, {
        "name" : "Mask",
        "type" : 5
      }, {
        "name" : "raw",
        "type" : 14
      } ],
      "name" : "struct{Type string; Name string; Feature uint32; Mask uint32; raw golang.org/x/sys/unix.RawSockaddrALG}",
      "type" : "Struct",
      "underlying" : 13
    }, {
      "local-name" : "RawSockaddrALG",
      "name" : "golang.org/x/sys/unix.RawSockaddrALG",
      "package" : 0,
      "type" : "Named",
      "underlying" : 15
    }, {
      "fields" : [ {
        "name" : "Family",
        "type" : 16
      }, {
        "name" : "Type",
        "type" : 17
      }, {
        "name" : "Feat",
        "type" : 5
      }, {
        "name" : "Mask",
        "type" : 5
      }, {
        "name" : "Name",
        "type" : 19
      } ],
      "name" : "struct{Family uint16; Type [14]uint8; Feat uint32; Mask uint32; Name [64]uint8}",
      "type" : "Struct",
      "underlying" : 15
    }, {
      "name" : "uint16",
      "type" : "Basic",
      "underlying" : 16
    }, {
      "elem" : 18,
      "name" : "[14]uint8",
      "type" : "Array",
      "underlying" : 17
    }, {
      "name" : "uint8",
      "type" : "Basic",
      "underlying" : 18
    }, {
      "elem" : 18,
      "name" : "[64]uint8",
      "type" : "Array",
      "underlying" : 19
    }, {
      "name" : "untyped bool",
      "type" : "Basic",
      "underlying" : 20
    }, {
      "name" : "int",
      "type" : "Basic",
      "underlying" : 21
    }, {
      "name" : "func(string) int",
      "params" : 9,
      "recv" : -1,
      "results" : 23,
      "type" : "Signature",
      "underlying" : 22,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 21
      } ],
      "name" : "(int)",
      "type" : "Tuple",
      "underlying" : 23
    }, {
      "local-name" : "Errno",
      "name" : "syscall.Errno",
      "package" : 2,
      "type" : "Named",
      "underlying" : 25
    }, {
      "name" : "uintptr",
      "type" : "Basic",
      "underlying" : 25
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 27
      }, {
        "name" : "",
        "type" : 6
      } ],
      "name" : "([]byte, error)",
      "type" : "Tuple",
      "underlying" : 26
    }, {
      "elem" : 28,
      "name" : "[]byte",
      "type" : "Slice",
      "underlying" : 27
    }, {
      "name" : "byte",
      "type" : "Basic",
      "underlying" : 28
    }, {
      "name" : "func(s string) ([]byte, error)",
      "params" : 30,
      "recv" : -1,
      "results" : 26,
      "type" : "Signature",
      "underlying" : 29,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "s",
        "type" : 10
      } ],
      "name" : "(s string)",
      "type" : "Tuple",
      "underlying" : 30
    }, {
      "name" : "untyped nil",
      "type" : "Basic",
      "underlying" : 31
    }, {
      "name" : "func([]uint8, []byte) int",
      "params" : 33,
      "recv" : -1,
      "results" : 23,
      "type" : "Signature",
      "underlying" : 32,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 34
      }, {
        "name" : "",
        "type" : 27
      } ],
      "name" : "([]uint8, []byte)",
      "type" : "Tuple",
      "underlying" : 33
    }, {
      "elem" : 18,
      "name" : "[]uint8",
      "type" : "Slice",
      "underlying" : 34
    }, {
      "elem" : 14,
      "name" : "*golang.org/x/sys/unix.RawSockaddrALG",
      "type" : "Pointer",
      "underlying" : 35
    } ],
    "variables" : [ {
      "name" : "",
      "package" : -1,
      "type" : 6,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "sa",
      "package" : 0,
      "type" : 11,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "[res0]",
      "package" : 0,
      "type" : 3,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "[res1]",
      "package" : 0,
      "type" : 4,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "[res2]",
      "package" : 0,
      "type" : 6,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "Type",
      "package" : 0,
      "type" : 10,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "Name",
      "package" : 0,
      "type" : 10,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "raw",
      "package" : 0,
      "type" : 14,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "Family",
      "package" : 0,
      "type" : 16,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "Feat",
      "package" : 0,
      "type" : 5,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "Feature",
      "package" : 0,
      "type" : 5,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "Mask",
      "package" : 0,
      "type" : 5,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "Mask",
      "package" : 0,
      "type" : 5,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "err",
      "package" : 0,
      "type" : 6,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "typ",
      "package" : 0,
      "type" : 27,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "name",
      "package" : 0,
      "type" : 27,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "Type",
      "package" : 0,
      "type" : 17,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "Name",
      "package" : 0,
      "type" : 19,
      "exported" : true,
      "embedded" : false,
      "field" : true
    } ]
  },
  "go-version" : "1.14.3"
}