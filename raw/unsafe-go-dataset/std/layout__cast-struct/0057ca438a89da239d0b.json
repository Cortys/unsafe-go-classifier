{
  "usage" : {
    "file" : "mgcstack.go",
    "label1" : "cast-struct",
    "label2" : "layout",
    "line" : "228",
    "module" : "std",
    "pkg" : "runtime",
    "project" : "kubernetes/kubernetes",
    "snippet" : "buf = (*stackWorkBuf)(unsafe.Pointer(getempty()))",
    "version" : "std"
  },
  "cfg" : {
    "blocks" : [ {
      "update-vars" : [ ],
      "successors" : [ 2 ],
      "in-vars" : [ 0, 2, 1 ],
      "exit" : false,
      "out-vars" : [ 1, 0, 2 ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[entry]",
      "entry" : true,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ ],
      "in-vars" : [ ],
      "exit" : true,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[exit]",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 3, 4 ],
      "in-vars" : [ 2, 1, 0 ],
      "exit" : false,
      "out-vars" : [ 2, 1, 0 ],
      "decl-vars" : [ ],
      "line-start" : 209,
      "ast" : {
        "condition" : {
          "go-type" : 5,
          "kind" : "expression",
          "left" : {
            "go-type" : 5,
            "kind" : "expression",
            "left" : {
              "go-type" : 2,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "p",
                "variable" : 1
              }
            },
            "operator" : "<",
            "right" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "lo",
                "variable" : 4
              },
              "go-type" : 2,
              "kind" : "expression",
              "target" : {
                "field" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "stack",
                  "variable" : 3
                },
                "go-type" : 10,
                "kind" : "expression",
                "target" : {
                  "go-type" : 0,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "s",
                    "variable" : 0
                  }
                },
                "type" : "selector"
              },
              "type" : "selector"
            },
            "type" : "binary"
          },
          "operator" : "||",
          "right" : {
            "go-type" : 5,
            "kind" : "expression",
            "left" : {
              "go-type" : 2,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "p",
                "variable" : 1
              }
            },
            "operator" : ">=",
            "right" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "hi",
                "variable" : 5
              },
              "go-type" : 2,
              "kind" : "expression",
              "target" : {
                "field" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "stack",
                  "variable" : 3
                },
                "go-type" : 10,
                "kind" : "expression",
                "target" : {
                  "go-type" : 0,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "s",
                    "variable" : 0
                  }
                },
                "type" : "selector"
              },
              "type" : "selector"
            },
            "type" : "binary"
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 211,
      "code" : "if p < s.stack.lo || p >= s.stack.hi {\n\tthrow(\"address not a stack address\")\n}",
      "entry" : false,
      "use-vars" : [ 1, 0 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 4 ],
      "in-vars" : [ 2, 1, 0 ],
      "exit" : false,
      "out-vars" : [ 2, 1, 0 ],
      "decl-vars" : [ ],
      "line-start" : 210,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 8,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "address not a stack address"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 6,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "throw"
            }
          },
          "go-type" : 4,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 210,
      "code" : "throw(\"address not a stack address\")",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 5 ],
      "in-vars" : [ 2, 1, 0 ],
      "exit" : false,
      "out-vars" : [ 7, 2, 1, 0 ],
      "decl-vars" : [ 7 ],
      "line-start" : 212,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "head"
          }
        } ],
        "right" : [ {
          "go-type" : 9,
          "kind" : "expression",
          "operator" : "&",
          "target" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "buf",
              "variable" : 6
            },
            "go-type" : 12,
            "kind" : "expression",
            "target" : {
              "go-type" : 0,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "s",
                "variable" : 0
              }
            },
            "type" : "selector"
          },
          "type" : "unary"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 212,
      "code" : "head := &s.buf",
      "entry" : false,
      "use-vars" : [ 0 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 6, 7 ],
      "in-vars" : [ 1, 0, 7, 2 ],
      "exit" : false,
      "out-vars" : [ 7, 1, 0 ],
      "decl-vars" : [ ],
      "line-start" : 213,
      "ast" : {
        "condition" : {
          "go-type" : 3,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "conservative",
            "variable" : 2
          }
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 215,
      "code" : "if conservative {\n\thead = &s.cbuf\n}",
      "entry" : false,
      "use-vars" : [ 2 ]
    }, {
      "update-vars" : [ 7 ],
      "successors" : [ 7 ],
      "in-vars" : [ 1, 0 ],
      "exit" : false,
      "out-vars" : [ 7, 1, 0 ],
      "decl-vars" : [ ],
      "line-start" : 214,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 9,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "head",
            "variable" : 7
          }
        } ],
        "right" : [ {
          "go-type" : 9,
          "kind" : "expression",
          "operator" : "&",
          "target" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "cbuf",
              "variable" : 8
            },
            "go-type" : 12,
            "kind" : "expression",
            "target" : {
              "go-type" : 0,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "s",
                "variable" : 0
              }
            },
            "type" : "selector"
          },
          "type" : "unary"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 7 ],
      "line-end" : 214,
      "code" : "head = &s.cbuf",
      "entry" : false,
      "use-vars" : [ 0 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 8 ],
      "in-vars" : [ 7, 1, 0 ],
      "exit" : false,
      "out-vars" : [ 9, 7, 1, 0 ],
      "decl-vars" : [ 9 ],
      "line-start" : 216,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "buf"
          }
        } ],
        "right" : [ {
          "go-type" : 12,
          "kind" : "expression",
          "target" : {
            "go-type" : 9,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "head",
              "variable" : 7
            }
          },
          "type" : "star"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 216,
      "code" : "buf := *head",
      "entry" : false,
      "use-vars" : [ 7 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 9, 13 ],
      "in-vars" : [ 1, 0, 9, 7 ],
      "exit" : false,
      "out-vars" : [ 9, 7, 1, 0 ],
      "decl-vars" : [ ],
      "line-start" : 217,
      "ast" : {
        "condition" : {
          "go-type" : 5,
          "kind" : "expression",
          "left" : {
            "go-type" : 12,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "buf",
              "variable" : 9
            }
          },
          "operator" : "==",
          "right" : {
            "go-type" : 10,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Nil",
              "kind" : "ident",
              "value" : "nil"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 233,
      "code" : "if buf == nil {\n\n\tbuf = (*stackWorkBuf)(unsafe.Pointer(getempty()))\n\tbuf.nobj = 0\n\tbuf.next = nil\n\t*head = buf\n} else if buf.nobj == len(buf.obj) {\n\tif s.freeBuf != nil {\n\t\tbuf = s.freeBuf\n\t\ts.freeBuf = nil\n\t} else {\n\t\tbuf = (*stackWorkBuf)(unsafe.Pointer(getempty()))\n\t}\n\tbuf.nobj = 0\n\tbuf.next = *head\n\t*head = buf\n}",
      "entry" : false,
      "use-vars" : [ 9 ]
    }, {
      "update-vars" : [ 9 ],
      "successors" : [ 10 ],
      "in-vars" : [ 1 ],
      "exit" : false,
      "out-vars" : [ 9, 1 ],
      "decl-vars" : [ ],
      "line-start" : 219,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 12,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "buf",
            "variable" : 9
          }
        } ],
        "right" : [ {
          "coerced-to" : {
            "contained" : {
              "go-type" : 13,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 13,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "stackWorkBuf"
              }
            },
            "go-type" : 12,
            "kind" : "type",
            "type" : "pointer"
          },
          "go-type" : 12,
          "kind" : "expression",
          "target" : {
            "coerced-to" : {
              "go-type" : 40,
              "kind" : "type",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 1,
                "value" : "unsafe"
              },
              "type" : "identifier",
              "value" : {
                "go-type" : 40,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "Pointer"
              }
            },
            "go-type" : 40,
            "kind" : "expression",
            "target" : {
              "arguments" : [ ],
              "ellipsis" : false,
              "function" : {
                "go-type" : 15,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Func",
                  "kind" : "ident",
                  "value" : "getempty"
                }
              },
              "go-type" : 11,
              "kind" : "expression",
              "type" : "call"
            },
            "type" : "cast"
          },
          "type" : "cast"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 9 ],
      "line-end" : 219,
      "code" : "buf = (*stackWorkBuf)(unsafe.Pointer(getempty()))",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ 9 ],
      "successors" : [ 11 ],
      "in-vars" : [ 9, 1 ],
      "exit" : false,
      "out-vars" : [ 9, 1 ],
      "decl-vars" : [ ],
      "line-start" : 220,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "nobj",
            "variable" : 10
          },
          "go-type" : 22,
          "kind" : "expression",
          "target" : {
            "go-type" : 12,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "buf",
              "variable" : 9
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "go-type" : 22,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "0"
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 220,
      "code" : "buf.nobj = 0",
      "entry" : false,
      "use-vars" : [ 9 ]
    }, {
      "update-vars" : [ 9 ],
      "successors" : [ 12 ],
      "in-vars" : [ 9, 1 ],
      "exit" : false,
      "out-vars" : [ 9, 1 ],
      "decl-vars" : [ ],
      "line-start" : 221,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "next",
            "variable" : 11
          },
          "go-type" : 12,
          "kind" : "expression",
          "target" : {
            "go-type" : 12,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "buf",
              "variable" : 9
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "go-type" : 10,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Nil",
            "kind" : "ident",
            "value" : "nil"
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 221,
      "code" : "buf.next = nil",
      "entry" : false,
      "use-vars" : [ 9 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 21 ],
      "in-vars" : [ 9, 1 ],
      "exit" : false,
      "out-vars" : [ 1, 9 ],
      "decl-vars" : [ ],
      "line-start" : 222,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 12,
          "kind" : "expression",
          "target" : {
            "go-type" : 9,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "head",
              "variable" : 7
            }
          },
          "type" : "star"
        } ],
        "right" : [ {
          "go-type" : 12,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "buf",
            "variable" : 9
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 222,
      "code" : "*head = buf",
      "entry" : false,
      "use-vars" : [ 9 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 14, 21 ],
      "in-vars" : [ 0, 9, 7, 1 ],
      "exit" : false,
      "out-vars" : [ 7, 1, 0, 9 ],
      "decl-vars" : [ ],
      "line-start" : 223,
      "ast" : {
        "condition" : {
          "go-type" : 5,
          "kind" : "expression",
          "left" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "nobj",
              "variable" : 10
            },
            "go-type" : 22,
            "kind" : "expression",
            "target" : {
              "go-type" : 12,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "buf",
                "variable" : 9
              }
            },
            "type" : "selector"
          },
          "operator" : "==",
          "right" : {
            "go-type" : 22,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "252"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 233,
      "code" : "if buf.nobj == len(buf.obj) {\n\tif s.freeBuf != nil {\n\t\tbuf = s.freeBuf\n\t\ts.freeBuf = nil\n\t} else {\n\t\tbuf = (*stackWorkBuf)(unsafe.Pointer(getempty()))\n\t}\n\tbuf.nobj = 0\n\tbuf.next = *head\n\t*head = buf\n}",
      "entry" : false,
      "use-vars" : [ 9 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 15, 17 ],
      "in-vars" : [ 0, 7, 1 ],
      "exit" : false,
      "out-vars" : [ 7, 1, 0 ],
      "decl-vars" : [ ],
      "line-start" : 224,
      "ast" : {
        "condition" : {
          "go-type" : 5,
          "kind" : "expression",
          "left" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "freeBuf",
              "variable" : 12
            },
            "go-type" : 12,
            "kind" : "expression",
            "target" : {
              "go-type" : 0,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "s",
                "variable" : 0
              }
            },
            "type" : "selector"
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 10,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Nil",
              "kind" : "ident",
              "value" : "nil"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 229,
      "code" : "if s.freeBuf != nil {\n\tbuf = s.freeBuf\n\ts.freeBuf = nil\n} else {\n\tbuf = (*stackWorkBuf)(unsafe.Pointer(getempty()))\n}",
      "entry" : false,
      "use-vars" : [ 0 ]
    }, {
      "update-vars" : [ 9 ],
      "successors" : [ 16 ],
      "in-vars" : [ 7, 1, 0 ],
      "exit" : false,
      "out-vars" : [ 9, 7, 1, 0 ],
      "decl-vars" : [ ],
      "line-start" : 225,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 12,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "buf",
            "variable" : 9
          }
        } ],
        "right" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "freeBuf",
            "variable" : 12
          },
          "go-type" : 12,
          "kind" : "expression",
          "target" : {
            "go-type" : 0,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "s",
              "variable" : 0
            }
          },
          "type" : "selector"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 9 ],
      "line-end" : 225,
      "code" : "buf = s.freeBuf",
      "entry" : false,
      "use-vars" : [ 0 ]
    }, {
      "update-vars" : [ 0 ],
      "successors" : [ 18 ],
      "in-vars" : [ 1, 0, 9, 7 ],
      "exit" : false,
      "out-vars" : [ 9, 7, 1 ],
      "decl-vars" : [ ],
      "line-start" : 226,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "freeBuf",
            "variable" : 12
          },
          "go-type" : 12,
          "kind" : "expression",
          "target" : {
            "go-type" : 0,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "s",
              "variable" : 0
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "go-type" : 10,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Nil",
            "kind" : "ident",
            "value" : "nil"
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 226,
      "code" : "s.freeBuf = nil",
      "entry" : false,
      "use-vars" : [ 0 ]
    }, {
      "update-vars" : [ 9 ],
      "successors" : [ 18 ],
      "in-vars" : [ 7, 1 ],
      "exit" : false,
      "out-vars" : [ 1, 9, 7 ],
      "decl-vars" : [ ],
      "line-start" : 228,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 12,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "buf",
            "variable" : 9
          }
        } ],
        "right" : [ {
          "coerced-to" : {
            "contained" : {
              "go-type" : 13,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 13,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "stackWorkBuf"
              }
            },
            "go-type" : 12,
            "kind" : "type",
            "type" : "pointer"
          },
          "go-type" : 12,
          "kind" : "expression",
          "target" : {
            "coerced-to" : {
              "go-type" : 40,
              "kind" : "type",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 1,
                "value" : "unsafe"
              },
              "type" : "identifier",
              "value" : {
                "go-type" : 40,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "Pointer"
              }
            },
            "go-type" : 40,
            "kind" : "expression",
            "target" : {
              "arguments" : [ ],
              "ellipsis" : false,
              "function" : {
                "go-type" : 15,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Func",
                  "kind" : "ident",
                  "value" : "getempty"
                }
              },
              "go-type" : 11,
              "kind" : "expression",
              "type" : "call"
            },
            "type" : "cast"
          },
          "type" : "cast"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 9 ],
      "line-end" : 228,
      "code" : "buf = (*stackWorkBuf)(unsafe.Pointer(getempty()))",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ 9 ],
      "successors" : [ 19 ],
      "in-vars" : [ 1, 9, 7 ],
      "exit" : false,
      "out-vars" : [ 9, 7, 1 ],
      "decl-vars" : [ ],
      "line-start" : 230,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "nobj",
            "variable" : 10
          },
          "go-type" : 22,
          "kind" : "expression",
          "target" : {
            "go-type" : 12,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "buf",
              "variable" : 9
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "go-type" : 22,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "0"
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 230,
      "code" : "buf.nobj = 0",
      "entry" : false,
      "use-vars" : [ 9 ]
    }, {
      "update-vars" : [ 9 ],
      "successors" : [ 20 ],
      "in-vars" : [ 9, 7, 1 ],
      "exit" : false,
      "out-vars" : [ 9, 1 ],
      "decl-vars" : [ ],
      "line-start" : 231,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "next",
            "variable" : 11
          },
          "go-type" : 12,
          "kind" : "expression",
          "target" : {
            "go-type" : 12,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "buf",
              "variable" : 9
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "go-type" : 12,
          "kind" : "expression",
          "target" : {
            "go-type" : 9,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "head",
              "variable" : 7
            }
          },
          "type" : "star"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 231,
      "code" : "buf.next = *head",
      "entry" : false,
      "use-vars" : [ 7, 9 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 21 ],
      "in-vars" : [ 9, 1 ],
      "exit" : false,
      "out-vars" : [ 9, 1 ],
      "decl-vars" : [ ],
      "line-start" : 232,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 12,
          "kind" : "expression",
          "target" : {
            "go-type" : 9,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "head",
              "variable" : 7
            }
          },
          "type" : "star"
        } ],
        "right" : [ {
          "go-type" : 12,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "buf",
            "variable" : 9
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 232,
      "code" : "*head = buf",
      "entry" : false,
      "use-vars" : [ 9 ]
    }, {
      "update-vars" : [ 9 ],
      "successors" : [ 22 ],
      "in-vars" : [ 9, 1 ],
      "exit" : false,
      "out-vars" : [ 9 ],
      "decl-vars" : [ ],
      "line-start" : 234,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 2,
          "index" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "nobj",
              "variable" : 10
            },
            "go-type" : 22,
            "kind" : "expression",
            "target" : {
              "go-type" : 12,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "buf",
                "variable" : 9
              }
            },
            "type" : "selector"
          },
          "kind" : "expression",
          "target" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "obj",
              "variable" : 13
            },
            "go-type" : 23,
            "kind" : "expression",
            "target" : {
              "go-type" : 12,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "buf",
                "variable" : 9
              }
            },
            "type" : "selector"
          },
          "type" : "index"
        } ],
        "right" : [ {
          "go-type" : 2,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "p",
            "variable" : 1
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 234,
      "code" : "buf.obj[buf.nobj] = p",
      "entry" : false,
      "use-vars" : [ 9, 1 ]
    }, {
      "update-vars" : [ 9 ],
      "successors" : [ 1 ],
      "in-vars" : [ 9 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 235,
      "ast" : {
        "kind" : "statement",
        "operation" : "++",
        "target" : {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "nobj",
            "variable" : 10
          },
          "go-type" : 22,
          "kind" : "expression",
          "target" : {
            "go-type" : 12,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "buf",
              "variable" : 9
            }
          },
          "type" : "selector"
        },
        "type" : "crement"
      },
      "assign-vars" : [ ],
      "line-end" : 235,
      "code" : "buf.nobj++",
      "entry" : false,
      "use-vars" : [ 9 ]
    } ],
    "code" : "// Add p as a potential pointer to a stack object.\n// p must be a stack address.\nfunc (s *stackScanState) putPtr(p uintptr, conservative bool) {\n\tif p < s.stack.lo || p >= s.stack.hi {\n\t\tthrow(\"address not a stack address\")\n\t}\n\thead := &s.buf\n\tif conservative {\n\t\thead = &s.cbuf\n\t}\n\tbuf := *head\n\tif buf == nil {\n\n\t\tbuf = (*stackWorkBuf)(unsafe.Pointer(getempty()))\n\t\tbuf.nobj = 0\n\t\tbuf.next = nil\n\t\t*head = buf\n\t} else if buf.nobj == len(buf.obj) {\n\t\tif s.freeBuf != nil {\n\t\t\tbuf = s.freeBuf\n\t\t\ts.freeBuf = nil\n\t\t} else {\n\t\t\tbuf = (*stackWorkBuf)(unsafe.Pointer(getempty()))\n\t\t}\n\t\tbuf.nobj = 0\n\t\tbuf.next = *head\n\t\t*head = buf\n\t}\n\tbuf.obj[buf.nobj] = p\n\tbuf.nobj++\n}",
    "defines" : [ 0 ],
    "functions" : [ {
      "name" : "putPtr",
      "package" : 0,
      "type" : 0,
      "exported" : false
    }, {
      "name" : "throw",
      "package" : 0,
      "type" : 6,
      "exported" : false
    }, {
      "name" : "getempty",
      "package" : 0,
      "type" : 15,
      "exported" : false
    } ],
    "line-end" : 236,
    "line-start" : 208,
    "names" : [ "putPtr" ],
    "package" : 0,
    "packages" : [ {
      "name" : "runtime",
      "path" : "runtime"
    }, {
      "name" : "unsafe",
      "path" : "unsafe"
    } ],
    "params" : [ 1, 2 ],
    "receivers" : [ 0 ],
    "results" : [ ],
    "type" : "function",
    "types" : [ {
      "name" : "func(p uintptr, conservative bool)",
      "params" : 1,
      "recv" : 0,
      "results" : 4,
      "type" : "Signature",
      "underlying" : 0,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "p",
        "type" : 2
      }, {
        "name" : "conservative",
        "type" : 3
      } ],
      "name" : "(p uintptr, conservative bool)",
      "type" : "Tuple",
      "underlying" : 1
    }, {
      "name" : "uintptr",
      "type" : "Basic",
      "underlying" : 2
    }, {
      "name" : "bool",
      "type" : "Basic",
      "underlying" : 3
    }, {
      "fields" : [ ],
      "name" : "()",
      "type" : "Tuple",
      "underlying" : 4
    }, {
      "name" : "untyped bool",
      "type" : "Basic",
      "underlying" : 5
    }, {
      "name" : "func(s string)",
      "params" : 7,
      "recv" : -1,
      "results" : 4,
      "type" : "Signature",
      "underlying" : 6,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "s",
        "type" : 8
      } ],
      "name" : "(s string)",
      "type" : "Tuple",
      "underlying" : 7
    }, {
      "name" : "string",
      "type" : "Basic",
      "underlying" : 8
    }, {
      "elem" : 12,
      "name" : "**runtime.stackWorkBuf",
      "type" : "Pointer",
      "underlying" : 9
    }, {
      "name" : "untyped nil",
      "type" : "Basic",
      "underlying" : 10
    }, {
      "elem" : 12,
      "name" : "*runtime.workbuf",
      "type" : "Pointer",
      "underlying" : 11
    }, {
      "local-name" : "workbuf",
      "name" : "runtime.workbuf",
      "package" : 0,
      "type" : "Named",
      "underlying" : 13
    }, {
      "fields" : [ {
        "name" : "workbufhdr",
        "type" : 17
      }, {
        "name" : "obj",
        "type" : 14
      } ],
      "name" : "struct{runtime.workbufhdr; obj [253]uintptr}",
      "type" : "Struct",
      "underlying" : 13
    }, {
      "elem" : 2,
      "name" : "[253]uintptr",
      "type" : "Array",
      "underlying" : 14
    }, {
      "name" : "func() *runtime.workbuf",
      "params" : 4,
      "recv" : -1,
      "results" : 16,
      "type" : "Signature",
      "underlying" : 15,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 11
      } ],
      "name" : "(*runtime.workbuf)",
      "type" : "Tuple",
      "underlying" : 16
    } ],
    "variables" : [ {
      "name" : "s",
      "package" : 0,
      "type" : 0,
      "exported" : false
    }, {
      "name" : "p",
      "package" : 0,
      "type" : 2,
      "exported" : false
    }, {
      "name" : "conservative",
      "package" : 0,
      "type" : 3,
      "exported" : false
    }, {
      "name" : "stack",
      "package" : 0,
      "type" : 10,
      "exported" : false
    }, {
      "name" : "lo",
      "package" : 0,
      "type" : 2,
      "exported" : false
    }, {
      "name" : "hi",
      "package" : 0,
      "type" : 2,
      "exported" : false
    }, {
      "name" : "buf",
      "package" : 0,
      "type" : 12,
      "exported" : false
    }, {
      "name" : "head",
      "package" : 0,
      "type" : 9,
      "exported" : false
    }, {
      "name" : "cbuf",
      "package" : 0,
      "type" : 12,
      "exported" : false
    }, {
      "name" : "buf",
      "package" : 0,
      "type" : 12,
      "exported" : false
    }, {
      "name" : "nobj",
      "package" : 0,
      "type" : 22,
      "exported" : false
    }, {
      "name" : "next",
      "package" : 0,
      "type" : 12,
      "exported" : false
    }, {
      "name" : "freeBuf",
      "package" : 0,
      "type" : 12,
      "exported" : false
    }, {
      "name" : "obj",
      "package" : 0,
      "type" : 23,
      "exported" : false
    } ]
  },
  "go-version" : "1.14.3"
}