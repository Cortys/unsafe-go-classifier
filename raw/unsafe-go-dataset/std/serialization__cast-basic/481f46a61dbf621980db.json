{
  "usage" : {
    "file" : "syscall_linux.go",
    "label1" : "cast-basic",
    "label2" : "serialization",
    "line" : "1323",
    "module" : "golang.org/x/sys",
    "pkg" : "golang.org/x/sys/unix",
    "project" : "xo/usql",
    "snippet" : "msg.Name = (*byte)(unsafe.Pointer(&rsa))",
    "version" : "v0.0.0-20200523222454-059865788121"
  },
  "cfg" : {
    "blocks" : [ {
      "update-vars" : [ ],
      "successors" : [ 2 ],
      "in-vars" : [ 4, 3, 5, 2 ],
      "exit" : false,
      "out-vars" : [ 2, 4, 3, 5 ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[entry]",
      "entry" : true,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ ],
      "in-vars" : [ ],
      "exit" : true,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[exit]",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 3 ],
      "in-vars" : [ 2, 4, 3, 5 ],
      "exit" : false,
      "out-vars" : [ 11, 2, 4, 3, 5 ],
      "decl-vars" : [ 11 ],
      "line-start" : 1321,
      "ast" : {
        "kind" : "statement",
        "target" : {
          "kind" : "decl",
          "specs" : [ {
            "comments" : [ ],
            "declared-type" : {
              "go-type" : 19,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 19,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "Msghdr"
              }
            },
            "kind" : "spec",
            "names" : [ {
              "ident-kind" : "NoKind",
              "kind" : "ident",
              "value" : "msg"
            } ],
            "type" : "var",
            "values" : [ ]
          } ],
          "type" : "var"
        },
        "type" : "declaration"
      },
      "assign-vars" : [ ],
      "line-end" : 1321,
      "code" : "var msg Msghdr",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 4 ],
      "in-vars" : [ 4, 3, 5, 11, 2 ],
      "exit" : false,
      "out-vars" : [ 11, 2, 12, 4, 3, 5 ],
      "decl-vars" : [ 12 ],
      "line-start" : 1322,
      "ast" : {
        "kind" : "statement",
        "target" : {
          "kind" : "decl",
          "specs" : [ {
            "comments" : [ ],
            "declared-type" : {
              "go-type" : 28,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 28,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "RawSockaddrAny"
              }
            },
            "kind" : "spec",
            "names" : [ {
              "ident-kind" : "NoKind",
              "kind" : "ident",
              "value" : "rsa"
            } ],
            "type" : "var",
            "values" : [ ]
          } ],
          "type" : "var"
        },
        "type" : "declaration"
      },
      "assign-vars" : [ ],
      "line-end" : 1322,
      "code" : "var rsa RawSockaddrAny",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ 11 ],
      "successors" : [ 5 ],
      "in-vars" : [ 11, 2, 12, 4, 3, 5 ],
      "exit" : false,
      "out-vars" : [ 11, 2, 12, 4, 3, 5 ],
      "decl-vars" : [ ],
      "line-start" : 1323,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "Name",
            "variable" : 13
          },
          "go-type" : 21,
          "kind" : "expression",
          "target" : {
            "go-type" : 19,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "msg",
              "variable" : 11
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "coerced-to" : {
            "contained" : {
              "go-type" : 4,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 4,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "byte"
              }
            },
            "go-type" : 21,
            "kind" : "type",
            "type" : "pointer"
          },
          "go-type" : 21,
          "kind" : "expression",
          "target" : {
            "coerced-to" : {
              "go-type" : 11,
              "kind" : "type",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 1,
                "value" : "unsafe"
              },
              "type" : "identifier",
              "value" : {
                "go-type" : 11,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "Pointer"
              }
            },
            "go-type" : 11,
            "kind" : "expression",
            "target" : {
              "go-type" : 36,
              "kind" : "expression",
              "operator" : "&",
              "target" : {
                "go-type" : 28,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "rsa",
                  "variable" : 12
                }
              },
              "type" : "unary"
            },
            "type" : "cast"
          },
          "type" : "cast"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 1323,
      "code" : "msg.Name = (*byte)(unsafe.Pointer(&rsa))",
      "entry" : false,
      "use-vars" : [ 12, 11 ]
    }, {
      "update-vars" : [ 11 ],
      "successors" : [ 6 ],
      "in-vars" : [ 4, 3, 5, 11, 2, 12 ],
      "exit" : false,
      "out-vars" : [ 5, 11, 2, 12, 4, 3 ],
      "decl-vars" : [ ],
      "line-start" : 1324,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "Namelen",
            "variable" : 14
          },
          "go-type" : 13,
          "kind" : "expression",
          "target" : {
            "go-type" : 19,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "msg",
              "variable" : 11
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "go-type" : 13,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "112"
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 1324,
      "code" : "msg.Namelen = uint32(SizeofSockaddrAny)",
      "entry" : false,
      "use-vars" : [ 11 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 7 ],
      "in-vars" : [ 3, 5, 11, 2, 12, 4 ],
      "exit" : false,
      "out-vars" : [ 4, 3, 5, 11, 15, 2, 12 ],
      "decl-vars" : [ 15 ],
      "line-start" : 1325,
      "ast" : {
        "kind" : "statement",
        "target" : {
          "kind" : "decl",
          "specs" : [ {
            "comments" : [ ],
            "declared-type" : {
              "go-type" : 23,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 23,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "Iovec"
              }
            },
            "kind" : "spec",
            "names" : [ {
              "ident-kind" : "NoKind",
              "kind" : "ident",
              "value" : "iov"
            } ],
            "type" : "var",
            "values" : [ ]
          } ],
          "type" : "var"
        },
        "type" : "declaration"
      },
      "assign-vars" : [ ],
      "line-end" : 1325,
      "code" : "var iov Iovec",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 8, 10 ],
      "in-vars" : [ 15, 2, 12, 4, 3, 5, 11 ],
      "exit" : false,
      "out-vars" : [ 11, 15, 2, 12, 4, 3, 5 ],
      "decl-vars" : [ ],
      "line-start" : 1326,
      "ast" : {
        "condition" : {
          "go-type" : 37,
          "kind" : "expression",
          "left" : {
            "arguments" : [ {
              "go-type" : 3,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "p",
                "variable" : 3
              }
            } ],
            "ellipsis" : false,
            "function" : {
              "go-type" : 38,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Builtin",
                "kind" : "ident",
                "value" : "len"
              }
            },
            "go-type" : 2,
            "kind" : "expression",
            "type" : "call"
          },
          "operator" : ">",
          "right" : {
            "go-type" : 2,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 1329,
      "code" : "if len(p) > 0 {\n\tiov.Base = &p[0]\n\tiov.SetLen(len(p))\n}",
      "entry" : false,
      "use-vars" : [ 3 ]
    }, {
      "update-vars" : [ 15 ],
      "successors" : [ 9 ],
      "in-vars" : [ 4, 3, 5, 11, 15, 2, 12 ],
      "exit" : false,
      "out-vars" : [ 15, 2, 12, 4, 3, 5, 11 ],
      "decl-vars" : [ ],
      "line-start" : 1327,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "Base",
            "variable" : 16
          },
          "go-type" : 21,
          "kind" : "expression",
          "target" : {
            "go-type" : 23,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "iov",
              "variable" : 15
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "go-type" : 21,
          "kind" : "expression",
          "operator" : "&",
          "target" : {
            "go-type" : 4,
            "index" : {
              "go-type" : 2,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "0"
              }
            },
            "kind" : "expression",
            "target" : {
              "go-type" : 3,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "p",
                "variable" : 3
              }
            },
            "type" : "index"
          },
          "type" : "unary"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 1327,
      "code" : "iov.Base = &p[0]",
      "entry" : false,
      "use-vars" : [ 3, 15 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 10 ],
      "in-vars" : [ 15, 2, 12, 4, 3, 5, 11 ],
      "exit" : false,
      "out-vars" : [ 11, 15, 2, 12, 4, 3, 5 ],
      "decl-vars" : [ ],
      "line-start" : 1328,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "arguments" : [ {
              "go-type" : 3,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "p",
                "variable" : 3
              }
            } ],
            "ellipsis" : false,
            "function" : {
              "go-type" : 38,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Builtin",
                "kind" : "ident",
                "value" : "len"
              }
            },
            "go-type" : 2,
            "kind" : "expression",
            "type" : "call"
          } ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "function" : 1,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "SetLen"
            },
            "go-type" : 41,
            "kind" : "expression",
            "target" : {
              "go-type" : 23,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "iov",
                "variable" : 15
              }
            },
            "type" : "selector"
          },
          "go-type" : 9,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 1328,
      "code" : "iov.SetLen(len(p))",
      "entry" : false,
      "use-vars" : [ 15, 3 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 11 ],
      "in-vars" : [ 11, 15, 2, 12, 4, 3, 5 ],
      "exit" : false,
      "out-vars" : [ 11, 15, 2, 12, 4, 3, 5, 18 ],
      "decl-vars" : [ 18 ],
      "line-start" : 1330,
      "ast" : {
        "kind" : "statement",
        "target" : {
          "kind" : "decl",
          "specs" : [ {
            "comments" : [ ],
            "declared-type" : {
              "go-type" : 4,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 4,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "byte"
              }
            },
            "kind" : "spec",
            "names" : [ {
              "ident-kind" : "NoKind",
              "kind" : "ident",
              "value" : "dummy"
            } ],
            "type" : "var",
            "values" : [ ]
          } ],
          "type" : "var"
        },
        "type" : "declaration"
      },
      "assign-vars" : [ ],
      "line-end" : 1330,
      "code" : "var dummy byte",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 12, 22 ],
      "in-vars" : [ 2, 12, 4, 3, 5, 18, 11, 15 ],
      "exit" : false,
      "out-vars" : [ 5, 18, 11, 15, 2, 12, 4, 3 ],
      "decl-vars" : [ ],
      "line-start" : 1331,
      "ast" : {
        "condition" : {
          "go-type" : 37,
          "kind" : "expression",
          "left" : {
            "arguments" : [ {
              "go-type" : 3,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "oob",
                "variable" : 4
              }
            } ],
            "ellipsis" : false,
            "function" : {
              "go-type" : 38,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Builtin",
                "kind" : "ident",
                "value" : "len"
              }
            },
            "go-type" : 2,
            "kind" : "expression",
            "type" : "call"
          },
          "operator" : ">",
          "right" : {
            "go-type" : 2,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 1346,
      "code" : "if len(oob) > 0 {\n\tif len(p) == 0 {\n\t\tvar sockType int\n\t\tsockType, err = GetsockoptInt(fd, SOL_SOCKET, SO_TYPE)\n\t\tif err != nil {\n\t\t\treturn\n\t\t}\n\n\t\tif sockType != SOCK_DGRAM {\n\t\t\tiov.Base = &dummy\n\t\t\tiov.SetLen(1)\n\t\t}\n\t}\n\tmsg.Control = &oob[0]\n\tmsg.SetControllen(len(oob))\n}",
      "entry" : false,
      "use-vars" : [ 4 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 13, 20 ],
      "in-vars" : [ 12, 4, 3, 5, 18, 11, 15, 2 ],
      "exit" : false,
      "out-vars" : [ 18, 11, 15, 2, 12, 4, 5 ],
      "decl-vars" : [ ],
      "line-start" : 1332,
      "ast" : {
        "condition" : {
          "go-type" : 37,
          "kind" : "expression",
          "left" : {
            "arguments" : [ {
              "go-type" : 3,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "p",
                "variable" : 3
              }
            } ],
            "ellipsis" : false,
            "function" : {
              "go-type" : 38,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Builtin",
                "kind" : "ident",
                "value" : "len"
              }
            },
            "go-type" : 2,
            "kind" : "expression",
            "type" : "call"
          },
          "operator" : "==",
          "right" : {
            "go-type" : 2,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 1343,
      "code" : "if len(p) == 0 {\n\tvar sockType int\n\tsockType, err = GetsockoptInt(fd, SOL_SOCKET, SO_TYPE)\n\tif err != nil {\n\t\treturn\n\t}\n\n\tif sockType != SOCK_DGRAM {\n\t\tiov.Base = &dummy\n\t\tiov.SetLen(1)\n\t}\n}",
      "entry" : false,
      "use-vars" : [ 3 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 14 ],
      "in-vars" : [ 18, 11, 15, 2, 12, 4, 5 ],
      "exit" : false,
      "out-vars" : [ 15, 2, 12, 4, 5, 18, 11 ],
      "decl-vars" : [ 19 ],
      "line-start" : 1333,
      "ast" : {
        "kind" : "statement",
        "target" : {
          "kind" : "decl",
          "specs" : [ {
            "comments" : [ ],
            "declared-type" : {
              "go-type" : 2,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 2,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "int"
              }
            },
            "kind" : "spec",
            "names" : [ {
              "ident-kind" : "NoKind",
              "kind" : "ident",
              "value" : "sockType"
            } ],
            "type" : "var",
            "values" : [ ]
          } ],
          "type" : "var"
        },
        "type" : "declaration"
      },
      "assign-vars" : [ ],
      "line-end" : 1333,
      "code" : "var sockType int",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ 10, 19 ],
      "successors" : [ 15 ],
      "in-vars" : [ 15, 2, 12, 4, 5, 18, 11 ],
      "exit" : false,
      "out-vars" : [ 11, 15, 12, 4, 5, 18, 10, 2, 19 ],
      "decl-vars" : [ ],
      "line-start" : 1334,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 2,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "sockType",
            "variable" : 19
          }
        }, {
          "go-type" : 14,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "err",
            "variable" : 10
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "fd",
              "variable" : 2
            }
          }, {
            "go-type" : 2,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "1"
            }
          }, {
            "go-type" : 2,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "3"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 45,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 2,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "GetsockoptInt"
            }
          },
          "go-type" : 44,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 19, 10 ],
      "line-end" : 1334,
      "code" : "sockType, err = GetsockoptInt(fd, SOL_SOCKET, SO_TYPE)",
      "entry" : false,
      "use-vars" : [ 2 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 16, 17 ],
      "in-vars" : [ 15, 10, 4, 5, 18, 11, 2, 12, 19 ],
      "exit" : false,
      "out-vars" : [ 12, 19, 4, 5, 18, 11, 15, 2 ],
      "decl-vars" : [ ],
      "line-start" : 1335,
      "ast" : {
        "condition" : {
          "go-type" : 37,
          "kind" : "expression",
          "left" : {
            "go-type" : 14,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "err",
              "variable" : 10
            }
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 47,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Nil",
              "kind" : "ident",
              "value" : "nil"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 1337,
      "code" : "if err != nil {\n\treturn\n}",
      "entry" : false,
      "use-vars" : [ 10 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 1336,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ ]
      },
      "assign-vars" : [ ],
      "line-end" : 1336,
      "code" : "return",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 18, 20 ],
      "in-vars" : [ 15, 2, 12, 19, 4, 5, 18, 11 ],
      "exit" : false,
      "out-vars" : [ 11, 15, 2, 12, 4, 5, 18 ],
      "decl-vars" : [ ],
      "line-start" : 1339,
      "ast" : {
        "condition" : {
          "go-type" : 37,
          "kind" : "expression",
          "left" : {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "sockType",
              "variable" : 19
            }
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 2,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "2"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 1342,
      "code" : "if sockType != SOCK_DGRAM {\n\tiov.Base = &dummy\n\tiov.SetLen(1)\n}",
      "entry" : false,
      "use-vars" : [ 19 ]
    }, {
      "update-vars" : [ 15 ],
      "successors" : [ 19 ],
      "in-vars" : [ 11, 15, 2, 12, 4, 5, 18 ],
      "exit" : false,
      "out-vars" : [ 5, 11, 15, 2, 12, 4 ],
      "decl-vars" : [ ],
      "line-start" : 1340,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "Base",
            "variable" : 16
          },
          "go-type" : 21,
          "kind" : "expression",
          "target" : {
            "go-type" : 23,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "iov",
              "variable" : 15
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "go-type" : 21,
          "kind" : "expression",
          "operator" : "&",
          "target" : {
            "go-type" : 4,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "dummy",
              "variable" : 18
            }
          },
          "type" : "unary"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 1340,
      "code" : "iov.Base = &dummy",
      "entry" : false,
      "use-vars" : [ 18, 15 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 20 ],
      "in-vars" : [ 11, 15, 2, 12, 4, 5 ],
      "exit" : false,
      "out-vars" : [ 5, 11, 15, 2, 12, 4 ],
      "decl-vars" : [ ],
      "line-start" : 1341,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 2,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "1"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "function" : 1,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "SetLen"
            },
            "go-type" : 41,
            "kind" : "expression",
            "target" : {
              "go-type" : 23,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "iov",
                "variable" : 15
              }
            },
            "type" : "selector"
          },
          "go-type" : 9,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 1341,
      "code" : "iov.SetLen(1)",
      "entry" : false,
      "use-vars" : [ 15 ]
    }, {
      "update-vars" : [ 11 ],
      "successors" : [ 21 ],
      "in-vars" : [ 5, 11, 15, 2, 12, 4 ],
      "exit" : false,
      "out-vars" : [ 5, 11, 15, 2, 12, 4 ],
      "decl-vars" : [ ],
      "line-start" : 1344,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "Control",
            "variable" : 20
          },
          "go-type" : 21,
          "kind" : "expression",
          "target" : {
            "go-type" : 19,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "msg",
              "variable" : 11
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "go-type" : 21,
          "kind" : "expression",
          "operator" : "&",
          "target" : {
            "go-type" : 4,
            "index" : {
              "go-type" : 2,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "0"
              }
            },
            "kind" : "expression",
            "target" : {
              "go-type" : 3,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "oob",
                "variable" : 4
              }
            },
            "type" : "index"
          },
          "type" : "unary"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 1344,
      "code" : "msg.Control = &oob[0]",
      "entry" : false,
      "use-vars" : [ 4, 11 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 22 ],
      "in-vars" : [ 2, 12, 4, 5, 11, 15 ],
      "exit" : false,
      "out-vars" : [ 12, 5, 11, 15, 2 ],
      "decl-vars" : [ ],
      "line-start" : 1345,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "arguments" : [ {
              "go-type" : 3,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "oob",
                "variable" : 4
              }
            } ],
            "ellipsis" : false,
            "function" : {
              "go-type" : 38,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Builtin",
                "kind" : "ident",
                "value" : "len"
              }
            },
            "go-type" : 2,
            "kind" : "expression",
            "type" : "call"
          } ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "function" : 3,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "SetControllen"
            },
            "go-type" : 41,
            "kind" : "expression",
            "target" : {
              "go-type" : 19,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "msg",
                "variable" : 11
              }
            },
            "type" : "selector"
          },
          "go-type" : 9,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 1345,
      "code" : "msg.SetControllen(len(oob))",
      "entry" : false,
      "use-vars" : [ 11, 4 ]
    }, {
      "update-vars" : [ 11 ],
      "successors" : [ 23 ],
      "in-vars" : [ 11, 15, 2, 12, 5 ],
      "exit" : false,
      "out-vars" : [ 11, 2, 12, 5 ],
      "decl-vars" : [ ],
      "line-start" : 1347,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "Iov",
            "variable" : 22
          },
          "go-type" : 22,
          "kind" : "expression",
          "target" : {
            "go-type" : 19,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "msg",
              "variable" : 11
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "go-type" : 22,
          "kind" : "expression",
          "operator" : "&",
          "target" : {
            "go-type" : 23,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "iov",
              "variable" : 15
            }
          },
          "type" : "unary"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 1347,
      "code" : "msg.Iov = &iov",
      "entry" : false,
      "use-vars" : [ 15, 11 ]
    }, {
      "update-vars" : [ 11 ],
      "successors" : [ 25 ],
      "in-vars" : [ 11, 2, 12, 5 ],
      "exit" : false,
      "out-vars" : [ 5, 11, 2, 12 ],
      "decl-vars" : [ ],
      "line-start" : 1348,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "Iovlen",
            "variable" : 23
          },
          "go-type" : 25,
          "kind" : "expression",
          "target" : {
            "go-type" : 19,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "msg",
              "variable" : 11
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "go-type" : 25,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "1"
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 1348,
      "code" : "msg.Iovlen = 1",
      "entry" : false,
      "use-vars" : [ 11 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 26, 27 ],
      "in-vars" : [ 11, 10, 2, 12 ],
      "exit" : false,
      "out-vars" : [ 2, 12, 11 ],
      "decl-vars" : [ ],
      "line-start" : 1349,
      "ast" : {
        "condition" : {
          "go-type" : 37,
          "kind" : "expression",
          "left" : {
            "go-type" : 14,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "err",
              "variable" : 10
            }
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 47,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Nil",
              "kind" : "ident",
              "value" : "nil"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 1351,
      "code" : "if n, err = recvmsg(fd, &msg, flags); err != nil {\n\treturn\n}",
      "entry" : false,
      "use-vars" : [ 10 ]
    }, {
      "update-vars" : [ 10, 6 ],
      "successors" : [ 24 ],
      "in-vars" : [ 11, 2, 12, 5 ],
      "exit" : false,
      "out-vars" : [ 10, 2, 12, 11 ],
      "decl-vars" : [ ],
      "line-start" : 1349,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 2,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "n",
            "variable" : 6
          }
        }, {
          "go-type" : 14,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "err",
            "variable" : 10
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "fd",
              "variable" : 2
            }
          }, {
            "go-type" : 49,
            "kind" : "expression",
            "operator" : "&",
            "target" : {
              "go-type" : 19,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "msg",
                "variable" : 11
              }
            },
            "type" : "unary"
          }, {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "flags",
              "variable" : 5
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 51,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 4,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "recvmsg"
            }
          },
          "go-type" : 50,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 6, 10 ],
      "line-end" : 1349,
      "code" : "n, err = recvmsg(fd, &msg, flags)",
      "entry" : false,
      "use-vars" : [ 5, 2, 11 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 1350,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ ]
      },
      "assign-vars" : [ ],
      "line-end" : 1350,
      "code" : "return",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ 7 ],
      "successors" : [ 28 ],
      "in-vars" : [ 11, 2, 12 ],
      "exit" : false,
      "out-vars" : [ 2, 12, 11 ],
      "decl-vars" : [ ],
      "line-start" : 1352,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 2,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "oobn",
            "variable" : 7
          }
        } ],
        "right" : [ {
          "coerced-to" : {
            "go-type" : 2,
            "kind" : "type",
            "type" : "identifier",
            "value" : {
              "go-type" : 2,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "int"
            }
          },
          "go-type" : 2,
          "kind" : "expression",
          "target" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "Controllen",
              "variable" : 24
            },
            "go-type" : 25,
            "kind" : "expression",
            "target" : {
              "go-type" : 19,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "msg",
                "variable" : 11
              }
            },
            "type" : "selector"
          },
          "type" : "cast"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 7 ],
      "line-end" : 1352,
      "code" : "oobn = int(msg.Controllen)",
      "entry" : false,
      "use-vars" : [ 11 ]
    }, {
      "update-vars" : [ 8 ],
      "successors" : [ 29 ],
      "in-vars" : [ 11, 2, 12 ],
      "exit" : false,
      "out-vars" : [ 2, 12 ],
      "decl-vars" : [ ],
      "line-start" : 1353,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 2,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "recvflags",
            "variable" : 8
          }
        } ],
        "right" : [ {
          "coerced-to" : {
            "go-type" : 2,
            "kind" : "type",
            "type" : "identifier",
            "value" : {
              "go-type" : 2,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "int"
            }
          },
          "go-type" : 2,
          "kind" : "expression",
          "target" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "Flags",
              "variable" : 25
            },
            "go-type" : 26,
            "kind" : "expression",
            "target" : {
              "go-type" : 19,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "msg",
                "variable" : 11
              }
            },
            "type" : "selector"
          },
          "type" : "cast"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 8 ],
      "line-end" : 1353,
      "code" : "recvflags = int(msg.Flags)",
      "entry" : false,
      "use-vars" : [ 11 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 30, 31 ],
      "in-vars" : [ 2, 12 ],
      "exit" : false,
      "out-vars" : [ 2, 12 ],
      "decl-vars" : [ ],
      "line-start" : 1355,
      "ast" : {
        "condition" : {
          "go-type" : 37,
          "kind" : "expression",
          "left" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "Family",
              "variable" : 27
            },
            "go-type" : 32,
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "Addr",
                "variable" : 26
              },
              "go-type" : 30,
              "kind" : "expression",
              "target" : {
                "go-type" : 28,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "rsa",
                  "variable" : 12
                }
              },
              "type" : "selector"
            },
            "type" : "selector"
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 32,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 1357,
      "code" : "if rsa.Addr.Family != AF_UNSPEC {\n\tfrom, err = anyToSockaddr(fd, &rsa)\n}",
      "entry" : false,
      "use-vars" : [ 12 ]
    }, {
      "update-vars" : [ 10, 9 ],
      "successors" : [ 31 ],
      "in-vars" : [ 2, 12 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 1356,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 6,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "from",
            "variable" : 9
          }
        }, {
          "go-type" : 14,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "err",
            "variable" : 10
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "fd",
              "variable" : 2
            }
          }, {
            "go-type" : 36,
            "kind" : "expression",
            "operator" : "&",
            "target" : {
              "go-type" : 28,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "rsa",
                "variable" : 12
              }
            },
            "type" : "unary"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 54,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 5,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "anyToSockaddr"
            }
          },
          "go-type" : 53,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 10, 9 ],
      "line-end" : 1356,
      "code" : "from, err = anyToSockaddr(fd, &rsa)",
      "entry" : false,
      "use-vars" : [ 12, 2 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 1358,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ ]
      },
      "assign-vars" : [ ],
      "line-end" : 1358,
      "code" : "return",
      "entry" : false,
      "use-vars" : [ ]
    } ],
    "code" : "func Recvmsg(fd int, p, oob []byte, flags int) (n, oobn int, recvflags int, from Sockaddr, err error) {\n\tvar msg Msghdr\n\tvar rsa RawSockaddrAny\n\tmsg.Name = (*byte)(unsafe.Pointer(&rsa))\n\tmsg.Namelen = uint32(SizeofSockaddrAny)\n\tvar iov Iovec\n\tif len(p) > 0 {\n\t\tiov.Base = &p[0]\n\t\tiov.SetLen(len(p))\n\t}\n\tvar dummy byte\n\tif len(oob) > 0 {\n\t\tif len(p) == 0 {\n\t\t\tvar sockType int\n\t\t\tsockType, err = GetsockoptInt(fd, SOL_SOCKET, SO_TYPE)\n\t\t\tif err != nil {\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\tif sockType != SOCK_DGRAM {\n\t\t\t\tiov.Base = &dummy\n\t\t\t\tiov.SetLen(1)\n\t\t\t}\n\t\t}\n\t\tmsg.Control = &oob[0]\n\t\tmsg.SetControllen(len(oob))\n\t}\n\tmsg.Iov = &iov\n\tmsg.Iovlen = 1\n\tif n, err = recvmsg(fd, &msg, flags); err != nil {\n\t\treturn\n\t}\n\toobn = int(msg.Controllen)\n\trecvflags = int(msg.Flags)\n\n\tif rsa.Addr.Family != AF_UNSPEC {\n\t\tfrom, err = anyToSockaddr(fd, &rsa)\n\t}\n\treturn\n}",
    "defines" : [ 0 ],
    "functions" : [ {
      "name" : "Recvmsg",
      "package" : 0,
      "type" : 0,
      "exported" : true
    }, {
      "name" : "SetLen",
      "package" : 0,
      "type" : 43,
      "exported" : true
    }, {
      "name" : "GetsockoptInt",
      "package" : 0,
      "type" : 45,
      "exported" : true
    }, {
      "name" : "SetControllen",
      "package" : 0,
      "type" : 48,
      "exported" : true
    }, {
      "name" : "recvmsg",
      "package" : 0,
      "type" : 51,
      "exported" : false
    }, {
      "name" : "anyToSockaddr",
      "package" : 0,
      "type" : 54,
      "exported" : false
    } ],
    "line-end" : 1359,
    "line-start" : 1320,
    "names" : [ "Recvmsg" ],
    "package" : 0,
    "packages" : [ {
      "name" : "unix",
      "path" : "golang.org/x/sys/unix"
    }, {
      "name" : "unsafe",
      "path" : "unsafe"
    } ],
    "params" : [ 2, 3, 4, 5 ],
    "receivers" : [ ],
    "results" : [ 6, 7, 8, 9, 10 ],
    "type" : "function",
    "types" : [ {
      "name" : "func(fd int, p []byte, oob []byte, flags int) (n int, oobn int, recvflags int, from golang.org/x/sys/unix.Sockaddr, err error)",
      "params" : 1,
      "recv" : -1,
      "results" : 5,
      "type" : "Signature",
      "underlying" : 0,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "fd",
        "type" : 2
      }, {
        "name" : "p",
        "type" : 3
      }, {
        "name" : "oob",
        "type" : 3
      }, {
        "name" : "flags",
        "type" : 2
      } ],
      "name" : "(fd int, p []byte, oob []byte, flags int)",
      "type" : "Tuple",
      "underlying" : 1
    }, {
      "name" : "int",
      "type" : "Basic",
      "underlying" : 2
    }, {
      "elem" : 4,
      "name" : "[]byte",
      "type" : "Slice",
      "underlying" : 3
    }, {
      "name" : "byte",
      "type" : "Basic",
      "underlying" : 4
    }, {
      "fields" : [ {
        "name" : "n",
        "type" : 2
      }, {
        "name" : "oobn",
        "type" : 2
      }, {
        "name" : "recvflags",
        "type" : 2
      }, {
        "name" : "from",
        "type" : 6
      }, {
        "name" : "err",
        "type" : 14
      } ],
      "name" : "(n int, oobn int, recvflags int, from golang.org/x/sys/unix.Sockaddr, err error)",
      "type" : "Tuple",
      "underlying" : 5
    }, {
      "local-name" : "Sockaddr",
      "name" : "golang.org/x/sys/unix.Sockaddr",
      "package" : 0,
      "type" : "Named",
      "underlying" : 7
    }, {
      "methods" : [ {
        "name" : "sockaddr",
        "type" : 8
      } ],
      "name" : "interface{sockaddr() (ptr unsafe.Pointer, len golang.org/x/sys/unix._Socklen, err error)}",
      "type" : "Interface",
      "underlying" : 7
    }, {
      "name" : "(golang.org/x/sys/unix.Sockaddr) func() (ptr unsafe.Pointer, len golang.org/x/sys/unix._Socklen, err error)",
      "params" : 9,
      "recv" : 1,
      "results" : 10,
      "type" : "Signature",
      "underlying" : 8,
      "variadic" : false
    }, {
      "fields" : [ ],
      "name" : "()",
      "type" : "Tuple",
      "underlying" : 9
    }, {
      "fields" : [ {
        "name" : "ptr",
        "type" : 11
      }, {
        "name" : "len",
        "type" : 12
      }, {
        "name" : "err",
        "type" : 14
      } ],
      "name" : "(ptr unsafe.Pointer, len golang.org/x/sys/unix._Socklen, err error)",
      "type" : "Tuple",
      "underlying" : 10
    }, {
      "local-name" : "Pointer",
      "name" : "unsafe.Pointer",
      "package" : 1,
      "type" : "Basic",
      "underlying" : 11
    }, {
      "local-name" : "_Socklen",
      "name" : "golang.org/x/sys/unix._Socklen",
      "package" : 0,
      "type" : "Named",
      "underlying" : 13
    }, {
      "name" : "uint32",
      "type" : "Basic",
      "underlying" : 13
    }, {
      "local-name" : "error",
      "name" : "error",
      "package" : -1,
      "type" : "Named",
      "underlying" : 15
    }, {
      "methods" : [ {
        "name" : "Error",
        "type" : 16
      } ],
      "name" : "interface{Error() string}",
      "type" : "Interface",
      "underlying" : 15
    }, {
      "name" : "(error) func() string",
      "params" : 9,
      "recv" : 0,
      "results" : 17,
      "type" : "Signature",
      "underlying" : 16,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 18
      } ],
      "name" : "(string)",
      "type" : "Tuple",
      "underlying" : 17
    }, {
      "name" : "string",
      "type" : "Basic",
      "underlying" : 18
    }, {
      "local-name" : "Msghdr",
      "name" : "golang.org/x/sys/unix.Msghdr",
      "package" : 0,
      "type" : "Named",
      "underlying" : 20
    }, {
      "fields" : [ {
        "name" : "Name",
        "type" : 21
      }, {
        "name" : "Namelen",
        "type" : 13
      }, {
        "name" : "Iov",
        "type" : 22
      }, {
        "name" : "Iovlen",
        "type" : 25
      }, {
        "name" : "Control",
        "type" : 21
      }, {
        "name" : "Controllen",
        "type" : 25
      }, {
        "name" : "Flags",
        "type" : 26
      }, {
        "name" : "_",
        "type" : 27
      } ],
      "name" : "struct{Name *byte; Namelen uint32; Iov *golang.org/x/sys/unix.Iovec; Iovlen uint64; Control *byte; Controllen uint64; Flags int32; _ [4]byte}",
      "type" : "Struct",
      "underlying" : 20
    }, {
      "elem" : 4,
      "name" : "*byte",
      "type" : "Pointer",
      "underlying" : 21
    }, {
      "elem" : 23,
      "name" : "*golang.org/x/sys/unix.Iovec",
      "type" : "Pointer",
      "underlying" : 22
    }, {
      "local-name" : "Iovec",
      "name" : "golang.org/x/sys/unix.Iovec",
      "package" : 0,
      "type" : "Named",
      "underlying" : 24
    }, {
      "fields" : [ {
        "name" : "Base",
        "type" : 21
      }, {
        "name" : "Len",
        "type" : 25
      } ],
      "name" : "struct{Base *byte; Len uint64}",
      "type" : "Struct",
      "underlying" : 24
    }, {
      "name" : "uint64",
      "type" : "Basic",
      "underlying" : 25
    }, {
      "name" : "int32",
      "type" : "Basic",
      "underlying" : 26
    }, {
      "elem" : 4,
      "name" : "[4]byte",
      "type" : "Array",
      "underlying" : 27
    }, {
      "local-name" : "RawSockaddrAny",
      "name" : "golang.org/x/sys/unix.RawSockaddrAny",
      "package" : 0,
      "type" : "Named",
      "underlying" : 29
    }, {
      "fields" : [ {
        "name" : "Addr",
        "type" : 30
      }, {
        "name" : "Pad",
        "type" : 35
      } ],
      "name" : "struct{Addr golang.org/x/sys/unix.RawSockaddr; Pad [96]int8}",
      "type" : "Struct",
      "underlying" : 29
    }, {
      "local-name" : "RawSockaddr",
      "name" : "golang.org/x/sys/unix.RawSockaddr",
      "package" : 0,
      "type" : "Named",
      "underlying" : 31
    }, {
      "fields" : [ {
        "name" : "Family",
        "type" : 32
      }, {
        "name" : "Data",
        "type" : 33
      } ],
      "name" : "struct{Family uint16; Data [14]int8}",
      "type" : "Struct",
      "underlying" : 31
    }, {
      "name" : "uint16",
      "type" : "Basic",
      "underlying" : 32
    }, {
      "elem" : 34,
      "name" : "[14]int8",
      "type" : "Array",
      "underlying" : 33
    }, {
      "name" : "int8",
      "type" : "Basic",
      "underlying" : 34
    }, {
      "elem" : 34,
      "name" : "[96]int8",
      "type" : "Array",
      "underlying" : 35
    }, {
      "elem" : 28,
      "name" : "*golang.org/x/sys/unix.RawSockaddrAny",
      "type" : "Pointer",
      "underlying" : 36
    }, {
      "name" : "untyped bool",
      "type" : "Basic",
      "underlying" : 37
    }, {
      "name" : "func([]byte) int",
      "params" : 39,
      "recv" : -1,
      "results" : 40,
      "type" : "Signature",
      "underlying" : 38,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 3
      } ],
      "name" : "([]byte)",
      "type" : "Tuple",
      "underlying" : 39
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 2
      } ],
      "name" : "(int)",
      "type" : "Tuple",
      "underlying" : 40
    }, {
      "name" : "func(length int)",
      "params" : 42,
      "recv" : -1,
      "results" : 9,
      "type" : "Signature",
      "underlying" : 41,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "length",
        "type" : 2
      } ],
      "name" : "(length int)",
      "type" : "Tuple",
      "underlying" : 42
    }, {
      "name" : "(*golang.org/x/sys/unix.Iovec) func(length int)",
      "params" : 42,
      "recv" : 17,
      "results" : 9,
      "type" : "Signature",
      "underlying" : 43,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "value",
        "type" : 2
      }, {
        "name" : "err",
        "type" : 14
      } ],
      "name" : "(value int, err error)",
      "type" : "Tuple",
      "underlying" : 44
    }, {
      "name" : "func(fd int, level int, opt int) (value int, err error)",
      "params" : 46,
      "recv" : -1,
      "results" : 44,
      "type" : "Signature",
      "underlying" : 45,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "fd",
        "type" : 2
      }, {
        "name" : "level",
        "type" : 2
      }, {
        "name" : "opt",
        "type" : 2
      } ],
      "name" : "(fd int, level int, opt int)",
      "type" : "Tuple",
      "underlying" : 46
    }, {
      "name" : "untyped nil",
      "type" : "Basic",
      "underlying" : 47
    }, {
      "name" : "(*golang.org/x/sys/unix.Msghdr) func(length int)",
      "params" : 42,
      "recv" : 21,
      "results" : 9,
      "type" : "Signature",
      "underlying" : 48,
      "variadic" : false
    }, {
      "elem" : 19,
      "name" : "*golang.org/x/sys/unix.Msghdr",
      "type" : "Pointer",
      "underlying" : 49
    }, {
      "fields" : [ {
        "name" : "n",
        "type" : 2
      }, {
        "name" : "err",
        "type" : 14
      } ],
      "name" : "(n int, err error)",
      "type" : "Tuple",
      "underlying" : 50
    }, {
      "name" : "func(s int, msg *golang.org/x/sys/unix.Msghdr, flags int) (n int, err error)",
      "params" : 52,
      "recv" : -1,
      "results" : 50,
      "type" : "Signature",
      "underlying" : 51,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "s",
        "type" : 2
      }, {
        "name" : "msg",
        "type" : 49
      }, {
        "name" : "flags",
        "type" : 2
      } ],
      "name" : "(s int, msg *golang.org/x/sys/unix.Msghdr, flags int)",
      "type" : "Tuple",
      "underlying" : 52
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 6
      }, {
        "name" : "",
        "type" : 14
      } ],
      "name" : "(golang.org/x/sys/unix.Sockaddr, error)",
      "type" : "Tuple",
      "underlying" : 53
    }, {
      "name" : "func(fd int, rsa *golang.org/x/sys/unix.RawSockaddrAny) (golang.org/x/sys/unix.Sockaddr, error)",
      "params" : 55,
      "recv" : -1,
      "results" : 53,
      "type" : "Signature",
      "underlying" : 54,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "fd",
        "type" : 2
      }, {
        "name" : "rsa",
        "type" : 36
      } ],
      "name" : "(fd int, rsa *golang.org/x/sys/unix.RawSockaddrAny)",
      "type" : "Tuple",
      "underlying" : 55
    } ],
    "variables" : [ {
      "name" : "",
      "package" : -1,
      "type" : 14,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 0,
      "type" : 6,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "fd",
      "package" : 0,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "p",
      "package" : 0,
      "type" : 3,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "oob",
      "package" : 0,
      "type" : 3,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "flags",
      "package" : 0,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "n",
      "package" : 0,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "oobn",
      "package" : 0,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "recvflags",
      "package" : 0,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "from",
      "package" : 0,
      "type" : 6,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "err",
      "package" : 0,
      "type" : 14,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "msg",
      "package" : 0,
      "type" : 19,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "rsa",
      "package" : 0,
      "type" : 28,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "Name",
      "package" : 0,
      "type" : 21,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "Namelen",
      "package" : 0,
      "type" : 13,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "iov",
      "package" : 0,
      "type" : 23,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "Base",
      "package" : 0,
      "type" : 21,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "iov",
      "package" : 0,
      "type" : 22,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "dummy",
      "package" : 0,
      "type" : 4,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "sockType",
      "package" : 0,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "Control",
      "package" : 0,
      "type" : 21,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "msghdr",
      "package" : 0,
      "type" : 49,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "Iov",
      "package" : 0,
      "type" : 22,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "Iovlen",
      "package" : 0,
      "type" : 25,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "Controllen",
      "package" : 0,
      "type" : 25,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "Flags",
      "package" : 0,
      "type" : 26,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "Addr",
      "package" : 0,
      "type" : 30,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "Family",
      "package" : 0,
      "type" : 32,
      "exported" : true,
      "embedded" : false,
      "field" : true
    } ]
  },
  "go-version" : "1.14.3"
}