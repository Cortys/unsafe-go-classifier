{
  "usage" : {
    "file" : "mwbbuf.go",
    "label1" : "pointer-arithmetic",
    "label2" : "layout",
    "line" : "98",
    "module" : "std",
    "pkg" : "runtime",
    "project" : "kubernetes/kubernetes",
    "snippet" : "b.end = uintptr(unsafe.Pointer(&b.buf[2*wbBufEntryPointers]))",
    "version" : "std"
  },
  "cfg" : {
    "blocks" : [ {
      "update-vars" : [ ],
      "successors" : [ 2 ],
      "in-vars" : [ 0, 1, 2, 3 ],
      "exit" : false,
      "out-vars" : [ 0, 1, 2, 3 ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[entry]",
      "entry" : true,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ ],
      "in-vars" : [ ],
      "exit" : true,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[exit]",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 3 ],
      "in-vars" : [ 3, 0, 1, 2 ],
      "exit" : false,
      "out-vars" : [ 0, 5, 1, 2, 3 ],
      "decl-vars" : [ 5 ],
      "line-start" : 87,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "start"
          }
        } ],
        "right" : [ {
          "coerced-to" : {
            "go-type" : 5,
            "kind" : "type",
            "type" : "identifier",
            "value" : {
              "go-type" : 5,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "uintptr"
            }
          },
          "go-type" : 5,
          "kind" : "expression",
          "target" : {
            "coerced-to" : {
              "go-type" : 13,
              "kind" : "type",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 1,
                "value" : "unsafe"
              },
              "type" : "identifier",
              "value" : {
                "go-type" : 13,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "Pointer"
              }
            },
            "go-type" : 13,
            "kind" : "expression",
            "target" : {
              "go-type" : 14,
              "kind" : "expression",
              "operator" : "&",
              "target" : {
                "go-type" : 5,
                "index" : {
                  "go-type" : 15,
                  "kind" : "constant",
                  "value" : {
                    "type" : "INT",
                    "value" : "0"
                  }
                },
                "kind" : "expression",
                "target" : {
                  "field" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "buf",
                    "variable" : 4
                  },
                  "go-type" : 6,
                  "kind" : "expression",
                  "target" : {
                    "go-type" : 2,
                    "kind" : "expression",
                    "type" : "identifier",
                    "value" : {
                      "ident-kind" : "Var",
                      "kind" : "ident",
                      "value" : "b",
                      "variable" : 0
                    }
                  },
                  "type" : "selector"
                },
                "type" : "index"
              },
              "type" : "unary"
            },
            "type" : "cast"
          },
          "type" : "cast"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 87,
      "code" : "start := uintptr(unsafe.Pointer(&b.buf[0]))",
      "entry" : false,
      "use-vars" : [ 0 ]
    }, {
      "update-vars" : [ 0 ],
      "successors" : [ 4 ],
      "in-vars" : [ 0, 5, 1, 2, 3 ],
      "exit" : false,
      "out-vars" : [ 5, 1, 2, 3, 0 ],
      "decl-vars" : [ ],
      "line-start" : 88,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "next",
            "variable" : 6
          },
          "go-type" : 5,
          "kind" : "expression",
          "target" : {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "b",
              "variable" : 0
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "go-type" : 5,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "start",
            "variable" : 5
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 88,
      "code" : "b.next = start",
      "entry" : false,
      "use-vars" : [ 5, 0 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 5, 6 ],
      "in-vars" : [ 0, 5, 1, 2, 3 ],
      "exit" : false,
      "out-vars" : [ 0, 5 ],
      "decl-vars" : [ ],
      "line-start" : 89,
      "ast" : {
        "condition" : {
          "go-type" : 8,
          "kind" : "expression",
          "left" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "cgo",
              "variable" : 7
            },
            "go-type" : 8,
            "kind" : "expression",
            "target" : {
              "go-type" : 9,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "writeBarrier",
                "variable" : 3
              }
            },
            "type" : "selector"
          },
          "operator" : "||",
          "right" : {
            "go-type" : 8,
            "kind" : "expression",
            "target" : {
              "go-type" : 8,
              "kind" : "expression",
              "left" : {
                "go-type" : 8,
                "kind" : "constant",
                "value" : {
                  "type" : "BOOL",
                  "value" : "false"
                }
              },
              "operator" : "&&",
              "right" : {
                "go-type" : 8,
                "kind" : "expression",
                "target" : {
                  "go-type" : 8,
                  "kind" : "expression",
                  "left" : {
                    "go-type" : 8,
                    "kind" : "expression",
                    "type" : "identifier",
                    "value" : {
                      "ident-kind" : "Var",
                      "kind" : "ident",
                      "value" : "throwOnGCWork",
                      "variable" : 2
                    }
                  },
                  "operator" : "||",
                  "right" : {
                    "go-type" : 8,
                    "kind" : "expression",
                    "left" : {
                      "field" : {
                        "ident-kind" : "Var",
                        "kind" : "ident",
                        "value" : "debugGen",
                        "variable" : 8
                      },
                      "go-type" : 7,
                      "kind" : "expression",
                      "target" : {
                        "go-type" : 2,
                        "kind" : "expression",
                        "type" : "identifier",
                        "value" : {
                          "ident-kind" : "Var",
                          "kind" : "ident",
                          "value" : "b",
                          "variable" : 0
                        }
                      },
                      "type" : "selector"
                    },
                    "operator" : "==",
                    "right" : {
                      "arguments" : [ {
                        "go-type" : 18,
                        "kind" : "expression",
                        "operator" : "&",
                        "target" : {
                          "go-type" : 7,
                          "kind" : "expression",
                          "type" : "identifier",
                          "value" : {
                            "ident-kind" : "Var",
                            "kind" : "ident",
                            "value" : "gcWorkPauseGen",
                            "variable" : 1
                          }
                        },
                        "type" : "unary"
                      } ],
                      "ellipsis" : false,
                      "function" : {
                        "go-type" : 16,
                        "kind" : "expression",
                        "qualifier" : {
                          "ident-kind" : "PkgName",
                          "kind" : "ident",
                          "package" : 2,
                          "value" : "atomic"
                        },
                        "type" : "identifier",
                        "value" : {
                          "ident-kind" : "Func",
                          "kind" : "ident",
                          "value" : "Load"
                        }
                      },
                      "go-type" : 7,
                      "kind" : "expression",
                      "type" : "call"
                    },
                    "type" : "binary"
                  },
                  "type" : "binary"
                },
                "type" : "paren"
              },
              "type" : "binary"
            },
            "type" : "paren"
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 101,
      "code" : "if writeBarrier.cgo || (debugCachedWork && (throwOnGCWork || b.debugGen == atomic.Load(&gcWorkPauseGen))) {\n\n\tb.end = uintptr(unsafe.Pointer(&b.buf[wbBufEntryPointers]))\n} else if testSmallBuf {\n\n\tb.end = uintptr(unsafe.Pointer(&b.buf[2*wbBufEntryPointers]))\n} else {\n\tb.end = start + uintptr(len(b.buf))*unsafe.Sizeof(b.buf[0])\n}",
      "entry" : false,
      "use-vars" : [ 2, 3, 0, 1 ]
    }, {
      "update-vars" : [ 0 ],
      "successors" : [ 9 ],
      "in-vars" : [ 0 ],
      "exit" : false,
      "out-vars" : [ 0 ],
      "decl-vars" : [ ],
      "line-start" : 92,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "end",
            "variable" : 9
          },
          "go-type" : 5,
          "kind" : "expression",
          "target" : {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "b",
              "variable" : 0
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "coerced-to" : {
            "go-type" : 5,
            "kind" : "type",
            "type" : "identifier",
            "value" : {
              "go-type" : 5,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "uintptr"
            }
          },
          "go-type" : 5,
          "kind" : "expression",
          "target" : {
            "coerced-to" : {
              "go-type" : 13,
              "kind" : "type",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 1,
                "value" : "unsafe"
              },
              "type" : "identifier",
              "value" : {
                "go-type" : 13,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "Pointer"
              }
            },
            "go-type" : 13,
            "kind" : "expression",
            "target" : {
              "go-type" : 14,
              "kind" : "expression",
              "operator" : "&",
              "target" : {
                "go-type" : 5,
                "index" : {
                  "go-type" : 15,
                  "kind" : "constant",
                  "value" : {
                    "type" : "INT",
                    "value" : "2"
                  }
                },
                "kind" : "expression",
                "target" : {
                  "field" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "buf",
                    "variable" : 4
                  },
                  "go-type" : 6,
                  "kind" : "expression",
                  "target" : {
                    "go-type" : 2,
                    "kind" : "expression",
                    "type" : "identifier",
                    "value" : {
                      "ident-kind" : "Var",
                      "kind" : "ident",
                      "value" : "b",
                      "variable" : 0
                    }
                  },
                  "type" : "selector"
                },
                "type" : "index"
              },
              "type" : "unary"
            },
            "type" : "cast"
          },
          "type" : "cast"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 92,
      "code" : "b.end = uintptr(unsafe.Pointer(&b.buf[wbBufEntryPointers]))",
      "entry" : false,
      "use-vars" : [ 0 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 7, 8 ],
      "in-vars" : [ 0, 5 ],
      "exit" : false,
      "out-vars" : [ 5, 0 ],
      "decl-vars" : [ ],
      "line-start" : 93,
      "ast" : {
        "condition" : {
          "go-type" : 20,
          "kind" : "constant",
          "value" : {
            "type" : "BOOL",
            "value" : "false"
          }
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 101,
      "code" : "if testSmallBuf {\n\n\tb.end = uintptr(unsafe.Pointer(&b.buf[2*wbBufEntryPointers]))\n} else {\n\tb.end = start + uintptr(len(b.buf))*unsafe.Sizeof(b.buf[0])\n}",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ 0 ],
      "successors" : [ 9 ],
      "in-vars" : [ 0 ],
      "exit" : false,
      "out-vars" : [ 0 ],
      "decl-vars" : [ ],
      "line-start" : 98,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "end",
            "variable" : 9
          },
          "go-type" : 5,
          "kind" : "expression",
          "target" : {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "b",
              "variable" : 0
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "coerced-to" : {
            "go-type" : 5,
            "kind" : "type",
            "type" : "identifier",
            "value" : {
              "go-type" : 5,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "uintptr"
            }
          },
          "go-type" : 5,
          "kind" : "expression",
          "target" : {
            "coerced-to" : {
              "go-type" : 13,
              "kind" : "type",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 1,
                "value" : "unsafe"
              },
              "type" : "identifier",
              "value" : {
                "go-type" : 13,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "Pointer"
              }
            },
            "go-type" : 13,
            "kind" : "expression",
            "target" : {
              "go-type" : 14,
              "kind" : "expression",
              "operator" : "&",
              "target" : {
                "go-type" : 5,
                "index" : {
                  "go-type" : 15,
                  "kind" : "constant",
                  "value" : {
                    "type" : "INT",
                    "value" : "4"
                  }
                },
                "kind" : "expression",
                "target" : {
                  "field" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "buf",
                    "variable" : 4
                  },
                  "go-type" : 6,
                  "kind" : "expression",
                  "target" : {
                    "go-type" : 2,
                    "kind" : "expression",
                    "type" : "identifier",
                    "value" : {
                      "ident-kind" : "Var",
                      "kind" : "ident",
                      "value" : "b",
                      "variable" : 0
                    }
                  },
                  "type" : "selector"
                },
                "type" : "index"
              },
              "type" : "unary"
            },
            "type" : "cast"
          },
          "type" : "cast"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 98,
      "code" : "b.end = uintptr(unsafe.Pointer(&b.buf[2*wbBufEntryPointers]))",
      "entry" : false,
      "use-vars" : [ 0 ]
    }, {
      "update-vars" : [ 0 ],
      "successors" : [ 9 ],
      "in-vars" : [ 0, 5 ],
      "exit" : false,
      "out-vars" : [ 0 ],
      "decl-vars" : [ ],
      "line-start" : 100,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "end",
            "variable" : 9
          },
          "go-type" : 5,
          "kind" : "expression",
          "target" : {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "b",
              "variable" : 0
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "go-type" : 5,
          "kind" : "expression",
          "left" : {
            "go-type" : 5,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "start",
              "variable" : 5
            }
          },
          "operator" : "+",
          "right" : {
            "go-type" : 5,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "4096"
            }
          },
          "type" : "binary"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 100,
      "code" : "b.end = start + uintptr(len(b.buf))*unsafe.Sizeof(b.buf[0])",
      "entry" : false,
      "use-vars" : [ 0, 5 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1, 10 ],
      "in-vars" : [ 0 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 103,
      "ast" : {
        "condition" : {
          "go-type" : 20,
          "kind" : "expression",
          "left" : {
            "go-type" : 5,
            "kind" : "expression",
            "left" : {
              "go-type" : 5,
              "kind" : "expression",
              "target" : {
                "go-type" : 5,
                "kind" : "expression",
                "left" : {
                  "field" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "end",
                    "variable" : 9
                  },
                  "go-type" : 5,
                  "kind" : "expression",
                  "target" : {
                    "go-type" : 2,
                    "kind" : "expression",
                    "type" : "identifier",
                    "value" : {
                      "ident-kind" : "Var",
                      "kind" : "ident",
                      "value" : "b",
                      "variable" : 0
                    }
                  },
                  "type" : "selector"
                },
                "operator" : "-",
                "right" : {
                  "field" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "next",
                    "variable" : 6
                  },
                  "go-type" : 5,
                  "kind" : "expression",
                  "target" : {
                    "go-type" : 2,
                    "kind" : "expression",
                    "type" : "identifier",
                    "value" : {
                      "ident-kind" : "Var",
                      "kind" : "ident",
                      "value" : "b",
                      "variable" : 0
                    }
                  },
                  "type" : "selector"
                },
                "type" : "binary"
              },
              "type" : "paren"
            },
            "operator" : "%",
            "right" : {
              "go-type" : 5,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "16"
              }
            },
            "type" : "binary"
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 5,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 105,
      "code" : "if (b.end-b.next)%(wbBufEntryPointers*unsafe.Sizeof(b.buf[0])) != 0 {\n\tthrow(\"bad write barrier buffer bounds\")\n}",
      "entry" : false,
      "use-vars" : [ 0 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 104,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 23,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "bad write barrier buffer bounds"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 21,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "throw"
            }
          },
          "go-type" : 1,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 104,
      "code" : "throw(\"bad write barrier buffer bounds\")",
      "entry" : false,
      "use-vars" : [ ]
    } ],
    "code" : "// reset empties b by resetting its next and end pointers.\nfunc (b *wbBuf) reset() {\n\tstart := uintptr(unsafe.Pointer(&b.buf[0]))\n\tb.next = start\n\tif writeBarrier.cgo || (debugCachedWork && (throwOnGCWork || b.debugGen == atomic.Load(&gcWorkPauseGen))) {\n\n\t\tb.end = uintptr(unsafe.Pointer(&b.buf[wbBufEntryPointers]))\n\t} else if testSmallBuf {\n\n\t\tb.end = uintptr(unsafe.Pointer(&b.buf[2*wbBufEntryPointers]))\n\t} else {\n\t\tb.end = start + uintptr(len(b.buf))*unsafe.Sizeof(b.buf[0])\n\t}\n\n\tif (b.end-b.next)%(wbBufEntryPointers*unsafe.Sizeof(b.buf[0])) != 0 {\n\t\tthrow(\"bad write barrier buffer bounds\")\n\t}\n}",
    "defines" : [ 0 ],
    "functions" : [ {
      "name" : "reset",
      "package" : 0,
      "type" : 0,
      "exported" : false
    }, {
      "name" : "Load",
      "package" : 2,
      "type" : 16,
      "exported" : true
    }, {
      "name" : "throw",
      "package" : 0,
      "type" : 21,
      "exported" : false
    } ],
    "line-end" : 106,
    "line-start" : 86,
    "names" : [ "reset" ],
    "package" : 0,
    "packages" : [ {
      "name" : "runtime",
      "path" : "runtime"
    }, {
      "name" : "unsafe",
      "path" : "unsafe"
    }, {
      "name" : "atomic",
      "path" : "runtime/internal/atomic"
    } ],
    "params" : [ ],
    "receivers" : [ 0 ],
    "results" : [ ],
    "type" : "function",
    "types" : [ {
      "name" : "func()",
      "params" : 1,
      "recv" : 0,
      "results" : 1,
      "type" : "Signature",
      "underlying" : 0,
      "variadic" : false
    }, {
      "fields" : [ ],
      "name" : "()",
      "type" : "Tuple",
      "underlying" : 1
    }, {
      "elem" : 3,
      "name" : "*runtime.wbBuf",
      "type" : "Pointer",
      "underlying" : 2
    }, {
      "local-name" : "wbBuf",
      "name" : "runtime.wbBuf",
      "package" : 0,
      "type" : "Named",
      "underlying" : 4
    }, {
      "fields" : [ {
        "name" : "next",
        "type" : 5
      }, {
        "name" : "end",
        "type" : 5
      }, {
        "name" : "buf",
        "type" : 6
      }, {
        "name" : "debugGen",
        "type" : 7
      } ],
      "name" : "struct{next uintptr; end uintptr; buf [512]uintptr; debugGen uint32}",
      "type" : "Struct",
      "underlying" : 4
    }, {
      "name" : "uintptr",
      "type" : "Basic",
      "underlying" : 5
    }, {
      "elem" : 5,
      "name" : "[512]uintptr",
      "type" : "Array",
      "underlying" : 6
    }, {
      "name" : "uint32",
      "type" : "Basic",
      "underlying" : 7
    }, {
      "name" : "bool",
      "type" : "Basic",
      "underlying" : 8
    }, {
      "fields" : [ {
        "name" : "enabled",
        "type" : 8
      }, {
        "name" : "pad",
        "type" : 10
      }, {
        "name" : "needed",
        "type" : 8
      }, {
        "name" : "cgo",
        "type" : 8
      }, {
        "name" : "alignme",
        "type" : 12
      } ],
      "name" : "struct{enabled bool; pad [3]byte; needed bool; cgo bool; alignme uint64}",
      "type" : "Struct",
      "underlying" : 9
    }, {
      "elem" : 11,
      "name" : "[3]byte",
      "type" : "Array",
      "underlying" : 10
    }, {
      "name" : "byte",
      "type" : "Basic",
      "underlying" : 11
    }, {
      "name" : "uint64",
      "type" : "Basic",
      "underlying" : 12
    }, {
      "local-name" : "Pointer",
      "name" : "unsafe.Pointer",
      "package" : 1,
      "type" : "Basic",
      "underlying" : 13
    }, {
      "elem" : 5,
      "name" : "*uintptr",
      "type" : "Pointer",
      "underlying" : 14
    }, {
      "name" : "int",
      "type" : "Basic",
      "underlying" : 15
    }, {
      "name" : "func(ptr *uint32) uint32",
      "params" : 17,
      "recv" : -1,
      "results" : 19,
      "type" : "Signature",
      "underlying" : 16,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "ptr",
        "type" : 18
      } ],
      "name" : "(ptr *uint32)",
      "type" : "Tuple",
      "underlying" : 17
    }, {
      "elem" : 7,
      "name" : "*uint32",
      "type" : "Pointer",
      "underlying" : 18
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 7
      } ],
      "name" : "(uint32)",
      "type" : "Tuple",
      "underlying" : 19
    }, {
      "name" : "untyped bool",
      "type" : "Basic",
      "underlying" : 20
    }, {
      "name" : "func(s string)",
      "params" : 22,
      "recv" : -1,
      "results" : 1,
      "type" : "Signature",
      "underlying" : 21,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "s",
        "type" : 23
      } ],
      "name" : "(s string)",
      "type" : "Tuple",
      "underlying" : 22
    }, {
      "name" : "string",
      "type" : "Basic",
      "underlying" : 23
    } ],
    "variables" : [ {
      "name" : "b",
      "package" : 0,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "gcWorkPauseGen",
      "package" : 0,
      "type" : 7,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "throwOnGCWork",
      "package" : 0,
      "type" : 8,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "writeBarrier",
      "package" : 0,
      "type" : 9,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "buf",
      "package" : 0,
      "type" : 6,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "start",
      "package" : 0,
      "type" : 5,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "next",
      "package" : 0,
      "type" : 5,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "cgo",
      "package" : 0,
      "type" : 8,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "debugGen",
      "package" : 0,
      "type" : 7,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "end",
      "package" : 0,
      "type" : 5,
      "exported" : false,
      "embedded" : false,
      "field" : true
    } ]
  },
  "go-version" : "1.14.3"
}