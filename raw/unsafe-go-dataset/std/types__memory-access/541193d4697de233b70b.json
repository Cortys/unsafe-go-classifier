{
  "usage" : {
    "file" : "map.go",
    "label1" : "memory-access",
    "label2" : "types",
    "line" : "1213",
    "module" : "std",
    "pkg" : "runtime",
    "project" : "kubernetes/kubernetes",
    "snippet" : "*(*unsafe.Pointer)(dst.e) = *(*unsafe.Pointer)(e)",
    "version" : "std"
  },
  "cfg" : {
    "blocks" : [ {
      "update-vars" : [ ],
      "successors" : [ 2 ],
      "in-vars" : [ 0, 2, 1 ],
      "exit" : false,
      "out-vars" : [ 1, 0, 2 ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[entry]",
      "entry" : true,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ ],
      "in-vars" : [ ],
      "exit" : true,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[exit]",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 3 ],
      "in-vars" : [ 2, 1, 0 ],
      "exit" : false,
      "out-vars" : [ 5, 1, 0, 2 ],
      "decl-vars" : [ 5 ],
      "line-start" : 1129,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "b"
          }
        } ],
        "right" : [ {
          "coerced-to" : {
            "contained" : {
              "go-type" : 36,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 36,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "bmap"
              }
            },
            "go-type" : 35,
            "kind" : "type",
            "type" : "pointer"
          },
          "go-type" : 35,
          "kind" : "expression",
          "target" : {
            "arguments" : [ {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "oldbuckets",
                "variable" : 3
              },
              "go-type" : 13,
              "kind" : "expression",
              "target" : {
                "go-type" : 26,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "h",
                  "variable" : 1
                }
              },
              "type" : "selector"
            }, {
              "go-type" : 7,
              "kind" : "expression",
              "left" : {
                "go-type" : 7,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "oldbucket",
                  "variable" : 2
                }
              },
              "operator" : "*",
              "right" : {
                "coerced-to" : {
                  "go-type" : 7,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 7,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "uintptr"
                  }
                },
                "go-type" : 7,
                "kind" : "expression",
                "target" : {
                  "field" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "bucketsize",
                    "variable" : 4
                  },
                  "go-type" : 25,
                  "kind" : "expression",
                  "target" : {
                    "go-type" : 2,
                    "kind" : "expression",
                    "type" : "identifier",
                    "value" : {
                      "ident-kind" : "Var",
                      "kind" : "ident",
                      "value" : "t",
                      "variable" : 0
                    }
                  },
                  "type" : "selector"
                },
                "type" : "cast"
              },
              "type" : "binary"
            } ],
            "ellipsis" : false,
            "function" : {
              "go-type" : 40,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "function" : 1,
                "ident-kind" : "Func",
                "kind" : "ident",
                "value" : "add"
              }
            },
            "go-type" : 13,
            "kind" : "expression",
            "type" : "call"
          },
          "type" : "cast"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 1129,
      "code" : "b := (*bmap)(add(h.oldbuckets, oldbucket*uintptr(t.bucketsize)))",
      "entry" : false,
      "use-vars" : [ 2, 0, 1 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 4 ],
      "in-vars" : [ 1, 0, 2, 5 ],
      "exit" : false,
      "out-vars" : [ 1, 0, 7, 2, 5 ],
      "decl-vars" : [ 7 ],
      "line-start" : 1130,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "newbit"
          }
        } ],
        "right" : [ {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "function" : 2,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "noldbuckets"
            },
            "go-type" : 43,
            "kind" : "expression",
            "target" : {
              "go-type" : 26,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "h",
                "variable" : 1
              }
            },
            "type" : "selector"
          },
          "go-type" : 7,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 1130,
      "code" : "newbit := h.noldbuckets()",
      "entry" : false,
      "use-vars" : [ 1 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 5, 63 ],
      "in-vars" : [ 1, 0, 7, 2, 5 ],
      "exit" : false,
      "out-vars" : [ 2, 5, 1, 0, 7 ],
      "decl-vars" : [ ],
      "line-start" : 1131,
      "ast" : {
        "condition" : {
          "go-type" : 15,
          "kind" : "expression",
          "operator" : "!",
          "target" : {
            "arguments" : [ {
              "go-type" : 35,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "b",
                "variable" : 5
              }
            } ],
            "ellipsis" : false,
            "function" : {
              "go-type" : 45,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "function" : 3,
                "ident-kind" : "Func",
                "kind" : "ident",
                "value" : "evacuated"
              }
            },
            "go-type" : 15,
            "kind" : "expression",
            "type" : "call"
          },
          "type" : "unary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 1235,
      "code" : "if !evacuated(b) {\n\n\t// xy contains the x and y (low and high) evacuation destinations.\n\tvar xy [2]evacDst\n\tx := &xy[0]\n\tx.b = (*bmap)(add(h.buckets, oldbucket*uintptr(t.bucketsize)))\n\tx.k = add(unsafe.Pointer(x.b), dataOffset)\n\tx.e = add(x.k, bucketCnt*uintptr(t.keysize))\n\n\tif !h.sameSizeGrow() {\n\n\t\ty := &xy[1]\n\t\ty.b = (*bmap)(add(h.buckets, (oldbucket+newbit)*uintptr(t.bucketsize)))\n\t\ty.k = add(unsafe.Pointer(y.b), dataOffset)\n\t\ty.e = add(y.k, bucketCnt*uintptr(t.keysize))\n\t}\n\n\tfor ; b != nil; b = b.overflow(t) {\n\t\tk := add(unsafe.Pointer(b), dataOffset)\n\t\te := add(k, bucketCnt*uintptr(t.keysize))\n\t\tfor i := 0; i < bucketCnt; i, k, e = i+1, add(k, uintptr(t.keysize)), add(e, uintptr(t.elemsize)) {\n\t\t\ttop := b.tophash[i]\n\t\t\tif isEmpty(top) {\n\t\t\t\tb.tophash[i] = evacuatedEmpty\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tif top < minTopHash {\n\t\t\t\tthrow(\"bad map state\")\n\t\t\t}\n\t\t\tk2 := k\n\t\t\tif t.indirectkey() {\n\t\t\t\tk2 = *((*unsafe.Pointer)(k2))\n\t\t\t}\n\t\t\tvar useY uint8\n\t\t\tif !h.sameSizeGrow() {\n\n\t\t\t\thash := t.hasher(k2, uintptr(h.hash0))\n\t\t\t\tif h.flags&iterator != 0 && !t.reflexivekey() && !t.key.equal(k2, k2) {\n\n\t\t\t\t\tuseY = top & 1\n\t\t\t\t\ttop = tophash(hash)\n\t\t\t\t} else {\n\t\t\t\t\tif hash&newbit != 0 {\n\t\t\t\t\t\tuseY = 1\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif evacuatedX+1 != evacuatedY || evacuatedX^1 != evacuatedY {\n\t\t\t\tthrow(\"bad evacuatedN\")\n\t\t\t}\n\n\t\t\tb.tophash[i] = evacuatedX + useY\n\t\t\tdst := &xy[useY]\n\n\t\t\tif dst.i == bucketCnt {\n\t\t\t\tdst.b = h.newoverflow(t, dst.b)\n\t\t\t\tdst.i = 0\n\t\t\t\tdst.k = add(unsafe.Pointer(dst.b), dataOffset)\n\t\t\t\tdst.e = add(dst.k, bucketCnt*uintptr(t.keysize))\n\t\t\t}\n\t\t\tdst.b.tophash[dst.i&(bucketCnt-1)] = top\n\t\t\tif t.indirectkey() {\n\t\t\t\t*(*unsafe.Pointer)(dst.k) = k2\n\t\t\t} else {\n\t\t\t\ttypedmemmove(t.key, dst.k, k)\n\t\t\t}\n\t\t\tif t.indirectelem() {\n\t\t\t\t*(*unsafe.Pointer)(dst.e) = *(*unsafe.Pointer)(e)\n\t\t\t} else {\n\t\t\t\ttypedmemmove(t.elem, dst.e, e)\n\t\t\t}\n\t\t\tdst.i++\n\n\t\t\tdst.k = add(dst.k, uintptr(t.keysize))\n\t\t\tdst.e = add(dst.e, uintptr(t.elemsize))\n\t\t}\n\t}\n\n\tif h.flags&oldIterator == 0 && t.bucket.ptrdata != 0 {\n\t\tb := add(h.oldbuckets, oldbucket*uintptr(t.bucketsize))\n\n\t\tptr := add(b, dataOffset)\n\t\tn := uintptr(t.bucketsize) - dataOffset\n\t\tmemclrHasPointers(ptr, n)\n\t}\n}",
      "entry" : false,
      "use-vars" : [ 5 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 6 ],
      "in-vars" : [ 1, 0, 7, 2, 5 ],
      "exit" : false,
      "out-vars" : [ 5, 8, 1, 0, 7, 2 ],
      "decl-vars" : [ 8 ],
      "line-start" : 1136,
      "ast" : {
        "kind" : "statement",
        "target" : {
          "kind" : "decl",
          "specs" : [ {
            "comments" : [ ],
            "declared-type" : {
              "element" : {
                "go-type" : 48,
                "kind" : "type",
                "type" : "identifier",
                "value" : {
                  "go-type" : 48,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "evacDst"
                }
              },
              "go-type" : 47,
              "kind" : "type",
              "length" : {
                "go-type" : 50,
                "kind" : "constant",
                "value" : {
                  "type" : "INT",
                  "value" : "2"
                }
              },
              "type" : "array"
            },
            "kind" : "spec",
            "names" : [ {
              "ident-kind" : "NoKind",
              "kind" : "ident",
              "value" : "xy"
            } ],
            "type" : "var",
            "values" : [ ]
          } ],
          "type" : "var"
        },
        "type" : "declaration"
      },
      "assign-vars" : [ ],
      "line-end" : 1136,
      "code" : "// xy contains the x and y (low and high) evacuation destinations.\nvar xy [2]evacDst",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 7 ],
      "in-vars" : [ 1, 0, 7, 2, 5, 8 ],
      "exit" : false,
      "out-vars" : [ 1, 0, 7, 2, 5, 9, 8 ],
      "decl-vars" : [ 9 ],
      "line-start" : 1137,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "x"
          }
        } ],
        "right" : [ {
          "go-type" : 51,
          "kind" : "expression",
          "operator" : "&",
          "target" : {
            "go-type" : 48,
            "index" : {
              "go-type" : 29,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "0"
              }
            },
            "kind" : "expression",
            "target" : {
              "go-type" : 47,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "xy",
                "variable" : 8
              }
            },
            "type" : "index"
          },
          "type" : "unary"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 1137,
      "code" : "x := &xy[0]",
      "entry" : false,
      "use-vars" : [ 8 ]
    }, {
      "update-vars" : [ 9 ],
      "successors" : [ 8 ],
      "in-vars" : [ 7, 2, 5, 9, 8, 1, 0 ],
      "exit" : false,
      "out-vars" : [ 7, 2, 5, 9, 8, 1, 0 ],
      "decl-vars" : [ ],
      "line-start" : 1138,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "b",
            "variable" : 10
          },
          "go-type" : 35,
          "kind" : "expression",
          "target" : {
            "go-type" : 51,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "x",
              "variable" : 9
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "coerced-to" : {
            "contained" : {
              "go-type" : 36,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 36,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "bmap"
              }
            },
            "go-type" : 35,
            "kind" : "type",
            "type" : "pointer"
          },
          "go-type" : 35,
          "kind" : "expression",
          "target" : {
            "arguments" : [ {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "buckets",
                "variable" : 11
              },
              "go-type" : 13,
              "kind" : "expression",
              "target" : {
                "go-type" : 26,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "h",
                  "variable" : 1
                }
              },
              "type" : "selector"
            }, {
              "go-type" : 7,
              "kind" : "expression",
              "left" : {
                "go-type" : 7,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "oldbucket",
                  "variable" : 2
                }
              },
              "operator" : "*",
              "right" : {
                "coerced-to" : {
                  "go-type" : 7,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 7,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "uintptr"
                  }
                },
                "go-type" : 7,
                "kind" : "expression",
                "target" : {
                  "field" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "bucketsize",
                    "variable" : 4
                  },
                  "go-type" : 25,
                  "kind" : "expression",
                  "target" : {
                    "go-type" : 2,
                    "kind" : "expression",
                    "type" : "identifier",
                    "value" : {
                      "ident-kind" : "Var",
                      "kind" : "ident",
                      "value" : "t",
                      "variable" : 0
                    }
                  },
                  "type" : "selector"
                },
                "type" : "cast"
              },
              "type" : "binary"
            } ],
            "ellipsis" : false,
            "function" : {
              "go-type" : 40,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "function" : 1,
                "ident-kind" : "Func",
                "kind" : "ident",
                "value" : "add"
              }
            },
            "go-type" : 13,
            "kind" : "expression",
            "type" : "call"
          },
          "type" : "cast"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 1138,
      "code" : "x.b = (*bmap)(add(h.buckets, oldbucket*uintptr(t.bucketsize)))",
      "entry" : false,
      "use-vars" : [ 2, 0, 9, 1 ]
    }, {
      "update-vars" : [ 9 ],
      "successors" : [ 9 ],
      "in-vars" : [ 8, 1, 0, 7, 2, 5, 9 ],
      "exit" : false,
      "out-vars" : [ 8, 1, 0, 7, 2, 5, 9 ],
      "decl-vars" : [ ],
      "line-start" : 1139,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "k",
            "variable" : 12
          },
          "go-type" : 13,
          "kind" : "expression",
          "target" : {
            "go-type" : 51,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "x",
              "variable" : 9
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "arguments" : [ {
            "coerced-to" : {
              "go-type" : 13,
              "kind" : "type",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 1,
                "value" : "unsafe"
              },
              "type" : "identifier",
              "value" : {
                "go-type" : 13,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "Pointer"
              }
            },
            "go-type" : 13,
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "b",
                "variable" : 10
              },
              "go-type" : 35,
              "kind" : "expression",
              "target" : {
                "go-type" : 51,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "x",
                  "variable" : 9
                }
              },
              "type" : "selector"
            },
            "type" : "cast"
          }, {
            "go-type" : 7,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "8"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 40,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 1,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "add"
            }
          },
          "go-type" : 13,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 1139,
      "code" : "x.k = add(unsafe.Pointer(x.b), dataOffset)",
      "entry" : false,
      "use-vars" : [ 9 ]
    }, {
      "update-vars" : [ 9 ],
      "successors" : [ 10 ],
      "in-vars" : [ 7, 2, 5, 9, 8, 1, 0 ],
      "exit" : false,
      "out-vars" : [ 0, 7, 2, 5, 8, 1 ],
      "decl-vars" : [ ],
      "line-start" : 1140,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "e",
            "variable" : 13
          },
          "go-type" : 13,
          "kind" : "expression",
          "target" : {
            "go-type" : 51,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "x",
              "variable" : 9
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "arguments" : [ {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "k",
              "variable" : 12
            },
            "go-type" : 13,
            "kind" : "expression",
            "target" : {
              "go-type" : 51,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "x",
                "variable" : 9
              }
            },
            "type" : "selector"
          }, {
            "go-type" : 7,
            "kind" : "expression",
            "left" : {
              "go-type" : 7,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "8"
              }
            },
            "operator" : "*",
            "right" : {
              "coerced-to" : {
                "go-type" : 7,
                "kind" : "type",
                "type" : "identifier",
                "value" : {
                  "go-type" : 7,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "uintptr"
                }
              },
              "go-type" : 7,
              "kind" : "expression",
              "target" : {
                "field" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "keysize",
                  "variable" : 14
                },
                "go-type" : 10,
                "kind" : "expression",
                "target" : {
                  "go-type" : 2,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "t",
                    "variable" : 0
                  }
                },
                "type" : "selector"
              },
              "type" : "cast"
            },
            "type" : "binary"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 40,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 1,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "add"
            }
          },
          "go-type" : 13,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 1140,
      "code" : "x.e = add(x.k, bucketCnt*uintptr(t.keysize))",
      "entry" : false,
      "use-vars" : [ 9, 0 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 11, 15 ],
      "in-vars" : [ 8, 1, 0, 7, 2, 5 ],
      "exit" : false,
      "out-vars" : [ 1, 0, 7, 2, 5, 8 ],
      "decl-vars" : [ ],
      "line-start" : 1142,
      "ast" : {
        "condition" : {
          "go-type" : 15,
          "kind" : "expression",
          "operator" : "!",
          "target" : {
            "arguments" : [ ],
            "ellipsis" : false,
            "function" : {
              "field" : {
                "function" : 4,
                "ident-kind" : "Func",
                "kind" : "ident",
                "value" : "sameSizeGrow"
              },
              "go-type" : 52,
              "kind" : "expression",
              "target" : {
                "go-type" : 26,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "h",
                  "variable" : 1
                }
              },
              "type" : "selector"
            },
            "go-type" : 15,
            "kind" : "expression",
            "type" : "call"
          },
          "type" : "unary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 1149,
      "code" : "if !h.sameSizeGrow() {\n\n\ty := &xy[1]\n\ty.b = (*bmap)(add(h.buckets, (oldbucket+newbit)*uintptr(t.bucketsize)))\n\ty.k = add(unsafe.Pointer(y.b), dataOffset)\n\ty.e = add(y.k, bucketCnt*uintptr(t.keysize))\n}",
      "entry" : false,
      "use-vars" : [ 1 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 12 ],
      "in-vars" : [ 0, 7, 2, 5, 8, 1 ],
      "exit" : false,
      "out-vars" : [ 1, 0, 7, 2, 5, 16, 8 ],
      "decl-vars" : [ 16 ],
      "line-start" : 1145,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "y"
          }
        } ],
        "right" : [ {
          "go-type" : 51,
          "kind" : "expression",
          "operator" : "&",
          "target" : {
            "go-type" : 48,
            "index" : {
              "go-type" : 29,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "1"
              }
            },
            "kind" : "expression",
            "target" : {
              "go-type" : 47,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "xy",
                "variable" : 8
              }
            },
            "type" : "index"
          },
          "type" : "unary"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 1145,
      "code" : "y := &xy[1]",
      "entry" : false,
      "use-vars" : [ 8 ]
    }, {
      "update-vars" : [ 16 ],
      "successors" : [ 13 ],
      "in-vars" : [ 5, 16, 8, 1, 0, 7, 2 ],
      "exit" : false,
      "out-vars" : [ 1, 0, 7, 2, 5, 16, 8 ],
      "decl-vars" : [ ],
      "line-start" : 1146,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "b",
            "variable" : 10
          },
          "go-type" : 35,
          "kind" : "expression",
          "target" : {
            "go-type" : 51,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "y",
              "variable" : 16
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "coerced-to" : {
            "contained" : {
              "go-type" : 36,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 36,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "bmap"
              }
            },
            "go-type" : 35,
            "kind" : "type",
            "type" : "pointer"
          },
          "go-type" : 35,
          "kind" : "expression",
          "target" : {
            "arguments" : [ {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "buckets",
                "variable" : 11
              },
              "go-type" : 13,
              "kind" : "expression",
              "target" : {
                "go-type" : 26,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "h",
                  "variable" : 1
                }
              },
              "type" : "selector"
            }, {
              "go-type" : 7,
              "kind" : "expression",
              "left" : {
                "go-type" : 7,
                "kind" : "expression",
                "target" : {
                  "go-type" : 7,
                  "kind" : "expression",
                  "left" : {
                    "go-type" : 7,
                    "kind" : "expression",
                    "type" : "identifier",
                    "value" : {
                      "ident-kind" : "Var",
                      "kind" : "ident",
                      "value" : "oldbucket",
                      "variable" : 2
                    }
                  },
                  "operator" : "+",
                  "right" : {
                    "go-type" : 7,
                    "kind" : "expression",
                    "type" : "identifier",
                    "value" : {
                      "ident-kind" : "Var",
                      "kind" : "ident",
                      "value" : "newbit",
                      "variable" : 7
                    }
                  },
                  "type" : "binary"
                },
                "type" : "paren"
              },
              "operator" : "*",
              "right" : {
                "coerced-to" : {
                  "go-type" : 7,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 7,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "uintptr"
                  }
                },
                "go-type" : 7,
                "kind" : "expression",
                "target" : {
                  "field" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "bucketsize",
                    "variable" : 4
                  },
                  "go-type" : 25,
                  "kind" : "expression",
                  "target" : {
                    "go-type" : 2,
                    "kind" : "expression",
                    "type" : "identifier",
                    "value" : {
                      "ident-kind" : "Var",
                      "kind" : "ident",
                      "value" : "t",
                      "variable" : 0
                    }
                  },
                  "type" : "selector"
                },
                "type" : "cast"
              },
              "type" : "binary"
            } ],
            "ellipsis" : false,
            "function" : {
              "go-type" : 40,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "function" : 1,
                "ident-kind" : "Func",
                "kind" : "ident",
                "value" : "add"
              }
            },
            "go-type" : 13,
            "kind" : "expression",
            "type" : "call"
          },
          "type" : "cast"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 1146,
      "code" : "y.b = (*bmap)(add(h.buckets, (oldbucket+newbit)*uintptr(t.bucketsize)))",
      "entry" : false,
      "use-vars" : [ 0, 16, 1, 2, 7 ]
    }, {
      "update-vars" : [ 16 ],
      "successors" : [ 14 ],
      "in-vars" : [ 0, 7, 2, 5, 16, 8, 1 ],
      "exit" : false,
      "out-vars" : [ 0, 7, 2, 5, 16, 8, 1 ],
      "decl-vars" : [ ],
      "line-start" : 1147,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "k",
            "variable" : 12
          },
          "go-type" : 13,
          "kind" : "expression",
          "target" : {
            "go-type" : 51,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "y",
              "variable" : 16
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "arguments" : [ {
            "coerced-to" : {
              "go-type" : 13,
              "kind" : "type",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 1,
                "value" : "unsafe"
              },
              "type" : "identifier",
              "value" : {
                "go-type" : 13,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "Pointer"
              }
            },
            "go-type" : 13,
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "b",
                "variable" : 10
              },
              "go-type" : 35,
              "kind" : "expression",
              "target" : {
                "go-type" : 51,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "y",
                  "variable" : 16
                }
              },
              "type" : "selector"
            },
            "type" : "cast"
          }, {
            "go-type" : 7,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "8"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 40,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 1,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "add"
            }
          },
          "go-type" : 13,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 1147,
      "code" : "y.k = add(unsafe.Pointer(y.b), dataOffset)",
      "entry" : false,
      "use-vars" : [ 16 ]
    }, {
      "update-vars" : [ 16 ],
      "successors" : [ 15 ],
      "in-vars" : [ 0, 7, 2, 5, 16, 8, 1 ],
      "exit" : false,
      "out-vars" : [ 8, 1, 0, 7, 2, 5 ],
      "decl-vars" : [ ],
      "line-start" : 1148,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "e",
            "variable" : 13
          },
          "go-type" : 13,
          "kind" : "expression",
          "target" : {
            "go-type" : 51,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "y",
              "variable" : 16
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "arguments" : [ {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "k",
              "variable" : 12
            },
            "go-type" : 13,
            "kind" : "expression",
            "target" : {
              "go-type" : 51,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "y",
                "variable" : 16
              }
            },
            "type" : "selector"
          }, {
            "go-type" : 7,
            "kind" : "expression",
            "left" : {
              "go-type" : 7,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "8"
              }
            },
            "operator" : "*",
            "right" : {
              "coerced-to" : {
                "go-type" : 7,
                "kind" : "type",
                "type" : "identifier",
                "value" : {
                  "go-type" : 7,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "uintptr"
                }
              },
              "go-type" : 7,
              "kind" : "expression",
              "target" : {
                "field" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "keysize",
                  "variable" : 14
                },
                "go-type" : 10,
                "kind" : "expression",
                "target" : {
                  "go-type" : 2,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "t",
                    "variable" : 0
                  }
                },
                "type" : "selector"
              },
              "type" : "cast"
            },
            "type" : "binary"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 40,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 1,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "add"
            }
          },
          "go-type" : 13,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 1148,
      "code" : "y.e = add(y.k, bucketCnt*uintptr(t.keysize))",
      "entry" : false,
      "use-vars" : [ 16, 0 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 17, 58 ],
      "in-vars" : [ 7, 2, 5, 8, 1, 0 ],
      "exit" : false,
      "out-vars" : [ 0, 7, 2, 5, 8, 1 ],
      "decl-vars" : [ ],
      "line-start" : 1151,
      "ast" : {
        "condition" : {
          "go-type" : 54,
          "kind" : "expression",
          "left" : {
            "go-type" : 35,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "b",
              "variable" : 5
            }
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 55,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Nil",
              "kind" : "ident",
              "value" : "nil"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "for"
      },
      "assign-vars" : [ ],
      "line-end" : 1225,
      "code" : "for ; b != nil; b = b.overflow(t) {\n\tk := add(unsafe.Pointer(b), dataOffset)\n\te := add(k, bucketCnt*uintptr(t.keysize))\n\tfor i := 0; i < bucketCnt; i, k, e = i+1, add(k, uintptr(t.keysize)), add(e, uintptr(t.elemsize)) {\n\t\ttop := b.tophash[i]\n\t\tif isEmpty(top) {\n\t\t\tb.tophash[i] = evacuatedEmpty\n\t\t\tcontinue\n\t\t}\n\t\tif top < minTopHash {\n\t\t\tthrow(\"bad map state\")\n\t\t}\n\t\tk2 := k\n\t\tif t.indirectkey() {\n\t\t\tk2 = *((*unsafe.Pointer)(k2))\n\t\t}\n\t\tvar useY uint8\n\t\tif !h.sameSizeGrow() {\n\n\t\t\thash := t.hasher(k2, uintptr(h.hash0))\n\t\t\tif h.flags&iterator != 0 && !t.reflexivekey() && !t.key.equal(k2, k2) {\n\n\t\t\t\tuseY = top & 1\n\t\t\t\ttop = tophash(hash)\n\t\t\t} else {\n\t\t\t\tif hash&newbit != 0 {\n\t\t\t\t\tuseY = 1\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif evacuatedX+1 != evacuatedY || evacuatedX^1 != evacuatedY {\n\t\t\tthrow(\"bad evacuatedN\")\n\t\t}\n\n\t\tb.tophash[i] = evacuatedX + useY\n\t\tdst := &xy[useY]\n\n\t\tif dst.i == bucketCnt {\n\t\t\tdst.b = h.newoverflow(t, dst.b)\n\t\t\tdst.i = 0\n\t\t\tdst.k = add(unsafe.Pointer(dst.b), dataOffset)\n\t\t\tdst.e = add(dst.k, bucketCnt*uintptr(t.keysize))\n\t\t}\n\t\tdst.b.tophash[dst.i&(bucketCnt-1)] = top\n\t\tif t.indirectkey() {\n\t\t\t*(*unsafe.Pointer)(dst.k) = k2\n\t\t} else {\n\t\t\ttypedmemmove(t.key, dst.k, k)\n\t\t}\n\t\tif t.indirectelem() {\n\t\t\t*(*unsafe.Pointer)(dst.e) = *(*unsafe.Pointer)(e)\n\t\t} else {\n\t\t\ttypedmemmove(t.elem, dst.e, e)\n\t\t}\n\t\tdst.i++\n\n\t\tdst.k = add(dst.k, uintptr(t.keysize))\n\t\tdst.e = add(dst.e, uintptr(t.elemsize))\n\t}\n}",
      "entry" : false,
      "use-vars" : [ 5 ]
    }, {
      "update-vars" : [ 5 ],
      "successors" : [ 15 ],
      "in-vars" : [ 8, 1, 0, 7, 2, 5 ],
      "exit" : false,
      "out-vars" : [ 2, 5, 8, 1, 0, 7 ],
      "decl-vars" : [ ],
      "line-start" : 1151,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 35,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "b",
            "variable" : 5
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "t",
              "variable" : 0
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "function" : 5,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "overflow"
            },
            "go-type" : 56,
            "kind" : "expression",
            "target" : {
              "go-type" : 35,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "b",
                "variable" : 5
              }
            },
            "type" : "selector"
          },
          "go-type" : 35,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 5 ],
      "line-end" : 1151,
      "code" : "b = b.overflow(t)",
      "entry" : false,
      "use-vars" : [ 5, 0 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 18 ],
      "in-vars" : [ 8, 1, 0, 7, 2, 5 ],
      "exit" : false,
      "out-vars" : [ 7, 18, 2, 5, 8, 1, 0 ],
      "decl-vars" : [ 18 ],
      "line-start" : 1152,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "k"
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "coerced-to" : {
              "go-type" : 13,
              "kind" : "type",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 1,
                "value" : "unsafe"
              },
              "type" : "identifier",
              "value" : {
                "go-type" : 13,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "Pointer"
              }
            },
            "go-type" : 13,
            "kind" : "expression",
            "target" : {
              "go-type" : 35,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "b",
                "variable" : 5
              }
            },
            "type" : "cast"
          }, {
            "go-type" : 7,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "8"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 40,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 1,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "add"
            }
          },
          "go-type" : 13,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 1152,
      "code" : "k := add(unsafe.Pointer(b), dataOffset)",
      "entry" : false,
      "use-vars" : [ 5 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 20 ],
      "in-vars" : [ 5, 8, 1, 0, 7, 18, 2 ],
      "exit" : false,
      "out-vars" : [ 8, 1, 0, 7, 20, 18, 2, 5 ],
      "decl-vars" : [ 20 ],
      "line-start" : 1153,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "e"
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 13,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "k",
              "variable" : 18
            }
          }, {
            "go-type" : 7,
            "kind" : "expression",
            "left" : {
              "go-type" : 7,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "8"
              }
            },
            "operator" : "*",
            "right" : {
              "coerced-to" : {
                "go-type" : 7,
                "kind" : "type",
                "type" : "identifier",
                "value" : {
                  "go-type" : 7,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "uintptr"
                }
              },
              "go-type" : 7,
              "kind" : "expression",
              "target" : {
                "field" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "keysize",
                  "variable" : 14
                },
                "go-type" : 10,
                "kind" : "expression",
                "target" : {
                  "go-type" : 2,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "t",
                    "variable" : 0
                  }
                },
                "type" : "selector"
              },
              "type" : "cast"
            },
            "type" : "binary"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 40,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 1,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "add"
            }
          },
          "go-type" : 13,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 1153,
      "code" : "e := add(k, bucketCnt*uintptr(t.keysize))",
      "entry" : false,
      "use-vars" : [ 18, 0 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 22, 16 ],
      "in-vars" : [ 8, 0, 20, 2, 5, 1, 7, 19, 18 ],
      "exit" : false,
      "out-vars" : [ 7, 18, 2, 19, 20, 5, 8, 1, 0 ],
      "decl-vars" : [ ],
      "line-start" : 1154,
      "ast" : {
        "condition" : {
          "go-type" : 54,
          "kind" : "expression",
          "left" : {
            "go-type" : 29,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "i",
              "variable" : 19
            }
          },
          "operator" : "<",
          "right" : {
            "go-type" : 29,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "8"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "for"
      },
      "assign-vars" : [ ],
      "line-end" : 1224,
      "code" : "for i := 0; i < bucketCnt; i, k, e = i+1, add(k, uintptr(t.keysize)), add(e, uintptr(t.elemsize)) {\n\ttop := b.tophash[i]\n\tif isEmpty(top) {\n\t\tb.tophash[i] = evacuatedEmpty\n\t\tcontinue\n\t}\n\tif top < minTopHash {\n\t\tthrow(\"bad map state\")\n\t}\n\tk2 := k\n\tif t.indirectkey() {\n\t\tk2 = *((*unsafe.Pointer)(k2))\n\t}\n\tvar useY uint8\n\tif !h.sameSizeGrow() {\n\n\t\thash := t.hasher(k2, uintptr(h.hash0))\n\t\tif h.flags&iterator != 0 && !t.reflexivekey() && !t.key.equal(k2, k2) {\n\n\t\t\tuseY = top & 1\n\t\t\ttop = tophash(hash)\n\t\t} else {\n\t\t\tif hash&newbit != 0 {\n\t\t\t\tuseY = 1\n\t\t\t}\n\t\t}\n\t}\n\n\tif evacuatedX+1 != evacuatedY || evacuatedX^1 != evacuatedY {\n\t\tthrow(\"bad evacuatedN\")\n\t}\n\n\tb.tophash[i] = evacuatedX + useY\n\tdst := &xy[useY]\n\n\tif dst.i == bucketCnt {\n\t\tdst.b = h.newoverflow(t, dst.b)\n\t\tdst.i = 0\n\t\tdst.k = add(unsafe.Pointer(dst.b), dataOffset)\n\t\tdst.e = add(dst.k, bucketCnt*uintptr(t.keysize))\n\t}\n\tdst.b.tophash[dst.i&(bucketCnt-1)] = top\n\tif t.indirectkey() {\n\t\t*(*unsafe.Pointer)(dst.k) = k2\n\t} else {\n\t\ttypedmemmove(t.key, dst.k, k)\n\t}\n\tif t.indirectelem() {\n\t\t*(*unsafe.Pointer)(dst.e) = *(*unsafe.Pointer)(e)\n\t} else {\n\t\ttypedmemmove(t.elem, dst.e, e)\n\t}\n\tdst.i++\n\n\tdst.k = add(dst.k, uintptr(t.keysize))\n\tdst.e = add(dst.e, uintptr(t.elemsize))\n}",
      "entry" : false,
      "use-vars" : [ 19 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 19 ],
      "in-vars" : [ 5, 8, 1, 0, 7, 20, 18, 2 ],
      "exit" : false,
      "out-vars" : [ 19, 20, 18, 2, 8, 0, 7, 5, 1 ],
      "decl-vars" : [ 19 ],
      "line-start" : 1154,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "i"
          }
        } ],
        "right" : [ {
          "go-type" : 29,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "0"
          }
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 1154,
      "code" : "i := 0",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ 20, 18, 19 ],
      "successors" : [ 19 ],
      "in-vars" : [ 19, 5, 1, 7, 20, 18, 2, 8, 0 ],
      "exit" : false,
      "out-vars" : [ 0, 19, 20, 18, 2, 5, 1, 7, 8 ],
      "decl-vars" : [ ],
      "line-start" : 1154,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 29,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "i",
            "variable" : 19
          }
        }, {
          "go-type" : 13,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "k",
            "variable" : 18
          }
        }, {
          "go-type" : 13,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "e",
            "variable" : 20
          }
        } ],
        "right" : [ {
          "go-type" : 29,
          "kind" : "expression",
          "left" : {
            "go-type" : 29,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "i",
              "variable" : 19
            }
          },
          "operator" : "+",
          "right" : {
            "go-type" : 29,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "1"
            }
          },
          "type" : "binary"
        }, {
          "arguments" : [ {
            "go-type" : 13,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "k",
              "variable" : 18
            }
          }, {
            "coerced-to" : {
              "go-type" : 7,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 7,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "uintptr"
              }
            },
            "go-type" : 7,
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "keysize",
                "variable" : 14
              },
              "go-type" : 10,
              "kind" : "expression",
              "target" : {
                "go-type" : 2,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "t",
                  "variable" : 0
                }
              },
              "type" : "selector"
            },
            "type" : "cast"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 40,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 1,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "add"
            }
          },
          "go-type" : 13,
          "kind" : "expression",
          "type" : "call"
        }, {
          "arguments" : [ {
            "go-type" : 13,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "e",
              "variable" : 20
            }
          }, {
            "coerced-to" : {
              "go-type" : 7,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 7,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "uintptr"
              }
            },
            "go-type" : 7,
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "elemsize",
                "variable" : 21
              },
              "go-type" : 10,
              "kind" : "expression",
              "target" : {
                "go-type" : 2,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "t",
                  "variable" : 0
                }
              },
              "type" : "selector"
            },
            "type" : "cast"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 40,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 1,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "add"
            }
          },
          "go-type" : 13,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 19, 20, 18 ],
      "line-end" : 1154,
      "code" : "i, k, e = i+1, add(k, uintptr(t.keysize)), add(e, uintptr(t.elemsize))",
      "entry" : false,
      "use-vars" : [ 19, 18, 20, 0 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 23 ],
      "in-vars" : [ 1, 18, 20, 2, 5, 8, 0, 7, 19 ],
      "exit" : false,
      "out-vars" : [ 23, 8, 0, 7, 5, 2, 1, 19, 20, 18 ],
      "decl-vars" : [ 23 ],
      "line-start" : 1155,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "top"
          }
        } ],
        "right" : [ {
          "go-type" : 10,
          "index" : {
            "go-type" : 29,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "i",
              "variable" : 19
            }
          },
          "kind" : "expression",
          "target" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "tophash",
              "variable" : 22
            },
            "go-type" : 38,
            "kind" : "expression",
            "target" : {
              "go-type" : 35,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "b",
                "variable" : 5
              }
            },
            "type" : "selector"
          },
          "type" : "index"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 1155,
      "code" : "top := b.tophash[i]",
      "entry" : false,
      "use-vars" : [ 19, 5 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 24, 26 ],
      "in-vars" : [ 1, 19, 5, 23, 18, 2, 8, 0, 7, 20 ],
      "exit" : false,
      "out-vars" : [ 8, 1, 19, 18, 5, 23, 0, 7, 20, 2 ],
      "decl-vars" : [ ],
      "line-start" : 1156,
      "ast" : {
        "condition" : {
          "arguments" : [ {
            "go-type" : 10,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "top",
              "variable" : 23
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 60,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 6,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "isEmpty"
            }
          },
          "go-type" : 15,
          "kind" : "expression",
          "type" : "call"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 1159,
      "code" : "if isEmpty(top) {\n\tb.tophash[i] = evacuatedEmpty\n\tcontinue\n}",
      "entry" : false,
      "use-vars" : [ 23 ]
    }, {
      "update-vars" : [ 5 ],
      "successors" : [ 25 ],
      "in-vars" : [ 1, 0, 19, 20, 5, 8, 7, 18, 2 ],
      "exit" : false,
      "out-vars" : [ 8, 1, 7, 19, 0, 20, 18, 2, 5 ],
      "decl-vars" : [ ],
      "line-start" : 1157,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 10,
          "index" : {
            "go-type" : 29,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "i",
              "variable" : 19
            }
          },
          "kind" : "expression",
          "target" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "tophash",
              "variable" : 22
            },
            "go-type" : 38,
            "kind" : "expression",
            "target" : {
              "go-type" : 35,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "b",
                "variable" : 5
              }
            },
            "type" : "selector"
          },
          "type" : "index"
        } ],
        "right" : [ {
          "go-type" : 10,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "4"
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 1157,
      "code" : "b.tophash[i] = evacuatedEmpty",
      "entry" : false,
      "use-vars" : [ 19, 5 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 21 ],
      "in-vars" : [ 0, 7, 19, 18, 2, 8, 1, 20, 5 ],
      "exit" : false,
      "out-vars" : [ 5, 8, 1, 0, 20, 2, 7, 19, 18 ],
      "decl-vars" : [ ],
      "line-start" : 1158,
      "ast" : {
        "kind" : "statement",
        "label" : null,
        "type" : "continue"
      },
      "assign-vars" : [ ],
      "line-end" : 1158,
      "code" : "continue",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 27, 28 ],
      "in-vars" : [ 8, 0, 7, 18, 23, 1, 19, 20, 2, 5 ],
      "exit" : false,
      "out-vars" : [ 8, 0, 7, 19, 18, 2, 1, 20, 5, 23 ],
      "decl-vars" : [ ],
      "line-start" : 1160,
      "ast" : {
        "condition" : {
          "go-type" : 54,
          "kind" : "expression",
          "left" : {
            "go-type" : 10,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "top",
              "variable" : 23
            }
          },
          "operator" : "<",
          "right" : {
            "go-type" : 10,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "5"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 1162,
      "code" : "if top < minTopHash {\n\tthrow(\"bad map state\")\n}",
      "entry" : false,
      "use-vars" : [ 23 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 28 ],
      "in-vars" : [ 5, 1, 0, 20, 2, 23, 8, 7, 19, 18 ],
      "exit" : false,
      "out-vars" : [ 19, 18, 2, 5, 1, 0, 7, 20, 23, 8 ],
      "decl-vars" : [ ],
      "line-start" : 1161,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 64,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "bad map state"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 62,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 7,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "throw"
            }
          },
          "go-type" : 39,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 1161,
      "code" : "throw(\"bad map state\")",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 29 ],
      "in-vars" : [ 8, 1, 0, 19, 2, 7, 20, 18, 5, 23 ],
      "exit" : false,
      "out-vars" : [ 2, 23, 20, 18, 8, 1, 0, 7, 25, 19, 5 ],
      "decl-vars" : [ 25 ],
      "line-start" : 1163,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "k2"
          }
        } ],
        "right" : [ {
          "go-type" : 13,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "k",
            "variable" : 18
          }
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 1163,
      "code" : "k2 := k",
      "entry" : false,
      "use-vars" : [ 18 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 30, 31 ],
      "in-vars" : [ 8, 5, 23, 25, 19, 20, 18, 2, 1, 0, 7 ],
      "exit" : false,
      "out-vars" : [ 1, 0, 7, 25, 19, 20, 2, 8, 18, 5, 23 ],
      "decl-vars" : [ ],
      "line-start" : 1164,
      "ast" : {
        "condition" : {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "function" : 8,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "indirectkey"
            },
            "go-type" : 52,
            "kind" : "expression",
            "target" : {
              "go-type" : 2,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "t",
                "variable" : 0
              }
            },
            "type" : "selector"
          },
          "go-type" : 15,
          "kind" : "expression",
          "type" : "call"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 1166,
      "code" : "if t.indirectkey() {\n\tk2 = *((*unsafe.Pointer)(k2))\n}",
      "entry" : false,
      "use-vars" : [ 0 ]
    }, {
      "update-vars" : [ 25 ],
      "successors" : [ 31 ],
      "in-vars" : [ 5, 23, 1, 20, 18, 2, 19, 8, 0, 7, 25 ],
      "exit" : false,
      "out-vars" : [ 8, 25, 19, 2, 1, 0, 7, 20, 18, 5, 23 ],
      "decl-vars" : [ ],
      "line-start" : 1165,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 13,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "k2",
            "variable" : 25
          }
        } ],
        "right" : [ {
          "go-type" : 13,
          "kind" : "expression",
          "target" : {
            "go-type" : 66,
            "kind" : "expression",
            "target" : {
              "coerced-to" : {
                "contained" : {
                  "go-type" : 13,
                  "kind" : "type",
                  "qualifier" : {
                    "ident-kind" : "PkgName",
                    "kind" : "ident",
                    "package" : 1,
                    "value" : "unsafe"
                  },
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 13,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "Pointer"
                  }
                },
                "go-type" : 66,
                "kind" : "type",
                "type" : "pointer"
              },
              "go-type" : 66,
              "kind" : "expression",
              "target" : {
                "go-type" : 13,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "k2",
                  "variable" : 25
                }
              },
              "type" : "cast"
            },
            "type" : "paren"
          },
          "type" : "star"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 25 ],
      "line-end" : 1165,
      "code" : "k2 = *((*unsafe.Pointer)(k2))",
      "entry" : false,
      "use-vars" : [ 25 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 32 ],
      "in-vars" : [ 2, 0, 20, 7, 25, 19, 18, 5, 23, 8, 1 ],
      "exit" : false,
      "out-vars" : [ 20, 18, 5, 23, 7, 31, 19, 25, 2, 8, 1, 0 ],
      "decl-vars" : [ 31 ],
      "line-start" : 1167,
      "ast" : {
        "kind" : "statement",
        "target" : {
          "kind" : "decl",
          "specs" : [ {
            "comments" : [ ],
            "declared-type" : {
              "go-type" : 10,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 10,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "uint8"
              }
            },
            "kind" : "spec",
            "names" : [ {
              "ident-kind" : "NoKind",
              "kind" : "ident",
              "value" : "useY"
            } ],
            "type" : "var",
            "values" : [ ]
          } ],
          "type" : "var"
        },
        "type" : "declaration"
      },
      "assign-vars" : [ ],
      "line-end" : 1167,
      "code" : "var useY uint8",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 33, 39 ],
      "in-vars" : [ 8, 1, 0, 18, 2, 7, 31, 25, 19, 20, 5, 23 ],
      "exit" : false,
      "out-vars" : [ 5, 8, 31, 19, 20, 18, 2, 23, 1, 0, 7, 25 ],
      "decl-vars" : [ ],
      "line-start" : 1168,
      "ast" : {
        "condition" : {
          "go-type" : 15,
          "kind" : "expression",
          "operator" : "!",
          "target" : {
            "arguments" : [ ],
            "ellipsis" : false,
            "function" : {
              "field" : {
                "function" : 4,
                "ident-kind" : "Func",
                "kind" : "ident",
                "value" : "sameSizeGrow"
              },
              "go-type" : 52,
              "kind" : "expression",
              "target" : {
                "go-type" : 26,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "h",
                  "variable" : 1
                }
              },
              "type" : "selector"
            },
            "go-type" : 15,
            "kind" : "expression",
            "type" : "call"
          },
          "type" : "unary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 1191,
      "code" : "if !h.sameSizeGrow() {\n\n\thash := t.hasher(k2, uintptr(h.hash0))\n\tif h.flags&iterator != 0 && !t.reflexivekey() && !t.key.equal(k2, k2) {\n\n\t\tuseY = top & 1\n\t\ttop = tophash(hash)\n\t} else {\n\t\tif hash&newbit != 0 {\n\t\t\tuseY = 1\n\t\t}\n\t}\n}",
      "entry" : false,
      "use-vars" : [ 1 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 34 ],
      "in-vars" : [ 18, 2, 5, 8, 1, 7, 31, 19, 0, 25, 20, 23 ],
      "exit" : false,
      "out-vars" : [ 5, 19, 20, 18, 7, 31, 32, 25, 2, 8, 1, 0, 23 ],
      "decl-vars" : [ 32 ],
      "line-start" : 1171,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "hash"
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 13,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "k2",
              "variable" : 25
            }
          }, {
            "coerced-to" : {
              "go-type" : 7,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 7,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "uintptr"
              }
            },
            "go-type" : 7,
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "hash0",
                "variable" : 27
              },
              "go-type" : 8,
              "kind" : "expression",
              "target" : {
                "go-type" : 26,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "h",
                  "variable" : 1
                }
              },
              "type" : "selector"
            },
            "type" : "cast"
          } ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "hasher",
              "variable" : 26
            },
            "go-type" : 22,
            "kind" : "expression",
            "target" : {
              "go-type" : 2,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "t",
                "variable" : 0
              }
            },
            "type" : "selector"
          },
          "go-type" : 7,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 1171,
      "code" : "hash := t.hasher(k2, uintptr(h.hash0))",
      "entry" : false,
      "use-vars" : [ 0, 25, 1 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 35, 37 ],
      "in-vars" : [ 20, 2, 5, 8, 1, 0, 25, 19, 23, 7, 31, 32, 18 ],
      "exit" : false,
      "out-vars" : [ 0, 31, 32, 19, 20, 18, 5, 8, 1, 7, 25, 2, 23 ],
      "decl-vars" : [ ],
      "line-start" : 1172,
      "ast" : {
        "condition" : {
          "go-type" : 15,
          "kind" : "expression",
          "left" : {
            "go-type" : 15,
            "kind" : "expression",
            "left" : {
              "go-type" : 15,
              "kind" : "expression",
              "left" : {
                "go-type" : 10,
                "kind" : "expression",
                "left" : {
                  "field" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "flags",
                    "variable" : 28
                  },
                  "go-type" : 10,
                  "kind" : "expression",
                  "target" : {
                    "go-type" : 26,
                    "kind" : "expression",
                    "type" : "identifier",
                    "value" : {
                      "ident-kind" : "Var",
                      "kind" : "ident",
                      "value" : "h",
                      "variable" : 1
                    }
                  },
                  "type" : "selector"
                },
                "operator" : "&",
                "right" : {
                  "go-type" : 10,
                  "kind" : "constant",
                  "value" : {
                    "type" : "INT",
                    "value" : "1"
                  }
                },
                "type" : "binary"
              },
              "operator" : "!=",
              "right" : {
                "go-type" : 10,
                "kind" : "constant",
                "value" : {
                  "type" : "INT",
                  "value" : "0"
                }
              },
              "type" : "binary"
            },
            "operator" : "&&",
            "right" : {
              "go-type" : 15,
              "kind" : "expression",
              "operator" : "!",
              "target" : {
                "arguments" : [ ],
                "ellipsis" : false,
                "function" : {
                  "field" : {
                    "function" : 9,
                    "ident-kind" : "Func",
                    "kind" : "ident",
                    "value" : "reflexivekey"
                  },
                  "go-type" : 52,
                  "kind" : "expression",
                  "target" : {
                    "go-type" : 2,
                    "kind" : "expression",
                    "type" : "identifier",
                    "value" : {
                      "ident-kind" : "Var",
                      "kind" : "ident",
                      "value" : "t",
                      "variable" : 0
                    }
                  },
                  "type" : "selector"
                },
                "go-type" : 15,
                "kind" : "expression",
                "type" : "call"
              },
              "type" : "unary"
            },
            "type" : "binary"
          },
          "operator" : "&&",
          "right" : {
            "go-type" : 15,
            "kind" : "expression",
            "operator" : "!",
            "target" : {
              "arguments" : [ {
                "go-type" : 13,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "k2",
                  "variable" : 25
                }
              }, {
                "go-type" : 13,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "k2",
                  "variable" : 25
                }
              } ],
              "ellipsis" : false,
              "function" : {
                "field" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "equal",
                  "variable" : 30
                },
                "go-type" : 11,
                "kind" : "expression",
                "target" : {
                  "field" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "key",
                    "variable" : 29
                  },
                  "go-type" : 21,
                  "kind" : "expression",
                  "target" : {
                    "go-type" : 2,
                    "kind" : "expression",
                    "type" : "identifier",
                    "value" : {
                      "ident-kind" : "Var",
                      "kind" : "ident",
                      "value" : "t",
                      "variable" : 0
                    }
                  },
                  "type" : "selector"
                },
                "type" : "selector"
              },
              "go-type" : 15,
              "kind" : "expression",
              "type" : "call"
            },
            "type" : "unary"
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 1190,
      "code" : "if h.flags&iterator != 0 && !t.reflexivekey() && !t.key.equal(k2, k2) {\n\n\tuseY = top & 1\n\ttop = tophash(hash)\n} else {\n\tif hash&newbit != 0 {\n\t\tuseY = 1\n\t}\n}",
      "entry" : false,
      "use-vars" : [ 25, 0, 1 ]
    }, {
      "update-vars" : [ 31 ],
      "successors" : [ 36 ],
      "in-vars" : [ 8, 1, 7, 32, 19, 18, 2, 0, 25, 20, 5, 23 ],
      "exit" : false,
      "out-vars" : [ 5, 8, 1, 31, 32, 2, 18, 0, 7, 25, 19, 20 ],
      "decl-vars" : [ ],
      "line-start" : 1184,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 10,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "useY",
            "variable" : 31
          }
        } ],
        "right" : [ {
          "go-type" : 10,
          "kind" : "expression",
          "left" : {
            "go-type" : 10,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "top",
              "variable" : 23
            }
          },
          "operator" : "&",
          "right" : {
            "go-type" : 10,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "1"
            }
          },
          "type" : "binary"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 31 ],
      "line-end" : 1184,
      "code" : "useY = top & 1",
      "entry" : false,
      "use-vars" : [ 23 ]
    }, {
      "update-vars" : [ 23 ],
      "successors" : [ 39 ],
      "in-vars" : [ 8, 7, 31, 18, 19, 20, 2, 5, 1, 0, 32, 25 ],
      "exit" : false,
      "out-vars" : [ 2, 8, 1, 0, 7, 25, 19, 18, 23, 31, 20, 5 ],
      "decl-vars" : [ ],
      "line-start" : 1185,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 10,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "top",
            "variable" : 23
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 7,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "hash",
              "variable" : 32
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 67,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 10,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "tophash"
            }
          },
          "go-type" : 10,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 23 ],
      "line-end" : 1185,
      "code" : "top = tophash(hash)",
      "entry" : false,
      "use-vars" : [ 32 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 38, 39 ],
      "in-vars" : [ 7, 25, 5, 23, 8, 0, 31, 32, 19, 20, 18, 2, 1 ],
      "exit" : false,
      "out-vars" : [ 2, 23, 0, 31, 7, 25, 19, 20, 18, 5, 8, 1 ],
      "decl-vars" : [ ],
      "line-start" : 1187,
      "ast" : {
        "condition" : {
          "go-type" : 54,
          "kind" : "expression",
          "left" : {
            "go-type" : 7,
            "kind" : "expression",
            "left" : {
              "go-type" : 7,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "hash",
                "variable" : 32
              }
            },
            "operator" : "&",
            "right" : {
              "go-type" : 7,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "newbit",
                "variable" : 7
              }
            },
            "type" : "binary"
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 7,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 1189,
      "code" : "if hash&newbit != 0 {\n\tuseY = 1\n}",
      "entry" : false,
      "use-vars" : [ 32, 7 ]
    }, {
      "update-vars" : [ 31 ],
      "successors" : [ 39 ],
      "in-vars" : [ 8, 1, 0, 25, 19, 20, 2, 23, 7, 18, 5 ],
      "exit" : false,
      "out-vars" : [ 23, 1, 0, 7, 25, 5, 2, 8, 31, 19, 20, 18 ],
      "decl-vars" : [ ],
      "line-start" : 1188,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 10,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "useY",
            "variable" : 31
          }
        } ],
        "right" : [ {
          "go-type" : 10,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "1"
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 31 ],
      "line-end" : 1188,
      "code" : "useY = 1",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 40, 41 ],
      "in-vars" : [ 7, 31, 25, 19, 18, 5, 23, 1, 0, 20, 2, 8 ],
      "exit" : false,
      "out-vars" : [ 25, 19, 20, 2, 5, 1, 0, 7, 31, 18, 23, 8 ],
      "decl-vars" : [ ],
      "line-start" : 1193,
      "ast" : {
        "condition" : {
          "go-type" : 54,
          "kind" : "constant",
          "value" : {
            "type" : "BOOL",
            "value" : "false"
          }
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 1195,
      "code" : "if evacuatedX+1 != evacuatedY || evacuatedX^1 != evacuatedY {\n\tthrow(\"bad evacuatedN\")\n}",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 41 ],
      "in-vars" : [ 5, 23, 0, 25, 20, 18, 2, 8, 1, 7, 31, 19 ],
      "exit" : false,
      "out-vars" : [ 19, 20, 18, 2, 5, 8, 0, 7, 31, 25, 23, 1 ],
      "decl-vars" : [ ],
      "line-start" : 1194,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 64,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "bad evacuatedN"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 62,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 7,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "throw"
            }
          },
          "go-type" : 39,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 1194,
      "code" : "throw(\"bad evacuatedN\")",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ 5 ],
      "successors" : [ 42 ],
      "in-vars" : [ 8, 1, 0, 7, 31, 18, 23, 25, 19, 20, 2, 5 ],
      "exit" : false,
      "out-vars" : [ 8, 1, 7, 31, 19, 20, 2, 23, 0, 25, 18, 5 ],
      "decl-vars" : [ ],
      "line-start" : 1197,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 10,
          "index" : {
            "go-type" : 29,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "i",
              "variable" : 19
            }
          },
          "kind" : "expression",
          "target" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "tophash",
              "variable" : 22
            },
            "go-type" : 38,
            "kind" : "expression",
            "target" : {
              "go-type" : 35,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "b",
                "variable" : 5
              }
            },
            "type" : "selector"
          },
          "type" : "index"
        } ],
        "right" : [ {
          "go-type" : 10,
          "kind" : "expression",
          "left" : {
            "go-type" : 10,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "2"
            }
          },
          "operator" : "+",
          "right" : {
            "go-type" : 10,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "useY",
              "variable" : 31
            }
          },
          "type" : "binary"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 1197,
      "code" : "b.tophash[i] = evacuatedX + useY",
      "entry" : false,
      "use-vars" : [ 19, 31, 5 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 43 ],
      "in-vars" : [ 1, 19, 20, 18, 2, 5, 8, 0, 7, 31, 25, 23 ],
      "exit" : false,
      "out-vars" : [ 20, 23, 8, 1, 0, 25, 19, 33, 7, 18, 2, 5 ],
      "decl-vars" : [ 33 ],
      "line-start" : 1198,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "dst"
          }
        } ],
        "right" : [ {
          "go-type" : 51,
          "kind" : "expression",
          "operator" : "&",
          "target" : {
            "go-type" : 48,
            "index" : {
              "go-type" : 10,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "useY",
                "variable" : 31
              }
            },
            "kind" : "expression",
            "target" : {
              "go-type" : 47,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "xy",
                "variable" : 8
              }
            },
            "type" : "index"
          },
          "type" : "unary"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 1198,
      "code" : "dst := &xy[useY]",
      "entry" : false,
      "use-vars" : [ 31, 8 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 44, 48 ],
      "in-vars" : [ 7, 25, 19, 20, 2, 8, 33, 1, 23, 0, 18, 5 ],
      "exit" : false,
      "out-vars" : [ 20, 23, 33, 1, 0, 7, 25, 19, 8, 18, 2, 5 ],
      "decl-vars" : [ ],
      "line-start" : 1200,
      "ast" : {
        "condition" : {
          "go-type" : 54,
          "kind" : "expression",
          "left" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "i",
              "variable" : 34
            },
            "go-type" : 29,
            "kind" : "expression",
            "target" : {
              "go-type" : 51,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "dst",
                "variable" : 33
              }
            },
            "type" : "selector"
          },
          "operator" : "==",
          "right" : {
            "go-type" : 29,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "8"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 1205,
      "code" : "if dst.i == bucketCnt {\n\tdst.b = h.newoverflow(t, dst.b)\n\tdst.i = 0\n\tdst.k = add(unsafe.Pointer(dst.b), dataOffset)\n\tdst.e = add(dst.k, bucketCnt*uintptr(t.keysize))\n}",
      "entry" : false,
      "use-vars" : [ 33 ]
    }, {
      "update-vars" : [ 33 ],
      "successors" : [ 45 ],
      "in-vars" : [ 8, 0, 25, 5, 33, 1, 7, 19, 20, 18, 2, 23 ],
      "exit" : false,
      "out-vars" : [ 23, 33, 0, 7, 19, 20, 5, 8, 1, 25, 18, 2 ],
      "decl-vars" : [ ],
      "line-start" : 1201,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "b",
            "variable" : 10
          },
          "go-type" : 35,
          "kind" : "expression",
          "target" : {
            "go-type" : 51,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "dst",
              "variable" : 33
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "t",
              "variable" : 0
            }
          }, {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "b",
              "variable" : 10
            },
            "go-type" : 35,
            "kind" : "expression",
            "target" : {
              "go-type" : 51,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "dst",
                "variable" : 33
              }
            },
            "type" : "selector"
          } ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "function" : 11,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "newoverflow"
            },
            "go-type" : 70,
            "kind" : "expression",
            "target" : {
              "go-type" : 26,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "h",
                "variable" : 1
              }
            },
            "type" : "selector"
          },
          "go-type" : 35,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 1201,
      "code" : "dst.b = h.newoverflow(t, dst.b)",
      "entry" : false,
      "use-vars" : [ 0, 33, 1 ]
    }, {
      "update-vars" : [ 33 ],
      "successors" : [ 46 ],
      "in-vars" : [ 2, 5, 0, 7, 25, 20, 18, 23, 8, 33, 1, 19 ],
      "exit" : false,
      "out-vars" : [ 8, 33, 0, 7, 25, 19, 20, 18, 1, 2, 5, 23 ],
      "decl-vars" : [ ],
      "line-start" : 1202,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "i",
            "variable" : 34
          },
          "go-type" : 29,
          "kind" : "expression",
          "target" : {
            "go-type" : 51,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "dst",
              "variable" : 33
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "go-type" : 29,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "0"
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 1202,
      "code" : "dst.i = 0",
      "entry" : false,
      "use-vars" : [ 33 ]
    }, {
      "update-vars" : [ 33 ],
      "successors" : [ 47 ],
      "in-vars" : [ 25, 20, 2, 5, 23, 8, 0, 7, 19, 18, 33, 1 ],
      "exit" : false,
      "out-vars" : [ 0, 7, 19, 20, 5, 23, 8, 33, 18, 2, 1, 25 ],
      "decl-vars" : [ ],
      "line-start" : 1203,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "k",
            "variable" : 12
          },
          "go-type" : 13,
          "kind" : "expression",
          "target" : {
            "go-type" : 51,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "dst",
              "variable" : 33
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "arguments" : [ {
            "coerced-to" : {
              "go-type" : 13,
              "kind" : "type",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 1,
                "value" : "unsafe"
              },
              "type" : "identifier",
              "value" : {
                "go-type" : 13,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "Pointer"
              }
            },
            "go-type" : 13,
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "b",
                "variable" : 10
              },
              "go-type" : 35,
              "kind" : "expression",
              "target" : {
                "go-type" : 51,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "dst",
                  "variable" : 33
                }
              },
              "type" : "selector"
            },
            "type" : "cast"
          }, {
            "go-type" : 7,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "8"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 40,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 1,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "add"
            }
          },
          "go-type" : 13,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 1203,
      "code" : "dst.k = add(unsafe.Pointer(dst.b), dataOffset)",
      "entry" : false,
      "use-vars" : [ 33 ]
    }, {
      "update-vars" : [ 33 ],
      "successors" : [ 48 ],
      "in-vars" : [ 7, 25, 20, 18, 2, 23, 8, 1, 19, 5, 33, 0 ],
      "exit" : false,
      "out-vars" : [ 8, 33, 1, 0, 25, 18, 5, 7, 19, 20, 2, 23 ],
      "decl-vars" : [ ],
      "line-start" : 1204,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "e",
            "variable" : 13
          },
          "go-type" : 13,
          "kind" : "expression",
          "target" : {
            "go-type" : 51,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "dst",
              "variable" : 33
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "arguments" : [ {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "k",
              "variable" : 12
            },
            "go-type" : 13,
            "kind" : "expression",
            "target" : {
              "go-type" : 51,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "dst",
                "variable" : 33
              }
            },
            "type" : "selector"
          }, {
            "go-type" : 7,
            "kind" : "expression",
            "left" : {
              "go-type" : 7,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "8"
              }
            },
            "operator" : "*",
            "right" : {
              "coerced-to" : {
                "go-type" : 7,
                "kind" : "type",
                "type" : "identifier",
                "value" : {
                  "go-type" : 7,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "uintptr"
                }
              },
              "go-type" : 7,
              "kind" : "expression",
              "target" : {
                "field" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "keysize",
                  "variable" : 14
                },
                "go-type" : 10,
                "kind" : "expression",
                "target" : {
                  "go-type" : 2,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "t",
                    "variable" : 0
                  }
                },
                "type" : "selector"
              },
              "type" : "cast"
            },
            "type" : "binary"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 40,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 1,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "add"
            }
          },
          "go-type" : 13,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 1204,
      "code" : "dst.e = add(dst.k, bucketCnt*uintptr(t.keysize))",
      "entry" : false,
      "use-vars" : [ 0, 33 ]
    }, {
      "update-vars" : [ 33 ],
      "successors" : [ 49 ],
      "in-vars" : [ 2, 23, 33, 1, 7, 25, 19, 8, 0, 20, 18, 5 ],
      "exit" : false,
      "out-vars" : [ 33, 0, 25, 19, 18, 5, 8, 7, 20, 2, 1 ],
      "decl-vars" : [ ],
      "line-start" : 1206,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 10,
          "index" : {
            "go-type" : 29,
            "kind" : "expression",
            "left" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "i",
                "variable" : 34
              },
              "go-type" : 29,
              "kind" : "expression",
              "target" : {
                "go-type" : 51,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "dst",
                  "variable" : 33
                }
              },
              "type" : "selector"
            },
            "operator" : "&",
            "right" : {
              "go-type" : 29,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "7"
              }
            },
            "type" : "binary"
          },
          "kind" : "expression",
          "target" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "tophash",
              "variable" : 22
            },
            "go-type" : 38,
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "b",
                "variable" : 10
              },
              "go-type" : 35,
              "kind" : "expression",
              "target" : {
                "go-type" : 51,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "dst",
                  "variable" : 33
                }
              },
              "type" : "selector"
            },
            "type" : "selector"
          },
          "type" : "index"
        } ],
        "right" : [ {
          "go-type" : 10,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "top",
            "variable" : 23
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 1206,
      "code" : "dst.b.tophash[dst.i&(bucketCnt-1)] = top",
      "entry" : false,
      "use-vars" : [ 23, 33 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 50, 51 ],
      "in-vars" : [ 20, 18, 5, 33, 1, 0, 7, 19, 8, 25, 2 ],
      "exit" : false,
      "out-vars" : [ 20, 18, 5, 8, 33, 1, 0, 7, 25, 19, 2 ],
      "decl-vars" : [ ],
      "line-start" : 1207,
      "ast" : {
        "condition" : {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "function" : 8,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "indirectkey"
            },
            "go-type" : 52,
            "kind" : "expression",
            "target" : {
              "go-type" : 2,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "t",
                "variable" : 0
              }
            },
            "type" : "selector"
          },
          "go-type" : 15,
          "kind" : "expression",
          "type" : "call"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 1211,
      "code" : "if t.indirectkey() {\n\t*(*unsafe.Pointer)(dst.k) = k2\n} else {\n\ttypedmemmove(t.key, dst.k, k)\n}",
      "entry" : false,
      "use-vars" : [ 0 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 52 ],
      "in-vars" : [ 25, 19, 2, 5, 8, 1, 7, 20, 18, 33, 0 ],
      "exit" : false,
      "out-vars" : [ 19, 2, 5, 8, 33, 1, 7, 0, 20, 18 ],
      "decl-vars" : [ ],
      "line-start" : 1208,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 13,
          "kind" : "expression",
          "target" : {
            "coerced-to" : {
              "contained" : {
                "go-type" : 13,
                "kind" : "type",
                "qualifier" : {
                  "ident-kind" : "PkgName",
                  "kind" : "ident",
                  "package" : 1,
                  "value" : "unsafe"
                },
                "type" : "identifier",
                "value" : {
                  "go-type" : 13,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "Pointer"
                }
              },
              "go-type" : 66,
              "kind" : "type",
              "type" : "pointer"
            },
            "go-type" : 66,
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "k",
                "variable" : 12
              },
              "go-type" : 13,
              "kind" : "expression",
              "target" : {
                "go-type" : 51,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "dst",
                  "variable" : 33
                }
              },
              "type" : "selector"
            },
            "type" : "cast"
          },
          "type" : "star"
        } ],
        "right" : [ {
          "go-type" : 13,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "k2",
            "variable" : 25
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 1208,
      "code" : "*(*unsafe.Pointer)(dst.k) = k2",
      "entry" : false,
      "use-vars" : [ 25 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 52 ],
      "in-vars" : [ 8, 1, 0, 19, 5, 33, 7, 20, 18, 2 ],
      "exit" : false,
      "out-vars" : [ 8, 7, 19, 20, 18, 2, 5, 33, 1, 0 ],
      "decl-vars" : [ ],
      "line-start" : 1210,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "key",
              "variable" : 29
            },
            "go-type" : 21,
            "kind" : "expression",
            "target" : {
              "go-type" : 2,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "t",
                "variable" : 0
              }
            },
            "type" : "selector"
          }, {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "k",
              "variable" : 12
            },
            "go-type" : 13,
            "kind" : "expression",
            "target" : {
              "go-type" : 51,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "dst",
                "variable" : 33
              }
            },
            "type" : "selector"
          }, {
            "go-type" : 13,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "k",
              "variable" : 18
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 73,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 12,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "typedmemmove"
            }
          },
          "go-type" : 39,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 1210,
      "code" : "typedmemmove(t.key, dst.k, k)",
      "entry" : false,
      "use-vars" : [ 33, 18, 0 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 53, 54 ],
      "in-vars" : [ 0, 20, 18, 8, 33, 1, 5, 7, 19, 2 ],
      "exit" : false,
      "out-vars" : [ 33, 7, 20, 18, 5, 8, 0, 19, 2, 1 ],
      "decl-vars" : [ ],
      "line-start" : 1212,
      "ast" : {
        "condition" : {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "function" : 13,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "indirectelem"
            },
            "go-type" : 52,
            "kind" : "expression",
            "target" : {
              "go-type" : 2,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "t",
                "variable" : 0
              }
            },
            "type" : "selector"
          },
          "go-type" : 15,
          "kind" : "expression",
          "type" : "call"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 1216,
      "code" : "if t.indirectelem() {\n\t*(*unsafe.Pointer)(dst.e) = *(*unsafe.Pointer)(e)\n} else {\n\ttypedmemmove(t.elem, dst.e, e)\n}",
      "entry" : false,
      "use-vars" : [ 0 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 55 ],
      "in-vars" : [ 7, 19, 20, 2, 18, 5, 8, 33, 1, 0 ],
      "exit" : false,
      "out-vars" : [ 33, 1, 7, 19, 18, 8, 20, 2, 5, 0 ],
      "decl-vars" : [ ],
      "line-start" : 1213,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 13,
          "kind" : "expression",
          "target" : {
            "coerced-to" : {
              "contained" : {
                "go-type" : 13,
                "kind" : "type",
                "qualifier" : {
                  "ident-kind" : "PkgName",
                  "kind" : "ident",
                  "package" : 1,
                  "value" : "unsafe"
                },
                "type" : "identifier",
                "value" : {
                  "go-type" : 13,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "Pointer"
                }
              },
              "go-type" : 66,
              "kind" : "type",
              "type" : "pointer"
            },
            "go-type" : 66,
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "e",
                "variable" : 13
              },
              "go-type" : 13,
              "kind" : "expression",
              "target" : {
                "go-type" : 51,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "dst",
                  "variable" : 33
                }
              },
              "type" : "selector"
            },
            "type" : "cast"
          },
          "type" : "star"
        } ],
        "right" : [ {
          "go-type" : 13,
          "kind" : "expression",
          "target" : {
            "coerced-to" : {
              "contained" : {
                "go-type" : 13,
                "kind" : "type",
                "qualifier" : {
                  "ident-kind" : "PkgName",
                  "kind" : "ident",
                  "package" : 1,
                  "value" : "unsafe"
                },
                "type" : "identifier",
                "value" : {
                  "go-type" : 13,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "Pointer"
                }
              },
              "go-type" : 66,
              "kind" : "type",
              "type" : "pointer"
            },
            "go-type" : 66,
            "kind" : "expression",
            "target" : {
              "go-type" : 13,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "e",
                "variable" : 20
              }
            },
            "type" : "cast"
          },
          "type" : "star"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 1213,
      "code" : "*(*unsafe.Pointer)(dst.e) = *(*unsafe.Pointer)(e)",
      "entry" : false,
      "use-vars" : [ 20 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 55 ],
      "in-vars" : [ 33, 0, 19, 20, 18, 2, 8, 7, 5, 1 ],
      "exit" : false,
      "out-vars" : [ 5, 8, 33, 1, 7, 19, 2, 0, 20, 18 ],
      "decl-vars" : [ ],
      "line-start" : 1215,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "elem",
              "variable" : 36
            },
            "go-type" : 21,
            "kind" : "expression",
            "target" : {
              "go-type" : 2,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "t",
                "variable" : 0
              }
            },
            "type" : "selector"
          }, {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "e",
              "variable" : 13
            },
            "go-type" : 13,
            "kind" : "expression",
            "target" : {
              "go-type" : 51,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "dst",
                "variable" : 33
              }
            },
            "type" : "selector"
          }, {
            "go-type" : 13,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "e",
              "variable" : 20
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 73,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 12,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "typedmemmove"
            }
          },
          "go-type" : 39,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 1215,
      "code" : "typedmemmove(t.elem, dst.e, e)",
      "entry" : false,
      "use-vars" : [ 20, 0, 33 ]
    }, {
      "update-vars" : [ 33 ],
      "successors" : [ 56 ],
      "in-vars" : [ 19, 20, 2, 5, 1, 0, 7, 8, 33, 18 ],
      "exit" : false,
      "out-vars" : [ 1, 7, 18, 2, 8, 0, 19, 20, 5, 33 ],
      "decl-vars" : [ ],
      "line-start" : 1217,
      "ast" : {
        "kind" : "statement",
        "operation" : "++",
        "target" : {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "i",
            "variable" : 34
          },
          "go-type" : 29,
          "kind" : "expression",
          "target" : {
            "go-type" : 51,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "dst",
              "variable" : 33
            }
          },
          "type" : "selector"
        },
        "type" : "crement"
      },
      "assign-vars" : [ ],
      "line-end" : 1217,
      "code" : "dst.i++",
      "entry" : false,
      "use-vars" : [ 33 ]
    }, {
      "update-vars" : [ 33 ],
      "successors" : [ 57 ],
      "in-vars" : [ 18, 1, 0, 19, 20, 5, 8, 33, 7, 2 ],
      "exit" : false,
      "out-vars" : [ 1, 7, 18, 2, 5, 33, 0, 19, 20, 8 ],
      "decl-vars" : [ ],
      "line-start" : 1222,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "k",
            "variable" : 12
          },
          "go-type" : 13,
          "kind" : "expression",
          "target" : {
            "go-type" : 51,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "dst",
              "variable" : 33
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "arguments" : [ {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "k",
              "variable" : 12
            },
            "go-type" : 13,
            "kind" : "expression",
            "target" : {
              "go-type" : 51,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "dst",
                "variable" : 33
              }
            },
            "type" : "selector"
          }, {
            "coerced-to" : {
              "go-type" : 7,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 7,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "uintptr"
              }
            },
            "go-type" : 7,
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "keysize",
                "variable" : 14
              },
              "go-type" : 10,
              "kind" : "expression",
              "target" : {
                "go-type" : 2,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "t",
                  "variable" : 0
                }
              },
              "type" : "selector"
            },
            "type" : "cast"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 40,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 1,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "add"
            }
          },
          "go-type" : 13,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 1222,
      "code" : "dst.k = add(dst.k, uintptr(t.keysize))",
      "entry" : false,
      "use-vars" : [ 0, 33 ]
    }, {
      "update-vars" : [ 33 ],
      "successors" : [ 21 ],
      "in-vars" : [ 33, 7, 18, 2, 5, 8, 1, 0, 19, 20 ],
      "exit" : false,
      "out-vars" : [ 8, 1, 7, 20, 18, 2, 5, 0, 19 ],
      "decl-vars" : [ ],
      "line-start" : 1223,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "e",
            "variable" : 13
          },
          "go-type" : 13,
          "kind" : "expression",
          "target" : {
            "go-type" : 51,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "dst",
              "variable" : 33
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "arguments" : [ {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "e",
              "variable" : 13
            },
            "go-type" : 13,
            "kind" : "expression",
            "target" : {
              "go-type" : 51,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "dst",
                "variable" : 33
              }
            },
            "type" : "selector"
          }, {
            "coerced-to" : {
              "go-type" : 7,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 7,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "uintptr"
              }
            },
            "go-type" : 7,
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "elemsize",
                "variable" : 21
              },
              "go-type" : 10,
              "kind" : "expression",
              "target" : {
                "go-type" : 2,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "t",
                  "variable" : 0
                }
              },
              "type" : "selector"
            },
            "type" : "cast"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 40,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 1,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "add"
            }
          },
          "go-type" : 13,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 1223,
      "code" : "dst.e = add(dst.e, uintptr(t.elemsize))",
      "entry" : false,
      "use-vars" : [ 0, 33 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 59, 63 ],
      "in-vars" : [ 1, 0, 7, 2 ],
      "exit" : false,
      "out-vars" : [ 1, 0, 7, 2 ],
      "decl-vars" : [ ],
      "line-start" : 1227,
      "ast" : {
        "condition" : {
          "go-type" : 54,
          "kind" : "expression",
          "left" : {
            "go-type" : 54,
            "kind" : "expression",
            "left" : {
              "go-type" : 10,
              "kind" : "expression",
              "left" : {
                "field" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "flags",
                  "variable" : 28
                },
                "go-type" : 10,
                "kind" : "expression",
                "target" : {
                  "go-type" : 26,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "h",
                    "variable" : 1
                  }
                },
                "type" : "selector"
              },
              "operator" : "&",
              "right" : {
                "go-type" : 10,
                "kind" : "constant",
                "value" : {
                  "type" : "INT",
                  "value" : "2"
                }
              },
              "type" : "binary"
            },
            "operator" : "==",
            "right" : {
              "go-type" : 10,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "0"
              }
            },
            "type" : "binary"
          },
          "operator" : "&&",
          "right" : {
            "go-type" : 54,
            "kind" : "expression",
            "left" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "ptrdata",
                "variable" : 38
              },
              "go-type" : 7,
              "kind" : "expression",
              "target" : {
                "field" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "bucket",
                  "variable" : 37
                },
                "go-type" : 21,
                "kind" : "expression",
                "target" : {
                  "go-type" : 2,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "t",
                    "variable" : 0
                  }
                },
                "type" : "selector"
              },
              "type" : "selector"
            },
            "operator" : "!=",
            "right" : {
              "go-type" : 7,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "0"
              }
            },
            "type" : "binary"
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 1234,
      "code" : "if h.flags&oldIterator == 0 && t.bucket.ptrdata != 0 {\n\tb := add(h.oldbuckets, oldbucket*uintptr(t.bucketsize))\n\n\tptr := add(b, dataOffset)\n\tn := uintptr(t.bucketsize) - dataOffset\n\tmemclrHasPointers(ptr, n)\n}",
      "entry" : false,
      "use-vars" : [ 0, 1 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 60 ],
      "in-vars" : [ 1, 0, 7, 2 ],
      "exit" : false,
      "out-vars" : [ 1, 0, 7, 2, 39 ],
      "decl-vars" : [ 39 ],
      "line-start" : 1228,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "b"
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "oldbuckets",
              "variable" : 3
            },
            "go-type" : 13,
            "kind" : "expression",
            "target" : {
              "go-type" : 26,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "h",
                "variable" : 1
              }
            },
            "type" : "selector"
          }, {
            "go-type" : 7,
            "kind" : "expression",
            "left" : {
              "go-type" : 7,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "oldbucket",
                "variable" : 2
              }
            },
            "operator" : "*",
            "right" : {
              "coerced-to" : {
                "go-type" : 7,
                "kind" : "type",
                "type" : "identifier",
                "value" : {
                  "go-type" : 7,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "uintptr"
                }
              },
              "go-type" : 7,
              "kind" : "expression",
              "target" : {
                "field" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "bucketsize",
                  "variable" : 4
                },
                "go-type" : 25,
                "kind" : "expression",
                "target" : {
                  "go-type" : 2,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "t",
                    "variable" : 0
                  }
                },
                "type" : "selector"
              },
              "type" : "cast"
            },
            "type" : "binary"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 40,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 1,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "add"
            }
          },
          "go-type" : 13,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 1228,
      "code" : "b := add(h.oldbuckets, oldbucket*uintptr(t.bucketsize))",
      "entry" : false,
      "use-vars" : [ 0, 1, 2 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 61 ],
      "in-vars" : [ 1, 0, 7, 2, 39 ],
      "exit" : false,
      "out-vars" : [ 1, 0, 7, 40, 2 ],
      "decl-vars" : [ 40 ],
      "line-start" : 1231,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "ptr"
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 13,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "b",
              "variable" : 39
            }
          }, {
            "go-type" : 7,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "8"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 40,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 1,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "add"
            }
          },
          "go-type" : 13,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 1231,
      "code" : "ptr := add(b, dataOffset)",
      "entry" : false,
      "use-vars" : [ 39 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 62 ],
      "in-vars" : [ 0, 7, 40, 2, 1 ],
      "exit" : false,
      "out-vars" : [ 41, 2, 1, 0, 7, 40 ],
      "decl-vars" : [ 41 ],
      "line-start" : 1232,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "n"
          }
        } ],
        "right" : [ {
          "go-type" : 7,
          "kind" : "expression",
          "left" : {
            "coerced-to" : {
              "go-type" : 7,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 7,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "uintptr"
              }
            },
            "go-type" : 7,
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "bucketsize",
                "variable" : 4
              },
              "go-type" : 25,
              "kind" : "expression",
              "target" : {
                "go-type" : 2,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "t",
                  "variable" : 0
                }
              },
              "type" : "selector"
            },
            "type" : "cast"
          },
          "operator" : "-",
          "right" : {
            "go-type" : 7,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "8"
            }
          },
          "type" : "binary"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 1232,
      "code" : "n := uintptr(t.bucketsize) - dataOffset",
      "entry" : false,
      "use-vars" : [ 0 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 63 ],
      "in-vars" : [ 2, 1, 0, 7, 40, 41 ],
      "exit" : false,
      "out-vars" : [ 1, 0, 7, 2 ],
      "decl-vars" : [ ],
      "line-start" : 1233,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 13,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "ptr",
              "variable" : 40
            }
          }, {
            "go-type" : 7,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "n",
              "variable" : 41
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 75,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 14,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "memclrHasPointers"
            }
          },
          "go-type" : 39,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 1233,
      "code" : "memclrHasPointers(ptr, n)",
      "entry" : false,
      "use-vars" : [ 41, 40 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 64, 1 ],
      "in-vars" : [ 1, 0, 7, 2 ],
      "exit" : false,
      "out-vars" : [ 1, 0, 7 ],
      "decl-vars" : [ ],
      "line-start" : 1237,
      "ast" : {
        "condition" : {
          "go-type" : 54,
          "kind" : "expression",
          "left" : {
            "go-type" : 7,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "oldbucket",
              "variable" : 2
            }
          },
          "operator" : "==",
          "right" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "nevacuate",
              "variable" : 42
            },
            "go-type" : 7,
            "kind" : "expression",
            "target" : {
              "go-type" : 26,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "h",
                "variable" : 1
              }
            },
            "type" : "selector"
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 1239,
      "code" : "if oldbucket == h.nevacuate {\n\tadvanceEvacuationMark(h, t, newbit)\n}",
      "entry" : false,
      "use-vars" : [ 1, 2 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 1, 0, 7 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 1238,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 26,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "h",
              "variable" : 1
            }
          }, {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "t",
              "variable" : 0
            }
          }, {
            "go-type" : 7,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "newbit",
              "variable" : 7
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 77,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 15,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "advanceEvacuationMark"
            }
          },
          "go-type" : 39,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 1238,
      "code" : "advanceEvacuationMark(h, t, newbit)",
      "entry" : false,
      "use-vars" : [ 1, 0, 7 ]
    } ],
    "code" : "func evacuate(t *maptype, h *hmap, oldbucket uintptr) {\n\tb := (*bmap)(add(h.oldbuckets, oldbucket*uintptr(t.bucketsize)))\n\tnewbit := h.noldbuckets()\n\tif !evacuated(b) {\n\n\t\t// xy contains the x and y (low and high) evacuation destinations.\n\t\tvar xy [2]evacDst\n\t\tx := &xy[0]\n\t\tx.b = (*bmap)(add(h.buckets, oldbucket*uintptr(t.bucketsize)))\n\t\tx.k = add(unsafe.Pointer(x.b), dataOffset)\n\t\tx.e = add(x.k, bucketCnt*uintptr(t.keysize))\n\n\t\tif !h.sameSizeGrow() {\n\n\t\t\ty := &xy[1]\n\t\t\ty.b = (*bmap)(add(h.buckets, (oldbucket+newbit)*uintptr(t.bucketsize)))\n\t\t\ty.k = add(unsafe.Pointer(y.b), dataOffset)\n\t\t\ty.e = add(y.k, bucketCnt*uintptr(t.keysize))\n\t\t}\n\n\t\tfor ; b != nil; b = b.overflow(t) {\n\t\t\tk := add(unsafe.Pointer(b), dataOffset)\n\t\t\te := add(k, bucketCnt*uintptr(t.keysize))\n\t\t\tfor i := 0; i < bucketCnt; i, k, e = i+1, add(k, uintptr(t.keysize)), add(e, uintptr(t.elemsize)) {\n\t\t\t\ttop := b.tophash[i]\n\t\t\t\tif isEmpty(top) {\n\t\t\t\t\tb.tophash[i] = evacuatedEmpty\n\t\t\t\t\tcontinue\n\t\t\t\t}\n\t\t\t\tif top < minTopHash {\n\t\t\t\t\tthrow(\"bad map state\")\n\t\t\t\t}\n\t\t\t\tk2 := k\n\t\t\t\tif t.indirectkey() {\n\t\t\t\t\tk2 = *((*unsafe.Pointer)(k2))\n\t\t\t\t}\n\t\t\t\tvar useY uint8\n\t\t\t\tif !h.sameSizeGrow() {\n\n\t\t\t\t\thash := t.hasher(k2, uintptr(h.hash0))\n\t\t\t\t\tif h.flags&iterator != 0 && !t.reflexivekey() && !t.key.equal(k2, k2) {\n\n\t\t\t\t\t\tuseY = top & 1\n\t\t\t\t\t\ttop = tophash(hash)\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif hash&newbit != 0 {\n\t\t\t\t\t\t\tuseY = 1\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif evacuatedX+1 != evacuatedY || evacuatedX^1 != evacuatedY {\n\t\t\t\t\tthrow(\"bad evacuatedN\")\n\t\t\t\t}\n\n\t\t\t\tb.tophash[i] = evacuatedX + useY\n\t\t\t\tdst := &xy[useY]\n\n\t\t\t\tif dst.i == bucketCnt {\n\t\t\t\t\tdst.b = h.newoverflow(t, dst.b)\n\t\t\t\t\tdst.i = 0\n\t\t\t\t\tdst.k = add(unsafe.Pointer(dst.b), dataOffset)\n\t\t\t\t\tdst.e = add(dst.k, bucketCnt*uintptr(t.keysize))\n\t\t\t\t}\n\t\t\t\tdst.b.tophash[dst.i&(bucketCnt-1)] = top\n\t\t\t\tif t.indirectkey() {\n\t\t\t\t\t*(*unsafe.Pointer)(dst.k) = k2\n\t\t\t\t} else {\n\t\t\t\t\ttypedmemmove(t.key, dst.k, k)\n\t\t\t\t}\n\t\t\t\tif t.indirectelem() {\n\t\t\t\t\t*(*unsafe.Pointer)(dst.e) = *(*unsafe.Pointer)(e)\n\t\t\t\t} else {\n\t\t\t\t\ttypedmemmove(t.elem, dst.e, e)\n\t\t\t\t}\n\t\t\t\tdst.i++\n\n\t\t\t\tdst.k = add(dst.k, uintptr(t.keysize))\n\t\t\t\tdst.e = add(dst.e, uintptr(t.elemsize))\n\t\t\t}\n\t\t}\n\n\t\tif h.flags&oldIterator == 0 && t.bucket.ptrdata != 0 {\n\t\t\tb := add(h.oldbuckets, oldbucket*uintptr(t.bucketsize))\n\n\t\t\tptr := add(b, dataOffset)\n\t\t\tn := uintptr(t.bucketsize) - dataOffset\n\t\t\tmemclrHasPointers(ptr, n)\n\t\t}\n\t}\n\n\tif oldbucket == h.nevacuate {\n\t\tadvanceEvacuationMark(h, t, newbit)\n\t}\n}",
    "defines" : [ 0 ],
    "functions" : [ {
      "name" : "evacuate",
      "package" : 0,
      "type" : 0,
      "exported" : false
    }, {
      "name" : "add",
      "package" : 0,
      "type" : 40,
      "exported" : false
    }, {
      "name" : "noldbuckets",
      "package" : 0,
      "type" : 44,
      "exported" : false
    }, {
      "name" : "evacuated",
      "package" : 0,
      "type" : 45,
      "exported" : false
    }, {
      "name" : "sameSizeGrow",
      "package" : 0,
      "type" : 53,
      "exported" : false
    }, {
      "name" : "overflow",
      "package" : 0,
      "type" : 59,
      "exported" : false
    }, {
      "name" : "isEmpty",
      "package" : 0,
      "type" : 60,
      "exported" : false
    }, {
      "name" : "throw",
      "package" : 0,
      "type" : 62,
      "exported" : false
    }, {
      "name" : "indirectkey",
      "package" : 0,
      "type" : 65,
      "exported" : false
    }, {
      "name" : "reflexivekey",
      "package" : 0,
      "type" : 65,
      "exported" : false
    }, {
      "name" : "tophash",
      "package" : 0,
      "type" : 67,
      "exported" : false
    }, {
      "name" : "newoverflow",
      "package" : 0,
      "type" : 72,
      "exported" : false
    }, {
      "name" : "typedmemmove",
      "package" : 0,
      "type" : 73,
      "exported" : false
    }, {
      "name" : "indirectelem",
      "package" : 0,
      "type" : 65,
      "exported" : false
    }, {
      "name" : "memclrHasPointers",
      "package" : 0,
      "type" : 75,
      "exported" : false
    }, {
      "name" : "advanceEvacuationMark",
      "package" : 0,
      "type" : 77,
      "exported" : false
    } ],
    "line-end" : 1240,
    "line-start" : 1128,
    "names" : [ "evacuate" ],
    "package" : 0,
    "packages" : [ {
      "name" : "runtime",
      "path" : "runtime"
    }, {
      "name" : "unsafe",
      "path" : "unsafe"
    } ],
    "params" : [ 0, 1, 2 ],
    "receivers" : [ ],
    "results" : [ ],
    "type" : "function",
    "types" : [ {
      "name" : "func(t *runtime.maptype, h *runtime.hmap, oldbucket uintptr)",
      "params" : 1,
      "recv" : -1,
      "results" : 39,
      "type" : "Signature",
      "underlying" : 0,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "t",
        "type" : 2
      }, {
        "name" : "h",
        "type" : 26
      }, {
        "name" : "oldbucket",
        "type" : 7
      } ],
      "name" : "(t *runtime.maptype, h *runtime.hmap, oldbucket uintptr)",
      "type" : "Tuple",
      "underlying" : 1
    }, {
      "elem" : 3,
      "name" : "*runtime.maptype",
      "type" : "Pointer",
      "underlying" : 2
    }, {
      "local-name" : "maptype",
      "name" : "runtime.maptype",
      "package" : 0,
      "type" : "Named",
      "underlying" : 4
    }, {
      "fields" : [ {
        "name" : "typ",
        "type" : 5
      }, {
        "name" : "key",
        "type" : 21
      }, {
        "name" : "elem",
        "type" : 21
      }, {
        "name" : "bucket",
        "type" : 21
      }, {
        "name" : "hasher",
        "type" : 22
      }, {
        "name" : "keysize",
        "type" : 10
      }, {
        "name" : "elemsize",
        "type" : 10
      }, {
        "name" : "bucketsize",
        "type" : 25
      }, {
        "name" : "flags",
        "type" : 8
      } ],
      "name" : "struct{typ runtime._type; key *runtime._type; elem *runtime._type; bucket *runtime._type; hasher func(unsafe.Pointer, uintptr) uintptr; keysize uint8; elemsize uint8; bucketsize uint16; flags uint32}",
      "type" : "Struct",
      "underlying" : 4
    }, {
      "local-name" : "_type",
      "name" : "runtime._type",
      "package" : 0,
      "type" : "Named",
      "underlying" : 6
    }, {
      "fields" : [ {
        "name" : "size",
        "type" : 7
      }, {
        "name" : "ptrdata",
        "type" : 7
      }, {
        "name" : "hash",
        "type" : 8
      }, {
        "name" : "tflag",
        "type" : 9
      }, {
        "name" : "align",
        "type" : 10
      }, {
        "name" : "fieldAlign",
        "type" : 10
      }, {
        "name" : "kind",
        "type" : 10
      }, {
        "name" : "equal",
        "type" : 11
      }, {
        "name" : "gcdata",
        "type" : 16
      }, {
        "name" : "str",
        "type" : 18
      }, {
        "name" : "ptrToThis",
        "type" : 20
      } ],
      "name" : "struct{size uintptr; ptrdata uintptr; hash uint32; tflag runtime.tflag; align uint8; fieldAlign uint8; kind uint8; equal func(unsafe.Pointer, unsafe.Pointer) bool; gcdata *byte; str runtime.nameOff; ptrToThis runtime.typeOff}",
      "type" : "Struct",
      "underlying" : 6
    }, {
      "name" : "uintptr",
      "type" : "Basic",
      "underlying" : 7
    }, {
      "name" : "uint32",
      "type" : "Basic",
      "underlying" : 8
    }, {
      "local-name" : "tflag",
      "name" : "runtime.tflag",
      "package" : 0,
      "type" : "Named",
      "underlying" : 10
    }, {
      "name" : "uint8",
      "type" : "Basic",
      "underlying" : 10
    }, {
      "name" : "func(unsafe.Pointer, unsafe.Pointer) bool",
      "params" : 12,
      "recv" : -1,
      "results" : 14,
      "type" : "Signature",
      "underlying" : 11,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 13
      }, {
        "name" : "",
        "type" : 13
      } ],
      "name" : "(unsafe.Pointer, unsafe.Pointer)",
      "type" : "Tuple",
      "underlying" : 12
    }, {
      "local-name" : "Pointer",
      "name" : "unsafe.Pointer",
      "package" : 1,
      "type" : "Basic",
      "underlying" : 13
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 15
      } ],
      "name" : "(bool)",
      "type" : "Tuple",
      "underlying" : 14
    }, {
      "name" : "bool",
      "type" : "Basic",
      "underlying" : 15
    }, {
      "elem" : 17,
      "name" : "*byte",
      "type" : "Pointer",
      "underlying" : 16
    }, {
      "name" : "byte",
      "type" : "Basic",
      "underlying" : 17
    }, {
      "local-name" : "nameOff",
      "name" : "runtime.nameOff",
      "package" : 0,
      "type" : "Named",
      "underlying" : 19
    }, {
      "name" : "int32",
      "type" : "Basic",
      "underlying" : 19
    }, {
      "local-name" : "typeOff",
      "name" : "runtime.typeOff",
      "package" : 0,
      "type" : "Named",
      "underlying" : 19
    }, {
      "elem" : 5,
      "name" : "*runtime._type",
      "type" : "Pointer",
      "underlying" : 21
    }, {
      "name" : "func(unsafe.Pointer, uintptr) uintptr",
      "params" : 23,
      "recv" : -1,
      "results" : 24,
      "type" : "Signature",
      "underlying" : 22,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 13
      }, {
        "name" : "",
        "type" : 7
      } ],
      "name" : "(unsafe.Pointer, uintptr)",
      "type" : "Tuple",
      "underlying" : 23
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 7
      } ],
      "name" : "(uintptr)",
      "type" : "Tuple",
      "underlying" : 24
    }, {
      "name" : "uint16",
      "type" : "Basic",
      "underlying" : 25
    }, {
      "elem" : 27,
      "name" : "*runtime.hmap",
      "type" : "Pointer",
      "underlying" : 26
    }, {
      "local-name" : "hmap",
      "name" : "runtime.hmap",
      "package" : 0,
      "type" : "Named",
      "underlying" : 28
    }, {
      "fields" : [ {
        "name" : "count",
        "type" : 29
      }, {
        "name" : "flags",
        "type" : 10
      }, {
        "name" : "B",
        "type" : 10
      }, {
        "name" : "noverflow",
        "type" : 25
      }, {
        "name" : "hash0",
        "type" : 8
      }, {
        "name" : "buckets",
        "type" : 13
      }, {
        "name" : "oldbuckets",
        "type" : 13
      }, {
        "name" : "nevacuate",
        "type" : 7
      }, {
        "name" : "extra",
        "type" : 30
      } ],
      "name" : "struct{count int; flags uint8; B uint8; noverflow uint16; hash0 uint32; buckets unsafe.Pointer; oldbuckets unsafe.Pointer; nevacuate uintptr; extra *runtime.mapextra}",
      "type" : "Struct",
      "underlying" : 28
    }, {
      "name" : "int",
      "type" : "Basic",
      "underlying" : 29
    }, {
      "elem" : 31,
      "name" : "*runtime.mapextra",
      "type" : "Pointer",
      "underlying" : 30
    }, {
      "local-name" : "mapextra",
      "name" : "runtime.mapextra",
      "package" : 0,
      "type" : "Named",
      "underlying" : 32
    }, {
      "fields" : [ {
        "name" : "overflow",
        "type" : 33
      }, {
        "name" : "oldoverflow",
        "type" : 33
      }, {
        "name" : "nextOverflow",
        "type" : 35
      } ],
      "name" : "struct{overflow *[]*runtime.bmap; oldoverflow *[]*runtime.bmap; nextOverflow *runtime.bmap}",
      "type" : "Struct",
      "underlying" : 32
    }, {
      "elem" : 34,
      "name" : "*[]*runtime.bmap",
      "type" : "Pointer",
      "underlying" : 33
    }, {
      "elem" : 35,
      "name" : "[]*runtime.bmap",
      "type" : "Slice",
      "underlying" : 34
    }, {
      "elem" : 36,
      "name" : "*runtime.bmap",
      "type" : "Pointer",
      "underlying" : 35
    }, {
      "local-name" : "bmap",
      "name" : "runtime.bmap",
      "package" : 0,
      "type" : "Named",
      "underlying" : 37
    }, {
      "fields" : [ {
        "name" : "tophash",
        "type" : 38
      } ],
      "name" : "struct{tophash [8]uint8}",
      "type" : "Struct",
      "underlying" : 37
    }, {
      "elem" : 10,
      "name" : "[8]uint8",
      "type" : "Array",
      "underlying" : 38
    }, {
      "fields" : [ ],
      "name" : "()",
      "type" : "Tuple",
      "underlying" : 39
    }, {
      "name" : "func(p unsafe.Pointer, x uintptr) unsafe.Pointer",
      "params" : 41,
      "recv" : -1,
      "results" : 42,
      "type" : "Signature",
      "underlying" : 40,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "p",
        "type" : 13
      }, {
        "name" : "x",
        "type" : 7
      } ],
      "name" : "(p unsafe.Pointer, x uintptr)",
      "type" : "Tuple",
      "underlying" : 41
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 13
      } ],
      "name" : "(unsafe.Pointer)",
      "type" : "Tuple",
      "underlying" : 42
    }, {
      "name" : "func() uintptr",
      "params" : 39,
      "recv" : -1,
      "results" : 24,
      "type" : "Signature",
      "underlying" : 43,
      "variadic" : false
    }, {
      "name" : "(*runtime.hmap) func() uintptr",
      "params" : 39,
      "recv" : 6,
      "results" : 24,
      "type" : "Signature",
      "underlying" : 44,
      "variadic" : false
    }, {
      "name" : "func(b *runtime.bmap) bool",
      "params" : 46,
      "recv" : -1,
      "results" : 14,
      "type" : "Signature",
      "underlying" : 45,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "b",
        "type" : 35
      } ],
      "name" : "(b *runtime.bmap)",
      "type" : "Tuple",
      "underlying" : 46
    }, {
      "elem" : 48,
      "name" : "[2]runtime.evacDst",
      "type" : "Array",
      "underlying" : 47
    }, {
      "local-name" : "evacDst",
      "name" : "runtime.evacDst",
      "package" : 0,
      "type" : "Named",
      "underlying" : 49
    }, {
      "fields" : [ {
        "name" : "b",
        "type" : 35
      }, {
        "name" : "i",
        "type" : 29
      }, {
        "name" : "k",
        "type" : 13
      }, {
        "name" : "e",
        "type" : 13
      } ],
      "name" : "struct{b *runtime.bmap; i int; k unsafe.Pointer; e unsafe.Pointer}",
      "type" : "Struct",
      "underlying" : 49
    }, {
      "name" : "untyped int",
      "type" : "Basic",
      "underlying" : 50
    }, {
      "elem" : 48,
      "name" : "*runtime.evacDst",
      "type" : "Pointer",
      "underlying" : 51
    }, {
      "name" : "func() bool",
      "params" : 39,
      "recv" : -1,
      "results" : 14,
      "type" : "Signature",
      "underlying" : 52,
      "variadic" : false
    }, {
      "name" : "(*runtime.hmap) func() bool",
      "params" : 39,
      "recv" : 15,
      "results" : 14,
      "type" : "Signature",
      "underlying" : 53,
      "variadic" : false
    }, {
      "name" : "untyped bool",
      "type" : "Basic",
      "underlying" : 54
    }, {
      "name" : "untyped nil",
      "type" : "Basic",
      "underlying" : 55
    }, {
      "name" : "func(t *runtime.maptype) *runtime.bmap",
      "params" : 57,
      "recv" : -1,
      "results" : 58,
      "type" : "Signature",
      "underlying" : 56,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "t",
        "type" : 2
      } ],
      "name" : "(t *runtime.maptype)",
      "type" : "Tuple",
      "underlying" : 57
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 35
      } ],
      "name" : "(*runtime.bmap)",
      "type" : "Tuple",
      "underlying" : 58
    }, {
      "name" : "(*runtime.bmap) func(t *runtime.maptype) *runtime.bmap",
      "params" : 57,
      "recv" : 17,
      "results" : 58,
      "type" : "Signature",
      "underlying" : 59,
      "variadic" : false
    }, {
      "name" : "func(x uint8) bool",
      "params" : 61,
      "recv" : -1,
      "results" : 14,
      "type" : "Signature",
      "underlying" : 60,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "x",
        "type" : 10
      } ],
      "name" : "(x uint8)",
      "type" : "Tuple",
      "underlying" : 61
    }, {
      "name" : "func(s string)",
      "params" : 63,
      "recv" : -1,
      "results" : 39,
      "type" : "Signature",
      "underlying" : 62,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "s",
        "type" : 64
      } ],
      "name" : "(s string)",
      "type" : "Tuple",
      "underlying" : 63
    }, {
      "name" : "string",
      "type" : "Basic",
      "underlying" : 64
    }, {
      "name" : "(*runtime.maptype) func() bool",
      "params" : 39,
      "recv" : 24,
      "results" : 14,
      "type" : "Signature",
      "underlying" : 65,
      "variadic" : false
    }, {
      "elem" : 13,
      "name" : "*unsafe.Pointer",
      "type" : "Pointer",
      "underlying" : 66
    }, {
      "name" : "func(hash uintptr) uint8",
      "params" : 68,
      "recv" : -1,
      "results" : 69,
      "type" : "Signature",
      "underlying" : 67,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "hash",
        "type" : 7
      } ],
      "name" : "(hash uintptr)",
      "type" : "Tuple",
      "underlying" : 68
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 10
      } ],
      "name" : "(uint8)",
      "type" : "Tuple",
      "underlying" : 69
    }, {
      "name" : "func(t *runtime.maptype, b *runtime.bmap) *runtime.bmap",
      "params" : 71,
      "recv" : -1,
      "results" : 58,
      "type" : "Signature",
      "underlying" : 70,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "t",
        "type" : 2
      }, {
        "name" : "b",
        "type" : 35
      } ],
      "name" : "(t *runtime.maptype, b *runtime.bmap)",
      "type" : "Tuple",
      "underlying" : 71
    }, {
      "name" : "(*runtime.hmap) func(t *runtime.maptype, b *runtime.bmap) *runtime.bmap",
      "params" : 71,
      "recv" : 35,
      "results" : 58,
      "type" : "Signature",
      "underlying" : 72,
      "variadic" : false
    }, {
      "name" : "func(typ *runtime._type, dst unsafe.Pointer, src unsafe.Pointer)",
      "params" : 74,
      "recv" : -1,
      "results" : 39,
      "type" : "Signature",
      "underlying" : 73,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "typ",
        "type" : 21
      }, {
        "name" : "dst",
        "type" : 13
      }, {
        "name" : "src",
        "type" : 13
      } ],
      "name" : "(typ *runtime._type, dst unsafe.Pointer, src unsafe.Pointer)",
      "type" : "Tuple",
      "underlying" : 74
    }, {
      "name" : "func(ptr unsafe.Pointer, n uintptr)",
      "params" : 76,
      "recv" : -1,
      "results" : 39,
      "type" : "Signature",
      "underlying" : 75,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "ptr",
        "type" : 13
      }, {
        "name" : "n",
        "type" : 7
      } ],
      "name" : "(ptr unsafe.Pointer, n uintptr)",
      "type" : "Tuple",
      "underlying" : 76
    }, {
      "name" : "func(h *runtime.hmap, t *runtime.maptype, newbit uintptr)",
      "params" : 78,
      "recv" : -1,
      "results" : 39,
      "type" : "Signature",
      "underlying" : 77,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "h",
        "type" : 26
      }, {
        "name" : "t",
        "type" : 2
      }, {
        "name" : "newbit",
        "type" : 7
      } ],
      "name" : "(h *runtime.hmap, t *runtime.maptype, newbit uintptr)",
      "type" : "Tuple",
      "underlying" : 78
    } ],
    "variables" : [ {
      "name" : "t",
      "package" : 0,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "h",
      "package" : 0,
      "type" : 26,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "oldbucket",
      "package" : 0,
      "type" : 7,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "oldbuckets",
      "package" : 0,
      "type" : 13,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "bucketsize",
      "package" : 0,
      "type" : 25,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "b",
      "package" : 0,
      "type" : 35,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "h",
      "package" : 0,
      "type" : 26,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "newbit",
      "package" : 0,
      "type" : 7,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "xy",
      "package" : 0,
      "type" : 47,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "x",
      "package" : 0,
      "type" : 51,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "b",
      "package" : 0,
      "type" : 35,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "buckets",
      "package" : 0,
      "type" : 13,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "k",
      "package" : 0,
      "type" : 13,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "e",
      "package" : 0,
      "type" : 13,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "keysize",
      "package" : 0,
      "type" : 10,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "h",
      "package" : 0,
      "type" : 26,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "y",
      "package" : 0,
      "type" : 51,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "b",
      "package" : 0,
      "type" : 35,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "k",
      "package" : 0,
      "type" : 13,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "i",
      "package" : 0,
      "type" : 29,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "e",
      "package" : 0,
      "type" : 13,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "elemsize",
      "package" : 0,
      "type" : 10,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "tophash",
      "package" : 0,
      "type" : 38,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "top",
      "package" : 0,
      "type" : 10,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "mt",
      "package" : 0,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "k2",
      "package" : 0,
      "type" : 13,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "hasher",
      "package" : 0,
      "type" : 22,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "hash0",
      "package" : 0,
      "type" : 8,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "flags",
      "package" : 0,
      "type" : 10,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "key",
      "package" : 0,
      "type" : 21,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "equal",
      "package" : 0,
      "type" : 11,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "useY",
      "package" : 0,
      "type" : 10,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "hash",
      "package" : 0,
      "type" : 7,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "dst",
      "package" : 0,
      "type" : 51,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "i",
      "package" : 0,
      "type" : 29,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "h",
      "package" : 0,
      "type" : 26,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "elem",
      "package" : 0,
      "type" : 21,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "bucket",
      "package" : 0,
      "type" : 21,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "ptrdata",
      "package" : 0,
      "type" : 7,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "b",
      "package" : 0,
      "type" : 13,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "ptr",
      "package" : 0,
      "type" : 13,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "n",
      "package" : 0,
      "type" : 7,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "nevacuate",
      "package" : 0,
      "type" : 7,
      "exported" : false,
      "embedded" : false,
      "field" : true
    } ]
  },
  "go-version" : "1.14.3"
}