{
  "usage" : {
    "file" : "plugin.go",
    "label1" : "memory-access",
    "label2" : "types",
    "line" : "85",
    "module" : "std",
    "pkg" : "runtime",
    "project" : "kubernetes/kubernetes",
    "snippet" : "(*valp)[0] = unsafe.Pointer(t)",
    "version" : "std"
  },
  "cfg" : {
    "blocks" : [ {
      "update-vars" : [ ],
      "successors" : [ 2 ],
      "in-vars" : [ 3, 4 ],
      "exit" : false,
      "out-vars" : [ 4, 3 ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[entry]",
      "entry" : true,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ ],
      "in-vars" : [ ],
      "exit" : true,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[exit]",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 4 ],
      "in-vars" : [ 3, 4 ],
      "exit" : false,
      "out-vars" : [ 5, 3, 4 ],
      "decl-vars" : [ 5 ],
      "line-start" : 11,
      "ast" : {
        "kind" : "statement",
        "target" : {
          "kind" : "decl",
          "specs" : [ {
            "comments" : [ ],
            "declared-type" : {
              "contained" : {
                "go-type" : 9,
                "kind" : "type",
                "type" : "identifier",
                "value" : {
                  "go-type" : 9,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "moduledata"
                }
              },
              "go-type" : 61,
              "kind" : "type",
              "type" : "pointer"
            },
            "kind" : "spec",
            "names" : [ {
              "ident-kind" : "NoKind",
              "kind" : "ident",
              "value" : "md"
            } ],
            "type" : "var",
            "values" : [ ]
          } ],
          "type" : "var"
        },
        "type" : "declaration"
      },
      "assign-vars" : [ ],
      "line-end" : 11,
      "code" : "var md *moduledata",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 6, 10 ],
      "in-vars" : [ 5, 7, 3 ],
      "exit" : false,
      "out-vars" : [ 5, 7, 3 ],
      "decl-vars" : [ ],
      "line-start" : 12,
      "ast" : {
        "condition" : {
          "go-type" : 62,
          "kind" : "expression",
          "left" : {
            "go-type" : 61,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "pmd",
              "variable" : 7
            }
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 63,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Nil",
              "kind" : "ident",
              "value" : "nil"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "for"
      },
      "assign-vars" : [ ],
      "line-end" : 18,
      "code" : "for pmd := firstmoduledata.next; pmd != nil; pmd = pmd.next {\n\tif pmd.bad {\n\t\tmd = nil\n\t\tcontinue\n\t}\n\tmd = pmd\n}",
      "entry" : false,
      "use-vars" : [ 7 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 3 ],
      "in-vars" : [ 4, 5, 3 ],
      "exit" : false,
      "out-vars" : [ 5, 7, 3 ],
      "decl-vars" : [ 7 ],
      "line-start" : 12,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "pmd"
          }
        } ],
        "right" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "next",
            "variable" : 6
          },
          "go-type" : 61,
          "kind" : "expression",
          "target" : {
            "go-type" : 9,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "firstmoduledata",
              "variable" : 4
            }
          },
          "type" : "selector"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 12,
      "code" : "pmd := firstmoduledata.next",
      "entry" : false,
      "use-vars" : [ 4 ]
    }, {
      "update-vars" : [ 7 ],
      "successors" : [ 3 ],
      "in-vars" : [ 5, 7, 3 ],
      "exit" : false,
      "out-vars" : [ 5, 7, 3 ],
      "decl-vars" : [ ],
      "line-start" : 12,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 61,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "pmd",
            "variable" : 7
          }
        } ],
        "right" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "next",
            "variable" : 6
          },
          "go-type" : 61,
          "kind" : "expression",
          "target" : {
            "go-type" : 61,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "pmd",
              "variable" : 7
            }
          },
          "type" : "selector"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 7 ],
      "line-end" : 12,
      "code" : "pmd = pmd.next",
      "entry" : false,
      "use-vars" : [ 7 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 7, 9 ],
      "in-vars" : [ 7, 3 ],
      "exit" : false,
      "out-vars" : [ 7, 3 ],
      "decl-vars" : [ ],
      "line-start" : 13,
      "ast" : {
        "condition" : {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "bad",
            "variable" : 8
          },
          "go-type" : 38,
          "kind" : "expression",
          "target" : {
            "go-type" : 61,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "pmd",
              "variable" : 7
            }
          },
          "type" : "selector"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 16,
      "code" : "if pmd.bad {\n\tmd = nil\n\tcontinue\n}",
      "entry" : false,
      "use-vars" : [ 7 ]
    }, {
      "update-vars" : [ 5 ],
      "successors" : [ 8 ],
      "in-vars" : [ 7, 3 ],
      "exit" : false,
      "out-vars" : [ 5, 7, 3 ],
      "decl-vars" : [ ],
      "line-start" : 14,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 61,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "md",
            "variable" : 5
          }
        } ],
        "right" : [ {
          "go-type" : 63,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Nil",
            "kind" : "ident",
            "value" : "nil"
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 5 ],
      "line-end" : 14,
      "code" : "md = nil",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 5 ],
      "in-vars" : [ 5, 7, 3 ],
      "exit" : false,
      "out-vars" : [ 5, 7, 3 ],
      "decl-vars" : [ ],
      "line-start" : 15,
      "ast" : {
        "kind" : "statement",
        "label" : null,
        "type" : "continue"
      },
      "assign-vars" : [ ],
      "line-end" : 15,
      "code" : "continue",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ 5 ],
      "successors" : [ 5 ],
      "in-vars" : [ 7, 3 ],
      "exit" : false,
      "out-vars" : [ 5, 7, 3 ],
      "decl-vars" : [ ],
      "line-start" : 17,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 61,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "md",
            "variable" : 5
          }
        } ],
        "right" : [ {
          "go-type" : 61,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "pmd",
            "variable" : 7
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 5 ],
      "line-end" : 17,
      "code" : "md = pmd",
      "entry" : false,
      "use-vars" : [ 7 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 11, 12 ],
      "in-vars" : [ 5, 3 ],
      "exit" : false,
      "out-vars" : [ 5, 3 ],
      "decl-vars" : [ ],
      "line-start" : 19,
      "ast" : {
        "condition" : {
          "go-type" : 62,
          "kind" : "expression",
          "left" : {
            "go-type" : 61,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "md",
              "variable" : 5
            }
          },
          "operator" : "==",
          "right" : {
            "go-type" : 63,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Nil",
              "kind" : "ident",
              "value" : "nil"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 21,
      "code" : "if md == nil {\n\tthrow(\"runtime: no plugin module data\")\n}",
      "entry" : false,
      "use-vars" : [ 5 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 12 ],
      "in-vars" : [ 3, 5 ],
      "exit" : false,
      "out-vars" : [ 5, 3 ],
      "decl-vars" : [ ],
      "line-start" : 20,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 3,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "runtime: no plugin module data"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 64,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 1,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "throw"
            }
          },
          "go-type" : 1,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 20,
      "code" : "throw(\"runtime: no plugin module data\")",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 13, 14 ],
      "in-vars" : [ 3, 5 ],
      "exit" : false,
      "out-vars" : [ 5, 3 ],
      "decl-vars" : [ ],
      "line-start" : 22,
      "ast" : {
        "condition" : {
          "go-type" : 62,
          "kind" : "expression",
          "left" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "pluginpath",
              "variable" : 9
            },
            "go-type" : 3,
            "kind" : "expression",
            "target" : {
              "go-type" : 61,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "md",
                "variable" : 5
              }
            },
            "type" : "selector"
          },
          "operator" : "==",
          "right" : {
            "go-type" : 3,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : ""
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 24,
      "code" : "if md.pluginpath == \"\" {\n\tthrow(\"runtime: plugin has empty pluginpath\")\n}",
      "entry" : false,
      "use-vars" : [ 5 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 14 ],
      "in-vars" : [ 5, 3 ],
      "exit" : false,
      "out-vars" : [ 5, 3 ],
      "decl-vars" : [ ],
      "line-start" : 23,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 3,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "runtime: plugin has empty pluginpath"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 64,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 1,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "throw"
            }
          },
          "go-type" : 1,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 23,
      "code" : "throw(\"runtime: plugin has empty pluginpath\")",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 15, 16 ],
      "in-vars" : [ 5, 3 ],
      "exit" : false,
      "out-vars" : [ 5, 3 ],
      "decl-vars" : [ ],
      "line-start" : 25,
      "ast" : {
        "condition" : {
          "go-type" : 62,
          "kind" : "expression",
          "left" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "typemap",
              "variable" : 10
            },
            "go-type" : 60,
            "kind" : "expression",
            "target" : {
              "go-type" : 61,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "md",
                "variable" : 5
              }
            },
            "type" : "selector"
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 63,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Nil",
              "kind" : "ident",
              "value" : "nil"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 27,
      "code" : "if md.typemap != nil {\n\treturn \"\", nil, \"plugin already loaded\"\n}",
      "entry" : false,
      "use-vars" : [ 5 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 26,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 3,
          "kind" : "constant",
          "value" : {
            "type" : "STRING",
            "value" : ""
          }
        }, {
          "go-type" : 63,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Nil",
            "kind" : "ident",
            "value" : "nil"
          }
        }, {
          "go-type" : 3,
          "kind" : "constant",
          "value" : {
            "type" : "STRING",
            "value" : "plugin already loaded"
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 26,
      "code" : "return \"\", nil, \"plugin already loaded\"",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 17, 31 ],
      "in-vars" : [ 5, 3 ],
      "exit" : false,
      "out-vars" : [ 5, 11, 3 ],
      "decl-vars" : [ 11, 20 ],
      "line-start" : 29,
      "ast" : {
        "is-assign" : false,
        "key" : {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "_"
          }
        },
        "kind" : "statement",
        "target" : {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 67,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 2,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "activeModules"
            }
          },
          "go-type" : 66,
          "kind" : "expression",
          "type" : "call"
        },
        "type" : "range",
        "value" : {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "pmd"
          }
        }
      },
      "assign-vars" : [ ],
      "line-end" : 50,
      "code" : "for _, pmd := range activeModules() {\n\tif pmd.pluginpath == md.pluginpath {\n\t\tmd.bad = true\n\t\treturn \"\", nil, \"plugin already loaded\"\n\t}\n\n\tif inRange(pmd.text, pmd.etext, md.text, md.etext) ||\n\t\tinRange(pmd.bss, pmd.ebss, md.bss, md.ebss) ||\n\t\tinRange(pmd.data, pmd.edata, md.data, md.edata) ||\n\t\tinRange(pmd.types, pmd.etypes, md.types, md.etypes) {\n\t\tprintln(\"plugin: new module data overlaps with previous moduledata\")\n\t\tprintln(\"\\tpmd.text-etext=\", hex(pmd.text), \"-\", hex(pmd.etext))\n\t\tprintln(\"\\tpmd.bss-ebss=\", hex(pmd.bss), \"-\", hex(pmd.ebss))\n\t\tprintln(\"\\tpmd.data-edata=\", hex(pmd.data), \"-\", hex(pmd.edata))\n\t\tprintln(\"\\tpmd.types-etypes=\", hex(pmd.types), \"-\", hex(pmd.etypes))\n\t\tprintln(\"\\tmd.text-etext=\", hex(md.text), \"-\", hex(md.etext))\n\t\tprintln(\"\\tmd.bss-ebss=\", hex(md.bss), \"-\", hex(md.ebss))\n\t\tprintln(\"\\tmd.data-edata=\", hex(md.data), \"-\", hex(md.edata))\n\t\tprintln(\"\\tmd.types-etypes=\", hex(md.types), \"-\", hex(md.etypes))\n\t\tthrow(\"plugin: new module data overlaps with previous moduledata\")\n\t}\n}",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 18, 20 ],
      "in-vars" : [ 5, 11, 3 ],
      "exit" : false,
      "out-vars" : [ 5, 11, 3 ],
      "decl-vars" : [ ],
      "line-start" : 30,
      "ast" : {
        "condition" : {
          "go-type" : 62,
          "kind" : "expression",
          "left" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "pluginpath",
              "variable" : 9
            },
            "go-type" : 3,
            "kind" : "expression",
            "target" : {
              "go-type" : 61,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "pmd",
                "variable" : 11
              }
            },
            "type" : "selector"
          },
          "operator" : "==",
          "right" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "pluginpath",
              "variable" : 9
            },
            "go-type" : 3,
            "kind" : "expression",
            "target" : {
              "go-type" : 61,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "md",
                "variable" : 5
              }
            },
            "type" : "selector"
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 33,
      "code" : "if pmd.pluginpath == md.pluginpath {\n\tmd.bad = true\n\treturn \"\", nil, \"plugin already loaded\"\n}",
      "entry" : false,
      "use-vars" : [ 11, 5 ]
    }, {
      "update-vars" : [ 5 ],
      "successors" : [ 19 ],
      "in-vars" : [ 5 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 31,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "bad",
            "variable" : 8
          },
          "go-type" : 38,
          "kind" : "expression",
          "target" : {
            "go-type" : 61,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "md",
              "variable" : 5
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "go-type" : 38,
          "kind" : "constant",
          "value" : {
            "type" : "BOOL",
            "value" : "true"
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 31,
      "code" : "md.bad = true",
      "entry" : false,
      "use-vars" : [ 5 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 32,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 3,
          "kind" : "constant",
          "value" : {
            "type" : "STRING",
            "value" : ""
          }
        }, {
          "go-type" : 63,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Nil",
            "kind" : "ident",
            "value" : "nil"
          }
        }, {
          "go-type" : 3,
          "kind" : "constant",
          "value" : {
            "type" : "STRING",
            "value" : "plugin already loaded"
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 32,
      "code" : "return \"\", nil, \"plugin already loaded\"",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 21, 16 ],
      "in-vars" : [ 5, 11, 3 ],
      "exit" : false,
      "out-vars" : [ 5, 11, 3 ],
      "decl-vars" : [ ],
      "line-start" : 35,
      "ast" : {
        "condition" : {
          "go-type" : 38,
          "kind" : "expression",
          "left" : {
            "go-type" : 38,
            "kind" : "expression",
            "left" : {
              "go-type" : 38,
              "kind" : "expression",
              "left" : {
                "arguments" : [ {
                  "field" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "text",
                    "variable" : 12
                  },
                  "go-type" : 8,
                  "kind" : "expression",
                  "target" : {
                    "go-type" : 61,
                    "kind" : "expression",
                    "type" : "identifier",
                    "value" : {
                      "ident-kind" : "Var",
                      "kind" : "ident",
                      "value" : "pmd",
                      "variable" : 11
                    }
                  },
                  "type" : "selector"
                }, {
                  "field" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "etext",
                    "variable" : 13
                  },
                  "go-type" : 8,
                  "kind" : "expression",
                  "target" : {
                    "go-type" : 61,
                    "kind" : "expression",
                    "type" : "identifier",
                    "value" : {
                      "ident-kind" : "Var",
                      "kind" : "ident",
                      "value" : "pmd",
                      "variable" : 11
                    }
                  },
                  "type" : "selector"
                }, {
                  "field" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "text",
                    "variable" : 12
                  },
                  "go-type" : 8,
                  "kind" : "expression",
                  "target" : {
                    "go-type" : 61,
                    "kind" : "expression",
                    "type" : "identifier",
                    "value" : {
                      "ident-kind" : "Var",
                      "kind" : "ident",
                      "value" : "md",
                      "variable" : 5
                    }
                  },
                  "type" : "selector"
                }, {
                  "field" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "etext",
                    "variable" : 13
                  },
                  "go-type" : 8,
                  "kind" : "expression",
                  "target" : {
                    "go-type" : 61,
                    "kind" : "expression",
                    "type" : "identifier",
                    "value" : {
                      "ident-kind" : "Var",
                      "kind" : "ident",
                      "value" : "md",
                      "variable" : 5
                    }
                  },
                  "type" : "selector"
                } ],
                "ellipsis" : false,
                "function" : {
                  "go-type" : 69,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "function" : 3,
                    "ident-kind" : "Func",
                    "kind" : "ident",
                    "value" : "inRange"
                  }
                },
                "go-type" : 38,
                "kind" : "expression",
                "type" : "call"
              },
              "operator" : "||",
              "right" : {
                "arguments" : [ {
                  "field" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "bss",
                    "variable" : 14
                  },
                  "go-type" : 8,
                  "kind" : "expression",
                  "target" : {
                    "go-type" : 61,
                    "kind" : "expression",
                    "type" : "identifier",
                    "value" : {
                      "ident-kind" : "Var",
                      "kind" : "ident",
                      "value" : "pmd",
                      "variable" : 11
                    }
                  },
                  "type" : "selector"
                }, {
                  "field" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "ebss",
                    "variable" : 15
                  },
                  "go-type" : 8,
                  "kind" : "expression",
                  "target" : {
                    "go-type" : 61,
                    "kind" : "expression",
                    "type" : "identifier",
                    "value" : {
                      "ident-kind" : "Var",
                      "kind" : "ident",
                      "value" : "pmd",
                      "variable" : 11
                    }
                  },
                  "type" : "selector"
                }, {
                  "field" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "bss",
                    "variable" : 14
                  },
                  "go-type" : 8,
                  "kind" : "expression",
                  "target" : {
                    "go-type" : 61,
                    "kind" : "expression",
                    "type" : "identifier",
                    "value" : {
                      "ident-kind" : "Var",
                      "kind" : "ident",
                      "value" : "md",
                      "variable" : 5
                    }
                  },
                  "type" : "selector"
                }, {
                  "field" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "ebss",
                    "variable" : 15
                  },
                  "go-type" : 8,
                  "kind" : "expression",
                  "target" : {
                    "go-type" : 61,
                    "kind" : "expression",
                    "type" : "identifier",
                    "value" : {
                      "ident-kind" : "Var",
                      "kind" : "ident",
                      "value" : "md",
                      "variable" : 5
                    }
                  },
                  "type" : "selector"
                } ],
                "ellipsis" : false,
                "function" : {
                  "go-type" : 69,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "function" : 3,
                    "ident-kind" : "Func",
                    "kind" : "ident",
                    "value" : "inRange"
                  }
                },
                "go-type" : 38,
                "kind" : "expression",
                "type" : "call"
              },
              "type" : "binary"
            },
            "operator" : "||",
            "right" : {
              "arguments" : [ {
                "field" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "data",
                  "variable" : 16
                },
                "go-type" : 8,
                "kind" : "expression",
                "target" : {
                  "go-type" : 61,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "pmd",
                    "variable" : 11
                  }
                },
                "type" : "selector"
              }, {
                "field" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "edata",
                  "variable" : 17
                },
                "go-type" : 8,
                "kind" : "expression",
                "target" : {
                  "go-type" : 61,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "pmd",
                    "variable" : 11
                  }
                },
                "type" : "selector"
              }, {
                "field" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "data",
                  "variable" : 16
                },
                "go-type" : 8,
                "kind" : "expression",
                "target" : {
                  "go-type" : 61,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "md",
                    "variable" : 5
                  }
                },
                "type" : "selector"
              }, {
                "field" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "edata",
                  "variable" : 17
                },
                "go-type" : 8,
                "kind" : "expression",
                "target" : {
                  "go-type" : 61,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "md",
                    "variable" : 5
                  }
                },
                "type" : "selector"
              } ],
              "ellipsis" : false,
              "function" : {
                "go-type" : 69,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "function" : 3,
                  "ident-kind" : "Func",
                  "kind" : "ident",
                  "value" : "inRange"
                }
              },
              "go-type" : 38,
              "kind" : "expression",
              "type" : "call"
            },
            "type" : "binary"
          },
          "operator" : "||",
          "right" : {
            "arguments" : [ {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "types",
                "variable" : 18
              },
              "go-type" : 8,
              "kind" : "expression",
              "target" : {
                "go-type" : 61,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "pmd",
                  "variable" : 11
                }
              },
              "type" : "selector"
            }, {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "etypes",
                "variable" : 19
              },
              "go-type" : 8,
              "kind" : "expression",
              "target" : {
                "go-type" : 61,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "pmd",
                  "variable" : 11
                }
              },
              "type" : "selector"
            }, {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "types",
                "variable" : 18
              },
              "go-type" : 8,
              "kind" : "expression",
              "target" : {
                "go-type" : 61,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "md",
                  "variable" : 5
                }
              },
              "type" : "selector"
            }, {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "etypes",
                "variable" : 19
              },
              "go-type" : 8,
              "kind" : "expression",
              "target" : {
                "go-type" : 61,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "md",
                  "variable" : 5
                }
              },
              "type" : "selector"
            } ],
            "ellipsis" : false,
            "function" : {
              "go-type" : 69,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "function" : 3,
                "ident-kind" : "Func",
                "kind" : "ident",
                "value" : "inRange"
              }
            },
            "go-type" : 38,
            "kind" : "expression",
            "type" : "call"
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 49,
      "code" : "if inRange(pmd.text, pmd.etext, md.text, md.etext) ||\n\tinRange(pmd.bss, pmd.ebss, md.bss, md.ebss) ||\n\tinRange(pmd.data, pmd.edata, md.data, md.edata) ||\n\tinRange(pmd.types, pmd.etypes, md.types, md.etypes) {\n\tprintln(\"plugin: new module data overlaps with previous moduledata\")\n\tprintln(\"\\tpmd.text-etext=\", hex(pmd.text), \"-\", hex(pmd.etext))\n\tprintln(\"\\tpmd.bss-ebss=\", hex(pmd.bss), \"-\", hex(pmd.ebss))\n\tprintln(\"\\tpmd.data-edata=\", hex(pmd.data), \"-\", hex(pmd.edata))\n\tprintln(\"\\tpmd.types-etypes=\", hex(pmd.types), \"-\", hex(pmd.etypes))\n\tprintln(\"\\tmd.text-etext=\", hex(md.text), \"-\", hex(md.etext))\n\tprintln(\"\\tmd.bss-ebss=\", hex(md.bss), \"-\", hex(md.ebss))\n\tprintln(\"\\tmd.data-edata=\", hex(md.data), \"-\", hex(md.edata))\n\tprintln(\"\\tmd.types-etypes=\", hex(md.types), \"-\", hex(md.etypes))\n\tthrow(\"plugin: new module data overlaps with previous moduledata\")\n}",
      "entry" : false,
      "use-vars" : [ 11, 5 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 22 ],
      "in-vars" : [ 5, 11, 3 ],
      "exit" : false,
      "out-vars" : [ 3, 5, 11 ],
      "decl-vars" : [ ],
      "line-start" : 39,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 3,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "plugin: new module data overlaps with previous moduledata"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 71,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Builtin",
              "kind" : "ident",
              "value" : "println"
            }
          },
          "go-type" : 1,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 39,
      "code" : "println(\"plugin: new module data overlaps with previous moduledata\")",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 23 ],
      "in-vars" : [ 5, 11, 3 ],
      "exit" : false,
      "out-vars" : [ 3, 5, 11 ],
      "decl-vars" : [ ],
      "line-start" : 40,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 3,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "\tpmd.text-etext="
            }
          }, {
            "coerced-to" : {
              "go-type" : 75,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 75,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "hex"
              }
            },
            "go-type" : 75,
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "text",
                "variable" : 12
              },
              "go-type" : 8,
              "kind" : "expression",
              "target" : {
                "go-type" : 61,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "pmd",
                  "variable" : 11
                }
              },
              "type" : "selector"
            },
            "type" : "cast"
          }, {
            "go-type" : 3,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "-"
            }
          }, {
            "coerced-to" : {
              "go-type" : 75,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 75,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "hex"
              }
            },
            "go-type" : 75,
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "etext",
                "variable" : 13
              },
              "go-type" : 8,
              "kind" : "expression",
              "target" : {
                "go-type" : 61,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "pmd",
                  "variable" : 11
                }
              },
              "type" : "selector"
            },
            "type" : "cast"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 73,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Builtin",
              "kind" : "ident",
              "value" : "println"
            }
          },
          "go-type" : 1,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 40,
      "code" : "println(\"\\tpmd.text-etext=\", hex(pmd.text), \"-\", hex(pmd.etext))",
      "entry" : false,
      "use-vars" : [ 11 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 24 ],
      "in-vars" : [ 5, 11, 3 ],
      "exit" : false,
      "out-vars" : [ 5, 11, 3 ],
      "decl-vars" : [ ],
      "line-start" : 41,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 3,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "\tpmd.bss-ebss="
            }
          }, {
            "coerced-to" : {
              "go-type" : 75,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 75,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "hex"
              }
            },
            "go-type" : 75,
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "bss",
                "variable" : 14
              },
              "go-type" : 8,
              "kind" : "expression",
              "target" : {
                "go-type" : 61,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "pmd",
                  "variable" : 11
                }
              },
              "type" : "selector"
            },
            "type" : "cast"
          }, {
            "go-type" : 3,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "-"
            }
          }, {
            "coerced-to" : {
              "go-type" : 75,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 75,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "hex"
              }
            },
            "go-type" : 75,
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "ebss",
                "variable" : 15
              },
              "go-type" : 8,
              "kind" : "expression",
              "target" : {
                "go-type" : 61,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "pmd",
                  "variable" : 11
                }
              },
              "type" : "selector"
            },
            "type" : "cast"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 73,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Builtin",
              "kind" : "ident",
              "value" : "println"
            }
          },
          "go-type" : 1,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 41,
      "code" : "println(\"\\tpmd.bss-ebss=\", hex(pmd.bss), \"-\", hex(pmd.ebss))",
      "entry" : false,
      "use-vars" : [ 11 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 25 ],
      "in-vars" : [ 5, 11, 3 ],
      "exit" : false,
      "out-vars" : [ 5, 11, 3 ],
      "decl-vars" : [ ],
      "line-start" : 42,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 3,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "\tpmd.data-edata="
            }
          }, {
            "coerced-to" : {
              "go-type" : 75,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 75,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "hex"
              }
            },
            "go-type" : 75,
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "data",
                "variable" : 16
              },
              "go-type" : 8,
              "kind" : "expression",
              "target" : {
                "go-type" : 61,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "pmd",
                  "variable" : 11
                }
              },
              "type" : "selector"
            },
            "type" : "cast"
          }, {
            "go-type" : 3,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "-"
            }
          }, {
            "coerced-to" : {
              "go-type" : 75,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 75,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "hex"
              }
            },
            "go-type" : 75,
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "edata",
                "variable" : 17
              },
              "go-type" : 8,
              "kind" : "expression",
              "target" : {
                "go-type" : 61,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "pmd",
                  "variable" : 11
                }
              },
              "type" : "selector"
            },
            "type" : "cast"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 73,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Builtin",
              "kind" : "ident",
              "value" : "println"
            }
          },
          "go-type" : 1,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 42,
      "code" : "println(\"\\tpmd.data-edata=\", hex(pmd.data), \"-\", hex(pmd.edata))",
      "entry" : false,
      "use-vars" : [ 11 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 26 ],
      "in-vars" : [ 3, 5, 11 ],
      "exit" : false,
      "out-vars" : [ 5, 3 ],
      "decl-vars" : [ ],
      "line-start" : 43,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 3,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "\tpmd.types-etypes="
            }
          }, {
            "coerced-to" : {
              "go-type" : 75,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 75,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "hex"
              }
            },
            "go-type" : 75,
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "types",
                "variable" : 18
              },
              "go-type" : 8,
              "kind" : "expression",
              "target" : {
                "go-type" : 61,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "pmd",
                  "variable" : 11
                }
              },
              "type" : "selector"
            },
            "type" : "cast"
          }, {
            "go-type" : 3,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "-"
            }
          }, {
            "coerced-to" : {
              "go-type" : 75,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 75,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "hex"
              }
            },
            "go-type" : 75,
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "etypes",
                "variable" : 19
              },
              "go-type" : 8,
              "kind" : "expression",
              "target" : {
                "go-type" : 61,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "pmd",
                  "variable" : 11
                }
              },
              "type" : "selector"
            },
            "type" : "cast"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 73,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Builtin",
              "kind" : "ident",
              "value" : "println"
            }
          },
          "go-type" : 1,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 43,
      "code" : "println(\"\\tpmd.types-etypes=\", hex(pmd.types), \"-\", hex(pmd.etypes))",
      "entry" : false,
      "use-vars" : [ 11 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 27 ],
      "in-vars" : [ 5, 3 ],
      "exit" : false,
      "out-vars" : [ 5, 3 ],
      "decl-vars" : [ ],
      "line-start" : 44,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 3,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "\tmd.text-etext="
            }
          }, {
            "coerced-to" : {
              "go-type" : 75,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 75,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "hex"
              }
            },
            "go-type" : 75,
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "text",
                "variable" : 12
              },
              "go-type" : 8,
              "kind" : "expression",
              "target" : {
                "go-type" : 61,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "md",
                  "variable" : 5
                }
              },
              "type" : "selector"
            },
            "type" : "cast"
          }, {
            "go-type" : 3,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "-"
            }
          }, {
            "coerced-to" : {
              "go-type" : 75,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 75,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "hex"
              }
            },
            "go-type" : 75,
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "etext",
                "variable" : 13
              },
              "go-type" : 8,
              "kind" : "expression",
              "target" : {
                "go-type" : 61,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "md",
                  "variable" : 5
                }
              },
              "type" : "selector"
            },
            "type" : "cast"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 73,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Builtin",
              "kind" : "ident",
              "value" : "println"
            }
          },
          "go-type" : 1,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 44,
      "code" : "println(\"\\tmd.text-etext=\", hex(md.text), \"-\", hex(md.etext))",
      "entry" : false,
      "use-vars" : [ 5 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 28 ],
      "in-vars" : [ 5, 3 ],
      "exit" : false,
      "out-vars" : [ 3, 5 ],
      "decl-vars" : [ ],
      "line-start" : 45,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 3,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "\tmd.bss-ebss="
            }
          }, {
            "coerced-to" : {
              "go-type" : 75,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 75,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "hex"
              }
            },
            "go-type" : 75,
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "bss",
                "variable" : 14
              },
              "go-type" : 8,
              "kind" : "expression",
              "target" : {
                "go-type" : 61,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "md",
                  "variable" : 5
                }
              },
              "type" : "selector"
            },
            "type" : "cast"
          }, {
            "go-type" : 3,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "-"
            }
          }, {
            "coerced-to" : {
              "go-type" : 75,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 75,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "hex"
              }
            },
            "go-type" : 75,
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "ebss",
                "variable" : 15
              },
              "go-type" : 8,
              "kind" : "expression",
              "target" : {
                "go-type" : 61,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "md",
                  "variable" : 5
                }
              },
              "type" : "selector"
            },
            "type" : "cast"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 73,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Builtin",
              "kind" : "ident",
              "value" : "println"
            }
          },
          "go-type" : 1,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 45,
      "code" : "println(\"\\tmd.bss-ebss=\", hex(md.bss), \"-\", hex(md.ebss))",
      "entry" : false,
      "use-vars" : [ 5 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 29 ],
      "in-vars" : [ 5, 3 ],
      "exit" : false,
      "out-vars" : [ 5, 3 ],
      "decl-vars" : [ ],
      "line-start" : 46,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 3,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "\tmd.data-edata="
            }
          }, {
            "coerced-to" : {
              "go-type" : 75,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 75,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "hex"
              }
            },
            "go-type" : 75,
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "data",
                "variable" : 16
              },
              "go-type" : 8,
              "kind" : "expression",
              "target" : {
                "go-type" : 61,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "md",
                  "variable" : 5
                }
              },
              "type" : "selector"
            },
            "type" : "cast"
          }, {
            "go-type" : 3,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "-"
            }
          }, {
            "coerced-to" : {
              "go-type" : 75,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 75,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "hex"
              }
            },
            "go-type" : 75,
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "edata",
                "variable" : 17
              },
              "go-type" : 8,
              "kind" : "expression",
              "target" : {
                "go-type" : 61,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "md",
                  "variable" : 5
                }
              },
              "type" : "selector"
            },
            "type" : "cast"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 73,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Builtin",
              "kind" : "ident",
              "value" : "println"
            }
          },
          "go-type" : 1,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 46,
      "code" : "println(\"\\tmd.data-edata=\", hex(md.data), \"-\", hex(md.edata))",
      "entry" : false,
      "use-vars" : [ 5 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 30 ],
      "in-vars" : [ 5, 3 ],
      "exit" : false,
      "out-vars" : [ 5, 3 ],
      "decl-vars" : [ ],
      "line-start" : 47,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 3,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "\tmd.types-etypes="
            }
          }, {
            "coerced-to" : {
              "go-type" : 75,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 75,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "hex"
              }
            },
            "go-type" : 75,
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "types",
                "variable" : 18
              },
              "go-type" : 8,
              "kind" : "expression",
              "target" : {
                "go-type" : 61,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "md",
                  "variable" : 5
                }
              },
              "type" : "selector"
            },
            "type" : "cast"
          }, {
            "go-type" : 3,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "-"
            }
          }, {
            "coerced-to" : {
              "go-type" : 75,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 75,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "hex"
              }
            },
            "go-type" : 75,
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "etypes",
                "variable" : 19
              },
              "go-type" : 8,
              "kind" : "expression",
              "target" : {
                "go-type" : 61,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "md",
                  "variable" : 5
                }
              },
              "type" : "selector"
            },
            "type" : "cast"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 73,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Builtin",
              "kind" : "ident",
              "value" : "println"
            }
          },
          "go-type" : 1,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 47,
      "code" : "println(\"\\tmd.types-etypes=\", hex(md.types), \"-\", hex(md.etypes))",
      "entry" : false,
      "use-vars" : [ 5 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 16 ],
      "in-vars" : [ 5, 3 ],
      "exit" : false,
      "out-vars" : [ 5, 3 ],
      "decl-vars" : [ ],
      "line-start" : 48,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 3,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "plugin: new module data overlaps with previous moduledata"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 64,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 1,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "throw"
            }
          },
          "go-type" : 1,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 48,
      "code" : "throw(\"plugin: new module data overlaps with previous moduledata\")",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 32, 35 ],
      "in-vars" : [ 5, 3 ],
      "exit" : false,
      "out-vars" : [ 3, 5, 22 ],
      "decl-vars" : [ 26, 22 ],
      "line-start" : 51,
      "ast" : {
        "is-assign" : false,
        "key" : {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "_"
          }
        },
        "kind" : "statement",
        "target" : {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "pkghashes",
            "variable" : 21
          },
          "go-type" : 53,
          "kind" : "expression",
          "target" : {
            "go-type" : 61,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "md",
              "variable" : 5
            }
          },
          "type" : "selector"
        },
        "type" : "range",
        "value" : {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "pkghash"
          }
        }
      },
      "assign-vars" : [ ],
      "line-end" : 56,
      "code" : "for _, pkghash := range md.pkghashes {\n\tif pkghash.linktimehash != *pkghash.runtimehash {\n\t\tmd.bad = true\n\t\treturn \"\", nil, \"plugin was built with a different version of package \" + pkghash.modulename\n\t}\n}",
      "entry" : false,
      "use-vars" : [ 5 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 33, 31 ],
      "in-vars" : [ 5, 22, 3 ],
      "exit" : false,
      "out-vars" : [ 5, 22, 3 ],
      "decl-vars" : [ ],
      "line-start" : 52,
      "ast" : {
        "condition" : {
          "go-type" : 62,
          "kind" : "expression",
          "left" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "linktimehash",
              "variable" : 23
            },
            "go-type" : 3,
            "kind" : "expression",
            "target" : {
              "go-type" : 54,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "pkghash",
                "variable" : 22
              }
            },
            "type" : "selector"
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 3,
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "runtimehash",
                "variable" : 24
              },
              "go-type" : 56,
              "kind" : "expression",
              "target" : {
                "go-type" : 54,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "pkghash",
                  "variable" : 22
                }
              },
              "type" : "selector"
            },
            "type" : "star"
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 55,
      "code" : "if pkghash.linktimehash != *pkghash.runtimehash {\n\tmd.bad = true\n\treturn \"\", nil, \"plugin was built with a different version of package \" + pkghash.modulename\n}",
      "entry" : false,
      "use-vars" : [ 22 ]
    }, {
      "update-vars" : [ 5 ],
      "successors" : [ 34 ],
      "in-vars" : [ 5, 22 ],
      "exit" : false,
      "out-vars" : [ 22 ],
      "decl-vars" : [ ],
      "line-start" : 53,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "bad",
            "variable" : 8
          },
          "go-type" : 38,
          "kind" : "expression",
          "target" : {
            "go-type" : 61,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "md",
              "variable" : 5
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "go-type" : 38,
          "kind" : "constant",
          "value" : {
            "type" : "BOOL",
            "value" : "true"
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 53,
      "code" : "md.bad = true",
      "entry" : false,
      "use-vars" : [ 5 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 22 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 54,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 3,
          "kind" : "constant",
          "value" : {
            "type" : "STRING",
            "value" : ""
          }
        }, {
          "go-type" : 63,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Nil",
            "kind" : "ident",
            "value" : "nil"
          }
        }, {
          "go-type" : 3,
          "kind" : "expression",
          "left" : {
            "go-type" : 3,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "plugin was built with a different version of package "
            }
          },
          "operator" : "+",
          "right" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "modulename",
              "variable" : 25
            },
            "go-type" : 3,
            "kind" : "expression",
            "target" : {
              "go-type" : 54,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "pkghash",
                "variable" : 22
              }
            },
            "type" : "selector"
          },
          "type" : "binary"
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 54,
      "code" : "return \"\", nil, \"plugin was built with a different version of package \" + pkghash.modulename",
      "entry" : false,
      "use-vars" : [ 22 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 36 ],
      "in-vars" : [ 5, 3 ],
      "exit" : false,
      "out-vars" : [ 5, 3 ],
      "decl-vars" : [ ],
      "line-start" : 59,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 78,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 4,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "modulesinit"
            }
          },
          "go-type" : 1,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 59,
      "code" : "modulesinit()",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 37 ],
      "in-vars" : [ 5, 3 ],
      "exit" : false,
      "out-vars" : [ 3, 5 ],
      "decl-vars" : [ ],
      "line-start" : 60,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 78,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 5,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "typelinksinit"
            }
          },
          "go-type" : 1,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 60,
      "code" : "typelinksinit()",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 38 ],
      "in-vars" : [ 5, 3 ],
      "exit" : false,
      "out-vars" : [ 5, 3 ],
      "decl-vars" : [ ],
      "line-start" : 62,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 61,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "md",
              "variable" : 5
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 79,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 6,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "pluginftabverify"
            }
          },
          "go-type" : 1,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 62,
      "code" : "pluginftabverify(md)",
      "entry" : false,
      "use-vars" : [ 5 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 39 ],
      "in-vars" : [ 5, 3 ],
      "exit" : false,
      "out-vars" : [ 5, 3 ],
      "decl-vars" : [ ],
      "line-start" : 63,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 61,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "md",
              "variable" : 5
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 81,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 7,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "moduledataverify1"
            }
          },
          "go-type" : 1,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 63,
      "code" : "moduledataverify1(md)",
      "entry" : false,
      "use-vars" : [ 5 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 40 ],
      "in-vars" : [ 5, 3 ],
      "exit" : false,
      "out-vars" : [ 5, 3 ],
      "decl-vars" : [ ],
      "line-start" : 65,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 85,
            "kind" : "expression",
            "operator" : "&",
            "target" : {
              "go-type" : 6,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "itabLock",
                "variable" : 3
              }
            },
            "type" : "unary"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 83,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 8,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "lock"
            }
          },
          "go-type" : 1,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 65,
      "code" : "lock(&itabLock)",
      "entry" : false,
      "use-vars" : [ 3 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 41, 42 ],
      "in-vars" : [ 5, 3 ],
      "exit" : false,
      "out-vars" : [ 5, 3, 28 ],
      "decl-vars" : [ 28, 29 ],
      "line-start" : 66,
      "ast" : {
        "is-assign" : false,
        "key" : {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "_"
          }
        },
        "kind" : "statement",
        "target" : {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "itablinks",
            "variable" : 27
          },
          "go-type" : 23,
          "kind" : "expression",
          "target" : {
            "go-type" : 61,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "md",
              "variable" : 5
            }
          },
          "type" : "selector"
        },
        "type" : "range",
        "value" : {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "i"
          }
        }
      },
      "assign-vars" : [ ],
      "line-end" : 68,
      "code" : "for _, i := range md.itablinks {\n\titabAdd(i)\n}",
      "entry" : false,
      "use-vars" : [ 5 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 40 ],
      "in-vars" : [ 5, 3, 28 ],
      "exit" : false,
      "out-vars" : [ 5, 3 ],
      "decl-vars" : [ ],
      "line-start" : 67,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 24,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "i",
              "variable" : 28
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 86,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 9,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "itabAdd"
            }
          },
          "go-type" : 1,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 67,
      "code" : "itabAdd(i)",
      "entry" : false,
      "use-vars" : [ 28 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 43 ],
      "in-vars" : [ 5, 3 ],
      "exit" : false,
      "out-vars" : [ 5 ],
      "decl-vars" : [ ],
      "line-start" : 69,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 85,
            "kind" : "expression",
            "operator" : "&",
            "target" : {
              "go-type" : 6,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "itabLock",
                "variable" : 3
              }
            },
            "type" : "unary"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 83,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 10,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "unlock"
            }
          },
          "go-type" : 1,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 69,
      "code" : "unlock(&itabLock)",
      "entry" : false,
      "use-vars" : [ 3 ]
    }, {
      "update-vars" : [ 1 ],
      "successors" : [ 44 ],
      "in-vars" : [ 5 ],
      "exit" : false,
      "out-vars" : [ 5, 1 ],
      "decl-vars" : [ ],
      "line-start" : 79,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 4,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "syms",
            "variable" : 1
          }
        } ],
        "right" : [ {
          "argument" : {
            "go-type" : 4,
            "key" : {
              "go-type" : 3,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 3,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "string"
              }
            },
            "kind" : "type",
            "type" : "map",
            "value" : {
              "go-type" : 5,
              "incomplete" : false,
              "kind" : "type",
              "methods" : [ ],
              "type" : "interface"
            }
          },
          "go-type" : 4,
          "kind" : "expression",
          "rest" : [ {
            "arguments" : [ {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "ptab",
                "variable" : 30
              },
              "go-type" : 50,
              "kind" : "expression",
              "target" : {
                "go-type" : 61,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "md",
                  "variable" : 5
                }
              },
              "type" : "selector"
            } ],
            "ellipsis" : false,
            "function" : {
              "go-type" : 88,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Builtin",
                "kind" : "ident",
                "value" : "len"
              }
            },
            "go-type" : 77,
            "kind" : "expression",
            "type" : "call"
          } ],
          "type" : "make"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 1 ],
      "line-end" : 79,
      "code" : "syms = make(map[string]interface{}, len(md.ptab))",
      "entry" : false,
      "use-vars" : [ 5 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 45, 54 ],
      "in-vars" : [ 5, 1 ],
      "exit" : false,
      "out-vars" : [ 5, 31, 1 ],
      "decl-vars" : [ 31, 42 ],
      "line-start" : 80,
      "ast" : {
        "is-assign" : false,
        "key" : {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "_"
          }
        },
        "kind" : "statement",
        "target" : {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "ptab",
            "variable" : 30
          },
          "go-type" : 50,
          "kind" : "expression",
          "target" : {
            "go-type" : 61,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "md",
              "variable" : 5
            }
          },
          "type" : "selector"
        },
        "type" : "range",
        "value" : {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "ptab"
          }
        }
      },
      "assign-vars" : [ ],
      "line-end" : 92,
      "code" : "for _, ptab := range md.ptab {\n\tsymName := resolveNameOff(unsafe.Pointer(md.types), ptab.name)\n\tt := (*_type)(unsafe.Pointer(md.types)).typeOff(ptab.typ)\n\tvar val interface{}\n\tvalp := (*[2]unsafe.Pointer)(unsafe.Pointer(&val))\n\t(*valp)[0] = unsafe.Pointer(t)\n\n\tname := symName.name()\n\tif t.kind&kindMask == kindFunc {\n\t\tname = \".\" + name\n\t}\n\tsyms[name] = val\n}",
      "entry" : false,
      "use-vars" : [ 5 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 46 ],
      "in-vars" : [ 5, 31, 1 ],
      "exit" : false,
      "out-vars" : [ 5, 31, 1, 38 ],
      "decl-vars" : [ 38 ],
      "line-start" : 81,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "symName"
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "coerced-to" : {
              "go-type" : 36,
              "kind" : "type",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 1,
                "value" : "unsafe"
              },
              "type" : "identifier",
              "value" : {
                "go-type" : 36,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "Pointer"
              }
            },
            "go-type" : 36,
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "types",
                "variable" : 18
              },
              "go-type" : 8,
              "kind" : "expression",
              "target" : {
                "go-type" : 61,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "md",
                  "variable" : 5
                }
              },
              "type" : "selector"
            },
            "type" : "cast"
          }, {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "name",
              "variable" : 32
            },
            "go-type" : 40,
            "kind" : "expression",
            "target" : {
              "go-type" : 51,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "ptab",
                "variable" : 31
              }
            },
            "type" : "selector"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 91,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 11,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "resolveNameOff"
            }
          },
          "go-type" : 42,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 81,
      "code" : "symName := resolveNameOff(unsafe.Pointer(md.types), ptab.name)",
      "entry" : false,
      "use-vars" : [ 31, 5 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 47 ],
      "in-vars" : [ 5, 31, 1, 38 ],
      "exit" : false,
      "out-vars" : [ 37, 5, 1, 38 ],
      "decl-vars" : [ 37 ],
      "line-start" : 82,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "t"
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "typ",
              "variable" : 34
            },
            "go-type" : 41,
            "kind" : "expression",
            "target" : {
              "go-type" : 51,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "ptab",
                "variable" : 31
              }
            },
            "type" : "selector"
          } ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "function" : 12,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "typeOff"
            },
            "go-type" : 94,
            "kind" : "expression",
            "target" : {
              "coerced-to" : {
                "contained" : {
                  "go-type" : 30,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 30,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "_type"
                  }
                },
                "go-type" : 47,
                "kind" : "type",
                "type" : "pointer"
              },
              "go-type" : 47,
              "kind" : "expression",
              "target" : {
                "coerced-to" : {
                  "go-type" : 36,
                  "kind" : "type",
                  "qualifier" : {
                    "ident-kind" : "PkgName",
                    "kind" : "ident",
                    "package" : 1,
                    "value" : "unsafe"
                  },
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 36,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "Pointer"
                  }
                },
                "go-type" : 36,
                "kind" : "expression",
                "target" : {
                  "field" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "types",
                    "variable" : 18
                  },
                  "go-type" : 8,
                  "kind" : "expression",
                  "target" : {
                    "go-type" : 61,
                    "kind" : "expression",
                    "type" : "identifier",
                    "value" : {
                      "ident-kind" : "Var",
                      "kind" : "ident",
                      "value" : "md",
                      "variable" : 5
                    }
                  },
                  "type" : "selector"
                },
                "type" : "cast"
              },
              "type" : "cast"
            },
            "type" : "selector"
          },
          "go-type" : 47,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 82,
      "code" : "t := (*_type)(unsafe.Pointer(md.types)).typeOff(ptab.typ)",
      "entry" : false,
      "use-vars" : [ 31, 5 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 48 ],
      "in-vars" : [ 5, 1, 38, 37 ],
      "exit" : false,
      "out-vars" : [ 5, 1, 38, 37, 35 ],
      "decl-vars" : [ 35 ],
      "line-start" : 83,
      "ast" : {
        "kind" : "statement",
        "target" : {
          "kind" : "decl",
          "specs" : [ {
            "comments" : [ ],
            "declared-type" : {
              "go-type" : 5,
              "incomplete" : false,
              "kind" : "type",
              "methods" : [ ],
              "type" : "interface"
            },
            "kind" : "spec",
            "names" : [ {
              "ident-kind" : "NoKind",
              "kind" : "ident",
              "value" : "val"
            } ],
            "type" : "var",
            "values" : [ ]
          } ],
          "type" : "var"
        },
        "type" : "declaration"
      },
      "assign-vars" : [ ],
      "line-end" : 83,
      "code" : "var val interface{}",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 49 ],
      "in-vars" : [ 35, 5, 1, 38, 37 ],
      "exit" : false,
      "out-vars" : [ 37, 35, 36, 5, 1, 38 ],
      "decl-vars" : [ 36 ],
      "line-start" : 84,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "valp"
          }
        } ],
        "right" : [ {
          "coerced-to" : {
            "contained" : {
              "element" : {
                "go-type" : 36,
                "kind" : "type",
                "qualifier" : {
                  "ident-kind" : "PkgName",
                  "kind" : "ident",
                  "package" : 1,
                  "value" : "unsafe"
                },
                "type" : "identifier",
                "value" : {
                  "go-type" : 36,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "Pointer"
                }
              },
              "go-type" : 99,
              "kind" : "type",
              "length" : {
                "go-type" : 100,
                "kind" : "constant",
                "value" : {
                  "type" : "INT",
                  "value" : "2"
                }
              },
              "type" : "array"
            },
            "go-type" : 98,
            "kind" : "type",
            "type" : "pointer"
          },
          "go-type" : 98,
          "kind" : "expression",
          "target" : {
            "coerced-to" : {
              "go-type" : 36,
              "kind" : "type",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 1,
                "value" : "unsafe"
              },
              "type" : "identifier",
              "value" : {
                "go-type" : 36,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "Pointer"
              }
            },
            "go-type" : 36,
            "kind" : "expression",
            "target" : {
              "go-type" : 101,
              "kind" : "expression",
              "operator" : "&",
              "target" : {
                "go-type" : 5,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "val",
                  "variable" : 35
                }
              },
              "type" : "unary"
            },
            "type" : "cast"
          },
          "type" : "cast"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 84,
      "code" : "valp := (*[2]unsafe.Pointer)(unsafe.Pointer(&val))",
      "entry" : false,
      "use-vars" : [ 35 ]
    }, {
      "update-vars" : [ 36 ],
      "successors" : [ 50 ],
      "in-vars" : [ 5, 1, 38, 37, 35, 36 ],
      "exit" : false,
      "out-vars" : [ 37, 35, 5, 1, 38 ],
      "decl-vars" : [ ],
      "line-start" : 85,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 36,
          "index" : {
            "go-type" : 77,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "kind" : "expression",
          "target" : {
            "go-type" : 99,
            "kind" : "expression",
            "target" : {
              "go-type" : 99,
              "kind" : "expression",
              "target" : {
                "go-type" : 98,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "valp",
                  "variable" : 36
                }
              },
              "type" : "star"
            },
            "type" : "paren"
          },
          "type" : "index"
        } ],
        "right" : [ {
          "coerced-to" : {
            "go-type" : 36,
            "kind" : "type",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 1,
              "value" : "unsafe"
            },
            "type" : "identifier",
            "value" : {
              "go-type" : 36,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "Pointer"
            }
          },
          "go-type" : 36,
          "kind" : "expression",
          "target" : {
            "go-type" : 47,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "t",
              "variable" : 37
            }
          },
          "type" : "cast"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 85,
      "code" : "(*valp)[0] = unsafe.Pointer(t)",
      "entry" : false,
      "use-vars" : [ 37, 36 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 51 ],
      "in-vars" : [ 5, 1, 38, 37, 35 ],
      "exit" : false,
      "out-vars" : [ 5, 1, 37, 41, 35 ],
      "decl-vars" : [ 41 ],
      "line-start" : 87,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "name"
          }
        } ],
        "right" : [ {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "function" : 13,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "name"
            },
            "go-type" : 102,
            "kind" : "expression",
            "target" : {
              "go-type" : 42,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "symName",
                "variable" : 38
              }
            },
            "type" : "selector"
          },
          "go-type" : 3,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 87,
      "code" : "name := symName.name()",
      "entry" : false,
      "use-vars" : [ 38 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 52, 53 ],
      "in-vars" : [ 41, 35, 5, 1, 37 ],
      "exit" : false,
      "out-vars" : [ 5, 1, 41, 35 ],
      "decl-vars" : [ ],
      "line-start" : 88,
      "ast" : {
        "condition" : {
          "go-type" : 62,
          "kind" : "expression",
          "left" : {
            "go-type" : 33,
            "kind" : "expression",
            "left" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "kind",
                "variable" : 40
              },
              "go-type" : 33,
              "kind" : "expression",
              "target" : {
                "go-type" : 47,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "t",
                  "variable" : 37
                }
              },
              "type" : "selector"
            },
            "operator" : "&",
            "right" : {
              "go-type" : 33,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "31"
              }
            },
            "type" : "binary"
          },
          "operator" : "==",
          "right" : {
            "go-type" : 33,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "19"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 90,
      "code" : "if t.kind&kindMask == kindFunc {\n\tname = \".\" + name\n}",
      "entry" : false,
      "use-vars" : [ 37 ]
    }, {
      "update-vars" : [ 41 ],
      "successors" : [ 53 ],
      "in-vars" : [ 5, 1, 41, 35 ],
      "exit" : false,
      "out-vars" : [ 41, 35, 5, 1 ],
      "decl-vars" : [ ],
      "line-start" : 89,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 3,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "name",
            "variable" : 41
          }
        } ],
        "right" : [ {
          "go-type" : 3,
          "kind" : "expression",
          "left" : {
            "go-type" : 3,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "."
            }
          },
          "operator" : "+",
          "right" : {
            "go-type" : 3,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "name",
              "variable" : 41
            }
          },
          "type" : "binary"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 41 ],
      "line-end" : 89,
      "code" : "name = \".\" + name",
      "entry" : false,
      "use-vars" : [ 41 ]
    }, {
      "update-vars" : [ 1 ],
      "successors" : [ 44 ],
      "in-vars" : [ 5, 1, 41, 35 ],
      "exit" : false,
      "out-vars" : [ 5, 1 ],
      "decl-vars" : [ ],
      "line-start" : 91,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 5,
          "index" : {
            "go-type" : 3,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "name",
              "variable" : 41
            }
          },
          "kind" : "expression",
          "target" : {
            "go-type" : 4,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "syms",
              "variable" : 1
            }
          },
          "type" : "index"
        } ],
        "right" : [ {
          "go-type" : 5,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "val",
            "variable" : 35
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 91,
      "code" : "syms[name] = val",
      "entry" : false,
      "use-vars" : [ 35, 1, 41 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 5, 1 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 93,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "pluginpath",
            "variable" : 9
          },
          "go-type" : 3,
          "kind" : "expression",
          "target" : {
            "go-type" : 61,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "md",
              "variable" : 5
            }
          },
          "type" : "selector"
        }, {
          "go-type" : 4,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "syms",
            "variable" : 1
          }
        }, {
          "go-type" : 3,
          "kind" : "constant",
          "value" : {
            "type" : "STRING",
            "value" : ""
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 93,
      "code" : "return md.pluginpath, syms, \"\"",
      "entry" : false,
      "use-vars" : [ 5, 1 ]
    } ],
    "code" : "//go:linkname plugin_lastmoduleinit plugin.lastmoduleinit\nfunc plugin_lastmoduleinit() (path string, syms map[string]interface{}, errstr string) {\n\tvar md *moduledata\n\tfor pmd := firstmoduledata.next; pmd != nil; pmd = pmd.next {\n\t\tif pmd.bad {\n\t\t\tmd = nil\n\t\t\tcontinue\n\t\t}\n\t\tmd = pmd\n\t}\n\tif md == nil {\n\t\tthrow(\"runtime: no plugin module data\")\n\t}\n\tif md.pluginpath == \"\" {\n\t\tthrow(\"runtime: plugin has empty pluginpath\")\n\t}\n\tif md.typemap != nil {\n\t\treturn \"\", nil, \"plugin already loaded\"\n\t}\n\n\tfor _, pmd := range activeModules() {\n\t\tif pmd.pluginpath == md.pluginpath {\n\t\t\tmd.bad = true\n\t\t\treturn \"\", nil, \"plugin already loaded\"\n\t\t}\n\n\t\tif inRange(pmd.text, pmd.etext, md.text, md.etext) ||\n\t\t\tinRange(pmd.bss, pmd.ebss, md.bss, md.ebss) ||\n\t\t\tinRange(pmd.data, pmd.edata, md.data, md.edata) ||\n\t\t\tinRange(pmd.types, pmd.etypes, md.types, md.etypes) {\n\t\t\tprintln(\"plugin: new module data overlaps with previous moduledata\")\n\t\t\tprintln(\"\\tpmd.text-etext=\", hex(pmd.text), \"-\", hex(pmd.etext))\n\t\t\tprintln(\"\\tpmd.bss-ebss=\", hex(pmd.bss), \"-\", hex(pmd.ebss))\n\t\t\tprintln(\"\\tpmd.data-edata=\", hex(pmd.data), \"-\", hex(pmd.edata))\n\t\t\tprintln(\"\\tpmd.types-etypes=\", hex(pmd.types), \"-\", hex(pmd.etypes))\n\t\t\tprintln(\"\\tmd.text-etext=\", hex(md.text), \"-\", hex(md.etext))\n\t\t\tprintln(\"\\tmd.bss-ebss=\", hex(md.bss), \"-\", hex(md.ebss))\n\t\t\tprintln(\"\\tmd.data-edata=\", hex(md.data), \"-\", hex(md.edata))\n\t\t\tprintln(\"\\tmd.types-etypes=\", hex(md.types), \"-\", hex(md.etypes))\n\t\t\tthrow(\"plugin: new module data overlaps with previous moduledata\")\n\t\t}\n\t}\n\tfor _, pkghash := range md.pkghashes {\n\t\tif pkghash.linktimehash != *pkghash.runtimehash {\n\t\t\tmd.bad = true\n\t\t\treturn \"\", nil, \"plugin was built with a different version of package \" + pkghash.modulename\n\t\t}\n\t}\n\n\tmodulesinit()\n\ttypelinksinit()\n\n\tpluginftabverify(md)\n\tmoduledataverify1(md)\n\n\tlock(&itabLock)\n\tfor _, i := range md.itablinks {\n\t\titabAdd(i)\n\t}\n\tunlock(&itabLock)\n\n\tsyms = make(map[string]interface{}, len(md.ptab))\n\tfor _, ptab := range md.ptab {\n\t\tsymName := resolveNameOff(unsafe.Pointer(md.types), ptab.name)\n\t\tt := (*_type)(unsafe.Pointer(md.types)).typeOff(ptab.typ)\n\t\tvar val interface{}\n\t\tvalp := (*[2]unsafe.Pointer)(unsafe.Pointer(&val))\n\t\t(*valp)[0] = unsafe.Pointer(t)\n\n\t\tname := symName.name()\n\t\tif t.kind&kindMask == kindFunc {\n\t\t\tname = \".\" + name\n\t\t}\n\t\tsyms[name] = val\n\t}\n\treturn md.pluginpath, syms, \"\"\n}",
    "defines" : [ 0 ],
    "functions" : [ {
      "name" : "plugin_lastmoduleinit",
      "package" : 0,
      "type" : 0,
      "exported" : false
    }, {
      "name" : "throw",
      "package" : 0,
      "type" : 64,
      "exported" : false
    }, {
      "name" : "activeModules",
      "package" : 0,
      "type" : 67,
      "exported" : false
    }, {
      "name" : "inRange",
      "package" : 0,
      "type" : 69,
      "exported" : false
    }, {
      "name" : "modulesinit",
      "package" : 0,
      "type" : 78,
      "exported" : false
    }, {
      "name" : "typelinksinit",
      "package" : 0,
      "type" : 78,
      "exported" : false
    }, {
      "name" : "pluginftabverify",
      "package" : 0,
      "type" : 79,
      "exported" : false
    }, {
      "name" : "moduledataverify1",
      "package" : 0,
      "type" : 81,
      "exported" : false
    }, {
      "name" : "lock",
      "package" : 0,
      "type" : 83,
      "exported" : false
    }, {
      "name" : "itabAdd",
      "package" : 0,
      "type" : 86,
      "exported" : false
    }, {
      "name" : "unlock",
      "package" : 0,
      "type" : 83,
      "exported" : false
    }, {
      "name" : "resolveNameOff",
      "package" : 0,
      "type" : 91,
      "exported" : false
    }, {
      "name" : "typeOff",
      "package" : 0,
      "type" : 97,
      "exported" : false
    }, {
      "name" : "name",
      "package" : 0,
      "type" : 103,
      "exported" : false
    } ],
    "line-end" : 94,
    "line-start" : 10,
    "names" : [ "plugin_lastmoduleinit" ],
    "package" : 0,
    "packages" : [ {
      "name" : "runtime",
      "path" : "runtime"
    }, {
      "name" : "unsafe",
      "path" : "unsafe"
    } ],
    "params" : [ ],
    "receivers" : [ ],
    "results" : [ 0, 1, 2 ],
    "type" : "function",
    "types" : [ {
      "name" : "func() (path string, syms map[string]interface{}, errstr string)",
      "params" : 1,
      "recv" : -1,
      "results" : 2,
      "type" : "Signature",
      "underlying" : 0,
      "variadic" : false
    }, {
      "fields" : [ ],
      "name" : "()",
      "type" : "Tuple",
      "underlying" : 1
    }, {
      "fields" : [ {
        "name" : "path",
        "type" : 3
      }, {
        "name" : "syms",
        "type" : 4
      }, {
        "name" : "errstr",
        "type" : 3
      } ],
      "name" : "(path string, syms map[string]interface{}, errstr string)",
      "type" : "Tuple",
      "underlying" : 2
    }, {
      "name" : "string",
      "type" : "Basic",
      "underlying" : 3
    }, {
      "elem" : 5,
      "key" : 3,
      "name" : "map[string]interface{}",
      "type" : "Map",
      "underlying" : 4
    }, {
      "methods" : [ ],
      "name" : "interface{}",
      "type" : "Interface",
      "underlying" : 5
    }, {
      "local-name" : "mutex",
      "name" : "runtime.mutex",
      "package" : 0,
      "type" : "Named",
      "underlying" : 7
    }, {
      "fields" : [ {
        "name" : "key",
        "type" : 8
      } ],
      "name" : "struct{key uintptr}",
      "type" : "Struct",
      "underlying" : 7
    }, {
      "name" : "uintptr",
      "type" : "Basic",
      "underlying" : 8
    }, {
      "local-name" : "moduledata",
      "name" : "runtime.moduledata",
      "package" : 0,
      "type" : "Named",
      "underlying" : 10
    }, {
      "fields" : [ {
        "name" : "pclntable",
        "type" : 11
      }, {
        "name" : "ftab",
        "type" : 13
      }, {
        "name" : "filetab",
        "type" : 16
      }, {
        "name" : "findfunctab",
        "type" : 8
      }, {
        "name" : "minpc",
        "type" : 8
      }, {
        "name" : "maxpc",
        "type" : 8
      }, {
        "name" : "text",
        "type" : 8
      }, {
        "name" : "etext",
        "type" : 8
      }, {
        "name" : "noptrdata",
        "type" : 8
      }, {
        "name" : "enoptrdata",
        "type" : 8
      }, {
        "name" : "data",
        "type" : 8
      }, {
        "name" : "edata",
        "type" : 8
      }, {
        "name" : "bss",
        "type" : 8
      }, {
        "name" : "ebss",
        "type" : 8
      }, {
        "name" : "noptrbss",
        "type" : 8
      }, {
        "name" : "enoptrbss",
        "type" : 8
      }, {
        "name" : "end",
        "type" : 8
      }, {
        "name" : "gcdata",
        "type" : 8
      }, {
        "name" : "gcbss",
        "type" : 8
      }, {
        "name" : "types",
        "type" : 8
      }, {
        "name" : "etypes",
        "type" : 8
      }, {
        "name" : "textsectmap",
        "type" : 18
      }, {
        "name" : "typelinks",
        "type" : 21
      }, {
        "name" : "itablinks",
        "type" : 23
      }, {
        "name" : "ptab",
        "type" : 50
      }, {
        "name" : "pluginpath",
        "type" : 3
      }, {
        "name" : "pkghashes",
        "type" : 53
      }, {
        "name" : "modulename",
        "type" : 3
      }, {
        "name" : "modulehashes",
        "type" : 53
      }, {
        "name" : "hasmain",
        "type" : 33
      }, {
        "name" : "gcdatamask",
        "type" : 57
      }, {
        "name" : "gcbssmask",
        "type" : 57
      }, {
        "name" : "typemap",
        "type" : 60
      }, {
        "name" : "bad",
        "type" : 38
      }, {
        "name" : "next",
        "type" : 61
      } ],
      "name" : "struct{pclntable []byte; ftab []runtime.functab; filetab []uint32; findfunctab uintptr; minpc uintptr; maxpc uintptr; text uintptr; etext uintptr; noptrdata uintptr; enoptrdata uintptr; data uintptr; edata uintptr; bss uintptr; ebss uintptr; noptrbss uintptr; enoptrbss uintptr; end uintptr; gcdata uintptr; gcbss uintptr; types uintptr; etypes uintptr; textsectmap []runtime.textsect; typelinks []int32; itablinks []*runtime.itab; ptab []runtime.ptabEntry; pluginpath string; pkghashes []runtime.modulehash; modulename string; modulehashes []runtime.modulehash; hasmain uint8; gcdatamask runtime.bitvector; gcbssmask runtime.bitvector; typemap map[runtime.typeOff]*runtime._type; bad bool; next *runtime.moduledata}",
      "type" : "Struct",
      "underlying" : 10
    }, {
      "elem" : 12,
      "name" : "[]byte",
      "type" : "Slice",
      "underlying" : 11
    }, {
      "name" : "byte",
      "type" : "Basic",
      "underlying" : 12
    }, {
      "elem" : 14,
      "name" : "[]runtime.functab",
      "type" : "Slice",
      "underlying" : 13
    }, {
      "local-name" : "functab",
      "name" : "runtime.functab",
      "package" : 0,
      "type" : "Named",
      "underlying" : 15
    }, {
      "fields" : [ {
        "name" : "entry",
        "type" : 8
      }, {
        "name" : "funcoff",
        "type" : 8
      } ],
      "name" : "struct{entry uintptr; funcoff uintptr}",
      "type" : "Struct",
      "underlying" : 15
    }, {
      "elem" : 17,
      "name" : "[]uint32",
      "type" : "Slice",
      "underlying" : 16
    }, {
      "name" : "uint32",
      "type" : "Basic",
      "underlying" : 17
    }, {
      "elem" : 19,
      "name" : "[]runtime.textsect",
      "type" : "Slice",
      "underlying" : 18
    }, {
      "local-name" : "textsect",
      "name" : "runtime.textsect",
      "package" : 0,
      "type" : "Named",
      "underlying" : 20
    }, {
      "fields" : [ {
        "name" : "vaddr",
        "type" : 8
      }, {
        "name" : "length",
        "type" : 8
      }, {
        "name" : "baseaddr",
        "type" : 8
      } ],
      "name" : "struct{vaddr uintptr; length uintptr; baseaddr uintptr}",
      "type" : "Struct",
      "underlying" : 20
    }, {
      "elem" : 22,
      "name" : "[]int32",
      "type" : "Slice",
      "underlying" : 21
    }, {
      "name" : "int32",
      "type" : "Basic",
      "underlying" : 22
    }, {
      "elem" : 24,
      "name" : "[]*runtime.itab",
      "type" : "Slice",
      "underlying" : 23
    }, {
      "elem" : 25,
      "name" : "*runtime.itab",
      "type" : "Pointer",
      "underlying" : 24
    }, {
      "local-name" : "itab",
      "name" : "runtime.itab",
      "package" : 0,
      "type" : "Named",
      "underlying" : 26
    }, {
      "fields" : [ {
        "name" : "inter",
        "type" : 27
      }, {
        "name" : "_type",
        "type" : 47
      }, {
        "name" : "hash",
        "type" : 17
      }, {
        "name" : "_",
        "type" : 48
      }, {
        "name" : "fun",
        "type" : 49
      } ],
      "name" : "struct{inter *runtime.interfacetype; _type *runtime._type; hash uint32; _ [4]byte; fun [1]uintptr}",
      "type" : "Struct",
      "underlying" : 26
    }, {
      "elem" : 28,
      "name" : "*runtime.interfacetype",
      "type" : "Pointer",
      "underlying" : 27
    }, {
      "local-name" : "interfacetype",
      "name" : "runtime.interfacetype",
      "package" : 0,
      "type" : "Named",
      "underlying" : 29
    }, {
      "fields" : [ {
        "name" : "typ",
        "type" : 30
      }, {
        "name" : "pkgpath",
        "type" : 42
      }, {
        "name" : "mhdr",
        "type" : 44
      } ],
      "name" : "struct{typ runtime._type; pkgpath runtime.name; mhdr []runtime.imethod}",
      "type" : "Struct",
      "underlying" : 29
    }, {
      "local-name" : "_type",
      "name" : "runtime._type",
      "package" : 0,
      "type" : "Named",
      "underlying" : 31
    }, {
      "fields" : [ {
        "name" : "size",
        "type" : 8
      }, {
        "name" : "ptrdata",
        "type" : 8
      }, {
        "name" : "hash",
        "type" : 17
      }, {
        "name" : "tflag",
        "type" : 32
      }, {
        "name" : "align",
        "type" : 33
      }, {
        "name" : "fieldAlign",
        "type" : 33
      }, {
        "name" : "kind",
        "type" : 33
      }, {
        "name" : "equal",
        "type" : 34
      }, {
        "name" : "gcdata",
        "type" : 39
      }, {
        "name" : "str",
        "type" : 40
      }, {
        "name" : "ptrToThis",
        "type" : 41
      } ],
      "name" : "struct{size uintptr; ptrdata uintptr; hash uint32; tflag runtime.tflag; align uint8; fieldAlign uint8; kind uint8; equal func(unsafe.Pointer, unsafe.Pointer) bool; gcdata *byte; str runtime.nameOff; ptrToThis runtime.typeOff}",
      "type" : "Struct",
      "underlying" : 31
    }, {
      "local-name" : "tflag",
      "name" : "runtime.tflag",
      "package" : 0,
      "type" : "Named",
      "underlying" : 33
    }, {
      "name" : "uint8",
      "type" : "Basic",
      "underlying" : 33
    }, {
      "name" : "func(unsafe.Pointer, unsafe.Pointer) bool",
      "params" : 35,
      "recv" : -1,
      "results" : 37,
      "type" : "Signature",
      "underlying" : 34,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 36
      }, {
        "name" : "",
        "type" : 36
      } ],
      "name" : "(unsafe.Pointer, unsafe.Pointer)",
      "type" : "Tuple",
      "underlying" : 35
    }, {
      "local-name" : "Pointer",
      "name" : "unsafe.Pointer",
      "package" : 1,
      "type" : "Basic",
      "underlying" : 36
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 38
      } ],
      "name" : "(bool)",
      "type" : "Tuple",
      "underlying" : 37
    }, {
      "name" : "bool",
      "type" : "Basic",
      "underlying" : 38
    }, {
      "elem" : 12,
      "name" : "*byte",
      "type" : "Pointer",
      "underlying" : 39
    }, {
      "local-name" : "nameOff",
      "name" : "runtime.nameOff",
      "package" : 0,
      "type" : "Named",
      "underlying" : 22
    }, {
      "local-name" : "typeOff",
      "name" : "runtime.typeOff",
      "package" : 0,
      "type" : "Named",
      "underlying" : 22
    }, {
      "local-name" : "name",
      "name" : "runtime.name",
      "package" : 0,
      "type" : "Named",
      "underlying" : 43
    }, {
      "fields" : [ {
        "name" : "bytes",
        "type" : 39
      } ],
      "name" : "struct{bytes *byte}",
      "type" : "Struct",
      "underlying" : 43
    }, {
      "elem" : 45,
      "name" : "[]runtime.imethod",
      "type" : "Slice",
      "underlying" : 44
    }, {
      "local-name" : "imethod",
      "name" : "runtime.imethod",
      "package" : 0,
      "type" : "Named",
      "underlying" : 46
    }, {
      "fields" : [ {
        "name" : "name",
        "type" : 40
      }, {
        "name" : "ityp",
        "type" : 41
      } ],
      "name" : "struct{name runtime.nameOff; ityp runtime.typeOff}",
      "type" : "Struct",
      "underlying" : 46
    }, {
      "elem" : 30,
      "name" : "*runtime._type",
      "type" : "Pointer",
      "underlying" : 47
    }, {
      "elem" : 12,
      "name" : "[4]byte",
      "type" : "Array",
      "underlying" : 48
    }, {
      "elem" : 8,
      "name" : "[1]uintptr",
      "type" : "Array",
      "underlying" : 49
    }, {
      "elem" : 51,
      "name" : "[]runtime.ptabEntry",
      "type" : "Slice",
      "underlying" : 50
    }, {
      "local-name" : "ptabEntry",
      "name" : "runtime.ptabEntry",
      "package" : 0,
      "type" : "Named",
      "underlying" : 52
    }, {
      "fields" : [ {
        "name" : "name",
        "type" : 40
      }, {
        "name" : "typ",
        "type" : 41
      } ],
      "name" : "struct{name runtime.nameOff; typ runtime.typeOff}",
      "type" : "Struct",
      "underlying" : 52
    }, {
      "elem" : 54,
      "name" : "[]runtime.modulehash",
      "type" : "Slice",
      "underlying" : 53
    }, {
      "local-name" : "modulehash",
      "name" : "runtime.modulehash",
      "package" : 0,
      "type" : "Named",
      "underlying" : 55
    }, {
      "fields" : [ {
        "name" : "modulename",
        "type" : 3
      }, {
        "name" : "linktimehash",
        "type" : 3
      }, {
        "name" : "runtimehash",
        "type" : 56
      } ],
      "name" : "struct{modulename string; linktimehash string; runtimehash *string}",
      "type" : "Struct",
      "underlying" : 55
    }, {
      "elem" : 3,
      "name" : "*string",
      "type" : "Pointer",
      "underlying" : 56
    }, {
      "local-name" : "bitvector",
      "name" : "runtime.bitvector",
      "package" : 0,
      "type" : "Named",
      "underlying" : 58
    }, {
      "fields" : [ {
        "name" : "n",
        "type" : 22
      }, {
        "name" : "bytedata",
        "type" : 59
      } ],
      "name" : "struct{n int32; bytedata *uint8}",
      "type" : "Struct",
      "underlying" : 58
    }, {
      "elem" : 33,
      "name" : "*uint8",
      "type" : "Pointer",
      "underlying" : 59
    }, {
      "elem" : 47,
      "key" : 41,
      "name" : "map[runtime.typeOff]*runtime._type",
      "type" : "Map",
      "underlying" : 60
    }, {
      "elem" : 9,
      "name" : "*runtime.moduledata",
      "type" : "Pointer",
      "underlying" : 61
    }, {
      "name" : "untyped bool",
      "type" : "Basic",
      "underlying" : 62
    }, {
      "name" : "untyped nil",
      "type" : "Basic",
      "underlying" : 63
    }, {
      "name" : "func(s string)",
      "params" : 65,
      "recv" : -1,
      "results" : 1,
      "type" : "Signature",
      "underlying" : 64,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "s",
        "type" : 3
      } ],
      "name" : "(s string)",
      "type" : "Tuple",
      "underlying" : 65
    }, {
      "elem" : 61,
      "name" : "[]*runtime.moduledata",
      "type" : "Slice",
      "underlying" : 66
    }, {
      "name" : "func() []*runtime.moduledata",
      "params" : 1,
      "recv" : -1,
      "results" : 68,
      "type" : "Signature",
      "underlying" : 67,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 66
      } ],
      "name" : "([]*runtime.moduledata)",
      "type" : "Tuple",
      "underlying" : 68
    }, {
      "name" : "func(r0 uintptr, r1 uintptr, v0 uintptr, v1 uintptr) bool",
      "params" : 70,
      "recv" : -1,
      "results" : 37,
      "type" : "Signature",
      "underlying" : 69,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "r0",
        "type" : 8
      }, {
        "name" : "r1",
        "type" : 8
      }, {
        "name" : "v0",
        "type" : 8
      }, {
        "name" : "v1",
        "type" : 8
      } ],
      "name" : "(r0 uintptr, r1 uintptr, v0 uintptr, v1 uintptr)",
      "type" : "Tuple",
      "underlying" : 70
    }, {
      "name" : "func(string)",
      "params" : 72,
      "recv" : -1,
      "results" : 1,
      "type" : "Signature",
      "underlying" : 71,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 3
      } ],
      "name" : "(string)",
      "type" : "Tuple",
      "underlying" : 72
    }, {
      "name" : "func(string, runtime.hex, string, runtime.hex)",
      "params" : 74,
      "recv" : -1,
      "results" : 1,
      "type" : "Signature",
      "underlying" : 73,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 3
      }, {
        "name" : "",
        "type" : 75
      }, {
        "name" : "",
        "type" : 3
      }, {
        "name" : "",
        "type" : 75
      } ],
      "name" : "(string, runtime.hex, string, runtime.hex)",
      "type" : "Tuple",
      "underlying" : 74
    }, {
      "local-name" : "hex",
      "name" : "runtime.hex",
      "package" : 0,
      "type" : "Named",
      "underlying" : 76
    }, {
      "name" : "uint64",
      "type" : "Basic",
      "underlying" : 76
    }, {
      "name" : "int",
      "type" : "Basic",
      "underlying" : 77
    }, {
      "name" : "func()",
      "params" : 1,
      "recv" : -1,
      "results" : 1,
      "type" : "Signature",
      "underlying" : 78,
      "variadic" : false
    }, {
      "name" : "func(md *runtime.moduledata)",
      "params" : 80,
      "recv" : -1,
      "results" : 1,
      "type" : "Signature",
      "underlying" : 79,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "md",
        "type" : 61
      } ],
      "name" : "(md *runtime.moduledata)",
      "type" : "Tuple",
      "underlying" : 80
    }, {
      "name" : "func(datap *runtime.moduledata)",
      "params" : 82,
      "recv" : -1,
      "results" : 1,
      "type" : "Signature",
      "underlying" : 81,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "datap",
        "type" : 61
      } ],
      "name" : "(datap *runtime.moduledata)",
      "type" : "Tuple",
      "underlying" : 82
    }, {
      "name" : "func(l *runtime.mutex)",
      "params" : 84,
      "recv" : -1,
      "results" : 1,
      "type" : "Signature",
      "underlying" : 83,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "l",
        "type" : 85
      } ],
      "name" : "(l *runtime.mutex)",
      "type" : "Tuple",
      "underlying" : 84
    }, {
      "elem" : 6,
      "name" : "*runtime.mutex",
      "type" : "Pointer",
      "underlying" : 85
    }, {
      "name" : "func(m *runtime.itab)",
      "params" : 87,
      "recv" : -1,
      "results" : 1,
      "type" : "Signature",
      "underlying" : 86,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "m",
        "type" : 24
      } ],
      "name" : "(m *runtime.itab)",
      "type" : "Tuple",
      "underlying" : 87
    }, {
      "name" : "func([]runtime.ptabEntry) int",
      "params" : 89,
      "recv" : -1,
      "results" : 90,
      "type" : "Signature",
      "underlying" : 88,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 50
      } ],
      "name" : "([]runtime.ptabEntry)",
      "type" : "Tuple",
      "underlying" : 89
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 77
      } ],
      "name" : "(int)",
      "type" : "Tuple",
      "underlying" : 90
    }, {
      "name" : "func(ptrInModule unsafe.Pointer, off runtime.nameOff) runtime.name",
      "params" : 92,
      "recv" : -1,
      "results" : 93,
      "type" : "Signature",
      "underlying" : 91,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "ptrInModule",
        "type" : 36
      }, {
        "name" : "off",
        "type" : 40
      } ],
      "name" : "(ptrInModule unsafe.Pointer, off runtime.nameOff)",
      "type" : "Tuple",
      "underlying" : 92
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 42
      } ],
      "name" : "(runtime.name)",
      "type" : "Tuple",
      "underlying" : 93
    }, {
      "name" : "func(off runtime.typeOff) *runtime._type",
      "params" : 95,
      "recv" : -1,
      "results" : 96,
      "type" : "Signature",
      "underlying" : 94,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "off",
        "type" : 41
      } ],
      "name" : "(off runtime.typeOff)",
      "type" : "Tuple",
      "underlying" : 95
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 47
      } ],
      "name" : "(*runtime._type)",
      "type" : "Tuple",
      "underlying" : 96
    }, {
      "name" : "(*runtime._type) func(off runtime.typeOff) *runtime._type",
      "params" : 95,
      "recv" : 33,
      "results" : 96,
      "type" : "Signature",
      "underlying" : 97,
      "variadic" : false
    }, {
      "elem" : 99,
      "name" : "*[2]unsafe.Pointer",
      "type" : "Pointer",
      "underlying" : 98
    }, {
      "elem" : 36,
      "name" : "[2]unsafe.Pointer",
      "type" : "Array",
      "underlying" : 99
    }, {
      "name" : "untyped int",
      "type" : "Basic",
      "underlying" : 100
    }, {
      "elem" : 5,
      "name" : "*interface{}",
      "type" : "Pointer",
      "underlying" : 101
    }, {
      "name" : "func() (s string)",
      "params" : 1,
      "recv" : -1,
      "results" : 65,
      "type" : "Signature",
      "underlying" : 102,
      "variadic" : false
    }, {
      "name" : "(runtime.name) func() (s string)",
      "params" : 1,
      "recv" : 39,
      "results" : 65,
      "type" : "Signature",
      "underlying" : 103,
      "variadic" : false
    } ],
    "variables" : [ {
      "name" : "path",
      "package" : 0,
      "type" : 3,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "syms",
      "package" : 0,
      "type" : 4,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "errstr",
      "package" : 0,
      "type" : 3,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "itabLock",
      "package" : 0,
      "type" : 6,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "firstmoduledata",
      "package" : 0,
      "type" : 9,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "md",
      "package" : 0,
      "type" : 61,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "next",
      "package" : 0,
      "type" : 61,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "pmd",
      "package" : 0,
      "type" : 61,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "bad",
      "package" : 0,
      "type" : 38,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "pluginpath",
      "package" : 0,
      "type" : 3,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "typemap",
      "package" : 0,
      "type" : 60,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "pmd",
      "package" : 0,
      "type" : 61,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "text",
      "package" : 0,
      "type" : 8,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "etext",
      "package" : 0,
      "type" : 8,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "bss",
      "package" : 0,
      "type" : 8,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "ebss",
      "package" : 0,
      "type" : 8,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "data",
      "package" : 0,
      "type" : 8,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "edata",
      "package" : 0,
      "type" : 8,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "types",
      "package" : 0,
      "type" : 8,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "etypes",
      "package" : 0,
      "type" : 8,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "_",
      "package" : 0,
      "type" : 77,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "pkghashes",
      "package" : 0,
      "type" : 53,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "pkghash",
      "package" : 0,
      "type" : 54,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "linktimehash",
      "package" : 0,
      "type" : 3,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "runtimehash",
      "package" : 0,
      "type" : 56,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "modulename",
      "package" : 0,
      "type" : 3,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "_",
      "package" : 0,
      "type" : 77,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "itablinks",
      "package" : 0,
      "type" : 23,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "i",
      "package" : 0,
      "type" : 24,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "_",
      "package" : 0,
      "type" : 77,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "ptab",
      "package" : 0,
      "type" : 50,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "ptab",
      "package" : 0,
      "type" : 51,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "name",
      "package" : 0,
      "type" : 40,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "t",
      "package" : 0,
      "type" : 47,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "typ",
      "package" : 0,
      "type" : 41,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "val",
      "package" : 0,
      "type" : 5,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "valp",
      "package" : 0,
      "type" : 98,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "t",
      "package" : 0,
      "type" : 47,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "symName",
      "package" : 0,
      "type" : 42,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "n",
      "package" : 0,
      "type" : 42,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "kind",
      "package" : 0,
      "type" : 33,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "name",
      "package" : 0,
      "type" : 3,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "_",
      "package" : 0,
      "type" : 77,
      "exported" : false,
      "embedded" : false,
      "field" : false
    } ]
  },
  "go-version" : "1.14.3"
}