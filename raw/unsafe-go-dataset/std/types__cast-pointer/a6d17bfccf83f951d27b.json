{
  "usage" : {
    "file" : "makefunc.go",
    "label1" : "cast-pointer",
    "label2" : "types",
    "line" : "67",
    "module" : "std",
    "pkg" : "reflect",
    "project" : "kubernetes/kubernetes",
    "snippet" : "return Value{t, unsafe.Pointer(impl), flag(Func)}",
    "version" : "std"
  },
  "cfg" : {
    "blocks" : [ {
      "update-vars" : [ ],
      "successors" : [ 2 ],
      "in-vars" : [ 17, 18 ],
      "exit" : false,
      "out-vars" : [ 17, 18 ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[entry]",
      "entry" : true,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ ],
      "in-vars" : [ ],
      "exit" : true,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[exit]",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 3, 4 ],
      "in-vars" : [ 17, 18 ],
      "exit" : false,
      "out-vars" : [ 17, 18 ],
      "decl-vars" : [ ],
      "line-start" : 49,
      "ast" : {
        "condition" : {
          "go-type" : 80,
          "kind" : "expression",
          "left" : {
            "arguments" : [ ],
            "ellipsis" : false,
            "function" : {
              "field" : {
                "function" : 1,
                "ident-kind" : "Func",
                "kind" : "ident",
                "value" : "Kind"
              },
              "go-type" : 81,
              "kind" : "expression",
              "target" : {
                "go-type" : 2,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "typ",
                  "variable" : 17
                }
              },
              "type" : "selector"
            },
            "go-type" : 39,
            "kind" : "expression",
            "type" : "call"
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 39,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "19"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 51,
      "code" : "if typ.Kind() != Func {\n\tpanic(\"reflect: call of MakeFunc with non-Func type\")\n}",
      "entry" : false,
      "use-vars" : [ 17 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 4 ],
      "in-vars" : [ 17, 18 ],
      "exit" : false,
      "out-vars" : [ 17, 18 ],
      "decl-vars" : [ ],
      "line-start" : 50,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 23,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "reflect: call of MakeFunc with non-Func type"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 82,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Builtin",
              "kind" : "ident",
              "value" : "panic"
            }
          },
          "go-type" : 5,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 50,
      "code" : "panic(\"reflect: call of MakeFunc with non-Func type\")",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 5 ],
      "in-vars" : [ 17, 18 ],
      "exit" : false,
      "out-vars" : [ 20, 18 ],
      "decl-vars" : [ 20 ],
      "line-start" : 53,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "t"
          }
        } ],
        "right" : [ {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "function" : 2,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "common"
            },
            "go-type" : 85,
            "kind" : "expression",
            "target" : {
              "go-type" : 2,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "typ",
                "variable" : 17
              }
            },
            "type" : "selector"
          },
          "go-type" : 47,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 53,
      "code" : "t := typ.common()",
      "entry" : false,
      "use-vars" : [ 17 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 6 ],
      "in-vars" : [ 18, 20 ],
      "exit" : false,
      "out-vars" : [ 20, 18, 21 ],
      "decl-vars" : [ 21 ],
      "line-start" : 54,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "ftyp"
          }
        } ],
        "right" : [ {
          "coerced-to" : {
            "contained" : {
              "go-type" : 87,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 87,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "funcType"
              }
            },
            "go-type" : 86,
            "kind" : "type",
            "type" : "pointer"
          },
          "go-type" : 86,
          "kind" : "expression",
          "target" : {
            "coerced-to" : {
              "go-type" : 55,
              "kind" : "type",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 1,
                "value" : "unsafe"
              },
              "type" : "identifier",
              "value" : {
                "go-type" : 55,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "Pointer"
              }
            },
            "go-type" : 55,
            "kind" : "expression",
            "target" : {
              "go-type" : 47,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "t",
                "variable" : 20
              }
            },
            "type" : "cast"
          },
          "type" : "cast"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 54,
      "code" : "ftyp := (*funcType)(unsafe.Pointer(t))",
      "entry" : false,
      "use-vars" : [ 20 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 7 ],
      "in-vars" : [ 21, 20, 18 ],
      "exit" : false,
      "out-vars" : [ 21, 20, 22, 18 ],
      "decl-vars" : [ 22 ],
      "line-start" : 59,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "dummy"
          }
        } ],
        "right" : [ {
          "go-type" : 89,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "function" : 3,
            "ident-kind" : "Func",
            "kind" : "ident",
            "value" : "makeFuncStub"
          }
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 59,
      "code" : "dummy := makeFuncStub",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 8 ],
      "in-vars" : [ 21, 20, 22, 18 ],
      "exit" : false,
      "out-vars" : [ 20, 23, 18, 21 ],
      "decl-vars" : [ 23 ],
      "line-start" : 60,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "code"
          }
        } ],
        "right" : [ {
          "go-type" : 25,
          "kind" : "expression",
          "target" : {
            "go-type" : 90,
            "kind" : "expression",
            "target" : {
              "coerced-to" : {
                "contained" : {
                  "contained" : {
                    "go-type" : 25,
                    "kind" : "type",
                    "type" : "identifier",
                    "value" : {
                      "go-type" : 25,
                      "ident-kind" : "TypeName",
                      "kind" : "ident",
                      "value" : "uintptr"
                    }
                  },
                  "go-type" : 90,
                  "kind" : "type",
                  "type" : "pointer"
                },
                "go-type" : 91,
                "kind" : "type",
                "type" : "pointer"
              },
              "go-type" : 91,
              "kind" : "expression",
              "target" : {
                "coerced-to" : {
                  "go-type" : 55,
                  "kind" : "type",
                  "qualifier" : {
                    "ident-kind" : "PkgName",
                    "kind" : "ident",
                    "package" : 1,
                    "value" : "unsafe"
                  },
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 55,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "Pointer"
                  }
                },
                "go-type" : 55,
                "kind" : "expression",
                "target" : {
                  "go-type" : 92,
                  "kind" : "expression",
                  "operator" : "&",
                  "target" : {
                    "go-type" : 89,
                    "kind" : "expression",
                    "type" : "identifier",
                    "value" : {
                      "ident-kind" : "Var",
                      "kind" : "ident",
                      "value" : "dummy",
                      "variable" : 22
                    }
                  },
                  "type" : "unary"
                },
                "type" : "cast"
              },
              "type" : "cast"
            },
            "type" : "star"
          },
          "type" : "star"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 60,
      "code" : "code := **(**uintptr)(unsafe.Pointer(&dummy))",
      "entry" : false,
      "use-vars" : [ 22 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 9 ],
      "in-vars" : [ 21, 20, 23, 18 ],
      "exit" : false,
      "out-vars" : [ 23, 24, 25, 18, 21, 20 ],
      "decl-vars" : [ 25, 26, 27, 28, 24 ],
      "line-start" : 63,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "_"
          }
        }, {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "argLen"
          }
        }, {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "_"
          }
        }, {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "stack"
          }
        }, {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "_"
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 86,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "ftyp",
              "variable" : 21
            }
          }, {
            "go-type" : 106,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Nil",
              "kind" : "ident",
              "value" : "nil"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 104,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 4,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "funcLayout"
            }
          },
          "go-type" : 93,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 63,
      "code" : "_, argLen, _, stack, _ := funcLayout(ftyp, nil)",
      "entry" : false,
      "use-vars" : [ 21 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 10 ],
      "in-vars" : [ 21, 20, 23, 24, 25, 18 ],
      "exit" : false,
      "out-vars" : [ 20, 34 ],
      "decl-vars" : [ 34 ],
      "line-start" : 65,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "impl"
          }
        } ],
        "right" : [ {
          "go-type" : 107,
          "kind" : "expression",
          "operator" : "&",
          "target" : {
            "declared" : {
              "go-type" : 108,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 108,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "makeFuncImpl"
              }
            },
            "go-type" : 108,
            "kind" : "literal",
            "type" : "composite",
            "values" : [ {
              "go-type" : -1,
              "key" : {
                "go-type" : -1,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "code",
                  "variable" : 29
                }
              },
              "kind" : "expression",
              "type" : "key-value",
              "value" : {
                "go-type" : 25,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "code",
                  "variable" : 23
                }
              }
            }, {
              "go-type" : -1,
              "key" : {
                "go-type" : -1,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "stack",
                  "variable" : 30
                }
              },
              "kind" : "expression",
              "type" : "key-value",
              "value" : {
                "go-type" : 94,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "stack",
                  "variable" : 24
                }
              }
            }, {
              "go-type" : -1,
              "key" : {
                "go-type" : -1,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "argLen",
                  "variable" : 31
                }
              },
              "kind" : "expression",
              "type" : "key-value",
              "value" : {
                "go-type" : 25,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "argLen",
                  "variable" : 25
                }
              }
            }, {
              "go-type" : -1,
              "key" : {
                "go-type" : -1,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "ftyp",
                  "variable" : 32
                }
              },
              "kind" : "expression",
              "type" : "key-value",
              "value" : {
                "go-type" : 86,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "ftyp",
                  "variable" : 21
                }
              }
            }, {
              "go-type" : -1,
              "key" : {
                "go-type" : -1,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "fn",
                  "variable" : 33
                }
              },
              "kind" : "expression",
              "type" : "key-value",
              "value" : {
                "go-type" : 75,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "fn",
                  "variable" : 18
                }
              }
            } ]
          },
          "type" : "unary"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 65,
      "code" : "impl := &makeFuncImpl{code: code, stack: stack, argLen: argLen, ftyp: ftyp, fn: fn}",
      "entry" : false,
      "use-vars" : [ 24, 25, 18, 21, 23 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 20, 34 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 67,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "declared" : {
            "go-type" : 45,
            "kind" : "type",
            "type" : "identifier",
            "value" : {
              "go-type" : 45,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "Value"
            }
          },
          "go-type" : 45,
          "kind" : "literal",
          "type" : "composite",
          "values" : [ {
            "go-type" : 47,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "t",
              "variable" : 20
            }
          }, {
            "coerced-to" : {
              "go-type" : 55,
              "kind" : "type",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 1,
                "value" : "unsafe"
              },
              "type" : "identifier",
              "value" : {
                "go-type" : 55,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "Pointer"
              }
            },
            "go-type" : 55,
            "kind" : "expression",
            "target" : {
              "go-type" : 107,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "impl",
                "variable" : 34
              }
            },
            "type" : "cast"
          }, {
            "go-type" : 61,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "19"
            }
          } ]
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 67,
      "code" : "return Value{t, unsafe.Pointer(impl), flag(Func)}",
      "entry" : false,
      "use-vars" : [ 34, 20 ]
    } ],
    "code" : "// MakeFunc returns a new function of the given Type\n// that wraps the function fn. When called, that new function\n// does the following:\n//\n//\t- converts its arguments to a slice of Values.\n//\t- runs results := fn(args).\n//\t- returns the results as a slice of Values, one per formal result.\n//\n// The implementation fn can assume that the argument Value slice\n// has the number and type of arguments given by typ.\n// If typ describes a variadic function, the final Value is itself\n// a slice representing the variadic arguments, as in the\n// body of a variadic function. The result Value slice returned by fn\n// must have the number and type of results given by typ.\n//\n// The Value.Call method allows the caller to invoke a typed function\n// in terms of Values; in contrast, MakeFunc allows the caller to implement\n// a typed function in terms of Values.\n//\n// The Examples section of the documentation includes an illustration\n// of how to use MakeFunc to build a swap function for different types.\n//\nfunc MakeFunc(typ Type, fn func(args []Value) (results []Value)) Value {\n\tif typ.Kind() != Func {\n\t\tpanic(\"reflect: call of MakeFunc with non-Func type\")\n\t}\n\n\tt := typ.common()\n\tftyp := (*funcType)(unsafe.Pointer(t))\n\n\tdummy := makeFuncStub\n\tcode := **(**uintptr)(unsafe.Pointer(&dummy))\n\n\t_, argLen, _, stack, _ := funcLayout(ftyp, nil)\n\n\timpl := &makeFuncImpl{code: code, stack: stack, argLen: argLen, ftyp: ftyp, fn: fn}\n\n\treturn Value{t, unsafe.Pointer(impl), flag(Func)}\n}",
    "defines" : [ 0 ],
    "functions" : [ {
      "name" : "MakeFunc",
      "package" : 0,
      "type" : 0,
      "exported" : true
    }, {
      "name" : "Kind",
      "package" : 0,
      "type" : 37,
      "exported" : true
    }, {
      "name" : "common",
      "package" : 0,
      "type" : 67,
      "exported" : false
    }, {
      "name" : "makeFuncStub",
      "package" : 0,
      "type" : 89,
      "exported" : false
    }, {
      "name" : "funcLayout",
      "package" : 0,
      "type" : 104,
      "exported" : false
    } ],
    "line-end" : 68,
    "line-start" : 48,
    "names" : [ "MakeFunc" ],
    "package" : 0,
    "packages" : [ {
      "name" : "reflect",
      "path" : "reflect"
    }, {
      "name" : "unsafe",
      "path" : "unsafe"
    }, {
      "name" : "sync",
      "path" : "sync"
    } ],
    "params" : [ 17, 18 ],
    "receivers" : [ ],
    "results" : [ 19 ],
    "type" : "function",
    "types" : [ {
      "name" : "func(typ reflect.Type, fn func(args []reflect.Value) (results []reflect.Value)) reflect.Value",
      "params" : 1,
      "recv" : -1,
      "results" : 79,
      "type" : "Signature",
      "underlying" : 0,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "typ",
        "type" : 2
      }, {
        "name" : "fn",
        "type" : 75
      } ],
      "name" : "(typ reflect.Type, fn func(args []reflect.Value) (results []reflect.Value))",
      "type" : "Tuple",
      "underlying" : 1
    }, {
      "local-name" : "Type",
      "name" : "reflect.Type",
      "package" : 0,
      "type" : "Named",
      "underlying" : 3
    }, {
      "methods" : [ {
        "name" : "Align",
        "type" : 4
      }, {
        "name" : "AssignableTo",
        "type" : 8
      }, {
        "name" : "Bits",
        "type" : 4
      }, {
        "name" : "ChanDir",
        "type" : 12
      }, {
        "name" : "Comparable",
        "type" : 15
      }, {
        "name" : "ConvertibleTo",
        "type" : 8
      }, {
        "name" : "Elem",
        "type" : 16
      }, {
        "name" : "Field",
        "type" : 18
      }, {
        "name" : "FieldAlign",
        "type" : 4
      }, {
        "name" : "FieldByIndex",
        "type" : 27
      }, {
        "name" : "FieldByName",
        "type" : 29
      }, {
        "name" : "FieldByNameFunc",
        "type" : 32
      }, {
        "name" : "Implements",
        "type" : 8
      }, {
        "name" : "In",
        "type" : 36
      }, {
        "name" : "IsVariadic",
        "type" : 15
      }, {
        "name" : "Key",
        "type" : 16
      }, {
        "name" : "Kind",
        "type" : 37
      }, {
        "name" : "Len",
        "type" : 4
      }, {
        "name" : "Method",
        "type" : 41
      }, {
        "name" : "MethodByName",
        "type" : 62
      }, {
        "name" : "Name",
        "type" : 64
      }, {
        "name" : "NumField",
        "type" : 4
      }, {
        "name" : "NumIn",
        "type" : 4
      }, {
        "name" : "NumMethod",
        "type" : 4
      }, {
        "name" : "NumOut",
        "type" : 4
      }, {
        "name" : "Out",
        "type" : 36
      }, {
        "name" : "PkgPath",
        "type" : 64
      }, {
        "name" : "Size",
        "type" : 65
      }, {
        "name" : "String",
        "type" : 64
      }, {
        "name" : "common",
        "type" : 67
      }, {
        "name" : "uncommon",
        "type" : 69
      } ],
      "name" : "interface{Align() int; AssignableTo(u reflect.Type) bool; Bits() int; ChanDir() reflect.ChanDir; Comparable() bool; ConvertibleTo(u reflect.Type) bool; Elem() reflect.Type; Field(i int) reflect.StructField; FieldAlign() int; FieldByIndex(index []int) reflect.StructField; FieldByName(name string) (reflect.StructField, bool); FieldByNameFunc(match func(string) bool) (reflect.StructField, bool); Implements(u reflect.Type) bool; In(i int) reflect.Type; IsVariadic() bool; Key() reflect.Type; Kind() reflect.Kind; Len() int; Method(int) reflect.Method; MethodByName(string) (reflect.Method, bool); Name() string; NumField() int; NumIn() int; NumMethod() int; NumOut() int; Out(i int) reflect.Type; PkgPath() string; Size() uintptr; String() string; common() *reflect.rtype; uncommon() *reflect.uncommonType}",
      "type" : "Interface",
      "underlying" : 3
    }, {
      "name" : "(reflect.Type) func() int",
      "params" : 5,
      "recv" : 0,
      "results" : 6,
      "type" : "Signature",
      "underlying" : 4,
      "variadic" : false
    }, {
      "fields" : [ ],
      "name" : "()",
      "type" : "Tuple",
      "underlying" : 5
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 7
      } ],
      "name" : "(int)",
      "type" : "Tuple",
      "underlying" : 6
    }, {
      "name" : "int",
      "type" : "Basic",
      "underlying" : 7
    }, {
      "name" : "(reflect.Type) func(u reflect.Type) bool",
      "params" : 9,
      "recv" : 1,
      "results" : 10,
      "type" : "Signature",
      "underlying" : 8,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "u",
        "type" : 2
      } ],
      "name" : "(u reflect.Type)",
      "type" : "Tuple",
      "underlying" : 9
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 11
      } ],
      "name" : "(bool)",
      "type" : "Tuple",
      "underlying" : 10
    }, {
      "name" : "bool",
      "type" : "Basic",
      "underlying" : 11
    }, {
      "name" : "(reflect.Type) func() reflect.ChanDir",
      "params" : 5,
      "recv" : 2,
      "results" : 13,
      "type" : "Signature",
      "underlying" : 12,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 14
      } ],
      "name" : "(reflect.ChanDir)",
      "type" : "Tuple",
      "underlying" : 13
    }, {
      "local-name" : "ChanDir",
      "name" : "reflect.ChanDir",
      "package" : 0,
      "type" : "Named",
      "underlying" : 7
    }, {
      "name" : "(reflect.Type) func() bool",
      "params" : 5,
      "recv" : 3,
      "results" : 10,
      "type" : "Signature",
      "underlying" : 15,
      "variadic" : false
    }, {
      "name" : "(reflect.Type) func() reflect.Type",
      "params" : 5,
      "recv" : 4,
      "results" : 17,
      "type" : "Signature",
      "underlying" : 16,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 2
      } ],
      "name" : "(reflect.Type)",
      "type" : "Tuple",
      "underlying" : 17
    }, {
      "name" : "(reflect.Type) func(i int) reflect.StructField",
      "params" : 19,
      "recv" : 5,
      "results" : 20,
      "type" : "Signature",
      "underlying" : 18,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "i",
        "type" : 7
      } ],
      "name" : "(i int)",
      "type" : "Tuple",
      "underlying" : 19
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 21
      } ],
      "name" : "(reflect.StructField)",
      "type" : "Tuple",
      "underlying" : 20
    }, {
      "local-name" : "StructField",
      "name" : "reflect.StructField",
      "package" : 0,
      "type" : "Named",
      "underlying" : 22
    }, {
      "fields" : [ {
        "name" : "Name",
        "type" : 23
      }, {
        "name" : "PkgPath",
        "type" : 23
      }, {
        "name" : "Type",
        "type" : 2
      }, {
        "name" : "Tag",
        "type" : 24
      }, {
        "name" : "Offset",
        "type" : 25
      }, {
        "name" : "Index",
        "type" : 26
      }, {
        "name" : "Anonymous",
        "type" : 11
      } ],
      "name" : "struct{Name string; PkgPath string; Type reflect.Type; Tag reflect.StructTag; Offset uintptr; Index []int; Anonymous bool}",
      "type" : "Struct",
      "underlying" : 22
    }, {
      "name" : "string",
      "type" : "Basic",
      "underlying" : 23
    }, {
      "local-name" : "StructTag",
      "name" : "reflect.StructTag",
      "package" : 0,
      "type" : "Named",
      "underlying" : 23
    }, {
      "name" : "uintptr",
      "type" : "Basic",
      "underlying" : 25
    }, {
      "elem" : 7,
      "name" : "[]int",
      "type" : "Slice",
      "underlying" : 26
    }, {
      "name" : "(reflect.Type) func(index []int) reflect.StructField",
      "params" : 28,
      "recv" : 6,
      "results" : 20,
      "type" : "Signature",
      "underlying" : 27,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "index",
        "type" : 26
      } ],
      "name" : "(index []int)",
      "type" : "Tuple",
      "underlying" : 28
    }, {
      "name" : "(reflect.Type) func(name string) (reflect.StructField, bool)",
      "params" : 30,
      "recv" : 7,
      "results" : 31,
      "type" : "Signature",
      "underlying" : 29,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "name",
        "type" : 23
      } ],
      "name" : "(name string)",
      "type" : "Tuple",
      "underlying" : 30
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 21
      }, {
        "name" : "",
        "type" : 11
      } ],
      "name" : "(reflect.StructField, bool)",
      "type" : "Tuple",
      "underlying" : 31
    }, {
      "name" : "(reflect.Type) func(match func(string) bool) (reflect.StructField, bool)",
      "params" : 33,
      "recv" : 8,
      "results" : 31,
      "type" : "Signature",
      "underlying" : 32,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "match",
        "type" : 34
      } ],
      "name" : "(match func(string) bool)",
      "type" : "Tuple",
      "underlying" : 33
    }, {
      "name" : "func(string) bool",
      "params" : 35,
      "recv" : -1,
      "results" : 10,
      "type" : "Signature",
      "underlying" : 34,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 23
      } ],
      "name" : "(string)",
      "type" : "Tuple",
      "underlying" : 35
    }, {
      "name" : "(reflect.Type) func(i int) reflect.Type",
      "params" : 19,
      "recv" : 9,
      "results" : 17,
      "type" : "Signature",
      "underlying" : 36,
      "variadic" : false
    }, {
      "name" : "(reflect.Type) func() reflect.Kind",
      "params" : 5,
      "recv" : 10,
      "results" : 38,
      "type" : "Signature",
      "underlying" : 37,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 39
      } ],
      "name" : "(reflect.Kind)",
      "type" : "Tuple",
      "underlying" : 38
    }, {
      "local-name" : "Kind",
      "name" : "reflect.Kind",
      "package" : 0,
      "type" : "Named",
      "underlying" : 40
    }, {
      "name" : "uint",
      "type" : "Basic",
      "underlying" : 40
    }, {
      "name" : "(reflect.Type) func(int) reflect.Method",
      "params" : 6,
      "recv" : 11,
      "results" : 42,
      "type" : "Signature",
      "underlying" : 41,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 43
      } ],
      "name" : "(reflect.Method)",
      "type" : "Tuple",
      "underlying" : 42
    }, {
      "local-name" : "Method",
      "name" : "reflect.Method",
      "package" : 0,
      "type" : "Named",
      "underlying" : 44
    }, {
      "fields" : [ {
        "name" : "Name",
        "type" : 23
      }, {
        "name" : "PkgPath",
        "type" : 23
      }, {
        "name" : "Type",
        "type" : 2
      }, {
        "name" : "Func",
        "type" : 45
      }, {
        "name" : "Index",
        "type" : 7
      } ],
      "name" : "struct{Name string; PkgPath string; Type reflect.Type; Func reflect.Value; Index int}",
      "type" : "Struct",
      "underlying" : 44
    }, {
      "local-name" : "Value",
      "name" : "reflect.Value",
      "package" : 0,
      "type" : "Named",
      "underlying" : 46
    }, {
      "fields" : [ {
        "name" : "typ",
        "type" : 47
      }, {
        "name" : "ptr",
        "type" : 55
      }, {
        "name" : "flag",
        "type" : 61
      } ],
      "name" : "struct{typ *reflect.rtype; ptr unsafe.Pointer; reflect.flag}",
      "type" : "Struct",
      "underlying" : 46
    }, {
      "elem" : 48,
      "name" : "*reflect.rtype",
      "type" : "Pointer",
      "underlying" : 47
    }, {
      "local-name" : "rtype",
      "name" : "reflect.rtype",
      "package" : 0,
      "type" : "Named",
      "underlying" : 49
    }, {
      "fields" : [ {
        "name" : "size",
        "type" : 25
      }, {
        "name" : "ptrdata",
        "type" : 25
      }, {
        "name" : "hash",
        "type" : 50
      }, {
        "name" : "tflag",
        "type" : 51
      }, {
        "name" : "align",
        "type" : 52
      }, {
        "name" : "fieldAlign",
        "type" : 52
      }, {
        "name" : "kind",
        "type" : 52
      }, {
        "name" : "equal",
        "type" : 53
      }, {
        "name" : "gcdata",
        "type" : 56
      }, {
        "name" : "str",
        "type" : 58
      }, {
        "name" : "ptrToThis",
        "type" : 60
      } ],
      "name" : "struct{size uintptr; ptrdata uintptr; hash uint32; tflag reflect.tflag; align uint8; fieldAlign uint8; kind uint8; equal func(unsafe.Pointer, unsafe.Pointer) bool; gcdata *byte; str reflect.nameOff; ptrToThis reflect.typeOff}",
      "type" : "Struct",
      "underlying" : 49
    }, {
      "name" : "uint32",
      "type" : "Basic",
      "underlying" : 50
    }, {
      "local-name" : "tflag",
      "name" : "reflect.tflag",
      "package" : 0,
      "type" : "Named",
      "underlying" : 52
    }, {
      "name" : "uint8",
      "type" : "Basic",
      "underlying" : 52
    }, {
      "name" : "func(unsafe.Pointer, unsafe.Pointer) bool",
      "params" : 54,
      "recv" : -1,
      "results" : 10,
      "type" : "Signature",
      "underlying" : 53,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 55
      }, {
        "name" : "",
        "type" : 55
      } ],
      "name" : "(unsafe.Pointer, unsafe.Pointer)",
      "type" : "Tuple",
      "underlying" : 54
    }, {
      "local-name" : "Pointer",
      "name" : "unsafe.Pointer",
      "package" : 1,
      "type" : "Basic",
      "underlying" : 55
    }, {
      "elem" : 57,
      "name" : "*byte",
      "type" : "Pointer",
      "underlying" : 56
    }, {
      "name" : "byte",
      "type" : "Basic",
      "underlying" : 57
    }, {
      "local-name" : "nameOff",
      "name" : "reflect.nameOff",
      "package" : 0,
      "type" : "Named",
      "underlying" : 59
    }, {
      "name" : "int32",
      "type" : "Basic",
      "underlying" : 59
    }, {
      "local-name" : "typeOff",
      "name" : "reflect.typeOff",
      "package" : 0,
      "type" : "Named",
      "underlying" : 59
    }, {
      "local-name" : "flag",
      "name" : "reflect.flag",
      "package" : 0,
      "type" : "Named",
      "underlying" : 25
    }, {
      "name" : "(reflect.Type) func(string) (reflect.Method, bool)",
      "params" : 35,
      "recv" : 12,
      "results" : 63,
      "type" : "Signature",
      "underlying" : 62,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 43
      }, {
        "name" : "",
        "type" : 11
      } ],
      "name" : "(reflect.Method, bool)",
      "type" : "Tuple",
      "underlying" : 63
    }, {
      "name" : "(reflect.Type) func() string",
      "params" : 5,
      "recv" : 13,
      "results" : 35,
      "type" : "Signature",
      "underlying" : 64,
      "variadic" : false
    }, {
      "name" : "(reflect.Type) func() uintptr",
      "params" : 5,
      "recv" : 14,
      "results" : 66,
      "type" : "Signature",
      "underlying" : 65,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 25
      } ],
      "name" : "(uintptr)",
      "type" : "Tuple",
      "underlying" : 66
    }, {
      "name" : "(reflect.Type) func() *reflect.rtype",
      "params" : 5,
      "recv" : 15,
      "results" : 68,
      "type" : "Signature",
      "underlying" : 67,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 47
      } ],
      "name" : "(*reflect.rtype)",
      "type" : "Tuple",
      "underlying" : 68
    }, {
      "name" : "(reflect.Type) func() *reflect.uncommonType",
      "params" : 5,
      "recv" : 16,
      "results" : 70,
      "type" : "Signature",
      "underlying" : 69,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 71
      } ],
      "name" : "(*reflect.uncommonType)",
      "type" : "Tuple",
      "underlying" : 70
    }, {
      "elem" : 72,
      "name" : "*reflect.uncommonType",
      "type" : "Pointer",
      "underlying" : 71
    }, {
      "local-name" : "uncommonType",
      "name" : "reflect.uncommonType",
      "package" : 0,
      "type" : "Named",
      "underlying" : 73
    }, {
      "fields" : [ {
        "name" : "pkgPath",
        "type" : 58
      }, {
        "name" : "mcount",
        "type" : 74
      }, {
        "name" : "xcount",
        "type" : 74
      }, {
        "name" : "moff",
        "type" : 50
      }, {
        "name" : "_",
        "type" : 50
      } ],
      "name" : "struct{pkgPath reflect.nameOff; mcount uint16; xcount uint16; moff uint32; _ uint32}",
      "type" : "Struct",
      "underlying" : 73
    }, {
      "name" : "uint16",
      "type" : "Basic",
      "underlying" : 74
    }, {
      "name" : "func(args []reflect.Value) (results []reflect.Value)",
      "params" : 76,
      "recv" : -1,
      "results" : 78,
      "type" : "Signature",
      "underlying" : 75,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "args",
        "type" : 77
      } ],
      "name" : "(args []reflect.Value)",
      "type" : "Tuple",
      "underlying" : 76
    }, {
      "elem" : 45,
      "name" : "[]reflect.Value",
      "type" : "Slice",
      "underlying" : 77
    }, {
      "fields" : [ {
        "name" : "results",
        "type" : 77
      } ],
      "name" : "(results []reflect.Value)",
      "type" : "Tuple",
      "underlying" : 78
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 45
      } ],
      "name" : "(reflect.Value)",
      "type" : "Tuple",
      "underlying" : 79
    }, {
      "name" : "untyped bool",
      "type" : "Basic",
      "underlying" : 80
    }, {
      "name" : "func() reflect.Kind",
      "params" : 5,
      "recv" : -1,
      "results" : 38,
      "type" : "Signature",
      "underlying" : 81,
      "variadic" : false
    }, {
      "name" : "func(interface{})",
      "params" : 83,
      "recv" : -1,
      "results" : 5,
      "type" : "Signature",
      "underlying" : 82,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 84
      } ],
      "name" : "(interface{})",
      "type" : "Tuple",
      "underlying" : 83
    }, {
      "methods" : [ ],
      "name" : "interface{}",
      "type" : "Interface",
      "underlying" : 84
    }, {
      "name" : "func() *reflect.rtype",
      "params" : 5,
      "recv" : -1,
      "results" : 68,
      "type" : "Signature",
      "underlying" : 85,
      "variadic" : false
    }, {
      "elem" : 87,
      "name" : "*reflect.funcType",
      "type" : "Pointer",
      "underlying" : 86
    }, {
      "local-name" : "funcType",
      "name" : "reflect.funcType",
      "package" : 0,
      "type" : "Named",
      "underlying" : 88
    }, {
      "fields" : [ {
        "name" : "rtype",
        "type" : 48
      }, {
        "name" : "inCount",
        "type" : 74
      }, {
        "name" : "outCount",
        "type" : 74
      } ],
      "name" : "struct{reflect.rtype; inCount uint16; outCount uint16}",
      "type" : "Struct",
      "underlying" : 88
    }, {
      "name" : "func()",
      "params" : 5,
      "recv" : -1,
      "results" : 5,
      "type" : "Signature",
      "underlying" : 89,
      "variadic" : false
    }, {
      "elem" : 25,
      "name" : "*uintptr",
      "type" : "Pointer",
      "underlying" : 90
    }, {
      "elem" : 90,
      "name" : "**uintptr",
      "type" : "Pointer",
      "underlying" : 91
    }, {
      "elem" : 89,
      "name" : "*func()",
      "type" : "Pointer",
      "underlying" : 92
    }, {
      "fields" : [ {
        "name" : "frametype",
        "type" : 47
      }, {
        "name" : "argSize",
        "type" : 25
      }, {
        "name" : "retOffset",
        "type" : 25
      }, {
        "name" : "stk",
        "type" : 94
      }, {
        "name" : "framePool",
        "type" : 98
      } ],
      "name" : "(frametype *reflect.rtype, argSize uintptr, retOffset uintptr, stk *reflect.bitVector, framePool *sync.Pool)",
      "type" : "Tuple",
      "underlying" : 93
    }, {
      "elem" : 95,
      "name" : "*reflect.bitVector",
      "type" : "Pointer",
      "underlying" : 94
    }, {
      "local-name" : "bitVector",
      "name" : "reflect.bitVector",
      "package" : 0,
      "type" : "Named",
      "underlying" : 96
    }, {
      "fields" : [ {
        "name" : "n",
        "type" : 50
      }, {
        "name" : "data",
        "type" : 97
      } ],
      "name" : "struct{n uint32; data []byte}",
      "type" : "Struct",
      "underlying" : 96
    }, {
      "elem" : 57,
      "name" : "[]byte",
      "type" : "Slice",
      "underlying" : 97
    }, {
      "elem" : 99,
      "name" : "*sync.Pool",
      "type" : "Pointer",
      "underlying" : 98
    }, {
      "local-name" : "Pool",
      "name" : "sync.Pool",
      "package" : 2,
      "type" : "Named",
      "underlying" : 100
    }, {
      "fields" : [ {
        "name" : "noCopy",
        "type" : 101
      }, {
        "name" : "local",
        "type" : 55
      }, {
        "name" : "localSize",
        "type" : 25
      }, {
        "name" : "victim",
        "type" : 55
      }, {
        "name" : "victimSize",
        "type" : 25
      }, {
        "name" : "New",
        "type" : 103
      } ],
      "name" : "struct{noCopy sync.noCopy; local unsafe.Pointer; localSize uintptr; victim unsafe.Pointer; victimSize uintptr; New func() interface{}}",
      "type" : "Struct",
      "underlying" : 100
    }, {
      "local-name" : "noCopy",
      "name" : "sync.noCopy",
      "package" : 2,
      "type" : "Named",
      "underlying" : 102
    }, {
      "fields" : [ ],
      "name" : "struct{}",
      "type" : "Struct",
      "underlying" : 102
    }, {
      "name" : "func() interface{}",
      "params" : 5,
      "recv" : -1,
      "results" : 83,
      "type" : "Signature",
      "underlying" : 103,
      "variadic" : false
    }, {
      "name" : "func(t *reflect.funcType, rcvr *reflect.rtype) (frametype *reflect.rtype, argSize uintptr, retOffset uintptr, stk *reflect.bitVector, framePool *sync.Pool)",
      "params" : 105,
      "recv" : -1,
      "results" : 93,
      "type" : "Signature",
      "underlying" : 104,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "t",
        "type" : 86
      }, {
        "name" : "rcvr",
        "type" : 47
      } ],
      "name" : "(t *reflect.funcType, rcvr *reflect.rtype)",
      "type" : "Tuple",
      "underlying" : 105
    }, {
      "name" : "untyped nil",
      "type" : "Basic",
      "underlying" : 106
    }, {
      "elem" : 108,
      "name" : "*reflect.makeFuncImpl",
      "type" : "Pointer",
      "underlying" : 107
    }, {
      "local-name" : "makeFuncImpl",
      "name" : "reflect.makeFuncImpl",
      "package" : 0,
      "type" : "Named",
      "underlying" : 109
    }, {
      "fields" : [ {
        "name" : "code",
        "type" : 25
      }, {
        "name" : "stack",
        "type" : 94
      }, {
        "name" : "argLen",
        "type" : 25
      }, {
        "name" : "ftyp",
        "type" : 86
      }, {
        "name" : "fn",
        "type" : 110
      } ],
      "name" : "struct{code uintptr; stack *reflect.bitVector; argLen uintptr; ftyp *reflect.funcType; fn func([]reflect.Value) []reflect.Value}",
      "type" : "Struct",
      "underlying" : 109
    }, {
      "name" : "func([]reflect.Value) []reflect.Value",
      "params" : 111,
      "recv" : -1,
      "results" : 111,
      "type" : "Signature",
      "underlying" : 110,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 77
      } ],
      "name" : "([]reflect.Value)",
      "type" : "Tuple",
      "underlying" : 111
    } ],
    "variables" : [ {
      "name" : "",
      "package" : 0,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 0,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 0,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 0,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 0,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 0,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 0,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 0,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 0,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 0,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 0,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 0,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 0,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 0,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 0,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 0,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 0,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "typ",
      "package" : 0,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "fn",
      "package" : 0,
      "type" : 75,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "[res0]",
      "package" : 0,
      "type" : 45,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "t",
      "package" : 0,
      "type" : 47,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "ftyp",
      "package" : 0,
      "type" : 86,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "dummy",
      "package" : 0,
      "type" : 89,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "code",
      "package" : 0,
      "type" : 25,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "stack",
      "package" : 0,
      "type" : 94,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "argLen",
      "package" : 0,
      "type" : 25,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "_",
      "package" : 0,
      "type" : 47,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "_",
      "package" : 0,
      "type" : 25,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "_",
      "package" : 0,
      "type" : 98,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "code",
      "package" : 0,
      "type" : 25,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "stack",
      "package" : 0,
      "type" : 94,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "argLen",
      "package" : 0,
      "type" : 25,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "ftyp",
      "package" : 0,
      "type" : 86,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "fn",
      "package" : 0,
      "type" : 110,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "impl",
      "package" : 0,
      "type" : 107,
      "exported" : false,
      "embedded" : false,
      "field" : false
    } ]
  },
  "go-version" : "1.14.3"
}