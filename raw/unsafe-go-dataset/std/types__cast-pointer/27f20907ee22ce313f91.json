{
  "usage" : {
    "file" : "value.go",
    "label1" : "cast-pointer",
    "label2" : "types",
    "line" : "1444",
    "module" : "std",
    "pkg" : "reflect",
    "project" : "kubernetes/kubernetes",
    "snippet" : "return **(**uintptr)(unsafe.Pointer(&f))",
    "version" : "std"
  },
  "cfg" : {
    "blocks" : [ {
      "update-vars" : [ ],
      "successors" : [ 2 ],
      "in-vars" : [ 0 ],
      "exit" : false,
      "out-vars" : [ 0 ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[entry]",
      "entry" : true,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ ],
      "in-vars" : [ ],
      "exit" : true,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[exit]",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 3 ],
      "in-vars" : [ 0 ],
      "exit" : false,
      "out-vars" : [ 0, 3 ],
      "decl-vars" : [ 3 ],
      "line-start" : 1431,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "k"
          }
        } ],
        "right" : [ {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "function" : 1,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "kind"
            },
            "go-type" : 25,
            "kind" : "expression",
            "target" : {
              "go-type" : 4,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "v",
                "variable" : 0
              }
            },
            "type" : "selector"
          },
          "go-type" : 23,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 1431,
      "code" : "k := v.kind()",
      "entry" : false,
      "use-vars" : [ 0 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 4, 6, 14, 16 ],
      "in-vars" : [ 0, 3 ],
      "exit" : false,
      "out-vars" : [ 0 ],
      "decl-vars" : [ ],
      "line-start" : 1432,
      "ast" : {
        "condition" : {
          "go-type" : 23,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "k",
            "variable" : 3
          }
        },
        "kind" : "statement",
        "type" : "switch"
      },
      "assign-vars" : [ ],
      "line-end" : 1456,
      "code" : "switch k {\ncase Chan, Map, Ptr, UnsafePointer:\n\treturn uintptr(v.pointer())\ncase Func:\n\tif v.flag&flagMethod != 0 {\n\n\t\tf := methodValueCall\n\t\treturn **(**uintptr)(unsafe.Pointer(&f))\n\t}\n\tp := v.pointer()\n\n\tif p != nil {\n\t\tp = *(*unsafe.Pointer)(p)\n\t}\n\treturn uintptr(p)\n\ncase Slice:\n\treturn (*SliceHeader)(v.ptr).Data\n}",
      "entry" : false,
      "use-vars" : [ 3 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 5 ],
      "in-vars" : [ 0 ],
      "exit" : false,
      "out-vars" : [ 0 ],
      "decl-vars" : [ ],
      "line-start" : 1433,
      "ast" : {
        "expressions" : [ {
          "go-type" : 23,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "18"
          }
        }, {
          "go-type" : 23,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "21"
          }
        }, {
          "go-type" : 23,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "22"
          }
        }, {
          "go-type" : 23,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "26"
          }
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 1434,
      "code" : "case Chan, Map, Ptr, UnsafePointer:\n\treturn uintptr(v.pointer())",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 0 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 1434,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "coerced-to" : {
            "go-type" : 3,
            "kind" : "type",
            "type" : "identifier",
            "value" : {
              "go-type" : 3,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "uintptr"
            }
          },
          "go-type" : 3,
          "kind" : "expression",
          "target" : {
            "arguments" : [ ],
            "ellipsis" : false,
            "function" : {
              "field" : {
                "function" : 2,
                "ident-kind" : "Func",
                "kind" : "ident",
                "value" : "pointer"
              },
              "go-type" : 28,
              "kind" : "expression",
              "target" : {
                "go-type" : 4,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "v",
                  "variable" : 0
                }
              },
              "type" : "selector"
            },
            "go-type" : 14,
            "kind" : "expression",
            "type" : "call"
          },
          "type" : "cast"
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 1434,
      "code" : "return uintptr(v.pointer())",
      "entry" : false,
      "use-vars" : [ 0 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 7 ],
      "in-vars" : [ 0 ],
      "exit" : false,
      "out-vars" : [ 0 ],
      "decl-vars" : [ ],
      "line-start" : 1435,
      "ast" : {
        "expressions" : [ {
          "go-type" : 23,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "19"
          }
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 1452,
      "code" : "case Func:\n\tif v.flag&flagMethod != 0 {\n\n\t\tf := methodValueCall\n\t\treturn **(**uintptr)(unsafe.Pointer(&f))\n\t}\n\tp := v.pointer()\n\n\tif p != nil {\n\t\tp = *(*unsafe.Pointer)(p)\n\t}\n\treturn uintptr(p)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 8, 10 ],
      "in-vars" : [ 0 ],
      "exit" : false,
      "out-vars" : [ 0 ],
      "decl-vars" : [ ],
      "line-start" : 1436,
      "ast" : {
        "condition" : {
          "go-type" : 31,
          "kind" : "expression",
          "left" : {
            "go-type" : 22,
            "kind" : "expression",
            "left" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "flag",
                "variable" : 5
              },
              "go-type" : 22,
              "kind" : "expression",
              "target" : {
                "go-type" : 4,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "v",
                  "variable" : 0
                }
              },
              "type" : "selector"
            },
            "operator" : "&",
            "right" : {
              "go-type" : 22,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "512"
              }
            },
            "type" : "binary"
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 22,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 1445,
      "code" : "if v.flag&flagMethod != 0 {\n\n\tf := methodValueCall\n\treturn **(**uintptr)(unsafe.Pointer(&f))\n}",
      "entry" : false,
      "use-vars" : [ 0 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 9 ],
      "in-vars" : [ ],
      "exit" : false,
      "out-vars" : [ 6 ],
      "decl-vars" : [ 6 ],
      "line-start" : 1443,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "f"
          }
        } ],
        "right" : [ {
          "go-type" : 32,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "function" : 3,
            "ident-kind" : "Func",
            "kind" : "ident",
            "value" : "methodValueCall"
          }
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 1443,
      "code" : "f := methodValueCall",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 6 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 1444,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 3,
          "kind" : "expression",
          "target" : {
            "go-type" : 33,
            "kind" : "expression",
            "target" : {
              "coerced-to" : {
                "contained" : {
                  "contained" : {
                    "go-type" : 3,
                    "kind" : "type",
                    "type" : "identifier",
                    "value" : {
                      "go-type" : 3,
                      "ident-kind" : "TypeName",
                      "kind" : "ident",
                      "value" : "uintptr"
                    }
                  },
                  "go-type" : 33,
                  "kind" : "type",
                  "type" : "pointer"
                },
                "go-type" : 34,
                "kind" : "type",
                "type" : "pointer"
              },
              "go-type" : 34,
              "kind" : "expression",
              "target" : {
                "coerced-to" : {
                  "go-type" : 14,
                  "kind" : "type",
                  "qualifier" : {
                    "ident-kind" : "PkgName",
                    "kind" : "ident",
                    "package" : 1,
                    "value" : "unsafe"
                  },
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 14,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "Pointer"
                  }
                },
                "go-type" : 14,
                "kind" : "expression",
                "target" : {
                  "go-type" : 35,
                  "kind" : "expression",
                  "operator" : "&",
                  "target" : {
                    "go-type" : 32,
                    "kind" : "expression",
                    "type" : "identifier",
                    "value" : {
                      "ident-kind" : "Var",
                      "kind" : "ident",
                      "value" : "f",
                      "variable" : 6
                    }
                  },
                  "type" : "unary"
                },
                "type" : "cast"
              },
              "type" : "cast"
            },
            "type" : "star"
          },
          "type" : "star"
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 1444,
      "code" : "return **(**uintptr)(unsafe.Pointer(&f))",
      "entry" : false,
      "use-vars" : [ 6 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 11 ],
      "in-vars" : [ 0 ],
      "exit" : false,
      "out-vars" : [ 7 ],
      "decl-vars" : [ 7 ],
      "line-start" : 1446,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "p"
          }
        } ],
        "right" : [ {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "function" : 2,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "pointer"
            },
            "go-type" : 28,
            "kind" : "expression",
            "target" : {
              "go-type" : 4,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "v",
                "variable" : 0
              }
            },
            "type" : "selector"
          },
          "go-type" : 14,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 1446,
      "code" : "p := v.pointer()",
      "entry" : false,
      "use-vars" : [ 0 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 12, 13 ],
      "in-vars" : [ 7 ],
      "exit" : false,
      "out-vars" : [ 7 ],
      "decl-vars" : [ ],
      "line-start" : 1449,
      "ast" : {
        "condition" : {
          "go-type" : 31,
          "kind" : "expression",
          "left" : {
            "go-type" : 14,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "p",
              "variable" : 7
            }
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 14,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Nil",
              "kind" : "ident",
              "value" : "nil"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 1451,
      "code" : "if p != nil {\n\tp = *(*unsafe.Pointer)(p)\n}",
      "entry" : false,
      "use-vars" : [ 7 ]
    }, {
      "update-vars" : [ 7 ],
      "successors" : [ 13 ],
      "in-vars" : [ 7 ],
      "exit" : false,
      "out-vars" : [ 7 ],
      "decl-vars" : [ ],
      "line-start" : 1450,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 14,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "p",
            "variable" : 7
          }
        } ],
        "right" : [ {
          "go-type" : 14,
          "kind" : "expression",
          "target" : {
            "coerced-to" : {
              "contained" : {
                "go-type" : 14,
                "kind" : "type",
                "qualifier" : {
                  "ident-kind" : "PkgName",
                  "kind" : "ident",
                  "package" : 1,
                  "value" : "unsafe"
                },
                "type" : "identifier",
                "value" : {
                  "go-type" : 14,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "Pointer"
                }
              },
              "go-type" : 36,
              "kind" : "type",
              "type" : "pointer"
            },
            "go-type" : 36,
            "kind" : "expression",
            "target" : {
              "go-type" : 14,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "p",
                "variable" : 7
              }
            },
            "type" : "cast"
          },
          "type" : "star"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 7 ],
      "line-end" : 1450,
      "code" : "p = *(*unsafe.Pointer)(p)",
      "entry" : false,
      "use-vars" : [ 7 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 7 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 1452,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "coerced-to" : {
            "go-type" : 3,
            "kind" : "type",
            "type" : "identifier",
            "value" : {
              "go-type" : 3,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "uintptr"
            }
          },
          "go-type" : 3,
          "kind" : "expression",
          "target" : {
            "go-type" : 14,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "p",
              "variable" : 7
            }
          },
          "type" : "cast"
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 1452,
      "code" : "return uintptr(p)",
      "entry" : false,
      "use-vars" : [ 7 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 15 ],
      "in-vars" : [ 0 ],
      "exit" : false,
      "out-vars" : [ 0 ],
      "decl-vars" : [ ],
      "line-start" : 1454,
      "ast" : {
        "expressions" : [ {
          "go-type" : 23,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "23"
          }
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 1455,
      "code" : "case Slice:\n\treturn (*SliceHeader)(v.ptr).Data",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 0 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 1455,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "Data",
            "variable" : 9
          },
          "go-type" : 3,
          "kind" : "expression",
          "target" : {
            "coerced-to" : {
              "contained" : {
                "go-type" : 38,
                "kind" : "type",
                "type" : "identifier",
                "value" : {
                  "go-type" : 38,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "SliceHeader"
                }
              },
              "go-type" : 37,
              "kind" : "type",
              "type" : "pointer"
            },
            "go-type" : 37,
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "ptr",
                "variable" : 8
              },
              "go-type" : 14,
              "kind" : "expression",
              "target" : {
                "go-type" : 4,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "v",
                  "variable" : 0
                }
              },
              "type" : "selector"
            },
            "type" : "cast"
          },
          "type" : "selector"
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 1455,
      "code" : "return (*SliceHeader)(v.ptr).Data",
      "entry" : false,
      "use-vars" : [ 0 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 0 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 1457,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 44,
            "kind" : "expression",
            "operator" : "&",
            "target" : {
              "declared" : {
                "go-type" : 45,
                "kind" : "type",
                "type" : "identifier",
                "value" : {
                  "go-type" : 45,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "ValueError"
                }
              },
              "go-type" : 45,
              "kind" : "literal",
              "type" : "composite",
              "values" : [ {
                "go-type" : 47,
                "kind" : "constant",
                "value" : {
                  "type" : "STRING",
                  "value" : "reflect.Value.Pointer"
                }
              }, {
                "arguments" : [ ],
                "ellipsis" : false,
                "function" : {
                  "field" : {
                    "function" : 1,
                    "ident-kind" : "Func",
                    "kind" : "ident",
                    "value" : "kind"
                  },
                  "go-type" : 25,
                  "kind" : "expression",
                  "target" : {
                    "go-type" : 4,
                    "kind" : "expression",
                    "type" : "identifier",
                    "value" : {
                      "ident-kind" : "Var",
                      "kind" : "ident",
                      "value" : "v",
                      "variable" : 0
                    }
                  },
                  "type" : "selector"
                },
                "go-type" : 23,
                "kind" : "expression",
                "type" : "call"
              } ]
            },
            "type" : "unary"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 41,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Builtin",
              "kind" : "ident",
              "value" : "panic"
            }
          },
          "go-type" : 1,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 1457,
      "code" : "panic(&ValueError{\"reflect.Value.Pointer\", v.kind()})",
      "entry" : false,
      "use-vars" : [ 0 ]
    } ],
    "code" : "// Pointer returns v's value as a uintptr.\n// It returns uintptr instead of unsafe.Pointer so that\n// code using reflect cannot obtain unsafe.Pointers\n// without importing the unsafe package explicitly.\n// It panics if v's Kind is not Chan, Func, Map, Ptr, Slice, or UnsafePointer.\n//\n// If v's Kind is Func, the returned pointer is an underlying\n// code pointer, but not necessarily enough to identify a\n// single function uniquely. The only guarantee is that the\n// result is zero if and only if v is a nil func Value.\n//\n// If v's Kind is Slice, the returned pointer is to the first\n// element of the slice. If the slice is nil the returned value\n// is 0.  If the slice is empty but non-nil the return value is non-zero.\nfunc (v Value) Pointer() uintptr {\n\n\tk := v.kind()\n\tswitch k {\n\tcase Chan, Map, Ptr, UnsafePointer:\n\t\treturn uintptr(v.pointer())\n\tcase Func:\n\t\tif v.flag&flagMethod != 0 {\n\n\t\t\tf := methodValueCall\n\t\t\treturn **(**uintptr)(unsafe.Pointer(&f))\n\t\t}\n\t\tp := v.pointer()\n\n\t\tif p != nil {\n\t\t\tp = *(*unsafe.Pointer)(p)\n\t\t}\n\t\treturn uintptr(p)\n\n\tcase Slice:\n\t\treturn (*SliceHeader)(v.ptr).Data\n\t}\n\tpanic(&ValueError{\"reflect.Value.Pointer\", v.kind()})\n}",
    "defines" : [ 0 ],
    "functions" : [ {
      "name" : "Pointer",
      "package" : 0,
      "type" : 0,
      "exported" : true
    }, {
      "name" : "kind",
      "package" : 0,
      "type" : 27,
      "exported" : false
    }, {
      "name" : "pointer",
      "package" : 0,
      "type" : 30,
      "exported" : false
    }, {
      "name" : "methodValueCall",
      "package" : 0,
      "type" : 32,
      "exported" : false
    } ],
    "line-end" : 1458,
    "line-start" : 1429,
    "names" : [ "Pointer" ],
    "package" : 0,
    "packages" : [ {
      "name" : "reflect",
      "path" : "reflect"
    }, {
      "name" : "unsafe",
      "path" : "unsafe"
    } ],
    "params" : [ ],
    "receivers" : [ 0 ],
    "results" : [ 1 ],
    "type" : "function",
    "types" : [ {
      "name" : "(reflect.Value) func() uintptr",
      "params" : 1,
      "recv" : 0,
      "results" : 2,
      "type" : "Signature",
      "underlying" : 0,
      "variadic" : false
    }, {
      "fields" : [ ],
      "name" : "()",
      "type" : "Tuple",
      "underlying" : 1
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 3
      } ],
      "name" : "(uintptr)",
      "type" : "Tuple",
      "underlying" : 2
    }, {
      "name" : "uintptr",
      "type" : "Basic",
      "underlying" : 3
    }, {
      "local-name" : "Value",
      "name" : "reflect.Value",
      "package" : 0,
      "type" : "Named",
      "underlying" : 5
    }, {
      "fields" : [ {
        "name" : "typ",
        "type" : 6
      }, {
        "name" : "ptr",
        "type" : 14
      }, {
        "name" : "flag",
        "type" : 22
      } ],
      "name" : "struct{typ *reflect.rtype; ptr unsafe.Pointer; reflect.flag}",
      "type" : "Struct",
      "underlying" : 5
    }, {
      "elem" : 7,
      "name" : "*reflect.rtype",
      "type" : "Pointer",
      "underlying" : 6
    }, {
      "local-name" : "rtype",
      "name" : "reflect.rtype",
      "package" : 0,
      "type" : "Named",
      "underlying" : 8
    }, {
      "fields" : [ {
        "name" : "size",
        "type" : 3
      }, {
        "name" : "ptrdata",
        "type" : 3
      }, {
        "name" : "hash",
        "type" : 9
      }, {
        "name" : "tflag",
        "type" : 10
      }, {
        "name" : "align",
        "type" : 11
      }, {
        "name" : "fieldAlign",
        "type" : 11
      }, {
        "name" : "kind",
        "type" : 11
      }, {
        "name" : "equal",
        "type" : 12
      }, {
        "name" : "gcdata",
        "type" : 17
      }, {
        "name" : "str",
        "type" : 19
      }, {
        "name" : "ptrToThis",
        "type" : 21
      } ],
      "name" : "struct{size uintptr; ptrdata uintptr; hash uint32; tflag reflect.tflag; align uint8; fieldAlign uint8; kind uint8; equal func(unsafe.Pointer, unsafe.Pointer) bool; gcdata *byte; str reflect.nameOff; ptrToThis reflect.typeOff}",
      "type" : "Struct",
      "underlying" : 8
    }, {
      "name" : "uint32",
      "type" : "Basic",
      "underlying" : 9
    }, {
      "local-name" : "tflag",
      "name" : "reflect.tflag",
      "package" : 0,
      "type" : "Named",
      "underlying" : 11
    }, {
      "name" : "uint8",
      "type" : "Basic",
      "underlying" : 11
    }, {
      "name" : "func(unsafe.Pointer, unsafe.Pointer) bool",
      "params" : 13,
      "recv" : -1,
      "results" : 15,
      "type" : "Signature",
      "underlying" : 12,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 14
      }, {
        "name" : "",
        "type" : 14
      } ],
      "name" : "(unsafe.Pointer, unsafe.Pointer)",
      "type" : "Tuple",
      "underlying" : 13
    }, {
      "local-name" : "Pointer",
      "name" : "unsafe.Pointer",
      "package" : 1,
      "type" : "Basic",
      "underlying" : 14
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 16
      } ],
      "name" : "(bool)",
      "type" : "Tuple",
      "underlying" : 15
    }, {
      "name" : "bool",
      "type" : "Basic",
      "underlying" : 16
    }, {
      "elem" : 18,
      "name" : "*byte",
      "type" : "Pointer",
      "underlying" : 17
    }, {
      "name" : "byte",
      "type" : "Basic",
      "underlying" : 18
    }, {
      "local-name" : "nameOff",
      "name" : "reflect.nameOff",
      "package" : 0,
      "type" : "Named",
      "underlying" : 20
    }, {
      "name" : "int32",
      "type" : "Basic",
      "underlying" : 20
    }, {
      "local-name" : "typeOff",
      "name" : "reflect.typeOff",
      "package" : 0,
      "type" : "Named",
      "underlying" : 20
    }, {
      "local-name" : "flag",
      "name" : "reflect.flag",
      "package" : 0,
      "type" : "Named",
      "underlying" : 3
    }, {
      "local-name" : "Kind",
      "name" : "reflect.Kind",
      "package" : 0,
      "type" : "Named",
      "underlying" : 24
    }, {
      "name" : "uint",
      "type" : "Basic",
      "underlying" : 24
    }, {
      "name" : "func() reflect.Kind",
      "params" : 1,
      "recv" : -1,
      "results" : 26,
      "type" : "Signature",
      "underlying" : 25,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 23
      } ],
      "name" : "(reflect.Kind)",
      "type" : "Tuple",
      "underlying" : 26
    }, {
      "name" : "(reflect.flag) func() reflect.Kind",
      "params" : 1,
      "recv" : 2,
      "results" : 26,
      "type" : "Signature",
      "underlying" : 27,
      "variadic" : false
    }, {
      "name" : "func() unsafe.Pointer",
      "params" : 1,
      "recv" : -1,
      "results" : 29,
      "type" : "Signature",
      "underlying" : 28,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 14
      } ],
      "name" : "(unsafe.Pointer)",
      "type" : "Tuple",
      "underlying" : 29
    }, {
      "name" : "(reflect.Value) func() unsafe.Pointer",
      "params" : 1,
      "recv" : 4,
      "results" : 29,
      "type" : "Signature",
      "underlying" : 30,
      "variadic" : false
    }, {
      "name" : "untyped bool",
      "type" : "Basic",
      "underlying" : 31
    }, {
      "name" : "func()",
      "params" : 1,
      "recv" : -1,
      "results" : 1,
      "type" : "Signature",
      "underlying" : 32,
      "variadic" : false
    }, {
      "elem" : 3,
      "name" : "*uintptr",
      "type" : "Pointer",
      "underlying" : 33
    }, {
      "elem" : 33,
      "name" : "**uintptr",
      "type" : "Pointer",
      "underlying" : 34
    }, {
      "elem" : 32,
      "name" : "*func()",
      "type" : "Pointer",
      "underlying" : 35
    }, {
      "elem" : 14,
      "name" : "*unsafe.Pointer",
      "type" : "Pointer",
      "underlying" : 36
    }, {
      "elem" : 38,
      "name" : "*reflect.SliceHeader",
      "type" : "Pointer",
      "underlying" : 37
    }, {
      "local-name" : "SliceHeader",
      "name" : "reflect.SliceHeader",
      "package" : 0,
      "type" : "Named",
      "underlying" : 39
    }, {
      "fields" : [ {
        "name" : "Data",
        "type" : 3
      }, {
        "name" : "Len",
        "type" : 40
      }, {
        "name" : "Cap",
        "type" : 40
      } ],
      "name" : "struct{Data uintptr; Len int; Cap int}",
      "type" : "Struct",
      "underlying" : 39
    }, {
      "name" : "int",
      "type" : "Basic",
      "underlying" : 40
    }, {
      "name" : "func(interface{})",
      "params" : 42,
      "recv" : -1,
      "results" : 1,
      "type" : "Signature",
      "underlying" : 41,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 43
      } ],
      "name" : "(interface{})",
      "type" : "Tuple",
      "underlying" : 42
    }, {
      "methods" : [ ],
      "name" : "interface{}",
      "type" : "Interface",
      "underlying" : 43
    }, {
      "elem" : 45,
      "name" : "*reflect.ValueError",
      "type" : "Pointer",
      "underlying" : 44
    }, {
      "local-name" : "ValueError",
      "name" : "reflect.ValueError",
      "package" : 0,
      "type" : "Named",
      "underlying" : 46
    }, {
      "fields" : [ {
        "name" : "Method",
        "type" : 47
      }, {
        "name" : "Kind",
        "type" : 23
      } ],
      "name" : "struct{Method string; Kind reflect.Kind}",
      "type" : "Struct",
      "underlying" : 46
    }, {
      "name" : "string",
      "type" : "Basic",
      "underlying" : 47
    } ],
    "variables" : [ {
      "name" : "v",
      "package" : 0,
      "type" : 4,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "[res0]",
      "package" : 0,
      "type" : 3,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "f",
      "package" : 0,
      "type" : 22,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "k",
      "package" : 0,
      "type" : 23,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "v",
      "package" : 0,
      "type" : 4,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "flag",
      "package" : 0,
      "type" : 22,
      "exported" : false,
      "embedded" : true,
      "field" : true
    }, {
      "name" : "f",
      "package" : 0,
      "type" : 32,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "p",
      "package" : 0,
      "type" : 14,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "ptr",
      "package" : 0,
      "type" : 14,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "Data",
      "package" : 0,
      "type" : 3,
      "exported" : true,
      "embedded" : false,
      "field" : true
    } ]
  },
  "go-version" : "1.14.3"
}