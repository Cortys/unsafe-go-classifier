{
  "usage" : {
    "file" : "map.go",
    "label1" : "cast-pointer",
    "label2" : "types",
    "line" : "496",
    "module" : "std",
    "pkg" : "runtime",
    "project" : "kubernetes/kubernetes",
    "snippet" : "k = *((*unsafe.Pointer)(k))",
    "version" : "std"
  },
  "cfg" : {
    "blocks" : [ {
      "update-vars" : [ ],
      "successors" : [ 2 ],
      "in-vars" : [ 5, 1, 2, 0 ],
      "exit" : false,
      "out-vars" : [ 2, 0, 5, 1 ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[entry]",
      "entry" : true,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ ],
      "in-vars" : [ ],
      "exit" : true,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[exit]",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 3, 7 ],
      "in-vars" : [ 5, 1, 2, 0 ],
      "exit" : false,
      "out-vars" : [ 0, 5, 1, 2 ],
      "decl-vars" : [ ],
      "line-start" : 453,
      "ast" : {
        "condition" : {
          "go-type" : 41,
          "kind" : "expression",
          "left" : {
            "go-type" : 41,
            "kind" : "constant",
            "value" : {
              "type" : "BOOL",
              "value" : "false"
            }
          },
          "operator" : "&&",
          "right" : {
            "go-type" : 41,
            "kind" : "expression",
            "left" : {
              "go-type" : 26,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "h",
                "variable" : 1
              }
            },
            "operator" : "!=",
            "right" : {
              "go-type" : 42,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Nil",
                "kind" : "ident",
                "value" : "nil"
              }
            },
            "type" : "binary"
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 458,
      "code" : "if raceenabled && h != nil {\n\tcallerpc := getcallerpc()\n\tpc := funcPC(mapaccess2)\n\tracereadpc(unsafe.Pointer(h), callerpc, pc)\n\traceReadObjectPC(t.key, key, callerpc, pc)\n}",
      "entry" : false,
      "use-vars" : [ 1 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 4 ],
      "in-vars" : [ 2, 0, 5, 1 ],
      "exit" : false,
      "out-vars" : [ 6, 0, 5, 1, 2 ],
      "decl-vars" : [ 6 ],
      "line-start" : 454,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "callerpc"
          }
        } ],
        "right" : [ {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 43,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 1,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "getcallerpc"
            }
          },
          "go-type" : 7,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 454,
      "code" : "callerpc := getcallerpc()",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 5 ],
      "in-vars" : [ 2, 6, 0, 5, 1 ],
      "exit" : false,
      "out-vars" : [ 2, 6, 7, 0, 5, 1 ],
      "decl-vars" : [ 7 ],
      "line-start" : 455,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "pc"
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 0,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 0,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "mapaccess2"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 45,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 2,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "funcPC"
            }
          },
          "go-type" : 7,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 455,
      "code" : "pc := funcPC(mapaccess2)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 6 ],
      "in-vars" : [ 1, 2, 6, 7, 0, 5 ],
      "exit" : false,
      "out-vars" : [ 0, 5, 1, 2, 6, 7 ],
      "decl-vars" : [ ],
      "line-start" : 456,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "coerced-to" : {
              "go-type" : 13,
              "kind" : "type",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 1,
                "value" : "unsafe"
              },
              "type" : "identifier",
              "value" : {
                "go-type" : 13,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "Pointer"
              }
            },
            "go-type" : 13,
            "kind" : "expression",
            "target" : {
              "go-type" : 26,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "h",
                "variable" : 1
              }
            },
            "type" : "cast"
          }, {
            "go-type" : 7,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "callerpc",
              "variable" : 6
            }
          }, {
            "go-type" : 7,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "pc",
              "variable" : 7
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 48,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 3,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "racereadpc"
            }
          },
          "go-type" : 44,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 456,
      "code" : "racereadpc(unsafe.Pointer(h), callerpc, pc)",
      "entry" : false,
      "use-vars" : [ 7, 1, 6 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 7 ],
      "in-vars" : [ 2, 6, 7, 0, 5, 1 ],
      "exit" : false,
      "out-vars" : [ 5, 1, 2, 0 ],
      "decl-vars" : [ ],
      "line-start" : 457,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "key",
              "variable" : 8
            },
            "go-type" : 21,
            "kind" : "expression",
            "target" : {
              "go-type" : 2,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "t",
                "variable" : 0
              }
            },
            "type" : "selector"
          }, {
            "go-type" : 13,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "key",
              "variable" : 2
            }
          }, {
            "go-type" : 7,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "callerpc",
              "variable" : 6
            }
          }, {
            "go-type" : 7,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "pc",
              "variable" : 7
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 50,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 4,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "raceReadObjectPC"
            }
          },
          "go-type" : 44,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 457,
      "code" : "raceReadObjectPC(t.key, key, callerpc, pc)",
      "entry" : false,
      "use-vars" : [ 2, 6, 7, 0 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 8, 9 ],
      "in-vars" : [ 2, 0, 5, 1 ],
      "exit" : false,
      "out-vars" : [ 2, 0, 5, 1 ],
      "decl-vars" : [ ],
      "line-start" : 459,
      "ast" : {
        "condition" : {
          "go-type" : 41,
          "kind" : "expression",
          "left" : {
            "go-type" : 41,
            "kind" : "constant",
            "value" : {
              "type" : "BOOL",
              "value" : "false"
            }
          },
          "operator" : "&&",
          "right" : {
            "go-type" : 41,
            "kind" : "expression",
            "left" : {
              "go-type" : 26,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "h",
                "variable" : 1
              }
            },
            "operator" : "!=",
            "right" : {
              "go-type" : 42,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Nil",
                "kind" : "ident",
                "value" : "nil"
              }
            },
            "type" : "binary"
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 461,
      "code" : "if msanenabled && h != nil {\n\tmsanread(key, t.key.size)\n}",
      "entry" : false,
      "use-vars" : [ 1 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 9 ],
      "in-vars" : [ 2, 0, 5, 1 ],
      "exit" : false,
      "out-vars" : [ 2, 0, 5, 1 ],
      "decl-vars" : [ ],
      "line-start" : 460,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 13,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "key",
              "variable" : 2
            }
          }, {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "size",
              "variable" : 9
            },
            "go-type" : 7,
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "key",
                "variable" : 8
              },
              "go-type" : 21,
              "kind" : "expression",
              "target" : {
                "go-type" : 2,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "t",
                  "variable" : 0
                }
              },
              "type" : "selector"
            },
            "type" : "selector"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 52,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 5,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "msanread"
            }
          },
          "go-type" : 44,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 460,
      "code" : "msanread(key, t.key.size)",
      "entry" : false,
      "use-vars" : [ 0, 2 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 10, 13 ],
      "in-vars" : [ 2, 0, 5, 1 ],
      "exit" : false,
      "out-vars" : [ 2, 0, 5, 1 ],
      "decl-vars" : [ ],
      "line-start" : 462,
      "ast" : {
        "condition" : {
          "go-type" : 41,
          "kind" : "expression",
          "left" : {
            "go-type" : 41,
            "kind" : "expression",
            "left" : {
              "go-type" : 26,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "h",
                "variable" : 1
              }
            },
            "operator" : "==",
            "right" : {
              "go-type" : 42,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Nil",
                "kind" : "ident",
                "value" : "nil"
              }
            },
            "type" : "binary"
          },
          "operator" : "||",
          "right" : {
            "go-type" : 41,
            "kind" : "expression",
            "left" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "count",
                "variable" : 10
              },
              "go-type" : 29,
              "kind" : "expression",
              "target" : {
                "go-type" : 26,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "h",
                  "variable" : 1
                }
              },
              "type" : "selector"
            },
            "operator" : "==",
            "right" : {
              "go-type" : 29,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "0"
              }
            },
            "type" : "binary"
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 467,
      "code" : "if h == nil || h.count == 0 {\n\tif t.hashMightPanic() {\n\t\tt.hasher(key, 0)\n\t}\n\treturn unsafe.Pointer(&zeroVal[0]), false\n}",
      "entry" : false,
      "use-vars" : [ 1 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 11, 12 ],
      "in-vars" : [ 2, 0, 5 ],
      "exit" : false,
      "out-vars" : [ 2, 0, 5 ],
      "decl-vars" : [ ],
      "line-start" : 463,
      "ast" : {
        "condition" : {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "function" : 6,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "hashMightPanic"
            },
            "go-type" : 54,
            "kind" : "expression",
            "target" : {
              "go-type" : 2,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "t",
                "variable" : 0
              }
            },
            "type" : "selector"
          },
          "go-type" : 15,
          "kind" : "expression",
          "type" : "call"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 465,
      "code" : "if t.hashMightPanic() {\n\tt.hasher(key, 0)\n}",
      "entry" : false,
      "use-vars" : [ 0 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 12 ],
      "in-vars" : [ 2, 0, 5 ],
      "exit" : false,
      "out-vars" : [ 5 ],
      "decl-vars" : [ ],
      "line-start" : 464,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 13,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "key",
              "variable" : 2
            }
          }, {
            "go-type" : 7,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "hasher",
              "variable" : 12
            },
            "go-type" : 22,
            "kind" : "expression",
            "target" : {
              "go-type" : 2,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "t",
                "variable" : 0
              }
            },
            "type" : "selector"
          },
          "go-type" : 7,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 464,
      "code" : "t.hasher(key, 0)",
      "entry" : false,
      "use-vars" : [ 0, 2 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 5 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 466,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "coerced-to" : {
            "go-type" : 13,
            "kind" : "type",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 1,
              "value" : "unsafe"
            },
            "type" : "identifier",
            "value" : {
              "go-type" : 13,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "Pointer"
            }
          },
          "go-type" : 13,
          "kind" : "expression",
          "target" : {
            "go-type" : 16,
            "kind" : "expression",
            "operator" : "&",
            "target" : {
              "go-type" : 17,
              "index" : {
                "go-type" : 29,
                "kind" : "constant",
                "value" : {
                  "type" : "INT",
                  "value" : "0"
                }
              },
              "kind" : "expression",
              "target" : {
                "go-type" : 40,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "zeroVal",
                  "variable" : 5
                }
              },
              "type" : "index"
            },
            "type" : "unary"
          },
          "type" : "cast"
        }, {
          "go-type" : 15,
          "kind" : "constant",
          "value" : {
            "type" : "BOOL",
            "value" : "false"
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 466,
      "code" : "return unsafe.Pointer(&zeroVal[0]), false",
      "entry" : false,
      "use-vars" : [ 5 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 14, 15 ],
      "in-vars" : [ 2, 0, 5, 1 ],
      "exit" : false,
      "out-vars" : [ 2, 0, 5, 1 ],
      "decl-vars" : [ ],
      "line-start" : 468,
      "ast" : {
        "condition" : {
          "go-type" : 41,
          "kind" : "expression",
          "left" : {
            "go-type" : 10,
            "kind" : "expression",
            "left" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "flags",
                "variable" : 13
              },
              "go-type" : 10,
              "kind" : "expression",
              "target" : {
                "go-type" : 26,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "h",
                  "variable" : 1
                }
              },
              "type" : "selector"
            },
            "operator" : "&",
            "right" : {
              "go-type" : 10,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "4"
              }
            },
            "type" : "binary"
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 10,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 470,
      "code" : "if h.flags&hashWriting != 0 {\n\tthrow(\"concurrent map read and map write\")\n}",
      "entry" : false,
      "use-vars" : [ 1 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 15 ],
      "in-vars" : [ 2, 0, 5, 1 ],
      "exit" : false,
      "out-vars" : [ 2, 0, 5, 1 ],
      "decl-vars" : [ ],
      "line-start" : 469,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 58,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "concurrent map read and map write"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 56,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 7,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "throw"
            }
          },
          "go-type" : 44,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 469,
      "code" : "throw(\"concurrent map read and map write\")",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 16 ],
      "in-vars" : [ 2, 0, 5, 1 ],
      "exit" : false,
      "out-vars" : [ 1, 15, 2, 0, 5 ],
      "decl-vars" : [ 15 ],
      "line-start" : 471,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "hash"
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 13,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "key",
              "variable" : 2
            }
          }, {
            "coerced-to" : {
              "go-type" : 7,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 7,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "uintptr"
              }
            },
            "go-type" : 7,
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "hash0",
                "variable" : 14
              },
              "go-type" : 8,
              "kind" : "expression",
              "target" : {
                "go-type" : 26,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "h",
                  "variable" : 1
                }
              },
              "type" : "selector"
            },
            "type" : "cast"
          } ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "hasher",
              "variable" : 12
            },
            "go-type" : 22,
            "kind" : "expression",
            "target" : {
              "go-type" : 2,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "t",
                "variable" : 0
              }
            },
            "type" : "selector"
          },
          "go-type" : 7,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 471,
      "code" : "hash := t.hasher(key, uintptr(h.hash0))",
      "entry" : false,
      "use-vars" : [ 0, 2, 1 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 17 ],
      "in-vars" : [ 2, 0, 5, 1, 15 ],
      "exit" : false,
      "out-vars" : [ 5, 17, 1, 15, 2, 0 ],
      "decl-vars" : [ 17 ],
      "line-start" : 472,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "m"
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "B",
              "variable" : 16
            },
            "go-type" : 10,
            "kind" : "expression",
            "target" : {
              "go-type" : 26,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "h",
                "variable" : 1
              }
            },
            "type" : "selector"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 59,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 8,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "bucketMask"
            }
          },
          "go-type" : 7,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 472,
      "code" : "m := bucketMask(h.B)",
      "entry" : false,
      "use-vars" : [ 1 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 19 ],
      "in-vars" : [ 17, 1, 15, 2, 0, 5 ],
      "exit" : false,
      "out-vars" : [ 2, 0, 5, 20, 17, 1, 15 ],
      "decl-vars" : [ 20 ],
      "line-start" : 473,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "b"
          }
        } ],
        "right" : [ {
          "coerced-to" : {
            "contained" : {
              "go-type" : 36,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 36,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "bmap"
              }
            },
            "go-type" : 35,
            "kind" : "type",
            "type" : "pointer"
          },
          "go-type" : 35,
          "kind" : "expression",
          "target" : {
            "coerced-to" : {
              "go-type" : 13,
              "kind" : "type",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 1,
                "value" : "unsafe"
              },
              "type" : "identifier",
              "value" : {
                "go-type" : 13,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "Pointer"
              }
            },
            "go-type" : 13,
            "kind" : "expression",
            "target" : {
              "go-type" : 7,
              "kind" : "expression",
              "left" : {
                "coerced-to" : {
                  "go-type" : 7,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 7,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "uintptr"
                  }
                },
                "go-type" : 7,
                "kind" : "expression",
                "target" : {
                  "field" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "buckets",
                    "variable" : 18
                  },
                  "go-type" : 13,
                  "kind" : "expression",
                  "target" : {
                    "go-type" : 26,
                    "kind" : "expression",
                    "type" : "identifier",
                    "value" : {
                      "ident-kind" : "Var",
                      "kind" : "ident",
                      "value" : "h",
                      "variable" : 1
                    }
                  },
                  "type" : "selector"
                },
                "type" : "cast"
              },
              "operator" : "+",
              "right" : {
                "go-type" : 7,
                "kind" : "expression",
                "left" : {
                  "go-type" : 7,
                  "kind" : "expression",
                  "target" : {
                    "go-type" : 7,
                    "kind" : "expression",
                    "left" : {
                      "go-type" : 7,
                      "kind" : "expression",
                      "type" : "identifier",
                      "value" : {
                        "ident-kind" : "Var",
                        "kind" : "ident",
                        "value" : "hash",
                        "variable" : 15
                      }
                    },
                    "operator" : "&",
                    "right" : {
                      "go-type" : 7,
                      "kind" : "expression",
                      "type" : "identifier",
                      "value" : {
                        "ident-kind" : "Var",
                        "kind" : "ident",
                        "value" : "m",
                        "variable" : 17
                      }
                    },
                    "type" : "binary"
                  },
                  "type" : "paren"
                },
                "operator" : "*",
                "right" : {
                  "coerced-to" : {
                    "go-type" : 7,
                    "kind" : "type",
                    "type" : "identifier",
                    "value" : {
                      "go-type" : 7,
                      "ident-kind" : "TypeName",
                      "kind" : "ident",
                      "value" : "uintptr"
                    }
                  },
                  "go-type" : 7,
                  "kind" : "expression",
                  "target" : {
                    "field" : {
                      "ident-kind" : "Var",
                      "kind" : "ident",
                      "value" : "bucketsize",
                      "variable" : 19
                    },
                    "go-type" : 25,
                    "kind" : "expression",
                    "target" : {
                      "go-type" : 2,
                      "kind" : "expression",
                      "type" : "identifier",
                      "value" : {
                        "ident-kind" : "Var",
                        "kind" : "ident",
                        "value" : "t",
                        "variable" : 0
                      }
                    },
                    "type" : "selector"
                  },
                  "type" : "cast"
                },
                "type" : "binary"
              },
              "type" : "binary"
            },
            "type" : "cast"
          },
          "type" : "cast"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 473,
      "code" : "b := (*bmap)(unsafe.Pointer(uintptr(h.buckets) + (hash&m)*uintptr(t.bucketsize)))",
      "entry" : false,
      "use-vars" : [ 1, 17, 15, 0 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 20, 25 ],
      "in-vars" : [ 17, 1, 15, 22, 2, 0, 5, 20 ],
      "exit" : false,
      "out-vars" : [ 2, 0, 5, 20, 17, 1, 15, 22 ],
      "decl-vars" : [ ],
      "line-start" : 474,
      "ast" : {
        "condition" : {
          "go-type" : 41,
          "kind" : "expression",
          "left" : {
            "go-type" : 13,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "c",
              "variable" : 22
            }
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 13,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Nil",
              "kind" : "ident",
              "value" : "nil"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 483,
      "code" : "if c := h.oldbuckets; c != nil {\n\tif !h.sameSizeGrow() {\n\n\t\tm >>= 1\n\t}\n\toldb := (*bmap)(unsafe.Pointer(uintptr(c) + (hash&m)*uintptr(t.bucketsize)))\n\tif !evacuated(oldb) {\n\t\tb = oldb\n\t}\n}",
      "entry" : false,
      "use-vars" : [ 22 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 18 ],
      "in-vars" : [ 1, 15, 2, 0, 5, 20, 17 ],
      "exit" : false,
      "out-vars" : [ 2, 0, 5, 20, 17, 1, 15, 22 ],
      "decl-vars" : [ 22 ],
      "line-start" : 474,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "c"
          }
        } ],
        "right" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "oldbuckets",
            "variable" : 21
          },
          "go-type" : 13,
          "kind" : "expression",
          "target" : {
            "go-type" : 26,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "h",
              "variable" : 1
            }
          },
          "type" : "selector"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 474,
      "code" : "c := h.oldbuckets",
      "entry" : false,
      "use-vars" : [ 1 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 21, 22 ],
      "in-vars" : [ 1, 15, 22, 2, 0, 5, 20, 17 ],
      "exit" : false,
      "out-vars" : [ 2, 0, 5, 20, 17, 15, 22 ],
      "decl-vars" : [ ],
      "line-start" : 475,
      "ast" : {
        "condition" : {
          "go-type" : 15,
          "kind" : "expression",
          "operator" : "!",
          "target" : {
            "arguments" : [ ],
            "ellipsis" : false,
            "function" : {
              "field" : {
                "function" : 9,
                "ident-kind" : "Func",
                "kind" : "ident",
                "value" : "sameSizeGrow"
              },
              "go-type" : 54,
              "kind" : "expression",
              "target" : {
                "go-type" : 26,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "h",
                  "variable" : 1
                }
              },
              "type" : "selector"
            },
            "go-type" : 15,
            "kind" : "expression",
            "type" : "call"
          },
          "type" : "unary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 478,
      "code" : "if !h.sameSizeGrow() {\n\n\tm >>= 1\n}",
      "entry" : false,
      "use-vars" : [ 1 ]
    }, {
      "update-vars" : [ 17 ],
      "successors" : [ 22 ],
      "in-vars" : [ 20, 17, 15, 22, 2, 0, 5 ],
      "exit" : false,
      "out-vars" : [ 22, 2, 0, 5, 20, 17, 15 ],
      "decl-vars" : [ ],
      "line-start" : 477,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 7,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "m",
            "variable" : 17
          }
        } ],
        "operator" : ">>",
        "right" : [ {
          "go-type" : 62,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "1"
          }
        } ],
        "type" : "assign-operator"
      },
      "assign-vars" : [ 17 ],
      "line-end" : 477,
      "code" : "m >>= 1",
      "entry" : false,
      "use-vars" : [ 17 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 23 ],
      "in-vars" : [ 2, 0, 5, 20, 17, 15, 22 ],
      "exit" : false,
      "out-vars" : [ 15, 2, 0, 5, 24, 20 ],
      "decl-vars" : [ 24 ],
      "line-start" : 479,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "oldb"
          }
        } ],
        "right" : [ {
          "coerced-to" : {
            "contained" : {
              "go-type" : 36,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 36,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "bmap"
              }
            },
            "go-type" : 35,
            "kind" : "type",
            "type" : "pointer"
          },
          "go-type" : 35,
          "kind" : "expression",
          "target" : {
            "coerced-to" : {
              "go-type" : 13,
              "kind" : "type",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 1,
                "value" : "unsafe"
              },
              "type" : "identifier",
              "value" : {
                "go-type" : 13,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "Pointer"
              }
            },
            "go-type" : 13,
            "kind" : "expression",
            "target" : {
              "go-type" : 7,
              "kind" : "expression",
              "left" : {
                "coerced-to" : {
                  "go-type" : 7,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 7,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "uintptr"
                  }
                },
                "go-type" : 7,
                "kind" : "expression",
                "target" : {
                  "go-type" : 13,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "c",
                    "variable" : 22
                  }
                },
                "type" : "cast"
              },
              "operator" : "+",
              "right" : {
                "go-type" : 7,
                "kind" : "expression",
                "left" : {
                  "go-type" : 7,
                  "kind" : "expression",
                  "target" : {
                    "go-type" : 7,
                    "kind" : "expression",
                    "left" : {
                      "go-type" : 7,
                      "kind" : "expression",
                      "type" : "identifier",
                      "value" : {
                        "ident-kind" : "Var",
                        "kind" : "ident",
                        "value" : "hash",
                        "variable" : 15
                      }
                    },
                    "operator" : "&",
                    "right" : {
                      "go-type" : 7,
                      "kind" : "expression",
                      "type" : "identifier",
                      "value" : {
                        "ident-kind" : "Var",
                        "kind" : "ident",
                        "value" : "m",
                        "variable" : 17
                      }
                    },
                    "type" : "binary"
                  },
                  "type" : "paren"
                },
                "operator" : "*",
                "right" : {
                  "coerced-to" : {
                    "go-type" : 7,
                    "kind" : "type",
                    "type" : "identifier",
                    "value" : {
                      "go-type" : 7,
                      "ident-kind" : "TypeName",
                      "kind" : "ident",
                      "value" : "uintptr"
                    }
                  },
                  "go-type" : 7,
                  "kind" : "expression",
                  "target" : {
                    "field" : {
                      "ident-kind" : "Var",
                      "kind" : "ident",
                      "value" : "bucketsize",
                      "variable" : 19
                    },
                    "go-type" : 25,
                    "kind" : "expression",
                    "target" : {
                      "go-type" : 2,
                      "kind" : "expression",
                      "type" : "identifier",
                      "value" : {
                        "ident-kind" : "Var",
                        "kind" : "ident",
                        "value" : "t",
                        "variable" : 0
                      }
                    },
                    "type" : "selector"
                  },
                  "type" : "cast"
                },
                "type" : "binary"
              },
              "type" : "binary"
            },
            "type" : "cast"
          },
          "type" : "cast"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 479,
      "code" : "oldb := (*bmap)(unsafe.Pointer(uintptr(c) + (hash&m)*uintptr(t.bucketsize)))",
      "entry" : false,
      "use-vars" : [ 22, 15, 17, 0 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 24, 25 ],
      "in-vars" : [ 5, 24, 20, 15, 2, 0 ],
      "exit" : false,
      "out-vars" : [ 2, 0, 5, 24, 20, 15 ],
      "decl-vars" : [ ],
      "line-start" : 480,
      "ast" : {
        "condition" : {
          "go-type" : 15,
          "kind" : "expression",
          "operator" : "!",
          "target" : {
            "arguments" : [ {
              "go-type" : 35,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "oldb",
                "variable" : 24
              }
            } ],
            "ellipsis" : false,
            "function" : {
              "go-type" : 63,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "function" : 10,
                "ident-kind" : "Func",
                "kind" : "ident",
                "value" : "evacuated"
              }
            },
            "go-type" : 15,
            "kind" : "expression",
            "type" : "call"
          },
          "type" : "unary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 482,
      "code" : "if !evacuated(oldb) {\n\tb = oldb\n}",
      "entry" : false,
      "use-vars" : [ 24 ]
    }, {
      "update-vars" : [ 20 ],
      "successors" : [ 25 ],
      "in-vars" : [ 2, 0, 5, 24, 15 ],
      "exit" : false,
      "out-vars" : [ 2, 0, 5, 20, 15 ],
      "decl-vars" : [ ],
      "line-start" : 481,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 35,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "b",
            "variable" : 20
          }
        } ],
        "right" : [ {
          "go-type" : 35,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "oldb",
            "variable" : 24
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 20 ],
      "line-end" : 481,
      "code" : "b = oldb",
      "entry" : false,
      "use-vars" : [ 24 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 26 ],
      "in-vars" : [ 20, 15, 2, 0, 5 ],
      "exit" : false,
      "out-vars" : [ 2, 0, 5, 20, 25 ],
      "decl-vars" : [ 25 ],
      "line-start" : 484,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "top"
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 7,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "hash",
              "variable" : 15
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 65,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 11,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "tophash"
            }
          },
          "go-type" : 10,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 484,
      "code" : "top := tophash(hash)",
      "entry" : false,
      "use-vars" : [ 15 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 27 ],
      "in-vars" : [ 0, 5, 20, 25, 2 ],
      "exit" : false,
      "out-vars" : [ 25, 2, 0, 5, 20 ],
      "decl-vars" : [ ],
      "line-start" : 485,
      "ast" : {
        "body" : [ {
          "body" : [ {
            "body" : [ {
              "body" : [ {
                "kind" : "statement",
                "label" : {
                  "ident-kind" : "Label",
                  "kind" : "ident",
                  "value" : "bucketloop"
                },
                "type" : "break"
              } ],
              "condition" : {
                "go-type" : 41,
                "kind" : "expression",
                "left" : {
                  "go-type" : 10,
                  "index" : {
                    "go-type" : 7,
                    "kind" : "expression",
                    "type" : "identifier",
                    "value" : {
                      "ident-kind" : "Var",
                      "kind" : "ident",
                      "value" : "i",
                      "variable" : 27
                    }
                  },
                  "kind" : "expression",
                  "target" : {
                    "field" : {
                      "ident-kind" : "Var",
                      "kind" : "ident",
                      "value" : "tophash",
                      "variable" : 28
                    },
                    "go-type" : 38,
                    "kind" : "expression",
                    "target" : {
                      "go-type" : 35,
                      "kind" : "expression",
                      "type" : "identifier",
                      "value" : {
                        "ident-kind" : "Var",
                        "kind" : "ident",
                        "value" : "b",
                        "variable" : 20
                      }
                    },
                    "type" : "selector"
                  },
                  "type" : "index"
                },
                "operator" : "==",
                "right" : {
                  "go-type" : 10,
                  "kind" : "constant",
                  "value" : {
                    "type" : "INT",
                    "value" : "0"
                  }
                },
                "type" : "binary"
              },
              "else" : null,
              "init" : null,
              "kind" : "statement",
              "type" : "if"
            }, {
              "kind" : "statement",
              "label" : null,
              "type" : "continue"
            } ],
            "condition" : {
              "go-type" : 41,
              "kind" : "expression",
              "left" : {
                "go-type" : 10,
                "index" : {
                  "go-type" : 7,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "i",
                    "variable" : 27
                  }
                },
                "kind" : "expression",
                "target" : {
                  "field" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "tophash",
                    "variable" : 28
                  },
                  "go-type" : 38,
                  "kind" : "expression",
                  "target" : {
                    "go-type" : 35,
                    "kind" : "expression",
                    "type" : "identifier",
                    "value" : {
                      "ident-kind" : "Var",
                      "kind" : "ident",
                      "value" : "b",
                      "variable" : 20
                    }
                  },
                  "type" : "selector"
                },
                "type" : "index"
              },
              "operator" : "!=",
              "right" : {
                "go-type" : 10,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "top",
                  "variable" : 25
                }
              },
              "type" : "binary"
            },
            "else" : null,
            "init" : null,
            "kind" : "statement",
            "type" : "if"
          }, {
            "kind" : "statement",
            "left" : [ {
              "go-type" : -1,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "NoKind",
                "kind" : "ident",
                "value" : "k"
              }
            } ],
            "right" : [ {
              "arguments" : [ {
                "coerced-to" : {
                  "go-type" : 13,
                  "kind" : "type",
                  "qualifier" : {
                    "ident-kind" : "PkgName",
                    "kind" : "ident",
                    "package" : 1,
                    "value" : "unsafe"
                  },
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 13,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "Pointer"
                  }
                },
                "go-type" : 13,
                "kind" : "expression",
                "target" : {
                  "go-type" : 35,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "b",
                    "variable" : 20
                  }
                },
                "type" : "cast"
              }, {
                "go-type" : 7,
                "kind" : "expression",
                "left" : {
                  "go-type" : 7,
                  "kind" : "constant",
                  "value" : {
                    "type" : "INT",
                    "value" : "8"
                  }
                },
                "operator" : "+",
                "right" : {
                  "go-type" : 7,
                  "kind" : "expression",
                  "left" : {
                    "go-type" : 7,
                    "kind" : "expression",
                    "type" : "identifier",
                    "value" : {
                      "ident-kind" : "Var",
                      "kind" : "ident",
                      "value" : "i",
                      "variable" : 27
                    }
                  },
                  "operator" : "*",
                  "right" : {
                    "coerced-to" : {
                      "go-type" : 7,
                      "kind" : "type",
                      "type" : "identifier",
                      "value" : {
                        "go-type" : 7,
                        "ident-kind" : "TypeName",
                        "kind" : "ident",
                        "value" : "uintptr"
                      }
                    },
                    "go-type" : 7,
                    "kind" : "expression",
                    "target" : {
                      "field" : {
                        "ident-kind" : "Var",
                        "kind" : "ident",
                        "value" : "keysize",
                        "variable" : 29
                      },
                      "go-type" : 10,
                      "kind" : "expression",
                      "target" : {
                        "go-type" : 2,
                        "kind" : "expression",
                        "type" : "identifier",
                        "value" : {
                          "ident-kind" : "Var",
                          "kind" : "ident",
                          "value" : "t",
                          "variable" : 0
                        }
                      },
                      "type" : "selector"
                    },
                    "type" : "cast"
                  },
                  "type" : "binary"
                },
                "type" : "binary"
              } ],
              "ellipsis" : false,
              "function" : {
                "go-type" : 72,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "function" : 13,
                  "ident-kind" : "Func",
                  "kind" : "ident",
                  "value" : "add"
                }
              },
              "go-type" : 13,
              "kind" : "expression",
              "type" : "call"
            } ],
            "type" : "define"
          }, {
            "body" : [ {
              "kind" : "statement",
              "left" : [ {
                "go-type" : 13,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "k",
                  "variable" : 30
                }
              } ],
              "right" : [ {
                "go-type" : 13,
                "kind" : "expression",
                "target" : {
                  "go-type" : 75,
                  "kind" : "expression",
                  "target" : {
                    "coerced-to" : {
                      "contained" : {
                        "go-type" : 13,
                        "kind" : "type",
                        "qualifier" : {
                          "ident-kind" : "PkgName",
                          "kind" : "ident",
                          "package" : 1,
                          "value" : "unsafe"
                        },
                        "type" : "identifier",
                        "value" : {
                          "go-type" : 13,
                          "ident-kind" : "TypeName",
                          "kind" : "ident",
                          "value" : "Pointer"
                        }
                      },
                      "go-type" : 75,
                      "kind" : "type",
                      "type" : "pointer"
                    },
                    "go-type" : 75,
                    "kind" : "expression",
                    "target" : {
                      "go-type" : 13,
                      "kind" : "expression",
                      "type" : "identifier",
                      "value" : {
                        "ident-kind" : "Var",
                        "kind" : "ident",
                        "value" : "k",
                        "variable" : 30
                      }
                    },
                    "type" : "cast"
                  },
                  "type" : "paren"
                },
                "type" : "star"
              } ],
              "type" : "assign"
            } ],
            "condition" : {
              "arguments" : [ ],
              "ellipsis" : false,
              "function" : {
                "field" : {
                  "function" : 14,
                  "ident-kind" : "Func",
                  "kind" : "ident",
                  "value" : "indirectkey"
                },
                "go-type" : 54,
                "kind" : "expression",
                "target" : {
                  "go-type" : 2,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "t",
                    "variable" : 0
                  }
                },
                "type" : "selector"
              },
              "go-type" : 15,
              "kind" : "expression",
              "type" : "call"
            },
            "else" : null,
            "init" : null,
            "kind" : "statement",
            "type" : "if"
          }, {
            "body" : [ {
              "kind" : "statement",
              "left" : [ {
                "go-type" : -1,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "NoKind",
                  "kind" : "ident",
                  "value" : "e"
                }
              } ],
              "right" : [ {
                "arguments" : [ {
                  "coerced-to" : {
                    "go-type" : 13,
                    "kind" : "type",
                    "qualifier" : {
                      "ident-kind" : "PkgName",
                      "kind" : "ident",
                      "package" : 1,
                      "value" : "unsafe"
                    },
                    "type" : "identifier",
                    "value" : {
                      "go-type" : 13,
                      "ident-kind" : "TypeName",
                      "kind" : "ident",
                      "value" : "Pointer"
                    }
                  },
                  "go-type" : 13,
                  "kind" : "expression",
                  "target" : {
                    "go-type" : 35,
                    "kind" : "expression",
                    "type" : "identifier",
                    "value" : {
                      "ident-kind" : "Var",
                      "kind" : "ident",
                      "value" : "b",
                      "variable" : 20
                    }
                  },
                  "type" : "cast"
                }, {
                  "go-type" : 7,
                  "kind" : "expression",
                  "left" : {
                    "go-type" : 7,
                    "kind" : "expression",
                    "left" : {
                      "go-type" : 7,
                      "kind" : "constant",
                      "value" : {
                        "type" : "INT",
                        "value" : "8"
                      }
                    },
                    "operator" : "+",
                    "right" : {
                      "go-type" : 7,
                      "kind" : "expression",
                      "left" : {
                        "go-type" : 7,
                        "kind" : "constant",
                        "value" : {
                          "type" : "INT",
                          "value" : "8"
                        }
                      },
                      "operator" : "*",
                      "right" : {
                        "coerced-to" : {
                          "go-type" : 7,
                          "kind" : "type",
                          "type" : "identifier",
                          "value" : {
                            "go-type" : 7,
                            "ident-kind" : "TypeName",
                            "kind" : "ident",
                            "value" : "uintptr"
                          }
                        },
                        "go-type" : 7,
                        "kind" : "expression",
                        "target" : {
                          "field" : {
                            "ident-kind" : "Var",
                            "kind" : "ident",
                            "value" : "keysize",
                            "variable" : 29
                          },
                          "go-type" : 10,
                          "kind" : "expression",
                          "target" : {
                            "go-type" : 2,
                            "kind" : "expression",
                            "type" : "identifier",
                            "value" : {
                              "ident-kind" : "Var",
                              "kind" : "ident",
                              "value" : "t",
                              "variable" : 0
                            }
                          },
                          "type" : "selector"
                        },
                        "type" : "cast"
                      },
                      "type" : "binary"
                    },
                    "type" : "binary"
                  },
                  "operator" : "+",
                  "right" : {
                    "go-type" : 7,
                    "kind" : "expression",
                    "left" : {
                      "go-type" : 7,
                      "kind" : "expression",
                      "type" : "identifier",
                      "value" : {
                        "ident-kind" : "Var",
                        "kind" : "ident",
                        "value" : "i",
                        "variable" : 27
                      }
                    },
                    "operator" : "*",
                    "right" : {
                      "coerced-to" : {
                        "go-type" : 7,
                        "kind" : "type",
                        "type" : "identifier",
                        "value" : {
                          "go-type" : 7,
                          "ident-kind" : "TypeName",
                          "kind" : "ident",
                          "value" : "uintptr"
                        }
                      },
                      "go-type" : 7,
                      "kind" : "expression",
                      "target" : {
                        "field" : {
                          "ident-kind" : "Var",
                          "kind" : "ident",
                          "value" : "elemsize",
                          "variable" : 32
                        },
                        "go-type" : 10,
                        "kind" : "expression",
                        "target" : {
                          "go-type" : 2,
                          "kind" : "expression",
                          "type" : "identifier",
                          "value" : {
                            "ident-kind" : "Var",
                            "kind" : "ident",
                            "value" : "t",
                            "variable" : 0
                          }
                        },
                        "type" : "selector"
                      },
                      "type" : "cast"
                    },
                    "type" : "binary"
                  },
                  "type" : "binary"
                } ],
                "ellipsis" : false,
                "function" : {
                  "go-type" : 72,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "function" : 13,
                    "ident-kind" : "Func",
                    "kind" : "ident",
                    "value" : "add"
                  }
                },
                "go-type" : 13,
                "kind" : "expression",
                "type" : "call"
              } ],
              "type" : "define"
            }, {
              "body" : [ {
                "kind" : "statement",
                "left" : [ {
                  "go-type" : 13,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "e",
                    "variable" : 33
                  }
                } ],
                "right" : [ {
                  "go-type" : 13,
                  "kind" : "expression",
                  "target" : {
                    "go-type" : 75,
                    "kind" : "expression",
                    "target" : {
                      "coerced-to" : {
                        "contained" : {
                          "go-type" : 13,
                          "kind" : "type",
                          "qualifier" : {
                            "ident-kind" : "PkgName",
                            "kind" : "ident",
                            "package" : 1,
                            "value" : "unsafe"
                          },
                          "type" : "identifier",
                          "value" : {
                            "go-type" : 13,
                            "ident-kind" : "TypeName",
                            "kind" : "ident",
                            "value" : "Pointer"
                          }
                        },
                        "go-type" : 75,
                        "kind" : "type",
                        "type" : "pointer"
                      },
                      "go-type" : 75,
                      "kind" : "expression",
                      "target" : {
                        "go-type" : 13,
                        "kind" : "expression",
                        "type" : "identifier",
                        "value" : {
                          "ident-kind" : "Var",
                          "kind" : "ident",
                          "value" : "e",
                          "variable" : 33
                        }
                      },
                      "type" : "cast"
                    },
                    "type" : "paren"
                  },
                  "type" : "star"
                } ],
                "type" : "assign"
              } ],
              "condition" : {
                "arguments" : [ ],
                "ellipsis" : false,
                "function" : {
                  "field" : {
                    "function" : 15,
                    "ident-kind" : "Func",
                    "kind" : "ident",
                    "value" : "indirectelem"
                  },
                  "go-type" : 54,
                  "kind" : "expression",
                  "target" : {
                    "go-type" : 2,
                    "kind" : "expression",
                    "type" : "identifier",
                    "value" : {
                      "ident-kind" : "Var",
                      "kind" : "ident",
                      "value" : "t",
                      "variable" : 0
                    }
                  },
                  "type" : "selector"
                },
                "go-type" : 15,
                "kind" : "expression",
                "type" : "call"
              },
              "else" : null,
              "init" : null,
              "kind" : "statement",
              "type" : "if"
            }, {
              "kind" : "statement",
              "type" : "return",
              "values" : [ {
                "go-type" : 13,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "e",
                  "variable" : 33
                }
              }, {
                "go-type" : 15,
                "kind" : "constant",
                "value" : {
                  "type" : "BOOL",
                  "value" : "true"
                }
              } ]
            } ],
            "condition" : {
              "arguments" : [ {
                "go-type" : 13,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "key",
                  "variable" : 2
                }
              }, {
                "go-type" : 13,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "k",
                  "variable" : 30
                }
              } ],
              "ellipsis" : false,
              "function" : {
                "field" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "equal",
                  "variable" : 31
                },
                "go-type" : 11,
                "kind" : "expression",
                "target" : {
                  "field" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "key",
                    "variable" : 8
                  },
                  "go-type" : 21,
                  "kind" : "expression",
                  "target" : {
                    "go-type" : 2,
                    "kind" : "expression",
                    "type" : "identifier",
                    "value" : {
                      "ident-kind" : "Var",
                      "kind" : "ident",
                      "value" : "t",
                      "variable" : 0
                    }
                  },
                  "type" : "selector"
                },
                "type" : "selector"
              },
              "go-type" : 15,
              "kind" : "expression",
              "type" : "call"
            },
            "else" : null,
            "init" : null,
            "kind" : "statement",
            "type" : "if"
          } ],
          "condition" : {
            "go-type" : 41,
            "kind" : "expression",
            "left" : {
              "go-type" : 7,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "i",
                "variable" : 27
              }
            },
            "operator" : "<",
            "right" : {
              "go-type" : 7,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "8"
              }
            },
            "type" : "binary"
          },
          "init" : {
            "kind" : "statement",
            "left" : [ {
              "go-type" : -1,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "NoKind",
                "kind" : "ident",
                "value" : "i"
              }
            } ],
            "right" : [ {
              "go-type" : 7,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "0"
              }
            } ],
            "type" : "define"
          },
          "kind" : "statement",
          "post" : {
            "kind" : "statement",
            "operation" : "++",
            "target" : {
              "go-type" : 7,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "i",
                "variable" : 27
              }
            },
            "type" : "crement"
          },
          "type" : "for"
        } ],
        "condition" : {
          "go-type" : 41,
          "kind" : "expression",
          "left" : {
            "go-type" : 35,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "b",
              "variable" : 20
            }
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 42,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Nil",
              "kind" : "ident",
              "value" : "nil"
            }
          },
          "type" : "binary"
        },
        "init" : null,
        "kind" : "statement",
        "post" : {
          "kind" : "statement",
          "left" : [ {
            "go-type" : 35,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "b",
              "variable" : 20
            }
          } ],
          "right" : [ {
            "arguments" : [ {
              "go-type" : 2,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "t",
                "variable" : 0
              }
            } ],
            "ellipsis" : false,
            "function" : {
              "field" : {
                "function" : 12,
                "ident-kind" : "Func",
                "kind" : "ident",
                "value" : "overflow"
              },
              "go-type" : 68,
              "kind" : "expression",
              "target" : {
                "go-type" : 35,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "b",
                  "variable" : 20
                }
              },
              "type" : "selector"
            },
            "go-type" : 35,
            "kind" : "expression",
            "type" : "call"
          } ],
          "type" : "assign"
        },
        "type" : "for"
      },
      "assign-vars" : [ ],
      "line-end" : 506,
      "code" : "bucketloop:\n\tfor ; b != nil; b = b.overflow(t) {\n\t\tfor i := uintptr(0); i < bucketCnt; i++ {\n\t\t\tif b.tophash[i] != top {\n\t\t\t\tif b.tophash[i] == emptyRest {\n\t\t\t\t\tbreak bucketloop\n\t\t\t\t}\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tk := add(unsafe.Pointer(b), dataOffset+i*uintptr(t.keysize))\n\t\t\tif t.indirectkey() {\n\t\t\t\tk = *((*unsafe.Pointer)(k))\n\t\t\t}\n\t\t\tif t.key.equal(key, k) {\n\t\t\t\te := add(unsafe.Pointer(b), dataOffset+bucketCnt*uintptr(t.keysize)+i*uintptr(t.elemsize))\n\t\t\t\tif t.indirectelem() {\n\t\t\t\t\te = *((*unsafe.Pointer)(e))\n\t\t\t\t}\n\t\t\t\treturn e, true\n\t\t\t}\n\t\t}\n\t}",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 30, 44 ],
      "in-vars" : [ 2, 0, 5, 20, 25 ],
      "exit" : false,
      "out-vars" : [ 2, 0, 5, 20, 25 ],
      "decl-vars" : [ ],
      "line-start" : 486,
      "ast" : {
        "condition" : {
          "go-type" : 41,
          "kind" : "expression",
          "left" : {
            "go-type" : 35,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "b",
              "variable" : 20
            }
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 42,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Nil",
              "kind" : "ident",
              "value" : "nil"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "for"
      },
      "assign-vars" : [ ],
      "line-end" : 506,
      "code" : "for ; b != nil; b = b.overflow(t) {\n\tfor i := uintptr(0); i < bucketCnt; i++ {\n\t\tif b.tophash[i] != top {\n\t\t\tif b.tophash[i] == emptyRest {\n\t\t\t\tbreak bucketloop\n\t\t\t}\n\t\t\tcontinue\n\t\t}\n\t\tk := add(unsafe.Pointer(b), dataOffset+i*uintptr(t.keysize))\n\t\tif t.indirectkey() {\n\t\t\tk = *((*unsafe.Pointer)(k))\n\t\t}\n\t\tif t.key.equal(key, k) {\n\t\t\te := add(unsafe.Pointer(b), dataOffset+bucketCnt*uintptr(t.keysize)+i*uintptr(t.elemsize))\n\t\t\tif t.indirectelem() {\n\t\t\t\te = *((*unsafe.Pointer)(e))\n\t\t\t}\n\t\t\treturn e, true\n\t\t}\n\t}\n}",
      "entry" : false,
      "use-vars" : [ 20 ]
    }, {
      "update-vars" : [ 20 ],
      "successors" : [ 27 ],
      "in-vars" : [ 20, 25, 2, 0, 5 ],
      "exit" : false,
      "out-vars" : [ 2, 0, 5, 20, 25 ],
      "decl-vars" : [ ],
      "line-start" : 486,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 35,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "b",
            "variable" : 20
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "t",
              "variable" : 0
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "function" : 12,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "overflow"
            },
            "go-type" : 68,
            "kind" : "expression",
            "target" : {
              "go-type" : 35,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "b",
                "variable" : 20
              }
            },
            "type" : "selector"
          },
          "go-type" : 35,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 20 ],
      "line-end" : 486,
      "code" : "b = b.overflow(t)",
      "entry" : false,
      "use-vars" : [ 20, 0 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 32, 28 ],
      "in-vars" : [ 2, 0, 5, 27, 20, 25 ],
      "exit" : false,
      "out-vars" : [ 2, 0, 5, 27, 20, 25 ],
      "decl-vars" : [ ],
      "line-start" : 487,
      "ast" : {
        "condition" : {
          "go-type" : 41,
          "kind" : "expression",
          "left" : {
            "go-type" : 7,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "i",
              "variable" : 27
            }
          },
          "operator" : "<",
          "right" : {
            "go-type" : 7,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "8"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "for"
      },
      "assign-vars" : [ ],
      "line-end" : 505,
      "code" : "for i := uintptr(0); i < bucketCnt; i++ {\n\tif b.tophash[i] != top {\n\t\tif b.tophash[i] == emptyRest {\n\t\t\tbreak bucketloop\n\t\t}\n\t\tcontinue\n\t}\n\tk := add(unsafe.Pointer(b), dataOffset+i*uintptr(t.keysize))\n\tif t.indirectkey() {\n\t\tk = *((*unsafe.Pointer)(k))\n\t}\n\tif t.key.equal(key, k) {\n\t\te := add(unsafe.Pointer(b), dataOffset+bucketCnt*uintptr(t.keysize)+i*uintptr(t.elemsize))\n\t\tif t.indirectelem() {\n\t\t\te = *((*unsafe.Pointer)(e))\n\t\t}\n\t\treturn e, true\n\t}\n}",
      "entry" : false,
      "use-vars" : [ 27 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 29 ],
      "in-vars" : [ 20, 25, 2, 0, 5 ],
      "exit" : false,
      "out-vars" : [ 2, 0, 5, 27, 20, 25 ],
      "decl-vars" : [ 27 ],
      "line-start" : 487,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "i"
          }
        } ],
        "right" : [ {
          "go-type" : 7,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "0"
          }
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 487,
      "code" : "i := uintptr(0)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ 27 ],
      "successors" : [ 29 ],
      "in-vars" : [ 25, 2, 0, 5, 27, 20 ],
      "exit" : false,
      "out-vars" : [ 25, 2, 0, 5, 27, 20 ],
      "decl-vars" : [ ],
      "line-start" : 487,
      "ast" : {
        "kind" : "statement",
        "operation" : "++",
        "target" : {
          "go-type" : 7,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "i",
            "variable" : 27
          }
        },
        "type" : "crement"
      },
      "assign-vars" : [ 27 ],
      "line-end" : 487,
      "code" : "i++",
      "entry" : false,
      "use-vars" : [ 27 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 33, 36 ],
      "in-vars" : [ 20, 25, 2, 0, 5, 27 ],
      "exit" : false,
      "out-vars" : [ 25, 2, 0, 5, 27, 20 ],
      "decl-vars" : [ ],
      "line-start" : 488,
      "ast" : {
        "condition" : {
          "go-type" : 41,
          "kind" : "expression",
          "left" : {
            "go-type" : 10,
            "index" : {
              "go-type" : 7,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "i",
                "variable" : 27
              }
            },
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "tophash",
                "variable" : 28
              },
              "go-type" : 38,
              "kind" : "expression",
              "target" : {
                "go-type" : 35,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "b",
                  "variable" : 20
                }
              },
              "type" : "selector"
            },
            "type" : "index"
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 10,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "top",
              "variable" : 25
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 493,
      "code" : "if b.tophash[i] != top {\n\tif b.tophash[i] == emptyRest {\n\t\tbreak bucketloop\n\t}\n\tcontinue\n}",
      "entry" : false,
      "use-vars" : [ 25, 20, 27 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 34, 35 ],
      "in-vars" : [ 0, 5, 27, 20, 25, 2 ],
      "exit" : false,
      "out-vars" : [ 27, 20, 25, 2, 0, 5 ],
      "decl-vars" : [ ],
      "line-start" : 489,
      "ast" : {
        "condition" : {
          "go-type" : 41,
          "kind" : "expression",
          "left" : {
            "go-type" : 10,
            "index" : {
              "go-type" : 7,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "i",
                "variable" : 27
              }
            },
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "tophash",
                "variable" : 28
              },
              "go-type" : 38,
              "kind" : "expression",
              "target" : {
                "go-type" : 35,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "b",
                  "variable" : 20
                }
              },
              "type" : "selector"
            },
            "type" : "index"
          },
          "operator" : "==",
          "right" : {
            "go-type" : 10,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 491,
      "code" : "if b.tophash[i] == emptyRest {\n\tbreak bucketloop\n}",
      "entry" : false,
      "use-vars" : [ 27, 20 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 44 ],
      "in-vars" : [ 5 ],
      "exit" : false,
      "out-vars" : [ 5 ],
      "decl-vars" : [ ],
      "line-start" : 490,
      "ast" : {
        "kind" : "statement",
        "label" : {
          "ident-kind" : "Label",
          "kind" : "ident",
          "value" : "bucketloop"
        },
        "type" : "break"
      },
      "assign-vars" : [ ],
      "line-end" : 490,
      "code" : "break bucketloop",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 31 ],
      "in-vars" : [ 2, 0, 5, 27, 20, 25 ],
      "exit" : false,
      "out-vars" : [ 2, 0, 5, 27, 20, 25 ],
      "decl-vars" : [ ],
      "line-start" : 492,
      "ast" : {
        "kind" : "statement",
        "label" : null,
        "type" : "continue"
      },
      "assign-vars" : [ ],
      "line-end" : 492,
      "code" : "continue",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 37 ],
      "in-vars" : [ 25, 2, 0, 5, 27, 20 ],
      "exit" : false,
      "out-vars" : [ 5, 30, 27, 20, 25, 2, 0 ],
      "decl-vars" : [ 30 ],
      "line-start" : 494,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "k"
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "coerced-to" : {
              "go-type" : 13,
              "kind" : "type",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 1,
                "value" : "unsafe"
              },
              "type" : "identifier",
              "value" : {
                "go-type" : 13,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "Pointer"
              }
            },
            "go-type" : 13,
            "kind" : "expression",
            "target" : {
              "go-type" : 35,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "b",
                "variable" : 20
              }
            },
            "type" : "cast"
          }, {
            "go-type" : 7,
            "kind" : "expression",
            "left" : {
              "go-type" : 7,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "8"
              }
            },
            "operator" : "+",
            "right" : {
              "go-type" : 7,
              "kind" : "expression",
              "left" : {
                "go-type" : 7,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "i",
                  "variable" : 27
                }
              },
              "operator" : "*",
              "right" : {
                "coerced-to" : {
                  "go-type" : 7,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 7,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "uintptr"
                  }
                },
                "go-type" : 7,
                "kind" : "expression",
                "target" : {
                  "field" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "keysize",
                    "variable" : 29
                  },
                  "go-type" : 10,
                  "kind" : "expression",
                  "target" : {
                    "go-type" : 2,
                    "kind" : "expression",
                    "type" : "identifier",
                    "value" : {
                      "ident-kind" : "Var",
                      "kind" : "ident",
                      "value" : "t",
                      "variable" : 0
                    }
                  },
                  "type" : "selector"
                },
                "type" : "cast"
              },
              "type" : "binary"
            },
            "type" : "binary"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 72,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 13,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "add"
            }
          },
          "go-type" : 13,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 494,
      "code" : "k := add(unsafe.Pointer(b), dataOffset+i*uintptr(t.keysize))",
      "entry" : false,
      "use-vars" : [ 27, 20, 0 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 38, 39 ],
      "in-vars" : [ 2, 0, 5, 30, 27, 20, 25 ],
      "exit" : false,
      "out-vars" : [ 25, 2, 0, 5, 30, 27, 20 ],
      "decl-vars" : [ ],
      "line-start" : 495,
      "ast" : {
        "condition" : {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "function" : 14,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "indirectkey"
            },
            "go-type" : 54,
            "kind" : "expression",
            "target" : {
              "go-type" : 2,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "t",
                "variable" : 0
              }
            },
            "type" : "selector"
          },
          "go-type" : 15,
          "kind" : "expression",
          "type" : "call"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 497,
      "code" : "if t.indirectkey() {\n\tk = *((*unsafe.Pointer)(k))\n}",
      "entry" : false,
      "use-vars" : [ 0 ]
    }, {
      "update-vars" : [ 30 ],
      "successors" : [ 39 ],
      "in-vars" : [ 25, 2, 0, 5, 30, 27, 20 ],
      "exit" : false,
      "out-vars" : [ 27, 20, 25, 2, 0, 5, 30 ],
      "decl-vars" : [ ],
      "line-start" : 496,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 13,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "k",
            "variable" : 30
          }
        } ],
        "right" : [ {
          "go-type" : 13,
          "kind" : "expression",
          "target" : {
            "go-type" : 75,
            "kind" : "expression",
            "target" : {
              "coerced-to" : {
                "contained" : {
                  "go-type" : 13,
                  "kind" : "type",
                  "qualifier" : {
                    "ident-kind" : "PkgName",
                    "kind" : "ident",
                    "package" : 1,
                    "value" : "unsafe"
                  },
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 13,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "Pointer"
                  }
                },
                "go-type" : 75,
                "kind" : "type",
                "type" : "pointer"
              },
              "go-type" : 75,
              "kind" : "expression",
              "target" : {
                "go-type" : 13,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "k",
                  "variable" : 30
                }
              },
              "type" : "cast"
            },
            "type" : "paren"
          },
          "type" : "star"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 30 ],
      "line-end" : 496,
      "code" : "k = *((*unsafe.Pointer)(k))",
      "entry" : false,
      "use-vars" : [ 30 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 40, 31 ],
      "in-vars" : [ 27, 20, 25, 2, 0, 5, 30 ],
      "exit" : false,
      "out-vars" : [ 25, 2, 0, 5, 27, 20 ],
      "decl-vars" : [ ],
      "line-start" : 498,
      "ast" : {
        "condition" : {
          "arguments" : [ {
            "go-type" : 13,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "key",
              "variable" : 2
            }
          }, {
            "go-type" : 13,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "k",
              "variable" : 30
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "equal",
              "variable" : 31
            },
            "go-type" : 11,
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "key",
                "variable" : 8
              },
              "go-type" : 21,
              "kind" : "expression",
              "target" : {
                "go-type" : 2,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "t",
                  "variable" : 0
                }
              },
              "type" : "selector"
            },
            "type" : "selector"
          },
          "go-type" : 15,
          "kind" : "expression",
          "type" : "call"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 504,
      "code" : "if t.key.equal(key, k) {\n\te := add(unsafe.Pointer(b), dataOffset+bucketCnt*uintptr(t.keysize)+i*uintptr(t.elemsize))\n\tif t.indirectelem() {\n\t\te = *((*unsafe.Pointer)(e))\n\t}\n\treturn e, true\n}",
      "entry" : false,
      "use-vars" : [ 2, 30, 0 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 41 ],
      "in-vars" : [ 0, 27, 20 ],
      "exit" : false,
      "out-vars" : [ 0, 33 ],
      "decl-vars" : [ 33 ],
      "line-start" : 499,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "e"
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "coerced-to" : {
              "go-type" : 13,
              "kind" : "type",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 1,
                "value" : "unsafe"
              },
              "type" : "identifier",
              "value" : {
                "go-type" : 13,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "Pointer"
              }
            },
            "go-type" : 13,
            "kind" : "expression",
            "target" : {
              "go-type" : 35,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "b",
                "variable" : 20
              }
            },
            "type" : "cast"
          }, {
            "go-type" : 7,
            "kind" : "expression",
            "left" : {
              "go-type" : 7,
              "kind" : "expression",
              "left" : {
                "go-type" : 7,
                "kind" : "constant",
                "value" : {
                  "type" : "INT",
                  "value" : "8"
                }
              },
              "operator" : "+",
              "right" : {
                "go-type" : 7,
                "kind" : "expression",
                "left" : {
                  "go-type" : 7,
                  "kind" : "constant",
                  "value" : {
                    "type" : "INT",
                    "value" : "8"
                  }
                },
                "operator" : "*",
                "right" : {
                  "coerced-to" : {
                    "go-type" : 7,
                    "kind" : "type",
                    "type" : "identifier",
                    "value" : {
                      "go-type" : 7,
                      "ident-kind" : "TypeName",
                      "kind" : "ident",
                      "value" : "uintptr"
                    }
                  },
                  "go-type" : 7,
                  "kind" : "expression",
                  "target" : {
                    "field" : {
                      "ident-kind" : "Var",
                      "kind" : "ident",
                      "value" : "keysize",
                      "variable" : 29
                    },
                    "go-type" : 10,
                    "kind" : "expression",
                    "target" : {
                      "go-type" : 2,
                      "kind" : "expression",
                      "type" : "identifier",
                      "value" : {
                        "ident-kind" : "Var",
                        "kind" : "ident",
                        "value" : "t",
                        "variable" : 0
                      }
                    },
                    "type" : "selector"
                  },
                  "type" : "cast"
                },
                "type" : "binary"
              },
              "type" : "binary"
            },
            "operator" : "+",
            "right" : {
              "go-type" : 7,
              "kind" : "expression",
              "left" : {
                "go-type" : 7,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "i",
                  "variable" : 27
                }
              },
              "operator" : "*",
              "right" : {
                "coerced-to" : {
                  "go-type" : 7,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 7,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "uintptr"
                  }
                },
                "go-type" : 7,
                "kind" : "expression",
                "target" : {
                  "field" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "elemsize",
                    "variable" : 32
                  },
                  "go-type" : 10,
                  "kind" : "expression",
                  "target" : {
                    "go-type" : 2,
                    "kind" : "expression",
                    "type" : "identifier",
                    "value" : {
                      "ident-kind" : "Var",
                      "kind" : "ident",
                      "value" : "t",
                      "variable" : 0
                    }
                  },
                  "type" : "selector"
                },
                "type" : "cast"
              },
              "type" : "binary"
            },
            "type" : "binary"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 72,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 13,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "add"
            }
          },
          "go-type" : 13,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 499,
      "code" : "e := add(unsafe.Pointer(b), dataOffset+bucketCnt*uintptr(t.keysize)+i*uintptr(t.elemsize))",
      "entry" : false,
      "use-vars" : [ 27, 20, 0 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 42, 43 ],
      "in-vars" : [ 0, 33 ],
      "exit" : false,
      "out-vars" : [ 33 ],
      "decl-vars" : [ ],
      "line-start" : 500,
      "ast" : {
        "condition" : {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "function" : 15,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "indirectelem"
            },
            "go-type" : 54,
            "kind" : "expression",
            "target" : {
              "go-type" : 2,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "t",
                "variable" : 0
              }
            },
            "type" : "selector"
          },
          "go-type" : 15,
          "kind" : "expression",
          "type" : "call"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 502,
      "code" : "if t.indirectelem() {\n\te = *((*unsafe.Pointer)(e))\n}",
      "entry" : false,
      "use-vars" : [ 0 ]
    }, {
      "update-vars" : [ 33 ],
      "successors" : [ 43 ],
      "in-vars" : [ 33 ],
      "exit" : false,
      "out-vars" : [ 33 ],
      "decl-vars" : [ ],
      "line-start" : 501,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 13,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "e",
            "variable" : 33
          }
        } ],
        "right" : [ {
          "go-type" : 13,
          "kind" : "expression",
          "target" : {
            "go-type" : 75,
            "kind" : "expression",
            "target" : {
              "coerced-to" : {
                "contained" : {
                  "go-type" : 13,
                  "kind" : "type",
                  "qualifier" : {
                    "ident-kind" : "PkgName",
                    "kind" : "ident",
                    "package" : 1,
                    "value" : "unsafe"
                  },
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 13,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "Pointer"
                  }
                },
                "go-type" : 75,
                "kind" : "type",
                "type" : "pointer"
              },
              "go-type" : 75,
              "kind" : "expression",
              "target" : {
                "go-type" : 13,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "e",
                  "variable" : 33
                }
              },
              "type" : "cast"
            },
            "type" : "paren"
          },
          "type" : "star"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 33 ],
      "line-end" : 501,
      "code" : "e = *((*unsafe.Pointer)(e))",
      "entry" : false,
      "use-vars" : [ 33 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 33 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 503,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 13,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "e",
            "variable" : 33
          }
        }, {
          "go-type" : 15,
          "kind" : "constant",
          "value" : {
            "type" : "BOOL",
            "value" : "true"
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 503,
      "code" : "return e, true",
      "entry" : false,
      "use-vars" : [ 33 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 5 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 507,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "coerced-to" : {
            "go-type" : 13,
            "kind" : "type",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 1,
              "value" : "unsafe"
            },
            "type" : "identifier",
            "value" : {
              "go-type" : 13,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "Pointer"
            }
          },
          "go-type" : 13,
          "kind" : "expression",
          "target" : {
            "go-type" : 16,
            "kind" : "expression",
            "operator" : "&",
            "target" : {
              "go-type" : 17,
              "index" : {
                "go-type" : 29,
                "kind" : "constant",
                "value" : {
                  "type" : "INT",
                  "value" : "0"
                }
              },
              "kind" : "expression",
              "target" : {
                "go-type" : 40,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "zeroVal",
                  "variable" : 5
                }
              },
              "type" : "index"
            },
            "type" : "unary"
          },
          "type" : "cast"
        }, {
          "go-type" : 15,
          "kind" : "constant",
          "value" : {
            "type" : "BOOL",
            "value" : "false"
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 507,
      "code" : "return unsafe.Pointer(&zeroVal[0]), false",
      "entry" : false,
      "use-vars" : [ 5 ]
    } ],
    "code" : "func mapaccess2(t *maptype, h *hmap, key unsafe.Pointer) (unsafe.Pointer, bool) {\n\tif raceenabled && h != nil {\n\t\tcallerpc := getcallerpc()\n\t\tpc := funcPC(mapaccess2)\n\t\tracereadpc(unsafe.Pointer(h), callerpc, pc)\n\t\traceReadObjectPC(t.key, key, callerpc, pc)\n\t}\n\tif msanenabled && h != nil {\n\t\tmsanread(key, t.key.size)\n\t}\n\tif h == nil || h.count == 0 {\n\t\tif t.hashMightPanic() {\n\t\t\tt.hasher(key, 0)\n\t\t}\n\t\treturn unsafe.Pointer(&zeroVal[0]), false\n\t}\n\tif h.flags&hashWriting != 0 {\n\t\tthrow(\"concurrent map read and map write\")\n\t}\n\thash := t.hasher(key, uintptr(h.hash0))\n\tm := bucketMask(h.B)\n\tb := (*bmap)(unsafe.Pointer(uintptr(h.buckets) + (hash&m)*uintptr(t.bucketsize)))\n\tif c := h.oldbuckets; c != nil {\n\t\tif !h.sameSizeGrow() {\n\n\t\t\tm >>= 1\n\t\t}\n\t\toldb := (*bmap)(unsafe.Pointer(uintptr(c) + (hash&m)*uintptr(t.bucketsize)))\n\t\tif !evacuated(oldb) {\n\t\t\tb = oldb\n\t\t}\n\t}\n\ttop := tophash(hash)\nbucketloop:\n\tfor ; b != nil; b = b.overflow(t) {\n\t\tfor i := uintptr(0); i < bucketCnt; i++ {\n\t\t\tif b.tophash[i] != top {\n\t\t\t\tif b.tophash[i] == emptyRest {\n\t\t\t\t\tbreak bucketloop\n\t\t\t\t}\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tk := add(unsafe.Pointer(b), dataOffset+i*uintptr(t.keysize))\n\t\t\tif t.indirectkey() {\n\t\t\t\tk = *((*unsafe.Pointer)(k))\n\t\t\t}\n\t\t\tif t.key.equal(key, k) {\n\t\t\t\te := add(unsafe.Pointer(b), dataOffset+bucketCnt*uintptr(t.keysize)+i*uintptr(t.elemsize))\n\t\t\t\tif t.indirectelem() {\n\t\t\t\t\te = *((*unsafe.Pointer)(e))\n\t\t\t\t}\n\t\t\t\treturn e, true\n\t\t\t}\n\t\t}\n\t}\n\treturn unsafe.Pointer(&zeroVal[0]), false\n}",
    "defines" : [ 0 ],
    "functions" : [ {
      "name" : "mapaccess2",
      "package" : 0,
      "type" : 0,
      "exported" : false
    }, {
      "name" : "getcallerpc",
      "package" : 0,
      "type" : 43,
      "exported" : false
    }, {
      "name" : "funcPC",
      "package" : 0,
      "type" : 45,
      "exported" : false
    }, {
      "name" : "racereadpc",
      "package" : 0,
      "type" : 48,
      "exported" : false
    }, {
      "name" : "raceReadObjectPC",
      "package" : 0,
      "type" : 50,
      "exported" : false
    }, {
      "name" : "msanread",
      "package" : 0,
      "type" : 52,
      "exported" : false
    }, {
      "name" : "hashMightPanic",
      "package" : 0,
      "type" : 55,
      "exported" : false
    }, {
      "name" : "throw",
      "package" : 0,
      "type" : 56,
      "exported" : false
    }, {
      "name" : "bucketMask",
      "package" : 0,
      "type" : 59,
      "exported" : false
    }, {
      "name" : "sameSizeGrow",
      "package" : 0,
      "type" : 61,
      "exported" : false
    }, {
      "name" : "evacuated",
      "package" : 0,
      "type" : 63,
      "exported" : false
    }, {
      "name" : "tophash",
      "package" : 0,
      "type" : 65,
      "exported" : false
    }, {
      "name" : "overflow",
      "package" : 0,
      "type" : 71,
      "exported" : false
    }, {
      "name" : "add",
      "package" : 0,
      "type" : 72,
      "exported" : false
    }, {
      "name" : "indirectkey",
      "package" : 0,
      "type" : 55,
      "exported" : false
    }, {
      "name" : "indirectelem",
      "package" : 0,
      "type" : 55,
      "exported" : false
    } ],
    "line-end" : 508,
    "line-start" : 452,
    "names" : [ "mapaccess2" ],
    "package" : 0,
    "packages" : [ {
      "name" : "runtime",
      "path" : "runtime"
    }, {
      "name" : "unsafe",
      "path" : "unsafe"
    } ],
    "params" : [ 0, 1, 2 ],
    "receivers" : [ ],
    "results" : [ 3, 4 ],
    "type" : "function",
    "types" : [ {
      "name" : "func(t *runtime.maptype, h *runtime.hmap, key unsafe.Pointer) (unsafe.Pointer, bool)",
      "params" : 1,
      "recv" : -1,
      "results" : 39,
      "type" : "Signature",
      "underlying" : 0,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "t",
        "type" : 2
      }, {
        "name" : "h",
        "type" : 26
      }, {
        "name" : "key",
        "type" : 13
      } ],
      "name" : "(t *runtime.maptype, h *runtime.hmap, key unsafe.Pointer)",
      "type" : "Tuple",
      "underlying" : 1
    }, {
      "elem" : 3,
      "name" : "*runtime.maptype",
      "type" : "Pointer",
      "underlying" : 2
    }, {
      "local-name" : "maptype",
      "name" : "runtime.maptype",
      "package" : 0,
      "type" : "Named",
      "underlying" : 4
    }, {
      "fields" : [ {
        "name" : "typ",
        "type" : 5
      }, {
        "name" : "key",
        "type" : 21
      }, {
        "name" : "elem",
        "type" : 21
      }, {
        "name" : "bucket",
        "type" : 21
      }, {
        "name" : "hasher",
        "type" : 22
      }, {
        "name" : "keysize",
        "type" : 10
      }, {
        "name" : "elemsize",
        "type" : 10
      }, {
        "name" : "bucketsize",
        "type" : 25
      }, {
        "name" : "flags",
        "type" : 8
      } ],
      "name" : "struct{typ runtime._type; key *runtime._type; elem *runtime._type; bucket *runtime._type; hasher func(unsafe.Pointer, uintptr) uintptr; keysize uint8; elemsize uint8; bucketsize uint16; flags uint32}",
      "type" : "Struct",
      "underlying" : 4
    }, {
      "local-name" : "_type",
      "name" : "runtime._type",
      "package" : 0,
      "type" : "Named",
      "underlying" : 6
    }, {
      "fields" : [ {
        "name" : "size",
        "type" : 7
      }, {
        "name" : "ptrdata",
        "type" : 7
      }, {
        "name" : "hash",
        "type" : 8
      }, {
        "name" : "tflag",
        "type" : 9
      }, {
        "name" : "align",
        "type" : 10
      }, {
        "name" : "fieldAlign",
        "type" : 10
      }, {
        "name" : "kind",
        "type" : 10
      }, {
        "name" : "equal",
        "type" : 11
      }, {
        "name" : "gcdata",
        "type" : 16
      }, {
        "name" : "str",
        "type" : 18
      }, {
        "name" : "ptrToThis",
        "type" : 20
      } ],
      "name" : "struct{size uintptr; ptrdata uintptr; hash uint32; tflag runtime.tflag; align uint8; fieldAlign uint8; kind uint8; equal func(unsafe.Pointer, unsafe.Pointer) bool; gcdata *byte; str runtime.nameOff; ptrToThis runtime.typeOff}",
      "type" : "Struct",
      "underlying" : 6
    }, {
      "name" : "uintptr",
      "type" : "Basic",
      "underlying" : 7
    }, {
      "name" : "uint32",
      "type" : "Basic",
      "underlying" : 8
    }, {
      "local-name" : "tflag",
      "name" : "runtime.tflag",
      "package" : 0,
      "type" : "Named",
      "underlying" : 10
    }, {
      "name" : "uint8",
      "type" : "Basic",
      "underlying" : 10
    }, {
      "name" : "func(unsafe.Pointer, unsafe.Pointer) bool",
      "params" : 12,
      "recv" : -1,
      "results" : 14,
      "type" : "Signature",
      "underlying" : 11,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 13
      }, {
        "name" : "",
        "type" : 13
      } ],
      "name" : "(unsafe.Pointer, unsafe.Pointer)",
      "type" : "Tuple",
      "underlying" : 12
    }, {
      "local-name" : "Pointer",
      "name" : "unsafe.Pointer",
      "package" : 1,
      "type" : "Basic",
      "underlying" : 13
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 15
      } ],
      "name" : "(bool)",
      "type" : "Tuple",
      "underlying" : 14
    }, {
      "name" : "bool",
      "type" : "Basic",
      "underlying" : 15
    }, {
      "elem" : 17,
      "name" : "*byte",
      "type" : "Pointer",
      "underlying" : 16
    }, {
      "name" : "byte",
      "type" : "Basic",
      "underlying" : 17
    }, {
      "local-name" : "nameOff",
      "name" : "runtime.nameOff",
      "package" : 0,
      "type" : "Named",
      "underlying" : 19
    }, {
      "name" : "int32",
      "type" : "Basic",
      "underlying" : 19
    }, {
      "local-name" : "typeOff",
      "name" : "runtime.typeOff",
      "package" : 0,
      "type" : "Named",
      "underlying" : 19
    }, {
      "elem" : 5,
      "name" : "*runtime._type",
      "type" : "Pointer",
      "underlying" : 21
    }, {
      "name" : "func(unsafe.Pointer, uintptr) uintptr",
      "params" : 23,
      "recv" : -1,
      "results" : 24,
      "type" : "Signature",
      "underlying" : 22,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 13
      }, {
        "name" : "",
        "type" : 7
      } ],
      "name" : "(unsafe.Pointer, uintptr)",
      "type" : "Tuple",
      "underlying" : 23
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 7
      } ],
      "name" : "(uintptr)",
      "type" : "Tuple",
      "underlying" : 24
    }, {
      "name" : "uint16",
      "type" : "Basic",
      "underlying" : 25
    }, {
      "elem" : 27,
      "name" : "*runtime.hmap",
      "type" : "Pointer",
      "underlying" : 26
    }, {
      "local-name" : "hmap",
      "name" : "runtime.hmap",
      "package" : 0,
      "type" : "Named",
      "underlying" : 28
    }, {
      "fields" : [ {
        "name" : "count",
        "type" : 29
      }, {
        "name" : "flags",
        "type" : 10
      }, {
        "name" : "B",
        "type" : 10
      }, {
        "name" : "noverflow",
        "type" : 25
      }, {
        "name" : "hash0",
        "type" : 8
      }, {
        "name" : "buckets",
        "type" : 13
      }, {
        "name" : "oldbuckets",
        "type" : 13
      }, {
        "name" : "nevacuate",
        "type" : 7
      }, {
        "name" : "extra",
        "type" : 30
      } ],
      "name" : "struct{count int; flags uint8; B uint8; noverflow uint16; hash0 uint32; buckets unsafe.Pointer; oldbuckets unsafe.Pointer; nevacuate uintptr; extra *runtime.mapextra}",
      "type" : "Struct",
      "underlying" : 28
    }, {
      "name" : "int",
      "type" : "Basic",
      "underlying" : 29
    }, {
      "elem" : 31,
      "name" : "*runtime.mapextra",
      "type" : "Pointer",
      "underlying" : 30
    }, {
      "local-name" : "mapextra",
      "name" : "runtime.mapextra",
      "package" : 0,
      "type" : "Named",
      "underlying" : 32
    }, {
      "fields" : [ {
        "name" : "overflow",
        "type" : 33
      }, {
        "name" : "oldoverflow",
        "type" : 33
      }, {
        "name" : "nextOverflow",
        "type" : 35
      } ],
      "name" : "struct{overflow *[]*runtime.bmap; oldoverflow *[]*runtime.bmap; nextOverflow *runtime.bmap}",
      "type" : "Struct",
      "underlying" : 32
    }, {
      "elem" : 34,
      "name" : "*[]*runtime.bmap",
      "type" : "Pointer",
      "underlying" : 33
    }, {
      "elem" : 35,
      "name" : "[]*runtime.bmap",
      "type" : "Slice",
      "underlying" : 34
    }, {
      "elem" : 36,
      "name" : "*runtime.bmap",
      "type" : "Pointer",
      "underlying" : 35
    }, {
      "local-name" : "bmap",
      "name" : "runtime.bmap",
      "package" : 0,
      "type" : "Named",
      "underlying" : 37
    }, {
      "fields" : [ {
        "name" : "tophash",
        "type" : 38
      } ],
      "name" : "struct{tophash [8]uint8}",
      "type" : "Struct",
      "underlying" : 37
    }, {
      "elem" : 10,
      "name" : "[8]uint8",
      "type" : "Array",
      "underlying" : 38
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 13
      }, {
        "name" : "",
        "type" : 15
      } ],
      "name" : "(unsafe.Pointer, bool)",
      "type" : "Tuple",
      "underlying" : 39
    }, {
      "elem" : 17,
      "name" : "[1024]byte",
      "type" : "Array",
      "underlying" : 40
    }, {
      "name" : "untyped bool",
      "type" : "Basic",
      "underlying" : 41
    }, {
      "name" : "untyped nil",
      "type" : "Basic",
      "underlying" : 42
    }, {
      "name" : "func() uintptr",
      "params" : 44,
      "recv" : -1,
      "results" : 24,
      "type" : "Signature",
      "underlying" : 43,
      "variadic" : false
    }, {
      "fields" : [ ],
      "name" : "()",
      "type" : "Tuple",
      "underlying" : 44
    }, {
      "name" : "func(f interface{}) uintptr",
      "params" : 46,
      "recv" : -1,
      "results" : 24,
      "type" : "Signature",
      "underlying" : 45,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "f",
        "type" : 47
      } ],
      "name" : "(f interface{})",
      "type" : "Tuple",
      "underlying" : 46
    }, {
      "methods" : [ ],
      "name" : "interface{}",
      "type" : "Interface",
      "underlying" : 47
    }, {
      "name" : "func(addr unsafe.Pointer, callerpc uintptr, pc uintptr)",
      "params" : 49,
      "recv" : -1,
      "results" : 44,
      "type" : "Signature",
      "underlying" : 48,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "addr",
        "type" : 13
      }, {
        "name" : "callerpc",
        "type" : 7
      }, {
        "name" : "pc",
        "type" : 7
      } ],
      "name" : "(addr unsafe.Pointer, callerpc uintptr, pc uintptr)",
      "type" : "Tuple",
      "underlying" : 49
    }, {
      "name" : "func(t *runtime._type, addr unsafe.Pointer, callerpc uintptr, pc uintptr)",
      "params" : 51,
      "recv" : -1,
      "results" : 44,
      "type" : "Signature",
      "underlying" : 50,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "t",
        "type" : 21
      }, {
        "name" : "addr",
        "type" : 13
      }, {
        "name" : "callerpc",
        "type" : 7
      }, {
        "name" : "pc",
        "type" : 7
      } ],
      "name" : "(t *runtime._type, addr unsafe.Pointer, callerpc uintptr, pc uintptr)",
      "type" : "Tuple",
      "underlying" : 51
    }, {
      "name" : "func(addr unsafe.Pointer, sz uintptr)",
      "params" : 53,
      "recv" : -1,
      "results" : 44,
      "type" : "Signature",
      "underlying" : 52,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "addr",
        "type" : 13
      }, {
        "name" : "sz",
        "type" : 7
      } ],
      "name" : "(addr unsafe.Pointer, sz uintptr)",
      "type" : "Tuple",
      "underlying" : 53
    }, {
      "name" : "func() bool",
      "params" : 44,
      "recv" : -1,
      "results" : 14,
      "type" : "Signature",
      "underlying" : 54,
      "variadic" : false
    }, {
      "name" : "(*runtime.maptype) func() bool",
      "params" : 44,
      "recv" : 11,
      "results" : 14,
      "type" : "Signature",
      "underlying" : 55,
      "variadic" : false
    }, {
      "name" : "func(s string)",
      "params" : 57,
      "recv" : -1,
      "results" : 44,
      "type" : "Signature",
      "underlying" : 56,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "s",
        "type" : 58
      } ],
      "name" : "(s string)",
      "type" : "Tuple",
      "underlying" : 57
    }, {
      "name" : "string",
      "type" : "Basic",
      "underlying" : 58
    }, {
      "name" : "func(b uint8) uintptr",
      "params" : 60,
      "recv" : -1,
      "results" : 24,
      "type" : "Signature",
      "underlying" : 59,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "b",
        "type" : 10
      } ],
      "name" : "(b uint8)",
      "type" : "Tuple",
      "underlying" : 60
    }, {
      "name" : "(*runtime.hmap) func() bool",
      "params" : 44,
      "recv" : 23,
      "results" : 14,
      "type" : "Signature",
      "underlying" : 61,
      "variadic" : false
    }, {
      "name" : "untyped int",
      "type" : "Basic",
      "underlying" : 62
    }, {
      "name" : "func(b *runtime.bmap) bool",
      "params" : 64,
      "recv" : -1,
      "results" : 14,
      "type" : "Signature",
      "underlying" : 63,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "b",
        "type" : 35
      } ],
      "name" : "(b *runtime.bmap)",
      "type" : "Tuple",
      "underlying" : 64
    }, {
      "name" : "func(hash uintptr) uint8",
      "params" : 66,
      "recv" : -1,
      "results" : 67,
      "type" : "Signature",
      "underlying" : 65,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "hash",
        "type" : 7
      } ],
      "name" : "(hash uintptr)",
      "type" : "Tuple",
      "underlying" : 66
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 10
      } ],
      "name" : "(uint8)",
      "type" : "Tuple",
      "underlying" : 67
    }, {
      "name" : "func(t *runtime.maptype) *runtime.bmap",
      "params" : 69,
      "recv" : -1,
      "results" : 70,
      "type" : "Signature",
      "underlying" : 68,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "t",
        "type" : 2
      } ],
      "name" : "(t *runtime.maptype)",
      "type" : "Tuple",
      "underlying" : 69
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 35
      } ],
      "name" : "(*runtime.bmap)",
      "type" : "Tuple",
      "underlying" : 70
    }, {
      "name" : "(*runtime.bmap) func(t *runtime.maptype) *runtime.bmap",
      "params" : 69,
      "recv" : 26,
      "results" : 70,
      "type" : "Signature",
      "underlying" : 71,
      "variadic" : false
    }, {
      "name" : "func(p unsafe.Pointer, x uintptr) unsafe.Pointer",
      "params" : 73,
      "recv" : -1,
      "results" : 74,
      "type" : "Signature",
      "underlying" : 72,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "p",
        "type" : 13
      }, {
        "name" : "x",
        "type" : 7
      } ],
      "name" : "(p unsafe.Pointer, x uintptr)",
      "type" : "Tuple",
      "underlying" : 73
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 13
      } ],
      "name" : "(unsafe.Pointer)",
      "type" : "Tuple",
      "underlying" : 74
    }, {
      "elem" : 13,
      "name" : "*unsafe.Pointer",
      "type" : "Pointer",
      "underlying" : 75
    } ],
    "variables" : [ {
      "name" : "t",
      "package" : 0,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "h",
      "package" : 0,
      "type" : 26,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "key",
      "package" : 0,
      "type" : 13,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "[res0]",
      "package" : 0,
      "type" : 13,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "[res1]",
      "package" : 0,
      "type" : 15,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "zeroVal",
      "package" : 0,
      "type" : 40,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "callerpc",
      "package" : 0,
      "type" : 7,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "pc",
      "package" : 0,
      "type" : 7,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "key",
      "package" : 0,
      "type" : 21,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "size",
      "package" : 0,
      "type" : 7,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "count",
      "package" : 0,
      "type" : 29,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "mt",
      "package" : 0,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "hasher",
      "package" : 0,
      "type" : 22,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "flags",
      "package" : 0,
      "type" : 10,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "hash0",
      "package" : 0,
      "type" : 8,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "hash",
      "package" : 0,
      "type" : 7,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "B",
      "package" : 0,
      "type" : 10,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "m",
      "package" : 0,
      "type" : 7,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "buckets",
      "package" : 0,
      "type" : 13,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "bucketsize",
      "package" : 0,
      "type" : 25,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "b",
      "package" : 0,
      "type" : 35,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "oldbuckets",
      "package" : 0,
      "type" : 13,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "c",
      "package" : 0,
      "type" : 13,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "h",
      "package" : 0,
      "type" : 26,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "oldb",
      "package" : 0,
      "type" : 35,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "top",
      "package" : 0,
      "type" : 10,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "b",
      "package" : 0,
      "type" : 35,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "i",
      "package" : 0,
      "type" : 7,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "tophash",
      "package" : 0,
      "type" : 38,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "keysize",
      "package" : 0,
      "type" : 10,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "k",
      "package" : 0,
      "type" : 13,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "equal",
      "package" : 0,
      "type" : 11,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "elemsize",
      "package" : 0,
      "type" : 10,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "e",
      "package" : 0,
      "type" : 13,
      "exported" : false,
      "embedded" : false,
      "field" : false
    } ]
  },
  "go-version" : "1.14.3"
}