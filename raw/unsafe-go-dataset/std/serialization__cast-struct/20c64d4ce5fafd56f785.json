{
  "usage" : {
    "file" : "sockcmsg_linux.go",
    "label1" : "cast-struct",
    "label2" : "serialization",
    "line" : "34",
    "module" : "golang.org/x/sys",
    "pkg" : "golang.org/x/sys/unix",
    "project" : "cilium/cilium",
    "snippet" : "ucred := *(*Ucred)(unsafe.Pointer(&m.Data[0]))",
    "version" : "v0.0.0-20200420163511-1957bb5e6d1f"
  },
  "cfg" : {
    "blocks" : [ {
      "update-vars" : [ ],
      "successors" : [ 2 ],
      "in-vars" : [ 1 ],
      "exit" : false,
      "out-vars" : [ 1 ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[entry]",
      "entry" : true,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ ],
      "in-vars" : [ ],
      "exit" : true,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[exit]",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 3, 4 ],
      "in-vars" : [ 1 ],
      "exit" : false,
      "out-vars" : [ 1 ],
      "decl-vars" : [ ],
      "line-start" : 28,
      "ast" : {
        "condition" : {
          "go-type" : 22,
          "kind" : "expression",
          "left" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "Level",
              "variable" : 5
            },
            "go-type" : 8,
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "Header",
                "variable" : 4
              },
              "go-type" : 5,
              "kind" : "expression",
              "target" : {
                "go-type" : 2,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "m",
                  "variable" : 1
                }
              },
              "type" : "selector"
            },
            "type" : "selector"
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 8,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "1"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 30,
      "code" : "if m.Header.Level != SOL_SOCKET {\n\treturn nil, EINVAL\n}",
      "entry" : false,
      "use-vars" : [ 1 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 29,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 23,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Nil",
            "kind" : "ident",
            "value" : "nil"
          }
        }, {
          "go-type" : 24,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "22"
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 29,
      "code" : "return nil, EINVAL",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 5, 6 ],
      "in-vars" : [ 1 ],
      "exit" : false,
      "out-vars" : [ 1 ],
      "decl-vars" : [ ],
      "line-start" : 31,
      "ast" : {
        "condition" : {
          "go-type" : 22,
          "kind" : "expression",
          "left" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "Type",
              "variable" : 6
            },
            "go-type" : 8,
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "Header",
                "variable" : 4
              },
              "go-type" : 5,
              "kind" : "expression",
              "target" : {
                "go-type" : 2,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "m",
                  "variable" : 1
                }
              },
              "type" : "selector"
            },
            "type" : "selector"
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 8,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "2"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 33,
      "code" : "if m.Header.Type != SCM_CREDENTIALS {\n\treturn nil, EINVAL\n}",
      "entry" : false,
      "use-vars" : [ 1 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 32,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 23,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Nil",
            "kind" : "ident",
            "value" : "nil"
          }
        }, {
          "go-type" : 24,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "22"
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 32,
      "code" : "return nil, EINVAL",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 7 ],
      "in-vars" : [ 1 ],
      "exit" : false,
      "out-vars" : [ 8 ],
      "decl-vars" : [ 8 ],
      "line-start" : 34,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "ucred"
          }
        } ],
        "right" : [ {
          "go-type" : 13,
          "kind" : "expression",
          "target" : {
            "coerced-to" : {
              "contained" : {
                "go-type" : 13,
                "kind" : "type",
                "type" : "identifier",
                "value" : {
                  "go-type" : 13,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "Ucred"
                }
              },
              "go-type" : 12,
              "kind" : "type",
              "type" : "pointer"
            },
            "go-type" : 12,
            "kind" : "expression",
            "target" : {
              "coerced-to" : {
                "go-type" : 26,
                "kind" : "type",
                "qualifier" : {
                  "ident-kind" : "PkgName",
                  "kind" : "ident",
                  "package" : 2,
                  "value" : "unsafe"
                },
                "type" : "identifier",
                "value" : {
                  "go-type" : 26,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "Pointer"
                }
              },
              "go-type" : 26,
              "kind" : "expression",
              "target" : {
                "go-type" : 27,
                "kind" : "expression",
                "operator" : "&",
                "target" : {
                  "go-type" : 10,
                  "index" : {
                    "go-type" : 28,
                    "kind" : "constant",
                    "value" : {
                      "type" : "INT",
                      "value" : "0"
                    }
                  },
                  "kind" : "expression",
                  "target" : {
                    "field" : {
                      "ident-kind" : "Var",
                      "kind" : "ident",
                      "value" : "Data",
                      "variable" : 7
                    },
                    "go-type" : 9,
                    "kind" : "expression",
                    "target" : {
                      "go-type" : 2,
                      "kind" : "expression",
                      "type" : "identifier",
                      "value" : {
                        "ident-kind" : "Var",
                        "kind" : "ident",
                        "value" : "m",
                        "variable" : 1
                      }
                    },
                    "type" : "selector"
                  },
                  "type" : "index"
                },
                "type" : "unary"
              },
              "type" : "cast"
            },
            "type" : "cast"
          },
          "type" : "star"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 34,
      "code" : "ucred := *(*Ucred)(unsafe.Pointer(&m.Data[0]))",
      "entry" : false,
      "use-vars" : [ 1 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 8 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 35,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 12,
          "kind" : "expression",
          "operator" : "&",
          "target" : {
            "go-type" : 13,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "ucred",
              "variable" : 8
            }
          },
          "type" : "unary"
        }, {
          "go-type" : 23,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Nil",
            "kind" : "ident",
            "value" : "nil"
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 35,
      "code" : "return &ucred, nil",
      "entry" : false,
      "use-vars" : [ 8 ]
    } ],
    "code" : "// ParseUnixCredentials decodes a socket control message that contains\n// credentials in a Ucred structure. To receive such a message, the\n// SO_PASSCRED option must be enabled on the socket.\nfunc ParseUnixCredentials(m *SocketControlMessage) (*Ucred, error) {\n\tif m.Header.Level != SOL_SOCKET {\n\t\treturn nil, EINVAL\n\t}\n\tif m.Header.Type != SCM_CREDENTIALS {\n\t\treturn nil, EINVAL\n\t}\n\tucred := *(*Ucred)(unsafe.Pointer(&m.Data[0]))\n\treturn &ucred, nil\n}",
    "defines" : [ 0 ],
    "functions" : [ {
      "name" : "ParseUnixCredentials",
      "package" : 0,
      "type" : 0,
      "exported" : true
    } ],
    "line-end" : 36,
    "line-start" : 27,
    "names" : [ "ParseUnixCredentials" ],
    "package" : 0,
    "packages" : [ {
      "name" : "unix",
      "path" : "golang.org/x/sys/unix"
    }, {
      "name" : "syscall",
      "path" : "syscall"
    }, {
      "name" : "unsafe",
      "path" : "unsafe"
    } ],
    "params" : [ 1 ],
    "receivers" : [ ],
    "results" : [ 2, 3 ],
    "type" : "function",
    "types" : [ {
      "name" : "func(m *golang.org/x/sys/unix.SocketControlMessage) (*golang.org/x/sys/unix.Ucred, error)",
      "params" : 1,
      "recv" : -1,
      "results" : 11,
      "type" : "Signature",
      "underlying" : 0,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "m",
        "type" : 2
      } ],
      "name" : "(m *golang.org/x/sys/unix.SocketControlMessage)",
      "type" : "Tuple",
      "underlying" : 1
    }, {
      "elem" : 3,
      "name" : "*golang.org/x/sys/unix.SocketControlMessage",
      "type" : "Pointer",
      "underlying" : 2
    }, {
      "local-name" : "SocketControlMessage",
      "name" : "golang.org/x/sys/unix.SocketControlMessage",
      "package" : 0,
      "type" : "Named",
      "underlying" : 4
    }, {
      "fields" : [ {
        "name" : "Header",
        "type" : 5
      }, {
        "name" : "Data",
        "type" : 9
      } ],
      "name" : "struct{Header golang.org/x/sys/unix.Cmsghdr; Data []byte}",
      "type" : "Struct",
      "underlying" : 4
    }, {
      "local-name" : "Cmsghdr",
      "name" : "golang.org/x/sys/unix.Cmsghdr",
      "package" : 0,
      "type" : "Named",
      "underlying" : 6
    }, {
      "fields" : [ {
        "name" : "Len",
        "type" : 7
      }, {
        "name" : "Level",
        "type" : 8
      }, {
        "name" : "Type",
        "type" : 8
      } ],
      "name" : "struct{Len uint64; Level int32; Type int32}",
      "type" : "Struct",
      "underlying" : 6
    }, {
      "name" : "uint64",
      "type" : "Basic",
      "underlying" : 7
    }, {
      "name" : "int32",
      "type" : "Basic",
      "underlying" : 8
    }, {
      "elem" : 10,
      "name" : "[]byte",
      "type" : "Slice",
      "underlying" : 9
    }, {
      "name" : "byte",
      "type" : "Basic",
      "underlying" : 10
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 12
      }, {
        "name" : "",
        "type" : 16
      } ],
      "name" : "(*golang.org/x/sys/unix.Ucred, error)",
      "type" : "Tuple",
      "underlying" : 11
    }, {
      "elem" : 13,
      "name" : "*golang.org/x/sys/unix.Ucred",
      "type" : "Pointer",
      "underlying" : 12
    }, {
      "local-name" : "Ucred",
      "name" : "golang.org/x/sys/unix.Ucred",
      "package" : 0,
      "type" : "Named",
      "underlying" : 14
    }, {
      "fields" : [ {
        "name" : "Pid",
        "type" : 8
      }, {
        "name" : "Uid",
        "type" : 15
      }, {
        "name" : "Gid",
        "type" : 15
      } ],
      "name" : "struct{Pid int32; Uid uint32; Gid uint32}",
      "type" : "Struct",
      "underlying" : 14
    }, {
      "name" : "uint32",
      "type" : "Basic",
      "underlying" : 15
    }, {
      "local-name" : "error",
      "name" : "error",
      "package" : -1,
      "type" : "Named",
      "underlying" : 17
    }, {
      "methods" : [ {
        "name" : "Error",
        "type" : 18
      } ],
      "name" : "interface{Error() string}",
      "type" : "Interface",
      "underlying" : 17
    }, {
      "name" : "(error) func() string",
      "params" : 19,
      "recv" : 0,
      "results" : 20,
      "type" : "Signature",
      "underlying" : 18,
      "variadic" : false
    }, {
      "fields" : [ ],
      "name" : "()",
      "type" : "Tuple",
      "underlying" : 19
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 21
      } ],
      "name" : "(string)",
      "type" : "Tuple",
      "underlying" : 20
    }, {
      "name" : "string",
      "type" : "Basic",
      "underlying" : 21
    }, {
      "name" : "untyped bool",
      "type" : "Basic",
      "underlying" : 22
    }, {
      "name" : "untyped nil",
      "type" : "Basic",
      "underlying" : 23
    }, {
      "local-name" : "Errno",
      "name" : "syscall.Errno",
      "package" : 1,
      "type" : "Named",
      "underlying" : 25
    }, {
      "name" : "uintptr",
      "type" : "Basic",
      "underlying" : 25
    }, {
      "local-name" : "Pointer",
      "name" : "unsafe.Pointer",
      "package" : 2,
      "type" : "Basic",
      "underlying" : 26
    }, {
      "elem" : 10,
      "name" : "*byte",
      "type" : "Pointer",
      "underlying" : 27
    }, {
      "name" : "int",
      "type" : "Basic",
      "underlying" : 28
    } ],
    "variables" : [ {
      "name" : "",
      "package" : -1,
      "type" : 16,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "m",
      "package" : 0,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "[res0]",
      "package" : 0,
      "type" : 12,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "[res1]",
      "package" : 0,
      "type" : 16,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "Header",
      "package" : 0,
      "type" : 5,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "Level",
      "package" : 0,
      "type" : 8,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "Type",
      "package" : 0,
      "type" : 8,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "Data",
      "package" : 0,
      "type" : 9,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "ucred",
      "package" : 0,
      "type" : 13,
      "exported" : false,
      "embedded" : false,
      "field" : false
    } ]
  },
  "go-version" : "1.14.3"
}