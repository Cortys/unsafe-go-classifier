{
  "usage" : {
    "file" : "syscall_linux.go",
    "label1" : "cast-struct",
    "label2" : "serialization",
    "line" : "1020",
    "module" : "golang.org/x/sys",
    "pkg" : "golang.org/x/sys/unix",
    "project" : "cilium/cilium",
    "snippet" : "pp := (*RawSockaddrPPPoX)(unsafe.Pointer(rsa))",
    "version" : "v0.0.0-20200420163511-1957bb5e6d1f"
  },
  "cfg" : {
    "blocks" : [ {
      "update-vars" : [ ],
      "successors" : [ 2 ],
      "in-vars" : [ 2, 3 ],
      "exit" : false,
      "out-vars" : [ 2, 3 ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[entry]",
      "entry" : true,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ ],
      "in-vars" : [ ],
      "exit" : true,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[exit]",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 3, 11, 24, 35, 59, 85, 89, 102, 106, 118, 131 ],
      "in-vars" : [ 2, 3 ],
      "exit" : false,
      "out-vars" : [ 2, 3 ],
      "decl-vars" : [ ],
      "line-start" : 877,
      "ast" : {
        "condition" : {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "Family",
            "variable" : 7
          },
          "go-type" : 8,
          "kind" : "expression",
          "target" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "Addr",
              "variable" : 6
            },
            "go-type" : 6,
            "kind" : "expression",
            "target" : {
              "go-type" : 3,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "rsa",
                "variable" : 3
              }
            },
            "type" : "selector"
          },
          "type" : "selector"
        },
        "kind" : "statement",
        "type" : "switch"
      },
      "assign-vars" : [ ],
      "line-end" : 1056,
      "code" : "switch rsa.Addr.Family {\ncase AF_NETLINK:\n\tpp := (*RawSockaddrNetlink)(unsafe.Pointer(rsa))\n\tsa := new(SockaddrNetlink)\n\tsa.Family = pp.Family\n\tsa.Pad = pp.Pad\n\tsa.Pid = pp.Pid\n\tsa.Groups = pp.Groups\n\treturn sa, nil\n\ncase AF_PACKET:\n\tpp := (*RawSockaddrLinklayer)(unsafe.Pointer(rsa))\n\tsa := new(SockaddrLinklayer)\n\tsa.Protocol = pp.Protocol\n\tsa.Ifindex = int(pp.Ifindex)\n\tsa.Hatype = pp.Hatype\n\tsa.Pkttype = pp.Pkttype\n\tsa.Halen = pp.Halen\n\tfor i := 0; i < len(sa.Addr); i++ {\n\t\tsa.Addr[i] = pp.Addr[i]\n\t}\n\treturn sa, nil\n\ncase AF_UNIX:\n\tpp := (*RawSockaddrUnix)(unsafe.Pointer(rsa))\n\tsa := new(SockaddrUnix)\n\tif pp.Path[0] == 0 {\n\n\t\tpp.Path[0] = '@'\n\t}\n\n\tn := 0\n\tfor n < len(pp.Path) && pp.Path[n] != 0 {\n\t\tn++\n\t}\n\tbytes := (*[len(pp.Path)]byte)(unsafe.Pointer(&pp.Path[0]))[0:n]\n\tsa.Name = string(bytes)\n\treturn sa, nil\n\ncase AF_INET:\n\tproto, err := GetsockoptInt(fd, SOL_SOCKET, SO_PROTOCOL)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tswitch proto {\n\tcase IPPROTO_L2TP:\n\t\tpp := (*RawSockaddrL2TPIP)(unsafe.Pointer(rsa))\n\t\tsa := new(SockaddrL2TPIP)\n\t\tsa.ConnId = pp.Conn_id\n\t\tfor i := 0; i < len(sa.Addr); i++ {\n\t\t\tsa.Addr[i] = pp.Addr[i]\n\t\t}\n\t\treturn sa, nil\n\tdefault:\n\t\tpp := (*RawSockaddrInet4)(unsafe.Pointer(rsa))\n\t\tsa := new(SockaddrInet4)\n\t\tp := (*[2]byte)(unsafe.Pointer(&pp.Port))\n\t\tsa.Port = int(p[0])<<8 + int(p[1])\n\t\tfor i := 0; i < len(sa.Addr); i++ {\n\t\t\tsa.Addr[i] = pp.Addr[i]\n\t\t}\n\t\treturn sa, nil\n\t}\n\ncase AF_INET6:\n\tproto, err := GetsockoptInt(fd, SOL_SOCKET, SO_PROTOCOL)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tswitch proto {\n\tcase IPPROTO_L2TP:\n\t\tpp := (*RawSockaddrL2TPIP6)(unsafe.Pointer(rsa))\n\t\tsa := new(SockaddrL2TPIP6)\n\t\tsa.ConnId = pp.Conn_id\n\t\tsa.ZoneId = pp.Scope_id\n\t\tfor i := 0; i < len(sa.Addr); i++ {\n\t\t\tsa.Addr[i] = pp.Addr[i]\n\t\t}\n\t\treturn sa, nil\n\tdefault:\n\t\tpp := (*RawSockaddrInet6)(unsafe.Pointer(rsa))\n\t\tsa := new(SockaddrInet6)\n\t\tp := (*[2]byte)(unsafe.Pointer(&pp.Port))\n\t\tsa.Port = int(p[0])<<8 + int(p[1])\n\t\tsa.ZoneId = pp.Scope_id\n\t\tfor i := 0; i < len(sa.Addr); i++ {\n\t\t\tsa.Addr[i] = pp.Addr[i]\n\t\t}\n\t\treturn sa, nil\n\t}\n\ncase AF_VSOCK:\n\tpp := (*RawSockaddrVM)(unsafe.Pointer(rsa))\n\tsa := &SockaddrVM{\n\t\tCID:  pp.Cid,\n\t\tPort: pp.Port,\n\t}\n\treturn sa, nil\ncase AF_BLUETOOTH:\n\tproto, err := GetsockoptInt(fd, SOL_SOCKET, SO_PROTOCOL)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tswitch proto {\n\tcase BTPROTO_L2CAP:\n\t\tpp := (*RawSockaddrL2)(unsafe.Pointer(rsa))\n\t\tsa := &SockaddrL2{\n\t\t\tPSM:      pp.Psm,\n\t\t\tCID:      pp.Cid,\n\t\t\tAddr:     pp.Bdaddr,\n\t\t\tAddrType: pp.Bdaddr_type,\n\t\t}\n\t\treturn sa, nil\n\tcase BTPROTO_RFCOMM:\n\t\tpp := (*RawSockaddrRFCOMM)(unsafe.Pointer(rsa))\n\t\tsa := &SockaddrRFCOMM{\n\t\t\tChannel: pp.Channel,\n\t\t\tAddr:    pp.Bdaddr,\n\t\t}\n\t\treturn sa, nil\n\t}\ncase AF_XDP:\n\tpp := (*RawSockaddrXDP)(unsafe.Pointer(rsa))\n\tsa := &SockaddrXDP{\n\t\tFlags:        pp.Flags,\n\t\tIfindex:      pp.Ifindex,\n\t\tQueueID:      pp.Queue_id,\n\t\tSharedUmemFD: pp.Shared_umem_fd,\n\t}\n\treturn sa, nil\ncase AF_PPPOX:\n\tpp := (*RawSockaddrPPPoX)(unsafe.Pointer(rsa))\n\tif binary.BigEndian.Uint32(pp[2:6]) != px_proto_oe {\n\t\treturn nil, EINVAL\n\t}\n\tsa := &SockaddrPPPoE{\n\t\tSID:    binary.BigEndian.Uint16(pp[6:8]),\n\t\tRemote: pp[8:14],\n\t}\n\tfor i := 14; i < 14+IFNAMSIZ; i++ {\n\t\tif pp[i] == 0 {\n\t\t\tsa.Dev = string(pp[14:i])\n\t\t\tbreak\n\t\t}\n\t}\n\treturn sa, nil\ncase AF_TIPC:\n\tpp := (*RawSockaddrTIPC)(unsafe.Pointer(rsa))\n\n\tsa := &SockaddrTIPC{\n\t\tScope: int(pp.Scope),\n\t}\n\n\tswitch pp.Addrtype {\n\tcase TIPC_SERVICE_RANGE:\n\t\tsa.Addr = (*TIPCServiceRange)(unsafe.Pointer(&pp.Addr))\n\tcase TIPC_SERVICE_ADDR:\n\t\tsa.Addr = (*TIPCServiceName)(unsafe.Pointer(&pp.Addr))\n\tcase TIPC_SOCKET_ADDR:\n\t\tsa.Addr = (*TIPCSocketAddr)(unsafe.Pointer(&pp.Addr))\n\tdefault:\n\t\treturn nil, EINVAL\n\t}\n\n\treturn sa, nil\n}",
      "entry" : false,
      "use-vars" : [ 3 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 4 ],
      "in-vars" : [ 3 ],
      "exit" : false,
      "out-vars" : [ 3 ],
      "decl-vars" : [ ],
      "line-start" : 878,
      "ast" : {
        "expressions" : [ {
          "go-type" : 8,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "16"
          }
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 885,
      "code" : "case AF_NETLINK:\n\tpp := (*RawSockaddrNetlink)(unsafe.Pointer(rsa))\n\tsa := new(SockaddrNetlink)\n\tsa.Family = pp.Family\n\tsa.Pad = pp.Pad\n\tsa.Pid = pp.Pid\n\tsa.Groups = pp.Groups\n\treturn sa, nil",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 5 ],
      "in-vars" : [ 3 ],
      "exit" : false,
      "out-vars" : [ 10 ],
      "decl-vars" : [ 10 ],
      "line-start" : 879,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "pp"
          }
        } ],
        "right" : [ {
          "coerced-to" : {
            "contained" : {
              "go-type" : 27,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 27,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "RawSockaddrNetlink"
              }
            },
            "go-type" : 26,
            "kind" : "type",
            "type" : "pointer"
          },
          "go-type" : 26,
          "kind" : "expression",
          "target" : {
            "coerced-to" : {
              "go-type" : 18,
              "kind" : "type",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 1,
                "value" : "unsafe"
              },
              "type" : "identifier",
              "value" : {
                "go-type" : 18,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "Pointer"
              }
            },
            "go-type" : 18,
            "kind" : "expression",
            "target" : {
              "go-type" : 3,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "rsa",
                "variable" : 3
              }
            },
            "type" : "cast"
          },
          "type" : "cast"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 879,
      "code" : "pp := (*RawSockaddrNetlink)(unsafe.Pointer(rsa))",
      "entry" : false,
      "use-vars" : [ 3 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 6 ],
      "in-vars" : [ 10 ],
      "exit" : false,
      "out-vars" : [ 10, 8 ],
      "decl-vars" : [ 8 ],
      "line-start" : 880,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "sa"
          }
        } ],
        "right" : [ {
          "argument" : {
            "go-type" : 30,
            "kind" : "type",
            "type" : "identifier",
            "value" : {
              "go-type" : 30,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "SockaddrNetlink"
            }
          },
          "go-type" : 29,
          "kind" : "expression",
          "type" : "new"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 880,
      "code" : "sa := new(SockaddrNetlink)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ 8 ],
      "successors" : [ 7 ],
      "in-vars" : [ 8, 10 ],
      "exit" : false,
      "out-vars" : [ 8, 10 ],
      "decl-vars" : [ ],
      "line-start" : 881,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "Family",
            "variable" : 9
          },
          "go-type" : 8,
          "kind" : "expression",
          "target" : {
            "go-type" : 29,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "sa",
              "variable" : 8
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "Family",
            "variable" : 11
          },
          "go-type" : 8,
          "kind" : "expression",
          "target" : {
            "go-type" : 26,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "pp",
              "variable" : 10
            }
          },
          "type" : "selector"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 881,
      "code" : "sa.Family = pp.Family",
      "entry" : false,
      "use-vars" : [ 10, 8 ]
    }, {
      "update-vars" : [ 8 ],
      "successors" : [ 8 ],
      "in-vars" : [ 8, 10 ],
      "exit" : false,
      "out-vars" : [ 8, 10 ],
      "decl-vars" : [ ],
      "line-start" : 882,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "Pad",
            "variable" : 12
          },
          "go-type" : 8,
          "kind" : "expression",
          "target" : {
            "go-type" : 29,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "sa",
              "variable" : 8
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "Pad",
            "variable" : 13
          },
          "go-type" : 8,
          "kind" : "expression",
          "target" : {
            "go-type" : 26,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "pp",
              "variable" : 10
            }
          },
          "type" : "selector"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 882,
      "code" : "sa.Pad = pp.Pad",
      "entry" : false,
      "use-vars" : [ 10, 8 ]
    }, {
      "update-vars" : [ 8 ],
      "successors" : [ 9 ],
      "in-vars" : [ 8, 10 ],
      "exit" : false,
      "out-vars" : [ 8, 10 ],
      "decl-vars" : [ ],
      "line-start" : 883,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "Pid",
            "variable" : 14
          },
          "go-type" : 20,
          "kind" : "expression",
          "target" : {
            "go-type" : 29,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "sa",
              "variable" : 8
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "Pid",
            "variable" : 15
          },
          "go-type" : 20,
          "kind" : "expression",
          "target" : {
            "go-type" : 26,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "pp",
              "variable" : 10
            }
          },
          "type" : "selector"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 883,
      "code" : "sa.Pid = pp.Pid",
      "entry" : false,
      "use-vars" : [ 10, 8 ]
    }, {
      "update-vars" : [ 8 ],
      "successors" : [ 10 ],
      "in-vars" : [ 8, 10 ],
      "exit" : false,
      "out-vars" : [ 8 ],
      "decl-vars" : [ ],
      "line-start" : 884,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "Groups",
            "variable" : 16
          },
          "go-type" : 20,
          "kind" : "expression",
          "target" : {
            "go-type" : 29,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "sa",
              "variable" : 8
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "Groups",
            "variable" : 17
          },
          "go-type" : 20,
          "kind" : "expression",
          "target" : {
            "go-type" : 26,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "pp",
              "variable" : 10
            }
          },
          "type" : "selector"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 884,
      "code" : "sa.Groups = pp.Groups",
      "entry" : false,
      "use-vars" : [ 10, 8 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 8 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 885,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 29,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "sa",
            "variable" : 8
          }
        }, {
          "go-type" : 32,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Nil",
            "kind" : "ident",
            "value" : "nil"
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 885,
      "code" : "return sa, nil",
      "entry" : false,
      "use-vars" : [ 8 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 12 ],
      "in-vars" : [ 3 ],
      "exit" : false,
      "out-vars" : [ 3 ],
      "decl-vars" : [ ],
      "line-start" : 887,
      "ast" : {
        "expressions" : [ {
          "go-type" : 8,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "17"
          }
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 898,
      "code" : "case AF_PACKET:\n\tpp := (*RawSockaddrLinklayer)(unsafe.Pointer(rsa))\n\tsa := new(SockaddrLinklayer)\n\tsa.Protocol = pp.Protocol\n\tsa.Ifindex = int(pp.Ifindex)\n\tsa.Hatype = pp.Hatype\n\tsa.Pkttype = pp.Pkttype\n\tsa.Halen = pp.Halen\n\tfor i := 0; i < len(sa.Addr); i++ {\n\t\tsa.Addr[i] = pp.Addr[i]\n\t}\n\treturn sa, nil",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 13 ],
      "in-vars" : [ 3 ],
      "exit" : false,
      "out-vars" : [ 20 ],
      "decl-vars" : [ 20 ],
      "line-start" : 888,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "pp"
          }
        } ],
        "right" : [ {
          "coerced-to" : {
            "contained" : {
              "go-type" : 34,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 34,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "RawSockaddrLinklayer"
              }
            },
            "go-type" : 33,
            "kind" : "type",
            "type" : "pointer"
          },
          "go-type" : 33,
          "kind" : "expression",
          "target" : {
            "coerced-to" : {
              "go-type" : 18,
              "kind" : "type",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 1,
                "value" : "unsafe"
              },
              "type" : "identifier",
              "value" : {
                "go-type" : 18,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "Pointer"
              }
            },
            "go-type" : 18,
            "kind" : "expression",
            "target" : {
              "go-type" : 3,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "rsa",
                "variable" : 3
              }
            },
            "type" : "cast"
          },
          "type" : "cast"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 888,
      "code" : "pp := (*RawSockaddrLinklayer)(unsafe.Pointer(rsa))",
      "entry" : false,
      "use-vars" : [ 3 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 14 ],
      "in-vars" : [ 20 ],
      "exit" : false,
      "out-vars" : [ 18, 20 ],
      "decl-vars" : [ 18 ],
      "line-start" : 889,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "sa"
          }
        } ],
        "right" : [ {
          "argument" : {
            "go-type" : 40,
            "kind" : "type",
            "type" : "identifier",
            "value" : {
              "go-type" : 40,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "SockaddrLinklayer"
            }
          },
          "go-type" : 39,
          "kind" : "expression",
          "type" : "new"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 889,
      "code" : "sa := new(SockaddrLinklayer)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ 18 ],
      "successors" : [ 15 ],
      "in-vars" : [ 18, 20 ],
      "exit" : false,
      "out-vars" : [ 20, 18 ],
      "decl-vars" : [ ],
      "line-start" : 890,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "Protocol",
            "variable" : 19
          },
          "go-type" : 8,
          "kind" : "expression",
          "target" : {
            "go-type" : 39,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "sa",
              "variable" : 18
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "Protocol",
            "variable" : 21
          },
          "go-type" : 8,
          "kind" : "expression",
          "target" : {
            "go-type" : 33,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "pp",
              "variable" : 20
            }
          },
          "type" : "selector"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 890,
      "code" : "sa.Protocol = pp.Protocol",
      "entry" : false,
      "use-vars" : [ 20, 18 ]
    }, {
      "update-vars" : [ 18 ],
      "successors" : [ 16 ],
      "in-vars" : [ 18, 20 ],
      "exit" : false,
      "out-vars" : [ 18, 20 ],
      "decl-vars" : [ ],
      "line-start" : 891,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "Ifindex",
            "variable" : 22
          },
          "go-type" : 2,
          "kind" : "expression",
          "target" : {
            "go-type" : 39,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "sa",
              "variable" : 18
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "coerced-to" : {
            "go-type" : 2,
            "kind" : "type",
            "type" : "identifier",
            "value" : {
              "go-type" : 2,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "int"
            }
          },
          "go-type" : 2,
          "kind" : "expression",
          "target" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "Ifindex",
              "variable" : 23
            },
            "go-type" : 36,
            "kind" : "expression",
            "target" : {
              "go-type" : 33,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "pp",
                "variable" : 20
              }
            },
            "type" : "selector"
          },
          "type" : "cast"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 891,
      "code" : "sa.Ifindex = int(pp.Ifindex)",
      "entry" : false,
      "use-vars" : [ 20, 18 ]
    }, {
      "update-vars" : [ 18 ],
      "successors" : [ 17 ],
      "in-vars" : [ 18, 20 ],
      "exit" : false,
      "out-vars" : [ 18, 20 ],
      "decl-vars" : [ ],
      "line-start" : 892,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "Hatype",
            "variable" : 24
          },
          "go-type" : 8,
          "kind" : "expression",
          "target" : {
            "go-type" : 39,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "sa",
              "variable" : 18
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "Hatype",
            "variable" : 25
          },
          "go-type" : 8,
          "kind" : "expression",
          "target" : {
            "go-type" : 33,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "pp",
              "variable" : 20
            }
          },
          "type" : "selector"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 892,
      "code" : "sa.Hatype = pp.Hatype",
      "entry" : false,
      "use-vars" : [ 20, 18 ]
    }, {
      "update-vars" : [ 18 ],
      "successors" : [ 18 ],
      "in-vars" : [ 18, 20 ],
      "exit" : false,
      "out-vars" : [ 18, 20 ],
      "decl-vars" : [ ],
      "line-start" : 893,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "Pkttype",
            "variable" : 26
          },
          "go-type" : 37,
          "kind" : "expression",
          "target" : {
            "go-type" : 39,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "sa",
              "variable" : 18
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "Pkttype",
            "variable" : 27
          },
          "go-type" : 37,
          "kind" : "expression",
          "target" : {
            "go-type" : 33,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "pp",
              "variable" : 20
            }
          },
          "type" : "selector"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 893,
      "code" : "sa.Pkttype = pp.Pkttype",
      "entry" : false,
      "use-vars" : [ 20, 18 ]
    }, {
      "update-vars" : [ 18 ],
      "successors" : [ 20 ],
      "in-vars" : [ 18, 20 ],
      "exit" : false,
      "out-vars" : [ 18, 20 ],
      "decl-vars" : [ ],
      "line-start" : 894,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "Halen",
            "variable" : 28
          },
          "go-type" : 37,
          "kind" : "expression",
          "target" : {
            "go-type" : 39,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "sa",
              "variable" : 18
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "Halen",
            "variable" : 29
          },
          "go-type" : 37,
          "kind" : "expression",
          "target" : {
            "go-type" : 33,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "pp",
              "variable" : 20
            }
          },
          "type" : "selector"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 894,
      "code" : "sa.Halen = pp.Halen",
      "entry" : false,
      "use-vars" : [ 18, 20 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 22, 23 ],
      "in-vars" : [ 30, 18, 20 ],
      "exit" : false,
      "out-vars" : [ 30, 18, 20 ],
      "decl-vars" : [ ],
      "line-start" : 895,
      "ast" : {
        "condition" : {
          "go-type" : 44,
          "kind" : "expression",
          "left" : {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "i",
              "variable" : 30
            }
          },
          "operator" : "<",
          "right" : {
            "go-type" : 2,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "8"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "for"
      },
      "assign-vars" : [ ],
      "line-end" : 897,
      "code" : "for i := 0; i < len(sa.Addr); i++ {\n\tsa.Addr[i] = pp.Addr[i]\n}",
      "entry" : false,
      "use-vars" : [ 18, 30 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 19 ],
      "in-vars" : [ 18, 20 ],
      "exit" : false,
      "out-vars" : [ 30, 18, 20 ],
      "decl-vars" : [ 30 ],
      "line-start" : 895,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "i"
          }
        } ],
        "right" : [ {
          "go-type" : 2,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "0"
          }
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 895,
      "code" : "i := 0",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ 30 ],
      "successors" : [ 19 ],
      "in-vars" : [ 20, 30, 18 ],
      "exit" : false,
      "out-vars" : [ 20, 30, 18 ],
      "decl-vars" : [ ],
      "line-start" : 895,
      "ast" : {
        "kind" : "statement",
        "operation" : "++",
        "target" : {
          "go-type" : 2,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "i",
            "variable" : 30
          }
        },
        "type" : "crement"
      },
      "assign-vars" : [ 30 ],
      "line-end" : 895,
      "code" : "i++",
      "entry" : false,
      "use-vars" : [ 30 ]
    }, {
      "update-vars" : [ 18 ],
      "successors" : [ 21 ],
      "in-vars" : [ 30, 18, 20 ],
      "exit" : false,
      "out-vars" : [ 30, 18, 20 ],
      "decl-vars" : [ ],
      "line-start" : 896,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 43,
          "index" : {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "i",
              "variable" : 30
            }
          },
          "kind" : "expression",
          "target" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "Addr",
              "variable" : 31
            },
            "go-type" : 42,
            "kind" : "expression",
            "target" : {
              "go-type" : 39,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "sa",
                "variable" : 18
              }
            },
            "type" : "selector"
          },
          "type" : "index"
        } ],
        "right" : [ {
          "go-type" : 37,
          "index" : {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "i",
              "variable" : 30
            }
          },
          "kind" : "expression",
          "target" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "Addr",
              "variable" : 32
            },
            "go-type" : 38,
            "kind" : "expression",
            "target" : {
              "go-type" : 33,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "pp",
                "variable" : 20
              }
            },
            "type" : "selector"
          },
          "type" : "index"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 896,
      "code" : "sa.Addr[i] = pp.Addr[i]",
      "entry" : false,
      "use-vars" : [ 20, 30, 18 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 18 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 898,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 39,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "sa",
            "variable" : 18
          }
        }, {
          "go-type" : 32,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Nil",
            "kind" : "ident",
            "value" : "nil"
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 898,
      "code" : "return sa, nil",
      "entry" : false,
      "use-vars" : [ 18 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 25 ],
      "in-vars" : [ 3 ],
      "exit" : false,
      "out-vars" : [ 3 ],
      "decl-vars" : [ ],
      "line-start" : 900,
      "ast" : {
        "expressions" : [ {
          "go-type" : 8,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "1"
          }
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 923,
      "code" : "case AF_UNIX:\n\tpp := (*RawSockaddrUnix)(unsafe.Pointer(rsa))\n\tsa := new(SockaddrUnix)\n\tif pp.Path[0] == 0 {\n\n\t\tpp.Path[0] = '@'\n\t}\n\n\tn := 0\n\tfor n < len(pp.Path) && pp.Path[n] != 0 {\n\t\tn++\n\t}\n\tbytes := (*[len(pp.Path)]byte)(unsafe.Pointer(&pp.Path[0]))[0:n]\n\tsa.Name = string(bytes)\n\treturn sa, nil",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 26 ],
      "in-vars" : [ 3 ],
      "exit" : false,
      "out-vars" : [ 33 ],
      "decl-vars" : [ 33 ],
      "line-start" : 901,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "pp"
          }
        } ],
        "right" : [ {
          "coerced-to" : {
            "contained" : {
              "go-type" : 46,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 46,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "RawSockaddrUnix"
              }
            },
            "go-type" : 45,
            "kind" : "type",
            "type" : "pointer"
          },
          "go-type" : 45,
          "kind" : "expression",
          "target" : {
            "coerced-to" : {
              "go-type" : 18,
              "kind" : "type",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 1,
                "value" : "unsafe"
              },
              "type" : "identifier",
              "value" : {
                "go-type" : 18,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "Pointer"
              }
            },
            "go-type" : 18,
            "kind" : "expression",
            "target" : {
              "go-type" : 3,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "rsa",
                "variable" : 3
              }
            },
            "type" : "cast"
          },
          "type" : "cast"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 901,
      "code" : "pp := (*RawSockaddrUnix)(unsafe.Pointer(rsa))",
      "entry" : false,
      "use-vars" : [ 3 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 27 ],
      "in-vars" : [ 33 ],
      "exit" : false,
      "out-vars" : [ 33, 36 ],
      "decl-vars" : [ 36 ],
      "line-start" : 902,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "sa"
          }
        } ],
        "right" : [ {
          "argument" : {
            "go-type" : 50,
            "kind" : "type",
            "type" : "identifier",
            "value" : {
              "go-type" : 50,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "SockaddrUnix"
            }
          },
          "go-type" : 49,
          "kind" : "expression",
          "type" : "new"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 902,
      "code" : "sa := new(SockaddrUnix)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 28, 29 ],
      "in-vars" : [ 33, 36 ],
      "exit" : false,
      "out-vars" : [ 33, 36 ],
      "decl-vars" : [ ],
      "line-start" : 903,
      "ast" : {
        "condition" : {
          "go-type" : 44,
          "kind" : "expression",
          "left" : {
            "go-type" : 10,
            "index" : {
              "go-type" : 2,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "0"
              }
            },
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "Path",
                "variable" : 34
              },
              "go-type" : 48,
              "kind" : "expression",
              "target" : {
                "go-type" : 45,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "pp",
                  "variable" : 33
                }
              },
              "type" : "selector"
            },
            "type" : "index"
          },
          "operator" : "==",
          "right" : {
            "go-type" : 10,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 910,
      "code" : "if pp.Path[0] == 0 {\n\n\tpp.Path[0] = '@'\n}",
      "entry" : false,
      "use-vars" : [ 33 ]
    }, {
      "update-vars" : [ 33 ],
      "successors" : [ 29 ],
      "in-vars" : [ 33, 36 ],
      "exit" : false,
      "out-vars" : [ 33, 36 ],
      "decl-vars" : [ ],
      "line-start" : 909,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 10,
          "index" : {
            "go-type" : 2,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "kind" : "expression",
          "target" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "Path",
              "variable" : 34
            },
            "go-type" : 48,
            "kind" : "expression",
            "target" : {
              "go-type" : 45,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "pp",
                "variable" : 33
              }
            },
            "type" : "selector"
          },
          "type" : "index"
        } ],
        "right" : [ {
          "go-type" : 10,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "64"
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 909,
      "code" : "pp.Path[0] = '@'",
      "entry" : false,
      "use-vars" : [ 33 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 30 ],
      "in-vars" : [ 33, 36 ],
      "exit" : false,
      "out-vars" : [ 35, 36, 33 ],
      "decl-vars" : [ 35 ],
      "line-start" : 917,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "n"
          }
        } ],
        "right" : [ {
          "go-type" : 2,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "0"
          }
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 917,
      "code" : "n := 0",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 31, 32 ],
      "in-vars" : [ 33, 35, 36 ],
      "exit" : false,
      "out-vars" : [ 33, 35, 36 ],
      "decl-vars" : [ ],
      "line-start" : 918,
      "ast" : {
        "condition" : {
          "go-type" : 44,
          "kind" : "expression",
          "left" : {
            "go-type" : 44,
            "kind" : "expression",
            "left" : {
              "go-type" : 2,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "n",
                "variable" : 35
              }
            },
            "operator" : "<",
            "right" : {
              "go-type" : 2,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "108"
              }
            },
            "type" : "binary"
          },
          "operator" : "&&",
          "right" : {
            "go-type" : 44,
            "kind" : "expression",
            "left" : {
              "go-type" : 10,
              "index" : {
                "go-type" : 2,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "n",
                  "variable" : 35
                }
              },
              "kind" : "expression",
              "target" : {
                "field" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "Path",
                  "variable" : 34
                },
                "go-type" : 48,
                "kind" : "expression",
                "target" : {
                  "go-type" : 45,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "pp",
                    "variable" : 33
                  }
                },
                "type" : "selector"
              },
              "type" : "index"
            },
            "operator" : "!=",
            "right" : {
              "go-type" : 10,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "0"
              }
            },
            "type" : "binary"
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "for"
      },
      "assign-vars" : [ ],
      "line-end" : 920,
      "code" : "for n < len(pp.Path) && pp.Path[n] != 0 {\n\tn++\n}",
      "entry" : false,
      "use-vars" : [ 33, 35 ]
    }, {
      "update-vars" : [ 35 ],
      "successors" : [ 30 ],
      "in-vars" : [ 33, 35, 36 ],
      "exit" : false,
      "out-vars" : [ 33, 35, 36 ],
      "decl-vars" : [ ],
      "line-start" : 919,
      "ast" : {
        "kind" : "statement",
        "operation" : "++",
        "target" : {
          "go-type" : 2,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "n",
            "variable" : 35
          }
        },
        "type" : "crement"
      },
      "assign-vars" : [ 35 ],
      "line-end" : 919,
      "code" : "n++",
      "entry" : false,
      "use-vars" : [ 35 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 33 ],
      "in-vars" : [ 33, 35, 36 ],
      "exit" : false,
      "out-vars" : [ 38, 36 ],
      "decl-vars" : [ 38 ],
      "line-start" : 921,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "bytes"
          }
        } ],
        "right" : [ {
          "go-type" : 52,
          "type" : "slice",
          "three" : false,
          "high" : {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "n",
              "variable" : 35
            }
          },
          "max" : null,
          "kind" : "expression",
          "low" : {
            "go-type" : 2,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "target" : {
            "coerced-to" : {
              "contained" : {
                "element" : {
                  "go-type" : 43,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 43,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "byte"
                  }
                },
                "go-type" : 54,
                "kind" : "type",
                "length" : {
                  "go-type" : 2,
                  "kind" : "constant",
                  "value" : {
                    "type" : "INT",
                    "value" : "108"
                  }
                },
                "type" : "array"
              },
              "go-type" : 53,
              "kind" : "type",
              "type" : "pointer"
            },
            "go-type" : 53,
            "kind" : "expression",
            "target" : {
              "coerced-to" : {
                "go-type" : 18,
                "kind" : "type",
                "qualifier" : {
                  "ident-kind" : "PkgName",
                  "kind" : "ident",
                  "package" : 1,
                  "value" : "unsafe"
                },
                "type" : "identifier",
                "value" : {
                  "go-type" : 18,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "Pointer"
                }
              },
              "go-type" : 18,
              "kind" : "expression",
              "target" : {
                "go-type" : 55,
                "kind" : "expression",
                "operator" : "&",
                "target" : {
                  "go-type" : 10,
                  "index" : {
                    "go-type" : 2,
                    "kind" : "constant",
                    "value" : {
                      "type" : "INT",
                      "value" : "0"
                    }
                  },
                  "kind" : "expression",
                  "target" : {
                    "field" : {
                      "ident-kind" : "Var",
                      "kind" : "ident",
                      "value" : "Path",
                      "variable" : 34
                    },
                    "go-type" : 48,
                    "kind" : "expression",
                    "target" : {
                      "go-type" : 45,
                      "kind" : "expression",
                      "type" : "identifier",
                      "value" : {
                        "ident-kind" : "Var",
                        "kind" : "ident",
                        "value" : "pp",
                        "variable" : 33
                      }
                    },
                    "type" : "selector"
                  },
                  "type" : "index"
                },
                "type" : "unary"
              },
              "type" : "cast"
            },
            "type" : "cast"
          }
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 921,
      "code" : "bytes := (*[len(pp.Path)]byte)(unsafe.Pointer(&pp.Path[0]))[0:n]",
      "entry" : false,
      "use-vars" : [ 33, 35 ]
    }, {
      "update-vars" : [ 36 ],
      "successors" : [ 34 ],
      "in-vars" : [ 38, 36 ],
      "exit" : false,
      "out-vars" : [ 36 ],
      "decl-vars" : [ ],
      "line-start" : 922,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "Name",
            "variable" : 37
          },
          "go-type" : 25,
          "kind" : "expression",
          "target" : {
            "go-type" : 49,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "sa",
              "variable" : 36
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "coerced-to" : {
            "go-type" : 25,
            "kind" : "type",
            "type" : "identifier",
            "value" : {
              "go-type" : 25,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "string"
            }
          },
          "go-type" : 25,
          "kind" : "expression",
          "target" : {
            "go-type" : 52,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "bytes",
              "variable" : 38
            }
          },
          "type" : "cast"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 922,
      "code" : "sa.Name = string(bytes)",
      "entry" : false,
      "use-vars" : [ 38, 36 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 36 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 923,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 49,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "sa",
            "variable" : 36
          }
        }, {
          "go-type" : 32,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Nil",
            "kind" : "ident",
            "value" : "nil"
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 923,
      "code" : "return sa, nil",
      "entry" : false,
      "use-vars" : [ 36 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 36 ],
      "in-vars" : [ 2, 3 ],
      "exit" : false,
      "out-vars" : [ 2, 3 ],
      "decl-vars" : [ ],
      "line-start" : 925,
      "ast" : {
        "expressions" : [ {
          "go-type" : 8,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "2"
          }
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 949,
      "code" : "case AF_INET:\n\tproto, err := GetsockoptInt(fd, SOL_SOCKET, SO_PROTOCOL)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tswitch proto {\n\tcase IPPROTO_L2TP:\n\t\tpp := (*RawSockaddrL2TPIP)(unsafe.Pointer(rsa))\n\t\tsa := new(SockaddrL2TPIP)\n\t\tsa.ConnId = pp.Conn_id\n\t\tfor i := 0; i < len(sa.Addr); i++ {\n\t\t\tsa.Addr[i] = pp.Addr[i]\n\t\t}\n\t\treturn sa, nil\n\tdefault:\n\t\tpp := (*RawSockaddrInet4)(unsafe.Pointer(rsa))\n\t\tsa := new(SockaddrInet4)\n\t\tp := (*[2]byte)(unsafe.Pointer(&pp.Port))\n\t\tsa.Port = int(p[0])<<8 + int(p[1])\n\t\tfor i := 0; i < len(sa.Addr); i++ {\n\t\t\tsa.Addr[i] = pp.Addr[i]\n\t\t}\n\t\treturn sa, nil\n\t}",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 37 ],
      "in-vars" : [ 2, 3 ],
      "exit" : false,
      "out-vars" : [ 3, 39, 40 ],
      "decl-vars" : [ 39, 40 ],
      "line-start" : 926,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "proto"
          }
        }, {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "err"
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "fd",
              "variable" : 2
            }
          }, {
            "go-type" : 2,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "1"
            }
          }, {
            "go-type" : 2,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "38"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 57,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 1,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "GetsockoptInt"
            }
          },
          "go-type" : 56,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 926,
      "code" : "proto, err := GetsockoptInt(fd, SOL_SOCKET, SO_PROTOCOL)",
      "entry" : false,
      "use-vars" : [ 2 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 38, 39 ],
      "in-vars" : [ 3, 39, 40 ],
      "exit" : false,
      "out-vars" : [ 39, 40, 3 ],
      "decl-vars" : [ ],
      "line-start" : 927,
      "ast" : {
        "condition" : {
          "go-type" : 44,
          "kind" : "expression",
          "left" : {
            "go-type" : 21,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "err",
              "variable" : 39
            }
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 32,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Nil",
              "kind" : "ident",
              "value" : "nil"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 929,
      "code" : "if err != nil {\n\treturn nil, err\n}",
      "entry" : false,
      "use-vars" : [ 39 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 39 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 928,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 32,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Nil",
            "kind" : "ident",
            "value" : "nil"
          }
        }, {
          "go-type" : 21,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "err",
            "variable" : 39
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 928,
      "code" : "return nil, err",
      "entry" : false,
      "use-vars" : [ 39 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 40, 49 ],
      "in-vars" : [ 40, 3 ],
      "exit" : false,
      "out-vars" : [ 3 ],
      "decl-vars" : [ ],
      "line-start" : 931,
      "ast" : {
        "condition" : {
          "go-type" : 2,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "proto",
            "variable" : 40
          }
        },
        "kind" : "statement",
        "type" : "switch"
      },
      "assign-vars" : [ ],
      "line-end" : 949,
      "code" : "switch proto {\ncase IPPROTO_L2TP:\n\tpp := (*RawSockaddrL2TPIP)(unsafe.Pointer(rsa))\n\tsa := new(SockaddrL2TPIP)\n\tsa.ConnId = pp.Conn_id\n\tfor i := 0; i < len(sa.Addr); i++ {\n\t\tsa.Addr[i] = pp.Addr[i]\n\t}\n\treturn sa, nil\ndefault:\n\tpp := (*RawSockaddrInet4)(unsafe.Pointer(rsa))\n\tsa := new(SockaddrInet4)\n\tp := (*[2]byte)(unsafe.Pointer(&pp.Port))\n\tsa.Port = int(p[0])<<8 + int(p[1])\n\tfor i := 0; i < len(sa.Addr); i++ {\n\t\tsa.Addr[i] = pp.Addr[i]\n\t}\n\treturn sa, nil\n}",
      "entry" : false,
      "use-vars" : [ 40 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 41 ],
      "in-vars" : [ 3 ],
      "exit" : false,
      "out-vars" : [ 3 ],
      "decl-vars" : [ ],
      "line-start" : 932,
      "ast" : {
        "expressions" : [ {
          "go-type" : 2,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "115"
          }
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 939,
      "code" : "case IPPROTO_L2TP:\n\tpp := (*RawSockaddrL2TPIP)(unsafe.Pointer(rsa))\n\tsa := new(SockaddrL2TPIP)\n\tsa.ConnId = pp.Conn_id\n\tfor i := 0; i < len(sa.Addr); i++ {\n\t\tsa.Addr[i] = pp.Addr[i]\n\t}\n\treturn sa, nil",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 42 ],
      "in-vars" : [ 3 ],
      "exit" : false,
      "out-vars" : [ 43 ],
      "decl-vars" : [ 43 ],
      "line-start" : 933,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "pp"
          }
        } ],
        "right" : [ {
          "coerced-to" : {
            "contained" : {
              "go-type" : 60,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 60,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "RawSockaddrL2TPIP"
              }
            },
            "go-type" : 59,
            "kind" : "type",
            "type" : "pointer"
          },
          "go-type" : 59,
          "kind" : "expression",
          "target" : {
            "coerced-to" : {
              "go-type" : 18,
              "kind" : "type",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 1,
                "value" : "unsafe"
              },
              "type" : "identifier",
              "value" : {
                "go-type" : 18,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "Pointer"
              }
            },
            "go-type" : 18,
            "kind" : "expression",
            "target" : {
              "go-type" : 3,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "rsa",
                "variable" : 3
              }
            },
            "type" : "cast"
          },
          "type" : "cast"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 933,
      "code" : "pp := (*RawSockaddrL2TPIP)(unsafe.Pointer(rsa))",
      "entry" : false,
      "use-vars" : [ 3 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 43 ],
      "in-vars" : [ 43 ],
      "exit" : false,
      "out-vars" : [ 41, 43 ],
      "decl-vars" : [ 41 ],
      "line-start" : 934,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "sa"
          }
        } ],
        "right" : [ {
          "argument" : {
            "go-type" : 65,
            "kind" : "type",
            "type" : "identifier",
            "value" : {
              "go-type" : 65,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "SockaddrL2TPIP"
            }
          },
          "go-type" : 64,
          "kind" : "expression",
          "type" : "new"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 934,
      "code" : "sa := new(SockaddrL2TPIP)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ 41 ],
      "successors" : [ 45 ],
      "in-vars" : [ 43, 41 ],
      "exit" : false,
      "out-vars" : [ 41, 43 ],
      "decl-vars" : [ ],
      "line-start" : 935,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "ConnId",
            "variable" : 42
          },
          "go-type" : 20,
          "kind" : "expression",
          "target" : {
            "go-type" : 64,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "sa",
              "variable" : 41
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "Conn_id",
            "variable" : 44
          },
          "go-type" : 20,
          "kind" : "expression",
          "target" : {
            "go-type" : 59,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "pp",
              "variable" : 43
            }
          },
          "type" : "selector"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 935,
      "code" : "sa.ConnId = pp.Conn_id",
      "entry" : false,
      "use-vars" : [ 43, 41 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 47, 48 ],
      "in-vars" : [ 45, 41, 43 ],
      "exit" : false,
      "out-vars" : [ 45, 41, 43 ],
      "decl-vars" : [ ],
      "line-start" : 936,
      "ast" : {
        "condition" : {
          "go-type" : 44,
          "kind" : "expression",
          "left" : {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "i",
              "variable" : 45
            }
          },
          "operator" : "<",
          "right" : {
            "go-type" : 2,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "4"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "for"
      },
      "assign-vars" : [ ],
      "line-end" : 938,
      "code" : "for i := 0; i < len(sa.Addr); i++ {\n\tsa.Addr[i] = pp.Addr[i]\n}",
      "entry" : false,
      "use-vars" : [ 45, 41 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 44 ],
      "in-vars" : [ 41, 43 ],
      "exit" : false,
      "out-vars" : [ 45, 41, 43 ],
      "decl-vars" : [ 45 ],
      "line-start" : 936,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "i"
          }
        } ],
        "right" : [ {
          "go-type" : 2,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "0"
          }
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 936,
      "code" : "i := 0",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ 45 ],
      "successors" : [ 44 ],
      "in-vars" : [ 43, 45, 41 ],
      "exit" : false,
      "out-vars" : [ 41, 43, 45 ],
      "decl-vars" : [ ],
      "line-start" : 936,
      "ast" : {
        "kind" : "statement",
        "operation" : "++",
        "target" : {
          "go-type" : 2,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "i",
            "variable" : 45
          }
        },
        "type" : "crement"
      },
      "assign-vars" : [ 45 ],
      "line-end" : 936,
      "code" : "i++",
      "entry" : false,
      "use-vars" : [ 45 ]
    }, {
      "update-vars" : [ 41 ],
      "successors" : [ 46 ],
      "in-vars" : [ 45, 41, 43 ],
      "exit" : false,
      "out-vars" : [ 45, 41, 43 ],
      "decl-vars" : [ ],
      "line-start" : 937,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 43,
          "index" : {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "i",
              "variable" : 45
            }
          },
          "kind" : "expression",
          "target" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "Addr",
              "variable" : 46
            },
            "go-type" : 62,
            "kind" : "expression",
            "target" : {
              "go-type" : 64,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "sa",
                "variable" : 41
              }
            },
            "type" : "selector"
          },
          "type" : "index"
        } ],
        "right" : [ {
          "go-type" : 43,
          "index" : {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "i",
              "variable" : 45
            }
          },
          "kind" : "expression",
          "target" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "Addr",
              "variable" : 47
            },
            "go-type" : 62,
            "kind" : "expression",
            "target" : {
              "go-type" : 59,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "pp",
                "variable" : 43
              }
            },
            "type" : "selector"
          },
          "type" : "index"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 937,
      "code" : "sa.Addr[i] = pp.Addr[i]",
      "entry" : false,
      "use-vars" : [ 43, 45, 41 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 41 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 939,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 64,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "sa",
            "variable" : 41
          }
        }, {
          "go-type" : 32,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Nil",
            "kind" : "ident",
            "value" : "nil"
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 939,
      "code" : "return sa, nil",
      "entry" : false,
      "use-vars" : [ 41 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 50 ],
      "in-vars" : [ 3 ],
      "exit" : false,
      "out-vars" : [ 3 ],
      "decl-vars" : [ ],
      "line-start" : 940,
      "ast" : {
        "expressions" : [ ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 948,
      "code" : "default:\n\tpp := (*RawSockaddrInet4)(unsafe.Pointer(rsa))\n\tsa := new(SockaddrInet4)\n\tp := (*[2]byte)(unsafe.Pointer(&pp.Port))\n\tsa.Port = int(p[0])<<8 + int(p[1])\n\tfor i := 0; i < len(sa.Addr); i++ {\n\t\tsa.Addr[i] = pp.Addr[i]\n\t}\n\treturn sa, nil",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 51 ],
      "in-vars" : [ 3 ],
      "exit" : false,
      "out-vars" : [ 48 ],
      "decl-vars" : [ 48 ],
      "line-start" : 941,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "pp"
          }
        } ],
        "right" : [ {
          "coerced-to" : {
            "contained" : {
              "go-type" : 68,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 68,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "RawSockaddrInet4"
              }
            },
            "go-type" : 67,
            "kind" : "type",
            "type" : "pointer"
          },
          "go-type" : 67,
          "kind" : "expression",
          "target" : {
            "coerced-to" : {
              "go-type" : 18,
              "kind" : "type",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 1,
                "value" : "unsafe"
              },
              "type" : "identifier",
              "value" : {
                "go-type" : 18,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "Pointer"
              }
            },
            "go-type" : 18,
            "kind" : "expression",
            "target" : {
              "go-type" : 3,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "rsa",
                "variable" : 3
              }
            },
            "type" : "cast"
          },
          "type" : "cast"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 941,
      "code" : "pp := (*RawSockaddrInet4)(unsafe.Pointer(rsa))",
      "entry" : false,
      "use-vars" : [ 3 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 52 ],
      "in-vars" : [ 48 ],
      "exit" : false,
      "out-vars" : [ 48, 50 ],
      "decl-vars" : [ 50 ],
      "line-start" : 942,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "sa"
          }
        } ],
        "right" : [ {
          "argument" : {
            "go-type" : 71,
            "kind" : "type",
            "type" : "identifier",
            "value" : {
              "go-type" : 71,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "SockaddrInet4"
            }
          },
          "go-type" : 70,
          "kind" : "expression",
          "type" : "new"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 942,
      "code" : "sa := new(SockaddrInet4)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 53 ],
      "in-vars" : [ 50, 48 ],
      "exit" : false,
      "out-vars" : [ 52, 50, 48 ],
      "decl-vars" : [ 52 ],
      "line-start" : 943,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "p"
          }
        } ],
        "right" : [ {
          "coerced-to" : {
            "contained" : {
              "element" : {
                "go-type" : 43,
                "kind" : "type",
                "type" : "identifier",
                "value" : {
                  "go-type" : 43,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "byte"
                }
              },
              "go-type" : 74,
              "kind" : "type",
              "length" : {
                "go-type" : 75,
                "kind" : "constant",
                "value" : {
                  "type" : "INT",
                  "value" : "2"
                }
              },
              "type" : "array"
            },
            "go-type" : 73,
            "kind" : "type",
            "type" : "pointer"
          },
          "go-type" : 73,
          "kind" : "expression",
          "target" : {
            "coerced-to" : {
              "go-type" : 18,
              "kind" : "type",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 1,
                "value" : "unsafe"
              },
              "type" : "identifier",
              "value" : {
                "go-type" : 18,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "Pointer"
              }
            },
            "go-type" : 18,
            "kind" : "expression",
            "target" : {
              "go-type" : 76,
              "kind" : "expression",
              "operator" : "&",
              "target" : {
                "field" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "Port",
                  "variable" : 49
                },
                "go-type" : 8,
                "kind" : "expression",
                "target" : {
                  "go-type" : 67,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "pp",
                    "variable" : 48
                  }
                },
                "type" : "selector"
              },
              "type" : "unary"
            },
            "type" : "cast"
          },
          "type" : "cast"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 943,
      "code" : "p := (*[2]byte)(unsafe.Pointer(&pp.Port))",
      "entry" : false,
      "use-vars" : [ 48 ]
    }, {
      "update-vars" : [ 50 ],
      "successors" : [ 55 ],
      "in-vars" : [ 50, 48, 52 ],
      "exit" : false,
      "out-vars" : [ 50, 48 ],
      "decl-vars" : [ ],
      "line-start" : 944,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "Port",
            "variable" : 51
          },
          "go-type" : 2,
          "kind" : "expression",
          "target" : {
            "go-type" : 70,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "sa",
              "variable" : 50
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "go-type" : 2,
          "kind" : "expression",
          "left" : {
            "go-type" : 2,
            "kind" : "expression",
            "left" : {
              "coerced-to" : {
                "go-type" : 2,
                "kind" : "type",
                "type" : "identifier",
                "value" : {
                  "go-type" : 2,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "int"
                }
              },
              "go-type" : 2,
              "kind" : "expression",
              "target" : {
                "go-type" : 43,
                "index" : {
                  "go-type" : 2,
                  "kind" : "constant",
                  "value" : {
                    "type" : "INT",
                    "value" : "0"
                  }
                },
                "kind" : "expression",
                "target" : {
                  "go-type" : 73,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "p",
                    "variable" : 52
                  }
                },
                "type" : "index"
              },
              "type" : "cast"
            },
            "operator" : "<<",
            "right" : {
              "go-type" : 75,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "8"
              }
            },
            "type" : "binary"
          },
          "operator" : "+",
          "right" : {
            "coerced-to" : {
              "go-type" : 2,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 2,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "int"
              }
            },
            "go-type" : 2,
            "kind" : "expression",
            "target" : {
              "go-type" : 43,
              "index" : {
                "go-type" : 2,
                "kind" : "constant",
                "value" : {
                  "type" : "INT",
                  "value" : "1"
                }
              },
              "kind" : "expression",
              "target" : {
                "go-type" : 73,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "p",
                  "variable" : 52
                }
              },
              "type" : "index"
            },
            "type" : "cast"
          },
          "type" : "binary"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 944,
      "code" : "sa.Port = int(p[0])<<8 + int(p[1])",
      "entry" : false,
      "use-vars" : [ 52, 50 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 57, 58 ],
      "in-vars" : [ 50, 48, 53 ],
      "exit" : false,
      "out-vars" : [ 50, 48, 53 ],
      "decl-vars" : [ ],
      "line-start" : 945,
      "ast" : {
        "condition" : {
          "go-type" : 44,
          "kind" : "expression",
          "left" : {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "i",
              "variable" : 53
            }
          },
          "operator" : "<",
          "right" : {
            "go-type" : 2,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "4"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "for"
      },
      "assign-vars" : [ ],
      "line-end" : 947,
      "code" : "for i := 0; i < len(sa.Addr); i++ {\n\tsa.Addr[i] = pp.Addr[i]\n}",
      "entry" : false,
      "use-vars" : [ 53, 50 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 54 ],
      "in-vars" : [ 50, 48 ],
      "exit" : false,
      "out-vars" : [ 50, 48, 53 ],
      "decl-vars" : [ 53 ],
      "line-start" : 945,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "i"
          }
        } ],
        "right" : [ {
          "go-type" : 2,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "0"
          }
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 945,
      "code" : "i := 0",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ 53 ],
      "successors" : [ 54 ],
      "in-vars" : [ 50, 48, 53 ],
      "exit" : false,
      "out-vars" : [ 50, 48, 53 ],
      "decl-vars" : [ ],
      "line-start" : 945,
      "ast" : {
        "kind" : "statement",
        "operation" : "++",
        "target" : {
          "go-type" : 2,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "i",
            "variable" : 53
          }
        },
        "type" : "crement"
      },
      "assign-vars" : [ 53 ],
      "line-end" : 945,
      "code" : "i++",
      "entry" : false,
      "use-vars" : [ 53 ]
    }, {
      "update-vars" : [ 50 ],
      "successors" : [ 56 ],
      "in-vars" : [ 50, 48, 53 ],
      "exit" : false,
      "out-vars" : [ 50, 48, 53 ],
      "decl-vars" : [ ],
      "line-start" : 946,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 43,
          "index" : {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "i",
              "variable" : 53
            }
          },
          "kind" : "expression",
          "target" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "Addr",
              "variable" : 54
            },
            "go-type" : 62,
            "kind" : "expression",
            "target" : {
              "go-type" : 70,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "sa",
                "variable" : 50
              }
            },
            "type" : "selector"
          },
          "type" : "index"
        } ],
        "right" : [ {
          "go-type" : 43,
          "index" : {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "i",
              "variable" : 53
            }
          },
          "kind" : "expression",
          "target" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "Addr",
              "variable" : 55
            },
            "go-type" : 62,
            "kind" : "expression",
            "target" : {
              "go-type" : 67,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "pp",
                "variable" : 48
              }
            },
            "type" : "selector"
          },
          "type" : "index"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 946,
      "code" : "sa.Addr[i] = pp.Addr[i]",
      "entry" : false,
      "use-vars" : [ 48, 53, 50 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 50 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 948,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 70,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "sa",
            "variable" : 50
          }
        }, {
          "go-type" : 32,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Nil",
            "kind" : "ident",
            "value" : "nil"
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 948,
      "code" : "return sa, nil",
      "entry" : false,
      "use-vars" : [ 50 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 60 ],
      "in-vars" : [ 3, 2 ],
      "exit" : false,
      "out-vars" : [ 2, 3 ],
      "decl-vars" : [ ],
      "line-start" : 951,
      "ast" : {
        "expressions" : [ {
          "go-type" : 8,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "10"
          }
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 977,
      "code" : "case AF_INET6:\n\tproto, err := GetsockoptInt(fd, SOL_SOCKET, SO_PROTOCOL)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tswitch proto {\n\tcase IPPROTO_L2TP:\n\t\tpp := (*RawSockaddrL2TPIP6)(unsafe.Pointer(rsa))\n\t\tsa := new(SockaddrL2TPIP6)\n\t\tsa.ConnId = pp.Conn_id\n\t\tsa.ZoneId = pp.Scope_id\n\t\tfor i := 0; i < len(sa.Addr); i++ {\n\t\t\tsa.Addr[i] = pp.Addr[i]\n\t\t}\n\t\treturn sa, nil\n\tdefault:\n\t\tpp := (*RawSockaddrInet6)(unsafe.Pointer(rsa))\n\t\tsa := new(SockaddrInet6)\n\t\tp := (*[2]byte)(unsafe.Pointer(&pp.Port))\n\t\tsa.Port = int(p[0])<<8 + int(p[1])\n\t\tsa.ZoneId = pp.Scope_id\n\t\tfor i := 0; i < len(sa.Addr); i++ {\n\t\t\tsa.Addr[i] = pp.Addr[i]\n\t\t}\n\t\treturn sa, nil\n\t}",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 61 ],
      "in-vars" : [ 3, 2 ],
      "exit" : false,
      "out-vars" : [ 56, 57, 3 ],
      "decl-vars" : [ 56, 57 ],
      "line-start" : 952,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "proto"
          }
        }, {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "err"
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "fd",
              "variable" : 2
            }
          }, {
            "go-type" : 2,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "1"
            }
          }, {
            "go-type" : 2,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "38"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 57,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 1,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "GetsockoptInt"
            }
          },
          "go-type" : 56,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 952,
      "code" : "proto, err := GetsockoptInt(fd, SOL_SOCKET, SO_PROTOCOL)",
      "entry" : false,
      "use-vars" : [ 2 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 62, 63 ],
      "in-vars" : [ 56, 57, 3 ],
      "exit" : false,
      "out-vars" : [ 56, 57, 3 ],
      "decl-vars" : [ ],
      "line-start" : 953,
      "ast" : {
        "condition" : {
          "go-type" : 44,
          "kind" : "expression",
          "left" : {
            "go-type" : 21,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "err",
              "variable" : 56
            }
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 32,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Nil",
              "kind" : "ident",
              "value" : "nil"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 955,
      "code" : "if err != nil {\n\treturn nil, err\n}",
      "entry" : false,
      "use-vars" : [ 56 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 56 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 954,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 32,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Nil",
            "kind" : "ident",
            "value" : "nil"
          }
        }, {
          "go-type" : 21,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "err",
            "variable" : 56
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 954,
      "code" : "return nil, err",
      "entry" : false,
      "use-vars" : [ 56 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 64, 74 ],
      "in-vars" : [ 57, 3 ],
      "exit" : false,
      "out-vars" : [ 3 ],
      "decl-vars" : [ ],
      "line-start" : 957,
      "ast" : {
        "condition" : {
          "go-type" : 2,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "proto",
            "variable" : 57
          }
        },
        "kind" : "statement",
        "type" : "switch"
      },
      "assign-vars" : [ ],
      "line-end" : 977,
      "code" : "switch proto {\ncase IPPROTO_L2TP:\n\tpp := (*RawSockaddrL2TPIP6)(unsafe.Pointer(rsa))\n\tsa := new(SockaddrL2TPIP6)\n\tsa.ConnId = pp.Conn_id\n\tsa.ZoneId = pp.Scope_id\n\tfor i := 0; i < len(sa.Addr); i++ {\n\t\tsa.Addr[i] = pp.Addr[i]\n\t}\n\treturn sa, nil\ndefault:\n\tpp := (*RawSockaddrInet6)(unsafe.Pointer(rsa))\n\tsa := new(SockaddrInet6)\n\tp := (*[2]byte)(unsafe.Pointer(&pp.Port))\n\tsa.Port = int(p[0])<<8 + int(p[1])\n\tsa.ZoneId = pp.Scope_id\n\tfor i := 0; i < len(sa.Addr); i++ {\n\t\tsa.Addr[i] = pp.Addr[i]\n\t}\n\treturn sa, nil\n}",
      "entry" : false,
      "use-vars" : [ 57 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 65 ],
      "in-vars" : [ 3 ],
      "exit" : false,
      "out-vars" : [ 3 ],
      "decl-vars" : [ ],
      "line-start" : 958,
      "ast" : {
        "expressions" : [ {
          "go-type" : 2,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "115"
          }
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 966,
      "code" : "case IPPROTO_L2TP:\n\tpp := (*RawSockaddrL2TPIP6)(unsafe.Pointer(rsa))\n\tsa := new(SockaddrL2TPIP6)\n\tsa.ConnId = pp.Conn_id\n\tsa.ZoneId = pp.Scope_id\n\tfor i := 0; i < len(sa.Addr); i++ {\n\t\tsa.Addr[i] = pp.Addr[i]\n\t}\n\treturn sa, nil",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 66 ],
      "in-vars" : [ 3 ],
      "exit" : false,
      "out-vars" : [ 60 ],
      "decl-vars" : [ 60 ],
      "line-start" : 959,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "pp"
          }
        } ],
        "right" : [ {
          "coerced-to" : {
            "contained" : {
              "go-type" : 78,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 78,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "RawSockaddrL2TPIP6"
              }
            },
            "go-type" : 77,
            "kind" : "type",
            "type" : "pointer"
          },
          "go-type" : 77,
          "kind" : "expression",
          "target" : {
            "coerced-to" : {
              "go-type" : 18,
              "kind" : "type",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 1,
                "value" : "unsafe"
              },
              "type" : "identifier",
              "value" : {
                "go-type" : 18,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "Pointer"
              }
            },
            "go-type" : 18,
            "kind" : "expression",
            "target" : {
              "go-type" : 3,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "rsa",
                "variable" : 3
              }
            },
            "type" : "cast"
          },
          "type" : "cast"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 959,
      "code" : "pp := (*RawSockaddrL2TPIP6)(unsafe.Pointer(rsa))",
      "entry" : false,
      "use-vars" : [ 3 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 67 ],
      "in-vars" : [ 60 ],
      "exit" : false,
      "out-vars" : [ 58, 60 ],
      "decl-vars" : [ 58 ],
      "line-start" : 960,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "sa"
          }
        } ],
        "right" : [ {
          "argument" : {
            "go-type" : 82,
            "kind" : "type",
            "type" : "identifier",
            "value" : {
              "go-type" : 82,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "SockaddrL2TPIP6"
            }
          },
          "go-type" : 81,
          "kind" : "expression",
          "type" : "new"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 960,
      "code" : "sa := new(SockaddrL2TPIP6)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ 58 ],
      "successors" : [ 68 ],
      "in-vars" : [ 58, 60 ],
      "exit" : false,
      "out-vars" : [ 58, 60 ],
      "decl-vars" : [ ],
      "line-start" : 961,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "ConnId",
            "variable" : 59
          },
          "go-type" : 20,
          "kind" : "expression",
          "target" : {
            "go-type" : 81,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "sa",
              "variable" : 58
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "Conn_id",
            "variable" : 61
          },
          "go-type" : 20,
          "kind" : "expression",
          "target" : {
            "go-type" : 77,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "pp",
              "variable" : 60
            }
          },
          "type" : "selector"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 961,
      "code" : "sa.ConnId = pp.Conn_id",
      "entry" : false,
      "use-vars" : [ 60, 58 ]
    }, {
      "update-vars" : [ 58 ],
      "successors" : [ 70 ],
      "in-vars" : [ 58, 60 ],
      "exit" : false,
      "out-vars" : [ 58, 60 ],
      "decl-vars" : [ ],
      "line-start" : 962,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "ZoneId",
            "variable" : 62
          },
          "go-type" : 20,
          "kind" : "expression",
          "target" : {
            "go-type" : 81,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "sa",
              "variable" : 58
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "Scope_id",
            "variable" : 63
          },
          "go-type" : 20,
          "kind" : "expression",
          "target" : {
            "go-type" : 77,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "pp",
              "variable" : 60
            }
          },
          "type" : "selector"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 962,
      "code" : "sa.ZoneId = pp.Scope_id",
      "entry" : false,
      "use-vars" : [ 60, 58 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 72, 73 ],
      "in-vars" : [ 58, 64, 60 ],
      "exit" : false,
      "out-vars" : [ 60, 58, 64 ],
      "decl-vars" : [ ],
      "line-start" : 963,
      "ast" : {
        "condition" : {
          "go-type" : 44,
          "kind" : "expression",
          "left" : {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "i",
              "variable" : 64
            }
          },
          "operator" : "<",
          "right" : {
            "go-type" : 2,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "16"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "for"
      },
      "assign-vars" : [ ],
      "line-end" : 965,
      "code" : "for i := 0; i < len(sa.Addr); i++ {\n\tsa.Addr[i] = pp.Addr[i]\n}",
      "entry" : false,
      "use-vars" : [ 58, 64 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 69 ],
      "in-vars" : [ 58, 60 ],
      "exit" : false,
      "out-vars" : [ 64, 60, 58 ],
      "decl-vars" : [ 64 ],
      "line-start" : 963,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "i"
          }
        } ],
        "right" : [ {
          "go-type" : 2,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "0"
          }
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 963,
      "code" : "i := 0",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ 64 ],
      "successors" : [ 69 ],
      "in-vars" : [ 58, 64, 60 ],
      "exit" : false,
      "out-vars" : [ 58, 64, 60 ],
      "decl-vars" : [ ],
      "line-start" : 963,
      "ast" : {
        "kind" : "statement",
        "operation" : "++",
        "target" : {
          "go-type" : 2,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "i",
            "variable" : 64
          }
        },
        "type" : "crement"
      },
      "assign-vars" : [ 64 ],
      "line-end" : 963,
      "code" : "i++",
      "entry" : false,
      "use-vars" : [ 64 ]
    }, {
      "update-vars" : [ 58 ],
      "successors" : [ 71 ],
      "in-vars" : [ 58, 64, 60 ],
      "exit" : false,
      "out-vars" : [ 60, 58, 64 ],
      "decl-vars" : [ ],
      "line-start" : 964,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 43,
          "index" : {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "i",
              "variable" : 64
            }
          },
          "kind" : "expression",
          "target" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "Addr",
              "variable" : 65
            },
            "go-type" : 80,
            "kind" : "expression",
            "target" : {
              "go-type" : 81,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "sa",
                "variable" : 58
              }
            },
            "type" : "selector"
          },
          "type" : "index"
        } ],
        "right" : [ {
          "go-type" : 43,
          "index" : {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "i",
              "variable" : 64
            }
          },
          "kind" : "expression",
          "target" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "Addr",
              "variable" : 66
            },
            "go-type" : 80,
            "kind" : "expression",
            "target" : {
              "go-type" : 77,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "pp",
                "variable" : 60
              }
            },
            "type" : "selector"
          },
          "type" : "index"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 964,
      "code" : "sa.Addr[i] = pp.Addr[i]",
      "entry" : false,
      "use-vars" : [ 58, 64, 60 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 58 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 966,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 81,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "sa",
            "variable" : 58
          }
        }, {
          "go-type" : 32,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Nil",
            "kind" : "ident",
            "value" : "nil"
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 966,
      "code" : "return sa, nil",
      "entry" : false,
      "use-vars" : [ 58 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 75 ],
      "in-vars" : [ 3 ],
      "exit" : false,
      "out-vars" : [ 3 ],
      "decl-vars" : [ ],
      "line-start" : 967,
      "ast" : {
        "expressions" : [ ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 976,
      "code" : "default:\n\tpp := (*RawSockaddrInet6)(unsafe.Pointer(rsa))\n\tsa := new(SockaddrInet6)\n\tp := (*[2]byte)(unsafe.Pointer(&pp.Port))\n\tsa.Port = int(p[0])<<8 + int(p[1])\n\tsa.ZoneId = pp.Scope_id\n\tfor i := 0; i < len(sa.Addr); i++ {\n\t\tsa.Addr[i] = pp.Addr[i]\n\t}\n\treturn sa, nil",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 76 ],
      "in-vars" : [ 3 ],
      "exit" : false,
      "out-vars" : [ 67 ],
      "decl-vars" : [ 67 ],
      "line-start" : 968,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "pp"
          }
        } ],
        "right" : [ {
          "coerced-to" : {
            "contained" : {
              "go-type" : 85,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 85,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "RawSockaddrInet6"
              }
            },
            "go-type" : 84,
            "kind" : "type",
            "type" : "pointer"
          },
          "go-type" : 84,
          "kind" : "expression",
          "target" : {
            "coerced-to" : {
              "go-type" : 18,
              "kind" : "type",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 1,
                "value" : "unsafe"
              },
              "type" : "identifier",
              "value" : {
                "go-type" : 18,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "Pointer"
              }
            },
            "go-type" : 18,
            "kind" : "expression",
            "target" : {
              "go-type" : 3,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "rsa",
                "variable" : 3
              }
            },
            "type" : "cast"
          },
          "type" : "cast"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 968,
      "code" : "pp := (*RawSockaddrInet6)(unsafe.Pointer(rsa))",
      "entry" : false,
      "use-vars" : [ 3 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 77 ],
      "in-vars" : [ 67 ],
      "exit" : false,
      "out-vars" : [ 69, 67 ],
      "decl-vars" : [ 69 ],
      "line-start" : 969,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "sa"
          }
        } ],
        "right" : [ {
          "argument" : {
            "go-type" : 88,
            "kind" : "type",
            "type" : "identifier",
            "value" : {
              "go-type" : 88,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "SockaddrInet6"
            }
          },
          "go-type" : 87,
          "kind" : "expression",
          "type" : "new"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 969,
      "code" : "sa := new(SockaddrInet6)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 78 ],
      "in-vars" : [ 69, 67 ],
      "exit" : false,
      "out-vars" : [ 69, 71, 67 ],
      "decl-vars" : [ 71 ],
      "line-start" : 970,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "p"
          }
        } ],
        "right" : [ {
          "coerced-to" : {
            "contained" : {
              "element" : {
                "go-type" : 43,
                "kind" : "type",
                "type" : "identifier",
                "value" : {
                  "go-type" : 43,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "byte"
                }
              },
              "go-type" : 74,
              "kind" : "type",
              "length" : {
                "go-type" : 75,
                "kind" : "constant",
                "value" : {
                  "type" : "INT",
                  "value" : "2"
                }
              },
              "type" : "array"
            },
            "go-type" : 73,
            "kind" : "type",
            "type" : "pointer"
          },
          "go-type" : 73,
          "kind" : "expression",
          "target" : {
            "coerced-to" : {
              "go-type" : 18,
              "kind" : "type",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 1,
                "value" : "unsafe"
              },
              "type" : "identifier",
              "value" : {
                "go-type" : 18,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "Pointer"
              }
            },
            "go-type" : 18,
            "kind" : "expression",
            "target" : {
              "go-type" : 76,
              "kind" : "expression",
              "operator" : "&",
              "target" : {
                "field" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "Port",
                  "variable" : 68
                },
                "go-type" : 8,
                "kind" : "expression",
                "target" : {
                  "go-type" : 84,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "pp",
                    "variable" : 67
                  }
                },
                "type" : "selector"
              },
              "type" : "unary"
            },
            "type" : "cast"
          },
          "type" : "cast"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 970,
      "code" : "p := (*[2]byte)(unsafe.Pointer(&pp.Port))",
      "entry" : false,
      "use-vars" : [ 67 ]
    }, {
      "update-vars" : [ 69 ],
      "successors" : [ 79 ],
      "in-vars" : [ 69, 71, 67 ],
      "exit" : false,
      "out-vars" : [ 69, 67 ],
      "decl-vars" : [ ],
      "line-start" : 971,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "Port",
            "variable" : 70
          },
          "go-type" : 2,
          "kind" : "expression",
          "target" : {
            "go-type" : 87,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "sa",
              "variable" : 69
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "go-type" : 2,
          "kind" : "expression",
          "left" : {
            "go-type" : 2,
            "kind" : "expression",
            "left" : {
              "coerced-to" : {
                "go-type" : 2,
                "kind" : "type",
                "type" : "identifier",
                "value" : {
                  "go-type" : 2,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "int"
                }
              },
              "go-type" : 2,
              "kind" : "expression",
              "target" : {
                "go-type" : 43,
                "index" : {
                  "go-type" : 2,
                  "kind" : "constant",
                  "value" : {
                    "type" : "INT",
                    "value" : "0"
                  }
                },
                "kind" : "expression",
                "target" : {
                  "go-type" : 73,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "p",
                    "variable" : 71
                  }
                },
                "type" : "index"
              },
              "type" : "cast"
            },
            "operator" : "<<",
            "right" : {
              "go-type" : 75,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "8"
              }
            },
            "type" : "binary"
          },
          "operator" : "+",
          "right" : {
            "coerced-to" : {
              "go-type" : 2,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 2,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "int"
              }
            },
            "go-type" : 2,
            "kind" : "expression",
            "target" : {
              "go-type" : 43,
              "index" : {
                "go-type" : 2,
                "kind" : "constant",
                "value" : {
                  "type" : "INT",
                  "value" : "1"
                }
              },
              "kind" : "expression",
              "target" : {
                "go-type" : 73,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "p",
                  "variable" : 71
                }
              },
              "type" : "index"
            },
            "type" : "cast"
          },
          "type" : "binary"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 971,
      "code" : "sa.Port = int(p[0])<<8 + int(p[1])",
      "entry" : false,
      "use-vars" : [ 71, 69 ]
    }, {
      "update-vars" : [ 69 ],
      "successors" : [ 81 ],
      "in-vars" : [ 69, 67 ],
      "exit" : false,
      "out-vars" : [ 69, 67 ],
      "decl-vars" : [ ],
      "line-start" : 972,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "ZoneId",
            "variable" : 72
          },
          "go-type" : 20,
          "kind" : "expression",
          "target" : {
            "go-type" : 87,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "sa",
              "variable" : 69
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "Scope_id",
            "variable" : 73
          },
          "go-type" : 20,
          "kind" : "expression",
          "target" : {
            "go-type" : 84,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "pp",
              "variable" : 67
            }
          },
          "type" : "selector"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 972,
      "code" : "sa.ZoneId = pp.Scope_id",
      "entry" : false,
      "use-vars" : [ 67, 69 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 83, 84 ],
      "in-vars" : [ 69, 74, 67 ],
      "exit" : false,
      "out-vars" : [ 69, 74, 67 ],
      "decl-vars" : [ ],
      "line-start" : 973,
      "ast" : {
        "condition" : {
          "go-type" : 44,
          "kind" : "expression",
          "left" : {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "i",
              "variable" : 74
            }
          },
          "operator" : "<",
          "right" : {
            "go-type" : 2,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "16"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "for"
      },
      "assign-vars" : [ ],
      "line-end" : 975,
      "code" : "for i := 0; i < len(sa.Addr); i++ {\n\tsa.Addr[i] = pp.Addr[i]\n}",
      "entry" : false,
      "use-vars" : [ 69, 74 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 80 ],
      "in-vars" : [ 67, 69 ],
      "exit" : false,
      "out-vars" : [ 69, 74, 67 ],
      "decl-vars" : [ 74 ],
      "line-start" : 973,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "i"
          }
        } ],
        "right" : [ {
          "go-type" : 2,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "0"
          }
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 973,
      "code" : "i := 0",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ 74 ],
      "successors" : [ 80 ],
      "in-vars" : [ 69, 74, 67 ],
      "exit" : false,
      "out-vars" : [ 67, 69, 74 ],
      "decl-vars" : [ ],
      "line-start" : 973,
      "ast" : {
        "kind" : "statement",
        "operation" : "++",
        "target" : {
          "go-type" : 2,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "i",
            "variable" : 74
          }
        },
        "type" : "crement"
      },
      "assign-vars" : [ 74 ],
      "line-end" : 973,
      "code" : "i++",
      "entry" : false,
      "use-vars" : [ 74 ]
    }, {
      "update-vars" : [ 69 ],
      "successors" : [ 82 ],
      "in-vars" : [ 69, 74, 67 ],
      "exit" : false,
      "out-vars" : [ 67, 69, 74 ],
      "decl-vars" : [ ],
      "line-start" : 974,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 43,
          "index" : {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "i",
              "variable" : 74
            }
          },
          "kind" : "expression",
          "target" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "Addr",
              "variable" : 75
            },
            "go-type" : 80,
            "kind" : "expression",
            "target" : {
              "go-type" : 87,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "sa",
                "variable" : 69
              }
            },
            "type" : "selector"
          },
          "type" : "index"
        } ],
        "right" : [ {
          "go-type" : 43,
          "index" : {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "i",
              "variable" : 74
            }
          },
          "kind" : "expression",
          "target" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "Addr",
              "variable" : 76
            },
            "go-type" : 80,
            "kind" : "expression",
            "target" : {
              "go-type" : 84,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "pp",
                "variable" : 67
              }
            },
            "type" : "selector"
          },
          "type" : "index"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 974,
      "code" : "sa.Addr[i] = pp.Addr[i]",
      "entry" : false,
      "use-vars" : [ 74, 69, 67 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 69 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 976,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 87,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "sa",
            "variable" : 69
          }
        }, {
          "go-type" : 32,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Nil",
            "kind" : "ident",
            "value" : "nil"
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 976,
      "code" : "return sa, nil",
      "entry" : false,
      "use-vars" : [ 69 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 86 ],
      "in-vars" : [ 3 ],
      "exit" : false,
      "out-vars" : [ 3 ],
      "decl-vars" : [ ],
      "line-start" : 979,
      "ast" : {
        "expressions" : [ {
          "go-type" : 8,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "40"
          }
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 985,
      "code" : "case AF_VSOCK:\n\tpp := (*RawSockaddrVM)(unsafe.Pointer(rsa))\n\tsa := &SockaddrVM{\n\t\tCID:  pp.Cid,\n\t\tPort: pp.Port,\n\t}\n\treturn sa, nil",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 87 ],
      "in-vars" : [ 3 ],
      "exit" : false,
      "out-vars" : [ 78 ],
      "decl-vars" : [ 78 ],
      "line-start" : 980,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "pp"
          }
        } ],
        "right" : [ {
          "coerced-to" : {
            "contained" : {
              "go-type" : 91,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 91,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "RawSockaddrVM"
              }
            },
            "go-type" : 90,
            "kind" : "type",
            "type" : "pointer"
          },
          "go-type" : 90,
          "kind" : "expression",
          "target" : {
            "coerced-to" : {
              "go-type" : 18,
              "kind" : "type",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 1,
                "value" : "unsafe"
              },
              "type" : "identifier",
              "value" : {
                "go-type" : 18,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "Pointer"
              }
            },
            "go-type" : 18,
            "kind" : "expression",
            "target" : {
              "go-type" : 3,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "rsa",
                "variable" : 3
              }
            },
            "type" : "cast"
          },
          "type" : "cast"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 980,
      "code" : "pp := (*RawSockaddrVM)(unsafe.Pointer(rsa))",
      "entry" : false,
      "use-vars" : [ 3 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 88 ],
      "in-vars" : [ 78 ],
      "exit" : false,
      "out-vars" : [ 82 ],
      "decl-vars" : [ 82 ],
      "line-start" : 981,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "sa"
          }
        } ],
        "right" : [ {
          "go-type" : 93,
          "kind" : "expression",
          "operator" : "&",
          "target" : {
            "declared" : {
              "go-type" : 94,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 94,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "SockaddrVM"
              }
            },
            "go-type" : 94,
            "kind" : "literal",
            "type" : "composite",
            "values" : [ {
              "go-type" : -1,
              "key" : {
                "go-type" : -1,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "CID",
                  "variable" : 77
                }
              },
              "kind" : "expression",
              "type" : "key-value",
              "value" : {
                "field" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "Cid",
                  "variable" : 79
                },
                "go-type" : 20,
                "kind" : "expression",
                "target" : {
                  "go-type" : 90,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "pp",
                    "variable" : 78
                  }
                },
                "type" : "selector"
              }
            }, {
              "go-type" : -1,
              "key" : {
                "go-type" : -1,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "Port",
                  "variable" : 80
                }
              },
              "kind" : "expression",
              "type" : "key-value",
              "value" : {
                "field" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "Port",
                  "variable" : 81
                },
                "go-type" : 20,
                "kind" : "expression",
                "target" : {
                  "go-type" : 90,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "pp",
                    "variable" : 78
                  }
                },
                "type" : "selector"
              }
            } ]
          },
          "type" : "unary"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 984,
      "code" : "sa := &SockaddrVM{\n\tCID:  pp.Cid,\n\tPort: pp.Port,\n}",
      "entry" : false,
      "use-vars" : [ 78 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 82 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 985,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 93,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "sa",
            "variable" : 82
          }
        }, {
          "go-type" : 32,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Nil",
            "kind" : "ident",
            "value" : "nil"
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 985,
      "code" : "return sa, nil",
      "entry" : false,
      "use-vars" : [ 82 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 90 ],
      "in-vars" : [ 2, 3 ],
      "exit" : false,
      "out-vars" : [ 2, 3 ],
      "decl-vars" : [ ],
      "line-start" : 986,
      "ast" : {
        "expressions" : [ {
          "go-type" : 8,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "31"
          }
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 1009,
      "code" : "case AF_BLUETOOTH:\n\tproto, err := GetsockoptInt(fd, SOL_SOCKET, SO_PROTOCOL)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tswitch proto {\n\tcase BTPROTO_L2CAP:\n\t\tpp := (*RawSockaddrL2)(unsafe.Pointer(rsa))\n\t\tsa := &SockaddrL2{\n\t\t\tPSM:      pp.Psm,\n\t\t\tCID:      pp.Cid,\n\t\t\tAddr:     pp.Bdaddr,\n\t\t\tAddrType: pp.Bdaddr_type,\n\t\t}\n\t\treturn sa, nil\n\tcase BTPROTO_RFCOMM:\n\t\tpp := (*RawSockaddrRFCOMM)(unsafe.Pointer(rsa))\n\t\tsa := &SockaddrRFCOMM{\n\t\t\tChannel: pp.Channel,\n\t\t\tAddr:    pp.Bdaddr,\n\t\t}\n\t\treturn sa, nil\n\t}",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 91 ],
      "in-vars" : [ 2, 3 ],
      "exit" : false,
      "out-vars" : [ 3, 83, 84 ],
      "decl-vars" : [ 84, 83 ],
      "line-start" : 987,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "proto"
          }
        }, {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "err"
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "fd",
              "variable" : 2
            }
          }, {
            "go-type" : 2,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "1"
            }
          }, {
            "go-type" : 2,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "38"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 57,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 1,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "GetsockoptInt"
            }
          },
          "go-type" : 56,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 987,
      "code" : "proto, err := GetsockoptInt(fd, SOL_SOCKET, SO_PROTOCOL)",
      "entry" : false,
      "use-vars" : [ 2 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 92, 93 ],
      "in-vars" : [ 84, 3, 83 ],
      "exit" : false,
      "out-vars" : [ 3, 83, 84 ],
      "decl-vars" : [ ],
      "line-start" : 988,
      "ast" : {
        "condition" : {
          "go-type" : 44,
          "kind" : "expression",
          "left" : {
            "go-type" : 21,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "err",
              "variable" : 83
            }
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 32,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Nil",
              "kind" : "ident",
              "value" : "nil"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 990,
      "code" : "if err != nil {\n\treturn nil, err\n}",
      "entry" : false,
      "use-vars" : [ 83 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 83 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 989,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 32,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Nil",
            "kind" : "ident",
            "value" : "nil"
          }
        }, {
          "go-type" : 21,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "err",
            "variable" : 83
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 989,
      "code" : "return nil, err",
      "entry" : false,
      "use-vars" : [ 83 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 94, 98, 131 ],
      "in-vars" : [ 3, 84 ],
      "exit" : false,
      "out-vars" : [ 3 ],
      "decl-vars" : [ ],
      "line-start" : 992,
      "ast" : {
        "condition" : {
          "go-type" : 2,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "proto",
            "variable" : 84
          }
        },
        "kind" : "statement",
        "type" : "switch"
      },
      "assign-vars" : [ ],
      "line-end" : 1009,
      "code" : "switch proto {\ncase BTPROTO_L2CAP:\n\tpp := (*RawSockaddrL2)(unsafe.Pointer(rsa))\n\tsa := &SockaddrL2{\n\t\tPSM:      pp.Psm,\n\t\tCID:      pp.Cid,\n\t\tAddr:     pp.Bdaddr,\n\t\tAddrType: pp.Bdaddr_type,\n\t}\n\treturn sa, nil\ncase BTPROTO_RFCOMM:\n\tpp := (*RawSockaddrRFCOMM)(unsafe.Pointer(rsa))\n\tsa := &SockaddrRFCOMM{\n\t\tChannel: pp.Channel,\n\t\tAddr:    pp.Bdaddr,\n\t}\n\treturn sa, nil\n}",
      "entry" : false,
      "use-vars" : [ 84 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 95 ],
      "in-vars" : [ 3 ],
      "exit" : false,
      "out-vars" : [ 3 ],
      "decl-vars" : [ ],
      "line-start" : 993,
      "ast" : {
        "expressions" : [ {
          "go-type" : 2,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "0"
          }
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 1001,
      "code" : "case BTPROTO_L2CAP:\n\tpp := (*RawSockaddrL2)(unsafe.Pointer(rsa))\n\tsa := &SockaddrL2{\n\t\tPSM:      pp.Psm,\n\t\tCID:      pp.Cid,\n\t\tAddr:     pp.Bdaddr,\n\t\tAddrType: pp.Bdaddr_type,\n\t}\n\treturn sa, nil",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 96 ],
      "in-vars" : [ 3 ],
      "exit" : false,
      "out-vars" : [ 86 ],
      "decl-vars" : [ 86 ],
      "line-start" : 994,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "pp"
          }
        } ],
        "right" : [ {
          "coerced-to" : {
            "contained" : {
              "go-type" : 97,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 97,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "RawSockaddrL2"
              }
            },
            "go-type" : 96,
            "kind" : "type",
            "type" : "pointer"
          },
          "go-type" : 96,
          "kind" : "expression",
          "target" : {
            "coerced-to" : {
              "go-type" : 18,
              "kind" : "type",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 1,
                "value" : "unsafe"
              },
              "type" : "identifier",
              "value" : {
                "go-type" : 18,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "Pointer"
              }
            },
            "go-type" : 18,
            "kind" : "expression",
            "target" : {
              "go-type" : 3,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "rsa",
                "variable" : 3
              }
            },
            "type" : "cast"
          },
          "type" : "cast"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 994,
      "code" : "pp := (*RawSockaddrL2)(unsafe.Pointer(rsa))",
      "entry" : false,
      "use-vars" : [ 3 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 97 ],
      "in-vars" : [ 86 ],
      "exit" : false,
      "out-vars" : [ 94 ],
      "decl-vars" : [ 94 ],
      "line-start" : 995,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "sa"
          }
        } ],
        "right" : [ {
          "go-type" : 101,
          "kind" : "expression",
          "operator" : "&",
          "target" : {
            "declared" : {
              "go-type" : 102,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 102,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "SockaddrL2"
              }
            },
            "go-type" : 102,
            "kind" : "literal",
            "type" : "composite",
            "values" : [ {
              "go-type" : -1,
              "key" : {
                "go-type" : -1,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "PSM",
                  "variable" : 85
                }
              },
              "kind" : "expression",
              "type" : "key-value",
              "value" : {
                "field" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "Psm",
                  "variable" : 87
                },
                "go-type" : 8,
                "kind" : "expression",
                "target" : {
                  "go-type" : 96,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "pp",
                    "variable" : 86
                  }
                },
                "type" : "selector"
              }
            }, {
              "go-type" : -1,
              "key" : {
                "go-type" : -1,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "CID",
                  "variable" : 88
                }
              },
              "kind" : "expression",
              "type" : "key-value",
              "value" : {
                "field" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "Cid",
                  "variable" : 89
                },
                "go-type" : 8,
                "kind" : "expression",
                "target" : {
                  "go-type" : 96,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "pp",
                    "variable" : 86
                  }
                },
                "type" : "selector"
              }
            }, {
              "go-type" : -1,
              "key" : {
                "go-type" : -1,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "Addr",
                  "variable" : 90
                }
              },
              "kind" : "expression",
              "type" : "key-value",
              "value" : {
                "field" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "Bdaddr",
                  "variable" : 91
                },
                "go-type" : 99,
                "kind" : "expression",
                "target" : {
                  "go-type" : 96,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "pp",
                    "variable" : 86
                  }
                },
                "type" : "selector"
              }
            }, {
              "go-type" : -1,
              "key" : {
                "go-type" : -1,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "AddrType",
                  "variable" : 92
                }
              },
              "kind" : "expression",
              "type" : "key-value",
              "value" : {
                "field" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "Bdaddr_type",
                  "variable" : 93
                },
                "go-type" : 37,
                "kind" : "expression",
                "target" : {
                  "go-type" : 96,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "pp",
                    "variable" : 86
                  }
                },
                "type" : "selector"
              }
            } ]
          },
          "type" : "unary"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 1000,
      "code" : "sa := &SockaddrL2{\n\tPSM:      pp.Psm,\n\tCID:      pp.Cid,\n\tAddr:     pp.Bdaddr,\n\tAddrType: pp.Bdaddr_type,\n}",
      "entry" : false,
      "use-vars" : [ 86 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 94 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 1001,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 101,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "sa",
            "variable" : 94
          }
        }, {
          "go-type" : 32,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Nil",
            "kind" : "ident",
            "value" : "nil"
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 1001,
      "code" : "return sa, nil",
      "entry" : false,
      "use-vars" : [ 94 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 99 ],
      "in-vars" : [ 3 ],
      "exit" : false,
      "out-vars" : [ 3 ],
      "decl-vars" : [ ],
      "line-start" : 1002,
      "ast" : {
        "expressions" : [ {
          "go-type" : 2,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "3"
          }
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 1008,
      "code" : "case BTPROTO_RFCOMM:\n\tpp := (*RawSockaddrRFCOMM)(unsafe.Pointer(rsa))\n\tsa := &SockaddrRFCOMM{\n\t\tChannel: pp.Channel,\n\t\tAddr:    pp.Bdaddr,\n\t}\n\treturn sa, nil",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 100 ],
      "in-vars" : [ 3 ],
      "exit" : false,
      "out-vars" : [ 96 ],
      "decl-vars" : [ 96 ],
      "line-start" : 1003,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "pp"
          }
        } ],
        "right" : [ {
          "coerced-to" : {
            "contained" : {
              "go-type" : 105,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 105,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "RawSockaddrRFCOMM"
              }
            },
            "go-type" : 104,
            "kind" : "type",
            "type" : "pointer"
          },
          "go-type" : 104,
          "kind" : "expression",
          "target" : {
            "coerced-to" : {
              "go-type" : 18,
              "kind" : "type",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 1,
                "value" : "unsafe"
              },
              "type" : "identifier",
              "value" : {
                "go-type" : 18,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "Pointer"
              }
            },
            "go-type" : 18,
            "kind" : "expression",
            "target" : {
              "go-type" : 3,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "rsa",
                "variable" : 3
              }
            },
            "type" : "cast"
          },
          "type" : "cast"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 1003,
      "code" : "pp := (*RawSockaddrRFCOMM)(unsafe.Pointer(rsa))",
      "entry" : false,
      "use-vars" : [ 3 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 101 ],
      "in-vars" : [ 96 ],
      "exit" : false,
      "out-vars" : [ 100 ],
      "decl-vars" : [ 100 ],
      "line-start" : 1004,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "sa"
          }
        } ],
        "right" : [ {
          "go-type" : 107,
          "kind" : "expression",
          "operator" : "&",
          "target" : {
            "declared" : {
              "go-type" : 108,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 108,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "SockaddrRFCOMM"
              }
            },
            "go-type" : 108,
            "kind" : "literal",
            "type" : "composite",
            "values" : [ {
              "go-type" : -1,
              "key" : {
                "go-type" : -1,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "Channel",
                  "variable" : 95
                }
              },
              "kind" : "expression",
              "type" : "key-value",
              "value" : {
                "field" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "Channel",
                  "variable" : 97
                },
                "go-type" : 37,
                "kind" : "expression",
                "target" : {
                  "go-type" : 104,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "pp",
                    "variable" : 96
                  }
                },
                "type" : "selector"
              }
            }, {
              "go-type" : -1,
              "key" : {
                "go-type" : -1,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "Addr",
                  "variable" : 98
                }
              },
              "kind" : "expression",
              "type" : "key-value",
              "value" : {
                "field" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "Bdaddr",
                  "variable" : 99
                },
                "go-type" : 99,
                "kind" : "expression",
                "target" : {
                  "go-type" : 104,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "pp",
                    "variable" : 96
                  }
                },
                "type" : "selector"
              }
            } ]
          },
          "type" : "unary"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 1007,
      "code" : "sa := &SockaddrRFCOMM{\n\tChannel: pp.Channel,\n\tAddr:    pp.Bdaddr,\n}",
      "entry" : false,
      "use-vars" : [ 96 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 100 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 1008,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 107,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "sa",
            "variable" : 100
          }
        }, {
          "go-type" : 32,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Nil",
            "kind" : "ident",
            "value" : "nil"
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 1008,
      "code" : "return sa, nil",
      "entry" : false,
      "use-vars" : [ 100 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 103 ],
      "in-vars" : [ 3 ],
      "exit" : false,
      "out-vars" : [ 3 ],
      "decl-vars" : [ ],
      "line-start" : 1010,
      "ast" : {
        "expressions" : [ {
          "go-type" : 8,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "44"
          }
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 1018,
      "code" : "case AF_XDP:\n\tpp := (*RawSockaddrXDP)(unsafe.Pointer(rsa))\n\tsa := &SockaddrXDP{\n\t\tFlags:        pp.Flags,\n\t\tIfindex:      pp.Ifindex,\n\t\tQueueID:      pp.Queue_id,\n\t\tSharedUmemFD: pp.Shared_umem_fd,\n\t}\n\treturn sa, nil",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 104 ],
      "in-vars" : [ 3 ],
      "exit" : false,
      "out-vars" : [ 102 ],
      "decl-vars" : [ 102 ],
      "line-start" : 1011,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "pp"
          }
        } ],
        "right" : [ {
          "coerced-to" : {
            "contained" : {
              "go-type" : 111,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 111,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "RawSockaddrXDP"
              }
            },
            "go-type" : 110,
            "kind" : "type",
            "type" : "pointer"
          },
          "go-type" : 110,
          "kind" : "expression",
          "target" : {
            "coerced-to" : {
              "go-type" : 18,
              "kind" : "type",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 1,
                "value" : "unsafe"
              },
              "type" : "identifier",
              "value" : {
                "go-type" : 18,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "Pointer"
              }
            },
            "go-type" : 18,
            "kind" : "expression",
            "target" : {
              "go-type" : 3,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "rsa",
                "variable" : 3
              }
            },
            "type" : "cast"
          },
          "type" : "cast"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 1011,
      "code" : "pp := (*RawSockaddrXDP)(unsafe.Pointer(rsa))",
      "entry" : false,
      "use-vars" : [ 3 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 105 ],
      "in-vars" : [ 102 ],
      "exit" : false,
      "out-vars" : [ 110 ],
      "decl-vars" : [ 110 ],
      "line-start" : 1012,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "sa"
          }
        } ],
        "right" : [ {
          "go-type" : 113,
          "kind" : "expression",
          "operator" : "&",
          "target" : {
            "declared" : {
              "go-type" : 114,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 114,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "SockaddrXDP"
              }
            },
            "go-type" : 114,
            "kind" : "literal",
            "type" : "composite",
            "values" : [ {
              "go-type" : -1,
              "key" : {
                "go-type" : -1,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "Flags",
                  "variable" : 101
                }
              },
              "kind" : "expression",
              "type" : "key-value",
              "value" : {
                "field" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "Flags",
                  "variable" : 103
                },
                "go-type" : 8,
                "kind" : "expression",
                "target" : {
                  "go-type" : 110,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "pp",
                    "variable" : 102
                  }
                },
                "type" : "selector"
              }
            }, {
              "go-type" : -1,
              "key" : {
                "go-type" : -1,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "Ifindex",
                  "variable" : 104
                }
              },
              "kind" : "expression",
              "type" : "key-value",
              "value" : {
                "field" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "Ifindex",
                  "variable" : 105
                },
                "go-type" : 20,
                "kind" : "expression",
                "target" : {
                  "go-type" : 110,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "pp",
                    "variable" : 102
                  }
                },
                "type" : "selector"
              }
            }, {
              "go-type" : -1,
              "key" : {
                "go-type" : -1,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "QueueID",
                  "variable" : 106
                }
              },
              "kind" : "expression",
              "type" : "key-value",
              "value" : {
                "field" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "Queue_id",
                  "variable" : 107
                },
                "go-type" : 20,
                "kind" : "expression",
                "target" : {
                  "go-type" : 110,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "pp",
                    "variable" : 102
                  }
                },
                "type" : "selector"
              }
            }, {
              "go-type" : -1,
              "key" : {
                "go-type" : -1,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "SharedUmemFD",
                  "variable" : 108
                }
              },
              "kind" : "expression",
              "type" : "key-value",
              "value" : {
                "field" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "Shared_umem_fd",
                  "variable" : 109
                },
                "go-type" : 20,
                "kind" : "expression",
                "target" : {
                  "go-type" : 110,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "pp",
                    "variable" : 102
                  }
                },
                "type" : "selector"
              }
            } ]
          },
          "type" : "unary"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 1017,
      "code" : "sa := &SockaddrXDP{\n\tFlags:        pp.Flags,\n\tIfindex:      pp.Ifindex,\n\tQueueID:      pp.Queue_id,\n\tSharedUmemFD: pp.Shared_umem_fd,\n}",
      "entry" : false,
      "use-vars" : [ 102 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 110 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 1018,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 113,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "sa",
            "variable" : 110
          }
        }, {
          "go-type" : 32,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Nil",
            "kind" : "ident",
            "value" : "nil"
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 1018,
      "code" : "return sa, nil",
      "entry" : false,
      "use-vars" : [ 110 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 107 ],
      "in-vars" : [ 3 ],
      "exit" : false,
      "out-vars" : [ 3 ],
      "decl-vars" : [ ],
      "line-start" : 1019,
      "ast" : {
        "expressions" : [ {
          "go-type" : 8,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "24"
          }
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 1034,
      "code" : "case AF_PPPOX:\n\tpp := (*RawSockaddrPPPoX)(unsafe.Pointer(rsa))\n\tif binary.BigEndian.Uint32(pp[2:6]) != px_proto_oe {\n\t\treturn nil, EINVAL\n\t}\n\tsa := &SockaddrPPPoE{\n\t\tSID:    binary.BigEndian.Uint16(pp[6:8]),\n\t\tRemote: pp[8:14],\n\t}\n\tfor i := 14; i < 14+IFNAMSIZ; i++ {\n\t\tif pp[i] == 0 {\n\t\t\tsa.Dev = string(pp[14:i])\n\t\t\tbreak\n\t\t}\n\t}\n\treturn sa, nil",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 108 ],
      "in-vars" : [ 3 ],
      "exit" : false,
      "out-vars" : [ 112 ],
      "decl-vars" : [ 112 ],
      "line-start" : 1020,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "pp"
          }
        } ],
        "right" : [ {
          "coerced-to" : {
            "contained" : {
              "go-type" : 117,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 117,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "RawSockaddrPPPoX"
              }
            },
            "go-type" : 116,
            "kind" : "type",
            "type" : "pointer"
          },
          "go-type" : 116,
          "kind" : "expression",
          "target" : {
            "coerced-to" : {
              "go-type" : 18,
              "kind" : "type",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 1,
                "value" : "unsafe"
              },
              "type" : "identifier",
              "value" : {
                "go-type" : 18,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "Pointer"
              }
            },
            "go-type" : 18,
            "kind" : "expression",
            "target" : {
              "go-type" : 3,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "rsa",
                "variable" : 3
              }
            },
            "type" : "cast"
          },
          "type" : "cast"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 1020,
      "code" : "pp := (*RawSockaddrPPPoX)(unsafe.Pointer(rsa))",
      "entry" : false,
      "use-vars" : [ 3 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 109, 110 ],
      "in-vars" : [ 112 ],
      "exit" : false,
      "out-vars" : [ 112 ],
      "decl-vars" : [ ],
      "line-start" : 1021,
      "ast" : {
        "condition" : {
          "go-type" : 44,
          "kind" : "expression",
          "left" : {
            "arguments" : [ {
              "go-type" : 52,
              "type" : "slice",
              "three" : false,
              "high" : {
                "go-type" : 2,
                "kind" : "constant",
                "value" : {
                  "type" : "INT",
                  "value" : "6"
                }
              },
              "max" : null,
              "kind" : "expression",
              "low" : {
                "go-type" : 2,
                "kind" : "constant",
                "value" : {
                  "type" : "INT",
                  "value" : "2"
                }
              },
              "target" : {
                "go-type" : 116,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "pp",
                  "variable" : 112
                }
              }
            } ],
            "ellipsis" : false,
            "function" : {
              "field" : {
                "function" : 2,
                "ident-kind" : "Func",
                "kind" : "ident",
                "value" : "Uint32"
              },
              "go-type" : 119,
              "kind" : "expression",
              "target" : {
                "go-type" : 122,
                "kind" : "expression",
                "qualifier" : {
                  "ident-kind" : "PkgName",
                  "kind" : "ident",
                  "package" : 2,
                  "value" : "binary"
                },
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "BigEndian",
                  "variable" : 111
                }
              },
              "type" : "selector"
            },
            "go-type" : 20,
            "kind" : "expression",
            "type" : "call"
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 20,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 1023,
      "code" : "if binary.BigEndian.Uint32(pp[2:6]) != px_proto_oe {\n\treturn nil, EINVAL\n}",
      "entry" : false,
      "use-vars" : [ 112 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 1022,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 32,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Nil",
            "kind" : "ident",
            "value" : "nil"
          }
        }, {
          "go-type" : 124,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "22"
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 1022,
      "code" : "return nil, EINVAL",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 112 ],
      "in-vars" : [ 112 ],
      "exit" : false,
      "out-vars" : [ 116, 112 ],
      "decl-vars" : [ 116 ],
      "line-start" : 1024,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "sa"
          }
        } ],
        "right" : [ {
          "go-type" : 126,
          "kind" : "expression",
          "operator" : "&",
          "target" : {
            "declared" : {
              "go-type" : 127,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 127,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "SockaddrPPPoE"
              }
            },
            "go-type" : 127,
            "kind" : "literal",
            "type" : "composite",
            "values" : [ {
              "go-type" : -1,
              "key" : {
                "go-type" : -1,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "SID",
                  "variable" : 113
                }
              },
              "kind" : "expression",
              "type" : "key-value",
              "value" : {
                "arguments" : [ {
                  "go-type" : 52,
                  "type" : "slice",
                  "three" : false,
                  "high" : {
                    "go-type" : 2,
                    "kind" : "constant",
                    "value" : {
                      "type" : "INT",
                      "value" : "8"
                    }
                  },
                  "max" : null,
                  "kind" : "expression",
                  "low" : {
                    "go-type" : 2,
                    "kind" : "constant",
                    "value" : {
                      "type" : "INT",
                      "value" : "6"
                    }
                  },
                  "target" : {
                    "go-type" : 116,
                    "kind" : "expression",
                    "type" : "identifier",
                    "value" : {
                      "ident-kind" : "Var",
                      "kind" : "ident",
                      "value" : "pp",
                      "variable" : 112
                    }
                  }
                } ],
                "ellipsis" : false,
                "function" : {
                  "field" : {
                    "function" : 3,
                    "ident-kind" : "Func",
                    "kind" : "ident",
                    "value" : "Uint16"
                  },
                  "go-type" : 129,
                  "kind" : "expression",
                  "target" : {
                    "go-type" : 122,
                    "kind" : "expression",
                    "qualifier" : {
                      "ident-kind" : "PkgName",
                      "kind" : "ident",
                      "package" : 2,
                      "value" : "binary"
                    },
                    "type" : "identifier",
                    "value" : {
                      "ident-kind" : "Var",
                      "kind" : "ident",
                      "value" : "BigEndian",
                      "variable" : 111
                    }
                  },
                  "type" : "selector"
                },
                "go-type" : 8,
                "kind" : "expression",
                "type" : "call"
              }
            }, {
              "go-type" : -1,
              "key" : {
                "go-type" : -1,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "Remote",
                  "variable" : 114
                }
              },
              "kind" : "expression",
              "type" : "key-value",
              "value" : {
                "go-type" : 52,
                "type" : "slice",
                "three" : false,
                "high" : {
                  "go-type" : 2,
                  "kind" : "constant",
                  "value" : {
                    "type" : "INT",
                    "value" : "14"
                  }
                },
                "max" : null,
                "kind" : "expression",
                "low" : {
                  "go-type" : 2,
                  "kind" : "constant",
                  "value" : {
                    "type" : "INT",
                    "value" : "8"
                  }
                },
                "target" : {
                  "go-type" : 116,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "pp",
                    "variable" : 112
                  }
                }
              }
            } ]
          },
          "type" : "unary"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 1027,
      "code" : "sa := &SockaddrPPPoE{\n\tSID:    binary.BigEndian.Uint16(pp[6:8]),\n\tRemote: pp[8:14],\n}",
      "entry" : false,
      "use-vars" : [ 112 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 114, 117 ],
      "in-vars" : [ 116, 112, 115 ],
      "exit" : false,
      "out-vars" : [ 116, 112, 115 ],
      "decl-vars" : [ ],
      "line-start" : 1028,
      "ast" : {
        "condition" : {
          "go-type" : 44,
          "kind" : "expression",
          "left" : {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "i",
              "variable" : 115
            }
          },
          "operator" : "<",
          "right" : {
            "go-type" : 2,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "30"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "for"
      },
      "assign-vars" : [ ],
      "line-end" : 1033,
      "code" : "for i := 14; i < 14+IFNAMSIZ; i++ {\n\tif pp[i] == 0 {\n\t\tsa.Dev = string(pp[14:i])\n\t\tbreak\n\t}\n}",
      "entry" : false,
      "use-vars" : [ 115 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 111 ],
      "in-vars" : [ 116, 112 ],
      "exit" : false,
      "out-vars" : [ 116, 112, 115 ],
      "decl-vars" : [ 115 ],
      "line-start" : 1028,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "i"
          }
        } ],
        "right" : [ {
          "go-type" : 2,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "14"
          }
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 1028,
      "code" : "i := 14",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ 115 ],
      "successors" : [ 111 ],
      "in-vars" : [ 116, 112, 115 ],
      "exit" : false,
      "out-vars" : [ 116, 112, 115 ],
      "decl-vars" : [ ],
      "line-start" : 1028,
      "ast" : {
        "kind" : "statement",
        "operation" : "++",
        "target" : {
          "go-type" : 2,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "i",
            "variable" : 115
          }
        },
        "type" : "crement"
      },
      "assign-vars" : [ 115 ],
      "line-end" : 1028,
      "code" : "i++",
      "entry" : false,
      "use-vars" : [ 115 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 113, 115 ],
      "in-vars" : [ 116, 112, 115 ],
      "exit" : false,
      "out-vars" : [ 116, 112, 115 ],
      "decl-vars" : [ ],
      "line-start" : 1029,
      "ast" : {
        "condition" : {
          "go-type" : 44,
          "kind" : "expression",
          "left" : {
            "go-type" : 43,
            "index" : {
              "go-type" : 2,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "i",
                "variable" : 115
              }
            },
            "kind" : "expression",
            "target" : {
              "go-type" : 116,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "pp",
                "variable" : 112
              }
            },
            "type" : "index"
          },
          "operator" : "==",
          "right" : {
            "go-type" : 43,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 1032,
      "code" : "if pp[i] == 0 {\n\tsa.Dev = string(pp[14:i])\n\tbreak\n}",
      "entry" : false,
      "use-vars" : [ 112, 115 ]
    }, {
      "update-vars" : [ 116 ],
      "successors" : [ 116 ],
      "in-vars" : [ 116, 112, 115 ],
      "exit" : false,
      "out-vars" : [ 116 ],
      "decl-vars" : [ ],
      "line-start" : 1030,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "Dev",
            "variable" : 117
          },
          "go-type" : 25,
          "kind" : "expression",
          "target" : {
            "go-type" : 126,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "sa",
              "variable" : 116
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "coerced-to" : {
            "go-type" : 25,
            "kind" : "type",
            "type" : "identifier",
            "value" : {
              "go-type" : 25,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "string"
            }
          },
          "go-type" : 25,
          "kind" : "expression",
          "target" : {
            "go-type" : 52,
            "type" : "slice",
            "three" : false,
            "high" : {
              "go-type" : 2,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "i",
                "variable" : 115
              }
            },
            "max" : null,
            "kind" : "expression",
            "low" : {
              "go-type" : 2,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "14"
              }
            },
            "target" : {
              "go-type" : 116,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "pp",
                "variable" : 112
              }
            }
          },
          "type" : "cast"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 1030,
      "code" : "sa.Dev = string(pp[14:i])",
      "entry" : false,
      "use-vars" : [ 112, 115, 116 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 117 ],
      "in-vars" : [ 116 ],
      "exit" : false,
      "out-vars" : [ 116 ],
      "decl-vars" : [ ],
      "line-start" : 1031,
      "ast" : {
        "kind" : "statement",
        "label" : null,
        "type" : "break"
      },
      "assign-vars" : [ ],
      "line-end" : 1031,
      "code" : "break",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 116 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 1034,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 126,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "sa",
            "variable" : 116
          }
        }, {
          "go-type" : 32,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Nil",
            "kind" : "ident",
            "value" : "nil"
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 1034,
      "code" : "return sa, nil",
      "entry" : false,
      "use-vars" : [ 116 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 119 ],
      "in-vars" : [ 3 ],
      "exit" : false,
      "out-vars" : [ 3 ],
      "decl-vars" : [ ],
      "line-start" : 1035,
      "ast" : {
        "expressions" : [ {
          "go-type" : 8,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "30"
          }
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 1055,
      "code" : "case AF_TIPC:\n\tpp := (*RawSockaddrTIPC)(unsafe.Pointer(rsa))\n\n\tsa := &SockaddrTIPC{\n\t\tScope: int(pp.Scope),\n\t}\n\n\tswitch pp.Addrtype {\n\tcase TIPC_SERVICE_RANGE:\n\t\tsa.Addr = (*TIPCServiceRange)(unsafe.Pointer(&pp.Addr))\n\tcase TIPC_SERVICE_ADDR:\n\t\tsa.Addr = (*TIPCServiceName)(unsafe.Pointer(&pp.Addr))\n\tcase TIPC_SOCKET_ADDR:\n\t\tsa.Addr = (*TIPCSocketAddr)(unsafe.Pointer(&pp.Addr))\n\tdefault:\n\t\treturn nil, EINVAL\n\t}\n\n\treturn sa, nil",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 120 ],
      "in-vars" : [ 3 ],
      "exit" : false,
      "out-vars" : [ 121 ],
      "decl-vars" : [ 121 ],
      "line-start" : 1036,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "pp"
          }
        } ],
        "right" : [ {
          "coerced-to" : {
            "contained" : {
              "go-type" : 132,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 132,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "RawSockaddrTIPC"
              }
            },
            "go-type" : 131,
            "kind" : "type",
            "type" : "pointer"
          },
          "go-type" : 131,
          "kind" : "expression",
          "target" : {
            "coerced-to" : {
              "go-type" : 18,
              "kind" : "type",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 1,
                "value" : "unsafe"
              },
              "type" : "identifier",
              "value" : {
                "go-type" : 18,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "Pointer"
              }
            },
            "go-type" : 18,
            "kind" : "expression",
            "target" : {
              "go-type" : 3,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "rsa",
                "variable" : 3
              }
            },
            "type" : "cast"
          },
          "type" : "cast"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 1036,
      "code" : "pp := (*RawSockaddrTIPC)(unsafe.Pointer(rsa))",
      "entry" : false,
      "use-vars" : [ 3 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 121 ],
      "in-vars" : [ 121 ],
      "exit" : false,
      "out-vars" : [ 124, 121 ],
      "decl-vars" : [ 124 ],
      "line-start" : 1038,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "sa"
          }
        } ],
        "right" : [ {
          "go-type" : 135,
          "kind" : "expression",
          "operator" : "&",
          "target" : {
            "declared" : {
              "go-type" : 136,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 136,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "SockaddrTIPC"
              }
            },
            "go-type" : 136,
            "kind" : "literal",
            "type" : "composite",
            "values" : [ {
              "go-type" : -1,
              "key" : {
                "go-type" : -1,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "Scope",
                  "variable" : 120
                }
              },
              "kind" : "expression",
              "type" : "key-value",
              "value" : {
                "coerced-to" : {
                  "go-type" : 2,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 2,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "int"
                  }
                },
                "go-type" : 2,
                "kind" : "expression",
                "target" : {
                  "field" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "Scope",
                    "variable" : 122
                  },
                  "go-type" : 10,
                  "kind" : "expression",
                  "target" : {
                    "go-type" : 131,
                    "kind" : "expression",
                    "type" : "identifier",
                    "value" : {
                      "ident-kind" : "Var",
                      "kind" : "ident",
                      "value" : "pp",
                      "variable" : 121
                    }
                  },
                  "type" : "selector"
                },
                "type" : "cast"
              }
            } ]
          },
          "type" : "unary"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 1040,
      "code" : "sa := &SockaddrTIPC{\n\tScope: int(pp.Scope),\n}",
      "entry" : false,
      "use-vars" : [ 121 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 122, 124, 126, 128 ],
      "in-vars" : [ 124, 121 ],
      "exit" : false,
      "out-vars" : [ 124, 121 ],
      "decl-vars" : [ ],
      "line-start" : 1044,
      "ast" : {
        "condition" : {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "Addrtype",
            "variable" : 123
          },
          "go-type" : 37,
          "kind" : "expression",
          "target" : {
            "go-type" : 131,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "pp",
              "variable" : 121
            }
          },
          "type" : "selector"
        },
        "kind" : "statement",
        "type" : "switch"
      },
      "assign-vars" : [ ],
      "line-end" : 1053,
      "code" : "switch pp.Addrtype {\ncase TIPC_SERVICE_RANGE:\n\tsa.Addr = (*TIPCServiceRange)(unsafe.Pointer(&pp.Addr))\ncase TIPC_SERVICE_ADDR:\n\tsa.Addr = (*TIPCServiceName)(unsafe.Pointer(&pp.Addr))\ncase TIPC_SOCKET_ADDR:\n\tsa.Addr = (*TIPCSocketAddr)(unsafe.Pointer(&pp.Addr))\ndefault:\n\treturn nil, EINVAL\n}",
      "entry" : false,
      "use-vars" : [ 121 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 123 ],
      "in-vars" : [ 124, 121 ],
      "exit" : false,
      "out-vars" : [ 124, 121 ],
      "decl-vars" : [ ],
      "line-start" : 1045,
      "ast" : {
        "expressions" : [ {
          "go-type" : 37,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "1"
          }
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 1046,
      "code" : "case TIPC_SERVICE_RANGE:\n\tsa.Addr = (*TIPCServiceRange)(unsafe.Pointer(&pp.Addr))",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ 124 ],
      "successors" : [ 130 ],
      "in-vars" : [ 124, 121 ],
      "exit" : false,
      "out-vars" : [ 124 ],
      "decl-vars" : [ ],
      "line-start" : 1046,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "Addr",
            "variable" : 125
          },
          "go-type" : 138,
          "kind" : "expression",
          "target" : {
            "go-type" : 135,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "sa",
              "variable" : 124
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "coerced-to" : {
            "contained" : {
              "go-type" : 145,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 145,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "TIPCServiceRange"
              }
            },
            "go-type" : 144,
            "kind" : "type",
            "type" : "pointer"
          },
          "go-type" : 144,
          "kind" : "expression",
          "target" : {
            "coerced-to" : {
              "go-type" : 18,
              "kind" : "type",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 1,
                "value" : "unsafe"
              },
              "type" : "identifier",
              "value" : {
                "go-type" : 18,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "Pointer"
              }
            },
            "go-type" : 18,
            "kind" : "expression",
            "target" : {
              "go-type" : 147,
              "kind" : "expression",
              "operator" : "&",
              "target" : {
                "field" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "Addr",
                  "variable" : 126
                },
                "go-type" : 134,
                "kind" : "expression",
                "target" : {
                  "go-type" : 131,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "pp",
                    "variable" : 121
                  }
                },
                "type" : "selector"
              },
              "type" : "unary"
            },
            "type" : "cast"
          },
          "type" : "cast"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 1046,
      "code" : "sa.Addr = (*TIPCServiceRange)(unsafe.Pointer(&pp.Addr))",
      "entry" : false,
      "use-vars" : [ 121, 124 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 125 ],
      "in-vars" : [ 121, 124 ],
      "exit" : false,
      "out-vars" : [ 124, 121 ],
      "decl-vars" : [ ],
      "line-start" : 1047,
      "ast" : {
        "expressions" : [ {
          "go-type" : 37,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "2"
          }
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 1048,
      "code" : "case TIPC_SERVICE_ADDR:\n\tsa.Addr = (*TIPCServiceName)(unsafe.Pointer(&pp.Addr))",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ 124 ],
      "successors" : [ 130 ],
      "in-vars" : [ 121, 124 ],
      "exit" : false,
      "out-vars" : [ 124 ],
      "decl-vars" : [ ],
      "line-start" : 1048,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "Addr",
            "variable" : 125
          },
          "go-type" : 138,
          "kind" : "expression",
          "target" : {
            "go-type" : 135,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "sa",
              "variable" : 124
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "coerced-to" : {
            "contained" : {
              "go-type" : 149,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 149,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "TIPCServiceName"
              }
            },
            "go-type" : 148,
            "kind" : "type",
            "type" : "pointer"
          },
          "go-type" : 148,
          "kind" : "expression",
          "target" : {
            "coerced-to" : {
              "go-type" : 18,
              "kind" : "type",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 1,
                "value" : "unsafe"
              },
              "type" : "identifier",
              "value" : {
                "go-type" : 18,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "Pointer"
              }
            },
            "go-type" : 18,
            "kind" : "expression",
            "target" : {
              "go-type" : 147,
              "kind" : "expression",
              "operator" : "&",
              "target" : {
                "field" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "Addr",
                  "variable" : 126
                },
                "go-type" : 134,
                "kind" : "expression",
                "target" : {
                  "go-type" : 131,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "pp",
                    "variable" : 121
                  }
                },
                "type" : "selector"
              },
              "type" : "unary"
            },
            "type" : "cast"
          },
          "type" : "cast"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 1048,
      "code" : "sa.Addr = (*TIPCServiceName)(unsafe.Pointer(&pp.Addr))",
      "entry" : false,
      "use-vars" : [ 121, 124 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 127 ],
      "in-vars" : [ 124, 121 ],
      "exit" : false,
      "out-vars" : [ 124, 121 ],
      "decl-vars" : [ ],
      "line-start" : 1049,
      "ast" : {
        "expressions" : [ {
          "go-type" : 37,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "3"
          }
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 1050,
      "code" : "case TIPC_SOCKET_ADDR:\n\tsa.Addr = (*TIPCSocketAddr)(unsafe.Pointer(&pp.Addr))",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ 124 ],
      "successors" : [ 130 ],
      "in-vars" : [ 124, 121 ],
      "exit" : false,
      "out-vars" : [ 124 ],
      "decl-vars" : [ ],
      "line-start" : 1050,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "Addr",
            "variable" : 125
          },
          "go-type" : 138,
          "kind" : "expression",
          "target" : {
            "go-type" : 135,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "sa",
              "variable" : 124
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "coerced-to" : {
            "contained" : {
              "go-type" : 152,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 152,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "TIPCSocketAddr"
              }
            },
            "go-type" : 151,
            "kind" : "type",
            "type" : "pointer"
          },
          "go-type" : 151,
          "kind" : "expression",
          "target" : {
            "coerced-to" : {
              "go-type" : 18,
              "kind" : "type",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 1,
                "value" : "unsafe"
              },
              "type" : "identifier",
              "value" : {
                "go-type" : 18,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "Pointer"
              }
            },
            "go-type" : 18,
            "kind" : "expression",
            "target" : {
              "go-type" : 147,
              "kind" : "expression",
              "operator" : "&",
              "target" : {
                "field" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "Addr",
                  "variable" : 126
                },
                "go-type" : 134,
                "kind" : "expression",
                "target" : {
                  "go-type" : 131,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "pp",
                    "variable" : 121
                  }
                },
                "type" : "selector"
              },
              "type" : "unary"
            },
            "type" : "cast"
          },
          "type" : "cast"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 1050,
      "code" : "sa.Addr = (*TIPCSocketAddr)(unsafe.Pointer(&pp.Addr))",
      "entry" : false,
      "use-vars" : [ 124, 121 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 129 ],
      "in-vars" : [ ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 1051,
      "ast" : {
        "expressions" : [ ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 1052,
      "code" : "default:\n\treturn nil, EINVAL",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 1052,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 32,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Nil",
            "kind" : "ident",
            "value" : "nil"
          }
        }, {
          "go-type" : 124,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "22"
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 1052,
      "code" : "return nil, EINVAL",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 124 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 1055,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 135,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "sa",
            "variable" : 124
          }
        }, {
          "go-type" : 32,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Nil",
            "kind" : "ident",
            "value" : "nil"
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 1055,
      "code" : "return sa, nil",
      "entry" : false,
      "use-vars" : [ 124 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 1057,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 32,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Nil",
            "kind" : "ident",
            "value" : "nil"
          }
        }, {
          "go-type" : 124,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "97"
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 1057,
      "code" : "return nil, EAFNOSUPPORT",
      "entry" : false,
      "use-vars" : [ ]
    } ],
    "code" : "func anyToSockaddr(fd int, rsa *RawSockaddrAny) (Sockaddr, error) {\n\tswitch rsa.Addr.Family {\n\tcase AF_NETLINK:\n\t\tpp := (*RawSockaddrNetlink)(unsafe.Pointer(rsa))\n\t\tsa := new(SockaddrNetlink)\n\t\tsa.Family = pp.Family\n\t\tsa.Pad = pp.Pad\n\t\tsa.Pid = pp.Pid\n\t\tsa.Groups = pp.Groups\n\t\treturn sa, nil\n\n\tcase AF_PACKET:\n\t\tpp := (*RawSockaddrLinklayer)(unsafe.Pointer(rsa))\n\t\tsa := new(SockaddrLinklayer)\n\t\tsa.Protocol = pp.Protocol\n\t\tsa.Ifindex = int(pp.Ifindex)\n\t\tsa.Hatype = pp.Hatype\n\t\tsa.Pkttype = pp.Pkttype\n\t\tsa.Halen = pp.Halen\n\t\tfor i := 0; i < len(sa.Addr); i++ {\n\t\t\tsa.Addr[i] = pp.Addr[i]\n\t\t}\n\t\treturn sa, nil\n\n\tcase AF_UNIX:\n\t\tpp := (*RawSockaddrUnix)(unsafe.Pointer(rsa))\n\t\tsa := new(SockaddrUnix)\n\t\tif pp.Path[0] == 0 {\n\n\t\t\tpp.Path[0] = '@'\n\t\t}\n\n\t\tn := 0\n\t\tfor n < len(pp.Path) && pp.Path[n] != 0 {\n\t\t\tn++\n\t\t}\n\t\tbytes := (*[len(pp.Path)]byte)(unsafe.Pointer(&pp.Path[0]))[0:n]\n\t\tsa.Name = string(bytes)\n\t\treturn sa, nil\n\n\tcase AF_INET:\n\t\tproto, err := GetsockoptInt(fd, SOL_SOCKET, SO_PROTOCOL)\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\n\t\tswitch proto {\n\t\tcase IPPROTO_L2TP:\n\t\t\tpp := (*RawSockaddrL2TPIP)(unsafe.Pointer(rsa))\n\t\t\tsa := new(SockaddrL2TPIP)\n\t\t\tsa.ConnId = pp.Conn_id\n\t\t\tfor i := 0; i < len(sa.Addr); i++ {\n\t\t\t\tsa.Addr[i] = pp.Addr[i]\n\t\t\t}\n\t\t\treturn sa, nil\n\t\tdefault:\n\t\t\tpp := (*RawSockaddrInet4)(unsafe.Pointer(rsa))\n\t\t\tsa := new(SockaddrInet4)\n\t\t\tp := (*[2]byte)(unsafe.Pointer(&pp.Port))\n\t\t\tsa.Port = int(p[0])<<8 + int(p[1])\n\t\t\tfor i := 0; i < len(sa.Addr); i++ {\n\t\t\t\tsa.Addr[i] = pp.Addr[i]\n\t\t\t}\n\t\t\treturn sa, nil\n\t\t}\n\n\tcase AF_INET6:\n\t\tproto, err := GetsockoptInt(fd, SOL_SOCKET, SO_PROTOCOL)\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\n\t\tswitch proto {\n\t\tcase IPPROTO_L2TP:\n\t\t\tpp := (*RawSockaddrL2TPIP6)(unsafe.Pointer(rsa))\n\t\t\tsa := new(SockaddrL2TPIP6)\n\t\t\tsa.ConnId = pp.Conn_id\n\t\t\tsa.ZoneId = pp.Scope_id\n\t\t\tfor i := 0; i < len(sa.Addr); i++ {\n\t\t\t\tsa.Addr[i] = pp.Addr[i]\n\t\t\t}\n\t\t\treturn sa, nil\n\t\tdefault:\n\t\t\tpp := (*RawSockaddrInet6)(unsafe.Pointer(rsa))\n\t\t\tsa := new(SockaddrInet6)\n\t\t\tp := (*[2]byte)(unsafe.Pointer(&pp.Port))\n\t\t\tsa.Port = int(p[0])<<8 + int(p[1])\n\t\t\tsa.ZoneId = pp.Scope_id\n\t\t\tfor i := 0; i < len(sa.Addr); i++ {\n\t\t\t\tsa.Addr[i] = pp.Addr[i]\n\t\t\t}\n\t\t\treturn sa, nil\n\t\t}\n\n\tcase AF_VSOCK:\n\t\tpp := (*RawSockaddrVM)(unsafe.Pointer(rsa))\n\t\tsa := &SockaddrVM{\n\t\t\tCID:  pp.Cid,\n\t\t\tPort: pp.Port,\n\t\t}\n\t\treturn sa, nil\n\tcase AF_BLUETOOTH:\n\t\tproto, err := GetsockoptInt(fd, SOL_SOCKET, SO_PROTOCOL)\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\n\t\tswitch proto {\n\t\tcase BTPROTO_L2CAP:\n\t\t\tpp := (*RawSockaddrL2)(unsafe.Pointer(rsa))\n\t\t\tsa := &SockaddrL2{\n\t\t\t\tPSM:      pp.Psm,\n\t\t\t\tCID:      pp.Cid,\n\t\t\t\tAddr:     pp.Bdaddr,\n\t\t\t\tAddrType: pp.Bdaddr_type,\n\t\t\t}\n\t\t\treturn sa, nil\n\t\tcase BTPROTO_RFCOMM:\n\t\t\tpp := (*RawSockaddrRFCOMM)(unsafe.Pointer(rsa))\n\t\t\tsa := &SockaddrRFCOMM{\n\t\t\t\tChannel: pp.Channel,\n\t\t\t\tAddr:    pp.Bdaddr,\n\t\t\t}\n\t\t\treturn sa, nil\n\t\t}\n\tcase AF_XDP:\n\t\tpp := (*RawSockaddrXDP)(unsafe.Pointer(rsa))\n\t\tsa := &SockaddrXDP{\n\t\t\tFlags:        pp.Flags,\n\t\t\tIfindex:      pp.Ifindex,\n\t\t\tQueueID:      pp.Queue_id,\n\t\t\tSharedUmemFD: pp.Shared_umem_fd,\n\t\t}\n\t\treturn sa, nil\n\tcase AF_PPPOX:\n\t\tpp := (*RawSockaddrPPPoX)(unsafe.Pointer(rsa))\n\t\tif binary.BigEndian.Uint32(pp[2:6]) != px_proto_oe {\n\t\t\treturn nil, EINVAL\n\t\t}\n\t\tsa := &SockaddrPPPoE{\n\t\t\tSID:    binary.BigEndian.Uint16(pp[6:8]),\n\t\t\tRemote: pp[8:14],\n\t\t}\n\t\tfor i := 14; i < 14+IFNAMSIZ; i++ {\n\t\t\tif pp[i] == 0 {\n\t\t\t\tsa.Dev = string(pp[14:i])\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\t\treturn sa, nil\n\tcase AF_TIPC:\n\t\tpp := (*RawSockaddrTIPC)(unsafe.Pointer(rsa))\n\n\t\tsa := &SockaddrTIPC{\n\t\t\tScope: int(pp.Scope),\n\t\t}\n\n\t\tswitch pp.Addrtype {\n\t\tcase TIPC_SERVICE_RANGE:\n\t\t\tsa.Addr = (*TIPCServiceRange)(unsafe.Pointer(&pp.Addr))\n\t\tcase TIPC_SERVICE_ADDR:\n\t\t\tsa.Addr = (*TIPCServiceName)(unsafe.Pointer(&pp.Addr))\n\t\tcase TIPC_SOCKET_ADDR:\n\t\t\tsa.Addr = (*TIPCSocketAddr)(unsafe.Pointer(&pp.Addr))\n\t\tdefault:\n\t\t\treturn nil, EINVAL\n\t\t}\n\n\t\treturn sa, nil\n\t}\n\treturn nil, EAFNOSUPPORT\n}",
    "defines" : [ 0 ],
    "functions" : [ {
      "name" : "anyToSockaddr",
      "package" : 0,
      "type" : 0,
      "exported" : false
    }, {
      "name" : "GetsockoptInt",
      "package" : 0,
      "type" : 57,
      "exported" : true
    }, {
      "name" : "Uint32",
      "package" : 2,
      "type" : 119,
      "exported" : true
    }, {
      "name" : "Uint16",
      "package" : 2,
      "type" : 129,
      "exported" : true
    } ],
    "line-end" : 1058,
    "line-start" : 876,
    "names" : [ "anyToSockaddr" ],
    "package" : 0,
    "packages" : [ {
      "name" : "unix",
      "path" : "golang.org/x/sys/unix"
    }, {
      "name" : "unsafe",
      "path" : "unsafe"
    }, {
      "name" : "binary",
      "path" : "encoding/binary"
    }, {
      "name" : "syscall",
      "path" : "syscall"
    } ],
    "params" : [ 2, 3 ],
    "receivers" : [ ],
    "results" : [ 4, 5 ],
    "type" : "function",
    "types" : [ {
      "name" : "func(fd int, rsa *golang.org/x/sys/unix.RawSockaddrAny) (golang.org/x/sys/unix.Sockaddr, error)",
      "params" : 1,
      "recv" : -1,
      "results" : 12,
      "type" : "Signature",
      "underlying" : 0,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "fd",
        "type" : 2
      }, {
        "name" : "rsa",
        "type" : 3
      } ],
      "name" : "(fd int, rsa *golang.org/x/sys/unix.RawSockaddrAny)",
      "type" : "Tuple",
      "underlying" : 1
    }, {
      "name" : "int",
      "type" : "Basic",
      "underlying" : 2
    }, {
      "elem" : 4,
      "name" : "*golang.org/x/sys/unix.RawSockaddrAny",
      "type" : "Pointer",
      "underlying" : 3
    }, {
      "local-name" : "RawSockaddrAny",
      "name" : "golang.org/x/sys/unix.RawSockaddrAny",
      "package" : 0,
      "type" : "Named",
      "underlying" : 5
    }, {
      "fields" : [ {
        "name" : "Addr",
        "type" : 6
      }, {
        "name" : "Pad",
        "type" : 11
      } ],
      "name" : "struct{Addr golang.org/x/sys/unix.RawSockaddr; Pad [96]int8}",
      "type" : "Struct",
      "underlying" : 5
    }, {
      "local-name" : "RawSockaddr",
      "name" : "golang.org/x/sys/unix.RawSockaddr",
      "package" : 0,
      "type" : "Named",
      "underlying" : 7
    }, {
      "fields" : [ {
        "name" : "Family",
        "type" : 8
      }, {
        "name" : "Data",
        "type" : 9
      } ],
      "name" : "struct{Family uint16; Data [14]int8}",
      "type" : "Struct",
      "underlying" : 7
    }, {
      "name" : "uint16",
      "type" : "Basic",
      "underlying" : 8
    }, {
      "elem" : 10,
      "name" : "[14]int8",
      "type" : "Array",
      "underlying" : 9
    }, {
      "name" : "int8",
      "type" : "Basic",
      "underlying" : 10
    }, {
      "elem" : 10,
      "name" : "[96]int8",
      "type" : "Array",
      "underlying" : 11
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 13
      }, {
        "name" : "",
        "type" : 21
      } ],
      "name" : "(golang.org/x/sys/unix.Sockaddr, error)",
      "type" : "Tuple",
      "underlying" : 12
    }, {
      "local-name" : "Sockaddr",
      "name" : "golang.org/x/sys/unix.Sockaddr",
      "package" : 0,
      "type" : "Named",
      "underlying" : 14
    }, {
      "methods" : [ {
        "name" : "sockaddr",
        "type" : 15
      } ],
      "name" : "interface{sockaddr() (ptr unsafe.Pointer, len golang.org/x/sys/unix._Socklen, err error)}",
      "type" : "Interface",
      "underlying" : 14
    }, {
      "name" : "func() (ptr unsafe.Pointer, len golang.org/x/sys/unix._Socklen, err error)",
      "params" : 16,
      "recv" : 1,
      "results" : 17,
      "type" : "Signature",
      "underlying" : 15,
      "variadic" : false
    }, {
      "fields" : [ ],
      "name" : "()",
      "type" : "Tuple",
      "underlying" : 16
    }, {
      "fields" : [ {
        "name" : "ptr",
        "type" : 18
      }, {
        "name" : "len",
        "type" : 19
      }, {
        "name" : "err",
        "type" : 21
      } ],
      "name" : "(ptr unsafe.Pointer, len golang.org/x/sys/unix._Socklen, err error)",
      "type" : "Tuple",
      "underlying" : 17
    }, {
      "local-name" : "Pointer",
      "name" : "unsafe.Pointer",
      "package" : 1,
      "type" : "Basic",
      "underlying" : 18
    }, {
      "local-name" : "_Socklen",
      "name" : "golang.org/x/sys/unix._Socklen",
      "package" : 0,
      "type" : "Named",
      "underlying" : 20
    }, {
      "name" : "uint32",
      "type" : "Basic",
      "underlying" : 20
    }, {
      "local-name" : "error",
      "name" : "error",
      "package" : -1,
      "type" : "Named",
      "underlying" : 22
    }, {
      "methods" : [ {
        "name" : "Error",
        "type" : 23
      } ],
      "name" : "interface{Error() string}",
      "type" : "Interface",
      "underlying" : 22
    }, {
      "name" : "func() string",
      "params" : 16,
      "recv" : 0,
      "results" : 24,
      "type" : "Signature",
      "underlying" : 23,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 25
      } ],
      "name" : "(string)",
      "type" : "Tuple",
      "underlying" : 24
    }, {
      "name" : "string",
      "type" : "Basic",
      "underlying" : 25
    }, {
      "elem" : 27,
      "name" : "*golang.org/x/sys/unix.RawSockaddrNetlink",
      "type" : "Pointer",
      "underlying" : 26
    }, {
      "local-name" : "RawSockaddrNetlink",
      "name" : "golang.org/x/sys/unix.RawSockaddrNetlink",
      "package" : 0,
      "type" : "Named",
      "underlying" : 28
    }, {
      "fields" : [ {
        "name" : "Family",
        "type" : 8
      }, {
        "name" : "Pad",
        "type" : 8
      }, {
        "name" : "Pid",
        "type" : 20
      }, {
        "name" : "Groups",
        "type" : 20
      } ],
      "name" : "struct{Family uint16; Pad uint16; Pid uint32; Groups uint32}",
      "type" : "Struct",
      "underlying" : 28
    }, {
      "elem" : 30,
      "name" : "*golang.org/x/sys/unix.SockaddrNetlink",
      "type" : "Pointer",
      "underlying" : 29
    }, {
      "local-name" : "SockaddrNetlink",
      "name" : "golang.org/x/sys/unix.SockaddrNetlink",
      "package" : 0,
      "type" : "Named",
      "underlying" : 31
    }, {
      "fields" : [ {
        "name" : "Family",
        "type" : 8
      }, {
        "name" : "Pad",
        "type" : 8
      }, {
        "name" : "Pid",
        "type" : 20
      }, {
        "name" : "Groups",
        "type" : 20
      }, {
        "name" : "raw",
        "type" : 27
      } ],
      "name" : "struct{Family uint16; Pad uint16; Pid uint32; Groups uint32; raw golang.org/x/sys/unix.RawSockaddrNetlink}",
      "type" : "Struct",
      "underlying" : 31
    }, {
      "name" : "untyped nil",
      "type" : "Basic",
      "underlying" : 32
    }, {
      "elem" : 34,
      "name" : "*golang.org/x/sys/unix.RawSockaddrLinklayer",
      "type" : "Pointer",
      "underlying" : 33
    }, {
      "local-name" : "RawSockaddrLinklayer",
      "name" : "golang.org/x/sys/unix.RawSockaddrLinklayer",
      "package" : 0,
      "type" : "Named",
      "underlying" : 35
    }, {
      "fields" : [ {
        "name" : "Family",
        "type" : 8
      }, {
        "name" : "Protocol",
        "type" : 8
      }, {
        "name" : "Ifindex",
        "type" : 36
      }, {
        "name" : "Hatype",
        "type" : 8
      }, {
        "name" : "Pkttype",
        "type" : 37
      }, {
        "name" : "Halen",
        "type" : 37
      }, {
        "name" : "Addr",
        "type" : 38
      } ],
      "name" : "struct{Family uint16; Protocol uint16; Ifindex int32; Hatype uint16; Pkttype uint8; Halen uint8; Addr [8]uint8}",
      "type" : "Struct",
      "underlying" : 35
    }, {
      "name" : "int32",
      "type" : "Basic",
      "underlying" : 36
    }, {
      "name" : "uint8",
      "type" : "Basic",
      "underlying" : 37
    }, {
      "elem" : 37,
      "name" : "[8]uint8",
      "type" : "Array",
      "underlying" : 38
    }, {
      "elem" : 40,
      "name" : "*golang.org/x/sys/unix.SockaddrLinklayer",
      "type" : "Pointer",
      "underlying" : 39
    }, {
      "local-name" : "SockaddrLinklayer",
      "name" : "golang.org/x/sys/unix.SockaddrLinklayer",
      "package" : 0,
      "type" : "Named",
      "underlying" : 41
    }, {
      "fields" : [ {
        "name" : "Protocol",
        "type" : 8
      }, {
        "name" : "Ifindex",
        "type" : 2
      }, {
        "name" : "Hatype",
        "type" : 8
      }, {
        "name" : "Pkttype",
        "type" : 37
      }, {
        "name" : "Halen",
        "type" : 37
      }, {
        "name" : "Addr",
        "type" : 42
      }, {
        "name" : "raw",
        "type" : 34
      } ],
      "name" : "struct{Protocol uint16; Ifindex int; Hatype uint16; Pkttype uint8; Halen uint8; Addr [8]byte; raw golang.org/x/sys/unix.RawSockaddrLinklayer}",
      "type" : "Struct",
      "underlying" : 41
    }, {
      "elem" : 43,
      "name" : "[8]byte",
      "type" : "Array",
      "underlying" : 42
    }, {
      "name" : "byte",
      "type" : "Basic",
      "underlying" : 43
    }, {
      "name" : "untyped bool",
      "type" : "Basic",
      "underlying" : 44
    }, {
      "elem" : 46,
      "name" : "*golang.org/x/sys/unix.RawSockaddrUnix",
      "type" : "Pointer",
      "underlying" : 45
    }, {
      "local-name" : "RawSockaddrUnix",
      "name" : "golang.org/x/sys/unix.RawSockaddrUnix",
      "package" : 0,
      "type" : "Named",
      "underlying" : 47
    }, {
      "fields" : [ {
        "name" : "Family",
        "type" : 8
      }, {
        "name" : "Path",
        "type" : 48
      } ],
      "name" : "struct{Family uint16; Path [108]int8}",
      "type" : "Struct",
      "underlying" : 47
    }, {
      "elem" : 10,
      "name" : "[108]int8",
      "type" : "Array",
      "underlying" : 48
    }, {
      "elem" : 50,
      "name" : "*golang.org/x/sys/unix.SockaddrUnix",
      "type" : "Pointer",
      "underlying" : 49
    }, {
      "local-name" : "SockaddrUnix",
      "name" : "golang.org/x/sys/unix.SockaddrUnix",
      "package" : 0,
      "type" : "Named",
      "underlying" : 51
    }, {
      "fields" : [ {
        "name" : "Name",
        "type" : 25
      }, {
        "name" : "raw",
        "type" : 46
      } ],
      "name" : "struct{Name string; raw golang.org/x/sys/unix.RawSockaddrUnix}",
      "type" : "Struct",
      "underlying" : 51
    }, {
      "elem" : 43,
      "name" : "[]byte",
      "type" : "Slice",
      "underlying" : 52
    }, {
      "elem" : 54,
      "name" : "*[108]byte",
      "type" : "Pointer",
      "underlying" : 53
    }, {
      "elem" : 43,
      "name" : "[108]byte",
      "type" : "Array",
      "underlying" : 54
    }, {
      "elem" : 10,
      "name" : "*int8",
      "type" : "Pointer",
      "underlying" : 55
    }, {
      "fields" : [ {
        "name" : "value",
        "type" : 2
      }, {
        "name" : "err",
        "type" : 21
      } ],
      "name" : "(value int, err error)",
      "type" : "Tuple",
      "underlying" : 56
    }, {
      "name" : "func(fd int, level int, opt int) (value int, err error)",
      "params" : 58,
      "recv" : -1,
      "results" : 56,
      "type" : "Signature",
      "underlying" : 57,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "fd",
        "type" : 2
      }, {
        "name" : "level",
        "type" : 2
      }, {
        "name" : "opt",
        "type" : 2
      } ],
      "name" : "(fd int, level int, opt int)",
      "type" : "Tuple",
      "underlying" : 58
    }, {
      "elem" : 60,
      "name" : "*golang.org/x/sys/unix.RawSockaddrL2TPIP",
      "type" : "Pointer",
      "underlying" : 59
    }, {
      "local-name" : "RawSockaddrL2TPIP",
      "name" : "golang.org/x/sys/unix.RawSockaddrL2TPIP",
      "package" : 0,
      "type" : "Named",
      "underlying" : 61
    }, {
      "fields" : [ {
        "name" : "Family",
        "type" : 8
      }, {
        "name" : "Unused",
        "type" : 8
      }, {
        "name" : "Addr",
        "type" : 62
      }, {
        "name" : "Conn_id",
        "type" : 20
      }, {
        "name" : "_",
        "type" : 63
      } ],
      "name" : "struct{Family uint16; Unused uint16; Addr [4]byte; Conn_id uint32; _ [4]uint8}",
      "type" : "Struct",
      "underlying" : 61
    }, {
      "elem" : 43,
      "name" : "[4]byte",
      "type" : "Array",
      "underlying" : 62
    }, {
      "elem" : 37,
      "name" : "[4]uint8",
      "type" : "Array",
      "underlying" : 63
    }, {
      "elem" : 65,
      "name" : "*golang.org/x/sys/unix.SockaddrL2TPIP",
      "type" : "Pointer",
      "underlying" : 64
    }, {
      "local-name" : "SockaddrL2TPIP",
      "name" : "golang.org/x/sys/unix.SockaddrL2TPIP",
      "package" : 0,
      "type" : "Named",
      "underlying" : 66
    }, {
      "fields" : [ {
        "name" : "Addr",
        "type" : 62
      }, {
        "name" : "ConnId",
        "type" : 20
      }, {
        "name" : "raw",
        "type" : 60
      } ],
      "name" : "struct{Addr [4]byte; ConnId uint32; raw golang.org/x/sys/unix.RawSockaddrL2TPIP}",
      "type" : "Struct",
      "underlying" : 66
    }, {
      "elem" : 68,
      "name" : "*golang.org/x/sys/unix.RawSockaddrInet4",
      "type" : "Pointer",
      "underlying" : 67
    }, {
      "local-name" : "RawSockaddrInet4",
      "name" : "golang.org/x/sys/unix.RawSockaddrInet4",
      "package" : 0,
      "type" : "Named",
      "underlying" : 69
    }, {
      "fields" : [ {
        "name" : "Family",
        "type" : 8
      }, {
        "name" : "Port",
        "type" : 8
      }, {
        "name" : "Addr",
        "type" : 62
      }, {
        "name" : "Zero",
        "type" : 38
      } ],
      "name" : "struct{Family uint16; Port uint16; Addr [4]byte; Zero [8]uint8}",
      "type" : "Struct",
      "underlying" : 69
    }, {
      "elem" : 71,
      "name" : "*golang.org/x/sys/unix.SockaddrInet4",
      "type" : "Pointer",
      "underlying" : 70
    }, {
      "local-name" : "SockaddrInet4",
      "name" : "golang.org/x/sys/unix.SockaddrInet4",
      "package" : 0,
      "type" : "Named",
      "underlying" : 72
    }, {
      "fields" : [ {
        "name" : "Port",
        "type" : 2
      }, {
        "name" : "Addr",
        "type" : 62
      }, {
        "name" : "raw",
        "type" : 68
      } ],
      "name" : "struct{Port int; Addr [4]byte; raw golang.org/x/sys/unix.RawSockaddrInet4}",
      "type" : "Struct",
      "underlying" : 72
    }, {
      "elem" : 74,
      "name" : "*[2]byte",
      "type" : "Pointer",
      "underlying" : 73
    }, {
      "elem" : 43,
      "name" : "[2]byte",
      "type" : "Array",
      "underlying" : 74
    }, {
      "name" : "untyped int",
      "type" : "Basic",
      "underlying" : 75
    }, {
      "elem" : 8,
      "name" : "*uint16",
      "type" : "Pointer",
      "underlying" : 76
    }, {
      "elem" : 78,
      "name" : "*golang.org/x/sys/unix.RawSockaddrL2TPIP6",
      "type" : "Pointer",
      "underlying" : 77
    }, {
      "local-name" : "RawSockaddrL2TPIP6",
      "name" : "golang.org/x/sys/unix.RawSockaddrL2TPIP6",
      "package" : 0,
      "type" : "Named",
      "underlying" : 79
    }, {
      "fields" : [ {
        "name" : "Family",
        "type" : 8
      }, {
        "name" : "Unused",
        "type" : 8
      }, {
        "name" : "Flowinfo",
        "type" : 20
      }, {
        "name" : "Addr",
        "type" : 80
      }, {
        "name" : "Scope_id",
        "type" : 20
      }, {
        "name" : "Conn_id",
        "type" : 20
      } ],
      "name" : "struct{Family uint16; Unused uint16; Flowinfo uint32; Addr [16]byte; Scope_id uint32; Conn_id uint32}",
      "type" : "Struct",
      "underlying" : 79
    }, {
      "elem" : 43,
      "name" : "[16]byte",
      "type" : "Array",
      "underlying" : 80
    }, {
      "elem" : 82,
      "name" : "*golang.org/x/sys/unix.SockaddrL2TPIP6",
      "type" : "Pointer",
      "underlying" : 81
    }, {
      "local-name" : "SockaddrL2TPIP6",
      "name" : "golang.org/x/sys/unix.SockaddrL2TPIP6",
      "package" : 0,
      "type" : "Named",
      "underlying" : 83
    }, {
      "fields" : [ {
        "name" : "Addr",
        "type" : 80
      }, {
        "name" : "ZoneId",
        "type" : 20
      }, {
        "name" : "ConnId",
        "type" : 20
      }, {
        "name" : "raw",
        "type" : 78
      } ],
      "name" : "struct{Addr [16]byte; ZoneId uint32; ConnId uint32; raw golang.org/x/sys/unix.RawSockaddrL2TPIP6}",
      "type" : "Struct",
      "underlying" : 83
    }, {
      "elem" : 85,
      "name" : "*golang.org/x/sys/unix.RawSockaddrInet6",
      "type" : "Pointer",
      "underlying" : 84
    }, {
      "local-name" : "RawSockaddrInet6",
      "name" : "golang.org/x/sys/unix.RawSockaddrInet6",
      "package" : 0,
      "type" : "Named",
      "underlying" : 86
    }, {
      "fields" : [ {
        "name" : "Family",
        "type" : 8
      }, {
        "name" : "Port",
        "type" : 8
      }, {
        "name" : "Flowinfo",
        "type" : 20
      }, {
        "name" : "Addr",
        "type" : 80
      }, {
        "name" : "Scope_id",
        "type" : 20
      } ],
      "name" : "struct{Family uint16; Port uint16; Flowinfo uint32; Addr [16]byte; Scope_id uint32}",
      "type" : "Struct",
      "underlying" : 86
    }, {
      "elem" : 88,
      "name" : "*golang.org/x/sys/unix.SockaddrInet6",
      "type" : "Pointer",
      "underlying" : 87
    }, {
      "local-name" : "SockaddrInet6",
      "name" : "golang.org/x/sys/unix.SockaddrInet6",
      "package" : 0,
      "type" : "Named",
      "underlying" : 89
    }, {
      "fields" : [ {
        "name" : "Port",
        "type" : 2
      }, {
        "name" : "ZoneId",
        "type" : 20
      }, {
        "name" : "Addr",
        "type" : 80
      }, {
        "name" : "raw",
        "type" : 85
      } ],
      "name" : "struct{Port int; ZoneId uint32; Addr [16]byte; raw golang.org/x/sys/unix.RawSockaddrInet6}",
      "type" : "Struct",
      "underlying" : 89
    }, {
      "elem" : 91,
      "name" : "*golang.org/x/sys/unix.RawSockaddrVM",
      "type" : "Pointer",
      "underlying" : 90
    }, {
      "local-name" : "RawSockaddrVM",
      "name" : "golang.org/x/sys/unix.RawSockaddrVM",
      "package" : 0,
      "type" : "Named",
      "underlying" : 92
    }, {
      "fields" : [ {
        "name" : "Family",
        "type" : 8
      }, {
        "name" : "Reserved1",
        "type" : 8
      }, {
        "name" : "Port",
        "type" : 20
      }, {
        "name" : "Cid",
        "type" : 20
      }, {
        "name" : "Zero",
        "type" : 63
      } ],
      "name" : "struct{Family uint16; Reserved1 uint16; Port uint32; Cid uint32; Zero [4]uint8}",
      "type" : "Struct",
      "underlying" : 92
    }, {
      "elem" : 94,
      "name" : "*golang.org/x/sys/unix.SockaddrVM",
      "type" : "Pointer",
      "underlying" : 93
    }, {
      "local-name" : "SockaddrVM",
      "name" : "golang.org/x/sys/unix.SockaddrVM",
      "package" : 0,
      "type" : "Named",
      "underlying" : 95
    }, {
      "fields" : [ {
        "name" : "CID",
        "type" : 20
      }, {
        "name" : "Port",
        "type" : 20
      }, {
        "name" : "raw",
        "type" : 91
      } ],
      "name" : "struct{CID uint32; Port uint32; raw golang.org/x/sys/unix.RawSockaddrVM}",
      "type" : "Struct",
      "underlying" : 95
    }, {
      "elem" : 97,
      "name" : "*golang.org/x/sys/unix.RawSockaddrL2",
      "type" : "Pointer",
      "underlying" : 96
    }, {
      "local-name" : "RawSockaddrL2",
      "name" : "golang.org/x/sys/unix.RawSockaddrL2",
      "package" : 0,
      "type" : "Named",
      "underlying" : 98
    }, {
      "fields" : [ {
        "name" : "Family",
        "type" : 8
      }, {
        "name" : "Psm",
        "type" : 8
      }, {
        "name" : "Bdaddr",
        "type" : 99
      }, {
        "name" : "Cid",
        "type" : 8
      }, {
        "name" : "Bdaddr_type",
        "type" : 37
      }, {
        "name" : "_",
        "type" : 100
      } ],
      "name" : "struct{Family uint16; Psm uint16; Bdaddr [6]uint8; Cid uint16; Bdaddr_type uint8; _ [1]byte}",
      "type" : "Struct",
      "underlying" : 98
    }, {
      "elem" : 37,
      "name" : "[6]uint8",
      "type" : "Array",
      "underlying" : 99
    }, {
      "elem" : 43,
      "name" : "[1]byte",
      "type" : "Array",
      "underlying" : 100
    }, {
      "elem" : 102,
      "name" : "*golang.org/x/sys/unix.SockaddrL2",
      "type" : "Pointer",
      "underlying" : 101
    }, {
      "local-name" : "SockaddrL2",
      "name" : "golang.org/x/sys/unix.SockaddrL2",
      "package" : 0,
      "type" : "Named",
      "underlying" : 103
    }, {
      "fields" : [ {
        "name" : "PSM",
        "type" : 8
      }, {
        "name" : "CID",
        "type" : 8
      }, {
        "name" : "Addr",
        "type" : 99
      }, {
        "name" : "AddrType",
        "type" : 37
      }, {
        "name" : "raw",
        "type" : 97
      } ],
      "name" : "struct{PSM uint16; CID uint16; Addr [6]uint8; AddrType uint8; raw golang.org/x/sys/unix.RawSockaddrL2}",
      "type" : "Struct",
      "underlying" : 103
    }, {
      "elem" : 105,
      "name" : "*golang.org/x/sys/unix.RawSockaddrRFCOMM",
      "type" : "Pointer",
      "underlying" : 104
    }, {
      "local-name" : "RawSockaddrRFCOMM",
      "name" : "golang.org/x/sys/unix.RawSockaddrRFCOMM",
      "package" : 0,
      "type" : "Named",
      "underlying" : 106
    }, {
      "fields" : [ {
        "name" : "Family",
        "type" : 8
      }, {
        "name" : "Bdaddr",
        "type" : 99
      }, {
        "name" : "Channel",
        "type" : 37
      }, {
        "name" : "_",
        "type" : 100
      } ],
      "name" : "struct{Family uint16; Bdaddr [6]uint8; Channel uint8; _ [1]byte}",
      "type" : "Struct",
      "underlying" : 106
    }, {
      "elem" : 108,
      "name" : "*golang.org/x/sys/unix.SockaddrRFCOMM",
      "type" : "Pointer",
      "underlying" : 107
    }, {
      "local-name" : "SockaddrRFCOMM",
      "name" : "golang.org/x/sys/unix.SockaddrRFCOMM",
      "package" : 0,
      "type" : "Named",
      "underlying" : 109
    }, {
      "fields" : [ {
        "name" : "Addr",
        "type" : 99
      }, {
        "name" : "Channel",
        "type" : 37
      }, {
        "name" : "raw",
        "type" : 105
      } ],
      "name" : "struct{Addr [6]uint8; Channel uint8; raw golang.org/x/sys/unix.RawSockaddrRFCOMM}",
      "type" : "Struct",
      "underlying" : 109
    }, {
      "elem" : 111,
      "name" : "*golang.org/x/sys/unix.RawSockaddrXDP",
      "type" : "Pointer",
      "underlying" : 110
    }, {
      "local-name" : "RawSockaddrXDP",
      "name" : "golang.org/x/sys/unix.RawSockaddrXDP",
      "package" : 0,
      "type" : "Named",
      "underlying" : 112
    }, {
      "fields" : [ {
        "name" : "Family",
        "type" : 8
      }, {
        "name" : "Flags",
        "type" : 8
      }, {
        "name" : "Ifindex",
        "type" : 20
      }, {
        "name" : "Queue_id",
        "type" : 20
      }, {
        "name" : "Shared_umem_fd",
        "type" : 20
      } ],
      "name" : "struct{Family uint16; Flags uint16; Ifindex uint32; Queue_id uint32; Shared_umem_fd uint32}",
      "type" : "Struct",
      "underlying" : 112
    }, {
      "elem" : 114,
      "name" : "*golang.org/x/sys/unix.SockaddrXDP",
      "type" : "Pointer",
      "underlying" : 113
    }, {
      "local-name" : "SockaddrXDP",
      "name" : "golang.org/x/sys/unix.SockaddrXDP",
      "package" : 0,
      "type" : "Named",
      "underlying" : 115
    }, {
      "fields" : [ {
        "name" : "Flags",
        "type" : 8
      }, {
        "name" : "Ifindex",
        "type" : 20
      }, {
        "name" : "QueueID",
        "type" : 20
      }, {
        "name" : "SharedUmemFD",
        "type" : 20
      }, {
        "name" : "raw",
        "type" : 111
      } ],
      "name" : "struct{Flags uint16; Ifindex uint32; QueueID uint32; SharedUmemFD uint32; raw golang.org/x/sys/unix.RawSockaddrXDP}",
      "type" : "Struct",
      "underlying" : 115
    }, {
      "elem" : 117,
      "name" : "*golang.org/x/sys/unix.RawSockaddrPPPoX",
      "type" : "Pointer",
      "underlying" : 116
    }, {
      "local-name" : "RawSockaddrPPPoX",
      "name" : "golang.org/x/sys/unix.RawSockaddrPPPoX",
      "package" : 0,
      "type" : "Named",
      "underlying" : 118
    }, {
      "elem" : 43,
      "name" : "[30]byte",
      "type" : "Array",
      "underlying" : 118
    }, {
      "name" : "func(b []byte) uint32",
      "params" : 120,
      "recv" : -1,
      "results" : 121,
      "type" : "Signature",
      "underlying" : 119,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "b",
        "type" : 52
      } ],
      "name" : "(b []byte)",
      "type" : "Tuple",
      "underlying" : 120
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 20
      } ],
      "name" : "(uint32)",
      "type" : "Tuple",
      "underlying" : 121
    }, {
      "local-name" : "bigEndian",
      "name" : "encoding/binary.bigEndian",
      "package" : 2,
      "type" : "Named",
      "underlying" : 123
    }, {
      "fields" : [ ],
      "name" : "struct{}",
      "type" : "Struct",
      "underlying" : 123
    }, {
      "local-name" : "Errno",
      "name" : "syscall.Errno",
      "package" : 3,
      "type" : "Named",
      "underlying" : 125
    }, {
      "name" : "uintptr",
      "type" : "Basic",
      "underlying" : 125
    }, {
      "elem" : 127,
      "name" : "*golang.org/x/sys/unix.SockaddrPPPoE",
      "type" : "Pointer",
      "underlying" : 126
    }, {
      "local-name" : "SockaddrPPPoE",
      "name" : "golang.org/x/sys/unix.SockaddrPPPoE",
      "package" : 0,
      "type" : "Named",
      "underlying" : 128
    }, {
      "fields" : [ {
        "name" : "SID",
        "type" : 8
      }, {
        "name" : "Remote",
        "type" : 52
      }, {
        "name" : "Dev",
        "type" : 25
      }, {
        "name" : "raw",
        "type" : 117
      } ],
      "name" : "struct{SID uint16; Remote []byte; Dev string; raw golang.org/x/sys/unix.RawSockaddrPPPoX}",
      "type" : "Struct",
      "underlying" : 128
    }, {
      "name" : "func(b []byte) uint16",
      "params" : 120,
      "recv" : -1,
      "results" : 130,
      "type" : "Signature",
      "underlying" : 129,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 8
      } ],
      "name" : "(uint16)",
      "type" : "Tuple",
      "underlying" : 130
    }, {
      "elem" : 132,
      "name" : "*golang.org/x/sys/unix.RawSockaddrTIPC",
      "type" : "Pointer",
      "underlying" : 131
    }, {
      "local-name" : "RawSockaddrTIPC",
      "name" : "golang.org/x/sys/unix.RawSockaddrTIPC",
      "package" : 0,
      "type" : "Named",
      "underlying" : 133
    }, {
      "fields" : [ {
        "name" : "Family",
        "type" : 8
      }, {
        "name" : "Addrtype",
        "type" : 37
      }, {
        "name" : "Scope",
        "type" : 10
      }, {
        "name" : "Addr",
        "type" : 134
      } ],
      "name" : "struct{Family uint16; Addrtype uint8; Scope int8; Addr [12]byte}",
      "type" : "Struct",
      "underlying" : 133
    }, {
      "elem" : 43,
      "name" : "[12]byte",
      "type" : "Array",
      "underlying" : 134
    }, {
      "elem" : 136,
      "name" : "*golang.org/x/sys/unix.SockaddrTIPC",
      "type" : "Pointer",
      "underlying" : 135
    }, {
      "local-name" : "SockaddrTIPC",
      "name" : "golang.org/x/sys/unix.SockaddrTIPC",
      "package" : 0,
      "type" : "Named",
      "underlying" : 137
    }, {
      "fields" : [ {
        "name" : "Scope",
        "type" : 2
      }, {
        "name" : "Addr",
        "type" : 138
      }, {
        "name" : "raw",
        "type" : 132
      } ],
      "name" : "struct{Scope int; Addr golang.org/x/sys/unix.TIPCAddr; raw golang.org/x/sys/unix.RawSockaddrTIPC}",
      "type" : "Struct",
      "underlying" : 137
    }, {
      "local-name" : "TIPCAddr",
      "name" : "golang.org/x/sys/unix.TIPCAddr",
      "package" : 0,
      "type" : "Named",
      "underlying" : 139
    }, {
      "methods" : [ {
        "name" : "tipcAddr",
        "type" : 140
      }, {
        "name" : "tipcAddrtype",
        "type" : 142
      } ],
      "name" : "interface{tipcAddr() [12]byte; tipcAddrtype() uint8}",
      "type" : "Interface",
      "underlying" : 139
    }, {
      "name" : "func() [12]byte",
      "params" : 16,
      "recv" : 118,
      "results" : 141,
      "type" : "Signature",
      "underlying" : 140,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 134
      } ],
      "name" : "([12]byte)",
      "type" : "Tuple",
      "underlying" : 141
    }, {
      "name" : "func() uint8",
      "params" : 16,
      "recv" : 119,
      "results" : 143,
      "type" : "Signature",
      "underlying" : 142,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 37
      } ],
      "name" : "(uint8)",
      "type" : "Tuple",
      "underlying" : 143
    }, {
      "elem" : 145,
      "name" : "*golang.org/x/sys/unix.TIPCServiceRange",
      "type" : "Pointer",
      "underlying" : 144
    }, {
      "local-name" : "TIPCServiceRange",
      "name" : "golang.org/x/sys/unix.TIPCServiceRange",
      "package" : 0,
      "type" : "Named",
      "underlying" : 146
    }, {
      "fields" : [ {
        "name" : "Type",
        "type" : 20
      }, {
        "name" : "Lower",
        "type" : 20
      }, {
        "name" : "Upper",
        "type" : 20
      } ],
      "name" : "struct{Type uint32; Lower uint32; Upper uint32}",
      "type" : "Struct",
      "underlying" : 146
    }, {
      "elem" : 134,
      "name" : "*[12]byte",
      "type" : "Pointer",
      "underlying" : 147
    }, {
      "elem" : 149,
      "name" : "*golang.org/x/sys/unix.TIPCServiceName",
      "type" : "Pointer",
      "underlying" : 148
    }, {
      "local-name" : "TIPCServiceName",
      "name" : "golang.org/x/sys/unix.TIPCServiceName",
      "package" : 0,
      "type" : "Named",
      "underlying" : 150
    }, {
      "fields" : [ {
        "name" : "Type",
        "type" : 20
      }, {
        "name" : "Instance",
        "type" : 20
      }, {
        "name" : "Domain",
        "type" : 20
      } ],
      "name" : "struct{Type uint32; Instance uint32; Domain uint32}",
      "type" : "Struct",
      "underlying" : 150
    }, {
      "elem" : 152,
      "name" : "*golang.org/x/sys/unix.TIPCSocketAddr",
      "type" : "Pointer",
      "underlying" : 151
    }, {
      "local-name" : "TIPCSocketAddr",
      "name" : "golang.org/x/sys/unix.TIPCSocketAddr",
      "package" : 0,
      "type" : "Named",
      "underlying" : 153
    }, {
      "fields" : [ {
        "name" : "Ref",
        "type" : 20
      }, {
        "name" : "Node",
        "type" : 20
      } ],
      "name" : "struct{Ref uint32; Node uint32}",
      "type" : "Struct",
      "underlying" : 153
    } ],
    "variables" : [ {
      "name" : "",
      "package" : -1,
      "type" : 21,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 0,
      "type" : 13,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "fd",
      "package" : 0,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "rsa",
      "package" : 0,
      "type" : 3,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "[res0]",
      "package" : 0,
      "type" : 13,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "[res1]",
      "package" : 0,
      "type" : 21,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "Addr",
      "package" : 0,
      "type" : 6,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "Family",
      "package" : 0,
      "type" : 8,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "sa",
      "package" : 0,
      "type" : 29,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "Family",
      "package" : 0,
      "type" : 8,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "pp",
      "package" : 0,
      "type" : 26,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "Family",
      "package" : 0,
      "type" : 8,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "Pad",
      "package" : 0,
      "type" : 8,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "Pad",
      "package" : 0,
      "type" : 8,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "Pid",
      "package" : 0,
      "type" : 20,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "Pid",
      "package" : 0,
      "type" : 20,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "Groups",
      "package" : 0,
      "type" : 20,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "Groups",
      "package" : 0,
      "type" : 20,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "sa",
      "package" : 0,
      "type" : 39,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "Protocol",
      "package" : 0,
      "type" : 8,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "pp",
      "package" : 0,
      "type" : 33,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "Protocol",
      "package" : 0,
      "type" : 8,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "Ifindex",
      "package" : 0,
      "type" : 2,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "Ifindex",
      "package" : 0,
      "type" : 36,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "Hatype",
      "package" : 0,
      "type" : 8,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "Hatype",
      "package" : 0,
      "type" : 8,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "Pkttype",
      "package" : 0,
      "type" : 37,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "Pkttype",
      "package" : 0,
      "type" : 37,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "Halen",
      "package" : 0,
      "type" : 37,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "Halen",
      "package" : 0,
      "type" : 37,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "i",
      "package" : 0,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "Addr",
      "package" : 0,
      "type" : 42,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "Addr",
      "package" : 0,
      "type" : 38,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "pp",
      "package" : 0,
      "type" : 45,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "Path",
      "package" : 0,
      "type" : 48,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "n",
      "package" : 0,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "sa",
      "package" : 0,
      "type" : 49,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "Name",
      "package" : 0,
      "type" : 25,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "bytes",
      "package" : 0,
      "type" : 52,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "err",
      "package" : 0,
      "type" : 21,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "proto",
      "package" : 0,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "sa",
      "package" : 0,
      "type" : 64,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "ConnId",
      "package" : 0,
      "type" : 20,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "pp",
      "package" : 0,
      "type" : 59,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "Conn_id",
      "package" : 0,
      "type" : 20,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "i",
      "package" : 0,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "Addr",
      "package" : 0,
      "type" : 62,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "Addr",
      "package" : 0,
      "type" : 62,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "pp",
      "package" : 0,
      "type" : 67,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "Port",
      "package" : 0,
      "type" : 8,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "sa",
      "package" : 0,
      "type" : 70,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "Port",
      "package" : 0,
      "type" : 2,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "p",
      "package" : 0,
      "type" : 73,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "i",
      "package" : 0,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "Addr",
      "package" : 0,
      "type" : 62,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "Addr",
      "package" : 0,
      "type" : 62,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "err",
      "package" : 0,
      "type" : 21,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "proto",
      "package" : 0,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "sa",
      "package" : 0,
      "type" : 81,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "ConnId",
      "package" : 0,
      "type" : 20,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "pp",
      "package" : 0,
      "type" : 77,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "Conn_id",
      "package" : 0,
      "type" : 20,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "ZoneId",
      "package" : 0,
      "type" : 20,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "Scope_id",
      "package" : 0,
      "type" : 20,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "i",
      "package" : 0,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "Addr",
      "package" : 0,
      "type" : 80,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "Addr",
      "package" : 0,
      "type" : 80,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "pp",
      "package" : 0,
      "type" : 84,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "Port",
      "package" : 0,
      "type" : 8,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "sa",
      "package" : 0,
      "type" : 87,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "Port",
      "package" : 0,
      "type" : 2,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "p",
      "package" : 0,
      "type" : 73,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "ZoneId",
      "package" : 0,
      "type" : 20,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "Scope_id",
      "package" : 0,
      "type" : 20,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "i",
      "package" : 0,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "Addr",
      "package" : 0,
      "type" : 80,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "Addr",
      "package" : 0,
      "type" : 80,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "CID",
      "package" : 0,
      "type" : 20,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "pp",
      "package" : 0,
      "type" : 90,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "Cid",
      "package" : 0,
      "type" : 20,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "Port",
      "package" : 0,
      "type" : 20,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "Port",
      "package" : 0,
      "type" : 20,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "sa",
      "package" : 0,
      "type" : 93,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "err",
      "package" : 0,
      "type" : 21,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "proto",
      "package" : 0,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "PSM",
      "package" : 0,
      "type" : 8,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "pp",
      "package" : 0,
      "type" : 96,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "Psm",
      "package" : 0,
      "type" : 8,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "CID",
      "package" : 0,
      "type" : 8,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "Cid",
      "package" : 0,
      "type" : 8,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "Addr",
      "package" : 0,
      "type" : 99,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "Bdaddr",
      "package" : 0,
      "type" : 99,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "AddrType",
      "package" : 0,
      "type" : 37,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "Bdaddr_type",
      "package" : 0,
      "type" : 37,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "sa",
      "package" : 0,
      "type" : 101,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "Channel",
      "package" : 0,
      "type" : 37,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "pp",
      "package" : 0,
      "type" : 104,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "Channel",
      "package" : 0,
      "type" : 37,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "Addr",
      "package" : 0,
      "type" : 99,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "Bdaddr",
      "package" : 0,
      "type" : 99,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "sa",
      "package" : 0,
      "type" : 107,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "Flags",
      "package" : 0,
      "type" : 8,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "pp",
      "package" : 0,
      "type" : 110,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "Flags",
      "package" : 0,
      "type" : 8,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "Ifindex",
      "package" : 0,
      "type" : 20,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "Ifindex",
      "package" : 0,
      "type" : 20,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "QueueID",
      "package" : 0,
      "type" : 20,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "Queue_id",
      "package" : 0,
      "type" : 20,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "SharedUmemFD",
      "package" : 0,
      "type" : 20,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "Shared_umem_fd",
      "package" : 0,
      "type" : 20,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "sa",
      "package" : 0,
      "type" : 113,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "BigEndian",
      "package" : 2,
      "type" : 122,
      "exported" : true,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "pp",
      "package" : 0,
      "type" : 116,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "SID",
      "package" : 0,
      "type" : 8,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "Remote",
      "package" : 0,
      "type" : 52,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "i",
      "package" : 0,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "sa",
      "package" : 0,
      "type" : 126,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "Dev",
      "package" : 0,
      "type" : 25,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "",
      "package" : 0,
      "type" : 138,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 0,
      "type" : 138,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "Scope",
      "package" : 0,
      "type" : 2,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "pp",
      "package" : 0,
      "type" : 131,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "Scope",
      "package" : 0,
      "type" : 10,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "Addrtype",
      "package" : 0,
      "type" : 37,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "sa",
      "package" : 0,
      "type" : 135,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "Addr",
      "package" : 0,
      "type" : 138,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "Addr",
      "package" : 0,
      "type" : 134,
      "exported" : true,
      "embedded" : false,
      "field" : true
    } ]
  },
  "go-version" : "1.14.3"
}