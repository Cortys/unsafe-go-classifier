{
  "usage" : {
    "file" : "alg.go",
    "label1" : "delegate",
    "label2" : "hide-escape",
    "line" : "336",
    "module" : "std",
    "pkg" : "runtime",
    "project" : "kubernetes/kubernetes",
    "snippet" : "return interhash(noescape(unsafe.Pointer(&i)), seed)",
    "version" : "std"
  },
  "cfg" : {
    "blocks" : [ {
      "update-vars" : [ ],
      "successors" : [ 2 ],
      "in-vars" : [ 1, 2 ],
      "exit" : false,
      "out-vars" : [ 2, 1 ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[entry]",
      "entry" : true,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ ],
      "in-vars" : [ ],
      "exit" : true,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[exit]",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 1, 2 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 336,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "arguments" : [ {
            "arguments" : [ {
              "coerced-to" : {
                "go-type" : 9,
                "kind" : "type",
                "qualifier" : {
                  "ident-kind" : "PkgName",
                  "kind" : "ident",
                  "package" : 1,
                  "value" : "unsafe"
                },
                "type" : "identifier",
                "value" : {
                  "go-type" : 9,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "Pointer"
                }
              },
              "go-type" : 9,
              "kind" : "expression",
              "target" : {
                "go-type" : 13,
                "kind" : "expression",
                "operator" : "&",
                "target" : {
                  "go-type" : 2,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "i",
                    "variable" : 1
                  }
                },
                "type" : "unary"
              },
              "type" : "cast"
            } ],
            "ellipsis" : false,
            "function" : {
              "go-type" : 10,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Func",
                "kind" : "ident",
                "value" : "noescape"
              }
            },
            "go-type" : 9,
            "kind" : "expression",
            "type" : "call"
          }, {
            "go-type" : 5,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "seed",
              "variable" : 2
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 7,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "interhash"
            }
          },
          "go-type" : 5,
          "kind" : "expression",
          "type" : "call"
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 336,
      "code" : "return interhash(noescape(unsafe.Pointer(&i)), seed)",
      "entry" : false,
      "use-vars" : [ 2, 1 ]
    } ],
    "code" : "func ifaceHash(i interface {\n\tF()\n}, seed uintptr) uintptr {\n\treturn interhash(noescape(unsafe.Pointer(&i)), seed)\n}",
    "defines" : [ 0 ],
    "functions" : [ {
      "name" : "ifaceHash",
      "package" : 0,
      "type" : 0,
      "exported" : false
    }, {
      "name" : "interhash",
      "package" : 0,
      "type" : 7,
      "exported" : false
    }, {
      "name" : "noescape",
      "package" : 0,
      "type" : 10,
      "exported" : false
    } ],
    "line-end" : 337,
    "line-start" : 333,
    "names" : [ "ifaceHash" ],
    "package" : 0,
    "packages" : [ {
      "name" : "runtime",
      "path" : "runtime"
    }, {
      "name" : "unsafe",
      "path" : "unsafe"
    } ],
    "params" : [ 1, 2 ],
    "receivers" : [ ],
    "results" : [ 3 ],
    "type" : "function",
    "types" : [ {
      "name" : "func(i interface{F()}, seed uintptr) uintptr",
      "params" : 1,
      "recv" : -1,
      "results" : 6,
      "type" : "Signature",
      "underlying" : 0,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "i",
        "type" : 2
      }, {
        "name" : "seed",
        "type" : 5
      } ],
      "name" : "(i interface{F()}, seed uintptr)",
      "type" : "Tuple",
      "underlying" : 1
    }, {
      "methods" : [ {
        "name" : "F",
        "type" : 3
      } ],
      "name" : "interface{F()}",
      "type" : "Interface",
      "underlying" : 2
    }, {
      "name" : "func()",
      "params" : 4,
      "recv" : 0,
      "results" : 4,
      "type" : "Signature",
      "underlying" : 3,
      "variadic" : false
    }, {
      "fields" : [ ],
      "name" : "()",
      "type" : "Tuple",
      "underlying" : 4
    }, {
      "name" : "uintptr",
      "type" : "Basic",
      "underlying" : 5
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 5
      } ],
      "name" : "(uintptr)",
      "type" : "Tuple",
      "underlying" : 6
    }, {
      "name" : "func(p unsafe.Pointer, h uintptr) uintptr",
      "params" : 8,
      "recv" : -1,
      "results" : 6,
      "type" : "Signature",
      "underlying" : 7,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "p",
        "type" : 9
      }, {
        "name" : "h",
        "type" : 5
      } ],
      "name" : "(p unsafe.Pointer, h uintptr)",
      "type" : "Tuple",
      "underlying" : 8
    }, {
      "local-name" : "Pointer",
      "name" : "unsafe.Pointer",
      "package" : 1,
      "type" : "Basic",
      "underlying" : 9
    }, {
      "name" : "func(p unsafe.Pointer) unsafe.Pointer",
      "params" : 11,
      "recv" : -1,
      "results" : 12,
      "type" : "Signature",
      "underlying" : 10,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "p",
        "type" : 9
      } ],
      "name" : "(p unsafe.Pointer)",
      "type" : "Tuple",
      "underlying" : 11
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 9
      } ],
      "name" : "(unsafe.Pointer)",
      "type" : "Tuple",
      "underlying" : 12
    }, {
      "elem" : 2,
      "name" : "*interface{F()}",
      "type" : "Pointer",
      "underlying" : 13
    } ],
    "variables" : [ {
      "name" : "",
      "package" : 0,
      "type" : 2,
      "exported" : false
    }, {
      "name" : "i",
      "package" : 0,
      "type" : 2,
      "exported" : false
    }, {
      "name" : "seed",
      "package" : 0,
      "type" : 5,
      "exported" : false
    }, {
      "name" : "[res0]",
      "package" : 0,
      "type" : 5,
      "exported" : false
    } ]
  },
  "go-version" : "1.14.3"
}