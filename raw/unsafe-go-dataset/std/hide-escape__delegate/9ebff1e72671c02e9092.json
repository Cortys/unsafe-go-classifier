{
  "usage" : {
    "file" : "map_fast32.go",
    "label1" : "delegate",
    "label2" : "hide-escape",
    "line" : "103",
    "module" : "std",
    "pkg" : "runtime",
    "project" : "kubernetes/kubernetes",
    "snippet" : "hash := t.hasher(noescape(unsafe.Pointer(&key)), uintptr(h.hash0))",
    "version" : "std"
  },
  "cfg" : {
    "blocks" : [ {
      "update-vars" : [ ],
      "successors" : [ 2 ],
      "in-vars" : [ 0, 2, 1 ],
      "exit" : false,
      "out-vars" : [ 1, 0, 2 ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[entry]",
      "entry" : true,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ ],
      "in-vars" : [ ],
      "exit" : true,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[exit]",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 3, 4 ],
      "in-vars" : [ 2, 1, 0 ],
      "exit" : false,
      "out-vars" : [ 2, 1, 0 ],
      "decl-vars" : [ ],
      "line-start" : 93,
      "ast" : {
        "condition" : {
          "go-type" : 40,
          "kind" : "expression",
          "left" : {
            "go-type" : 26,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "h",
              "variable" : 1
            }
          },
          "operator" : "==",
          "right" : {
            "go-type" : 41,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Nil",
              "kind" : "ident",
              "value" : "nil"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 95,
      "code" : "if h == nil {\n\tpanic(plainError(\"assignment to entry in nil map\"))\n}",
      "entry" : false,
      "use-vars" : [ 1 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 4 ],
      "in-vars" : [ 1, 0, 2 ],
      "exit" : false,
      "out-vars" : [ 1, 0, 2 ],
      "decl-vars" : [ ],
      "line-start" : 94,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 46,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "assignment to entry in nil map"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 43,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Builtin",
              "kind" : "ident",
              "value" : "panic"
            }
          },
          "go-type" : 42,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 94,
      "code" : "panic(plainError(\"assignment to entry in nil map\"))",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 5, 7 ],
      "in-vars" : [ 1, 0, 2 ],
      "exit" : false,
      "out-vars" : [ 1, 0, 2 ],
      "decl-vars" : [ ],
      "line-start" : 96,
      "ast" : {
        "condition" : {
          "go-type" : 40,
          "kind" : "constant",
          "value" : {
            "type" : "BOOL",
            "value" : "false"
          }
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 99,
      "code" : "if raceenabled {\n\tcallerpc := getcallerpc()\n\tracewritepc(unsafe.Pointer(h), callerpc, funcPC(mapassign_fast32))\n}",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 6 ],
      "in-vars" : [ 0, 2, 1 ],
      "exit" : false,
      "out-vars" : [ 1, 0, 2, 4 ],
      "decl-vars" : [ 4 ],
      "line-start" : 97,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "callerpc"
          }
        } ],
        "right" : [ {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 48,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 1,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "getcallerpc"
            }
          },
          "go-type" : 7,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 97,
      "code" : "callerpc := getcallerpc()",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 7 ],
      "in-vars" : [ 1, 0, 2, 4 ],
      "exit" : false,
      "out-vars" : [ 1, 0, 2 ],
      "decl-vars" : [ ],
      "line-start" : 98,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "coerced-to" : {
              "go-type" : 13,
              "kind" : "type",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 1,
                "value" : "unsafe"
              },
              "type" : "identifier",
              "value" : {
                "go-type" : 13,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "Pointer"
              }
            },
            "go-type" : 13,
            "kind" : "expression",
            "target" : {
              "go-type" : 26,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "h",
                "variable" : 1
              }
            },
            "type" : "cast"
          }, {
            "go-type" : 7,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "callerpc",
              "variable" : 4
            }
          }, {
            "arguments" : [ {
              "go-type" : 0,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "function" : 0,
                "ident-kind" : "Func",
                "kind" : "ident",
                "value" : "mapassign_fast32"
              }
            } ],
            "ellipsis" : false,
            "function" : {
              "go-type" : 51,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "function" : 3,
                "ident-kind" : "Func",
                "kind" : "ident",
                "value" : "funcPC"
              }
            },
            "go-type" : 7,
            "kind" : "expression",
            "type" : "call"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 49,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 2,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "racewritepc"
            }
          },
          "go-type" : 42,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 98,
      "code" : "racewritepc(unsafe.Pointer(h), callerpc, funcPC(mapassign_fast32))",
      "entry" : false,
      "use-vars" : [ 1, 4 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 8, 9 ],
      "in-vars" : [ 1, 0, 2 ],
      "exit" : false,
      "out-vars" : [ 0, 2, 1 ],
      "decl-vars" : [ ],
      "line-start" : 100,
      "ast" : {
        "condition" : {
          "go-type" : 40,
          "kind" : "expression",
          "left" : {
            "go-type" : 10,
            "kind" : "expression",
            "left" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "flags",
                "variable" : 5
              },
              "go-type" : 10,
              "kind" : "expression",
              "target" : {
                "go-type" : 26,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "h",
                  "variable" : 1
                }
              },
              "type" : "selector"
            },
            "operator" : "&",
            "right" : {
              "go-type" : 10,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "4"
              }
            },
            "type" : "binary"
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 10,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 102,
      "code" : "if h.flags&hashWriting != 0 {\n\tthrow(\"concurrent map writes\")\n}",
      "entry" : false,
      "use-vars" : [ 1 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 9 ],
      "in-vars" : [ 1, 0, 2 ],
      "exit" : false,
      "out-vars" : [ 1, 0, 2 ],
      "decl-vars" : [ ],
      "line-start" : 101,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 47,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "concurrent map writes"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 53,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 4,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "throw"
            }
          },
          "go-type" : 42,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 101,
      "code" : "throw(\"concurrent map writes\")",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 10 ],
      "in-vars" : [ 1, 0, 2 ],
      "exit" : false,
      "out-vars" : [ 0, 2, 1, 8 ],
      "decl-vars" : [ 8 ],
      "line-start" : 103,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "hash"
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "arguments" : [ {
              "coerced-to" : {
                "go-type" : 13,
                "kind" : "type",
                "qualifier" : {
                  "ident-kind" : "PkgName",
                  "kind" : "ident",
                  "package" : 1,
                  "value" : "unsafe"
                },
                "type" : "identifier",
                "value" : {
                  "go-type" : 13,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "Pointer"
                }
              },
              "go-type" : 13,
              "kind" : "expression",
              "target" : {
                "go-type" : 57,
                "kind" : "expression",
                "operator" : "&",
                "target" : {
                  "go-type" : 8,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "key",
                    "variable" : 2
                  }
                },
                "type" : "unary"
              },
              "type" : "cast"
            } ],
            "ellipsis" : false,
            "function" : {
              "go-type" : 55,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "function" : 5,
                "ident-kind" : "Func",
                "kind" : "ident",
                "value" : "noescape"
              }
            },
            "go-type" : 13,
            "kind" : "expression",
            "type" : "call"
          }, {
            "coerced-to" : {
              "go-type" : 7,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 7,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "uintptr"
              }
            },
            "go-type" : 7,
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "hash0",
                "variable" : 7
              },
              "go-type" : 8,
              "kind" : "expression",
              "target" : {
                "go-type" : 26,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "h",
                  "variable" : 1
                }
              },
              "type" : "selector"
            },
            "type" : "cast"
          } ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "hasher",
              "variable" : 6
            },
            "go-type" : 22,
            "kind" : "expression",
            "target" : {
              "go-type" : 2,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "t",
                "variable" : 0
              }
            },
            "type" : "selector"
          },
          "go-type" : 7,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 103,
      "code" : "hash := t.hasher(noescape(unsafe.Pointer(&key)), uintptr(h.hash0))",
      "entry" : false,
      "use-vars" : [ 0, 2, 1 ]
    }, {
      "update-vars" : [ 1 ],
      "successors" : [ 11 ],
      "in-vars" : [ 1, 8, 0, 2 ],
      "exit" : false,
      "out-vars" : [ 1, 8, 0, 2 ],
      "decl-vars" : [ ],
      "line-start" : 106,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "flags",
            "variable" : 5
          },
          "go-type" : 10,
          "kind" : "expression",
          "target" : {
            "go-type" : 26,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "h",
              "variable" : 1
            }
          },
          "type" : "selector"
        } ],
        "operator" : "^",
        "right" : [ {
          "go-type" : 10,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "4"
          }
        } ],
        "type" : "assign-operator"
      },
      "assign-vars" : [ ],
      "line-end" : 106,
      "code" : "h.flags ^= hashWriting",
      "entry" : false,
      "use-vars" : [ 1 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 12, 13 ],
      "in-vars" : [ 1, 8, 0, 2 ],
      "exit" : false,
      "out-vars" : [ 8, 0, 2, 1 ],
      "decl-vars" : [ ],
      "line-start" : 108,
      "ast" : {
        "condition" : {
          "go-type" : 40,
          "kind" : "expression",
          "left" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "buckets",
              "variable" : 9
            },
            "go-type" : 13,
            "kind" : "expression",
            "target" : {
              "go-type" : 26,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "h",
                "variable" : 1
              }
            },
            "type" : "selector"
          },
          "operator" : "==",
          "right" : {
            "go-type" : 13,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Nil",
              "kind" : "ident",
              "value" : "nil"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 110,
      "code" : "if h.buckets == nil {\n\th.buckets = newobject(t.bucket)\n}",
      "entry" : false,
      "use-vars" : [ 1 ]
    }, {
      "update-vars" : [ 1 ],
      "successors" : [ 13 ],
      "in-vars" : [ 1, 8, 0, 2 ],
      "exit" : false,
      "out-vars" : [ 1, 8, 0, 2 ],
      "decl-vars" : [ ],
      "line-start" : 109,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "buckets",
            "variable" : 9
          },
          "go-type" : 13,
          "kind" : "expression",
          "target" : {
            "go-type" : 26,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "h",
              "variable" : 1
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "arguments" : [ {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "bucket",
              "variable" : 10
            },
            "go-type" : 21,
            "kind" : "expression",
            "target" : {
              "go-type" : 2,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "t",
                "variable" : 0
              }
            },
            "type" : "selector"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 58,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 6,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "newobject"
            }
          },
          "go-type" : 13,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 109,
      "code" : "h.buckets = newobject(t.bucket)",
      "entry" : false,
      "use-vars" : [ 0, 1 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 14 ],
      "in-vars" : [ 2, 1, 8, 0 ],
      "exit" : false,
      "out-vars" : [ 0, 2, 1, 8 ],
      "decl-vars" : [ ],
      "line-start" : 112,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "bucket"
          }
        } ],
        "right" : [ {
          "go-type" : 7,
          "kind" : "expression",
          "left" : {
            "go-type" : 7,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "hash",
              "variable" : 8
            }
          },
          "operator" : "&",
          "right" : {
            "arguments" : [ {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "B",
                "variable" : 11
              },
              "go-type" : 10,
              "kind" : "expression",
              "target" : {
                "go-type" : 26,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "h",
                  "variable" : 1
                }
              },
              "type" : "selector"
            } ],
            "ellipsis" : false,
            "function" : {
              "go-type" : 60,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "function" : 7,
                "ident-kind" : "Func",
                "kind" : "ident",
                "value" : "bucketMask"
              }
            },
            "go-type" : 7,
            "kind" : "expression",
            "type" : "call"
          },
          "type" : "binary"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 113,
      "code" : "again:\n\tbucket := hash & bucketMask(h.B)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 15 ],
      "in-vars" : [ 1, 8, 0, 2 ],
      "exit" : false,
      "out-vars" : [ 12, 1, 8, 0, 2 ],
      "decl-vars" : [ 12 ],
      "line-start" : 113,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "bucket"
          }
        } ],
        "right" : [ {
          "go-type" : 7,
          "kind" : "expression",
          "left" : {
            "go-type" : 7,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "hash",
              "variable" : 8
            }
          },
          "operator" : "&",
          "right" : {
            "arguments" : [ {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "B",
                "variable" : 11
              },
              "go-type" : 10,
              "kind" : "expression",
              "target" : {
                "go-type" : 26,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "h",
                  "variable" : 1
                }
              },
              "type" : "selector"
            } ],
            "ellipsis" : false,
            "function" : {
              "go-type" : 60,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "function" : 7,
                "ident-kind" : "Func",
                "kind" : "ident",
                "value" : "bucketMask"
              }
            },
            "go-type" : 7,
            "kind" : "expression",
            "type" : "call"
          },
          "type" : "binary"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 113,
      "code" : "bucket := hash & bucketMask(h.B)",
      "entry" : false,
      "use-vars" : [ 8, 1 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 16, 17 ],
      "in-vars" : [ 1, 8, 0, 2, 12 ],
      "exit" : false,
      "out-vars" : [ 0, 2, 12, 1, 8 ],
      "decl-vars" : [ ],
      "line-start" : 114,
      "ast" : {
        "condition" : {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "function" : 8,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "growing"
            },
            "go-type" : 62,
            "kind" : "expression",
            "target" : {
              "go-type" : 26,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "h",
                "variable" : 1
              }
            },
            "type" : "selector"
          },
          "go-type" : 15,
          "kind" : "expression",
          "type" : "call"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 116,
      "code" : "if h.growing() {\n\tgrowWork_fast32(t, h, bucket)\n}",
      "entry" : false,
      "use-vars" : [ 1 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 17 ],
      "in-vars" : [ 12, 1, 8, 0, 2 ],
      "exit" : false,
      "out-vars" : [ 1, 8, 0, 2, 12 ],
      "decl-vars" : [ ],
      "line-start" : 115,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "t",
              "variable" : 0
            }
          }, {
            "go-type" : 26,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "h",
              "variable" : 1
            }
          }, {
            "go-type" : 7,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "bucket",
              "variable" : 12
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 64,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 9,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "growWork_fast32"
            }
          },
          "go-type" : 42,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 115,
      "code" : "growWork_fast32(t, h, bucket)",
      "entry" : false,
      "use-vars" : [ 12, 0, 1 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 18 ],
      "in-vars" : [ 8, 0, 2, 12, 1 ],
      "exit" : false,
      "out-vars" : [ 1, 8, 0, 2, 15 ],
      "decl-vars" : [ 15 ],
      "line-start" : 117,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "b"
          }
        } ],
        "right" : [ {
          "coerced-to" : {
            "contained" : {
              "go-type" : 36,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 36,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "bmap"
              }
            },
            "go-type" : 35,
            "kind" : "type",
            "type" : "pointer"
          },
          "go-type" : 35,
          "kind" : "expression",
          "target" : {
            "coerced-to" : {
              "go-type" : 13,
              "kind" : "type",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 1,
                "value" : "unsafe"
              },
              "type" : "identifier",
              "value" : {
                "go-type" : 13,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "Pointer"
              }
            },
            "go-type" : 13,
            "kind" : "expression",
            "target" : {
              "go-type" : 7,
              "kind" : "expression",
              "left" : {
                "coerced-to" : {
                  "go-type" : 7,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 7,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "uintptr"
                  }
                },
                "go-type" : 7,
                "kind" : "expression",
                "target" : {
                  "field" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "buckets",
                    "variable" : 9
                  },
                  "go-type" : 13,
                  "kind" : "expression",
                  "target" : {
                    "go-type" : 26,
                    "kind" : "expression",
                    "type" : "identifier",
                    "value" : {
                      "ident-kind" : "Var",
                      "kind" : "ident",
                      "value" : "h",
                      "variable" : 1
                    }
                  },
                  "type" : "selector"
                },
                "type" : "cast"
              },
              "operator" : "+",
              "right" : {
                "go-type" : 7,
                "kind" : "expression",
                "left" : {
                  "go-type" : 7,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "bucket",
                    "variable" : 12
                  }
                },
                "operator" : "*",
                "right" : {
                  "coerced-to" : {
                    "go-type" : 7,
                    "kind" : "type",
                    "type" : "identifier",
                    "value" : {
                      "go-type" : 7,
                      "ident-kind" : "TypeName",
                      "kind" : "ident",
                      "value" : "uintptr"
                    }
                  },
                  "go-type" : 7,
                  "kind" : "expression",
                  "target" : {
                    "field" : {
                      "ident-kind" : "Var",
                      "kind" : "ident",
                      "value" : "bucketsize",
                      "variable" : 14
                    },
                    "go-type" : 25,
                    "kind" : "expression",
                    "target" : {
                      "go-type" : 2,
                      "kind" : "expression",
                      "type" : "identifier",
                      "value" : {
                        "ident-kind" : "Var",
                        "kind" : "ident",
                        "value" : "t",
                        "variable" : 0
                      }
                    },
                    "type" : "selector"
                  },
                  "type" : "cast"
                },
                "type" : "binary"
              },
              "type" : "binary"
            },
            "type" : "cast"
          },
          "type" : "cast"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 117,
      "code" : "b := (*bmap)(unsafe.Pointer(uintptr(h.buckets) + bucket*uintptr(t.bucketsize)))",
      "entry" : false,
      "use-vars" : [ 12, 0, 1 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 19 ],
      "in-vars" : [ 2, 15, 1, 8, 0 ],
      "exit" : false,
      "out-vars" : [ 1, 8, 0, 2, 16, 15 ],
      "decl-vars" : [ 16 ],
      "line-start" : 119,
      "ast" : {
        "kind" : "statement",
        "target" : {
          "kind" : "decl",
          "specs" : [ {
            "comments" : [ ],
            "declared-type" : {
              "contained" : {
                "go-type" : 36,
                "kind" : "type",
                "type" : "identifier",
                "value" : {
                  "go-type" : 36,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "bmap"
                }
              },
              "go-type" : 35,
              "kind" : "type",
              "type" : "pointer"
            },
            "kind" : "spec",
            "names" : [ {
              "ident-kind" : "NoKind",
              "kind" : "ident",
              "value" : "insertb"
            } ],
            "type" : "var",
            "values" : [ ]
          } ],
          "type" : "var"
        },
        "type" : "declaration"
      },
      "assign-vars" : [ ],
      "line-end" : 119,
      "code" : "var insertb *bmap",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 20 ],
      "in-vars" : [ 0, 2, 16, 15, 1, 8 ],
      "exit" : false,
      "out-vars" : [ 1, 8, 0, 2, 16, 17, 15 ],
      "decl-vars" : [ 17 ],
      "line-start" : 120,
      "ast" : {
        "kind" : "statement",
        "target" : {
          "kind" : "decl",
          "specs" : [ {
            "comments" : [ ],
            "declared-type" : {
              "go-type" : 7,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 7,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "uintptr"
              }
            },
            "kind" : "spec",
            "names" : [ {
              "ident-kind" : "NoKind",
              "kind" : "ident",
              "value" : "inserti"
            } ],
            "type" : "var",
            "values" : [ ]
          } ],
          "type" : "var"
        },
        "type" : "declaration"
      },
      "assign-vars" : [ ],
      "line-end" : 120,
      "code" : "var inserti uintptr",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 21 ],
      "in-vars" : [ 2, 16, 17, 15, 1, 8, 0 ],
      "exit" : false,
      "out-vars" : [ 15, 1, 8, 0, 2, 16, 17 ],
      "decl-vars" : [ 18 ],
      "line-start" : 121,
      "ast" : {
        "kind" : "statement",
        "target" : {
          "kind" : "decl",
          "specs" : [ {
            "comments" : [ ],
            "declared-type" : {
              "go-type" : 13,
              "kind" : "type",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 1,
                "value" : "unsafe"
              },
              "type" : "identifier",
              "value" : {
                "go-type" : 13,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "Pointer"
              }
            },
            "kind" : "spec",
            "names" : [ {
              "ident-kind" : "NoKind",
              "kind" : "ident",
              "value" : "insertk"
            } ],
            "type" : "var",
            "values" : [ ]
          } ],
          "type" : "var"
        },
        "type" : "declaration"
      },
      "assign-vars" : [ ],
      "line-end" : 121,
      "code" : "var insertk unsafe.Pointer",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 22 ],
      "in-vars" : [ 1, 8, 0, 2, 16, 17, 15 ],
      "exit" : false,
      "out-vars" : [ 0, 2, 16, 17, 15, 1, 8 ],
      "decl-vars" : [ ],
      "line-start" : 123,
      "ast" : {
        "body" : [ {
          "body" : [ {
            "body" : [ {
              "body" : [ {
                "kind" : "statement",
                "left" : [ {
                  "go-type" : 7,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "inserti",
                    "variable" : 17
                  }
                } ],
                "right" : [ {
                  "go-type" : 7,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "i",
                    "variable" : 19
                  }
                } ],
                "type" : "assign"
              }, {
                "kind" : "statement",
                "left" : [ {
                  "go-type" : 35,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "insertb",
                    "variable" : 16
                  }
                } ],
                "right" : [ {
                  "go-type" : 35,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "b",
                    "variable" : 15
                  }
                } ],
                "type" : "assign"
              } ],
              "condition" : {
                "go-type" : 40,
                "kind" : "expression",
                "left" : {
                  "go-type" : 35,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "insertb",
                    "variable" : 16
                  }
                },
                "operator" : "==",
                "right" : {
                  "go-type" : 41,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Nil",
                    "kind" : "ident",
                    "value" : "nil"
                  }
                },
                "type" : "binary"
              },
              "else" : null,
              "init" : null,
              "kind" : "statement",
              "type" : "if"
            }, {
              "body" : [ {
                "kind" : "statement",
                "label" : {
                  "ident-kind" : "Label",
                  "kind" : "ident",
                  "value" : "bucketloop"
                },
                "type" : "break"
              } ],
              "condition" : {
                "go-type" : 40,
                "kind" : "expression",
                "left" : {
                  "go-type" : 10,
                  "index" : {
                    "go-type" : 7,
                    "kind" : "expression",
                    "type" : "identifier",
                    "value" : {
                      "ident-kind" : "Var",
                      "kind" : "ident",
                      "value" : "i",
                      "variable" : 19
                    }
                  },
                  "kind" : "expression",
                  "target" : {
                    "field" : {
                      "ident-kind" : "Var",
                      "kind" : "ident",
                      "value" : "tophash",
                      "variable" : 20
                    },
                    "go-type" : 38,
                    "kind" : "expression",
                    "target" : {
                      "go-type" : 35,
                      "kind" : "expression",
                      "type" : "identifier",
                      "value" : {
                        "ident-kind" : "Var",
                        "kind" : "ident",
                        "value" : "b",
                        "variable" : 15
                      }
                    },
                    "type" : "selector"
                  },
                  "type" : "index"
                },
                "operator" : "==",
                "right" : {
                  "go-type" : 10,
                  "kind" : "constant",
                  "value" : {
                    "type" : "INT",
                    "value" : "0"
                  }
                },
                "type" : "binary"
              },
              "else" : null,
              "init" : null,
              "kind" : "statement",
              "type" : "if"
            }, {
              "kind" : "statement",
              "label" : null,
              "type" : "continue"
            } ],
            "condition" : {
              "arguments" : [ {
                "go-type" : 10,
                "index" : {
                  "go-type" : 7,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "i",
                    "variable" : 19
                  }
                },
                "kind" : "expression",
                "target" : {
                  "field" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "tophash",
                    "variable" : 20
                  },
                  "go-type" : 38,
                  "kind" : "expression",
                  "target" : {
                    "go-type" : 35,
                    "kind" : "expression",
                    "type" : "identifier",
                    "value" : {
                      "ident-kind" : "Var",
                      "kind" : "ident",
                      "value" : "b",
                      "variable" : 15
                    }
                  },
                  "type" : "selector"
                },
                "type" : "index"
              } ],
              "ellipsis" : false,
              "function" : {
                "go-type" : 66,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "function" : 10,
                  "ident-kind" : "Func",
                  "kind" : "ident",
                  "value" : "isEmpty"
                }
              },
              "go-type" : 15,
              "kind" : "expression",
              "type" : "call"
            },
            "else" : null,
            "init" : null,
            "kind" : "statement",
            "type" : "if"
          }, {
            "kind" : "statement",
            "left" : [ {
              "go-type" : -1,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "NoKind",
                "kind" : "ident",
                "value" : "k"
              }
            } ],
            "right" : [ {
              "go-type" : 8,
              "kind" : "expression",
              "target" : {
                "go-type" : 57,
                "kind" : "expression",
                "target" : {
                  "coerced-to" : {
                    "contained" : {
                      "go-type" : 8,
                      "kind" : "type",
                      "type" : "identifier",
                      "value" : {
                        "go-type" : 8,
                        "ident-kind" : "TypeName",
                        "kind" : "ident",
                        "value" : "uint32"
                      }
                    },
                    "go-type" : 57,
                    "kind" : "type",
                    "type" : "pointer"
                  },
                  "go-type" : 57,
                  "kind" : "expression",
                  "target" : {
                    "arguments" : [ {
                      "coerced-to" : {
                        "go-type" : 13,
                        "kind" : "type",
                        "qualifier" : {
                          "ident-kind" : "PkgName",
                          "kind" : "ident",
                          "package" : 1,
                          "value" : "unsafe"
                        },
                        "type" : "identifier",
                        "value" : {
                          "go-type" : 13,
                          "ident-kind" : "TypeName",
                          "kind" : "ident",
                          "value" : "Pointer"
                        }
                      },
                      "go-type" : 13,
                      "kind" : "expression",
                      "target" : {
                        "go-type" : 35,
                        "kind" : "expression",
                        "type" : "identifier",
                        "value" : {
                          "ident-kind" : "Var",
                          "kind" : "ident",
                          "value" : "b",
                          "variable" : 15
                        }
                      },
                      "type" : "cast"
                    }, {
                      "go-type" : 7,
                      "kind" : "expression",
                      "left" : {
                        "go-type" : 7,
                        "kind" : "constant",
                        "value" : {
                          "type" : "INT",
                          "value" : "8"
                        }
                      },
                      "operator" : "+",
                      "right" : {
                        "go-type" : 7,
                        "kind" : "expression",
                        "left" : {
                          "go-type" : 7,
                          "kind" : "expression",
                          "type" : "identifier",
                          "value" : {
                            "ident-kind" : "Var",
                            "kind" : "ident",
                            "value" : "i",
                            "variable" : 19
                          }
                        },
                        "operator" : "*",
                        "right" : {
                          "go-type" : 7,
                          "kind" : "constant",
                          "value" : {
                            "type" : "INT",
                            "value" : "4"
                          }
                        },
                        "type" : "binary"
                      },
                      "type" : "binary"
                    } ],
                    "ellipsis" : false,
                    "function" : {
                      "go-type" : 68,
                      "kind" : "expression",
                      "type" : "identifier",
                      "value" : {
                        "function" : 11,
                        "ident-kind" : "Func",
                        "kind" : "ident",
                        "value" : "add"
                      }
                    },
                    "go-type" : 13,
                    "kind" : "expression",
                    "type" : "call"
                  },
                  "type" : "cast"
                },
                "type" : "paren"
              },
              "type" : "star"
            } ],
            "type" : "define"
          }, {
            "body" : [ {
              "kind" : "statement",
              "label" : null,
              "type" : "continue"
            } ],
            "condition" : {
              "go-type" : 40,
              "kind" : "expression",
              "left" : {
                "go-type" : 8,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "k",
                  "variable" : 21
                }
              },
              "operator" : "!=",
              "right" : {
                "go-type" : 8,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "key",
                  "variable" : 2
                }
              },
              "type" : "binary"
            },
            "else" : null,
            "init" : null,
            "kind" : "statement",
            "type" : "if"
          }, {
            "kind" : "statement",
            "left" : [ {
              "go-type" : 7,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "inserti",
                "variable" : 17
              }
            } ],
            "right" : [ {
              "go-type" : 7,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "i",
                "variable" : 19
              }
            } ],
            "type" : "assign"
          }, {
            "kind" : "statement",
            "left" : [ {
              "go-type" : 35,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "insertb",
                "variable" : 16
              }
            } ],
            "right" : [ {
              "go-type" : 35,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "b",
                "variable" : 15
              }
            } ],
            "type" : "assign"
          }, {
            "kind" : "statement",
            "label" : {
              "ident-kind" : "Label",
              "kind" : "ident",
              "value" : "done"
            },
            "type" : "goto"
          } ],
          "condition" : {
            "go-type" : 40,
            "kind" : "expression",
            "left" : {
              "go-type" : 7,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "i",
                "variable" : 19
              }
            },
            "operator" : "<",
            "right" : {
              "go-type" : 7,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "8"
              }
            },
            "type" : "binary"
          },
          "init" : {
            "kind" : "statement",
            "left" : [ {
              "go-type" : -1,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "NoKind",
                "kind" : "ident",
                "value" : "i"
              }
            } ],
            "right" : [ {
              "go-type" : 7,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "0"
              }
            } ],
            "type" : "define"
          },
          "kind" : "statement",
          "post" : {
            "kind" : "statement",
            "operation" : "++",
            "target" : {
              "go-type" : 7,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "i",
                "variable" : 19
              }
            },
            "type" : "crement"
          },
          "type" : "for"
        }, {
          "kind" : "statement",
          "left" : [ {
            "go-type" : -1,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "NoKind",
              "kind" : "ident",
              "value" : "ovf"
            }
          } ],
          "right" : [ {
            "arguments" : [ {
              "go-type" : 2,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "t",
                "variable" : 0
              }
            } ],
            "ellipsis" : false,
            "function" : {
              "field" : {
                "function" : 12,
                "ident-kind" : "Func",
                "kind" : "ident",
                "value" : "overflow"
              },
              "go-type" : 70,
              "kind" : "expression",
              "target" : {
                "go-type" : 35,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "b",
                  "variable" : 15
                }
              },
              "type" : "selector"
            },
            "go-type" : 35,
            "kind" : "expression",
            "type" : "call"
          } ],
          "type" : "define"
        }, {
          "body" : [ {
            "kind" : "statement",
            "label" : null,
            "type" : "break"
          } ],
          "condition" : {
            "go-type" : 40,
            "kind" : "expression",
            "left" : {
              "go-type" : 35,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "ovf",
                "variable" : 23
              }
            },
            "operator" : "==",
            "right" : {
              "go-type" : 41,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Nil",
                "kind" : "ident",
                "value" : "nil"
              }
            },
            "type" : "binary"
          },
          "else" : null,
          "init" : null,
          "kind" : "statement",
          "type" : "if"
        }, {
          "kind" : "statement",
          "left" : [ {
            "go-type" : 35,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "b",
              "variable" : 15
            }
          } ],
          "right" : [ {
            "go-type" : 35,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "ovf",
              "variable" : 23
            }
          } ],
          "type" : "assign"
        } ],
        "condition" : null,
        "init" : null,
        "kind" : "statement",
        "post" : null,
        "type" : "for"
      },
      "assign-vars" : [ ],
      "line-end" : 149,
      "code" : "bucketloop:\n\tfor {\n\t\tfor i := uintptr(0); i < bucketCnt; i++ {\n\t\t\tif isEmpty(b.tophash[i]) {\n\t\t\t\tif insertb == nil {\n\t\t\t\t\tinserti = i\n\t\t\t\t\tinsertb = b\n\t\t\t\t}\n\t\t\t\tif b.tophash[i] == emptyRest {\n\t\t\t\t\tbreak bucketloop\n\t\t\t\t}\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tk := *((*uint32)(add(unsafe.Pointer(b), dataOffset+i*4)))\n\t\t\tif k != key {\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tinserti = i\n\t\t\tinsertb = b\n\t\t\tgoto done\n\t\t}\n\t\tovf := b.overflow(t)\n\t\tif ovf == nil {\n\t\t\tbreak\n\t\t}\n\t\tb = ovf\n\t}",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 24, 43 ],
      "in-vars" : [ 8, 0, 2, 16, 17, 15, 1 ],
      "exit" : false,
      "out-vars" : [ 0, 2, 16, 17, 15, 1, 8 ],
      "decl-vars" : [ ],
      "line-start" : 124,
      "ast" : {
        "condition" : null,
        "kind" : "statement",
        "type" : "for"
      },
      "assign-vars" : [ ],
      "line-end" : 149,
      "code" : "for {\n\tfor i := uintptr(0); i < bucketCnt; i++ {\n\t\tif isEmpty(b.tophash[i]) {\n\t\t\tif insertb == nil {\n\t\t\t\tinserti = i\n\t\t\t\tinsertb = b\n\t\t\t}\n\t\t\tif b.tophash[i] == emptyRest {\n\t\t\t\tbreak bucketloop\n\t\t\t}\n\t\t\tcontinue\n\t\t}\n\t\tk := *((*uint32)(add(unsafe.Pointer(b), dataOffset+i*4)))\n\t\tif k != key {\n\t\t\tcontinue\n\t\t}\n\t\tinserti = i\n\t\tinsertb = b\n\t\tgoto done\n\t}\n\tovf := b.overflow(t)\n\tif ovf == nil {\n\t\tbreak\n\t}\n\tb = ovf\n}",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 26, 39 ],
      "in-vars" : [ 19, 1, 8, 0, 2, 16, 17, 15 ],
      "exit" : false,
      "out-vars" : [ 16, 17, 15, 19, 1, 8, 0, 2 ],
      "decl-vars" : [ ],
      "line-start" : 125,
      "ast" : {
        "condition" : {
          "go-type" : 40,
          "kind" : "expression",
          "left" : {
            "go-type" : 7,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "i",
              "variable" : 19
            }
          },
          "operator" : "<",
          "right" : {
            "go-type" : 7,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "8"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "for"
      },
      "assign-vars" : [ ],
      "line-end" : 143,
      "code" : "for i := uintptr(0); i < bucketCnt; i++ {\n\tif isEmpty(b.tophash[i]) {\n\t\tif insertb == nil {\n\t\t\tinserti = i\n\t\t\tinsertb = b\n\t\t}\n\t\tif b.tophash[i] == emptyRest {\n\t\t\tbreak bucketloop\n\t\t}\n\t\tcontinue\n\t}\n\tk := *((*uint32)(add(unsafe.Pointer(b), dataOffset+i*4)))\n\tif k != key {\n\t\tcontinue\n\t}\n\tinserti = i\n\tinsertb = b\n\tgoto done\n}",
      "entry" : false,
      "use-vars" : [ 19 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 23 ],
      "in-vars" : [ 16, 17, 15, 1, 8, 0, 2 ],
      "exit" : false,
      "out-vars" : [ 19, 1, 8, 0, 2, 16, 17, 15 ],
      "decl-vars" : [ 19 ],
      "line-start" : 125,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "i"
          }
        } ],
        "right" : [ {
          "go-type" : 7,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "0"
          }
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 125,
      "code" : "i := uintptr(0)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ 19 ],
      "successors" : [ 23 ],
      "in-vars" : [ 19, 1, 8, 0, 2, 16, 17, 15 ],
      "exit" : false,
      "out-vars" : [ 16, 17, 15, 19, 1, 8, 0, 2 ],
      "decl-vars" : [ ],
      "line-start" : 125,
      "ast" : {
        "kind" : "statement",
        "operation" : "++",
        "target" : {
          "go-type" : 7,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "i",
            "variable" : 19
          }
        },
        "type" : "crement"
      },
      "assign-vars" : [ 19 ],
      "line-end" : 125,
      "code" : "i++",
      "entry" : false,
      "use-vars" : [ 19 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 27, 33 ],
      "in-vars" : [ 0, 2, 16, 17, 15, 19, 1, 8 ],
      "exit" : false,
      "out-vars" : [ 19, 1, 8, 0, 2, 16, 17, 15 ],
      "decl-vars" : [ ],
      "line-start" : 126,
      "ast" : {
        "condition" : {
          "arguments" : [ {
            "go-type" : 10,
            "index" : {
              "go-type" : 7,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "i",
                "variable" : 19
              }
            },
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "tophash",
                "variable" : 20
              },
              "go-type" : 38,
              "kind" : "expression",
              "target" : {
                "go-type" : 35,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "b",
                  "variable" : 15
                }
              },
              "type" : "selector"
            },
            "type" : "index"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 66,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 10,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "isEmpty"
            }
          },
          "go-type" : 15,
          "kind" : "expression",
          "type" : "call"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 135,
      "code" : "if isEmpty(b.tophash[i]) {\n\tif insertb == nil {\n\t\tinserti = i\n\t\tinsertb = b\n\t}\n\tif b.tophash[i] == emptyRest {\n\t\tbreak bucketloop\n\t}\n\tcontinue\n}",
      "entry" : false,
      "use-vars" : [ 15, 19 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 28, 30 ],
      "in-vars" : [ 19, 1, 8, 0, 2, 16, 17, 15 ],
      "exit" : false,
      "out-vars" : [ 0, 2, 16, 17, 15, 19, 1, 8 ],
      "decl-vars" : [ ],
      "line-start" : 127,
      "ast" : {
        "condition" : {
          "go-type" : 40,
          "kind" : "expression",
          "left" : {
            "go-type" : 35,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "insertb",
              "variable" : 16
            }
          },
          "operator" : "==",
          "right" : {
            "go-type" : 41,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Nil",
              "kind" : "ident",
              "value" : "nil"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 130,
      "code" : "if insertb == nil {\n\tinserti = i\n\tinsertb = b\n}",
      "entry" : false,
      "use-vars" : [ 16 ]
    }, {
      "update-vars" : [ 17 ],
      "successors" : [ 29 ],
      "in-vars" : [ 8, 0, 2, 15, 19, 1 ],
      "exit" : false,
      "out-vars" : [ 0, 2, 17, 15, 19, 1, 8 ],
      "decl-vars" : [ ],
      "line-start" : 128,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 7,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "inserti",
            "variable" : 17
          }
        } ],
        "right" : [ {
          "go-type" : 7,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "i",
            "variable" : 19
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 17 ],
      "line-end" : 128,
      "code" : "inserti = i",
      "entry" : false,
      "use-vars" : [ 19 ]
    }, {
      "update-vars" : [ 16 ],
      "successors" : [ 30 ],
      "in-vars" : [ 15, 19, 1, 8, 0, 2, 17 ],
      "exit" : false,
      "out-vars" : [ 19, 1, 8, 0, 2, 16, 17, 15 ],
      "decl-vars" : [ ],
      "line-start" : 129,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 35,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "insertb",
            "variable" : 16
          }
        } ],
        "right" : [ {
          "go-type" : 35,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "b",
            "variable" : 15
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 16 ],
      "line-end" : 129,
      "code" : "insertb = b",
      "entry" : false,
      "use-vars" : [ 15 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 31, 32 ],
      "in-vars" : [ 16, 17, 15, 19, 1, 8, 0, 2 ],
      "exit" : false,
      "out-vars" : [ 17, 15, 19, 1, 8, 0, 2, 16 ],
      "decl-vars" : [ ],
      "line-start" : 131,
      "ast" : {
        "condition" : {
          "go-type" : 40,
          "kind" : "expression",
          "left" : {
            "go-type" : 10,
            "index" : {
              "go-type" : 7,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "i",
                "variable" : 19
              }
            },
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "tophash",
                "variable" : 20
              },
              "go-type" : 38,
              "kind" : "expression",
              "target" : {
                "go-type" : 35,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "b",
                  "variable" : 15
                }
              },
              "type" : "selector"
            },
            "type" : "index"
          },
          "operator" : "==",
          "right" : {
            "go-type" : 10,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 133,
      "code" : "if b.tophash[i] == emptyRest {\n\tbreak bucketloop\n}",
      "entry" : false,
      "use-vars" : [ 15, 19 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 43 ],
      "in-vars" : [ 1, 8, 0, 2, 16, 17, 15 ],
      "exit" : false,
      "out-vars" : [ 16, 17, 15, 1, 8, 0, 2 ],
      "decl-vars" : [ ],
      "line-start" : 132,
      "ast" : {
        "kind" : "statement",
        "label" : {
          "ident-kind" : "Label",
          "kind" : "ident",
          "value" : "bucketloop"
        },
        "type" : "break"
      },
      "assign-vars" : [ ],
      "line-end" : 132,
      "code" : "break bucketloop",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 25 ],
      "in-vars" : [ 19, 1, 8, 0, 2, 16, 17, 15 ],
      "exit" : false,
      "out-vars" : [ 15, 19, 1, 8, 0, 2, 16, 17 ],
      "decl-vars" : [ ],
      "line-start" : 134,
      "ast" : {
        "kind" : "statement",
        "label" : null,
        "type" : "continue"
      },
      "assign-vars" : [ ],
      "line-end" : 134,
      "code" : "continue",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 34 ],
      "in-vars" : [ 1, 8, 0, 2, 16, 17, 15, 19 ],
      "exit" : false,
      "out-vars" : [ 19, 2, 8, 0, 16, 17, 15, 21, 1 ],
      "decl-vars" : [ 21 ],
      "line-start" : 136,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "k"
          }
        } ],
        "right" : [ {
          "go-type" : 8,
          "kind" : "expression",
          "target" : {
            "go-type" : 57,
            "kind" : "expression",
            "target" : {
              "coerced-to" : {
                "contained" : {
                  "go-type" : 8,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 8,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "uint32"
                  }
                },
                "go-type" : 57,
                "kind" : "type",
                "type" : "pointer"
              },
              "go-type" : 57,
              "kind" : "expression",
              "target" : {
                "arguments" : [ {
                  "coerced-to" : {
                    "go-type" : 13,
                    "kind" : "type",
                    "qualifier" : {
                      "ident-kind" : "PkgName",
                      "kind" : "ident",
                      "package" : 1,
                      "value" : "unsafe"
                    },
                    "type" : "identifier",
                    "value" : {
                      "go-type" : 13,
                      "ident-kind" : "TypeName",
                      "kind" : "ident",
                      "value" : "Pointer"
                    }
                  },
                  "go-type" : 13,
                  "kind" : "expression",
                  "target" : {
                    "go-type" : 35,
                    "kind" : "expression",
                    "type" : "identifier",
                    "value" : {
                      "ident-kind" : "Var",
                      "kind" : "ident",
                      "value" : "b",
                      "variable" : 15
                    }
                  },
                  "type" : "cast"
                }, {
                  "go-type" : 7,
                  "kind" : "expression",
                  "left" : {
                    "go-type" : 7,
                    "kind" : "constant",
                    "value" : {
                      "type" : "INT",
                      "value" : "8"
                    }
                  },
                  "operator" : "+",
                  "right" : {
                    "go-type" : 7,
                    "kind" : "expression",
                    "left" : {
                      "go-type" : 7,
                      "kind" : "expression",
                      "type" : "identifier",
                      "value" : {
                        "ident-kind" : "Var",
                        "kind" : "ident",
                        "value" : "i",
                        "variable" : 19
                      }
                    },
                    "operator" : "*",
                    "right" : {
                      "go-type" : 7,
                      "kind" : "constant",
                      "value" : {
                        "type" : "INT",
                        "value" : "4"
                      }
                    },
                    "type" : "binary"
                  },
                  "type" : "binary"
                } ],
                "ellipsis" : false,
                "function" : {
                  "go-type" : 68,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "function" : 11,
                    "ident-kind" : "Func",
                    "kind" : "ident",
                    "value" : "add"
                  }
                },
                "go-type" : 13,
                "kind" : "expression",
                "type" : "call"
              },
              "type" : "cast"
            },
            "type" : "paren"
          },
          "type" : "star"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 136,
      "code" : "k := *((*uint32)(add(unsafe.Pointer(b), dataOffset+i*4)))",
      "entry" : false,
      "use-vars" : [ 15, 19 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 35, 36 ],
      "in-vars" : [ 21, 2, 16, 17, 19, 1, 8, 0, 15 ],
      "exit" : false,
      "out-vars" : [ 8, 0, 2, 16, 17, 15, 19, 1 ],
      "decl-vars" : [ ],
      "line-start" : 137,
      "ast" : {
        "condition" : {
          "go-type" : 40,
          "kind" : "expression",
          "left" : {
            "go-type" : 8,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "k",
              "variable" : 21
            }
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 8,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "key",
              "variable" : 2
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 139,
      "code" : "if k != key {\n\tcontinue\n}",
      "entry" : false,
      "use-vars" : [ 2, 21 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 25 ],
      "in-vars" : [ 1, 8, 0, 2, 16, 17, 15, 19 ],
      "exit" : false,
      "out-vars" : [ 8, 0, 2, 16, 17, 15, 19, 1 ],
      "decl-vars" : [ ],
      "line-start" : 138,
      "ast" : {
        "kind" : "statement",
        "label" : null,
        "type" : "continue"
      },
      "assign-vars" : [ ],
      "line-end" : 138,
      "code" : "continue",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ 17 ],
      "successors" : [ 37 ],
      "in-vars" : [ 15, 19, 1, 0 ],
      "exit" : false,
      "out-vars" : [ 15, 1, 0, 17 ],
      "decl-vars" : [ ],
      "line-start" : 140,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 7,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "inserti",
            "variable" : 17
          }
        } ],
        "right" : [ {
          "go-type" : 7,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "i",
            "variable" : 19
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 17 ],
      "line-end" : 140,
      "code" : "inserti = i",
      "entry" : false,
      "use-vars" : [ 19 ]
    }, {
      "update-vars" : [ 16 ],
      "successors" : [ 38 ],
      "in-vars" : [ 15, 1, 0, 17 ],
      "exit" : false,
      "out-vars" : [ 16, 17, 1, 0 ],
      "decl-vars" : [ ],
      "line-start" : 141,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 35,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "insertb",
            "variable" : 16
          }
        } ],
        "right" : [ {
          "go-type" : 35,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "b",
            "variable" : 15
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 16 ],
      "line-end" : 141,
      "code" : "insertb = b",
      "entry" : false,
      "use-vars" : [ 15 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 53 ],
      "in-vars" : [ 17, 1, 0, 16 ],
      "exit" : false,
      "out-vars" : [ 0, 16, 17, 1 ],
      "decl-vars" : [ ],
      "line-start" : 142,
      "ast" : {
        "kind" : "statement",
        "label" : {
          "ident-kind" : "Label",
          "kind" : "ident",
          "value" : "done"
        },
        "type" : "goto"
      },
      "assign-vars" : [ ],
      "line-end" : 142,
      "code" : "goto done",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 40 ],
      "in-vars" : [ 1, 8, 0, 2, 16, 17, 15 ],
      "exit" : false,
      "out-vars" : [ 23, 1, 8, 0, 2, 16, 17, 15 ],
      "decl-vars" : [ 23 ],
      "line-start" : 144,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "ovf"
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "t",
              "variable" : 0
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "function" : 12,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "overflow"
            },
            "go-type" : 70,
            "kind" : "expression",
            "target" : {
              "go-type" : 35,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "b",
                "variable" : 15
              }
            },
            "type" : "selector"
          },
          "go-type" : 35,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 144,
      "code" : "ovf := b.overflow(t)",
      "entry" : false,
      "use-vars" : [ 15, 0 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 41, 42 ],
      "in-vars" : [ 16, 17, 15, 23, 1, 8, 0, 2 ],
      "exit" : false,
      "out-vars" : [ 17, 15, 23, 1, 8, 0, 2, 16 ],
      "decl-vars" : [ ],
      "line-start" : 145,
      "ast" : {
        "condition" : {
          "go-type" : 40,
          "kind" : "expression",
          "left" : {
            "go-type" : 35,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "ovf",
              "variable" : 23
            }
          },
          "operator" : "==",
          "right" : {
            "go-type" : 41,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Nil",
              "kind" : "ident",
              "value" : "nil"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 147,
      "code" : "if ovf == nil {\n\tbreak\n}",
      "entry" : false,
      "use-vars" : [ 23 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 43 ],
      "in-vars" : [ 1, 8, 0, 2, 16, 17, 15 ],
      "exit" : false,
      "out-vars" : [ 1, 8, 0, 2, 16, 17, 15 ],
      "decl-vars" : [ ],
      "line-start" : 146,
      "ast" : {
        "kind" : "statement",
        "label" : null,
        "type" : "break"
      },
      "assign-vars" : [ ],
      "line-end" : 146,
      "code" : "break",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ 15 ],
      "successors" : [ 22 ],
      "in-vars" : [ 1, 8, 0, 2, 16, 17, 23 ],
      "exit" : false,
      "out-vars" : [ 1, 8, 0, 2, 16, 17, 15 ],
      "decl-vars" : [ ],
      "line-start" : 148,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 35,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "b",
            "variable" : 15
          }
        } ],
        "right" : [ {
          "go-type" : 35,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "ovf",
            "variable" : 23
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 15 ],
      "line-end" : 148,
      "code" : "b = ovf",
      "entry" : false,
      "use-vars" : [ 23 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 44, 46 ],
      "in-vars" : [ 0, 2, 16, 17, 15, 1, 8 ],
      "exit" : false,
      "out-vars" : [ 17, 15, 1, 8, 0, 2, 16 ],
      "decl-vars" : [ ],
      "line-start" : 155,
      "ast" : {
        "condition" : {
          "go-type" : 15,
          "kind" : "expression",
          "left" : {
            "go-type" : 15,
            "kind" : "expression",
            "operator" : "!",
            "target" : {
              "arguments" : [ ],
              "ellipsis" : false,
              "function" : {
                "field" : {
                  "function" : 8,
                  "ident-kind" : "Func",
                  "kind" : "ident",
                  "value" : "growing"
                },
                "go-type" : 62,
                "kind" : "expression",
                "target" : {
                  "go-type" : 26,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "h",
                    "variable" : 1
                  }
                },
                "type" : "selector"
              },
              "go-type" : 15,
              "kind" : "expression",
              "type" : "call"
            },
            "type" : "unary"
          },
          "operator" : "&&",
          "right" : {
            "go-type" : 15,
            "kind" : "expression",
            "target" : {
              "go-type" : 15,
              "kind" : "expression",
              "left" : {
                "arguments" : [ {
                  "go-type" : 29,
                  "kind" : "expression",
                  "left" : {
                    "field" : {
                      "ident-kind" : "Var",
                      "kind" : "ident",
                      "value" : "count",
                      "variable" : 24
                    },
                    "go-type" : 29,
                    "kind" : "expression",
                    "target" : {
                      "go-type" : 26,
                      "kind" : "expression",
                      "type" : "identifier",
                      "value" : {
                        "ident-kind" : "Var",
                        "kind" : "ident",
                        "value" : "h",
                        "variable" : 1
                      }
                    },
                    "type" : "selector"
                  },
                  "operator" : "+",
                  "right" : {
                    "go-type" : 29,
                    "kind" : "constant",
                    "value" : {
                      "type" : "INT",
                      "value" : "1"
                    }
                  },
                  "type" : "binary"
                }, {
                  "field" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "B",
                    "variable" : 11
                  },
                  "go-type" : 10,
                  "kind" : "expression",
                  "target" : {
                    "go-type" : 26,
                    "kind" : "expression",
                    "type" : "identifier",
                    "value" : {
                      "ident-kind" : "Var",
                      "kind" : "ident",
                      "value" : "h",
                      "variable" : 1
                    }
                  },
                  "type" : "selector"
                } ],
                "ellipsis" : false,
                "function" : {
                  "go-type" : 74,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "function" : 13,
                    "ident-kind" : "Func",
                    "kind" : "ident",
                    "value" : "overLoadFactor"
                  }
                },
                "go-type" : 15,
                "kind" : "expression",
                "type" : "call"
              },
              "operator" : "||",
              "right" : {
                "arguments" : [ {
                  "field" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "noverflow",
                    "variable" : 25
                  },
                  "go-type" : 25,
                  "kind" : "expression",
                  "target" : {
                    "go-type" : 26,
                    "kind" : "expression",
                    "type" : "identifier",
                    "value" : {
                      "ident-kind" : "Var",
                      "kind" : "ident",
                      "value" : "h",
                      "variable" : 1
                    }
                  },
                  "type" : "selector"
                }, {
                  "field" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "B",
                    "variable" : 11
                  },
                  "go-type" : 10,
                  "kind" : "expression",
                  "target" : {
                    "go-type" : 26,
                    "kind" : "expression",
                    "type" : "identifier",
                    "value" : {
                      "ident-kind" : "Var",
                      "kind" : "ident",
                      "value" : "h",
                      "variable" : 1
                    }
                  },
                  "type" : "selector"
                } ],
                "ellipsis" : false,
                "function" : {
                  "go-type" : 76,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "function" : 14,
                    "ident-kind" : "Func",
                    "kind" : "ident",
                    "value" : "tooManyOverflowBuckets"
                  }
                },
                "go-type" : 15,
                "kind" : "expression",
                "type" : "call"
              },
              "type" : "binary"
            },
            "type" : "paren"
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 158,
      "code" : "if !h.growing() && (overLoadFactor(h.count+1, h.B) || tooManyOverflowBuckets(h.noverflow, h.B)) {\n\thashGrow(t, h)\n\tgoto again\n}",
      "entry" : false,
      "use-vars" : [ 1 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 45 ],
      "in-vars" : [ 0, 2, 1, 8 ],
      "exit" : false,
      "out-vars" : [ 8, 0, 2, 1 ],
      "decl-vars" : [ ],
      "line-start" : 156,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "t",
              "variable" : 0
            }
          }, {
            "go-type" : 26,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "h",
              "variable" : 1
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 78,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 15,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "hashGrow"
            }
          },
          "go-type" : 42,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 156,
      "code" : "hashGrow(t, h)",
      "entry" : false,
      "use-vars" : [ 0, 1 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 13 ],
      "in-vars" : [ 0, 2, 1, 8 ],
      "exit" : false,
      "out-vars" : [ 0, 2, 1, 8 ],
      "decl-vars" : [ ],
      "line-start" : 157,
      "ast" : {
        "kind" : "statement",
        "label" : {
          "ident-kind" : "Label",
          "kind" : "ident",
          "value" : "again"
        },
        "type" : "goto"
      },
      "assign-vars" : [ ],
      "line-end" : 157,
      "code" : "goto again",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 47, 49 ],
      "in-vars" : [ 0, 2, 16, 17, 15, 1, 8 ],
      "exit" : false,
      "out-vars" : [ 2, 16, 17, 15, 1, 8, 0 ],
      "decl-vars" : [ ],
      "line-start" : 160,
      "ast" : {
        "condition" : {
          "go-type" : 40,
          "kind" : "expression",
          "left" : {
            "go-type" : 35,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "insertb",
              "variable" : 16
            }
          },
          "operator" : "==",
          "right" : {
            "go-type" : 41,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Nil",
              "kind" : "ident",
              "value" : "nil"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 164,
      "code" : "if insertb == nil {\n\n\tinsertb = h.newoverflow(t, b)\n\tinserti = 0\n}",
      "entry" : false,
      "use-vars" : [ 16 ]
    }, {
      "update-vars" : [ 16 ],
      "successors" : [ 48 ],
      "in-vars" : [ 8, 0, 2, 15, 1 ],
      "exit" : false,
      "out-vars" : [ 1, 8, 0, 2, 16 ],
      "decl-vars" : [ ],
      "line-start" : 162,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 35,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "insertb",
            "variable" : 16
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "t",
              "variable" : 0
            }
          }, {
            "go-type" : 35,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "b",
              "variable" : 15
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "function" : 16,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "newoverflow"
            },
            "go-type" : 80,
            "kind" : "expression",
            "target" : {
              "go-type" : 26,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "h",
                "variable" : 1
              }
            },
            "type" : "selector"
          },
          "go-type" : 35,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 16 ],
      "line-end" : 162,
      "code" : "insertb = h.newoverflow(t, b)",
      "entry" : false,
      "use-vars" : [ 0, 15, 1 ]
    }, {
      "update-vars" : [ 17 ],
      "successors" : [ 49 ],
      "in-vars" : [ 2, 16, 1, 8, 0 ],
      "exit" : false,
      "out-vars" : [ 8, 0, 2, 16, 17, 1 ],
      "decl-vars" : [ ],
      "line-start" : 163,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 7,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "inserti",
            "variable" : 17
          }
        } ],
        "right" : [ {
          "go-type" : 7,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "0"
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 17 ],
      "line-end" : 163,
      "code" : "inserti = 0",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ 16 ],
      "successors" : [ 50 ],
      "in-vars" : [ 17, 1, 8, 0, 2, 16 ],
      "exit" : false,
      "out-vars" : [ 1, 0, 2, 16, 17 ],
      "decl-vars" : [ ],
      "line-start" : 165,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 10,
          "index" : {
            "go-type" : 7,
            "kind" : "expression",
            "left" : {
              "go-type" : 7,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "inserti",
                "variable" : 17
              }
            },
            "operator" : "&",
            "right" : {
              "go-type" : 7,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "7"
              }
            },
            "type" : "binary"
          },
          "kind" : "expression",
          "target" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "tophash",
              "variable" : 20
            },
            "go-type" : 38,
            "kind" : "expression",
            "target" : {
              "go-type" : 35,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "insertb",
                "variable" : 16
              }
            },
            "type" : "selector"
          },
          "type" : "index"
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 7,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "hash",
              "variable" : 8
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 83,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 17,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "tophash"
            }
          },
          "go-type" : 10,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 165,
      "code" : "insertb.tophash[inserti&(bucketCnt-1)] = tophash(hash)",
      "entry" : false,
      "use-vars" : [ 17, 8, 16 ]
    }, {
      "update-vars" : [ 18 ],
      "successors" : [ 51 ],
      "in-vars" : [ 0, 2, 16, 17, 1 ],
      "exit" : false,
      "out-vars" : [ 2, 16, 17, 1, 0 ],
      "decl-vars" : [ ],
      "line-start" : 167,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 13,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "insertk",
            "variable" : 18
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "coerced-to" : {
              "go-type" : 13,
              "kind" : "type",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 1,
                "value" : "unsafe"
              },
              "type" : "identifier",
              "value" : {
                "go-type" : 13,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "Pointer"
              }
            },
            "go-type" : 13,
            "kind" : "expression",
            "target" : {
              "go-type" : 35,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "insertb",
                "variable" : 16
              }
            },
            "type" : "cast"
          }, {
            "go-type" : 7,
            "kind" : "expression",
            "left" : {
              "go-type" : 7,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "8"
              }
            },
            "operator" : "+",
            "right" : {
              "go-type" : 7,
              "kind" : "expression",
              "left" : {
                "go-type" : 7,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "inserti",
                  "variable" : 17
                }
              },
              "operator" : "*",
              "right" : {
                "go-type" : 7,
                "kind" : "constant",
                "value" : {
                  "type" : "INT",
                  "value" : "4"
                }
              },
              "type" : "binary"
            },
            "type" : "binary"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 68,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 11,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "add"
            }
          },
          "go-type" : 13,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 18 ],
      "line-end" : 167,
      "code" : "insertk = add(unsafe.Pointer(insertb), dataOffset+inserti*4)",
      "entry" : false,
      "use-vars" : [ 17, 16 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 52 ],
      "in-vars" : [ 2, 16, 17, 1, 0 ],
      "exit" : false,
      "out-vars" : [ 16, 17, 1, 0 ],
      "decl-vars" : [ ],
      "line-start" : 169,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 8,
          "kind" : "expression",
          "target" : {
            "coerced-to" : {
              "contained" : {
                "go-type" : 8,
                "kind" : "type",
                "type" : "identifier",
                "value" : {
                  "go-type" : 8,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "uint32"
                }
              },
              "go-type" : 57,
              "kind" : "type",
              "type" : "pointer"
            },
            "go-type" : 57,
            "kind" : "expression",
            "target" : {
              "go-type" : 13,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "insertk",
                "variable" : 18
              }
            },
            "type" : "cast"
          },
          "type" : "star"
        } ],
        "right" : [ {
          "go-type" : 8,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "key",
            "variable" : 2
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 169,
      "code" : "*(*uint32)(insertk) = key",
      "entry" : false,
      "use-vars" : [ 2 ]
    }, {
      "update-vars" : [ 1 ],
      "successors" : [ 53 ],
      "in-vars" : [ 1, 0, 16, 17 ],
      "exit" : false,
      "out-vars" : [ 0, 16, 17, 1 ],
      "decl-vars" : [ ],
      "line-start" : 171,
      "ast" : {
        "kind" : "statement",
        "operation" : "++",
        "target" : {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "count",
            "variable" : 24
          },
          "go-type" : 29,
          "kind" : "expression",
          "target" : {
            "go-type" : 26,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "h",
              "variable" : 1
            }
          },
          "type" : "selector"
        },
        "type" : "crement"
      },
      "assign-vars" : [ ],
      "line-end" : 171,
      "code" : "h.count++",
      "entry" : false,
      "use-vars" : [ 1 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 54 ],
      "in-vars" : [ 1, 0, 16, 17 ],
      "exit" : false,
      "out-vars" : [ 1, 0, 16, 17 ],
      "decl-vars" : [ ],
      "line-start" : 173,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "elem"
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "coerced-to" : {
              "go-type" : 13,
              "kind" : "type",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 1,
                "value" : "unsafe"
              },
              "type" : "identifier",
              "value" : {
                "go-type" : 13,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "Pointer"
              }
            },
            "go-type" : 13,
            "kind" : "expression",
            "target" : {
              "go-type" : 35,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "insertb",
                "variable" : 16
              }
            },
            "type" : "cast"
          }, {
            "go-type" : 7,
            "kind" : "expression",
            "left" : {
              "go-type" : 7,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "40"
              }
            },
            "operator" : "+",
            "right" : {
              "go-type" : 7,
              "kind" : "expression",
              "left" : {
                "go-type" : 7,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "inserti",
                  "variable" : 17
                }
              },
              "operator" : "*",
              "right" : {
                "coerced-to" : {
                  "go-type" : 7,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 7,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "uintptr"
                  }
                },
                "go-type" : 7,
                "kind" : "expression",
                "target" : {
                  "field" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "elemsize",
                    "variable" : 27
                  },
                  "go-type" : 10,
                  "kind" : "expression",
                  "target" : {
                    "go-type" : 2,
                    "kind" : "expression",
                    "type" : "identifier",
                    "value" : {
                      "ident-kind" : "Var",
                      "kind" : "ident",
                      "value" : "t",
                      "variable" : 0
                    }
                  },
                  "type" : "selector"
                },
                "type" : "cast"
              },
              "type" : "binary"
            },
            "type" : "binary"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 68,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 11,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "add"
            }
          },
          "go-type" : 13,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 174,
      "code" : "done:\n\telem := add(unsafe.Pointer(insertb), dataOffset+bucketCnt*4+inserti*uintptr(t.elemsize))",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 55 ],
      "in-vars" : [ 1, 0, 16, 17 ],
      "exit" : false,
      "out-vars" : [ 1, 28 ],
      "decl-vars" : [ 28 ],
      "line-start" : 174,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "elem"
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "coerced-to" : {
              "go-type" : 13,
              "kind" : "type",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 1,
                "value" : "unsafe"
              },
              "type" : "identifier",
              "value" : {
                "go-type" : 13,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "Pointer"
              }
            },
            "go-type" : 13,
            "kind" : "expression",
            "target" : {
              "go-type" : 35,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "insertb",
                "variable" : 16
              }
            },
            "type" : "cast"
          }, {
            "go-type" : 7,
            "kind" : "expression",
            "left" : {
              "go-type" : 7,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "40"
              }
            },
            "operator" : "+",
            "right" : {
              "go-type" : 7,
              "kind" : "expression",
              "left" : {
                "go-type" : 7,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "inserti",
                  "variable" : 17
                }
              },
              "operator" : "*",
              "right" : {
                "coerced-to" : {
                  "go-type" : 7,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 7,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "uintptr"
                  }
                },
                "go-type" : 7,
                "kind" : "expression",
                "target" : {
                  "field" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "elemsize",
                    "variable" : 27
                  },
                  "go-type" : 10,
                  "kind" : "expression",
                  "target" : {
                    "go-type" : 2,
                    "kind" : "expression",
                    "type" : "identifier",
                    "value" : {
                      "ident-kind" : "Var",
                      "kind" : "ident",
                      "value" : "t",
                      "variable" : 0
                    }
                  },
                  "type" : "selector"
                },
                "type" : "cast"
              },
              "type" : "binary"
            },
            "type" : "binary"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 68,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 11,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "add"
            }
          },
          "go-type" : 13,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 174,
      "code" : "elem := add(unsafe.Pointer(insertb), dataOffset+bucketCnt*4+inserti*uintptr(t.elemsize))",
      "entry" : false,
      "use-vars" : [ 0, 17, 16 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 56, 57 ],
      "in-vars" : [ 28, 1 ],
      "exit" : false,
      "out-vars" : [ 1, 28 ],
      "decl-vars" : [ ],
      "line-start" : 175,
      "ast" : {
        "condition" : {
          "go-type" : 40,
          "kind" : "expression",
          "left" : {
            "go-type" : 10,
            "kind" : "expression",
            "left" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "flags",
                "variable" : 5
              },
              "go-type" : 10,
              "kind" : "expression",
              "target" : {
                "go-type" : 26,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "h",
                  "variable" : 1
                }
              },
              "type" : "selector"
            },
            "operator" : "&",
            "right" : {
              "go-type" : 10,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "4"
              }
            },
            "type" : "binary"
          },
          "operator" : "==",
          "right" : {
            "go-type" : 10,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 177,
      "code" : "if h.flags&hashWriting == 0 {\n\tthrow(\"concurrent map writes\")\n}",
      "entry" : false,
      "use-vars" : [ 1 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 57 ],
      "in-vars" : [ 1, 28 ],
      "exit" : false,
      "out-vars" : [ 1, 28 ],
      "decl-vars" : [ ],
      "line-start" : 176,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 47,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "concurrent map writes"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 53,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 4,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "throw"
            }
          },
          "go-type" : 42,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 176,
      "code" : "throw(\"concurrent map writes\")",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ 1 ],
      "successors" : [ 58 ],
      "in-vars" : [ 1, 28 ],
      "exit" : false,
      "out-vars" : [ 28 ],
      "decl-vars" : [ ],
      "line-start" : 178,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "flags",
            "variable" : 5
          },
          "go-type" : 10,
          "kind" : "expression",
          "target" : {
            "go-type" : 26,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "h",
              "variable" : 1
            }
          },
          "type" : "selector"
        } ],
        "operator" : "&^",
        "right" : [ {
          "go-type" : 10,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "4"
          }
        } ],
        "type" : "assign-operator"
      },
      "assign-vars" : [ ],
      "line-end" : 178,
      "code" : "h.flags &^= hashWriting",
      "entry" : false,
      "use-vars" : [ 1 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 28 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 179,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 13,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "elem",
            "variable" : 28
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 179,
      "code" : "return elem",
      "entry" : false,
      "use-vars" : [ 28 ]
    } ],
    "code" : "func mapassign_fast32(t *maptype, h *hmap, key uint32) unsafe.Pointer {\n\tif h == nil {\n\t\tpanic(plainError(\"assignment to entry in nil map\"))\n\t}\n\tif raceenabled {\n\t\tcallerpc := getcallerpc()\n\t\tracewritepc(unsafe.Pointer(h), callerpc, funcPC(mapassign_fast32))\n\t}\n\tif h.flags&hashWriting != 0 {\n\t\tthrow(\"concurrent map writes\")\n\t}\n\thash := t.hasher(noescape(unsafe.Pointer(&key)), uintptr(h.hash0))\n\n\th.flags ^= hashWriting\n\n\tif h.buckets == nil {\n\t\th.buckets = newobject(t.bucket)\n\t}\n\nagain:\n\tbucket := hash & bucketMask(h.B)\n\tif h.growing() {\n\t\tgrowWork_fast32(t, h, bucket)\n\t}\n\tb := (*bmap)(unsafe.Pointer(uintptr(h.buckets) + bucket*uintptr(t.bucketsize)))\n\n\tvar insertb *bmap\n\tvar inserti uintptr\n\tvar insertk unsafe.Pointer\n\nbucketloop:\n\tfor {\n\t\tfor i := uintptr(0); i < bucketCnt; i++ {\n\t\t\tif isEmpty(b.tophash[i]) {\n\t\t\t\tif insertb == nil {\n\t\t\t\t\tinserti = i\n\t\t\t\t\tinsertb = b\n\t\t\t\t}\n\t\t\t\tif b.tophash[i] == emptyRest {\n\t\t\t\t\tbreak bucketloop\n\t\t\t\t}\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tk := *((*uint32)(add(unsafe.Pointer(b), dataOffset+i*4)))\n\t\t\tif k != key {\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tinserti = i\n\t\t\tinsertb = b\n\t\t\tgoto done\n\t\t}\n\t\tovf := b.overflow(t)\n\t\tif ovf == nil {\n\t\t\tbreak\n\t\t}\n\t\tb = ovf\n\t}\n\n\tif !h.growing() && (overLoadFactor(h.count+1, h.B) || tooManyOverflowBuckets(h.noverflow, h.B)) {\n\t\thashGrow(t, h)\n\t\tgoto again\n\t}\n\n\tif insertb == nil {\n\n\t\tinsertb = h.newoverflow(t, b)\n\t\tinserti = 0\n\t}\n\tinsertb.tophash[inserti&(bucketCnt-1)] = tophash(hash)\n\n\tinsertk = add(unsafe.Pointer(insertb), dataOffset+inserti*4)\n\n\t*(*uint32)(insertk) = key\n\n\th.count++\n\ndone:\n\telem := add(unsafe.Pointer(insertb), dataOffset+bucketCnt*4+inserti*uintptr(t.elemsize))\n\tif h.flags&hashWriting == 0 {\n\t\tthrow(\"concurrent map writes\")\n\t}\n\th.flags &^= hashWriting\n\treturn elem\n}",
    "defines" : [ 0 ],
    "functions" : [ {
      "name" : "mapassign_fast32",
      "package" : 0,
      "type" : 0,
      "exported" : false
    }, {
      "name" : "getcallerpc",
      "package" : 0,
      "type" : 48,
      "exported" : false
    }, {
      "name" : "racewritepc",
      "package" : 0,
      "type" : 49,
      "exported" : false
    }, {
      "name" : "funcPC",
      "package" : 0,
      "type" : 51,
      "exported" : false
    }, {
      "name" : "throw",
      "package" : 0,
      "type" : 53,
      "exported" : false
    }, {
      "name" : "noescape",
      "package" : 0,
      "type" : 55,
      "exported" : false
    }, {
      "name" : "newobject",
      "package" : 0,
      "type" : 58,
      "exported" : false
    }, {
      "name" : "bucketMask",
      "package" : 0,
      "type" : 60,
      "exported" : false
    }, {
      "name" : "growing",
      "package" : 0,
      "type" : 63,
      "exported" : false
    }, {
      "name" : "growWork_fast32",
      "package" : 0,
      "type" : 64,
      "exported" : false
    }, {
      "name" : "isEmpty",
      "package" : 0,
      "type" : 66,
      "exported" : false
    }, {
      "name" : "add",
      "package" : 0,
      "type" : 68,
      "exported" : false
    }, {
      "name" : "overflow",
      "package" : 0,
      "type" : 73,
      "exported" : false
    }, {
      "name" : "overLoadFactor",
      "package" : 0,
      "type" : 74,
      "exported" : false
    }, {
      "name" : "tooManyOverflowBuckets",
      "package" : 0,
      "type" : 76,
      "exported" : false
    }, {
      "name" : "hashGrow",
      "package" : 0,
      "type" : 78,
      "exported" : false
    }, {
      "name" : "newoverflow",
      "package" : 0,
      "type" : 82,
      "exported" : false
    }, {
      "name" : "tophash",
      "package" : 0,
      "type" : 83,
      "exported" : false
    } ],
    "line-end" : 180,
    "line-start" : 92,
    "names" : [ "mapassign_fast32" ],
    "package" : 0,
    "packages" : [ {
      "name" : "runtime",
      "path" : "runtime"
    }, {
      "name" : "unsafe",
      "path" : "unsafe"
    } ],
    "params" : [ 0, 1, 2 ],
    "receivers" : [ ],
    "results" : [ 3 ],
    "type" : "function",
    "types" : [ {
      "name" : "func(t *runtime.maptype, h *runtime.hmap, key uint32) unsafe.Pointer",
      "params" : 1,
      "recv" : -1,
      "results" : 39,
      "type" : "Signature",
      "underlying" : 0,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "t",
        "type" : 2
      }, {
        "name" : "h",
        "type" : 26
      }, {
        "name" : "key",
        "type" : 8
      } ],
      "name" : "(t *runtime.maptype, h *runtime.hmap, key uint32)",
      "type" : "Tuple",
      "underlying" : 1
    }, {
      "elem" : 3,
      "name" : "*runtime.maptype",
      "type" : "Pointer",
      "underlying" : 2
    }, {
      "local-name" : "maptype",
      "name" : "runtime.maptype",
      "package" : 0,
      "type" : "Named",
      "underlying" : 4
    }, {
      "fields" : [ {
        "name" : "typ",
        "type" : 5
      }, {
        "name" : "key",
        "type" : 21
      }, {
        "name" : "elem",
        "type" : 21
      }, {
        "name" : "bucket",
        "type" : 21
      }, {
        "name" : "hasher",
        "type" : 22
      }, {
        "name" : "keysize",
        "type" : 10
      }, {
        "name" : "elemsize",
        "type" : 10
      }, {
        "name" : "bucketsize",
        "type" : 25
      }, {
        "name" : "flags",
        "type" : 8
      } ],
      "name" : "struct{typ runtime._type; key *runtime._type; elem *runtime._type; bucket *runtime._type; hasher func(unsafe.Pointer, uintptr) uintptr; keysize uint8; elemsize uint8; bucketsize uint16; flags uint32}",
      "type" : "Struct",
      "underlying" : 4
    }, {
      "local-name" : "_type",
      "name" : "runtime._type",
      "package" : 0,
      "type" : "Named",
      "underlying" : 6
    }, {
      "fields" : [ {
        "name" : "size",
        "type" : 7
      }, {
        "name" : "ptrdata",
        "type" : 7
      }, {
        "name" : "hash",
        "type" : 8
      }, {
        "name" : "tflag",
        "type" : 9
      }, {
        "name" : "align",
        "type" : 10
      }, {
        "name" : "fieldAlign",
        "type" : 10
      }, {
        "name" : "kind",
        "type" : 10
      }, {
        "name" : "equal",
        "type" : 11
      }, {
        "name" : "gcdata",
        "type" : 16
      }, {
        "name" : "str",
        "type" : 18
      }, {
        "name" : "ptrToThis",
        "type" : 20
      } ],
      "name" : "struct{size uintptr; ptrdata uintptr; hash uint32; tflag runtime.tflag; align uint8; fieldAlign uint8; kind uint8; equal func(unsafe.Pointer, unsafe.Pointer) bool; gcdata *byte; str runtime.nameOff; ptrToThis runtime.typeOff}",
      "type" : "Struct",
      "underlying" : 6
    }, {
      "name" : "uintptr",
      "type" : "Basic",
      "underlying" : 7
    }, {
      "name" : "uint32",
      "type" : "Basic",
      "underlying" : 8
    }, {
      "local-name" : "tflag",
      "name" : "runtime.tflag",
      "package" : 0,
      "type" : "Named",
      "underlying" : 10
    }, {
      "name" : "uint8",
      "type" : "Basic",
      "underlying" : 10
    }, {
      "name" : "func(unsafe.Pointer, unsafe.Pointer) bool",
      "params" : 12,
      "recv" : -1,
      "results" : 14,
      "type" : "Signature",
      "underlying" : 11,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 13
      }, {
        "name" : "",
        "type" : 13
      } ],
      "name" : "(unsafe.Pointer, unsafe.Pointer)",
      "type" : "Tuple",
      "underlying" : 12
    }, {
      "local-name" : "Pointer",
      "name" : "unsafe.Pointer",
      "package" : 1,
      "type" : "Basic",
      "underlying" : 13
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 15
      } ],
      "name" : "(bool)",
      "type" : "Tuple",
      "underlying" : 14
    }, {
      "name" : "bool",
      "type" : "Basic",
      "underlying" : 15
    }, {
      "elem" : 17,
      "name" : "*byte",
      "type" : "Pointer",
      "underlying" : 16
    }, {
      "name" : "byte",
      "type" : "Basic",
      "underlying" : 17
    }, {
      "local-name" : "nameOff",
      "name" : "runtime.nameOff",
      "package" : 0,
      "type" : "Named",
      "underlying" : 19
    }, {
      "name" : "int32",
      "type" : "Basic",
      "underlying" : 19
    }, {
      "local-name" : "typeOff",
      "name" : "runtime.typeOff",
      "package" : 0,
      "type" : "Named",
      "underlying" : 19
    }, {
      "elem" : 5,
      "name" : "*runtime._type",
      "type" : "Pointer",
      "underlying" : 21
    }, {
      "name" : "func(unsafe.Pointer, uintptr) uintptr",
      "params" : 23,
      "recv" : -1,
      "results" : 24,
      "type" : "Signature",
      "underlying" : 22,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 13
      }, {
        "name" : "",
        "type" : 7
      } ],
      "name" : "(unsafe.Pointer, uintptr)",
      "type" : "Tuple",
      "underlying" : 23
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 7
      } ],
      "name" : "(uintptr)",
      "type" : "Tuple",
      "underlying" : 24
    }, {
      "name" : "uint16",
      "type" : "Basic",
      "underlying" : 25
    }, {
      "elem" : 27,
      "name" : "*runtime.hmap",
      "type" : "Pointer",
      "underlying" : 26
    }, {
      "local-name" : "hmap",
      "name" : "runtime.hmap",
      "package" : 0,
      "type" : "Named",
      "underlying" : 28
    }, {
      "fields" : [ {
        "name" : "count",
        "type" : 29
      }, {
        "name" : "flags",
        "type" : 10
      }, {
        "name" : "B",
        "type" : 10
      }, {
        "name" : "noverflow",
        "type" : 25
      }, {
        "name" : "hash0",
        "type" : 8
      }, {
        "name" : "buckets",
        "type" : 13
      }, {
        "name" : "oldbuckets",
        "type" : 13
      }, {
        "name" : "nevacuate",
        "type" : 7
      }, {
        "name" : "extra",
        "type" : 30
      } ],
      "name" : "struct{count int; flags uint8; B uint8; noverflow uint16; hash0 uint32; buckets unsafe.Pointer; oldbuckets unsafe.Pointer; nevacuate uintptr; extra *runtime.mapextra}",
      "type" : "Struct",
      "underlying" : 28
    }, {
      "name" : "int",
      "type" : "Basic",
      "underlying" : 29
    }, {
      "elem" : 31,
      "name" : "*runtime.mapextra",
      "type" : "Pointer",
      "underlying" : 30
    }, {
      "local-name" : "mapextra",
      "name" : "runtime.mapextra",
      "package" : 0,
      "type" : "Named",
      "underlying" : 32
    }, {
      "fields" : [ {
        "name" : "overflow",
        "type" : 33
      }, {
        "name" : "oldoverflow",
        "type" : 33
      }, {
        "name" : "nextOverflow",
        "type" : 35
      } ],
      "name" : "struct{overflow *[]*runtime.bmap; oldoverflow *[]*runtime.bmap; nextOverflow *runtime.bmap}",
      "type" : "Struct",
      "underlying" : 32
    }, {
      "elem" : 34,
      "name" : "*[]*runtime.bmap",
      "type" : "Pointer",
      "underlying" : 33
    }, {
      "elem" : 35,
      "name" : "[]*runtime.bmap",
      "type" : "Slice",
      "underlying" : 34
    }, {
      "elem" : 36,
      "name" : "*runtime.bmap",
      "type" : "Pointer",
      "underlying" : 35
    }, {
      "local-name" : "bmap",
      "name" : "runtime.bmap",
      "package" : 0,
      "type" : "Named",
      "underlying" : 37
    }, {
      "fields" : [ {
        "name" : "tophash",
        "type" : 38
      } ],
      "name" : "struct{tophash [8]uint8}",
      "type" : "Struct",
      "underlying" : 37
    }, {
      "elem" : 10,
      "name" : "[8]uint8",
      "type" : "Array",
      "underlying" : 38
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 13
      } ],
      "name" : "(unsafe.Pointer)",
      "type" : "Tuple",
      "underlying" : 39
    }, {
      "name" : "untyped bool",
      "type" : "Basic",
      "underlying" : 40
    }, {
      "name" : "untyped nil",
      "type" : "Basic",
      "underlying" : 41
    }, {
      "fields" : [ ],
      "name" : "()",
      "type" : "Tuple",
      "underlying" : 42
    }, {
      "name" : "func(interface{})",
      "params" : 44,
      "recv" : -1,
      "results" : 42,
      "type" : "Signature",
      "underlying" : 43,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 45
      } ],
      "name" : "(interface{})",
      "type" : "Tuple",
      "underlying" : 44
    }, {
      "methods" : [ ],
      "name" : "interface{}",
      "type" : "Interface",
      "underlying" : 45
    }, {
      "local-name" : "plainError",
      "name" : "runtime.plainError",
      "package" : 0,
      "type" : "Named",
      "underlying" : 47
    }, {
      "name" : "string",
      "type" : "Basic",
      "underlying" : 47
    }, {
      "name" : "func() uintptr",
      "params" : 42,
      "recv" : -1,
      "results" : 24,
      "type" : "Signature",
      "underlying" : 48,
      "variadic" : false
    }, {
      "name" : "func(addr unsafe.Pointer, callerpc uintptr, pc uintptr)",
      "params" : 50,
      "recv" : -1,
      "results" : 42,
      "type" : "Signature",
      "underlying" : 49,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "addr",
        "type" : 13
      }, {
        "name" : "callerpc",
        "type" : 7
      }, {
        "name" : "pc",
        "type" : 7
      } ],
      "name" : "(addr unsafe.Pointer, callerpc uintptr, pc uintptr)",
      "type" : "Tuple",
      "underlying" : 50
    }, {
      "name" : "func(f interface{}) uintptr",
      "params" : 52,
      "recv" : -1,
      "results" : 24,
      "type" : "Signature",
      "underlying" : 51,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "f",
        "type" : 45
      } ],
      "name" : "(f interface{})",
      "type" : "Tuple",
      "underlying" : 52
    }, {
      "name" : "func(s string)",
      "params" : 54,
      "recv" : -1,
      "results" : 42,
      "type" : "Signature",
      "underlying" : 53,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "s",
        "type" : 47
      } ],
      "name" : "(s string)",
      "type" : "Tuple",
      "underlying" : 54
    }, {
      "name" : "func(p unsafe.Pointer) unsafe.Pointer",
      "params" : 56,
      "recv" : -1,
      "results" : 39,
      "type" : "Signature",
      "underlying" : 55,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "p",
        "type" : 13
      } ],
      "name" : "(p unsafe.Pointer)",
      "type" : "Tuple",
      "underlying" : 56
    }, {
      "elem" : 8,
      "name" : "*uint32",
      "type" : "Pointer",
      "underlying" : 57
    }, {
      "name" : "func(typ *runtime._type) unsafe.Pointer",
      "params" : 59,
      "recv" : -1,
      "results" : 39,
      "type" : "Signature",
      "underlying" : 58,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "typ",
        "type" : 21
      } ],
      "name" : "(typ *runtime._type)",
      "type" : "Tuple",
      "underlying" : 59
    }, {
      "name" : "func(b uint8) uintptr",
      "params" : 61,
      "recv" : -1,
      "results" : 24,
      "type" : "Signature",
      "underlying" : 60,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "b",
        "type" : 10
      } ],
      "name" : "(b uint8)",
      "type" : "Tuple",
      "underlying" : 61
    }, {
      "name" : "func() bool",
      "params" : 42,
      "recv" : -1,
      "results" : 14,
      "type" : "Signature",
      "underlying" : 62,
      "variadic" : false
    }, {
      "name" : "(*runtime.hmap) func() bool",
      "params" : 42,
      "recv" : 13,
      "results" : 14,
      "type" : "Signature",
      "underlying" : 63,
      "variadic" : false
    }, {
      "name" : "func(t *runtime.maptype, h *runtime.hmap, bucket uintptr)",
      "params" : 65,
      "recv" : -1,
      "results" : 42,
      "type" : "Signature",
      "underlying" : 64,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "t",
        "type" : 2
      }, {
        "name" : "h",
        "type" : 26
      }, {
        "name" : "bucket",
        "type" : 7
      } ],
      "name" : "(t *runtime.maptype, h *runtime.hmap, bucket uintptr)",
      "type" : "Tuple",
      "underlying" : 65
    }, {
      "name" : "func(x uint8) bool",
      "params" : 67,
      "recv" : -1,
      "results" : 14,
      "type" : "Signature",
      "underlying" : 66,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "x",
        "type" : 10
      } ],
      "name" : "(x uint8)",
      "type" : "Tuple",
      "underlying" : 67
    }, {
      "name" : "func(p unsafe.Pointer, x uintptr) unsafe.Pointer",
      "params" : 69,
      "recv" : -1,
      "results" : 39,
      "type" : "Signature",
      "underlying" : 68,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "p",
        "type" : 13
      }, {
        "name" : "x",
        "type" : 7
      } ],
      "name" : "(p unsafe.Pointer, x uintptr)",
      "type" : "Tuple",
      "underlying" : 69
    }, {
      "name" : "func(t *runtime.maptype) *runtime.bmap",
      "params" : 71,
      "recv" : -1,
      "results" : 72,
      "type" : "Signature",
      "underlying" : 70,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "t",
        "type" : 2
      } ],
      "name" : "(t *runtime.maptype)",
      "type" : "Tuple",
      "underlying" : 71
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 35
      } ],
      "name" : "(*runtime.bmap)",
      "type" : "Tuple",
      "underlying" : 72
    }, {
      "name" : "(*runtime.bmap) func(t *runtime.maptype) *runtime.bmap",
      "params" : 71,
      "recv" : 22,
      "results" : 72,
      "type" : "Signature",
      "underlying" : 73,
      "variadic" : false
    }, {
      "name" : "func(count int, B uint8) bool",
      "params" : 75,
      "recv" : -1,
      "results" : 14,
      "type" : "Signature",
      "underlying" : 74,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "count",
        "type" : 29
      }, {
        "name" : "B",
        "type" : 10
      } ],
      "name" : "(count int, B uint8)",
      "type" : "Tuple",
      "underlying" : 75
    }, {
      "name" : "func(noverflow uint16, B uint8) bool",
      "params" : 77,
      "recv" : -1,
      "results" : 14,
      "type" : "Signature",
      "underlying" : 76,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "noverflow",
        "type" : 25
      }, {
        "name" : "B",
        "type" : 10
      } ],
      "name" : "(noverflow uint16, B uint8)",
      "type" : "Tuple",
      "underlying" : 77
    }, {
      "name" : "func(t *runtime.maptype, h *runtime.hmap)",
      "params" : 79,
      "recv" : -1,
      "results" : 42,
      "type" : "Signature",
      "underlying" : 78,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "t",
        "type" : 2
      }, {
        "name" : "h",
        "type" : 26
      } ],
      "name" : "(t *runtime.maptype, h *runtime.hmap)",
      "type" : "Tuple",
      "underlying" : 79
    }, {
      "name" : "func(t *runtime.maptype, b *runtime.bmap) *runtime.bmap",
      "params" : 81,
      "recv" : -1,
      "results" : 72,
      "type" : "Signature",
      "underlying" : 80,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "t",
        "type" : 2
      }, {
        "name" : "b",
        "type" : 35
      } ],
      "name" : "(t *runtime.maptype, b *runtime.bmap)",
      "type" : "Tuple",
      "underlying" : 81
    }, {
      "name" : "(*runtime.hmap) func(t *runtime.maptype, b *runtime.bmap) *runtime.bmap",
      "params" : 81,
      "recv" : 26,
      "results" : 72,
      "type" : "Signature",
      "underlying" : 82,
      "variadic" : false
    }, {
      "name" : "func(hash uintptr) uint8",
      "params" : 84,
      "recv" : -1,
      "results" : 85,
      "type" : "Signature",
      "underlying" : 83,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "hash",
        "type" : 7
      } ],
      "name" : "(hash uintptr)",
      "type" : "Tuple",
      "underlying" : 84
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 10
      } ],
      "name" : "(uint8)",
      "type" : "Tuple",
      "underlying" : 85
    } ],
    "variables" : [ {
      "name" : "t",
      "package" : 0,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "h",
      "package" : 0,
      "type" : 26,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "key",
      "package" : 0,
      "type" : 8,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "[res0]",
      "package" : 0,
      "type" : 13,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "callerpc",
      "package" : 0,
      "type" : 7,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "flags",
      "package" : 0,
      "type" : 10,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "hasher",
      "package" : 0,
      "type" : 22,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "hash0",
      "package" : 0,
      "type" : 8,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "hash",
      "package" : 0,
      "type" : 7,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "buckets",
      "package" : 0,
      "type" : 13,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "bucket",
      "package" : 0,
      "type" : 21,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "B",
      "package" : 0,
      "type" : 10,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "bucket",
      "package" : 0,
      "type" : 7,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "h",
      "package" : 0,
      "type" : 26,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "bucketsize",
      "package" : 0,
      "type" : 25,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "b",
      "package" : 0,
      "type" : 35,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "insertb",
      "package" : 0,
      "type" : 35,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "inserti",
      "package" : 0,
      "type" : 7,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "insertk",
      "package" : 0,
      "type" : 13,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "i",
      "package" : 0,
      "type" : 7,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "tophash",
      "package" : 0,
      "type" : 38,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "k",
      "package" : 0,
      "type" : 8,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "b",
      "package" : 0,
      "type" : 35,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "ovf",
      "package" : 0,
      "type" : 35,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "count",
      "package" : 0,
      "type" : 29,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "noverflow",
      "package" : 0,
      "type" : 25,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "h",
      "package" : 0,
      "type" : 26,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "elemsize",
      "package" : 0,
      "type" : 10,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "elem",
      "package" : 0,
      "type" : 13,
      "exported" : false,
      "embedded" : false,
      "field" : false
    } ]
  },
  "go-version" : "1.14.3"
}