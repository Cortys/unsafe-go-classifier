{
  "usage" : {
    "file" : "alg.go",
    "label1" : "cast-header",
    "label2" : "types",
    "line" : "317",
    "module" : "std",
    "pkg" : "runtime",
    "project" : "kubernetes/kubernetes",
    "snippet" : "s := (*slice)(unsafe.Pointer(&b))",
    "version" : "std"
  },
  "cfg" : {
    "blocks" : [ {
      "update-vars" : [ ],
      "successors" : [ 2 ],
      "in-vars" : [ 0, 1 ],
      "exit" : false,
      "out-vars" : [ 0, 1 ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[entry]",
      "entry" : true,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ ],
      "in-vars" : [ ],
      "exit" : true,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[exit]",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 3 ],
      "in-vars" : [ 0, 1 ],
      "exit" : false,
      "out-vars" : [ 3, 1 ],
      "decl-vars" : [ 3 ],
      "line-start" : 317,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "s"
          }
        } ],
        "right" : [ {
          "coerced-to" : {
            "contained" : {
              "go-type" : 7,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 7,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "slice"
              }
            },
            "go-type" : 6,
            "kind" : "type",
            "type" : "pointer"
          },
          "go-type" : 6,
          "kind" : "expression",
          "target" : {
            "coerced-to" : {
              "go-type" : 9,
              "kind" : "type",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 1,
                "value" : "unsafe"
              },
              "type" : "identifier",
              "value" : {
                "go-type" : 9,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "Pointer"
              }
            },
            "go-type" : 9,
            "kind" : "expression",
            "target" : {
              "go-type" : 11,
              "kind" : "expression",
              "operator" : "&",
              "target" : {
                "go-type" : 2,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "b",
                  "variable" : 0
                }
              },
              "type" : "unary"
            },
            "type" : "cast"
          },
          "type" : "cast"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 317,
      "code" : "s := (*slice)(unsafe.Pointer(&b))",
      "entry" : false,
      "use-vars" : [ 0 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 3, 1 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 318,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "arguments" : [ {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "array",
              "variable" : 4
            },
            "go-type" : 9,
            "kind" : "expression",
            "target" : {
              "go-type" : 6,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "s",
                "variable" : 3
              }
            },
            "type" : "selector"
          }, {
            "go-type" : 4,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "seed",
              "variable" : 1
            }
          }, {
            "coerced-to" : {
              "go-type" : 4,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 4,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "uintptr"
              }
            },
            "go-type" : 4,
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "len",
                "variable" : 5
              },
              "go-type" : 10,
              "kind" : "expression",
              "target" : {
                "go-type" : 6,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "s",
                  "variable" : 3
                }
              },
              "type" : "selector"
            },
            "type" : "cast"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 12,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "memhash"
            }
          },
          "go-type" : 4,
          "kind" : "expression",
          "type" : "call"
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 318,
      "code" : "return memhash(s.array, seed, uintptr(s.len))",
      "entry" : false,
      "use-vars" : [ 3, 1 ]
    } ],
    "code" : "func bytesHash(b []byte, seed uintptr) uintptr {\n\ts := (*slice)(unsafe.Pointer(&b))\n\treturn memhash(s.array, seed, uintptr(s.len))\n}",
    "defines" : [ 0 ],
    "functions" : [ {
      "name" : "bytesHash",
      "package" : 0,
      "type" : 0,
      "exported" : false
    }, {
      "name" : "memhash",
      "package" : 0,
      "type" : 12,
      "exported" : false
    } ],
    "line-end" : 319,
    "line-start" : 316,
    "names" : [ "bytesHash" ],
    "package" : 0,
    "packages" : [ {
      "name" : "runtime",
      "path" : "runtime"
    }, {
      "name" : "unsafe",
      "path" : "unsafe"
    } ],
    "params" : [ 0, 1 ],
    "receivers" : [ ],
    "results" : [ 2 ],
    "type" : "function",
    "types" : [ {
      "name" : "func(b []byte, seed uintptr) uintptr",
      "params" : 1,
      "recv" : -1,
      "results" : 5,
      "type" : "Signature",
      "underlying" : 0,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "b",
        "type" : 2
      }, {
        "name" : "seed",
        "type" : 4
      } ],
      "name" : "(b []byte, seed uintptr)",
      "type" : "Tuple",
      "underlying" : 1
    }, {
      "elem" : 3,
      "name" : "[]byte",
      "type" : "Slice",
      "underlying" : 2
    }, {
      "name" : "byte",
      "type" : "Basic",
      "underlying" : 3
    }, {
      "name" : "uintptr",
      "type" : "Basic",
      "underlying" : 4
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 4
      } ],
      "name" : "(uintptr)",
      "type" : "Tuple",
      "underlying" : 5
    }, {
      "elem" : 7,
      "name" : "*runtime.slice",
      "type" : "Pointer",
      "underlying" : 6
    }, {
      "local-name" : "slice",
      "name" : "runtime.slice",
      "package" : 0,
      "type" : "Named",
      "underlying" : 8
    }, {
      "fields" : [ {
        "name" : "array",
        "type" : 9
      }, {
        "name" : "len",
        "type" : 10
      }, {
        "name" : "cap",
        "type" : 10
      } ],
      "name" : "struct{array unsafe.Pointer; len int; cap int}",
      "type" : "Struct",
      "underlying" : 8
    }, {
      "local-name" : "Pointer",
      "name" : "unsafe.Pointer",
      "package" : 1,
      "type" : "Basic",
      "underlying" : 9
    }, {
      "name" : "int",
      "type" : "Basic",
      "underlying" : 10
    }, {
      "elem" : 2,
      "name" : "*[]byte",
      "type" : "Pointer",
      "underlying" : 11
    }, {
      "name" : "func(p unsafe.Pointer, h uintptr, s uintptr) uintptr",
      "params" : 13,
      "recv" : -1,
      "results" : 5,
      "type" : "Signature",
      "underlying" : 12,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "p",
        "type" : 9
      }, {
        "name" : "h",
        "type" : 4
      }, {
        "name" : "s",
        "type" : 4
      } ],
      "name" : "(p unsafe.Pointer, h uintptr, s uintptr)",
      "type" : "Tuple",
      "underlying" : 13
    } ],
    "variables" : [ {
      "name" : "b",
      "package" : 0,
      "type" : 2,
      "exported" : false
    }, {
      "name" : "seed",
      "package" : 0,
      "type" : 4,
      "exported" : false
    }, {
      "name" : "[res0]",
      "package" : 0,
      "type" : 4,
      "exported" : false
    }, {
      "name" : "s",
      "package" : 0,
      "type" : 6,
      "exported" : false
    }, {
      "name" : "array",
      "package" : 0,
      "type" : 9,
      "exported" : false
    }, {
      "name" : "len",
      "package" : 0,
      "type" : 10,
      "exported" : false
    } ]
  },
  "go-version" : "1.14.3"
}