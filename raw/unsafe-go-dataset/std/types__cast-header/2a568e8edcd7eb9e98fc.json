{
  "usage" : {
    "file" : "value.go",
    "label1" : "cast-header",
    "label2" : "types",
    "line" : "1815",
    "module" : "std",
    "pkg" : "reflect",
    "project" : "kubernetes/kubernetes",
    "snippet" : "s := (*sliceHeader)(unsafe.Pointer(&x))",
    "version" : "std"
  },
  "cfg" : {
    "blocks" : [ {
      "update-vars" : [ ],
      "successors" : [ 2 ],
      "in-vars" : [ 2, 1, 3, 0 ],
      "exit" : false,
      "out-vars" : [ 2, 1, 3, 0 ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[entry]",
      "entry" : true,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ ],
      "in-vars" : [ ],
      "exit" : true,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[exit]",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 4 ],
      "in-vars" : [ 2, 1, 3, 0 ],
      "exit" : false,
      "out-vars" : [ 3, 0, 5, 6, 7, 2, 1 ],
      "decl-vars" : [ 6, 7, 5 ],
      "line-start" : 1781,
      "ast" : {
        "kind" : "statement",
        "target" : {
          "kind" : "decl",
          "specs" : [ {
            "comments" : [ ],
            "declared-type" : {
              "go-type" : 2,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 2,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "int"
              }
            },
            "kind" : "spec",
            "names" : [ {
              "ident-kind" : "NoKind",
              "kind" : "ident",
              "value" : "cap"
            } ],
            "type" : "var",
            "values" : [ ]
          }, {
            "comments" : [ ],
            "declared-type" : {
              "contained" : {
                "go-type" : 25,
                "kind" : "type",
                "type" : "identifier",
                "value" : {
                  "go-type" : 25,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "sliceType"
                }
              },
              "go-type" : 24,
              "kind" : "type",
              "type" : "pointer"
            },
            "kind" : "spec",
            "names" : [ {
              "ident-kind" : "NoKind",
              "kind" : "ident",
              "value" : "typ"
            } ],
            "type" : "var",
            "values" : [ ]
          }, {
            "comments" : [ ],
            "declared-type" : {
              "go-type" : 15,
              "kind" : "type",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 1,
                "value" : "unsafe"
              },
              "type" : "identifier",
              "value" : {
                "go-type" : 15,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "Pointer"
              }
            },
            "kind" : "spec",
            "names" : [ {
              "ident-kind" : "NoKind",
              "kind" : "ident",
              "value" : "base"
            } ],
            "type" : "var",
            "values" : [ ]
          } ],
          "type" : "var"
        },
        "type" : "declaration"
      },
      "assign-vars" : [ ],
      "line-end" : 1785,
      "code" : "var (\n\tcap  int\n\ttyp  *sliceType\n\tbase unsafe.Pointer\n)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 5, 7, 14 ],
      "in-vars" : [ 6, 7, 2, 1, 3, 0, 9, 5 ],
      "exit" : false,
      "out-vars" : [ 0, 5, 6, 7, 2, 1, 3 ],
      "decl-vars" : [ ],
      "line-start" : 1786,
      "ast" : {
        "condition" : {
          "go-type" : 27,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "kind",
            "variable" : 9
          }
        },
        "kind" : "statement",
        "type" : "switch"
      },
      "assign-vars" : [ ],
      "line-end" : 1804,
      "code" : "switch kind := v.kind(); kind {\ndefault:\n\tpanic(&ValueError{\"reflect.Value.Slice3\", v.kind()})\n\ncase Array:\n\tif v.flag&flagAddr == 0 {\n\t\tpanic(\"reflect.Value.Slice3: slice of unaddressable array\")\n\t}\n\ttt := (*arrayType)(unsafe.Pointer(v.typ))\n\tcap = int(tt.len)\n\ttyp = (*sliceType)(unsafe.Pointer(tt.slice))\n\tbase = v.ptr\n\ncase Slice:\n\ttyp = (*sliceType)(unsafe.Pointer(v.typ))\n\ts := (*sliceHeader)(v.ptr)\n\tbase = s.Data\n\tcap = s.Cap\n}",
      "entry" : false,
      "use-vars" : [ 9 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 3 ],
      "in-vars" : [ 7, 2, 1, 3, 0, 5, 6 ],
      "exit" : false,
      "out-vars" : [ 2, 1, 3, 0, 9, 5, 6, 7 ],
      "decl-vars" : [ 9 ],
      "line-start" : 1786,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "kind"
          }
        } ],
        "right" : [ {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "function" : 1,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "kind"
            },
            "go-type" : 29,
            "kind" : "expression",
            "target" : {
              "go-type" : 4,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "v",
                "variable" : 0
              }
            },
            "type" : "selector"
          },
          "go-type" : 27,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 1786,
      "code" : "kind := v.kind()",
      "entry" : false,
      "use-vars" : [ 0 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 6 ],
      "in-vars" : [ 5, 6, 7, 2, 1, 3, 0 ],
      "exit" : false,
      "out-vars" : [ 6, 7, 2, 1, 3, 0, 5 ],
      "decl-vars" : [ ],
      "line-start" : 1787,
      "ast" : {
        "expressions" : [ ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 1788,
      "code" : "default:\n\tpanic(&ValueError{\"reflect.Value.Slice3\", v.kind()})",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 19 ],
      "in-vars" : [ 1, 3, 0, 5, 6, 7, 2 ],
      "exit" : false,
      "out-vars" : [ 1, 3, 0, 5, 6, 7, 2 ],
      "decl-vars" : [ ],
      "line-start" : 1788,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 36,
            "kind" : "expression",
            "operator" : "&",
            "target" : {
              "declared" : {
                "go-type" : 37,
                "kind" : "type",
                "type" : "identifier",
                "value" : {
                  "go-type" : 37,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "ValueError"
                }
              },
              "go-type" : 37,
              "kind" : "literal",
              "type" : "composite",
              "values" : [ {
                "go-type" : 39,
                "kind" : "constant",
                "value" : {
                  "type" : "STRING",
                  "value" : "reflect.Value.Slice3"
                }
              }, {
                "arguments" : [ ],
                "ellipsis" : false,
                "function" : {
                  "field" : {
                    "function" : 1,
                    "ident-kind" : "Func",
                    "kind" : "ident",
                    "value" : "kind"
                  },
                  "go-type" : 29,
                  "kind" : "expression",
                  "target" : {
                    "go-type" : 4,
                    "kind" : "expression",
                    "type" : "identifier",
                    "value" : {
                      "ident-kind" : "Var",
                      "kind" : "ident",
                      "value" : "v",
                      "variable" : 0
                    }
                  },
                  "type" : "selector"
                },
                "go-type" : 27,
                "kind" : "expression",
                "type" : "call"
              } ]
            },
            "type" : "unary"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 33,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Builtin",
              "kind" : "ident",
              "value" : "panic"
            }
          },
          "go-type" : 30,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 1788,
      "code" : "panic(&ValueError{\"reflect.Value.Slice3\", v.kind()})",
      "entry" : false,
      "use-vars" : [ 0 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 8 ],
      "in-vars" : [ 3, 0, 2, 1 ],
      "exit" : false,
      "out-vars" : [ 2, 1, 3, 0 ],
      "decl-vars" : [ ],
      "line-start" : 1790,
      "ast" : {
        "expressions" : [ {
          "go-type" : 27,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "17"
          }
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 1797,
      "code" : "case Array:\n\tif v.flag&flagAddr == 0 {\n\t\tpanic(\"reflect.Value.Slice3: slice of unaddressable array\")\n\t}\n\ttt := (*arrayType)(unsafe.Pointer(v.typ))\n\tcap = int(tt.len)\n\ttyp = (*sliceType)(unsafe.Pointer(tt.slice))\n\tbase = v.ptr",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 9, 10 ],
      "in-vars" : [ 3, 0, 2, 1 ],
      "exit" : false,
      "out-vars" : [ 2, 1, 3, 0 ],
      "decl-vars" : [ ],
      "line-start" : 1791,
      "ast" : {
        "condition" : {
          "go-type" : 40,
          "kind" : "expression",
          "left" : {
            "go-type" : 23,
            "kind" : "expression",
            "left" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "flag",
                "variable" : 10
              },
              "go-type" : 23,
              "kind" : "expression",
              "target" : {
                "go-type" : 4,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "v",
                  "variable" : 0
                }
              },
              "type" : "selector"
            },
            "operator" : "&",
            "right" : {
              "go-type" : 23,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "256"
              }
            },
            "type" : "binary"
          },
          "operator" : "==",
          "right" : {
            "go-type" : 23,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 1793,
      "code" : "if v.flag&flagAddr == 0 {\n\tpanic(\"reflect.Value.Slice3: slice of unaddressable array\")\n}",
      "entry" : false,
      "use-vars" : [ 0 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 10 ],
      "in-vars" : [ 2, 1, 3, 0 ],
      "exit" : false,
      "out-vars" : [ 1, 3, 0, 2 ],
      "decl-vars" : [ ],
      "line-start" : 1792,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 39,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "reflect.Value.Slice3: slice of unaddressable array"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 33,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Builtin",
              "kind" : "ident",
              "value" : "panic"
            }
          },
          "go-type" : 30,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 1792,
      "code" : "panic(\"reflect.Value.Slice3: slice of unaddressable array\")",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 11 ],
      "in-vars" : [ 3, 0, 2, 1 ],
      "exit" : false,
      "out-vars" : [ 2, 1, 3, 0, 12 ],
      "decl-vars" : [ 12 ],
      "line-start" : 1794,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "tt"
          }
        } ],
        "right" : [ {
          "coerced-to" : {
            "contained" : {
              "go-type" : 42,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 42,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "arrayType"
              }
            },
            "go-type" : 41,
            "kind" : "type",
            "type" : "pointer"
          },
          "go-type" : 41,
          "kind" : "expression",
          "target" : {
            "coerced-to" : {
              "go-type" : 15,
              "kind" : "type",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 1,
                "value" : "unsafe"
              },
              "type" : "identifier",
              "value" : {
                "go-type" : 15,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "Pointer"
              }
            },
            "go-type" : 15,
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "typ",
                "variable" : 11
              },
              "go-type" : 6,
              "kind" : "expression",
              "target" : {
                "go-type" : 4,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "v",
                  "variable" : 0
                }
              },
              "type" : "selector"
            },
            "type" : "cast"
          },
          "type" : "cast"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 1794,
      "code" : "tt := (*arrayType)(unsafe.Pointer(v.typ))",
      "entry" : false,
      "use-vars" : [ 0 ]
    }, {
      "update-vars" : [ 5 ],
      "successors" : [ 12 ],
      "in-vars" : [ 0, 12, 2, 1, 3 ],
      "exit" : false,
      "out-vars" : [ 1, 3, 0, 5, 12, 2 ],
      "decl-vars" : [ ],
      "line-start" : 1795,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 2,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "cap",
            "variable" : 5
          }
        } ],
        "right" : [ {
          "coerced-to" : {
            "go-type" : 2,
            "kind" : "type",
            "type" : "identifier",
            "value" : {
              "go-type" : 2,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "int"
            }
          },
          "go-type" : 2,
          "kind" : "expression",
          "target" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "len",
              "variable" : 13
            },
            "go-type" : 9,
            "kind" : "expression",
            "target" : {
              "go-type" : 41,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "tt",
                "variable" : 12
              }
            },
            "type" : "selector"
          },
          "type" : "cast"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 5 ],
      "line-end" : 1795,
      "code" : "cap = int(tt.len)",
      "entry" : false,
      "use-vars" : [ 12 ]
    }, {
      "update-vars" : [ 6 ],
      "successors" : [ 13 ],
      "in-vars" : [ 12, 2, 1, 3, 0, 5 ],
      "exit" : false,
      "out-vars" : [ 2, 1, 3, 0, 5, 6 ],
      "decl-vars" : [ ],
      "line-start" : 1796,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 24,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "typ",
            "variable" : 6
          }
        } ],
        "right" : [ {
          "coerced-to" : {
            "contained" : {
              "go-type" : 25,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 25,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "sliceType"
              }
            },
            "go-type" : 24,
            "kind" : "type",
            "type" : "pointer"
          },
          "go-type" : 24,
          "kind" : "expression",
          "target" : {
            "coerced-to" : {
              "go-type" : 15,
              "kind" : "type",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 1,
                "value" : "unsafe"
              },
              "type" : "identifier",
              "value" : {
                "go-type" : 15,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "Pointer"
              }
            },
            "go-type" : 15,
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "slice",
                "variable" : 14
              },
              "go-type" : 6,
              "kind" : "expression",
              "target" : {
                "go-type" : 41,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "tt",
                  "variable" : 12
                }
              },
              "type" : "selector"
            },
            "type" : "cast"
          },
          "type" : "cast"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 6 ],
      "line-end" : 1796,
      "code" : "typ = (*sliceType)(unsafe.Pointer(tt.slice))",
      "entry" : false,
      "use-vars" : [ 12 ]
    }, {
      "update-vars" : [ 7 ],
      "successors" : [ 19 ],
      "in-vars" : [ 1, 3, 0, 5, 6, 2 ],
      "exit" : false,
      "out-vars" : [ 5, 6, 7, 2, 1, 3, 0 ],
      "decl-vars" : [ ],
      "line-start" : 1797,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 15,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "base",
            "variable" : 7
          }
        } ],
        "right" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "ptr",
            "variable" : 15
          },
          "go-type" : 15,
          "kind" : "expression",
          "target" : {
            "go-type" : 4,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "v",
              "variable" : 0
            }
          },
          "type" : "selector"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 7 ],
      "line-end" : 1797,
      "code" : "base = v.ptr",
      "entry" : false,
      "use-vars" : [ 0 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 15 ],
      "in-vars" : [ 2, 1, 3, 0 ],
      "exit" : false,
      "out-vars" : [ 3, 0, 2, 1 ],
      "decl-vars" : [ ],
      "line-start" : 1799,
      "ast" : {
        "expressions" : [ {
          "go-type" : 27,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "23"
          }
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 1803,
      "code" : "case Slice:\n\ttyp = (*sliceType)(unsafe.Pointer(v.typ))\n\ts := (*sliceHeader)(v.ptr)\n\tbase = s.Data\n\tcap = s.Cap",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ 6 ],
      "successors" : [ 16 ],
      "in-vars" : [ 0, 2, 1, 3 ],
      "exit" : false,
      "out-vars" : [ 0, 6, 2, 1, 3 ],
      "decl-vars" : [ ],
      "line-start" : 1800,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 24,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "typ",
            "variable" : 6
          }
        } ],
        "right" : [ {
          "coerced-to" : {
            "contained" : {
              "go-type" : 25,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 25,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "sliceType"
              }
            },
            "go-type" : 24,
            "kind" : "type",
            "type" : "pointer"
          },
          "go-type" : 24,
          "kind" : "expression",
          "target" : {
            "coerced-to" : {
              "go-type" : 15,
              "kind" : "type",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 1,
                "value" : "unsafe"
              },
              "type" : "identifier",
              "value" : {
                "go-type" : 15,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "Pointer"
              }
            },
            "go-type" : 15,
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "typ",
                "variable" : 11
              },
              "go-type" : 6,
              "kind" : "expression",
              "target" : {
                "go-type" : 4,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "v",
                  "variable" : 0
                }
              },
              "type" : "selector"
            },
            "type" : "cast"
          },
          "type" : "cast"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 6 ],
      "line-end" : 1800,
      "code" : "typ = (*sliceType)(unsafe.Pointer(v.typ))",
      "entry" : false,
      "use-vars" : [ 0 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 17 ],
      "in-vars" : [ 2, 1, 3, 0, 6 ],
      "exit" : false,
      "out-vars" : [ 6, 16, 2, 1, 3, 0 ],
      "decl-vars" : [ 16 ],
      "line-start" : 1801,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "s"
          }
        } ],
        "right" : [ {
          "coerced-to" : {
            "contained" : {
              "go-type" : 45,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 45,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "sliceHeader"
              }
            },
            "go-type" : 44,
            "kind" : "type",
            "type" : "pointer"
          },
          "go-type" : 44,
          "kind" : "expression",
          "target" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "ptr",
              "variable" : 15
            },
            "go-type" : 15,
            "kind" : "expression",
            "target" : {
              "go-type" : 4,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "v",
                "variable" : 0
              }
            },
            "type" : "selector"
          },
          "type" : "cast"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 1801,
      "code" : "s := (*sliceHeader)(v.ptr)",
      "entry" : false,
      "use-vars" : [ 0 ]
    }, {
      "update-vars" : [ 7 ],
      "successors" : [ 18 ],
      "in-vars" : [ 16, 2, 1, 3, 0, 6 ],
      "exit" : false,
      "out-vars" : [ 6, 7, 16, 2, 1, 3, 0 ],
      "decl-vars" : [ ],
      "line-start" : 1802,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 15,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "base",
            "variable" : 7
          }
        } ],
        "right" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "Data",
            "variable" : 17
          },
          "go-type" : 15,
          "kind" : "expression",
          "target" : {
            "go-type" : 44,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "s",
              "variable" : 16
            }
          },
          "type" : "selector"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 7 ],
      "line-end" : 1802,
      "code" : "base = s.Data",
      "entry" : false,
      "use-vars" : [ 16 ]
    }, {
      "update-vars" : [ 5 ],
      "successors" : [ 19 ],
      "in-vars" : [ 16, 2, 1, 3, 0, 6, 7 ],
      "exit" : false,
      "out-vars" : [ 3, 0, 5, 6, 7, 2, 1 ],
      "decl-vars" : [ ],
      "line-start" : 1803,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 2,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "cap",
            "variable" : 5
          }
        } ],
        "right" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "Cap",
            "variable" : 18
          },
          "go-type" : 2,
          "kind" : "expression",
          "target" : {
            "go-type" : 44,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "s",
              "variable" : 16
            }
          },
          "type" : "selector"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 5 ],
      "line-end" : 1803,
      "code" : "cap = s.Cap",
      "entry" : false,
      "use-vars" : [ 16 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 20, 21 ],
      "in-vars" : [ 2, 1, 3, 0, 5, 6, 7 ],
      "exit" : false,
      "out-vars" : [ 6, 7, 2, 1, 3, 0 ],
      "decl-vars" : [ ],
      "line-start" : 1806,
      "ast" : {
        "condition" : {
          "go-type" : 40,
          "kind" : "expression",
          "left" : {
            "go-type" : 40,
            "kind" : "expression",
            "left" : {
              "go-type" : 40,
              "kind" : "expression",
              "left" : {
                "go-type" : 40,
                "kind" : "expression",
                "left" : {
                  "go-type" : 2,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "i",
                    "variable" : 1
                  }
                },
                "operator" : "<",
                "right" : {
                  "go-type" : 2,
                  "kind" : "constant",
                  "value" : {
                    "type" : "INT",
                    "value" : "0"
                  }
                },
                "type" : "binary"
              },
              "operator" : "||",
              "right" : {
                "go-type" : 40,
                "kind" : "expression",
                "left" : {
                  "go-type" : 2,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "j",
                    "variable" : 2
                  }
                },
                "operator" : "<",
                "right" : {
                  "go-type" : 2,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "i",
                    "variable" : 1
                  }
                },
                "type" : "binary"
              },
              "type" : "binary"
            },
            "operator" : "||",
            "right" : {
              "go-type" : 40,
              "kind" : "expression",
              "left" : {
                "go-type" : 2,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "k",
                  "variable" : 3
                }
              },
              "operator" : "<",
              "right" : {
                "go-type" : 2,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "j",
                  "variable" : 2
                }
              },
              "type" : "binary"
            },
            "type" : "binary"
          },
          "operator" : "||",
          "right" : {
            "go-type" : 40,
            "kind" : "expression",
            "left" : {
              "go-type" : 2,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "k",
                "variable" : 3
              }
            },
            "operator" : ">",
            "right" : {
              "go-type" : 2,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "cap",
                "variable" : 5
              }
            },
            "type" : "binary"
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 1808,
      "code" : "if i < 0 || j < i || k < j || k > cap {\n\tpanic(\"reflect.Value.Slice3: slice index out of bounds\")\n}",
      "entry" : false,
      "use-vars" : [ 2, 1, 3, 5 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 21 ],
      "in-vars" : [ 1, 3, 0, 6, 7, 2 ],
      "exit" : false,
      "out-vars" : [ 3, 0, 6, 7, 2, 1 ],
      "decl-vars" : [ ],
      "line-start" : 1807,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 39,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "reflect.Value.Slice3: slice index out of bounds"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 33,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Builtin",
              "kind" : "ident",
              "value" : "panic"
            }
          },
          "go-type" : 30,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 1807,
      "code" : "panic(\"reflect.Value.Slice3: slice index out of bounds\")",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 22 ],
      "in-vars" : [ 6, 7, 2, 1, 3, 0 ],
      "exit" : false,
      "out-vars" : [ 6, 7, 2, 1, 3, 19, 0 ],
      "decl-vars" : [ 19 ],
      "line-start" : 1812,
      "ast" : {
        "kind" : "statement",
        "target" : {
          "kind" : "decl",
          "specs" : [ {
            "comments" : [ ],
            "declared-type" : {
              "element" : {
                "go-type" : 15,
                "kind" : "type",
                "qualifier" : {
                  "ident-kind" : "PkgName",
                  "kind" : "ident",
                  "package" : 1,
                  "value" : "unsafe"
                },
                "type" : "identifier",
                "value" : {
                  "go-type" : 15,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "Pointer"
                }
              },
              "go-type" : 47,
              "kind" : "type",
              "type" : "slice"
            },
            "kind" : "spec",
            "names" : [ {
              "ident-kind" : "NoKind",
              "kind" : "ident",
              "value" : "x"
            } ],
            "type" : "var",
            "values" : [ ]
          } ],
          "type" : "var"
        },
        "type" : "declaration"
      },
      "assign-vars" : [ ],
      "line-end" : 1812,
      "code" : "// Declare slice so that the garbage collector\n// can see the base pointer in it.\nvar x []unsafe.Pointer",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 23 ],
      "in-vars" : [ 6, 7, 2, 1, 3, 19, 0 ],
      "exit" : false,
      "out-vars" : [ 20, 0, 6, 7, 2, 1, 3, 19 ],
      "decl-vars" : [ 20 ],
      "line-start" : 1815,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "s"
          }
        } ],
        "right" : [ {
          "coerced-to" : {
            "contained" : {
              "go-type" : 45,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 45,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "sliceHeader"
              }
            },
            "go-type" : 44,
            "kind" : "type",
            "type" : "pointer"
          },
          "go-type" : 44,
          "kind" : "expression",
          "target" : {
            "coerced-to" : {
              "go-type" : 15,
              "kind" : "type",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 1,
                "value" : "unsafe"
              },
              "type" : "identifier",
              "value" : {
                "go-type" : 15,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "Pointer"
              }
            },
            "go-type" : 15,
            "kind" : "expression",
            "target" : {
              "go-type" : 48,
              "kind" : "expression",
              "operator" : "&",
              "target" : {
                "go-type" : 47,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "x",
                  "variable" : 19
                }
              },
              "type" : "unary"
            },
            "type" : "cast"
          },
          "type" : "cast"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 1815,
      "code" : "s := (*sliceHeader)(unsafe.Pointer(&x))",
      "entry" : false,
      "use-vars" : [ 19 ]
    }, {
      "update-vars" : [ 20 ],
      "successors" : [ 24 ],
      "in-vars" : [ 1, 3, 19, 20, 0, 6, 7, 2 ],
      "exit" : false,
      "out-vars" : [ 3, 19, 20, 0, 6, 7, 1 ],
      "decl-vars" : [ ],
      "line-start" : 1816,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "Len",
            "variable" : 21
          },
          "go-type" : 2,
          "kind" : "expression",
          "target" : {
            "go-type" : 44,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "s",
              "variable" : 20
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "go-type" : 2,
          "kind" : "expression",
          "left" : {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "j",
              "variable" : 2
            }
          },
          "operator" : "-",
          "right" : {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "i",
              "variable" : 1
            }
          },
          "type" : "binary"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 1816,
      "code" : "s.Len = j - i",
      "entry" : false,
      "use-vars" : [ 2, 1, 20 ]
    }, {
      "update-vars" : [ 20 ],
      "successors" : [ 25 ],
      "in-vars" : [ 7, 1, 3, 19, 20, 0, 6 ],
      "exit" : false,
      "out-vars" : [ 6, 7, 1, 3, 19, 20, 0 ],
      "decl-vars" : [ ],
      "line-start" : 1817,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "Cap",
            "variable" : 18
          },
          "go-type" : 2,
          "kind" : "expression",
          "target" : {
            "go-type" : 44,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "s",
              "variable" : 20
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "go-type" : 2,
          "kind" : "expression",
          "left" : {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "k",
              "variable" : 3
            }
          },
          "operator" : "-",
          "right" : {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "i",
              "variable" : 1
            }
          },
          "type" : "binary"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 1817,
      "code" : "s.Cap = k - i",
      "entry" : false,
      "use-vars" : [ 20, 3, 1 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 26, 27 ],
      "in-vars" : [ 19, 20, 0, 6, 7, 1, 3 ],
      "exit" : false,
      "out-vars" : [ 1, 19, 20, 0, 6, 7 ],
      "decl-vars" : [ ],
      "line-start" : 1818,
      "ast" : {
        "condition" : {
          "go-type" : 40,
          "kind" : "expression",
          "left" : {
            "go-type" : 2,
            "kind" : "expression",
            "left" : {
              "go-type" : 2,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "k",
                "variable" : 3
              }
            },
            "operator" : "-",
            "right" : {
              "go-type" : 2,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "i",
                "variable" : 1
              }
            },
            "type" : "binary"
          },
          "operator" : ">",
          "right" : {
            "go-type" : 2,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 1823,
      "code" : "if k-i > 0 {\n\ts.Data = arrayAt(base, i, typ.elem.Size(), \"i < k <= cap\")\n} else {\n\n\ts.Data = base\n}",
      "entry" : false,
      "use-vars" : [ 1, 3 ]
    }, {
      "update-vars" : [ 20 ],
      "successors" : [ 28 ],
      "in-vars" : [ 0, 6, 7, 1, 19, 20 ],
      "exit" : false,
      "out-vars" : [ 0, 6, 19 ],
      "decl-vars" : [ ],
      "line-start" : 1819,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "Data",
            "variable" : 17
          },
          "go-type" : 15,
          "kind" : "expression",
          "target" : {
            "go-type" : 44,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "s",
              "variable" : 20
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 15,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "base",
              "variable" : 7
            }
          }, {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "i",
              "variable" : 1
            }
          }, {
            "arguments" : [ ],
            "ellipsis" : false,
            "function" : {
              "field" : {
                "function" : 3,
                "ident-kind" : "Func",
                "kind" : "ident",
                "value" : "Size"
              },
              "go-type" : 52,
              "kind" : "expression",
              "target" : {
                "field" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "elem",
                  "variable" : 22
                },
                "go-type" : 6,
                "kind" : "expression",
                "target" : {
                  "go-type" : 24,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "typ",
                    "variable" : 6
                  }
                },
                "type" : "selector"
              },
              "type" : "selector"
            },
            "go-type" : 9,
            "kind" : "expression",
            "type" : "call"
          }, {
            "go-type" : 39,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "i < k <= cap"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 49,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 2,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "arrayAt"
            }
          },
          "go-type" : 15,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 1819,
      "code" : "s.Data = arrayAt(base, i, typ.elem.Size(), \"i < k <= cap\")",
      "entry" : false,
      "use-vars" : [ 7, 1, 6, 20 ]
    }, {
      "update-vars" : [ 20 ],
      "successors" : [ 28 ],
      "in-vars" : [ 20, 0, 6, 7, 19 ],
      "exit" : false,
      "out-vars" : [ 6, 19, 0 ],
      "decl-vars" : [ ],
      "line-start" : 1822,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "Data",
            "variable" : 17
          },
          "go-type" : 15,
          "kind" : "expression",
          "target" : {
            "go-type" : 44,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "s",
              "variable" : 20
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "go-type" : 15,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "base",
            "variable" : 7
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 1822,
      "code" : "s.Data = base",
      "entry" : false,
      "use-vars" : [ 20, 7 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 29 ],
      "in-vars" : [ 6, 19, 0 ],
      "exit" : false,
      "out-vars" : [ 6, 19, 25 ],
      "decl-vars" : [ 25 ],
      "line-start" : 1825,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "fl"
          }
        } ],
        "right" : [ {
          "go-type" : 23,
          "kind" : "expression",
          "left" : {
            "go-type" : 23,
            "kind" : "expression",
            "left" : {
              "arguments" : [ ],
              "ellipsis" : false,
              "function" : {
                "field" : {
                  "function" : 4,
                  "ident-kind" : "Func",
                  "kind" : "ident",
                  "value" : "ro"
                },
                "go-type" : 55,
                "kind" : "expression",
                "target" : {
                  "field" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "flag",
                    "variable" : 10
                  },
                  "go-type" : 23,
                  "kind" : "expression",
                  "target" : {
                    "go-type" : 4,
                    "kind" : "expression",
                    "type" : "identifier",
                    "value" : {
                      "ident-kind" : "Var",
                      "kind" : "ident",
                      "value" : "v",
                      "variable" : 0
                    }
                  },
                  "type" : "selector"
                },
                "type" : "selector"
              },
              "go-type" : 23,
              "kind" : "expression",
              "type" : "call"
            },
            "operator" : "|",
            "right" : {
              "go-type" : 23,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "128"
              }
            },
            "type" : "binary"
          },
          "operator" : "|",
          "right" : {
            "go-type" : 23,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "23"
            }
          },
          "type" : "binary"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 1825,
      "code" : "fl := v.flag.ro() | flagIndir | flag(Slice)",
      "entry" : false,
      "use-vars" : [ 0 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 6, 19, 25 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 1826,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "declared" : {
            "go-type" : 4,
            "kind" : "type",
            "type" : "identifier",
            "value" : {
              "go-type" : 4,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "Value"
            }
          },
          "go-type" : 4,
          "kind" : "literal",
          "type" : "composite",
          "values" : [ {
            "arguments" : [ ],
            "ellipsis" : false,
            "function" : {
              "field" : {
                "function" : 5,
                "ident-kind" : "Func",
                "kind" : "ident",
                "value" : "common"
              },
              "go-type" : 58,
              "kind" : "expression",
              "target" : {
                "go-type" : 24,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "typ",
                  "variable" : 6
                }
              },
              "type" : "selector"
            },
            "go-type" : 6,
            "kind" : "expression",
            "type" : "call"
          }, {
            "coerced-to" : {
              "go-type" : 15,
              "kind" : "type",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 1,
                "value" : "unsafe"
              },
              "type" : "identifier",
              "value" : {
                "go-type" : 15,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "Pointer"
              }
            },
            "go-type" : 15,
            "kind" : "expression",
            "target" : {
              "go-type" : 48,
              "kind" : "expression",
              "operator" : "&",
              "target" : {
                "go-type" : 47,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "x",
                  "variable" : 19
                }
              },
              "type" : "unary"
            },
            "type" : "cast"
          }, {
            "go-type" : 23,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "fl",
              "variable" : 25
            }
          } ]
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 1826,
      "code" : "return Value{typ.common(), unsafe.Pointer(&x), fl}",
      "entry" : false,
      "use-vars" : [ 19, 25, 6 ]
    } ],
    "code" : "// Slice3 is the 3-index form of the slice operation: it returns v[i:j:k].\n// It panics if v's Kind is not Array or Slice, or if v is an unaddressable array,\n// or if the indexes are out of bounds.\nfunc (v Value) Slice3(i, j, k int) Value {\n\tvar (\n\t\tcap  int\n\t\ttyp  *sliceType\n\t\tbase unsafe.Pointer\n\t)\n\tswitch kind := v.kind(); kind {\n\tdefault:\n\t\tpanic(&ValueError{\"reflect.Value.Slice3\", v.kind()})\n\n\tcase Array:\n\t\tif v.flag&flagAddr == 0 {\n\t\t\tpanic(\"reflect.Value.Slice3: slice of unaddressable array\")\n\t\t}\n\t\ttt := (*arrayType)(unsafe.Pointer(v.typ))\n\t\tcap = int(tt.len)\n\t\ttyp = (*sliceType)(unsafe.Pointer(tt.slice))\n\t\tbase = v.ptr\n\n\tcase Slice:\n\t\ttyp = (*sliceType)(unsafe.Pointer(v.typ))\n\t\ts := (*sliceHeader)(v.ptr)\n\t\tbase = s.Data\n\t\tcap = s.Cap\n\t}\n\n\tif i < 0 || j < i || k < j || k > cap {\n\t\tpanic(\"reflect.Value.Slice3: slice index out of bounds\")\n\t}\n\n\t// Declare slice so that the garbage collector\n\t// can see the base pointer in it.\n\tvar x []unsafe.Pointer\n\n\ts := (*sliceHeader)(unsafe.Pointer(&x))\n\ts.Len = j - i\n\ts.Cap = k - i\n\tif k-i > 0 {\n\t\ts.Data = arrayAt(base, i, typ.elem.Size(), \"i < k <= cap\")\n\t} else {\n\n\t\ts.Data = base\n\t}\n\n\tfl := v.flag.ro() | flagIndir | flag(Slice)\n\treturn Value{typ.common(), unsafe.Pointer(&x), fl}\n}",
    "defines" : [ 0 ],
    "functions" : [ {
      "name" : "Slice3",
      "package" : 0,
      "type" : 0,
      "exported" : true
    }, {
      "name" : "kind",
      "package" : 0,
      "type" : 32,
      "exported" : false
    }, {
      "name" : "arrayAt",
      "package" : 0,
      "type" : 49,
      "exported" : false
    }, {
      "name" : "Size",
      "package" : 0,
      "type" : 54,
      "exported" : true
    }, {
      "name" : "ro",
      "package" : 0,
      "type" : 57,
      "exported" : false
    }, {
      "name" : "common",
      "package" : 0,
      "type" : 60,
      "exported" : false
    } ],
    "line-end" : 1827,
    "line-start" : 1780,
    "names" : [ "Slice3" ],
    "package" : 0,
    "packages" : [ {
      "name" : "reflect",
      "path" : "reflect"
    }, {
      "name" : "unsafe",
      "path" : "unsafe"
    } ],
    "params" : [ 1, 2, 3 ],
    "receivers" : [ 0 ],
    "results" : [ 4 ],
    "type" : "function",
    "types" : [ {
      "name" : "(reflect.Value) func(i int, j int, k int) reflect.Value",
      "params" : 1,
      "recv" : 0,
      "results" : 3,
      "type" : "Signature",
      "underlying" : 0,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "i",
        "type" : 2
      }, {
        "name" : "j",
        "type" : 2
      }, {
        "name" : "k",
        "type" : 2
      } ],
      "name" : "(i int, j int, k int)",
      "type" : "Tuple",
      "underlying" : 1
    }, {
      "name" : "int",
      "type" : "Basic",
      "underlying" : 2
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 4
      } ],
      "name" : "(reflect.Value)",
      "type" : "Tuple",
      "underlying" : 3
    }, {
      "local-name" : "Value",
      "name" : "reflect.Value",
      "package" : 0,
      "type" : "Named",
      "underlying" : 5
    }, {
      "fields" : [ {
        "name" : "typ",
        "type" : 6
      }, {
        "name" : "ptr",
        "type" : 15
      }, {
        "name" : "flag",
        "type" : 23
      } ],
      "name" : "struct{typ *reflect.rtype; ptr unsafe.Pointer; reflect.flag}",
      "type" : "Struct",
      "underlying" : 5
    }, {
      "elem" : 7,
      "name" : "*reflect.rtype",
      "type" : "Pointer",
      "underlying" : 6
    }, {
      "local-name" : "rtype",
      "name" : "reflect.rtype",
      "package" : 0,
      "type" : "Named",
      "underlying" : 8
    }, {
      "fields" : [ {
        "name" : "size",
        "type" : 9
      }, {
        "name" : "ptrdata",
        "type" : 9
      }, {
        "name" : "hash",
        "type" : 10
      }, {
        "name" : "tflag",
        "type" : 11
      }, {
        "name" : "align",
        "type" : 12
      }, {
        "name" : "fieldAlign",
        "type" : 12
      }, {
        "name" : "kind",
        "type" : 12
      }, {
        "name" : "equal",
        "type" : 13
      }, {
        "name" : "gcdata",
        "type" : 18
      }, {
        "name" : "str",
        "type" : 20
      }, {
        "name" : "ptrToThis",
        "type" : 22
      } ],
      "name" : "struct{size uintptr; ptrdata uintptr; hash uint32; tflag reflect.tflag; align uint8; fieldAlign uint8; kind uint8; equal func(unsafe.Pointer, unsafe.Pointer) bool; gcdata *byte; str reflect.nameOff; ptrToThis reflect.typeOff}",
      "type" : "Struct",
      "underlying" : 8
    }, {
      "name" : "uintptr",
      "type" : "Basic",
      "underlying" : 9
    }, {
      "name" : "uint32",
      "type" : "Basic",
      "underlying" : 10
    }, {
      "local-name" : "tflag",
      "name" : "reflect.tflag",
      "package" : 0,
      "type" : "Named",
      "underlying" : 12
    }, {
      "name" : "uint8",
      "type" : "Basic",
      "underlying" : 12
    }, {
      "name" : "func(unsafe.Pointer, unsafe.Pointer) bool",
      "params" : 14,
      "recv" : -1,
      "results" : 16,
      "type" : "Signature",
      "underlying" : 13,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 15
      }, {
        "name" : "",
        "type" : 15
      } ],
      "name" : "(unsafe.Pointer, unsafe.Pointer)",
      "type" : "Tuple",
      "underlying" : 14
    }, {
      "local-name" : "Pointer",
      "name" : "unsafe.Pointer",
      "package" : 1,
      "type" : "Basic",
      "underlying" : 15
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 17
      } ],
      "name" : "(bool)",
      "type" : "Tuple",
      "underlying" : 16
    }, {
      "name" : "bool",
      "type" : "Basic",
      "underlying" : 17
    }, {
      "elem" : 19,
      "name" : "*byte",
      "type" : "Pointer",
      "underlying" : 18
    }, {
      "name" : "byte",
      "type" : "Basic",
      "underlying" : 19
    }, {
      "local-name" : "nameOff",
      "name" : "reflect.nameOff",
      "package" : 0,
      "type" : "Named",
      "underlying" : 21
    }, {
      "name" : "int32",
      "type" : "Basic",
      "underlying" : 21
    }, {
      "local-name" : "typeOff",
      "name" : "reflect.typeOff",
      "package" : 0,
      "type" : "Named",
      "underlying" : 21
    }, {
      "local-name" : "flag",
      "name" : "reflect.flag",
      "package" : 0,
      "type" : "Named",
      "underlying" : 9
    }, {
      "elem" : 25,
      "name" : "*reflect.sliceType",
      "type" : "Pointer",
      "underlying" : 24
    }, {
      "local-name" : "sliceType",
      "name" : "reflect.sliceType",
      "package" : 0,
      "type" : "Named",
      "underlying" : 26
    }, {
      "fields" : [ {
        "name" : "rtype",
        "type" : 7
      }, {
        "name" : "elem",
        "type" : 6
      } ],
      "name" : "struct{reflect.rtype; elem *reflect.rtype}",
      "type" : "Struct",
      "underlying" : 26
    }, {
      "local-name" : "Kind",
      "name" : "reflect.Kind",
      "package" : 0,
      "type" : "Named",
      "underlying" : 28
    }, {
      "name" : "uint",
      "type" : "Basic",
      "underlying" : 28
    }, {
      "name" : "func() reflect.Kind",
      "params" : 30,
      "recv" : -1,
      "results" : 31,
      "type" : "Signature",
      "underlying" : 29,
      "variadic" : false
    }, {
      "fields" : [ ],
      "name" : "()",
      "type" : "Tuple",
      "underlying" : 30
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 27
      } ],
      "name" : "(reflect.Kind)",
      "type" : "Tuple",
      "underlying" : 31
    }, {
      "name" : "(reflect.flag) func() reflect.Kind",
      "params" : 30,
      "recv" : 8,
      "results" : 31,
      "type" : "Signature",
      "underlying" : 32,
      "variadic" : false
    }, {
      "name" : "func(interface{})",
      "params" : 34,
      "recv" : -1,
      "results" : 30,
      "type" : "Signature",
      "underlying" : 33,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 35
      } ],
      "name" : "(interface{})",
      "type" : "Tuple",
      "underlying" : 34
    }, {
      "methods" : [ ],
      "name" : "interface{}",
      "type" : "Interface",
      "underlying" : 35
    }, {
      "elem" : 37,
      "name" : "*reflect.ValueError",
      "type" : "Pointer",
      "underlying" : 36
    }, {
      "local-name" : "ValueError",
      "name" : "reflect.ValueError",
      "package" : 0,
      "type" : "Named",
      "underlying" : 38
    }, {
      "fields" : [ {
        "name" : "Method",
        "type" : 39
      }, {
        "name" : "Kind",
        "type" : 27
      } ],
      "name" : "struct{Method string; Kind reflect.Kind}",
      "type" : "Struct",
      "underlying" : 38
    }, {
      "name" : "string",
      "type" : "Basic",
      "underlying" : 39
    }, {
      "name" : "untyped bool",
      "type" : "Basic",
      "underlying" : 40
    }, {
      "elem" : 42,
      "name" : "*reflect.arrayType",
      "type" : "Pointer",
      "underlying" : 41
    }, {
      "local-name" : "arrayType",
      "name" : "reflect.arrayType",
      "package" : 0,
      "type" : "Named",
      "underlying" : 43
    }, {
      "fields" : [ {
        "name" : "rtype",
        "type" : 7
      }, {
        "name" : "elem",
        "type" : 6
      }, {
        "name" : "slice",
        "type" : 6
      }, {
        "name" : "len",
        "type" : 9
      } ],
      "name" : "struct{reflect.rtype; elem *reflect.rtype; slice *reflect.rtype; len uintptr}",
      "type" : "Struct",
      "underlying" : 43
    }, {
      "elem" : 45,
      "name" : "*reflect.sliceHeader",
      "type" : "Pointer",
      "underlying" : 44
    }, {
      "local-name" : "sliceHeader",
      "name" : "reflect.sliceHeader",
      "package" : 0,
      "type" : "Named",
      "underlying" : 46
    }, {
      "fields" : [ {
        "name" : "Data",
        "type" : 15
      }, {
        "name" : "Len",
        "type" : 2
      }, {
        "name" : "Cap",
        "type" : 2
      } ],
      "name" : "struct{Data unsafe.Pointer; Len int; Cap int}",
      "type" : "Struct",
      "underlying" : 46
    }, {
      "elem" : 15,
      "name" : "[]unsafe.Pointer",
      "type" : "Slice",
      "underlying" : 47
    }, {
      "elem" : 47,
      "name" : "*[]unsafe.Pointer",
      "type" : "Pointer",
      "underlying" : 48
    }, {
      "name" : "func(p unsafe.Pointer, i int, eltSize uintptr, whySafe string) unsafe.Pointer",
      "params" : 50,
      "recv" : -1,
      "results" : 51,
      "type" : "Signature",
      "underlying" : 49,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "p",
        "type" : 15
      }, {
        "name" : "i",
        "type" : 2
      }, {
        "name" : "eltSize",
        "type" : 9
      }, {
        "name" : "whySafe",
        "type" : 39
      } ],
      "name" : "(p unsafe.Pointer, i int, eltSize uintptr, whySafe string)",
      "type" : "Tuple",
      "underlying" : 50
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 15
      } ],
      "name" : "(unsafe.Pointer)",
      "type" : "Tuple",
      "underlying" : 51
    }, {
      "name" : "func() uintptr",
      "params" : 30,
      "recv" : -1,
      "results" : 53,
      "type" : "Signature",
      "underlying" : 52,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 9
      } ],
      "name" : "(uintptr)",
      "type" : "Tuple",
      "underlying" : 53
    }, {
      "name" : "(*reflect.rtype) func() uintptr",
      "params" : 30,
      "recv" : 23,
      "results" : 53,
      "type" : "Signature",
      "underlying" : 54,
      "variadic" : false
    }, {
      "name" : "func() reflect.flag",
      "params" : 30,
      "recv" : -1,
      "results" : 56,
      "type" : "Signature",
      "underlying" : 55,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 23
      } ],
      "name" : "(reflect.flag)",
      "type" : "Tuple",
      "underlying" : 56
    }, {
      "name" : "(reflect.flag) func() reflect.flag",
      "params" : 30,
      "recv" : 24,
      "results" : 56,
      "type" : "Signature",
      "underlying" : 57,
      "variadic" : false
    }, {
      "name" : "func() *reflect.rtype",
      "params" : 30,
      "recv" : -1,
      "results" : 59,
      "type" : "Signature",
      "underlying" : 58,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 6
      } ],
      "name" : "(*reflect.rtype)",
      "type" : "Tuple",
      "underlying" : 59
    }, {
      "name" : "(*reflect.rtype) func() *reflect.rtype",
      "params" : 30,
      "recv" : 26,
      "results" : 59,
      "type" : "Signature",
      "underlying" : 60,
      "variadic" : false
    } ],
    "variables" : [ {
      "name" : "v",
      "package" : 0,
      "type" : 4,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "i",
      "package" : 0,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "j",
      "package" : 0,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "k",
      "package" : 0,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "[res0]",
      "package" : 0,
      "type" : 4,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "cap",
      "package" : 0,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "typ",
      "package" : 0,
      "type" : 24,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "base",
      "package" : 0,
      "type" : 15,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "f",
      "package" : 0,
      "type" : 23,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "kind",
      "package" : 0,
      "type" : 27,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "flag",
      "package" : 0,
      "type" : 23,
      "exported" : false,
      "embedded" : true,
      "field" : true
    }, {
      "name" : "typ",
      "package" : 0,
      "type" : 6,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "tt",
      "package" : 0,
      "type" : 41,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "len",
      "package" : 0,
      "type" : 9,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "slice",
      "package" : 0,
      "type" : 6,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "ptr",
      "package" : 0,
      "type" : 15,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "s",
      "package" : 0,
      "type" : 44,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "Data",
      "package" : 0,
      "type" : 15,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "Cap",
      "package" : 0,
      "type" : 2,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "x",
      "package" : 0,
      "type" : 47,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "s",
      "package" : 0,
      "type" : 44,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "Len",
      "package" : 0,
      "type" : 2,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "elem",
      "package" : 0,
      "type" : 6,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "t",
      "package" : 0,
      "type" : 6,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "f",
      "package" : 0,
      "type" : 23,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "fl",
      "package" : 0,
      "type" : 23,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "t",
      "package" : 0,
      "type" : 6,
      "exported" : false,
      "embedded" : false,
      "field" : false
    } ]
  },
  "go-version" : "1.14.3"
}