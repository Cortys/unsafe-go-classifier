{
  "usage" : {
    "file" : "pool.go",
    "label1" : "delegate",
    "label2" : "atomic",
    "line" : "228",
    "module" : "std",
    "pkg" : "sync",
    "project" : "kubernetes/kubernetes",
    "snippet" : "atomic.StorePointer(&p.local, unsafe.Pointer(&local[0])) // store-release",
    "version" : "std"
  },
  "cfg" : {
    "blocks" : [ {
      "update-vars" : [ ],
      "successors" : [ 2 ],
      "in-vars" : [ 3, 0, 4 ],
      "exit" : false,
      "out-vars" : [ 4, 3, 0 ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[entry]",
      "entry" : true,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ ],
      "in-vars" : [ 3 ],
      "exit" : true,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[exit]",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 3 ],
      "in-vars" : [ 0, 4, 3 ],
      "exit" : false,
      "out-vars" : [ 0, 4, 3 ],
      "decl-vars" : [ ],
      "line-start" : 212,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 29,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "runtime_procUnpin"
            }
          },
          "go-type" : 1,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 212,
      "code" : "runtime_procUnpin()",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 4 ],
      "in-vars" : [ 0, 4, 3 ],
      "exit" : false,
      "out-vars" : [ 0, 4, 3 ],
      "decl-vars" : [ ],
      "line-start" : 213,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "Lock"
            },
            "go-type" : 29,
            "kind" : "expression",
            "target" : {
              "go-type" : 24,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "allPoolsMu",
                "variable" : 3
              }
            },
            "type" : "selector"
          },
          "go-type" : 1,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 213,
      "code" : "allPoolsMu.Lock()",
      "entry" : false,
      "use-vars" : [ 3 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 5 ],
      "in-vars" : [ 3, 0, 4 ],
      "exit" : false,
      "out-vars" : [ 5, 0, 4, 3 ],
      "decl-vars" : [ 5 ],
      "line-start" : 215,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "pid"
          }
        } ],
        "right" : [ {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 30,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "runtime_procPin"
            }
          },
          "go-type" : 23,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 215,
      "code" : "pid := runtime_procPin()",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 6 ],
      "in-vars" : [ 0, 4, 3, 5 ],
      "exit" : false,
      "out-vars" : [ 5, 7, 0, 4, 3 ],
      "decl-vars" : [ 7 ],
      "line-start" : 217,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "s"
          }
        } ],
        "right" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "localSize",
            "variable" : 6
          },
          "go-type" : 5,
          "kind" : "expression",
          "target" : {
            "go-type" : 0,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "p",
              "variable" : 0
            }
          },
          "type" : "selector"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 217,
      "code" : "s := p.localSize",
      "entry" : false,
      "use-vars" : [ 0 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 7 ],
      "in-vars" : [ 5, 7, 0, 4, 3 ],
      "exit" : false,
      "out-vars" : [ 5, 7, 0, 4, 9, 3 ],
      "decl-vars" : [ 9 ],
      "line-start" : 218,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "l"
          }
        } ],
        "right" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "local",
            "variable" : 8
          },
          "go-type" : 20,
          "kind" : "expression",
          "target" : {
            "go-type" : 0,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "p",
              "variable" : 0
            }
          },
          "type" : "selector"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 218,
      "code" : "l := p.local",
      "entry" : false,
      "use-vars" : [ 0 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 8, 9 ],
      "in-vars" : [ 5, 7, 0, 4, 9, 3 ],
      "exit" : false,
      "out-vars" : [ 0, 4, 9, 3, 5 ],
      "decl-vars" : [ ],
      "line-start" : 219,
      "ast" : {
        "condition" : {
          "go-type" : 32,
          "kind" : "expression",
          "left" : {
            "coerced-to" : {
              "go-type" : 5,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 5,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "uintptr"
              }
            },
            "go-type" : 5,
            "kind" : "expression",
            "target" : {
              "go-type" : 23,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "pid",
                "variable" : 5
              }
            },
            "type" : "cast"
          },
          "operator" : "<",
          "right" : {
            "go-type" : 5,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "s",
              "variable" : 7
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 221,
      "code" : "if uintptr(pid) < s {\n\treturn indexLocal(l, pid), pid\n}",
      "entry" : false,
      "use-vars" : [ 5, 7 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 5, 9, 3 ],
      "exit" : false,
      "out-vars" : [ 3 ],
      "decl-vars" : [ ],
      "line-start" : 220,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "arguments" : [ {
            "go-type" : 20,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "l",
              "variable" : 9
            }
          }, {
            "go-type" : 23,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "pid",
              "variable" : 5
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 33,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "indexLocal"
            }
          },
          "go-type" : 3,
          "kind" : "expression",
          "type" : "call"
        }, {
          "go-type" : 23,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "pid",
            "variable" : 5
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 220,
      "code" : "return indexLocal(l, pid), pid",
      "entry" : false,
      "use-vars" : [ 9, 5 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 10, 11 ],
      "in-vars" : [ 5, 0, 4, 3 ],
      "exit" : false,
      "out-vars" : [ 5, 0, 4, 3 ],
      "decl-vars" : [ ],
      "line-start" : 222,
      "ast" : {
        "condition" : {
          "go-type" : 32,
          "kind" : "expression",
          "left" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "local",
              "variable" : 8
            },
            "go-type" : 20,
            "kind" : "expression",
            "target" : {
              "go-type" : 0,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "p",
                "variable" : 0
              }
            },
            "type" : "selector"
          },
          "operator" : "==",
          "right" : {
            "go-type" : 20,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Nil",
              "kind" : "ident",
              "value" : "nil"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 224,
      "code" : "if p.local == nil {\n\tallPools = append(allPools, p)\n}",
      "entry" : false,
      "use-vars" : [ 0 ]
    }, {
      "update-vars" : [ 4 ],
      "successors" : [ 11 ],
      "in-vars" : [ 5, 0, 4, 3 ],
      "exit" : false,
      "out-vars" : [ 5, 0, 3 ],
      "decl-vars" : [ ],
      "line-start" : 223,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 28,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "allPools",
            "variable" : 4
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 28,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "allPools",
              "variable" : 4
            }
          }, {
            "go-type" : 0,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "p",
              "variable" : 0
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 36,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Builtin",
              "kind" : "ident",
              "value" : "append"
            }
          },
          "go-type" : 28,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 4 ],
      "line-end" : 223,
      "code" : "allPools = append(allPools, p)",
      "entry" : false,
      "use-vars" : [ 0, 4 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 12 ],
      "in-vars" : [ 5, 0, 3 ],
      "exit" : false,
      "out-vars" : [ 10, 3, 5, 0 ],
      "decl-vars" : [ 10 ],
      "line-start" : 226,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "size"
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 23,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 39,
            "kind" : "expression",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 2,
              "value" : "runtime"
            },
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "GOMAXPROCS"
            }
          },
          "go-type" : 23,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 226,
      "code" : "size := runtime.GOMAXPROCS(0)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 13 ],
      "in-vars" : [ 5, 0, 10, 3 ],
      "exit" : false,
      "out-vars" : [ 0, 11, 10, 3, 5 ],
      "decl-vars" : [ 11 ],
      "line-start" : 227,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "local"
          }
        } ],
        "right" : [ {
          "argument" : {
            "element" : {
              "go-type" : 4,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 4,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "poolLocal"
              }
            },
            "go-type" : 41,
            "kind" : "type",
            "type" : "slice"
          },
          "go-type" : 41,
          "kind" : "expression",
          "rest" : [ {
            "go-type" : 23,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "size",
              "variable" : 10
            }
          } ],
          "type" : "make"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 227,
      "code" : "local := make([]poolLocal, size)",
      "entry" : false,
      "use-vars" : [ 10 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 14 ],
      "in-vars" : [ 0, 11, 10, 3, 5 ],
      "exit" : false,
      "out-vars" : [ 5, 0, 11, 10, 3 ],
      "decl-vars" : [ ],
      "line-start" : 228,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 44,
            "kind" : "expression",
            "operator" : "&",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "local",
                "variable" : 8
              },
              "go-type" : 20,
              "kind" : "expression",
              "target" : {
                "go-type" : 0,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "p",
                  "variable" : 0
                }
              },
              "type" : "selector"
            },
            "type" : "unary"
          }, {
            "coerced-to" : {
              "go-type" : 20,
              "kind" : "type",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 1,
                "value" : "unsafe"
              },
              "type" : "identifier",
              "value" : {
                "go-type" : 20,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "Pointer"
              }
            },
            "go-type" : 20,
            "kind" : "expression",
            "target" : {
              "go-type" : 3,
              "kind" : "expression",
              "operator" : "&",
              "target" : {
                "go-type" : 4,
                "index" : {
                  "go-type" : 23,
                  "kind" : "constant",
                  "value" : {
                    "type" : "INT",
                    "value" : "0"
                  }
                },
                "kind" : "expression",
                "target" : {
                  "go-type" : 41,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "local",
                    "variable" : 11
                  }
                },
                "type" : "index"
              },
              "type" : "unary"
            },
            "type" : "cast"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 42,
            "kind" : "expression",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 3,
              "value" : "atomic"
            },
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "StorePointer"
            }
          },
          "go-type" : 1,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 228,
      "code" : "atomic.StorePointer(&p.local, unsafe.Pointer(&local[0]))",
      "entry" : false,
      "use-vars" : [ 11, 0 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 15 ],
      "in-vars" : [ 11, 10, 3, 5, 0 ],
      "exit" : false,
      "out-vars" : [ 5, 11, 3 ],
      "decl-vars" : [ ],
      "line-start" : 229,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 47,
            "kind" : "expression",
            "operator" : "&",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "localSize",
                "variable" : 6
              },
              "go-type" : 5,
              "kind" : "expression",
              "target" : {
                "go-type" : 0,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "p",
                  "variable" : 0
                }
              },
              "type" : "selector"
            },
            "type" : "unary"
          }, {
            "coerced-to" : {
              "go-type" : 5,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 5,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "uintptr"
              }
            },
            "go-type" : 5,
            "kind" : "expression",
            "target" : {
              "go-type" : 23,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "size",
                "variable" : 10
              }
            },
            "type" : "cast"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 45,
            "kind" : "expression",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 3,
              "value" : "atomic"
            },
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "StoreUintptr"
            }
          },
          "go-type" : 1,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 229,
      "code" : "atomic.StoreUintptr(&p.localSize, uintptr(size))",
      "entry" : false,
      "use-vars" : [ 0, 10 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 11, 3, 5 ],
      "exit" : false,
      "out-vars" : [ 3 ],
      "decl-vars" : [ ],
      "line-start" : 230,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 3,
          "kind" : "expression",
          "operator" : "&",
          "target" : {
            "go-type" : 4,
            "index" : {
              "go-type" : 23,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "pid",
                "variable" : 5
              }
            },
            "kind" : "expression",
            "target" : {
              "go-type" : 41,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "local",
                "variable" : 11
              }
            },
            "type" : "index"
          },
          "type" : "unary"
        }, {
          "go-type" : 23,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "pid",
            "variable" : 5
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 230,
      "code" : "return &local[pid], pid",
      "entry" : false,
      "use-vars" : [ 11, 5 ]
    } ],
    "code" : "func (p *Pool) pinSlow() (*poolLocal, int) {\n\n\truntime_procUnpin()\n\tallPoolsMu.Lock()\n\tdefer allPoolsMu.Unlock()\n\tpid := runtime_procPin()\n\n\ts := p.localSize\n\tl := p.local\n\tif uintptr(pid) < s {\n\t\treturn indexLocal(l, pid), pid\n\t}\n\tif p.local == nil {\n\t\tallPools = append(allPools, p)\n\t}\n\n\tsize := runtime.GOMAXPROCS(0)\n\tlocal := make([]poolLocal, size)\n\tatomic.StorePointer(&p.local, unsafe.Pointer(&local[0]))\n\tatomic.StoreUintptr(&p.localSize, uintptr(size))\n\treturn &local[pid], pid\n}",
    "defines" : [ 0 ],
    "functions" : [ {
      "name" : "pinSlow",
      "package" : 0,
      "type" : 0,
      "exported" : false
    }, {
      "name" : "runtime_procUnpin",
      "package" : 0,
      "type" : 29,
      "exported" : false
    }, {
      "name" : "Lock",
      "package" : 0,
      "type" : 29,
      "exported" : true
    }, {
      "name" : "runtime_procPin",
      "package" : 0,
      "type" : 30,
      "exported" : false
    }, {
      "name" : "indexLocal",
      "package" : 0,
      "type" : 33,
      "exported" : false
    }, {
      "name" : "GOMAXPROCS",
      "package" : 2,
      "type" : 39,
      "exported" : true
    }, {
      "name" : "StorePointer",
      "package" : 3,
      "type" : 42,
      "exported" : true
    }, {
      "name" : "StoreUintptr",
      "package" : 3,
      "type" : 45,
      "exported" : true
    } ],
    "line-end" : 231,
    "line-start" : 209,
    "names" : [ "pinSlow" ],
    "package" : 0,
    "packages" : [ {
      "name" : "sync",
      "path" : "sync"
    }, {
      "name" : "unsafe",
      "path" : "unsafe"
    }, {
      "name" : "runtime",
      "path" : "runtime"
    }, {
      "name" : "atomic",
      "path" : "sync/atomic"
    } ],
    "params" : [ ],
    "receivers" : [ 0 ],
    "results" : [ 1, 2 ],
    "type" : "function",
    "types" : [ {
      "name" : "func() (*sync.poolLocal, int)",
      "params" : 1,
      "recv" : 0,
      "results" : 2,
      "type" : "Signature",
      "underlying" : 0,
      "variadic" : false
    }, {
      "fields" : [ ],
      "name" : "()",
      "type" : "Tuple",
      "underlying" : 1
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 3
      }, {
        "name" : "",
        "type" : 23
      } ],
      "name" : "(*sync.poolLocal, int)",
      "type" : "Tuple",
      "underlying" : 2
    }, {
      "elem" : 4,
      "name" : "*sync.poolLocal",
      "type" : "Pointer",
      "underlying" : 3
    }, {
      "local-name" : "poolLocal",
      "name" : "sync.poolLocal",
      "package" : 0,
      "type" : "Named",
      "underlying" : 5
    }, {
      "fields" : [ {
        "name" : "poolLocalInternal",
        "type" : 6
      }, {
        "name" : "pad",
        "type" : 21
      } ],
      "name" : "struct{sync.poolLocalInternal; pad [96]byte}",
      "type" : "Struct",
      "underlying" : 5
    }, {
      "local-name" : "poolLocalInternal",
      "name" : "sync.poolLocalInternal",
      "package" : 0,
      "type" : "Named",
      "underlying" : 7
    }, {
      "fields" : [ {
        "name" : "private",
        "type" : 8
      }, {
        "name" : "shared",
        "type" : 9
      } ],
      "name" : "struct{private interface{}; shared sync.poolChain}",
      "type" : "Struct",
      "underlying" : 7
    }, {
      "methods" : [ ],
      "name" : "interface{}",
      "type" : "Interface",
      "underlying" : 8
    }, {
      "local-name" : "poolChain",
      "name" : "sync.poolChain",
      "package" : 0,
      "type" : "Named",
      "underlying" : 10
    }, {
      "fields" : [ {
        "name" : "head",
        "type" : 11
      }, {
        "name" : "tail",
        "type" : 11
      } ],
      "name" : "struct{head *sync.poolChainElt; tail *sync.poolChainElt}",
      "type" : "Struct",
      "underlying" : 10
    }, {
      "elem" : 12,
      "name" : "*sync.poolChainElt",
      "type" : "Pointer",
      "underlying" : 11
    }, {
      "local-name" : "poolChainElt",
      "name" : "sync.poolChainElt",
      "package" : 0,
      "type" : "Named",
      "underlying" : 13
    }, {
      "fields" : [ {
        "name" : "poolDequeue",
        "type" : 14
      }, {
        "name" : "next",
        "type" : 11
      }, {
        "name" : "prev",
        "type" : 11
      } ],
      "name" : "struct{sync.poolDequeue; next *sync.poolChainElt; prev *sync.poolChainElt}",
      "type" : "Struct",
      "underlying" : 13
    }, {
      "local-name" : "poolDequeue",
      "name" : "sync.poolDequeue",
      "package" : 0,
      "type" : "Named",
      "underlying" : 15
    }, {
      "fields" : [ {
        "name" : "headTail",
        "type" : 16
      }, {
        "name" : "vals",
        "type" : 17
      } ],
      "name" : "struct{headTail uint64; vals []sync.eface}",
      "type" : "Struct",
      "underlying" : 15
    }, {
      "name" : "uint64",
      "type" : "Basic",
      "underlying" : 16
    }, {
      "elem" : 18,
      "name" : "[]sync.eface",
      "type" : "Slice",
      "underlying" : 17
    }, {
      "local-name" : "eface",
      "name" : "sync.eface",
      "package" : 0,
      "type" : "Named",
      "underlying" : 19
    }, {
      "fields" : [ {
        "name" : "typ",
        "type" : 20
      }, {
        "name" : "val",
        "type" : 20
      } ],
      "name" : "struct{typ unsafe.Pointer; val unsafe.Pointer}",
      "type" : "Struct",
      "underlying" : 19
    }, {
      "local-name" : "Pointer",
      "name" : "unsafe.Pointer",
      "package" : 1,
      "type" : "Basic",
      "underlying" : 20
    }, {
      "elem" : 22,
      "name" : "[96]byte",
      "type" : "Array",
      "underlying" : 21
    }, {
      "name" : "byte",
      "type" : "Basic",
      "underlying" : 22
    }, {
      "name" : "int",
      "type" : "Basic",
      "underlying" : 23
    }, {
      "local-name" : "Mutex",
      "name" : "sync.Mutex",
      "package" : 0,
      "type" : "Named",
      "underlying" : 25
    }, {
      "fields" : [ {
        "name" : "state",
        "type" : 26
      }, {
        "name" : "sema",
        "type" : 27
      } ],
      "name" : "struct{state int32; sema uint32}",
      "type" : "Struct",
      "underlying" : 25
    }, {
      "name" : "int32",
      "type" : "Basic",
      "underlying" : 26
    }, {
      "name" : "uint32",
      "type" : "Basic",
      "underlying" : 27
    }, {
      "elem" : 0,
      "name" : "[]*sync.Pool",
      "type" : "Slice",
      "underlying" : 28
    }, {
      "name" : "func()",
      "params" : 1,
      "recv" : -1,
      "results" : 1,
      "type" : "Signature",
      "underlying" : 29,
      "variadic" : false
    }, {
      "name" : "func() int",
      "params" : 1,
      "recv" : -1,
      "results" : 31,
      "type" : "Signature",
      "underlying" : 30,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 23
      } ],
      "name" : "(int)",
      "type" : "Tuple",
      "underlying" : 31
    }, {
      "name" : "untyped bool",
      "type" : "Basic",
      "underlying" : 32
    }, {
      "name" : "func(l unsafe.Pointer, i int) *sync.poolLocal",
      "params" : 34,
      "recv" : -1,
      "results" : 35,
      "type" : "Signature",
      "underlying" : 33,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "l",
        "type" : 20
      }, {
        "name" : "i",
        "type" : 23
      } ],
      "name" : "(l unsafe.Pointer, i int)",
      "type" : "Tuple",
      "underlying" : 34
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 3
      } ],
      "name" : "(*sync.poolLocal)",
      "type" : "Tuple",
      "underlying" : 35
    }, {
      "name" : "func([]*sync.Pool, ...*sync.Pool) []*sync.Pool",
      "params" : 37,
      "recv" : -1,
      "results" : 38,
      "type" : "Signature",
      "underlying" : 36,
      "variadic" : true
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 28
      }, {
        "name" : "",
        "type" : 28
      } ],
      "name" : "([]*sync.Pool, []*sync.Pool)",
      "type" : "Tuple",
      "underlying" : 37
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 28
      } ],
      "name" : "([]*sync.Pool)",
      "type" : "Tuple",
      "underlying" : 38
    }, {
      "name" : "func(n int) int",
      "params" : 40,
      "recv" : -1,
      "results" : 31,
      "type" : "Signature",
      "underlying" : 39,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "n",
        "type" : 23
      } ],
      "name" : "(n int)",
      "type" : "Tuple",
      "underlying" : 40
    }, {
      "elem" : 4,
      "name" : "[]sync.poolLocal",
      "type" : "Slice",
      "underlying" : 41
    }, {
      "name" : "func(addr *unsafe.Pointer, val unsafe.Pointer)",
      "params" : 43,
      "recv" : -1,
      "results" : 1,
      "type" : "Signature",
      "underlying" : 42,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "addr",
        "type" : 44
      }, {
        "name" : "val",
        "type" : 20
      } ],
      "name" : "(addr *unsafe.Pointer, val unsafe.Pointer)",
      "type" : "Tuple",
      "underlying" : 43
    }, {
      "elem" : 20,
      "name" : "*unsafe.Pointer",
      "type" : "Pointer",
      "underlying" : 44
    }, {
      "name" : "func(addr *uintptr, val uintptr)",
      "params" : 46,
      "recv" : -1,
      "results" : 1,
      "type" : "Signature",
      "underlying" : 45,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "addr",
        "type" : 47
      }, {
        "name" : "val",
        "type" : 5
      } ],
      "name" : "(addr *uintptr, val uintptr)",
      "type" : "Tuple",
      "underlying" : 46
    }, {
      "elem" : 5,
      "name" : "*uintptr",
      "type" : "Pointer",
      "underlying" : 47
    } ],
    "variables" : [ {
      "name" : "p",
      "package" : 0,
      "type" : 0,
      "exported" : false
    }, {
      "name" : "[res0]",
      "package" : 0,
      "type" : 3,
      "exported" : false
    }, {
      "name" : "[res1]",
      "package" : 0,
      "type" : 23,
      "exported" : false
    }, {
      "name" : "allPoolsMu",
      "package" : 0,
      "type" : 24,
      "exported" : false
    }, {
      "name" : "allPools",
      "package" : 0,
      "type" : 28,
      "exported" : false
    }, {
      "name" : "pid",
      "package" : 0,
      "type" : 23,
      "exported" : false
    }, {
      "name" : "localSize",
      "package" : 0,
      "type" : 5,
      "exported" : false
    }, {
      "name" : "s",
      "package" : 0,
      "type" : 5,
      "exported" : false
    }, {
      "name" : "local",
      "package" : 0,
      "type" : 20,
      "exported" : false
    }, {
      "name" : "l",
      "package" : 0,
      "type" : 20,
      "exported" : false
    }, {
      "name" : "size",
      "package" : 0,
      "type" : 23,
      "exported" : false
    }, {
      "name" : "local",
      "package" : 0,
      "type" : 41,
      "exported" : false
    } ]
  },
  "go-version" : "1.14.3"
}