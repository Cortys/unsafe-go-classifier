{
  "usage" : {
    "file" : "netpoll.go",
    "label1" : "delegate",
    "label2" : "atomic",
    "line" : "289",
    "module" : "std",
    "pkg" : "runtime",
    "project" : "kubernetes/kubernetes",
    "snippet" : "atomic.StorepNoWB(noescape(unsafe.Pointer(&wg)), nil) // full memory barrier between stores to rd/wd and load of rg/wg in netpollunblock",
    "version" : "std"
  },
  "cfg" : {
    "blocks" : [ {
      "update-vars" : [ ],
      "successors" : [ 2 ],
      "in-vars" : [ 0, 2, 1 ],
      "exit" : false,
      "out-vars" : [ 0, 2, 1 ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[entry]",
      "entry" : true,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ ],
      "in-vars" : [ ],
      "exit" : true,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[exit]",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 3 ],
      "in-vars" : [ 0, 2, 1 ],
      "exit" : false,
      "out-vars" : [ 0, 2, 1 ],
      "decl-vars" : [ ],
      "line-start" : 225,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 21,
            "kind" : "expression",
            "operator" : "&",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "lock",
                "variable" : 3
              },
              "go-type" : 5,
              "kind" : "expression",
              "target" : {
                "go-type" : 2,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "pd",
                  "variable" : 0
                }
              },
              "type" : "selector"
            },
            "type" : "unary"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 19,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "lock"
            }
          },
          "go-type" : 17,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 225,
      "code" : "lock(&pd.lock)",
      "entry" : false,
      "use-vars" : [ 0 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 4, 6 ],
      "in-vars" : [ 0, 2, 1 ],
      "exit" : false,
      "out-vars" : [ 0, 2, 1 ],
      "decl-vars" : [ ],
      "line-start" : 226,
      "ast" : {
        "condition" : {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "closing",
            "variable" : 4
          },
          "go-type" : 8,
          "kind" : "expression",
          "target" : {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "pd",
              "variable" : 0
            }
          },
          "type" : "selector"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 229,
      "code" : "if pd.closing {\n\tunlock(&pd.lock)\n\treturn\n}",
      "entry" : false,
      "use-vars" : [ 0 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 5 ],
      "in-vars" : [ 0 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 227,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 21,
            "kind" : "expression",
            "operator" : "&",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "lock",
                "variable" : 3
              },
              "go-type" : 5,
              "kind" : "expression",
              "target" : {
                "go-type" : 2,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "pd",
                  "variable" : 0
                }
              },
              "type" : "selector"
            },
            "type" : "unary"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 19,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "unlock"
            }
          },
          "go-type" : 17,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 227,
      "code" : "unlock(&pd.lock)",
      "entry" : false,
      "use-vars" : [ 0 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 228,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ ]
      },
      "assign-vars" : [ ],
      "line-end" : 228,
      "code" : "return",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 7 ],
      "in-vars" : [ 1, 0, 2 ],
      "exit" : false,
      "out-vars" : [ 2, 1, 0, 7, 8 ],
      "decl-vars" : [ 8, 7 ],
      "line-start" : 230,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "rd0"
          }
        }, {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "wd0"
          }
        } ],
        "right" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "rd",
            "variable" : 5
          },
          "go-type" : 13,
          "kind" : "expression",
          "target" : {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "pd",
              "variable" : 0
            }
          },
          "type" : "selector"
        }, {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "wd",
            "variable" : 6
          },
          "go-type" : 13,
          "kind" : "expression",
          "target" : {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "pd",
              "variable" : 0
            }
          },
          "type" : "selector"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 230,
      "code" : "rd0, wd0 := pd.rd, pd.wd",
      "entry" : false,
      "use-vars" : [ 0 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 8 ],
      "in-vars" : [ 1, 0, 7, 8, 2 ],
      "exit" : false,
      "out-vars" : [ 8, 2, 1, 0, 9, 7 ],
      "decl-vars" : [ 9 ],
      "line-start" : 231,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "combo0"
          }
        } ],
        "right" : [ {
          "go-type" : 8,
          "kind" : "expression",
          "left" : {
            "go-type" : 8,
            "kind" : "expression",
            "left" : {
              "go-type" : 13,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "rd0",
                "variable" : 7
              }
            },
            "operator" : ">",
            "right" : {
              "go-type" : 13,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "0"
              }
            },
            "type" : "binary"
          },
          "operator" : "&&",
          "right" : {
            "go-type" : 8,
            "kind" : "expression",
            "left" : {
              "go-type" : 13,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "rd0",
                "variable" : 7
              }
            },
            "operator" : "==",
            "right" : {
              "go-type" : 13,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "wd0",
                "variable" : 8
              }
            },
            "type" : "binary"
          },
          "type" : "binary"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 231,
      "code" : "combo0 := rd0 > 0 && rd0 == wd0",
      "entry" : false,
      "use-vars" : [ 7, 8 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 9, 12 ],
      "in-vars" : [ 0, 9, 7, 8, 2, 1 ],
      "exit" : false,
      "out-vars" : [ 0, 9, 7, 8, 2, 1 ],
      "decl-vars" : [ ],
      "line-start" : 232,
      "ast" : {
        "condition" : {
          "go-type" : 22,
          "kind" : "expression",
          "left" : {
            "go-type" : 13,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "d",
              "variable" : 1
            }
          },
          "operator" : ">",
          "right" : {
            "go-type" : 13,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 239,
      "code" : "if d > 0 {\n\td += nanotime()\n\tif d <= 0 {\n\n\t\td = 1<<63 - 1\n\t}\n}",
      "entry" : false,
      "use-vars" : [ 1 ]
    }, {
      "update-vars" : [ 1 ],
      "successors" : [ 10 ],
      "in-vars" : [ 2, 1, 0, 9, 7, 8 ],
      "exit" : false,
      "out-vars" : [ 8, 2, 1, 0, 9, 7 ],
      "decl-vars" : [ ],
      "line-start" : 233,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 13,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "d",
            "variable" : 1
          }
        } ],
        "operator" : "+",
        "right" : [ {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 23,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "nanotime"
            }
          },
          "go-type" : 13,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign-operator"
      },
      "assign-vars" : [ 1 ],
      "line-end" : 233,
      "code" : "d += nanotime()",
      "entry" : false,
      "use-vars" : [ 1 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 11, 12 ],
      "in-vars" : [ 0, 9, 7, 8, 2, 1 ],
      "exit" : false,
      "out-vars" : [ 0, 9, 7, 8, 2, 1 ],
      "decl-vars" : [ ],
      "line-start" : 234,
      "ast" : {
        "condition" : {
          "go-type" : 22,
          "kind" : "expression",
          "left" : {
            "go-type" : 13,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "d",
              "variable" : 1
            }
          },
          "operator" : "<=",
          "right" : {
            "go-type" : 13,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 238,
      "code" : "if d <= 0 {\n\n\td = 1<<63 - 1\n}",
      "entry" : false,
      "use-vars" : [ 1 ]
    }, {
      "update-vars" : [ 1 ],
      "successors" : [ 12 ],
      "in-vars" : [ 0, 9, 7, 8, 2 ],
      "exit" : false,
      "out-vars" : [ 0, 9, 7, 8, 2, 1 ],
      "decl-vars" : [ ],
      "line-start" : 237,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 13,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "d",
            "variable" : 1
          }
        } ],
        "right" : [ {
          "go-type" : 13,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "9223372036854775807"
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 1 ],
      "line-end" : 237,
      "code" : "d = 1<<63 - 1",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 13, 14 ],
      "in-vars" : [ 8, 2, 1, 0, 9, 7 ],
      "exit" : false,
      "out-vars" : [ 1, 0, 9, 7, 8, 2 ],
      "decl-vars" : [ ],
      "line-start" : 240,
      "ast" : {
        "condition" : {
          "go-type" : 22,
          "kind" : "expression",
          "left" : {
            "go-type" : 22,
            "kind" : "expression",
            "left" : {
              "go-type" : 18,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "mode",
                "variable" : 2
              }
            },
            "operator" : "==",
            "right" : {
              "go-type" : 18,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "114"
              }
            },
            "type" : "binary"
          },
          "operator" : "||",
          "right" : {
            "go-type" : 22,
            "kind" : "expression",
            "left" : {
              "go-type" : 18,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "mode",
                "variable" : 2
              }
            },
            "operator" : "==",
            "right" : {
              "go-type" : 18,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "233"
              }
            },
            "type" : "binary"
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 242,
      "code" : "if mode == 'r' || mode == 'r'+'w' {\n\tpd.rd = d\n}",
      "entry" : false,
      "use-vars" : [ 2 ]
    }, {
      "update-vars" : [ 0 ],
      "successors" : [ 14 ],
      "in-vars" : [ 0, 9, 7, 8, 2, 1 ],
      "exit" : false,
      "out-vars" : [ 1, 0, 9, 7, 8, 2 ],
      "decl-vars" : [ ],
      "line-start" : 241,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "rd",
            "variable" : 5
          },
          "go-type" : 13,
          "kind" : "expression",
          "target" : {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "pd",
              "variable" : 0
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "go-type" : 13,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "d",
            "variable" : 1
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 241,
      "code" : "pd.rd = d",
      "entry" : false,
      "use-vars" : [ 1, 0 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 15, 16 ],
      "in-vars" : [ 8, 2, 1, 0, 9, 7 ],
      "exit" : false,
      "out-vars" : [ 0, 9, 7, 8, 1 ],
      "decl-vars" : [ ],
      "line-start" : 243,
      "ast" : {
        "condition" : {
          "go-type" : 22,
          "kind" : "expression",
          "left" : {
            "go-type" : 22,
            "kind" : "expression",
            "left" : {
              "go-type" : 18,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "mode",
                "variable" : 2
              }
            },
            "operator" : "==",
            "right" : {
              "go-type" : 18,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "119"
              }
            },
            "type" : "binary"
          },
          "operator" : "||",
          "right" : {
            "go-type" : 22,
            "kind" : "expression",
            "left" : {
              "go-type" : 18,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "mode",
                "variable" : 2
              }
            },
            "operator" : "==",
            "right" : {
              "go-type" : 18,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "233"
              }
            },
            "type" : "binary"
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 245,
      "code" : "if mode == 'w' || mode == 'r'+'w' {\n\tpd.wd = d\n}",
      "entry" : false,
      "use-vars" : [ 2 ]
    }, {
      "update-vars" : [ 0 ],
      "successors" : [ 16 ],
      "in-vars" : [ 0, 9, 7, 8, 1 ],
      "exit" : false,
      "out-vars" : [ 8, 0, 9, 7 ],
      "decl-vars" : [ ],
      "line-start" : 244,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "wd",
            "variable" : 6
          },
          "go-type" : 13,
          "kind" : "expression",
          "target" : {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "pd",
              "variable" : 0
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "go-type" : 13,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "d",
            "variable" : 1
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 244,
      "code" : "pd.wd = d",
      "entry" : false,
      "use-vars" : [ 1, 0 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 17 ],
      "in-vars" : [ 0, 9, 7, 8 ],
      "exit" : false,
      "out-vars" : [ 10, 0, 9, 7, 8 ],
      "decl-vars" : [ 10 ],
      "line-start" : 246,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "combo"
          }
        } ],
        "right" : [ {
          "go-type" : 8,
          "kind" : "expression",
          "left" : {
            "go-type" : 8,
            "kind" : "expression",
            "left" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "rd",
                "variable" : 5
              },
              "go-type" : 13,
              "kind" : "expression",
              "target" : {
                "go-type" : 2,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "pd",
                  "variable" : 0
                }
              },
              "type" : "selector"
            },
            "operator" : ">",
            "right" : {
              "go-type" : 13,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "0"
              }
            },
            "type" : "binary"
          },
          "operator" : "&&",
          "right" : {
            "go-type" : 8,
            "kind" : "expression",
            "left" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "rd",
                "variable" : 5
              },
              "go-type" : 13,
              "kind" : "expression",
              "target" : {
                "go-type" : 2,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "pd",
                  "variable" : 0
                }
              },
              "type" : "selector"
            },
            "operator" : "==",
            "right" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "wd",
                "variable" : 6
              },
              "go-type" : 13,
              "kind" : "expression",
              "target" : {
                "go-type" : 2,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "pd",
                  "variable" : 0
                }
              },
              "type" : "selector"
            },
            "type" : "binary"
          },
          "type" : "binary"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 246,
      "code" : "combo := pd.rd > 0 && pd.rd == pd.wd",
      "entry" : false,
      "use-vars" : [ 0 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 18 ],
      "in-vars" : [ 0, 9, 7, 8, 10 ],
      "exit" : false,
      "out-vars" : [ 0, 9, 7, 8, 11, 10 ],
      "decl-vars" : [ 11 ],
      "line-start" : 247,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "rtf"
          }
        } ],
        "right" : [ {
          "go-type" : 25,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Func",
            "kind" : "ident",
            "value" : "netpollReadDeadline"
          }
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 247,
      "code" : "rtf := netpollReadDeadline",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 19, 20 ],
      "in-vars" : [ 0, 9, 7, 8, 11, 10 ],
      "exit" : false,
      "out-vars" : [ 7, 8, 11, 10, 0, 9 ],
      "decl-vars" : [ ],
      "line-start" : 248,
      "ast" : {
        "condition" : {
          "go-type" : 8,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "combo",
            "variable" : 10
          }
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 250,
      "code" : "if combo {\n\trtf = netpollDeadline\n}",
      "entry" : false,
      "use-vars" : [ 10 ]
    }, {
      "update-vars" : [ 11 ],
      "successors" : [ 20 ],
      "in-vars" : [ 10, 0, 9, 7, 8 ],
      "exit" : false,
      "out-vars" : [ 7, 8, 11, 10, 0, 9 ],
      "decl-vars" : [ ],
      "line-start" : 249,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 25,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "rtf",
            "variable" : 11
          }
        } ],
        "right" : [ {
          "go-type" : 25,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Func",
            "kind" : "ident",
            "value" : "netpollDeadline"
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 11 ],
      "line-end" : 249,
      "code" : "rtf = netpollDeadline",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 21, 26 ],
      "in-vars" : [ 0, 9, 7, 8, 11, 10 ],
      "exit" : false,
      "out-vars" : [ 8, 11, 10, 0, 9, 7 ],
      "decl-vars" : [ ],
      "line-start" : 251,
      "ast" : {
        "condition" : {
          "go-type" : 22,
          "kind" : "expression",
          "left" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "f",
              "variable" : 13
            },
            "go-type" : 14,
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "rt",
                "variable" : 12
              },
              "go-type" : 10,
              "kind" : "expression",
              "target" : {
                "go-type" : 2,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "pd",
                  "variable" : 0
                }
              },
              "type" : "selector"
            },
            "type" : "selector"
          },
          "operator" : "==",
          "right" : {
            "go-type" : 27,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Nil",
              "kind" : "ident",
              "value" : "nil"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 269,
      "code" : "if pd.rt.f == nil {\n\tif pd.rd > 0 {\n\t\tpd.rt.f = rtf\n\n\t\tpd.rt.arg = pd\n\t\tpd.rt.seq = pd.rseq\n\t\tresettimer(&pd.rt, pd.rd)\n\t}\n} else if pd.rd != rd0 || combo != combo0 {\n\tpd.rseq++\n\tif pd.rd > 0 {\n\t\tmodtimer(&pd.rt, pd.rd, 0, rtf, pd, pd.rseq)\n\t} else {\n\t\tdeltimer(&pd.rt)\n\t\tpd.rt.f = nil\n\t}\n}",
      "entry" : false,
      "use-vars" : [ 0 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 22, 32 ],
      "in-vars" : [ 11, 10, 0, 9, 8 ],
      "exit" : false,
      "out-vars" : [ 10, 0, 9, 8, 11 ],
      "decl-vars" : [ ],
      "line-start" : 252,
      "ast" : {
        "condition" : {
          "go-type" : 22,
          "kind" : "expression",
          "left" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "rd",
              "variable" : 5
            },
            "go-type" : 13,
            "kind" : "expression",
            "target" : {
              "go-type" : 2,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "pd",
                "variable" : 0
              }
            },
            "type" : "selector"
          },
          "operator" : ">",
          "right" : {
            "go-type" : 13,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 260,
      "code" : "if pd.rd > 0 {\n\tpd.rt.f = rtf\n\n\tpd.rt.arg = pd\n\tpd.rt.seq = pd.rseq\n\tresettimer(&pd.rt, pd.rd)\n}",
      "entry" : false,
      "use-vars" : [ 0 ]
    }, {
      "update-vars" : [ 0 ],
      "successors" : [ 23 ],
      "in-vars" : [ 0, 9, 8, 11, 10 ],
      "exit" : false,
      "out-vars" : [ 0, 9, 8, 10 ],
      "decl-vars" : [ ],
      "line-start" : 253,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "f",
            "variable" : 13
          },
          "go-type" : 14,
          "kind" : "expression",
          "target" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "rt",
              "variable" : 12
            },
            "go-type" : 10,
            "kind" : "expression",
            "target" : {
              "go-type" : 2,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "pd",
                "variable" : 0
              }
            },
            "type" : "selector"
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "go-type" : 25,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "rtf",
            "variable" : 11
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 253,
      "code" : "pd.rt.f = rtf",
      "entry" : false,
      "use-vars" : [ 0, 11 ]
    }, {
      "update-vars" : [ 0 ],
      "successors" : [ 24 ],
      "in-vars" : [ 9, 8, 10, 0 ],
      "exit" : false,
      "out-vars" : [ 0, 9, 8, 10 ],
      "decl-vars" : [ ],
      "line-start" : 257,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "arg",
            "variable" : 14
          },
          "go-type" : 16,
          "kind" : "expression",
          "target" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "rt",
              "variable" : 12
            },
            "go-type" : 10,
            "kind" : "expression",
            "target" : {
              "go-type" : 2,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "pd",
                "variable" : 0
              }
            },
            "type" : "selector"
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "go-type" : 2,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "pd",
            "variable" : 0
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 257,
      "code" : "pd.rt.arg = pd",
      "entry" : false,
      "use-vars" : [ 0 ]
    }, {
      "update-vars" : [ 0 ],
      "successors" : [ 25 ],
      "in-vars" : [ 9, 8, 10, 0 ],
      "exit" : false,
      "out-vars" : [ 8, 10, 0, 9 ],
      "decl-vars" : [ ],
      "line-start" : 258,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "seq",
            "variable" : 15
          },
          "go-type" : 7,
          "kind" : "expression",
          "target" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "rt",
              "variable" : 12
            },
            "go-type" : 10,
            "kind" : "expression",
            "target" : {
              "go-type" : 2,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "pd",
                "variable" : 0
              }
            },
            "type" : "selector"
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "rseq",
            "variable" : 16
          },
          "go-type" : 7,
          "kind" : "expression",
          "target" : {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "pd",
              "variable" : 0
            }
          },
          "type" : "selector"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 258,
      "code" : "pd.rt.seq = pd.rseq",
      "entry" : false,
      "use-vars" : [ 0 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 32 ],
      "in-vars" : [ 10, 0, 9, 8 ],
      "exit" : false,
      "out-vars" : [ 0, 9, 8, 10 ],
      "decl-vars" : [ ],
      "line-start" : 259,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 30,
            "kind" : "expression",
            "operator" : "&",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "rt",
                "variable" : 12
              },
              "go-type" : 10,
              "kind" : "expression",
              "target" : {
                "go-type" : 2,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "pd",
                  "variable" : 0
                }
              },
              "type" : "selector"
            },
            "type" : "unary"
          }, {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "rd",
              "variable" : 5
            },
            "go-type" : 13,
            "kind" : "expression",
            "target" : {
              "go-type" : 2,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "pd",
                "variable" : 0
              }
            },
            "type" : "selector"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 28,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "resettimer"
            }
          },
          "go-type" : 17,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 259,
      "code" : "resettimer(&pd.rt, pd.rd)",
      "entry" : false,
      "use-vars" : [ 0 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 27, 32 ],
      "in-vars" : [ 10, 0, 9, 7, 8, 11 ],
      "exit" : false,
      "out-vars" : [ 8, 11, 10, 0, 9 ],
      "decl-vars" : [ ],
      "line-start" : 261,
      "ast" : {
        "condition" : {
          "go-type" : 22,
          "kind" : "expression",
          "left" : {
            "go-type" : 22,
            "kind" : "expression",
            "left" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "rd",
                "variable" : 5
              },
              "go-type" : 13,
              "kind" : "expression",
              "target" : {
                "go-type" : 2,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "pd",
                  "variable" : 0
                }
              },
              "type" : "selector"
            },
            "operator" : "!=",
            "right" : {
              "go-type" : 13,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "rd0",
                "variable" : 7
              }
            },
            "type" : "binary"
          },
          "operator" : "||",
          "right" : {
            "go-type" : 22,
            "kind" : "expression",
            "left" : {
              "go-type" : 8,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "combo",
                "variable" : 10
              }
            },
            "operator" : "!=",
            "right" : {
              "go-type" : 8,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "combo0",
                "variable" : 9
              }
            },
            "type" : "binary"
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 269,
      "code" : "if pd.rd != rd0 || combo != combo0 {\n\tpd.rseq++\n\tif pd.rd > 0 {\n\t\tmodtimer(&pd.rt, pd.rd, 0, rtf, pd, pd.rseq)\n\t} else {\n\t\tdeltimer(&pd.rt)\n\t\tpd.rt.f = nil\n\t}\n}",
      "entry" : false,
      "use-vars" : [ 7, 10, 9, 0 ]
    }, {
      "update-vars" : [ 0 ],
      "successors" : [ 28 ],
      "in-vars" : [ 0, 9, 8, 11, 10 ],
      "exit" : false,
      "out-vars" : [ 0, 9, 8, 11, 10 ],
      "decl-vars" : [ ],
      "line-start" : 262,
      "ast" : {
        "kind" : "statement",
        "operation" : "++",
        "target" : {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "rseq",
            "variable" : 16
          },
          "go-type" : 7,
          "kind" : "expression",
          "target" : {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "pd",
              "variable" : 0
            }
          },
          "type" : "selector"
        },
        "type" : "crement"
      },
      "assign-vars" : [ ],
      "line-end" : 262,
      "code" : "pd.rseq++",
      "entry" : false,
      "use-vars" : [ 0 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 29, 30 ],
      "in-vars" : [ 0, 9, 8, 11, 10 ],
      "exit" : false,
      "out-vars" : [ 8, 11, 10, 0, 9 ],
      "decl-vars" : [ ],
      "line-start" : 263,
      "ast" : {
        "condition" : {
          "go-type" : 22,
          "kind" : "expression",
          "left" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "rd",
              "variable" : 5
            },
            "go-type" : 13,
            "kind" : "expression",
            "target" : {
              "go-type" : 2,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "pd",
                "variable" : 0
              }
            },
            "type" : "selector"
          },
          "operator" : ">",
          "right" : {
            "go-type" : 13,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 268,
      "code" : "if pd.rd > 0 {\n\tmodtimer(&pd.rt, pd.rd, 0, rtf, pd, pd.rseq)\n} else {\n\tdeltimer(&pd.rt)\n\tpd.rt.f = nil\n}",
      "entry" : false,
      "use-vars" : [ 0 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 32 ],
      "in-vars" : [ 0, 9, 8, 11, 10 ],
      "exit" : false,
      "out-vars" : [ 0, 9, 8, 10 ],
      "decl-vars" : [ ],
      "line-start" : 264,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 30,
            "kind" : "expression",
            "operator" : "&",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "rt",
                "variable" : 12
              },
              "go-type" : 10,
              "kind" : "expression",
              "target" : {
                "go-type" : 2,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "pd",
                  "variable" : 0
                }
              },
              "type" : "selector"
            },
            "type" : "unary"
          }, {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "rd",
              "variable" : 5
            },
            "go-type" : 13,
            "kind" : "expression",
            "target" : {
              "go-type" : 2,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "pd",
                "variable" : 0
              }
            },
            "type" : "selector"
          }, {
            "go-type" : 13,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          }, {
            "go-type" : 25,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "rtf",
              "variable" : 11
            }
          }, {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "pd",
              "variable" : 0
            }
          }, {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "rseq",
              "variable" : 16
            },
            "go-type" : 7,
            "kind" : "expression",
            "target" : {
              "go-type" : 2,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "pd",
                "variable" : 0
              }
            },
            "type" : "selector"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 31,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "modtimer"
            }
          },
          "go-type" : 17,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 264,
      "code" : "modtimer(&pd.rt, pd.rd, 0, rtf, pd, pd.rseq)",
      "entry" : false,
      "use-vars" : [ 0, 11 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 31 ],
      "in-vars" : [ 0, 9, 8, 10 ],
      "exit" : false,
      "out-vars" : [ 0, 9, 8, 10 ],
      "decl-vars" : [ ],
      "line-start" : 266,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 30,
            "kind" : "expression",
            "operator" : "&",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "rt",
                "variable" : 12
              },
              "go-type" : 10,
              "kind" : "expression",
              "target" : {
                "go-type" : 2,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "pd",
                  "variable" : 0
                }
              },
              "type" : "selector"
            },
            "type" : "unary"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 33,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "deltimer"
            }
          },
          "go-type" : 8,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 266,
      "code" : "deltimer(&pd.rt)",
      "entry" : false,
      "use-vars" : [ 0 ]
    }, {
      "update-vars" : [ 0 ],
      "successors" : [ 32 ],
      "in-vars" : [ 0, 9, 8, 10 ],
      "exit" : false,
      "out-vars" : [ 0, 9, 8, 10 ],
      "decl-vars" : [ ],
      "line-start" : 267,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "f",
            "variable" : 13
          },
          "go-type" : 14,
          "kind" : "expression",
          "target" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "rt",
              "variable" : 12
            },
            "go-type" : 10,
            "kind" : "expression",
            "target" : {
              "go-type" : 2,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "pd",
                "variable" : 0
              }
            },
            "type" : "selector"
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "go-type" : 27,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Nil",
            "kind" : "ident",
            "value" : "nil"
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 267,
      "code" : "pd.rt.f = nil",
      "entry" : false,
      "use-vars" : [ 0 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 33, 38 ],
      "in-vars" : [ 0, 9, 8, 10 ],
      "exit" : false,
      "out-vars" : [ 10, 0, 9, 8 ],
      "decl-vars" : [ ],
      "line-start" : 270,
      "ast" : {
        "condition" : {
          "go-type" : 22,
          "kind" : "expression",
          "left" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "f",
              "variable" : 13
            },
            "go-type" : 14,
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "wt",
                "variable" : 17
              },
              "go-type" : 10,
              "kind" : "expression",
              "target" : {
                "go-type" : 2,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "pd",
                  "variable" : 0
                }
              },
              "type" : "selector"
            },
            "type" : "selector"
          },
          "operator" : "==",
          "right" : {
            "go-type" : 27,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Nil",
              "kind" : "ident",
              "value" : "nil"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 285,
      "code" : "if pd.wt.f == nil {\n\tif pd.wd > 0 && !combo {\n\t\tpd.wt.f = netpollWriteDeadline\n\t\tpd.wt.arg = pd\n\t\tpd.wt.seq = pd.wseq\n\t\tresettimer(&pd.wt, pd.wd)\n\t}\n} else if pd.wd != wd0 || combo != combo0 {\n\tpd.wseq++\n\tif pd.wd > 0 && !combo {\n\t\tmodtimer(&pd.wt, pd.wd, 0, netpollWriteDeadline, pd, pd.wseq)\n\t} else {\n\t\tdeltimer(&pd.wt)\n\t\tpd.wt.f = nil\n\t}\n}",
      "entry" : false,
      "use-vars" : [ 0 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 34, 44 ],
      "in-vars" : [ 0, 10 ],
      "exit" : false,
      "out-vars" : [ 0 ],
      "decl-vars" : [ ],
      "line-start" : 271,
      "ast" : {
        "condition" : {
          "go-type" : 8,
          "kind" : "expression",
          "left" : {
            "go-type" : 8,
            "kind" : "expression",
            "left" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "wd",
                "variable" : 6
              },
              "go-type" : 13,
              "kind" : "expression",
              "target" : {
                "go-type" : 2,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "pd",
                  "variable" : 0
                }
              },
              "type" : "selector"
            },
            "operator" : ">",
            "right" : {
              "go-type" : 13,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "0"
              }
            },
            "type" : "binary"
          },
          "operator" : "&&",
          "right" : {
            "go-type" : 8,
            "kind" : "expression",
            "operator" : "!",
            "target" : {
              "go-type" : 8,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "combo",
                "variable" : 10
              }
            },
            "type" : "unary"
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 276,
      "code" : "if pd.wd > 0 && !combo {\n\tpd.wt.f = netpollWriteDeadline\n\tpd.wt.arg = pd\n\tpd.wt.seq = pd.wseq\n\tresettimer(&pd.wt, pd.wd)\n}",
      "entry" : false,
      "use-vars" : [ 0, 10 ]
    }, {
      "update-vars" : [ 0 ],
      "successors" : [ 35 ],
      "in-vars" : [ 0 ],
      "exit" : false,
      "out-vars" : [ 0 ],
      "decl-vars" : [ ],
      "line-start" : 272,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "f",
            "variable" : 13
          },
          "go-type" : 14,
          "kind" : "expression",
          "target" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "wt",
              "variable" : 17
            },
            "go-type" : 10,
            "kind" : "expression",
            "target" : {
              "go-type" : 2,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "pd",
                "variable" : 0
              }
            },
            "type" : "selector"
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "go-type" : 25,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Func",
            "kind" : "ident",
            "value" : "netpollWriteDeadline"
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 272,
      "code" : "pd.wt.f = netpollWriteDeadline",
      "entry" : false,
      "use-vars" : [ 0 ]
    }, {
      "update-vars" : [ 0 ],
      "successors" : [ 36 ],
      "in-vars" : [ 0 ],
      "exit" : false,
      "out-vars" : [ 0 ],
      "decl-vars" : [ ],
      "line-start" : 273,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "arg",
            "variable" : 14
          },
          "go-type" : 16,
          "kind" : "expression",
          "target" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "wt",
              "variable" : 17
            },
            "go-type" : 10,
            "kind" : "expression",
            "target" : {
              "go-type" : 2,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "pd",
                "variable" : 0
              }
            },
            "type" : "selector"
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "go-type" : 2,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "pd",
            "variable" : 0
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 273,
      "code" : "pd.wt.arg = pd",
      "entry" : false,
      "use-vars" : [ 0 ]
    }, {
      "update-vars" : [ 0 ],
      "successors" : [ 37 ],
      "in-vars" : [ 0 ],
      "exit" : false,
      "out-vars" : [ 0 ],
      "decl-vars" : [ ],
      "line-start" : 274,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "seq",
            "variable" : 15
          },
          "go-type" : 7,
          "kind" : "expression",
          "target" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "wt",
              "variable" : 17
            },
            "go-type" : 10,
            "kind" : "expression",
            "target" : {
              "go-type" : 2,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "pd",
                "variable" : 0
              }
            },
            "type" : "selector"
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "wseq",
            "variable" : 18
          },
          "go-type" : 7,
          "kind" : "expression",
          "target" : {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "pd",
              "variable" : 0
            }
          },
          "type" : "selector"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 274,
      "code" : "pd.wt.seq = pd.wseq",
      "entry" : false,
      "use-vars" : [ 0 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 44 ],
      "in-vars" : [ 0 ],
      "exit" : false,
      "out-vars" : [ 0 ],
      "decl-vars" : [ ],
      "line-start" : 275,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 30,
            "kind" : "expression",
            "operator" : "&",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "wt",
                "variable" : 17
              },
              "go-type" : 10,
              "kind" : "expression",
              "target" : {
                "go-type" : 2,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "pd",
                  "variable" : 0
                }
              },
              "type" : "selector"
            },
            "type" : "unary"
          }, {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "wd",
              "variable" : 6
            },
            "go-type" : 13,
            "kind" : "expression",
            "target" : {
              "go-type" : 2,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "pd",
                "variable" : 0
              }
            },
            "type" : "selector"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 28,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "resettimer"
            }
          },
          "go-type" : 17,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 275,
      "code" : "resettimer(&pd.wt, pd.wd)",
      "entry" : false,
      "use-vars" : [ 0 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 39, 44 ],
      "in-vars" : [ 9, 8, 10, 0 ],
      "exit" : false,
      "out-vars" : [ 0, 10 ],
      "decl-vars" : [ ],
      "line-start" : 277,
      "ast" : {
        "condition" : {
          "go-type" : 22,
          "kind" : "expression",
          "left" : {
            "go-type" : 22,
            "kind" : "expression",
            "left" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "wd",
                "variable" : 6
              },
              "go-type" : 13,
              "kind" : "expression",
              "target" : {
                "go-type" : 2,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "pd",
                  "variable" : 0
                }
              },
              "type" : "selector"
            },
            "operator" : "!=",
            "right" : {
              "go-type" : 13,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "wd0",
                "variable" : 8
              }
            },
            "type" : "binary"
          },
          "operator" : "||",
          "right" : {
            "go-type" : 22,
            "kind" : "expression",
            "left" : {
              "go-type" : 8,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "combo",
                "variable" : 10
              }
            },
            "operator" : "!=",
            "right" : {
              "go-type" : 8,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "combo0",
                "variable" : 9
              }
            },
            "type" : "binary"
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 285,
      "code" : "if pd.wd != wd0 || combo != combo0 {\n\tpd.wseq++\n\tif pd.wd > 0 && !combo {\n\t\tmodtimer(&pd.wt, pd.wd, 0, netpollWriteDeadline, pd, pd.wseq)\n\t} else {\n\t\tdeltimer(&pd.wt)\n\t\tpd.wt.f = nil\n\t}\n}",
      "entry" : false,
      "use-vars" : [ 10, 9, 0, 8 ]
    }, {
      "update-vars" : [ 0 ],
      "successors" : [ 40 ],
      "in-vars" : [ 0, 10 ],
      "exit" : false,
      "out-vars" : [ 0, 10 ],
      "decl-vars" : [ ],
      "line-start" : 278,
      "ast" : {
        "kind" : "statement",
        "operation" : "++",
        "target" : {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "wseq",
            "variable" : 18
          },
          "go-type" : 7,
          "kind" : "expression",
          "target" : {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "pd",
              "variable" : 0
            }
          },
          "type" : "selector"
        },
        "type" : "crement"
      },
      "assign-vars" : [ ],
      "line-end" : 278,
      "code" : "pd.wseq++",
      "entry" : false,
      "use-vars" : [ 0 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 41, 42 ],
      "in-vars" : [ 10, 0 ],
      "exit" : false,
      "out-vars" : [ 0 ],
      "decl-vars" : [ ],
      "line-start" : 279,
      "ast" : {
        "condition" : {
          "go-type" : 8,
          "kind" : "expression",
          "left" : {
            "go-type" : 8,
            "kind" : "expression",
            "left" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "wd",
                "variable" : 6
              },
              "go-type" : 13,
              "kind" : "expression",
              "target" : {
                "go-type" : 2,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "pd",
                  "variable" : 0
                }
              },
              "type" : "selector"
            },
            "operator" : ">",
            "right" : {
              "go-type" : 13,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "0"
              }
            },
            "type" : "binary"
          },
          "operator" : "&&",
          "right" : {
            "go-type" : 8,
            "kind" : "expression",
            "operator" : "!",
            "target" : {
              "go-type" : 8,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "combo",
                "variable" : 10
              }
            },
            "type" : "unary"
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 284,
      "code" : "if pd.wd > 0 && !combo {\n\tmodtimer(&pd.wt, pd.wd, 0, netpollWriteDeadline, pd, pd.wseq)\n} else {\n\tdeltimer(&pd.wt)\n\tpd.wt.f = nil\n}",
      "entry" : false,
      "use-vars" : [ 10, 0 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 44 ],
      "in-vars" : [ 0 ],
      "exit" : false,
      "out-vars" : [ 0 ],
      "decl-vars" : [ ],
      "line-start" : 280,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 30,
            "kind" : "expression",
            "operator" : "&",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "wt",
                "variable" : 17
              },
              "go-type" : 10,
              "kind" : "expression",
              "target" : {
                "go-type" : 2,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "pd",
                  "variable" : 0
                }
              },
              "type" : "selector"
            },
            "type" : "unary"
          }, {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "wd",
              "variable" : 6
            },
            "go-type" : 13,
            "kind" : "expression",
            "target" : {
              "go-type" : 2,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "pd",
                "variable" : 0
              }
            },
            "type" : "selector"
          }, {
            "go-type" : 13,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          }, {
            "go-type" : 25,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "netpollWriteDeadline"
            }
          }, {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "pd",
              "variable" : 0
            }
          }, {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "wseq",
              "variable" : 18
            },
            "go-type" : 7,
            "kind" : "expression",
            "target" : {
              "go-type" : 2,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "pd",
                "variable" : 0
              }
            },
            "type" : "selector"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 31,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "modtimer"
            }
          },
          "go-type" : 17,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 280,
      "code" : "modtimer(&pd.wt, pd.wd, 0, netpollWriteDeadline, pd, pd.wseq)",
      "entry" : false,
      "use-vars" : [ 0 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 43 ],
      "in-vars" : [ 0 ],
      "exit" : false,
      "out-vars" : [ 0 ],
      "decl-vars" : [ ],
      "line-start" : 282,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 30,
            "kind" : "expression",
            "operator" : "&",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "wt",
                "variable" : 17
              },
              "go-type" : 10,
              "kind" : "expression",
              "target" : {
                "go-type" : 2,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "pd",
                  "variable" : 0
                }
              },
              "type" : "selector"
            },
            "type" : "unary"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 33,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "deltimer"
            }
          },
          "go-type" : 8,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 282,
      "code" : "deltimer(&pd.wt)",
      "entry" : false,
      "use-vars" : [ 0 ]
    }, {
      "update-vars" : [ 0 ],
      "successors" : [ 44 ],
      "in-vars" : [ 0 ],
      "exit" : false,
      "out-vars" : [ 0 ],
      "decl-vars" : [ ],
      "line-start" : 283,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "f",
            "variable" : 13
          },
          "go-type" : 14,
          "kind" : "expression",
          "target" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "wt",
              "variable" : 17
            },
            "go-type" : 10,
            "kind" : "expression",
            "target" : {
              "go-type" : 2,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "pd",
                "variable" : 0
              }
            },
            "type" : "selector"
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "go-type" : 27,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Nil",
            "kind" : "ident",
            "value" : "nil"
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 283,
      "code" : "pd.wt.f = nil",
      "entry" : false,
      "use-vars" : [ 0 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 45 ],
      "in-vars" : [ 0 ],
      "exit" : false,
      "out-vars" : [ 19, 0, 20 ],
      "decl-vars" : [ 20, 19 ],
      "line-start" : 287,
      "ast" : {
        "kind" : "statement",
        "target" : {
          "kind" : "decl",
          "specs" : [ {
            "comments" : [ ],
            "declared-type" : {
              "contained" : {
                "go-type" : 37,
                "kind" : "type",
                "type" : "identifier",
                "value" : {
                  "go-type" : 37,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "g"
                }
              },
              "go-type" : 36,
              "kind" : "type",
              "type" : "pointer"
            },
            "kind" : "spec",
            "names" : [ {
              "ident-kind" : "NoKind",
              "kind" : "ident",
              "value" : "rg"
            }, {
              "ident-kind" : "NoKind",
              "kind" : "ident",
              "value" : "wg"
            } ],
            "type" : "var",
            "values" : [ ]
          } ],
          "type" : "var"
        },
        "type" : "declaration"
      },
      "assign-vars" : [ ],
      "line-end" : 287,
      "code" : "// If we set the new deadline in the past, unblock currently pending IO if any.\nvar rg, wg *g",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 46, 51 ],
      "in-vars" : [ 0, 20, 19 ],
      "exit" : false,
      "out-vars" : [ 0, 20, 19 ],
      "decl-vars" : [ ],
      "line-start" : 288,
      "ast" : {
        "condition" : {
          "go-type" : 22,
          "kind" : "expression",
          "left" : {
            "go-type" : 22,
            "kind" : "expression",
            "left" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "rd",
                "variable" : 5
              },
              "go-type" : 13,
              "kind" : "expression",
              "target" : {
                "go-type" : 2,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "pd",
                  "variable" : 0
                }
              },
              "type" : "selector"
            },
            "operator" : "<",
            "right" : {
              "go-type" : 13,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "0"
              }
            },
            "type" : "binary"
          },
          "operator" : "||",
          "right" : {
            "go-type" : 22,
            "kind" : "expression",
            "left" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "wd",
                "variable" : 6
              },
              "go-type" : 13,
              "kind" : "expression",
              "target" : {
                "go-type" : 2,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "pd",
                  "variable" : 0
                }
              },
              "type" : "selector"
            },
            "operator" : "<",
            "right" : {
              "go-type" : 13,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "0"
              }
            },
            "type" : "binary"
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 296,
      "code" : "if pd.rd < 0 || pd.wd < 0 {\n\tatomic.StorepNoWB(noescape(unsafe.Pointer(&wg)), nil)\n\tif pd.rd < 0 {\n\t\trg = netpollunblock(pd, 'r', false)\n\t}\n\tif pd.wd < 0 {\n\t\twg = netpollunblock(pd, 'w', false)\n\t}\n}",
      "entry" : false,
      "use-vars" : [ 0 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 47 ],
      "in-vars" : [ 0, 20, 19 ],
      "exit" : false,
      "out-vars" : [ 0, 20, 19 ],
      "decl-vars" : [ ],
      "line-start" : 289,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "arguments" : [ {
              "coerced-to" : {
                "go-type" : 44,
                "kind" : "type",
                "qualifier" : {
                  "ident-kind" : "PkgName",
                  "kind" : "ident",
                  "package" : 1,
                  "value" : "unsafe"
                },
                "type" : "identifier",
                "value" : {
                  "go-type" : 44,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "Pointer"
                }
              },
              "go-type" : 44,
              "kind" : "expression",
              "target" : {
                "go-type" : 137,
                "kind" : "expression",
                "operator" : "&",
                "target" : {
                  "go-type" : 36,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "wg",
                    "variable" : 19
                  }
                },
                "type" : "unary"
              },
              "type" : "cast"
            } ],
            "ellipsis" : false,
            "function" : {
              "go-type" : 134,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Func",
                "kind" : "ident",
                "value" : "noescape"
              }
            },
            "go-type" : 44,
            "kind" : "expression",
            "type" : "call"
          }, {
            "go-type" : 44,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Nil",
              "kind" : "ident",
              "value" : "nil"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 132,
            "kind" : "expression",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 3,
              "value" : "atomic"
            },
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "StorepNoWB"
            }
          },
          "go-type" : 17,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 289,
      "code" : "atomic.StorepNoWB(noescape(unsafe.Pointer(&wg)), nil)",
      "entry" : false,
      "use-vars" : [ 19 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 48, 49 ],
      "in-vars" : [ 20, 19, 0 ],
      "exit" : false,
      "out-vars" : [ 0, 20, 19 ],
      "decl-vars" : [ ],
      "line-start" : 290,
      "ast" : {
        "condition" : {
          "go-type" : 22,
          "kind" : "expression",
          "left" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "rd",
              "variable" : 5
            },
            "go-type" : 13,
            "kind" : "expression",
            "target" : {
              "go-type" : 2,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "pd",
                "variable" : 0
              }
            },
            "type" : "selector"
          },
          "operator" : "<",
          "right" : {
            "go-type" : 13,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 292,
      "code" : "if pd.rd < 0 {\n\trg = netpollunblock(pd, 'r', false)\n}",
      "entry" : false,
      "use-vars" : [ 0 ]
    }, {
      "update-vars" : [ 20 ],
      "successors" : [ 49 ],
      "in-vars" : [ 0, 19 ],
      "exit" : false,
      "out-vars" : [ 0, 20, 19 ],
      "decl-vars" : [ ],
      "line-start" : 291,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 36,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "rg",
            "variable" : 20
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "pd",
              "variable" : 0
            }
          }, {
            "go-type" : 48,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "114"
            }
          }, {
            "go-type" : 8,
            "kind" : "constant",
            "value" : {
              "type" : "BOOL",
              "value" : "false"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 138,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "netpollunblock"
            }
          },
          "go-type" : 36,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 20 ],
      "line-end" : 291,
      "code" : "rg = netpollunblock(pd, 'r', false)",
      "entry" : false,
      "use-vars" : [ 0 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 50, 51 ],
      "in-vars" : [ 19, 0, 20 ],
      "exit" : false,
      "out-vars" : [ 0, 20, 19 ],
      "decl-vars" : [ ],
      "line-start" : 293,
      "ast" : {
        "condition" : {
          "go-type" : 22,
          "kind" : "expression",
          "left" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "wd",
              "variable" : 6
            },
            "go-type" : 13,
            "kind" : "expression",
            "target" : {
              "go-type" : 2,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "pd",
                "variable" : 0
              }
            },
            "type" : "selector"
          },
          "operator" : "<",
          "right" : {
            "go-type" : 13,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 295,
      "code" : "if pd.wd < 0 {\n\twg = netpollunblock(pd, 'w', false)\n}",
      "entry" : false,
      "use-vars" : [ 0 ]
    }, {
      "update-vars" : [ 19 ],
      "successors" : [ 51 ],
      "in-vars" : [ 0, 20 ],
      "exit" : false,
      "out-vars" : [ 19, 0, 20 ],
      "decl-vars" : [ ],
      "line-start" : 294,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 36,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "wg",
            "variable" : 19
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "pd",
              "variable" : 0
            }
          }, {
            "go-type" : 48,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "119"
            }
          }, {
            "go-type" : 8,
            "kind" : "constant",
            "value" : {
              "type" : "BOOL",
              "value" : "false"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 138,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "netpollunblock"
            }
          },
          "go-type" : 36,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 19 ],
      "line-end" : 294,
      "code" : "wg = netpollunblock(pd, 'w', false)",
      "entry" : false,
      "use-vars" : [ 0 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 52 ],
      "in-vars" : [ 0, 20, 19 ],
      "exit" : false,
      "out-vars" : [ 20, 19 ],
      "decl-vars" : [ ],
      "line-start" : 297,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 21,
            "kind" : "expression",
            "operator" : "&",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "lock",
                "variable" : 3
              },
              "go-type" : 5,
              "kind" : "expression",
              "target" : {
                "go-type" : 2,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "pd",
                  "variable" : 0
                }
              },
              "type" : "selector"
            },
            "type" : "unary"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 19,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "unlock"
            }
          },
          "go-type" : 17,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 297,
      "code" : "unlock(&pd.lock)",
      "entry" : false,
      "use-vars" : [ 0 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 53, 54 ],
      "in-vars" : [ 20, 19 ],
      "exit" : false,
      "out-vars" : [ 20, 19 ],
      "decl-vars" : [ ],
      "line-start" : 298,
      "ast" : {
        "condition" : {
          "go-type" : 22,
          "kind" : "expression",
          "left" : {
            "go-type" : 36,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "rg",
              "variable" : 20
            }
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 27,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Nil",
              "kind" : "ident",
              "value" : "nil"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 300,
      "code" : "if rg != nil {\n\tnetpollgoready(rg, 3)\n}",
      "entry" : false,
      "use-vars" : [ 20 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 54 ],
      "in-vars" : [ 20, 19 ],
      "exit" : false,
      "out-vars" : [ 19 ],
      "decl-vars" : [ ],
      "line-start" : 299,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 36,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "rg",
              "variable" : 20
            }
          }, {
            "go-type" : 18,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "3"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 141,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "netpollgoready"
            }
          },
          "go-type" : 17,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 299,
      "code" : "netpollgoready(rg, 3)",
      "entry" : false,
      "use-vars" : [ 20 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1, 55 ],
      "in-vars" : [ 19 ],
      "exit" : false,
      "out-vars" : [ 19 ],
      "decl-vars" : [ ],
      "line-start" : 301,
      "ast" : {
        "condition" : {
          "go-type" : 22,
          "kind" : "expression",
          "left" : {
            "go-type" : 36,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "wg",
              "variable" : 19
            }
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 27,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Nil",
              "kind" : "ident",
              "value" : "nil"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 303,
      "code" : "if wg != nil {\n\tnetpollgoready(wg, 3)\n}",
      "entry" : false,
      "use-vars" : [ 19 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 19 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 302,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 36,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "wg",
              "variable" : 19
            }
          }, {
            "go-type" : 18,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "3"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 141,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "netpollgoready"
            }
          },
          "go-type" : 17,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 302,
      "code" : "netpollgoready(wg, 3)",
      "entry" : false,
      "use-vars" : [ 19 ]
    } ],
    "code" : "//go:linkname poll_runtime_pollSetDeadline internal/poll.runtime_pollSetDeadline\nfunc poll_runtime_pollSetDeadline(pd *pollDesc, d int64, mode int) {\n\tlock(&pd.lock)\n\tif pd.closing {\n\t\tunlock(&pd.lock)\n\t\treturn\n\t}\n\trd0, wd0 := pd.rd, pd.wd\n\tcombo0 := rd0 > 0 && rd0 == wd0\n\tif d > 0 {\n\t\td += nanotime()\n\t\tif d <= 0 {\n\n\t\t\td = 1<<63 - 1\n\t\t}\n\t}\n\tif mode == 'r' || mode == 'r'+'w' {\n\t\tpd.rd = d\n\t}\n\tif mode == 'w' || mode == 'r'+'w' {\n\t\tpd.wd = d\n\t}\n\tcombo := pd.rd > 0 && pd.rd == pd.wd\n\trtf := netpollReadDeadline\n\tif combo {\n\t\trtf = netpollDeadline\n\t}\n\tif pd.rt.f == nil {\n\t\tif pd.rd > 0 {\n\t\t\tpd.rt.f = rtf\n\n\t\t\tpd.rt.arg = pd\n\t\t\tpd.rt.seq = pd.rseq\n\t\t\tresettimer(&pd.rt, pd.rd)\n\t\t}\n\t} else if pd.rd != rd0 || combo != combo0 {\n\t\tpd.rseq++\n\t\tif pd.rd > 0 {\n\t\t\tmodtimer(&pd.rt, pd.rd, 0, rtf, pd, pd.rseq)\n\t\t} else {\n\t\t\tdeltimer(&pd.rt)\n\t\t\tpd.rt.f = nil\n\t\t}\n\t}\n\tif pd.wt.f == nil {\n\t\tif pd.wd > 0 && !combo {\n\t\t\tpd.wt.f = netpollWriteDeadline\n\t\t\tpd.wt.arg = pd\n\t\t\tpd.wt.seq = pd.wseq\n\t\t\tresettimer(&pd.wt, pd.wd)\n\t\t}\n\t} else if pd.wd != wd0 || combo != combo0 {\n\t\tpd.wseq++\n\t\tif pd.wd > 0 && !combo {\n\t\t\tmodtimer(&pd.wt, pd.wd, 0, netpollWriteDeadline, pd, pd.wseq)\n\t\t} else {\n\t\t\tdeltimer(&pd.wt)\n\t\t\tpd.wt.f = nil\n\t\t}\n\t}\n\t// If we set the new deadline in the past, unblock currently pending IO if any.\n\tvar rg, wg *g\n\tif pd.rd < 0 || pd.wd < 0 {\n\t\tatomic.StorepNoWB(noescape(unsafe.Pointer(&wg)), nil)\n\t\tif pd.rd < 0 {\n\t\t\trg = netpollunblock(pd, 'r', false)\n\t\t}\n\t\tif pd.wd < 0 {\n\t\t\twg = netpollunblock(pd, 'w', false)\n\t\t}\n\t}\n\tunlock(&pd.lock)\n\tif rg != nil {\n\t\tnetpollgoready(rg, 3)\n\t}\n\tif wg != nil {\n\t\tnetpollgoready(wg, 3)\n\t}\n}",
    "defines" : [ 0 ],
    "functions" : [ {
      "name" : "poll_runtime_pollSetDeadline",
      "package" : 0,
      "type" : 0,
      "exported" : false
    }, {
      "name" : "lock",
      "package" : 0,
      "type" : 19,
      "exported" : false
    }, {
      "name" : "unlock",
      "package" : 0,
      "type" : 19,
      "exported" : false
    }, {
      "name" : "nanotime",
      "package" : 0,
      "type" : 23,
      "exported" : false
    }, {
      "name" : "netpollReadDeadline",
      "package" : 0,
      "type" : 25,
      "exported" : false
    }, {
      "name" : "netpollDeadline",
      "package" : 0,
      "type" : 25,
      "exported" : false
    }, {
      "name" : "resettimer",
      "package" : 0,
      "type" : 28,
      "exported" : false
    }, {
      "name" : "modtimer",
      "package" : 0,
      "type" : 31,
      "exported" : false
    }, {
      "name" : "deltimer",
      "package" : 0,
      "type" : 33,
      "exported" : false
    }, {
      "name" : "netpollWriteDeadline",
      "package" : 0,
      "type" : 25,
      "exported" : false
    }, {
      "name" : "StorepNoWB",
      "package" : 3,
      "type" : 132,
      "exported" : true
    }, {
      "name" : "noescape",
      "package" : 0,
      "type" : 134,
      "exported" : false
    }, {
      "name" : "netpollunblock",
      "package" : 0,
      "type" : 138,
      "exported" : false
    }, {
      "name" : "netpollgoready",
      "package" : 0,
      "type" : 141,
      "exported" : false
    } ],
    "line-end" : 304,
    "line-start" : 224,
    "names" : [ "poll_runtime_pollSetDeadline" ],
    "package" : 0,
    "packages" : [ {
      "name" : "runtime",
      "path" : "runtime"
    }, {
      "name" : "unsafe",
      "path" : "unsafe"
    }, {
      "name" : "sys",
      "path" : "runtime/internal/sys"
    }, {
      "name" : "atomic",
      "path" : "runtime/internal/atomic"
    } ],
    "params" : [ 0, 1, 2 ],
    "receivers" : [ ],
    "results" : [ ],
    "type" : "function",
    "types" : [ {
      "name" : "func(pd *runtime.pollDesc, d int64, mode int)",
      "params" : 1,
      "recv" : -1,
      "results" : 17,
      "type" : "Signature",
      "underlying" : 0,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "pd",
        "type" : 2
      }, {
        "name" : "d",
        "type" : 13
      }, {
        "name" : "mode",
        "type" : 18
      } ],
      "name" : "(pd *runtime.pollDesc, d int64, mode int)",
      "type" : "Tuple",
      "underlying" : 1
    }, {
      "elem" : 3,
      "name" : "*runtime.pollDesc",
      "type" : "Pointer",
      "underlying" : 2
    }, {
      "local-name" : "pollDesc",
      "name" : "runtime.pollDesc",
      "package" : 0,
      "type" : "Named",
      "underlying" : 4
    }, {
      "fields" : [ {
        "name" : "link",
        "type" : 2
      }, {
        "name" : "lock",
        "type" : 5
      }, {
        "name" : "fd",
        "type" : 7
      }, {
        "name" : "closing",
        "type" : 8
      }, {
        "name" : "everr",
        "type" : 8
      }, {
        "name" : "user",
        "type" : 9
      }, {
        "name" : "rseq",
        "type" : 7
      }, {
        "name" : "rg",
        "type" : 7
      }, {
        "name" : "rt",
        "type" : 10
      }, {
        "name" : "rd",
        "type" : 13
      }, {
        "name" : "wseq",
        "type" : 7
      }, {
        "name" : "wg",
        "type" : 7
      }, {
        "name" : "wt",
        "type" : 10
      }, {
        "name" : "wd",
        "type" : 13
      } ],
      "name" : "struct{link *runtime.pollDesc; lock runtime.mutex; fd uintptr; closing bool; everr bool; user uint32; rseq uintptr; rg uintptr; rt runtime.timer; rd int64; wseq uintptr; wg uintptr; wt runtime.timer; wd int64}",
      "type" : "Struct",
      "underlying" : 4
    }, {
      "local-name" : "mutex",
      "name" : "runtime.mutex",
      "package" : 0,
      "type" : "Named",
      "underlying" : 6
    }, {
      "fields" : [ {
        "name" : "key",
        "type" : 7
      } ],
      "name" : "struct{key uintptr}",
      "type" : "Struct",
      "underlying" : 6
    }, {
      "name" : "uintptr",
      "type" : "Basic",
      "underlying" : 7
    }, {
      "name" : "bool",
      "type" : "Basic",
      "underlying" : 8
    }, {
      "name" : "uint32",
      "type" : "Basic",
      "underlying" : 9
    }, {
      "local-name" : "timer",
      "name" : "runtime.timer",
      "package" : 0,
      "type" : "Named",
      "underlying" : 11
    }, {
      "fields" : [ {
        "name" : "pp",
        "type" : 12
      }, {
        "name" : "when",
        "type" : 13
      }, {
        "name" : "period",
        "type" : 13
      }, {
        "name" : "f",
        "type" : 14
      }, {
        "name" : "arg",
        "type" : 16
      }, {
        "name" : "seq",
        "type" : 7
      }, {
        "name" : "nextwhen",
        "type" : 13
      }, {
        "name" : "status",
        "type" : 9
      } ],
      "name" : "struct{pp runtime.puintptr; when int64; period int64; f func(interface{}, uintptr); arg interface{}; seq uintptr; nextwhen int64; status uint32}",
      "type" : "Struct",
      "underlying" : 11
    }, {
      "local-name" : "puintptr",
      "name" : "runtime.puintptr",
      "package" : 0,
      "type" : "Named",
      "underlying" : 7
    }, {
      "name" : "int64",
      "type" : "Basic",
      "underlying" : 13
    }, {
      "name" : "func(interface{}, uintptr)",
      "params" : 15,
      "recv" : -1,
      "results" : 17,
      "type" : "Signature",
      "underlying" : 14,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 16
      }, {
        "name" : "",
        "type" : 7
      } ],
      "name" : "(interface{}, uintptr)",
      "type" : "Tuple",
      "underlying" : 15
    }, {
      "methods" : [ ],
      "name" : "interface{}",
      "type" : "Interface",
      "underlying" : 16
    }, {
      "fields" : [ ],
      "name" : "()",
      "type" : "Tuple",
      "underlying" : 17
    }, {
      "name" : "int",
      "type" : "Basic",
      "underlying" : 18
    }, {
      "name" : "func(l *runtime.mutex)",
      "params" : 20,
      "recv" : -1,
      "results" : 17,
      "type" : "Signature",
      "underlying" : 19,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "l",
        "type" : 21
      } ],
      "name" : "(l *runtime.mutex)",
      "type" : "Tuple",
      "underlying" : 20
    }, {
      "elem" : 5,
      "name" : "*runtime.mutex",
      "type" : "Pointer",
      "underlying" : 21
    }, {
      "name" : "untyped bool",
      "type" : "Basic",
      "underlying" : 22
    }, {
      "name" : "func() int64",
      "params" : 17,
      "recv" : -1,
      "results" : 24,
      "type" : "Signature",
      "underlying" : 23,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 13
      } ],
      "name" : "(int64)",
      "type" : "Tuple",
      "underlying" : 24
    }, {
      "name" : "func(arg interface{}, seq uintptr)",
      "params" : 26,
      "recv" : -1,
      "results" : 17,
      "type" : "Signature",
      "underlying" : 25,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "arg",
        "type" : 16
      }, {
        "name" : "seq",
        "type" : 7
      } ],
      "name" : "(arg interface{}, seq uintptr)",
      "type" : "Tuple",
      "underlying" : 26
    }, {
      "name" : "untyped nil",
      "type" : "Basic",
      "underlying" : 27
    }, {
      "name" : "func(t *runtime.timer, when int64)",
      "params" : 29,
      "recv" : -1,
      "results" : 17,
      "type" : "Signature",
      "underlying" : 28,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "t",
        "type" : 30
      }, {
        "name" : "when",
        "type" : 13
      } ],
      "name" : "(t *runtime.timer, when int64)",
      "type" : "Tuple",
      "underlying" : 29
    }, {
      "elem" : 10,
      "name" : "*runtime.timer",
      "type" : "Pointer",
      "underlying" : 30
    }, {
      "name" : "func(t *runtime.timer, when int64, period int64, f func(interface{}, uintptr), arg interface{}, seq uintptr)",
      "params" : 32,
      "recv" : -1,
      "results" : 17,
      "type" : "Signature",
      "underlying" : 31,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "t",
        "type" : 30
      }, {
        "name" : "when",
        "type" : 13
      }, {
        "name" : "period",
        "type" : 13
      }, {
        "name" : "f",
        "type" : 14
      }, {
        "name" : "arg",
        "type" : 16
      }, {
        "name" : "seq",
        "type" : 7
      } ],
      "name" : "(t *runtime.timer, when int64, period int64, f func(interface{}, uintptr), arg interface{}, seq uintptr)",
      "type" : "Tuple",
      "underlying" : 32
    }, {
      "name" : "func(t *runtime.timer) bool",
      "params" : 34,
      "recv" : -1,
      "results" : 35,
      "type" : "Signature",
      "underlying" : 33,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "t",
        "type" : 30
      } ],
      "name" : "(t *runtime.timer)",
      "type" : "Tuple",
      "underlying" : 34
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 8
      } ],
      "name" : "(bool)",
      "type" : "Tuple",
      "underlying" : 35
    }, {
      "elem" : 37,
      "name" : "*runtime.g",
      "type" : "Pointer",
      "underlying" : 36
    }, {
      "local-name" : "g",
      "name" : "runtime.g",
      "package" : 0,
      "type" : "Named",
      "underlying" : 38
    }, {
      "fields" : [ {
        "name" : "stack",
        "type" : 39
      }, {
        "name" : "stackguard0",
        "type" : 7
      }, {
        "name" : "stackguard1",
        "type" : 7
      }, {
        "name" : "_panic",
        "type" : 41
      }, {
        "name" : "_defer",
        "type" : 45
      }, {
        "name" : "m",
        "type" : 52
      }, {
        "name" : "sched",
        "type" : 55
      }, {
        "name" : "syscallsp",
        "type" : 7
      }, {
        "name" : "syscallpc",
        "type" : 7
      }, {
        "name" : "stktopsp",
        "type" : 7
      }, {
        "name" : "param",
        "type" : 44
      }, {
        "name" : "atomicstatus",
        "type" : 9
      }, {
        "name" : "stackLock",
        "type" : 9
      }, {
        "name" : "goid",
        "type" : 13
      }, {
        "name" : "schedlink",
        "type" : 57
      }, {
        "name" : "waitsince",
        "type" : 13
      }, {
        "name" : "waitreason",
        "type" : 107
      }, {
        "name" : "preempt",
        "type" : 8
      }, {
        "name" : "preemptStop",
        "type" : 8
      }, {
        "name" : "preemptShrink",
        "type" : 8
      }, {
        "name" : "asyncSafePoint",
        "type" : 8
      }, {
        "name" : "paniconfault",
        "type" : 8
      }, {
        "name" : "gcscandone",
        "type" : 8
      }, {
        "name" : "throwsplit",
        "type" : 8
      }, {
        "name" : "activeStackChans",
        "type" : 8
      }, {
        "name" : "raceignore",
        "type" : 67
      }, {
        "name" : "sysblocktraced",
        "type" : 8
      }, {
        "name" : "sysexitticks",
        "type" : 13
      }, {
        "name" : "traceseq",
        "type" : 59
      }, {
        "name" : "tracelastp",
        "type" : 12
      }, {
        "name" : "lockedm",
        "type" : 73
      }, {
        "name" : "sig",
        "type" : 9
      }, {
        "name" : "writebuf",
        "type" : 108
      }, {
        "name" : "sigcode0",
        "type" : 7
      }, {
        "name" : "sigcode1",
        "type" : 7
      }, {
        "name" : "sigpc",
        "type" : 7
      }, {
        "name" : "gopc",
        "type" : 7
      }, {
        "name" : "ancestors",
        "type" : 109
      }, {
        "name" : "startpc",
        "type" : 7
      }, {
        "name" : "racectx",
        "type" : 7
      }, {
        "name" : "waiting",
        "type" : 114
      }, {
        "name" : "cgoCtxt",
        "type" : 113
      }, {
        "name" : "labels",
        "type" : 44
      }, {
        "name" : "timer",
        "type" : 30
      }, {
        "name" : "selectDone",
        "type" : 9
      }, {
        "name" : "gcAssistBytes",
        "type" : 13
      } ],
      "name" : "struct{stack runtime.stack; stackguard0 uintptr; stackguard1 uintptr; _panic *runtime._panic; _defer *runtime._defer; m *runtime.m; sched runtime.gobuf; syscallsp uintptr; syscallpc uintptr; stktopsp uintptr; param unsafe.Pointer; atomicstatus uint32; stackLock uint32; goid int64; schedlink runtime.guintptr; waitsince int64; waitreason runtime.waitReason; preempt bool; preemptStop bool; preemptShrink bool; asyncSafePoint bool; paniconfault bool; gcscandone bool; throwsplit bool; activeStackChans bool; raceignore int8; sysblocktraced bool; sysexitticks int64; traceseq uint64; tracelastp runtime.puintptr; lockedm runtime.muintptr; sig uint32; writebuf []byte; sigcode0 uintptr; sigcode1 uintptr; sigpc uintptr; gopc uintptr; ancestors *[]runtime.ancestorInfo; startpc uintptr; racectx uintptr; waiting *runtime.sudog; cgoCtxt []uintptr; labels unsafe.Pointer; timer *runtime.timer; selectDone uint32; gcAssistBytes int64}",
      "type" : "Struct",
      "underlying" : 38
    }, {
      "local-name" : "stack",
      "name" : "runtime.stack",
      "package" : 0,
      "type" : "Named",
      "underlying" : 40
    }, {
      "fields" : [ {
        "name" : "lo",
        "type" : 7
      }, {
        "name" : "hi",
        "type" : 7
      } ],
      "name" : "struct{lo uintptr; hi uintptr}",
      "type" : "Struct",
      "underlying" : 40
    }, {
      "elem" : 42,
      "name" : "*runtime._panic",
      "type" : "Pointer",
      "underlying" : 41
    }, {
      "local-name" : "_panic",
      "name" : "runtime._panic",
      "package" : 0,
      "type" : "Named",
      "underlying" : 43
    }, {
      "fields" : [ {
        "name" : "argp",
        "type" : 44
      }, {
        "name" : "arg",
        "type" : 16
      }, {
        "name" : "link",
        "type" : 41
      }, {
        "name" : "pc",
        "type" : 7
      }, {
        "name" : "sp",
        "type" : 44
      }, {
        "name" : "recovered",
        "type" : 8
      }, {
        "name" : "aborted",
        "type" : 8
      }, {
        "name" : "goexit",
        "type" : 8
      } ],
      "name" : "struct{argp unsafe.Pointer; arg interface{}; link *runtime._panic; pc uintptr; sp unsafe.Pointer; recovered bool; aborted bool; goexit bool}",
      "type" : "Struct",
      "underlying" : 43
    }, {
      "local-name" : "Pointer",
      "name" : "unsafe.Pointer",
      "package" : 1,
      "type" : "Basic",
      "underlying" : 44
    }, {
      "elem" : 46,
      "name" : "*runtime._defer",
      "type" : "Pointer",
      "underlying" : 45
    }, {
      "local-name" : "_defer",
      "name" : "runtime._defer",
      "package" : 0,
      "type" : "Named",
      "underlying" : 47
    }, {
      "fields" : [ {
        "name" : "siz",
        "type" : 48
      }, {
        "name" : "started",
        "type" : 8
      }, {
        "name" : "heap",
        "type" : 8
      }, {
        "name" : "openDefer",
        "type" : 8
      }, {
        "name" : "sp",
        "type" : 7
      }, {
        "name" : "pc",
        "type" : 7
      }, {
        "name" : "fn",
        "type" : 49
      }, {
        "name" : "_panic",
        "type" : 41
      }, {
        "name" : "link",
        "type" : 45
      }, {
        "name" : "fd",
        "type" : 44
      }, {
        "name" : "varp",
        "type" : 7
      }, {
        "name" : "framepc",
        "type" : 7
      } ],
      "name" : "struct{siz int32; started bool; heap bool; openDefer bool; sp uintptr; pc uintptr; fn *runtime.funcval; _panic *runtime._panic; link *runtime._defer; fd unsafe.Pointer; varp uintptr; framepc uintptr}",
      "type" : "Struct",
      "underlying" : 47
    }, {
      "name" : "int32",
      "type" : "Basic",
      "underlying" : 48
    }, {
      "elem" : 50,
      "name" : "*runtime.funcval",
      "type" : "Pointer",
      "underlying" : 49
    }, {
      "local-name" : "funcval",
      "name" : "runtime.funcval",
      "package" : 0,
      "type" : "Named",
      "underlying" : 51
    }, {
      "fields" : [ {
        "name" : "fn",
        "type" : 7
      } ],
      "name" : "struct{fn uintptr}",
      "type" : "Struct",
      "underlying" : 51
    }, {
      "elem" : 53,
      "name" : "*runtime.m",
      "type" : "Pointer",
      "underlying" : 52
    }, {
      "local-name" : "m",
      "name" : "runtime.m",
      "package" : 0,
      "type" : "Named",
      "underlying" : 54
    }, {
      "fields" : [ {
        "name" : "g0",
        "type" : 36
      }, {
        "name" : "morebuf",
        "type" : 55
      }, {
        "name" : "divmod",
        "type" : 9
      }, {
        "name" : "procid",
        "type" : 59
      }, {
        "name" : "gsignal",
        "type" : 36
      }, {
        "name" : "goSigStack",
        "type" : 60
      }, {
        "name" : "sigmask",
        "type" : 62
      }, {
        "name" : "tls",
        "type" : 64
      }, {
        "name" : "mstartfn",
        "type" : 65
      }, {
        "name" : "curg",
        "type" : 36
      }, {
        "name" : "caughtsig",
        "type" : 57
      }, {
        "name" : "p",
        "type" : 12
      }, {
        "name" : "nextp",
        "type" : 12
      }, {
        "name" : "oldp",
        "type" : 12
      }, {
        "name" : "id",
        "type" : 13
      }, {
        "name" : "mallocing",
        "type" : 48
      }, {
        "name" : "throwing",
        "type" : 48
      }, {
        "name" : "preemptoff",
        "type" : 66
      }, {
        "name" : "locks",
        "type" : 48
      }, {
        "name" : "dying",
        "type" : 48
      }, {
        "name" : "profilehz",
        "type" : 48
      }, {
        "name" : "spinning",
        "type" : 8
      }, {
        "name" : "blocked",
        "type" : 8
      }, {
        "name" : "newSigstack",
        "type" : 8
      }, {
        "name" : "printlock",
        "type" : 67
      }, {
        "name" : "incgo",
        "type" : 8
      }, {
        "name" : "freeWait",
        "type" : 9
      }, {
        "name" : "fastrand",
        "type" : 63
      }, {
        "name" : "needextram",
        "type" : 8
      }, {
        "name" : "traceback",
        "type" : 68
      }, {
        "name" : "ncgocall",
        "type" : 59
      }, {
        "name" : "ncgo",
        "type" : 48
      }, {
        "name" : "cgoCallersUse",
        "type" : 9
      }, {
        "name" : "cgoCallers",
        "type" : 69
      }, {
        "name" : "park",
        "type" : 72
      }, {
        "name" : "alllink",
        "type" : 52
      }, {
        "name" : "schedlink",
        "type" : 73
      }, {
        "name" : "mcache",
        "type" : 74
      }, {
        "name" : "lockedg",
        "type" : 57
      }, {
        "name" : "createstack",
        "type" : 71
      }, {
        "name" : "lockedExt",
        "type" : 9
      }, {
        "name" : "lockedInt",
        "type" : 9
      }, {
        "name" : "nextwaitm",
        "type" : 73
      }, {
        "name" : "waitunlockf",
        "type" : 100
      }, {
        "name" : "waitlock",
        "type" : 44
      }, {
        "name" : "waittraceev",
        "type" : 95
      }, {
        "name" : "waittraceskip",
        "type" : 18
      }, {
        "name" : "startingtrace",
        "type" : 8
      }, {
        "name" : "syscalltick",
        "type" : 9
      }, {
        "name" : "freelink",
        "type" : 52
      }, {
        "name" : "libcall",
        "type" : 102
      }, {
        "name" : "libcallpc",
        "type" : 7
      }, {
        "name" : "libcallsp",
        "type" : 7
      }, {
        "name" : "libcallg",
        "type" : 57
      }, {
        "name" : "syscall",
        "type" : 102
      }, {
        "name" : "vdsoSP",
        "type" : 7
      }, {
        "name" : "vdsoPC",
        "type" : 7
      }, {
        "name" : "preemptGen",
        "type" : 9
      }, {
        "name" : "signalPending",
        "type" : 9
      }, {
        "name" : "dlogPerM",
        "type" : 104
      }, {
        "name" : "mOS",
        "type" : 106
      } ],
      "name" : "struct{g0 *runtime.g; morebuf runtime.gobuf; divmod uint32; procid uint64; gsignal *runtime.g; goSigStack runtime.gsignalStack; sigmask runtime.sigset; tls [6]uintptr; mstartfn func(); curg *runtime.g; caughtsig runtime.guintptr; p runtime.puintptr; nextp runtime.puintptr; oldp runtime.puintptr; id int64; mallocing int32; throwing int32; preemptoff string; locks int32; dying int32; profilehz int32; spinning bool; blocked bool; newSigstack bool; printlock int8; incgo bool; freeWait uint32; fastrand [2]uint32; needextram bool; traceback uint8; ncgocall uint64; ncgo int32; cgoCallersUse uint32; cgoCallers *runtime.cgoCallers; park runtime.note; alllink *runtime.m; schedlink runtime.muintptr; mcache *runtime.mcache; lockedg runtime.guintptr; createstack [32]uintptr; lockedExt uint32; lockedInt uint32; nextwaitm runtime.muintptr; waitunlockf func(*runtime.g, unsafe.Pointer) bool; waitlock unsafe.Pointer; waittraceev byte; waittraceskip int; startingtrace bool; syscalltick uint32; freelink *runtime.m; libcall runtime.libcall; libcallpc uintptr; libcallsp uintptr; libcallg runtime.guintptr; syscall runtime.libcall; vdsoSP uintptr; vdsoPC uintptr; preemptGen uint32; signalPending uint32; runtime.dlogPerM; runtime.mOS}",
      "type" : "Struct",
      "underlying" : 54
    }, {
      "local-name" : "gobuf",
      "name" : "runtime.gobuf",
      "package" : 0,
      "type" : "Named",
      "underlying" : 56
    }, {
      "fields" : [ {
        "name" : "sp",
        "type" : 7
      }, {
        "name" : "pc",
        "type" : 7
      }, {
        "name" : "g",
        "type" : 57
      }, {
        "name" : "ctxt",
        "type" : 44
      }, {
        "name" : "ret",
        "type" : 58
      }, {
        "name" : "lr",
        "type" : 7
      }, {
        "name" : "bp",
        "type" : 7
      } ],
      "name" : "struct{sp uintptr; pc uintptr; g runtime.guintptr; ctxt unsafe.Pointer; ret runtime/internal/sys.Uintreg; lr uintptr; bp uintptr}",
      "type" : "Struct",
      "underlying" : 56
    }, {
      "local-name" : "guintptr",
      "name" : "runtime.guintptr",
      "package" : 0,
      "type" : "Named",
      "underlying" : 7
    }, {
      "local-name" : "Uintreg",
      "name" : "runtime/internal/sys.Uintreg",
      "package" : 2,
      "type" : "Named",
      "underlying" : 59
    }, {
      "name" : "uint64",
      "type" : "Basic",
      "underlying" : 59
    }, {
      "local-name" : "gsignalStack",
      "name" : "runtime.gsignalStack",
      "package" : 0,
      "type" : "Named",
      "underlying" : 61
    }, {
      "fields" : [ {
        "name" : "stack",
        "type" : 39
      }, {
        "name" : "stackguard0",
        "type" : 7
      }, {
        "name" : "stackguard1",
        "type" : 7
      }, {
        "name" : "stktopsp",
        "type" : 7
      } ],
      "name" : "struct{stack runtime.stack; stackguard0 uintptr; stackguard1 uintptr; stktopsp uintptr}",
      "type" : "Struct",
      "underlying" : 61
    }, {
      "local-name" : "sigset",
      "name" : "runtime.sigset",
      "package" : 0,
      "type" : "Named",
      "underlying" : 63
    }, {
      "elem" : 9,
      "name" : "[2]uint32",
      "type" : "Array",
      "underlying" : 63
    }, {
      "elem" : 7,
      "name" : "[6]uintptr",
      "type" : "Array",
      "underlying" : 64
    }, {
      "name" : "func()",
      "params" : 17,
      "recv" : -1,
      "results" : 17,
      "type" : "Signature",
      "underlying" : 65,
      "variadic" : false
    }, {
      "name" : "string",
      "type" : "Basic",
      "underlying" : 66
    }, {
      "name" : "int8",
      "type" : "Basic",
      "underlying" : 67
    }, {
      "name" : "uint8",
      "type" : "Basic",
      "underlying" : 68
    }, {
      "elem" : 70,
      "name" : "*runtime.cgoCallers",
      "type" : "Pointer",
      "underlying" : 69
    }, {
      "local-name" : "cgoCallers",
      "name" : "runtime.cgoCallers",
      "package" : 0,
      "type" : "Named",
      "underlying" : 71
    }, {
      "elem" : 7,
      "name" : "[32]uintptr",
      "type" : "Array",
      "underlying" : 71
    }, {
      "local-name" : "note",
      "name" : "runtime.note",
      "package" : 0,
      "type" : "Named",
      "underlying" : 6
    }, {
      "local-name" : "muintptr",
      "name" : "runtime.muintptr",
      "package" : 0,
      "type" : "Named",
      "underlying" : 7
    }, {
      "elem" : 75,
      "name" : "*runtime.mcache",
      "type" : "Pointer",
      "underlying" : 74
    }, {
      "local-name" : "mcache",
      "name" : "runtime.mcache",
      "package" : 0,
      "type" : "Named",
      "underlying" : 76
    }, {
      "fields" : [ {
        "name" : "next_sample",
        "type" : 7
      }, {
        "name" : "local_scan",
        "type" : 7
      }, {
        "name" : "tiny",
        "type" : 7
      }, {
        "name" : "tinyoffset",
        "type" : 7
      }, {
        "name" : "local_tinyallocs",
        "type" : 7
      }, {
        "name" : "alloc",
        "type" : 77
      }, {
        "name" : "stackcache",
        "type" : 96
      }, {
        "name" : "local_largefree",
        "type" : 7
      }, {
        "name" : "local_nlargefree",
        "type" : 7
      }, {
        "name" : "local_nsmallfree",
        "type" : 99
      }, {
        "name" : "flushGen",
        "type" : 9
      } ],
      "name" : "struct{next_sample uintptr; local_scan uintptr; tiny uintptr; tinyoffset uintptr; local_tinyallocs uintptr; alloc [134]*runtime.mspan; stackcache [4]runtime.stackfreelist; local_largefree uintptr; local_nlargefree uintptr; local_nsmallfree [67]uintptr; flushGen uint32}",
      "type" : "Struct",
      "underlying" : 76
    }, {
      "elem" : 78,
      "name" : "[134]*runtime.mspan",
      "type" : "Array",
      "underlying" : 77
    }, {
      "elem" : 79,
      "name" : "*runtime.mspan",
      "type" : "Pointer",
      "underlying" : 78
    }, {
      "local-name" : "mspan",
      "name" : "runtime.mspan",
      "package" : 0,
      "type" : "Named",
      "underlying" : 80
    }, {
      "fields" : [ {
        "name" : "next",
        "type" : 78
      }, {
        "name" : "prev",
        "type" : 78
      }, {
        "name" : "list",
        "type" : 81
      }, {
        "name" : "startAddr",
        "type" : 7
      }, {
        "name" : "npages",
        "type" : 7
      }, {
        "name" : "manualFreeList",
        "type" : 84
      }, {
        "name" : "freeindex",
        "type" : 7
      }, {
        "name" : "nelems",
        "type" : 7
      }, {
        "name" : "allocCache",
        "type" : 59
      }, {
        "name" : "allocBits",
        "type" : 85
      }, {
        "name" : "gcmarkBits",
        "type" : 85
      }, {
        "name" : "sweepgen",
        "type" : 9
      }, {
        "name" : "divMul",
        "type" : 87
      }, {
        "name" : "baseMask",
        "type" : 87
      }, {
        "name" : "allocCount",
        "type" : 87
      }, {
        "name" : "spanclass",
        "type" : 88
      }, {
        "name" : "state",
        "type" : 89
      }, {
        "name" : "needzero",
        "type" : 68
      }, {
        "name" : "divShift",
        "type" : 68
      }, {
        "name" : "divShift2",
        "type" : 68
      }, {
        "name" : "elemsize",
        "type" : 7
      }, {
        "name" : "limit",
        "type" : 7
      }, {
        "name" : "speciallock",
        "type" : 5
      }, {
        "name" : "specials",
        "type" : 92
      } ],
      "name" : "struct{next *runtime.mspan; prev *runtime.mspan; list *runtime.mSpanList; startAddr uintptr; npages uintptr; manualFreeList runtime.gclinkptr; freeindex uintptr; nelems uintptr; allocCache uint64; allocBits *runtime.gcBits; gcmarkBits *runtime.gcBits; sweepgen uint32; divMul uint16; baseMask uint16; allocCount uint16; spanclass runtime.spanClass; state runtime.mSpanStateBox; needzero uint8; divShift uint8; divShift2 uint8; elemsize uintptr; limit uintptr; speciallock runtime.mutex; specials *runtime.special}",
      "type" : "Struct",
      "underlying" : 80
    }, {
      "elem" : 82,
      "name" : "*runtime.mSpanList",
      "type" : "Pointer",
      "underlying" : 81
    }, {
      "local-name" : "mSpanList",
      "name" : "runtime.mSpanList",
      "package" : 0,
      "type" : "Named",
      "underlying" : 83
    }, {
      "fields" : [ {
        "name" : "first",
        "type" : 78
      }, {
        "name" : "last",
        "type" : 78
      } ],
      "name" : "struct{first *runtime.mspan; last *runtime.mspan}",
      "type" : "Struct",
      "underlying" : 83
    }, {
      "local-name" : "gclinkptr",
      "name" : "runtime.gclinkptr",
      "package" : 0,
      "type" : "Named",
      "underlying" : 7
    }, {
      "elem" : 86,
      "name" : "*runtime.gcBits",
      "type" : "Pointer",
      "underlying" : 85
    }, {
      "local-name" : "gcBits",
      "name" : "runtime.gcBits",
      "package" : 0,
      "type" : "Named",
      "underlying" : 68
    }, {
      "name" : "uint16",
      "type" : "Basic",
      "underlying" : 87
    }, {
      "local-name" : "spanClass",
      "name" : "runtime.spanClass",
      "package" : 0,
      "type" : "Named",
      "underlying" : 68
    }, {
      "local-name" : "mSpanStateBox",
      "name" : "runtime.mSpanStateBox",
      "package" : 0,
      "type" : "Named",
      "underlying" : 90
    }, {
      "fields" : [ {
        "name" : "s",
        "type" : 91
      } ],
      "name" : "struct{s runtime.mSpanState}",
      "type" : "Struct",
      "underlying" : 90
    }, {
      "local-name" : "mSpanState",
      "name" : "runtime.mSpanState",
      "package" : 0,
      "type" : "Named",
      "underlying" : 68
    }, {
      "elem" : 93,
      "name" : "*runtime.special",
      "type" : "Pointer",
      "underlying" : 92
    }, {
      "local-name" : "special",
      "name" : "runtime.special",
      "package" : 0,
      "type" : "Named",
      "underlying" : 94
    }, {
      "fields" : [ {
        "name" : "next",
        "type" : 92
      }, {
        "name" : "offset",
        "type" : 87
      }, {
        "name" : "kind",
        "type" : 95
      } ],
      "name" : "struct{next *runtime.special; offset uint16; kind byte}",
      "type" : "Struct",
      "underlying" : 94
    }, {
      "name" : "byte",
      "type" : "Basic",
      "underlying" : 95
    }, {
      "elem" : 97,
      "name" : "[4]runtime.stackfreelist",
      "type" : "Array",
      "underlying" : 96
    }, {
      "local-name" : "stackfreelist",
      "name" : "runtime.stackfreelist",
      "package" : 0,
      "type" : "Named",
      "underlying" : 98
    }, {
      "fields" : [ {
        "name" : "list",
        "type" : 84
      }, {
        "name" : "size",
        "type" : 7
      } ],
      "name" : "struct{list runtime.gclinkptr; size uintptr}",
      "type" : "Struct",
      "underlying" : 98
    }, {
      "elem" : 7,
      "name" : "[67]uintptr",
      "type" : "Array",
      "underlying" : 99
    }, {
      "name" : "func(*runtime.g, unsafe.Pointer) bool",
      "params" : 101,
      "recv" : -1,
      "results" : 35,
      "type" : "Signature",
      "underlying" : 100,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 36
      }, {
        "name" : "",
        "type" : 44
      } ],
      "name" : "(*runtime.g, unsafe.Pointer)",
      "type" : "Tuple",
      "underlying" : 101
    }, {
      "local-name" : "libcall",
      "name" : "runtime.libcall",
      "package" : 0,
      "type" : "Named",
      "underlying" : 103
    }, {
      "fields" : [ {
        "name" : "fn",
        "type" : 7
      }, {
        "name" : "n",
        "type" : 7
      }, {
        "name" : "args",
        "type" : 7
      }, {
        "name" : "r1",
        "type" : 7
      }, {
        "name" : "r2",
        "type" : 7
      }, {
        "name" : "err",
        "type" : 7
      } ],
      "name" : "struct{fn uintptr; n uintptr; args uintptr; r1 uintptr; r2 uintptr; err uintptr}",
      "type" : "Struct",
      "underlying" : 103
    }, {
      "local-name" : "dlogPerM",
      "name" : "runtime.dlogPerM",
      "package" : 0,
      "type" : "Named",
      "underlying" : 105
    }, {
      "fields" : [ ],
      "name" : "struct{}",
      "type" : "Struct",
      "underlying" : 105
    }, {
      "local-name" : "mOS",
      "name" : "runtime.mOS",
      "package" : 0,
      "type" : "Named",
      "underlying" : 105
    }, {
      "local-name" : "waitReason",
      "name" : "runtime.waitReason",
      "package" : 0,
      "type" : "Named",
      "underlying" : 68
    }, {
      "elem" : 95,
      "name" : "[]byte",
      "type" : "Slice",
      "underlying" : 108
    }, {
      "elem" : 110,
      "name" : "*[]runtime.ancestorInfo",
      "type" : "Pointer",
      "underlying" : 109
    }, {
      "elem" : 111,
      "name" : "[]runtime.ancestorInfo",
      "type" : "Slice",
      "underlying" : 110
    }, {
      "local-name" : "ancestorInfo",
      "name" : "runtime.ancestorInfo",
      "package" : 0,
      "type" : "Named",
      "underlying" : 112
    }, {
      "fields" : [ {
        "name" : "pcs",
        "type" : 113
      }, {
        "name" : "goid",
        "type" : 13
      }, {
        "name" : "gopc",
        "type" : 7
      } ],
      "name" : "struct{pcs []uintptr; goid int64; gopc uintptr}",
      "type" : "Struct",
      "underlying" : 112
    }, {
      "elem" : 7,
      "name" : "[]uintptr",
      "type" : "Slice",
      "underlying" : 113
    }, {
      "elem" : 115,
      "name" : "*runtime.sudog",
      "type" : "Pointer",
      "underlying" : 114
    }, {
      "local-name" : "sudog",
      "name" : "runtime.sudog",
      "package" : 0,
      "type" : "Named",
      "underlying" : 116
    }, {
      "fields" : [ {
        "name" : "g",
        "type" : 36
      }, {
        "name" : "isSelect",
        "type" : 8
      }, {
        "name" : "next",
        "type" : 114
      }, {
        "name" : "prev",
        "type" : 114
      }, {
        "name" : "elem",
        "type" : 44
      }, {
        "name" : "acquiretime",
        "type" : 13
      }, {
        "name" : "releasetime",
        "type" : 13
      }, {
        "name" : "ticket",
        "type" : 9
      }, {
        "name" : "parent",
        "type" : 114
      }, {
        "name" : "waitlink",
        "type" : 114
      }, {
        "name" : "waittail",
        "type" : 114
      }, {
        "name" : "c",
        "type" : 117
      } ],
      "name" : "struct{g *runtime.g; isSelect bool; next *runtime.sudog; prev *runtime.sudog; elem unsafe.Pointer; acquiretime int64; releasetime int64; ticket uint32; parent *runtime.sudog; waitlink *runtime.sudog; waittail *runtime.sudog; c *runtime.hchan}",
      "type" : "Struct",
      "underlying" : 116
    }, {
      "elem" : 118,
      "name" : "*runtime.hchan",
      "type" : "Pointer",
      "underlying" : 117
    }, {
      "local-name" : "hchan",
      "name" : "runtime.hchan",
      "package" : 0,
      "type" : "Named",
      "underlying" : 119
    }, {
      "fields" : [ {
        "name" : "qcount",
        "type" : 120
      }, {
        "name" : "dataqsiz",
        "type" : 120
      }, {
        "name" : "buf",
        "type" : 44
      }, {
        "name" : "elemsize",
        "type" : 87
      }, {
        "name" : "closed",
        "type" : 9
      }, {
        "name" : "elemtype",
        "type" : 121
      }, {
        "name" : "sendx",
        "type" : 120
      }, {
        "name" : "recvx",
        "type" : 120
      }, {
        "name" : "recvq",
        "type" : 130
      }, {
        "name" : "sendq",
        "type" : 130
      }, {
        "name" : "lock",
        "type" : 5
      } ],
      "name" : "struct{qcount uint; dataqsiz uint; buf unsafe.Pointer; elemsize uint16; closed uint32; elemtype *runtime._type; sendx uint; recvx uint; recvq runtime.waitq; sendq runtime.waitq; lock runtime.mutex}",
      "type" : "Struct",
      "underlying" : 119
    }, {
      "name" : "uint",
      "type" : "Basic",
      "underlying" : 120
    }, {
      "elem" : 122,
      "name" : "*runtime._type",
      "type" : "Pointer",
      "underlying" : 121
    }, {
      "local-name" : "_type",
      "name" : "runtime._type",
      "package" : 0,
      "type" : "Named",
      "underlying" : 123
    }, {
      "fields" : [ {
        "name" : "size",
        "type" : 7
      }, {
        "name" : "ptrdata",
        "type" : 7
      }, {
        "name" : "hash",
        "type" : 9
      }, {
        "name" : "tflag",
        "type" : 124
      }, {
        "name" : "align",
        "type" : 68
      }, {
        "name" : "fieldAlign",
        "type" : 68
      }, {
        "name" : "kind",
        "type" : 68
      }, {
        "name" : "equal",
        "type" : 125
      }, {
        "name" : "gcdata",
        "type" : 127
      }, {
        "name" : "str",
        "type" : 128
      }, {
        "name" : "ptrToThis",
        "type" : 129
      } ],
      "name" : "struct{size uintptr; ptrdata uintptr; hash uint32; tflag runtime.tflag; align uint8; fieldAlign uint8; kind uint8; equal func(unsafe.Pointer, unsafe.Pointer) bool; gcdata *byte; str runtime.nameOff; ptrToThis runtime.typeOff}",
      "type" : "Struct",
      "underlying" : 123
    }, {
      "local-name" : "tflag",
      "name" : "runtime.tflag",
      "package" : 0,
      "type" : "Named",
      "underlying" : 68
    }, {
      "name" : "func(unsafe.Pointer, unsafe.Pointer) bool",
      "params" : 126,
      "recv" : -1,
      "results" : 35,
      "type" : "Signature",
      "underlying" : 125,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 44
      }, {
        "name" : "",
        "type" : 44
      } ],
      "name" : "(unsafe.Pointer, unsafe.Pointer)",
      "type" : "Tuple",
      "underlying" : 126
    }, {
      "elem" : 95,
      "name" : "*byte",
      "type" : "Pointer",
      "underlying" : 127
    }, {
      "local-name" : "nameOff",
      "name" : "runtime.nameOff",
      "package" : 0,
      "type" : "Named",
      "underlying" : 48
    }, {
      "local-name" : "typeOff",
      "name" : "runtime.typeOff",
      "package" : 0,
      "type" : "Named",
      "underlying" : 48
    }, {
      "local-name" : "waitq",
      "name" : "runtime.waitq",
      "package" : 0,
      "type" : "Named",
      "underlying" : 131
    }, {
      "fields" : [ {
        "name" : "first",
        "type" : 114
      }, {
        "name" : "last",
        "type" : 114
      } ],
      "name" : "struct{first *runtime.sudog; last *runtime.sudog}",
      "type" : "Struct",
      "underlying" : 131
    }, {
      "name" : "func(ptr unsafe.Pointer, val unsafe.Pointer)",
      "params" : 133,
      "recv" : -1,
      "results" : 17,
      "type" : "Signature",
      "underlying" : 132,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "ptr",
        "type" : 44
      }, {
        "name" : "val",
        "type" : 44
      } ],
      "name" : "(ptr unsafe.Pointer, val unsafe.Pointer)",
      "type" : "Tuple",
      "underlying" : 133
    }, {
      "name" : "func(p unsafe.Pointer) unsafe.Pointer",
      "params" : 135,
      "recv" : -1,
      "results" : 136,
      "type" : "Signature",
      "underlying" : 134,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "p",
        "type" : 44
      } ],
      "name" : "(p unsafe.Pointer)",
      "type" : "Tuple",
      "underlying" : 135
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 44
      } ],
      "name" : "(unsafe.Pointer)",
      "type" : "Tuple",
      "underlying" : 136
    }, {
      "elem" : 36,
      "name" : "**runtime.g",
      "type" : "Pointer",
      "underlying" : 137
    }, {
      "name" : "func(pd *runtime.pollDesc, mode int32, ioready bool) *runtime.g",
      "params" : 139,
      "recv" : -1,
      "results" : 140,
      "type" : "Signature",
      "underlying" : 138,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "pd",
        "type" : 2
      }, {
        "name" : "mode",
        "type" : 48
      }, {
        "name" : "ioready",
        "type" : 8
      } ],
      "name" : "(pd *runtime.pollDesc, mode int32, ioready bool)",
      "type" : "Tuple",
      "underlying" : 139
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 36
      } ],
      "name" : "(*runtime.g)",
      "type" : "Tuple",
      "underlying" : 140
    }, {
      "name" : "func(gp *runtime.g, traceskip int)",
      "params" : 142,
      "recv" : -1,
      "results" : 17,
      "type" : "Signature",
      "underlying" : 141,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "gp",
        "type" : 36
      }, {
        "name" : "traceskip",
        "type" : 18
      } ],
      "name" : "(gp *runtime.g, traceskip int)",
      "type" : "Tuple",
      "underlying" : 142
    } ],
    "variables" : [ {
      "name" : "pd",
      "package" : 0,
      "type" : 2,
      "exported" : false
    }, {
      "name" : "d",
      "package" : 0,
      "type" : 13,
      "exported" : false
    }, {
      "name" : "mode",
      "package" : 0,
      "type" : 18,
      "exported" : false
    }, {
      "name" : "lock",
      "package" : 0,
      "type" : 5,
      "exported" : false
    }, {
      "name" : "closing",
      "package" : 0,
      "type" : 8,
      "exported" : false
    }, {
      "name" : "rd",
      "package" : 0,
      "type" : 13,
      "exported" : false
    }, {
      "name" : "wd",
      "package" : 0,
      "type" : 13,
      "exported" : false
    }, {
      "name" : "rd0",
      "package" : 0,
      "type" : 13,
      "exported" : false
    }, {
      "name" : "wd0",
      "package" : 0,
      "type" : 13,
      "exported" : false
    }, {
      "name" : "combo0",
      "package" : 0,
      "type" : 8,
      "exported" : false
    }, {
      "name" : "combo",
      "package" : 0,
      "type" : 8,
      "exported" : false
    }, {
      "name" : "rtf",
      "package" : 0,
      "type" : 25,
      "exported" : false
    }, {
      "name" : "rt",
      "package" : 0,
      "type" : 10,
      "exported" : false
    }, {
      "name" : "f",
      "package" : 0,
      "type" : 14,
      "exported" : false
    }, {
      "name" : "arg",
      "package" : 0,
      "type" : 16,
      "exported" : false
    }, {
      "name" : "seq",
      "package" : 0,
      "type" : 7,
      "exported" : false
    }, {
      "name" : "rseq",
      "package" : 0,
      "type" : 7,
      "exported" : false
    }, {
      "name" : "wt",
      "package" : 0,
      "type" : 10,
      "exported" : false
    }, {
      "name" : "wseq",
      "package" : 0,
      "type" : 7,
      "exported" : false
    }, {
      "name" : "wg",
      "package" : 0,
      "type" : 36,
      "exported" : false
    }, {
      "name" : "rg",
      "package" : 0,
      "type" : 36,
      "exported" : false
    } ]
  },
  "go-version" : "1.14.3"
}