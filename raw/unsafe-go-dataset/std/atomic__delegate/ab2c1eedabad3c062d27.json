{
  "usage" : {
    "file" : "splice_linux.go",
    "label1" : "delegate",
    "label2" : "atomic",
    "line" : "170",
    "module" : "std",
    "pkg" : "internal/poll",
    "project" : "kubernetes/kubernetes",
    "snippet" : "defer atomic.StorePointer(&disableSplice, unsafe.Pointer(p))",
    "version" : "std"
  },
  "cfg" : {
    "blocks" : [ {
      "update-vars" : [ ],
      "successors" : [ 2 ],
      "in-vars" : [ 5 ],
      "exit" : false,
      "out-vars" : [ 5 ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[entry]",
      "entry" : true,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ ],
      "in-vars" : [ 6, 5 ],
      "exit" : true,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[exit]",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 3 ],
      "in-vars" : [ 5 ],
      "exit" : false,
      "out-vars" : [ 6, 5 ],
      "decl-vars" : [ 6 ],
      "line-start" : 153,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "p"
          }
        } ],
        "right" : [ {
          "coerced-to" : {
            "contained" : {
              "go-type" : 11,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 11,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "bool"
              }
            },
            "go-type" : 10,
            "kind" : "type",
            "type" : "pointer"
          },
          "go-type" : 10,
          "kind" : "expression",
          "target" : {
            "arguments" : [ {
              "go-type" : 14,
              "kind" : "expression",
              "operator" : "&",
              "target" : {
                "go-type" : 9,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "disableSplice",
                  "variable" : 5
                }
              },
              "type" : "unary"
            } ],
            "ellipsis" : false,
            "function" : {
              "go-type" : 12,
              "kind" : "expression",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 2,
                "value" : "atomic"
              },
              "type" : "identifier",
              "value" : {
                "function" : 1,
                "ident-kind" : "Func",
                "kind" : "ident",
                "value" : "LoadPointer"
              }
            },
            "go-type" : 9,
            "kind" : "expression",
            "type" : "call"
          },
          "type" : "cast"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 153,
      "code" : "p := (*bool)(atomic.LoadPointer(&disableSplice))",
      "entry" : false,
      "use-vars" : [ 5 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 4, 5 ],
      "in-vars" : [ 6, 5 ],
      "exit" : false,
      "out-vars" : [ 5, 6 ],
      "decl-vars" : [ ],
      "line-start" : 154,
      "ast" : {
        "condition" : {
          "go-type" : 11,
          "kind" : "expression",
          "left" : {
            "go-type" : 11,
            "kind" : "expression",
            "left" : {
              "go-type" : 10,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "p",
                "variable" : 6
              }
            },
            "operator" : "!=",
            "right" : {
              "go-type" : 16,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Nil",
                "kind" : "ident",
                "value" : "nil"
              }
            },
            "type" : "binary"
          },
          "operator" : "&&",
          "right" : {
            "go-type" : 11,
            "kind" : "expression",
            "target" : {
              "go-type" : 10,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "p",
                "variable" : 6
              }
            },
            "type" : "star"
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 156,
      "code" : "if p != nil && *p {\n\treturn -1, -1, \"splice\", syscall.EINVAL\n}",
      "entry" : false,
      "use-vars" : [ 6 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 6, 5 ],
      "exit" : false,
      "out-vars" : [ 6, 5 ],
      "decl-vars" : [ ],
      "line-start" : 155,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 3,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "-1"
          }
        }, {
          "go-type" : 3,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "-1"
          }
        }, {
          "go-type" : 4,
          "kind" : "constant",
          "value" : {
            "type" : "STRING",
            "value" : "splice"
          }
        }, {
          "go-type" : 17,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "22"
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 155,
      "code" : "return -1, -1, \"splice\", syscall.EINVAL",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 6 ],
      "in-vars" : [ 6, 5 ],
      "exit" : false,
      "out-vars" : [ 7, 6, 5 ],
      "decl-vars" : [ 7 ],
      "line-start" : 158,
      "ast" : {
        "kind" : "statement",
        "target" : {
          "kind" : "decl",
          "specs" : [ {
            "comments" : [ ],
            "declared-type" : {
              "element" : {
                "go-type" : 3,
                "kind" : "type",
                "type" : "identifier",
                "value" : {
                  "go-type" : 3,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "int"
                }
              },
              "go-type" : 19,
              "kind" : "type",
              "length" : {
                "go-type" : 20,
                "kind" : "constant",
                "value" : {
                  "type" : "INT",
                  "value" : "2"
                }
              },
              "type" : "array"
            },
            "kind" : "spec",
            "names" : [ {
              "ident-kind" : "NoKind",
              "kind" : "ident",
              "value" : "fds"
            } ],
            "type" : "var",
            "values" : [ ]
          } ],
          "type" : "var"
        },
        "type" : "declaration"
      },
      "assign-vars" : [ ],
      "line-end" : 158,
      "code" : "var fds [2]int",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 8 ],
      "in-vars" : [ 5, 7, 6 ],
      "exit" : false,
      "out-vars" : [ 7, 6, 5 ],
      "decl-vars" : [ ],
      "line-start" : 163,
      "ast" : {
        "kind" : "statement",
        "target" : {
          "kind" : "decl",
          "specs" : [ {
            "comments" : [ ],
            "declared-type" : null,
            "kind" : "spec",
            "names" : [ {
              "ident-kind" : "NoKind",
              "kind" : "ident",
              "value" : "flags"
            } ],
            "type" : "const",
            "values" : [ {
              "go-type" : 20,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "526336"
              }
            } ]
          } ],
          "type" : "const"
        },
        "type" : "declaration"
      },
      "assign-vars" : [ ],
      "line-end" : 163,
      "code" : "// pipe2 was added in 2.6.27 and our minimum requirement is 2.6.23, so it\n// might not be implemented. Falling back to pipe is possible, but prior to\n// 2.6.29 splice returns -EAGAIN instead of 0 when the connection is\n// closed.\nconst flags = syscall.O_CLOEXEC | syscall.O_NONBLOCK",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 9, 10 ],
      "in-vars" : [ 8, 7, 6, 5 ],
      "exit" : false,
      "out-vars" : [ 8, 7, 6, 5 ],
      "decl-vars" : [ ],
      "line-start" : 164,
      "ast" : {
        "condition" : {
          "go-type" : 25,
          "kind" : "expression",
          "left" : {
            "go-type" : 5,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "err",
              "variable" : 8
            }
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 16,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Nil",
              "kind" : "ident",
              "value" : "nil"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 166,
      "code" : "if err := syscall.Pipe2(fds[:], flags); err != nil {\n\treturn -1, -1, \"pipe2\", err\n}",
      "entry" : false,
      "use-vars" : [ 8 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 7 ],
      "in-vars" : [ 7, 6, 5 ],
      "exit" : false,
      "out-vars" : [ 8, 7, 6, 5 ],
      "decl-vars" : [ 8 ],
      "line-start" : 164,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "err"
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 23,
            "type" : "slice",
            "three" : false,
            "high" : null,
            "max" : null,
            "kind" : "expression",
            "low" : null,
            "target" : {
              "go-type" : 19,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "fds",
                "variable" : 7
              }
            }
          }, {
            "go-type" : 3,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "526336"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 21,
            "kind" : "expression",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 3,
              "value" : "syscall"
            },
            "type" : "identifier",
            "value" : {
              "function" : 2,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "Pipe2"
            }
          },
          "go-type" : 5,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 164,
      "code" : "err := syscall.Pipe2(fds[:], flags)",
      "entry" : false,
      "use-vars" : [ 7 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 8, 6, 5 ],
      "exit" : false,
      "out-vars" : [ 6, 5 ],
      "decl-vars" : [ ],
      "line-start" : 165,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 3,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "-1"
          }
        }, {
          "go-type" : 3,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "-1"
          }
        }, {
          "go-type" : 4,
          "kind" : "constant",
          "value" : {
            "type" : "STRING",
            "value" : "pipe2"
          }
        }, {
          "go-type" : 5,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "err",
            "variable" : 8
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 165,
      "code" : "return -1, -1, \"pipe2\", err",
      "entry" : false,
      "use-vars" : [ 8 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 11, 17 ],
      "in-vars" : [ 7, 6, 5 ],
      "exit" : false,
      "out-vars" : [ 7, 6, 5 ],
      "decl-vars" : [ ],
      "line-start" : 168,
      "ast" : {
        "condition" : {
          "go-type" : 25,
          "kind" : "expression",
          "left" : {
            "go-type" : 10,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "p",
              "variable" : 6
            }
          },
          "operator" : "==",
          "right" : {
            "go-type" : 16,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Nil",
              "kind" : "ident",
              "value" : "nil"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 178,
      "code" : "if p == nil {\n\tp = new(bool)\n\tdefer atomic.StorePointer(&disableSplice, unsafe.Pointer(p))\n\n\tif _, _, errno := syscall.Syscall(unix.FcntlSyscall, uintptr(fds[0]), syscall.F_GETPIPE_SZ, 0); errno != 0 {\n\t\t*p = true\n\t\tdestroyTempPipe(fds[0], fds[1])\n\t\treturn -1, -1, \"fcntl\", errno\n\t}\n}",
      "entry" : false,
      "use-vars" : [ 6 ]
    }, {
      "update-vars" : [ 6 ],
      "successors" : [ 13 ],
      "in-vars" : [ 7, 5 ],
      "exit" : false,
      "out-vars" : [ 7, 6, 5 ],
      "decl-vars" : [ ],
      "line-start" : 169,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 10,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "p",
            "variable" : 6
          }
        } ],
        "right" : [ {
          "argument" : {
            "go-type" : 11,
            "kind" : "type",
            "type" : "identifier",
            "value" : {
              "go-type" : 11,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "bool"
            }
          },
          "go-type" : 10,
          "kind" : "expression",
          "type" : "new"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 6 ],
      "line-end" : 169,
      "code" : "p = new(bool)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 14, 17 ],
      "in-vars" : [ 7, 6, 10, 5 ],
      "exit" : false,
      "out-vars" : [ 7, 6, 10, 5 ],
      "decl-vars" : [ ],
      "line-start" : 173,
      "ast" : {
        "condition" : {
          "go-type" : 25,
          "kind" : "expression",
          "left" : {
            "go-type" : 17,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "errno",
              "variable" : 10
            }
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 17,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 177,
      "code" : "if _, _, errno := syscall.Syscall(unix.FcntlSyscall, uintptr(fds[0]), syscall.F_GETPIPE_SZ, 0); errno != 0 {\n\t*p = true\n\tdestroyTempPipe(fds[0], fds[1])\n\treturn -1, -1, \"fcntl\", errno\n}",
      "entry" : false,
      "use-vars" : [ 10 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 12 ],
      "in-vars" : [ 7, 6, 5 ],
      "exit" : false,
      "out-vars" : [ 7, 6, 10, 5 ],
      "decl-vars" : [ 11, 10, 12 ],
      "line-start" : 173,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "_"
          }
        }, {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "_"
          }
        }, {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "errno"
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 18,
            "kind" : "expression",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 4,
              "value" : "unix"
            },
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "FcntlSyscall",
              "variable" : 9
            }
          }, {
            "coerced-to" : {
              "go-type" : 18,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 18,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "uintptr"
              }
            },
            "go-type" : 18,
            "kind" : "expression",
            "target" : {
              "go-type" : 3,
              "index" : {
                "go-type" : 3,
                "kind" : "constant",
                "value" : {
                  "type" : "INT",
                  "value" : "0"
                }
              },
              "kind" : "expression",
              "target" : {
                "go-type" : 19,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "fds",
                  "variable" : 7
                }
              },
              "type" : "index"
            },
            "type" : "cast"
          }, {
            "go-type" : 18,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "1032"
            }
          }, {
            "go-type" : 18,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 29,
            "kind" : "expression",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 3,
              "value" : "syscall"
            },
            "type" : "identifier",
            "value" : {
              "function" : 4,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "Syscall"
            }
          },
          "go-type" : 28,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 173,
      "code" : "_, _, errno := syscall.Syscall(unix.FcntlSyscall, uintptr(fds[0]), syscall.F_GETPIPE_SZ, 0)",
      "entry" : false,
      "use-vars" : [ 7 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 15 ],
      "in-vars" : [ 7, 6, 10, 5 ],
      "exit" : false,
      "out-vars" : [ 10, 5, 7, 6 ],
      "decl-vars" : [ ],
      "line-start" : 174,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 11,
          "kind" : "expression",
          "target" : {
            "go-type" : 10,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "p",
              "variable" : 6
            }
          },
          "type" : "star"
        } ],
        "right" : [ {
          "go-type" : 11,
          "kind" : "constant",
          "value" : {
            "type" : "BOOL",
            "value" : "true"
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 174,
      "code" : "*p = true",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 16 ],
      "in-vars" : [ 7, 6, 10, 5 ],
      "exit" : false,
      "out-vars" : [ 5, 6, 10 ],
      "decl-vars" : [ ],
      "line-start" : 175,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 3,
            "index" : {
              "go-type" : 3,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "0"
              }
            },
            "kind" : "expression",
            "target" : {
              "go-type" : 19,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "fds",
                "variable" : 7
              }
            },
            "type" : "index"
          }, {
            "go-type" : 3,
            "index" : {
              "go-type" : 3,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "1"
              }
            },
            "kind" : "expression",
            "target" : {
              "go-type" : 19,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "fds",
                "variable" : 7
              }
            },
            "type" : "index"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 31,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 5,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "destroyTempPipe"
            }
          },
          "go-type" : 5,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 175,
      "code" : "destroyTempPipe(fds[0], fds[1])",
      "entry" : false,
      "use-vars" : [ 7 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 10, 5, 6 ],
      "exit" : false,
      "out-vars" : [ 6, 5 ],
      "decl-vars" : [ ],
      "line-start" : 176,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 3,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "-1"
          }
        }, {
          "go-type" : 3,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "-1"
          }
        }, {
          "go-type" : 4,
          "kind" : "constant",
          "value" : {
            "type" : "STRING",
            "value" : "fcntl"
          }
        }, {
          "go-type" : 17,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "errno",
            "variable" : 10
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 176,
      "code" : "return -1, -1, \"fcntl\", errno",
      "entry" : false,
      "use-vars" : [ 10 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 7, 6, 5 ],
      "exit" : false,
      "out-vars" : [ 5, 6 ],
      "decl-vars" : [ ],
      "line-start" : 180,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 3,
          "index" : {
            "go-type" : 3,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "kind" : "expression",
          "target" : {
            "go-type" : 19,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "fds",
              "variable" : 7
            }
          },
          "type" : "index"
        }, {
          "go-type" : 3,
          "index" : {
            "go-type" : 3,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "1"
            }
          },
          "kind" : "expression",
          "target" : {
            "go-type" : 19,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "fds",
              "variable" : 7
            }
          },
          "type" : "index"
        }, {
          "go-type" : 4,
          "kind" : "constant",
          "value" : {
            "type" : "STRING",
            "value" : ""
          }
        }, {
          "go-type" : 16,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Nil",
            "kind" : "ident",
            "value" : "nil"
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 180,
      "code" : "return fds[0], fds[1], \"\", nil",
      "entry" : false,
      "use-vars" : [ 7 ]
    } ],
    "code" : "// newTempPipe sets up a temporary pipe for a splice operation.\nfunc newTempPipe() (prfd, pwfd int, sc string, err error) {\n\tp := (*bool)(atomic.LoadPointer(&disableSplice))\n\tif p != nil && *p {\n\t\treturn -1, -1, \"splice\", syscall.EINVAL\n\t}\n\n\tvar fds [2]int\n\t// pipe2 was added in 2.6.27 and our minimum requirement is 2.6.23, so it\n\t// might not be implemented. Falling back to pipe is possible, but prior to\n\t// 2.6.29 splice returns -EAGAIN instead of 0 when the connection is\n\t// closed.\n\tconst flags = syscall.O_CLOEXEC | syscall.O_NONBLOCK\n\tif err := syscall.Pipe2(fds[:], flags); err != nil {\n\t\treturn -1, -1, \"pipe2\", err\n\t}\n\n\tif p == nil {\n\t\tp = new(bool)\n\t\tdefer atomic.StorePointer(&disableSplice, unsafe.Pointer(p))\n\n\t\tif _, _, errno := syscall.Syscall(unix.FcntlSyscall, uintptr(fds[0]), syscall.F_GETPIPE_SZ, 0); errno != 0 {\n\t\t\t*p = true\n\t\t\tdestroyTempPipe(fds[0], fds[1])\n\t\t\treturn -1, -1, \"fcntl\", errno\n\t\t}\n\t}\n\n\treturn fds[0], fds[1], \"\", nil\n}",
    "defines" : [ 0 ],
    "functions" : [ {
      "name" : "newTempPipe",
      "package" : 0,
      "type" : 0,
      "exported" : false
    }, {
      "name" : "LoadPointer",
      "package" : 2,
      "type" : 12,
      "exported" : true
    }, {
      "name" : "Pipe2",
      "package" : 3,
      "type" : 21,
      "exported" : true
    }, {
      "name" : "StorePointer",
      "package" : 2,
      "type" : 26,
      "exported" : true
    }, {
      "name" : "Syscall",
      "package" : 3,
      "type" : 29,
      "exported" : true
    }, {
      "name" : "destroyTempPipe",
      "package" : 0,
      "type" : 31,
      "exported" : false
    } ],
    "line-end" : 181,
    "line-start" : 152,
    "names" : [ "newTempPipe" ],
    "package" : 0,
    "packages" : [ {
      "name" : "poll",
      "path" : "internal/poll"
    }, {
      "name" : "unsafe",
      "path" : "unsafe"
    }, {
      "name" : "atomic",
      "path" : "sync/atomic"
    }, {
      "name" : "syscall",
      "path" : "syscall"
    }, {
      "name" : "unix",
      "path" : "internal/syscall/unix"
    } ],
    "params" : [ ],
    "receivers" : [ ],
    "results" : [ 1, 2, 3, 4 ],
    "type" : "function",
    "types" : [ {
      "name" : "func() (prfd int, pwfd int, sc string, err error)",
      "params" : 1,
      "recv" : -1,
      "results" : 2,
      "type" : "Signature",
      "underlying" : 0,
      "variadic" : false
    }, {
      "fields" : [ ],
      "name" : "()",
      "type" : "Tuple",
      "underlying" : 1
    }, {
      "fields" : [ {
        "name" : "prfd",
        "type" : 3
      }, {
        "name" : "pwfd",
        "type" : 3
      }, {
        "name" : "sc",
        "type" : 4
      }, {
        "name" : "err",
        "type" : 5
      } ],
      "name" : "(prfd int, pwfd int, sc string, err error)",
      "type" : "Tuple",
      "underlying" : 2
    }, {
      "name" : "int",
      "type" : "Basic",
      "underlying" : 3
    }, {
      "name" : "string",
      "type" : "Basic",
      "underlying" : 4
    }, {
      "local-name" : "error",
      "name" : "error",
      "package" : -1,
      "type" : "Named",
      "underlying" : 6
    }, {
      "methods" : [ {
        "name" : "Error",
        "type" : 7
      } ],
      "name" : "interface{Error() string}",
      "type" : "Interface",
      "underlying" : 6
    }, {
      "name" : "func() string",
      "params" : 1,
      "recv" : 0,
      "results" : 8,
      "type" : "Signature",
      "underlying" : 7,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 4
      } ],
      "name" : "(string)",
      "type" : "Tuple",
      "underlying" : 8
    }, {
      "local-name" : "Pointer",
      "name" : "unsafe.Pointer",
      "package" : 1,
      "type" : "Basic",
      "underlying" : 9
    }, {
      "elem" : 11,
      "name" : "*bool",
      "type" : "Pointer",
      "underlying" : 10
    }, {
      "name" : "bool",
      "type" : "Basic",
      "underlying" : 11
    }, {
      "name" : "func(addr *unsafe.Pointer) (val unsafe.Pointer)",
      "params" : 13,
      "recv" : -1,
      "results" : 15,
      "type" : "Signature",
      "underlying" : 12,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "addr",
        "type" : 14
      } ],
      "name" : "(addr *unsafe.Pointer)",
      "type" : "Tuple",
      "underlying" : 13
    }, {
      "elem" : 9,
      "name" : "*unsafe.Pointer",
      "type" : "Pointer",
      "underlying" : 14
    }, {
      "fields" : [ {
        "name" : "val",
        "type" : 9
      } ],
      "name" : "(val unsafe.Pointer)",
      "type" : "Tuple",
      "underlying" : 15
    }, {
      "name" : "untyped nil",
      "type" : "Basic",
      "underlying" : 16
    }, {
      "local-name" : "Errno",
      "name" : "syscall.Errno",
      "package" : 3,
      "type" : "Named",
      "underlying" : 18
    }, {
      "name" : "uintptr",
      "type" : "Basic",
      "underlying" : 18
    }, {
      "elem" : 3,
      "name" : "[2]int",
      "type" : "Array",
      "underlying" : 19
    }, {
      "name" : "untyped int",
      "type" : "Basic",
      "underlying" : 20
    }, {
      "name" : "func(p []int, flags int) (err error)",
      "params" : 22,
      "recv" : -1,
      "results" : 24,
      "type" : "Signature",
      "underlying" : 21,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "p",
        "type" : 23
      }, {
        "name" : "flags",
        "type" : 3
      } ],
      "name" : "(p []int, flags int)",
      "type" : "Tuple",
      "underlying" : 22
    }, {
      "elem" : 3,
      "name" : "[]int",
      "type" : "Slice",
      "underlying" : 23
    }, {
      "fields" : [ {
        "name" : "err",
        "type" : 5
      } ],
      "name" : "(err error)",
      "type" : "Tuple",
      "underlying" : 24
    }, {
      "name" : "untyped bool",
      "type" : "Basic",
      "underlying" : 25
    }, {
      "name" : "func(addr *unsafe.Pointer, val unsafe.Pointer)",
      "params" : 27,
      "recv" : -1,
      "results" : 1,
      "type" : "Signature",
      "underlying" : 26,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "addr",
        "type" : 14
      }, {
        "name" : "val",
        "type" : 9
      } ],
      "name" : "(addr *unsafe.Pointer, val unsafe.Pointer)",
      "type" : "Tuple",
      "underlying" : 27
    }, {
      "fields" : [ {
        "name" : "r1",
        "type" : 18
      }, {
        "name" : "r2",
        "type" : 18
      }, {
        "name" : "err",
        "type" : 17
      } ],
      "name" : "(r1 uintptr, r2 uintptr, err syscall.Errno)",
      "type" : "Tuple",
      "underlying" : 28
    }, {
      "name" : "func(trap uintptr, a1 uintptr, a2 uintptr, a3 uintptr) (r1 uintptr, r2 uintptr, err syscall.Errno)",
      "params" : 30,
      "recv" : -1,
      "results" : 28,
      "type" : "Signature",
      "underlying" : 29,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "trap",
        "type" : 18
      }, {
        "name" : "a1",
        "type" : 18
      }, {
        "name" : "a2",
        "type" : 18
      }, {
        "name" : "a3",
        "type" : 18
      } ],
      "name" : "(trap uintptr, a1 uintptr, a2 uintptr, a3 uintptr)",
      "type" : "Tuple",
      "underlying" : 30
    }, {
      "name" : "func(prfd int, pwfd int) error",
      "params" : 32,
      "recv" : -1,
      "results" : 33,
      "type" : "Signature",
      "underlying" : 31,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "prfd",
        "type" : 3
      }, {
        "name" : "pwfd",
        "type" : 3
      } ],
      "name" : "(prfd int, pwfd int)",
      "type" : "Tuple",
      "underlying" : 32
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 5
      } ],
      "name" : "(error)",
      "type" : "Tuple",
      "underlying" : 33
    } ],
    "variables" : [ {
      "name" : "",
      "package" : -1,
      "type" : 5,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "prfd",
      "package" : 0,
      "type" : 3,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "pwfd",
      "package" : 0,
      "type" : 3,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "sc",
      "package" : 0,
      "type" : 4,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "err",
      "package" : 0,
      "type" : 5,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "disableSplice",
      "package" : 0,
      "type" : 9,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "p",
      "package" : 0,
      "type" : 10,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "fds",
      "package" : 0,
      "type" : 19,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "err",
      "package" : 0,
      "type" : 5,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "FcntlSyscall",
      "package" : 4,
      "type" : 18,
      "exported" : true,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "errno",
      "package" : 0,
      "type" : 17,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "_",
      "package" : 0,
      "type" : 18,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "_",
      "package" : 0,
      "type" : 18,
      "exported" : false,
      "embedded" : false,
      "field" : false
    } ]
  },
  "go-version" : "1.14.3"
}