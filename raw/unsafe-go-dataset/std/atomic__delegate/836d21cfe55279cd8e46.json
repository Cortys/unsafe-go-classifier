{
  "usage" : {
    "file" : "malloc.go",
    "label1" : "delegate",
    "label2" : "atomic",
    "line" : "727",
    "module" : "std",
    "pkg" : "runtime",
    "project" : "kubernetes/kubernetes",
    "snippet" : "atomic.StorepNoWB(unsafe.Pointer(&h.arenas[ri.l1()]), unsafe.Pointer(l2))",
    "version" : "std"
  },
  "cfg" : {
    "blocks" : [ {
      "update-vars" : [ ],
      "successors" : [ 2 ],
      "in-vars" : [ 1, 0, 3, 4, 5, 6 ],
      "exit" : false,
      "out-vars" : [ 4, 5, 6, 1, 0, 3 ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[entry]",
      "entry" : true,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ ],
      "in-vars" : [ ],
      "exit" : true,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[exit]",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ 1 ],
      "successors" : [ 3 ],
      "in-vars" : [ 1, 0, 3, 4, 5, 6 ],
      "exit" : false,
      "out-vars" : [ 1, 0, 3, 4, 5, 6 ],
      "decl-vars" : [ ],
      "line-start" : 618,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 2,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "n",
            "variable" : 1
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "n",
              "variable" : 1
            }
          }, {
            "go-type" : 2,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "67108864"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 115,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 1,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "alignUp"
            }
          },
          "go-type" : 2,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 1 ],
      "line-end" : 618,
      "code" : "n = alignUp(n, heapArenaBytes)",
      "entry" : false,
      "use-vars" : [ 1 ]
    }, {
      "update-vars" : [ 2 ],
      "successors" : [ 4 ],
      "in-vars" : [ 1, 0, 3, 4, 5, 6 ],
      "exit" : false,
      "out-vars" : [ 5, 6, 2, 1, 0, 3, 4 ],
      "decl-vars" : [ ],
      "line-start" : 621,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 4,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "v",
            "variable" : 2
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "n",
              "variable" : 1
            }
          }, {
            "go-type" : 2,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "67108864"
            }
          }, {
            "go-type" : 31,
            "kind" : "expression",
            "operator" : "&",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "heap_sys",
                "variable" : 9
              },
              "go-type" : 15,
              "kind" : "expression",
              "target" : {
                "go-type" : 110,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "memstats",
                  "variable" : 4
                }
              },
              "type" : "selector"
            },
            "type" : "unary"
          } ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "function" : 2,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "alloc"
            },
            "go-type" : 118,
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "arena",
                "variable" : 7
              },
              "go-type" : 69,
              "kind" : "expression",
              "target" : {
                "go-type" : 5,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "h",
                  "variable" : 0
                }
              },
              "type" : "selector"
            },
            "type" : "selector"
          },
          "go-type" : 4,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 2 ],
      "line-end" : 621,
      "code" : "v = h.arena.alloc(n, heapArenaBytes, &memstats.heap_sys)",
      "entry" : false,
      "use-vars" : [ 0, 1, 4 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 5, 7 ],
      "in-vars" : [ 3, 4, 5, 6, 2, 1, 0 ],
      "exit" : false,
      "out-vars" : [ 5, 6, 2, 1, 0, 3, 4 ],
      "decl-vars" : [ ],
      "line-start" : 622,
      "ast" : {
        "condition" : {
          "go-type" : 123,
          "kind" : "expression",
          "left" : {
            "go-type" : 4,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "v",
              "variable" : 2
            }
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 4,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Nil",
              "kind" : "ident",
              "value" : "nil"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 625,
      "code" : "if v != nil {\n\tsize = n\n\tgoto mapped\n}",
      "entry" : false,
      "use-vars" : [ 2 ]
    }, {
      "update-vars" : [ 3 ],
      "successors" : [ 6 ],
      "in-vars" : [ 2, 1, 0, 4, 6 ],
      "exit" : false,
      "out-vars" : [ 0, 3, 4, 6, 2 ],
      "decl-vars" : [ ],
      "line-start" : 623,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 2,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "size",
            "variable" : 3
          }
        } ],
        "right" : [ {
          "go-type" : 2,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "n",
            "variable" : 1
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 3 ],
      "line-end" : 623,
      "code" : "size = n",
      "entry" : false,
      "use-vars" : [ 1 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 53 ],
      "in-vars" : [ 2, 0, 3, 4, 6 ],
      "exit" : false,
      "out-vars" : [ 4, 6, 2, 0, 3 ],
      "decl-vars" : [ ],
      "line-start" : 624,
      "ast" : {
        "kind" : "statement",
        "label" : {
          "ident-kind" : "Label",
          "kind" : "ident",
          "value" : "mapped"
        },
        "type" : "goto"
      },
      "assign-vars" : [ ],
      "line-end" : 624,
      "code" : "goto mapped",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 8, 27 ],
      "in-vars" : [ 3, 4, 5, 6, 2, 1, 0 ],
      "exit" : false,
      "out-vars" : [ 1, 0, 3, 4, 5, 6, 2 ],
      "decl-vars" : [ ],
      "line-start" : 628,
      "ast" : {
        "condition" : {
          "go-type" : 123,
          "kind" : "expression",
          "left" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "arenaHints",
              "variable" : 10
            },
            "go-type" : 71,
            "kind" : "expression",
            "target" : {
              "go-type" : 5,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "h",
                "variable" : 0
              }
            },
            "type" : "selector"
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 124,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Nil",
              "kind" : "ident",
              "value" : "nil"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "for"
      },
      "assign-vars" : [ ],
      "line-end" : 663,
      "code" : "for h.arenaHints != nil {\n\thint := h.arenaHints\n\tp := hint.addr\n\tif hint.down {\n\t\tp -= n\n\t}\n\tif p+n < p {\n\n\t\tv = nil\n\t} else if arenaIndex(p+n-1) >= 1<<arenaBits {\n\n\t\tv = nil\n\t} else {\n\t\tv = sysReserve(unsafe.Pointer(p), n)\n\t}\n\tif p == uintptr(v) {\n\n\t\tif !hint.down {\n\t\t\tp += n\n\t\t}\n\t\thint.addr = p\n\t\tsize = n\n\t\tbreak\n\t}\n\n\tif v != nil {\n\t\tsysFree(v, n, nil)\n\t}\n\th.arenaHints = hint.next\n\th.arenaHintAlloc.free(unsafe.Pointer(hint))\n}",
      "entry" : false,
      "use-vars" : [ 0 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 9 ],
      "in-vars" : [ 1, 0, 3, 4, 5, 6 ],
      "exit" : false,
      "out-vars" : [ 11, 0, 3, 4, 5, 6, 1 ],
      "decl-vars" : [ 11 ],
      "line-start" : 629,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "hint"
          }
        } ],
        "right" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "arenaHints",
            "variable" : 10
          },
          "go-type" : 71,
          "kind" : "expression",
          "target" : {
            "go-type" : 5,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "h",
              "variable" : 0
            }
          },
          "type" : "selector"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 629,
      "code" : "hint := h.arenaHints",
      "entry" : false,
      "use-vars" : [ 0 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 10 ],
      "in-vars" : [ 5, 6, 1, 11, 0, 3, 4 ],
      "exit" : false,
      "out-vars" : [ 6, 14, 1, 11, 0, 3, 4, 5 ],
      "decl-vars" : [ 14 ],
      "line-start" : 630,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "p"
          }
        } ],
        "right" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "addr",
            "variable" : 12
          },
          "go-type" : 2,
          "kind" : "expression",
          "target" : {
            "go-type" : 71,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "hint",
              "variable" : 11
            }
          },
          "type" : "selector"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 630,
      "code" : "p := hint.addr",
      "entry" : false,
      "use-vars" : [ 11 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 11, 12 ],
      "in-vars" : [ 0, 3, 4, 5, 6, 14, 1, 11 ],
      "exit" : false,
      "out-vars" : [ 11, 0, 3, 4, 5, 6, 14, 1 ],
      "decl-vars" : [ ],
      "line-start" : 631,
      "ast" : {
        "condition" : {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "down",
            "variable" : 13
          },
          "go-type" : 33,
          "kind" : "expression",
          "target" : {
            "go-type" : 71,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "hint",
              "variable" : 11
            }
          },
          "type" : "selector"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 633,
      "code" : "if hint.down {\n\tp -= n\n}",
      "entry" : false,
      "use-vars" : [ 11 ]
    }, {
      "update-vars" : [ 14 ],
      "successors" : [ 12 ],
      "in-vars" : [ 1, 11, 0, 3, 4, 5, 6, 14 ],
      "exit" : false,
      "out-vars" : [ 11, 0, 3, 4, 5, 6, 14, 1 ],
      "decl-vars" : [ ],
      "line-start" : 632,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 2,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "p",
            "variable" : 14
          }
        } ],
        "operator" : "-",
        "right" : [ {
          "go-type" : 2,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "n",
            "variable" : 1
          }
        } ],
        "type" : "assign-operator"
      },
      "assign-vars" : [ 14 ],
      "line-end" : 632,
      "code" : "p -= n",
      "entry" : false,
      "use-vars" : [ 14, 1 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 13, 14 ],
      "in-vars" : [ 14, 1, 11, 0, 3, 4, 5, 6 ],
      "exit" : false,
      "out-vars" : [ 6, 14, 1, 11, 0, 3, 4, 5 ],
      "decl-vars" : [ ],
      "line-start" : 634,
      "ast" : {
        "condition" : {
          "go-type" : 123,
          "kind" : "expression",
          "left" : {
            "go-type" : 2,
            "kind" : "expression",
            "left" : {
              "go-type" : 2,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "p",
                "variable" : 14
              }
            },
            "operator" : "+",
            "right" : {
              "go-type" : 2,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "n",
                "variable" : 1
              }
            },
            "type" : "binary"
          },
          "operator" : "<",
          "right" : {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "p",
              "variable" : 14
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 642,
      "code" : "if p+n < p {\n\n\tv = nil\n} else if arenaIndex(p+n-1) >= 1<<arenaBits {\n\n\tv = nil\n} else {\n\tv = sysReserve(unsafe.Pointer(p), n)\n}",
      "entry" : false,
      "use-vars" : [ 1, 14 ]
    }, {
      "update-vars" : [ 2 ],
      "successors" : [ 17 ],
      "in-vars" : [ 5, 6, 14, 1, 11, 0, 3, 4 ],
      "exit" : false,
      "out-vars" : [ 11, 3, 4, 6, 1, 14, 0, 5, 2 ],
      "decl-vars" : [ ],
      "line-start" : 636,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 4,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "v",
            "variable" : 2
          }
        } ],
        "right" : [ {
          "go-type" : 4,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Nil",
            "kind" : "ident",
            "value" : "nil"
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 2 ],
      "line-end" : 636,
      "code" : "v = nil",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 15, 16 ],
      "in-vars" : [ 4, 5, 6, 14, 1, 11, 0, 3 ],
      "exit" : false,
      "out-vars" : [ 5, 6, 14, 1, 11, 0, 3, 4 ],
      "decl-vars" : [ ],
      "line-start" : 637,
      "ast" : {
        "condition" : {
          "go-type" : 123,
          "kind" : "expression",
          "left" : {
            "arguments" : [ {
              "go-type" : 2,
              "kind" : "expression",
              "left" : {
                "go-type" : 2,
                "kind" : "expression",
                "left" : {
                  "go-type" : 2,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "p",
                    "variable" : 14
                  }
                },
                "operator" : "+",
                "right" : {
                  "go-type" : 2,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "n",
                    "variable" : 1
                  }
                },
                "type" : "binary"
              },
              "operator" : "-",
              "right" : {
                "go-type" : 2,
                "kind" : "constant",
                "value" : {
                  "type" : "INT",
                  "value" : "1"
                }
              },
              "type" : "binary"
            } ],
            "ellipsis" : false,
            "function" : {
              "go-type" : 125,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "function" : 3,
                "ident-kind" : "Func",
                "kind" : "ident",
                "value" : "arenaIndex"
              }
            },
            "go-type" : 75,
            "kind" : "expression",
            "type" : "call"
          },
          "operator" : ">=",
          "right" : {
            "go-type" : 75,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "4194304"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 642,
      "code" : "if arenaIndex(p+n-1) >= 1<<arenaBits {\n\n\tv = nil\n} else {\n\tv = sysReserve(unsafe.Pointer(p), n)\n}",
      "entry" : false,
      "use-vars" : [ 14, 1 ]
    }, {
      "update-vars" : [ 2 ],
      "successors" : [ 17 ],
      "in-vars" : [ 5, 6, 14, 1, 11, 0, 3, 4 ],
      "exit" : false,
      "out-vars" : [ 6, 5, 2, 14, 1, 11, 0, 3, 4 ],
      "decl-vars" : [ ],
      "line-start" : 639,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 4,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "v",
            "variable" : 2
          }
        } ],
        "right" : [ {
          "go-type" : 4,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Nil",
            "kind" : "ident",
            "value" : "nil"
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 2 ],
      "line-end" : 639,
      "code" : "v = nil",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ 2 ],
      "successors" : [ 17 ],
      "in-vars" : [ 14, 1, 11, 0, 3, 4, 5, 6 ],
      "exit" : false,
      "out-vars" : [ 1, 11, 3, 6, 2, 14, 0, 4, 5 ],
      "decl-vars" : [ ],
      "line-start" : 641,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 4,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "v",
            "variable" : 2
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "coerced-to" : {
              "go-type" : 4,
              "kind" : "type",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 1,
                "value" : "unsafe"
              },
              "type" : "identifier",
              "value" : {
                "go-type" : 4,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "Pointer"
              }
            },
            "go-type" : 4,
            "kind" : "expression",
            "target" : {
              "go-type" : 2,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "p",
                "variable" : 14
              }
            },
            "type" : "cast"
          }, {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "n",
              "variable" : 1
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 128,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 4,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "sysReserve"
            }
          },
          "go-type" : 4,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 2 ],
      "line-end" : 641,
      "code" : "v = sysReserve(unsafe.Pointer(p), n)",
      "entry" : false,
      "use-vars" : [ 14, 1 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 18, 23 ],
      "in-vars" : [ 2, 1, 3, 5, 6, 14, 11, 0, 4 ],
      "exit" : false,
      "out-vars" : [ 2, 1, 3, 4, 14, 11, 0, 5, 6 ],
      "decl-vars" : [ ],
      "line-start" : 643,
      "ast" : {
        "condition" : {
          "go-type" : 123,
          "kind" : "expression",
          "left" : {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "p",
              "variable" : 14
            }
          },
          "operator" : "==",
          "right" : {
            "coerced-to" : {
              "go-type" : 2,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 2,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "uintptr"
              }
            },
            "go-type" : 2,
            "kind" : "expression",
            "target" : {
              "go-type" : 4,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "v",
                "variable" : 2
              }
            },
            "type" : "cast"
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 651,
      "code" : "if p == uintptr(v) {\n\n\tif !hint.down {\n\t\tp += n\n\t}\n\thint.addr = p\n\tsize = n\n\tbreak\n}",
      "entry" : false,
      "use-vars" : [ 14, 2 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 19, 20 ],
      "in-vars" : [ 14, 1, 11, 0, 4, 5, 6, 2 ],
      "exit" : false,
      "out-vars" : [ 1, 11, 0, 4, 5, 6, 2, 14 ],
      "decl-vars" : [ ],
      "line-start" : 645,
      "ast" : {
        "condition" : {
          "go-type" : 33,
          "kind" : "expression",
          "operator" : "!",
          "target" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "down",
              "variable" : 13
            },
            "go-type" : 33,
            "kind" : "expression",
            "target" : {
              "go-type" : 71,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "hint",
                "variable" : 11
              }
            },
            "type" : "selector"
          },
          "type" : "unary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 647,
      "code" : "if !hint.down {\n\tp += n\n}",
      "entry" : false,
      "use-vars" : [ 11 ]
    }, {
      "update-vars" : [ 14 ],
      "successors" : [ 20 ],
      "in-vars" : [ 2, 14, 1, 11, 0, 4, 5, 6 ],
      "exit" : false,
      "out-vars" : [ 11, 0, 4, 5, 6, 2, 14, 1 ],
      "decl-vars" : [ ],
      "line-start" : 646,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 2,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "p",
            "variable" : 14
          }
        } ],
        "operator" : "+",
        "right" : [ {
          "go-type" : 2,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "n",
            "variable" : 1
          }
        } ],
        "type" : "assign-operator"
      },
      "assign-vars" : [ 14 ],
      "line-end" : 646,
      "code" : "p += n",
      "entry" : false,
      "use-vars" : [ 1, 14 ]
    }, {
      "update-vars" : [ 11 ],
      "successors" : [ 21 ],
      "in-vars" : [ 1, 11, 0, 4, 5, 6, 2, 14 ],
      "exit" : false,
      "out-vars" : [ 0, 4, 5, 6, 2, 1 ],
      "decl-vars" : [ ],
      "line-start" : 648,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "addr",
            "variable" : 12
          },
          "go-type" : 2,
          "kind" : "expression",
          "target" : {
            "go-type" : 71,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "hint",
              "variable" : 11
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "go-type" : 2,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "p",
            "variable" : 14
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 648,
      "code" : "hint.addr = p",
      "entry" : false,
      "use-vars" : [ 14, 11 ]
    }, {
      "update-vars" : [ 3 ],
      "successors" : [ 22 ],
      "in-vars" : [ 2, 1, 0, 4, 5, 6 ],
      "exit" : false,
      "out-vars" : [ 1, 0, 3, 4, 5, 6, 2 ],
      "decl-vars" : [ ],
      "line-start" : 649,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 2,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "size",
            "variable" : 3
          }
        } ],
        "right" : [ {
          "go-type" : 2,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "n",
            "variable" : 1
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 3 ],
      "line-end" : 649,
      "code" : "size = n",
      "entry" : false,
      "use-vars" : [ 1 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 27 ],
      "in-vars" : [ 6, 2, 1, 0, 3, 4, 5 ],
      "exit" : false,
      "out-vars" : [ 6, 2, 1, 0, 3, 4, 5 ],
      "decl-vars" : [ ],
      "line-start" : 650,
      "ast" : {
        "kind" : "statement",
        "label" : null,
        "type" : "break"
      },
      "assign-vars" : [ ],
      "line-end" : 650,
      "code" : "break",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 24, 25 ],
      "in-vars" : [ 4, 5, 6, 2, 1, 11, 0, 3 ],
      "exit" : false,
      "out-vars" : [ 1, 11, 0, 3, 4, 5, 6, 2 ],
      "decl-vars" : [ ],
      "line-start" : 658,
      "ast" : {
        "condition" : {
          "go-type" : 123,
          "kind" : "expression",
          "left" : {
            "go-type" : 4,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "v",
              "variable" : 2
            }
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 4,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Nil",
              "kind" : "ident",
              "value" : "nil"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 660,
      "code" : "if v != nil {\n\tsysFree(v, n, nil)\n}",
      "entry" : false,
      "use-vars" : [ 2 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 25 ],
      "in-vars" : [ 1, 11, 0, 3, 4, 5, 6, 2 ],
      "exit" : false,
      "out-vars" : [ 6, 2, 1, 11, 0, 3, 4, 5 ],
      "decl-vars" : [ ],
      "line-start" : 659,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 4,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "v",
              "variable" : 2
            }
          }, {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "n",
              "variable" : 1
            }
          }, {
            "go-type" : 124,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Nil",
              "kind" : "ident",
              "value" : "nil"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 130,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 5,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "sysFree"
            }
          },
          "go-type" : 86,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 659,
      "code" : "sysFree(v, n, nil)",
      "entry" : false,
      "use-vars" : [ 1, 2 ]
    }, {
      "update-vars" : [ 0 ],
      "successors" : [ 26 ],
      "in-vars" : [ 0, 3, 4, 5, 6, 2, 1, 11 ],
      "exit" : false,
      "out-vars" : [ 4, 5, 6, 2, 1, 11, 0, 3 ],
      "decl-vars" : [ ],
      "line-start" : 661,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "arenaHints",
            "variable" : 10
          },
          "go-type" : 71,
          "kind" : "expression",
          "target" : {
            "go-type" : 5,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "h",
              "variable" : 0
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "next",
            "variable" : 15
          },
          "go-type" : 71,
          "kind" : "expression",
          "target" : {
            "go-type" : 71,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "hint",
              "variable" : 11
            }
          },
          "type" : "selector"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 661,
      "code" : "h.arenaHints = hint.next",
      "entry" : false,
      "use-vars" : [ 11, 0 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 7 ],
      "in-vars" : [ 4, 5, 6, 2, 1, 11, 0, 3 ],
      "exit" : false,
      "out-vars" : [ 1, 0, 3, 4, 5, 6, 2 ],
      "decl-vars" : [ ],
      "line-start" : 662,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "coerced-to" : {
              "go-type" : 4,
              "kind" : "type",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 1,
                "value" : "unsafe"
              },
              "type" : "identifier",
              "value" : {
                "go-type" : 4,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "Pointer"
              }
            },
            "go-type" : 4,
            "kind" : "expression",
            "target" : {
              "go-type" : 71,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "hint",
                "variable" : 11
              }
            },
            "type" : "cast"
          } ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "function" : 6,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "free"
            },
            "go-type" : 132,
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "arenaHintAlloc",
                "variable" : 16
              },
              "go-type" : 82,
              "kind" : "expression",
              "target" : {
                "go-type" : 5,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "h",
                  "variable" : 0
                }
              },
              "type" : "selector"
            },
            "type" : "selector"
          },
          "go-type" : 86,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 662,
      "code" : "h.arenaHintAlloc.free(unsafe.Pointer(hint))",
      "entry" : false,
      "use-vars" : [ 11, 0 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 28, 39 ],
      "in-vars" : [ 2, 1, 0, 3, 4, 5, 6 ],
      "exit" : false,
      "out-vars" : [ 1, 0, 3, 4, 5, 6, 2 ],
      "decl-vars" : [ ],
      "line-start" : 665,
      "ast" : {
        "condition" : {
          "go-type" : 123,
          "kind" : "expression",
          "left" : {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "size",
              "variable" : 3
            }
          },
          "operator" : "==",
          "right" : {
            "go-type" : 2,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 689,
      "code" : "if size == 0 {\n\tif raceenabled {\n\n\t\tthrow(\"too many address space collisions for -race mode\")\n\t}\n\n\tv, size = sysReserveAligned(nil, n, heapArenaBytes)\n\tif v == nil {\n\t\treturn nil, 0\n\t}\n\n\thint := (*arenaHint)(h.arenaHintAlloc.alloc())\n\thint.addr, hint.down = uintptr(v), true\n\thint.next, mheap_.arenaHints = mheap_.arenaHints, hint\n\thint = (*arenaHint)(h.arenaHintAlloc.alloc())\n\thint.addr = uintptr(v) + size\n\thint.next, mheap_.arenaHints = mheap_.arenaHints, hint\n}",
      "entry" : false,
      "use-vars" : [ 3 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 29, 30 ],
      "in-vars" : [ 6, 1, 0, 4, 5 ],
      "exit" : false,
      "out-vars" : [ 5, 6, 1, 0, 4 ],
      "decl-vars" : [ ],
      "line-start" : 666,
      "ast" : {
        "condition" : {
          "go-type" : 123,
          "kind" : "constant",
          "value" : {
            "type" : "BOOL",
            "value" : "false"
          }
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 672,
      "code" : "if raceenabled {\n\n\tthrow(\"too many address space collisions for -race mode\")\n}",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 30 ],
      "in-vars" : [ 4, 5, 6, 1, 0 ],
      "exit" : false,
      "out-vars" : [ 5, 6, 1, 0, 4 ],
      "decl-vars" : [ ],
      "line-start" : 671,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 138,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "too many address space collisions for -race mode"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 136,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 7,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "throw"
            }
          },
          "go-type" : 86,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 671,
      "code" : "throw(\"too many address space collisions for -race mode\")",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ 3, 2 ],
      "successors" : [ 31 ],
      "in-vars" : [ 1, 0, 4, 5, 6 ],
      "exit" : false,
      "out-vars" : [ 3, 4, 5, 6, 2, 0 ],
      "decl-vars" : [ ],
      "line-start" : 677,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 4,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "v",
            "variable" : 2
          }
        }, {
          "go-type" : 2,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "size",
            "variable" : 3
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 4,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Nil",
              "kind" : "ident",
              "value" : "nil"
            }
          }, {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "n",
              "variable" : 1
            }
          }, {
            "go-type" : 2,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "67108864"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 140,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 8,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "sysReserveAligned"
            }
          },
          "go-type" : 139,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 3, 2 ],
      "line-end" : 677,
      "code" : "v, size = sysReserveAligned(nil, n, heapArenaBytes)",
      "entry" : false,
      "use-vars" : [ 1 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 32, 33 ],
      "in-vars" : [ 2, 0, 3, 4, 5, 6 ],
      "exit" : false,
      "out-vars" : [ 0, 3, 4, 5, 6, 2 ],
      "decl-vars" : [ ],
      "line-start" : 678,
      "ast" : {
        "condition" : {
          "go-type" : 123,
          "kind" : "expression",
          "left" : {
            "go-type" : 4,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "v",
              "variable" : 2
            }
          },
          "operator" : "==",
          "right" : {
            "go-type" : 4,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Nil",
              "kind" : "ident",
              "value" : "nil"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 680,
      "code" : "if v == nil {\n\treturn nil, 0\n}",
      "entry" : false,
      "use-vars" : [ 2 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 679,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 4,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Nil",
            "kind" : "ident",
            "value" : "nil"
          }
        }, {
          "go-type" : 2,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "0"
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 679,
      "code" : "return nil, 0",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 34 ],
      "in-vars" : [ 2, 0, 3, 4, 5, 6 ],
      "exit" : false,
      "out-vars" : [ 5, 6, 2, 19, 0, 3, 4 ],
      "decl-vars" : [ 19 ],
      "line-start" : 683,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "hint"
          }
        } ],
        "right" : [ {
          "coerced-to" : {
            "contained" : {
              "go-type" : 72,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 72,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "arenaHint"
              }
            },
            "go-type" : 71,
            "kind" : "type",
            "type" : "pointer"
          },
          "go-type" : 71,
          "kind" : "expression",
          "target" : {
            "arguments" : [ ],
            "ellipsis" : false,
            "function" : {
              "field" : {
                "function" : 9,
                "ident-kind" : "Func",
                "kind" : "ident",
                "value" : "alloc"
              },
              "go-type" : 142,
              "kind" : "expression",
              "target" : {
                "field" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "arenaHintAlloc",
                  "variable" : 16
                },
                "go-type" : 82,
                "kind" : "expression",
                "target" : {
                  "go-type" : 5,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "h",
                    "variable" : 0
                  }
                },
                "type" : "selector"
              },
              "type" : "selector"
            },
            "go-type" : 4,
            "kind" : "expression",
            "type" : "call"
          },
          "type" : "cast"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 683,
      "code" : "hint := (*arenaHint)(h.arenaHintAlloc.alloc())",
      "entry" : false,
      "use-vars" : [ 0 ]
    }, {
      "update-vars" : [ 19 ],
      "successors" : [ 35 ],
      "in-vars" : [ 5, 6, 2, 19, 0, 3, 4 ],
      "exit" : false,
      "out-vars" : [ 6, 2, 19, 0, 3, 4, 5 ],
      "decl-vars" : [ ],
      "line-start" : 684,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "addr",
            "variable" : 12
          },
          "go-type" : 2,
          "kind" : "expression",
          "target" : {
            "go-type" : 71,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "hint",
              "variable" : 19
            }
          },
          "type" : "selector"
        }, {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "down",
            "variable" : 13
          },
          "go-type" : 33,
          "kind" : "expression",
          "target" : {
            "go-type" : 71,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "hint",
              "variable" : 19
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "coerced-to" : {
            "go-type" : 2,
            "kind" : "type",
            "type" : "identifier",
            "value" : {
              "go-type" : 2,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "uintptr"
            }
          },
          "go-type" : 2,
          "kind" : "expression",
          "target" : {
            "go-type" : 4,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "v",
              "variable" : 2
            }
          },
          "type" : "cast"
        }, {
          "go-type" : 33,
          "kind" : "constant",
          "value" : {
            "type" : "BOOL",
            "value" : "true"
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 684,
      "code" : "hint.addr, hint.down = uintptr(v), true",
      "entry" : false,
      "use-vars" : [ 2, 19 ]
    }, {
      "update-vars" : [ 5, 19 ],
      "successors" : [ 36 ],
      "in-vars" : [ 2, 19, 0, 3, 4, 5, 6 ],
      "exit" : false,
      "out-vars" : [ 6, 2, 0, 3, 4, 5 ],
      "decl-vars" : [ ],
      "line-start" : 685,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "next",
            "variable" : 15
          },
          "go-type" : 71,
          "kind" : "expression",
          "target" : {
            "go-type" : 71,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "hint",
              "variable" : 19
            }
          },
          "type" : "selector"
        }, {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "arenaHints",
            "variable" : 10
          },
          "go-type" : 71,
          "kind" : "expression",
          "target" : {
            "go-type" : 6,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "mheap_",
              "variable" : 5
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "arenaHints",
            "variable" : 10
          },
          "go-type" : 71,
          "kind" : "expression",
          "target" : {
            "go-type" : 6,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "mheap_",
              "variable" : 5
            }
          },
          "type" : "selector"
        }, {
          "go-type" : 71,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "hint",
            "variable" : 19
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 685,
      "code" : "hint.next, mheap_.arenaHints = mheap_.arenaHints, hint",
      "entry" : false,
      "use-vars" : [ 19, 5 ]
    }, {
      "update-vars" : [ 19 ],
      "successors" : [ 37 ],
      "in-vars" : [ 6, 2, 0, 3, 4, 5 ],
      "exit" : false,
      "out-vars" : [ 4, 5, 6, 2, 19, 0, 3 ],
      "decl-vars" : [ ],
      "line-start" : 686,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 71,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "hint",
            "variable" : 19
          }
        } ],
        "right" : [ {
          "coerced-to" : {
            "contained" : {
              "go-type" : 72,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 72,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "arenaHint"
              }
            },
            "go-type" : 71,
            "kind" : "type",
            "type" : "pointer"
          },
          "go-type" : 71,
          "kind" : "expression",
          "target" : {
            "arguments" : [ ],
            "ellipsis" : false,
            "function" : {
              "field" : {
                "function" : 9,
                "ident-kind" : "Func",
                "kind" : "ident",
                "value" : "alloc"
              },
              "go-type" : 142,
              "kind" : "expression",
              "target" : {
                "field" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "arenaHintAlloc",
                  "variable" : 16
                },
                "go-type" : 82,
                "kind" : "expression",
                "target" : {
                  "go-type" : 5,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "h",
                    "variable" : 0
                  }
                },
                "type" : "selector"
              },
              "type" : "selector"
            },
            "go-type" : 4,
            "kind" : "expression",
            "type" : "call"
          },
          "type" : "cast"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 19 ],
      "line-end" : 686,
      "code" : "hint = (*arenaHint)(h.arenaHintAlloc.alloc())",
      "entry" : false,
      "use-vars" : [ 0 ]
    }, {
      "update-vars" : [ 19 ],
      "successors" : [ 38 ],
      "in-vars" : [ 0, 3, 4, 5, 6, 2, 19 ],
      "exit" : false,
      "out-vars" : [ 2, 19, 0, 3, 4, 5, 6 ],
      "decl-vars" : [ ],
      "line-start" : 687,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "addr",
            "variable" : 12
          },
          "go-type" : 2,
          "kind" : "expression",
          "target" : {
            "go-type" : 71,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "hint",
              "variable" : 19
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "go-type" : 2,
          "kind" : "expression",
          "left" : {
            "coerced-to" : {
              "go-type" : 2,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 2,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "uintptr"
              }
            },
            "go-type" : 2,
            "kind" : "expression",
            "target" : {
              "go-type" : 4,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "v",
                "variable" : 2
              }
            },
            "type" : "cast"
          },
          "operator" : "+",
          "right" : {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "size",
              "variable" : 3
            }
          },
          "type" : "binary"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 687,
      "code" : "hint.addr = uintptr(v) + size",
      "entry" : false,
      "use-vars" : [ 2, 3, 19 ]
    }, {
      "update-vars" : [ 5, 19 ],
      "successors" : [ 39 ],
      "in-vars" : [ 5, 6, 2, 19, 0, 3, 4 ],
      "exit" : false,
      "out-vars" : [ 2, 0, 3, 4, 6 ],
      "decl-vars" : [ ],
      "line-start" : 688,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "next",
            "variable" : 15
          },
          "go-type" : 71,
          "kind" : "expression",
          "target" : {
            "go-type" : 71,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "hint",
              "variable" : 19
            }
          },
          "type" : "selector"
        }, {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "arenaHints",
            "variable" : 10
          },
          "go-type" : 71,
          "kind" : "expression",
          "target" : {
            "go-type" : 6,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "mheap_",
              "variable" : 5
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "arenaHints",
            "variable" : 10
          },
          "go-type" : 71,
          "kind" : "expression",
          "target" : {
            "go-type" : 6,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "mheap_",
              "variable" : 5
            }
          },
          "type" : "selector"
        }, {
          "go-type" : 71,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "hint",
            "variable" : 19
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 688,
      "code" : "hint.next, mheap_.arenaHints = mheap_.arenaHints, hint",
      "entry" : false,
      "use-vars" : [ 19, 5 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 40 ],
      "in-vars" : [ 3, 4, 6, 2, 0 ],
      "exit" : false,
      "out-vars" : [ 6, 2, 0, 3, 20, 4 ],
      "decl-vars" : [ 20 ],
      "line-start" : 693,
      "ast" : {
        "kind" : "statement",
        "target" : {
          "kind" : "decl",
          "specs" : [ {
            "comments" : [ ],
            "declared-type" : {
              "go-type" : 138,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 138,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "string"
              }
            },
            "kind" : "spec",
            "names" : [ {
              "ident-kind" : "NoKind",
              "kind" : "ident",
              "value" : "bad"
            } ],
            "type" : "var",
            "values" : [ ]
          } ],
          "type" : "var"
        },
        "type" : "declaration"
      },
      "assign-vars" : [ ],
      "line-end" : 693,
      "code" : "var bad string",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 41 ],
      "in-vars" : [ 2, 0, 3, 20, 4, 6 ],
      "exit" : false,
      "out-vars" : [ 21, 6, 2, 0, 3, 20, 4 ],
      "decl-vars" : [ 21 ],
      "line-start" : 694,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "p"
          }
        } ],
        "right" : [ {
          "coerced-to" : {
            "go-type" : 2,
            "kind" : "type",
            "type" : "identifier",
            "value" : {
              "go-type" : 2,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "uintptr"
            }
          },
          "go-type" : 2,
          "kind" : "expression",
          "target" : {
            "go-type" : 4,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "v",
              "variable" : 2
            }
          },
          "type" : "cast"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 694,
      "code" : "p := uintptr(v)",
      "entry" : false,
      "use-vars" : [ 2 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 42, 43 ],
      "in-vars" : [ 20, 4, 21, 6, 2, 0, 3 ],
      "exit" : false,
      "out-vars" : [ 0, 3, 20, 4, 21, 6, 2 ],
      "decl-vars" : [ ],
      "line-start" : 695,
      "ast" : {
        "condition" : {
          "go-type" : 123,
          "kind" : "expression",
          "left" : {
            "go-type" : 2,
            "kind" : "expression",
            "left" : {
              "go-type" : 2,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "p",
                "variable" : 21
              }
            },
            "operator" : "+",
            "right" : {
              "go-type" : 2,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "size",
                "variable" : 3
              }
            },
            "type" : "binary"
          },
          "operator" : "<",
          "right" : {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "p",
              "variable" : 21
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 701,
      "code" : "if p+size < p {\n\tbad = \"region exceeds uintptr range\"\n} else if arenaIndex(p) >= 1<<arenaBits {\n\tbad = \"base outside usable address space\"\n} else if arenaIndex(p+size-1) >= 1<<arenaBits {\n\tbad = \"end outside usable address space\"\n}",
      "entry" : false,
      "use-vars" : [ 3, 21 ]
    }, {
      "update-vars" : [ 20 ],
      "successors" : [ 47 ],
      "in-vars" : [ 4, 21, 6, 2, 0, 3 ],
      "exit" : false,
      "out-vars" : [ 0, 3, 20, 4, 21, 6, 2 ],
      "decl-vars" : [ ],
      "line-start" : 696,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 138,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "bad",
            "variable" : 20
          }
        } ],
        "right" : [ {
          "go-type" : 138,
          "kind" : "constant",
          "value" : {
            "type" : "STRING",
            "value" : "region exceeds uintptr range"
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 20 ],
      "line-end" : 696,
      "code" : "bad = \"region exceeds uintptr range\"",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 44, 45 ],
      "in-vars" : [ 2, 0, 3, 20, 4, 21, 6 ],
      "exit" : false,
      "out-vars" : [ 21, 6, 2, 0, 3, 20, 4 ],
      "decl-vars" : [ ],
      "line-start" : 697,
      "ast" : {
        "condition" : {
          "go-type" : 123,
          "kind" : "expression",
          "left" : {
            "arguments" : [ {
              "go-type" : 2,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "p",
                "variable" : 21
              }
            } ],
            "ellipsis" : false,
            "function" : {
              "go-type" : 125,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "function" : 3,
                "ident-kind" : "Func",
                "kind" : "ident",
                "value" : "arenaIndex"
              }
            },
            "go-type" : 75,
            "kind" : "expression",
            "type" : "call"
          },
          "operator" : ">=",
          "right" : {
            "go-type" : 75,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "4194304"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 701,
      "code" : "if arenaIndex(p) >= 1<<arenaBits {\n\tbad = \"base outside usable address space\"\n} else if arenaIndex(p+size-1) >= 1<<arenaBits {\n\tbad = \"end outside usable address space\"\n}",
      "entry" : false,
      "use-vars" : [ 21 ]
    }, {
      "update-vars" : [ 20 ],
      "successors" : [ 47 ],
      "in-vars" : [ 6, 2, 0, 3, 4, 21 ],
      "exit" : false,
      "out-vars" : [ 0, 3, 20, 4, 21, 6, 2 ],
      "decl-vars" : [ ],
      "line-start" : 698,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 138,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "bad",
            "variable" : 20
          }
        } ],
        "right" : [ {
          "go-type" : 138,
          "kind" : "constant",
          "value" : {
            "type" : "STRING",
            "value" : "base outside usable address space"
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 20 ],
      "line-end" : 698,
      "code" : "bad = \"base outside usable address space\"",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 46, 47 ],
      "in-vars" : [ 4, 21, 6, 2, 0, 3, 20 ],
      "exit" : false,
      "out-vars" : [ 2, 0, 3, 20, 4, 21, 6 ],
      "decl-vars" : [ ],
      "line-start" : 699,
      "ast" : {
        "condition" : {
          "go-type" : 123,
          "kind" : "expression",
          "left" : {
            "arguments" : [ {
              "go-type" : 2,
              "kind" : "expression",
              "left" : {
                "go-type" : 2,
                "kind" : "expression",
                "left" : {
                  "go-type" : 2,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "p",
                    "variable" : 21
                  }
                },
                "operator" : "+",
                "right" : {
                  "go-type" : 2,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "size",
                    "variable" : 3
                  }
                },
                "type" : "binary"
              },
              "operator" : "-",
              "right" : {
                "go-type" : 2,
                "kind" : "constant",
                "value" : {
                  "type" : "INT",
                  "value" : "1"
                }
              },
              "type" : "binary"
            } ],
            "ellipsis" : false,
            "function" : {
              "go-type" : 125,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "function" : 3,
                "ident-kind" : "Func",
                "kind" : "ident",
                "value" : "arenaIndex"
              }
            },
            "go-type" : 75,
            "kind" : "expression",
            "type" : "call"
          },
          "operator" : ">=",
          "right" : {
            "go-type" : 75,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "4194304"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 701,
      "code" : "if arenaIndex(p+size-1) >= 1<<arenaBits {\n\tbad = \"end outside usable address space\"\n}",
      "entry" : false,
      "use-vars" : [ 3, 21 ]
    }, {
      "update-vars" : [ 20 ],
      "successors" : [ 47 ],
      "in-vars" : [ 6, 2, 0, 3, 4, 21 ],
      "exit" : false,
      "out-vars" : [ 20, 4, 21, 6, 2, 0, 3 ],
      "decl-vars" : [ ],
      "line-start" : 700,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 138,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "bad",
            "variable" : 20
          }
        } ],
        "right" : [ {
          "go-type" : 138,
          "kind" : "constant",
          "value" : {
            "type" : "STRING",
            "value" : "end outside usable address space"
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 20 ],
      "line-end" : 700,
      "code" : "bad = \"end outside usable address space\"",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 48, 50 ],
      "in-vars" : [ 4, 21, 6, 2, 0, 3, 20 ],
      "exit" : false,
      "out-vars" : [ 4, 21, 6, 2, 0, 3, 20 ],
      "decl-vars" : [ ],
      "line-start" : 702,
      "ast" : {
        "condition" : {
          "go-type" : 123,
          "kind" : "expression",
          "left" : {
            "go-type" : 138,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "bad",
              "variable" : 20
            }
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 138,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : ""
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 707,
      "code" : "if bad != \"\" {\n\n\tprint(\"runtime: memory allocated by OS [\", hex(p), \", \", hex(p+size), \") not in usable address space: \", bad, \"\\n\")\n\tthrow(\"memory reservation exceeds address space limit\")\n}",
      "entry" : false,
      "use-vars" : [ 20 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 49 ],
      "in-vars" : [ 2, 0, 3, 20, 4, 21, 6 ],
      "exit" : false,
      "out-vars" : [ 2, 0, 3, 4, 6 ],
      "decl-vars" : [ ],
      "line-start" : 705,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 138,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "runtime: memory allocated by OS ["
            }
          }, {
            "coerced-to" : {
              "go-type" : 146,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 146,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "hex"
              }
            },
            "go-type" : 146,
            "kind" : "expression",
            "target" : {
              "go-type" : 2,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "p",
                "variable" : 21
              }
            },
            "type" : "cast"
          }, {
            "go-type" : 138,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : ", "
            }
          }, {
            "coerced-to" : {
              "go-type" : 146,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 146,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "hex"
              }
            },
            "go-type" : 146,
            "kind" : "expression",
            "target" : {
              "go-type" : 2,
              "kind" : "expression",
              "left" : {
                "go-type" : 2,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "p",
                  "variable" : 21
                }
              },
              "operator" : "+",
              "right" : {
                "go-type" : 2,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "size",
                  "variable" : 3
                }
              },
              "type" : "binary"
            },
            "type" : "cast"
          }, {
            "go-type" : 138,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : ") not in usable address space: "
            }
          }, {
            "go-type" : 138,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "bad",
              "variable" : 20
            }
          }, {
            "go-type" : 138,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "\n"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 144,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Builtin",
              "kind" : "ident",
              "value" : "print"
            }
          },
          "go-type" : 86,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 705,
      "code" : "print(\"runtime: memory allocated by OS [\", hex(p), \", \", hex(p+size), \") not in usable address space: \", bad, \"\\n\")",
      "entry" : false,
      "use-vars" : [ 21, 3, 20 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 50 ],
      "in-vars" : [ 3, 4, 6, 2, 0 ],
      "exit" : false,
      "out-vars" : [ 4, 6, 2, 0, 3 ],
      "decl-vars" : [ ],
      "line-start" : 706,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 138,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "memory reservation exceeds address space limit"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 136,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 7,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "throw"
            }
          },
          "go-type" : 86,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 706,
      "code" : "throw(\"memory reservation exceeds address space limit\")",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 51, 52 ],
      "in-vars" : [ 3, 4, 6, 2, 0 ],
      "exit" : false,
      "out-vars" : [ 2, 0, 3, 4, 6 ],
      "decl-vars" : [ ],
      "line-start" : 710,
      "ast" : {
        "condition" : {
          "go-type" : 123,
          "kind" : "expression",
          "left" : {
            "go-type" : 2,
            "kind" : "expression",
            "left" : {
              "coerced-to" : {
                "go-type" : 2,
                "kind" : "type",
                "type" : "identifier",
                "value" : {
                  "go-type" : 2,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "uintptr"
                }
              },
              "go-type" : 2,
              "kind" : "expression",
              "target" : {
                "go-type" : 4,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "v",
                  "variable" : 2
                }
              },
              "type" : "cast"
            },
            "operator" : "&",
            "right" : {
              "go-type" : 2,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "67108863"
              }
            },
            "type" : "binary"
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 2,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 712,
      "code" : "if uintptr(v)&(heapArenaBytes-1) != 0 {\n\tthrow(\"misrounded allocation in sysAlloc\")\n}",
      "entry" : false,
      "use-vars" : [ 2 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 52 ],
      "in-vars" : [ 2, 0, 3, 4, 6 ],
      "exit" : false,
      "out-vars" : [ 0, 3, 4, 6, 2 ],
      "decl-vars" : [ ],
      "line-start" : 711,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 138,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "misrounded allocation in sysAlloc"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 136,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 7,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "throw"
            }
          },
          "go-type" : 86,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 711,
      "code" : "throw(\"misrounded allocation in sysAlloc\")",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 53 ],
      "in-vars" : [ 2, 0, 3, 4, 6 ],
      "exit" : false,
      "out-vars" : [ 2, 0, 3, 4, 6 ],
      "decl-vars" : [ ],
      "line-start" : 715,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 4,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "v",
              "variable" : 2
            }
          }, {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "size",
              "variable" : 3
            }
          }, {
            "go-type" : 31,
            "kind" : "expression",
            "operator" : "&",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "heap_sys",
                "variable" : 9
              },
              "go-type" : 15,
              "kind" : "expression",
              "target" : {
                "go-type" : 110,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "memstats",
                  "variable" : 4
                }
              },
              "type" : "selector"
            },
            "type" : "unary"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 130,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 10,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "sysMap"
            }
          },
          "go-type" : 86,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 715,
      "code" : "sysMap(v, size, &memstats.heap_sys)",
      "entry" : false,
      "use-vars" : [ 2, 3, 4 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 55 ],
      "in-vars" : [ 4, 6, 2, 0, 3 ],
      "exit" : false,
      "out-vars" : [ 2, 0, 3, 4, 6 ],
      "decl-vars" : [ ],
      "line-start" : 717,
      "ast" : {
        "body" : [ {
          "kind" : "statement",
          "left" : [ {
            "go-type" : -1,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "NoKind",
              "kind" : "ident",
              "value" : "l2"
            }
          } ],
          "right" : [ {
            "go-type" : 61,
            "index" : {
              "arguments" : [ ],
              "ellipsis" : false,
              "function" : {
                "field" : {
                  "function" : 11,
                  "ident-kind" : "Func",
                  "kind" : "ident",
                  "value" : "l1"
                },
                "go-type" : 147,
                "kind" : "expression",
                "target" : {
                  "go-type" : 75,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "ri",
                    "variable" : 22
                  }
                },
                "type" : "selector"
              },
              "go-type" : 25,
              "kind" : "expression",
              "type" : "call"
            },
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "arenas",
                "variable" : 23
              },
              "go-type" : 60,
              "kind" : "expression",
              "target" : {
                "go-type" : 5,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "h",
                  "variable" : 0
                }
              },
              "type" : "selector"
            },
            "type" : "index"
          } ],
          "type" : "define"
        }, {
          "body" : [ {
            "kind" : "statement",
            "left" : [ {
              "go-type" : 61,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "l2",
                "variable" : 25
              }
            } ],
            "right" : [ {
              "coerced-to" : {
                "contained" : {
                  "element" : {
                    "contained" : {
                      "go-type" : 64,
                      "kind" : "type",
                      "type" : "identifier",
                      "value" : {
                        "go-type" : 64,
                        "ident-kind" : "TypeName",
                        "kind" : "ident",
                        "value" : "heapArena"
                      }
                    },
                    "go-type" : 63,
                    "kind" : "type",
                    "type" : "pointer"
                  },
                  "go-type" : 62,
                  "kind" : "type",
                  "length" : {
                    "go-type" : 150,
                    "kind" : "constant",
                    "value" : {
                      "type" : "INT",
                      "value" : "4194304"
                    }
                  },
                  "type" : "array"
                },
                "go-type" : 61,
                "kind" : "type",
                "type" : "pointer"
              },
              "go-type" : 61,
              "kind" : "expression",
              "target" : {
                "arguments" : [ {
                  "go-type" : 2,
                  "kind" : "constant",
                  "value" : {
                    "type" : "INT",
                    "value" : "33554432"
                  }
                }, {
                  "go-type" : 2,
                  "kind" : "constant",
                  "value" : {
                    "type" : "INT",
                    "value" : "8"
                  }
                }, {
                  "go-type" : 124,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Nil",
                    "kind" : "ident",
                    "value" : "nil"
                  }
                } ],
                "ellipsis" : false,
                "function" : {
                  "go-type" : 118,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "function" : 12,
                    "ident-kind" : "Func",
                    "kind" : "ident",
                    "value" : "persistentalloc"
                  }
                },
                "go-type" : 4,
                "kind" : "expression",
                "type" : "call"
              },
              "type" : "cast"
            } ],
            "type" : "assign"
          }, {
            "body" : [ {
              "kind" : "statement",
              "type" : "expression",
              "value" : {
                "arguments" : [ {
                  "go-type" : 138,
                  "kind" : "constant",
                  "value" : {
                    "type" : "STRING",
                    "value" : "out of memory allocating heap arena map"
                  }
                } ],
                "ellipsis" : false,
                "function" : {
                  "go-type" : 136,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "function" : 7,
                    "ident-kind" : "Func",
                    "kind" : "ident",
                    "value" : "throw"
                  }
                },
                "go-type" : 86,
                "kind" : "expression",
                "type" : "call"
              }
            } ],
            "condition" : {
              "go-type" : 123,
              "kind" : "expression",
              "left" : {
                "go-type" : 61,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "l2",
                  "variable" : 25
                }
              },
              "operator" : "==",
              "right" : {
                "go-type" : 124,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Nil",
                  "kind" : "ident",
                  "value" : "nil"
                }
              },
              "type" : "binary"
            },
            "else" : null,
            "init" : null,
            "kind" : "statement",
            "type" : "if"
          }, {
            "kind" : "statement",
            "type" : "expression",
            "value" : {
              "arguments" : [ {
                "coerced-to" : {
                  "go-type" : 4,
                  "kind" : "type",
                  "qualifier" : {
                    "ident-kind" : "PkgName",
                    "kind" : "ident",
                    "package" : 1,
                    "value" : "unsafe"
                  },
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 4,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "Pointer"
                  }
                },
                "go-type" : 4,
                "kind" : "expression",
                "target" : {
                  "go-type" : 153,
                  "kind" : "expression",
                  "operator" : "&",
                  "target" : {
                    "go-type" : 61,
                    "index" : {
                      "arguments" : [ ],
                      "ellipsis" : false,
                      "function" : {
                        "field" : {
                          "function" : 11,
                          "ident-kind" : "Func",
                          "kind" : "ident",
                          "value" : "l1"
                        },
                        "go-type" : 147,
                        "kind" : "expression",
                        "target" : {
                          "go-type" : 75,
                          "kind" : "expression",
                          "type" : "identifier",
                          "value" : {
                            "ident-kind" : "Var",
                            "kind" : "ident",
                            "value" : "ri",
                            "variable" : 22
                          }
                        },
                        "type" : "selector"
                      },
                      "go-type" : 25,
                      "kind" : "expression",
                      "type" : "call"
                    },
                    "kind" : "expression",
                    "target" : {
                      "field" : {
                        "ident-kind" : "Var",
                        "kind" : "ident",
                        "value" : "arenas",
                        "variable" : 23
                      },
                      "go-type" : 60,
                      "kind" : "expression",
                      "target" : {
                        "go-type" : 5,
                        "kind" : "expression",
                        "type" : "identifier",
                        "value" : {
                          "ident-kind" : "Var",
                          "kind" : "ident",
                          "value" : "h",
                          "variable" : 0
                        }
                      },
                      "type" : "selector"
                    },
                    "type" : "index"
                  },
                  "type" : "unary"
                },
                "type" : "cast"
              }, {
                "coerced-to" : {
                  "go-type" : 4,
                  "kind" : "type",
                  "qualifier" : {
                    "ident-kind" : "PkgName",
                    "kind" : "ident",
                    "package" : 1,
                    "value" : "unsafe"
                  },
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 4,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "Pointer"
                  }
                },
                "go-type" : 4,
                "kind" : "expression",
                "target" : {
                  "go-type" : 61,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "l2",
                    "variable" : 25
                  }
                },
                "type" : "cast"
              } ],
              "ellipsis" : false,
              "function" : {
                "go-type" : 151,
                "kind" : "expression",
                "qualifier" : {
                  "ident-kind" : "PkgName",
                  "kind" : "ident",
                  "package" : 2,
                  "value" : "atomic"
                },
                "type" : "identifier",
                "value" : {
                  "function" : 13,
                  "ident-kind" : "Func",
                  "kind" : "ident",
                  "value" : "StorepNoWB"
                }
              },
              "go-type" : 86,
              "kind" : "expression",
              "type" : "call"
            }
          } ],
          "condition" : {
            "go-type" : 123,
            "kind" : "expression",
            "left" : {
              "go-type" : 61,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "l2",
                "variable" : 25
              }
            },
            "operator" : "==",
            "right" : {
              "go-type" : 124,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Nil",
                "kind" : "ident",
                "value" : "nil"
              }
            },
            "type" : "binary"
          },
          "else" : null,
          "init" : null,
          "kind" : "statement",
          "type" : "if"
        }, {
          "body" : [ {
            "kind" : "statement",
            "type" : "expression",
            "value" : {
              "arguments" : [ {
                "go-type" : 138,
                "kind" : "constant",
                "value" : {
                  "type" : "STRING",
                  "value" : "arena already initialized"
                }
              } ],
              "ellipsis" : false,
              "function" : {
                "go-type" : 136,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "function" : 7,
                  "ident-kind" : "Func",
                  "kind" : "ident",
                  "value" : "throw"
                }
              },
              "go-type" : 86,
              "kind" : "expression",
              "type" : "call"
            }
          } ],
          "condition" : {
            "go-type" : 123,
            "kind" : "expression",
            "left" : {
              "go-type" : 63,
              "index" : {
                "arguments" : [ ],
                "ellipsis" : false,
                "function" : {
                  "field" : {
                    "function" : 14,
                    "ident-kind" : "Func",
                    "kind" : "ident",
                    "value" : "l2"
                  },
                  "go-type" : 147,
                  "kind" : "expression",
                  "target" : {
                    "go-type" : 75,
                    "kind" : "expression",
                    "type" : "identifier",
                    "value" : {
                      "ident-kind" : "Var",
                      "kind" : "ident",
                      "value" : "ri",
                      "variable" : 22
                    }
                  },
                  "type" : "selector"
                },
                "go-type" : 25,
                "kind" : "expression",
                "type" : "call"
              },
              "kind" : "expression",
              "target" : {
                "go-type" : 61,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "l2",
                  "variable" : 25
                }
              },
              "type" : "index"
            },
            "operator" : "!=",
            "right" : {
              "go-type" : 124,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Nil",
                "kind" : "ident",
                "value" : "nil"
              }
            },
            "type" : "binary"
          },
          "else" : null,
          "init" : null,
          "kind" : "statement",
          "type" : "if"
        }, {
          "kind" : "statement",
          "target" : {
            "kind" : "decl",
            "specs" : [ {
              "comments" : [ ],
              "declared-type" : {
                "contained" : {
                  "go-type" : 64,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 64,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "heapArena"
                  }
                },
                "go-type" : 63,
                "kind" : "type",
                "type" : "pointer"
              },
              "kind" : "spec",
              "names" : [ {
                "ident-kind" : "NoKind",
                "kind" : "ident",
                "value" : "r"
              } ],
              "type" : "var",
              "values" : [ ]
            } ],
            "type" : "var"
          },
          "type" : "declaration"
        }, {
          "kind" : "statement",
          "left" : [ {
            "go-type" : 63,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "r",
              "variable" : 26
            }
          } ],
          "right" : [ {
            "coerced-to" : {
              "contained" : {
                "go-type" : 64,
                "kind" : "type",
                "type" : "identifier",
                "value" : {
                  "go-type" : 64,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "heapArena"
                }
              },
              "go-type" : 63,
              "kind" : "type",
              "type" : "pointer"
            },
            "go-type" : 63,
            "kind" : "expression",
            "target" : {
              "arguments" : [ {
                "go-type" : 2,
                "kind" : "constant",
                "value" : {
                  "type" : "INT",
                  "value" : "2164744"
                }
              }, {
                "go-type" : 2,
                "kind" : "constant",
                "value" : {
                  "type" : "INT",
                  "value" : "8"
                }
              }, {
                "go-type" : 31,
                "kind" : "expression",
                "operator" : "&",
                "target" : {
                  "field" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "gc_sys",
                    "variable" : 28
                  },
                  "go-type" : 15,
                  "kind" : "expression",
                  "target" : {
                    "go-type" : 110,
                    "kind" : "expression",
                    "type" : "identifier",
                    "value" : {
                      "ident-kind" : "Var",
                      "kind" : "ident",
                      "value" : "memstats",
                      "variable" : 4
                    }
                  },
                  "type" : "selector"
                },
                "type" : "unary"
              } ],
              "ellipsis" : false,
              "function" : {
                "field" : {
                  "function" : 2,
                  "ident-kind" : "Func",
                  "kind" : "ident",
                  "value" : "alloc"
                },
                "go-type" : 118,
                "kind" : "expression",
                "target" : {
                  "field" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "heapArenaAlloc",
                    "variable" : 27
                  },
                  "go-type" : 69,
                  "kind" : "expression",
                  "target" : {
                    "go-type" : 5,
                    "kind" : "expression",
                    "type" : "identifier",
                    "value" : {
                      "ident-kind" : "Var",
                      "kind" : "ident",
                      "value" : "h",
                      "variable" : 0
                    }
                  },
                  "type" : "selector"
                },
                "type" : "selector"
              },
              "go-type" : 4,
              "kind" : "expression",
              "type" : "call"
            },
            "type" : "cast"
          } ],
          "type" : "assign"
        }, {
          "body" : [ {
            "kind" : "statement",
            "left" : [ {
              "go-type" : 63,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "r",
                "variable" : 26
              }
            } ],
            "right" : [ {
              "coerced-to" : {
                "contained" : {
                  "go-type" : 64,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 64,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "heapArena"
                  }
                },
                "go-type" : 63,
                "kind" : "type",
                "type" : "pointer"
              },
              "go-type" : 63,
              "kind" : "expression",
              "target" : {
                "arguments" : [ {
                  "go-type" : 2,
                  "kind" : "constant",
                  "value" : {
                    "type" : "INT",
                    "value" : "2164744"
                  }
                }, {
                  "go-type" : 2,
                  "kind" : "constant",
                  "value" : {
                    "type" : "INT",
                    "value" : "8"
                  }
                }, {
                  "go-type" : 31,
                  "kind" : "expression",
                  "operator" : "&",
                  "target" : {
                    "field" : {
                      "ident-kind" : "Var",
                      "kind" : "ident",
                      "value" : "gc_sys",
                      "variable" : 28
                    },
                    "go-type" : 15,
                    "kind" : "expression",
                    "target" : {
                      "go-type" : 110,
                      "kind" : "expression",
                      "type" : "identifier",
                      "value" : {
                        "ident-kind" : "Var",
                        "kind" : "ident",
                        "value" : "memstats",
                        "variable" : 4
                      }
                    },
                    "type" : "selector"
                  },
                  "type" : "unary"
                } ],
                "ellipsis" : false,
                "function" : {
                  "go-type" : 118,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "function" : 12,
                    "ident-kind" : "Func",
                    "kind" : "ident",
                    "value" : "persistentalloc"
                  }
                },
                "go-type" : 4,
                "kind" : "expression",
                "type" : "call"
              },
              "type" : "cast"
            } ],
            "type" : "assign"
          }, {
            "body" : [ {
              "kind" : "statement",
              "type" : "expression",
              "value" : {
                "arguments" : [ {
                  "go-type" : 138,
                  "kind" : "constant",
                  "value" : {
                    "type" : "STRING",
                    "value" : "out of memory allocating heap arena metadata"
                  }
                } ],
                "ellipsis" : false,
                "function" : {
                  "go-type" : 136,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "function" : 7,
                    "ident-kind" : "Func",
                    "kind" : "ident",
                    "value" : "throw"
                  }
                },
                "go-type" : 86,
                "kind" : "expression",
                "type" : "call"
              }
            } ],
            "condition" : {
              "go-type" : 123,
              "kind" : "expression",
              "left" : {
                "go-type" : 63,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "r",
                  "variable" : 26
                }
              },
              "operator" : "==",
              "right" : {
                "go-type" : 124,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Nil",
                  "kind" : "ident",
                  "value" : "nil"
                }
              },
              "type" : "binary"
            },
            "else" : null,
            "init" : null,
            "kind" : "statement",
            "type" : "if"
          } ],
          "condition" : {
            "go-type" : 123,
            "kind" : "expression",
            "left" : {
              "go-type" : 63,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "r",
                "variable" : 26
              }
            },
            "operator" : "==",
            "right" : {
              "go-type" : 124,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Nil",
                "kind" : "ident",
                "value" : "nil"
              }
            },
            "type" : "binary"
          },
          "else" : null,
          "init" : null,
          "kind" : "statement",
          "type" : "if"
        }, {
          "body" : [ {
            "kind" : "statement",
            "left" : [ {
              "go-type" : -1,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "NoKind",
                "kind" : "ident",
                "value" : "size"
              }
            } ],
            "right" : [ {
              "go-type" : 2,
              "kind" : "expression",
              "left" : {
                "go-type" : 2,
                "kind" : "expression",
                "left" : {
                  "go-type" : 2,
                  "kind" : "constant",
                  "value" : {
                    "type" : "INT",
                    "value" : "2"
                  }
                },
                "operator" : "*",
                "right" : {
                  "coerced-to" : {
                    "go-type" : 2,
                    "kind" : "type",
                    "type" : "identifier",
                    "value" : {
                      "go-type" : 2,
                      "ident-kind" : "TypeName",
                      "kind" : "ident",
                      "value" : "uintptr"
                    }
                  },
                  "go-type" : 2,
                  "kind" : "expression",
                  "target" : {
                    "arguments" : [ {
                      "field" : {
                        "ident-kind" : "Var",
                        "kind" : "ident",
                        "value" : "allArenas",
                        "variable" : 29
                      },
                      "go-type" : 74,
                      "kind" : "expression",
                      "target" : {
                        "go-type" : 5,
                        "kind" : "expression",
                        "type" : "identifier",
                        "value" : {
                          "ident-kind" : "Var",
                          "kind" : "ident",
                          "value" : "h",
                          "variable" : 0
                        }
                      },
                      "type" : "selector"
                    } ],
                    "ellipsis" : false,
                    "function" : {
                      "go-type" : 155,
                      "kind" : "expression",
                      "type" : "identifier",
                      "value" : {
                        "ident-kind" : "Builtin",
                        "kind" : "ident",
                        "value" : "cap"
                      }
                    },
                    "go-type" : 154,
                    "kind" : "expression",
                    "type" : "call"
                  },
                  "type" : "cast"
                },
                "type" : "binary"
              },
              "operator" : "*",
              "right" : {
                "go-type" : 2,
                "kind" : "constant",
                "value" : {
                  "type" : "INT",
                  "value" : "8"
                }
              },
              "type" : "binary"
            } ],
            "type" : "define"
          }, {
            "body" : [ {
              "kind" : "statement",
              "left" : [ {
                "go-type" : 2,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "size",
                  "variable" : 30
                }
              } ],
              "right" : [ {
                "go-type" : 2,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "physPageSize",
                  "variable" : 6
                }
              } ],
              "type" : "assign"
            } ],
            "condition" : {
              "go-type" : 123,
              "kind" : "expression",
              "left" : {
                "go-type" : 2,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "size",
                  "variable" : 30
                }
              },
              "operator" : "==",
              "right" : {
                "go-type" : 2,
                "kind" : "constant",
                "value" : {
                  "type" : "INT",
                  "value" : "0"
                }
              },
              "type" : "binary"
            },
            "else" : null,
            "init" : null,
            "kind" : "statement",
            "type" : "if"
          }, {
            "kind" : "statement",
            "left" : [ {
              "go-type" : -1,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "NoKind",
                "kind" : "ident",
                "value" : "newArray"
              }
            } ],
            "right" : [ {
              "coerced-to" : {
                "contained" : {
                  "go-type" : 159,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 159,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "notInHeap"
                  }
                },
                "go-type" : 158,
                "kind" : "type",
                "type" : "pointer"
              },
              "go-type" : 158,
              "kind" : "expression",
              "target" : {
                "arguments" : [ {
                  "go-type" : 2,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "size",
                    "variable" : 30
                  }
                }, {
                  "go-type" : 2,
                  "kind" : "constant",
                  "value" : {
                    "type" : "INT",
                    "value" : "8"
                  }
                }, {
                  "go-type" : 31,
                  "kind" : "expression",
                  "operator" : "&",
                  "target" : {
                    "field" : {
                      "ident-kind" : "Var",
                      "kind" : "ident",
                      "value" : "gc_sys",
                      "variable" : 28
                    },
                    "go-type" : 15,
                    "kind" : "expression",
                    "target" : {
                      "go-type" : 110,
                      "kind" : "expression",
                      "type" : "identifier",
                      "value" : {
                        "ident-kind" : "Var",
                        "kind" : "ident",
                        "value" : "memstats",
                        "variable" : 4
                      }
                    },
                    "type" : "selector"
                  },
                  "type" : "unary"
                } ],
                "ellipsis" : false,
                "function" : {
                  "go-type" : 118,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "function" : 12,
                    "ident-kind" : "Func",
                    "kind" : "ident",
                    "value" : "persistentalloc"
                  }
                },
                "go-type" : 4,
                "kind" : "expression",
                "type" : "call"
              },
              "type" : "cast"
            } ],
            "type" : "define"
          }, {
            "body" : [ {
              "kind" : "statement",
              "type" : "expression",
              "value" : {
                "arguments" : [ {
                  "go-type" : 138,
                  "kind" : "constant",
                  "value" : {
                    "type" : "STRING",
                    "value" : "out of memory allocating allArenas"
                  }
                } ],
                "ellipsis" : false,
                "function" : {
                  "go-type" : 136,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "function" : 7,
                    "ident-kind" : "Func",
                    "kind" : "ident",
                    "value" : "throw"
                  }
                },
                "go-type" : 86,
                "kind" : "expression",
                "type" : "call"
              }
            } ],
            "condition" : {
              "go-type" : 123,
              "kind" : "expression",
              "left" : {
                "go-type" : 158,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "newArray",
                  "variable" : 31
                }
              },
              "operator" : "==",
              "right" : {
                "go-type" : 124,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Nil",
                  "kind" : "ident",
                  "value" : "nil"
                }
              },
              "type" : "binary"
            },
            "else" : null,
            "init" : null,
            "kind" : "statement",
            "type" : "if"
          }, {
            "kind" : "statement",
            "left" : [ {
              "go-type" : -1,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "NoKind",
                "kind" : "ident",
                "value" : "oldSlice"
              }
            } ],
            "right" : [ {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "allArenas",
                "variable" : 29
              },
              "go-type" : 74,
              "kind" : "expression",
              "target" : {
                "go-type" : 5,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "h",
                  "variable" : 0
                }
              },
              "type" : "selector"
            } ],
            "type" : "define"
          }, {
            "kind" : "statement",
            "left" : [ {
              "go-type" : 161,
              "kind" : "expression",
              "target" : {
                "coerced-to" : {
                  "contained" : {
                    "go-type" : 161,
                    "kind" : "type",
                    "type" : "identifier",
                    "value" : {
                      "go-type" : 161,
                      "ident-kind" : "TypeName",
                      "kind" : "ident",
                      "value" : "notInHeapSlice"
                    }
                  },
                  "go-type" : 163,
                  "kind" : "type",
                  "type" : "pointer"
                },
                "go-type" : 163,
                "kind" : "expression",
                "target" : {
                  "coerced-to" : {
                    "go-type" : 4,
                    "kind" : "type",
                    "qualifier" : {
                      "ident-kind" : "PkgName",
                      "kind" : "ident",
                      "package" : 1,
                      "value" : "unsafe"
                    },
                    "type" : "identifier",
                    "value" : {
                      "go-type" : 4,
                      "ident-kind" : "TypeName",
                      "kind" : "ident",
                      "value" : "Pointer"
                    }
                  },
                  "go-type" : 4,
                  "kind" : "expression",
                  "target" : {
                    "go-type" : 164,
                    "kind" : "expression",
                    "operator" : "&",
                    "target" : {
                      "field" : {
                        "ident-kind" : "Var",
                        "kind" : "ident",
                        "value" : "allArenas",
                        "variable" : 29
                      },
                      "go-type" : 74,
                      "kind" : "expression",
                      "target" : {
                        "go-type" : 5,
                        "kind" : "expression",
                        "type" : "identifier",
                        "value" : {
                          "ident-kind" : "Var",
                          "kind" : "ident",
                          "value" : "h",
                          "variable" : 0
                        }
                      },
                      "type" : "selector"
                    },
                    "type" : "unary"
                  },
                  "type" : "cast"
                },
                "type" : "cast"
              },
              "type" : "star"
            } ],
            "right" : [ {
              "declared" : {
                "go-type" : 161,
                "kind" : "type",
                "type" : "identifier",
                "value" : {
                  "go-type" : 161,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "notInHeapSlice"
                }
              },
              "go-type" : 161,
              "kind" : "literal",
              "type" : "composite",
              "values" : [ {
                "go-type" : 158,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "newArray",
                  "variable" : 31
                }
              }, {
                "arguments" : [ {
                  "field" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "allArenas",
                    "variable" : 29
                  },
                  "go-type" : 74,
                  "kind" : "expression",
                  "target" : {
                    "go-type" : 5,
                    "kind" : "expression",
                    "type" : "identifier",
                    "value" : {
                      "ident-kind" : "Var",
                      "kind" : "ident",
                      "value" : "h",
                      "variable" : 0
                    }
                  },
                  "type" : "selector"
                } ],
                "ellipsis" : false,
                "function" : {
                  "go-type" : 155,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Builtin",
                    "kind" : "ident",
                    "value" : "len"
                  }
                },
                "go-type" : 154,
                "kind" : "expression",
                "type" : "call"
              }, {
                "coerced-to" : {
                  "go-type" : 154,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 154,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "int"
                  }
                },
                "go-type" : 154,
                "kind" : "expression",
                "target" : {
                  "go-type" : 2,
                  "kind" : "expression",
                  "left" : {
                    "go-type" : 2,
                    "kind" : "expression",
                    "type" : "identifier",
                    "value" : {
                      "ident-kind" : "Var",
                      "kind" : "ident",
                      "value" : "size",
                      "variable" : 30
                    }
                  },
                  "operator" : "/",
                  "right" : {
                    "go-type" : 2,
                    "kind" : "constant",
                    "value" : {
                      "type" : "INT",
                      "value" : "8"
                    }
                  },
                  "type" : "binary"
                },
                "type" : "cast"
              } ]
            } ],
            "type" : "assign"
          }, {
            "kind" : "statement",
            "type" : "expression",
            "value" : {
              "arguments" : [ {
                "field" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "allArenas",
                  "variable" : 29
                },
                "go-type" : 74,
                "kind" : "expression",
                "target" : {
                  "go-type" : 5,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "h",
                    "variable" : 0
                  }
                },
                "type" : "selector"
              }, {
                "go-type" : 74,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "oldSlice",
                  "variable" : 32
                }
              } ],
              "ellipsis" : false,
              "function" : {
                "go-type" : 165,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Builtin",
                  "kind" : "ident",
                  "value" : "copy"
                }
              },
              "go-type" : 154,
              "kind" : "expression",
              "type" : "call"
            }
          } ],
          "condition" : {
            "go-type" : 123,
            "kind" : "expression",
            "left" : {
              "arguments" : [ {
                "field" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "allArenas",
                  "variable" : 29
                },
                "go-type" : 74,
                "kind" : "expression",
                "target" : {
                  "go-type" : 5,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "h",
                    "variable" : 0
                  }
                },
                "type" : "selector"
              } ],
              "ellipsis" : false,
              "function" : {
                "go-type" : 155,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Builtin",
                  "kind" : "ident",
                  "value" : "len"
                }
              },
              "go-type" : 154,
              "kind" : "expression",
              "type" : "call"
            },
            "operator" : "==",
            "right" : {
              "arguments" : [ {
                "field" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "allArenas",
                  "variable" : 29
                },
                "go-type" : 74,
                "kind" : "expression",
                "target" : {
                  "go-type" : 5,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "h",
                    "variable" : 0
                  }
                },
                "type" : "selector"
              } ],
              "ellipsis" : false,
              "function" : {
                "go-type" : 155,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Builtin",
                  "kind" : "ident",
                  "value" : "cap"
                }
              },
              "go-type" : 154,
              "kind" : "expression",
              "type" : "call"
            },
            "type" : "binary"
          },
          "else" : null,
          "init" : null,
          "kind" : "statement",
          "type" : "if"
        }, {
          "kind" : "statement",
          "left" : [ {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "allArenas",
              "variable" : 29
            },
            "go-type" : 74,
            "kind" : "expression",
            "target" : {
              "go-type" : 5,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "h",
                "variable" : 0
              }
            },
            "type" : "selector"
          } ],
          "right" : [ {
            "go-type" : 74,
            "type" : "slice",
            "three" : false,
            "high" : {
              "go-type" : 154,
              "kind" : "expression",
              "left" : {
                "arguments" : [ {
                  "field" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "allArenas",
                    "variable" : 29
                  },
                  "go-type" : 74,
                  "kind" : "expression",
                  "target" : {
                    "go-type" : 5,
                    "kind" : "expression",
                    "type" : "identifier",
                    "value" : {
                      "ident-kind" : "Var",
                      "kind" : "ident",
                      "value" : "h",
                      "variable" : 0
                    }
                  },
                  "type" : "selector"
                } ],
                "ellipsis" : false,
                "function" : {
                  "go-type" : 155,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Builtin",
                    "kind" : "ident",
                    "value" : "len"
                  }
                },
                "go-type" : 154,
                "kind" : "expression",
                "type" : "call"
              },
              "operator" : "+",
              "right" : {
                "go-type" : 154,
                "kind" : "constant",
                "value" : {
                  "type" : "INT",
                  "value" : "1"
                }
              },
              "type" : "binary"
            },
            "max" : null,
            "kind" : "expression",
            "low" : null,
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "allArenas",
                "variable" : 29
              },
              "go-type" : 74,
              "kind" : "expression",
              "target" : {
                "go-type" : 5,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "h",
                  "variable" : 0
                }
              },
              "type" : "selector"
            }
          } ],
          "type" : "assign"
        }, {
          "kind" : "statement",
          "left" : [ {
            "go-type" : 75,
            "index" : {
              "go-type" : 154,
              "kind" : "expression",
              "left" : {
                "arguments" : [ {
                  "field" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "allArenas",
                    "variable" : 29
                  },
                  "go-type" : 74,
                  "kind" : "expression",
                  "target" : {
                    "go-type" : 5,
                    "kind" : "expression",
                    "type" : "identifier",
                    "value" : {
                      "ident-kind" : "Var",
                      "kind" : "ident",
                      "value" : "h",
                      "variable" : 0
                    }
                  },
                  "type" : "selector"
                } ],
                "ellipsis" : false,
                "function" : {
                  "go-type" : 155,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Builtin",
                    "kind" : "ident",
                    "value" : "len"
                  }
                },
                "go-type" : 154,
                "kind" : "expression",
                "type" : "call"
              },
              "operator" : "-",
              "right" : {
                "go-type" : 154,
                "kind" : "constant",
                "value" : {
                  "type" : "INT",
                  "value" : "1"
                }
              },
              "type" : "binary"
            },
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "allArenas",
                "variable" : 29
              },
              "go-type" : 74,
              "kind" : "expression",
              "target" : {
                "go-type" : 5,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "h",
                  "variable" : 0
                }
              },
              "type" : "selector"
            },
            "type" : "index"
          } ],
          "right" : [ {
            "go-type" : 75,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "ri",
              "variable" : 22
            }
          } ],
          "type" : "assign"
        }, {
          "kind" : "statement",
          "type" : "expression",
          "value" : {
            "arguments" : [ {
              "coerced-to" : {
                "go-type" : 4,
                "kind" : "type",
                "qualifier" : {
                  "ident-kind" : "PkgName",
                  "kind" : "ident",
                  "package" : 1,
                  "value" : "unsafe"
                },
                "type" : "identifier",
                "value" : {
                  "go-type" : 4,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "Pointer"
                }
              },
              "go-type" : 4,
              "kind" : "expression",
              "target" : {
                "go-type" : 167,
                "kind" : "expression",
                "operator" : "&",
                "target" : {
                  "go-type" : 63,
                  "index" : {
                    "arguments" : [ ],
                    "ellipsis" : false,
                    "function" : {
                      "field" : {
                        "function" : 14,
                        "ident-kind" : "Func",
                        "kind" : "ident",
                        "value" : "l2"
                      },
                      "go-type" : 147,
                      "kind" : "expression",
                      "target" : {
                        "go-type" : 75,
                        "kind" : "expression",
                        "type" : "identifier",
                        "value" : {
                          "ident-kind" : "Var",
                          "kind" : "ident",
                          "value" : "ri",
                          "variable" : 22
                        }
                      },
                      "type" : "selector"
                    },
                    "go-type" : 25,
                    "kind" : "expression",
                    "type" : "call"
                  },
                  "kind" : "expression",
                  "target" : {
                    "go-type" : 61,
                    "kind" : "expression",
                    "type" : "identifier",
                    "value" : {
                      "ident-kind" : "Var",
                      "kind" : "ident",
                      "value" : "l2",
                      "variable" : 25
                    }
                  },
                  "type" : "index"
                },
                "type" : "unary"
              },
              "type" : "cast"
            }, {
              "coerced-to" : {
                "go-type" : 4,
                "kind" : "type",
                "qualifier" : {
                  "ident-kind" : "PkgName",
                  "kind" : "ident",
                  "package" : 1,
                  "value" : "unsafe"
                },
                "type" : "identifier",
                "value" : {
                  "go-type" : 4,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "Pointer"
                }
              },
              "go-type" : 4,
              "kind" : "expression",
              "target" : {
                "go-type" : 63,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "r",
                  "variable" : 26
                }
              },
              "type" : "cast"
            } ],
            "ellipsis" : false,
            "function" : {
              "go-type" : 151,
              "kind" : "expression",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 2,
                "value" : "atomic"
              },
              "type" : "identifier",
              "value" : {
                "function" : 13,
                "ident-kind" : "Func",
                "kind" : "ident",
                "value" : "StorepNoWB"
              }
            },
            "go-type" : 86,
            "kind" : "expression",
            "type" : "call"
          }
        } ],
        "condition" : {
          "go-type" : 123,
          "kind" : "expression",
          "left" : {
            "go-type" : 75,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "ri",
              "variable" : 22
            }
          },
          "operator" : "<=",
          "right" : {
            "arguments" : [ {
              "go-type" : 2,
              "kind" : "expression",
              "left" : {
                "go-type" : 2,
                "kind" : "expression",
                "left" : {
                  "coerced-to" : {
                    "go-type" : 2,
                    "kind" : "type",
                    "type" : "identifier",
                    "value" : {
                      "go-type" : 2,
                      "ident-kind" : "TypeName",
                      "kind" : "ident",
                      "value" : "uintptr"
                    }
                  },
                  "go-type" : 2,
                  "kind" : "expression",
                  "target" : {
                    "go-type" : 4,
                    "kind" : "expression",
                    "type" : "identifier",
                    "value" : {
                      "ident-kind" : "Var",
                      "kind" : "ident",
                      "value" : "v",
                      "variable" : 2
                    }
                  },
                  "type" : "cast"
                },
                "operator" : "+",
                "right" : {
                  "go-type" : 2,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "size",
                    "variable" : 3
                  }
                },
                "type" : "binary"
              },
              "operator" : "-",
              "right" : {
                "go-type" : 2,
                "kind" : "constant",
                "value" : {
                  "type" : "INT",
                  "value" : "1"
                }
              },
              "type" : "binary"
            } ],
            "ellipsis" : false,
            "function" : {
              "go-type" : 125,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "function" : 3,
                "ident-kind" : "Func",
                "kind" : "ident",
                "value" : "arenaIndex"
              }
            },
            "go-type" : 75,
            "kind" : "expression",
            "type" : "call"
          },
          "type" : "binary"
        },
        "init" : {
          "kind" : "statement",
          "left" : [ {
            "go-type" : -1,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "NoKind",
              "kind" : "ident",
              "value" : "ri"
            }
          } ],
          "right" : [ {
            "arguments" : [ {
              "coerced-to" : {
                "go-type" : 2,
                "kind" : "type",
                "type" : "identifier",
                "value" : {
                  "go-type" : 2,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "uintptr"
                }
              },
              "go-type" : 2,
              "kind" : "expression",
              "target" : {
                "go-type" : 4,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "v",
                  "variable" : 2
                }
              },
              "type" : "cast"
            } ],
            "ellipsis" : false,
            "function" : {
              "go-type" : 125,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "function" : 3,
                "ident-kind" : "Func",
                "kind" : "ident",
                "value" : "arenaIndex"
              }
            },
            "go-type" : 75,
            "kind" : "expression",
            "type" : "call"
          } ],
          "type" : "define"
        },
        "kind" : "statement",
        "post" : {
          "kind" : "statement",
          "operation" : "++",
          "target" : {
            "go-type" : 75,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "ri",
              "variable" : 22
            }
          },
          "type" : "crement"
        },
        "type" : "for"
      },
      "assign-vars" : [ ],
      "line-end" : 768,
      "code" : "mapped:\n\n\tfor ri := arenaIndex(uintptr(v)); ri <= arenaIndex(uintptr(v)+size-1); ri++ {\n\t\tl2 := h.arenas[ri.l1()]\n\t\tif l2 == nil {\n\n\t\t\tl2 = (*[1 << arenaL2Bits]*heapArena)(persistentalloc(unsafe.Sizeof(*l2), sys.PtrSize, nil))\n\t\t\tif l2 == nil {\n\t\t\t\tthrow(\"out of memory allocating heap arena map\")\n\t\t\t}\n\t\t\tatomic.StorepNoWB(unsafe.Pointer(&h.arenas[ri.l1()]), unsafe.Pointer(l2))\n\t\t}\n\n\t\tif l2[ri.l2()] != nil {\n\t\t\tthrow(\"arena already initialized\")\n\t\t}\n\t\tvar r *heapArena\n\t\tr = (*heapArena)(h.heapArenaAlloc.alloc(unsafe.Sizeof(*r), sys.PtrSize, &memstats.gc_sys))\n\t\tif r == nil {\n\t\t\tr = (*heapArena)(persistentalloc(unsafe.Sizeof(*r), sys.PtrSize, &memstats.gc_sys))\n\t\t\tif r == nil {\n\t\t\t\tthrow(\"out of memory allocating heap arena metadata\")\n\t\t\t}\n\t\t}\n\n\t\tif len(h.allArenas) == cap(h.allArenas) {\n\t\t\tsize := 2 * uintptr(cap(h.allArenas)) * sys.PtrSize\n\t\t\tif size == 0 {\n\t\t\t\tsize = physPageSize\n\t\t\t}\n\t\t\tnewArray := (*notInHeap)(persistentalloc(size, sys.PtrSize, &memstats.gc_sys))\n\t\t\tif newArray == nil {\n\t\t\t\tthrow(\"out of memory allocating allArenas\")\n\t\t\t}\n\t\t\toldSlice := h.allArenas\n\t\t\t*(*notInHeapSlice)(unsafe.Pointer(&h.allArenas)) = notInHeapSlice{newArray, len(h.allArenas), int(size / sys.PtrSize)}\n\t\t\tcopy(h.allArenas, oldSlice)\n\n\t\t}\n\t\th.allArenas = h.allArenas[:len(h.allArenas)+1]\n\t\th.allArenas[len(h.allArenas)-1] = ri\n\n\t\tatomic.StorepNoWB(unsafe.Pointer(&l2[ri.l2()]), unsafe.Pointer(r))\n\t}",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 57, 84 ],
      "in-vars" : [ 2, 0, 3, 4, 6, 22 ],
      "exit" : false,
      "out-vars" : [ 6, 22, 2, 0, 3, 4 ],
      "decl-vars" : [ ],
      "line-start" : 719,
      "ast" : {
        "condition" : {
          "go-type" : 123,
          "kind" : "expression",
          "left" : {
            "go-type" : 75,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "ri",
              "variable" : 22
            }
          },
          "operator" : "<=",
          "right" : {
            "arguments" : [ {
              "go-type" : 2,
              "kind" : "expression",
              "left" : {
                "go-type" : 2,
                "kind" : "expression",
                "left" : {
                  "coerced-to" : {
                    "go-type" : 2,
                    "kind" : "type",
                    "type" : "identifier",
                    "value" : {
                      "go-type" : 2,
                      "ident-kind" : "TypeName",
                      "kind" : "ident",
                      "value" : "uintptr"
                    }
                  },
                  "go-type" : 2,
                  "kind" : "expression",
                  "target" : {
                    "go-type" : 4,
                    "kind" : "expression",
                    "type" : "identifier",
                    "value" : {
                      "ident-kind" : "Var",
                      "kind" : "ident",
                      "value" : "v",
                      "variable" : 2
                    }
                  },
                  "type" : "cast"
                },
                "operator" : "+",
                "right" : {
                  "go-type" : 2,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "size",
                    "variable" : 3
                  }
                },
                "type" : "binary"
              },
              "operator" : "-",
              "right" : {
                "go-type" : 2,
                "kind" : "constant",
                "value" : {
                  "type" : "INT",
                  "value" : "1"
                }
              },
              "type" : "binary"
            } ],
            "ellipsis" : false,
            "function" : {
              "go-type" : 125,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "function" : 3,
                "ident-kind" : "Func",
                "kind" : "ident",
                "value" : "arenaIndex"
              }
            },
            "go-type" : 75,
            "kind" : "expression",
            "type" : "call"
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "for"
      },
      "assign-vars" : [ ],
      "line-end" : 768,
      "code" : "for ri := arenaIndex(uintptr(v)); ri <= arenaIndex(uintptr(v)+size-1); ri++ {\n\tl2 := h.arenas[ri.l1()]\n\tif l2 == nil {\n\n\t\tl2 = (*[1 << arenaL2Bits]*heapArena)(persistentalloc(unsafe.Sizeof(*l2), sys.PtrSize, nil))\n\t\tif l2 == nil {\n\t\t\tthrow(\"out of memory allocating heap arena map\")\n\t\t}\n\t\tatomic.StorepNoWB(unsafe.Pointer(&h.arenas[ri.l1()]), unsafe.Pointer(l2))\n\t}\n\n\tif l2[ri.l2()] != nil {\n\t\tthrow(\"arena already initialized\")\n\t}\n\tvar r *heapArena\n\tr = (*heapArena)(h.heapArenaAlloc.alloc(unsafe.Sizeof(*r), sys.PtrSize, &memstats.gc_sys))\n\tif r == nil {\n\t\tr = (*heapArena)(persistentalloc(unsafe.Sizeof(*r), sys.PtrSize, &memstats.gc_sys))\n\t\tif r == nil {\n\t\t\tthrow(\"out of memory allocating heap arena metadata\")\n\t\t}\n\t}\n\n\tif len(h.allArenas) == cap(h.allArenas) {\n\t\tsize := 2 * uintptr(cap(h.allArenas)) * sys.PtrSize\n\t\tif size == 0 {\n\t\t\tsize = physPageSize\n\t\t}\n\t\tnewArray := (*notInHeap)(persistentalloc(size, sys.PtrSize, &memstats.gc_sys))\n\t\tif newArray == nil {\n\t\t\tthrow(\"out of memory allocating allArenas\")\n\t\t}\n\t\toldSlice := h.allArenas\n\t\t*(*notInHeapSlice)(unsafe.Pointer(&h.allArenas)) = notInHeapSlice{newArray, len(h.allArenas), int(size / sys.PtrSize)}\n\t\tcopy(h.allArenas, oldSlice)\n\n\t}\n\th.allArenas = h.allArenas[:len(h.allArenas)+1]\n\th.allArenas[len(h.allArenas)-1] = ri\n\n\tatomic.StorepNoWB(unsafe.Pointer(&l2[ri.l2()]), unsafe.Pointer(r))\n}",
      "entry" : false,
      "use-vars" : [ 2, 3, 22 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 54 ],
      "in-vars" : [ 6, 2, 0, 3, 4 ],
      "exit" : false,
      "out-vars" : [ 6, 22, 2, 0, 3, 4 ],
      "decl-vars" : [ 22 ],
      "line-start" : 719,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "ri"
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "coerced-to" : {
              "go-type" : 2,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 2,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "uintptr"
              }
            },
            "go-type" : 2,
            "kind" : "expression",
            "target" : {
              "go-type" : 4,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "v",
                "variable" : 2
              }
            },
            "type" : "cast"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 125,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 3,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "arenaIndex"
            }
          },
          "go-type" : 75,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 719,
      "code" : "ri := arenaIndex(uintptr(v))",
      "entry" : false,
      "use-vars" : [ 2 ]
    }, {
      "update-vars" : [ 22 ],
      "successors" : [ 54 ],
      "in-vars" : [ 4, 6, 22, 2, 0, 3 ],
      "exit" : false,
      "out-vars" : [ 4, 6, 22, 2, 0, 3 ],
      "decl-vars" : [ ],
      "line-start" : 719,
      "ast" : {
        "kind" : "statement",
        "operation" : "++",
        "target" : {
          "go-type" : 75,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "ri",
            "variable" : 22
          }
        },
        "type" : "crement"
      },
      "assign-vars" : [ 22 ],
      "line-end" : 719,
      "code" : "ri++",
      "entry" : false,
      "use-vars" : [ 22 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 58 ],
      "in-vars" : [ 2, 0, 3, 4, 6, 22 ],
      "exit" : false,
      "out-vars" : [ 22, 2, 0, 3, 4, 25, 6 ],
      "decl-vars" : [ 25 ],
      "line-start" : 720,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "l2"
          }
        } ],
        "right" : [ {
          "go-type" : 61,
          "index" : {
            "arguments" : [ ],
            "ellipsis" : false,
            "function" : {
              "field" : {
                "function" : 11,
                "ident-kind" : "Func",
                "kind" : "ident",
                "value" : "l1"
              },
              "go-type" : 147,
              "kind" : "expression",
              "target" : {
                "go-type" : 75,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "ri",
                  "variable" : 22
                }
              },
              "type" : "selector"
            },
            "go-type" : 25,
            "kind" : "expression",
            "type" : "call"
          },
          "kind" : "expression",
          "target" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "arenas",
              "variable" : 23
            },
            "go-type" : 60,
            "kind" : "expression",
            "target" : {
              "go-type" : 5,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "h",
                "variable" : 0
              }
            },
            "type" : "selector"
          },
          "type" : "index"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 720,
      "code" : "l2 := h.arenas[ri.l1()]",
      "entry" : false,
      "use-vars" : [ 22, 0 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 59, 63 ],
      "in-vars" : [ 4, 25, 6, 22, 2, 0, 3 ],
      "exit" : false,
      "out-vars" : [ 22, 2, 0, 3, 4, 25, 6 ],
      "decl-vars" : [ ],
      "line-start" : 721,
      "ast" : {
        "condition" : {
          "go-type" : 123,
          "kind" : "expression",
          "left" : {
            "go-type" : 61,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "l2",
              "variable" : 25
            }
          },
          "operator" : "==",
          "right" : {
            "go-type" : 124,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Nil",
              "kind" : "ident",
              "value" : "nil"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 728,
      "code" : "if l2 == nil {\n\n\tl2 = (*[1 << arenaL2Bits]*heapArena)(persistentalloc(unsafe.Sizeof(*l2), sys.PtrSize, nil))\n\tif l2 == nil {\n\t\tthrow(\"out of memory allocating heap arena map\")\n\t}\n\tatomic.StorepNoWB(unsafe.Pointer(&h.arenas[ri.l1()]), unsafe.Pointer(l2))\n}",
      "entry" : false,
      "use-vars" : [ 25 ]
    }, {
      "update-vars" : [ 25 ],
      "successors" : [ 60 ],
      "in-vars" : [ 22, 2, 0, 3, 4, 25, 6 ],
      "exit" : false,
      "out-vars" : [ 6, 22, 2, 0, 3, 4, 25 ],
      "decl-vars" : [ ],
      "line-start" : 723,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 61,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "l2",
            "variable" : 25
          }
        } ],
        "right" : [ {
          "coerced-to" : {
            "contained" : {
              "element" : {
                "contained" : {
                  "go-type" : 64,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 64,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "heapArena"
                  }
                },
                "go-type" : 63,
                "kind" : "type",
                "type" : "pointer"
              },
              "go-type" : 62,
              "kind" : "type",
              "length" : {
                "go-type" : 150,
                "kind" : "constant",
                "value" : {
                  "type" : "INT",
                  "value" : "4194304"
                }
              },
              "type" : "array"
            },
            "go-type" : 61,
            "kind" : "type",
            "type" : "pointer"
          },
          "go-type" : 61,
          "kind" : "expression",
          "target" : {
            "arguments" : [ {
              "go-type" : 2,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "33554432"
              }
            }, {
              "go-type" : 2,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "8"
              }
            }, {
              "go-type" : 124,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Nil",
                "kind" : "ident",
                "value" : "nil"
              }
            } ],
            "ellipsis" : false,
            "function" : {
              "go-type" : 118,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "function" : 12,
                "ident-kind" : "Func",
                "kind" : "ident",
                "value" : "persistentalloc"
              }
            },
            "go-type" : 4,
            "kind" : "expression",
            "type" : "call"
          },
          "type" : "cast"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 25 ],
      "line-end" : 723,
      "code" : "l2 = (*[1 << arenaL2Bits]*heapArena)(persistentalloc(unsafe.Sizeof(*l2), sys.PtrSize, nil))",
      "entry" : false,
      "use-vars" : [ 25 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 61, 62 ],
      "in-vars" : [ 2, 0, 3, 4, 25, 6, 22 ],
      "exit" : false,
      "out-vars" : [ 22, 2, 0, 3, 4, 25, 6 ],
      "decl-vars" : [ ],
      "line-start" : 724,
      "ast" : {
        "condition" : {
          "go-type" : 123,
          "kind" : "expression",
          "left" : {
            "go-type" : 61,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "l2",
              "variable" : 25
            }
          },
          "operator" : "==",
          "right" : {
            "go-type" : 124,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Nil",
              "kind" : "ident",
              "value" : "nil"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 726,
      "code" : "if l2 == nil {\n\tthrow(\"out of memory allocating heap arena map\")\n}",
      "entry" : false,
      "use-vars" : [ 25 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 62 ],
      "in-vars" : [ 2, 0, 3, 4, 25, 6, 22 ],
      "exit" : false,
      "out-vars" : [ 4, 25, 6, 22, 2, 0, 3 ],
      "decl-vars" : [ ],
      "line-start" : 725,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 138,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "out of memory allocating heap arena map"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 136,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 7,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "throw"
            }
          },
          "go-type" : 86,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 725,
      "code" : "throw(\"out of memory allocating heap arena map\")",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 63 ],
      "in-vars" : [ 3, 4, 25, 6, 22, 2, 0 ],
      "exit" : false,
      "out-vars" : [ 25, 6, 22, 2, 0, 3, 4 ],
      "decl-vars" : [ ],
      "line-start" : 727,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "coerced-to" : {
              "go-type" : 4,
              "kind" : "type",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 1,
                "value" : "unsafe"
              },
              "type" : "identifier",
              "value" : {
                "go-type" : 4,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "Pointer"
              }
            },
            "go-type" : 4,
            "kind" : "expression",
            "target" : {
              "go-type" : 153,
              "kind" : "expression",
              "operator" : "&",
              "target" : {
                "go-type" : 61,
                "index" : {
                  "arguments" : [ ],
                  "ellipsis" : false,
                  "function" : {
                    "field" : {
                      "function" : 11,
                      "ident-kind" : "Func",
                      "kind" : "ident",
                      "value" : "l1"
                    },
                    "go-type" : 147,
                    "kind" : "expression",
                    "target" : {
                      "go-type" : 75,
                      "kind" : "expression",
                      "type" : "identifier",
                      "value" : {
                        "ident-kind" : "Var",
                        "kind" : "ident",
                        "value" : "ri",
                        "variable" : 22
                      }
                    },
                    "type" : "selector"
                  },
                  "go-type" : 25,
                  "kind" : "expression",
                  "type" : "call"
                },
                "kind" : "expression",
                "target" : {
                  "field" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "arenas",
                    "variable" : 23
                  },
                  "go-type" : 60,
                  "kind" : "expression",
                  "target" : {
                    "go-type" : 5,
                    "kind" : "expression",
                    "type" : "identifier",
                    "value" : {
                      "ident-kind" : "Var",
                      "kind" : "ident",
                      "value" : "h",
                      "variable" : 0
                    }
                  },
                  "type" : "selector"
                },
                "type" : "index"
              },
              "type" : "unary"
            },
            "type" : "cast"
          }, {
            "coerced-to" : {
              "go-type" : 4,
              "kind" : "type",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 1,
                "value" : "unsafe"
              },
              "type" : "identifier",
              "value" : {
                "go-type" : 4,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "Pointer"
              }
            },
            "go-type" : 4,
            "kind" : "expression",
            "target" : {
              "go-type" : 61,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "l2",
                "variable" : 25
              }
            },
            "type" : "cast"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 151,
            "kind" : "expression",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 2,
              "value" : "atomic"
            },
            "type" : "identifier",
            "value" : {
              "function" : 13,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "StorepNoWB"
            }
          },
          "go-type" : 86,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 727,
      "code" : "atomic.StorepNoWB(unsafe.Pointer(&h.arenas[ri.l1()]), unsafe.Pointer(l2))",
      "entry" : false,
      "use-vars" : [ 22, 0, 25 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 64, 65 ],
      "in-vars" : [ 2, 0, 3, 4, 25, 6, 22 ],
      "exit" : false,
      "out-vars" : [ 22, 2, 0, 3, 4, 25, 6 ],
      "decl-vars" : [ ],
      "line-start" : 730,
      "ast" : {
        "condition" : {
          "go-type" : 123,
          "kind" : "expression",
          "left" : {
            "go-type" : 63,
            "index" : {
              "arguments" : [ ],
              "ellipsis" : false,
              "function" : {
                "field" : {
                  "function" : 14,
                  "ident-kind" : "Func",
                  "kind" : "ident",
                  "value" : "l2"
                },
                "go-type" : 147,
                "kind" : "expression",
                "target" : {
                  "go-type" : 75,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "ri",
                    "variable" : 22
                  }
                },
                "type" : "selector"
              },
              "go-type" : 25,
              "kind" : "expression",
              "type" : "call"
            },
            "kind" : "expression",
            "target" : {
              "go-type" : 61,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "l2",
                "variable" : 25
              }
            },
            "type" : "index"
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 124,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Nil",
              "kind" : "ident",
              "value" : "nil"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 732,
      "code" : "if l2[ri.l2()] != nil {\n\tthrow(\"arena already initialized\")\n}",
      "entry" : false,
      "use-vars" : [ 25, 22 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 65 ],
      "in-vars" : [ 22, 2, 0, 3, 4, 25, 6 ],
      "exit" : false,
      "out-vars" : [ 25, 6, 22, 2, 0, 3, 4 ],
      "decl-vars" : [ ],
      "line-start" : 731,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 138,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "arena already initialized"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 136,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 7,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "throw"
            }
          },
          "go-type" : 86,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 731,
      "code" : "throw(\"arena already initialized\")",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 66 ],
      "in-vars" : [ 2, 0, 3, 4, 25, 6, 22 ],
      "exit" : false,
      "out-vars" : [ 22, 2, 0, 3, 4, 26, 25, 6 ],
      "decl-vars" : [ 26 ],
      "line-start" : 733,
      "ast" : {
        "kind" : "statement",
        "target" : {
          "kind" : "decl",
          "specs" : [ {
            "comments" : [ ],
            "declared-type" : {
              "contained" : {
                "go-type" : 64,
                "kind" : "type",
                "type" : "identifier",
                "value" : {
                  "go-type" : 64,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "heapArena"
                }
              },
              "go-type" : 63,
              "kind" : "type",
              "type" : "pointer"
            },
            "kind" : "spec",
            "names" : [ {
              "ident-kind" : "NoKind",
              "kind" : "ident",
              "value" : "r"
            } ],
            "type" : "var",
            "values" : [ ]
          } ],
          "type" : "var"
        },
        "type" : "declaration"
      },
      "assign-vars" : [ ],
      "line-end" : 733,
      "code" : "var r *heapArena",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ 26 ],
      "successors" : [ 67 ],
      "in-vars" : [ 22, 2, 0, 3, 4, 26, 25, 6 ],
      "exit" : false,
      "out-vars" : [ 3, 4, 26, 25, 6, 22, 2, 0 ],
      "decl-vars" : [ ],
      "line-start" : 734,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 63,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "r",
            "variable" : 26
          }
        } ],
        "right" : [ {
          "coerced-to" : {
            "contained" : {
              "go-type" : 64,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 64,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "heapArena"
              }
            },
            "go-type" : 63,
            "kind" : "type",
            "type" : "pointer"
          },
          "go-type" : 63,
          "kind" : "expression",
          "target" : {
            "arguments" : [ {
              "go-type" : 2,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "2164744"
              }
            }, {
              "go-type" : 2,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "8"
              }
            }, {
              "go-type" : 31,
              "kind" : "expression",
              "operator" : "&",
              "target" : {
                "field" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "gc_sys",
                  "variable" : 28
                },
                "go-type" : 15,
                "kind" : "expression",
                "target" : {
                  "go-type" : 110,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "memstats",
                    "variable" : 4
                  }
                },
                "type" : "selector"
              },
              "type" : "unary"
            } ],
            "ellipsis" : false,
            "function" : {
              "field" : {
                "function" : 2,
                "ident-kind" : "Func",
                "kind" : "ident",
                "value" : "alloc"
              },
              "go-type" : 118,
              "kind" : "expression",
              "target" : {
                "field" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "heapArenaAlloc",
                  "variable" : 27
                },
                "go-type" : 69,
                "kind" : "expression",
                "target" : {
                  "go-type" : 5,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "h",
                    "variable" : 0
                  }
                },
                "type" : "selector"
              },
              "type" : "selector"
            },
            "go-type" : 4,
            "kind" : "expression",
            "type" : "call"
          },
          "type" : "cast"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 26 ],
      "line-end" : 734,
      "code" : "r = (*heapArena)(h.heapArenaAlloc.alloc(unsafe.Sizeof(*r), sys.PtrSize, &memstats.gc_sys))",
      "entry" : false,
      "use-vars" : [ 4, 0, 26 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 68, 71 ],
      "in-vars" : [ 3, 4, 26, 25, 6, 22, 2, 0 ],
      "exit" : false,
      "out-vars" : [ 6, 22, 2, 0, 3, 4, 26, 25 ],
      "decl-vars" : [ ],
      "line-start" : 735,
      "ast" : {
        "condition" : {
          "go-type" : 123,
          "kind" : "expression",
          "left" : {
            "go-type" : 63,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "r",
              "variable" : 26
            }
          },
          "operator" : "==",
          "right" : {
            "go-type" : 124,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Nil",
              "kind" : "ident",
              "value" : "nil"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 740,
      "code" : "if r == nil {\n\tr = (*heapArena)(persistentalloc(unsafe.Sizeof(*r), sys.PtrSize, &memstats.gc_sys))\n\tif r == nil {\n\t\tthrow(\"out of memory allocating heap arena metadata\")\n\t}\n}",
      "entry" : false,
      "use-vars" : [ 26 ]
    }, {
      "update-vars" : [ 26 ],
      "successors" : [ 69 ],
      "in-vars" : [ 25, 6, 22, 2, 0, 3, 4, 26 ],
      "exit" : false,
      "out-vars" : [ 25, 6, 22, 2, 0, 3, 4, 26 ],
      "decl-vars" : [ ],
      "line-start" : 736,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 63,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "r",
            "variable" : 26
          }
        } ],
        "right" : [ {
          "coerced-to" : {
            "contained" : {
              "go-type" : 64,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 64,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "heapArena"
              }
            },
            "go-type" : 63,
            "kind" : "type",
            "type" : "pointer"
          },
          "go-type" : 63,
          "kind" : "expression",
          "target" : {
            "arguments" : [ {
              "go-type" : 2,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "2164744"
              }
            }, {
              "go-type" : 2,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "8"
              }
            }, {
              "go-type" : 31,
              "kind" : "expression",
              "operator" : "&",
              "target" : {
                "field" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "gc_sys",
                  "variable" : 28
                },
                "go-type" : 15,
                "kind" : "expression",
                "target" : {
                  "go-type" : 110,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "memstats",
                    "variable" : 4
                  }
                },
                "type" : "selector"
              },
              "type" : "unary"
            } ],
            "ellipsis" : false,
            "function" : {
              "go-type" : 118,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "function" : 12,
                "ident-kind" : "Func",
                "kind" : "ident",
                "value" : "persistentalloc"
              }
            },
            "go-type" : 4,
            "kind" : "expression",
            "type" : "call"
          },
          "type" : "cast"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 26 ],
      "line-end" : 736,
      "code" : "r = (*heapArena)(persistentalloc(unsafe.Sizeof(*r), sys.PtrSize, &memstats.gc_sys))",
      "entry" : false,
      "use-vars" : [ 4, 26 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 70, 71 ],
      "in-vars" : [ 22, 2, 0, 3, 4, 26, 25, 6 ],
      "exit" : false,
      "out-vars" : [ 6, 22, 2, 0, 3, 4, 26, 25 ],
      "decl-vars" : [ ],
      "line-start" : 737,
      "ast" : {
        "condition" : {
          "go-type" : 123,
          "kind" : "expression",
          "left" : {
            "go-type" : 63,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "r",
              "variable" : 26
            }
          },
          "operator" : "==",
          "right" : {
            "go-type" : 124,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Nil",
              "kind" : "ident",
              "value" : "nil"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 739,
      "code" : "if r == nil {\n\tthrow(\"out of memory allocating heap arena metadata\")\n}",
      "entry" : false,
      "use-vars" : [ 26 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 71 ],
      "in-vars" : [ 2, 0, 3, 4, 26, 25, 6, 22 ],
      "exit" : false,
      "out-vars" : [ 26, 25, 6, 22, 2, 0, 3, 4 ],
      "decl-vars" : [ ],
      "line-start" : 738,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 138,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "out of memory allocating heap arena metadata"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 136,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 7,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "throw"
            }
          },
          "go-type" : 86,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 738,
      "code" : "throw(\"out of memory allocating heap arena metadata\")",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 72, 81 ],
      "in-vars" : [ 6, 22, 2, 0, 3, 4, 26, 25 ],
      "exit" : false,
      "out-vars" : [ 4, 26, 25, 6, 22, 2, 0, 3 ],
      "decl-vars" : [ ],
      "line-start" : 743,
      "ast" : {
        "condition" : {
          "go-type" : 123,
          "kind" : "expression",
          "left" : {
            "arguments" : [ {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "allArenas",
                "variable" : 29
              },
              "go-type" : 74,
              "kind" : "expression",
              "target" : {
                "go-type" : 5,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "h",
                  "variable" : 0
                }
              },
              "type" : "selector"
            } ],
            "ellipsis" : false,
            "function" : {
              "go-type" : 155,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Builtin",
                "kind" : "ident",
                "value" : "len"
              }
            },
            "go-type" : 154,
            "kind" : "expression",
            "type" : "call"
          },
          "operator" : "==",
          "right" : {
            "arguments" : [ {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "allArenas",
                "variable" : 29
              },
              "go-type" : 74,
              "kind" : "expression",
              "target" : {
                "go-type" : 5,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "h",
                  "variable" : 0
                }
              },
              "type" : "selector"
            } ],
            "ellipsis" : false,
            "function" : {
              "go-type" : 155,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Builtin",
                "kind" : "ident",
                "value" : "cap"
              }
            },
            "go-type" : 154,
            "kind" : "expression",
            "type" : "call"
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 759,
      "code" : "if len(h.allArenas) == cap(h.allArenas) {\n\tsize := 2 * uintptr(cap(h.allArenas)) * sys.PtrSize\n\tif size == 0 {\n\t\tsize = physPageSize\n\t}\n\tnewArray := (*notInHeap)(persistentalloc(size, sys.PtrSize, &memstats.gc_sys))\n\tif newArray == nil {\n\t\tthrow(\"out of memory allocating allArenas\")\n\t}\n\toldSlice := h.allArenas\n\t*(*notInHeapSlice)(unsafe.Pointer(&h.allArenas)) = notInHeapSlice{newArray, len(h.allArenas), int(size / sys.PtrSize)}\n\tcopy(h.allArenas, oldSlice)\n\n}",
      "entry" : false,
      "use-vars" : [ 0 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 73 ],
      "in-vars" : [ 2, 0, 3, 4, 26, 25, 6, 22 ],
      "exit" : false,
      "out-vars" : [ 3, 4, 26, 30, 25, 6, 22, 2, 0 ],
      "decl-vars" : [ 30 ],
      "line-start" : 744,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "size"
          }
        } ],
        "right" : [ {
          "go-type" : 2,
          "kind" : "expression",
          "left" : {
            "go-type" : 2,
            "kind" : "expression",
            "left" : {
              "go-type" : 2,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "2"
              }
            },
            "operator" : "*",
            "right" : {
              "coerced-to" : {
                "go-type" : 2,
                "kind" : "type",
                "type" : "identifier",
                "value" : {
                  "go-type" : 2,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "uintptr"
                }
              },
              "go-type" : 2,
              "kind" : "expression",
              "target" : {
                "arguments" : [ {
                  "field" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "allArenas",
                    "variable" : 29
                  },
                  "go-type" : 74,
                  "kind" : "expression",
                  "target" : {
                    "go-type" : 5,
                    "kind" : "expression",
                    "type" : "identifier",
                    "value" : {
                      "ident-kind" : "Var",
                      "kind" : "ident",
                      "value" : "h",
                      "variable" : 0
                    }
                  },
                  "type" : "selector"
                } ],
                "ellipsis" : false,
                "function" : {
                  "go-type" : 155,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Builtin",
                    "kind" : "ident",
                    "value" : "cap"
                  }
                },
                "go-type" : 154,
                "kind" : "expression",
                "type" : "call"
              },
              "type" : "cast"
            },
            "type" : "binary"
          },
          "operator" : "*",
          "right" : {
            "go-type" : 2,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "8"
            }
          },
          "type" : "binary"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 744,
      "code" : "size := 2 * uintptr(cap(h.allArenas)) * sys.PtrSize",
      "entry" : false,
      "use-vars" : [ 0 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 74, 75 ],
      "in-vars" : [ 2, 30, 4, 26, 25, 6, 22, 0, 3 ],
      "exit" : false,
      "out-vars" : [ 26, 25, 22, 2, 0, 3, 4, 30, 6 ],
      "decl-vars" : [ ],
      "line-start" : 745,
      "ast" : {
        "condition" : {
          "go-type" : 123,
          "kind" : "expression",
          "left" : {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "size",
              "variable" : 30
            }
          },
          "operator" : "==",
          "right" : {
            "go-type" : 2,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 747,
      "code" : "if size == 0 {\n\tsize = physPageSize\n}",
      "entry" : false,
      "use-vars" : [ 30 ]
    }, {
      "update-vars" : [ 30 ],
      "successors" : [ 75 ],
      "in-vars" : [ 0, 3, 4, 26, 25, 6, 22, 2 ],
      "exit" : false,
      "out-vars" : [ 30, 6, 22, 3, 26, 4, 25, 2, 0 ],
      "decl-vars" : [ ],
      "line-start" : 746,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 2,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "size",
            "variable" : 30
          }
        } ],
        "right" : [ {
          "go-type" : 2,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "physPageSize",
            "variable" : 6
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 30 ],
      "line-end" : 746,
      "code" : "size = physPageSize",
      "entry" : false,
      "use-vars" : [ 6 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 76 ],
      "in-vars" : [ 3, 26, 30, 25, 2, 0, 4, 6, 22 ],
      "exit" : false,
      "out-vars" : [ 0, 3, 31, 30, 2, 4, 26, 25, 6, 22 ],
      "decl-vars" : [ 31 ],
      "line-start" : 748,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "newArray"
          }
        } ],
        "right" : [ {
          "coerced-to" : {
            "contained" : {
              "go-type" : 159,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 159,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "notInHeap"
              }
            },
            "go-type" : 158,
            "kind" : "type",
            "type" : "pointer"
          },
          "go-type" : 158,
          "kind" : "expression",
          "target" : {
            "arguments" : [ {
              "go-type" : 2,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "size",
                "variable" : 30
              }
            }, {
              "go-type" : 2,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "8"
              }
            }, {
              "go-type" : 31,
              "kind" : "expression",
              "operator" : "&",
              "target" : {
                "field" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "gc_sys",
                  "variable" : 28
                },
                "go-type" : 15,
                "kind" : "expression",
                "target" : {
                  "go-type" : 110,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "memstats",
                    "variable" : 4
                  }
                },
                "type" : "selector"
              },
              "type" : "unary"
            } ],
            "ellipsis" : false,
            "function" : {
              "go-type" : 118,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "function" : 12,
                "ident-kind" : "Func",
                "kind" : "ident",
                "value" : "persistentalloc"
              }
            },
            "go-type" : 4,
            "kind" : "expression",
            "type" : "call"
          },
          "type" : "cast"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 748,
      "code" : "newArray := (*notInHeap)(persistentalloc(size, sys.PtrSize, &memstats.gc_sys))",
      "entry" : false,
      "use-vars" : [ 4, 30 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 77, 78 ],
      "in-vars" : [ 31, 25, 2, 0, 3, 4, 26, 30, 6, 22 ],
      "exit" : false,
      "out-vars" : [ 0, 26, 30, 25, 2, 4, 31, 6, 22, 3 ],
      "decl-vars" : [ ],
      "line-start" : 749,
      "ast" : {
        "condition" : {
          "go-type" : 123,
          "kind" : "expression",
          "left" : {
            "go-type" : 158,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "newArray",
              "variable" : 31
            }
          },
          "operator" : "==",
          "right" : {
            "go-type" : 124,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Nil",
              "kind" : "ident",
              "value" : "nil"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 751,
      "code" : "if newArray == nil {\n\tthrow(\"out of memory allocating allArenas\")\n}",
      "entry" : false,
      "use-vars" : [ 31 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 78 ],
      "in-vars" : [ 2, 0, 4, 31, 30, 3, 26, 25, 6, 22 ],
      "exit" : false,
      "out-vars" : [ 2, 3, 26, 30, 25, 22, 0, 4, 31, 6 ],
      "decl-vars" : [ ],
      "line-start" : 750,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 138,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "out of memory allocating allArenas"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 136,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 7,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "throw"
            }
          },
          "go-type" : 86,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 750,
      "code" : "throw(\"out of memory allocating allArenas\")",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 79 ],
      "in-vars" : [ 4, 26, 31, 25, 6, 2, 3, 22, 0, 30 ],
      "exit" : false,
      "out-vars" : [ 32, 30, 25, 22, 2, 0, 3, 26, 4, 31, 6 ],
      "decl-vars" : [ 32 ],
      "line-start" : 752,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "oldSlice"
          }
        } ],
        "right" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "allArenas",
            "variable" : 29
          },
          "go-type" : 74,
          "kind" : "expression",
          "target" : {
            "go-type" : 5,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "h",
              "variable" : 0
            }
          },
          "type" : "selector"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 752,
      "code" : "oldSlice := h.allArenas",
      "entry" : false,
      "use-vars" : [ 0 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 80 ],
      "in-vars" : [ 2, 3, 4, 26, 31, 22, 0, 32, 30, 25, 6 ],
      "exit" : false,
      "out-vars" : [ 0, 3, 25, 6, 2, 4, 26, 32, 22 ],
      "decl-vars" : [ ],
      "line-start" : 753,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 161,
          "kind" : "expression",
          "target" : {
            "coerced-to" : {
              "contained" : {
                "go-type" : 161,
                "kind" : "type",
                "type" : "identifier",
                "value" : {
                  "go-type" : 161,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "notInHeapSlice"
                }
              },
              "go-type" : 163,
              "kind" : "type",
              "type" : "pointer"
            },
            "go-type" : 163,
            "kind" : "expression",
            "target" : {
              "coerced-to" : {
                "go-type" : 4,
                "kind" : "type",
                "qualifier" : {
                  "ident-kind" : "PkgName",
                  "kind" : "ident",
                  "package" : 1,
                  "value" : "unsafe"
                },
                "type" : "identifier",
                "value" : {
                  "go-type" : 4,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "Pointer"
                }
              },
              "go-type" : 4,
              "kind" : "expression",
              "target" : {
                "go-type" : 164,
                "kind" : "expression",
                "operator" : "&",
                "target" : {
                  "field" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "allArenas",
                    "variable" : 29
                  },
                  "go-type" : 74,
                  "kind" : "expression",
                  "target" : {
                    "go-type" : 5,
                    "kind" : "expression",
                    "type" : "identifier",
                    "value" : {
                      "ident-kind" : "Var",
                      "kind" : "ident",
                      "value" : "h",
                      "variable" : 0
                    }
                  },
                  "type" : "selector"
                },
                "type" : "unary"
              },
              "type" : "cast"
            },
            "type" : "cast"
          },
          "type" : "star"
        } ],
        "right" : [ {
          "declared" : {
            "go-type" : 161,
            "kind" : "type",
            "type" : "identifier",
            "value" : {
              "go-type" : 161,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "notInHeapSlice"
            }
          },
          "go-type" : 161,
          "kind" : "literal",
          "type" : "composite",
          "values" : [ {
            "go-type" : 158,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "newArray",
              "variable" : 31
            }
          }, {
            "arguments" : [ {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "allArenas",
                "variable" : 29
              },
              "go-type" : 74,
              "kind" : "expression",
              "target" : {
                "go-type" : 5,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "h",
                  "variable" : 0
                }
              },
              "type" : "selector"
            } ],
            "ellipsis" : false,
            "function" : {
              "go-type" : 155,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Builtin",
                "kind" : "ident",
                "value" : "len"
              }
            },
            "go-type" : 154,
            "kind" : "expression",
            "type" : "call"
          }, {
            "coerced-to" : {
              "go-type" : 154,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 154,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "int"
              }
            },
            "go-type" : 154,
            "kind" : "expression",
            "target" : {
              "go-type" : 2,
              "kind" : "expression",
              "left" : {
                "go-type" : 2,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "size",
                  "variable" : 30
                }
              },
              "operator" : "/",
              "right" : {
                "go-type" : 2,
                "kind" : "constant",
                "value" : {
                  "type" : "INT",
                  "value" : "8"
                }
              },
              "type" : "binary"
            },
            "type" : "cast"
          } ]
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 753,
      "code" : "*(*notInHeapSlice)(unsafe.Pointer(&h.allArenas)) = notInHeapSlice{newArray, len(h.allArenas), int(size / sys.PtrSize)}",
      "entry" : false,
      "use-vars" : [ 30, 0, 31 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 81 ],
      "in-vars" : [ 0, 3, 4, 32, 25, 22, 2, 26, 6 ],
      "exit" : false,
      "out-vars" : [ 2, 0, 3, 4, 26, 25, 6, 22 ],
      "decl-vars" : [ ],
      "line-start" : 754,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "allArenas",
              "variable" : 29
            },
            "go-type" : 74,
            "kind" : "expression",
            "target" : {
              "go-type" : 5,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "h",
                "variable" : 0
              }
            },
            "type" : "selector"
          }, {
            "go-type" : 74,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "oldSlice",
              "variable" : 32
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 165,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Builtin",
              "kind" : "ident",
              "value" : "copy"
            }
          },
          "go-type" : 154,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 754,
      "code" : "copy(h.allArenas, oldSlice)",
      "entry" : false,
      "use-vars" : [ 0, 32 ]
    }, {
      "update-vars" : [ 0 ],
      "successors" : [ 82 ],
      "in-vars" : [ 4, 26, 25, 6, 22, 2, 0, 3 ],
      "exit" : false,
      "out-vars" : [ 0, 3, 4, 26, 25, 6, 22, 2 ],
      "decl-vars" : [ ],
      "line-start" : 760,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "allArenas",
            "variable" : 29
          },
          "go-type" : 74,
          "kind" : "expression",
          "target" : {
            "go-type" : 5,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "h",
              "variable" : 0
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "go-type" : 74,
          "type" : "slice",
          "three" : false,
          "high" : {
            "go-type" : 154,
            "kind" : "expression",
            "left" : {
              "arguments" : [ {
                "field" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "allArenas",
                  "variable" : 29
                },
                "go-type" : 74,
                "kind" : "expression",
                "target" : {
                  "go-type" : 5,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "h",
                    "variable" : 0
                  }
                },
                "type" : "selector"
              } ],
              "ellipsis" : false,
              "function" : {
                "go-type" : 155,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Builtin",
                  "kind" : "ident",
                  "value" : "len"
                }
              },
              "go-type" : 154,
              "kind" : "expression",
              "type" : "call"
            },
            "operator" : "+",
            "right" : {
              "go-type" : 154,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "1"
              }
            },
            "type" : "binary"
          },
          "max" : null,
          "kind" : "expression",
          "low" : null,
          "target" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "allArenas",
              "variable" : 29
            },
            "go-type" : 74,
            "kind" : "expression",
            "target" : {
              "go-type" : 5,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "h",
                "variable" : 0
              }
            },
            "type" : "selector"
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 760,
      "code" : "h.allArenas = h.allArenas[:len(h.allArenas)+1]",
      "entry" : false,
      "use-vars" : [ 0 ]
    }, {
      "update-vars" : [ 0 ],
      "successors" : [ 83 ],
      "in-vars" : [ 22, 2, 0, 3, 4, 26, 25, 6 ],
      "exit" : false,
      "out-vars" : [ 22, 2, 0, 3, 4, 26, 25, 6 ],
      "decl-vars" : [ ],
      "line-start" : 761,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 75,
          "index" : {
            "go-type" : 154,
            "kind" : "expression",
            "left" : {
              "arguments" : [ {
                "field" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "allArenas",
                  "variable" : 29
                },
                "go-type" : 74,
                "kind" : "expression",
                "target" : {
                  "go-type" : 5,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "h",
                    "variable" : 0
                  }
                },
                "type" : "selector"
              } ],
              "ellipsis" : false,
              "function" : {
                "go-type" : 155,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Builtin",
                  "kind" : "ident",
                  "value" : "len"
                }
              },
              "go-type" : 154,
              "kind" : "expression",
              "type" : "call"
            },
            "operator" : "-",
            "right" : {
              "go-type" : 154,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "1"
              }
            },
            "type" : "binary"
          },
          "kind" : "expression",
          "target" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "allArenas",
              "variable" : 29
            },
            "go-type" : 74,
            "kind" : "expression",
            "target" : {
              "go-type" : 5,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "h",
                "variable" : 0
              }
            },
            "type" : "selector"
          },
          "type" : "index"
        } ],
        "right" : [ {
          "go-type" : 75,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "ri",
            "variable" : 22
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 761,
      "code" : "h.allArenas[len(h.allArenas)-1] = ri",
      "entry" : false,
      "use-vars" : [ 0, 22 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 56 ],
      "in-vars" : [ 6, 22, 2, 0, 3, 4, 26, 25 ],
      "exit" : false,
      "out-vars" : [ 6, 22, 2, 0, 3, 4 ],
      "decl-vars" : [ ],
      "line-start" : 767,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "coerced-to" : {
              "go-type" : 4,
              "kind" : "type",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 1,
                "value" : "unsafe"
              },
              "type" : "identifier",
              "value" : {
                "go-type" : 4,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "Pointer"
              }
            },
            "go-type" : 4,
            "kind" : "expression",
            "target" : {
              "go-type" : 167,
              "kind" : "expression",
              "operator" : "&",
              "target" : {
                "go-type" : 63,
                "index" : {
                  "arguments" : [ ],
                  "ellipsis" : false,
                  "function" : {
                    "field" : {
                      "function" : 14,
                      "ident-kind" : "Func",
                      "kind" : "ident",
                      "value" : "l2"
                    },
                    "go-type" : 147,
                    "kind" : "expression",
                    "target" : {
                      "go-type" : 75,
                      "kind" : "expression",
                      "type" : "identifier",
                      "value" : {
                        "ident-kind" : "Var",
                        "kind" : "ident",
                        "value" : "ri",
                        "variable" : 22
                      }
                    },
                    "type" : "selector"
                  },
                  "go-type" : 25,
                  "kind" : "expression",
                  "type" : "call"
                },
                "kind" : "expression",
                "target" : {
                  "go-type" : 61,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "l2",
                    "variable" : 25
                  }
                },
                "type" : "index"
              },
              "type" : "unary"
            },
            "type" : "cast"
          }, {
            "coerced-to" : {
              "go-type" : 4,
              "kind" : "type",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 1,
                "value" : "unsafe"
              },
              "type" : "identifier",
              "value" : {
                "go-type" : 4,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "Pointer"
              }
            },
            "go-type" : 4,
            "kind" : "expression",
            "target" : {
              "go-type" : 63,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "r",
                "variable" : 26
              }
            },
            "type" : "cast"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 151,
            "kind" : "expression",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 2,
              "value" : "atomic"
            },
            "type" : "identifier",
            "value" : {
              "function" : 13,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "StorepNoWB"
            }
          },
          "go-type" : 86,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 767,
      "code" : "atomic.StorepNoWB(unsafe.Pointer(&l2[ri.l2()]), unsafe.Pointer(r))",
      "entry" : false,
      "use-vars" : [ 22, 25, 26 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 85, 86 ],
      "in-vars" : [ 2, 3 ],
      "exit" : false,
      "out-vars" : [ 2, 3 ],
      "decl-vars" : [ ],
      "line-start" : 771,
      "ast" : {
        "condition" : {
          "go-type" : 123,
          "kind" : "constant",
          "value" : {
            "type" : "BOOL",
            "value" : "false"
          }
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 773,
      "code" : "if raceenabled {\n\tracemapshadow(v, size)\n}",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 86 ],
      "in-vars" : [ 2, 3 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 772,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 4,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "v",
              "variable" : 2
            }
          }, {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "size",
              "variable" : 3
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 168,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 15,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "racemapshadow"
            }
          },
          "go-type" : 86,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 772,
      "code" : "racemapshadow(v, size)",
      "entry" : false,
      "use-vars" : [ 2, 3 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 775,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ ]
      },
      "assign-vars" : [ ],
      "line-end" : 775,
      "code" : "return",
      "entry" : false,
      "use-vars" : [ ]
    } ],
    "code" : "// sysAlloc allocates heap arena space for at least n bytes. The\n// returned pointer is always heapArenaBytes-aligned and backed by\n// h.arenas metadata. The returned size is always a multiple of\n// heapArenaBytes. sysAlloc returns nil on failure.\n// There is no corresponding free function.\n//\n// sysAlloc returns a memory region in the Prepared state. This region must\n// be transitioned to Ready before use.\n//\n// h must be locked.\nfunc (h *mheap) sysAlloc(n uintptr) (v unsafe.Pointer, size uintptr) {\n\tn = alignUp(n, heapArenaBytes)\n\n\tv = h.arena.alloc(n, heapArenaBytes, &memstats.heap_sys)\n\tif v != nil {\n\t\tsize = n\n\t\tgoto mapped\n\t}\n\n\tfor h.arenaHints != nil {\n\t\thint := h.arenaHints\n\t\tp := hint.addr\n\t\tif hint.down {\n\t\t\tp -= n\n\t\t}\n\t\tif p+n < p {\n\n\t\t\tv = nil\n\t\t} else if arenaIndex(p+n-1) >= 1<<arenaBits {\n\n\t\t\tv = nil\n\t\t} else {\n\t\t\tv = sysReserve(unsafe.Pointer(p), n)\n\t\t}\n\t\tif p == uintptr(v) {\n\n\t\t\tif !hint.down {\n\t\t\t\tp += n\n\t\t\t}\n\t\t\thint.addr = p\n\t\t\tsize = n\n\t\t\tbreak\n\t\t}\n\n\t\tif v != nil {\n\t\t\tsysFree(v, n, nil)\n\t\t}\n\t\th.arenaHints = hint.next\n\t\th.arenaHintAlloc.free(unsafe.Pointer(hint))\n\t}\n\n\tif size == 0 {\n\t\tif raceenabled {\n\n\t\t\tthrow(\"too many address space collisions for -race mode\")\n\t\t}\n\n\t\tv, size = sysReserveAligned(nil, n, heapArenaBytes)\n\t\tif v == nil {\n\t\t\treturn nil, 0\n\t\t}\n\n\t\thint := (*arenaHint)(h.arenaHintAlloc.alloc())\n\t\thint.addr, hint.down = uintptr(v), true\n\t\thint.next, mheap_.arenaHints = mheap_.arenaHints, hint\n\t\thint = (*arenaHint)(h.arenaHintAlloc.alloc())\n\t\thint.addr = uintptr(v) + size\n\t\thint.next, mheap_.arenaHints = mheap_.arenaHints, hint\n\t}\n\n\t{\n\t\tvar bad string\n\t\tp := uintptr(v)\n\t\tif p+size < p {\n\t\t\tbad = \"region exceeds uintptr range\"\n\t\t} else if arenaIndex(p) >= 1<<arenaBits {\n\t\t\tbad = \"base outside usable address space\"\n\t\t} else if arenaIndex(p+size-1) >= 1<<arenaBits {\n\t\t\tbad = \"end outside usable address space\"\n\t\t}\n\t\tif bad != \"\" {\n\n\t\t\tprint(\"runtime: memory allocated by OS [\", hex(p), \", \", hex(p+size), \") not in usable address space: \", bad, \"\\n\")\n\t\t\tthrow(\"memory reservation exceeds address space limit\")\n\t\t}\n\t}\n\n\tif uintptr(v)&(heapArenaBytes-1) != 0 {\n\t\tthrow(\"misrounded allocation in sysAlloc\")\n\t}\n\n\tsysMap(v, size, &memstats.heap_sys)\n\nmapped:\n\n\tfor ri := arenaIndex(uintptr(v)); ri <= arenaIndex(uintptr(v)+size-1); ri++ {\n\t\tl2 := h.arenas[ri.l1()]\n\t\tif l2 == nil {\n\n\t\t\tl2 = (*[1 << arenaL2Bits]*heapArena)(persistentalloc(unsafe.Sizeof(*l2), sys.PtrSize, nil))\n\t\t\tif l2 == nil {\n\t\t\t\tthrow(\"out of memory allocating heap arena map\")\n\t\t\t}\n\t\t\tatomic.StorepNoWB(unsafe.Pointer(&h.arenas[ri.l1()]), unsafe.Pointer(l2))\n\t\t}\n\n\t\tif l2[ri.l2()] != nil {\n\t\t\tthrow(\"arena already initialized\")\n\t\t}\n\t\tvar r *heapArena\n\t\tr = (*heapArena)(h.heapArenaAlloc.alloc(unsafe.Sizeof(*r), sys.PtrSize, &memstats.gc_sys))\n\t\tif r == nil {\n\t\t\tr = (*heapArena)(persistentalloc(unsafe.Sizeof(*r), sys.PtrSize, &memstats.gc_sys))\n\t\t\tif r == nil {\n\t\t\t\tthrow(\"out of memory allocating heap arena metadata\")\n\t\t\t}\n\t\t}\n\n\t\tif len(h.allArenas) == cap(h.allArenas) {\n\t\t\tsize := 2 * uintptr(cap(h.allArenas)) * sys.PtrSize\n\t\t\tif size == 0 {\n\t\t\t\tsize = physPageSize\n\t\t\t}\n\t\t\tnewArray := (*notInHeap)(persistentalloc(size, sys.PtrSize, &memstats.gc_sys))\n\t\t\tif newArray == nil {\n\t\t\t\tthrow(\"out of memory allocating allArenas\")\n\t\t\t}\n\t\t\toldSlice := h.allArenas\n\t\t\t*(*notInHeapSlice)(unsafe.Pointer(&h.allArenas)) = notInHeapSlice{newArray, len(h.allArenas), int(size / sys.PtrSize)}\n\t\t\tcopy(h.allArenas, oldSlice)\n\n\t\t}\n\t\th.allArenas = h.allArenas[:len(h.allArenas)+1]\n\t\th.allArenas[len(h.allArenas)-1] = ri\n\n\t\tatomic.StorepNoWB(unsafe.Pointer(&l2[ri.l2()]), unsafe.Pointer(r))\n\t}\n\n\tif raceenabled {\n\t\tracemapshadow(v, size)\n\t}\n\n\treturn\n}",
    "defines" : [ 0 ],
    "functions" : [ {
      "name" : "sysAlloc",
      "package" : 0,
      "type" : 0,
      "exported" : false
    }, {
      "name" : "alignUp",
      "package" : 0,
      "type" : 115,
      "exported" : false
    }, {
      "name" : "alloc",
      "package" : 0,
      "type" : 121,
      "exported" : false
    }, {
      "name" : "arenaIndex",
      "package" : 0,
      "type" : 125,
      "exported" : false
    }, {
      "name" : "sysReserve",
      "package" : 0,
      "type" : 128,
      "exported" : false
    }, {
      "name" : "sysFree",
      "package" : 0,
      "type" : 130,
      "exported" : false
    }, {
      "name" : "free",
      "package" : 0,
      "type" : 134,
      "exported" : false
    }, {
      "name" : "throw",
      "package" : 0,
      "type" : 136,
      "exported" : false
    }, {
      "name" : "sysReserveAligned",
      "package" : 0,
      "type" : 140,
      "exported" : false
    }, {
      "name" : "alloc",
      "package" : 0,
      "type" : 143,
      "exported" : false
    }, {
      "name" : "sysMap",
      "package" : 0,
      "type" : 130,
      "exported" : false
    }, {
      "name" : "l1",
      "package" : 0,
      "type" : 149,
      "exported" : false
    }, {
      "name" : "persistentalloc",
      "package" : 0,
      "type" : 118,
      "exported" : false
    }, {
      "name" : "StorepNoWB",
      "package" : 2,
      "type" : 151,
      "exported" : true
    }, {
      "name" : "l2",
      "package" : 0,
      "type" : 149,
      "exported" : false
    }, {
      "name" : "racemapshadow",
      "package" : 0,
      "type" : 168,
      "exported" : false
    } ],
    "line-end" : 776,
    "line-start" : 617,
    "names" : [ "sysAlloc" ],
    "package" : 0,
    "packages" : [ {
      "name" : "runtime",
      "path" : "runtime"
    }, {
      "name" : "unsafe",
      "path" : "unsafe"
    }, {
      "name" : "atomic",
      "path" : "runtime/internal/atomic"
    } ],
    "params" : [ 1 ],
    "receivers" : [ 0 ],
    "results" : [ 2, 3 ],
    "type" : "function",
    "types" : [ {
      "name" : "(*runtime.mheap) func(n uintptr) (v unsafe.Pointer, size uintptr)",
      "params" : 1,
      "recv" : 0,
      "results" : 3,
      "type" : "Signature",
      "underlying" : 0,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "n",
        "type" : 2
      } ],
      "name" : "(n uintptr)",
      "type" : "Tuple",
      "underlying" : 1
    }, {
      "name" : "uintptr",
      "type" : "Basic",
      "underlying" : 2
    }, {
      "fields" : [ {
        "name" : "v",
        "type" : 4
      }, {
        "name" : "size",
        "type" : 2
      } ],
      "name" : "(v unsafe.Pointer, size uintptr)",
      "type" : "Tuple",
      "underlying" : 3
    }, {
      "local-name" : "Pointer",
      "name" : "unsafe.Pointer",
      "package" : 1,
      "type" : "Basic",
      "underlying" : 4
    }, {
      "elem" : 6,
      "name" : "*runtime.mheap",
      "type" : "Pointer",
      "underlying" : 5
    }, {
      "local-name" : "mheap",
      "name" : "runtime.mheap",
      "package" : 0,
      "type" : "Named",
      "underlying" : 7
    }, {
      "fields" : [ {
        "name" : "lock",
        "type" : 8
      }, {
        "name" : "pages",
        "type" : 10
      }, {
        "name" : "sweepgen",
        "type" : 34
      }, {
        "name" : "sweepdone",
        "type" : 34
      }, {
        "name" : "sweepers",
        "type" : 34
      }, {
        "name" : "allspans",
        "type" : 35
      }, {
        "name" : "sweepSpans",
        "type" : 55
      }, {
        "name" : "pagesInUse",
        "type" : 15
      }, {
        "name" : "pagesSwept",
        "type" : 15
      }, {
        "name" : "pagesSweptBasis",
        "type" : 15
      }, {
        "name" : "sweepHeapLiveBasis",
        "type" : 15
      }, {
        "name" : "sweepPagesPerByte",
        "type" : 58
      }, {
        "name" : "scavengeGoal",
        "type" : 15
      }, {
        "name" : "reclaimIndex",
        "type" : 15
      }, {
        "name" : "reclaimCredit",
        "type" : 2
      }, {
        "name" : "largealloc",
        "type" : 15
      }, {
        "name" : "nlargealloc",
        "type" : 15
      }, {
        "name" : "largefree",
        "type" : 15
      }, {
        "name" : "nlargefree",
        "type" : 15
      }, {
        "name" : "nsmallfree",
        "type" : 59
      }, {
        "name" : "arenas",
        "type" : 60
      }, {
        "name" : "heapArenaAlloc",
        "type" : 69
      }, {
        "name" : "arenaHints",
        "type" : 71
      }, {
        "name" : "arena",
        "type" : 69
      }, {
        "name" : "allArenas",
        "type" : 74
      }, {
        "name" : "sweepArenas",
        "type" : 74
      }, {
        "name" : "curArena",
        "type" : 76
      }, {
        "name" : "_",
        "type" : 34
      }, {
        "name" : "central",
        "type" : 77
      }, {
        "name" : "spanalloc",
        "type" : 82
      }, {
        "name" : "cachealloc",
        "type" : 82
      }, {
        "name" : "specialfinalizeralloc",
        "type" : 82
      }, {
        "name" : "specialprofilealloc",
        "type" : 82
      }, {
        "name" : "speciallock",
        "type" : 8
      }, {
        "name" : "arenaHintAlloc",
        "type" : 82
      }, {
        "name" : "unused",
        "type" : 90
      } ],
      "name" : "struct{lock runtime.mutex; pages runtime.pageAlloc; sweepgen uint32; sweepdone uint32; sweepers uint32; allspans []*runtime.mspan; sweepSpans [2]runtime.gcSweepBuf; pagesInUse uint64; pagesSwept uint64; pagesSweptBasis uint64; sweepHeapLiveBasis uint64; sweepPagesPerByte float64; scavengeGoal uint64; reclaimIndex uint64; reclaimCredit uintptr; largealloc uint64; nlargealloc uint64; largefree uint64; nlargefree uint64; nsmallfree [67]uint64; arenas [1]*[4194304]*runtime.heapArena; heapArenaAlloc runtime.linearAlloc; arenaHints *runtime.arenaHint; arena runtime.linearAlloc; allArenas []runtime.arenaIdx; sweepArenas []runtime.arenaIdx; curArena struct{base uintptr; end uintptr}; _ uint32; central [134]struct{mcentral runtime.mcentral; pad [8]byte}; spanalloc runtime.fixalloc; cachealloc runtime.fixalloc; specialfinalizeralloc runtime.fixalloc; specialprofilealloc runtime.fixalloc; speciallock runtime.mutex; arenaHintAlloc runtime.fixalloc; unused *runtime.specialfinalizer}",
      "type" : "Struct",
      "underlying" : 7
    }, {
      "local-name" : "mutex",
      "name" : "runtime.mutex",
      "package" : 0,
      "type" : "Named",
      "underlying" : 9
    }, {
      "fields" : [ {
        "name" : "key",
        "type" : 2
      } ],
      "name" : "struct{key uintptr}",
      "type" : "Struct",
      "underlying" : 9
    }, {
      "local-name" : "pageAlloc",
      "name" : "runtime.pageAlloc",
      "package" : 0,
      "type" : "Named",
      "underlying" : 11
    }, {
      "fields" : [ {
        "name" : "summary",
        "type" : 12
      }, {
        "name" : "chunks",
        "type" : 16
      }, {
        "name" : "searchAddr",
        "type" : 2
      }, {
        "name" : "scavAddr",
        "type" : 2
      }, {
        "name" : "scavReleased",
        "type" : 2
      }, {
        "name" : "start",
        "type" : 24
      }, {
        "name" : "end",
        "type" : 24
      }, {
        "name" : "inUse",
        "type" : 26
      }, {
        "name" : "mheapLock",
        "type" : 32
      }, {
        "name" : "sysStat",
        "type" : 31
      }, {
        "name" : "test",
        "type" : 33
      } ],
      "name" : "struct{summary [5][]runtime.pallocSum; chunks [8192]*[8192]runtime.pallocData; searchAddr uintptr; scavAddr uintptr; scavReleased uintptr; start runtime.chunkIdx; end runtime.chunkIdx; inUse runtime.addrRanges; mheapLock *runtime.mutex; sysStat *uint64; test bool}",
      "type" : "Struct",
      "underlying" : 11
    }, {
      "elem" : 13,
      "name" : "[5][]runtime.pallocSum",
      "type" : "Array",
      "underlying" : 12
    }, {
      "elem" : 14,
      "name" : "[]runtime.pallocSum",
      "type" : "Slice",
      "underlying" : 13
    }, {
      "local-name" : "pallocSum",
      "name" : "runtime.pallocSum",
      "package" : 0,
      "type" : "Named",
      "underlying" : 15
    }, {
      "name" : "uint64",
      "type" : "Basic",
      "underlying" : 15
    }, {
      "elem" : 17,
      "name" : "[8192]*[8192]runtime.pallocData",
      "type" : "Array",
      "underlying" : 16
    }, {
      "elem" : 18,
      "name" : "*[8192]runtime.pallocData",
      "type" : "Pointer",
      "underlying" : 17
    }, {
      "elem" : 19,
      "name" : "[8192]runtime.pallocData",
      "type" : "Array",
      "underlying" : 18
    }, {
      "local-name" : "pallocData",
      "name" : "runtime.pallocData",
      "package" : 0,
      "type" : "Named",
      "underlying" : 20
    }, {
      "fields" : [ {
        "name" : "pallocBits",
        "type" : 21
      }, {
        "name" : "scavenged",
        "type" : 23
      } ],
      "name" : "struct{runtime.pallocBits; scavenged runtime.pageBits}",
      "type" : "Struct",
      "underlying" : 20
    }, {
      "local-name" : "pallocBits",
      "name" : "runtime.pallocBits",
      "package" : 0,
      "type" : "Named",
      "underlying" : 22
    }, {
      "elem" : 15,
      "name" : "[8]uint64",
      "type" : "Array",
      "underlying" : 22
    }, {
      "local-name" : "pageBits",
      "name" : "runtime.pageBits",
      "package" : 0,
      "type" : "Named",
      "underlying" : 22
    }, {
      "local-name" : "chunkIdx",
      "name" : "runtime.chunkIdx",
      "package" : 0,
      "type" : "Named",
      "underlying" : 25
    }, {
      "name" : "uint",
      "type" : "Basic",
      "underlying" : 25
    }, {
      "local-name" : "addrRanges",
      "name" : "runtime.addrRanges",
      "package" : 0,
      "type" : "Named",
      "underlying" : 27
    }, {
      "fields" : [ {
        "name" : "ranges",
        "type" : 28
      }, {
        "name" : "sysStat",
        "type" : 31
      } ],
      "name" : "struct{ranges []runtime.addrRange; sysStat *uint64}",
      "type" : "Struct",
      "underlying" : 27
    }, {
      "elem" : 29,
      "name" : "[]runtime.addrRange",
      "type" : "Slice",
      "underlying" : 28
    }, {
      "local-name" : "addrRange",
      "name" : "runtime.addrRange",
      "package" : 0,
      "type" : "Named",
      "underlying" : 30
    }, {
      "fields" : [ {
        "name" : "base",
        "type" : 2
      }, {
        "name" : "limit",
        "type" : 2
      } ],
      "name" : "struct{base uintptr; limit uintptr}",
      "type" : "Struct",
      "underlying" : 30
    }, {
      "elem" : 15,
      "name" : "*uint64",
      "type" : "Pointer",
      "underlying" : 31
    }, {
      "elem" : 8,
      "name" : "*runtime.mutex",
      "type" : "Pointer",
      "underlying" : 32
    }, {
      "name" : "bool",
      "type" : "Basic",
      "underlying" : 33
    }, {
      "name" : "uint32",
      "type" : "Basic",
      "underlying" : 34
    }, {
      "elem" : 36,
      "name" : "[]*runtime.mspan",
      "type" : "Slice",
      "underlying" : 35
    }, {
      "elem" : 37,
      "name" : "*runtime.mspan",
      "type" : "Pointer",
      "underlying" : 36
    }, {
      "local-name" : "mspan",
      "name" : "runtime.mspan",
      "package" : 0,
      "type" : "Named",
      "underlying" : 38
    }, {
      "fields" : [ {
        "name" : "next",
        "type" : 36
      }, {
        "name" : "prev",
        "type" : 36
      }, {
        "name" : "list",
        "type" : 39
      }, {
        "name" : "startAddr",
        "type" : 2
      }, {
        "name" : "npages",
        "type" : 2
      }, {
        "name" : "manualFreeList",
        "type" : 42
      }, {
        "name" : "freeindex",
        "type" : 2
      }, {
        "name" : "nelems",
        "type" : 2
      }, {
        "name" : "allocCache",
        "type" : 15
      }, {
        "name" : "allocBits",
        "type" : 43
      }, {
        "name" : "gcmarkBits",
        "type" : 43
      }, {
        "name" : "sweepgen",
        "type" : 34
      }, {
        "name" : "divMul",
        "type" : 46
      }, {
        "name" : "baseMask",
        "type" : 46
      }, {
        "name" : "allocCount",
        "type" : 46
      }, {
        "name" : "spanclass",
        "type" : 47
      }, {
        "name" : "state",
        "type" : 48
      }, {
        "name" : "needzero",
        "type" : 45
      }, {
        "name" : "divShift",
        "type" : 45
      }, {
        "name" : "divShift2",
        "type" : 45
      }, {
        "name" : "elemsize",
        "type" : 2
      }, {
        "name" : "limit",
        "type" : 2
      }, {
        "name" : "speciallock",
        "type" : 8
      }, {
        "name" : "specials",
        "type" : 51
      } ],
      "name" : "struct{next *runtime.mspan; prev *runtime.mspan; list *runtime.mSpanList; startAddr uintptr; npages uintptr; manualFreeList runtime.gclinkptr; freeindex uintptr; nelems uintptr; allocCache uint64; allocBits *runtime.gcBits; gcmarkBits *runtime.gcBits; sweepgen uint32; divMul uint16; baseMask uint16; allocCount uint16; spanclass runtime.spanClass; state runtime.mSpanStateBox; needzero uint8; divShift uint8; divShift2 uint8; elemsize uintptr; limit uintptr; speciallock runtime.mutex; specials *runtime.special}",
      "type" : "Struct",
      "underlying" : 38
    }, {
      "elem" : 40,
      "name" : "*runtime.mSpanList",
      "type" : "Pointer",
      "underlying" : 39
    }, {
      "local-name" : "mSpanList",
      "name" : "runtime.mSpanList",
      "package" : 0,
      "type" : "Named",
      "underlying" : 41
    }, {
      "fields" : [ {
        "name" : "first",
        "type" : 36
      }, {
        "name" : "last",
        "type" : 36
      } ],
      "name" : "struct{first *runtime.mspan; last *runtime.mspan}",
      "type" : "Struct",
      "underlying" : 41
    }, {
      "local-name" : "gclinkptr",
      "name" : "runtime.gclinkptr",
      "package" : 0,
      "type" : "Named",
      "underlying" : 2
    }, {
      "elem" : 44,
      "name" : "*runtime.gcBits",
      "type" : "Pointer",
      "underlying" : 43
    }, {
      "local-name" : "gcBits",
      "name" : "runtime.gcBits",
      "package" : 0,
      "type" : "Named",
      "underlying" : 45
    }, {
      "name" : "uint8",
      "type" : "Basic",
      "underlying" : 45
    }, {
      "name" : "uint16",
      "type" : "Basic",
      "underlying" : 46
    }, {
      "local-name" : "spanClass",
      "name" : "runtime.spanClass",
      "package" : 0,
      "type" : "Named",
      "underlying" : 45
    }, {
      "local-name" : "mSpanStateBox",
      "name" : "runtime.mSpanStateBox",
      "package" : 0,
      "type" : "Named",
      "underlying" : 49
    }, {
      "fields" : [ {
        "name" : "s",
        "type" : 50
      } ],
      "name" : "struct{s runtime.mSpanState}",
      "type" : "Struct",
      "underlying" : 49
    }, {
      "local-name" : "mSpanState",
      "name" : "runtime.mSpanState",
      "package" : 0,
      "type" : "Named",
      "underlying" : 45
    }, {
      "elem" : 52,
      "name" : "*runtime.special",
      "type" : "Pointer",
      "underlying" : 51
    }, {
      "local-name" : "special",
      "name" : "runtime.special",
      "package" : 0,
      "type" : "Named",
      "underlying" : 53
    }, {
      "fields" : [ {
        "name" : "next",
        "type" : 51
      }, {
        "name" : "offset",
        "type" : 46
      }, {
        "name" : "kind",
        "type" : 54
      } ],
      "name" : "struct{next *runtime.special; offset uint16; kind byte}",
      "type" : "Struct",
      "underlying" : 53
    }, {
      "name" : "byte",
      "type" : "Basic",
      "underlying" : 54
    }, {
      "elem" : 56,
      "name" : "[2]runtime.gcSweepBuf",
      "type" : "Array",
      "underlying" : 55
    }, {
      "local-name" : "gcSweepBuf",
      "name" : "runtime.gcSweepBuf",
      "package" : 0,
      "type" : "Named",
      "underlying" : 57
    }, {
      "fields" : [ {
        "name" : "spineLock",
        "type" : 8
      }, {
        "name" : "spine",
        "type" : 4
      }, {
        "name" : "spineLen",
        "type" : 2
      }, {
        "name" : "spineCap",
        "type" : 2
      }, {
        "name" : "index",
        "type" : 34
      } ],
      "name" : "struct{spineLock runtime.mutex; spine unsafe.Pointer; spineLen uintptr; spineCap uintptr; index uint32}",
      "type" : "Struct",
      "underlying" : 57
    }, {
      "name" : "float64",
      "type" : "Basic",
      "underlying" : 58
    }, {
      "elem" : 15,
      "name" : "[67]uint64",
      "type" : "Array",
      "underlying" : 59
    }, {
      "elem" : 61,
      "name" : "[1]*[4194304]*runtime.heapArena",
      "type" : "Array",
      "underlying" : 60
    }, {
      "elem" : 62,
      "name" : "*[4194304]*runtime.heapArena",
      "type" : "Pointer",
      "underlying" : 61
    }, {
      "elem" : 63,
      "name" : "[4194304]*runtime.heapArena",
      "type" : "Array",
      "underlying" : 62
    }, {
      "elem" : 64,
      "name" : "*runtime.heapArena",
      "type" : "Pointer",
      "underlying" : 63
    }, {
      "local-name" : "heapArena",
      "name" : "runtime.heapArena",
      "package" : 0,
      "type" : "Named",
      "underlying" : 65
    }, {
      "fields" : [ {
        "name" : "bitmap",
        "type" : 66
      }, {
        "name" : "spans",
        "type" : 67
      }, {
        "name" : "pageInUse",
        "type" : 68
      }, {
        "name" : "pageMarks",
        "type" : 68
      }, {
        "name" : "zeroedBase",
        "type" : 2
      } ],
      "name" : "struct{bitmap [2097152]byte; spans [8192]*runtime.mspan; pageInUse [1024]uint8; pageMarks [1024]uint8; zeroedBase uintptr}",
      "type" : "Struct",
      "underlying" : 65
    }, {
      "elem" : 54,
      "name" : "[2097152]byte",
      "type" : "Array",
      "underlying" : 66
    }, {
      "elem" : 36,
      "name" : "[8192]*runtime.mspan",
      "type" : "Array",
      "underlying" : 67
    }, {
      "elem" : 45,
      "name" : "[1024]uint8",
      "type" : "Array",
      "underlying" : 68
    }, {
      "local-name" : "linearAlloc",
      "name" : "runtime.linearAlloc",
      "package" : 0,
      "type" : "Named",
      "underlying" : 70
    }, {
      "fields" : [ {
        "name" : "next",
        "type" : 2
      }, {
        "name" : "mapped",
        "type" : 2
      }, {
        "name" : "end",
        "type" : 2
      } ],
      "name" : "struct{next uintptr; mapped uintptr; end uintptr}",
      "type" : "Struct",
      "underlying" : 70
    }, {
      "elem" : 72,
      "name" : "*runtime.arenaHint",
      "type" : "Pointer",
      "underlying" : 71
    }, {
      "local-name" : "arenaHint",
      "name" : "runtime.arenaHint",
      "package" : 0,
      "type" : "Named",
      "underlying" : 73
    }, {
      "fields" : [ {
        "name" : "addr",
        "type" : 2
      }, {
        "name" : "down",
        "type" : 33
      }, {
        "name" : "next",
        "type" : 71
      } ],
      "name" : "struct{addr uintptr; down bool; next *runtime.arenaHint}",
      "type" : "Struct",
      "underlying" : 73
    }, {
      "elem" : 75,
      "name" : "[]runtime.arenaIdx",
      "type" : "Slice",
      "underlying" : 74
    }, {
      "local-name" : "arenaIdx",
      "name" : "runtime.arenaIdx",
      "package" : 0,
      "type" : "Named",
      "underlying" : 25
    }, {
      "fields" : [ {
        "name" : "base",
        "type" : 2
      }, {
        "name" : "end",
        "type" : 2
      } ],
      "name" : "struct{base uintptr; end uintptr}",
      "type" : "Struct",
      "underlying" : 76
    }, {
      "elem" : 78,
      "name" : "[134]struct{mcentral runtime.mcentral; pad [8]byte}",
      "type" : "Array",
      "underlying" : 77
    }, {
      "fields" : [ {
        "name" : "mcentral",
        "type" : 79
      }, {
        "name" : "pad",
        "type" : 81
      } ],
      "name" : "struct{mcentral runtime.mcentral; pad [8]byte}",
      "type" : "Struct",
      "underlying" : 78
    }, {
      "local-name" : "mcentral",
      "name" : "runtime.mcentral",
      "package" : 0,
      "type" : "Named",
      "underlying" : 80
    }, {
      "fields" : [ {
        "name" : "lock",
        "type" : 8
      }, {
        "name" : "spanclass",
        "type" : 47
      }, {
        "name" : "nonempty",
        "type" : 40
      }, {
        "name" : "empty",
        "type" : 40
      }, {
        "name" : "nmalloc",
        "type" : 15
      } ],
      "name" : "struct{lock runtime.mutex; spanclass runtime.spanClass; nonempty runtime.mSpanList; empty runtime.mSpanList; nmalloc uint64}",
      "type" : "Struct",
      "underlying" : 80
    }, {
      "elem" : 54,
      "name" : "[8]byte",
      "type" : "Array",
      "underlying" : 81
    }, {
      "local-name" : "fixalloc",
      "name" : "runtime.fixalloc",
      "package" : 0,
      "type" : "Named",
      "underlying" : 83
    }, {
      "fields" : [ {
        "name" : "size",
        "type" : 2
      }, {
        "name" : "first",
        "type" : 84
      }, {
        "name" : "arg",
        "type" : 4
      }, {
        "name" : "list",
        "type" : 87
      }, {
        "name" : "chunk",
        "type" : 2
      }, {
        "name" : "nchunk",
        "type" : 34
      }, {
        "name" : "inuse",
        "type" : 2
      }, {
        "name" : "stat",
        "type" : 31
      }, {
        "name" : "zero",
        "type" : 33
      } ],
      "name" : "struct{size uintptr; first func(arg unsafe.Pointer, p unsafe.Pointer); arg unsafe.Pointer; list *runtime.mlink; chunk uintptr; nchunk uint32; inuse uintptr; stat *uint64; zero bool}",
      "type" : "Struct",
      "underlying" : 83
    }, {
      "name" : "func(arg unsafe.Pointer, p unsafe.Pointer)",
      "params" : 85,
      "recv" : -1,
      "results" : 86,
      "type" : "Signature",
      "underlying" : 84,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "arg",
        "type" : 4
      }, {
        "name" : "p",
        "type" : 4
      } ],
      "name" : "(arg unsafe.Pointer, p unsafe.Pointer)",
      "type" : "Tuple",
      "underlying" : 85
    }, {
      "fields" : [ ],
      "name" : "()",
      "type" : "Tuple",
      "underlying" : 86
    }, {
      "elem" : 88,
      "name" : "*runtime.mlink",
      "type" : "Pointer",
      "underlying" : 87
    }, {
      "local-name" : "mlink",
      "name" : "runtime.mlink",
      "package" : 0,
      "type" : "Named",
      "underlying" : 89
    }, {
      "fields" : [ {
        "name" : "next",
        "type" : 87
      } ],
      "name" : "struct{next *runtime.mlink}",
      "type" : "Struct",
      "underlying" : 89
    }, {
      "elem" : 91,
      "name" : "*runtime.specialfinalizer",
      "type" : "Pointer",
      "underlying" : 90
    }, {
      "local-name" : "specialfinalizer",
      "name" : "runtime.specialfinalizer",
      "package" : 0,
      "type" : "Named",
      "underlying" : 92
    }, {
      "fields" : [ {
        "name" : "special",
        "type" : 52
      }, {
        "name" : "fn",
        "type" : 93
      }, {
        "name" : "nret",
        "type" : 2
      }, {
        "name" : "fint",
        "type" : 96
      }, {
        "name" : "ot",
        "type" : 107
      } ],
      "name" : "struct{special runtime.special; fn *runtime.funcval; nret uintptr; fint *runtime._type; ot *runtime.ptrtype}",
      "type" : "Struct",
      "underlying" : 92
    }, {
      "elem" : 94,
      "name" : "*runtime.funcval",
      "type" : "Pointer",
      "underlying" : 93
    }, {
      "local-name" : "funcval",
      "name" : "runtime.funcval",
      "package" : 0,
      "type" : "Named",
      "underlying" : 95
    }, {
      "fields" : [ {
        "name" : "fn",
        "type" : 2
      } ],
      "name" : "struct{fn uintptr}",
      "type" : "Struct",
      "underlying" : 95
    }, {
      "elem" : 97,
      "name" : "*runtime._type",
      "type" : "Pointer",
      "underlying" : 96
    }, {
      "local-name" : "_type",
      "name" : "runtime._type",
      "package" : 0,
      "type" : "Named",
      "underlying" : 98
    }, {
      "fields" : [ {
        "name" : "size",
        "type" : 2
      }, {
        "name" : "ptrdata",
        "type" : 2
      }, {
        "name" : "hash",
        "type" : 34
      }, {
        "name" : "tflag",
        "type" : 99
      }, {
        "name" : "align",
        "type" : 45
      }, {
        "name" : "fieldAlign",
        "type" : 45
      }, {
        "name" : "kind",
        "type" : 45
      }, {
        "name" : "equal",
        "type" : 100
      }, {
        "name" : "gcdata",
        "type" : 103
      }, {
        "name" : "str",
        "type" : 104
      }, {
        "name" : "ptrToThis",
        "type" : 106
      } ],
      "name" : "struct{size uintptr; ptrdata uintptr; hash uint32; tflag runtime.tflag; align uint8; fieldAlign uint8; kind uint8; equal func(unsafe.Pointer, unsafe.Pointer) bool; gcdata *byte; str runtime.nameOff; ptrToThis runtime.typeOff}",
      "type" : "Struct",
      "underlying" : 98
    }, {
      "local-name" : "tflag",
      "name" : "runtime.tflag",
      "package" : 0,
      "type" : "Named",
      "underlying" : 45
    }, {
      "name" : "func(unsafe.Pointer, unsafe.Pointer) bool",
      "params" : 101,
      "recv" : -1,
      "results" : 102,
      "type" : "Signature",
      "underlying" : 100,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 4
      }, {
        "name" : "",
        "type" : 4
      } ],
      "name" : "(unsafe.Pointer, unsafe.Pointer)",
      "type" : "Tuple",
      "underlying" : 101
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 33
      } ],
      "name" : "(bool)",
      "type" : "Tuple",
      "underlying" : 102
    }, {
      "elem" : 54,
      "name" : "*byte",
      "type" : "Pointer",
      "underlying" : 103
    }, {
      "local-name" : "nameOff",
      "name" : "runtime.nameOff",
      "package" : 0,
      "type" : "Named",
      "underlying" : 105
    }, {
      "name" : "int32",
      "type" : "Basic",
      "underlying" : 105
    }, {
      "local-name" : "typeOff",
      "name" : "runtime.typeOff",
      "package" : 0,
      "type" : "Named",
      "underlying" : 105
    }, {
      "elem" : 108,
      "name" : "*runtime.ptrtype",
      "type" : "Pointer",
      "underlying" : 107
    }, {
      "local-name" : "ptrtype",
      "name" : "runtime.ptrtype",
      "package" : 0,
      "type" : "Named",
      "underlying" : 109
    }, {
      "fields" : [ {
        "name" : "typ",
        "type" : 97
      }, {
        "name" : "elem",
        "type" : 96
      } ],
      "name" : "struct{typ runtime._type; elem *runtime._type}",
      "type" : "Struct",
      "underlying" : 109
    }, {
      "local-name" : "mstats",
      "name" : "runtime.mstats",
      "package" : 0,
      "type" : "Named",
      "underlying" : 111
    }, {
      "fields" : [ {
        "name" : "alloc",
        "type" : 15
      }, {
        "name" : "total_alloc",
        "type" : 15
      }, {
        "name" : "sys",
        "type" : 15
      }, {
        "name" : "nlookup",
        "type" : 15
      }, {
        "name" : "nmalloc",
        "type" : 15
      }, {
        "name" : "nfree",
        "type" : 15
      }, {
        "name" : "heap_alloc",
        "type" : 15
      }, {
        "name" : "heap_sys",
        "type" : 15
      }, {
        "name" : "heap_idle",
        "type" : 15
      }, {
        "name" : "heap_inuse",
        "type" : 15
      }, {
        "name" : "heap_released",
        "type" : 15
      }, {
        "name" : "heap_objects",
        "type" : 15
      }, {
        "name" : "stacks_inuse",
        "type" : 15
      }, {
        "name" : "stacks_sys",
        "type" : 15
      }, {
        "name" : "mspan_inuse",
        "type" : 15
      }, {
        "name" : "mspan_sys",
        "type" : 15
      }, {
        "name" : "mcache_inuse",
        "type" : 15
      }, {
        "name" : "mcache_sys",
        "type" : 15
      }, {
        "name" : "buckhash_sys",
        "type" : 15
      }, {
        "name" : "gc_sys",
        "type" : 15
      }, {
        "name" : "other_sys",
        "type" : 15
      }, {
        "name" : "next_gc",
        "type" : 15
      }, {
        "name" : "last_gc_unix",
        "type" : 15
      }, {
        "name" : "pause_total_ns",
        "type" : 15
      }, {
        "name" : "pause_ns",
        "type" : 112
      }, {
        "name" : "pause_end",
        "type" : 112
      }, {
        "name" : "numgc",
        "type" : 34
      }, {
        "name" : "numforcedgc",
        "type" : 34
      }, {
        "name" : "gc_cpu_fraction",
        "type" : 58
      }, {
        "name" : "enablegc",
        "type" : 33
      }, {
        "name" : "debuggc",
        "type" : 33
      }, {
        "name" : "by_size",
        "type" : 113
      }, {
        "name" : "last_gc_nanotime",
        "type" : 15
      }, {
        "name" : "tinyallocs",
        "type" : 15
      }, {
        "name" : "last_next_gc",
        "type" : 15
      }, {
        "name" : "last_heap_inuse",
        "type" : 15
      }, {
        "name" : "triggerRatio",
        "type" : 58
      }, {
        "name" : "gc_trigger",
        "type" : 15
      }, {
        "name" : "heap_live",
        "type" : 15
      }, {
        "name" : "heap_scan",
        "type" : 15
      }, {
        "name" : "heap_marked",
        "type" : 15
      } ],
      "name" : "struct{alloc uint64; total_alloc uint64; sys uint64; nlookup uint64; nmalloc uint64; nfree uint64; heap_alloc uint64; heap_sys uint64; heap_idle uint64; heap_inuse uint64; heap_released uint64; heap_objects uint64; stacks_inuse uint64; stacks_sys uint64; mspan_inuse uint64; mspan_sys uint64; mcache_inuse uint64; mcache_sys uint64; buckhash_sys uint64; gc_sys uint64; other_sys uint64; next_gc uint64; last_gc_unix uint64; pause_total_ns uint64; pause_ns [256]uint64; pause_end [256]uint64; numgc uint32; numforcedgc uint32; gc_cpu_fraction float64; enablegc bool; debuggc bool; by_size [67]struct{size uint32; nmalloc uint64; nfree uint64}; last_gc_nanotime uint64; tinyallocs uint64; last_next_gc uint64; last_heap_inuse uint64; triggerRatio float64; gc_trigger uint64; heap_live uint64; heap_scan uint64; heap_marked uint64}",
      "type" : "Struct",
      "underlying" : 111
    }, {
      "elem" : 15,
      "name" : "[256]uint64",
      "type" : "Array",
      "underlying" : 112
    }, {
      "elem" : 114,
      "name" : "[67]struct{size uint32; nmalloc uint64; nfree uint64}",
      "type" : "Array",
      "underlying" : 113
    }, {
      "fields" : [ {
        "name" : "size",
        "type" : 34
      }, {
        "name" : "nmalloc",
        "type" : 15
      }, {
        "name" : "nfree",
        "type" : 15
      } ],
      "name" : "struct{size uint32; nmalloc uint64; nfree uint64}",
      "type" : "Struct",
      "underlying" : 114
    }, {
      "name" : "func(n uintptr, a uintptr) uintptr",
      "params" : 116,
      "recv" : -1,
      "results" : 117,
      "type" : "Signature",
      "underlying" : 115,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "n",
        "type" : 2
      }, {
        "name" : "a",
        "type" : 2
      } ],
      "name" : "(n uintptr, a uintptr)",
      "type" : "Tuple",
      "underlying" : 116
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 2
      } ],
      "name" : "(uintptr)",
      "type" : "Tuple",
      "underlying" : 117
    }, {
      "name" : "func(size uintptr, align uintptr, sysStat *uint64) unsafe.Pointer",
      "params" : 119,
      "recv" : -1,
      "results" : 120,
      "type" : "Signature",
      "underlying" : 118,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "size",
        "type" : 2
      }, {
        "name" : "align",
        "type" : 2
      }, {
        "name" : "sysStat",
        "type" : 31
      } ],
      "name" : "(size uintptr, align uintptr, sysStat *uint64)",
      "type" : "Tuple",
      "underlying" : 119
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 4
      } ],
      "name" : "(unsafe.Pointer)",
      "type" : "Tuple",
      "underlying" : 120
    }, {
      "name" : "(*runtime.linearAlloc) func(size uintptr, align uintptr, sysStat *uint64) unsafe.Pointer",
      "params" : 119,
      "recv" : 8,
      "results" : 120,
      "type" : "Signature",
      "underlying" : 121,
      "variadic" : false
    }, {
      "elem" : 69,
      "name" : "*runtime.linearAlloc",
      "type" : "Pointer",
      "underlying" : 122
    }, {
      "name" : "untyped bool",
      "type" : "Basic",
      "underlying" : 123
    }, {
      "name" : "untyped nil",
      "type" : "Basic",
      "underlying" : 124
    }, {
      "name" : "func(p uintptr) runtime.arenaIdx",
      "params" : 126,
      "recv" : -1,
      "results" : 127,
      "type" : "Signature",
      "underlying" : 125,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "p",
        "type" : 2
      } ],
      "name" : "(p uintptr)",
      "type" : "Tuple",
      "underlying" : 126
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 75
      } ],
      "name" : "(runtime.arenaIdx)",
      "type" : "Tuple",
      "underlying" : 127
    }, {
      "name" : "func(v unsafe.Pointer, n uintptr) unsafe.Pointer",
      "params" : 129,
      "recv" : -1,
      "results" : 120,
      "type" : "Signature",
      "underlying" : 128,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "v",
        "type" : 4
      }, {
        "name" : "n",
        "type" : 2
      } ],
      "name" : "(v unsafe.Pointer, n uintptr)",
      "type" : "Tuple",
      "underlying" : 129
    }, {
      "name" : "func(v unsafe.Pointer, n uintptr, sysStat *uint64)",
      "params" : 131,
      "recv" : -1,
      "results" : 86,
      "type" : "Signature",
      "underlying" : 130,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "v",
        "type" : 4
      }, {
        "name" : "n",
        "type" : 2
      }, {
        "name" : "sysStat",
        "type" : 31
      } ],
      "name" : "(v unsafe.Pointer, n uintptr, sysStat *uint64)",
      "type" : "Tuple",
      "underlying" : 131
    }, {
      "name" : "func(p unsafe.Pointer)",
      "params" : 133,
      "recv" : -1,
      "results" : 86,
      "type" : "Signature",
      "underlying" : 132,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "p",
        "type" : 4
      } ],
      "name" : "(p unsafe.Pointer)",
      "type" : "Tuple",
      "underlying" : 133
    }, {
      "name" : "(*runtime.fixalloc) func(p unsafe.Pointer)",
      "params" : 133,
      "recv" : 17,
      "results" : 86,
      "type" : "Signature",
      "underlying" : 134,
      "variadic" : false
    }, {
      "elem" : 82,
      "name" : "*runtime.fixalloc",
      "type" : "Pointer",
      "underlying" : 135
    }, {
      "name" : "func(s string)",
      "params" : 137,
      "recv" : -1,
      "results" : 86,
      "type" : "Signature",
      "underlying" : 136,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "s",
        "type" : 138
      } ],
      "name" : "(s string)",
      "type" : "Tuple",
      "underlying" : 137
    }, {
      "name" : "string",
      "type" : "Basic",
      "underlying" : 138
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 4
      }, {
        "name" : "",
        "type" : 2
      } ],
      "name" : "(unsafe.Pointer, uintptr)",
      "type" : "Tuple",
      "underlying" : 139
    }, {
      "name" : "func(v unsafe.Pointer, size uintptr, align uintptr) (unsafe.Pointer, uintptr)",
      "params" : 141,
      "recv" : -1,
      "results" : 139,
      "type" : "Signature",
      "underlying" : 140,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "v",
        "type" : 4
      }, {
        "name" : "size",
        "type" : 2
      }, {
        "name" : "align",
        "type" : 2
      } ],
      "name" : "(v unsafe.Pointer, size uintptr, align uintptr)",
      "type" : "Tuple",
      "underlying" : 141
    }, {
      "name" : "func() unsafe.Pointer",
      "params" : 86,
      "recv" : -1,
      "results" : 120,
      "type" : "Signature",
      "underlying" : 142,
      "variadic" : false
    }, {
      "name" : "(*runtime.fixalloc) func() unsafe.Pointer",
      "params" : 86,
      "recv" : 18,
      "results" : 120,
      "type" : "Signature",
      "underlying" : 143,
      "variadic" : false
    }, {
      "name" : "func(string, runtime.hex, string, runtime.hex, string, string, string)",
      "params" : 145,
      "recv" : -1,
      "results" : 86,
      "type" : "Signature",
      "underlying" : 144,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 138
      }, {
        "name" : "",
        "type" : 146
      }, {
        "name" : "",
        "type" : 138
      }, {
        "name" : "",
        "type" : 146
      }, {
        "name" : "",
        "type" : 138
      }, {
        "name" : "",
        "type" : 138
      }, {
        "name" : "",
        "type" : 138
      } ],
      "name" : "(string, runtime.hex, string, runtime.hex, string, string, string)",
      "type" : "Tuple",
      "underlying" : 145
    }, {
      "local-name" : "hex",
      "name" : "runtime.hex",
      "package" : 0,
      "type" : "Named",
      "underlying" : 15
    }, {
      "name" : "func() uint",
      "params" : 86,
      "recv" : -1,
      "results" : 148,
      "type" : "Signature",
      "underlying" : 147,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 25
      } ],
      "name" : "(uint)",
      "type" : "Tuple",
      "underlying" : 148
    }, {
      "name" : "(runtime.arenaIdx) func() uint",
      "params" : 86,
      "recv" : 24,
      "results" : 148,
      "type" : "Signature",
      "underlying" : 149,
      "variadic" : false
    }, {
      "name" : "untyped int",
      "type" : "Basic",
      "underlying" : 150
    }, {
      "name" : "func(ptr unsafe.Pointer, val unsafe.Pointer)",
      "params" : 152,
      "recv" : -1,
      "results" : 86,
      "type" : "Signature",
      "underlying" : 151,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "ptr",
        "type" : 4
      }, {
        "name" : "val",
        "type" : 4
      } ],
      "name" : "(ptr unsafe.Pointer, val unsafe.Pointer)",
      "type" : "Tuple",
      "underlying" : 152
    }, {
      "elem" : 61,
      "name" : "**[4194304]*runtime.heapArena",
      "type" : "Pointer",
      "underlying" : 153
    }, {
      "name" : "int",
      "type" : "Basic",
      "underlying" : 154
    }, {
      "name" : "func([]runtime.arenaIdx) int",
      "params" : 156,
      "recv" : -1,
      "results" : 157,
      "type" : "Signature",
      "underlying" : 155,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 74
      } ],
      "name" : "([]runtime.arenaIdx)",
      "type" : "Tuple",
      "underlying" : 156
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 154
      } ],
      "name" : "(int)",
      "type" : "Tuple",
      "underlying" : 157
    }, {
      "elem" : 159,
      "name" : "*runtime.notInHeap",
      "type" : "Pointer",
      "underlying" : 158
    }, {
      "local-name" : "notInHeap",
      "name" : "runtime.notInHeap",
      "package" : 0,
      "type" : "Named",
      "underlying" : 160
    }, {
      "fields" : [ ],
      "name" : "struct{}",
      "type" : "Struct",
      "underlying" : 160
    }, {
      "local-name" : "notInHeapSlice",
      "name" : "runtime.notInHeapSlice",
      "package" : 0,
      "type" : "Named",
      "underlying" : 162
    }, {
      "fields" : [ {
        "name" : "array",
        "type" : 158
      }, {
        "name" : "len",
        "type" : 154
      }, {
        "name" : "cap",
        "type" : 154
      } ],
      "name" : "struct{array *runtime.notInHeap; len int; cap int}",
      "type" : "Struct",
      "underlying" : 162
    }, {
      "elem" : 161,
      "name" : "*runtime.notInHeapSlice",
      "type" : "Pointer",
      "underlying" : 163
    }, {
      "elem" : 74,
      "name" : "*[]runtime.arenaIdx",
      "type" : "Pointer",
      "underlying" : 164
    }, {
      "name" : "func([]runtime.arenaIdx, []runtime.arenaIdx) int",
      "params" : 166,
      "recv" : -1,
      "results" : 157,
      "type" : "Signature",
      "underlying" : 165,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 74
      }, {
        "name" : "",
        "type" : 74
      } ],
      "name" : "([]runtime.arenaIdx, []runtime.arenaIdx)",
      "type" : "Tuple",
      "underlying" : 166
    }, {
      "elem" : 63,
      "name" : "**runtime.heapArena",
      "type" : "Pointer",
      "underlying" : 167
    }, {
      "name" : "func(addr unsafe.Pointer, size uintptr)",
      "params" : 169,
      "recv" : -1,
      "results" : 86,
      "type" : "Signature",
      "underlying" : 168,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "addr",
        "type" : 4
      }, {
        "name" : "size",
        "type" : 2
      } ],
      "name" : "(addr unsafe.Pointer, size uintptr)",
      "type" : "Tuple",
      "underlying" : 169
    } ],
    "variables" : [ {
      "name" : "h",
      "package" : 0,
      "type" : 5,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "n",
      "package" : 0,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "v",
      "package" : 0,
      "type" : 4,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "size",
      "package" : 0,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "memstats",
      "package" : 0,
      "type" : 110,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "mheap_",
      "package" : 0,
      "type" : 6,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "physPageSize",
      "package" : 0,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "arena",
      "package" : 0,
      "type" : 69,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "l",
      "package" : 0,
      "type" : 122,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "heap_sys",
      "package" : 0,
      "type" : 15,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "arenaHints",
      "package" : 0,
      "type" : 71,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "hint",
      "package" : 0,
      "type" : 71,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "addr",
      "package" : 0,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "down",
      "package" : 0,
      "type" : 33,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "p",
      "package" : 0,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "next",
      "package" : 0,
      "type" : 71,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "arenaHintAlloc",
      "package" : 0,
      "type" : 82,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "f",
      "package" : 0,
      "type" : 135,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "f",
      "package" : 0,
      "type" : 135,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "hint",
      "package" : 0,
      "type" : 71,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "bad",
      "package" : 0,
      "type" : 138,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "p",
      "package" : 0,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "ri",
      "package" : 0,
      "type" : 75,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "arenas",
      "package" : 0,
      "type" : 60,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "i",
      "package" : 0,
      "type" : 75,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "l2",
      "package" : 0,
      "type" : 61,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "r",
      "package" : 0,
      "type" : 63,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "heapArenaAlloc",
      "package" : 0,
      "type" : 69,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "gc_sys",
      "package" : 0,
      "type" : 15,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "allArenas",
      "package" : 0,
      "type" : 74,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "size",
      "package" : 0,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "newArray",
      "package" : 0,
      "type" : 158,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "oldSlice",
      "package" : 0,
      "type" : 74,
      "exported" : false,
      "embedded" : false,
      "field" : false
    } ]
  },
  "go-version" : "1.14.3"
}