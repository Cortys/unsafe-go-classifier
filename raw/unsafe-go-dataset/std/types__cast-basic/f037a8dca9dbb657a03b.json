{
  "usage" : {
    "file" : "string.go",
    "label1" : "cast-basic",
    "label2" : "types",
    "line" : "481",
    "module" : "std",
    "pkg" : "runtime",
    "project" : "kubernetes/kubernetes",
    "snippet" : "str := (*[maxAlloc/2/2 - 1]uint16)(unsafe.Pointer(strw))",
    "version" : "std"
  },
  "cfg" : {
    "blocks" : [ {
      "update-vars" : [ ],
      "successors" : [ 2 ],
      "in-vars" : [ 0 ],
      "exit" : false,
      "out-vars" : [ 0 ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[entry]",
      "entry" : true,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ ],
      "in-vars" : [ ],
      "exit" : true,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[exit]",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 3 ],
      "in-vars" : [ 0 ],
      "exit" : false,
      "out-vars" : [ 2, 0 ],
      "decl-vars" : [ 2 ],
      "line-start" : 480,
      "ast" : {
        "kind" : "statement",
        "target" : {
          "kind" : "decl",
          "specs" : [ {
            "comments" : [ ],
            "declared-type" : {
              "element" : {
                "go-type" : 7,
                "kind" : "type",
                "type" : "identifier",
                "value" : {
                  "go-type" : 7,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "byte"
                }
              },
              "go-type" : 6,
              "kind" : "type",
              "length" : {
                "go-type" : 8,
                "kind" : "constant",
                "value" : {
                  "type" : "INT",
                  "value" : "8"
                }
              },
              "type" : "array"
            },
            "kind" : "spec",
            "names" : [ {
              "ident-kind" : "NoKind",
              "kind" : "ident",
              "value" : "buf"
            } ],
            "type" : "var",
            "values" : [ ]
          } ],
          "type" : "var"
        },
        "type" : "declaration"
      },
      "assign-vars" : [ ],
      "line-end" : 480,
      "code" : "var buf [8]byte",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 4 ],
      "in-vars" : [ 2, 0 ],
      "exit" : false,
      "out-vars" : [ 3, 2 ],
      "decl-vars" : [ 3 ],
      "line-start" : 481,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "str"
          }
        } ],
        "right" : [ {
          "coerced-to" : {
            "contained" : {
              "element" : {
                "go-type" : 3,
                "kind" : "type",
                "type" : "identifier",
                "value" : {
                  "go-type" : 3,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "uint16"
                }
              },
              "go-type" : 10,
              "kind" : "type",
              "length" : {
                "go-type" : 8,
                "kind" : "constant",
                "value" : {
                  "type" : "INT",
                  "value" : "70368744177663"
                }
              },
              "type" : "array"
            },
            "go-type" : 9,
            "kind" : "type",
            "type" : "pointer"
          },
          "go-type" : 9,
          "kind" : "expression",
          "target" : {
            "coerced-to" : {
              "go-type" : 11,
              "kind" : "type",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 1,
                "value" : "unsafe"
              },
              "type" : "identifier",
              "value" : {
                "go-type" : 11,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "Pointer"
              }
            },
            "go-type" : 11,
            "kind" : "expression",
            "target" : {
              "go-type" : 2,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "strw",
                "variable" : 0
              }
            },
            "type" : "cast"
          },
          "type" : "cast"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 481,
      "code" : "str := (*[maxAlloc/2/2 - 1]uint16)(unsafe.Pointer(strw))",
      "entry" : false,
      "use-vars" : [ 0 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 6 ],
      "in-vars" : [ 2, 3 ],
      "exit" : false,
      "out-vars" : [ 3, 2, 4 ],
      "decl-vars" : [ 4 ],
      "line-start" : 482,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "n1"
          }
        } ],
        "right" : [ {
          "go-type" : 12,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "0"
          }
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 482,
      "code" : "n1 := 0",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 8, 9 ],
      "in-vars" : [ 5, 4, 3, 2 ],
      "exit" : false,
      "out-vars" : [ 4, 3, 2, 5 ],
      "decl-vars" : [ ],
      "line-start" : 483,
      "ast" : {
        "condition" : {
          "go-type" : 13,
          "kind" : "expression",
          "left" : {
            "go-type" : 3,
            "index" : {
              "go-type" : 12,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "i",
                "variable" : 5
              }
            },
            "kind" : "expression",
            "target" : {
              "go-type" : 9,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "str",
                "variable" : 3
              }
            },
            "type" : "index"
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 3,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "for"
      },
      "assign-vars" : [ ],
      "line-end" : 485,
      "code" : "for i := 0; str[i] != 0; i++ {\n\tn1 += encoderune(buf[:], rune(str[i]))\n}",
      "entry" : false,
      "use-vars" : [ 3, 5 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 5 ],
      "in-vars" : [ 3, 2, 4 ],
      "exit" : false,
      "out-vars" : [ 3, 2, 5, 4 ],
      "decl-vars" : [ 5 ],
      "line-start" : 483,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "i"
          }
        } ],
        "right" : [ {
          "go-type" : 12,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "0"
          }
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 483,
      "code" : "i := 0",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ 5 ],
      "successors" : [ 5 ],
      "in-vars" : [ 3, 2, 5, 4 ],
      "exit" : false,
      "out-vars" : [ 2, 5, 4, 3 ],
      "decl-vars" : [ ],
      "line-start" : 483,
      "ast" : {
        "kind" : "statement",
        "operation" : "++",
        "target" : {
          "go-type" : 12,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "i",
            "variable" : 5
          }
        },
        "type" : "crement"
      },
      "assign-vars" : [ 5 ],
      "line-end" : 483,
      "code" : "i++",
      "entry" : false,
      "use-vars" : [ 5 ]
    }, {
      "update-vars" : [ 4 ],
      "successors" : [ 7 ],
      "in-vars" : [ 3, 2, 5, 4 ],
      "exit" : false,
      "out-vars" : [ 3, 2, 5, 4 ],
      "decl-vars" : [ ],
      "line-start" : 484,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 12,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "n1",
            "variable" : 4
          }
        } ],
        "operator" : "+",
        "right" : [ {
          "arguments" : [ {
            "go-type" : 16,
            "type" : "slice",
            "three" : false,
            "high" : null,
            "max" : null,
            "kind" : "expression",
            "low" : null,
            "target" : {
              "go-type" : 6,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "buf",
                "variable" : 2
              }
            }
          }, {
            "coerced-to" : {
              "go-type" : 17,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 17,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "rune"
              }
            },
            "go-type" : 17,
            "kind" : "expression",
            "target" : {
              "go-type" : 3,
              "index" : {
                "go-type" : 12,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "i",
                  "variable" : 5
                }
              },
              "kind" : "expression",
              "target" : {
                "go-type" : 9,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "str",
                  "variable" : 3
                }
              },
              "type" : "index"
            },
            "type" : "cast"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 14,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 1,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "encoderune"
            }
          },
          "go-type" : 12,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign-operator"
      },
      "assign-vars" : [ 4 ],
      "line-end" : 484,
      "code" : "n1 += encoderune(buf[:], rune(str[i]))",
      "entry" : false,
      "use-vars" : [ 5, 4, 2, 3 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 10 ],
      "in-vars" : [ 3, 4 ],
      "exit" : false,
      "out-vars" : [ 3, 6, 4, 7 ],
      "decl-vars" : [ 7, 6 ],
      "line-start" : 486,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "s"
          }
        }, {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "b"
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 12,
            "kind" : "expression",
            "left" : {
              "go-type" : 12,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "n1",
                "variable" : 4
              }
            },
            "operator" : "+",
            "right" : {
              "go-type" : 12,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "4"
              }
            },
            "type" : "binary"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 20,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 2,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "rawstring"
            }
          },
          "go-type" : 19,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 486,
      "code" : "s, b := rawstring(n1 + 4)",
      "entry" : false,
      "use-vars" : [ 4 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 12 ],
      "in-vars" : [ 3, 6, 4, 7 ],
      "exit" : false,
      "out-vars" : [ 7, 3, 8, 6, 4 ],
      "decl-vars" : [ 8 ],
      "line-start" : 487,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "n2"
          }
        } ],
        "right" : [ {
          "go-type" : 12,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "0"
          }
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 487,
      "code" : "n2 := 0",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 14, 17 ],
      "in-vars" : [ 4, 7, 9, 3, 8, 6 ],
      "exit" : false,
      "out-vars" : [ 4, 7, 9, 3, 8, 6 ],
      "decl-vars" : [ ],
      "line-start" : 488,
      "ast" : {
        "condition" : {
          "go-type" : 13,
          "kind" : "expression",
          "left" : {
            "go-type" : 3,
            "index" : {
              "go-type" : 12,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "i",
                "variable" : 9
              }
            },
            "kind" : "expression",
            "target" : {
              "go-type" : 9,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "str",
                "variable" : 3
              }
            },
            "type" : "index"
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 3,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "for"
      },
      "assign-vars" : [ ],
      "line-end" : 494,
      "code" : "for i := 0; str[i] != 0; i++ {\n\n\tif n2 >= n1 {\n\t\tbreak\n\t}\n\tn2 += encoderune(b[n2:], rune(str[i]))\n}",
      "entry" : false,
      "use-vars" : [ 3, 9 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 11 ],
      "in-vars" : [ 3, 8, 6, 4, 7 ],
      "exit" : false,
      "out-vars" : [ 4, 7, 9, 3, 8, 6 ],
      "decl-vars" : [ 9 ],
      "line-start" : 488,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "i"
          }
        } ],
        "right" : [ {
          "go-type" : 12,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "0"
          }
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 488,
      "code" : "i := 0",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ 9 ],
      "successors" : [ 11 ],
      "in-vars" : [ 9, 3, 8, 6, 4, 7 ],
      "exit" : false,
      "out-vars" : [ 8, 6, 4, 7, 9, 3 ],
      "decl-vars" : [ ],
      "line-start" : 488,
      "ast" : {
        "kind" : "statement",
        "operation" : "++",
        "target" : {
          "go-type" : 12,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "i",
            "variable" : 9
          }
        },
        "type" : "crement"
      },
      "assign-vars" : [ 9 ],
      "line-end" : 488,
      "code" : "i++",
      "entry" : false,
      "use-vars" : [ 9 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 15, 16 ],
      "in-vars" : [ 4, 7, 9, 3, 8, 6 ],
      "exit" : false,
      "out-vars" : [ 6, 4, 7, 9, 3, 8 ],
      "decl-vars" : [ ],
      "line-start" : 490,
      "ast" : {
        "condition" : {
          "go-type" : 13,
          "kind" : "expression",
          "left" : {
            "go-type" : 12,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "n2",
              "variable" : 8
            }
          },
          "operator" : ">=",
          "right" : {
            "go-type" : 12,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "n1",
              "variable" : 4
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 492,
      "code" : "if n2 >= n1 {\n\tbreak\n}",
      "entry" : false,
      "use-vars" : [ 8, 4 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 17 ],
      "in-vars" : [ 7, 8, 6 ],
      "exit" : false,
      "out-vars" : [ 8, 6, 7 ],
      "decl-vars" : [ ],
      "line-start" : 491,
      "ast" : {
        "kind" : "statement",
        "label" : null,
        "type" : "break"
      },
      "assign-vars" : [ ],
      "line-end" : 491,
      "code" : "break",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ 8 ],
      "successors" : [ 13 ],
      "in-vars" : [ 7, 9, 3, 8, 6, 4 ],
      "exit" : false,
      "out-vars" : [ 6, 4, 7, 9, 3, 8 ],
      "decl-vars" : [ ],
      "line-start" : 493,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 12,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "n2",
            "variable" : 8
          }
        } ],
        "operator" : "+",
        "right" : [ {
          "arguments" : [ {
            "go-type" : 16,
            "type" : "slice",
            "three" : false,
            "high" : null,
            "max" : null,
            "kind" : "expression",
            "low" : {
              "go-type" : 12,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "n2",
                "variable" : 8
              }
            },
            "target" : {
              "go-type" : 16,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "b",
                "variable" : 6
              }
            }
          }, {
            "coerced-to" : {
              "go-type" : 17,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 17,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "rune"
              }
            },
            "go-type" : 17,
            "kind" : "expression",
            "target" : {
              "go-type" : 3,
              "index" : {
                "go-type" : 12,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "i",
                  "variable" : 9
                }
              },
              "kind" : "expression",
              "target" : {
                "go-type" : 9,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "str",
                  "variable" : 3
                }
              },
              "type" : "index"
            },
            "type" : "cast"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 14,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 1,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "encoderune"
            }
          },
          "go-type" : 12,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign-operator"
      },
      "assign-vars" : [ 8 ],
      "line-end" : 493,
      "code" : "n2 += encoderune(b[n2:], rune(str[i]))",
      "entry" : false,
      "use-vars" : [ 6, 8, 3, 9 ]
    }, {
      "update-vars" : [ 6 ],
      "successors" : [ 18 ],
      "in-vars" : [ 8, 6, 7 ],
      "exit" : false,
      "out-vars" : [ 8, 7 ],
      "decl-vars" : [ ],
      "line-start" : 495,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 7,
          "index" : {
            "go-type" : 12,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "n2",
              "variable" : 8
            }
          },
          "kind" : "expression",
          "target" : {
            "go-type" : 16,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "b",
              "variable" : 6
            }
          },
          "type" : "index"
        } ],
        "right" : [ {
          "go-type" : 7,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "0"
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 495,
      "code" : "b[n2] = 0",
      "entry" : false,
      "use-vars" : [ 6, 8 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 8, 7 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 496,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 5,
          "type" : "slice",
          "three" : false,
          "high" : {
            "go-type" : 12,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "n2",
              "variable" : 8
            }
          },
          "max" : null,
          "kind" : "expression",
          "low" : null,
          "target" : {
            "go-type" : 5,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "s",
              "variable" : 7
            }
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 496,
      "code" : "return s[:n2]",
      "entry" : false,
      "use-vars" : [ 7, 8 ]
    } ],
    "code" : "func gostringw(strw *uint16) string {\n\tvar buf [8]byte\n\tstr := (*[maxAlloc/2/2 - 1]uint16)(unsafe.Pointer(strw))\n\tn1 := 0\n\tfor i := 0; str[i] != 0; i++ {\n\t\tn1 += encoderune(buf[:], rune(str[i]))\n\t}\n\ts, b := rawstring(n1 + 4)\n\tn2 := 0\n\tfor i := 0; str[i] != 0; i++ {\n\n\t\tif n2 >= n1 {\n\t\t\tbreak\n\t\t}\n\t\tn2 += encoderune(b[n2:], rune(str[i]))\n\t}\n\tb[n2] = 0\n\treturn s[:n2]\n}",
    "defines" : [ 0 ],
    "functions" : [ {
      "name" : "gostringw",
      "package" : 0,
      "type" : 0,
      "exported" : false
    }, {
      "name" : "encoderune",
      "package" : 0,
      "type" : 14,
      "exported" : false
    }, {
      "name" : "rawstring",
      "package" : 0,
      "type" : 20,
      "exported" : false
    } ],
    "line-end" : 497,
    "line-start" : 479,
    "names" : [ "gostringw" ],
    "package" : 0,
    "packages" : [ {
      "name" : "runtime",
      "path" : "runtime"
    }, {
      "name" : "unsafe",
      "path" : "unsafe"
    } ],
    "params" : [ 0 ],
    "receivers" : [ ],
    "results" : [ 1 ],
    "type" : "function",
    "types" : [ {
      "name" : "func(strw *uint16) string",
      "params" : 1,
      "recv" : -1,
      "results" : 4,
      "type" : "Signature",
      "underlying" : 0,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "strw",
        "type" : 2
      } ],
      "name" : "(strw *uint16)",
      "type" : "Tuple",
      "underlying" : 1
    }, {
      "elem" : 3,
      "name" : "*uint16",
      "type" : "Pointer",
      "underlying" : 2
    }, {
      "name" : "uint16",
      "type" : "Basic",
      "underlying" : 3
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 5
      } ],
      "name" : "(string)",
      "type" : "Tuple",
      "underlying" : 4
    }, {
      "name" : "string",
      "type" : "Basic",
      "underlying" : 5
    }, {
      "elem" : 7,
      "name" : "[8]byte",
      "type" : "Array",
      "underlying" : 6
    }, {
      "name" : "byte",
      "type" : "Basic",
      "underlying" : 7
    }, {
      "name" : "untyped int",
      "type" : "Basic",
      "underlying" : 8
    }, {
      "elem" : 10,
      "name" : "*[70368744177663]uint16",
      "type" : "Pointer",
      "underlying" : 9
    }, {
      "elem" : 3,
      "name" : "[70368744177663]uint16",
      "type" : "Array",
      "underlying" : 10
    }, {
      "local-name" : "Pointer",
      "name" : "unsafe.Pointer",
      "package" : 1,
      "type" : "Basic",
      "underlying" : 11
    }, {
      "name" : "int",
      "type" : "Basic",
      "underlying" : 12
    }, {
      "name" : "untyped bool",
      "type" : "Basic",
      "underlying" : 13
    }, {
      "name" : "func(p []byte, r rune) int",
      "params" : 15,
      "recv" : -1,
      "results" : 18,
      "type" : "Signature",
      "underlying" : 14,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "p",
        "type" : 16
      }, {
        "name" : "r",
        "type" : 17
      } ],
      "name" : "(p []byte, r rune)",
      "type" : "Tuple",
      "underlying" : 15
    }, {
      "elem" : 7,
      "name" : "[]byte",
      "type" : "Slice",
      "underlying" : 16
    }, {
      "name" : "rune",
      "type" : "Basic",
      "underlying" : 17
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 12
      } ],
      "name" : "(int)",
      "type" : "Tuple",
      "underlying" : 18
    }, {
      "fields" : [ {
        "name" : "s",
        "type" : 5
      }, {
        "name" : "b",
        "type" : 16
      } ],
      "name" : "(s string, b []byte)",
      "type" : "Tuple",
      "underlying" : 19
    }, {
      "name" : "func(size int) (s string, b []byte)",
      "params" : 21,
      "recv" : -1,
      "results" : 19,
      "type" : "Signature",
      "underlying" : 20,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "size",
        "type" : 12
      } ],
      "name" : "(size int)",
      "type" : "Tuple",
      "underlying" : 21
    } ],
    "variables" : [ {
      "name" : "strw",
      "package" : 0,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "[res0]",
      "package" : 0,
      "type" : 5,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "buf",
      "package" : 0,
      "type" : 6,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "str",
      "package" : 0,
      "type" : 9,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "n1",
      "package" : 0,
      "type" : 12,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "i",
      "package" : 0,
      "type" : 12,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "b",
      "package" : 0,
      "type" : 16,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "s",
      "package" : 0,
      "type" : 5,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "n2",
      "package" : 0,
      "type" : 12,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "i",
      "package" : 0,
      "type" : 12,
      "exported" : false,
      "embedded" : false,
      "field" : false
    } ]
  },
  "go-version" : "1.14.3"
}