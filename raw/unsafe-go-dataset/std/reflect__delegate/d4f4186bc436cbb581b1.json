{
  "usage" : {
    "file" : "type.go",
    "label1" : "delegate",
    "label2" : "reflect",
    "line" : "674",
    "module" : "std",
    "pkg" : "reflect",
    "project" : "kubernetes/kubernetes",
    "snippet" : "func resolveReflectText(ptr unsafe.Pointer) textOff {",
    "version" : "std"
  },
  "cfg" : {
    "blocks" : [ {
      "update-vars" : [ ],
      "successors" : [ 2 ],
      "in-vars" : [ 0 ],
      "exit" : false,
      "out-vars" : [ 0 ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[entry]",
      "entry" : true,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ ],
      "in-vars" : [ ],
      "exit" : true,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[exit]",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 0 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 675,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "coerced-to" : {
            "go-type" : 4,
            "kind" : "type",
            "type" : "identifier",
            "value" : {
              "go-type" : 4,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "textOff"
            }
          },
          "go-type" : 4,
          "kind" : "expression",
          "target" : {
            "arguments" : [ {
              "go-type" : 2,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "ptr",
                "variable" : 0
              }
            } ],
            "ellipsis" : false,
            "function" : {
              "go-type" : 6,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "function" : 1,
                "ident-kind" : "Func",
                "kind" : "ident",
                "value" : "addReflectOff"
              }
            },
            "go-type" : 5,
            "kind" : "expression",
            "type" : "call"
          },
          "type" : "cast"
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 675,
      "code" : "return textOff(addReflectOff(ptr))",
      "entry" : false,
      "use-vars" : [ 0 ]
    } ],
    "code" : "// resolveReflectText adds a function pointer to the reflection lookup map in\n// the runtime. It returns a new textOff that can be used to refer to the\n// pointer.\nfunc resolveReflectText(ptr unsafe.Pointer) textOff {\n\treturn textOff(addReflectOff(ptr))\n}",
    "defines" : [ 0 ],
    "functions" : [ {
      "name" : "resolveReflectText",
      "package" : 0,
      "type" : 0,
      "exported" : false
    }, {
      "name" : "addReflectOff",
      "package" : 0,
      "type" : 6,
      "exported" : false
    } ],
    "line-end" : 676,
    "line-start" : 674,
    "names" : [ "resolveReflectText" ],
    "package" : 0,
    "packages" : [ {
      "name" : "reflect",
      "path" : "reflect"
    }, {
      "name" : "unsafe",
      "path" : "unsafe"
    } ],
    "params" : [ 0 ],
    "receivers" : [ ],
    "results" : [ 1 ],
    "type" : "function",
    "types" : [ {
      "name" : "func(ptr unsafe.Pointer) reflect.textOff",
      "params" : 1,
      "recv" : -1,
      "results" : 3,
      "type" : "Signature",
      "underlying" : 0,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "ptr",
        "type" : 2
      } ],
      "name" : "(ptr unsafe.Pointer)",
      "type" : "Tuple",
      "underlying" : 1
    }, {
      "local-name" : "Pointer",
      "name" : "unsafe.Pointer",
      "package" : 1,
      "type" : "Basic",
      "underlying" : 2
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 4
      } ],
      "name" : "(reflect.textOff)",
      "type" : "Tuple",
      "underlying" : 3
    }, {
      "local-name" : "textOff",
      "name" : "reflect.textOff",
      "package" : 0,
      "type" : "Named",
      "underlying" : 5
    }, {
      "name" : "int32",
      "type" : "Basic",
      "underlying" : 5
    }, {
      "name" : "func(ptr unsafe.Pointer) int32",
      "params" : 1,
      "recv" : -1,
      "results" : 7,
      "type" : "Signature",
      "underlying" : 6,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 5
      } ],
      "name" : "(int32)",
      "type" : "Tuple",
      "underlying" : 7
    } ],
    "variables" : [ {
      "name" : "ptr",
      "package" : 0,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "[res0]",
      "package" : 0,
      "type" : 4,
      "exported" : false,
      "embedded" : false,
      "field" : false
    } ]
  },
  "go-version" : "1.14.3"
}