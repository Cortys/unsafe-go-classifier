{
  "usage" : {
    "file" : "cgocheck.go",
    "label1" : "cast-struct",
    "label2" : "ffi",
    "line" : "244",
    "module" : "std",
    "pkg" : "runtime",
    "project" : "kubernetes/kubernetes",
    "snippet" : "st := (*structtype)(unsafe.Pointer(typ))",
    "version" : "std"
  },
  "cfg" : {
    "blocks" : [ {
      "update-vars" : [ ],
      "successors" : [ 2 ],
      "in-vars" : [ 0, 2, 1, 3 ],
      "exit" : false,
      "out-vars" : [ 0, 2, 1, 3 ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[entry]",
      "entry" : true,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ ],
      "in-vars" : [ ],
      "exit" : true,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[exit]",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 3, 4 ],
      "in-vars" : [ 1, 3, 0, 2 ],
      "exit" : false,
      "out-vars" : [ 3, 0, 2, 1 ],
      "decl-vars" : [ ],
      "line-start" : 206,
      "ast" : {
        "condition" : {
          "go-type" : 20,
          "kind" : "expression",
          "left" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "ptrdata",
              "variable" : 4
            },
            "go-type" : 5,
            "kind" : "expression",
            "target" : {
              "go-type" : 2,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "typ",
                "variable" : 0
              }
            },
            "type" : "selector"
          },
          "operator" : "==",
          "right" : {
            "go-type" : 5,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 208,
      "code" : "if typ.ptrdata == 0 {\n\treturn\n}",
      "entry" : false,
      "use-vars" : [ 0 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 207,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ ]
      },
      "assign-vars" : [ ],
      "line-end" : 207,
      "code" : "return",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 5, 7 ],
      "in-vars" : [ 0, 2, 1, 3 ],
      "exit" : false,
      "out-vars" : [ 2, 1, 3, 0 ],
      "decl-vars" : [ ],
      "line-start" : 211,
      "ast" : {
        "condition" : {
          "go-type" : 20,
          "kind" : "expression",
          "left" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "ptrdata",
              "variable" : 4
            },
            "go-type" : 5,
            "kind" : "expression",
            "target" : {
              "go-type" : 2,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "typ",
                "variable" : 0
              }
            },
            "type" : "selector"
          },
          "operator" : "<=",
          "right" : {
            "go-type" : 5,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "off",
              "variable" : 2
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 213,
      "code" : "if typ.ptrdata <= off {\n\treturn\n}",
      "entry" : false,
      "use-vars" : [ 2, 0 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 212,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ ]
      },
      "assign-vars" : [ ],
      "line-end" : 212,
      "code" : "return",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 8, 9 ],
      "in-vars" : [ 0, 2, 1, 3, 5 ],
      "exit" : false,
      "out-vars" : [ 5, 0, 2, 1, 3 ],
      "decl-vars" : [ ],
      "line-start" : 214,
      "ast" : {
        "condition" : {
          "go-type" : 20,
          "kind" : "expression",
          "left" : {
            "go-type" : 5,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "size",
              "variable" : 3
            }
          },
          "operator" : ">",
          "right" : {
            "go-type" : 5,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "ptrdataSize",
              "variable" : 5
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 216,
      "code" : "if ptrdataSize := typ.ptrdata - off; size > ptrdataSize {\n\tsize = ptrdataSize\n}",
      "entry" : false,
      "use-vars" : [ 3, 5 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 6 ],
      "in-vars" : [ 0, 2, 1, 3 ],
      "exit" : false,
      "out-vars" : [ 0, 2, 1, 3, 5 ],
      "decl-vars" : [ 5 ],
      "line-start" : 214,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "ptrdataSize"
          }
        } ],
        "right" : [ {
          "go-type" : 5,
          "kind" : "expression",
          "left" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "ptrdata",
              "variable" : 4
            },
            "go-type" : 5,
            "kind" : "expression",
            "target" : {
              "go-type" : 2,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "typ",
                "variable" : 0
              }
            },
            "type" : "selector"
          },
          "operator" : "-",
          "right" : {
            "go-type" : 5,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "off",
              "variable" : 2
            }
          },
          "type" : "binary"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 214,
      "code" : "ptrdataSize := typ.ptrdata - off",
      "entry" : false,
      "use-vars" : [ 0, 2 ]
    }, {
      "update-vars" : [ 3 ],
      "successors" : [ 9 ],
      "in-vars" : [ 0, 2, 1, 5 ],
      "exit" : false,
      "out-vars" : [ 0, 2, 1, 3 ],
      "decl-vars" : [ ],
      "line-start" : 215,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 5,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "size",
            "variable" : 3
          }
        } ],
        "right" : [ {
          "go-type" : 5,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "ptrdataSize",
            "variable" : 5
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 3 ],
      "line-end" : 215,
      "code" : "size = ptrdataSize",
      "entry" : false,
      "use-vars" : [ 5 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 10, 12 ],
      "in-vars" : [ 0, 2, 1, 3 ],
      "exit" : false,
      "out-vars" : [ 0, 2, 1, 3 ],
      "decl-vars" : [ ],
      "line-start" : 218,
      "ast" : {
        "condition" : {
          "go-type" : 20,
          "kind" : "expression",
          "left" : {
            "go-type" : 8,
            "kind" : "expression",
            "left" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "kind",
                "variable" : 6
              },
              "go-type" : 8,
              "kind" : "expression",
              "target" : {
                "go-type" : 2,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "typ",
                  "variable" : 0
                }
              },
              "type" : "selector"
            },
            "operator" : "&",
            "right" : {
              "go-type" : 8,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "64"
              }
            },
            "type" : "binary"
          },
          "operator" : "==",
          "right" : {
            "go-type" : 8,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 221,
      "code" : "if typ.kind&kindGCProg == 0 {\n\tcgoCheckBits(src, typ.gcdata, off, size)\n\treturn\n}",
      "entry" : false,
      "use-vars" : [ 0 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 11 ],
      "in-vars" : [ 0, 2, 1, 3 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 219,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 11,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "src",
              "variable" : 1
            }
          }, {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "gcdata",
              "variable" : 7
            },
            "go-type" : 14,
            "kind" : "expression",
            "target" : {
              "go-type" : 2,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "typ",
                "variable" : 0
              }
            },
            "type" : "selector"
          }, {
            "go-type" : 5,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "off",
              "variable" : 2
            }
          }, {
            "go-type" : 5,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "size",
              "variable" : 3
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 21,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 1,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "cgoCheckBits"
            }
          },
          "go-type" : 19,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 219,
      "code" : "cgoCheckBits(src, typ.gcdata, off, size)",
      "entry" : false,
      "use-vars" : [ 2, 3, 1, 0 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 220,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ ]
      },
      "assign-vars" : [ ],
      "line-end" : 220,
      "code" : "return",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 13, 15, 31 ],
      "in-vars" : [ 3, 0, 2, 1 ],
      "exit" : false,
      "out-vars" : [ 3, 0, 2, 1 ],
      "decl-vars" : [ ],
      "line-start" : 222,
      "ast" : {
        "condition" : {
          "go-type" : 8,
          "kind" : "expression",
          "left" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "kind",
              "variable" : 6
            },
            "go-type" : 8,
            "kind" : "expression",
            "target" : {
              "go-type" : 2,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "typ",
                "variable" : 0
              }
            },
            "type" : "selector"
          },
          "operator" : "&",
          "right" : {
            "go-type" : 8,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "31"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "switch"
      },
      "assign-vars" : [ ],
      "line-end" : 261,
      "code" : "switch typ.kind & kindMask {\ndefault:\n\tthrow(\"can't happen\")\ncase kindArray:\n\tat := (*arraytype)(unsafe.Pointer(typ))\n\tfor i := uintptr(0); i < at.len; i++ {\n\t\tif off < at.elem.size {\n\t\t\tcgoCheckUsingType(at.elem, src, off, size)\n\t\t}\n\t\tsrc = add(src, at.elem.size)\n\t\tskipped := off\n\t\tif skipped > at.elem.size {\n\t\t\tskipped = at.elem.size\n\t\t}\n\t\tchecked := at.elem.size - skipped\n\t\toff -= skipped\n\t\tif size <= checked {\n\t\t\treturn\n\t\t}\n\t\tsize -= checked\n\t}\ncase kindStruct:\n\tst := (*structtype)(unsafe.Pointer(typ))\n\tfor _, f := range st.fields {\n\t\tif off < f.typ.size {\n\t\t\tcgoCheckUsingType(f.typ, src, off, size)\n\t\t}\n\t\tsrc = add(src, f.typ.size)\n\t\tskipped := off\n\t\tif skipped > f.typ.size {\n\t\t\tskipped = f.typ.size\n\t\t}\n\t\tchecked := f.typ.size - skipped\n\t\toff -= skipped\n\t\tif size <= checked {\n\t\t\treturn\n\t\t}\n\t\tsize -= checked\n\t}\n}",
      "entry" : false,
      "use-vars" : [ 0 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 14 ],
      "in-vars" : [ ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 223,
      "ast" : {
        "expressions" : [ ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 224,
      "code" : "default:\n\tthrow(\"can't happen\")",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 224,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 25,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "can't happen"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 23,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 2,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "throw"
            }
          },
          "go-type" : 19,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 224,
      "code" : "throw(\"can't happen\")",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 16 ],
      "in-vars" : [ 0, 2, 1, 3 ],
      "exit" : false,
      "out-vars" : [ 0, 2, 1, 3 ],
      "decl-vars" : [ ],
      "line-start" : 225,
      "ast" : {
        "expressions" : [ {
          "go-type" : 8,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "17"
          }
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 242,
      "code" : "case kindArray:\n\tat := (*arraytype)(unsafe.Pointer(typ))\n\tfor i := uintptr(0); i < at.len; i++ {\n\t\tif off < at.elem.size {\n\t\t\tcgoCheckUsingType(at.elem, src, off, size)\n\t\t}\n\t\tsrc = add(src, at.elem.size)\n\t\tskipped := off\n\t\tif skipped > at.elem.size {\n\t\t\tskipped = at.elem.size\n\t\t}\n\t\tchecked := at.elem.size - skipped\n\t\toff -= skipped\n\t\tif size <= checked {\n\t\t\treturn\n\t\t}\n\t\tsize -= checked\n\t}",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 18 ],
      "in-vars" : [ 3, 0, 2, 1 ],
      "exit" : false,
      "out-vars" : [ 2, 1, 3, 9 ],
      "decl-vars" : [ 9 ],
      "line-start" : 226,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "at"
          }
        } ],
        "right" : [ {
          "coerced-to" : {
            "contained" : {
              "go-type" : 27,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 27,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "arraytype"
              }
            },
            "go-type" : 26,
            "kind" : "type",
            "type" : "pointer"
          },
          "go-type" : 26,
          "kind" : "expression",
          "target" : {
            "coerced-to" : {
              "go-type" : 11,
              "kind" : "type",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 1,
                "value" : "unsafe"
              },
              "type" : "identifier",
              "value" : {
                "go-type" : 11,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "Pointer"
              }
            },
            "go-type" : 11,
            "kind" : "expression",
            "target" : {
              "go-type" : 2,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "typ",
                "variable" : 0
              }
            },
            "type" : "cast"
          },
          "type" : "cast"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 226,
      "code" : "at := (*arraytype)(unsafe.Pointer(typ))",
      "entry" : false,
      "use-vars" : [ 0 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 20, 1 ],
      "in-vars" : [ 9, 2, 1, 3, 8 ],
      "exit" : false,
      "out-vars" : [ 2, 1, 3, 8, 9 ],
      "decl-vars" : [ ],
      "line-start" : 227,
      "ast" : {
        "condition" : {
          "go-type" : 20,
          "kind" : "expression",
          "left" : {
            "go-type" : 5,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "i",
              "variable" : 8
            }
          },
          "operator" : "<",
          "right" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "len",
              "variable" : 10
            },
            "go-type" : 5,
            "kind" : "expression",
            "target" : {
              "go-type" : 26,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "at",
                "variable" : 9
              }
            },
            "type" : "selector"
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "for"
      },
      "assign-vars" : [ ],
      "line-end" : 242,
      "code" : "for i := uintptr(0); i < at.len; i++ {\n\tif off < at.elem.size {\n\t\tcgoCheckUsingType(at.elem, src, off, size)\n\t}\n\tsrc = add(src, at.elem.size)\n\tskipped := off\n\tif skipped > at.elem.size {\n\t\tskipped = at.elem.size\n\t}\n\tchecked := at.elem.size - skipped\n\toff -= skipped\n\tif size <= checked {\n\t\treturn\n\t}\n\tsize -= checked\n}",
      "entry" : false,
      "use-vars" : [ 9, 8 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 17 ],
      "in-vars" : [ 2, 1, 3, 9 ],
      "exit" : false,
      "out-vars" : [ 2, 1, 3, 8, 9 ],
      "decl-vars" : [ 8 ],
      "line-start" : 227,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "i"
          }
        } ],
        "right" : [ {
          "go-type" : 5,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "0"
          }
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 227,
      "code" : "i := uintptr(0)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ 8 ],
      "successors" : [ 17 ],
      "in-vars" : [ 9, 2, 1, 3, 8 ],
      "exit" : false,
      "out-vars" : [ 2, 1, 3, 8, 9 ],
      "decl-vars" : [ ],
      "line-start" : 227,
      "ast" : {
        "kind" : "statement",
        "operation" : "++",
        "target" : {
          "go-type" : 5,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "i",
            "variable" : 8
          }
        },
        "type" : "crement"
      },
      "assign-vars" : [ 8 ],
      "line-end" : 227,
      "code" : "i++",
      "entry" : false,
      "use-vars" : [ 8 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 21, 22 ],
      "in-vars" : [ 9, 2, 1, 3, 8 ],
      "exit" : false,
      "out-vars" : [ 2, 1, 3, 8, 9 ],
      "decl-vars" : [ ],
      "line-start" : 228,
      "ast" : {
        "condition" : {
          "go-type" : 20,
          "kind" : "expression",
          "left" : {
            "go-type" : 5,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "off",
              "variable" : 2
            }
          },
          "operator" : "<",
          "right" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "size",
              "variable" : 12
            },
            "go-type" : 5,
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "elem",
                "variable" : 11
              },
              "go-type" : 2,
              "kind" : "expression",
              "target" : {
                "go-type" : 26,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "at",
                  "variable" : 9
                }
              },
              "type" : "selector"
            },
            "type" : "selector"
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 230,
      "code" : "if off < at.elem.size {\n\tcgoCheckUsingType(at.elem, src, off, size)\n}",
      "entry" : false,
      "use-vars" : [ 2, 9 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 22 ],
      "in-vars" : [ 1, 3, 8, 9, 2 ],
      "exit" : false,
      "out-vars" : [ 2, 1, 3, 8, 9 ],
      "decl-vars" : [ ],
      "line-start" : 229,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "elem",
              "variable" : 11
            },
            "go-type" : 2,
            "kind" : "expression",
            "target" : {
              "go-type" : 26,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "at",
                "variable" : 9
              }
            },
            "type" : "selector"
          }, {
            "go-type" : 11,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "src",
              "variable" : 1
            }
          }, {
            "go-type" : 5,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "off",
              "variable" : 2
            }
          }, {
            "go-type" : 5,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "size",
              "variable" : 3
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 0,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 0,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "cgoCheckUsingType"
            }
          },
          "go-type" : 19,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 229,
      "code" : "cgoCheckUsingType(at.elem, src, off, size)",
      "entry" : false,
      "use-vars" : [ 3, 9, 1, 2 ]
    }, {
      "update-vars" : [ 1 ],
      "successors" : [ 23 ],
      "in-vars" : [ 2, 1, 3, 8, 9 ],
      "exit" : false,
      "out-vars" : [ 2, 1, 3, 8, 9 ],
      "decl-vars" : [ ],
      "line-start" : 231,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 11,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "src",
            "variable" : 1
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 11,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "src",
              "variable" : 1
            }
          }, {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "size",
              "variable" : 12
            },
            "go-type" : 5,
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "elem",
                "variable" : 11
              },
              "go-type" : 2,
              "kind" : "expression",
              "target" : {
                "go-type" : 26,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "at",
                  "variable" : 9
                }
              },
              "type" : "selector"
            },
            "type" : "selector"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 29,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 3,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "add"
            }
          },
          "go-type" : 11,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 1 ],
      "line-end" : 231,
      "code" : "src = add(src, at.elem.size)",
      "entry" : false,
      "use-vars" : [ 1, 9 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 24 ],
      "in-vars" : [ 2, 1, 3, 8, 9 ],
      "exit" : false,
      "out-vars" : [ 1, 3, 8, 9, 13, 2 ],
      "decl-vars" : [ 13 ],
      "line-start" : 232,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "skipped"
          }
        } ],
        "right" : [ {
          "go-type" : 5,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "off",
            "variable" : 2
          }
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 232,
      "code" : "skipped := off",
      "entry" : false,
      "use-vars" : [ 2 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 25, 26 ],
      "in-vars" : [ 9, 13, 2, 1, 3, 8 ],
      "exit" : false,
      "out-vars" : [ 2, 1, 3, 8, 9, 13 ],
      "decl-vars" : [ ],
      "line-start" : 233,
      "ast" : {
        "condition" : {
          "go-type" : 20,
          "kind" : "expression",
          "left" : {
            "go-type" : 5,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "skipped",
              "variable" : 13
            }
          },
          "operator" : ">",
          "right" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "size",
              "variable" : 12
            },
            "go-type" : 5,
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "elem",
                "variable" : 11
              },
              "go-type" : 2,
              "kind" : "expression",
              "target" : {
                "go-type" : 26,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "at",
                  "variable" : 9
                }
              },
              "type" : "selector"
            },
            "type" : "selector"
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 235,
      "code" : "if skipped > at.elem.size {\n\tskipped = at.elem.size\n}",
      "entry" : false,
      "use-vars" : [ 13, 9 ]
    }, {
      "update-vars" : [ 13 ],
      "successors" : [ 26 ],
      "in-vars" : [ 9, 2, 1, 3, 8 ],
      "exit" : false,
      "out-vars" : [ 13, 2, 1, 3, 8, 9 ],
      "decl-vars" : [ ],
      "line-start" : 234,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 5,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "skipped",
            "variable" : 13
          }
        } ],
        "right" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "size",
            "variable" : 12
          },
          "go-type" : 5,
          "kind" : "expression",
          "target" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "elem",
              "variable" : 11
            },
            "go-type" : 2,
            "kind" : "expression",
            "target" : {
              "go-type" : 26,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "at",
                "variable" : 9
              }
            },
            "type" : "selector"
          },
          "type" : "selector"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 13 ],
      "line-end" : 234,
      "code" : "skipped = at.elem.size",
      "entry" : false,
      "use-vars" : [ 9 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 27 ],
      "in-vars" : [ 1, 3, 8, 9, 13, 2 ],
      "exit" : false,
      "out-vars" : [ 8, 9, 13, 14, 2, 1, 3 ],
      "decl-vars" : [ 14 ],
      "line-start" : 236,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "checked"
          }
        } ],
        "right" : [ {
          "go-type" : 5,
          "kind" : "expression",
          "left" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "size",
              "variable" : 12
            },
            "go-type" : 5,
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "elem",
                "variable" : 11
              },
              "go-type" : 2,
              "kind" : "expression",
              "target" : {
                "go-type" : 26,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "at",
                  "variable" : 9
                }
              },
              "type" : "selector"
            },
            "type" : "selector"
          },
          "operator" : "-",
          "right" : {
            "go-type" : 5,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "skipped",
              "variable" : 13
            }
          },
          "type" : "binary"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 236,
      "code" : "checked := at.elem.size - skipped",
      "entry" : false,
      "use-vars" : [ 13, 9 ]
    }, {
      "update-vars" : [ 2 ],
      "successors" : [ 28 ],
      "in-vars" : [ 2, 1, 3, 8, 9, 13, 14 ],
      "exit" : false,
      "out-vars" : [ 3, 8, 9, 14, 2, 1 ],
      "decl-vars" : [ ],
      "line-start" : 237,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 5,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "off",
            "variable" : 2
          }
        } ],
        "operator" : "-",
        "right" : [ {
          "go-type" : 5,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "skipped",
            "variable" : 13
          }
        } ],
        "type" : "assign-operator"
      },
      "assign-vars" : [ 2 ],
      "line-end" : 237,
      "code" : "off -= skipped",
      "entry" : false,
      "use-vars" : [ 13, 2 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 29, 30 ],
      "in-vars" : [ 14, 2, 1, 3, 8, 9 ],
      "exit" : false,
      "out-vars" : [ 3, 8, 9, 14, 2, 1 ],
      "decl-vars" : [ ],
      "line-start" : 238,
      "ast" : {
        "condition" : {
          "go-type" : 20,
          "kind" : "expression",
          "left" : {
            "go-type" : 5,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "size",
              "variable" : 3
            }
          },
          "operator" : "<=",
          "right" : {
            "go-type" : 5,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "checked",
              "variable" : 14
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 240,
      "code" : "if size <= checked {\n\treturn\n}",
      "entry" : false,
      "use-vars" : [ 14, 3 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 239,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ ]
      },
      "assign-vars" : [ ],
      "line-end" : 239,
      "code" : "return",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ 3 ],
      "successors" : [ 19 ],
      "in-vars" : [ 2, 1, 3, 8, 9, 14 ],
      "exit" : false,
      "out-vars" : [ 2, 1, 3, 8, 9 ],
      "decl-vars" : [ ],
      "line-start" : 241,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 5,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "size",
            "variable" : 3
          }
        } ],
        "operator" : "-",
        "right" : [ {
          "go-type" : 5,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "checked",
            "variable" : 14
          }
        } ],
        "type" : "assign-operator"
      },
      "assign-vars" : [ 3 ],
      "line-end" : 241,
      "code" : "size -= checked",
      "entry" : false,
      "use-vars" : [ 3, 14 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 32 ],
      "in-vars" : [ 1, 3, 0, 2 ],
      "exit" : false,
      "out-vars" : [ 2, 1, 3, 0 ],
      "decl-vars" : [ ],
      "line-start" : 243,
      "ast" : {
        "expressions" : [ {
          "go-type" : 8,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "25"
          }
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 260,
      "code" : "case kindStruct:\n\tst := (*structtype)(unsafe.Pointer(typ))\n\tfor _, f := range st.fields {\n\t\tif off < f.typ.size {\n\t\t\tcgoCheckUsingType(f.typ, src, off, size)\n\t\t}\n\t\tsrc = add(src, f.typ.size)\n\t\tskipped := off\n\t\tif skipped > f.typ.size {\n\t\t\tskipped = f.typ.size\n\t\t}\n\t\tchecked := f.typ.size - skipped\n\t\toff -= skipped\n\t\tif size <= checked {\n\t\t\treturn\n\t\t}\n\t\tsize -= checked\n\t}",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 33 ],
      "in-vars" : [ 3, 0, 2, 1 ],
      "exit" : false,
      "out-vars" : [ 1, 3, 2, 15 ],
      "decl-vars" : [ 15 ],
      "line-start" : 244,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "st"
          }
        } ],
        "right" : [ {
          "coerced-to" : {
            "contained" : {
              "go-type" : 33,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 33,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "structtype"
              }
            },
            "go-type" : 32,
            "kind" : "type",
            "type" : "pointer"
          },
          "go-type" : 32,
          "kind" : "expression",
          "target" : {
            "coerced-to" : {
              "go-type" : 11,
              "kind" : "type",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 1,
                "value" : "unsafe"
              },
              "type" : "identifier",
              "value" : {
                "go-type" : 11,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "Pointer"
              }
            },
            "go-type" : 11,
            "kind" : "expression",
            "target" : {
              "go-type" : 2,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "typ",
                "variable" : 0
              }
            },
            "type" : "cast"
          },
          "type" : "cast"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 244,
      "code" : "st := (*structtype)(unsafe.Pointer(typ))",
      "entry" : false,
      "use-vars" : [ 0 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 34, 1 ],
      "in-vars" : [ 2, 15, 1, 3 ],
      "exit" : false,
      "out-vars" : [ 2, 17, 15, 1, 3 ],
      "decl-vars" : [ 17, 21 ],
      "line-start" : 245,
      "ast" : {
        "is-assign" : false,
        "key" : {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "_"
          }
        },
        "kind" : "statement",
        "target" : {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "fields",
            "variable" : 16
          },
          "go-type" : 37,
          "kind" : "expression",
          "target" : {
            "go-type" : 32,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "st",
              "variable" : 15
            }
          },
          "type" : "selector"
        },
        "type" : "range",
        "value" : {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "f"
          }
        }
      },
      "assign-vars" : [ ],
      "line-end" : 260,
      "code" : "for _, f := range st.fields {\n\tif off < f.typ.size {\n\t\tcgoCheckUsingType(f.typ, src, off, size)\n\t}\n\tsrc = add(src, f.typ.size)\n\tskipped := off\n\tif skipped > f.typ.size {\n\t\tskipped = f.typ.size\n\t}\n\tchecked := f.typ.size - skipped\n\toff -= skipped\n\tif size <= checked {\n\t\treturn\n\t}\n\tsize -= checked\n}",
      "entry" : false,
      "use-vars" : [ 15 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 35, 36 ],
      "in-vars" : [ 17, 15, 1, 3, 2 ],
      "exit" : false,
      "out-vars" : [ 17, 15, 1, 3, 2 ],
      "decl-vars" : [ ],
      "line-start" : 246,
      "ast" : {
        "condition" : {
          "go-type" : 20,
          "kind" : "expression",
          "left" : {
            "go-type" : 5,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "off",
              "variable" : 2
            }
          },
          "operator" : "<",
          "right" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "size",
              "variable" : 12
            },
            "go-type" : 5,
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "typ",
                "variable" : 18
              },
              "go-type" : 2,
              "kind" : "expression",
              "target" : {
                "go-type" : 38,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "f",
                  "variable" : 17
                }
              },
              "type" : "selector"
            },
            "type" : "selector"
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 248,
      "code" : "if off < f.typ.size {\n\tcgoCheckUsingType(f.typ, src, off, size)\n}",
      "entry" : false,
      "use-vars" : [ 17, 2 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 36 ],
      "in-vars" : [ 3, 2, 17, 15, 1 ],
      "exit" : false,
      "out-vars" : [ 2, 17, 15, 1, 3 ],
      "decl-vars" : [ ],
      "line-start" : 247,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "typ",
              "variable" : 18
            },
            "go-type" : 2,
            "kind" : "expression",
            "target" : {
              "go-type" : 38,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "f",
                "variable" : 17
              }
            },
            "type" : "selector"
          }, {
            "go-type" : 11,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "src",
              "variable" : 1
            }
          }, {
            "go-type" : 5,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "off",
              "variable" : 2
            }
          }, {
            "go-type" : 5,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "size",
              "variable" : 3
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 0,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 0,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "cgoCheckUsingType"
            }
          },
          "go-type" : 19,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 247,
      "code" : "cgoCheckUsingType(f.typ, src, off, size)",
      "entry" : false,
      "use-vars" : [ 3, 17, 1, 2 ]
    }, {
      "update-vars" : [ 1 ],
      "successors" : [ 37 ],
      "in-vars" : [ 2, 17, 15, 1, 3 ],
      "exit" : false,
      "out-vars" : [ 15, 1, 3, 2, 17 ],
      "decl-vars" : [ ],
      "line-start" : 249,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 11,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "src",
            "variable" : 1
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 11,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "src",
              "variable" : 1
            }
          }, {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "size",
              "variable" : 12
            },
            "go-type" : 5,
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "typ",
                "variable" : 18
              },
              "go-type" : 2,
              "kind" : "expression",
              "target" : {
                "go-type" : 38,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "f",
                  "variable" : 17
                }
              },
              "type" : "selector"
            },
            "type" : "selector"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 29,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 3,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "add"
            }
          },
          "go-type" : 11,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 1 ],
      "line-end" : 249,
      "code" : "src = add(src, f.typ.size)",
      "entry" : false,
      "use-vars" : [ 1, 17 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 38 ],
      "in-vars" : [ 2, 17, 15, 1, 3 ],
      "exit" : false,
      "out-vars" : [ 2, 17, 15, 1, 19, 3 ],
      "decl-vars" : [ 19 ],
      "line-start" : 250,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "skipped"
          }
        } ],
        "right" : [ {
          "go-type" : 5,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "off",
            "variable" : 2
          }
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 250,
      "code" : "skipped := off",
      "entry" : false,
      "use-vars" : [ 2 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 39, 40 ],
      "in-vars" : [ 17, 15, 1, 19, 3, 2 ],
      "exit" : false,
      "out-vars" : [ 15, 1, 19, 3, 2, 17 ],
      "decl-vars" : [ ],
      "line-start" : 251,
      "ast" : {
        "condition" : {
          "go-type" : 20,
          "kind" : "expression",
          "left" : {
            "go-type" : 5,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "skipped",
              "variable" : 19
            }
          },
          "operator" : ">",
          "right" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "size",
              "variable" : 12
            },
            "go-type" : 5,
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "typ",
                "variable" : 18
              },
              "go-type" : 2,
              "kind" : "expression",
              "target" : {
                "go-type" : 38,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "f",
                  "variable" : 17
                }
              },
              "type" : "selector"
            },
            "type" : "selector"
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 253,
      "code" : "if skipped > f.typ.size {\n\tskipped = f.typ.size\n}",
      "entry" : false,
      "use-vars" : [ 19, 17 ]
    }, {
      "update-vars" : [ 19 ],
      "successors" : [ 40 ],
      "in-vars" : [ 17, 15, 1, 3, 2 ],
      "exit" : false,
      "out-vars" : [ 2, 17, 15, 1, 19, 3 ],
      "decl-vars" : [ ],
      "line-start" : 252,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 5,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "skipped",
            "variable" : 19
          }
        } ],
        "right" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "size",
            "variable" : 12
          },
          "go-type" : 5,
          "kind" : "expression",
          "target" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "typ",
              "variable" : 18
            },
            "go-type" : 2,
            "kind" : "expression",
            "target" : {
              "go-type" : 38,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "f",
                "variable" : 17
              }
            },
            "type" : "selector"
          },
          "type" : "selector"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 19 ],
      "line-end" : 252,
      "code" : "skipped = f.typ.size",
      "entry" : false,
      "use-vars" : [ 17 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 41 ],
      "in-vars" : [ 3, 2, 17, 15, 1, 19 ],
      "exit" : false,
      "out-vars" : [ 2, 15, 1, 19, 3, 20 ],
      "decl-vars" : [ 20 ],
      "line-start" : 254,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "checked"
          }
        } ],
        "right" : [ {
          "go-type" : 5,
          "kind" : "expression",
          "left" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "size",
              "variable" : 12
            },
            "go-type" : 5,
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "typ",
                "variable" : 18
              },
              "go-type" : 2,
              "kind" : "expression",
              "target" : {
                "go-type" : 38,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "f",
                  "variable" : 17
                }
              },
              "type" : "selector"
            },
            "type" : "selector"
          },
          "operator" : "-",
          "right" : {
            "go-type" : 5,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "skipped",
              "variable" : 19
            }
          },
          "type" : "binary"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 254,
      "code" : "checked := f.typ.size - skipped",
      "entry" : false,
      "use-vars" : [ 17, 19 ]
    }, {
      "update-vars" : [ 2 ],
      "successors" : [ 42 ],
      "in-vars" : [ 2, 15, 1, 19, 3, 20 ],
      "exit" : false,
      "out-vars" : [ 1, 3, 20, 2, 15 ],
      "decl-vars" : [ ],
      "line-start" : 255,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 5,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "off",
            "variable" : 2
          }
        } ],
        "operator" : "-",
        "right" : [ {
          "go-type" : 5,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "skipped",
            "variable" : 19
          }
        } ],
        "type" : "assign-operator"
      },
      "assign-vars" : [ 2 ],
      "line-end" : 255,
      "code" : "off -= skipped",
      "entry" : false,
      "use-vars" : [ 19, 2 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 43, 44 ],
      "in-vars" : [ 2, 15, 1, 3, 20 ],
      "exit" : false,
      "out-vars" : [ 2, 15, 1, 3, 20 ],
      "decl-vars" : [ ],
      "line-start" : 256,
      "ast" : {
        "condition" : {
          "go-type" : 20,
          "kind" : "expression",
          "left" : {
            "go-type" : 5,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "size",
              "variable" : 3
            }
          },
          "operator" : "<=",
          "right" : {
            "go-type" : 5,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "checked",
              "variable" : 20
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 258,
      "code" : "if size <= checked {\n\treturn\n}",
      "entry" : false,
      "use-vars" : [ 3, 20 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 257,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ ]
      },
      "assign-vars" : [ ],
      "line-end" : 257,
      "code" : "return",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ 3 ],
      "successors" : [ 33 ],
      "in-vars" : [ 2, 15, 1, 3, 20 ],
      "exit" : false,
      "out-vars" : [ 2, 15, 1, 3 ],
      "decl-vars" : [ ],
      "line-start" : 259,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 5,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "size",
            "variable" : 3
          }
        } ],
        "operator" : "-",
        "right" : [ {
          "go-type" : 5,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "checked",
            "variable" : 20
          }
        } ],
        "type" : "assign-operator"
      },
      "assign-vars" : [ 3 ],
      "line-end" : 259,
      "code" : "size -= checked",
      "entry" : false,
      "use-vars" : [ 3, 20 ]
    } ],
    "code" : "// cgoCheckUsingType is like cgoCheckTypedBlock, but is a last ditch\n// fall back to look for pointers in src using the type information.\n// We only use this when looking at a value on the stack when the type\n// uses a GC program, because otherwise it's more efficient to use the\n// GC bits. This is called on the system stack.\n//go:nowritebarrier\n//go:systemstack\nfunc cgoCheckUsingType(typ *_type, src unsafe.Pointer, off, size uintptr) {\n\tif typ.ptrdata == 0 {\n\t\treturn\n\t}\n\n\tif typ.ptrdata <= off {\n\t\treturn\n\t}\n\tif ptrdataSize := typ.ptrdata - off; size > ptrdataSize {\n\t\tsize = ptrdataSize\n\t}\n\n\tif typ.kind&kindGCProg == 0 {\n\t\tcgoCheckBits(src, typ.gcdata, off, size)\n\t\treturn\n\t}\n\tswitch typ.kind & kindMask {\n\tdefault:\n\t\tthrow(\"can't happen\")\n\tcase kindArray:\n\t\tat := (*arraytype)(unsafe.Pointer(typ))\n\t\tfor i := uintptr(0); i < at.len; i++ {\n\t\t\tif off < at.elem.size {\n\t\t\t\tcgoCheckUsingType(at.elem, src, off, size)\n\t\t\t}\n\t\t\tsrc = add(src, at.elem.size)\n\t\t\tskipped := off\n\t\t\tif skipped > at.elem.size {\n\t\t\t\tskipped = at.elem.size\n\t\t\t}\n\t\t\tchecked := at.elem.size - skipped\n\t\t\toff -= skipped\n\t\t\tif size <= checked {\n\t\t\t\treturn\n\t\t\t}\n\t\t\tsize -= checked\n\t\t}\n\tcase kindStruct:\n\t\tst := (*structtype)(unsafe.Pointer(typ))\n\t\tfor _, f := range st.fields {\n\t\t\tif off < f.typ.size {\n\t\t\t\tcgoCheckUsingType(f.typ, src, off, size)\n\t\t\t}\n\t\t\tsrc = add(src, f.typ.size)\n\t\t\tskipped := off\n\t\t\tif skipped > f.typ.size {\n\t\t\t\tskipped = f.typ.size\n\t\t\t}\n\t\t\tchecked := f.typ.size - skipped\n\t\t\toff -= skipped\n\t\t\tif size <= checked {\n\t\t\t\treturn\n\t\t\t}\n\t\t\tsize -= checked\n\t\t}\n\t}\n}",
    "defines" : [ 0 ],
    "functions" : [ {
      "name" : "cgoCheckUsingType",
      "package" : 0,
      "type" : 0,
      "exported" : false
    }, {
      "name" : "cgoCheckBits",
      "package" : 0,
      "type" : 21,
      "exported" : false
    }, {
      "name" : "throw",
      "package" : 0,
      "type" : 23,
      "exported" : false
    }, {
      "name" : "add",
      "package" : 0,
      "type" : 29,
      "exported" : false
    } ],
    "line-end" : 262,
    "line-start" : 205,
    "names" : [ "cgoCheckUsingType" ],
    "package" : 0,
    "packages" : [ {
      "name" : "runtime",
      "path" : "runtime"
    }, {
      "name" : "unsafe",
      "path" : "unsafe"
    } ],
    "params" : [ 0, 1, 2, 3 ],
    "receivers" : [ ],
    "results" : [ ],
    "type" : "function",
    "types" : [ {
      "name" : "func(typ *runtime._type, src unsafe.Pointer, off uintptr, size uintptr)",
      "params" : 1,
      "recv" : -1,
      "results" : 19,
      "type" : "Signature",
      "underlying" : 0,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "typ",
        "type" : 2
      }, {
        "name" : "src",
        "type" : 11
      }, {
        "name" : "off",
        "type" : 5
      }, {
        "name" : "size",
        "type" : 5
      } ],
      "name" : "(typ *runtime._type, src unsafe.Pointer, off uintptr, size uintptr)",
      "type" : "Tuple",
      "underlying" : 1
    }, {
      "elem" : 3,
      "name" : "*runtime._type",
      "type" : "Pointer",
      "underlying" : 2
    }, {
      "local-name" : "_type",
      "name" : "runtime._type",
      "package" : 0,
      "type" : "Named",
      "underlying" : 4
    }, {
      "fields" : [ {
        "name" : "size",
        "type" : 5
      }, {
        "name" : "ptrdata",
        "type" : 5
      }, {
        "name" : "hash",
        "type" : 6
      }, {
        "name" : "tflag",
        "type" : 7
      }, {
        "name" : "align",
        "type" : 8
      }, {
        "name" : "fieldAlign",
        "type" : 8
      }, {
        "name" : "kind",
        "type" : 8
      }, {
        "name" : "equal",
        "type" : 9
      }, {
        "name" : "gcdata",
        "type" : 14
      }, {
        "name" : "str",
        "type" : 16
      }, {
        "name" : "ptrToThis",
        "type" : 18
      } ],
      "name" : "struct{size uintptr; ptrdata uintptr; hash uint32; tflag runtime.tflag; align uint8; fieldAlign uint8; kind uint8; equal func(unsafe.Pointer, unsafe.Pointer) bool; gcdata *byte; str runtime.nameOff; ptrToThis runtime.typeOff}",
      "type" : "Struct",
      "underlying" : 4
    }, {
      "name" : "uintptr",
      "type" : "Basic",
      "underlying" : 5
    }, {
      "name" : "uint32",
      "type" : "Basic",
      "underlying" : 6
    }, {
      "local-name" : "tflag",
      "name" : "runtime.tflag",
      "package" : 0,
      "type" : "Named",
      "underlying" : 8
    }, {
      "name" : "uint8",
      "type" : "Basic",
      "underlying" : 8
    }, {
      "name" : "func(unsafe.Pointer, unsafe.Pointer) bool",
      "params" : 10,
      "recv" : -1,
      "results" : 12,
      "type" : "Signature",
      "underlying" : 9,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 11
      }, {
        "name" : "",
        "type" : 11
      } ],
      "name" : "(unsafe.Pointer, unsafe.Pointer)",
      "type" : "Tuple",
      "underlying" : 10
    }, {
      "local-name" : "Pointer",
      "name" : "unsafe.Pointer",
      "package" : 1,
      "type" : "Basic",
      "underlying" : 11
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 13
      } ],
      "name" : "(bool)",
      "type" : "Tuple",
      "underlying" : 12
    }, {
      "name" : "bool",
      "type" : "Basic",
      "underlying" : 13
    }, {
      "elem" : 15,
      "name" : "*byte",
      "type" : "Pointer",
      "underlying" : 14
    }, {
      "name" : "byte",
      "type" : "Basic",
      "underlying" : 15
    }, {
      "local-name" : "nameOff",
      "name" : "runtime.nameOff",
      "package" : 0,
      "type" : "Named",
      "underlying" : 17
    }, {
      "name" : "int32",
      "type" : "Basic",
      "underlying" : 17
    }, {
      "local-name" : "typeOff",
      "name" : "runtime.typeOff",
      "package" : 0,
      "type" : "Named",
      "underlying" : 17
    }, {
      "fields" : [ ],
      "name" : "()",
      "type" : "Tuple",
      "underlying" : 19
    }, {
      "name" : "untyped bool",
      "type" : "Basic",
      "underlying" : 20
    }, {
      "name" : "func(src unsafe.Pointer, gcbits *byte, off uintptr, size uintptr)",
      "params" : 22,
      "recv" : -1,
      "results" : 19,
      "type" : "Signature",
      "underlying" : 21,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "src",
        "type" : 11
      }, {
        "name" : "gcbits",
        "type" : 14
      }, {
        "name" : "off",
        "type" : 5
      }, {
        "name" : "size",
        "type" : 5
      } ],
      "name" : "(src unsafe.Pointer, gcbits *byte, off uintptr, size uintptr)",
      "type" : "Tuple",
      "underlying" : 22
    }, {
      "name" : "func(s string)",
      "params" : 24,
      "recv" : -1,
      "results" : 19,
      "type" : "Signature",
      "underlying" : 23,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "s",
        "type" : 25
      } ],
      "name" : "(s string)",
      "type" : "Tuple",
      "underlying" : 24
    }, {
      "name" : "string",
      "type" : "Basic",
      "underlying" : 25
    }, {
      "elem" : 27,
      "name" : "*runtime.arraytype",
      "type" : "Pointer",
      "underlying" : 26
    }, {
      "local-name" : "arraytype",
      "name" : "runtime.arraytype",
      "package" : 0,
      "type" : "Named",
      "underlying" : 28
    }, {
      "fields" : [ {
        "name" : "typ",
        "type" : 3
      }, {
        "name" : "elem",
        "type" : 2
      }, {
        "name" : "slice",
        "type" : 2
      }, {
        "name" : "len",
        "type" : 5
      } ],
      "name" : "struct{typ runtime._type; elem *runtime._type; slice *runtime._type; len uintptr}",
      "type" : "Struct",
      "underlying" : 28
    }, {
      "name" : "func(p unsafe.Pointer, x uintptr) unsafe.Pointer",
      "params" : 30,
      "recv" : -1,
      "results" : 31,
      "type" : "Signature",
      "underlying" : 29,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "p",
        "type" : 11
      }, {
        "name" : "x",
        "type" : 5
      } ],
      "name" : "(p unsafe.Pointer, x uintptr)",
      "type" : "Tuple",
      "underlying" : 30
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 11
      } ],
      "name" : "(unsafe.Pointer)",
      "type" : "Tuple",
      "underlying" : 31
    }, {
      "elem" : 33,
      "name" : "*runtime.structtype",
      "type" : "Pointer",
      "underlying" : 32
    }, {
      "local-name" : "structtype",
      "name" : "runtime.structtype",
      "package" : 0,
      "type" : "Named",
      "underlying" : 34
    }, {
      "fields" : [ {
        "name" : "typ",
        "type" : 3
      }, {
        "name" : "pkgPath",
        "type" : 35
      }, {
        "name" : "fields",
        "type" : 37
      } ],
      "name" : "struct{typ runtime._type; pkgPath runtime.name; fields []runtime.structfield}",
      "type" : "Struct",
      "underlying" : 34
    }, {
      "local-name" : "name",
      "name" : "runtime.name",
      "package" : 0,
      "type" : "Named",
      "underlying" : 36
    }, {
      "fields" : [ {
        "name" : "bytes",
        "type" : 14
      } ],
      "name" : "struct{bytes *byte}",
      "type" : "Struct",
      "underlying" : 36
    }, {
      "elem" : 38,
      "name" : "[]runtime.structfield",
      "type" : "Slice",
      "underlying" : 37
    }, {
      "local-name" : "structfield",
      "name" : "runtime.structfield",
      "package" : 0,
      "type" : "Named",
      "underlying" : 39
    }, {
      "fields" : [ {
        "name" : "name",
        "type" : 35
      }, {
        "name" : "typ",
        "type" : 2
      }, {
        "name" : "offsetAnon",
        "type" : 5
      } ],
      "name" : "struct{name runtime.name; typ *runtime._type; offsetAnon uintptr}",
      "type" : "Struct",
      "underlying" : 39
    }, {
      "name" : "int",
      "type" : "Basic",
      "underlying" : 40
    } ],
    "variables" : [ {
      "name" : "typ",
      "package" : 0,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "src",
      "package" : 0,
      "type" : 11,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "off",
      "package" : 0,
      "type" : 5,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "size",
      "package" : 0,
      "type" : 5,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "ptrdata",
      "package" : 0,
      "type" : 5,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "ptrdataSize",
      "package" : 0,
      "type" : 5,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "kind",
      "package" : 0,
      "type" : 8,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "gcdata",
      "package" : 0,
      "type" : 14,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "i",
      "package" : 0,
      "type" : 5,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "at",
      "package" : 0,
      "type" : 26,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "len",
      "package" : 0,
      "type" : 5,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "elem",
      "package" : 0,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "size",
      "package" : 0,
      "type" : 5,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "skipped",
      "package" : 0,
      "type" : 5,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "checked",
      "package" : 0,
      "type" : 5,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "st",
      "package" : 0,
      "type" : 32,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "fields",
      "package" : 0,
      "type" : 37,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "f",
      "package" : 0,
      "type" : 38,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "typ",
      "package" : 0,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "skipped",
      "package" : 0,
      "type" : 5,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "checked",
      "package" : 0,
      "type" : 5,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "_",
      "package" : 0,
      "type" : 40,
      "exported" : false,
      "embedded" : false,
      "field" : false
    } ]
  },
  "go-version" : "1.14.3"
}