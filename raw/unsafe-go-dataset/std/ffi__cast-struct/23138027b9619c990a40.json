{
  "usage" : {
    "file" : "cgocall.go",
    "label1" : "cast-struct",
    "label2" : "ffi",
    "line" : "561",
    "module" : "std",
    "pkg" : "runtime",
    "project" : "kubernetes/kubernetes",
    "snippet" : "st := (*structtype)(unsafe.Pointer(t))",
    "version" : "std"
  },
  "cfg" : {
    "blocks" : [ {
      "update-vars" : [ ],
      "successors" : [ 2 ],
      "in-vars" : [ 1, 4, 3, 0, 2 ],
      "exit" : false,
      "out-vars" : [ 0, 2, 1, 4, 3 ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[entry]",
      "entry" : true,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ ],
      "in-vars" : [ ],
      "exit" : true,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[exit]",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 3, 4 ],
      "in-vars" : [ 1, 4, 3, 0, 2 ],
      "exit" : false,
      "out-vars" : [ 0, 2, 1, 4, 3 ],
      "decl-vars" : [ ],
      "line-start" : 482,
      "ast" : {
        "condition" : {
          "go-type" : 21,
          "kind" : "expression",
          "left" : {
            "go-type" : 21,
            "kind" : "expression",
            "left" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "ptrdata",
                "variable" : 5
              },
              "go-type" : 5,
              "kind" : "expression",
              "target" : {
                "go-type" : 2,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "t",
                  "variable" : 0
                }
              },
              "type" : "selector"
            },
            "operator" : "==",
            "right" : {
              "go-type" : 5,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "0"
              }
            },
            "type" : "binary"
          },
          "operator" : "||",
          "right" : {
            "go-type" : 21,
            "kind" : "expression",
            "left" : {
              "go-type" : 11,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "p",
                "variable" : 1
              }
            },
            "operator" : "==",
            "right" : {
              "go-type" : 11,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Nil",
                "kind" : "ident",
                "value" : "nil"
              }
            },
            "type" : "binary"
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 485,
      "code" : "if t.ptrdata == 0 || p == nil {\n\n\treturn\n}",
      "entry" : false,
      "use-vars" : [ 0, 1 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 484,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ ]
      },
      "assign-vars" : [ ],
      "line-end" : 484,
      "code" : "return",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 5, 7, 19, 21, 27, 39, 54, 60, 71 ],
      "in-vars" : [ 0, 2, 1, 4, 3 ],
      "exit" : false,
      "out-vars" : [ 1, 4, 3, 0, 2 ],
      "decl-vars" : [ ],
      "line-start" : 487,
      "ast" : {
        "condition" : {
          "go-type" : 8,
          "kind" : "expression",
          "left" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "kind",
              "variable" : 6
            },
            "go-type" : 8,
            "kind" : "expression",
            "target" : {
              "go-type" : 2,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "t",
                "variable" : 0
              }
            },
            "type" : "selector"
          },
          "operator" : "&",
          "right" : {
            "go-type" : 8,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "31"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "switch"
      },
      "assign-vars" : [ ],
      "line-end" : 591,
      "code" : "switch t.kind & kindMask {\ndefault:\n\tthrow(\"can't happen\")\ncase kindArray:\n\tat := (*arraytype)(unsafe.Pointer(t))\n\tif !indir {\n\t\tif at.len != 1 {\n\t\t\tthrow(\"can't happen\")\n\t\t}\n\t\tcgoCheckArg(at.elem, p, at.elem.kind&kindDirectIface == 0, top, msg)\n\t\treturn\n\t}\n\tfor i := uintptr(0); i < at.len; i++ {\n\t\tcgoCheckArg(at.elem, p, true, top, msg)\n\t\tp = add(p, at.elem.size)\n\t}\ncase kindChan, kindMap:\n\n\tpanic(errorString(msg))\ncase kindFunc:\n\tif indir {\n\t\tp = *(*unsafe.Pointer)(p)\n\t}\n\tif !cgoIsGoPointer(p) {\n\t\treturn\n\t}\n\tpanic(errorString(msg))\ncase kindInterface:\n\tit := *(**_type)(p)\n\tif it == nil {\n\t\treturn\n\t}\n\n\tif inheap(uintptr(unsafe.Pointer(it))) {\n\t\tpanic(errorString(msg))\n\t}\n\tp = *(*unsafe.Pointer)(add(p, sys.PtrSize))\n\tif !cgoIsGoPointer(p) {\n\t\treturn\n\t}\n\tif !top {\n\t\tpanic(errorString(msg))\n\t}\n\tcgoCheckArg(it, p, it.kind&kindDirectIface == 0, false, msg)\ncase kindSlice:\n\tst := (*slicetype)(unsafe.Pointer(t))\n\ts := (*slice)(p)\n\tp = s.array\n\tif p == nil || !cgoIsGoPointer(p) {\n\t\treturn\n\t}\n\tif !top {\n\t\tpanic(errorString(msg))\n\t}\n\tif st.elem.ptrdata == 0 {\n\t\treturn\n\t}\n\tfor i := 0; i < s.cap; i++ {\n\t\tcgoCheckArg(st.elem, p, true, false, msg)\n\t\tp = add(p, st.elem.size)\n\t}\ncase kindString:\n\tss := (*stringStruct)(p)\n\tif !cgoIsGoPointer(ss.str) {\n\t\treturn\n\t}\n\tif !top {\n\t\tpanic(errorString(msg))\n\t}\ncase kindStruct:\n\tst := (*structtype)(unsafe.Pointer(t))\n\tif !indir {\n\t\tif len(st.fields) != 1 {\n\t\t\tthrow(\"can't happen\")\n\t\t}\n\t\tcgoCheckArg(st.fields[0].typ, p, st.fields[0].typ.kind&kindDirectIface == 0, top, msg)\n\t\treturn\n\t}\n\tfor _, f := range st.fields {\n\t\tif f.typ.ptrdata == 0 {\n\t\t\tcontinue\n\t\t}\n\t\tcgoCheckArg(f.typ, add(p, f.offset()), true, top, msg)\n\t}\ncase kindPtr, kindUnsafePointer:\n\tif indir {\n\t\tp = *(*unsafe.Pointer)(p)\n\t\tif p == nil {\n\t\t\treturn\n\t\t}\n\t}\n\n\tif !cgoIsGoPointer(p) {\n\t\treturn\n\t}\n\tif !top {\n\t\tpanic(errorString(msg))\n\t}\n\n\tcgoCheckUnknownPointer(p, msg)\n}",
      "entry" : false,
      "use-vars" : [ 0 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 6 ],
      "in-vars" : [ ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 488,
      "ast" : {
        "expressions" : [ ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 489,
      "code" : "default:\n\tthrow(\"can't happen\")",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 489,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 19,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "can't happen"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 22,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 1,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "throw"
            }
          },
          "go-type" : 20,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 489,
      "code" : "throw(\"can't happen\")",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 8 ],
      "in-vars" : [ 0, 2, 1, 4, 3 ],
      "exit" : false,
      "out-vars" : [ 1, 4, 3, 0, 2 ],
      "decl-vars" : [ ],
      "line-start" : 490,
      "ast" : {
        "expressions" : [ {
          "go-type" : 8,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "17"
          }
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 502,
      "code" : "case kindArray:\n\tat := (*arraytype)(unsafe.Pointer(t))\n\tif !indir {\n\t\tif at.len != 1 {\n\t\t\tthrow(\"can't happen\")\n\t\t}\n\t\tcgoCheckArg(at.elem, p, at.elem.kind&kindDirectIface == 0, top, msg)\n\t\treturn\n\t}\n\tfor i := uintptr(0); i < at.len; i++ {\n\t\tcgoCheckArg(at.elem, p, true, top, msg)\n\t\tp = add(p, at.elem.size)\n\t}",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 9 ],
      "in-vars" : [ 2, 1, 4, 3, 0 ],
      "exit" : false,
      "out-vars" : [ 1, 4, 3, 2, 7 ],
      "decl-vars" : [ 7 ],
      "line-start" : 491,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "at"
          }
        } ],
        "right" : [ {
          "coerced-to" : {
            "contained" : {
              "go-type" : 25,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 25,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "arraytype"
              }
            },
            "go-type" : 24,
            "kind" : "type",
            "type" : "pointer"
          },
          "go-type" : 24,
          "kind" : "expression",
          "target" : {
            "coerced-to" : {
              "go-type" : 11,
              "kind" : "type",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 1,
                "value" : "unsafe"
              },
              "type" : "identifier",
              "value" : {
                "go-type" : 11,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "Pointer"
              }
            },
            "go-type" : 11,
            "kind" : "expression",
            "target" : {
              "go-type" : 2,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "t",
                "variable" : 0
              }
            },
            "type" : "cast"
          },
          "type" : "cast"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 491,
      "code" : "at := (*arraytype)(unsafe.Pointer(t))",
      "entry" : false,
      "use-vars" : [ 0 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 10, 15 ],
      "in-vars" : [ 1, 4, 3, 2, 7 ],
      "exit" : false,
      "out-vars" : [ 1, 4, 3, 7 ],
      "decl-vars" : [ ],
      "line-start" : 492,
      "ast" : {
        "condition" : {
          "go-type" : 13,
          "kind" : "expression",
          "operator" : "!",
          "target" : {
            "go-type" : 13,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "indir",
              "variable" : 2
            }
          },
          "type" : "unary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 498,
      "code" : "if !indir {\n\tif at.len != 1 {\n\t\tthrow(\"can't happen\")\n\t}\n\tcgoCheckArg(at.elem, p, at.elem.kind&kindDirectIface == 0, top, msg)\n\treturn\n}",
      "entry" : false,
      "use-vars" : [ 2 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 11, 12 ],
      "in-vars" : [ 1, 4, 3, 7 ],
      "exit" : false,
      "out-vars" : [ 4, 3, 7, 1 ],
      "decl-vars" : [ ],
      "line-start" : 493,
      "ast" : {
        "condition" : {
          "go-type" : 21,
          "kind" : "expression",
          "left" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "len",
              "variable" : 8
            },
            "go-type" : 5,
            "kind" : "expression",
            "target" : {
              "go-type" : 24,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "at",
                "variable" : 7
              }
            },
            "type" : "selector"
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 5,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "1"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 495,
      "code" : "if at.len != 1 {\n\tthrow(\"can't happen\")\n}",
      "entry" : false,
      "use-vars" : [ 7 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 12 ],
      "in-vars" : [ 1, 4, 3, 7 ],
      "exit" : false,
      "out-vars" : [ 4, 3, 7, 1 ],
      "decl-vars" : [ ],
      "line-start" : 494,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 19,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "can't happen"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 22,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 1,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "throw"
            }
          },
          "go-type" : 20,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 494,
      "code" : "throw(\"can't happen\")",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 13 ],
      "in-vars" : [ 1, 4, 3, 7 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 496,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "elem",
              "variable" : 9
            },
            "go-type" : 2,
            "kind" : "expression",
            "target" : {
              "go-type" : 24,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "at",
                "variable" : 7
              }
            },
            "type" : "selector"
          }, {
            "go-type" : 11,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "p",
              "variable" : 1
            }
          }, {
            "go-type" : 13,
            "kind" : "expression",
            "left" : {
              "go-type" : 8,
              "kind" : "expression",
              "left" : {
                "field" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "kind",
                  "variable" : 6
                },
                "go-type" : 8,
                "kind" : "expression",
                "target" : {
                  "field" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "elem",
                    "variable" : 9
                  },
                  "go-type" : 2,
                  "kind" : "expression",
                  "target" : {
                    "go-type" : 24,
                    "kind" : "expression",
                    "type" : "identifier",
                    "value" : {
                      "ident-kind" : "Var",
                      "kind" : "ident",
                      "value" : "at",
                      "variable" : 7
                    }
                  },
                  "type" : "selector"
                },
                "type" : "selector"
              },
              "operator" : "&",
              "right" : {
                "go-type" : 8,
                "kind" : "constant",
                "value" : {
                  "type" : "INT",
                  "value" : "32"
                }
              },
              "type" : "binary"
            },
            "operator" : "==",
            "right" : {
              "go-type" : 8,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "0"
              }
            },
            "type" : "binary"
          }, {
            "go-type" : 13,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "top",
              "variable" : 3
            }
          }, {
            "go-type" : 19,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "msg",
              "variable" : 4
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 0,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 0,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "cgoCheckArg"
            }
          },
          "go-type" : 20,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 496,
      "code" : "cgoCheckArg(at.elem, p, at.elem.kind&kindDirectIface == 0, top, msg)",
      "entry" : false,
      "use-vars" : [ 4, 3, 7, 1 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 497,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ ]
      },
      "assign-vars" : [ ],
      "line-end" : 497,
      "code" : "return",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 17, 1 ],
      "in-vars" : [ 1, 4, 3, 7, 10 ],
      "exit" : false,
      "out-vars" : [ 1, 4, 3, 7, 10 ],
      "decl-vars" : [ ],
      "line-start" : 499,
      "ast" : {
        "condition" : {
          "go-type" : 21,
          "kind" : "expression",
          "left" : {
            "go-type" : 5,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "i",
              "variable" : 10
            }
          },
          "operator" : "<",
          "right" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "len",
              "variable" : 8
            },
            "go-type" : 5,
            "kind" : "expression",
            "target" : {
              "go-type" : 24,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "at",
                "variable" : 7
              }
            },
            "type" : "selector"
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "for"
      },
      "assign-vars" : [ ],
      "line-end" : 502,
      "code" : "for i := uintptr(0); i < at.len; i++ {\n\tcgoCheckArg(at.elem, p, true, top, msg)\n\tp = add(p, at.elem.size)\n}",
      "entry" : false,
      "use-vars" : [ 10, 7 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 14 ],
      "in-vars" : [ 7, 1, 4, 3 ],
      "exit" : false,
      "out-vars" : [ 3, 7, 10, 1, 4 ],
      "decl-vars" : [ 10 ],
      "line-start" : 499,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "i"
          }
        } ],
        "right" : [ {
          "go-type" : 5,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "0"
          }
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 499,
      "code" : "i := uintptr(0)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ 10 ],
      "successors" : [ 14 ],
      "in-vars" : [ 1, 4, 3, 7, 10 ],
      "exit" : false,
      "out-vars" : [ 1, 4, 3, 7, 10 ],
      "decl-vars" : [ ],
      "line-start" : 499,
      "ast" : {
        "kind" : "statement",
        "operation" : "++",
        "target" : {
          "go-type" : 5,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "i",
            "variable" : 10
          }
        },
        "type" : "crement"
      },
      "assign-vars" : [ 10 ],
      "line-end" : 499,
      "code" : "i++",
      "entry" : false,
      "use-vars" : [ 10 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 18 ],
      "in-vars" : [ 3, 7, 10, 1, 4 ],
      "exit" : false,
      "out-vars" : [ 10, 1, 4, 3, 7 ],
      "decl-vars" : [ ],
      "line-start" : 500,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "elem",
              "variable" : 9
            },
            "go-type" : 2,
            "kind" : "expression",
            "target" : {
              "go-type" : 24,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "at",
                "variable" : 7
              }
            },
            "type" : "selector"
          }, {
            "go-type" : 11,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "p",
              "variable" : 1
            }
          }, {
            "go-type" : 13,
            "kind" : "constant",
            "value" : {
              "type" : "BOOL",
              "value" : "true"
            }
          }, {
            "go-type" : 13,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "top",
              "variable" : 3
            }
          }, {
            "go-type" : 19,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "msg",
              "variable" : 4
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 0,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 0,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "cgoCheckArg"
            }
          },
          "go-type" : 20,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 500,
      "code" : "cgoCheckArg(at.elem, p, true, top, msg)",
      "entry" : false,
      "use-vars" : [ 7, 1, 3, 4 ]
    }, {
      "update-vars" : [ 1 ],
      "successors" : [ 16 ],
      "in-vars" : [ 10, 1, 4, 3, 7 ],
      "exit" : false,
      "out-vars" : [ 1, 4, 3, 7, 10 ],
      "decl-vars" : [ ],
      "line-start" : 501,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 11,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "p",
            "variable" : 1
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 11,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "p",
              "variable" : 1
            }
          }, {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "size",
              "variable" : 11
            },
            "go-type" : 5,
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "elem",
                "variable" : 9
              },
              "go-type" : 2,
              "kind" : "expression",
              "target" : {
                "go-type" : 24,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "at",
                  "variable" : 7
                }
              },
              "type" : "selector"
            },
            "type" : "selector"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 27,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 2,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "add"
            }
          },
          "go-type" : 11,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 1 ],
      "line-end" : 501,
      "code" : "p = add(p, at.elem.size)",
      "entry" : false,
      "use-vars" : [ 7, 1 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 20 ],
      "in-vars" : [ 4 ],
      "exit" : false,
      "out-vars" : [ 4 ],
      "decl-vars" : [ ],
      "line-start" : 503,
      "ast" : {
        "expressions" : [ {
          "go-type" : 8,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "18"
          }
        }, {
          "go-type" : 8,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "21"
          }
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 507,
      "code" : "case kindChan, kindMap:\n\n\tpanic(errorString(msg))",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 4 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 507,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "coerced-to" : {
              "go-type" : 33,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 33,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "errorString"
              }
            },
            "go-type" : 33,
            "kind" : "expression",
            "target" : {
              "go-type" : 19,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "msg",
                "variable" : 4
              }
            },
            "type" : "cast"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 30,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Builtin",
              "kind" : "ident",
              "value" : "panic"
            }
          },
          "go-type" : 20,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 507,
      "code" : "panic(errorString(msg))",
      "entry" : false,
      "use-vars" : [ 4 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 22 ],
      "in-vars" : [ 1, 4, 2 ],
      "exit" : false,
      "out-vars" : [ 1, 4, 2 ],
      "decl-vars" : [ ],
      "line-start" : 508,
      "ast" : {
        "expressions" : [ {
          "go-type" : 8,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "19"
          }
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 515,
      "code" : "case kindFunc:\n\tif indir {\n\t\tp = *(*unsafe.Pointer)(p)\n\t}\n\tif !cgoIsGoPointer(p) {\n\t\treturn\n\t}\n\tpanic(errorString(msg))",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 23, 24 ],
      "in-vars" : [ 1, 4, 2 ],
      "exit" : false,
      "out-vars" : [ 1, 4 ],
      "decl-vars" : [ ],
      "line-start" : 509,
      "ast" : {
        "condition" : {
          "go-type" : 13,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "indir",
            "variable" : 2
          }
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 511,
      "code" : "if indir {\n\tp = *(*unsafe.Pointer)(p)\n}",
      "entry" : false,
      "use-vars" : [ 2 ]
    }, {
      "update-vars" : [ 1 ],
      "successors" : [ 24 ],
      "in-vars" : [ 1, 4 ],
      "exit" : false,
      "out-vars" : [ 1, 4 ],
      "decl-vars" : [ ],
      "line-start" : 510,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 11,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "p",
            "variable" : 1
          }
        } ],
        "right" : [ {
          "go-type" : 11,
          "kind" : "expression",
          "target" : {
            "coerced-to" : {
              "contained" : {
                "go-type" : 11,
                "kind" : "type",
                "qualifier" : {
                  "ident-kind" : "PkgName",
                  "kind" : "ident",
                  "package" : 1,
                  "value" : "unsafe"
                },
                "type" : "identifier",
                "value" : {
                  "go-type" : 11,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "Pointer"
                }
              },
              "go-type" : 34,
              "kind" : "type",
              "type" : "pointer"
            },
            "go-type" : 34,
            "kind" : "expression",
            "target" : {
              "go-type" : 11,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "p",
                "variable" : 1
              }
            },
            "type" : "cast"
          },
          "type" : "star"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 1 ],
      "line-end" : 510,
      "code" : "p = *(*unsafe.Pointer)(p)",
      "entry" : false,
      "use-vars" : [ 1 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 25, 26 ],
      "in-vars" : [ 1, 4 ],
      "exit" : false,
      "out-vars" : [ 4 ],
      "decl-vars" : [ ],
      "line-start" : 512,
      "ast" : {
        "condition" : {
          "go-type" : 13,
          "kind" : "expression",
          "operator" : "!",
          "target" : {
            "arguments" : [ {
              "go-type" : 11,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "p",
                "variable" : 1
              }
            } ],
            "ellipsis" : false,
            "function" : {
              "go-type" : 35,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "function" : 3,
                "ident-kind" : "Func",
                "kind" : "ident",
                "value" : "cgoIsGoPointer"
              }
            },
            "go-type" : 13,
            "kind" : "expression",
            "type" : "call"
          },
          "type" : "unary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 514,
      "code" : "if !cgoIsGoPointer(p) {\n\treturn\n}",
      "entry" : false,
      "use-vars" : [ 1 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 513,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ ]
      },
      "assign-vars" : [ ],
      "line-end" : 513,
      "code" : "return",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 4 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 515,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "coerced-to" : {
              "go-type" : 33,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 33,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "errorString"
              }
            },
            "go-type" : 33,
            "kind" : "expression",
            "target" : {
              "go-type" : 19,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "msg",
                "variable" : 4
              }
            },
            "type" : "cast"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 30,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Builtin",
              "kind" : "ident",
              "value" : "panic"
            }
          },
          "go-type" : 20,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 515,
      "code" : "panic(errorString(msg))",
      "entry" : false,
      "use-vars" : [ 4 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 28 ],
      "in-vars" : [ 3, 1, 4 ],
      "exit" : false,
      "out-vars" : [ 1, 4, 3 ],
      "decl-vars" : [ ],
      "line-start" : 516,
      "ast" : {
        "expressions" : [ {
          "go-type" : 8,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "20"
          }
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 534,
      "code" : "case kindInterface:\n\tit := *(**_type)(p)\n\tif it == nil {\n\t\treturn\n\t}\n\n\tif inheap(uintptr(unsafe.Pointer(it))) {\n\t\tpanic(errorString(msg))\n\t}\n\tp = *(*unsafe.Pointer)(add(p, sys.PtrSize))\n\tif !cgoIsGoPointer(p) {\n\t\treturn\n\t}\n\tif !top {\n\t\tpanic(errorString(msg))\n\t}\n\tcgoCheckArg(it, p, it.kind&kindDirectIface == 0, false, msg)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 29 ],
      "in-vars" : [ 1, 4, 3 ],
      "exit" : false,
      "out-vars" : [ 1, 12, 4, 3 ],
      "decl-vars" : [ 12 ],
      "line-start" : 517,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "it"
          }
        } ],
        "right" : [ {
          "go-type" : 2,
          "kind" : "expression",
          "target" : {
            "coerced-to" : {
              "contained" : {
                "contained" : {
                  "go-type" : 3,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 3,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "_type"
                  }
                },
                "go-type" : 2,
                "kind" : "type",
                "type" : "pointer"
              },
              "go-type" : 37,
              "kind" : "type",
              "type" : "pointer"
            },
            "go-type" : 37,
            "kind" : "expression",
            "target" : {
              "go-type" : 11,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "p",
                "variable" : 1
              }
            },
            "type" : "cast"
          },
          "type" : "star"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 517,
      "code" : "it := *(**_type)(p)",
      "entry" : false,
      "use-vars" : [ 1 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 30, 31 ],
      "in-vars" : [ 12, 4, 3, 1 ],
      "exit" : false,
      "out-vars" : [ 1, 12, 4, 3 ],
      "decl-vars" : [ ],
      "line-start" : 518,
      "ast" : {
        "condition" : {
          "go-type" : 21,
          "kind" : "expression",
          "left" : {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "it",
              "variable" : 12
            }
          },
          "operator" : "==",
          "right" : {
            "go-type" : 38,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Nil",
              "kind" : "ident",
              "value" : "nil"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 520,
      "code" : "if it == nil {\n\treturn\n}",
      "entry" : false,
      "use-vars" : [ 12 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 519,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ ]
      },
      "assign-vars" : [ ],
      "line-end" : 519,
      "code" : "return",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 32, 33 ],
      "in-vars" : [ 1, 12, 4, 3 ],
      "exit" : false,
      "out-vars" : [ 1, 12, 4, 3 ],
      "decl-vars" : [ ],
      "line-start" : 524,
      "ast" : {
        "condition" : {
          "arguments" : [ {
            "coerced-to" : {
              "go-type" : 5,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 5,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "uintptr"
              }
            },
            "go-type" : 5,
            "kind" : "expression",
            "target" : {
              "coerced-to" : {
                "go-type" : 11,
                "kind" : "type",
                "qualifier" : {
                  "ident-kind" : "PkgName",
                  "kind" : "ident",
                  "package" : 1,
                  "value" : "unsafe"
                },
                "type" : "identifier",
                "value" : {
                  "go-type" : 11,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "Pointer"
                }
              },
              "go-type" : 11,
              "kind" : "expression",
              "target" : {
                "go-type" : 2,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "it",
                  "variable" : 12
                }
              },
              "type" : "cast"
            },
            "type" : "cast"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 39,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 4,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "inheap"
            }
          },
          "go-type" : 13,
          "kind" : "expression",
          "type" : "call"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 526,
      "code" : "if inheap(uintptr(unsafe.Pointer(it))) {\n\tpanic(errorString(msg))\n}",
      "entry" : false,
      "use-vars" : [ 12 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 33 ],
      "in-vars" : [ 1, 12, 4, 3 ],
      "exit" : false,
      "out-vars" : [ 1, 12, 4, 3 ],
      "decl-vars" : [ ],
      "line-start" : 525,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "coerced-to" : {
              "go-type" : 33,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 33,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "errorString"
              }
            },
            "go-type" : 33,
            "kind" : "expression",
            "target" : {
              "go-type" : 19,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "msg",
                "variable" : 4
              }
            },
            "type" : "cast"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 30,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Builtin",
              "kind" : "ident",
              "value" : "panic"
            }
          },
          "go-type" : 20,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 525,
      "code" : "panic(errorString(msg))",
      "entry" : false,
      "use-vars" : [ 4 ]
    }, {
      "update-vars" : [ 1 ],
      "successors" : [ 34 ],
      "in-vars" : [ 1, 12, 4, 3 ],
      "exit" : false,
      "out-vars" : [ 12, 4, 3, 1 ],
      "decl-vars" : [ ],
      "line-start" : 527,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 11,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "p",
            "variable" : 1
          }
        } ],
        "right" : [ {
          "go-type" : 11,
          "kind" : "expression",
          "target" : {
            "coerced-to" : {
              "contained" : {
                "go-type" : 11,
                "kind" : "type",
                "qualifier" : {
                  "ident-kind" : "PkgName",
                  "kind" : "ident",
                  "package" : 1,
                  "value" : "unsafe"
                },
                "type" : "identifier",
                "value" : {
                  "go-type" : 11,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "Pointer"
                }
              },
              "go-type" : 34,
              "kind" : "type",
              "type" : "pointer"
            },
            "go-type" : 34,
            "kind" : "expression",
            "target" : {
              "arguments" : [ {
                "go-type" : 11,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "p",
                  "variable" : 1
                }
              }, {
                "go-type" : 5,
                "kind" : "constant",
                "value" : {
                  "type" : "INT",
                  "value" : "8"
                }
              } ],
              "ellipsis" : false,
              "function" : {
                "go-type" : 27,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "function" : 2,
                  "ident-kind" : "Func",
                  "kind" : "ident",
                  "value" : "add"
                }
              },
              "go-type" : 11,
              "kind" : "expression",
              "type" : "call"
            },
            "type" : "cast"
          },
          "type" : "star"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 1 ],
      "line-end" : 527,
      "code" : "p = *(*unsafe.Pointer)(add(p, sys.PtrSize))",
      "entry" : false,
      "use-vars" : [ 1 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 35, 36 ],
      "in-vars" : [ 1, 12, 4, 3 ],
      "exit" : false,
      "out-vars" : [ 12, 4, 3, 1 ],
      "decl-vars" : [ ],
      "line-start" : 528,
      "ast" : {
        "condition" : {
          "go-type" : 13,
          "kind" : "expression",
          "operator" : "!",
          "target" : {
            "arguments" : [ {
              "go-type" : 11,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "p",
                "variable" : 1
              }
            } ],
            "ellipsis" : false,
            "function" : {
              "go-type" : 35,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "function" : 3,
                "ident-kind" : "Func",
                "kind" : "ident",
                "value" : "cgoIsGoPointer"
              }
            },
            "go-type" : 13,
            "kind" : "expression",
            "type" : "call"
          },
          "type" : "unary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 530,
      "code" : "if !cgoIsGoPointer(p) {\n\treturn\n}",
      "entry" : false,
      "use-vars" : [ 1 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 529,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ ]
      },
      "assign-vars" : [ ],
      "line-end" : 529,
      "code" : "return",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 37, 38 ],
      "in-vars" : [ 1, 12, 4, 3 ],
      "exit" : false,
      "out-vars" : [ 1, 12, 4 ],
      "decl-vars" : [ ],
      "line-start" : 531,
      "ast" : {
        "condition" : {
          "go-type" : 13,
          "kind" : "expression",
          "operator" : "!",
          "target" : {
            "go-type" : 13,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "top",
              "variable" : 3
            }
          },
          "type" : "unary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 533,
      "code" : "if !top {\n\tpanic(errorString(msg))\n}",
      "entry" : false,
      "use-vars" : [ 3 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 38 ],
      "in-vars" : [ 12, 4, 1 ],
      "exit" : false,
      "out-vars" : [ 12, 4, 1 ],
      "decl-vars" : [ ],
      "line-start" : 532,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "coerced-to" : {
              "go-type" : 33,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 33,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "errorString"
              }
            },
            "go-type" : 33,
            "kind" : "expression",
            "target" : {
              "go-type" : 19,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "msg",
                "variable" : 4
              }
            },
            "type" : "cast"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 30,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Builtin",
              "kind" : "ident",
              "value" : "panic"
            }
          },
          "go-type" : 20,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 532,
      "code" : "panic(errorString(msg))",
      "entry" : false,
      "use-vars" : [ 4 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 1, 12, 4 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 534,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "it",
              "variable" : 12
            }
          }, {
            "go-type" : 11,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "p",
              "variable" : 1
            }
          }, {
            "go-type" : 13,
            "kind" : "expression",
            "left" : {
              "go-type" : 8,
              "kind" : "expression",
              "left" : {
                "field" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "kind",
                  "variable" : 6
                },
                "go-type" : 8,
                "kind" : "expression",
                "target" : {
                  "go-type" : 2,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "it",
                    "variable" : 12
                  }
                },
                "type" : "selector"
              },
              "operator" : "&",
              "right" : {
                "go-type" : 8,
                "kind" : "constant",
                "value" : {
                  "type" : "INT",
                  "value" : "32"
                }
              },
              "type" : "binary"
            },
            "operator" : "==",
            "right" : {
              "go-type" : 8,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "0"
              }
            },
            "type" : "binary"
          }, {
            "go-type" : 13,
            "kind" : "constant",
            "value" : {
              "type" : "BOOL",
              "value" : "false"
            }
          }, {
            "go-type" : 19,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "msg",
              "variable" : 4
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 0,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 0,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "cgoCheckArg"
            }
          },
          "go-type" : 20,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 534,
      "code" : "cgoCheckArg(it, p, it.kind&kindDirectIface == 0, false, msg)",
      "entry" : false,
      "use-vars" : [ 4, 12, 1 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 40 ],
      "in-vars" : [ 0, 1, 4, 3 ],
      "exit" : false,
      "out-vars" : [ 0, 1, 4, 3 ],
      "decl-vars" : [ ],
      "line-start" : 535,
      "ast" : {
        "expressions" : [ {
          "go-type" : 8,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "23"
          }
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 551,
      "code" : "case kindSlice:\n\tst := (*slicetype)(unsafe.Pointer(t))\n\ts := (*slice)(p)\n\tp = s.array\n\tif p == nil || !cgoIsGoPointer(p) {\n\t\treturn\n\t}\n\tif !top {\n\t\tpanic(errorString(msg))\n\t}\n\tif st.elem.ptrdata == 0 {\n\t\treturn\n\t}\n\tfor i := 0; i < s.cap; i++ {\n\t\tcgoCheckArg(st.elem, p, true, false, msg)\n\t\tp = add(p, st.elem.size)\n\t}",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 41 ],
      "in-vars" : [ 1, 4, 3, 0 ],
      "exit" : false,
      "out-vars" : [ 3, 15, 1, 4 ],
      "decl-vars" : [ 15 ],
      "line-start" : 536,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "st"
          }
        } ],
        "right" : [ {
          "coerced-to" : {
            "contained" : {
              "go-type" : 42,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 42,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "slicetype"
              }
            },
            "go-type" : 41,
            "kind" : "type",
            "type" : "pointer"
          },
          "go-type" : 41,
          "kind" : "expression",
          "target" : {
            "coerced-to" : {
              "go-type" : 11,
              "kind" : "type",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 1,
                "value" : "unsafe"
              },
              "type" : "identifier",
              "value" : {
                "go-type" : 11,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "Pointer"
              }
            },
            "go-type" : 11,
            "kind" : "expression",
            "target" : {
              "go-type" : 2,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "t",
                "variable" : 0
              }
            },
            "type" : "cast"
          },
          "type" : "cast"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 536,
      "code" : "st := (*slicetype)(unsafe.Pointer(t))",
      "entry" : false,
      "use-vars" : [ 0 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 42 ],
      "in-vars" : [ 1, 4, 3, 15 ],
      "exit" : false,
      "out-vars" : [ 4, 3, 15, 13 ],
      "decl-vars" : [ 13 ],
      "line-start" : 537,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "s"
          }
        } ],
        "right" : [ {
          "coerced-to" : {
            "contained" : {
              "go-type" : 45,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 45,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "slice"
              }
            },
            "go-type" : 44,
            "kind" : "type",
            "type" : "pointer"
          },
          "go-type" : 44,
          "kind" : "expression",
          "target" : {
            "go-type" : 11,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "p",
              "variable" : 1
            }
          },
          "type" : "cast"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 537,
      "code" : "s := (*slice)(p)",
      "entry" : false,
      "use-vars" : [ 1 ]
    }, {
      "update-vars" : [ 1 ],
      "successors" : [ 43 ],
      "in-vars" : [ 4, 3, 15, 13 ],
      "exit" : false,
      "out-vars" : [ 1, 4, 3, 15, 13 ],
      "decl-vars" : [ ],
      "line-start" : 538,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 11,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "p",
            "variable" : 1
          }
        } ],
        "right" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "array",
            "variable" : 14
          },
          "go-type" : 11,
          "kind" : "expression",
          "target" : {
            "go-type" : 44,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "s",
              "variable" : 13
            }
          },
          "type" : "selector"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 1 ],
      "line-end" : 538,
      "code" : "p = s.array",
      "entry" : false,
      "use-vars" : [ 13 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 44, 45 ],
      "in-vars" : [ 15, 13, 1, 4, 3 ],
      "exit" : false,
      "out-vars" : [ 15, 13, 1, 4, 3 ],
      "decl-vars" : [ ],
      "line-start" : 539,
      "ast" : {
        "condition" : {
          "go-type" : 13,
          "kind" : "expression",
          "left" : {
            "go-type" : 13,
            "kind" : "expression",
            "left" : {
              "go-type" : 11,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "p",
                "variable" : 1
              }
            },
            "operator" : "==",
            "right" : {
              "go-type" : 11,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Nil",
                "kind" : "ident",
                "value" : "nil"
              }
            },
            "type" : "binary"
          },
          "operator" : "||",
          "right" : {
            "go-type" : 13,
            "kind" : "expression",
            "operator" : "!",
            "target" : {
              "arguments" : [ {
                "go-type" : 11,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "p",
                  "variable" : 1
                }
              } ],
              "ellipsis" : false,
              "function" : {
                "go-type" : 35,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "function" : 3,
                  "ident-kind" : "Func",
                  "kind" : "ident",
                  "value" : "cgoIsGoPointer"
                }
              },
              "go-type" : 13,
              "kind" : "expression",
              "type" : "call"
            },
            "type" : "unary"
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 541,
      "code" : "if p == nil || !cgoIsGoPointer(p) {\n\treturn\n}",
      "entry" : false,
      "use-vars" : [ 1 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 540,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ ]
      },
      "assign-vars" : [ ],
      "line-end" : 540,
      "code" : "return",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 46, 47 ],
      "in-vars" : [ 1, 4, 3, 15, 13 ],
      "exit" : false,
      "out-vars" : [ 1, 4, 15, 13 ],
      "decl-vars" : [ ],
      "line-start" : 542,
      "ast" : {
        "condition" : {
          "go-type" : 13,
          "kind" : "expression",
          "operator" : "!",
          "target" : {
            "go-type" : 13,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "top",
              "variable" : 3
            }
          },
          "type" : "unary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 544,
      "code" : "if !top {\n\tpanic(errorString(msg))\n}",
      "entry" : false,
      "use-vars" : [ 3 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 47 ],
      "in-vars" : [ 13, 1, 4, 15 ],
      "exit" : false,
      "out-vars" : [ 4, 15, 13, 1 ],
      "decl-vars" : [ ],
      "line-start" : 543,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "coerced-to" : {
              "go-type" : 33,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 33,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "errorString"
              }
            },
            "go-type" : 33,
            "kind" : "expression",
            "target" : {
              "go-type" : 19,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "msg",
                "variable" : 4
              }
            },
            "type" : "cast"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 30,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Builtin",
              "kind" : "ident",
              "value" : "panic"
            }
          },
          "go-type" : 20,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 543,
      "code" : "panic(errorString(msg))",
      "entry" : false,
      "use-vars" : [ 4 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 48, 50 ],
      "in-vars" : [ 1, 4, 15, 13 ],
      "exit" : false,
      "out-vars" : [ 1, 4, 15, 13 ],
      "decl-vars" : [ ],
      "line-start" : 545,
      "ast" : {
        "condition" : {
          "go-type" : 21,
          "kind" : "expression",
          "left" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "ptrdata",
              "variable" : 5
            },
            "go-type" : 5,
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "elem",
                "variable" : 16
              },
              "go-type" : 2,
              "kind" : "expression",
              "target" : {
                "go-type" : 41,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "st",
                  "variable" : 15
                }
              },
              "type" : "selector"
            },
            "type" : "selector"
          },
          "operator" : "==",
          "right" : {
            "go-type" : 5,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 547,
      "code" : "if st.elem.ptrdata == 0 {\n\treturn\n}",
      "entry" : false,
      "use-vars" : [ 15 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 546,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ ]
      },
      "assign-vars" : [ ],
      "line-end" : 546,
      "code" : "return",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 52, 1 ],
      "in-vars" : [ 4, 15, 17, 13, 1 ],
      "exit" : false,
      "out-vars" : [ 15, 17, 13, 1, 4 ],
      "decl-vars" : [ ],
      "line-start" : 548,
      "ast" : {
        "condition" : {
          "go-type" : 21,
          "kind" : "expression",
          "left" : {
            "go-type" : 47,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "i",
              "variable" : 17
            }
          },
          "operator" : "<",
          "right" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "cap",
              "variable" : 18
            },
            "go-type" : 47,
            "kind" : "expression",
            "target" : {
              "go-type" : 44,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "s",
                "variable" : 13
              }
            },
            "type" : "selector"
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "for"
      },
      "assign-vars" : [ ],
      "line-end" : 551,
      "code" : "for i := 0; i < s.cap; i++ {\n\tcgoCheckArg(st.elem, p, true, false, msg)\n\tp = add(p, st.elem.size)\n}",
      "entry" : false,
      "use-vars" : [ 13, 17 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 49 ],
      "in-vars" : [ 1, 4, 15, 13 ],
      "exit" : false,
      "out-vars" : [ 17, 13, 1, 4, 15 ],
      "decl-vars" : [ 17 ],
      "line-start" : 548,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "i"
          }
        } ],
        "right" : [ {
          "go-type" : 47,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "0"
          }
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 548,
      "code" : "i := 0",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ 17 ],
      "successors" : [ 49 ],
      "in-vars" : [ 1, 4, 15, 17, 13 ],
      "exit" : false,
      "out-vars" : [ 4, 15, 17, 13, 1 ],
      "decl-vars" : [ ],
      "line-start" : 548,
      "ast" : {
        "kind" : "statement",
        "operation" : "++",
        "target" : {
          "go-type" : 47,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "i",
            "variable" : 17
          }
        },
        "type" : "crement"
      },
      "assign-vars" : [ 17 ],
      "line-end" : 548,
      "code" : "i++",
      "entry" : false,
      "use-vars" : [ 17 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 53 ],
      "in-vars" : [ 17, 13, 1, 4, 15 ],
      "exit" : false,
      "out-vars" : [ 13, 1, 4, 15, 17 ],
      "decl-vars" : [ ],
      "line-start" : 549,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "elem",
              "variable" : 16
            },
            "go-type" : 2,
            "kind" : "expression",
            "target" : {
              "go-type" : 41,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "st",
                "variable" : 15
              }
            },
            "type" : "selector"
          }, {
            "go-type" : 11,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "p",
              "variable" : 1
            }
          }, {
            "go-type" : 13,
            "kind" : "constant",
            "value" : {
              "type" : "BOOL",
              "value" : "true"
            }
          }, {
            "go-type" : 13,
            "kind" : "constant",
            "value" : {
              "type" : "BOOL",
              "value" : "false"
            }
          }, {
            "go-type" : 19,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "msg",
              "variable" : 4
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 0,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 0,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "cgoCheckArg"
            }
          },
          "go-type" : 20,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 549,
      "code" : "cgoCheckArg(st.elem, p, true, false, msg)",
      "entry" : false,
      "use-vars" : [ 15, 1, 4 ]
    }, {
      "update-vars" : [ 1 ],
      "successors" : [ 51 ],
      "in-vars" : [ 1, 4, 15, 17, 13 ],
      "exit" : false,
      "out-vars" : [ 17, 13, 1, 4, 15 ],
      "decl-vars" : [ ],
      "line-start" : 550,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 11,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "p",
            "variable" : 1
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 11,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "p",
              "variable" : 1
            }
          }, {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "size",
              "variable" : 11
            },
            "go-type" : 5,
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "elem",
                "variable" : 16
              },
              "go-type" : 2,
              "kind" : "expression",
              "target" : {
                "go-type" : 41,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "st",
                  "variable" : 15
                }
              },
              "type" : "selector"
            },
            "type" : "selector"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 27,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 2,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "add"
            }
          },
          "go-type" : 11,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 1 ],
      "line-end" : 550,
      "code" : "p = add(p, st.elem.size)",
      "entry" : false,
      "use-vars" : [ 1, 15 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 55 ],
      "in-vars" : [ 1, 4, 3 ],
      "exit" : false,
      "out-vars" : [ 1, 4, 3 ],
      "decl-vars" : [ ],
      "line-start" : 552,
      "ast" : {
        "expressions" : [ {
          "go-type" : 8,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "24"
          }
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 559,
      "code" : "case kindString:\n\tss := (*stringStruct)(p)\n\tif !cgoIsGoPointer(ss.str) {\n\t\treturn\n\t}\n\tif !top {\n\t\tpanic(errorString(msg))\n\t}",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 56 ],
      "in-vars" : [ 1, 4, 3 ],
      "exit" : false,
      "out-vars" : [ 3, 19, 4 ],
      "decl-vars" : [ 19 ],
      "line-start" : 553,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "ss"
          }
        } ],
        "right" : [ {
          "coerced-to" : {
            "contained" : {
              "go-type" : 49,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 49,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "stringStruct"
              }
            },
            "go-type" : 48,
            "kind" : "type",
            "type" : "pointer"
          },
          "go-type" : 48,
          "kind" : "expression",
          "target" : {
            "go-type" : 11,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "p",
              "variable" : 1
            }
          },
          "type" : "cast"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 553,
      "code" : "ss := (*stringStruct)(p)",
      "entry" : false,
      "use-vars" : [ 1 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 57, 58 ],
      "in-vars" : [ 4, 3, 19 ],
      "exit" : false,
      "out-vars" : [ 3, 4 ],
      "decl-vars" : [ ],
      "line-start" : 554,
      "ast" : {
        "condition" : {
          "go-type" : 13,
          "kind" : "expression",
          "operator" : "!",
          "target" : {
            "arguments" : [ {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "str",
                "variable" : 20
              },
              "go-type" : 11,
              "kind" : "expression",
              "target" : {
                "go-type" : 48,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "ss",
                  "variable" : 19
                }
              },
              "type" : "selector"
            } ],
            "ellipsis" : false,
            "function" : {
              "go-type" : 35,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "function" : 3,
                "ident-kind" : "Func",
                "kind" : "ident",
                "value" : "cgoIsGoPointer"
              }
            },
            "go-type" : 13,
            "kind" : "expression",
            "type" : "call"
          },
          "type" : "unary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 556,
      "code" : "if !cgoIsGoPointer(ss.str) {\n\treturn\n}",
      "entry" : false,
      "use-vars" : [ 19 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 555,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ ]
      },
      "assign-vars" : [ ],
      "line-end" : 555,
      "code" : "return",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 59, 1 ],
      "in-vars" : [ 4, 3 ],
      "exit" : false,
      "out-vars" : [ 4 ],
      "decl-vars" : [ ],
      "line-start" : 557,
      "ast" : {
        "condition" : {
          "go-type" : 13,
          "kind" : "expression",
          "operator" : "!",
          "target" : {
            "go-type" : 13,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "top",
              "variable" : 3
            }
          },
          "type" : "unary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 559,
      "code" : "if !top {\n\tpanic(errorString(msg))\n}",
      "entry" : false,
      "use-vars" : [ 3 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 4 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 558,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "coerced-to" : {
              "go-type" : 33,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 33,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "errorString"
              }
            },
            "go-type" : 33,
            "kind" : "expression",
            "target" : {
              "go-type" : 19,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "msg",
                "variable" : 4
              }
            },
            "type" : "cast"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 30,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Builtin",
              "kind" : "ident",
              "value" : "panic"
            }
          },
          "go-type" : 20,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 558,
      "code" : "panic(errorString(msg))",
      "entry" : false,
      "use-vars" : [ 4 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 61 ],
      "in-vars" : [ 4, 3, 0, 2, 1 ],
      "exit" : false,
      "out-vars" : [ 1, 4, 3, 0, 2 ],
      "decl-vars" : [ ],
      "line-start" : 560,
      "ast" : {
        "expressions" : [ {
          "go-type" : 8,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "25"
          }
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 574,
      "code" : "case kindStruct:\n\tst := (*structtype)(unsafe.Pointer(t))\n\tif !indir {\n\t\tif len(st.fields) != 1 {\n\t\t\tthrow(\"can't happen\")\n\t\t}\n\t\tcgoCheckArg(st.fields[0].typ, p, st.fields[0].typ.kind&kindDirectIface == 0, top, msg)\n\t\treturn\n\t}\n\tfor _, f := range st.fields {\n\t\tif f.typ.ptrdata == 0 {\n\t\t\tcontinue\n\t\t}\n\t\tcgoCheckArg(f.typ, add(p, f.offset()), true, top, msg)\n\t}",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 62 ],
      "in-vars" : [ 1, 4, 3, 0, 2 ],
      "exit" : false,
      "out-vars" : [ 4, 3, 2, 21, 1 ],
      "decl-vars" : [ 21 ],
      "line-start" : 561,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "st"
          }
        } ],
        "right" : [ {
          "coerced-to" : {
            "contained" : {
              "go-type" : 52,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 52,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "structtype"
              }
            },
            "go-type" : 51,
            "kind" : "type",
            "type" : "pointer"
          },
          "go-type" : 51,
          "kind" : "expression",
          "target" : {
            "coerced-to" : {
              "go-type" : 11,
              "kind" : "type",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 1,
                "value" : "unsafe"
              },
              "type" : "identifier",
              "value" : {
                "go-type" : 11,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "Pointer"
              }
            },
            "go-type" : 11,
            "kind" : "expression",
            "target" : {
              "go-type" : 2,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "t",
                "variable" : 0
              }
            },
            "type" : "cast"
          },
          "type" : "cast"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 561,
      "code" : "st := (*structtype)(unsafe.Pointer(t))",
      "entry" : false,
      "use-vars" : [ 0 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 63, 67 ],
      "in-vars" : [ 1, 4, 3, 2, 21 ],
      "exit" : false,
      "out-vars" : [ 4, 3, 21, 1 ],
      "decl-vars" : [ ],
      "line-start" : 562,
      "ast" : {
        "condition" : {
          "go-type" : 13,
          "kind" : "expression",
          "operator" : "!",
          "target" : {
            "go-type" : 13,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "indir",
              "variable" : 2
            }
          },
          "type" : "unary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 568,
      "code" : "if !indir {\n\tif len(st.fields) != 1 {\n\t\tthrow(\"can't happen\")\n\t}\n\tcgoCheckArg(st.fields[0].typ, p, st.fields[0].typ.kind&kindDirectIface == 0, top, msg)\n\treturn\n}",
      "entry" : false,
      "use-vars" : [ 2 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 64, 65 ],
      "in-vars" : [ 1, 4, 3, 21 ],
      "exit" : false,
      "out-vars" : [ 1, 4, 3, 21 ],
      "decl-vars" : [ ],
      "line-start" : 563,
      "ast" : {
        "condition" : {
          "go-type" : 21,
          "kind" : "expression",
          "left" : {
            "arguments" : [ {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "fields",
                "variable" : 22
              },
              "go-type" : 56,
              "kind" : "expression",
              "target" : {
                "go-type" : 51,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "st",
                  "variable" : 21
                }
              },
              "type" : "selector"
            } ],
            "ellipsis" : false,
            "function" : {
              "go-type" : 59,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Builtin",
                "kind" : "ident",
                "value" : "len"
              }
            },
            "go-type" : 47,
            "kind" : "expression",
            "type" : "call"
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 47,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "1"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 565,
      "code" : "if len(st.fields) != 1 {\n\tthrow(\"can't happen\")\n}",
      "entry" : false,
      "use-vars" : [ 21 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 65 ],
      "in-vars" : [ 1, 4, 3, 21 ],
      "exit" : false,
      "out-vars" : [ 1, 4, 3, 21 ],
      "decl-vars" : [ ],
      "line-start" : 564,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 19,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "can't happen"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 22,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 1,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "throw"
            }
          },
          "go-type" : 20,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 564,
      "code" : "throw(\"can't happen\")",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 66 ],
      "in-vars" : [ 1, 4, 3, 21 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 566,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "typ",
              "variable" : 23
            },
            "go-type" : 2,
            "kind" : "expression",
            "target" : {
              "go-type" : 57,
              "index" : {
                "go-type" : 47,
                "kind" : "constant",
                "value" : {
                  "type" : "INT",
                  "value" : "0"
                }
              },
              "kind" : "expression",
              "target" : {
                "field" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "fields",
                  "variable" : 22
                },
                "go-type" : 56,
                "kind" : "expression",
                "target" : {
                  "go-type" : 51,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "st",
                    "variable" : 21
                  }
                },
                "type" : "selector"
              },
              "type" : "index"
            },
            "type" : "selector"
          }, {
            "go-type" : 11,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "p",
              "variable" : 1
            }
          }, {
            "go-type" : 13,
            "kind" : "expression",
            "left" : {
              "go-type" : 8,
              "kind" : "expression",
              "left" : {
                "field" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "kind",
                  "variable" : 6
                },
                "go-type" : 8,
                "kind" : "expression",
                "target" : {
                  "field" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "typ",
                    "variable" : 23
                  },
                  "go-type" : 2,
                  "kind" : "expression",
                  "target" : {
                    "go-type" : 57,
                    "index" : {
                      "go-type" : 47,
                      "kind" : "constant",
                      "value" : {
                        "type" : "INT",
                        "value" : "0"
                      }
                    },
                    "kind" : "expression",
                    "target" : {
                      "field" : {
                        "ident-kind" : "Var",
                        "kind" : "ident",
                        "value" : "fields",
                        "variable" : 22
                      },
                      "go-type" : 56,
                      "kind" : "expression",
                      "target" : {
                        "go-type" : 51,
                        "kind" : "expression",
                        "type" : "identifier",
                        "value" : {
                          "ident-kind" : "Var",
                          "kind" : "ident",
                          "value" : "st",
                          "variable" : 21
                        }
                      },
                      "type" : "selector"
                    },
                    "type" : "index"
                  },
                  "type" : "selector"
                },
                "type" : "selector"
              },
              "operator" : "&",
              "right" : {
                "go-type" : 8,
                "kind" : "constant",
                "value" : {
                  "type" : "INT",
                  "value" : "32"
                }
              },
              "type" : "binary"
            },
            "operator" : "==",
            "right" : {
              "go-type" : 8,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "0"
              }
            },
            "type" : "binary"
          }, {
            "go-type" : 13,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "top",
              "variable" : 3
            }
          }, {
            "go-type" : 19,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "msg",
              "variable" : 4
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 0,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 0,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "cgoCheckArg"
            }
          },
          "go-type" : 20,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 566,
      "code" : "cgoCheckArg(st.fields[0].typ, p, st.fields[0].typ.kind&kindDirectIface == 0, top, msg)",
      "entry" : false,
      "use-vars" : [ 21, 3, 1, 4 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 567,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ ]
      },
      "assign-vars" : [ ],
      "line-end" : 567,
      "code" : "return",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 68, 1 ],
      "in-vars" : [ 1, 4, 3, 21 ],
      "exit" : false,
      "out-vars" : [ 4, 3, 24, 21, 1 ],
      "decl-vars" : [ 24, 25 ],
      "line-start" : 569,
      "ast" : {
        "is-assign" : false,
        "key" : {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "_"
          }
        },
        "kind" : "statement",
        "target" : {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "fields",
            "variable" : 22
          },
          "go-type" : 56,
          "kind" : "expression",
          "target" : {
            "go-type" : 51,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "st",
              "variable" : 21
            }
          },
          "type" : "selector"
        },
        "type" : "range",
        "value" : {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "f"
          }
        }
      },
      "assign-vars" : [ ],
      "line-end" : 574,
      "code" : "for _, f := range st.fields {\n\tif f.typ.ptrdata == 0 {\n\t\tcontinue\n\t}\n\tcgoCheckArg(f.typ, add(p, f.offset()), true, top, msg)\n}",
      "entry" : false,
      "use-vars" : [ 21 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 69, 70 ],
      "in-vars" : [ 21, 1, 4, 3, 24 ],
      "exit" : false,
      "out-vars" : [ 1, 4, 3, 24, 21 ],
      "decl-vars" : [ ],
      "line-start" : 570,
      "ast" : {
        "condition" : {
          "go-type" : 21,
          "kind" : "expression",
          "left" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "ptrdata",
              "variable" : 5
            },
            "go-type" : 5,
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "typ",
                "variable" : 23
              },
              "go-type" : 2,
              "kind" : "expression",
              "target" : {
                "go-type" : 57,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "f",
                  "variable" : 24
                }
              },
              "type" : "selector"
            },
            "type" : "selector"
          },
          "operator" : "==",
          "right" : {
            "go-type" : 5,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 572,
      "code" : "if f.typ.ptrdata == 0 {\n\tcontinue\n}",
      "entry" : false,
      "use-vars" : [ 24 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 67 ],
      "in-vars" : [ 1, 4, 3, 21 ],
      "exit" : false,
      "out-vars" : [ 1, 4, 3, 21 ],
      "decl-vars" : [ ],
      "line-start" : 571,
      "ast" : {
        "kind" : "statement",
        "label" : null,
        "type" : "continue"
      },
      "assign-vars" : [ ],
      "line-end" : 571,
      "code" : "continue",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 67 ],
      "in-vars" : [ 21, 1, 4, 3, 24 ],
      "exit" : false,
      "out-vars" : [ 4, 3, 21, 1 ],
      "decl-vars" : [ ],
      "line-start" : 573,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "typ",
              "variable" : 23
            },
            "go-type" : 2,
            "kind" : "expression",
            "target" : {
              "go-type" : 57,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "f",
                "variable" : 24
              }
            },
            "type" : "selector"
          }, {
            "arguments" : [ {
              "go-type" : 11,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "p",
                "variable" : 1
              }
            }, {
              "arguments" : [ ],
              "ellipsis" : false,
              "function" : {
                "field" : {
                  "function" : 5,
                  "ident-kind" : "Func",
                  "kind" : "ident",
                  "value" : "offset"
                },
                "go-type" : 62,
                "kind" : "expression",
                "target" : {
                  "go-type" : 57,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "f",
                    "variable" : 24
                  }
                },
                "type" : "selector"
              },
              "go-type" : 5,
              "kind" : "expression",
              "type" : "call"
            } ],
            "ellipsis" : false,
            "function" : {
              "go-type" : 27,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "function" : 2,
                "ident-kind" : "Func",
                "kind" : "ident",
                "value" : "add"
              }
            },
            "go-type" : 11,
            "kind" : "expression",
            "type" : "call"
          }, {
            "go-type" : 13,
            "kind" : "constant",
            "value" : {
              "type" : "BOOL",
              "value" : "true"
            }
          }, {
            "go-type" : 13,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "top",
              "variable" : 3
            }
          }, {
            "go-type" : 19,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "msg",
              "variable" : 4
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 0,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 0,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "cgoCheckArg"
            }
          },
          "go-type" : 20,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 573,
      "code" : "cgoCheckArg(f.typ, add(p, f.offset()), true, top, msg)",
      "entry" : false,
      "use-vars" : [ 24, 3, 4, 1 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 72 ],
      "in-vars" : [ 3, 2, 1, 4 ],
      "exit" : false,
      "out-vars" : [ 1, 4, 3, 2 ],
      "decl-vars" : [ ],
      "line-start" : 575,
      "ast" : {
        "expressions" : [ {
          "go-type" : 8,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "22"
          }
        }, {
          "go-type" : 8,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "26"
          }
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 590,
      "code" : "case kindPtr, kindUnsafePointer:\n\tif indir {\n\t\tp = *(*unsafe.Pointer)(p)\n\t\tif p == nil {\n\t\t\treturn\n\t\t}\n\t}\n\n\tif !cgoIsGoPointer(p) {\n\t\treturn\n\t}\n\tif !top {\n\t\tpanic(errorString(msg))\n\t}\n\n\tcgoCheckUnknownPointer(p, msg)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 73, 76 ],
      "in-vars" : [ 1, 4, 3, 2 ],
      "exit" : false,
      "out-vars" : [ 1, 4, 3 ],
      "decl-vars" : [ ],
      "line-start" : 576,
      "ast" : {
        "condition" : {
          "go-type" : 13,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "indir",
            "variable" : 2
          }
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 581,
      "code" : "if indir {\n\tp = *(*unsafe.Pointer)(p)\n\tif p == nil {\n\t\treturn\n\t}\n}",
      "entry" : false,
      "use-vars" : [ 2 ]
    }, {
      "update-vars" : [ 1 ],
      "successors" : [ 74 ],
      "in-vars" : [ 4, 3, 1 ],
      "exit" : false,
      "out-vars" : [ 1, 4, 3 ],
      "decl-vars" : [ ],
      "line-start" : 577,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 11,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "p",
            "variable" : 1
          }
        } ],
        "right" : [ {
          "go-type" : 11,
          "kind" : "expression",
          "target" : {
            "coerced-to" : {
              "contained" : {
                "go-type" : 11,
                "kind" : "type",
                "qualifier" : {
                  "ident-kind" : "PkgName",
                  "kind" : "ident",
                  "package" : 1,
                  "value" : "unsafe"
                },
                "type" : "identifier",
                "value" : {
                  "go-type" : 11,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "Pointer"
                }
              },
              "go-type" : 34,
              "kind" : "type",
              "type" : "pointer"
            },
            "go-type" : 34,
            "kind" : "expression",
            "target" : {
              "go-type" : 11,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "p",
                "variable" : 1
              }
            },
            "type" : "cast"
          },
          "type" : "star"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 1 ],
      "line-end" : 577,
      "code" : "p = *(*unsafe.Pointer)(p)",
      "entry" : false,
      "use-vars" : [ 1 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 75, 76 ],
      "in-vars" : [ 1, 4, 3 ],
      "exit" : false,
      "out-vars" : [ 1, 4, 3 ],
      "decl-vars" : [ ],
      "line-start" : 578,
      "ast" : {
        "condition" : {
          "go-type" : 21,
          "kind" : "expression",
          "left" : {
            "go-type" : 11,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "p",
              "variable" : 1
            }
          },
          "operator" : "==",
          "right" : {
            "go-type" : 11,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Nil",
              "kind" : "ident",
              "value" : "nil"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 580,
      "code" : "if p == nil {\n\treturn\n}",
      "entry" : false,
      "use-vars" : [ 1 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 579,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ ]
      },
      "assign-vars" : [ ],
      "line-end" : 579,
      "code" : "return",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 77, 78 ],
      "in-vars" : [ 1, 4, 3 ],
      "exit" : false,
      "out-vars" : [ 1, 4, 3 ],
      "decl-vars" : [ ],
      "line-start" : 583,
      "ast" : {
        "condition" : {
          "go-type" : 13,
          "kind" : "expression",
          "operator" : "!",
          "target" : {
            "arguments" : [ {
              "go-type" : 11,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "p",
                "variable" : 1
              }
            } ],
            "ellipsis" : false,
            "function" : {
              "go-type" : 35,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "function" : 3,
                "ident-kind" : "Func",
                "kind" : "ident",
                "value" : "cgoIsGoPointer"
              }
            },
            "go-type" : 13,
            "kind" : "expression",
            "type" : "call"
          },
          "type" : "unary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 585,
      "code" : "if !cgoIsGoPointer(p) {\n\treturn\n}",
      "entry" : false,
      "use-vars" : [ 1 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 584,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ ]
      },
      "assign-vars" : [ ],
      "line-end" : 584,
      "code" : "return",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 79, 80 ],
      "in-vars" : [ 1, 4, 3 ],
      "exit" : false,
      "out-vars" : [ 4, 1 ],
      "decl-vars" : [ ],
      "line-start" : 586,
      "ast" : {
        "condition" : {
          "go-type" : 13,
          "kind" : "expression",
          "operator" : "!",
          "target" : {
            "go-type" : 13,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "top",
              "variable" : 3
            }
          },
          "type" : "unary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 588,
      "code" : "if !top {\n\tpanic(errorString(msg))\n}",
      "entry" : false,
      "use-vars" : [ 3 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 80 ],
      "in-vars" : [ 1, 4 ],
      "exit" : false,
      "out-vars" : [ 1, 4 ],
      "decl-vars" : [ ],
      "line-start" : 587,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "coerced-to" : {
              "go-type" : 33,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 33,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "errorString"
              }
            },
            "go-type" : 33,
            "kind" : "expression",
            "target" : {
              "go-type" : 19,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "msg",
                "variable" : 4
              }
            },
            "type" : "cast"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 30,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Builtin",
              "kind" : "ident",
              "value" : "panic"
            }
          },
          "go-type" : 20,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 587,
      "code" : "panic(errorString(msg))",
      "entry" : false,
      "use-vars" : [ 4 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 1, 4 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 590,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 11,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "p",
              "variable" : 1
            }
          }, {
            "go-type" : 19,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "msg",
              "variable" : 4
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 65,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 6,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "cgoCheckUnknownPointer"
            }
          },
          "go-type" : 64,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 590,
      "code" : "cgoCheckUnknownPointer(p, msg)",
      "entry" : false,
      "use-vars" : [ 4, 1 ]
    } ],
    "code" : "// cgoCheckArg is the real work of cgoCheckPointer. The argument p\n// is either a pointer to the value (of type t), or the value itself,\n// depending on indir. The top parameter is whether we are at the top\n// level, where Go pointers are allowed.\nfunc cgoCheckArg(t *_type, p unsafe.Pointer, indir, top bool, msg string) {\n\tif t.ptrdata == 0 || p == nil {\n\n\t\treturn\n\t}\n\n\tswitch t.kind & kindMask {\n\tdefault:\n\t\tthrow(\"can't happen\")\n\tcase kindArray:\n\t\tat := (*arraytype)(unsafe.Pointer(t))\n\t\tif !indir {\n\t\t\tif at.len != 1 {\n\t\t\t\tthrow(\"can't happen\")\n\t\t\t}\n\t\t\tcgoCheckArg(at.elem, p, at.elem.kind&kindDirectIface == 0, top, msg)\n\t\t\treturn\n\t\t}\n\t\tfor i := uintptr(0); i < at.len; i++ {\n\t\t\tcgoCheckArg(at.elem, p, true, top, msg)\n\t\t\tp = add(p, at.elem.size)\n\t\t}\n\tcase kindChan, kindMap:\n\n\t\tpanic(errorString(msg))\n\tcase kindFunc:\n\t\tif indir {\n\t\t\tp = *(*unsafe.Pointer)(p)\n\t\t}\n\t\tif !cgoIsGoPointer(p) {\n\t\t\treturn\n\t\t}\n\t\tpanic(errorString(msg))\n\tcase kindInterface:\n\t\tit := *(**_type)(p)\n\t\tif it == nil {\n\t\t\treturn\n\t\t}\n\n\t\tif inheap(uintptr(unsafe.Pointer(it))) {\n\t\t\tpanic(errorString(msg))\n\t\t}\n\t\tp = *(*unsafe.Pointer)(add(p, sys.PtrSize))\n\t\tif !cgoIsGoPointer(p) {\n\t\t\treturn\n\t\t}\n\t\tif !top {\n\t\t\tpanic(errorString(msg))\n\t\t}\n\t\tcgoCheckArg(it, p, it.kind&kindDirectIface == 0, false, msg)\n\tcase kindSlice:\n\t\tst := (*slicetype)(unsafe.Pointer(t))\n\t\ts := (*slice)(p)\n\t\tp = s.array\n\t\tif p == nil || !cgoIsGoPointer(p) {\n\t\t\treturn\n\t\t}\n\t\tif !top {\n\t\t\tpanic(errorString(msg))\n\t\t}\n\t\tif st.elem.ptrdata == 0 {\n\t\t\treturn\n\t\t}\n\t\tfor i := 0; i < s.cap; i++ {\n\t\t\tcgoCheckArg(st.elem, p, true, false, msg)\n\t\t\tp = add(p, st.elem.size)\n\t\t}\n\tcase kindString:\n\t\tss := (*stringStruct)(p)\n\t\tif !cgoIsGoPointer(ss.str) {\n\t\t\treturn\n\t\t}\n\t\tif !top {\n\t\t\tpanic(errorString(msg))\n\t\t}\n\tcase kindStruct:\n\t\tst := (*structtype)(unsafe.Pointer(t))\n\t\tif !indir {\n\t\t\tif len(st.fields) != 1 {\n\t\t\t\tthrow(\"can't happen\")\n\t\t\t}\n\t\t\tcgoCheckArg(st.fields[0].typ, p, st.fields[0].typ.kind&kindDirectIface == 0, top, msg)\n\t\t\treturn\n\t\t}\n\t\tfor _, f := range st.fields {\n\t\t\tif f.typ.ptrdata == 0 {\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tcgoCheckArg(f.typ, add(p, f.offset()), true, top, msg)\n\t\t}\n\tcase kindPtr, kindUnsafePointer:\n\t\tif indir {\n\t\t\tp = *(*unsafe.Pointer)(p)\n\t\t\tif p == nil {\n\t\t\t\treturn\n\t\t\t}\n\t\t}\n\n\t\tif !cgoIsGoPointer(p) {\n\t\t\treturn\n\t\t}\n\t\tif !top {\n\t\t\tpanic(errorString(msg))\n\t\t}\n\n\t\tcgoCheckUnknownPointer(p, msg)\n\t}\n}",
    "defines" : [ 0 ],
    "functions" : [ {
      "name" : "cgoCheckArg",
      "package" : 0,
      "type" : 0,
      "exported" : false
    }, {
      "name" : "throw",
      "package" : 0,
      "type" : 22,
      "exported" : false
    }, {
      "name" : "add",
      "package" : 0,
      "type" : 27,
      "exported" : false
    }, {
      "name" : "cgoIsGoPointer",
      "package" : 0,
      "type" : 35,
      "exported" : false
    }, {
      "name" : "inheap",
      "package" : 0,
      "type" : 39,
      "exported" : false
    }, {
      "name" : "offset",
      "package" : 0,
      "type" : 62,
      "exported" : false
    }, {
      "name" : "cgoCheckUnknownPointer",
      "package" : 0,
      "type" : 65,
      "exported" : false
    } ],
    "line-end" : 592,
    "line-start" : 481,
    "names" : [ "cgoCheckArg" ],
    "package" : 0,
    "packages" : [ {
      "name" : "runtime",
      "path" : "runtime"
    }, {
      "name" : "unsafe",
      "path" : "unsafe"
    } ],
    "params" : [ 0, 1, 2, 3, 4 ],
    "receivers" : [ ],
    "results" : [ ],
    "type" : "function",
    "types" : [ {
      "name" : "func(t *runtime._type, p unsafe.Pointer, indir bool, top bool, msg string)",
      "params" : 1,
      "recv" : -1,
      "results" : 20,
      "type" : "Signature",
      "underlying" : 0,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "t",
        "type" : 2
      }, {
        "name" : "p",
        "type" : 11
      }, {
        "name" : "indir",
        "type" : 13
      }, {
        "name" : "top",
        "type" : 13
      }, {
        "name" : "msg",
        "type" : 19
      } ],
      "name" : "(t *runtime._type, p unsafe.Pointer, indir bool, top bool, msg string)",
      "type" : "Tuple",
      "underlying" : 1
    }, {
      "elem" : 3,
      "name" : "*runtime._type",
      "type" : "Pointer",
      "underlying" : 2
    }, {
      "local-name" : "_type",
      "name" : "runtime._type",
      "package" : 0,
      "type" : "Named",
      "underlying" : 4
    }, {
      "fields" : [ {
        "name" : "size",
        "type" : 5
      }, {
        "name" : "ptrdata",
        "type" : 5
      }, {
        "name" : "hash",
        "type" : 6
      }, {
        "name" : "tflag",
        "type" : 7
      }, {
        "name" : "align",
        "type" : 8
      }, {
        "name" : "fieldAlign",
        "type" : 8
      }, {
        "name" : "kind",
        "type" : 8
      }, {
        "name" : "equal",
        "type" : 9
      }, {
        "name" : "gcdata",
        "type" : 14
      }, {
        "name" : "str",
        "type" : 16
      }, {
        "name" : "ptrToThis",
        "type" : 18
      } ],
      "name" : "struct{size uintptr; ptrdata uintptr; hash uint32; tflag runtime.tflag; align uint8; fieldAlign uint8; kind uint8; equal func(unsafe.Pointer, unsafe.Pointer) bool; gcdata *byte; str runtime.nameOff; ptrToThis runtime.typeOff}",
      "type" : "Struct",
      "underlying" : 4
    }, {
      "name" : "uintptr",
      "type" : "Basic",
      "underlying" : 5
    }, {
      "name" : "uint32",
      "type" : "Basic",
      "underlying" : 6
    }, {
      "local-name" : "tflag",
      "name" : "runtime.tflag",
      "package" : 0,
      "type" : "Named",
      "underlying" : 8
    }, {
      "name" : "uint8",
      "type" : "Basic",
      "underlying" : 8
    }, {
      "name" : "func(unsafe.Pointer, unsafe.Pointer) bool",
      "params" : 10,
      "recv" : -1,
      "results" : 12,
      "type" : "Signature",
      "underlying" : 9,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 11
      }, {
        "name" : "",
        "type" : 11
      } ],
      "name" : "(unsafe.Pointer, unsafe.Pointer)",
      "type" : "Tuple",
      "underlying" : 10
    }, {
      "local-name" : "Pointer",
      "name" : "unsafe.Pointer",
      "package" : 1,
      "type" : "Basic",
      "underlying" : 11
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 13
      } ],
      "name" : "(bool)",
      "type" : "Tuple",
      "underlying" : 12
    }, {
      "name" : "bool",
      "type" : "Basic",
      "underlying" : 13
    }, {
      "elem" : 15,
      "name" : "*byte",
      "type" : "Pointer",
      "underlying" : 14
    }, {
      "name" : "byte",
      "type" : "Basic",
      "underlying" : 15
    }, {
      "local-name" : "nameOff",
      "name" : "runtime.nameOff",
      "package" : 0,
      "type" : "Named",
      "underlying" : 17
    }, {
      "name" : "int32",
      "type" : "Basic",
      "underlying" : 17
    }, {
      "local-name" : "typeOff",
      "name" : "runtime.typeOff",
      "package" : 0,
      "type" : "Named",
      "underlying" : 17
    }, {
      "name" : "string",
      "type" : "Basic",
      "underlying" : 19
    }, {
      "fields" : [ ],
      "name" : "()",
      "type" : "Tuple",
      "underlying" : 20
    }, {
      "name" : "untyped bool",
      "type" : "Basic",
      "underlying" : 21
    }, {
      "name" : "func(s string)",
      "params" : 23,
      "recv" : -1,
      "results" : 20,
      "type" : "Signature",
      "underlying" : 22,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "s",
        "type" : 19
      } ],
      "name" : "(s string)",
      "type" : "Tuple",
      "underlying" : 23
    }, {
      "elem" : 25,
      "name" : "*runtime.arraytype",
      "type" : "Pointer",
      "underlying" : 24
    }, {
      "local-name" : "arraytype",
      "name" : "runtime.arraytype",
      "package" : 0,
      "type" : "Named",
      "underlying" : 26
    }, {
      "fields" : [ {
        "name" : "typ",
        "type" : 3
      }, {
        "name" : "elem",
        "type" : 2
      }, {
        "name" : "slice",
        "type" : 2
      }, {
        "name" : "len",
        "type" : 5
      } ],
      "name" : "struct{typ runtime._type; elem *runtime._type; slice *runtime._type; len uintptr}",
      "type" : "Struct",
      "underlying" : 26
    }, {
      "name" : "func(p unsafe.Pointer, x uintptr) unsafe.Pointer",
      "params" : 28,
      "recv" : -1,
      "results" : 29,
      "type" : "Signature",
      "underlying" : 27,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "p",
        "type" : 11
      }, {
        "name" : "x",
        "type" : 5
      } ],
      "name" : "(p unsafe.Pointer, x uintptr)",
      "type" : "Tuple",
      "underlying" : 28
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 11
      } ],
      "name" : "(unsafe.Pointer)",
      "type" : "Tuple",
      "underlying" : 29
    }, {
      "name" : "func(interface{})",
      "params" : 31,
      "recv" : -1,
      "results" : 20,
      "type" : "Signature",
      "underlying" : 30,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 32
      } ],
      "name" : "(interface{})",
      "type" : "Tuple",
      "underlying" : 31
    }, {
      "methods" : [ ],
      "name" : "interface{}",
      "type" : "Interface",
      "underlying" : 32
    }, {
      "local-name" : "errorString",
      "name" : "runtime.errorString",
      "package" : 0,
      "type" : "Named",
      "underlying" : 19
    }, {
      "elem" : 11,
      "name" : "*unsafe.Pointer",
      "type" : "Pointer",
      "underlying" : 34
    }, {
      "name" : "func(p unsafe.Pointer) bool",
      "params" : 36,
      "recv" : -1,
      "results" : 12,
      "type" : "Signature",
      "underlying" : 35,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "p",
        "type" : 11
      } ],
      "name" : "(p unsafe.Pointer)",
      "type" : "Tuple",
      "underlying" : 36
    }, {
      "elem" : 2,
      "name" : "**runtime._type",
      "type" : "Pointer",
      "underlying" : 37
    }, {
      "name" : "untyped nil",
      "type" : "Basic",
      "underlying" : 38
    }, {
      "name" : "func(b uintptr) bool",
      "params" : 40,
      "recv" : -1,
      "results" : 12,
      "type" : "Signature",
      "underlying" : 39,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "b",
        "type" : 5
      } ],
      "name" : "(b uintptr)",
      "type" : "Tuple",
      "underlying" : 40
    }, {
      "elem" : 42,
      "name" : "*runtime.slicetype",
      "type" : "Pointer",
      "underlying" : 41
    }, {
      "local-name" : "slicetype",
      "name" : "runtime.slicetype",
      "package" : 0,
      "type" : "Named",
      "underlying" : 43
    }, {
      "fields" : [ {
        "name" : "typ",
        "type" : 3
      }, {
        "name" : "elem",
        "type" : 2
      } ],
      "name" : "struct{typ runtime._type; elem *runtime._type}",
      "type" : "Struct",
      "underlying" : 43
    }, {
      "elem" : 45,
      "name" : "*runtime.slice",
      "type" : "Pointer",
      "underlying" : 44
    }, {
      "local-name" : "slice",
      "name" : "runtime.slice",
      "package" : 0,
      "type" : "Named",
      "underlying" : 46
    }, {
      "fields" : [ {
        "name" : "array",
        "type" : 11
      }, {
        "name" : "len",
        "type" : 47
      }, {
        "name" : "cap",
        "type" : 47
      } ],
      "name" : "struct{array unsafe.Pointer; len int; cap int}",
      "type" : "Struct",
      "underlying" : 46
    }, {
      "name" : "int",
      "type" : "Basic",
      "underlying" : 47
    }, {
      "elem" : 49,
      "name" : "*runtime.stringStruct",
      "type" : "Pointer",
      "underlying" : 48
    }, {
      "local-name" : "stringStruct",
      "name" : "runtime.stringStruct",
      "package" : 0,
      "type" : "Named",
      "underlying" : 50
    }, {
      "fields" : [ {
        "name" : "str",
        "type" : 11
      }, {
        "name" : "len",
        "type" : 47
      } ],
      "name" : "struct{str unsafe.Pointer; len int}",
      "type" : "Struct",
      "underlying" : 50
    }, {
      "elem" : 52,
      "name" : "*runtime.structtype",
      "type" : "Pointer",
      "underlying" : 51
    }, {
      "local-name" : "structtype",
      "name" : "runtime.structtype",
      "package" : 0,
      "type" : "Named",
      "underlying" : 53
    }, {
      "fields" : [ {
        "name" : "typ",
        "type" : 3
      }, {
        "name" : "pkgPath",
        "type" : 54
      }, {
        "name" : "fields",
        "type" : 56
      } ],
      "name" : "struct{typ runtime._type; pkgPath runtime.name; fields []runtime.structfield}",
      "type" : "Struct",
      "underlying" : 53
    }, {
      "local-name" : "name",
      "name" : "runtime.name",
      "package" : 0,
      "type" : "Named",
      "underlying" : 55
    }, {
      "fields" : [ {
        "name" : "bytes",
        "type" : 14
      } ],
      "name" : "struct{bytes *byte}",
      "type" : "Struct",
      "underlying" : 55
    }, {
      "elem" : 57,
      "name" : "[]runtime.structfield",
      "type" : "Slice",
      "underlying" : 56
    }, {
      "local-name" : "structfield",
      "name" : "runtime.structfield",
      "package" : 0,
      "type" : "Named",
      "underlying" : 58
    }, {
      "fields" : [ {
        "name" : "name",
        "type" : 54
      }, {
        "name" : "typ",
        "type" : 2
      }, {
        "name" : "offsetAnon",
        "type" : 5
      } ],
      "name" : "struct{name runtime.name; typ *runtime._type; offsetAnon uintptr}",
      "type" : "Struct",
      "underlying" : 58
    }, {
      "name" : "func([]runtime.structfield) int",
      "params" : 60,
      "recv" : -1,
      "results" : 61,
      "type" : "Signature",
      "underlying" : 59,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 56
      } ],
      "name" : "([]runtime.structfield)",
      "type" : "Tuple",
      "underlying" : 60
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 47
      } ],
      "name" : "(int)",
      "type" : "Tuple",
      "underlying" : 61
    }, {
      "name" : "func() uintptr",
      "params" : 20,
      "recv" : -1,
      "results" : 63,
      "type" : "Signature",
      "underlying" : 62,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 5
      } ],
      "name" : "(uintptr)",
      "type" : "Tuple",
      "underlying" : 63
    }, {
      "fields" : [ {
        "name" : "base",
        "type" : 5
      }, {
        "name" : "i",
        "type" : 5
      } ],
      "name" : "(base uintptr, i uintptr)",
      "type" : "Tuple",
      "underlying" : 64
    }, {
      "name" : "func(p unsafe.Pointer, msg string) (base uintptr, i uintptr)",
      "params" : 66,
      "recv" : -1,
      "results" : 64,
      "type" : "Signature",
      "underlying" : 65,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "p",
        "type" : 11
      }, {
        "name" : "msg",
        "type" : 19
      } ],
      "name" : "(p unsafe.Pointer, msg string)",
      "type" : "Tuple",
      "underlying" : 66
    } ],
    "variables" : [ {
      "name" : "t",
      "package" : 0,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "p",
      "package" : 0,
      "type" : 11,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "indir",
      "package" : 0,
      "type" : 13,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "top",
      "package" : 0,
      "type" : 13,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "msg",
      "package" : 0,
      "type" : 19,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "ptrdata",
      "package" : 0,
      "type" : 5,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "kind",
      "package" : 0,
      "type" : 8,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "at",
      "package" : 0,
      "type" : 24,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "len",
      "package" : 0,
      "type" : 5,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "elem",
      "package" : 0,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "i",
      "package" : 0,
      "type" : 5,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "size",
      "package" : 0,
      "type" : 5,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "it",
      "package" : 0,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "s",
      "package" : 0,
      "type" : 44,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "array",
      "package" : 0,
      "type" : 11,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "st",
      "package" : 0,
      "type" : 41,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "elem",
      "package" : 0,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "i",
      "package" : 0,
      "type" : 47,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "cap",
      "package" : 0,
      "type" : 47,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "ss",
      "package" : 0,
      "type" : 48,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "str",
      "package" : 0,
      "type" : 11,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "st",
      "package" : 0,
      "type" : 51,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "fields",
      "package" : 0,
      "type" : 56,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "typ",
      "package" : 0,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "f",
      "package" : 0,
      "type" : 57,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "_",
      "package" : 0,
      "type" : 47,
      "exported" : false,
      "embedded" : false,
      "field" : false
    } ]
  },
  "go-version" : "1.14.3"
}