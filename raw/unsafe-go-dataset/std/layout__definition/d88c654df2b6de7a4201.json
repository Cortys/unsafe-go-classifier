{
  "usage" : {
    "file" : "pool.go",
    "label1" : "definition",
    "label2" : "layout",
    "line" : "47",
    "module" : "std",
    "pkg" : "sync",
    "project" : "kubernetes/kubernetes",
    "snippet" : "local     unsafe.Pointer // local fixed-size per-P pool, actual type is [P]poolLocal",
    "version" : "std"
  },
  "cfg" : {
    "blocks" : [ {
      "update-vars" : [ ],
      "successors" : [ 2 ],
      "in-vars" : [ ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[entry]",
      "entry" : true,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ ],
      "in-vars" : [ ],
      "exit" : true,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[exit]",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 44,
      "ast" : {
        "kind" : "statement",
        "target" : {
          "binds" : [ {
            "name" : {
              "ident-kind" : "NoKind",
              "kind" : "ident",
              "value" : "Pool"
            },
            "value" : {
              "fields" : [ {
                "declared-type" : {
                  "go-type" : 2,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 2,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "noCopy"
                  }
                },
                "kind" : "field",
                "names" : [ {
                  "ident-kind" : "NoKind",
                  "kind" : "ident",
                  "value" : "noCopy"
                } ],
                "tag" : null
              }, {
                "declared-type" : {
                  "go-type" : 4,
                  "kind" : "type",
                  "qualifier" : {
                    "ident-kind" : "PkgName",
                    "kind" : "ident",
                    "package" : 1,
                    "value" : "unsafe"
                  },
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 4,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "Pointer"
                  }
                },
                "kind" : "field",
                "names" : [ {
                  "ident-kind" : "NoKind",
                  "kind" : "ident",
                  "value" : "local"
                } ],
                "tag" : null
              }, {
                "declared-type" : {
                  "go-type" : 5,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 5,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "uintptr"
                  }
                },
                "kind" : "field",
                "names" : [ {
                  "ident-kind" : "NoKind",
                  "kind" : "ident",
                  "value" : "localSize"
                } ],
                "tag" : null
              }, {
                "declared-type" : {
                  "go-type" : 4,
                  "kind" : "type",
                  "qualifier" : {
                    "ident-kind" : "PkgName",
                    "kind" : "ident",
                    "package" : 1,
                    "value" : "unsafe"
                  },
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 4,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "Pointer"
                  }
                },
                "kind" : "field",
                "names" : [ {
                  "ident-kind" : "NoKind",
                  "kind" : "ident",
                  "value" : "victim"
                } ],
                "tag" : null
              }, {
                "declared-type" : {
                  "go-type" : 5,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 5,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "uintptr"
                  }
                },
                "kind" : "field",
                "names" : [ {
                  "ident-kind" : "NoKind",
                  "kind" : "ident",
                  "value" : "victimSize"
                } ],
                "tag" : null
              }, {
                "declared-type" : {
                  "go-type" : 6,
                  "kind" : "type",
                  "params" : [ ],
                  "results" : [ {
                    "declared-type" : {
                      "go-type" : 9,
                      "incomplete" : false,
                      "kind" : "type",
                      "methods" : [ ],
                      "type" : "interface"
                    },
                    "kind" : "field",
                    "names" : [ ],
                    "tag" : null
                  } ],
                  "type" : "function",
                  "variadic" : null
                },
                "kind" : "field",
                "names" : [ {
                  "ident-kind" : "NoKind",
                  "kind" : "ident",
                  "value" : "New"
                } ],
                "tag" : null
              } ],
              "go-type" : 1,
              "kind" : "type",
              "type" : "struct"
            }
          } ],
          "kind" : "decl",
          "type" : "type-alias"
        },
        "type" : "declaration"
      },
      "assign-vars" : [ ],
      "line-end" : 57,
      "code" : "// A Pool is a set of temporary objects that may be individually saved and\n// retrieved.\n//\n// Any item stored in the Pool may be removed automatically at any time without\n// notification. If the Pool holds the only reference when this happens, the\n// item might be deallocated.\n//\n// A Pool is safe for use by multiple goroutines simultaneously.\n//\n// Pool's purpose is to cache allocated but unused items for later reuse,\n// relieving pressure on the garbage collector. That is, it makes it easy to\n// build efficient, thread-safe free lists. However, it is not suitable for all\n// free lists.\n//\n// An appropriate use of a Pool is to manage a group of temporary items\n// silently shared among and potentially reused by concurrent independent\n// clients of a package. Pool provides a way to amortize allocation overhead\n// across many clients.\n//\n// An example of good use of a Pool is in the fmt package, which maintains a\n// dynamically-sized store of temporary output buffers. The store scales under\n// load (when many goroutines are actively printing) and shrinks when\n// quiescent.\n//\n// On the other hand, a free list maintained as part of a short-lived object is\n// not a suitable use for a Pool, since the overhead does not amortize well in\n// that scenario. It is more efficient to have such objects implement their own\n// free list.\n//\n// A Pool must not be copied after first use.\ntype Pool struct {\n\tnoCopy noCopy\n\n\tlocal     unsafe.Pointer // local fixed-size per-P pool, actual type is [P]poolLocal\n\tlocalSize uintptr        // size of the local array\n\n\tvictim     unsafe.Pointer // local from previous cycle\n\tvictimSize uintptr        // size of victims array\n\n\t// New optionally specifies a function to generate\n\t// a value when Get would otherwise return nil.\n\t// It may not be changed concurrently with calls to Get.\n\tNew func() interface{}\n}",
      "entry" : false,
      "use-vars" : [ ]
    } ],
    "code" : "// A Pool is a set of temporary objects that may be individually saved and\n// retrieved.\n//\n// Any item stored in the Pool may be removed automatically at any time without\n// notification. If the Pool holds the only reference when this happens, the\n// item might be deallocated.\n//\n// A Pool is safe for use by multiple goroutines simultaneously.\n//\n// Pool's purpose is to cache allocated but unused items for later reuse,\n// relieving pressure on the garbage collector. That is, it makes it easy to\n// build efficient, thread-safe free lists. However, it is not suitable for all\n// free lists.\n//\n// An appropriate use of a Pool is to manage a group of temporary items\n// silently shared among and potentially reused by concurrent independent\n// clients of a package. Pool provides a way to amortize allocation overhead\n// across many clients.\n//\n// An example of good use of a Pool is in the fmt package, which maintains a\n// dynamically-sized store of temporary output buffers. The store scales under\n// load (when many goroutines are actively printing) and shrinks when\n// quiescent.\n//\n// On the other hand, a free list maintained as part of a short-lived object is\n// not a suitable use for a Pool, since the overhead does not amortize well in\n// that scenario. It is more efficient to have such objects implement their own\n// free list.\n//\n// A Pool must not be copied after first use.\ntype Pool struct {\n\tnoCopy noCopy\n\n\tlocal     unsafe.Pointer // local fixed-size per-P pool, actual type is [P]poolLocal\n\tlocalSize uintptr        // size of the local array\n\n\tvictim     unsafe.Pointer // local from previous cycle\n\tvictimSize uintptr        // size of victims array\n\n\t// New optionally specifies a function to generate\n\t// a value when Get would otherwise return nil.\n\t// It may not be changed concurrently with calls to Get.\n\tNew func() interface{}\n}",
    "defines" : [ 0 ],
    "functions" : [ ],
    "line-end" : 57,
    "line-start" : 44,
    "names" : [ "Pool" ],
    "package" : 0,
    "packages" : [ {
      "name" : "sync",
      "path" : "sync"
    }, {
      "name" : "unsafe",
      "path" : "unsafe"
    } ],
    "params" : [ ],
    "receivers" : [ ],
    "results" : [ ],
    "type" : "type",
    "types" : [ {
      "local-name" : "Pool",
      "name" : "sync.Pool",
      "package" : 0,
      "type" : "Named",
      "underlying" : 1
    }, {
      "fields" : [ {
        "name" : "noCopy",
        "type" : 2
      }, {
        "name" : "local",
        "type" : 4
      }, {
        "name" : "localSize",
        "type" : 5
      }, {
        "name" : "victim",
        "type" : 4
      }, {
        "name" : "victimSize",
        "type" : 5
      }, {
        "name" : "New",
        "type" : 6
      } ],
      "name" : "struct{noCopy sync.noCopy; local unsafe.Pointer; localSize uintptr; victim unsafe.Pointer; victimSize uintptr; New func() interface{}}",
      "type" : "Struct",
      "underlying" : 1
    }, {
      "local-name" : "noCopy",
      "name" : "sync.noCopy",
      "package" : 0,
      "type" : "Named",
      "underlying" : 3
    }, {
      "fields" : [ ],
      "name" : "struct{}",
      "type" : "Struct",
      "underlying" : 3
    }, {
      "local-name" : "Pointer",
      "name" : "unsafe.Pointer",
      "package" : 1,
      "type" : "Basic",
      "underlying" : 4
    }, {
      "name" : "uintptr",
      "type" : "Basic",
      "underlying" : 5
    }, {
      "name" : "func() interface{}",
      "params" : 7,
      "recv" : -1,
      "results" : 8,
      "type" : "Signature",
      "underlying" : 6,
      "variadic" : false
    }, {
      "fields" : [ ],
      "name" : "()",
      "type" : "Tuple",
      "underlying" : 7
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 9
      } ],
      "name" : "(interface{})",
      "type" : "Tuple",
      "underlying" : 8
    }, {
      "methods" : [ ],
      "name" : "interface{}",
      "type" : "Interface",
      "underlying" : 9
    } ],
    "variables" : [ ]
  },
  "go-version" : "1.14.3"
}