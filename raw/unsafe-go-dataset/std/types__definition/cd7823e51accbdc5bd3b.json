{
  "usage" : {
    "file" : "runtime2.go",
    "label1" : "definition",
    "label2" : "types",
    "line" : "879",
    "module" : "std",
    "pkg" : "runtime",
    "project" : "kubernetes/kubernetes",
    "snippet" : "fd   unsafe.Pointer // funcdata for the function associated with the frame",
    "version" : "std"
  },
  "cfg" : {
    "blocks" : [ {
      "update-vars" : [ ],
      "successors" : [ 2 ],
      "in-vars" : [ ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[entry]",
      "entry" : true,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ ],
      "in-vars" : [ ],
      "exit" : true,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[exit]",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 861,
      "ast" : {
        "kind" : "statement",
        "target" : {
          "binds" : [ {
            "name" : {
              "ident-kind" : "NoKind",
              "kind" : "ident",
              "value" : "_defer"
            },
            "value" : {
              "fields" : [ {
                "declared-type" : {
                  "go-type" : 2,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 2,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "int32"
                  }
                },
                "kind" : "field",
                "names" : [ {
                  "ident-kind" : "NoKind",
                  "kind" : "ident",
                  "value" : "siz"
                } ],
                "tag" : null
              }, {
                "declared-type" : {
                  "go-type" : 3,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 3,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "bool"
                  }
                },
                "kind" : "field",
                "names" : [ {
                  "ident-kind" : "NoKind",
                  "kind" : "ident",
                  "value" : "started"
                } ],
                "tag" : null
              }, {
                "declared-type" : {
                  "go-type" : 3,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 3,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "bool"
                  }
                },
                "kind" : "field",
                "names" : [ {
                  "ident-kind" : "NoKind",
                  "kind" : "ident",
                  "value" : "heap"
                } ],
                "tag" : null
              }, {
                "declared-type" : {
                  "go-type" : 3,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 3,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "bool"
                  }
                },
                "kind" : "field",
                "names" : [ {
                  "ident-kind" : "NoKind",
                  "kind" : "ident",
                  "value" : "openDefer"
                } ],
                "tag" : null
              }, {
                "declared-type" : {
                  "go-type" : 4,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 4,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "uintptr"
                  }
                },
                "kind" : "field",
                "names" : [ {
                  "ident-kind" : "NoKind",
                  "kind" : "ident",
                  "value" : "sp"
                } ],
                "tag" : null
              }, {
                "declared-type" : {
                  "go-type" : 4,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 4,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "uintptr"
                  }
                },
                "kind" : "field",
                "names" : [ {
                  "ident-kind" : "NoKind",
                  "kind" : "ident",
                  "value" : "pc"
                } ],
                "tag" : null
              }, {
                "declared-type" : {
                  "contained" : {
                    "go-type" : 6,
                    "kind" : "type",
                    "type" : "identifier",
                    "value" : {
                      "go-type" : 6,
                      "ident-kind" : "TypeName",
                      "kind" : "ident",
                      "value" : "funcval"
                    }
                  },
                  "go-type" : 5,
                  "kind" : "type",
                  "type" : "pointer"
                },
                "kind" : "field",
                "names" : [ {
                  "ident-kind" : "NoKind",
                  "kind" : "ident",
                  "value" : "fn"
                } ],
                "tag" : null
              }, {
                "declared-type" : {
                  "contained" : {
                    "go-type" : 9,
                    "kind" : "type",
                    "type" : "identifier",
                    "value" : {
                      "go-type" : 9,
                      "ident-kind" : "TypeName",
                      "kind" : "ident",
                      "value" : "_panic"
                    }
                  },
                  "go-type" : 8,
                  "kind" : "type",
                  "type" : "pointer"
                },
                "kind" : "field",
                "names" : [ {
                  "ident-kind" : "NoKind",
                  "kind" : "ident",
                  "value" : "_panic"
                } ],
                "tag" : null
              }, {
                "declared-type" : {
                  "contained" : {
                    "go-type" : 0,
                    "kind" : "type",
                    "type" : "identifier",
                    "value" : {
                      "go-type" : 0,
                      "ident-kind" : "TypeName",
                      "kind" : "ident",
                      "value" : "_defer"
                    }
                  },
                  "go-type" : 13,
                  "kind" : "type",
                  "type" : "pointer"
                },
                "kind" : "field",
                "names" : [ {
                  "ident-kind" : "NoKind",
                  "kind" : "ident",
                  "value" : "link"
                } ],
                "tag" : null
              }, {
                "declared-type" : {
                  "go-type" : 11,
                  "kind" : "type",
                  "qualifier" : {
                    "ident-kind" : "PkgName",
                    "kind" : "ident",
                    "package" : 1,
                    "value" : "unsafe"
                  },
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 11,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "Pointer"
                  }
                },
                "kind" : "field",
                "names" : [ {
                  "ident-kind" : "NoKind",
                  "kind" : "ident",
                  "value" : "fd"
                } ],
                "tag" : null
              }, {
                "declared-type" : {
                  "go-type" : 4,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 4,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "uintptr"
                  }
                },
                "kind" : "field",
                "names" : [ {
                  "ident-kind" : "NoKind",
                  "kind" : "ident",
                  "value" : "varp"
                } ],
                "tag" : null
              }, {
                "declared-type" : {
                  "go-type" : 4,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 4,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "uintptr"
                  }
                },
                "kind" : "field",
                "names" : [ {
                  "ident-kind" : "NoKind",
                  "kind" : "ident",
                  "value" : "framepc"
                } ],
                "tag" : null
              } ],
              "go-type" : 1,
              "kind" : "type",
              "type" : "struct"
            }
          } ],
          "kind" : "decl",
          "type" : "type-alias"
        },
        "type" : "declaration"
      },
      "assign-vars" : [ ],
      "line-end" : 886,
      "code" : "// A _defer holds an entry on the list of deferred calls.\n// If you add a field here, add code to clear it in freedefer and deferProcStack\n// This struct must match the code in cmd/compile/internal/gc/reflect.go:deferstruct\n// and cmd/compile/internal/gc/ssa.go:(*state).call.\n// Some defers will be allocated on the stack and some on the heap.\n// All defers are logically part of the stack, so write barriers to\n// initialize them are not required. All defers must be manually scanned,\n// and for heap defers, marked.\ntype _defer struct {\n\tsiz     int32 // includes both arguments and results\n\tstarted bool\n\theap    bool\n\t// openDefer indicates that this _defer is for a frame with open-coded\n\t// defers. We have only one defer record for the entire frame (which may\n\t// currently have 0, 1, or more defers active).\n\topenDefer bool\n\tsp        uintptr  // sp at time of defer\n\tpc        uintptr  // pc at time of defer\n\tfn        *funcval // can be nil for open-coded defers\n\t_panic    *_panic  // panic that is running defer\n\tlink      *_defer\n\n\t// If openDefer is true, the fields below record values about the stack\n\t// frame and associated function that has the open-coded defer(s). sp\n\t// above will be the sp for the frame, and pc will be address of the\n\t// deferreturn call in the function.\n\tfd   unsafe.Pointer // funcdata for the function associated with the frame\n\tvarp uintptr        // value of varp for the stack frame\n\t// framepc is the current pc associated with the stack frame. Together,\n\t// with sp above (which is the sp associated with the stack frame),\n\t// framepc/sp can be used as pc/sp pair to continue a stack trace via\n\t// gentraceback().\n\tframepc uintptr\n}",
      "entry" : false,
      "use-vars" : [ ]
    } ],
    "code" : "// A _defer holds an entry on the list of deferred calls.\n// If you add a field here, add code to clear it in freedefer and deferProcStack\n// This struct must match the code in cmd/compile/internal/gc/reflect.go:deferstruct\n// and cmd/compile/internal/gc/ssa.go:(*state).call.\n// Some defers will be allocated on the stack and some on the heap.\n// All defers are logically part of the stack, so write barriers to\n// initialize them are not required. All defers must be manually scanned,\n// and for heap defers, marked.\ntype _defer struct {\n\tsiz     int32 // includes both arguments and results\n\tstarted bool\n\theap    bool\n\t// openDefer indicates that this _defer is for a frame with open-coded\n\t// defers. We have only one defer record for the entire frame (which may\n\t// currently have 0, 1, or more defers active).\n\topenDefer bool\n\tsp        uintptr  // sp at time of defer\n\tpc        uintptr  // pc at time of defer\n\tfn        *funcval // can be nil for open-coded defers\n\t_panic    *_panic  // panic that is running defer\n\tlink      *_defer\n\n\t// If openDefer is true, the fields below record values about the stack\n\t// frame and associated function that has the open-coded defer(s). sp\n\t// above will be the sp for the frame, and pc will be address of the\n\t// deferreturn call in the function.\n\tfd   unsafe.Pointer // funcdata for the function associated with the frame\n\tvarp uintptr        // value of varp for the stack frame\n\t// framepc is the current pc associated with the stack frame. Together,\n\t// with sp above (which is the sp associated with the stack frame),\n\t// framepc/sp can be used as pc/sp pair to continue a stack trace via\n\t// gentraceback().\n\tframepc uintptr\n}",
    "defines" : [ 0 ],
    "functions" : [ ],
    "line-end" : 886,
    "line-start" : 861,
    "names" : [ "_defer" ],
    "package" : 0,
    "packages" : [ {
      "name" : "runtime",
      "path" : "runtime"
    }, {
      "name" : "unsafe",
      "path" : "unsafe"
    } ],
    "params" : [ ],
    "receivers" : [ ],
    "results" : [ ],
    "type" : "type",
    "types" : [ {
      "local-name" : "_defer",
      "name" : "runtime._defer",
      "package" : 0,
      "type" : "Named",
      "underlying" : 1
    }, {
      "fields" : [ {
        "name" : "siz",
        "type" : 2
      }, {
        "name" : "started",
        "type" : 3
      }, {
        "name" : "heap",
        "type" : 3
      }, {
        "name" : "openDefer",
        "type" : 3
      }, {
        "name" : "sp",
        "type" : 4
      }, {
        "name" : "pc",
        "type" : 4
      }, {
        "name" : "fn",
        "type" : 5
      }, {
        "name" : "_panic",
        "type" : 8
      }, {
        "name" : "link",
        "type" : 13
      }, {
        "name" : "fd",
        "type" : 11
      }, {
        "name" : "varp",
        "type" : 4
      }, {
        "name" : "framepc",
        "type" : 4
      } ],
      "name" : "struct{siz int32; started bool; heap bool; openDefer bool; sp uintptr; pc uintptr; fn *runtime.funcval; _panic *runtime._panic; link *runtime._defer; fd unsafe.Pointer; varp uintptr; framepc uintptr}",
      "type" : "Struct",
      "underlying" : 1
    }, {
      "name" : "int32",
      "type" : "Basic",
      "underlying" : 2
    }, {
      "name" : "bool",
      "type" : "Basic",
      "underlying" : 3
    }, {
      "name" : "uintptr",
      "type" : "Basic",
      "underlying" : 4
    }, {
      "elem" : 6,
      "name" : "*runtime.funcval",
      "type" : "Pointer",
      "underlying" : 5
    }, {
      "local-name" : "funcval",
      "name" : "runtime.funcval",
      "package" : 0,
      "type" : "Named",
      "underlying" : 7
    }, {
      "fields" : [ {
        "name" : "fn",
        "type" : 4
      } ],
      "name" : "struct{fn uintptr}",
      "type" : "Struct",
      "underlying" : 7
    }, {
      "elem" : 9,
      "name" : "*runtime._panic",
      "type" : "Pointer",
      "underlying" : 8
    }, {
      "local-name" : "_panic",
      "name" : "runtime._panic",
      "package" : 0,
      "type" : "Named",
      "underlying" : 10
    }, {
      "fields" : [ {
        "name" : "argp",
        "type" : 11
      }, {
        "name" : "arg",
        "type" : 12
      }, {
        "name" : "link",
        "type" : 8
      }, {
        "name" : "pc",
        "type" : 4
      }, {
        "name" : "sp",
        "type" : 11
      }, {
        "name" : "recovered",
        "type" : 3
      }, {
        "name" : "aborted",
        "type" : 3
      }, {
        "name" : "goexit",
        "type" : 3
      } ],
      "name" : "struct{argp unsafe.Pointer; arg interface{}; link *runtime._panic; pc uintptr; sp unsafe.Pointer; recovered bool; aborted bool; goexit bool}",
      "type" : "Struct",
      "underlying" : 10
    }, {
      "local-name" : "Pointer",
      "name" : "unsafe.Pointer",
      "package" : 1,
      "type" : "Basic",
      "underlying" : 11
    }, {
      "methods" : [ ],
      "name" : "interface{}",
      "type" : "Interface",
      "underlying" : 12
    }, {
      "elem" : 0,
      "name" : "*runtime._defer",
      "type" : "Pointer",
      "underlying" : 13
    } ],
    "variables" : [ ]
  },
  "go-version" : "1.14.3"
}