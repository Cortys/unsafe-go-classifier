{
  "usage" : {
    "file" : "syscall_linux.go",
    "label1" : "cast-pointer",
    "label2" : "efficiency",
    "line" : "404",
    "module" : "golang.org/x/sys",
    "pkg" : "golang.org/x/sys/unix",
    "project" : "rancher/rancher",
    "snippet" : "func (sa *SockaddrUnix) sockaddr() (unsafe.Pointer, _Socklen, error) {",
    "version" : "v0.0.0-20200122134326-e047566fdf82"
  },
  "cfg" : {
    "blocks" : [ {
      "update-vars" : [ ],
      "successors" : [ 2 ],
      "in-vars" : [ 1 ],
      "exit" : false,
      "out-vars" : [ 1 ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[entry]",
      "entry" : true,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ ],
      "in-vars" : [ ],
      "exit" : true,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[exit]",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 3 ],
      "in-vars" : [ 1 ],
      "exit" : false,
      "out-vars" : [ 1, 6 ],
      "decl-vars" : [ 6 ],
      "line-start" : 405,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "name"
          }
        } ],
        "right" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "Name",
            "variable" : 5
          },
          "go-type" : 10,
          "kind" : "expression",
          "target" : {
            "go-type" : 11,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "sa",
              "variable" : 1
            }
          },
          "type" : "selector"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 405,
      "code" : "name := sa.Name",
      "entry" : false,
      "use-vars" : [ 1 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 4 ],
      "in-vars" : [ 1, 6 ],
      "exit" : false,
      "out-vars" : [ 1, 6, 7 ],
      "decl-vars" : [ 7 ],
      "line-start" : 406,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "n"
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 10,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "name",
              "variable" : 6
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 20,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Builtin",
              "kind" : "ident",
              "value" : "len"
            }
          },
          "go-type" : 19,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 406,
      "code" : "n := len(name)",
      "entry" : false,
      "use-vars" : [ 6 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 5, 6 ],
      "in-vars" : [ 1, 6, 7 ],
      "exit" : false,
      "out-vars" : [ 6, 7, 1 ],
      "decl-vars" : [ ],
      "line-start" : 407,
      "ast" : {
        "condition" : {
          "go-type" : 22,
          "kind" : "expression",
          "left" : {
            "go-type" : 19,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "n",
              "variable" : 7
            }
          },
          "operator" : ">=",
          "right" : {
            "go-type" : 19,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "108"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 409,
      "code" : "if n >= len(sa.raw.Path) {\n\treturn nil, 0, EINVAL\n}",
      "entry" : false,
      "use-vars" : [ 7, 1 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 408,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 3,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Nil",
            "kind" : "ident",
            "value" : "nil"
          }
        }, {
          "go-type" : 4,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "0"
          }
        }, {
          "go-type" : 23,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "22"
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 408,
      "code" : "return nil, 0, EINVAL",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ 1 ],
      "successors" : [ 8 ],
      "in-vars" : [ 1, 6, 7 ],
      "exit" : false,
      "out-vars" : [ 1, 6, 7 ],
      "decl-vars" : [ ],
      "line-start" : 410,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "Family",
            "variable" : 9
          },
          "go-type" : 16,
          "kind" : "expression",
          "target" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "raw",
              "variable" : 8
            },
            "go-type" : 14,
            "kind" : "expression",
            "target" : {
              "go-type" : 11,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "sa",
                "variable" : 1
              }
            },
            "type" : "selector"
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "go-type" : 16,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "1"
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 410,
      "code" : "sa.raw.Family = AF_UNIX",
      "entry" : false,
      "use-vars" : [ 1 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 10, 11 ],
      "in-vars" : [ 1, 6, 7, 10 ],
      "exit" : false,
      "out-vars" : [ 10, 1, 6, 7 ],
      "decl-vars" : [ ],
      "line-start" : 411,
      "ast" : {
        "condition" : {
          "go-type" : 22,
          "kind" : "expression",
          "left" : {
            "go-type" : 19,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "i",
              "variable" : 10
            }
          },
          "operator" : "<",
          "right" : {
            "go-type" : 19,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "n",
              "variable" : 7
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "for"
      },
      "assign-vars" : [ ],
      "line-end" : 413,
      "code" : "for i := 0; i < n; i++ {\n\tsa.raw.Path[i] = int8(name[i])\n}",
      "entry" : false,
      "use-vars" : [ 10, 7 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 7 ],
      "in-vars" : [ 1, 6, 7 ],
      "exit" : false,
      "out-vars" : [ 1, 6, 7, 10 ],
      "decl-vars" : [ 10 ],
      "line-start" : 411,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "i"
          }
        } ],
        "right" : [ {
          "go-type" : 19,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "0"
          }
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 411,
      "code" : "i := 0",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ 10 ],
      "successors" : [ 7 ],
      "in-vars" : [ 1, 6, 7, 10 ],
      "exit" : false,
      "out-vars" : [ 10, 1, 6, 7 ],
      "decl-vars" : [ ],
      "line-start" : 411,
      "ast" : {
        "kind" : "statement",
        "operation" : "++",
        "target" : {
          "go-type" : 19,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "i",
            "variable" : 10
          }
        },
        "type" : "crement"
      },
      "assign-vars" : [ 10 ],
      "line-end" : 411,
      "code" : "i++",
      "entry" : false,
      "use-vars" : [ 10 ]
    }, {
      "update-vars" : [ 1 ],
      "successors" : [ 9 ],
      "in-vars" : [ 10, 1, 6, 7 ],
      "exit" : false,
      "out-vars" : [ 1, 6, 7, 10 ],
      "decl-vars" : [ ],
      "line-start" : 412,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 18,
          "index" : {
            "go-type" : 19,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "i",
              "variable" : 10
            }
          },
          "kind" : "expression",
          "target" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "Path",
              "variable" : 11
            },
            "go-type" : 17,
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "raw",
                "variable" : 8
              },
              "go-type" : 14,
              "kind" : "expression",
              "target" : {
                "go-type" : 11,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "sa",
                  "variable" : 1
                }
              },
              "type" : "selector"
            },
            "type" : "selector"
          },
          "type" : "index"
        } ],
        "right" : [ {
          "coerced-to" : {
            "go-type" : 18,
            "kind" : "type",
            "type" : "identifier",
            "value" : {
              "go-type" : 18,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "int8"
            }
          },
          "go-type" : 18,
          "kind" : "expression",
          "target" : {
            "go-type" : 25,
            "index" : {
              "go-type" : 19,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "i",
                "variable" : 10
              }
            },
            "kind" : "expression",
            "target" : {
              "go-type" : 10,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "name",
                "variable" : 6
              }
            },
            "type" : "index"
          },
          "type" : "cast"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 412,
      "code" : "sa.raw.Path[i] = int8(name[i])",
      "entry" : false,
      "use-vars" : [ 10, 6, 1 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 12 ],
      "in-vars" : [ 1, 7 ],
      "exit" : false,
      "out-vars" : [ 1, 7, 12 ],
      "decl-vars" : [ 12 ],
      "line-start" : 415,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "sl"
          }
        } ],
        "right" : [ {
          "go-type" : 4,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "2"
          }
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 415,
      "code" : "sl := _Socklen(2)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 13, 14 ],
      "in-vars" : [ 12, 1, 7 ],
      "exit" : false,
      "out-vars" : [ 1, 7, 12 ],
      "decl-vars" : [ ],
      "line-start" : 416,
      "ast" : {
        "condition" : {
          "go-type" : 22,
          "kind" : "expression",
          "left" : {
            "go-type" : 19,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "n",
              "variable" : 7
            }
          },
          "operator" : ">",
          "right" : {
            "go-type" : 19,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 418,
      "code" : "if n > 0 {\n\tsl += _Socklen(n) + 1\n}",
      "entry" : false,
      "use-vars" : [ 7 ]
    }, {
      "update-vars" : [ 12 ],
      "successors" : [ 14 ],
      "in-vars" : [ 1, 7, 12 ],
      "exit" : false,
      "out-vars" : [ 1, 12 ],
      "decl-vars" : [ ],
      "line-start" : 417,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 4,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "sl",
            "variable" : 12
          }
        } ],
        "operator" : "+",
        "right" : [ {
          "go-type" : 4,
          "kind" : "expression",
          "left" : {
            "coerced-to" : {
              "go-type" : 4,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 4,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "_Socklen"
              }
            },
            "go-type" : 4,
            "kind" : "expression",
            "target" : {
              "go-type" : 19,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "n",
                "variable" : 7
              }
            },
            "type" : "cast"
          },
          "operator" : "+",
          "right" : {
            "go-type" : 4,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "1"
            }
          },
          "type" : "binary"
        } ],
        "type" : "assign-operator"
      },
      "assign-vars" : [ 12 ],
      "line-end" : 417,
      "code" : "sl += _Socklen(n) + 1",
      "entry" : false,
      "use-vars" : [ 7, 12 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 15, 17 ],
      "in-vars" : [ 1, 12 ],
      "exit" : false,
      "out-vars" : [ 1, 12 ],
      "decl-vars" : [ ],
      "line-start" : 419,
      "ast" : {
        "condition" : {
          "go-type" : 22,
          "kind" : "expression",
          "left" : {
            "go-type" : 18,
            "index" : {
              "go-type" : 19,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "0"
              }
            },
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "Path",
                "variable" : 11
              },
              "go-type" : 17,
              "kind" : "expression",
              "target" : {
                "field" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "raw",
                  "variable" : 8
                },
                "go-type" : 14,
                "kind" : "expression",
                "target" : {
                  "go-type" : 11,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "sa",
                    "variable" : 1
                  }
                },
                "type" : "selector"
              },
              "type" : "selector"
            },
            "type" : "index"
          },
          "operator" : "==",
          "right" : {
            "go-type" : 18,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "64"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 423,
      "code" : "if sa.raw.Path[0] == '@' {\n\tsa.raw.Path[0] = 0\n\n\tsl--\n}",
      "entry" : false,
      "use-vars" : [ 1 ]
    }, {
      "update-vars" : [ 1 ],
      "successors" : [ 16 ],
      "in-vars" : [ 1, 12 ],
      "exit" : false,
      "out-vars" : [ 12, 1 ],
      "decl-vars" : [ ],
      "line-start" : 420,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 18,
          "index" : {
            "go-type" : 19,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "kind" : "expression",
          "target" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "Path",
              "variable" : 11
            },
            "go-type" : 17,
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "raw",
                "variable" : 8
              },
              "go-type" : 14,
              "kind" : "expression",
              "target" : {
                "go-type" : 11,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "sa",
                  "variable" : 1
                }
              },
              "type" : "selector"
            },
            "type" : "selector"
          },
          "type" : "index"
        } ],
        "right" : [ {
          "go-type" : 18,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "0"
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 420,
      "code" : "sa.raw.Path[0] = 0",
      "entry" : false,
      "use-vars" : [ 1 ]
    }, {
      "update-vars" : [ 12 ],
      "successors" : [ 17 ],
      "in-vars" : [ 1, 12 ],
      "exit" : false,
      "out-vars" : [ 1, 12 ],
      "decl-vars" : [ ],
      "line-start" : 422,
      "ast" : {
        "kind" : "statement",
        "operation" : "--",
        "target" : {
          "go-type" : 4,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "sl",
            "variable" : 12
          }
        },
        "type" : "crement"
      },
      "assign-vars" : [ 12 ],
      "line-end" : 422,
      "code" : "sl--",
      "entry" : false,
      "use-vars" : [ 12 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 1, 12 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 425,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "coerced-to" : {
            "go-type" : 3,
            "kind" : "type",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 1,
              "value" : "unsafe"
            },
            "type" : "identifier",
            "value" : {
              "go-type" : 3,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "Pointer"
            }
          },
          "go-type" : 3,
          "kind" : "expression",
          "target" : {
            "go-type" : 26,
            "kind" : "expression",
            "operator" : "&",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "raw",
                "variable" : 8
              },
              "go-type" : 14,
              "kind" : "expression",
              "target" : {
                "go-type" : 11,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "sa",
                  "variable" : 1
                }
              },
              "type" : "selector"
            },
            "type" : "unary"
          },
          "type" : "cast"
        }, {
          "go-type" : 4,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "sl",
            "variable" : 12
          }
        }, {
          "go-type" : 27,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Nil",
            "kind" : "ident",
            "value" : "nil"
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 425,
      "code" : "return unsafe.Pointer(&sa.raw), sl, nil",
      "entry" : false,
      "use-vars" : [ 12, 1 ]
    } ],
    "code" : "func (sa *SockaddrUnix) sockaddr() (unsafe.Pointer, _Socklen, error) {\n\tname := sa.Name\n\tn := len(name)\n\tif n >= len(sa.raw.Path) {\n\t\treturn nil, 0, EINVAL\n\t}\n\tsa.raw.Family = AF_UNIX\n\tfor i := 0; i < n; i++ {\n\t\tsa.raw.Path[i] = int8(name[i])\n\t}\n\n\tsl := _Socklen(2)\n\tif n > 0 {\n\t\tsl += _Socklen(n) + 1\n\t}\n\tif sa.raw.Path[0] == '@' {\n\t\tsa.raw.Path[0] = 0\n\n\t\tsl--\n\t}\n\n\treturn unsafe.Pointer(&sa.raw), sl, nil\n}",
    "defines" : [ 0 ],
    "functions" : [ {
      "name" : "sockaddr",
      "package" : 0,
      "type" : 0,
      "exported" : false
    } ],
    "line-end" : 426,
    "line-start" : 404,
    "names" : [ "sockaddr" ],
    "package" : 0,
    "packages" : [ {
      "name" : "unix",
      "path" : "golang.org/x/sys/unix"
    }, {
      "name" : "unsafe",
      "path" : "unsafe"
    }, {
      "name" : "syscall",
      "path" : "syscall"
    } ],
    "params" : [ ],
    "receivers" : [ 1 ],
    "results" : [ 2, 3, 4 ],
    "type" : "function",
    "types" : [ {
      "name" : "(*golang.org/x/sys/unix.SockaddrUnix) func() (unsafe.Pointer, golang.org/x/sys/unix._Socklen, error)",
      "params" : 1,
      "recv" : 1,
      "results" : 2,
      "type" : "Signature",
      "underlying" : 0,
      "variadic" : false
    }, {
      "fields" : [ ],
      "name" : "()",
      "type" : "Tuple",
      "underlying" : 1
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 3
      }, {
        "name" : "",
        "type" : 4
      }, {
        "name" : "",
        "type" : 6
      } ],
      "name" : "(unsafe.Pointer, golang.org/x/sys/unix._Socklen, error)",
      "type" : "Tuple",
      "underlying" : 2
    }, {
      "local-name" : "Pointer",
      "name" : "unsafe.Pointer",
      "package" : 1,
      "type" : "Basic",
      "underlying" : 3
    }, {
      "local-name" : "_Socklen",
      "name" : "golang.org/x/sys/unix._Socklen",
      "package" : 0,
      "type" : "Named",
      "underlying" : 5
    }, {
      "name" : "uint32",
      "type" : "Basic",
      "underlying" : 5
    }, {
      "local-name" : "error",
      "name" : "error",
      "package" : -1,
      "type" : "Named",
      "underlying" : 7
    }, {
      "methods" : [ {
        "name" : "Error",
        "type" : 8
      } ],
      "name" : "interface{Error() string}",
      "type" : "Interface",
      "underlying" : 7
    }, {
      "name" : "(error) func() string",
      "params" : 1,
      "recv" : 0,
      "results" : 9,
      "type" : "Signature",
      "underlying" : 8,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 10
      } ],
      "name" : "(string)",
      "type" : "Tuple",
      "underlying" : 9
    }, {
      "name" : "string",
      "type" : "Basic",
      "underlying" : 10
    }, {
      "elem" : 12,
      "name" : "*golang.org/x/sys/unix.SockaddrUnix",
      "type" : "Pointer",
      "underlying" : 11
    }, {
      "local-name" : "SockaddrUnix",
      "name" : "golang.org/x/sys/unix.SockaddrUnix",
      "package" : 0,
      "type" : "Named",
      "underlying" : 13
    }, {
      "fields" : [ {
        "name" : "Name",
        "type" : 10
      }, {
        "name" : "raw",
        "type" : 14
      } ],
      "name" : "struct{Name string; raw golang.org/x/sys/unix.RawSockaddrUnix}",
      "type" : "Struct",
      "underlying" : 13
    }, {
      "local-name" : "RawSockaddrUnix",
      "name" : "golang.org/x/sys/unix.RawSockaddrUnix",
      "package" : 0,
      "type" : "Named",
      "underlying" : 15
    }, {
      "fields" : [ {
        "name" : "Family",
        "type" : 16
      }, {
        "name" : "Path",
        "type" : 17
      } ],
      "name" : "struct{Family uint16; Path [108]int8}",
      "type" : "Struct",
      "underlying" : 15
    }, {
      "name" : "uint16",
      "type" : "Basic",
      "underlying" : 16
    }, {
      "elem" : 18,
      "name" : "[108]int8",
      "type" : "Array",
      "underlying" : 17
    }, {
      "name" : "int8",
      "type" : "Basic",
      "underlying" : 18
    }, {
      "name" : "int",
      "type" : "Basic",
      "underlying" : 19
    }, {
      "name" : "func(string) int",
      "params" : 9,
      "recv" : -1,
      "results" : 21,
      "type" : "Signature",
      "underlying" : 20,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 19
      } ],
      "name" : "(int)",
      "type" : "Tuple",
      "underlying" : 21
    }, {
      "name" : "untyped bool",
      "type" : "Basic",
      "underlying" : 22
    }, {
      "local-name" : "Errno",
      "name" : "syscall.Errno",
      "package" : 2,
      "type" : "Named",
      "underlying" : 24
    }, {
      "name" : "uintptr",
      "type" : "Basic",
      "underlying" : 24
    }, {
      "name" : "byte",
      "type" : "Basic",
      "underlying" : 25
    }, {
      "elem" : 14,
      "name" : "*golang.org/x/sys/unix.RawSockaddrUnix",
      "type" : "Pointer",
      "underlying" : 26
    }, {
      "name" : "untyped nil",
      "type" : "Basic",
      "underlying" : 27
    } ],
    "variables" : [ {
      "name" : "",
      "package" : -1,
      "type" : 6,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "sa",
      "package" : 0,
      "type" : 11,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "[res0]",
      "package" : 0,
      "type" : 3,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "[res1]",
      "package" : 0,
      "type" : 4,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "[res2]",
      "package" : 0,
      "type" : 6,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "Name",
      "package" : 0,
      "type" : 10,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "name",
      "package" : 0,
      "type" : 10,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "n",
      "package" : 0,
      "type" : 19,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "raw",
      "package" : 0,
      "type" : 14,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "Family",
      "package" : 0,
      "type" : 16,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "i",
      "package" : 0,
      "type" : 19,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "Path",
      "package" : 0,
      "type" : 17,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "sl",
      "package" : 0,
      "type" : 4,
      "exported" : false,
      "embedded" : false,
      "field" : false
    } ]
  },
  "go-version" : "1.14.3"
}