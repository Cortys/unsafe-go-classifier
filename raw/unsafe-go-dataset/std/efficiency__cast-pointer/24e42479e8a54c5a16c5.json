{
  "usage" : {
    "file" : "map_faststr.go",
    "label1" : "cast-pointer",
    "label2" : "efficiency",
    "line" : "12",
    "module" : "std",
    "pkg" : "runtime",
    "project" : "kubernetes/kubernetes",
    "snippet" : "func mapaccess1_faststr(t *maptype, h *hmap, ky string) unsafe.Pointer {",
    "version" : "std"
  },
  "cfg" : {
    "blocks" : [ {
      "update-vars" : [ ],
      "successors" : [ 2 ],
      "in-vars" : [ 4, 1, 0, 2 ],
      "exit" : false,
      "out-vars" : [ 2, 4, 1, 0 ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[entry]",
      "entry" : true,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ ],
      "in-vars" : [ ],
      "exit" : true,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[exit]",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 3, 5 ],
      "in-vars" : [ 4, 1, 0, 2 ],
      "exit" : false,
      "out-vars" : [ 4, 1, 0, 2 ],
      "decl-vars" : [ ],
      "line-start" : 13,
      "ast" : {
        "condition" : {
          "go-type" : 42,
          "kind" : "expression",
          "left" : {
            "go-type" : 42,
            "kind" : "constant",
            "value" : {
              "type" : "BOOL",
              "value" : "false"
            }
          },
          "operator" : "&&",
          "right" : {
            "go-type" : 42,
            "kind" : "expression",
            "left" : {
              "go-type" : 26,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "h",
                "variable" : 1
              }
            },
            "operator" : "!=",
            "right" : {
              "go-type" : 43,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Nil",
                "kind" : "ident",
                "value" : "nil"
              }
            },
            "type" : "binary"
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 16,
      "code" : "if raceenabled && h != nil {\n\tcallerpc := getcallerpc()\n\tracereadpc(unsafe.Pointer(h), callerpc, funcPC(mapaccess1_faststr))\n}",
      "entry" : false,
      "use-vars" : [ 1 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 4 ],
      "in-vars" : [ 4, 1, 0, 2 ],
      "exit" : false,
      "out-vars" : [ 4, 1, 0, 5, 2 ],
      "decl-vars" : [ 5 ],
      "line-start" : 14,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "callerpc"
          }
        } ],
        "right" : [ {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 44,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 1,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "getcallerpc"
            }
          },
          "go-type" : 7,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 14,
      "code" : "callerpc := getcallerpc()",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 5 ],
      "in-vars" : [ 5, 2, 4, 1, 0 ],
      "exit" : false,
      "out-vars" : [ 1, 0, 2, 4 ],
      "decl-vars" : [ ],
      "line-start" : 15,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "coerced-to" : {
              "go-type" : 13,
              "kind" : "type",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 1,
                "value" : "unsafe"
              },
              "type" : "identifier",
              "value" : {
                "go-type" : 13,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "Pointer"
              }
            },
            "go-type" : 13,
            "kind" : "expression",
            "target" : {
              "go-type" : 26,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "h",
                "variable" : 1
              }
            },
            "type" : "cast"
          }, {
            "go-type" : 7,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "callerpc",
              "variable" : 5
            }
          }, {
            "arguments" : [ {
              "go-type" : 0,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "function" : 0,
                "ident-kind" : "Func",
                "kind" : "ident",
                "value" : "mapaccess1_faststr"
              }
            } ],
            "ellipsis" : false,
            "function" : {
              "go-type" : 48,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "function" : 3,
                "ident-kind" : "Func",
                "kind" : "ident",
                "value" : "funcPC"
              }
            },
            "go-type" : 7,
            "kind" : "expression",
            "type" : "call"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 46,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 2,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "racereadpc"
            }
          },
          "go-type" : 45,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 15,
      "code" : "racereadpc(unsafe.Pointer(h), callerpc, funcPC(mapaccess1_faststr))",
      "entry" : false,
      "use-vars" : [ 1, 5 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 6, 7 ],
      "in-vars" : [ 4, 1, 0, 2 ],
      "exit" : false,
      "out-vars" : [ 4, 1, 0, 2 ],
      "decl-vars" : [ ],
      "line-start" : 17,
      "ast" : {
        "condition" : {
          "go-type" : 42,
          "kind" : "expression",
          "left" : {
            "go-type" : 42,
            "kind" : "expression",
            "left" : {
              "go-type" : 26,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "h",
                "variable" : 1
              }
            },
            "operator" : "==",
            "right" : {
              "go-type" : 43,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Nil",
                "kind" : "ident",
                "value" : "nil"
              }
            },
            "type" : "binary"
          },
          "operator" : "||",
          "right" : {
            "go-type" : 42,
            "kind" : "expression",
            "left" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "count",
                "variable" : 6
              },
              "go-type" : 29,
              "kind" : "expression",
              "target" : {
                "go-type" : 26,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "h",
                  "variable" : 1
                }
              },
              "type" : "selector"
            },
            "operator" : "==",
            "right" : {
              "go-type" : 29,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "0"
              }
            },
            "type" : "binary"
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 19,
      "code" : "if h == nil || h.count == 0 {\n\treturn unsafe.Pointer(&zeroVal[0])\n}",
      "entry" : false,
      "use-vars" : [ 1 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 4 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 18,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "coerced-to" : {
            "go-type" : 13,
            "kind" : "type",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 1,
              "value" : "unsafe"
            },
            "type" : "identifier",
            "value" : {
              "go-type" : 13,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "Pointer"
            }
          },
          "go-type" : 13,
          "kind" : "expression",
          "target" : {
            "go-type" : 16,
            "kind" : "expression",
            "operator" : "&",
            "target" : {
              "go-type" : 17,
              "index" : {
                "go-type" : 29,
                "kind" : "constant",
                "value" : {
                  "type" : "INT",
                  "value" : "0"
                }
              },
              "kind" : "expression",
              "target" : {
                "go-type" : 41,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "zeroVal",
                  "variable" : 4
                }
              },
              "type" : "index"
            },
            "type" : "unary"
          },
          "type" : "cast"
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 18,
      "code" : "return unsafe.Pointer(&zeroVal[0])",
      "entry" : false,
      "use-vars" : [ 4 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 8, 9 ],
      "in-vars" : [ 4, 1, 0, 2 ],
      "exit" : false,
      "out-vars" : [ 2, 4, 1, 0 ],
      "decl-vars" : [ ],
      "line-start" : 20,
      "ast" : {
        "condition" : {
          "go-type" : 42,
          "kind" : "expression",
          "left" : {
            "go-type" : 10,
            "kind" : "expression",
            "left" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "flags",
                "variable" : 7
              },
              "go-type" : 10,
              "kind" : "expression",
              "target" : {
                "go-type" : 26,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "h",
                  "variable" : 1
                }
              },
              "type" : "selector"
            },
            "operator" : "&",
            "right" : {
              "go-type" : 10,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "4"
              }
            },
            "type" : "binary"
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 10,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 22,
      "code" : "if h.flags&hashWriting != 0 {\n\tthrow(\"concurrent map read and map write\")\n}",
      "entry" : false,
      "use-vars" : [ 1 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 9 ],
      "in-vars" : [ 4, 1, 0, 2 ],
      "exit" : false,
      "out-vars" : [ 4, 1, 0, 2 ],
      "decl-vars" : [ ],
      "line-start" : 21,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 39,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "concurrent map read and map write"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 51,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 4,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "throw"
            }
          },
          "go-type" : 45,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 21,
      "code" : "throw(\"concurrent map read and map write\")",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 10 ],
      "in-vars" : [ 0, 2, 4, 1 ],
      "exit" : false,
      "out-vars" : [ 0, 2, 8, 4, 1 ],
      "decl-vars" : [ 8 ],
      "line-start" : 23,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "key"
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 58,
            "kind" : "expression",
            "operator" : "&",
            "target" : {
              "go-type" : 39,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "ky",
                "variable" : 2
              }
            },
            "type" : "unary"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 56,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 5,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "stringStructOf"
            }
          },
          "go-type" : 53,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 23,
      "code" : "key := stringStructOf(&ky)",
      "entry" : false,
      "use-vars" : [ 2 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 11, 47 ],
      "in-vars" : [ 8, 4, 1, 0, 2 ],
      "exit" : false,
      "out-vars" : [ 2, 8, 4, 1, 0 ],
      "decl-vars" : [ ],
      "line-start" : 24,
      "ast" : {
        "condition" : {
          "go-type" : 42,
          "kind" : "expression",
          "left" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "B",
              "variable" : 9
            },
            "go-type" : 10,
            "kind" : "expression",
            "target" : {
              "go-type" : 26,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "h",
                "variable" : 1
              }
            },
            "type" : "selector"
          },
          "operator" : "==",
          "right" : {
            "go-type" : 10,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 77,
      "code" : "if h.B == 0 {\n\n\tb := (*bmap)(h.buckets)\n\tif key.len < 32 {\n\n\t\tfor i, kptr := uintptr(0), b.keys(); i < bucketCnt; i, kptr = i+1, add(kptr, 2*sys.PtrSize) {\n\t\t\tk := (*stringStruct)(kptr)\n\t\t\tif k.len != key.len || isEmpty(b.tophash[i]) {\n\t\t\t\tif b.tophash[i] == emptyRest {\n\t\t\t\t\tbreak\n\t\t\t\t}\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tif k.str == key.str || memequal(k.str, key.str, uintptr(key.len)) {\n\t\t\t\treturn add(unsafe.Pointer(b), dataOffset+bucketCnt*2*sys.PtrSize+i*uintptr(t.elemsize))\n\t\t\t}\n\t\t}\n\t\treturn unsafe.Pointer(&zeroVal[0])\n\t}\n\n\tkeymaybe := uintptr(bucketCnt)\n\tfor i, kptr := uintptr(0), b.keys(); i < bucketCnt; i, kptr = i+1, add(kptr, 2*sys.PtrSize) {\n\t\tk := (*stringStruct)(kptr)\n\t\tif k.len != key.len || isEmpty(b.tophash[i]) {\n\t\t\tif b.tophash[i] == emptyRest {\n\t\t\t\tbreak\n\t\t\t}\n\t\t\tcontinue\n\t\t}\n\t\tif k.str == key.str {\n\t\t\treturn add(unsafe.Pointer(b), dataOffset+bucketCnt*2*sys.PtrSize+i*uintptr(t.elemsize))\n\t\t}\n\n\t\tif *((*[4]byte)(key.str)) != *((*[4]byte)(k.str)) {\n\t\t\tcontinue\n\t\t}\n\n\t\tif *((*[4]byte)(add(key.str, uintptr(key.len)-4))) != *((*[4]byte)(add(k.str, uintptr(key.len)-4))) {\n\t\t\tcontinue\n\t\t}\n\t\tif keymaybe != bucketCnt {\n\n\t\t\tgoto dohash\n\t\t}\n\t\tkeymaybe = i\n\t}\n\tif keymaybe != bucketCnt {\n\t\tk := (*stringStruct)(add(unsafe.Pointer(b), dataOffset+keymaybe*2*sys.PtrSize))\n\t\tif memequal(k.str, key.str, uintptr(key.len)) {\n\t\t\treturn add(unsafe.Pointer(b), dataOffset+bucketCnt*2*sys.PtrSize+keymaybe*uintptr(t.elemsize))\n\t\t}\n\t}\n\treturn unsafe.Pointer(&zeroVal[0])\n}",
      "entry" : false,
      "use-vars" : [ 1 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 12 ],
      "in-vars" : [ 1, 0, 2, 8, 4 ],
      "exit" : false,
      "out-vars" : [ 1, 0, 2, 12, 8, 4 ],
      "decl-vars" : [ 12 ],
      "line-start" : 26,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "b"
          }
        } ],
        "right" : [ {
          "coerced-to" : {
            "contained" : {
              "go-type" : 36,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 36,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "bmap"
              }
            },
            "go-type" : 35,
            "kind" : "type",
            "type" : "pointer"
          },
          "go-type" : 35,
          "kind" : "expression",
          "target" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "buckets",
              "variable" : 10
            },
            "go-type" : 13,
            "kind" : "expression",
            "target" : {
              "go-type" : 26,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "h",
                "variable" : 1
              }
            },
            "type" : "selector"
          },
          "type" : "cast"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 26,
      "code" : "b := (*bmap)(h.buckets)",
      "entry" : false,
      "use-vars" : [ 1 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 14, 24 ],
      "in-vars" : [ 0, 2, 12, 8, 4, 1 ],
      "exit" : false,
      "out-vars" : [ 12, 8, 4, 1, 0, 2 ],
      "decl-vars" : [ ],
      "line-start" : 27,
      "ast" : {
        "condition" : {
          "go-type" : 42,
          "kind" : "expression",
          "left" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "len",
              "variable" : 11
            },
            "go-type" : 29,
            "kind" : "expression",
            "target" : {
              "go-type" : 53,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "key",
                "variable" : 8
              }
            },
            "type" : "selector"
          },
          "operator" : "<",
          "right" : {
            "go-type" : 29,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "32"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 42,
      "code" : "if key.len < 32 {\n\n\tfor i, kptr := uintptr(0), b.keys(); i < bucketCnt; i, kptr = i+1, add(kptr, 2*sys.PtrSize) {\n\t\tk := (*stringStruct)(kptr)\n\t\tif k.len != key.len || isEmpty(b.tophash[i]) {\n\t\t\tif b.tophash[i] == emptyRest {\n\t\t\t\tbreak\n\t\t\t}\n\t\t\tcontinue\n\t\t}\n\t\tif k.str == key.str || memequal(k.str, key.str, uintptr(key.len)) {\n\t\t\treturn add(unsafe.Pointer(b), dataOffset+bucketCnt*2*sys.PtrSize+i*uintptr(t.elemsize))\n\t\t}\n\t}\n\treturn unsafe.Pointer(&zeroVal[0])\n}",
      "entry" : false,
      "use-vars" : [ 8 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 16, 23 ],
      "in-vars" : [ 0, 15, 14, 12, 8, 4 ],
      "exit" : false,
      "out-vars" : [ 0, 15, 14, 12, 8, 4 ],
      "decl-vars" : [ ],
      "line-start" : 29,
      "ast" : {
        "condition" : {
          "go-type" : 42,
          "kind" : "expression",
          "left" : {
            "go-type" : 7,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "i",
              "variable" : 14
            }
          },
          "operator" : "<",
          "right" : {
            "go-type" : 7,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "8"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "for"
      },
      "assign-vars" : [ ],
      "line-end" : 40,
      "code" : "for i, kptr := uintptr(0), b.keys(); i < bucketCnt; i, kptr = i+1, add(kptr, 2*sys.PtrSize) {\n\tk := (*stringStruct)(kptr)\n\tif k.len != key.len || isEmpty(b.tophash[i]) {\n\t\tif b.tophash[i] == emptyRest {\n\t\t\tbreak\n\t\t}\n\t\tcontinue\n\t}\n\tif k.str == key.str || memequal(k.str, key.str, uintptr(key.len)) {\n\t\treturn add(unsafe.Pointer(b), dataOffset+bucketCnt*2*sys.PtrSize+i*uintptr(t.elemsize))\n\t}\n}",
      "entry" : false,
      "use-vars" : [ 14 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 13 ],
      "in-vars" : [ 4, 0, 12, 8 ],
      "exit" : false,
      "out-vars" : [ 12, 8, 4, 0, 15, 14 ],
      "decl-vars" : [ 15, 14 ],
      "line-start" : 29,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "i"
          }
        }, {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "kptr"
          }
        } ],
        "right" : [ {
          "go-type" : 7,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "0"
          }
        }, {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "function" : 6,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "keys"
            },
            "go-type" : 60,
            "kind" : "expression",
            "target" : {
              "go-type" : 35,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "b",
                "variable" : 12
              }
            },
            "type" : "selector"
          },
          "go-type" : 13,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 29,
      "code" : "i, kptr := uintptr(0), b.keys()",
      "entry" : false,
      "use-vars" : [ 12 ]
    }, {
      "update-vars" : [ 14, 15 ],
      "successors" : [ 13 ],
      "in-vars" : [ 14, 12, 8, 4, 0, 15 ],
      "exit" : false,
      "out-vars" : [ 4, 0, 15, 14, 12, 8 ],
      "decl-vars" : [ ],
      "line-start" : 29,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 7,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "i",
            "variable" : 14
          }
        }, {
          "go-type" : 13,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "kptr",
            "variable" : 15
          }
        } ],
        "right" : [ {
          "go-type" : 7,
          "kind" : "expression",
          "left" : {
            "go-type" : 7,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "i",
              "variable" : 14
            }
          },
          "operator" : "+",
          "right" : {
            "go-type" : 7,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "1"
            }
          },
          "type" : "binary"
        }, {
          "arguments" : [ {
            "go-type" : 13,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "kptr",
              "variable" : 15
            }
          }, {
            "go-type" : 7,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "16"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 62,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 7,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "add"
            }
          },
          "go-type" : 13,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 15, 14 ],
      "line-end" : 29,
      "code" : "i, kptr = i+1, add(kptr, 2*sys.PtrSize)",
      "entry" : false,
      "use-vars" : [ 15, 14 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 17 ],
      "in-vars" : [ 14, 12, 8, 4, 0, 15 ],
      "exit" : false,
      "out-vars" : [ 12, 8, 4, 0, 16, 15, 14 ],
      "decl-vars" : [ 16 ],
      "line-start" : 30,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "k"
          }
        } ],
        "right" : [ {
          "coerced-to" : {
            "contained" : {
              "go-type" : 54,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 54,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "stringStruct"
              }
            },
            "go-type" : 53,
            "kind" : "type",
            "type" : "pointer"
          },
          "go-type" : 53,
          "kind" : "expression",
          "target" : {
            "go-type" : 13,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "kptr",
              "variable" : 15
            }
          },
          "type" : "cast"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 30,
      "code" : "k := (*stringStruct)(kptr)",
      "entry" : false,
      "use-vars" : [ 15 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 18, 21 ],
      "in-vars" : [ 12, 8, 4, 0, 16, 15, 14 ],
      "exit" : false,
      "out-vars" : [ 12, 8, 4, 0, 16, 15, 14 ],
      "decl-vars" : [ ],
      "line-start" : 31,
      "ast" : {
        "condition" : {
          "go-type" : 15,
          "kind" : "expression",
          "left" : {
            "go-type" : 15,
            "kind" : "expression",
            "left" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "len",
                "variable" : 11
              },
              "go-type" : 29,
              "kind" : "expression",
              "target" : {
                "go-type" : 53,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "k",
                  "variable" : 16
                }
              },
              "type" : "selector"
            },
            "operator" : "!=",
            "right" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "len",
                "variable" : 11
              },
              "go-type" : 29,
              "kind" : "expression",
              "target" : {
                "go-type" : 53,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "key",
                  "variable" : 8
                }
              },
              "type" : "selector"
            },
            "type" : "binary"
          },
          "operator" : "||",
          "right" : {
            "arguments" : [ {
              "go-type" : 10,
              "index" : {
                "go-type" : 7,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "i",
                  "variable" : 14
                }
              },
              "kind" : "expression",
              "target" : {
                "field" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "tophash",
                  "variable" : 17
                },
                "go-type" : 38,
                "kind" : "expression",
                "target" : {
                  "go-type" : 35,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "b",
                    "variable" : 12
                  }
                },
                "type" : "selector"
              },
              "type" : "index"
            } ],
            "ellipsis" : false,
            "function" : {
              "go-type" : 64,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "function" : 8,
                "ident-kind" : "Func",
                "kind" : "ident",
                "value" : "isEmpty"
              }
            },
            "go-type" : 15,
            "kind" : "expression",
            "type" : "call"
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 36,
      "code" : "if k.len != key.len || isEmpty(b.tophash[i]) {\n\tif b.tophash[i] == emptyRest {\n\t\tbreak\n\t}\n\tcontinue\n}",
      "entry" : false,
      "use-vars" : [ 14, 16, 8, 12 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 19, 20 ],
      "in-vars" : [ 15, 14, 12, 8, 4, 0 ],
      "exit" : false,
      "out-vars" : [ 8, 4, 0, 15, 14, 12 ],
      "decl-vars" : [ ],
      "line-start" : 32,
      "ast" : {
        "condition" : {
          "go-type" : 42,
          "kind" : "expression",
          "left" : {
            "go-type" : 10,
            "index" : {
              "go-type" : 7,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "i",
                "variable" : 14
              }
            },
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "tophash",
                "variable" : 17
              },
              "go-type" : 38,
              "kind" : "expression",
              "target" : {
                "go-type" : 35,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "b",
                  "variable" : 12
                }
              },
              "type" : "selector"
            },
            "type" : "index"
          },
          "operator" : "==",
          "right" : {
            "go-type" : 10,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 34,
      "code" : "if b.tophash[i] == emptyRest {\n\tbreak\n}",
      "entry" : false,
      "use-vars" : [ 14, 12 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 23 ],
      "in-vars" : [ 4 ],
      "exit" : false,
      "out-vars" : [ 4 ],
      "decl-vars" : [ ],
      "line-start" : 33,
      "ast" : {
        "kind" : "statement",
        "label" : null,
        "type" : "break"
      },
      "assign-vars" : [ ],
      "line-end" : 33,
      "code" : "break",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 15 ],
      "in-vars" : [ 14, 12, 8, 4, 0, 15 ],
      "exit" : false,
      "out-vars" : [ 4, 0, 15, 14, 12, 8 ],
      "decl-vars" : [ ],
      "line-start" : 35,
      "ast" : {
        "kind" : "statement",
        "label" : null,
        "type" : "continue"
      },
      "assign-vars" : [ ],
      "line-end" : 35,
      "code" : "continue",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 22, 15 ],
      "in-vars" : [ 14, 12, 8, 4, 0, 16, 15 ],
      "exit" : false,
      "out-vars" : [ 14, 12, 8, 4, 0, 15 ],
      "decl-vars" : [ ],
      "line-start" : 37,
      "ast" : {
        "condition" : {
          "go-type" : 15,
          "kind" : "expression",
          "left" : {
            "go-type" : 15,
            "kind" : "expression",
            "left" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "str",
                "variable" : 18
              },
              "go-type" : 13,
              "kind" : "expression",
              "target" : {
                "go-type" : 53,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "k",
                  "variable" : 16
                }
              },
              "type" : "selector"
            },
            "operator" : "==",
            "right" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "str",
                "variable" : 18
              },
              "go-type" : 13,
              "kind" : "expression",
              "target" : {
                "go-type" : 53,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "key",
                  "variable" : 8
                }
              },
              "type" : "selector"
            },
            "type" : "binary"
          },
          "operator" : "||",
          "right" : {
            "arguments" : [ {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "str",
                "variable" : 18
              },
              "go-type" : 13,
              "kind" : "expression",
              "target" : {
                "go-type" : 53,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "k",
                  "variable" : 16
                }
              },
              "type" : "selector"
            }, {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "str",
                "variable" : 18
              },
              "go-type" : 13,
              "kind" : "expression",
              "target" : {
                "go-type" : 53,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "key",
                  "variable" : 8
                }
              },
              "type" : "selector"
            }, {
              "coerced-to" : {
                "go-type" : 7,
                "kind" : "type",
                "type" : "identifier",
                "value" : {
                  "go-type" : 7,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "uintptr"
                }
              },
              "go-type" : 7,
              "kind" : "expression",
              "target" : {
                "field" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "len",
                  "variable" : 11
                },
                "go-type" : 29,
                "kind" : "expression",
                "target" : {
                  "go-type" : 53,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "key",
                    "variable" : 8
                  }
                },
                "type" : "selector"
              },
              "type" : "cast"
            } ],
            "ellipsis" : false,
            "function" : {
              "go-type" : 66,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "function" : 9,
                "ident-kind" : "Func",
                "kind" : "ident",
                "value" : "memequal"
              }
            },
            "go-type" : 15,
            "kind" : "expression",
            "type" : "call"
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 39,
      "code" : "if k.str == key.str || memequal(k.str, key.str, uintptr(key.len)) {\n\treturn add(unsafe.Pointer(b), dataOffset+bucketCnt*2*sys.PtrSize+i*uintptr(t.elemsize))\n}",
      "entry" : false,
      "use-vars" : [ 8, 16 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 12, 0, 14 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 38,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "arguments" : [ {
            "coerced-to" : {
              "go-type" : 13,
              "kind" : "type",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 1,
                "value" : "unsafe"
              },
              "type" : "identifier",
              "value" : {
                "go-type" : 13,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "Pointer"
              }
            },
            "go-type" : 13,
            "kind" : "expression",
            "target" : {
              "go-type" : 35,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "b",
                "variable" : 12
              }
            },
            "type" : "cast"
          }, {
            "go-type" : 7,
            "kind" : "expression",
            "left" : {
              "go-type" : 7,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "136"
              }
            },
            "operator" : "+",
            "right" : {
              "go-type" : 7,
              "kind" : "expression",
              "left" : {
                "go-type" : 7,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "i",
                  "variable" : 14
                }
              },
              "operator" : "*",
              "right" : {
                "coerced-to" : {
                  "go-type" : 7,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 7,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "uintptr"
                  }
                },
                "go-type" : 7,
                "kind" : "expression",
                "target" : {
                  "field" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "elemsize",
                    "variable" : 19
                  },
                  "go-type" : 10,
                  "kind" : "expression",
                  "target" : {
                    "go-type" : 2,
                    "kind" : "expression",
                    "type" : "identifier",
                    "value" : {
                      "ident-kind" : "Var",
                      "kind" : "ident",
                      "value" : "t",
                      "variable" : 0
                    }
                  },
                  "type" : "selector"
                },
                "type" : "cast"
              },
              "type" : "binary"
            },
            "type" : "binary"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 62,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 7,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "add"
            }
          },
          "go-type" : 13,
          "kind" : "expression",
          "type" : "call"
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 38,
      "code" : "return add(unsafe.Pointer(b), dataOffset+bucketCnt*2*sys.PtrSize+i*uintptr(t.elemsize))",
      "entry" : false,
      "use-vars" : [ 12, 0, 14 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 4 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 41,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "coerced-to" : {
            "go-type" : 13,
            "kind" : "type",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 1,
              "value" : "unsafe"
            },
            "type" : "identifier",
            "value" : {
              "go-type" : 13,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "Pointer"
            }
          },
          "go-type" : 13,
          "kind" : "expression",
          "target" : {
            "go-type" : 16,
            "kind" : "expression",
            "operator" : "&",
            "target" : {
              "go-type" : 17,
              "index" : {
                "go-type" : 29,
                "kind" : "constant",
                "value" : {
                  "type" : "INT",
                  "value" : "0"
                }
              },
              "kind" : "expression",
              "target" : {
                "go-type" : 41,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "zeroVal",
                  "variable" : 4
                }
              },
              "type" : "index"
            },
            "type" : "unary"
          },
          "type" : "cast"
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 41,
      "code" : "return unsafe.Pointer(&zeroVal[0])",
      "entry" : false,
      "use-vars" : [ 4 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 26 ],
      "in-vars" : [ 1, 0, 2, 12, 8, 4 ],
      "exit" : false,
      "out-vars" : [ 0, 2, 23, 12, 8, 4, 1 ],
      "decl-vars" : [ 23 ],
      "line-start" : 44,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "keymaybe"
          }
        } ],
        "right" : [ {
          "go-type" : 7,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "8"
          }
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 44,
      "code" : "keymaybe := uintptr(bucketCnt)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 28, 42 ],
      "in-vars" : [ 8, 2, 23, 20, 21, 12, 4, 1, 0 ],
      "exit" : false,
      "out-vars" : [ 20, 21, 12, 4, 1, 23, 8, 0, 2 ],
      "decl-vars" : [ ],
      "line-start" : 45,
      "ast" : {
        "condition" : {
          "go-type" : 42,
          "kind" : "expression",
          "left" : {
            "go-type" : 7,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "i",
              "variable" : 20
            }
          },
          "operator" : "<",
          "right" : {
            "go-type" : 7,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "8"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "for"
      },
      "assign-vars" : [ ],
      "line-end" : 69,
      "code" : "for i, kptr := uintptr(0), b.keys(); i < bucketCnt; i, kptr = i+1, add(kptr, 2*sys.PtrSize) {\n\tk := (*stringStruct)(kptr)\n\tif k.len != key.len || isEmpty(b.tophash[i]) {\n\t\tif b.tophash[i] == emptyRest {\n\t\t\tbreak\n\t\t}\n\t\tcontinue\n\t}\n\tif k.str == key.str {\n\t\treturn add(unsafe.Pointer(b), dataOffset+bucketCnt*2*sys.PtrSize+i*uintptr(t.elemsize))\n\t}\n\n\tif *((*[4]byte)(key.str)) != *((*[4]byte)(k.str)) {\n\t\tcontinue\n\t}\n\n\tif *((*[4]byte)(add(key.str, uintptr(key.len)-4))) != *((*[4]byte)(add(k.str, uintptr(key.len)-4))) {\n\t\tcontinue\n\t}\n\tif keymaybe != bucketCnt {\n\n\t\tgoto dohash\n\t}\n\tkeymaybe = i\n}",
      "entry" : false,
      "use-vars" : [ 20 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 25 ],
      "in-vars" : [ 2, 23, 12, 8, 4, 1, 0 ],
      "exit" : false,
      "out-vars" : [ 12, 8, 0, 2, 20, 21, 23, 4, 1 ],
      "decl-vars" : [ 21, 20 ],
      "line-start" : 45,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "i"
          }
        }, {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "kptr"
          }
        } ],
        "right" : [ {
          "go-type" : 7,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "0"
          }
        }, {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "function" : 6,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "keys"
            },
            "go-type" : 60,
            "kind" : "expression",
            "target" : {
              "go-type" : 35,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "b",
                "variable" : 12
              }
            },
            "type" : "selector"
          },
          "go-type" : 13,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 45,
      "code" : "i, kptr := uintptr(0), b.keys()",
      "entry" : false,
      "use-vars" : [ 12 ]
    }, {
      "update-vars" : [ 21, 20 ],
      "successors" : [ 25 ],
      "in-vars" : [ 12, 8, 4, 0, 2, 21, 1, 23, 20 ],
      "exit" : false,
      "out-vars" : [ 21, 12, 1, 0, 2, 23, 20, 8, 4 ],
      "decl-vars" : [ ],
      "line-start" : 45,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 7,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "i",
            "variable" : 20
          }
        }, {
          "go-type" : 13,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "kptr",
            "variable" : 21
          }
        } ],
        "right" : [ {
          "go-type" : 7,
          "kind" : "expression",
          "left" : {
            "go-type" : 7,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "i",
              "variable" : 20
            }
          },
          "operator" : "+",
          "right" : {
            "go-type" : 7,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "1"
            }
          },
          "type" : "binary"
        }, {
          "arguments" : [ {
            "go-type" : 13,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "kptr",
              "variable" : 21
            }
          }, {
            "go-type" : 7,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "16"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 62,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 7,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "add"
            }
          },
          "go-type" : 13,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 21, 20 ],
      "line-end" : 45,
      "code" : "i, kptr = i+1, add(kptr, 2*sys.PtrSize)",
      "entry" : false,
      "use-vars" : [ 20, 21 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 29 ],
      "in-vars" : [ 20, 21, 8, 4, 2, 12, 1, 0, 23 ],
      "exit" : false,
      "out-vars" : [ 8, 4, 0, 2, 23, 12, 22, 1, 20, 21 ],
      "decl-vars" : [ 22 ],
      "line-start" : 46,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "k"
          }
        } ],
        "right" : [ {
          "coerced-to" : {
            "contained" : {
              "go-type" : 54,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 54,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "stringStruct"
              }
            },
            "go-type" : 53,
            "kind" : "type",
            "type" : "pointer"
          },
          "go-type" : 53,
          "kind" : "expression",
          "target" : {
            "go-type" : 13,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "kptr",
              "variable" : 21
            }
          },
          "type" : "cast"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 46,
      "code" : "k := (*stringStruct)(kptr)",
      "entry" : false,
      "use-vars" : [ 21 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 30, 33 ],
      "in-vars" : [ 23, 20, 21, 22, 4, 2, 12, 8, 1, 0 ],
      "exit" : false,
      "out-vars" : [ 2, 12, 22, 8, 4, 1, 0, 20, 21, 23 ],
      "decl-vars" : [ ],
      "line-start" : 47,
      "ast" : {
        "condition" : {
          "go-type" : 15,
          "kind" : "expression",
          "left" : {
            "go-type" : 15,
            "kind" : "expression",
            "left" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "len",
                "variable" : 11
              },
              "go-type" : 29,
              "kind" : "expression",
              "target" : {
                "go-type" : 53,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "k",
                  "variable" : 22
                }
              },
              "type" : "selector"
            },
            "operator" : "!=",
            "right" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "len",
                "variable" : 11
              },
              "go-type" : 29,
              "kind" : "expression",
              "target" : {
                "go-type" : 53,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "key",
                  "variable" : 8
                }
              },
              "type" : "selector"
            },
            "type" : "binary"
          },
          "operator" : "||",
          "right" : {
            "arguments" : [ {
              "go-type" : 10,
              "index" : {
                "go-type" : 7,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "i",
                  "variable" : 20
                }
              },
              "kind" : "expression",
              "target" : {
                "field" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "tophash",
                  "variable" : 17
                },
                "go-type" : 38,
                "kind" : "expression",
                "target" : {
                  "go-type" : 35,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "b",
                    "variable" : 12
                  }
                },
                "type" : "selector"
              },
              "type" : "index"
            } ],
            "ellipsis" : false,
            "function" : {
              "go-type" : 64,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "function" : 8,
                "ident-kind" : "Func",
                "kind" : "ident",
                "value" : "isEmpty"
              }
            },
            "go-type" : 15,
            "kind" : "expression",
            "type" : "call"
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 52,
      "code" : "if k.len != key.len || isEmpty(b.tophash[i]) {\n\tif b.tophash[i] == emptyRest {\n\t\tbreak\n\t}\n\tcontinue\n}",
      "entry" : false,
      "use-vars" : [ 8, 12, 20, 22 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 31, 32 ],
      "in-vars" : [ 12, 4, 1, 0, 2, 23, 20, 21, 8 ],
      "exit" : false,
      "out-vars" : [ 4, 0, 2, 20, 12, 8, 21, 1, 23 ],
      "decl-vars" : [ ],
      "line-start" : 48,
      "ast" : {
        "condition" : {
          "go-type" : 42,
          "kind" : "expression",
          "left" : {
            "go-type" : 10,
            "index" : {
              "go-type" : 7,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "i",
                "variable" : 20
              }
            },
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "tophash",
                "variable" : 17
              },
              "go-type" : 38,
              "kind" : "expression",
              "target" : {
                "go-type" : 35,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "b",
                  "variable" : 12
                }
              },
              "type" : "selector"
            },
            "type" : "index"
          },
          "operator" : "==",
          "right" : {
            "go-type" : 10,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 50,
      "code" : "if b.tophash[i] == emptyRest {\n\tbreak\n}",
      "entry" : false,
      "use-vars" : [ 20, 12 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 42 ],
      "in-vars" : [ 8, 4, 0, 23, 12 ],
      "exit" : false,
      "out-vars" : [ 8, 4, 0, 23, 12 ],
      "decl-vars" : [ ],
      "line-start" : 49,
      "ast" : {
        "kind" : "statement",
        "label" : null,
        "type" : "break"
      },
      "assign-vars" : [ ],
      "line-end" : 49,
      "code" : "break",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 27 ],
      "in-vars" : [ 20, 12, 8, 0, 2, 21, 4, 1, 23 ],
      "exit" : false,
      "out-vars" : [ 2, 20, 21, 12, 8, 4, 1, 0, 23 ],
      "decl-vars" : [ ],
      "line-start" : 51,
      "ast" : {
        "kind" : "statement",
        "label" : null,
        "type" : "continue"
      },
      "assign-vars" : [ ],
      "line-end" : 51,
      "code" : "continue",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 34, 35 ],
      "in-vars" : [ 8, 4, 1, 0, 21, 12, 22, 2, 23, 20 ],
      "exit" : false,
      "out-vars" : [ 20, 21, 12, 22, 8, 4, 1, 0, 2, 23 ],
      "decl-vars" : [ ],
      "line-start" : 53,
      "ast" : {
        "condition" : {
          "go-type" : 42,
          "kind" : "expression",
          "left" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "str",
              "variable" : 18
            },
            "go-type" : 13,
            "kind" : "expression",
            "target" : {
              "go-type" : 53,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "k",
                "variable" : 22
              }
            },
            "type" : "selector"
          },
          "operator" : "==",
          "right" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "str",
              "variable" : 18
            },
            "go-type" : 13,
            "kind" : "expression",
            "target" : {
              "go-type" : 53,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "key",
                "variable" : 8
              }
            },
            "type" : "selector"
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 55,
      "code" : "if k.str == key.str {\n\treturn add(unsafe.Pointer(b), dataOffset+bucketCnt*2*sys.PtrSize+i*uintptr(t.elemsize))\n}",
      "entry" : false,
      "use-vars" : [ 22, 8 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 20, 12, 0 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 54,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "arguments" : [ {
            "coerced-to" : {
              "go-type" : 13,
              "kind" : "type",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 1,
                "value" : "unsafe"
              },
              "type" : "identifier",
              "value" : {
                "go-type" : 13,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "Pointer"
              }
            },
            "go-type" : 13,
            "kind" : "expression",
            "target" : {
              "go-type" : 35,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "b",
                "variable" : 12
              }
            },
            "type" : "cast"
          }, {
            "go-type" : 7,
            "kind" : "expression",
            "left" : {
              "go-type" : 7,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "136"
              }
            },
            "operator" : "+",
            "right" : {
              "go-type" : 7,
              "kind" : "expression",
              "left" : {
                "go-type" : 7,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "i",
                  "variable" : 20
                }
              },
              "operator" : "*",
              "right" : {
                "coerced-to" : {
                  "go-type" : 7,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 7,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "uintptr"
                  }
                },
                "go-type" : 7,
                "kind" : "expression",
                "target" : {
                  "field" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "elemsize",
                    "variable" : 19
                  },
                  "go-type" : 10,
                  "kind" : "expression",
                  "target" : {
                    "go-type" : 2,
                    "kind" : "expression",
                    "type" : "identifier",
                    "value" : {
                      "ident-kind" : "Var",
                      "kind" : "ident",
                      "value" : "t",
                      "variable" : 0
                    }
                  },
                  "type" : "selector"
                },
                "type" : "cast"
              },
              "type" : "binary"
            },
            "type" : "binary"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 62,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 7,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "add"
            }
          },
          "go-type" : 13,
          "kind" : "expression",
          "type" : "call"
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 54,
      "code" : "return add(unsafe.Pointer(b), dataOffset+bucketCnt*2*sys.PtrSize+i*uintptr(t.elemsize))",
      "entry" : false,
      "use-vars" : [ 12, 0, 20 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 36, 37 ],
      "in-vars" : [ 20, 22, 4, 1, 0, 21, 12, 8, 2, 23 ],
      "exit" : false,
      "out-vars" : [ 20, 21, 8, 0, 23, 12, 22, 4, 1, 2 ],
      "decl-vars" : [ ],
      "line-start" : 57,
      "ast" : {
        "condition" : {
          "go-type" : 42,
          "kind" : "expression",
          "left" : {
            "go-type" : 68,
            "kind" : "expression",
            "target" : {
              "go-type" : 69,
              "kind" : "expression",
              "target" : {
                "coerced-to" : {
                  "contained" : {
                    "element" : {
                      "go-type" : 17,
                      "kind" : "type",
                      "type" : "identifier",
                      "value" : {
                        "go-type" : 17,
                        "ident-kind" : "TypeName",
                        "kind" : "ident",
                        "value" : "byte"
                      }
                    },
                    "go-type" : 68,
                    "kind" : "type",
                    "length" : {
                      "go-type" : 70,
                      "kind" : "constant",
                      "value" : {
                        "type" : "INT",
                        "value" : "4"
                      }
                    },
                    "type" : "array"
                  },
                  "go-type" : 69,
                  "kind" : "type",
                  "type" : "pointer"
                },
                "go-type" : 69,
                "kind" : "expression",
                "target" : {
                  "field" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "str",
                    "variable" : 18
                  },
                  "go-type" : 13,
                  "kind" : "expression",
                  "target" : {
                    "go-type" : 53,
                    "kind" : "expression",
                    "type" : "identifier",
                    "value" : {
                      "ident-kind" : "Var",
                      "kind" : "ident",
                      "value" : "key",
                      "variable" : 8
                    }
                  },
                  "type" : "selector"
                },
                "type" : "cast"
              },
              "type" : "paren"
            },
            "type" : "star"
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 68,
            "kind" : "expression",
            "target" : {
              "go-type" : 69,
              "kind" : "expression",
              "target" : {
                "coerced-to" : {
                  "contained" : {
                    "element" : {
                      "go-type" : 17,
                      "kind" : "type",
                      "type" : "identifier",
                      "value" : {
                        "go-type" : 17,
                        "ident-kind" : "TypeName",
                        "kind" : "ident",
                        "value" : "byte"
                      }
                    },
                    "go-type" : 68,
                    "kind" : "type",
                    "length" : {
                      "go-type" : 70,
                      "kind" : "constant",
                      "value" : {
                        "type" : "INT",
                        "value" : "4"
                      }
                    },
                    "type" : "array"
                  },
                  "go-type" : 69,
                  "kind" : "type",
                  "type" : "pointer"
                },
                "go-type" : 69,
                "kind" : "expression",
                "target" : {
                  "field" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "str",
                    "variable" : 18
                  },
                  "go-type" : 13,
                  "kind" : "expression",
                  "target" : {
                    "go-type" : 53,
                    "kind" : "expression",
                    "type" : "identifier",
                    "value" : {
                      "ident-kind" : "Var",
                      "kind" : "ident",
                      "value" : "k",
                      "variable" : 22
                    }
                  },
                  "type" : "selector"
                },
                "type" : "cast"
              },
              "type" : "paren"
            },
            "type" : "star"
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 59,
      "code" : "if *((*[4]byte)(key.str)) != *((*[4]byte)(k.str)) {\n\tcontinue\n}",
      "entry" : false,
      "use-vars" : [ 8, 22 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 27 ],
      "in-vars" : [ 21, 12, 8, 4, 2, 23, 20, 1, 0 ],
      "exit" : false,
      "out-vars" : [ 12, 2, 23, 21, 8, 4, 1, 0, 20 ],
      "decl-vars" : [ ],
      "line-start" : 58,
      "ast" : {
        "kind" : "statement",
        "label" : null,
        "type" : "continue"
      },
      "assign-vars" : [ ],
      "line-end" : 58,
      "code" : "continue",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 38, 39 ],
      "in-vars" : [ 8, 4, 0, 2, 23, 20, 22, 1, 21, 12 ],
      "exit" : false,
      "out-vars" : [ 23, 12, 4, 1, 0, 2, 20, 21, 8 ],
      "decl-vars" : [ ],
      "line-start" : 61,
      "ast" : {
        "condition" : {
          "go-type" : 42,
          "kind" : "expression",
          "left" : {
            "go-type" : 68,
            "kind" : "expression",
            "target" : {
              "go-type" : 69,
              "kind" : "expression",
              "target" : {
                "coerced-to" : {
                  "contained" : {
                    "element" : {
                      "go-type" : 17,
                      "kind" : "type",
                      "type" : "identifier",
                      "value" : {
                        "go-type" : 17,
                        "ident-kind" : "TypeName",
                        "kind" : "ident",
                        "value" : "byte"
                      }
                    },
                    "go-type" : 68,
                    "kind" : "type",
                    "length" : {
                      "go-type" : 70,
                      "kind" : "constant",
                      "value" : {
                        "type" : "INT",
                        "value" : "4"
                      }
                    },
                    "type" : "array"
                  },
                  "go-type" : 69,
                  "kind" : "type",
                  "type" : "pointer"
                },
                "go-type" : 69,
                "kind" : "expression",
                "target" : {
                  "arguments" : [ {
                    "field" : {
                      "ident-kind" : "Var",
                      "kind" : "ident",
                      "value" : "str",
                      "variable" : 18
                    },
                    "go-type" : 13,
                    "kind" : "expression",
                    "target" : {
                      "go-type" : 53,
                      "kind" : "expression",
                      "type" : "identifier",
                      "value" : {
                        "ident-kind" : "Var",
                        "kind" : "ident",
                        "value" : "key",
                        "variable" : 8
                      }
                    },
                    "type" : "selector"
                  }, {
                    "go-type" : 7,
                    "kind" : "expression",
                    "left" : {
                      "coerced-to" : {
                        "go-type" : 7,
                        "kind" : "type",
                        "type" : "identifier",
                        "value" : {
                          "go-type" : 7,
                          "ident-kind" : "TypeName",
                          "kind" : "ident",
                          "value" : "uintptr"
                        }
                      },
                      "go-type" : 7,
                      "kind" : "expression",
                      "target" : {
                        "field" : {
                          "ident-kind" : "Var",
                          "kind" : "ident",
                          "value" : "len",
                          "variable" : 11
                        },
                        "go-type" : 29,
                        "kind" : "expression",
                        "target" : {
                          "go-type" : 53,
                          "kind" : "expression",
                          "type" : "identifier",
                          "value" : {
                            "ident-kind" : "Var",
                            "kind" : "ident",
                            "value" : "key",
                            "variable" : 8
                          }
                        },
                        "type" : "selector"
                      },
                      "type" : "cast"
                    },
                    "operator" : "-",
                    "right" : {
                      "go-type" : 7,
                      "kind" : "constant",
                      "value" : {
                        "type" : "INT",
                        "value" : "4"
                      }
                    },
                    "type" : "binary"
                  } ],
                  "ellipsis" : false,
                  "function" : {
                    "go-type" : 62,
                    "kind" : "expression",
                    "type" : "identifier",
                    "value" : {
                      "function" : 7,
                      "ident-kind" : "Func",
                      "kind" : "ident",
                      "value" : "add"
                    }
                  },
                  "go-type" : 13,
                  "kind" : "expression",
                  "type" : "call"
                },
                "type" : "cast"
              },
              "type" : "paren"
            },
            "type" : "star"
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 68,
            "kind" : "expression",
            "target" : {
              "go-type" : 69,
              "kind" : "expression",
              "target" : {
                "coerced-to" : {
                  "contained" : {
                    "element" : {
                      "go-type" : 17,
                      "kind" : "type",
                      "type" : "identifier",
                      "value" : {
                        "go-type" : 17,
                        "ident-kind" : "TypeName",
                        "kind" : "ident",
                        "value" : "byte"
                      }
                    },
                    "go-type" : 68,
                    "kind" : "type",
                    "length" : {
                      "go-type" : 70,
                      "kind" : "constant",
                      "value" : {
                        "type" : "INT",
                        "value" : "4"
                      }
                    },
                    "type" : "array"
                  },
                  "go-type" : 69,
                  "kind" : "type",
                  "type" : "pointer"
                },
                "go-type" : 69,
                "kind" : "expression",
                "target" : {
                  "arguments" : [ {
                    "field" : {
                      "ident-kind" : "Var",
                      "kind" : "ident",
                      "value" : "str",
                      "variable" : 18
                    },
                    "go-type" : 13,
                    "kind" : "expression",
                    "target" : {
                      "go-type" : 53,
                      "kind" : "expression",
                      "type" : "identifier",
                      "value" : {
                        "ident-kind" : "Var",
                        "kind" : "ident",
                        "value" : "k",
                        "variable" : 22
                      }
                    },
                    "type" : "selector"
                  }, {
                    "go-type" : 7,
                    "kind" : "expression",
                    "left" : {
                      "coerced-to" : {
                        "go-type" : 7,
                        "kind" : "type",
                        "type" : "identifier",
                        "value" : {
                          "go-type" : 7,
                          "ident-kind" : "TypeName",
                          "kind" : "ident",
                          "value" : "uintptr"
                        }
                      },
                      "go-type" : 7,
                      "kind" : "expression",
                      "target" : {
                        "field" : {
                          "ident-kind" : "Var",
                          "kind" : "ident",
                          "value" : "len",
                          "variable" : 11
                        },
                        "go-type" : 29,
                        "kind" : "expression",
                        "target" : {
                          "go-type" : 53,
                          "kind" : "expression",
                          "type" : "identifier",
                          "value" : {
                            "ident-kind" : "Var",
                            "kind" : "ident",
                            "value" : "key",
                            "variable" : 8
                          }
                        },
                        "type" : "selector"
                      },
                      "type" : "cast"
                    },
                    "operator" : "-",
                    "right" : {
                      "go-type" : 7,
                      "kind" : "constant",
                      "value" : {
                        "type" : "INT",
                        "value" : "4"
                      }
                    },
                    "type" : "binary"
                  } ],
                  "ellipsis" : false,
                  "function" : {
                    "go-type" : 62,
                    "kind" : "expression",
                    "type" : "identifier",
                    "value" : {
                      "function" : 7,
                      "ident-kind" : "Func",
                      "kind" : "ident",
                      "value" : "add"
                    }
                  },
                  "go-type" : 13,
                  "kind" : "expression",
                  "type" : "call"
                },
                "type" : "cast"
              },
              "type" : "paren"
            },
            "type" : "star"
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 63,
      "code" : "if *((*[4]byte)(add(key.str, uintptr(key.len)-4))) != *((*[4]byte)(add(k.str, uintptr(key.len)-4))) {\n\tcontinue\n}",
      "entry" : false,
      "use-vars" : [ 22, 8 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 27 ],
      "in-vars" : [ 21, 1, 0, 2, 23, 20, 12, 8, 4 ],
      "exit" : false,
      "out-vars" : [ 12, 4, 1, 20, 21, 2, 23, 8, 0 ],
      "decl-vars" : [ ],
      "line-start" : 62,
      "ast" : {
        "kind" : "statement",
        "label" : null,
        "type" : "continue"
      },
      "assign-vars" : [ ],
      "line-end" : 62,
      "code" : "continue",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 40, 41 ],
      "in-vars" : [ 0, 2, 23, 20, 21, 8, 12, 4, 1 ],
      "exit" : false,
      "out-vars" : [ 20, 21, 12, 8, 4, 1, 0, 2 ],
      "decl-vars" : [ ],
      "line-start" : 64,
      "ast" : {
        "condition" : {
          "go-type" : 42,
          "kind" : "expression",
          "left" : {
            "go-type" : 7,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "keymaybe",
              "variable" : 23
            }
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 7,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "8"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 67,
      "code" : "if keymaybe != bucketCnt {\n\n\tgoto dohash\n}",
      "entry" : false,
      "use-vars" : [ 23 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 47 ],
      "in-vars" : [ 8, 4, 1, 0, 2 ],
      "exit" : false,
      "out-vars" : [ 0, 2, 8, 4, 1 ],
      "decl-vars" : [ ],
      "line-start" : 66,
      "ast" : {
        "kind" : "statement",
        "label" : {
          "ident-kind" : "Label",
          "kind" : "ident",
          "value" : "dohash"
        },
        "type" : "goto"
      },
      "assign-vars" : [ ],
      "line-end" : 66,
      "code" : "goto dohash",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ 23 ],
      "successors" : [ 27 ],
      "in-vars" : [ 21, 12, 8, 4, 1, 0, 2, 20 ],
      "exit" : false,
      "out-vars" : [ 20, 8, 21, 12, 4, 1, 0, 2, 23 ],
      "decl-vars" : [ ],
      "line-start" : 68,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 7,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "keymaybe",
            "variable" : 23
          }
        } ],
        "right" : [ {
          "go-type" : 7,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "i",
            "variable" : 20
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 23 ],
      "line-end" : 68,
      "code" : "keymaybe = i",
      "entry" : false,
      "use-vars" : [ 20 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 43, 46 ],
      "in-vars" : [ 23, 12, 8, 4, 0 ],
      "exit" : false,
      "out-vars" : [ 23, 12, 8, 4, 0 ],
      "decl-vars" : [ ],
      "line-start" : 70,
      "ast" : {
        "condition" : {
          "go-type" : 42,
          "kind" : "expression",
          "left" : {
            "go-type" : 7,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "keymaybe",
              "variable" : 23
            }
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 7,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "8"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 75,
      "code" : "if keymaybe != bucketCnt {\n\tk := (*stringStruct)(add(unsafe.Pointer(b), dataOffset+keymaybe*2*sys.PtrSize))\n\tif memequal(k.str, key.str, uintptr(key.len)) {\n\t\treturn add(unsafe.Pointer(b), dataOffset+bucketCnt*2*sys.PtrSize+keymaybe*uintptr(t.elemsize))\n\t}\n}",
      "entry" : false,
      "use-vars" : [ 23 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 44 ],
      "in-vars" : [ 12, 8, 4, 0, 23 ],
      "exit" : false,
      "out-vars" : [ 4, 0, 24, 23, 12, 8 ],
      "decl-vars" : [ 24 ],
      "line-start" : 71,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "k"
          }
        } ],
        "right" : [ {
          "coerced-to" : {
            "contained" : {
              "go-type" : 54,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 54,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "stringStruct"
              }
            },
            "go-type" : 53,
            "kind" : "type",
            "type" : "pointer"
          },
          "go-type" : 53,
          "kind" : "expression",
          "target" : {
            "arguments" : [ {
              "coerced-to" : {
                "go-type" : 13,
                "kind" : "type",
                "qualifier" : {
                  "ident-kind" : "PkgName",
                  "kind" : "ident",
                  "package" : 1,
                  "value" : "unsafe"
                },
                "type" : "identifier",
                "value" : {
                  "go-type" : 13,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "Pointer"
                }
              },
              "go-type" : 13,
              "kind" : "expression",
              "target" : {
                "go-type" : 35,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "b",
                  "variable" : 12
                }
              },
              "type" : "cast"
            }, {
              "go-type" : 7,
              "kind" : "expression",
              "left" : {
                "go-type" : 7,
                "kind" : "constant",
                "value" : {
                  "type" : "INT",
                  "value" : "8"
                }
              },
              "operator" : "+",
              "right" : {
                "go-type" : 7,
                "kind" : "expression",
                "left" : {
                  "go-type" : 7,
                  "kind" : "expression",
                  "left" : {
                    "go-type" : 7,
                    "kind" : "expression",
                    "type" : "identifier",
                    "value" : {
                      "ident-kind" : "Var",
                      "kind" : "ident",
                      "value" : "keymaybe",
                      "variable" : 23
                    }
                  },
                  "operator" : "*",
                  "right" : {
                    "go-type" : 7,
                    "kind" : "constant",
                    "value" : {
                      "type" : "INT",
                      "value" : "2"
                    }
                  },
                  "type" : "binary"
                },
                "operator" : "*",
                "right" : {
                  "go-type" : 7,
                  "kind" : "constant",
                  "value" : {
                    "type" : "INT",
                    "value" : "8"
                  }
                },
                "type" : "binary"
              },
              "type" : "binary"
            } ],
            "ellipsis" : false,
            "function" : {
              "go-type" : 62,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "function" : 7,
                "ident-kind" : "Func",
                "kind" : "ident",
                "value" : "add"
              }
            },
            "go-type" : 13,
            "kind" : "expression",
            "type" : "call"
          },
          "type" : "cast"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 71,
      "code" : "k := (*stringStruct)(add(unsafe.Pointer(b), dataOffset+keymaybe*2*sys.PtrSize))",
      "entry" : false,
      "use-vars" : [ 23, 12 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 45, 46 ],
      "in-vars" : [ 23, 12, 8, 4, 0, 24 ],
      "exit" : false,
      "out-vars" : [ 23, 12, 4, 0 ],
      "decl-vars" : [ ],
      "line-start" : 72,
      "ast" : {
        "condition" : {
          "arguments" : [ {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "str",
              "variable" : 18
            },
            "go-type" : 13,
            "kind" : "expression",
            "target" : {
              "go-type" : 53,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "k",
                "variable" : 24
              }
            },
            "type" : "selector"
          }, {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "str",
              "variable" : 18
            },
            "go-type" : 13,
            "kind" : "expression",
            "target" : {
              "go-type" : 53,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "key",
                "variable" : 8
              }
            },
            "type" : "selector"
          }, {
            "coerced-to" : {
              "go-type" : 7,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 7,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "uintptr"
              }
            },
            "go-type" : 7,
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "len",
                "variable" : 11
              },
              "go-type" : 29,
              "kind" : "expression",
              "target" : {
                "go-type" : 53,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "key",
                  "variable" : 8
                }
              },
              "type" : "selector"
            },
            "type" : "cast"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 66,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 9,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "memequal"
            }
          },
          "go-type" : 15,
          "kind" : "expression",
          "type" : "call"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 74,
      "code" : "if memequal(k.str, key.str, uintptr(key.len)) {\n\treturn add(unsafe.Pointer(b), dataOffset+bucketCnt*2*sys.PtrSize+keymaybe*uintptr(t.elemsize))\n}",
      "entry" : false,
      "use-vars" : [ 24, 8 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 12, 0, 23 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 73,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "arguments" : [ {
            "coerced-to" : {
              "go-type" : 13,
              "kind" : "type",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 1,
                "value" : "unsafe"
              },
              "type" : "identifier",
              "value" : {
                "go-type" : 13,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "Pointer"
              }
            },
            "go-type" : 13,
            "kind" : "expression",
            "target" : {
              "go-type" : 35,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "b",
                "variable" : 12
              }
            },
            "type" : "cast"
          }, {
            "go-type" : 7,
            "kind" : "expression",
            "left" : {
              "go-type" : 7,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "136"
              }
            },
            "operator" : "+",
            "right" : {
              "go-type" : 7,
              "kind" : "expression",
              "left" : {
                "go-type" : 7,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "keymaybe",
                  "variable" : 23
                }
              },
              "operator" : "*",
              "right" : {
                "coerced-to" : {
                  "go-type" : 7,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 7,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "uintptr"
                  }
                },
                "go-type" : 7,
                "kind" : "expression",
                "target" : {
                  "field" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "elemsize",
                    "variable" : 19
                  },
                  "go-type" : 10,
                  "kind" : "expression",
                  "target" : {
                    "go-type" : 2,
                    "kind" : "expression",
                    "type" : "identifier",
                    "value" : {
                      "ident-kind" : "Var",
                      "kind" : "ident",
                      "value" : "t",
                      "variable" : 0
                    }
                  },
                  "type" : "selector"
                },
                "type" : "cast"
              },
              "type" : "binary"
            },
            "type" : "binary"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 62,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 7,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "add"
            }
          },
          "go-type" : 13,
          "kind" : "expression",
          "type" : "call"
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 73,
      "code" : "return add(unsafe.Pointer(b), dataOffset+bucketCnt*2*sys.PtrSize+keymaybe*uintptr(t.elemsize))",
      "entry" : false,
      "use-vars" : [ 0, 23, 12 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 4 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 76,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "coerced-to" : {
            "go-type" : 13,
            "kind" : "type",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 1,
              "value" : "unsafe"
            },
            "type" : "identifier",
            "value" : {
              "go-type" : 13,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "Pointer"
            }
          },
          "go-type" : 13,
          "kind" : "expression",
          "target" : {
            "go-type" : 16,
            "kind" : "expression",
            "operator" : "&",
            "target" : {
              "go-type" : 17,
              "index" : {
                "go-type" : 29,
                "kind" : "constant",
                "value" : {
                  "type" : "INT",
                  "value" : "0"
                }
              },
              "kind" : "expression",
              "target" : {
                "go-type" : 41,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "zeroVal",
                  "variable" : 4
                }
              },
              "type" : "index"
            },
            "type" : "unary"
          },
          "type" : "cast"
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 76,
      "code" : "return unsafe.Pointer(&zeroVal[0])",
      "entry" : false,
      "use-vars" : [ 4 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 48 ],
      "in-vars" : [ 8, 4, 1, 0, 2 ],
      "exit" : false,
      "out-vars" : [ 0, 2, 8, 4, 1 ],
      "decl-vars" : [ ],
      "line-start" : 78,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "hash"
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "arguments" : [ {
              "coerced-to" : {
                "go-type" : 13,
                "kind" : "type",
                "qualifier" : {
                  "ident-kind" : "PkgName",
                  "kind" : "ident",
                  "package" : 1,
                  "value" : "unsafe"
                },
                "type" : "identifier",
                "value" : {
                  "go-type" : 13,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "Pointer"
                }
              },
              "go-type" : 13,
              "kind" : "expression",
              "target" : {
                "go-type" : 58,
                "kind" : "expression",
                "operator" : "&",
                "target" : {
                  "go-type" : 39,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "ky",
                    "variable" : 2
                  }
                },
                "type" : "unary"
              },
              "type" : "cast"
            } ],
            "ellipsis" : false,
            "function" : {
              "go-type" : 71,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "function" : 10,
                "ident-kind" : "Func",
                "kind" : "ident",
                "value" : "noescape"
              }
            },
            "go-type" : 13,
            "kind" : "expression",
            "type" : "call"
          }, {
            "coerced-to" : {
              "go-type" : 7,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 7,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "uintptr"
              }
            },
            "go-type" : 7,
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "hash0",
                "variable" : 26
              },
              "go-type" : 8,
              "kind" : "expression",
              "target" : {
                "go-type" : 26,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "h",
                  "variable" : 1
                }
              },
              "type" : "selector"
            },
            "type" : "cast"
          } ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "hasher",
              "variable" : 25
            },
            "go-type" : 22,
            "kind" : "expression",
            "target" : {
              "go-type" : 2,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "t",
                "variable" : 0
              }
            },
            "type" : "selector"
          },
          "go-type" : 7,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 79,
      "code" : "dohash:\n\thash := t.hasher(noescape(unsafe.Pointer(&ky)), uintptr(h.hash0))",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 49 ],
      "in-vars" : [ 8, 4, 1, 0, 2 ],
      "exit" : false,
      "out-vars" : [ 8, 4, 1, 0, 27 ],
      "decl-vars" : [ 27 ],
      "line-start" : 79,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "hash"
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "arguments" : [ {
              "coerced-to" : {
                "go-type" : 13,
                "kind" : "type",
                "qualifier" : {
                  "ident-kind" : "PkgName",
                  "kind" : "ident",
                  "package" : 1,
                  "value" : "unsafe"
                },
                "type" : "identifier",
                "value" : {
                  "go-type" : 13,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "Pointer"
                }
              },
              "go-type" : 13,
              "kind" : "expression",
              "target" : {
                "go-type" : 58,
                "kind" : "expression",
                "operator" : "&",
                "target" : {
                  "go-type" : 39,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "ky",
                    "variable" : 2
                  }
                },
                "type" : "unary"
              },
              "type" : "cast"
            } ],
            "ellipsis" : false,
            "function" : {
              "go-type" : 71,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "function" : 10,
                "ident-kind" : "Func",
                "kind" : "ident",
                "value" : "noescape"
              }
            },
            "go-type" : 13,
            "kind" : "expression",
            "type" : "call"
          }, {
            "coerced-to" : {
              "go-type" : 7,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 7,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "uintptr"
              }
            },
            "go-type" : 7,
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "hash0",
                "variable" : 26
              },
              "go-type" : 8,
              "kind" : "expression",
              "target" : {
                "go-type" : 26,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "h",
                  "variable" : 1
                }
              },
              "type" : "selector"
            },
            "type" : "cast"
          } ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "hasher",
              "variable" : 25
            },
            "go-type" : 22,
            "kind" : "expression",
            "target" : {
              "go-type" : 2,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "t",
                "variable" : 0
              }
            },
            "type" : "selector"
          },
          "go-type" : 7,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 79,
      "code" : "hash := t.hasher(noescape(unsafe.Pointer(&ky)), uintptr(h.hash0))",
      "entry" : false,
      "use-vars" : [ 1, 2, 0 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 50 ],
      "in-vars" : [ 1, 0, 27, 8, 4 ],
      "exit" : false,
      "out-vars" : [ 0, 28, 27, 8, 4, 1 ],
      "decl-vars" : [ 28 ],
      "line-start" : 80,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "m"
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "B",
              "variable" : 9
            },
            "go-type" : 10,
            "kind" : "expression",
            "target" : {
              "go-type" : 26,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "h",
                "variable" : 1
              }
            },
            "type" : "selector"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 73,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 11,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "bucketMask"
            }
          },
          "go-type" : 7,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 80,
      "code" : "m := bucketMask(h.B)",
      "entry" : false,
      "use-vars" : [ 1 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 52 ],
      "in-vars" : [ 8, 4, 1, 0, 28, 27 ],
      "exit" : false,
      "out-vars" : [ 0, 30, 28, 27, 8, 4, 1 ],
      "decl-vars" : [ 30 ],
      "line-start" : 81,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "b"
          }
        } ],
        "right" : [ {
          "coerced-to" : {
            "contained" : {
              "go-type" : 36,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 36,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "bmap"
              }
            },
            "go-type" : 35,
            "kind" : "type",
            "type" : "pointer"
          },
          "go-type" : 35,
          "kind" : "expression",
          "target" : {
            "arguments" : [ {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "buckets",
                "variable" : 10
              },
              "go-type" : 13,
              "kind" : "expression",
              "target" : {
                "go-type" : 26,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "h",
                  "variable" : 1
                }
              },
              "type" : "selector"
            }, {
              "go-type" : 7,
              "kind" : "expression",
              "left" : {
                "go-type" : 7,
                "kind" : "expression",
                "target" : {
                  "go-type" : 7,
                  "kind" : "expression",
                  "left" : {
                    "go-type" : 7,
                    "kind" : "expression",
                    "type" : "identifier",
                    "value" : {
                      "ident-kind" : "Var",
                      "kind" : "ident",
                      "value" : "hash",
                      "variable" : 27
                    }
                  },
                  "operator" : "&",
                  "right" : {
                    "go-type" : 7,
                    "kind" : "expression",
                    "type" : "identifier",
                    "value" : {
                      "ident-kind" : "Var",
                      "kind" : "ident",
                      "value" : "m",
                      "variable" : 28
                    }
                  },
                  "type" : "binary"
                },
                "type" : "paren"
              },
              "operator" : "*",
              "right" : {
                "coerced-to" : {
                  "go-type" : 7,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 7,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "uintptr"
                  }
                },
                "go-type" : 7,
                "kind" : "expression",
                "target" : {
                  "field" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "bucketsize",
                    "variable" : 29
                  },
                  "go-type" : 25,
                  "kind" : "expression",
                  "target" : {
                    "go-type" : 2,
                    "kind" : "expression",
                    "type" : "identifier",
                    "value" : {
                      "ident-kind" : "Var",
                      "kind" : "ident",
                      "value" : "t",
                      "variable" : 0
                    }
                  },
                  "type" : "selector"
                },
                "type" : "cast"
              },
              "type" : "binary"
            } ],
            "ellipsis" : false,
            "function" : {
              "go-type" : 62,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "function" : 7,
                "ident-kind" : "Func",
                "kind" : "ident",
                "value" : "add"
              }
            },
            "go-type" : 13,
            "kind" : "expression",
            "type" : "call"
          },
          "type" : "cast"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 81,
      "code" : "b := (*bmap)(add(h.buckets, (hash&m)*uintptr(t.bucketsize)))",
      "entry" : false,
      "use-vars" : [ 1, 28, 27, 0 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 53, 58 ],
      "in-vars" : [ 30, 28, 27, 32, 8, 4, 1, 0 ],
      "exit" : false,
      "out-vars" : [ 32, 8, 4, 1, 0, 30, 28, 27 ],
      "decl-vars" : [ ],
      "line-start" : 82,
      "ast" : {
        "condition" : {
          "go-type" : 42,
          "kind" : "expression",
          "left" : {
            "go-type" : 13,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "c",
              "variable" : 32
            }
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 13,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Nil",
              "kind" : "ident",
              "value" : "nil"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 91,
      "code" : "if c := h.oldbuckets; c != nil {\n\tif !h.sameSizeGrow() {\n\n\t\tm >>= 1\n\t}\n\toldb := (*bmap)(add(c, (hash&m)*uintptr(t.bucketsize)))\n\tif !evacuated(oldb) {\n\t\tb = oldb\n\t}\n}",
      "entry" : false,
      "use-vars" : [ 32 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 51 ],
      "in-vars" : [ 0, 30, 28, 27, 8, 4, 1 ],
      "exit" : false,
      "out-vars" : [ 28, 27, 32, 8, 4, 1, 0, 30 ],
      "decl-vars" : [ 32 ],
      "line-start" : 82,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "c"
          }
        } ],
        "right" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "oldbuckets",
            "variable" : 31
          },
          "go-type" : 13,
          "kind" : "expression",
          "target" : {
            "go-type" : 26,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "h",
              "variable" : 1
            }
          },
          "type" : "selector"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 82,
      "code" : "c := h.oldbuckets",
      "entry" : false,
      "use-vars" : [ 1 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 54, 55 ],
      "in-vars" : [ 27, 32, 8, 4, 1, 0, 30, 28 ],
      "exit" : false,
      "out-vars" : [ 8, 4, 0, 30, 28, 27, 32 ],
      "decl-vars" : [ ],
      "line-start" : 83,
      "ast" : {
        "condition" : {
          "go-type" : 15,
          "kind" : "expression",
          "operator" : "!",
          "target" : {
            "arguments" : [ ],
            "ellipsis" : false,
            "function" : {
              "field" : {
                "function" : 12,
                "ident-kind" : "Func",
                "kind" : "ident",
                "value" : "sameSizeGrow"
              },
              "go-type" : 75,
              "kind" : "expression",
              "target" : {
                "go-type" : 26,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "h",
                  "variable" : 1
                }
              },
              "type" : "selector"
            },
            "go-type" : 15,
            "kind" : "expression",
            "type" : "call"
          },
          "type" : "unary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 86,
      "code" : "if !h.sameSizeGrow() {\n\n\tm >>= 1\n}",
      "entry" : false,
      "use-vars" : [ 1 ]
    }, {
      "update-vars" : [ 28 ],
      "successors" : [ 55 ],
      "in-vars" : [ 32, 8, 4, 0, 30, 28, 27 ],
      "exit" : false,
      "out-vars" : [ 28, 27, 32, 8, 4, 0, 30 ],
      "decl-vars" : [ ],
      "line-start" : 85,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 7,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "m",
            "variable" : 28
          }
        } ],
        "operator" : ">>",
        "right" : [ {
          "go-type" : 70,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "1"
          }
        } ],
        "type" : "assign-operator"
      },
      "assign-vars" : [ 28 ],
      "line-end" : 85,
      "code" : "m >>= 1",
      "entry" : false,
      "use-vars" : [ 28 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 56 ],
      "in-vars" : [ 30, 28, 27, 32, 8, 4, 0 ],
      "exit" : false,
      "out-vars" : [ 30, 27, 34, 8, 4, 0 ],
      "decl-vars" : [ 34 ],
      "line-start" : 87,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "oldb"
          }
        } ],
        "right" : [ {
          "coerced-to" : {
            "contained" : {
              "go-type" : 36,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 36,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "bmap"
              }
            },
            "go-type" : 35,
            "kind" : "type",
            "type" : "pointer"
          },
          "go-type" : 35,
          "kind" : "expression",
          "target" : {
            "arguments" : [ {
              "go-type" : 13,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "c",
                "variable" : 32
              }
            }, {
              "go-type" : 7,
              "kind" : "expression",
              "left" : {
                "go-type" : 7,
                "kind" : "expression",
                "target" : {
                  "go-type" : 7,
                  "kind" : "expression",
                  "left" : {
                    "go-type" : 7,
                    "kind" : "expression",
                    "type" : "identifier",
                    "value" : {
                      "ident-kind" : "Var",
                      "kind" : "ident",
                      "value" : "hash",
                      "variable" : 27
                    }
                  },
                  "operator" : "&",
                  "right" : {
                    "go-type" : 7,
                    "kind" : "expression",
                    "type" : "identifier",
                    "value" : {
                      "ident-kind" : "Var",
                      "kind" : "ident",
                      "value" : "m",
                      "variable" : 28
                    }
                  },
                  "type" : "binary"
                },
                "type" : "paren"
              },
              "operator" : "*",
              "right" : {
                "coerced-to" : {
                  "go-type" : 7,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 7,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "uintptr"
                  }
                },
                "go-type" : 7,
                "kind" : "expression",
                "target" : {
                  "field" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "bucketsize",
                    "variable" : 29
                  },
                  "go-type" : 25,
                  "kind" : "expression",
                  "target" : {
                    "go-type" : 2,
                    "kind" : "expression",
                    "type" : "identifier",
                    "value" : {
                      "ident-kind" : "Var",
                      "kind" : "ident",
                      "value" : "t",
                      "variable" : 0
                    }
                  },
                  "type" : "selector"
                },
                "type" : "cast"
              },
              "type" : "binary"
            } ],
            "ellipsis" : false,
            "function" : {
              "go-type" : 62,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "function" : 7,
                "ident-kind" : "Func",
                "kind" : "ident",
                "value" : "add"
              }
            },
            "go-type" : 13,
            "kind" : "expression",
            "type" : "call"
          },
          "type" : "cast"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 87,
      "code" : "oldb := (*bmap)(add(c, (hash&m)*uintptr(t.bucketsize)))",
      "entry" : false,
      "use-vars" : [ 27, 28, 0, 32 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 57, 58 ],
      "in-vars" : [ 34, 8, 4, 0, 30, 27 ],
      "exit" : false,
      "out-vars" : [ 30, 27, 34, 8, 4, 0 ],
      "decl-vars" : [ ],
      "line-start" : 88,
      "ast" : {
        "condition" : {
          "go-type" : 15,
          "kind" : "expression",
          "operator" : "!",
          "target" : {
            "arguments" : [ {
              "go-type" : 35,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "oldb",
                "variable" : 34
              }
            } ],
            "ellipsis" : false,
            "function" : {
              "go-type" : 77,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "function" : 13,
                "ident-kind" : "Func",
                "kind" : "ident",
                "value" : "evacuated"
              }
            },
            "go-type" : 15,
            "kind" : "expression",
            "type" : "call"
          },
          "type" : "unary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 90,
      "code" : "if !evacuated(oldb) {\n\tb = oldb\n}",
      "entry" : false,
      "use-vars" : [ 34 ]
    }, {
      "update-vars" : [ 30 ],
      "successors" : [ 58 ],
      "in-vars" : [ 0, 27, 34, 8, 4 ],
      "exit" : false,
      "out-vars" : [ 8, 4, 0, 30, 27 ],
      "decl-vars" : [ ],
      "line-start" : 89,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 35,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "b",
            "variable" : 30
          }
        } ],
        "right" : [ {
          "go-type" : 35,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "oldb",
            "variable" : 34
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 30 ],
      "line-end" : 89,
      "code" : "b = oldb",
      "entry" : false,
      "use-vars" : [ 34 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 59 ],
      "in-vars" : [ 4, 0, 30, 27, 8 ],
      "exit" : false,
      "out-vars" : [ 4, 0, 30, 35, 8 ],
      "decl-vars" : [ 35 ],
      "line-start" : 92,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "top"
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 7,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "hash",
              "variable" : 27
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 79,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 14,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "tophash"
            }
          },
          "go-type" : 10,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 92,
      "code" : "top := tophash(hash)",
      "entry" : false,
      "use-vars" : [ 27 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 62, 69 ],
      "in-vars" : [ 0, 30, 35, 8, 4 ],
      "exit" : false,
      "out-vars" : [ 0, 30, 35, 8, 4 ],
      "decl-vars" : [ ],
      "line-start" : 93,
      "ast" : {
        "condition" : {
          "go-type" : 42,
          "kind" : "expression",
          "left" : {
            "go-type" : 35,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "b",
              "variable" : 30
            }
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 43,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Nil",
              "kind" : "ident",
              "value" : "nil"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "for"
      },
      "assign-vars" : [ ],
      "line-end" : 103,
      "code" : "for ; b != nil; b = b.overflow(t) {\n\tfor i, kptr := uintptr(0), b.keys(); i < bucketCnt; i, kptr = i+1, add(kptr, 2*sys.PtrSize) {\n\t\tk := (*stringStruct)(kptr)\n\t\tif k.len != key.len || b.tophash[i] != top {\n\t\t\tcontinue\n\t\t}\n\t\tif k.str == key.str || memequal(k.str, key.str, uintptr(key.len)) {\n\t\t\treturn add(unsafe.Pointer(b), dataOffset+bucketCnt*2*sys.PtrSize+i*uintptr(t.elemsize))\n\t\t}\n\t}\n}",
      "entry" : false,
      "use-vars" : [ 30 ]
    }, {
      "update-vars" : [ 30 ],
      "successors" : [ 59 ],
      "in-vars" : [ 4, 0, 30, 35, 8 ],
      "exit" : false,
      "out-vars" : [ 35, 8, 4, 0, 30 ],
      "decl-vars" : [ ],
      "line-start" : 93,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 35,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "b",
            "variable" : 30
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "t",
              "variable" : 0
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "function" : 15,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "overflow"
            },
            "go-type" : 82,
            "kind" : "expression",
            "target" : {
              "go-type" : 35,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "b",
                "variable" : 30
              }
            },
            "type" : "selector"
          },
          "go-type" : 35,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 30 ],
      "line-end" : 93,
      "code" : "b = b.overflow(t)",
      "entry" : false,
      "use-vars" : [ 30, 0 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 64, 60 ],
      "in-vars" : [ 8, 38, 4, 0, 30, 37, 35 ],
      "exit" : false,
      "out-vars" : [ 0, 30, 37, 35, 8, 38, 4 ],
      "decl-vars" : [ ],
      "line-start" : 94,
      "ast" : {
        "condition" : {
          "go-type" : 42,
          "kind" : "expression",
          "left" : {
            "go-type" : 7,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "i",
              "variable" : 37
            }
          },
          "operator" : "<",
          "right" : {
            "go-type" : 7,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "8"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "for"
      },
      "assign-vars" : [ ],
      "line-end" : 102,
      "code" : "for i, kptr := uintptr(0), b.keys(); i < bucketCnt; i, kptr = i+1, add(kptr, 2*sys.PtrSize) {\n\tk := (*stringStruct)(kptr)\n\tif k.len != key.len || b.tophash[i] != top {\n\t\tcontinue\n\t}\n\tif k.str == key.str || memequal(k.str, key.str, uintptr(key.len)) {\n\t\treturn add(unsafe.Pointer(b), dataOffset+bucketCnt*2*sys.PtrSize+i*uintptr(t.elemsize))\n\t}\n}",
      "entry" : false,
      "use-vars" : [ 37 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 61 ],
      "in-vars" : [ 30, 35, 8, 4, 0 ],
      "exit" : false,
      "out-vars" : [ 37, 35, 8, 38, 4, 0, 30 ],
      "decl-vars" : [ 37, 38 ],
      "line-start" : 94,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "i"
          }
        }, {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "kptr"
          }
        } ],
        "right" : [ {
          "go-type" : 7,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "0"
          }
        }, {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "function" : 6,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "keys"
            },
            "go-type" : 60,
            "kind" : "expression",
            "target" : {
              "go-type" : 35,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "b",
                "variable" : 30
              }
            },
            "type" : "selector"
          },
          "go-type" : 13,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 94,
      "code" : "i, kptr := uintptr(0), b.keys()",
      "entry" : false,
      "use-vars" : [ 30 ]
    }, {
      "update-vars" : [ 38, 37 ],
      "successors" : [ 61 ],
      "in-vars" : [ 38, 4, 0, 30, 37, 35, 8 ],
      "exit" : false,
      "out-vars" : [ 37, 35, 8, 38, 4, 0, 30 ],
      "decl-vars" : [ ],
      "line-start" : 94,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 7,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "i",
            "variable" : 37
          }
        }, {
          "go-type" : 13,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "kptr",
            "variable" : 38
          }
        } ],
        "right" : [ {
          "go-type" : 7,
          "kind" : "expression",
          "left" : {
            "go-type" : 7,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "i",
              "variable" : 37
            }
          },
          "operator" : "+",
          "right" : {
            "go-type" : 7,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "1"
            }
          },
          "type" : "binary"
        }, {
          "arguments" : [ {
            "go-type" : 13,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "kptr",
              "variable" : 38
            }
          }, {
            "go-type" : 7,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "16"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 62,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 7,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "add"
            }
          },
          "go-type" : 13,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 37, 38 ],
      "line-end" : 94,
      "code" : "i, kptr = i+1, add(kptr, 2*sys.PtrSize)",
      "entry" : false,
      "use-vars" : [ 37, 38 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 65 ],
      "in-vars" : [ 35, 8, 38, 4, 0, 30, 37 ],
      "exit" : false,
      "out-vars" : [ 30, 37, 35, 8, 39, 38, 4, 0 ],
      "decl-vars" : [ 39 ],
      "line-start" : 95,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "k"
          }
        } ],
        "right" : [ {
          "coerced-to" : {
            "contained" : {
              "go-type" : 54,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 54,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "stringStruct"
              }
            },
            "go-type" : 53,
            "kind" : "type",
            "type" : "pointer"
          },
          "go-type" : 53,
          "kind" : "expression",
          "target" : {
            "go-type" : 13,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "kptr",
              "variable" : 38
            }
          },
          "type" : "cast"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 95,
      "code" : "k := (*stringStruct)(kptr)",
      "entry" : false,
      "use-vars" : [ 38 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 66, 67 ],
      "in-vars" : [ 4, 0, 30, 37, 35, 8, 39, 38 ],
      "exit" : false,
      "out-vars" : [ 35, 8, 39, 38, 4, 0, 30, 37 ],
      "decl-vars" : [ ],
      "line-start" : 96,
      "ast" : {
        "condition" : {
          "go-type" : 42,
          "kind" : "expression",
          "left" : {
            "go-type" : 42,
            "kind" : "expression",
            "left" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "len",
                "variable" : 11
              },
              "go-type" : 29,
              "kind" : "expression",
              "target" : {
                "go-type" : 53,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "k",
                  "variable" : 39
                }
              },
              "type" : "selector"
            },
            "operator" : "!=",
            "right" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "len",
                "variable" : 11
              },
              "go-type" : 29,
              "kind" : "expression",
              "target" : {
                "go-type" : 53,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "key",
                  "variable" : 8
                }
              },
              "type" : "selector"
            },
            "type" : "binary"
          },
          "operator" : "||",
          "right" : {
            "go-type" : 42,
            "kind" : "expression",
            "left" : {
              "go-type" : 10,
              "index" : {
                "go-type" : 7,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "i",
                  "variable" : 37
                }
              },
              "kind" : "expression",
              "target" : {
                "field" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "tophash",
                  "variable" : 17
                },
                "go-type" : 38,
                "kind" : "expression",
                "target" : {
                  "go-type" : 35,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "b",
                    "variable" : 30
                  }
                },
                "type" : "selector"
              },
              "type" : "index"
            },
            "operator" : "!=",
            "right" : {
              "go-type" : 10,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "top",
                "variable" : 35
              }
            },
            "type" : "binary"
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 98,
      "code" : "if k.len != key.len || b.tophash[i] != top {\n\tcontinue\n}",
      "entry" : false,
      "use-vars" : [ 35, 39, 8, 30, 37 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 63 ],
      "in-vars" : [ 0, 30, 37, 35, 8, 38, 4 ],
      "exit" : false,
      "out-vars" : [ 0, 30, 37, 35, 8, 38, 4 ],
      "decl-vars" : [ ],
      "line-start" : 97,
      "ast" : {
        "kind" : "statement",
        "label" : null,
        "type" : "continue"
      },
      "assign-vars" : [ ],
      "line-end" : 97,
      "code" : "continue",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 68, 63 ],
      "in-vars" : [ 8, 39, 38, 4, 0, 30, 37, 35 ],
      "exit" : false,
      "out-vars" : [ 8, 38, 4, 0, 30, 37, 35 ],
      "decl-vars" : [ ],
      "line-start" : 99,
      "ast" : {
        "condition" : {
          "go-type" : 15,
          "kind" : "expression",
          "left" : {
            "go-type" : 15,
            "kind" : "expression",
            "left" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "str",
                "variable" : 18
              },
              "go-type" : 13,
              "kind" : "expression",
              "target" : {
                "go-type" : 53,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "k",
                  "variable" : 39
                }
              },
              "type" : "selector"
            },
            "operator" : "==",
            "right" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "str",
                "variable" : 18
              },
              "go-type" : 13,
              "kind" : "expression",
              "target" : {
                "go-type" : 53,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "key",
                  "variable" : 8
                }
              },
              "type" : "selector"
            },
            "type" : "binary"
          },
          "operator" : "||",
          "right" : {
            "arguments" : [ {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "str",
                "variable" : 18
              },
              "go-type" : 13,
              "kind" : "expression",
              "target" : {
                "go-type" : 53,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "k",
                  "variable" : 39
                }
              },
              "type" : "selector"
            }, {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "str",
                "variable" : 18
              },
              "go-type" : 13,
              "kind" : "expression",
              "target" : {
                "go-type" : 53,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "key",
                  "variable" : 8
                }
              },
              "type" : "selector"
            }, {
              "coerced-to" : {
                "go-type" : 7,
                "kind" : "type",
                "type" : "identifier",
                "value" : {
                  "go-type" : 7,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "uintptr"
                }
              },
              "go-type" : 7,
              "kind" : "expression",
              "target" : {
                "field" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "len",
                  "variable" : 11
                },
                "go-type" : 29,
                "kind" : "expression",
                "target" : {
                  "go-type" : 53,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "key",
                    "variable" : 8
                  }
                },
                "type" : "selector"
              },
              "type" : "cast"
            } ],
            "ellipsis" : false,
            "function" : {
              "go-type" : 66,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "function" : 9,
                "ident-kind" : "Func",
                "kind" : "ident",
                "value" : "memequal"
              }
            },
            "go-type" : 15,
            "kind" : "expression",
            "type" : "call"
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 101,
      "code" : "if k.str == key.str || memequal(k.str, key.str, uintptr(key.len)) {\n\treturn add(unsafe.Pointer(b), dataOffset+bucketCnt*2*sys.PtrSize+i*uintptr(t.elemsize))\n}",
      "entry" : false,
      "use-vars" : [ 39, 8 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 0, 30, 37 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 100,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "arguments" : [ {
            "coerced-to" : {
              "go-type" : 13,
              "kind" : "type",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 1,
                "value" : "unsafe"
              },
              "type" : "identifier",
              "value" : {
                "go-type" : 13,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "Pointer"
              }
            },
            "go-type" : 13,
            "kind" : "expression",
            "target" : {
              "go-type" : 35,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "b",
                "variable" : 30
              }
            },
            "type" : "cast"
          }, {
            "go-type" : 7,
            "kind" : "expression",
            "left" : {
              "go-type" : 7,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "136"
              }
            },
            "operator" : "+",
            "right" : {
              "go-type" : 7,
              "kind" : "expression",
              "left" : {
                "go-type" : 7,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "i",
                  "variable" : 37
                }
              },
              "operator" : "*",
              "right" : {
                "coerced-to" : {
                  "go-type" : 7,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 7,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "uintptr"
                  }
                },
                "go-type" : 7,
                "kind" : "expression",
                "target" : {
                  "field" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "elemsize",
                    "variable" : 19
                  },
                  "go-type" : 10,
                  "kind" : "expression",
                  "target" : {
                    "go-type" : 2,
                    "kind" : "expression",
                    "type" : "identifier",
                    "value" : {
                      "ident-kind" : "Var",
                      "kind" : "ident",
                      "value" : "t",
                      "variable" : 0
                    }
                  },
                  "type" : "selector"
                },
                "type" : "cast"
              },
              "type" : "binary"
            },
            "type" : "binary"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 62,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 7,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "add"
            }
          },
          "go-type" : 13,
          "kind" : "expression",
          "type" : "call"
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 100,
      "code" : "return add(unsafe.Pointer(b), dataOffset+bucketCnt*2*sys.PtrSize+i*uintptr(t.elemsize))",
      "entry" : false,
      "use-vars" : [ 37, 30, 0 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 4 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 104,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "coerced-to" : {
            "go-type" : 13,
            "kind" : "type",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 1,
              "value" : "unsafe"
            },
            "type" : "identifier",
            "value" : {
              "go-type" : 13,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "Pointer"
            }
          },
          "go-type" : 13,
          "kind" : "expression",
          "target" : {
            "go-type" : 16,
            "kind" : "expression",
            "operator" : "&",
            "target" : {
              "go-type" : 17,
              "index" : {
                "go-type" : 29,
                "kind" : "constant",
                "value" : {
                  "type" : "INT",
                  "value" : "0"
                }
              },
              "kind" : "expression",
              "target" : {
                "go-type" : 41,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "zeroVal",
                  "variable" : 4
                }
              },
              "type" : "index"
            },
            "type" : "unary"
          },
          "type" : "cast"
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 104,
      "code" : "return unsafe.Pointer(&zeroVal[0])",
      "entry" : false,
      "use-vars" : [ 4 ]
    } ],
    "code" : "func mapaccess1_faststr(t *maptype, h *hmap, ky string) unsafe.Pointer {\n\tif raceenabled && h != nil {\n\t\tcallerpc := getcallerpc()\n\t\tracereadpc(unsafe.Pointer(h), callerpc, funcPC(mapaccess1_faststr))\n\t}\n\tif h == nil || h.count == 0 {\n\t\treturn unsafe.Pointer(&zeroVal[0])\n\t}\n\tif h.flags&hashWriting != 0 {\n\t\tthrow(\"concurrent map read and map write\")\n\t}\n\tkey := stringStructOf(&ky)\n\tif h.B == 0 {\n\n\t\tb := (*bmap)(h.buckets)\n\t\tif key.len < 32 {\n\n\t\t\tfor i, kptr := uintptr(0), b.keys(); i < bucketCnt; i, kptr = i+1, add(kptr, 2*sys.PtrSize) {\n\t\t\t\tk := (*stringStruct)(kptr)\n\t\t\t\tif k.len != key.len || isEmpty(b.tophash[i]) {\n\t\t\t\t\tif b.tophash[i] == emptyRest {\n\t\t\t\t\t\tbreak\n\t\t\t\t\t}\n\t\t\t\t\tcontinue\n\t\t\t\t}\n\t\t\t\tif k.str == key.str || memequal(k.str, key.str, uintptr(key.len)) {\n\t\t\t\t\treturn add(unsafe.Pointer(b), dataOffset+bucketCnt*2*sys.PtrSize+i*uintptr(t.elemsize))\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn unsafe.Pointer(&zeroVal[0])\n\t\t}\n\n\t\tkeymaybe := uintptr(bucketCnt)\n\t\tfor i, kptr := uintptr(0), b.keys(); i < bucketCnt; i, kptr = i+1, add(kptr, 2*sys.PtrSize) {\n\t\t\tk := (*stringStruct)(kptr)\n\t\t\tif k.len != key.len || isEmpty(b.tophash[i]) {\n\t\t\t\tif b.tophash[i] == emptyRest {\n\t\t\t\t\tbreak\n\t\t\t\t}\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tif k.str == key.str {\n\t\t\t\treturn add(unsafe.Pointer(b), dataOffset+bucketCnt*2*sys.PtrSize+i*uintptr(t.elemsize))\n\t\t\t}\n\n\t\t\tif *((*[4]byte)(key.str)) != *((*[4]byte)(k.str)) {\n\t\t\t\tcontinue\n\t\t\t}\n\n\t\t\tif *((*[4]byte)(add(key.str, uintptr(key.len)-4))) != *((*[4]byte)(add(k.str, uintptr(key.len)-4))) {\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tif keymaybe != bucketCnt {\n\n\t\t\t\tgoto dohash\n\t\t\t}\n\t\t\tkeymaybe = i\n\t\t}\n\t\tif keymaybe != bucketCnt {\n\t\t\tk := (*stringStruct)(add(unsafe.Pointer(b), dataOffset+keymaybe*2*sys.PtrSize))\n\t\t\tif memequal(k.str, key.str, uintptr(key.len)) {\n\t\t\t\treturn add(unsafe.Pointer(b), dataOffset+bucketCnt*2*sys.PtrSize+keymaybe*uintptr(t.elemsize))\n\t\t\t}\n\t\t}\n\t\treturn unsafe.Pointer(&zeroVal[0])\n\t}\ndohash:\n\thash := t.hasher(noescape(unsafe.Pointer(&ky)), uintptr(h.hash0))\n\tm := bucketMask(h.B)\n\tb := (*bmap)(add(h.buckets, (hash&m)*uintptr(t.bucketsize)))\n\tif c := h.oldbuckets; c != nil {\n\t\tif !h.sameSizeGrow() {\n\n\t\t\tm >>= 1\n\t\t}\n\t\toldb := (*bmap)(add(c, (hash&m)*uintptr(t.bucketsize)))\n\t\tif !evacuated(oldb) {\n\t\t\tb = oldb\n\t\t}\n\t}\n\ttop := tophash(hash)\n\tfor ; b != nil; b = b.overflow(t) {\n\t\tfor i, kptr := uintptr(0), b.keys(); i < bucketCnt; i, kptr = i+1, add(kptr, 2*sys.PtrSize) {\n\t\t\tk := (*stringStruct)(kptr)\n\t\t\tif k.len != key.len || b.tophash[i] != top {\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tif k.str == key.str || memequal(k.str, key.str, uintptr(key.len)) {\n\t\t\t\treturn add(unsafe.Pointer(b), dataOffset+bucketCnt*2*sys.PtrSize+i*uintptr(t.elemsize))\n\t\t\t}\n\t\t}\n\t}\n\treturn unsafe.Pointer(&zeroVal[0])\n}",
    "defines" : [ 0 ],
    "functions" : [ {
      "name" : "mapaccess1_faststr",
      "package" : 0,
      "type" : 0,
      "exported" : false
    }, {
      "name" : "getcallerpc",
      "package" : 0,
      "type" : 44,
      "exported" : false
    }, {
      "name" : "racereadpc",
      "package" : 0,
      "type" : 46,
      "exported" : false
    }, {
      "name" : "funcPC",
      "package" : 0,
      "type" : 48,
      "exported" : false
    }, {
      "name" : "throw",
      "package" : 0,
      "type" : 51,
      "exported" : false
    }, {
      "name" : "stringStructOf",
      "package" : 0,
      "type" : 56,
      "exported" : false
    }, {
      "name" : "keys",
      "package" : 0,
      "type" : 61,
      "exported" : false
    }, {
      "name" : "add",
      "package" : 0,
      "type" : 62,
      "exported" : false
    }, {
      "name" : "isEmpty",
      "package" : 0,
      "type" : 64,
      "exported" : false
    }, {
      "name" : "memequal",
      "package" : 0,
      "type" : 66,
      "exported" : false
    }, {
      "name" : "noescape",
      "package" : 0,
      "type" : 71,
      "exported" : false
    }, {
      "name" : "bucketMask",
      "package" : 0,
      "type" : 73,
      "exported" : false
    }, {
      "name" : "sameSizeGrow",
      "package" : 0,
      "type" : 76,
      "exported" : false
    }, {
      "name" : "evacuated",
      "package" : 0,
      "type" : 77,
      "exported" : false
    }, {
      "name" : "tophash",
      "package" : 0,
      "type" : 79,
      "exported" : false
    }, {
      "name" : "overflow",
      "package" : 0,
      "type" : 85,
      "exported" : false
    } ],
    "line-end" : 105,
    "line-start" : 12,
    "names" : [ "mapaccess1_faststr" ],
    "package" : 0,
    "packages" : [ {
      "name" : "runtime",
      "path" : "runtime"
    }, {
      "name" : "unsafe",
      "path" : "unsafe"
    } ],
    "params" : [ 0, 1, 2 ],
    "receivers" : [ ],
    "results" : [ 3 ],
    "type" : "function",
    "types" : [ {
      "name" : "func(t *runtime.maptype, h *runtime.hmap, ky string) unsafe.Pointer",
      "params" : 1,
      "recv" : -1,
      "results" : 40,
      "type" : "Signature",
      "underlying" : 0,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "t",
        "type" : 2
      }, {
        "name" : "h",
        "type" : 26
      }, {
        "name" : "ky",
        "type" : 39
      } ],
      "name" : "(t *runtime.maptype, h *runtime.hmap, ky string)",
      "type" : "Tuple",
      "underlying" : 1
    }, {
      "elem" : 3,
      "name" : "*runtime.maptype",
      "type" : "Pointer",
      "underlying" : 2
    }, {
      "local-name" : "maptype",
      "name" : "runtime.maptype",
      "package" : 0,
      "type" : "Named",
      "underlying" : 4
    }, {
      "fields" : [ {
        "name" : "typ",
        "type" : 5
      }, {
        "name" : "key",
        "type" : 21
      }, {
        "name" : "elem",
        "type" : 21
      }, {
        "name" : "bucket",
        "type" : 21
      }, {
        "name" : "hasher",
        "type" : 22
      }, {
        "name" : "keysize",
        "type" : 10
      }, {
        "name" : "elemsize",
        "type" : 10
      }, {
        "name" : "bucketsize",
        "type" : 25
      }, {
        "name" : "flags",
        "type" : 8
      } ],
      "name" : "struct{typ runtime._type; key *runtime._type; elem *runtime._type; bucket *runtime._type; hasher func(unsafe.Pointer, uintptr) uintptr; keysize uint8; elemsize uint8; bucketsize uint16; flags uint32}",
      "type" : "Struct",
      "underlying" : 4
    }, {
      "local-name" : "_type",
      "name" : "runtime._type",
      "package" : 0,
      "type" : "Named",
      "underlying" : 6
    }, {
      "fields" : [ {
        "name" : "size",
        "type" : 7
      }, {
        "name" : "ptrdata",
        "type" : 7
      }, {
        "name" : "hash",
        "type" : 8
      }, {
        "name" : "tflag",
        "type" : 9
      }, {
        "name" : "align",
        "type" : 10
      }, {
        "name" : "fieldAlign",
        "type" : 10
      }, {
        "name" : "kind",
        "type" : 10
      }, {
        "name" : "equal",
        "type" : 11
      }, {
        "name" : "gcdata",
        "type" : 16
      }, {
        "name" : "str",
        "type" : 18
      }, {
        "name" : "ptrToThis",
        "type" : 20
      } ],
      "name" : "struct{size uintptr; ptrdata uintptr; hash uint32; tflag runtime.tflag; align uint8; fieldAlign uint8; kind uint8; equal func(unsafe.Pointer, unsafe.Pointer) bool; gcdata *byte; str runtime.nameOff; ptrToThis runtime.typeOff}",
      "type" : "Struct",
      "underlying" : 6
    }, {
      "name" : "uintptr",
      "type" : "Basic",
      "underlying" : 7
    }, {
      "name" : "uint32",
      "type" : "Basic",
      "underlying" : 8
    }, {
      "local-name" : "tflag",
      "name" : "runtime.tflag",
      "package" : 0,
      "type" : "Named",
      "underlying" : 10
    }, {
      "name" : "uint8",
      "type" : "Basic",
      "underlying" : 10
    }, {
      "name" : "func(unsafe.Pointer, unsafe.Pointer) bool",
      "params" : 12,
      "recv" : -1,
      "results" : 14,
      "type" : "Signature",
      "underlying" : 11,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 13
      }, {
        "name" : "",
        "type" : 13
      } ],
      "name" : "(unsafe.Pointer, unsafe.Pointer)",
      "type" : "Tuple",
      "underlying" : 12
    }, {
      "local-name" : "Pointer",
      "name" : "unsafe.Pointer",
      "package" : 1,
      "type" : "Basic",
      "underlying" : 13
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 15
      } ],
      "name" : "(bool)",
      "type" : "Tuple",
      "underlying" : 14
    }, {
      "name" : "bool",
      "type" : "Basic",
      "underlying" : 15
    }, {
      "elem" : 17,
      "name" : "*byte",
      "type" : "Pointer",
      "underlying" : 16
    }, {
      "name" : "byte",
      "type" : "Basic",
      "underlying" : 17
    }, {
      "local-name" : "nameOff",
      "name" : "runtime.nameOff",
      "package" : 0,
      "type" : "Named",
      "underlying" : 19
    }, {
      "name" : "int32",
      "type" : "Basic",
      "underlying" : 19
    }, {
      "local-name" : "typeOff",
      "name" : "runtime.typeOff",
      "package" : 0,
      "type" : "Named",
      "underlying" : 19
    }, {
      "elem" : 5,
      "name" : "*runtime._type",
      "type" : "Pointer",
      "underlying" : 21
    }, {
      "name" : "func(unsafe.Pointer, uintptr) uintptr",
      "params" : 23,
      "recv" : -1,
      "results" : 24,
      "type" : "Signature",
      "underlying" : 22,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 13
      }, {
        "name" : "",
        "type" : 7
      } ],
      "name" : "(unsafe.Pointer, uintptr)",
      "type" : "Tuple",
      "underlying" : 23
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 7
      } ],
      "name" : "(uintptr)",
      "type" : "Tuple",
      "underlying" : 24
    }, {
      "name" : "uint16",
      "type" : "Basic",
      "underlying" : 25
    }, {
      "elem" : 27,
      "name" : "*runtime.hmap",
      "type" : "Pointer",
      "underlying" : 26
    }, {
      "local-name" : "hmap",
      "name" : "runtime.hmap",
      "package" : 0,
      "type" : "Named",
      "underlying" : 28
    }, {
      "fields" : [ {
        "name" : "count",
        "type" : 29
      }, {
        "name" : "flags",
        "type" : 10
      }, {
        "name" : "B",
        "type" : 10
      }, {
        "name" : "noverflow",
        "type" : 25
      }, {
        "name" : "hash0",
        "type" : 8
      }, {
        "name" : "buckets",
        "type" : 13
      }, {
        "name" : "oldbuckets",
        "type" : 13
      }, {
        "name" : "nevacuate",
        "type" : 7
      }, {
        "name" : "extra",
        "type" : 30
      } ],
      "name" : "struct{count int; flags uint8; B uint8; noverflow uint16; hash0 uint32; buckets unsafe.Pointer; oldbuckets unsafe.Pointer; nevacuate uintptr; extra *runtime.mapextra}",
      "type" : "Struct",
      "underlying" : 28
    }, {
      "name" : "int",
      "type" : "Basic",
      "underlying" : 29
    }, {
      "elem" : 31,
      "name" : "*runtime.mapextra",
      "type" : "Pointer",
      "underlying" : 30
    }, {
      "local-name" : "mapextra",
      "name" : "runtime.mapextra",
      "package" : 0,
      "type" : "Named",
      "underlying" : 32
    }, {
      "fields" : [ {
        "name" : "overflow",
        "type" : 33
      }, {
        "name" : "oldoverflow",
        "type" : 33
      }, {
        "name" : "nextOverflow",
        "type" : 35
      } ],
      "name" : "struct{overflow *[]*runtime.bmap; oldoverflow *[]*runtime.bmap; nextOverflow *runtime.bmap}",
      "type" : "Struct",
      "underlying" : 32
    }, {
      "elem" : 34,
      "name" : "*[]*runtime.bmap",
      "type" : "Pointer",
      "underlying" : 33
    }, {
      "elem" : 35,
      "name" : "[]*runtime.bmap",
      "type" : "Slice",
      "underlying" : 34
    }, {
      "elem" : 36,
      "name" : "*runtime.bmap",
      "type" : "Pointer",
      "underlying" : 35
    }, {
      "local-name" : "bmap",
      "name" : "runtime.bmap",
      "package" : 0,
      "type" : "Named",
      "underlying" : 37
    }, {
      "fields" : [ {
        "name" : "tophash",
        "type" : 38
      } ],
      "name" : "struct{tophash [8]uint8}",
      "type" : "Struct",
      "underlying" : 37
    }, {
      "elem" : 10,
      "name" : "[8]uint8",
      "type" : "Array",
      "underlying" : 38
    }, {
      "name" : "string",
      "type" : "Basic",
      "underlying" : 39
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 13
      } ],
      "name" : "(unsafe.Pointer)",
      "type" : "Tuple",
      "underlying" : 40
    }, {
      "elem" : 17,
      "name" : "[1024]byte",
      "type" : "Array",
      "underlying" : 41
    }, {
      "name" : "untyped bool",
      "type" : "Basic",
      "underlying" : 42
    }, {
      "name" : "untyped nil",
      "type" : "Basic",
      "underlying" : 43
    }, {
      "name" : "func() uintptr",
      "params" : 45,
      "recv" : -1,
      "results" : 24,
      "type" : "Signature",
      "underlying" : 44,
      "variadic" : false
    }, {
      "fields" : [ ],
      "name" : "()",
      "type" : "Tuple",
      "underlying" : 45
    }, {
      "name" : "func(addr unsafe.Pointer, callerpc uintptr, pc uintptr)",
      "params" : 47,
      "recv" : -1,
      "results" : 45,
      "type" : "Signature",
      "underlying" : 46,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "addr",
        "type" : 13
      }, {
        "name" : "callerpc",
        "type" : 7
      }, {
        "name" : "pc",
        "type" : 7
      } ],
      "name" : "(addr unsafe.Pointer, callerpc uintptr, pc uintptr)",
      "type" : "Tuple",
      "underlying" : 47
    }, {
      "name" : "func(f interface{}) uintptr",
      "params" : 49,
      "recv" : -1,
      "results" : 24,
      "type" : "Signature",
      "underlying" : 48,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "f",
        "type" : 50
      } ],
      "name" : "(f interface{})",
      "type" : "Tuple",
      "underlying" : 49
    }, {
      "methods" : [ ],
      "name" : "interface{}",
      "type" : "Interface",
      "underlying" : 50
    }, {
      "name" : "func(s string)",
      "params" : 52,
      "recv" : -1,
      "results" : 45,
      "type" : "Signature",
      "underlying" : 51,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "s",
        "type" : 39
      } ],
      "name" : "(s string)",
      "type" : "Tuple",
      "underlying" : 52
    }, {
      "elem" : 54,
      "name" : "*runtime.stringStruct",
      "type" : "Pointer",
      "underlying" : 53
    }, {
      "local-name" : "stringStruct",
      "name" : "runtime.stringStruct",
      "package" : 0,
      "type" : "Named",
      "underlying" : 55
    }, {
      "fields" : [ {
        "name" : "str",
        "type" : 13
      }, {
        "name" : "len",
        "type" : 29
      } ],
      "name" : "struct{str unsafe.Pointer; len int}",
      "type" : "Struct",
      "underlying" : 55
    }, {
      "name" : "func(sp *string) *runtime.stringStruct",
      "params" : 57,
      "recv" : -1,
      "results" : 59,
      "type" : "Signature",
      "underlying" : 56,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "sp",
        "type" : 58
      } ],
      "name" : "(sp *string)",
      "type" : "Tuple",
      "underlying" : 57
    }, {
      "elem" : 39,
      "name" : "*string",
      "type" : "Pointer",
      "underlying" : 58
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 53
      } ],
      "name" : "(*runtime.stringStruct)",
      "type" : "Tuple",
      "underlying" : 59
    }, {
      "name" : "func() unsafe.Pointer",
      "params" : 45,
      "recv" : -1,
      "results" : 40,
      "type" : "Signature",
      "underlying" : 60,
      "variadic" : false
    }, {
      "name" : "(*runtime.bmap) func() unsafe.Pointer",
      "params" : 45,
      "recv" : 13,
      "results" : 40,
      "type" : "Signature",
      "underlying" : 61,
      "variadic" : false
    }, {
      "name" : "func(p unsafe.Pointer, x uintptr) unsafe.Pointer",
      "params" : 63,
      "recv" : -1,
      "results" : 40,
      "type" : "Signature",
      "underlying" : 62,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "p",
        "type" : 13
      }, {
        "name" : "x",
        "type" : 7
      } ],
      "name" : "(p unsafe.Pointer, x uintptr)",
      "type" : "Tuple",
      "underlying" : 63
    }, {
      "name" : "func(x uint8) bool",
      "params" : 65,
      "recv" : -1,
      "results" : 14,
      "type" : "Signature",
      "underlying" : 64,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "x",
        "type" : 10
      } ],
      "name" : "(x uint8)",
      "type" : "Tuple",
      "underlying" : 65
    }, {
      "name" : "func(a unsafe.Pointer, b unsafe.Pointer, size uintptr) bool",
      "params" : 67,
      "recv" : -1,
      "results" : 14,
      "type" : "Signature",
      "underlying" : 66,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "a",
        "type" : 13
      }, {
        "name" : "b",
        "type" : 13
      }, {
        "name" : "size",
        "type" : 7
      } ],
      "name" : "(a unsafe.Pointer, b unsafe.Pointer, size uintptr)",
      "type" : "Tuple",
      "underlying" : 67
    }, {
      "elem" : 17,
      "name" : "[4]byte",
      "type" : "Array",
      "underlying" : 68
    }, {
      "elem" : 68,
      "name" : "*[4]byte",
      "type" : "Pointer",
      "underlying" : 69
    }, {
      "name" : "untyped int",
      "type" : "Basic",
      "underlying" : 70
    }, {
      "name" : "func(p unsafe.Pointer) unsafe.Pointer",
      "params" : 72,
      "recv" : -1,
      "results" : 40,
      "type" : "Signature",
      "underlying" : 71,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "p",
        "type" : 13
      } ],
      "name" : "(p unsafe.Pointer)",
      "type" : "Tuple",
      "underlying" : 72
    }, {
      "name" : "func(b uint8) uintptr",
      "params" : 74,
      "recv" : -1,
      "results" : 24,
      "type" : "Signature",
      "underlying" : 73,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "b",
        "type" : 10
      } ],
      "name" : "(b uint8)",
      "type" : "Tuple",
      "underlying" : 74
    }, {
      "name" : "func() bool",
      "params" : 45,
      "recv" : -1,
      "results" : 14,
      "type" : "Signature",
      "underlying" : 75,
      "variadic" : false
    }, {
      "name" : "(*runtime.hmap) func() bool",
      "params" : 45,
      "recv" : 33,
      "results" : 14,
      "type" : "Signature",
      "underlying" : 76,
      "variadic" : false
    }, {
      "name" : "func(b *runtime.bmap) bool",
      "params" : 78,
      "recv" : -1,
      "results" : 14,
      "type" : "Signature",
      "underlying" : 77,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "b",
        "type" : 35
      } ],
      "name" : "(b *runtime.bmap)",
      "type" : "Tuple",
      "underlying" : 78
    }, {
      "name" : "func(hash uintptr) uint8",
      "params" : 80,
      "recv" : -1,
      "results" : 81,
      "type" : "Signature",
      "underlying" : 79,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "hash",
        "type" : 7
      } ],
      "name" : "(hash uintptr)",
      "type" : "Tuple",
      "underlying" : 80
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 10
      } ],
      "name" : "(uint8)",
      "type" : "Tuple",
      "underlying" : 81
    }, {
      "name" : "func(t *runtime.maptype) *runtime.bmap",
      "params" : 83,
      "recv" : -1,
      "results" : 84,
      "type" : "Signature",
      "underlying" : 82,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "t",
        "type" : 2
      } ],
      "name" : "(t *runtime.maptype)",
      "type" : "Tuple",
      "underlying" : 83
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 35
      } ],
      "name" : "(*runtime.bmap)",
      "type" : "Tuple",
      "underlying" : 84
    }, {
      "name" : "(*runtime.bmap) func(t *runtime.maptype) *runtime.bmap",
      "params" : 83,
      "recv" : 36,
      "results" : 84,
      "type" : "Signature",
      "underlying" : 85,
      "variadic" : false
    } ],
    "variables" : [ {
      "name" : "t",
      "package" : 0,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "h",
      "package" : 0,
      "type" : 26,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "ky",
      "package" : 0,
      "type" : 39,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "[res0]",
      "package" : 0,
      "type" : 13,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "zeroVal",
      "package" : 0,
      "type" : 41,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "callerpc",
      "package" : 0,
      "type" : 7,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "count",
      "package" : 0,
      "type" : 29,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "flags",
      "package" : 0,
      "type" : 10,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "key",
      "package" : 0,
      "type" : 53,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "B",
      "package" : 0,
      "type" : 10,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "buckets",
      "package" : 0,
      "type" : 13,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "len",
      "package" : 0,
      "type" : 29,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "b",
      "package" : 0,
      "type" : 35,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "b",
      "package" : 0,
      "type" : 35,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "i",
      "package" : 0,
      "type" : 7,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "kptr",
      "package" : 0,
      "type" : 13,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "k",
      "package" : 0,
      "type" : 53,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "tophash",
      "package" : 0,
      "type" : 38,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "str",
      "package" : 0,
      "type" : 13,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "elemsize",
      "package" : 0,
      "type" : 10,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "i",
      "package" : 0,
      "type" : 7,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "kptr",
      "package" : 0,
      "type" : 13,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "k",
      "package" : 0,
      "type" : 53,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "keymaybe",
      "package" : 0,
      "type" : 7,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "k",
      "package" : 0,
      "type" : 53,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "hasher",
      "package" : 0,
      "type" : 22,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "hash0",
      "package" : 0,
      "type" : 8,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "hash",
      "package" : 0,
      "type" : 7,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "m",
      "package" : 0,
      "type" : 7,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "bucketsize",
      "package" : 0,
      "type" : 25,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "b",
      "package" : 0,
      "type" : 35,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "oldbuckets",
      "package" : 0,
      "type" : 13,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "c",
      "package" : 0,
      "type" : 13,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "h",
      "package" : 0,
      "type" : 26,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "oldb",
      "package" : 0,
      "type" : 35,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "top",
      "package" : 0,
      "type" : 10,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "b",
      "package" : 0,
      "type" : 35,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "i",
      "package" : 0,
      "type" : 7,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "kptr",
      "package" : 0,
      "type" : 13,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "k",
      "package" : 0,
      "type" : 53,
      "exported" : false,
      "embedded" : false,
      "field" : false
    } ]
  },
  "go-version" : "1.14.3"
}