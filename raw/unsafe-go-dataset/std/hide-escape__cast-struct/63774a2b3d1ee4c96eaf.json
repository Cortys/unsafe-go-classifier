{
  "usage" : {
    "file" : "panic.go",
    "label1" : "cast-struct",
    "label2" : "hide-escape",
    "line" : "923",
    "module" : "std",
    "pkg" : "runtime",
    "project" : "kubernetes/kubernetes",
    "snippet" : "gp._panic = (*_panic)(noescape(unsafe.Pointer(&p)))",
    "version" : "std"
  },
  "cfg" : {
    "blocks" : [ {
      "update-vars" : [ ],
      "successors" : [ 2 ],
      "in-vars" : [ 1, 2, 0, 3, 4, 5 ],
      "exit" : false,
      "out-vars" : [ 4, 5, 1, 2, 0, 3 ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[entry]",
      "entry" : true,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ ],
      "in-vars" : [ ],
      "exit" : true,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[exit]",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 3 ],
      "in-vars" : [ 0, 3, 4, 5, 1, 2 ],
      "exit" : false,
      "out-vars" : [ 4, 6, 5, 1, 2, 0, 3 ],
      "decl-vars" : [ 6 ],
      "line-start" : 890,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "gp"
          }
        } ],
        "right" : [ {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 114,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "getg"
            }
          },
          "go-type" : 18,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 890,
      "code" : "gp := getg()",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 4, 8 ],
      "in-vars" : [ 3, 4, 6, 5, 1, 2, 0 ],
      "exit" : false,
      "out-vars" : [ 6, 5, 1, 2, 0, 3, 4 ],
      "decl-vars" : [ ],
      "line-start" : 891,
      "ast" : {
        "condition" : {
          "go-type" : 116,
          "kind" : "expression",
          "left" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "curg",
              "variable" : 8
            },
            "go-type" : 18,
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "m",
                "variable" : 7
              },
              "go-type" : 23,
              "kind" : "expression",
              "target" : {
                "go-type" : 18,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "gp",
                  "variable" : 6
                }
              },
              "type" : "selector"
            },
            "type" : "selector"
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 18,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "gp",
              "variable" : 6
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 896,
      "code" : "if gp.m.curg != gp {\n\tprint(\"panic: \")\n\tprintany(e)\n\tprint(\"\\n\")\n\tthrow(\"panic on system stack\")\n}",
      "entry" : false,
      "use-vars" : [ 6 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 5 ],
      "in-vars" : [ 1, 2, 0, 3, 4, 6, 5 ],
      "exit" : false,
      "out-vars" : [ 3, 4, 6, 5, 1, 2, 0 ],
      "decl-vars" : [ ],
      "line-start" : 892,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 39,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "panic: "
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 117,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Builtin",
              "kind" : "ident",
              "value" : "print"
            }
          },
          "go-type" : 3,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 892,
      "code" : "print(\"panic: \")",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 6 ],
      "in-vars" : [ 2, 0, 3, 4, 6, 5, 1 ],
      "exit" : false,
      "out-vars" : [ 0, 3, 4, 6, 5, 1, 2 ],
      "decl-vars" : [ ],
      "line-start" : 893,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "e",
              "variable" : 0
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 119,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "printany"
            }
          },
          "go-type" : 3,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 893,
      "code" : "printany(e)",
      "entry" : false,
      "use-vars" : [ 0 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 7 ],
      "in-vars" : [ 0, 3, 4, 6, 5, 1, 2 ],
      "exit" : false,
      "out-vars" : [ 3, 4, 6, 5, 1, 2, 0 ],
      "decl-vars" : [ ],
      "line-start" : 894,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 39,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "\n"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 117,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Builtin",
              "kind" : "ident",
              "value" : "print"
            }
          },
          "go-type" : 3,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 894,
      "code" : "print(\"\\n\")",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 8 ],
      "in-vars" : [ 0, 3, 4, 6, 5, 1, 2 ],
      "exit" : false,
      "out-vars" : [ 6, 5, 1, 2, 0, 3, 4 ],
      "decl-vars" : [ ],
      "line-start" : 895,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 39,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "panic on system stack"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 121,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "throw"
            }
          },
          "go-type" : 3,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 895,
      "code" : "throw(\"panic on system stack\")",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 9, 13 ],
      "in-vars" : [ 6, 5, 1, 2, 0, 3, 4 ],
      "exit" : false,
      "out-vars" : [ 3, 4, 6, 5, 1, 2, 0 ],
      "decl-vars" : [ ],
      "line-start" : 898,
      "ast" : {
        "condition" : {
          "go-type" : 116,
          "kind" : "expression",
          "left" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "mallocing",
              "variable" : 9
            },
            "go-type" : 7,
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "m",
                "variable" : 7
              },
              "go-type" : 23,
              "kind" : "expression",
              "target" : {
                "go-type" : 18,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "gp",
                  "variable" : 6
                }
              },
              "type" : "selector"
            },
            "type" : "selector"
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 7,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 903,
      "code" : "if gp.m.mallocing != 0 {\n\tprint(\"panic: \")\n\tprintany(e)\n\tprint(\"\\n\")\n\tthrow(\"panic during malloc\")\n}",
      "entry" : false,
      "use-vars" : [ 6 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 10 ],
      "in-vars" : [ 4, 6, 5, 1, 2, 0, 3 ],
      "exit" : false,
      "out-vars" : [ 6, 5, 1, 2, 0, 3, 4 ],
      "decl-vars" : [ ],
      "line-start" : 899,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 39,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "panic: "
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 117,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Builtin",
              "kind" : "ident",
              "value" : "print"
            }
          },
          "go-type" : 3,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 899,
      "code" : "print(\"panic: \")",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 11 ],
      "in-vars" : [ 6, 5, 1, 2, 0, 3, 4 ],
      "exit" : false,
      "out-vars" : [ 1, 2, 0, 3, 4, 6, 5 ],
      "decl-vars" : [ ],
      "line-start" : 900,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "e",
              "variable" : 0
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 119,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "printany"
            }
          },
          "go-type" : 3,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 900,
      "code" : "printany(e)",
      "entry" : false,
      "use-vars" : [ 0 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 12 ],
      "in-vars" : [ 6, 5, 1, 2, 0, 3, 4 ],
      "exit" : false,
      "out-vars" : [ 0, 3, 4, 6, 5, 1, 2 ],
      "decl-vars" : [ ],
      "line-start" : 901,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 39,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "\n"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 117,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Builtin",
              "kind" : "ident",
              "value" : "print"
            }
          },
          "go-type" : 3,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 901,
      "code" : "print(\"\\n\")",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 13 ],
      "in-vars" : [ 1, 2, 0, 3, 4, 6, 5 ],
      "exit" : false,
      "out-vars" : [ 4, 6, 5, 1, 2, 0, 3 ],
      "decl-vars" : [ ],
      "line-start" : 902,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 39,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "panic during malloc"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 121,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "throw"
            }
          },
          "go-type" : 3,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 902,
      "code" : "throw(\"panic during malloc\")",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 14, 21 ],
      "in-vars" : [ 2, 0, 3, 4, 6, 5, 1 ],
      "exit" : false,
      "out-vars" : [ 6, 5, 1, 2, 0, 3, 4 ],
      "decl-vars" : [ ],
      "line-start" : 904,
      "ast" : {
        "condition" : {
          "go-type" : 116,
          "kind" : "expression",
          "left" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "preemptoff",
              "variable" : 10
            },
            "go-type" : 39,
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "m",
                "variable" : 7
              },
              "go-type" : 23,
              "kind" : "expression",
              "target" : {
                "go-type" : 18,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "gp",
                  "variable" : 6
                }
              },
              "type" : "selector"
            },
            "type" : "selector"
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 39,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : ""
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 912,
      "code" : "if gp.m.preemptoff != \"\" {\n\tprint(\"panic: \")\n\tprintany(e)\n\tprint(\"\\n\")\n\tprint(\"preempt off reason: \")\n\tprint(gp.m.preemptoff)\n\tprint(\"\\n\")\n\tthrow(\"panic during preemptoff\")\n}",
      "entry" : false,
      "use-vars" : [ 6 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 15 ],
      "in-vars" : [ 3, 4, 6, 5, 1, 2, 0 ],
      "exit" : false,
      "out-vars" : [ 6, 5, 1, 2, 0, 3, 4 ],
      "decl-vars" : [ ],
      "line-start" : 905,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 39,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "panic: "
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 117,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Builtin",
              "kind" : "ident",
              "value" : "print"
            }
          },
          "go-type" : 3,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 905,
      "code" : "print(\"panic: \")",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 16 ],
      "in-vars" : [ 2, 0, 3, 4, 6, 5, 1 ],
      "exit" : false,
      "out-vars" : [ 4, 6, 5, 1, 2, 0, 3 ],
      "decl-vars" : [ ],
      "line-start" : 906,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "e",
              "variable" : 0
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 119,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "printany"
            }
          },
          "go-type" : 3,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 906,
      "code" : "printany(e)",
      "entry" : false,
      "use-vars" : [ 0 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 17 ],
      "in-vars" : [ 0, 3, 4, 6, 5, 1, 2 ],
      "exit" : false,
      "out-vars" : [ 1, 2, 0, 3, 4, 6, 5 ],
      "decl-vars" : [ ],
      "line-start" : 907,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 39,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "\n"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 117,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Builtin",
              "kind" : "ident",
              "value" : "print"
            }
          },
          "go-type" : 3,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 907,
      "code" : "print(\"\\n\")",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 18 ],
      "in-vars" : [ 4, 6, 5, 1, 2, 0, 3 ],
      "exit" : false,
      "out-vars" : [ 2, 0, 3, 4, 6, 5, 1 ],
      "decl-vars" : [ ],
      "line-start" : 908,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 39,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "preempt off reason: "
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 117,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Builtin",
              "kind" : "ident",
              "value" : "print"
            }
          },
          "go-type" : 3,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 908,
      "code" : "print(\"preempt off reason: \")",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 19 ],
      "in-vars" : [ 6, 5, 1, 2, 0, 3, 4 ],
      "exit" : false,
      "out-vars" : [ 0, 3, 4, 6, 5, 1, 2 ],
      "decl-vars" : [ ],
      "line-start" : 909,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "preemptoff",
              "variable" : 10
            },
            "go-type" : 39,
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "m",
                "variable" : 7
              },
              "go-type" : 23,
              "kind" : "expression",
              "target" : {
                "go-type" : 18,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "gp",
                  "variable" : 6
                }
              },
              "type" : "selector"
            },
            "type" : "selector"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 117,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Builtin",
              "kind" : "ident",
              "value" : "print"
            }
          },
          "go-type" : 3,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 909,
      "code" : "print(gp.m.preemptoff)",
      "entry" : false,
      "use-vars" : [ 6 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 20 ],
      "in-vars" : [ 3, 4, 6, 5, 1, 2, 0 ],
      "exit" : false,
      "out-vars" : [ 1, 2, 0, 3, 4, 6, 5 ],
      "decl-vars" : [ ],
      "line-start" : 910,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 39,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "\n"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 117,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Builtin",
              "kind" : "ident",
              "value" : "print"
            }
          },
          "go-type" : 3,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 910,
      "code" : "print(\"\\n\")",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 21 ],
      "in-vars" : [ 4, 6, 5, 1, 2, 0, 3 ],
      "exit" : false,
      "out-vars" : [ 4, 6, 5, 1, 2, 0, 3 ],
      "decl-vars" : [ ],
      "line-start" : 911,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 39,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "panic during preemptoff"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 121,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "throw"
            }
          },
          "go-type" : 3,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 911,
      "code" : "throw(\"panic during preemptoff\")",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 22, 26 ],
      "in-vars" : [ 0, 3, 4, 6, 5, 1, 2 ],
      "exit" : false,
      "out-vars" : [ 0, 3, 4, 6, 5, 1, 2 ],
      "decl-vars" : [ ],
      "line-start" : 913,
      "ast" : {
        "condition" : {
          "go-type" : 116,
          "kind" : "expression",
          "left" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "locks",
              "variable" : 11
            },
            "go-type" : 7,
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "m",
                "variable" : 7
              },
              "go-type" : 23,
              "kind" : "expression",
              "target" : {
                "go-type" : 18,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "gp",
                  "variable" : 6
                }
              },
              "type" : "selector"
            },
            "type" : "selector"
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 7,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 918,
      "code" : "if gp.m.locks != 0 {\n\tprint(\"panic: \")\n\tprintany(e)\n\tprint(\"\\n\")\n\tthrow(\"panic holding locks\")\n}",
      "entry" : false,
      "use-vars" : [ 6 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 23 ],
      "in-vars" : [ 0, 3, 4, 6, 5, 1, 2 ],
      "exit" : false,
      "out-vars" : [ 0, 3, 4, 6, 5, 1, 2 ],
      "decl-vars" : [ ],
      "line-start" : 914,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 39,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "panic: "
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 117,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Builtin",
              "kind" : "ident",
              "value" : "print"
            }
          },
          "go-type" : 3,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 914,
      "code" : "print(\"panic: \")",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 24 ],
      "in-vars" : [ 3, 4, 6, 5, 1, 2, 0 ],
      "exit" : false,
      "out-vars" : [ 6, 5, 1, 2, 0, 3, 4 ],
      "decl-vars" : [ ],
      "line-start" : 915,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "e",
              "variable" : 0
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 119,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "printany"
            }
          },
          "go-type" : 3,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 915,
      "code" : "printany(e)",
      "entry" : false,
      "use-vars" : [ 0 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 25 ],
      "in-vars" : [ 6, 5, 1, 2, 0, 3, 4 ],
      "exit" : false,
      "out-vars" : [ 4, 6, 5, 1, 2, 0, 3 ],
      "decl-vars" : [ ],
      "line-start" : 916,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 39,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "\n"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 117,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Builtin",
              "kind" : "ident",
              "value" : "print"
            }
          },
          "go-type" : 3,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 916,
      "code" : "print(\"\\n\")",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 26 ],
      "in-vars" : [ 6, 5, 1, 2, 0, 3, 4 ],
      "exit" : false,
      "out-vars" : [ 0, 3, 4, 6, 5, 1, 2 ],
      "decl-vars" : [ ],
      "line-start" : 917,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 39,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "panic holding locks"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 121,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "throw"
            }
          },
          "go-type" : 3,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 917,
      "code" : "throw(\"panic holding locks\")",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 27 ],
      "in-vars" : [ 6, 5, 1, 2, 0, 3, 4 ],
      "exit" : false,
      "out-vars" : [ 2, 0, 3, 4, 6, 5, 1, 12 ],
      "decl-vars" : [ 12 ],
      "line-start" : 920,
      "ast" : {
        "kind" : "statement",
        "target" : {
          "kind" : "decl",
          "specs" : [ {
            "comments" : [ ],
            "declared-type" : {
              "go-type" : 14,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 14,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "_panic"
              }
            },
            "kind" : "spec",
            "names" : [ {
              "ident-kind" : "NoKind",
              "kind" : "ident",
              "value" : "p"
            } ],
            "type" : "var",
            "values" : [ ]
          } ],
          "type" : "var"
        },
        "type" : "declaration"
      },
      "assign-vars" : [ ],
      "line-end" : 920,
      "code" : "var p _panic",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ 12 ],
      "successors" : [ 28 ],
      "in-vars" : [ 5, 1, 12, 2, 0, 3, 4, 6 ],
      "exit" : false,
      "out-vars" : [ 4, 6, 5, 1, 12, 2, 3 ],
      "decl-vars" : [ ],
      "line-start" : 921,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "arg",
            "variable" : 13
          },
          "go-type" : 2,
          "kind" : "expression",
          "target" : {
            "go-type" : 14,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "p",
              "variable" : 12
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "go-type" : 2,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "e",
            "variable" : 0
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 921,
      "code" : "p.arg = e",
      "entry" : false,
      "use-vars" : [ 0, 12 ]
    }, {
      "update-vars" : [ 12 ],
      "successors" : [ 29 ],
      "in-vars" : [ 5, 1, 12, 2, 3, 4, 6 ],
      "exit" : false,
      "out-vars" : [ 6, 5, 1, 12, 2, 3, 4 ],
      "decl-vars" : [ ],
      "line-start" : 922,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "link",
            "variable" : 14
          },
          "go-type" : 13,
          "kind" : "expression",
          "target" : {
            "go-type" : 14,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "p",
              "variable" : 12
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "_panic",
            "variable" : 15
          },
          "go-type" : 13,
          "kind" : "expression",
          "target" : {
            "go-type" : 18,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "gp",
              "variable" : 6
            }
          },
          "type" : "selector"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 922,
      "code" : "p.link = gp._panic",
      "entry" : false,
      "use-vars" : [ 12, 6 ]
    }, {
      "update-vars" : [ 6 ],
      "successors" : [ 30 ],
      "in-vars" : [ 3, 4, 6, 5, 1, 12, 2 ],
      "exit" : false,
      "out-vars" : [ 3, 4, 6, 5, 1, 12, 2 ],
      "decl-vars" : [ ],
      "line-start" : 923,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "_panic",
            "variable" : 15
          },
          "go-type" : 13,
          "kind" : "expression",
          "target" : {
            "go-type" : 18,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "gp",
              "variable" : 6
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "coerced-to" : {
            "contained" : {
              "go-type" : 14,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 14,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "_panic"
              }
            },
            "go-type" : 13,
            "kind" : "type",
            "type" : "pointer"
          },
          "go-type" : 13,
          "kind" : "expression",
          "target" : {
            "arguments" : [ {
              "coerced-to" : {
                "go-type" : 16,
                "kind" : "type",
                "qualifier" : {
                  "ident-kind" : "PkgName",
                  "kind" : "ident",
                  "package" : 1,
                  "value" : "unsafe"
                },
                "type" : "identifier",
                "value" : {
                  "go-type" : 16,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "Pointer"
                }
              },
              "go-type" : 16,
              "kind" : "expression",
              "target" : {
                "go-type" : 13,
                "kind" : "expression",
                "operator" : "&",
                "target" : {
                  "go-type" : 14,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "p",
                    "variable" : 12
                  }
                },
                "type" : "unary"
              },
              "type" : "cast"
            } ],
            "ellipsis" : false,
            "function" : {
              "go-type" : 123,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Func",
                "kind" : "ident",
                "value" : "noescape"
              }
            },
            "go-type" : 16,
            "kind" : "expression",
            "type" : "call"
          },
          "type" : "cast"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 923,
      "code" : "gp._panic = (*_panic)(noescape(unsafe.Pointer(&p)))",
      "entry" : false,
      "use-vars" : [ 12, 6 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 31 ],
      "in-vars" : [ 6, 5, 1, 12, 2, 3, 4 ],
      "exit" : false,
      "out-vars" : [ 12, 2, 3, 4, 6, 5, 1 ],
      "decl-vars" : [ ],
      "line-start" : 925,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 128,
            "kind" : "expression",
            "operator" : "&",
            "target" : {
              "go-type" : 17,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "runningPanicDefers",
                "variable" : 2
              }
            },
            "type" : "unary"
          }, {
            "go-type" : 7,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "1"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 126,
            "kind" : "expression",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 3,
              "value" : "atomic"
            },
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "Xadd"
            }
          },
          "go-type" : 17,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 925,
      "code" : "atomic.Xadd(&runningPanicDefers, 1)",
      "entry" : false,
      "use-vars" : [ 2 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 32 ],
      "in-vars" : [ 12, 2, 3, 4, 6, 5, 1 ],
      "exit" : false,
      "out-vars" : [ 4, 6, 5, 1, 12, 2, 3 ],
      "decl-vars" : [ ],
      "line-start" : 929,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 18,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "gp",
              "variable" : 6
            }
          }, {
            "arguments" : [ ],
            "ellipsis" : false,
            "function" : {
              "go-type" : 132,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Func",
                "kind" : "ident",
                "value" : "getcallerpc"
              }
            },
            "go-type" : 9,
            "kind" : "expression",
            "type" : "call"
          }, {
            "coerced-to" : {
              "go-type" : 16,
              "kind" : "type",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 1,
                "value" : "unsafe"
              },
              "type" : "identifier",
              "value" : {
                "go-type" : 16,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "Pointer"
              }
            },
            "go-type" : 16,
            "kind" : "expression",
            "target" : {
              "arguments" : [ ],
              "ellipsis" : false,
              "function" : {
                "go-type" : 132,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Func",
                  "kind" : "ident",
                  "value" : "getcallersp"
                }
              },
              "go-type" : 9,
              "kind" : "expression",
              "type" : "call"
            },
            "type" : "cast"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 130,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "addOneOpenDeferFrame"
            }
          },
          "go-type" : 3,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 929,
      "code" : "addOneOpenDeferFrame(gp, getcallerpc(), unsafe.Pointer(getcallersp()))",
      "entry" : false,
      "use-vars" : [ 6 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 33, 96 ],
      "in-vars" : [ 3, 4, 6, 5, 1, 12, 2 ],
      "exit" : false,
      "out-vars" : [ 6, 5, 1, 12, 2, 3, 4 ],
      "decl-vars" : [ ],
      "line-start" : 931,
      "ast" : {
        "condition" : null,
        "kind" : "statement",
        "type" : "for"
      },
      "assign-vars" : [ ],
      "line-end" : 1056,
      "code" : "for {\n\td := gp._defer\n\tif d == nil {\n\t\tbreak\n\t}\n\n\tif d.started {\n\t\tif d._panic != nil {\n\t\t\td._panic.aborted = true\n\t\t}\n\t\td._panic = nil\n\t\tif !d.openDefer {\n\n\t\t\td.fn = nil\n\t\t\tgp._defer = d.link\n\t\t\tfreedefer(d)\n\t\t\tcontinue\n\t\t}\n\t}\n\n\td.started = true\n\n\td._panic = (*_panic)(noescape(unsafe.Pointer(&p)))\n\n\tdone := true\n\tif d.openDefer {\n\t\tdone = runOpenDeferFrame(gp, d)\n\t\tif done && !d._panic.recovered {\n\t\t\taddOneOpenDeferFrame(gp, 0, nil)\n\t\t}\n\t} else {\n\t\tp.argp = unsafe.Pointer(getargp(0))\n\t\treflectcall(nil, unsafe.Pointer(d.fn), deferArgs(d), uint32(d.siz), uint32(d.siz))\n\t}\n\tp.argp = nil\n\n\tif gp._defer != d {\n\t\tthrow(\"bad defer entry in panic\")\n\t}\n\td._panic = nil\n\n\tpc := d.pc\n\tsp := unsafe.Pointer(d.sp)\n\tif done {\n\t\td.fn = nil\n\t\tgp._defer = d.link\n\t\tfreedefer(d)\n\t}\n\tif p.recovered {\n\t\tgp._panic = p.link\n\t\tif gp._panic != nil && gp._panic.goexit && gp._panic.aborted {\n\n\t\t\tgp.sigcode0 = uintptr(gp._panic.sp)\n\t\t\tgp.sigcode1 = uintptr(gp._panic.pc)\n\t\t\tmcall(recovery)\n\t\t\tthrow(\"bypassed recovery failed\")\n\t\t}\n\t\tatomic.Xadd(&runningPanicDefers, -1)\n\n\t\tif done {\n\n\t\t\td := gp._defer\n\t\t\tvar prev *_defer\n\t\t\tfor d != nil {\n\t\t\t\tif d.openDefer {\n\t\t\t\t\tif d.started {\n\n\t\t\t\t\t\tbreak\n\t\t\t\t\t}\n\t\t\t\t\tif prev == nil {\n\t\t\t\t\t\tgp._defer = d.link\n\t\t\t\t\t} else {\n\t\t\t\t\t\tprev.link = d.link\n\t\t\t\t\t}\n\t\t\t\t\tnewd := d.link\n\t\t\t\t\tfreedefer(d)\n\t\t\t\t\td = newd\n\t\t\t\t} else {\n\t\t\t\t\tprev = d\n\t\t\t\t\td = d.link\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tgp._panic = p.link\n\n\t\tfor gp._panic != nil && gp._panic.aborted {\n\t\t\tgp._panic = gp._panic.link\n\t\t}\n\t\tif gp._panic == nil {\n\t\t\tgp.sig = 0\n\t\t}\n\n\t\tgp.sigcode0 = uintptr(sp)\n\t\tgp.sigcode1 = pc\n\t\tmcall(recovery)\n\t\tthrow(\"recovery failed\")\n\t}\n}",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 34 ],
      "in-vars" : [ 1, 12, 2, 3, 4, 6, 5 ],
      "exit" : false,
      "out-vars" : [ 12, 2, 3, 4, 6, 17, 5, 1 ],
      "decl-vars" : [ 17 ],
      "line-start" : 932,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "d"
          }
        } ],
        "right" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "_defer",
            "variable" : 16
          },
          "go-type" : 4,
          "kind" : "expression",
          "target" : {
            "go-type" : 18,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "gp",
              "variable" : 6
            }
          },
          "type" : "selector"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 932,
      "code" : "d := gp._defer",
      "entry" : false,
      "use-vars" : [ 6 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 35, 36 ],
      "in-vars" : [ 2, 3, 4, 6, 17, 5, 1, 12 ],
      "exit" : false,
      "out-vars" : [ 6, 17, 5, 1, 12, 2, 3, 4 ],
      "decl-vars" : [ ],
      "line-start" : 933,
      "ast" : {
        "condition" : {
          "go-type" : 116,
          "kind" : "expression",
          "left" : {
            "go-type" : 4,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "d",
              "variable" : 17
            }
          },
          "operator" : "==",
          "right" : {
            "go-type" : 134,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Nil",
              "kind" : "ident",
              "value" : "nil"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 935,
      "code" : "if d == nil {\n\tbreak\n}",
      "entry" : false,
      "use-vars" : [ 17 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 87 ],
      "in-vars" : [ 4, 6, 5, 1, 12, 2, 3 ],
      "exit" : false,
      "out-vars" : [ 4, 6, 5, 1, 12, 2, 3 ],
      "decl-vars" : [ ],
      "line-start" : 934,
      "ast" : {
        "kind" : "statement",
        "label" : null,
        "type" : "break"
      },
      "assign-vars" : [ ],
      "line-end" : 934,
      "code" : "break",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 37, 45 ],
      "in-vars" : [ 4, 6, 17, 5, 1, 12, 2, 3 ],
      "exit" : false,
      "out-vars" : [ 5, 1, 12, 2, 3, 4, 6, 17 ],
      "decl-vars" : [ ],
      "line-start" : 940,
      "ast" : {
        "condition" : {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "started",
            "variable" : 18
          },
          "go-type" : 8,
          "kind" : "expression",
          "target" : {
            "go-type" : 4,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "d",
              "variable" : 17
            }
          },
          "type" : "selector"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 955,
      "code" : "if d.started {\n\tif d._panic != nil {\n\t\td._panic.aborted = true\n\t}\n\td._panic = nil\n\tif !d.openDefer {\n\n\t\td.fn = nil\n\t\tgp._defer = d.link\n\t\tfreedefer(d)\n\t\tcontinue\n\t}\n}",
      "entry" : false,
      "use-vars" : [ 17 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 38, 39 ],
      "in-vars" : [ 17, 5, 1, 12, 2, 3, 4, 6 ],
      "exit" : false,
      "out-vars" : [ 12, 2, 3, 4, 6, 17, 5, 1 ],
      "decl-vars" : [ ],
      "line-start" : 941,
      "ast" : {
        "condition" : {
          "go-type" : 116,
          "kind" : "expression",
          "left" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "_panic",
              "variable" : 19
            },
            "go-type" : 13,
            "kind" : "expression",
            "target" : {
              "go-type" : 4,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "d",
                "variable" : 17
              }
            },
            "type" : "selector"
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 134,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Nil",
              "kind" : "ident",
              "value" : "nil"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 943,
      "code" : "if d._panic != nil {\n\td._panic.aborted = true\n}",
      "entry" : false,
      "use-vars" : [ 17 ]
    }, {
      "update-vars" : [ 17 ],
      "successors" : [ 39 ],
      "in-vars" : [ 12, 2, 3, 4, 6, 17, 5, 1 ],
      "exit" : false,
      "out-vars" : [ 2, 3, 4, 6, 17, 5, 1, 12 ],
      "decl-vars" : [ ],
      "line-start" : 942,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "aborted",
            "variable" : 20
          },
          "go-type" : 8,
          "kind" : "expression",
          "target" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "_panic",
              "variable" : 19
            },
            "go-type" : 13,
            "kind" : "expression",
            "target" : {
              "go-type" : 4,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "d",
                "variable" : 17
              }
            },
            "type" : "selector"
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "go-type" : 8,
          "kind" : "constant",
          "value" : {
            "type" : "BOOL",
            "value" : "true"
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 942,
      "code" : "d._panic.aborted = true",
      "entry" : false,
      "use-vars" : [ 17 ]
    }, {
      "update-vars" : [ 17 ],
      "successors" : [ 40 ],
      "in-vars" : [ 1, 12, 2, 3, 4, 6, 17, 5 ],
      "exit" : false,
      "out-vars" : [ 2, 3, 4, 6, 17, 5, 1, 12 ],
      "decl-vars" : [ ],
      "line-start" : 944,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "_panic",
            "variable" : 19
          },
          "go-type" : 13,
          "kind" : "expression",
          "target" : {
            "go-type" : 4,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "d",
              "variable" : 17
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "go-type" : 134,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Nil",
            "kind" : "ident",
            "value" : "nil"
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 944,
      "code" : "d._panic = nil",
      "entry" : false,
      "use-vars" : [ 17 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 41, 45 ],
      "in-vars" : [ 6, 17, 5, 1, 12, 2, 3, 4 ],
      "exit" : false,
      "out-vars" : [ 6, 17, 5, 1, 12, 2, 3, 4 ],
      "decl-vars" : [ ],
      "line-start" : 945,
      "ast" : {
        "condition" : {
          "go-type" : 8,
          "kind" : "expression",
          "operator" : "!",
          "target" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "openDefer",
              "variable" : 21
            },
            "go-type" : 8,
            "kind" : "expression",
            "target" : {
              "go-type" : 4,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "d",
                "variable" : 17
              }
            },
            "type" : "selector"
          },
          "type" : "unary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 954,
      "code" : "if !d.openDefer {\n\n\td.fn = nil\n\tgp._defer = d.link\n\tfreedefer(d)\n\tcontinue\n}",
      "entry" : false,
      "use-vars" : [ 17 ]
    }, {
      "update-vars" : [ 17 ],
      "successors" : [ 42 ],
      "in-vars" : [ 4, 6, 17, 5, 1, 12, 2, 3 ],
      "exit" : false,
      "out-vars" : [ 17, 5, 1, 12, 2, 3, 4, 6 ],
      "decl-vars" : [ ],
      "line-start" : 950,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "fn",
            "variable" : 22
          },
          "go-type" : 10,
          "kind" : "expression",
          "target" : {
            "go-type" : 4,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "d",
              "variable" : 17
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "go-type" : 134,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Nil",
            "kind" : "ident",
            "value" : "nil"
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 950,
      "code" : "d.fn = nil",
      "entry" : false,
      "use-vars" : [ 17 ]
    }, {
      "update-vars" : [ 6 ],
      "successors" : [ 43 ],
      "in-vars" : [ 17, 5, 1, 12, 2, 3, 4, 6 ],
      "exit" : false,
      "out-vars" : [ 12, 2, 3, 4, 6, 17, 5, 1 ],
      "decl-vars" : [ ],
      "line-start" : 951,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "_defer",
            "variable" : 16
          },
          "go-type" : 4,
          "kind" : "expression",
          "target" : {
            "go-type" : 18,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "gp",
              "variable" : 6
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "link",
            "variable" : 23
          },
          "go-type" : 4,
          "kind" : "expression",
          "target" : {
            "go-type" : 4,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "d",
              "variable" : 17
            }
          },
          "type" : "selector"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 951,
      "code" : "gp._defer = d.link",
      "entry" : false,
      "use-vars" : [ 17, 6 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 44 ],
      "in-vars" : [ 12, 2, 3, 4, 6, 17, 5, 1 ],
      "exit" : false,
      "out-vars" : [ 6, 5, 1, 12, 2, 3, 4 ],
      "decl-vars" : [ ],
      "line-start" : 952,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 4,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "d",
              "variable" : 17
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 135,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "freedefer"
            }
          },
          "go-type" : 3,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 952,
      "code" : "freedefer(d)",
      "entry" : false,
      "use-vars" : [ 17 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 75 ],
      "in-vars" : [ 2, 3, 4, 6, 5, 1, 12 ],
      "exit" : false,
      "out-vars" : [ 5, 1, 12, 2, 3, 4, 6 ],
      "decl-vars" : [ ],
      "line-start" : 953,
      "ast" : {
        "kind" : "statement",
        "label" : null,
        "type" : "continue"
      },
      "assign-vars" : [ ],
      "line-end" : 953,
      "code" : "continue",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ 17 ],
      "successors" : [ 46 ],
      "in-vars" : [ 17, 5, 1, 12, 2, 6 ],
      "exit" : false,
      "out-vars" : [ 6, 17, 5, 1, 12, 2 ],
      "decl-vars" : [ ],
      "line-start" : 960,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "started",
            "variable" : 18
          },
          "go-type" : 8,
          "kind" : "expression",
          "target" : {
            "go-type" : 4,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "d",
              "variable" : 17
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "go-type" : 8,
          "kind" : "constant",
          "value" : {
            "type" : "BOOL",
            "value" : "true"
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 960,
      "code" : "d.started = true",
      "entry" : false,
      "use-vars" : [ 17 ]
    }, {
      "update-vars" : [ 17 ],
      "successors" : [ 47 ],
      "in-vars" : [ 6, 17, 5, 1, 12, 2 ],
      "exit" : false,
      "out-vars" : [ 12, 2, 6, 17, 5, 1 ],
      "decl-vars" : [ ],
      "line-start" : 965,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "_panic",
            "variable" : 19
          },
          "go-type" : 13,
          "kind" : "expression",
          "target" : {
            "go-type" : 4,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "d",
              "variable" : 17
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "coerced-to" : {
            "contained" : {
              "go-type" : 14,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 14,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "_panic"
              }
            },
            "go-type" : 13,
            "kind" : "type",
            "type" : "pointer"
          },
          "go-type" : 13,
          "kind" : "expression",
          "target" : {
            "arguments" : [ {
              "coerced-to" : {
                "go-type" : 16,
                "kind" : "type",
                "qualifier" : {
                  "ident-kind" : "PkgName",
                  "kind" : "ident",
                  "package" : 1,
                  "value" : "unsafe"
                },
                "type" : "identifier",
                "value" : {
                  "go-type" : 16,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "Pointer"
                }
              },
              "go-type" : 16,
              "kind" : "expression",
              "target" : {
                "go-type" : 13,
                "kind" : "expression",
                "operator" : "&",
                "target" : {
                  "go-type" : 14,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "p",
                    "variable" : 12
                  }
                },
                "type" : "unary"
              },
              "type" : "cast"
            } ],
            "ellipsis" : false,
            "function" : {
              "go-type" : 123,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Func",
                "kind" : "ident",
                "value" : "noescape"
              }
            },
            "go-type" : 16,
            "kind" : "expression",
            "type" : "call"
          },
          "type" : "cast"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 965,
      "code" : "d._panic = (*_panic)(noescape(unsafe.Pointer(&p)))",
      "entry" : false,
      "use-vars" : [ 12, 17 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 48 ],
      "in-vars" : [ 6, 17, 5, 1, 12, 2 ],
      "exit" : false,
      "out-vars" : [ 6, 17, 5, 1, 12, 2, 24 ],
      "decl-vars" : [ 24 ],
      "line-start" : 967,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "done"
          }
        } ],
        "right" : [ {
          "go-type" : 8,
          "kind" : "constant",
          "value" : {
            "type" : "BOOL",
            "value" : "true"
          }
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 967,
      "code" : "done := true",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 49, 52 ],
      "in-vars" : [ 12, 2, 24, 6, 17, 5, 1 ],
      "exit" : false,
      "out-vars" : [ 5, 1, 12, 2, 24, 6, 17 ],
      "decl-vars" : [ ],
      "line-start" : 968,
      "ast" : {
        "condition" : {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "openDefer",
            "variable" : 21
          },
          "go-type" : 8,
          "kind" : "expression",
          "target" : {
            "go-type" : 4,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "d",
              "variable" : 17
            }
          },
          "type" : "selector"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 976,
      "code" : "if d.openDefer {\n\tdone = runOpenDeferFrame(gp, d)\n\tif done && !d._panic.recovered {\n\t\taddOneOpenDeferFrame(gp, 0, nil)\n\t}\n} else {\n\tp.argp = unsafe.Pointer(getargp(0))\n\treflectcall(nil, unsafe.Pointer(d.fn), deferArgs(d), uint32(d.siz), uint32(d.siz))\n}",
      "entry" : false,
      "use-vars" : [ 17 ]
    }, {
      "update-vars" : [ 24 ],
      "successors" : [ 50 ],
      "in-vars" : [ 12, 2, 6, 17, 5, 1 ],
      "exit" : false,
      "out-vars" : [ 12, 2, 24, 6, 17, 5, 1 ],
      "decl-vars" : [ ],
      "line-start" : 969,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 8,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "done",
            "variable" : 24
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 18,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "gp",
              "variable" : 6
            }
          }, {
            "go-type" : 4,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "d",
              "variable" : 17
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 137,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "runOpenDeferFrame"
            }
          },
          "go-type" : 8,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 24 ],
      "line-end" : 969,
      "code" : "done = runOpenDeferFrame(gp, d)",
      "entry" : false,
      "use-vars" : [ 6, 17 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 51, 54 ],
      "in-vars" : [ 6, 17, 5, 1, 12, 2, 24 ],
      "exit" : false,
      "out-vars" : [ 6, 17, 5, 1, 12, 2, 24 ],
      "decl-vars" : [ ],
      "line-start" : 970,
      "ast" : {
        "condition" : {
          "go-type" : 8,
          "kind" : "expression",
          "left" : {
            "go-type" : 8,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "done",
              "variable" : 24
            }
          },
          "operator" : "&&",
          "right" : {
            "go-type" : 8,
            "kind" : "expression",
            "operator" : "!",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "recovered",
                "variable" : 25
              },
              "go-type" : 8,
              "kind" : "expression",
              "target" : {
                "field" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "_panic",
                  "variable" : 19
                },
                "go-type" : 13,
                "kind" : "expression",
                "target" : {
                  "go-type" : 4,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "d",
                    "variable" : 17
                  }
                },
                "type" : "selector"
              },
              "type" : "selector"
            },
            "type" : "unary"
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 972,
      "code" : "if done && !d._panic.recovered {\n\taddOneOpenDeferFrame(gp, 0, nil)\n}",
      "entry" : false,
      "use-vars" : [ 17, 24 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 54 ],
      "in-vars" : [ 2, 24, 6, 17, 5, 1, 12 ],
      "exit" : false,
      "out-vars" : [ 24, 6, 17, 5, 1, 12, 2 ],
      "decl-vars" : [ ],
      "line-start" : 971,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 18,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "gp",
              "variable" : 6
            }
          }, {
            "go-type" : 9,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          }, {
            "go-type" : 16,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Nil",
              "kind" : "ident",
              "value" : "nil"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 130,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "addOneOpenDeferFrame"
            }
          },
          "go-type" : 3,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 971,
      "code" : "addOneOpenDeferFrame(gp, 0, nil)",
      "entry" : false,
      "use-vars" : [ 6 ]
    }, {
      "update-vars" : [ 12 ],
      "successors" : [ 53 ],
      "in-vars" : [ 6, 17, 5, 1, 12, 2, 24 ],
      "exit" : false,
      "out-vars" : [ 6, 17, 5, 1, 12, 2, 24 ],
      "decl-vars" : [ ],
      "line-start" : 974,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "argp",
            "variable" : 26
          },
          "go-type" : 16,
          "kind" : "expression",
          "target" : {
            "go-type" : 14,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "p",
              "variable" : 12
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "coerced-to" : {
            "go-type" : 16,
            "kind" : "type",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 1,
              "value" : "unsafe"
            },
            "type" : "identifier",
            "value" : {
              "go-type" : 16,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "Pointer"
            }
          },
          "go-type" : 16,
          "kind" : "expression",
          "target" : {
            "arguments" : [ {
              "go-type" : 78,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "0"
              }
            } ],
            "ellipsis" : false,
            "function" : {
              "go-type" : 139,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Func",
                "kind" : "ident",
                "value" : "getargp"
              }
            },
            "go-type" : 9,
            "kind" : "expression",
            "type" : "call"
          },
          "type" : "cast"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 974,
      "code" : "p.argp = unsafe.Pointer(getargp(0))",
      "entry" : false,
      "use-vars" : [ 12 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 54 ],
      "in-vars" : [ 1, 12, 2, 24, 6, 17, 5 ],
      "exit" : false,
      "out-vars" : [ 6, 17, 5, 1, 12, 2, 24 ],
      "decl-vars" : [ ],
      "line-start" : 975,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 134,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Nil",
              "kind" : "ident",
              "value" : "nil"
            }
          }, {
            "coerced-to" : {
              "go-type" : 16,
              "kind" : "type",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 1,
                "value" : "unsafe"
              },
              "type" : "identifier",
              "value" : {
                "go-type" : 16,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "Pointer"
              }
            },
            "go-type" : 16,
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "fn",
                "variable" : 22
              },
              "go-type" : 10,
              "kind" : "expression",
              "target" : {
                "go-type" : 4,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "d",
                  "variable" : 17
                }
              },
              "type" : "selector"
            },
            "type" : "cast"
          }, {
            "arguments" : [ {
              "go-type" : 4,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "d",
                "variable" : 17
              }
            } ],
            "ellipsis" : false,
            "function" : {
              "go-type" : 143,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Func",
                "kind" : "ident",
                "value" : "deferArgs"
              }
            },
            "go-type" : 16,
            "kind" : "expression",
            "type" : "call"
          }, {
            "coerced-to" : {
              "go-type" : 17,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 17,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "uint32"
              }
            },
            "go-type" : 17,
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "siz",
                "variable" : 27
              },
              "go-type" : 7,
              "kind" : "expression",
              "target" : {
                "go-type" : 4,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "d",
                  "variable" : 17
                }
              },
              "type" : "selector"
            },
            "type" : "cast"
          }, {
            "coerced-to" : {
              "go-type" : 17,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 17,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "uint32"
              }
            },
            "go-type" : 17,
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "siz",
                "variable" : 27
              },
              "go-type" : 7,
              "kind" : "expression",
              "target" : {
                "go-type" : 4,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "d",
                  "variable" : 17
                }
              },
              "type" : "selector"
            },
            "type" : "cast"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 141,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "reflectcall"
            }
          },
          "go-type" : 3,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 975,
      "code" : "reflectcall(nil, unsafe.Pointer(d.fn), deferArgs(d), uint32(d.siz), uint32(d.siz))",
      "entry" : false,
      "use-vars" : [ 17 ]
    }, {
      "update-vars" : [ 12 ],
      "successors" : [ 55 ],
      "in-vars" : [ 6, 17, 5, 1, 12, 2, 24 ],
      "exit" : false,
      "out-vars" : [ 2, 24, 6, 17, 5, 1, 12 ],
      "decl-vars" : [ ],
      "line-start" : 977,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "argp",
            "variable" : 26
          },
          "go-type" : 16,
          "kind" : "expression",
          "target" : {
            "go-type" : 14,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "p",
              "variable" : 12
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "go-type" : 16,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Nil",
            "kind" : "ident",
            "value" : "nil"
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 977,
      "code" : "p.argp = nil",
      "entry" : false,
      "use-vars" : [ 12 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 56, 57 ],
      "in-vars" : [ 6, 17, 5, 1, 12, 2, 24 ],
      "exit" : false,
      "out-vars" : [ 6, 17, 5, 1, 12, 2, 24 ],
      "decl-vars" : [ ],
      "line-start" : 980,
      "ast" : {
        "condition" : {
          "go-type" : 116,
          "kind" : "expression",
          "left" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "_defer",
              "variable" : 16
            },
            "go-type" : 4,
            "kind" : "expression",
            "target" : {
              "go-type" : 18,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "gp",
                "variable" : 6
              }
            },
            "type" : "selector"
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 4,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "d",
              "variable" : 17
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 982,
      "code" : "if gp._defer != d {\n\tthrow(\"bad defer entry in panic\")\n}",
      "entry" : false,
      "use-vars" : [ 17, 6 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 57 ],
      "in-vars" : [ 5, 1, 12, 2, 24, 6, 17 ],
      "exit" : false,
      "out-vars" : [ 5, 1, 12, 2, 24, 6, 17 ],
      "decl-vars" : [ ],
      "line-start" : 981,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 39,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "bad defer entry in panic"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 121,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "throw"
            }
          },
          "go-type" : 3,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 981,
      "code" : "throw(\"bad defer entry in panic\")",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ 17 ],
      "successors" : [ 58 ],
      "in-vars" : [ 6, 17, 5, 1, 12, 2, 24 ],
      "exit" : false,
      "out-vars" : [ 24, 6, 17, 5, 1, 12, 2 ],
      "decl-vars" : [ ],
      "line-start" : 983,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "_panic",
            "variable" : 19
          },
          "go-type" : 13,
          "kind" : "expression",
          "target" : {
            "go-type" : 4,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "d",
              "variable" : 17
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "go-type" : 134,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Nil",
            "kind" : "ident",
            "value" : "nil"
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 983,
      "code" : "d._panic = nil",
      "entry" : false,
      "use-vars" : [ 17 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 59 ],
      "in-vars" : [ 12, 2, 24, 6, 17, 5, 1 ],
      "exit" : false,
      "out-vars" : [ 17, 5, 1, 12, 2, 24, 3, 6 ],
      "decl-vars" : [ 3 ],
      "line-start" : 988,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "pc"
          }
        } ],
        "right" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "pc",
            "variable" : 28
          },
          "go-type" : 9,
          "kind" : "expression",
          "target" : {
            "go-type" : 4,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "d",
              "variable" : 17
            }
          },
          "type" : "selector"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 988,
      "code" : "pc := d.pc",
      "entry" : false,
      "use-vars" : [ 17 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 60 ],
      "in-vars" : [ 2, 24, 3, 6, 17, 5, 1, 12 ],
      "exit" : false,
      "out-vars" : [ 5, 24, 12, 2, 3, 4, 6, 17, 1 ],
      "decl-vars" : [ 4 ],
      "line-start" : 989,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "sp"
          }
        } ],
        "right" : [ {
          "coerced-to" : {
            "go-type" : 16,
            "kind" : "type",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 1,
              "value" : "unsafe"
            },
            "type" : "identifier",
            "value" : {
              "go-type" : 16,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "Pointer"
            }
          },
          "go-type" : 16,
          "kind" : "expression",
          "target" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "sp",
              "variable" : 29
            },
            "go-type" : 9,
            "kind" : "expression",
            "target" : {
              "go-type" : 4,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "d",
                "variable" : 17
              }
            },
            "type" : "selector"
          },
          "type" : "cast"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 989,
      "code" : "sp := unsafe.Pointer(d.sp)",
      "entry" : false,
      "use-vars" : [ 17 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 61, 64 ],
      "in-vars" : [ 17, 5, 1, 24, 3, 4, 6, 12, 2 ],
      "exit" : false,
      "out-vars" : [ 12, 2, 3, 17, 5, 24, 4, 6, 1 ],
      "decl-vars" : [ ],
      "line-start" : 990,
      "ast" : {
        "condition" : {
          "go-type" : 8,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "done",
            "variable" : 24
          }
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 994,
      "code" : "if done {\n\td.fn = nil\n\tgp._defer = d.link\n\tfreedefer(d)\n}",
      "entry" : false,
      "use-vars" : [ 24 ]
    }, {
      "update-vars" : [ 17 ],
      "successors" : [ 62 ],
      "in-vars" : [ 6, 17, 2, 24, 3, 4, 5, 1, 12 ],
      "exit" : false,
      "out-vars" : [ 24, 17, 5, 12, 3, 4, 6, 1, 2 ],
      "decl-vars" : [ ],
      "line-start" : 991,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "fn",
            "variable" : 22
          },
          "go-type" : 10,
          "kind" : "expression",
          "target" : {
            "go-type" : 4,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "d",
              "variable" : 17
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "go-type" : 134,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Nil",
            "kind" : "ident",
            "value" : "nil"
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 991,
      "code" : "d.fn = nil",
      "entry" : false,
      "use-vars" : [ 17 ]
    }, {
      "update-vars" : [ 6 ],
      "successors" : [ 63 ],
      "in-vars" : [ 4, 1, 12, 2, 24, 3, 6, 17, 5 ],
      "exit" : false,
      "out-vars" : [ 6, 1, 3, 4, 17, 5, 12, 2, 24 ],
      "decl-vars" : [ ],
      "line-start" : 992,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "_defer",
            "variable" : 16
          },
          "go-type" : 4,
          "kind" : "expression",
          "target" : {
            "go-type" : 18,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "gp",
              "variable" : 6
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "link",
            "variable" : 23
          },
          "go-type" : 4,
          "kind" : "expression",
          "target" : {
            "go-type" : 4,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "d",
              "variable" : 17
            }
          },
          "type" : "selector"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 992,
      "code" : "gp._defer = d.link",
      "entry" : false,
      "use-vars" : [ 6, 17 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 64 ],
      "in-vars" : [ 6, 2, 12, 24, 3, 4, 17, 5, 1 ],
      "exit" : false,
      "out-vars" : [ 1, 12, 2, 24, 3, 4, 6, 5 ],
      "decl-vars" : [ ],
      "line-start" : 993,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 4,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "d",
              "variable" : 17
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 135,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "freedefer"
            }
          },
          "go-type" : 3,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 993,
      "code" : "freedefer(d)",
      "entry" : false,
      "use-vars" : [ 17 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 32, 65 ],
      "in-vars" : [ 6, 5, 1, 12, 2, 24, 3, 4 ],
      "exit" : false,
      "out-vars" : [ 1, 12, 2, 24, 3, 4, 6, 5 ],
      "decl-vars" : [ ],
      "line-start" : 995,
      "ast" : {
        "condition" : {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "recovered",
            "variable" : 25
          },
          "go-type" : 8,
          "kind" : "expression",
          "target" : {
            "go-type" : 14,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "p",
              "variable" : 12
            }
          },
          "type" : "selector"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 1055,
      "code" : "if p.recovered {\n\tgp._panic = p.link\n\tif gp._panic != nil && gp._panic.goexit && gp._panic.aborted {\n\n\t\tgp.sigcode0 = uintptr(gp._panic.sp)\n\t\tgp.sigcode1 = uintptr(gp._panic.pc)\n\t\tmcall(recovery)\n\t\tthrow(\"bypassed recovery failed\")\n\t}\n\tatomic.Xadd(&runningPanicDefers, -1)\n\n\tif done {\n\n\t\td := gp._defer\n\t\tvar prev *_defer\n\t\tfor d != nil {\n\t\t\tif d.openDefer {\n\t\t\t\tif d.started {\n\n\t\t\t\t\tbreak\n\t\t\t\t}\n\t\t\t\tif prev == nil {\n\t\t\t\t\tgp._defer = d.link\n\t\t\t\t} else {\n\t\t\t\t\tprev.link = d.link\n\t\t\t\t}\n\t\t\t\tnewd := d.link\n\t\t\t\tfreedefer(d)\n\t\t\t\td = newd\n\t\t\t} else {\n\t\t\t\tprev = d\n\t\t\t\td = d.link\n\t\t\t}\n\t\t}\n\t}\n\n\tgp._panic = p.link\n\n\tfor gp._panic != nil && gp._panic.aborted {\n\t\tgp._panic = gp._panic.link\n\t}\n\tif gp._panic == nil {\n\t\tgp.sig = 0\n\t}\n\n\tgp.sigcode0 = uintptr(sp)\n\tgp.sigcode1 = pc\n\tmcall(recovery)\n\tthrow(\"recovery failed\")\n}",
      "entry" : false,
      "use-vars" : [ 12 ]
    }, {
      "update-vars" : [ 6 ],
      "successors" : [ 66 ],
      "in-vars" : [ 12, 2, 24, 3, 4, 6, 5, 1 ],
      "exit" : false,
      "out-vars" : [ 1, 12, 2, 24, 3, 4, 6, 5 ],
      "decl-vars" : [ ],
      "line-start" : 996,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "_panic",
            "variable" : 15
          },
          "go-type" : 13,
          "kind" : "expression",
          "target" : {
            "go-type" : 18,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "gp",
              "variable" : 6
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "link",
            "variable" : 14
          },
          "go-type" : 13,
          "kind" : "expression",
          "target" : {
            "go-type" : 14,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "p",
              "variable" : 12
            }
          },
          "type" : "selector"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 996,
      "code" : "gp._panic = p.link",
      "entry" : false,
      "use-vars" : [ 12, 6 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 67, 71 ],
      "in-vars" : [ 6, 5, 1, 12, 2, 24, 3, 4 ],
      "exit" : false,
      "out-vars" : [ 1, 12, 2, 24, 3, 4, 6, 5 ],
      "decl-vars" : [ ],
      "line-start" : 997,
      "ast" : {
        "condition" : {
          "go-type" : 8,
          "kind" : "expression",
          "left" : {
            "go-type" : 8,
            "kind" : "expression",
            "left" : {
              "go-type" : 8,
              "kind" : "expression",
              "left" : {
                "field" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "_panic",
                  "variable" : 15
                },
                "go-type" : 13,
                "kind" : "expression",
                "target" : {
                  "go-type" : 18,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "gp",
                    "variable" : 6
                  }
                },
                "type" : "selector"
              },
              "operator" : "!=",
              "right" : {
                "go-type" : 134,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Nil",
                  "kind" : "ident",
                  "value" : "nil"
                }
              },
              "type" : "binary"
            },
            "operator" : "&&",
            "right" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "goexit",
                "variable" : 30
              },
              "go-type" : 8,
              "kind" : "expression",
              "target" : {
                "field" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "_panic",
                  "variable" : 15
                },
                "go-type" : 13,
                "kind" : "expression",
                "target" : {
                  "go-type" : 18,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "gp",
                    "variable" : 6
                  }
                },
                "type" : "selector"
              },
              "type" : "selector"
            },
            "type" : "binary"
          },
          "operator" : "&&",
          "right" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "aborted",
              "variable" : 20
            },
            "go-type" : 8,
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "_panic",
                "variable" : 15
              },
              "go-type" : 13,
              "kind" : "expression",
              "target" : {
                "go-type" : 18,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "gp",
                  "variable" : 6
                }
              },
              "type" : "selector"
            },
            "type" : "selector"
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 1004,
      "code" : "if gp._panic != nil && gp._panic.goexit && gp._panic.aborted {\n\n\tgp.sigcode0 = uintptr(gp._panic.sp)\n\tgp.sigcode1 = uintptr(gp._panic.pc)\n\tmcall(recovery)\n\tthrow(\"bypassed recovery failed\")\n}",
      "entry" : false,
      "use-vars" : [ 6 ]
    }, {
      "update-vars" : [ 6 ],
      "successors" : [ 68 ],
      "in-vars" : [ 24, 3, 4, 6, 5, 1, 12, 2 ],
      "exit" : false,
      "out-vars" : [ 24, 3, 4, 6, 5, 1, 12, 2 ],
      "decl-vars" : [ ],
      "line-start" : 1000,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "sigcode0",
            "variable" : 31
          },
          "go-type" : 9,
          "kind" : "expression",
          "target" : {
            "go-type" : 18,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "gp",
              "variable" : 6
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "coerced-to" : {
            "go-type" : 9,
            "kind" : "type",
            "type" : "identifier",
            "value" : {
              "go-type" : 9,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "uintptr"
            }
          },
          "go-type" : 9,
          "kind" : "expression",
          "target" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "sp",
              "variable" : 32
            },
            "go-type" : 16,
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "_panic",
                "variable" : 15
              },
              "go-type" : 13,
              "kind" : "expression",
              "target" : {
                "go-type" : 18,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "gp",
                  "variable" : 6
                }
              },
              "type" : "selector"
            },
            "type" : "selector"
          },
          "type" : "cast"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 1000,
      "code" : "gp.sigcode0 = uintptr(gp._panic.sp)",
      "entry" : false,
      "use-vars" : [ 6 ]
    }, {
      "update-vars" : [ 6 ],
      "successors" : [ 69 ],
      "in-vars" : [ 2, 24, 3, 4, 6, 5, 1, 12 ],
      "exit" : false,
      "out-vars" : [ 2, 24, 3, 4, 6, 5, 1, 12 ],
      "decl-vars" : [ ],
      "line-start" : 1001,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "sigcode1",
            "variable" : 33
          },
          "go-type" : 9,
          "kind" : "expression",
          "target" : {
            "go-type" : 18,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "gp",
              "variable" : 6
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "coerced-to" : {
            "go-type" : 9,
            "kind" : "type",
            "type" : "identifier",
            "value" : {
              "go-type" : 9,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "uintptr"
            }
          },
          "go-type" : 9,
          "kind" : "expression",
          "target" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "pc",
              "variable" : 34
            },
            "go-type" : 9,
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "_panic",
                "variable" : 15
              },
              "go-type" : 13,
              "kind" : "expression",
              "target" : {
                "go-type" : 18,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "gp",
                  "variable" : 6
                }
              },
              "type" : "selector"
            },
            "type" : "selector"
          },
          "type" : "cast"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 1001,
      "code" : "gp.sigcode1 = uintptr(gp._panic.pc)",
      "entry" : false,
      "use-vars" : [ 6 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 70 ],
      "in-vars" : [ 6, 5, 1, 12, 2, 24, 3, 4 ],
      "exit" : false,
      "out-vars" : [ 1, 12, 2, 24, 3, 4, 6, 5 ],
      "decl-vars" : [ ],
      "line-start" : 1002,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 147,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "recovery"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 144,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "mcall"
            }
          },
          "go-type" : 3,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 1002,
      "code" : "mcall(recovery)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 71 ],
      "in-vars" : [ 4, 6, 5, 1, 12, 2, 24, 3 ],
      "exit" : false,
      "out-vars" : [ 1, 12, 2, 24, 3, 4, 6, 5 ],
      "decl-vars" : [ ],
      "line-start" : 1003,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 39,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "bypassed recovery failed"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 121,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "throw"
            }
          },
          "go-type" : 3,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 1003,
      "code" : "throw(\"bypassed recovery failed\")",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 72 ],
      "in-vars" : [ 3, 4, 6, 5, 1, 12, 2, 24 ],
      "exit" : false,
      "out-vars" : [ 3, 4, 6, 5, 1, 12, 2, 24 ],
      "decl-vars" : [ ],
      "line-start" : 1005,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 128,
            "kind" : "expression",
            "operator" : "&",
            "target" : {
              "go-type" : 17,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "runningPanicDefers",
                "variable" : 2
              }
            },
            "type" : "unary"
          }, {
            "go-type" : 7,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "-1"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 126,
            "kind" : "expression",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 3,
              "value" : "atomic"
            },
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "Xadd"
            }
          },
          "go-type" : 17,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 1005,
      "code" : "atomic.Xadd(&runningPanicDefers, -1)",
      "entry" : false,
      "use-vars" : [ 2 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 73, 87 ],
      "in-vars" : [ 3, 4, 6, 5, 1, 12, 2, 24 ],
      "exit" : false,
      "out-vars" : [ 6, 5, 1, 12, 2, 3, 4 ],
      "decl-vars" : [ ],
      "line-start" : 1007,
      "ast" : {
        "condition" : {
          "go-type" : 8,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "done",
            "variable" : 24
          }
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 1039,
      "code" : "if done {\n\n\td := gp._defer\n\tvar prev *_defer\n\tfor d != nil {\n\t\tif d.openDefer {\n\t\t\tif d.started {\n\n\t\t\t\tbreak\n\t\t\t}\n\t\t\tif prev == nil {\n\t\t\t\tgp._defer = d.link\n\t\t\t} else {\n\t\t\t\tprev.link = d.link\n\t\t\t}\n\t\t\tnewd := d.link\n\t\t\tfreedefer(d)\n\t\t\td = newd\n\t\t} else {\n\t\t\tprev = d\n\t\t\td = d.link\n\t\t}\n\t}\n}",
      "entry" : false,
      "use-vars" : [ 24 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 74 ],
      "in-vars" : [ 6, 12, 2, 3, 4 ],
      "exit" : false,
      "out-vars" : [ 6, 5, 12, 2, 3, 4 ],
      "decl-vars" : [ 5 ],
      "line-start" : 1014,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "d"
          }
        } ],
        "right" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "_defer",
            "variable" : 16
          },
          "go-type" : 4,
          "kind" : "expression",
          "target" : {
            "go-type" : 18,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "gp",
              "variable" : 6
            }
          },
          "type" : "selector"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 1014,
      "code" : "d := gp._defer",
      "entry" : false,
      "use-vars" : [ 6 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 75 ],
      "in-vars" : [ 6, 5, 12, 2, 3, 4 ],
      "exit" : false,
      "out-vars" : [ 3, 4, 6, 5, 1, 12, 2 ],
      "decl-vars" : [ 1 ],
      "line-start" : 1015,
      "ast" : {
        "kind" : "statement",
        "target" : {
          "kind" : "decl",
          "specs" : [ {
            "comments" : [ ],
            "declared-type" : {
              "contained" : {
                "go-type" : 5,
                "kind" : "type",
                "type" : "identifier",
                "value" : {
                  "go-type" : 5,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "_defer"
                }
              },
              "go-type" : 4,
              "kind" : "type",
              "type" : "pointer"
            },
            "kind" : "spec",
            "names" : [ {
              "ident-kind" : "NoKind",
              "kind" : "ident",
              "value" : "prev"
            } ],
            "type" : "var",
            "values" : [ ]
          } ],
          "type" : "var"
        },
        "type" : "declaration"
      },
      "assign-vars" : [ ],
      "line-end" : 1015,
      "code" : "var prev *_defer",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 76, 87 ],
      "in-vars" : [ 4, 6, 5, 1, 12, 2, 3 ],
      "exit" : false,
      "out-vars" : [ 12, 2, 3, 4, 6, 5, 1 ],
      "decl-vars" : [ ],
      "line-start" : 1016,
      "ast" : {
        "condition" : {
          "go-type" : 116,
          "kind" : "expression",
          "left" : {
            "go-type" : 4,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "d",
              "variable" : 5
            }
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 134,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Nil",
              "kind" : "ident",
              "value" : "nil"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "for"
      },
      "assign-vars" : [ ],
      "line-end" : 1038,
      "code" : "for d != nil {\n\tif d.openDefer {\n\t\tif d.started {\n\n\t\t\tbreak\n\t\t}\n\t\tif prev == nil {\n\t\t\tgp._defer = d.link\n\t\t} else {\n\t\t\tprev.link = d.link\n\t\t}\n\t\tnewd := d.link\n\t\tfreedefer(d)\n\t\td = newd\n\t} else {\n\t\tprev = d\n\t\td = d.link\n\t}\n}",
      "entry" : false,
      "use-vars" : [ 5 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 77, 85 ],
      "in-vars" : [ 4, 6, 5, 1, 12, 2, 3 ],
      "exit" : false,
      "out-vars" : [ 2, 3, 4, 6, 5, 1, 12 ],
      "decl-vars" : [ ],
      "line-start" : 1017,
      "ast" : {
        "condition" : {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "openDefer",
            "variable" : 21
          },
          "go-type" : 8,
          "kind" : "expression",
          "target" : {
            "go-type" : 4,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "d",
              "variable" : 5
            }
          },
          "type" : "selector"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 1037,
      "code" : "if d.openDefer {\n\tif d.started {\n\n\t\tbreak\n\t}\n\tif prev == nil {\n\t\tgp._defer = d.link\n\t} else {\n\t\tprev.link = d.link\n\t}\n\tnewd := d.link\n\tfreedefer(d)\n\td = newd\n} else {\n\tprev = d\n\td = d.link\n}",
      "entry" : false,
      "use-vars" : [ 5 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 78, 79 ],
      "in-vars" : [ 12, 2, 3, 4, 6, 5, 1 ],
      "exit" : false,
      "out-vars" : [ 3, 4, 6, 5, 1, 12, 2 ],
      "decl-vars" : [ ],
      "line-start" : 1018,
      "ast" : {
        "condition" : {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "started",
            "variable" : 18
          },
          "go-type" : 8,
          "kind" : "expression",
          "target" : {
            "go-type" : 4,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "d",
              "variable" : 5
            }
          },
          "type" : "selector"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 1025,
      "code" : "if d.started {\n\n\tbreak\n}",
      "entry" : false,
      "use-vars" : [ 5 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 87 ],
      "in-vars" : [ 12, 2, 3, 4, 6, 5, 1 ],
      "exit" : false,
      "out-vars" : [ 2, 3, 4, 6, 5, 1, 12 ],
      "decl-vars" : [ ],
      "line-start" : 1024,
      "ast" : {
        "kind" : "statement",
        "label" : null,
        "type" : "break"
      },
      "assign-vars" : [ ],
      "line-end" : 1024,
      "code" : "break",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 80, 81 ],
      "in-vars" : [ 3, 4, 6, 5, 1, 12, 2 ],
      "exit" : false,
      "out-vars" : [ 4, 6, 5, 1, 12, 2, 3 ],
      "decl-vars" : [ ],
      "line-start" : 1026,
      "ast" : {
        "condition" : {
          "go-type" : 116,
          "kind" : "expression",
          "left" : {
            "go-type" : 4,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "prev",
              "variable" : 1
            }
          },
          "operator" : "==",
          "right" : {
            "go-type" : 134,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Nil",
              "kind" : "ident",
              "value" : "nil"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 1030,
      "code" : "if prev == nil {\n\tgp._defer = d.link\n} else {\n\tprev.link = d.link\n}",
      "entry" : false,
      "use-vars" : [ 1 ]
    }, {
      "update-vars" : [ 6 ],
      "successors" : [ 82 ],
      "in-vars" : [ 6, 5, 1, 12, 2, 3, 4 ],
      "exit" : false,
      "out-vars" : [ 5, 1, 12, 2, 3, 4, 6 ],
      "decl-vars" : [ ],
      "line-start" : 1027,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "_defer",
            "variable" : 16
          },
          "go-type" : 4,
          "kind" : "expression",
          "target" : {
            "go-type" : 18,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "gp",
              "variable" : 6
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "link",
            "variable" : 23
          },
          "go-type" : 4,
          "kind" : "expression",
          "target" : {
            "go-type" : 4,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "d",
              "variable" : 5
            }
          },
          "type" : "selector"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 1027,
      "code" : "gp._defer = d.link",
      "entry" : false,
      "use-vars" : [ 6, 5 ]
    }, {
      "update-vars" : [ 1 ],
      "successors" : [ 82 ],
      "in-vars" : [ 5, 1, 12, 2, 3, 4, 6 ],
      "exit" : false,
      "out-vars" : [ 6, 5, 1, 12, 2, 3, 4 ],
      "decl-vars" : [ ],
      "line-start" : 1029,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "link",
            "variable" : 23
          },
          "go-type" : 4,
          "kind" : "expression",
          "target" : {
            "go-type" : 4,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "prev",
              "variable" : 1
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "link",
            "variable" : 23
          },
          "go-type" : 4,
          "kind" : "expression",
          "target" : {
            "go-type" : 4,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "d",
              "variable" : 5
            }
          },
          "type" : "selector"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 1029,
      "code" : "prev.link = d.link",
      "entry" : false,
      "use-vars" : [ 1, 5 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 83 ],
      "in-vars" : [ 4, 6, 5, 1, 12, 2, 3 ],
      "exit" : false,
      "out-vars" : [ 3, 4, 6, 5, 35, 1, 12, 2 ],
      "decl-vars" : [ 35 ],
      "line-start" : 1031,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "newd"
          }
        } ],
        "right" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "link",
            "variable" : 23
          },
          "go-type" : 4,
          "kind" : "expression",
          "target" : {
            "go-type" : 4,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "d",
              "variable" : 5
            }
          },
          "type" : "selector"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 1031,
      "code" : "newd := d.link",
      "entry" : false,
      "use-vars" : [ 5 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 84 ],
      "in-vars" : [ 12, 2, 3, 4, 6, 5, 35, 1 ],
      "exit" : false,
      "out-vars" : [ 4, 6, 35, 1, 12, 2, 3 ],
      "decl-vars" : [ ],
      "line-start" : 1032,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 4,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "d",
              "variable" : 5
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 135,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "freedefer"
            }
          },
          "go-type" : 3,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 1032,
      "code" : "freedefer(d)",
      "entry" : false,
      "use-vars" : [ 5 ]
    }, {
      "update-vars" : [ 5 ],
      "successors" : [ 75 ],
      "in-vars" : [ 1, 12, 2, 3, 4, 6, 35 ],
      "exit" : false,
      "out-vars" : [ 4, 6, 5, 1, 12, 2, 3 ],
      "decl-vars" : [ ],
      "line-start" : 1033,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 4,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "d",
            "variable" : 5
          }
        } ],
        "right" : [ {
          "go-type" : 4,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "newd",
            "variable" : 35
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 5 ],
      "line-end" : 1033,
      "code" : "d = newd",
      "entry" : false,
      "use-vars" : [ 35 ]
    }, {
      "update-vars" : [ 1 ],
      "successors" : [ 86 ],
      "in-vars" : [ 3, 4, 6, 5, 12, 2 ],
      "exit" : false,
      "out-vars" : [ 6, 5, 1, 12, 2, 3, 4 ],
      "decl-vars" : [ ],
      "line-start" : 1035,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 4,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "prev",
            "variable" : 1
          }
        } ],
        "right" : [ {
          "go-type" : 4,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "d",
            "variable" : 5
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 1 ],
      "line-end" : 1035,
      "code" : "prev = d",
      "entry" : false,
      "use-vars" : [ 5 ]
    }, {
      "update-vars" : [ 5 ],
      "successors" : [ 75 ],
      "in-vars" : [ 4, 6, 5, 1, 12, 2, 3 ],
      "exit" : false,
      "out-vars" : [ 2, 3, 4, 6, 5, 1, 12 ],
      "decl-vars" : [ ],
      "line-start" : 1036,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 4,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "d",
            "variable" : 5
          }
        } ],
        "right" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "link",
            "variable" : 23
          },
          "go-type" : 4,
          "kind" : "expression",
          "target" : {
            "go-type" : 4,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "d",
              "variable" : 5
            }
          },
          "type" : "selector"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 5 ],
      "line-end" : 1036,
      "code" : "d = d.link",
      "entry" : false,
      "use-vars" : [ 5 ]
    }, {
      "update-vars" : [ 6 ],
      "successors" : [ 88 ],
      "in-vars" : [ 6, 5, 1, 12, 2, 3, 4 ],
      "exit" : false,
      "out-vars" : [ 3, 4, 6, 5, 1, 12, 2 ],
      "decl-vars" : [ ],
      "line-start" : 1041,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "_panic",
            "variable" : 15
          },
          "go-type" : 13,
          "kind" : "expression",
          "target" : {
            "go-type" : 18,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "gp",
              "variable" : 6
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "link",
            "variable" : 14
          },
          "go-type" : 13,
          "kind" : "expression",
          "target" : {
            "go-type" : 14,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "p",
              "variable" : 12
            }
          },
          "type" : "selector"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 1041,
      "code" : "gp._panic = p.link",
      "entry" : false,
      "use-vars" : [ 12, 6 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 89, 90 ],
      "in-vars" : [ 4, 6, 5, 1, 12, 2, 3 ],
      "exit" : false,
      "out-vars" : [ 6, 5, 1, 12, 2, 3, 4 ],
      "decl-vars" : [ ],
      "line-start" : 1044,
      "ast" : {
        "condition" : {
          "go-type" : 8,
          "kind" : "expression",
          "left" : {
            "go-type" : 8,
            "kind" : "expression",
            "left" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "_panic",
                "variable" : 15
              },
              "go-type" : 13,
              "kind" : "expression",
              "target" : {
                "go-type" : 18,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "gp",
                  "variable" : 6
                }
              },
              "type" : "selector"
            },
            "operator" : "!=",
            "right" : {
              "go-type" : 134,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Nil",
                "kind" : "ident",
                "value" : "nil"
              }
            },
            "type" : "binary"
          },
          "operator" : "&&",
          "right" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "aborted",
              "variable" : 20
            },
            "go-type" : 8,
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "_panic",
                "variable" : 15
              },
              "go-type" : 13,
              "kind" : "expression",
              "target" : {
                "go-type" : 18,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "gp",
                  "variable" : 6
                }
              },
              "type" : "selector"
            },
            "type" : "selector"
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "for"
      },
      "assign-vars" : [ ],
      "line-end" : 1046,
      "code" : "for gp._panic != nil && gp._panic.aborted {\n\tgp._panic = gp._panic.link\n}",
      "entry" : false,
      "use-vars" : [ 6 ]
    }, {
      "update-vars" : [ 6 ],
      "successors" : [ 88 ],
      "in-vars" : [ 2, 3, 4, 6, 5, 1, 12 ],
      "exit" : false,
      "out-vars" : [ 5, 1, 12, 2, 3, 4, 6 ],
      "decl-vars" : [ ],
      "line-start" : 1045,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "_panic",
            "variable" : 15
          },
          "go-type" : 13,
          "kind" : "expression",
          "target" : {
            "go-type" : 18,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "gp",
              "variable" : 6
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "link",
            "variable" : 14
          },
          "go-type" : 13,
          "kind" : "expression",
          "target" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "_panic",
              "variable" : 15
            },
            "go-type" : 13,
            "kind" : "expression",
            "target" : {
              "go-type" : 18,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "gp",
                "variable" : 6
              }
            },
            "type" : "selector"
          },
          "type" : "selector"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 1045,
      "code" : "gp._panic = gp._panic.link",
      "entry" : false,
      "use-vars" : [ 6 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 91, 92 ],
      "in-vars" : [ 4, 6, 5, 1, 12, 2, 3 ],
      "exit" : false,
      "out-vars" : [ 4, 6, 5, 1, 12, 2, 3 ],
      "decl-vars" : [ ],
      "line-start" : 1047,
      "ast" : {
        "condition" : {
          "go-type" : 116,
          "kind" : "expression",
          "left" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "_panic",
              "variable" : 15
            },
            "go-type" : 13,
            "kind" : "expression",
            "target" : {
              "go-type" : 18,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "gp",
                "variable" : 6
              }
            },
            "type" : "selector"
          },
          "operator" : "==",
          "right" : {
            "go-type" : 134,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Nil",
              "kind" : "ident",
              "value" : "nil"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 1049,
      "code" : "if gp._panic == nil {\n\tgp.sig = 0\n}",
      "entry" : false,
      "use-vars" : [ 6 ]
    }, {
      "update-vars" : [ 6 ],
      "successors" : [ 92 ],
      "in-vars" : [ 4, 6, 5, 1, 12, 2, 3 ],
      "exit" : false,
      "out-vars" : [ 2, 3, 4, 6, 5, 1, 12 ],
      "decl-vars" : [ ],
      "line-start" : 1048,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "sig",
            "variable" : 36
          },
          "go-type" : 17,
          "kind" : "expression",
          "target" : {
            "go-type" : 18,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "gp",
              "variable" : 6
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "go-type" : 17,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "0"
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 1048,
      "code" : "gp.sig = 0",
      "entry" : false,
      "use-vars" : [ 6 ]
    }, {
      "update-vars" : [ 6 ],
      "successors" : [ 93 ],
      "in-vars" : [ 4, 6, 5, 1, 12, 2, 3 ],
      "exit" : false,
      "out-vars" : [ 5, 1, 12, 2, 3, 4, 6 ],
      "decl-vars" : [ ],
      "line-start" : 1051,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "sigcode0",
            "variable" : 31
          },
          "go-type" : 9,
          "kind" : "expression",
          "target" : {
            "go-type" : 18,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "gp",
              "variable" : 6
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "coerced-to" : {
            "go-type" : 9,
            "kind" : "type",
            "type" : "identifier",
            "value" : {
              "go-type" : 9,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "uintptr"
            }
          },
          "go-type" : 9,
          "kind" : "expression",
          "target" : {
            "go-type" : 16,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "sp",
              "variable" : 4
            }
          },
          "type" : "cast"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 1051,
      "code" : "gp.sigcode0 = uintptr(sp)",
      "entry" : false,
      "use-vars" : [ 4, 6 ]
    }, {
      "update-vars" : [ 6 ],
      "successors" : [ 94 ],
      "in-vars" : [ 2, 3, 4, 6, 5, 1, 12 ],
      "exit" : false,
      "out-vars" : [ 6, 5, 1, 12, 2, 3, 4 ],
      "decl-vars" : [ ],
      "line-start" : 1052,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "sigcode1",
            "variable" : 33
          },
          "go-type" : 9,
          "kind" : "expression",
          "target" : {
            "go-type" : 18,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "gp",
              "variable" : 6
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "go-type" : 9,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "pc",
            "variable" : 3
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 1052,
      "code" : "gp.sigcode1 = pc",
      "entry" : false,
      "use-vars" : [ 3, 6 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 95 ],
      "in-vars" : [ 5, 1, 12, 2, 3, 4, 6 ],
      "exit" : false,
      "out-vars" : [ 5, 1, 12, 2, 3, 4, 6 ],
      "decl-vars" : [ ],
      "line-start" : 1053,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 147,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "recovery"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 144,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "mcall"
            }
          },
          "go-type" : 3,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 1053,
      "code" : "mcall(recovery)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 32 ],
      "in-vars" : [ 12, 2, 3, 4, 6, 5, 1 ],
      "exit" : false,
      "out-vars" : [ 1, 12, 2, 3, 4, 6, 5 ],
      "decl-vars" : [ ],
      "line-start" : 1054,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 39,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "recovery failed"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 121,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "throw"
            }
          },
          "go-type" : 3,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 1054,
      "code" : "throw(\"recovery failed\")",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 97 ],
      "in-vars" : [ 6 ],
      "exit" : false,
      "out-vars" : [ 6 ],
      "decl-vars" : [ ],
      "line-start" : 1062,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "_panic",
              "variable" : 15
            },
            "go-type" : 13,
            "kind" : "expression",
            "target" : {
              "go-type" : 18,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "gp",
                "variable" : 6
              }
            },
            "type" : "selector"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 149,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "preprintpanics"
            }
          },
          "go-type" : 3,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 1062,
      "code" : "preprintpanics(gp._panic)",
      "entry" : false,
      "use-vars" : [ 6 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 98 ],
      "in-vars" : [ 6 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 1064,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "_panic",
              "variable" : 15
            },
            "go-type" : 13,
            "kind" : "expression",
            "target" : {
              "go-type" : 18,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "gp",
                "variable" : 6
              }
            },
            "type" : "selector"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 151,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "fatalpanic"
            }
          },
          "go-type" : 3,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 1064,
      "code" : "fatalpanic(gp._panic)",
      "entry" : false,
      "use-vars" : [ 6 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 1065,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 78,
          "kind" : "expression",
          "target" : {
            "coerced-to" : {
              "contained" : {
                "go-type" : 78,
                "kind" : "type",
                "type" : "identifier",
                "value" : {
                  "go-type" : 78,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "int"
                }
              },
              "go-type" : 153,
              "kind" : "type",
              "type" : "pointer"
            },
            "go-type" : 153,
            "kind" : "expression",
            "target" : {
              "go-type" : 153,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Nil",
                "kind" : "ident",
                "value" : "nil"
              }
            },
            "type" : "cast"
          },
          "type" : "star"
        } ],
        "right" : [ {
          "go-type" : 78,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "0"
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 1065,
      "code" : "*(*int)(nil) = 0",
      "entry" : false,
      "use-vars" : [ ]
    } ],
    "code" : "// The implementation of the predeclared function panic.\nfunc gopanic(e interface{}) {\n\tgp := getg()\n\tif gp.m.curg != gp {\n\t\tprint(\"panic: \")\n\t\tprintany(e)\n\t\tprint(\"\\n\")\n\t\tthrow(\"panic on system stack\")\n\t}\n\n\tif gp.m.mallocing != 0 {\n\t\tprint(\"panic: \")\n\t\tprintany(e)\n\t\tprint(\"\\n\")\n\t\tthrow(\"panic during malloc\")\n\t}\n\tif gp.m.preemptoff != \"\" {\n\t\tprint(\"panic: \")\n\t\tprintany(e)\n\t\tprint(\"\\n\")\n\t\tprint(\"preempt off reason: \")\n\t\tprint(gp.m.preemptoff)\n\t\tprint(\"\\n\")\n\t\tthrow(\"panic during preemptoff\")\n\t}\n\tif gp.m.locks != 0 {\n\t\tprint(\"panic: \")\n\t\tprintany(e)\n\t\tprint(\"\\n\")\n\t\tthrow(\"panic holding locks\")\n\t}\n\n\tvar p _panic\n\tp.arg = e\n\tp.link = gp._panic\n\tgp._panic = (*_panic)(noescape(unsafe.Pointer(&p)))\n\n\tatomic.Xadd(&runningPanicDefers, 1)\n\n\taddOneOpenDeferFrame(gp, getcallerpc(), unsafe.Pointer(getcallersp()))\n\n\tfor {\n\t\td := gp._defer\n\t\tif d == nil {\n\t\t\tbreak\n\t\t}\n\n\t\tif d.started {\n\t\t\tif d._panic != nil {\n\t\t\t\td._panic.aborted = true\n\t\t\t}\n\t\t\td._panic = nil\n\t\t\tif !d.openDefer {\n\n\t\t\t\td.fn = nil\n\t\t\t\tgp._defer = d.link\n\t\t\t\tfreedefer(d)\n\t\t\t\tcontinue\n\t\t\t}\n\t\t}\n\n\t\td.started = true\n\n\t\td._panic = (*_panic)(noescape(unsafe.Pointer(&p)))\n\n\t\tdone := true\n\t\tif d.openDefer {\n\t\t\tdone = runOpenDeferFrame(gp, d)\n\t\t\tif done && !d._panic.recovered {\n\t\t\t\taddOneOpenDeferFrame(gp, 0, nil)\n\t\t\t}\n\t\t} else {\n\t\t\tp.argp = unsafe.Pointer(getargp(0))\n\t\t\treflectcall(nil, unsafe.Pointer(d.fn), deferArgs(d), uint32(d.siz), uint32(d.siz))\n\t\t}\n\t\tp.argp = nil\n\n\t\tif gp._defer != d {\n\t\t\tthrow(\"bad defer entry in panic\")\n\t\t}\n\t\td._panic = nil\n\n\t\tpc := d.pc\n\t\tsp := unsafe.Pointer(d.sp)\n\t\tif done {\n\t\t\td.fn = nil\n\t\t\tgp._defer = d.link\n\t\t\tfreedefer(d)\n\t\t}\n\t\tif p.recovered {\n\t\t\tgp._panic = p.link\n\t\t\tif gp._panic != nil && gp._panic.goexit && gp._panic.aborted {\n\n\t\t\t\tgp.sigcode0 = uintptr(gp._panic.sp)\n\t\t\t\tgp.sigcode1 = uintptr(gp._panic.pc)\n\t\t\t\tmcall(recovery)\n\t\t\t\tthrow(\"bypassed recovery failed\")\n\t\t\t}\n\t\t\tatomic.Xadd(&runningPanicDefers, -1)\n\n\t\t\tif done {\n\n\t\t\t\td := gp._defer\n\t\t\t\tvar prev *_defer\n\t\t\t\tfor d != nil {\n\t\t\t\t\tif d.openDefer {\n\t\t\t\t\t\tif d.started {\n\n\t\t\t\t\t\t\tbreak\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif prev == nil {\n\t\t\t\t\t\t\tgp._defer = d.link\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tprev.link = d.link\n\t\t\t\t\t\t}\n\t\t\t\t\t\tnewd := d.link\n\t\t\t\t\t\tfreedefer(d)\n\t\t\t\t\t\td = newd\n\t\t\t\t\t} else {\n\t\t\t\t\t\tprev = d\n\t\t\t\t\t\td = d.link\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tgp._panic = p.link\n\n\t\t\tfor gp._panic != nil && gp._panic.aborted {\n\t\t\t\tgp._panic = gp._panic.link\n\t\t\t}\n\t\t\tif gp._panic == nil {\n\t\t\t\tgp.sig = 0\n\t\t\t}\n\n\t\t\tgp.sigcode0 = uintptr(sp)\n\t\t\tgp.sigcode1 = pc\n\t\t\tmcall(recovery)\n\t\t\tthrow(\"recovery failed\")\n\t\t}\n\t}\n\n\tpreprintpanics(gp._panic)\n\n\tfatalpanic(gp._panic)\n\t*(*int)(nil) = 0\n}",
    "defines" : [ 0 ],
    "functions" : [ {
      "name" : "gopanic",
      "package" : 0,
      "type" : 0,
      "exported" : false
    }, {
      "name" : "getg",
      "package" : 0,
      "type" : 114,
      "exported" : false
    }, {
      "name" : "printany",
      "package" : 0,
      "type" : 119,
      "exported" : false
    }, {
      "name" : "throw",
      "package" : 0,
      "type" : 121,
      "exported" : false
    }, {
      "name" : "noescape",
      "package" : 0,
      "type" : 123,
      "exported" : false
    }, {
      "name" : "Xadd",
      "package" : 3,
      "type" : 126,
      "exported" : true
    }, {
      "name" : "addOneOpenDeferFrame",
      "package" : 0,
      "type" : 130,
      "exported" : false
    }, {
      "name" : "getcallerpc",
      "package" : 0,
      "type" : 132,
      "exported" : false
    }, {
      "name" : "getcallersp",
      "package" : 0,
      "type" : 132,
      "exported" : false
    }, {
      "name" : "freedefer",
      "package" : 0,
      "type" : 135,
      "exported" : false
    }, {
      "name" : "runOpenDeferFrame",
      "package" : 0,
      "type" : 137,
      "exported" : false
    }, {
      "name" : "getargp",
      "package" : 0,
      "type" : 139,
      "exported" : false
    }, {
      "name" : "reflectcall",
      "package" : 0,
      "type" : 141,
      "exported" : false
    }, {
      "name" : "deferArgs",
      "package" : 0,
      "type" : 143,
      "exported" : false
    }, {
      "name" : "mcall",
      "package" : 0,
      "type" : 144,
      "exported" : false
    }, {
      "name" : "recovery",
      "package" : 0,
      "type" : 147,
      "exported" : false
    }, {
      "name" : "preprintpanics",
      "package" : 0,
      "type" : 149,
      "exported" : false
    }, {
      "name" : "fatalpanic",
      "package" : 0,
      "type" : 151,
      "exported" : false
    } ],
    "line-end" : 1066,
    "line-start" : 889,
    "names" : [ "gopanic" ],
    "package" : 0,
    "packages" : [ {
      "name" : "runtime",
      "path" : "runtime"
    }, {
      "name" : "unsafe",
      "path" : "unsafe"
    }, {
      "name" : "sys",
      "path" : "runtime/internal/sys"
    }, {
      "name" : "atomic",
      "path" : "runtime/internal/atomic"
    } ],
    "params" : [ 0 ],
    "receivers" : [ ],
    "results" : [ ],
    "type" : "function",
    "types" : [ {
      "name" : "func(e interface{})",
      "params" : 1,
      "recv" : -1,
      "results" : 3,
      "type" : "Signature",
      "underlying" : 0,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "e",
        "type" : 2
      } ],
      "name" : "(e interface{})",
      "type" : "Tuple",
      "underlying" : 1
    }, {
      "methods" : [ ],
      "name" : "interface{}",
      "type" : "Interface",
      "underlying" : 2
    }, {
      "fields" : [ ],
      "name" : "()",
      "type" : "Tuple",
      "underlying" : 3
    }, {
      "elem" : 5,
      "name" : "*runtime._defer",
      "type" : "Pointer",
      "underlying" : 4
    }, {
      "local-name" : "_defer",
      "name" : "runtime._defer",
      "package" : 0,
      "type" : "Named",
      "underlying" : 6
    }, {
      "fields" : [ {
        "name" : "siz",
        "type" : 7
      }, {
        "name" : "started",
        "type" : 8
      }, {
        "name" : "heap",
        "type" : 8
      }, {
        "name" : "openDefer",
        "type" : 8
      }, {
        "name" : "sp",
        "type" : 9
      }, {
        "name" : "pc",
        "type" : 9
      }, {
        "name" : "fn",
        "type" : 10
      }, {
        "name" : "_panic",
        "type" : 13
      }, {
        "name" : "link",
        "type" : 4
      }, {
        "name" : "fd",
        "type" : 16
      }, {
        "name" : "varp",
        "type" : 9
      }, {
        "name" : "framepc",
        "type" : 9
      } ],
      "name" : "struct{siz int32; started bool; heap bool; openDefer bool; sp uintptr; pc uintptr; fn *runtime.funcval; _panic *runtime._panic; link *runtime._defer; fd unsafe.Pointer; varp uintptr; framepc uintptr}",
      "type" : "Struct",
      "underlying" : 6
    }, {
      "name" : "int32",
      "type" : "Basic",
      "underlying" : 7
    }, {
      "name" : "bool",
      "type" : "Basic",
      "underlying" : 8
    }, {
      "name" : "uintptr",
      "type" : "Basic",
      "underlying" : 9
    }, {
      "elem" : 11,
      "name" : "*runtime.funcval",
      "type" : "Pointer",
      "underlying" : 10
    }, {
      "local-name" : "funcval",
      "name" : "runtime.funcval",
      "package" : 0,
      "type" : "Named",
      "underlying" : 12
    }, {
      "fields" : [ {
        "name" : "fn",
        "type" : 9
      } ],
      "name" : "struct{fn uintptr}",
      "type" : "Struct",
      "underlying" : 12
    }, {
      "elem" : 14,
      "name" : "*runtime._panic",
      "type" : "Pointer",
      "underlying" : 13
    }, {
      "local-name" : "_panic",
      "name" : "runtime._panic",
      "package" : 0,
      "type" : "Named",
      "underlying" : 15
    }, {
      "fields" : [ {
        "name" : "argp",
        "type" : 16
      }, {
        "name" : "arg",
        "type" : 2
      }, {
        "name" : "link",
        "type" : 13
      }, {
        "name" : "pc",
        "type" : 9
      }, {
        "name" : "sp",
        "type" : 16
      }, {
        "name" : "recovered",
        "type" : 8
      }, {
        "name" : "aborted",
        "type" : 8
      }, {
        "name" : "goexit",
        "type" : 8
      } ],
      "name" : "struct{argp unsafe.Pointer; arg interface{}; link *runtime._panic; pc uintptr; sp unsafe.Pointer; recovered bool; aborted bool; goexit bool}",
      "type" : "Struct",
      "underlying" : 15
    }, {
      "local-name" : "Pointer",
      "name" : "unsafe.Pointer",
      "package" : 1,
      "type" : "Basic",
      "underlying" : 16
    }, {
      "name" : "uint32",
      "type" : "Basic",
      "underlying" : 17
    }, {
      "elem" : 19,
      "name" : "*runtime.g",
      "type" : "Pointer",
      "underlying" : 18
    }, {
      "local-name" : "g",
      "name" : "runtime.g",
      "package" : 0,
      "type" : "Named",
      "underlying" : 20
    }, {
      "fields" : [ {
        "name" : "stack",
        "type" : 21
      }, {
        "name" : "stackguard0",
        "type" : 9
      }, {
        "name" : "stackguard1",
        "type" : 9
      }, {
        "name" : "_panic",
        "type" : 13
      }, {
        "name" : "_defer",
        "type" : 4
      }, {
        "name" : "m",
        "type" : 23
      }, {
        "name" : "sched",
        "type" : 26
      }, {
        "name" : "syscallsp",
        "type" : 9
      }, {
        "name" : "syscallpc",
        "type" : 9
      }, {
        "name" : "stktopsp",
        "type" : 9
      }, {
        "name" : "param",
        "type" : 16
      }, {
        "name" : "atomicstatus",
        "type" : 17
      }, {
        "name" : "stackLock",
        "type" : 17
      }, {
        "name" : "goid",
        "type" : 38
      }, {
        "name" : "schedlink",
        "type" : 28
      }, {
        "name" : "waitsince",
        "type" : 38
      }, {
        "name" : "waitreason",
        "type" : 84
      }, {
        "name" : "preempt",
        "type" : 8
      }, {
        "name" : "preemptStop",
        "type" : 8
      }, {
        "name" : "preemptShrink",
        "type" : 8
      }, {
        "name" : "asyncSafePoint",
        "type" : 8
      }, {
        "name" : "paniconfault",
        "type" : 8
      }, {
        "name" : "gcscandone",
        "type" : 8
      }, {
        "name" : "throwsplit",
        "type" : 8
      }, {
        "name" : "activeStackChans",
        "type" : 8
      }, {
        "name" : "raceignore",
        "type" : 40
      }, {
        "name" : "sysblocktraced",
        "type" : 8
      }, {
        "name" : "sysexitticks",
        "type" : 38
      }, {
        "name" : "traceseq",
        "type" : 30
      }, {
        "name" : "tracelastp",
        "type" : 37
      }, {
        "name" : "lockedm",
        "type" : 47
      }, {
        "name" : "sig",
        "type" : 17
      }, {
        "name" : "writebuf",
        "type" : 85
      }, {
        "name" : "sigcode0",
        "type" : 9
      }, {
        "name" : "sigcode1",
        "type" : 9
      }, {
        "name" : "sigpc",
        "type" : 9
      }, {
        "name" : "gopc",
        "type" : 9
      }, {
        "name" : "ancestors",
        "type" : 86
      }, {
        "name" : "startpc",
        "type" : 9
      }, {
        "name" : "racectx",
        "type" : 9
      }, {
        "name" : "waiting",
        "type" : 91
      }, {
        "name" : "cgoCtxt",
        "type" : 90
      }, {
        "name" : "labels",
        "type" : 16
      }, {
        "name" : "timer",
        "type" : 109
      }, {
        "name" : "selectDone",
        "type" : 17
      }, {
        "name" : "gcAssistBytes",
        "type" : 38
      } ],
      "name" : "struct{stack runtime.stack; stackguard0 uintptr; stackguard1 uintptr; _panic *runtime._panic; _defer *runtime._defer; m *runtime.m; sched runtime.gobuf; syscallsp uintptr; syscallpc uintptr; stktopsp uintptr; param unsafe.Pointer; atomicstatus uint32; stackLock uint32; goid int64; schedlink runtime.guintptr; waitsince int64; waitreason runtime.waitReason; preempt bool; preemptStop bool; preemptShrink bool; asyncSafePoint bool; paniconfault bool; gcscandone bool; throwsplit bool; activeStackChans bool; raceignore int8; sysblocktraced bool; sysexitticks int64; traceseq uint64; tracelastp runtime.puintptr; lockedm runtime.muintptr; sig uint32; writebuf []byte; sigcode0 uintptr; sigcode1 uintptr; sigpc uintptr; gopc uintptr; ancestors *[]runtime.ancestorInfo; startpc uintptr; racectx uintptr; waiting *runtime.sudog; cgoCtxt []uintptr; labels unsafe.Pointer; timer *runtime.timer; selectDone uint32; gcAssistBytes int64}",
      "type" : "Struct",
      "underlying" : 20
    }, {
      "local-name" : "stack",
      "name" : "runtime.stack",
      "package" : 0,
      "type" : "Named",
      "underlying" : 22
    }, {
      "fields" : [ {
        "name" : "lo",
        "type" : 9
      }, {
        "name" : "hi",
        "type" : 9
      } ],
      "name" : "struct{lo uintptr; hi uintptr}",
      "type" : "Struct",
      "underlying" : 22
    }, {
      "elem" : 24,
      "name" : "*runtime.m",
      "type" : "Pointer",
      "underlying" : 23
    }, {
      "local-name" : "m",
      "name" : "runtime.m",
      "package" : 0,
      "type" : "Named",
      "underlying" : 25
    }, {
      "fields" : [ {
        "name" : "g0",
        "type" : 18
      }, {
        "name" : "morebuf",
        "type" : 26
      }, {
        "name" : "divmod",
        "type" : 17
      }, {
        "name" : "procid",
        "type" : 30
      }, {
        "name" : "gsignal",
        "type" : 18
      }, {
        "name" : "goSigStack",
        "type" : 31
      }, {
        "name" : "sigmask",
        "type" : 33
      }, {
        "name" : "tls",
        "type" : 35
      }, {
        "name" : "mstartfn",
        "type" : 36
      }, {
        "name" : "curg",
        "type" : 18
      }, {
        "name" : "caughtsig",
        "type" : 28
      }, {
        "name" : "p",
        "type" : 37
      }, {
        "name" : "nextp",
        "type" : 37
      }, {
        "name" : "oldp",
        "type" : 37
      }, {
        "name" : "id",
        "type" : 38
      }, {
        "name" : "mallocing",
        "type" : 7
      }, {
        "name" : "throwing",
        "type" : 7
      }, {
        "name" : "preemptoff",
        "type" : 39
      }, {
        "name" : "locks",
        "type" : 7
      }, {
        "name" : "dying",
        "type" : 7
      }, {
        "name" : "profilehz",
        "type" : 7
      }, {
        "name" : "spinning",
        "type" : 8
      }, {
        "name" : "blocked",
        "type" : 8
      }, {
        "name" : "newSigstack",
        "type" : 8
      }, {
        "name" : "printlock",
        "type" : 40
      }, {
        "name" : "incgo",
        "type" : 8
      }, {
        "name" : "freeWait",
        "type" : 17
      }, {
        "name" : "fastrand",
        "type" : 34
      }, {
        "name" : "needextram",
        "type" : 8
      }, {
        "name" : "traceback",
        "type" : 41
      }, {
        "name" : "ncgocall",
        "type" : 30
      }, {
        "name" : "ncgo",
        "type" : 7
      }, {
        "name" : "cgoCallersUse",
        "type" : 17
      }, {
        "name" : "cgoCallers",
        "type" : 42
      }, {
        "name" : "park",
        "type" : 45
      }, {
        "name" : "alllink",
        "type" : 23
      }, {
        "name" : "schedlink",
        "type" : 47
      }, {
        "name" : "mcache",
        "type" : 48
      }, {
        "name" : "lockedg",
        "type" : 28
      }, {
        "name" : "createstack",
        "type" : 44
      }, {
        "name" : "lockedExt",
        "type" : 17
      }, {
        "name" : "lockedInt",
        "type" : 17
      }, {
        "name" : "nextwaitm",
        "type" : 47
      }, {
        "name" : "waitunlockf",
        "type" : 75
      }, {
        "name" : "waitlock",
        "type" : 16
      }, {
        "name" : "waittraceev",
        "type" : 70
      }, {
        "name" : "waittraceskip",
        "type" : 78
      }, {
        "name" : "startingtrace",
        "type" : 8
      }, {
        "name" : "syscalltick",
        "type" : 17
      }, {
        "name" : "freelink",
        "type" : 23
      }, {
        "name" : "libcall",
        "type" : 79
      }, {
        "name" : "libcallpc",
        "type" : 9
      }, {
        "name" : "libcallsp",
        "type" : 9
      }, {
        "name" : "libcallg",
        "type" : 28
      }, {
        "name" : "syscall",
        "type" : 79
      }, {
        "name" : "vdsoSP",
        "type" : 9
      }, {
        "name" : "vdsoPC",
        "type" : 9
      }, {
        "name" : "preemptGen",
        "type" : 17
      }, {
        "name" : "signalPending",
        "type" : 17
      }, {
        "name" : "dlogPerM",
        "type" : 81
      }, {
        "name" : "mOS",
        "type" : 83
      } ],
      "name" : "struct{g0 *runtime.g; morebuf runtime.gobuf; divmod uint32; procid uint64; gsignal *runtime.g; goSigStack runtime.gsignalStack; sigmask runtime.sigset; tls [6]uintptr; mstartfn func(); curg *runtime.g; caughtsig runtime.guintptr; p runtime.puintptr; nextp runtime.puintptr; oldp runtime.puintptr; id int64; mallocing int32; throwing int32; preemptoff string; locks int32; dying int32; profilehz int32; spinning bool; blocked bool; newSigstack bool; printlock int8; incgo bool; freeWait uint32; fastrand [2]uint32; needextram bool; traceback uint8; ncgocall uint64; ncgo int32; cgoCallersUse uint32; cgoCallers *runtime.cgoCallers; park runtime.note; alllink *runtime.m; schedlink runtime.muintptr; mcache *runtime.mcache; lockedg runtime.guintptr; createstack [32]uintptr; lockedExt uint32; lockedInt uint32; nextwaitm runtime.muintptr; waitunlockf func(*runtime.g, unsafe.Pointer) bool; waitlock unsafe.Pointer; waittraceev byte; waittraceskip int; startingtrace bool; syscalltick uint32; freelink *runtime.m; libcall runtime.libcall; libcallpc uintptr; libcallsp uintptr; libcallg runtime.guintptr; syscall runtime.libcall; vdsoSP uintptr; vdsoPC uintptr; preemptGen uint32; signalPending uint32; runtime.dlogPerM; runtime.mOS}",
      "type" : "Struct",
      "underlying" : 25
    }, {
      "local-name" : "gobuf",
      "name" : "runtime.gobuf",
      "package" : 0,
      "type" : "Named",
      "underlying" : 27
    }, {
      "fields" : [ {
        "name" : "sp",
        "type" : 9
      }, {
        "name" : "pc",
        "type" : 9
      }, {
        "name" : "g",
        "type" : 28
      }, {
        "name" : "ctxt",
        "type" : 16
      }, {
        "name" : "ret",
        "type" : 29
      }, {
        "name" : "lr",
        "type" : 9
      }, {
        "name" : "bp",
        "type" : 9
      } ],
      "name" : "struct{sp uintptr; pc uintptr; g runtime.guintptr; ctxt unsafe.Pointer; ret runtime/internal/sys.Uintreg; lr uintptr; bp uintptr}",
      "type" : "Struct",
      "underlying" : 27
    }, {
      "local-name" : "guintptr",
      "name" : "runtime.guintptr",
      "package" : 0,
      "type" : "Named",
      "underlying" : 9
    }, {
      "local-name" : "Uintreg",
      "name" : "runtime/internal/sys.Uintreg",
      "package" : 2,
      "type" : "Named",
      "underlying" : 30
    }, {
      "name" : "uint64",
      "type" : "Basic",
      "underlying" : 30
    }, {
      "local-name" : "gsignalStack",
      "name" : "runtime.gsignalStack",
      "package" : 0,
      "type" : "Named",
      "underlying" : 32
    }, {
      "fields" : [ {
        "name" : "stack",
        "type" : 21
      }, {
        "name" : "stackguard0",
        "type" : 9
      }, {
        "name" : "stackguard1",
        "type" : 9
      }, {
        "name" : "stktopsp",
        "type" : 9
      } ],
      "name" : "struct{stack runtime.stack; stackguard0 uintptr; stackguard1 uintptr; stktopsp uintptr}",
      "type" : "Struct",
      "underlying" : 32
    }, {
      "local-name" : "sigset",
      "name" : "runtime.sigset",
      "package" : 0,
      "type" : "Named",
      "underlying" : 34
    }, {
      "elem" : 17,
      "name" : "[2]uint32",
      "type" : "Array",
      "underlying" : 34
    }, {
      "elem" : 9,
      "name" : "[6]uintptr",
      "type" : "Array",
      "underlying" : 35
    }, {
      "name" : "func()",
      "params" : 3,
      "recv" : -1,
      "results" : 3,
      "type" : "Signature",
      "underlying" : 36,
      "variadic" : false
    }, {
      "local-name" : "puintptr",
      "name" : "runtime.puintptr",
      "package" : 0,
      "type" : "Named",
      "underlying" : 9
    }, {
      "name" : "int64",
      "type" : "Basic",
      "underlying" : 38
    }, {
      "name" : "string",
      "type" : "Basic",
      "underlying" : 39
    }, {
      "name" : "int8",
      "type" : "Basic",
      "underlying" : 40
    }, {
      "name" : "uint8",
      "type" : "Basic",
      "underlying" : 41
    }, {
      "elem" : 43,
      "name" : "*runtime.cgoCallers",
      "type" : "Pointer",
      "underlying" : 42
    }, {
      "local-name" : "cgoCallers",
      "name" : "runtime.cgoCallers",
      "package" : 0,
      "type" : "Named",
      "underlying" : 44
    }, {
      "elem" : 9,
      "name" : "[32]uintptr",
      "type" : "Array",
      "underlying" : 44
    }, {
      "local-name" : "note",
      "name" : "runtime.note",
      "package" : 0,
      "type" : "Named",
      "underlying" : 46
    }, {
      "fields" : [ {
        "name" : "key",
        "type" : 9
      } ],
      "name" : "struct{key uintptr}",
      "type" : "Struct",
      "underlying" : 46
    }, {
      "local-name" : "muintptr",
      "name" : "runtime.muintptr",
      "package" : 0,
      "type" : "Named",
      "underlying" : 9
    }, {
      "elem" : 49,
      "name" : "*runtime.mcache",
      "type" : "Pointer",
      "underlying" : 48
    }, {
      "local-name" : "mcache",
      "name" : "runtime.mcache",
      "package" : 0,
      "type" : "Named",
      "underlying" : 50
    }, {
      "fields" : [ {
        "name" : "next_sample",
        "type" : 9
      }, {
        "name" : "local_scan",
        "type" : 9
      }, {
        "name" : "tiny",
        "type" : 9
      }, {
        "name" : "tinyoffset",
        "type" : 9
      }, {
        "name" : "local_tinyallocs",
        "type" : 9
      }, {
        "name" : "alloc",
        "type" : 51
      }, {
        "name" : "stackcache",
        "type" : 71
      }, {
        "name" : "local_largefree",
        "type" : 9
      }, {
        "name" : "local_nlargefree",
        "type" : 9
      }, {
        "name" : "local_nsmallfree",
        "type" : 74
      }, {
        "name" : "flushGen",
        "type" : 17
      } ],
      "name" : "struct{next_sample uintptr; local_scan uintptr; tiny uintptr; tinyoffset uintptr; local_tinyallocs uintptr; alloc [134]*runtime.mspan; stackcache [4]runtime.stackfreelist; local_largefree uintptr; local_nlargefree uintptr; local_nsmallfree [67]uintptr; flushGen uint32}",
      "type" : "Struct",
      "underlying" : 50
    }, {
      "elem" : 52,
      "name" : "[134]*runtime.mspan",
      "type" : "Array",
      "underlying" : 51
    }, {
      "elem" : 53,
      "name" : "*runtime.mspan",
      "type" : "Pointer",
      "underlying" : 52
    }, {
      "local-name" : "mspan",
      "name" : "runtime.mspan",
      "package" : 0,
      "type" : "Named",
      "underlying" : 54
    }, {
      "fields" : [ {
        "name" : "next",
        "type" : 52
      }, {
        "name" : "prev",
        "type" : 52
      }, {
        "name" : "list",
        "type" : 55
      }, {
        "name" : "startAddr",
        "type" : 9
      }, {
        "name" : "npages",
        "type" : 9
      }, {
        "name" : "manualFreeList",
        "type" : 58
      }, {
        "name" : "freeindex",
        "type" : 9
      }, {
        "name" : "nelems",
        "type" : 9
      }, {
        "name" : "allocCache",
        "type" : 30
      }, {
        "name" : "allocBits",
        "type" : 59
      }, {
        "name" : "gcmarkBits",
        "type" : 59
      }, {
        "name" : "sweepgen",
        "type" : 17
      }, {
        "name" : "divMul",
        "type" : 61
      }, {
        "name" : "baseMask",
        "type" : 61
      }, {
        "name" : "allocCount",
        "type" : 61
      }, {
        "name" : "spanclass",
        "type" : 62
      }, {
        "name" : "state",
        "type" : 63
      }, {
        "name" : "needzero",
        "type" : 41
      }, {
        "name" : "divShift",
        "type" : 41
      }, {
        "name" : "divShift2",
        "type" : 41
      }, {
        "name" : "elemsize",
        "type" : 9
      }, {
        "name" : "limit",
        "type" : 9
      }, {
        "name" : "speciallock",
        "type" : 66
      }, {
        "name" : "specials",
        "type" : 67
      } ],
      "name" : "struct{next *runtime.mspan; prev *runtime.mspan; list *runtime.mSpanList; startAddr uintptr; npages uintptr; manualFreeList runtime.gclinkptr; freeindex uintptr; nelems uintptr; allocCache uint64; allocBits *runtime.gcBits; gcmarkBits *runtime.gcBits; sweepgen uint32; divMul uint16; baseMask uint16; allocCount uint16; spanclass runtime.spanClass; state runtime.mSpanStateBox; needzero uint8; divShift uint8; divShift2 uint8; elemsize uintptr; limit uintptr; speciallock runtime.mutex; specials *runtime.special}",
      "type" : "Struct",
      "underlying" : 54
    }, {
      "elem" : 56,
      "name" : "*runtime.mSpanList",
      "type" : "Pointer",
      "underlying" : 55
    }, {
      "local-name" : "mSpanList",
      "name" : "runtime.mSpanList",
      "package" : 0,
      "type" : "Named",
      "underlying" : 57
    }, {
      "fields" : [ {
        "name" : "first",
        "type" : 52
      }, {
        "name" : "last",
        "type" : 52
      } ],
      "name" : "struct{first *runtime.mspan; last *runtime.mspan}",
      "type" : "Struct",
      "underlying" : 57
    }, {
      "local-name" : "gclinkptr",
      "name" : "runtime.gclinkptr",
      "package" : 0,
      "type" : "Named",
      "underlying" : 9
    }, {
      "elem" : 60,
      "name" : "*runtime.gcBits",
      "type" : "Pointer",
      "underlying" : 59
    }, {
      "local-name" : "gcBits",
      "name" : "runtime.gcBits",
      "package" : 0,
      "type" : "Named",
      "underlying" : 41
    }, {
      "name" : "uint16",
      "type" : "Basic",
      "underlying" : 61
    }, {
      "local-name" : "spanClass",
      "name" : "runtime.spanClass",
      "package" : 0,
      "type" : "Named",
      "underlying" : 41
    }, {
      "local-name" : "mSpanStateBox",
      "name" : "runtime.mSpanStateBox",
      "package" : 0,
      "type" : "Named",
      "underlying" : 64
    }, {
      "fields" : [ {
        "name" : "s",
        "type" : 65
      } ],
      "name" : "struct{s runtime.mSpanState}",
      "type" : "Struct",
      "underlying" : 64
    }, {
      "local-name" : "mSpanState",
      "name" : "runtime.mSpanState",
      "package" : 0,
      "type" : "Named",
      "underlying" : 41
    }, {
      "local-name" : "mutex",
      "name" : "runtime.mutex",
      "package" : 0,
      "type" : "Named",
      "underlying" : 46
    }, {
      "elem" : 68,
      "name" : "*runtime.special",
      "type" : "Pointer",
      "underlying" : 67
    }, {
      "local-name" : "special",
      "name" : "runtime.special",
      "package" : 0,
      "type" : "Named",
      "underlying" : 69
    }, {
      "fields" : [ {
        "name" : "next",
        "type" : 67
      }, {
        "name" : "offset",
        "type" : 61
      }, {
        "name" : "kind",
        "type" : 70
      } ],
      "name" : "struct{next *runtime.special; offset uint16; kind byte}",
      "type" : "Struct",
      "underlying" : 69
    }, {
      "name" : "byte",
      "type" : "Basic",
      "underlying" : 70
    }, {
      "elem" : 72,
      "name" : "[4]runtime.stackfreelist",
      "type" : "Array",
      "underlying" : 71
    }, {
      "local-name" : "stackfreelist",
      "name" : "runtime.stackfreelist",
      "package" : 0,
      "type" : "Named",
      "underlying" : 73
    }, {
      "fields" : [ {
        "name" : "list",
        "type" : 58
      }, {
        "name" : "size",
        "type" : 9
      } ],
      "name" : "struct{list runtime.gclinkptr; size uintptr}",
      "type" : "Struct",
      "underlying" : 73
    }, {
      "elem" : 9,
      "name" : "[67]uintptr",
      "type" : "Array",
      "underlying" : 74
    }, {
      "name" : "func(*runtime.g, unsafe.Pointer) bool",
      "params" : 76,
      "recv" : -1,
      "results" : 77,
      "type" : "Signature",
      "underlying" : 75,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 18
      }, {
        "name" : "",
        "type" : 16
      } ],
      "name" : "(*runtime.g, unsafe.Pointer)",
      "type" : "Tuple",
      "underlying" : 76
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 8
      } ],
      "name" : "(bool)",
      "type" : "Tuple",
      "underlying" : 77
    }, {
      "name" : "int",
      "type" : "Basic",
      "underlying" : 78
    }, {
      "local-name" : "libcall",
      "name" : "runtime.libcall",
      "package" : 0,
      "type" : "Named",
      "underlying" : 80
    }, {
      "fields" : [ {
        "name" : "fn",
        "type" : 9
      }, {
        "name" : "n",
        "type" : 9
      }, {
        "name" : "args",
        "type" : 9
      }, {
        "name" : "r1",
        "type" : 9
      }, {
        "name" : "r2",
        "type" : 9
      }, {
        "name" : "err",
        "type" : 9
      } ],
      "name" : "struct{fn uintptr; n uintptr; args uintptr; r1 uintptr; r2 uintptr; err uintptr}",
      "type" : "Struct",
      "underlying" : 80
    }, {
      "local-name" : "dlogPerM",
      "name" : "runtime.dlogPerM",
      "package" : 0,
      "type" : "Named",
      "underlying" : 82
    }, {
      "fields" : [ ],
      "name" : "struct{}",
      "type" : "Struct",
      "underlying" : 82
    }, {
      "local-name" : "mOS",
      "name" : "runtime.mOS",
      "package" : 0,
      "type" : "Named",
      "underlying" : 82
    }, {
      "local-name" : "waitReason",
      "name" : "runtime.waitReason",
      "package" : 0,
      "type" : "Named",
      "underlying" : 41
    }, {
      "elem" : 70,
      "name" : "[]byte",
      "type" : "Slice",
      "underlying" : 85
    }, {
      "elem" : 87,
      "name" : "*[]runtime.ancestorInfo",
      "type" : "Pointer",
      "underlying" : 86
    }, {
      "elem" : 88,
      "name" : "[]runtime.ancestorInfo",
      "type" : "Slice",
      "underlying" : 87
    }, {
      "local-name" : "ancestorInfo",
      "name" : "runtime.ancestorInfo",
      "package" : 0,
      "type" : "Named",
      "underlying" : 89
    }, {
      "fields" : [ {
        "name" : "pcs",
        "type" : 90
      }, {
        "name" : "goid",
        "type" : 38
      }, {
        "name" : "gopc",
        "type" : 9
      } ],
      "name" : "struct{pcs []uintptr; goid int64; gopc uintptr}",
      "type" : "Struct",
      "underlying" : 89
    }, {
      "elem" : 9,
      "name" : "[]uintptr",
      "type" : "Slice",
      "underlying" : 90
    }, {
      "elem" : 92,
      "name" : "*runtime.sudog",
      "type" : "Pointer",
      "underlying" : 91
    }, {
      "local-name" : "sudog",
      "name" : "runtime.sudog",
      "package" : 0,
      "type" : "Named",
      "underlying" : 93
    }, {
      "fields" : [ {
        "name" : "g",
        "type" : 18
      }, {
        "name" : "isSelect",
        "type" : 8
      }, {
        "name" : "next",
        "type" : 91
      }, {
        "name" : "prev",
        "type" : 91
      }, {
        "name" : "elem",
        "type" : 16
      }, {
        "name" : "acquiretime",
        "type" : 38
      }, {
        "name" : "releasetime",
        "type" : 38
      }, {
        "name" : "ticket",
        "type" : 17
      }, {
        "name" : "parent",
        "type" : 91
      }, {
        "name" : "waitlink",
        "type" : 91
      }, {
        "name" : "waittail",
        "type" : 91
      }, {
        "name" : "c",
        "type" : 94
      } ],
      "name" : "struct{g *runtime.g; isSelect bool; next *runtime.sudog; prev *runtime.sudog; elem unsafe.Pointer; acquiretime int64; releasetime int64; ticket uint32; parent *runtime.sudog; waitlink *runtime.sudog; waittail *runtime.sudog; c *runtime.hchan}",
      "type" : "Struct",
      "underlying" : 93
    }, {
      "elem" : 95,
      "name" : "*runtime.hchan",
      "type" : "Pointer",
      "underlying" : 94
    }, {
      "local-name" : "hchan",
      "name" : "runtime.hchan",
      "package" : 0,
      "type" : "Named",
      "underlying" : 96
    }, {
      "fields" : [ {
        "name" : "qcount",
        "type" : 97
      }, {
        "name" : "dataqsiz",
        "type" : 97
      }, {
        "name" : "buf",
        "type" : 16
      }, {
        "name" : "elemsize",
        "type" : 61
      }, {
        "name" : "closed",
        "type" : 17
      }, {
        "name" : "elemtype",
        "type" : 98
      }, {
        "name" : "sendx",
        "type" : 97
      }, {
        "name" : "recvx",
        "type" : 97
      }, {
        "name" : "recvq",
        "type" : 107
      }, {
        "name" : "sendq",
        "type" : 107
      }, {
        "name" : "lock",
        "type" : 66
      } ],
      "name" : "struct{qcount uint; dataqsiz uint; buf unsafe.Pointer; elemsize uint16; closed uint32; elemtype *runtime._type; sendx uint; recvx uint; recvq runtime.waitq; sendq runtime.waitq; lock runtime.mutex}",
      "type" : "Struct",
      "underlying" : 96
    }, {
      "name" : "uint",
      "type" : "Basic",
      "underlying" : 97
    }, {
      "elem" : 99,
      "name" : "*runtime._type",
      "type" : "Pointer",
      "underlying" : 98
    }, {
      "local-name" : "_type",
      "name" : "runtime._type",
      "package" : 0,
      "type" : "Named",
      "underlying" : 100
    }, {
      "fields" : [ {
        "name" : "size",
        "type" : 9
      }, {
        "name" : "ptrdata",
        "type" : 9
      }, {
        "name" : "hash",
        "type" : 17
      }, {
        "name" : "tflag",
        "type" : 101
      }, {
        "name" : "align",
        "type" : 41
      }, {
        "name" : "fieldAlign",
        "type" : 41
      }, {
        "name" : "kind",
        "type" : 41
      }, {
        "name" : "equal",
        "type" : 102
      }, {
        "name" : "gcdata",
        "type" : 104
      }, {
        "name" : "str",
        "type" : 105
      }, {
        "name" : "ptrToThis",
        "type" : 106
      } ],
      "name" : "struct{size uintptr; ptrdata uintptr; hash uint32; tflag runtime.tflag; align uint8; fieldAlign uint8; kind uint8; equal func(unsafe.Pointer, unsafe.Pointer) bool; gcdata *byte; str runtime.nameOff; ptrToThis runtime.typeOff}",
      "type" : "Struct",
      "underlying" : 100
    }, {
      "local-name" : "tflag",
      "name" : "runtime.tflag",
      "package" : 0,
      "type" : "Named",
      "underlying" : 41
    }, {
      "name" : "func(unsafe.Pointer, unsafe.Pointer) bool",
      "params" : 103,
      "recv" : -1,
      "results" : 77,
      "type" : "Signature",
      "underlying" : 102,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 16
      }, {
        "name" : "",
        "type" : 16
      } ],
      "name" : "(unsafe.Pointer, unsafe.Pointer)",
      "type" : "Tuple",
      "underlying" : 103
    }, {
      "elem" : 70,
      "name" : "*byte",
      "type" : "Pointer",
      "underlying" : 104
    }, {
      "local-name" : "nameOff",
      "name" : "runtime.nameOff",
      "package" : 0,
      "type" : "Named",
      "underlying" : 7
    }, {
      "local-name" : "typeOff",
      "name" : "runtime.typeOff",
      "package" : 0,
      "type" : "Named",
      "underlying" : 7
    }, {
      "local-name" : "waitq",
      "name" : "runtime.waitq",
      "package" : 0,
      "type" : "Named",
      "underlying" : 108
    }, {
      "fields" : [ {
        "name" : "first",
        "type" : 91
      }, {
        "name" : "last",
        "type" : 91
      } ],
      "name" : "struct{first *runtime.sudog; last *runtime.sudog}",
      "type" : "Struct",
      "underlying" : 108
    }, {
      "elem" : 110,
      "name" : "*runtime.timer",
      "type" : "Pointer",
      "underlying" : 109
    }, {
      "local-name" : "timer",
      "name" : "runtime.timer",
      "package" : 0,
      "type" : "Named",
      "underlying" : 111
    }, {
      "fields" : [ {
        "name" : "pp",
        "type" : 37
      }, {
        "name" : "when",
        "type" : 38
      }, {
        "name" : "period",
        "type" : 38
      }, {
        "name" : "f",
        "type" : 112
      }, {
        "name" : "arg",
        "type" : 2
      }, {
        "name" : "seq",
        "type" : 9
      }, {
        "name" : "nextwhen",
        "type" : 38
      }, {
        "name" : "status",
        "type" : 17
      } ],
      "name" : "struct{pp runtime.puintptr; when int64; period int64; f func(interface{}, uintptr); arg interface{}; seq uintptr; nextwhen int64; status uint32}",
      "type" : "Struct",
      "underlying" : 111
    }, {
      "name" : "func(interface{}, uintptr)",
      "params" : 113,
      "recv" : -1,
      "results" : 3,
      "type" : "Signature",
      "underlying" : 112,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 2
      }, {
        "name" : "",
        "type" : 9
      } ],
      "name" : "(interface{}, uintptr)",
      "type" : "Tuple",
      "underlying" : 113
    }, {
      "name" : "func() *runtime.g",
      "params" : 3,
      "recv" : -1,
      "results" : 115,
      "type" : "Signature",
      "underlying" : 114,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 18
      } ],
      "name" : "(*runtime.g)",
      "type" : "Tuple",
      "underlying" : 115
    }, {
      "name" : "untyped bool",
      "type" : "Basic",
      "underlying" : 116
    }, {
      "name" : "func(string)",
      "params" : 118,
      "recv" : -1,
      "results" : 3,
      "type" : "Signature",
      "underlying" : 117,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 39
      } ],
      "name" : "(string)",
      "type" : "Tuple",
      "underlying" : 118
    }, {
      "name" : "func(i interface{})",
      "params" : 120,
      "recv" : -1,
      "results" : 3,
      "type" : "Signature",
      "underlying" : 119,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "i",
        "type" : 2
      } ],
      "name" : "(i interface{})",
      "type" : "Tuple",
      "underlying" : 120
    }, {
      "name" : "func(s string)",
      "params" : 122,
      "recv" : -1,
      "results" : 3,
      "type" : "Signature",
      "underlying" : 121,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "s",
        "type" : 39
      } ],
      "name" : "(s string)",
      "type" : "Tuple",
      "underlying" : 122
    }, {
      "name" : "func(p unsafe.Pointer) unsafe.Pointer",
      "params" : 124,
      "recv" : -1,
      "results" : 125,
      "type" : "Signature",
      "underlying" : 123,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "p",
        "type" : 16
      } ],
      "name" : "(p unsafe.Pointer)",
      "type" : "Tuple",
      "underlying" : 124
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 16
      } ],
      "name" : "(unsafe.Pointer)",
      "type" : "Tuple",
      "underlying" : 125
    }, {
      "name" : "func(ptr *uint32, delta int32) uint32",
      "params" : 127,
      "recv" : -1,
      "results" : 129,
      "type" : "Signature",
      "underlying" : 126,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "ptr",
        "type" : 128
      }, {
        "name" : "delta",
        "type" : 7
      } ],
      "name" : "(ptr *uint32, delta int32)",
      "type" : "Tuple",
      "underlying" : 127
    }, {
      "elem" : 17,
      "name" : "*uint32",
      "type" : "Pointer",
      "underlying" : 128
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 17
      } ],
      "name" : "(uint32)",
      "type" : "Tuple",
      "underlying" : 129
    }, {
      "name" : "func(gp *runtime.g, pc uintptr, sp unsafe.Pointer)",
      "params" : 131,
      "recv" : -1,
      "results" : 3,
      "type" : "Signature",
      "underlying" : 130,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "gp",
        "type" : 18
      }, {
        "name" : "pc",
        "type" : 9
      }, {
        "name" : "sp",
        "type" : 16
      } ],
      "name" : "(gp *runtime.g, pc uintptr, sp unsafe.Pointer)",
      "type" : "Tuple",
      "underlying" : 131
    }, {
      "name" : "func() uintptr",
      "params" : 3,
      "recv" : -1,
      "results" : 133,
      "type" : "Signature",
      "underlying" : 132,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 9
      } ],
      "name" : "(uintptr)",
      "type" : "Tuple",
      "underlying" : 133
    }, {
      "name" : "untyped nil",
      "type" : "Basic",
      "underlying" : 134
    }, {
      "name" : "func(d *runtime._defer)",
      "params" : 136,
      "recv" : -1,
      "results" : 3,
      "type" : "Signature",
      "underlying" : 135,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "d",
        "type" : 4
      } ],
      "name" : "(d *runtime._defer)",
      "type" : "Tuple",
      "underlying" : 136
    }, {
      "name" : "func(gp *runtime.g, d *runtime._defer) bool",
      "params" : 138,
      "recv" : -1,
      "results" : 77,
      "type" : "Signature",
      "underlying" : 137,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "gp",
        "type" : 18
      }, {
        "name" : "d",
        "type" : 4
      } ],
      "name" : "(gp *runtime.g, d *runtime._defer)",
      "type" : "Tuple",
      "underlying" : 138
    }, {
      "name" : "func(x int) uintptr",
      "params" : 140,
      "recv" : -1,
      "results" : 133,
      "type" : "Signature",
      "underlying" : 139,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "x",
        "type" : 78
      } ],
      "name" : "(x int)",
      "type" : "Tuple",
      "underlying" : 140
    }, {
      "name" : "func(argtype *runtime._type, fn unsafe.Pointer, arg unsafe.Pointer, argsize uint32, retoffset uint32)",
      "params" : 142,
      "recv" : -1,
      "results" : 3,
      "type" : "Signature",
      "underlying" : 141,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "argtype",
        "type" : 98
      }, {
        "name" : "fn",
        "type" : 16
      }, {
        "name" : "arg",
        "type" : 16
      }, {
        "name" : "argsize",
        "type" : 17
      }, {
        "name" : "retoffset",
        "type" : 17
      } ],
      "name" : "(argtype *runtime._type, fn unsafe.Pointer, arg unsafe.Pointer, argsize uint32, retoffset uint32)",
      "type" : "Tuple",
      "underlying" : 142
    }, {
      "name" : "func(d *runtime._defer) unsafe.Pointer",
      "params" : 136,
      "recv" : -1,
      "results" : 125,
      "type" : "Signature",
      "underlying" : 143,
      "variadic" : false
    }, {
      "name" : "func(fn func(*runtime.g))",
      "params" : 145,
      "recv" : -1,
      "results" : 3,
      "type" : "Signature",
      "underlying" : 144,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "fn",
        "type" : 146
      } ],
      "name" : "(fn func(*runtime.g))",
      "type" : "Tuple",
      "underlying" : 145
    }, {
      "name" : "func(*runtime.g)",
      "params" : 115,
      "recv" : -1,
      "results" : 3,
      "type" : "Signature",
      "underlying" : 146,
      "variadic" : false
    }, {
      "name" : "func(gp *runtime.g)",
      "params" : 148,
      "recv" : -1,
      "results" : 3,
      "type" : "Signature",
      "underlying" : 147,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "gp",
        "type" : 18
      } ],
      "name" : "(gp *runtime.g)",
      "type" : "Tuple",
      "underlying" : 148
    }, {
      "name" : "func(p *runtime._panic)",
      "params" : 150,
      "recv" : -1,
      "results" : 3,
      "type" : "Signature",
      "underlying" : 149,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "p",
        "type" : 13
      } ],
      "name" : "(p *runtime._panic)",
      "type" : "Tuple",
      "underlying" : 150
    }, {
      "name" : "func(msgs *runtime._panic)",
      "params" : 152,
      "recv" : -1,
      "results" : 3,
      "type" : "Signature",
      "underlying" : 151,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "msgs",
        "type" : 13
      } ],
      "name" : "(msgs *runtime._panic)",
      "type" : "Tuple",
      "underlying" : 152
    }, {
      "elem" : 78,
      "name" : "*int",
      "type" : "Pointer",
      "underlying" : 153
    } ],
    "variables" : [ {
      "name" : "e",
      "package" : 0,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "prev",
      "package" : 0,
      "type" : 4,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "runningPanicDefers",
      "package" : 0,
      "type" : 17,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "pc",
      "package" : 0,
      "type" : 9,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "sp",
      "package" : 0,
      "type" : 16,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "d",
      "package" : 0,
      "type" : 4,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "gp",
      "package" : 0,
      "type" : 18,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "m",
      "package" : 0,
      "type" : 23,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "curg",
      "package" : 0,
      "type" : 18,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "mallocing",
      "package" : 0,
      "type" : 7,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "preemptoff",
      "package" : 0,
      "type" : 39,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "locks",
      "package" : 0,
      "type" : 7,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "p",
      "package" : 0,
      "type" : 14,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "arg",
      "package" : 0,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "link",
      "package" : 0,
      "type" : 13,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "_panic",
      "package" : 0,
      "type" : 13,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "_defer",
      "package" : 0,
      "type" : 4,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "d",
      "package" : 0,
      "type" : 4,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "started",
      "package" : 0,
      "type" : 8,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "_panic",
      "package" : 0,
      "type" : 13,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "aborted",
      "package" : 0,
      "type" : 8,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "openDefer",
      "package" : 0,
      "type" : 8,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "fn",
      "package" : 0,
      "type" : 10,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "link",
      "package" : 0,
      "type" : 4,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "done",
      "package" : 0,
      "type" : 8,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "recovered",
      "package" : 0,
      "type" : 8,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "argp",
      "package" : 0,
      "type" : 16,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "siz",
      "package" : 0,
      "type" : 7,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "pc",
      "package" : 0,
      "type" : 9,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "sp",
      "package" : 0,
      "type" : 9,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "goexit",
      "package" : 0,
      "type" : 8,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "sigcode0",
      "package" : 0,
      "type" : 9,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "sp",
      "package" : 0,
      "type" : 16,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "sigcode1",
      "package" : 0,
      "type" : 9,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "pc",
      "package" : 0,
      "type" : 9,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "newd",
      "package" : 0,
      "type" : 4,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "sig",
      "package" : 0,
      "type" : 17,
      "exported" : false,
      "embedded" : false,
      "field" : true
    } ]
  },
  "go-version" : "1.14.3"
}