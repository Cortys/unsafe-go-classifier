{
  "usage" : {
    "file" : "traceback.go",
    "label1" : "cast-struct",
    "label2" : "hide-escape",
    "line" : "334",
    "module" : "std",
    "pkg" : "runtime",
    "project" : "kubernetes/kubernetes",
    "snippet" : "if !callback((*stkframe)(noescape(unsafe.Pointer(&frame))), v) {",
    "version" : "std"
  },
  "cfg" : {
    "blocks" : [ {
      "update-vars" : [ ],
      "successors" : [ 2 ],
      "in-vars" : [ 11, 5, 7, 8, 1, 3, 2, 0, 9, 6, 4 ],
      "exit" : false,
      "out-vars" : [ 11, 5, 4, 2, 0, 9, 1, 7, 3, 6, 8 ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[entry]",
      "entry" : true,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ ],
      "in-vars" : [ ],
      "exit" : true,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[exit]",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 3, 5 ],
      "in-vars" : [ 4, 2, 0, 5, 7, 3, 9, 6, 8, 1, 11 ],
      "exit" : false,
      "out-vars" : [ 1, 11, 5, 0, 8, 7, 4, 3, 2, 9, 6 ],
      "decl-vars" : [ ],
      "line-start" : 99,
      "ast" : {
        "condition" : {
          "go-type" : 165,
          "kind" : "expression",
          "left" : {
            "go-type" : 165,
            "kind" : "expression",
            "left" : {
              "go-type" : 78,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "skip",
                "variable" : 4
              }
            },
            "operator" : ">",
            "right" : {
              "go-type" : 78,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "0"
              }
            },
            "type" : "binary"
          },
          "operator" : "&&",
          "right" : {
            "go-type" : 165,
            "kind" : "expression",
            "left" : {
              "go-type" : 115,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "callback",
                "variable" : 7
              }
            },
            "operator" : "!=",
            "right" : {
              "go-type" : 166,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Nil",
                "kind" : "ident",
                "value" : "nil"
              }
            },
            "type" : "binary"
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 101,
      "code" : "if skip > 0 && callback != nil {\n\tthrow(\"gentraceback callback cannot be used with non-zero skip\")\n}",
      "entry" : false,
      "use-vars" : [ 7, 4 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 5 ],
      "in-vars" : [ 4, 2, 9, 1, 7, 3, 0, 6, 8, 11, 5 ],
      "exit" : false,
      "out-vars" : [ 0, 9, 8, 1, 5, 4, 2, 11, 7, 3, 6 ],
      "decl-vars" : [ ],
      "line-start" : 100,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 39,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "gentraceback callback cannot be used with non-zero skip"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 167,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 1,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "throw"
            }
          },
          "go-type" : 36,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 100,
      "code" : "throw(\"gentraceback callback cannot be used with non-zero skip\")",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 6, 7 ],
      "in-vars" : [ 11, 5, 7, 4, 0, 9, 12, 1, 3, 2, 6, 8 ],
      "exit" : false,
      "out-vars" : [ 1, 3, 0, 9, 6, 11, 5, 7, 4, 2, 8 ],
      "decl-vars" : [ ],
      "line-start" : 104,
      "ast" : {
        "condition" : {
          "go-type" : 165,
          "kind" : "expression",
          "left" : {
            "go-type" : 165,
            "kind" : "expression",
            "left" : {
              "go-type" : 3,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "ourg",
                "variable" : 12
              }
            },
            "operator" : "==",
            "right" : {
              "go-type" : 3,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "gp",
                "variable" : 3
              }
            },
            "type" : "binary"
          },
          "operator" : "&&",
          "right" : {
            "go-type" : 165,
            "kind" : "expression",
            "left" : {
              "go-type" : 3,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "ourg",
                "variable" : 12
              }
            },
            "operator" : "==",
            "right" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "curg",
                "variable" : 14
              },
              "go-type" : 3,
              "kind" : "expression",
              "target" : {
                "field" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "m",
                  "variable" : 13
                },
                "go-type" : 21,
                "kind" : "expression",
                "target" : {
                  "go-type" : 3,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "ourg",
                    "variable" : 12
                  }
                },
                "type" : "selector"
              },
              "type" : "selector"
            },
            "type" : "binary"
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 119,
      "code" : "if ourg := getg(); ourg == gp && ourg == ourg.m.curg {\n\n\tthrow(\"gentraceback cannot trace user goroutine on its own stack\")\n}",
      "entry" : false,
      "use-vars" : [ 12, 3 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 4 ],
      "in-vars" : [ 11, 5, 4, 2, 8, 1, 7, 3, 0, 9, 6 ],
      "exit" : false,
      "out-vars" : [ 11, 5, 7, 6, 12, 1, 3, 2, 0, 9, 8, 4 ],
      "decl-vars" : [ 12 ],
      "line-start" : 104,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "ourg"
          }
        } ],
        "right" : [ {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 169,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 2,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "getg"
            }
          },
          "go-type" : 3,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 104,
      "code" : "ourg := getg()",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 7 ],
      "in-vars" : [ 9, 6, 8, 11, 2, 0, 4, 3, 1, 5, 7 ],
      "exit" : false,
      "out-vars" : [ 4, 9, 8, 1, 11, 5, 0, 6, 7, 3, 2 ],
      "decl-vars" : [ ],
      "line-start" : 118,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 39,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "gentraceback cannot trace user goroutine on its own stack"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 167,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 1,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "throw"
            }
          },
          "go-type" : 36,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 118,
      "code" : "throw(\"gentraceback cannot trace user goroutine on its own stack\")",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 8 ],
      "in-vars" : [ 1, 11, 7, 0, 5, 4, 3, 2, 9, 6, 8 ],
      "exit" : false,
      "out-vars" : [ 5, 7, 4, 3, 2, 0, 9, 11, 15, 8, 6, 1 ],
      "decl-vars" : [ 16, 17, 15 ],
      "line-start" : 120,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "level"
          }
        }, {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "_"
          }
        }, {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "_"
          }
        } ],
        "right" : [ {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 172,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 3,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "gotraceback"
            }
          },
          "go-type" : 171,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 120,
      "code" : "level, _, _ := gotraceback()",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 9 ],
      "in-vars" : [ 15, 8, 5, 7, 4, 0, 9, 6, 1, 11, 3, 2 ],
      "exit" : false,
      "out-vars" : [ 1, 11, 7, 3, 2, 0, 9, 6, 5, 18, 4, 15, 8 ],
      "decl-vars" : [ 18 ],
      "line-start" : 122,
      "ast" : {
        "kind" : "statement",
        "target" : {
          "kind" : "decl",
          "specs" : [ {
            "comments" : [ "// Context pointer for unstarted goroutines. See issue #25897." ],
            "declared-type" : {
              "contained" : {
                "go-type" : 19,
                "kind" : "type",
                "type" : "identifier",
                "value" : {
                  "go-type" : 19,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "funcval"
                }
              },
              "go-type" : 18,
              "kind" : "type",
              "type" : "pointer"
            },
            "kind" : "spec",
            "names" : [ {
              "ident-kind" : "NoKind",
              "kind" : "ident",
              "value" : "ctxt"
            } ],
            "type" : "var",
            "values" : [ ]
          } ],
          "type" : "var"
        },
        "type" : "declaration"
      },
      "assign-vars" : [ ],
      "line-end" : 122,
      "code" : "var ctxt *funcval // Context pointer for unstarted goroutines. See issue #25897.\n",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 10, 20 ],
      "in-vars" : [ 5, 18, 2, 15, 8, 1, 7, 4, 3, 0, 9, 6, 11 ],
      "exit" : false,
      "out-vars" : [ 6, 15, 8, 18, 3, 0, 7, 4, 2, 9, 1, 11, 5 ],
      "decl-vars" : [ ],
      "line-start" : 124,
      "ast" : {
        "condition" : {
          "go-type" : 165,
          "kind" : "expression",
          "left" : {
            "go-type" : 165,
            "kind" : "expression",
            "left" : {
              "go-type" : 2,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "pc0",
                "variable" : 0
              }
            },
            "operator" : "==",
            "right" : {
              "go-type" : 2,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "18446744073709551615"
              }
            },
            "type" : "binary"
          },
          "operator" : "&&",
          "right" : {
            "go-type" : 165,
            "kind" : "expression",
            "left" : {
              "go-type" : 2,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "sp0",
                "variable" : 1
              }
            },
            "operator" : "==",
            "right" : {
              "go-type" : 2,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "18446744073709551615"
              }
            },
            "type" : "binary"
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 139,
      "code" : "if pc0 == ^uintptr(0) && sp0 == ^uintptr(0) {\n\tif gp.syscallsp != 0 {\n\t\tpc0 = gp.syscallpc\n\t\tsp0 = gp.syscallsp\n\t\tif usesLR {\n\t\t\tlr0 = 0\n\t\t}\n\t} else {\n\t\tpc0 = gp.sched.pc\n\t\tsp0 = gp.sched.sp\n\t\tif usesLR {\n\t\t\tlr0 = gp.sched.lr\n\t\t}\n\t\tctxt = (*funcval)(gp.sched.ctxt)\n\t}\n}",
      "entry" : false,
      "use-vars" : [ 1, 0 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 11, 15 ],
      "in-vars" : [ 7, 18, 8, 11, 4, 3, 2, 9, 6, 15, 5 ],
      "exit" : false,
      "out-vars" : [ 8, 7, 4, 3, 2, 9, 6, 15, 11, 5, 18 ],
      "decl-vars" : [ ],
      "line-start" : 125,
      "ast" : {
        "condition" : {
          "go-type" : 165,
          "kind" : "expression",
          "left" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "syscallsp",
              "variable" : 19
            },
            "go-type" : 2,
            "kind" : "expression",
            "target" : {
              "go-type" : 3,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "gp",
                "variable" : 3
              }
            },
            "type" : "selector"
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 2,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 138,
      "code" : "if gp.syscallsp != 0 {\n\tpc0 = gp.syscallpc\n\tsp0 = gp.syscallsp\n\tif usesLR {\n\t\tlr0 = 0\n\t}\n} else {\n\tpc0 = gp.sched.pc\n\tsp0 = gp.sched.sp\n\tif usesLR {\n\t\tlr0 = gp.sched.lr\n\t}\n\tctxt = (*funcval)(gp.sched.ctxt)\n}",
      "entry" : false,
      "use-vars" : [ 3 ]
    }, {
      "update-vars" : [ 0 ],
      "successors" : [ 12 ],
      "in-vars" : [ 18, 3, 15, 8, 7, 5, 4, 2, 9, 6, 11 ],
      "exit" : false,
      "out-vars" : [ 4, 3, 9, 11, 18, 2, 0, 6, 15, 8, 5, 7 ],
      "decl-vars" : [ ],
      "line-start" : 126,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 2,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "pc0",
            "variable" : 0
          }
        } ],
        "right" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "syscallpc",
            "variable" : 20
          },
          "go-type" : 2,
          "kind" : "expression",
          "target" : {
            "go-type" : 3,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "gp",
              "variable" : 3
            }
          },
          "type" : "selector"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 0 ],
      "line-end" : 126,
      "code" : "pc0 = gp.syscallpc",
      "entry" : false,
      "use-vars" : [ 3 ]
    }, {
      "update-vars" : [ 1 ],
      "successors" : [ 13 ],
      "in-vars" : [ 6, 8, 5, 7, 4, 9, 0, 15, 11, 18, 3, 2 ],
      "exit" : false,
      "out-vars" : [ 5, 7, 3, 6, 8, 15, 1, 11, 18, 4, 2, 0, 9 ],
      "decl-vars" : [ ],
      "line-start" : 127,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 2,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "sp0",
            "variable" : 1
          }
        } ],
        "right" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "syscallsp",
            "variable" : 19
          },
          "go-type" : 2,
          "kind" : "expression",
          "target" : {
            "go-type" : 3,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "gp",
              "variable" : 3
            }
          },
          "type" : "selector"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 1 ],
      "line-end" : 127,
      "code" : "sp0 = gp.syscallsp",
      "entry" : false,
      "use-vars" : [ 3 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 14, 20 ],
      "in-vars" : [ 3, 2, 0, 11, 5, 7, 4, 15, 8, 1, 18, 9, 6 ],
      "exit" : false,
      "out-vars" : [ 5, 18, 4, 3, 0, 11, 7, 2, 9, 6, 15, 8, 1 ],
      "decl-vars" : [ ],
      "line-start" : 128,
      "ast" : {
        "condition" : {
          "go-type" : 165,
          "kind" : "constant",
          "value" : {
            "type" : "BOOL",
            "value" : "false"
          }
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 130,
      "code" : "if usesLR {\n\tlr0 = 0\n}",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ 2 ],
      "successors" : [ 20 ],
      "in-vars" : [ 7, 4, 6, 8, 3, 0, 9, 15, 1, 11, 5, 18 ],
      "exit" : false,
      "out-vars" : [ 18, 4, 9, 8, 1, 11, 7, 0, 6, 15, 5, 3, 2 ],
      "decl-vars" : [ ],
      "line-start" : 129,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 2,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "lr0",
            "variable" : 2
          }
        } ],
        "right" : [ {
          "go-type" : 2,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "0"
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 2 ],
      "line-end" : 129,
      "code" : "lr0 = 0",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ 0 ],
      "successors" : [ 16 ],
      "in-vars" : [ 11, 7, 3, 15, 6, 8, 5, 4, 2, 9 ],
      "exit" : false,
      "out-vars" : [ 11, 3, 9, 6, 15, 8, 5, 7, 4, 2, 0 ],
      "decl-vars" : [ ],
      "line-start" : 132,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 2,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "pc0",
            "variable" : 0
          }
        } ],
        "right" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "pc",
            "variable" : 22
          },
          "go-type" : 2,
          "kind" : "expression",
          "target" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "sched",
              "variable" : 21
            },
            "go-type" : 24,
            "kind" : "expression",
            "target" : {
              "go-type" : 3,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "gp",
                "variable" : 3
              }
            },
            "type" : "selector"
          },
          "type" : "selector"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 0 ],
      "line-end" : 132,
      "code" : "pc0 = gp.sched.pc",
      "entry" : false,
      "use-vars" : [ 3 ]
    }, {
      "update-vars" : [ 1 ],
      "successors" : [ 17 ],
      "in-vars" : [ 11, 2, 15, 6, 8, 5, 7, 4, 3, 0, 9 ],
      "exit" : false,
      "out-vars" : [ 9, 15, 3, 0, 5, 7, 4, 2, 6, 8, 1, 11 ],
      "decl-vars" : [ ],
      "line-start" : 133,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 2,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "sp0",
            "variable" : 1
          }
        } ],
        "right" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "sp",
            "variable" : 23
          },
          "go-type" : 2,
          "kind" : "expression",
          "target" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "sched",
              "variable" : 21
            },
            "go-type" : 24,
            "kind" : "expression",
            "target" : {
              "go-type" : 3,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "gp",
                "variable" : 3
              }
            },
            "type" : "selector"
          },
          "type" : "selector"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 1 ],
      "line-end" : 133,
      "code" : "sp0 = gp.sched.sp",
      "entry" : false,
      "use-vars" : [ 3 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 18, 19 ],
      "in-vars" : [ 15, 1, 4, 3, 2, 9, 6, 11, 5, 7, 0, 8 ],
      "exit" : false,
      "out-vars" : [ 1, 0, 6, 3, 2, 9, 15, 11, 5, 7, 4, 8 ],
      "decl-vars" : [ ],
      "line-start" : 134,
      "ast" : {
        "condition" : {
          "go-type" : 165,
          "kind" : "constant",
          "value" : {
            "type" : "BOOL",
            "value" : "false"
          }
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 136,
      "code" : "if usesLR {\n\tlr0 = gp.sched.lr\n}",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ 2 ],
      "successors" : [ 19 ],
      "in-vars" : [ 0, 9, 6, 15, 8, 7, 4, 3, 1, 11, 5 ],
      "exit" : false,
      "out-vars" : [ 11, 2, 6, 1, 7, 4, 3, 0, 9, 15, 8, 5 ],
      "decl-vars" : [ ],
      "line-start" : 135,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 2,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "lr0",
            "variable" : 2
          }
        } ],
        "right" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "lr",
            "variable" : 24
          },
          "go-type" : 2,
          "kind" : "expression",
          "target" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "sched",
              "variable" : 21
            },
            "go-type" : 24,
            "kind" : "expression",
            "target" : {
              "go-type" : 3,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "gp",
                "variable" : 3
              }
            },
            "type" : "selector"
          },
          "type" : "selector"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 2 ],
      "line-end" : 135,
      "code" : "lr0 = gp.sched.lr",
      "entry" : false,
      "use-vars" : [ 3 ]
    }, {
      "update-vars" : [ 18 ],
      "successors" : [ 20 ],
      "in-vars" : [ 9, 15, 8, 11, 4, 3, 2, 0, 6, 1, 5, 7 ],
      "exit" : false,
      "out-vars" : [ 1, 5, 7, 4, 6, 15, 11, 18, 3, 2, 0, 9, 8 ],
      "decl-vars" : [ ],
      "line-start" : 137,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 18,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "ctxt",
            "variable" : 18
          }
        } ],
        "right" : [ {
          "coerced-to" : {
            "contained" : {
              "go-type" : 19,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 19,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "funcval"
              }
            },
            "go-type" : 18,
            "kind" : "type",
            "type" : "pointer"
          },
          "go-type" : 18,
          "kind" : "expression",
          "target" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "ctxt",
              "variable" : 25
            },
            "go-type" : 11,
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "sched",
                "variable" : 21
              },
              "go-type" : 24,
              "kind" : "expression",
              "target" : {
                "go-type" : 3,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "gp",
                  "variable" : 3
                }
              },
              "type" : "selector"
            },
            "type" : "selector"
          },
          "type" : "cast"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 18 ],
      "line-end" : 137,
      "code" : "ctxt = (*funcval)(gp.sched.ctxt)",
      "entry" : false,
      "use-vars" : [ 3 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 21 ],
      "in-vars" : [ 11, 5, 0, 9, 6, 15, 1, 18, 4, 3, 2, 8, 7 ],
      "exit" : false,
      "out-vars" : [ 7, 9, 6, 15, 18, 2, 11, 3, 0, 1, 5, 4, 26, 8 ],
      "decl-vars" : [ 26 ],
      "line-start" : 141,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "nprint"
          }
        } ],
        "right" : [ {
          "go-type" : 78,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "0"
          }
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 141,
      "code" : "nprint := 0",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 22 ],
      "in-vars" : [ 5, 2, 1, 11, 4, 0, 9, 18, 26, 8, 7, 3, 6, 15 ],
      "exit" : false,
      "out-vars" : [ 1, 2, 26, 9, 27, 15, 0, 6, 8, 11, 5, 4, 3, 7, 18 ],
      "decl-vars" : [ 27 ],
      "line-start" : 142,
      "ast" : {
        "kind" : "statement",
        "target" : {
          "kind" : "decl",
          "specs" : [ {
            "comments" : [ ],
            "declared-type" : {
              "go-type" : 118,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 118,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "stkframe"
              }
            },
            "kind" : "spec",
            "names" : [ {
              "ident-kind" : "NoKind",
              "kind" : "ident",
              "value" : "frame"
            } ],
            "type" : "var",
            "values" : [ ]
          } ],
          "type" : "var"
        },
        "type" : "declaration"
      },
      "assign-vars" : [ ],
      "line-end" : 142,
      "code" : "var frame stkframe",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ 27 ],
      "successors" : [ 23 ],
      "in-vars" : [ 18, 9, 15, 1, 4, 26, 6, 27, 11, 5, 2, 8, 7, 3, 0 ],
      "exit" : false,
      "out-vars" : [ 1, 3, 26, 9, 6, 15, 11, 5, 7, 18, 27, 4, 2, 8 ],
      "decl-vars" : [ ],
      "line-start" : 143,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "pc",
            "variable" : 28
          },
          "go-type" : 2,
          "kind" : "expression",
          "target" : {
            "go-type" : 118,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "frame",
              "variable" : 27
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "go-type" : 2,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "pc0",
            "variable" : 0
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 143,
      "code" : "frame.pc = pc0",
      "entry" : false,
      "use-vars" : [ 27, 0 ]
    }, {
      "update-vars" : [ 27 ],
      "successors" : [ 24 ],
      "in-vars" : [ 27, 6, 11, 7, 2, 9, 1, 5, 18, 15, 8, 4, 3, 26 ],
      "exit" : false,
      "out-vars" : [ 26, 9, 6, 27, 11, 5, 4, 2, 7, 18, 3, 15, 8 ],
      "decl-vars" : [ ],
      "line-start" : 144,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "sp",
            "variable" : 29
          },
          "go-type" : 2,
          "kind" : "expression",
          "target" : {
            "go-type" : 118,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "frame",
              "variable" : 27
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "go-type" : 2,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "sp0",
            "variable" : 1
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 144,
      "code" : "frame.sp = sp0",
      "entry" : false,
      "use-vars" : [ 1, 27 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 25, 26 ],
      "in-vars" : [ 11, 18, 3, 26, 6, 8, 27, 7, 4, 2, 9, 15, 5 ],
      "exit" : false,
      "out-vars" : [ 6, 8, 5, 4, 2, 9, 3, 26, 15, 27, 11, 7, 18 ],
      "decl-vars" : [ ],
      "line-start" : 145,
      "ast" : {
        "condition" : {
          "go-type" : 165,
          "kind" : "constant",
          "value" : {
            "type" : "BOOL",
            "value" : "false"
          }
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 147,
      "code" : "if usesLR {\n\tframe.lr = lr0\n}",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ 27 ],
      "successors" : [ 26 ],
      "in-vars" : [ 27, 5, 4, 2, 9, 11, 7, 18, 3, 26, 6, 15, 8 ],
      "exit" : false,
      "out-vars" : [ 11, 18, 4, 3, 6, 27, 5, 7, 26, 9, 15, 8 ],
      "decl-vars" : [ ],
      "line-start" : 146,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "lr",
            "variable" : 30
          },
          "go-type" : 2,
          "kind" : "expression",
          "target" : {
            "go-type" : 118,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "frame",
              "variable" : 27
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "go-type" : 2,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "lr0",
            "variable" : 2
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 146,
      "code" : "frame.lr = lr0",
      "entry" : false,
      "use-vars" : [ 2, 27 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 27 ],
      "in-vars" : [ 27, 7, 18, 4, 6, 15, 11, 5, 3, 26, 9, 8 ],
      "exit" : false,
      "out-vars" : [ 9, 15, 8, 5, 31, 18, 4, 26, 6, 27, 11, 7, 3 ],
      "decl-vars" : [ 31 ],
      "line-start" : 148,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "waspanic"
          }
        } ],
        "right" : [ {
          "go-type" : 13,
          "kind" : "constant",
          "value" : {
            "type" : "BOOL",
            "value" : "false"
          }
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 148,
      "code" : "waspanic := false",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 28 ],
      "in-vars" : [ 11, 31, 3, 26, 6, 15, 8, 27, 5, 7, 18, 4, 9 ],
      "exit" : false,
      "out-vars" : [ 31, 15, 4, 3, 26, 8, 27, 11, 5, 6, 7, 18, 9, 33 ],
      "decl-vars" : [ 33 ],
      "line-start" : 149,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "cgoCtxt"
          }
        } ],
        "right" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "cgoCtxt",
            "variable" : 32
          },
          "go-type" : 90,
          "kind" : "expression",
          "target" : {
            "go-type" : 3,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "gp",
              "variable" : 3
            }
          },
          "type" : "selector"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 149,
      "code" : "cgoCtxt := gp.cgoCtxt",
      "entry" : false,
      "use-vars" : [ 3 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 29 ],
      "in-vars" : [ 11, 9, 3, 15, 8, 27, 5, 31, 18, 7, 26, 33, 6, 4 ],
      "exit" : false,
      "out-vars" : [ 5, 7, 18, 27, 34, 3, 6, 11, 9, 33, 8, 31, 4, 26, 15 ],
      "decl-vars" : [ 34 ],
      "line-start" : 150,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "printing"
          }
        } ],
        "right" : [ {
          "go-type" : 13,
          "kind" : "expression",
          "left" : {
            "go-type" : 13,
            "kind" : "expression",
            "left" : {
              "go-type" : 114,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "pcbuf",
                "variable" : 5
              }
            },
            "operator" : "==",
            "right" : {
              "go-type" : 166,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Nil",
                "kind" : "ident",
                "value" : "nil"
              }
            },
            "type" : "binary"
          },
          "operator" : "&&",
          "right" : {
            "go-type" : 13,
            "kind" : "expression",
            "left" : {
              "go-type" : 115,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "callback",
                "variable" : 7
              }
            },
            "operator" : "==",
            "right" : {
              "go-type" : 166,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Nil",
                "kind" : "ident",
                "value" : "nil"
              }
            },
            "type" : "binary"
          },
          "type" : "binary"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 150,
      "code" : "printing := pcbuf == nil && callback == nil",
      "entry" : false,
      "use-vars" : [ 5, 7 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 30, 35 ],
      "in-vars" : [ 7, 3, 8, 15, 27, 34, 26, 33, 11, 5, 31, 18, 4, 9, 6 ],
      "exit" : false,
      "out-vars" : [ 4, 33, 15, 5, 31, 27, 11, 34, 7, 3, 6, 8, 18, 26, 9 ],
      "decl-vars" : [ ],
      "line-start" : 154,
      "ast" : {
        "condition" : {
          "go-type" : 165,
          "kind" : "expression",
          "left" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "pc",
              "variable" : 28
            },
            "go-type" : 2,
            "kind" : "expression",
            "target" : {
              "go-type" : 118,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "frame",
                "variable" : 27
              }
            },
            "type" : "selector"
          },
          "operator" : "==",
          "right" : {
            "go-type" : 2,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 162,
      "code" : "if frame.pc == 0 {\n\tif usesLR {\n\t\tframe.pc = *(*uintptr)(unsafe.Pointer(frame.sp))\n\t\tframe.lr = 0\n\t} else {\n\t\tframe.pc = uintptr(*(*sys.Uintreg)(unsafe.Pointer(frame.sp)))\n\t\tframe.sp += sys.RegSize\n\t}\n}",
      "entry" : false,
      "use-vars" : [ 27 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 31, 33 ],
      "in-vars" : [ 33, 8, 7, 34, 5, 31, 18, 4, 3, 26, 11, 15, 9, 6, 27 ],
      "exit" : false,
      "out-vars" : [ 34, 9, 33, 8, 27, 5, 18, 4, 31, 7, 3, 26, 6, 11, 15 ],
      "decl-vars" : [ ],
      "line-start" : 155,
      "ast" : {
        "condition" : {
          "go-type" : 165,
          "kind" : "constant",
          "value" : {
            "type" : "BOOL",
            "value" : "false"
          }
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 161,
      "code" : "if usesLR {\n\tframe.pc = *(*uintptr)(unsafe.Pointer(frame.sp))\n\tframe.lr = 0\n} else {\n\tframe.pc = uintptr(*(*sys.Uintreg)(unsafe.Pointer(frame.sp)))\n\tframe.sp += sys.RegSize\n}",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ 27 ],
      "successors" : [ 32 ],
      "in-vars" : [ 8, 11, 18, 33, 15, 3, 9, 27, 34, 7, 4, 5, 6, 31, 26 ],
      "exit" : false,
      "out-vars" : [ 15, 27, 3, 26, 6, 7, 18, 9, 11, 5, 33, 8, 34, 31, 4 ],
      "decl-vars" : [ ],
      "line-start" : 156,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "pc",
            "variable" : 28
          },
          "go-type" : 2,
          "kind" : "expression",
          "target" : {
            "go-type" : 118,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "frame",
              "variable" : 27
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "go-type" : 2,
          "kind" : "expression",
          "target" : {
            "coerced-to" : {
              "contained" : {
                "go-type" : 2,
                "kind" : "type",
                "type" : "identifier",
                "value" : {
                  "go-type" : 2,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "uintptr"
                }
              },
              "go-type" : 114,
              "kind" : "type",
              "type" : "pointer"
            },
            "go-type" : 114,
            "kind" : "expression",
            "target" : {
              "coerced-to" : {
                "go-type" : 11,
                "kind" : "type",
                "qualifier" : {
                  "ident-kind" : "PkgName",
                  "kind" : "ident",
                  "package" : 1,
                  "value" : "unsafe"
                },
                "type" : "identifier",
                "value" : {
                  "go-type" : 11,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "Pointer"
                }
              },
              "go-type" : 11,
              "kind" : "expression",
              "target" : {
                "field" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "sp",
                  "variable" : 29
                },
                "go-type" : 2,
                "kind" : "expression",
                "target" : {
                  "go-type" : 118,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "frame",
                    "variable" : 27
                  }
                },
                "type" : "selector"
              },
              "type" : "cast"
            },
            "type" : "cast"
          },
          "type" : "star"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 156,
      "code" : "frame.pc = *(*uintptr)(unsafe.Pointer(frame.sp))",
      "entry" : false,
      "use-vars" : [ 27 ]
    }, {
      "update-vars" : [ 27 ],
      "successors" : [ 35 ],
      "in-vars" : [ 8, 27, 5, 18, 3, 9, 31, 26, 33, 6, 11, 34, 4, 15, 7 ],
      "exit" : false,
      "out-vars" : [ 15, 9, 34, 7, 26, 4, 6, 27, 5, 18, 33, 8, 11, 31, 3 ],
      "decl-vars" : [ ],
      "line-start" : 157,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "lr",
            "variable" : 30
          },
          "go-type" : 2,
          "kind" : "expression",
          "target" : {
            "go-type" : 118,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "frame",
              "variable" : 27
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "go-type" : 2,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "0"
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 157,
      "code" : "frame.lr = 0",
      "entry" : false,
      "use-vars" : [ 27 ]
    }, {
      "update-vars" : [ 27 ],
      "successors" : [ 34 ],
      "in-vars" : [ 3, 26, 6, 27, 11, 5, 7, 18, 4, 9, 15, 31, 33, 8, 34 ],
      "exit" : false,
      "out-vars" : [ 34, 5, 4, 26, 6, 27, 3, 9, 15, 11, 8, 18, 7, 33, 31 ],
      "decl-vars" : [ ],
      "line-start" : 159,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "pc",
            "variable" : 28
          },
          "go-type" : 2,
          "kind" : "expression",
          "target" : {
            "go-type" : 118,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "frame",
              "variable" : 27
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "coerced-to" : {
            "go-type" : 2,
            "kind" : "type",
            "type" : "identifier",
            "value" : {
              "go-type" : 2,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "uintptr"
            }
          },
          "go-type" : 2,
          "kind" : "expression",
          "target" : {
            "go-type" : 27,
            "kind" : "expression",
            "target" : {
              "coerced-to" : {
                "contained" : {
                  "go-type" : 27,
                  "kind" : "type",
                  "qualifier" : {
                    "ident-kind" : "PkgName",
                    "kind" : "ident",
                    "package" : 2,
                    "value" : "sys"
                  },
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 27,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "Uintreg"
                  }
                },
                "go-type" : 173,
                "kind" : "type",
                "type" : "pointer"
              },
              "go-type" : 173,
              "kind" : "expression",
              "target" : {
                "coerced-to" : {
                  "go-type" : 11,
                  "kind" : "type",
                  "qualifier" : {
                    "ident-kind" : "PkgName",
                    "kind" : "ident",
                    "package" : 1,
                    "value" : "unsafe"
                  },
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 11,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "Pointer"
                  }
                },
                "go-type" : 11,
                "kind" : "expression",
                "target" : {
                  "field" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "sp",
                    "variable" : 29
                  },
                  "go-type" : 2,
                  "kind" : "expression",
                  "target" : {
                    "go-type" : 118,
                    "kind" : "expression",
                    "type" : "identifier",
                    "value" : {
                      "ident-kind" : "Var",
                      "kind" : "ident",
                      "value" : "frame",
                      "variable" : 27
                    }
                  },
                  "type" : "selector"
                },
                "type" : "cast"
              },
              "type" : "cast"
            },
            "type" : "star"
          },
          "type" : "cast"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 159,
      "code" : "frame.pc = uintptr(*(*sys.Uintreg)(unsafe.Pointer(frame.sp)))",
      "entry" : false,
      "use-vars" : [ 27 ]
    }, {
      "update-vars" : [ 27 ],
      "successors" : [ 35 ],
      "in-vars" : [ 34, 18, 6, 8, 27, 11, 31, 33, 15, 5, 7, 4, 3, 26, 9 ],
      "exit" : false,
      "out-vars" : [ 11, 31, 26, 9, 8, 34, 7, 18, 4, 33, 6, 15, 27, 5, 3 ],
      "decl-vars" : [ ],
      "line-start" : 160,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "sp",
            "variable" : 29
          },
          "go-type" : 2,
          "kind" : "expression",
          "target" : {
            "go-type" : 118,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "frame",
              "variable" : 27
            }
          },
          "type" : "selector"
        } ],
        "operator" : "+",
        "right" : [ {
          "go-type" : 2,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "8"
          }
        } ],
        "type" : "assign-operator"
      },
      "assign-vars" : [ ],
      "line-end" : 160,
      "code" : "frame.sp += sys.RegSize",
      "entry" : false,
      "use-vars" : [ 27 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 36 ],
      "in-vars" : [ 11, 33, 7, 26, 6, 15, 8, 34, 5, 4, 9, 27, 31, 18, 3 ],
      "exit" : false,
      "out-vars" : [ 6, 15, 8, 35, 11, 34, 31, 7, 27, 18, 4, 3, 9, 5, 26, 33 ],
      "decl-vars" : [ 35 ],
      "line-start" : 164,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "f"
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "pc",
              "variable" : 28
            },
            "go-type" : 2,
            "kind" : "expression",
            "target" : {
              "go-type" : 118,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "frame",
                "variable" : 27
              }
            },
            "type" : "selector"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 174,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 4,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "findfunc"
            }
          },
          "go-type" : 120,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 164,
      "code" : "f := findfunc(frame.pc)",
      "entry" : false,
      "use-vars" : [ 27 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 37, 43 ],
      "in-vars" : [ 33, 27, 35, 5, 7, 18, 26, 34, 3, 11, 6, 8, 31, 4, 9, 15 ],
      "exit" : false,
      "out-vars" : [ 11, 5, 7, 4, 18, 35, 26, 9, 15, 8, 27, 34, 31, 3, 33, 6 ],
      "decl-vars" : [ ],
      "line-start" : 165,
      "ast" : {
        "condition" : {
          "go-type" : 13,
          "kind" : "expression",
          "operator" : "!",
          "target" : {
            "arguments" : [ ],
            "ellipsis" : false,
            "function" : {
              "field" : {
                "function" : 5,
                "ident-kind" : "Func",
                "kind" : "ident",
                "value" : "valid"
              },
              "go-type" : 177,
              "kind" : "expression",
              "target" : {
                "go-type" : 120,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "f",
                  "variable" : 35
                }
              },
              "type" : "selector"
            },
            "go-type" : 13,
            "kind" : "expression",
            "type" : "call"
          },
          "type" : "unary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 174,
      "code" : "if !f.valid() {\n\tif callback != nil || printing {\n\t\tprint(\"runtime: unknown pc \", hex(frame.pc), \"\\n\")\n\t\ttracebackHexdump(gp.stack, &frame, 0)\n\t}\n\tif callback != nil {\n\t\tthrow(\"unknown pc\")\n\t}\n\treturn 0\n}",
      "entry" : false,
      "use-vars" : [ 35 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 38, 40 ],
      "in-vars" : [ 27, 34, 7, 3 ],
      "exit" : false,
      "out-vars" : [ 27, 7, 3 ],
      "decl-vars" : [ ],
      "line-start" : 166,
      "ast" : {
        "condition" : {
          "go-type" : 13,
          "kind" : "expression",
          "left" : {
            "go-type" : 13,
            "kind" : "expression",
            "left" : {
              "go-type" : 115,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "callback",
                "variable" : 7
              }
            },
            "operator" : "!=",
            "right" : {
              "go-type" : 166,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Nil",
                "kind" : "ident",
                "value" : "nil"
              }
            },
            "type" : "binary"
          },
          "operator" : "||",
          "right" : {
            "go-type" : 13,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "printing",
              "variable" : 34
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 169,
      "code" : "if callback != nil || printing {\n\tprint(\"runtime: unknown pc \", hex(frame.pc), \"\\n\")\n\ttracebackHexdump(gp.stack, &frame, 0)\n}",
      "entry" : false,
      "use-vars" : [ 7, 34 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 39 ],
      "in-vars" : [ 27, 7, 3 ],
      "exit" : false,
      "out-vars" : [ 27, 7, 3 ],
      "decl-vars" : [ ],
      "line-start" : 167,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 39,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "runtime: unknown pc "
            }
          }, {
            "coerced-to" : {
              "go-type" : 180,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 180,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "hex"
              }
            },
            "go-type" : 180,
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "pc",
                "variable" : 28
              },
              "go-type" : 2,
              "kind" : "expression",
              "target" : {
                "go-type" : 118,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "frame",
                  "variable" : 27
                }
              },
              "type" : "selector"
            },
            "type" : "cast"
          }, {
            "go-type" : 39,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "\n"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 178,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Builtin",
              "kind" : "ident",
              "value" : "print"
            }
          },
          "go-type" : 36,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 167,
      "code" : "print(\"runtime: unknown pc \", hex(frame.pc), \"\\n\")",
      "entry" : false,
      "use-vars" : [ 27 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 40 ],
      "in-vars" : [ 27, 7, 3 ],
      "exit" : false,
      "out-vars" : [ 7 ],
      "decl-vars" : [ ],
      "line-start" : 168,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "stack",
              "variable" : 36
            },
            "go-type" : 6,
            "kind" : "expression",
            "target" : {
              "go-type" : 3,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "gp",
                "variable" : 3
              }
            },
            "type" : "selector"
          }, {
            "go-type" : 117,
            "kind" : "expression",
            "operator" : "&",
            "target" : {
              "go-type" : 118,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "frame",
                "variable" : 27
              }
            },
            "type" : "unary"
          }, {
            "go-type" : 2,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 181,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 6,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "tracebackHexdump"
            }
          },
          "go-type" : 36,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 168,
      "code" : "tracebackHexdump(gp.stack, &frame, 0)",
      "entry" : false,
      "use-vars" : [ 27, 3 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 41, 42 ],
      "in-vars" : [ 7 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 170,
      "ast" : {
        "condition" : {
          "go-type" : 165,
          "kind" : "expression",
          "left" : {
            "go-type" : 115,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "callback",
              "variable" : 7
            }
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 166,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Nil",
              "kind" : "ident",
              "value" : "nil"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 172,
      "code" : "if callback != nil {\n\tthrow(\"unknown pc\")\n}",
      "entry" : false,
      "use-vars" : [ 7 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 42 ],
      "in-vars" : [ ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 171,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 39,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "unknown pc"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 167,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 1,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "throw"
            }
          },
          "go-type" : 36,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 171,
      "code" : "throw(\"unknown pc\")",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 173,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 78,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "0"
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 173,
      "code" : "return 0",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ 27 ],
      "successors" : [ 44 ],
      "in-vars" : [ 31, 3, 15, 5, 26, 9, 33, 34, 7, 18, 6, 8, 27, 35, 11, 4 ],
      "exit" : false,
      "out-vars" : [ 9, 5, 26, 31, 3, 15, 8, 27, 34, 33, 18, 4, 6, 11, 7 ],
      "decl-vars" : [ ],
      "line-start" : 175,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "fn",
            "variable" : 37
          },
          "go-type" : 120,
          "kind" : "expression",
          "target" : {
            "go-type" : 118,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "frame",
              "variable" : 27
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "go-type" : 120,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "f",
            "variable" : 35
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 175,
      "code" : "frame.fn = f",
      "entry" : false,
      "use-vars" : [ 35, 27 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 45 ],
      "in-vars" : [ 11, 4, 9, 31, 3, 26, 33, 15, 8, 27, 34, 5, 6, 7, 18 ],
      "exit" : false,
      "out-vars" : [ 27, 33, 8, 34, 26, 9, 11, 4, 15, 3, 6, 38, 5, 31, 7, 18 ],
      "decl-vars" : [ 38 ],
      "line-start" : 177,
      "ast" : {
        "kind" : "statement",
        "target" : {
          "kind" : "decl",
          "specs" : [ {
            "comments" : [ ],
            "declared-type" : {
              "go-type" : 183,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 183,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "pcvalueCache"
              }
            },
            "kind" : "spec",
            "names" : [ {
              "ident-kind" : "NoKind",
              "kind" : "ident",
              "value" : "cache"
            } ],
            "type" : "var",
            "values" : [ ]
          } ],
          "type" : "var"
        },
        "type" : "declaration"
      },
      "assign-vars" : [ ],
      "line-end" : 177,
      "code" : "var cache pcvalueCache",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 46 ],
      "in-vars" : [ 27, 5, 8, 38, 34, 4, 3, 26, 9, 11, 7, 18, 33, 31, 6, 15 ],
      "exit" : false,
      "out-vars" : [ 18, 8, 27, 31, 3, 33, 11, 4, 15, 6, 38, 39, 34, 5, 7, 26, 9 ],
      "decl-vars" : [ 39 ],
      "line-start" : 179,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "lastFuncID"
          }
        } ],
        "right" : [ {
          "go-type" : 125,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "0"
          }
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 179,
      "code" : "lastFuncID := funcID_normal",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 47 ],
      "in-vars" : [ 8, 31, 18, 4, 26, 27, 39, 34, 5, 3, 9, 33, 11, 7, 6, 15, 38 ],
      "exit" : false,
      "out-vars" : [ 6, 11, 5, 18, 9, 8, 27, 39, 40, 7, 3, 15, 38, 31, 4, 26, 33, 34 ],
      "decl-vars" : [ 40 ],
      "line-start" : 180,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "n"
          }
        } ],
        "right" : [ {
          "go-type" : 78,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "0"
          }
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 180,
      "code" : "n := 0",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 48, 213 ],
      "in-vars" : [ 27, 34, 40, 31, 7, 18, 33, 15, 38, 26, 6, 8, 9, 11, 39, 5, 4, 3 ],
      "exit" : false,
      "out-vars" : [ 34, 40, 7, 18, 9, 33, 8, 11, 5, 31, 26, 6, 15, 38, 39, 3, 27, 4 ],
      "decl-vars" : [ ],
      "line-start" : 181,
      "ast" : {
        "condition" : {
          "go-type" : 165,
          "kind" : "expression",
          "left" : {
            "go-type" : 78,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "n",
              "variable" : 40
            }
          },
          "operator" : "<",
          "right" : {
            "go-type" : 78,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "max",
              "variable" : 6
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "for"
      },
      "assign-vars" : [ ],
      "line-end" : 510,
      "code" : "for n < max {\n\n\tf = frame.fn\n\tif f.pcsp == 0 {\n\n\t\tbreak\n\t}\n\n\tif frame.fp == 0 {\n\n\t\tif flags&_TraceJumpStack != 0 && gp == gp.m.g0 && gp.m.curg != nil {\n\t\t\tswitch f.funcID {\n\t\t\tcase funcID_morestack:\n\n\t\t\t\tframe.pc = gp.m.curg.sched.pc\n\t\t\t\tframe.fn = findfunc(frame.pc)\n\t\t\t\tf = frame.fn\n\t\t\t\tframe.sp = gp.m.curg.sched.sp\n\t\t\t\tcgoCtxt = gp.m.curg.cgoCtxt\n\t\t\tcase funcID_systemstack:\n\n\t\t\t\tframe.sp = gp.m.curg.sched.sp\n\t\t\t\tcgoCtxt = gp.m.curg.cgoCtxt\n\t\t\t}\n\t\t}\n\t\tframe.fp = frame.sp + uintptr(funcspdelta(f, frame.pc, &cache))\n\t\tif !usesLR {\n\n\t\t\tframe.fp += sys.RegSize\n\t\t}\n\t}\n\tvar flr funcInfo\n\tif topofstack(f, gp.m != nil && gp == gp.m.g0) {\n\t\tframe.lr = 0\n\t\tflr = funcInfo{}\n\t} else if usesLR && f.funcID == funcID_jmpdefer {\n\n\t\tif callback != nil {\n\t\t\tthrow(\"traceback_arm: found jmpdefer when tracing with callback\")\n\t\t}\n\t\tframe.lr = 0\n\t} else {\n\t\tvar lrPtr uintptr\n\t\tif usesLR {\n\t\t\tif n == 0 && frame.sp < frame.fp || frame.lr == 0 {\n\t\t\t\tlrPtr = frame.sp\n\t\t\t\tframe.lr = *(*uintptr)(unsafe.Pointer(lrPtr))\n\t\t\t}\n\t\t} else {\n\t\t\tif frame.lr == 0 {\n\t\t\t\tlrPtr = frame.fp - sys.RegSize\n\t\t\t\tframe.lr = uintptr(*(*sys.Uintreg)(unsafe.Pointer(lrPtr)))\n\t\t\t}\n\t\t}\n\t\tflr = findfunc(frame.lr)\n\t\tif !flr.valid() {\n\n\t\t\tdoPrint := printing\n\t\t\tif doPrint && gp.m.incgo && f.funcID == funcID_sigpanic {\n\n\t\t\t\tdoPrint = false\n\t\t\t}\n\t\t\tif callback != nil || doPrint {\n\t\t\t\tprint(\"runtime: unexpected return pc for \", funcname(f), \" called from \", hex(frame.lr), \"\\n\")\n\t\t\t\ttracebackHexdump(gp.stack, &frame, lrPtr)\n\t\t\t}\n\t\t\tif callback != nil {\n\t\t\t\tthrow(\"unknown caller pc\")\n\t\t\t}\n\t\t}\n\t}\n\n\tframe.varp = frame.fp\n\tif !usesLR {\n\n\t\tframe.varp -= sys.RegSize\n\t}\n\n\tif frame.varp > frame.sp && (framepointer_enabled && GOARCH == \"amd64\" || GOARCH == \"arm64\") {\n\t\tframe.varp -= sys.RegSize\n\t}\n\n\tif callback != nil || printing {\n\t\tframe.argp = frame.fp + sys.MinFrameSize\n\t\tvar ok bool\n\t\tframe.arglen, frame.argmap, ok = getArgInfoFast(f, callback != nil)\n\t\tif !ok {\n\t\t\tframe.arglen, frame.argmap = getArgInfo(&frame, f, callback != nil, ctxt)\n\t\t}\n\t}\n\tctxt = nil\n\n\tframe.continpc = frame.pc\n\tif waspanic {\n\t\tif frame.fn.deferreturn != 0 {\n\t\t\tframe.continpc = frame.fn.entry + uintptr(frame.fn.deferreturn) + 1\n\n\t\t} else {\n\t\t\tframe.continpc = 0\n\t\t}\n\t}\n\n\tif callback != nil {\n\t\tif !callback((*stkframe)(noescape(unsafe.Pointer(&frame))), v) {\n\t\t\treturn n\n\t\t}\n\t}\n\n\tif pcbuf != nil {\n\t\tpc := frame.pc\n\n\t\ttracepc := pc\n\n\t\tif (n == 0 && flags&_TraceTrap != 0) || waspanic || pc == f.entry {\n\t\t\tpc++\n\t\t} else {\n\t\t\ttracepc--\n\t\t}\n\n\t\tif inldata := funcdata(f, _FUNCDATA_InlTree); inldata != nil {\n\t\t\tinltree := (*[1 << 20]inlinedCall)(inldata)\n\t\t\tfor {\n\t\t\t\tix := pcdatavalue(f, _PCDATA_InlTreeIndex, tracepc, &cache)\n\t\t\t\tif ix < 0 {\n\t\t\t\t\tbreak\n\t\t\t\t}\n\t\t\t\tif inltree[ix].funcID == funcID_wrapper && elideWrapperCalling(lastFuncID) {\n\n\t\t\t\t} else if skip > 0 {\n\t\t\t\t\tskip--\n\t\t\t\t} else if n < max {\n\t\t\t\t\t(*[1 << 20]uintptr)(unsafe.Pointer(pcbuf))[n] = pc\n\t\t\t\t\tn++\n\t\t\t\t}\n\t\t\t\tlastFuncID = inltree[ix].funcID\n\n\t\t\t\ttracepc = frame.fn.entry + uintptr(inltree[ix].parentPc)\n\t\t\t\tpc = tracepc + 1\n\t\t\t}\n\t\t}\n\n\t\tif f.funcID == funcID_wrapper && elideWrapperCalling(lastFuncID) {\n\n\t\t} else if skip > 0 {\n\t\t\tskip--\n\t\t} else if n < max {\n\t\t\t(*[1 << 20]uintptr)(unsafe.Pointer(pcbuf))[n] = pc\n\t\t\tn++\n\t\t}\n\t\tlastFuncID = f.funcID\n\t\tn--\n\t}\n\n\tif printing {\n\n\t\ttracepc := frame.pc\n\t\tif (n > 0 || flags&_TraceTrap == 0) && frame.pc > f.entry && !waspanic {\n\t\t\ttracepc--\n\t\t}\n\n\t\tif inldata := funcdata(f, _FUNCDATA_InlTree); inldata != nil {\n\t\t\tinltree := (*[1 << 20]inlinedCall)(inldata)\n\t\t\tfor {\n\t\t\t\tix := pcdatavalue(f, _PCDATA_InlTreeIndex, tracepc, nil)\n\t\t\t\tif ix < 0 {\n\t\t\t\t\tbreak\n\t\t\t\t}\n\t\t\t\tif (flags&_TraceRuntimeFrames) != 0 || showframe(f, gp, nprint == 0, inltree[ix].funcID, lastFuncID) {\n\t\t\t\t\tname := funcnameFromNameoff(f, inltree[ix].func_)\n\t\t\t\t\tfile, line := funcline(f, tracepc)\n\t\t\t\t\tprint(name, \"(...)\\n\")\n\t\t\t\t\tprint(\"\\t\", file, \":\", line, \"\\n\")\n\t\t\t\t\tnprint++\n\t\t\t\t}\n\t\t\t\tlastFuncID = inltree[ix].funcID\n\n\t\t\t\ttracepc = frame.fn.entry + uintptr(inltree[ix].parentPc)\n\t\t\t}\n\t\t}\n\t\tif (flags&_TraceRuntimeFrames) != 0 || showframe(f, gp, nprint == 0, f.funcID, lastFuncID) {\n\n\t\t\tname := funcname(f)\n\t\t\tfile, line := funcline(f, tracepc)\n\t\t\tif name == \"runtime.gopanic\" {\n\t\t\t\tname = \"panic\"\n\t\t\t}\n\t\t\tprint(name, \"(\")\n\t\t\targp := (*[100]uintptr)(unsafe.Pointer(frame.argp))\n\t\t\tfor i := uintptr(0); i < frame.arglen/sys.PtrSize; i++ {\n\t\t\t\tif i >= 10 {\n\t\t\t\t\tprint(\", ...\")\n\t\t\t\t\tbreak\n\t\t\t\t}\n\t\t\t\tif i != 0 {\n\t\t\t\t\tprint(\", \")\n\t\t\t\t}\n\t\t\t\tprint(hex(argp[i]))\n\t\t\t}\n\t\t\tprint(\")\\n\")\n\t\t\tprint(\"\\t\", file, \":\", line)\n\t\t\tif frame.pc > f.entry {\n\t\t\t\tprint(\" +\", hex(frame.pc-f.entry))\n\t\t\t}\n\t\t\tif gp.m != nil && gp.m.throwing > 0 && gp == gp.m.curg || level >= 2 {\n\t\t\t\tprint(\" fp=\", hex(frame.fp), \" sp=\", hex(frame.sp), \" pc=\", hex(frame.pc))\n\t\t\t}\n\t\t\tprint(\"\\n\")\n\t\t\tnprint++\n\t\t}\n\t\tlastFuncID = f.funcID\n\t}\n\tn++\n\n\tif f.funcID == funcID_cgocallback_gofunc && len(cgoCtxt) > 0 {\n\t\tctxt := cgoCtxt[len(cgoCtxt)-1]\n\t\tcgoCtxt = cgoCtxt[:len(cgoCtxt)-1]\n\n\t\tif skip == 0 && callback == nil {\n\t\t\tn = tracebackCgoContext(pcbuf, printing, ctxt, n, max)\n\t\t}\n\t}\n\n\twaspanic = f.funcID == funcID_sigpanic\n\tinjectedCall := waspanic || f.funcID == funcID_asyncPreempt\n\n\tif !flr.valid() {\n\t\tbreak\n\t}\n\n\tframe.fn = flr\n\tframe.pc = frame.lr\n\tframe.lr = 0\n\tframe.sp = frame.fp\n\tframe.fp = 0\n\tframe.argmap = nil\n\n\tif usesLR && injectedCall {\n\t\tx := *(*uintptr)(unsafe.Pointer(frame.sp))\n\t\tframe.sp += sys.MinFrameSize\n\t\tif GOARCH == \"arm64\" {\n\n\t\t\tframe.sp += sys.PtrSize\n\t\t}\n\t\tf = findfunc(frame.pc)\n\t\tframe.fn = f\n\t\tif !f.valid() {\n\t\t\tframe.pc = x\n\t\t} else if funcspdelta(f, frame.pc, &cache) == 0 {\n\t\t\tframe.lr = x\n\t\t}\n\t}\n}",
      "entry" : false,
      "use-vars" : [ 40, 6 ]
    }, {
      "update-vars" : [ 35 ],
      "successors" : [ 49 ],
      "in-vars" : [ 39, 33, 15, 11, 7, 4, 9, 6, 8, 34, 38, 31, 18, 27, 5, 3, 26, 40 ],
      "exit" : false,
      "out-vars" : [ 27, 31, 7, 26, 9, 11, 8, 3, 33, 15, 35, 38, 5, 18, 4, 39, 34, 40, 6 ],
      "decl-vars" : [ ],
      "line-start" : 188,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 120,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "f",
            "variable" : 35
          }
        } ],
        "right" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "fn",
            "variable" : 37
          },
          "go-type" : 120,
          "kind" : "expression",
          "target" : {
            "go-type" : 118,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "frame",
              "variable" : 27
            }
          },
          "type" : "selector"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 35 ],
      "line-end" : 188,
      "code" : "f = frame.fn",
      "entry" : false,
      "use-vars" : [ 27 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 50, 51 ],
      "in-vars" : [ 33, 15, 8, 11, 34, 6, 38, 18, 7, 3, 39, 5, 40, 31, 4, 26, 9, 27, 35 ],
      "exit" : false,
      "out-vars" : [ 35, 11, 18, 6, 8, 27, 39, 7, 15, 34, 40, 3, 26, 9, 33, 38, 5, 31, 4 ],
      "decl-vars" : [ ],
      "line-start" : 189,
      "ast" : {
        "condition" : {
          "go-type" : 165,
          "kind" : "expression",
          "left" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "pcsp",
              "variable" : 41
            },
            "go-type" : 17,
            "kind" : "expression",
            "target" : {
              "go-type" : 120,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "f",
                "variable" : 35
              }
            },
            "type" : "selector"
          },
          "operator" : "==",
          "right" : {
            "go-type" : 17,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 193,
      "code" : "if f.pcsp == 0 {\n\n\tbreak\n}",
      "entry" : false,
      "use-vars" : [ 35 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 63 ],
      "in-vars" : [ 15, 8, 38, 11, 7, 26, 9, 6, 35, 39, 40, 5, 3, 27, 4, 34, 31, 18, 33 ],
      "exit" : false,
      "out-vars" : [ 33, 6, 40, 5, 7, 4, 3, 26, 8, 27, 34, 18, 35, 15, 38, 11, 39, 31, 9 ],
      "decl-vars" : [ ],
      "line-start" : 192,
      "ast" : {
        "kind" : "statement",
        "label" : null,
        "type" : "break"
      },
      "assign-vars" : [ ],
      "line-end" : 192,
      "code" : "break",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 52, 66 ],
      "in-vars" : [ 38, 39, 4, 26, 33, 5, 15, 9, 6, 8, 35, 34, 40, 31, 3, 27, 11, 7, 18 ],
      "exit" : false,
      "out-vars" : [ 33, 8, 40, 18, 9, 5, 31, 4, 27, 35, 38, 6, 15, 11, 34, 7, 39, 3, 26 ],
      "decl-vars" : [ ],
      "line-start" : 197,
      "ast" : {
        "condition" : {
          "go-type" : 165,
          "kind" : "expression",
          "left" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "fp",
              "variable" : 42
            },
            "go-type" : 2,
            "kind" : "expression",
            "target" : {
              "go-type" : 118,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "frame",
                "variable" : 27
              }
            },
            "type" : "selector"
          },
          "operator" : "==",
          "right" : {
            "go-type" : 2,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 225,
      "code" : "if frame.fp == 0 {\n\n\tif flags&_TraceJumpStack != 0 && gp == gp.m.g0 && gp.m.curg != nil {\n\t\tswitch f.funcID {\n\t\tcase funcID_morestack:\n\n\t\t\tframe.pc = gp.m.curg.sched.pc\n\t\t\tframe.fn = findfunc(frame.pc)\n\t\t\tf = frame.fn\n\t\t\tframe.sp = gp.m.curg.sched.sp\n\t\t\tcgoCtxt = gp.m.curg.cgoCtxt\n\t\tcase funcID_systemstack:\n\n\t\t\tframe.sp = gp.m.curg.sched.sp\n\t\t\tcgoCtxt = gp.m.curg.cgoCtxt\n\t\t}\n\t}\n\tframe.fp = frame.sp + uintptr(funcspdelta(f, frame.pc, &cache))\n\tif !usesLR {\n\n\t\tframe.fp += sys.RegSize\n\t}\n}",
      "entry" : false,
      "use-vars" : [ 27 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 53, 63 ],
      "in-vars" : [ 26, 33, 11, 39, 40, 31, 4, 35, 34, 7, 6, 8, 18, 15, 27, 38, 5, 3, 9 ],
      "exit" : false,
      "out-vars" : [ 31, 26, 35, 11, 40, 18, 9, 8, 3, 6, 39, 5, 7, 4, 33, 15, 27, 38, 34 ],
      "decl-vars" : [ ],
      "line-start" : 200,
      "ast" : {
        "condition" : {
          "go-type" : 165,
          "kind" : "expression",
          "left" : {
            "go-type" : 165,
            "kind" : "expression",
            "left" : {
              "go-type" : 165,
              "kind" : "expression",
              "left" : {
                "go-type" : 97,
                "kind" : "expression",
                "left" : {
                  "go-type" : 97,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "flags",
                    "variable" : 9
                  }
                },
                "operator" : "&",
                "right" : {
                  "go-type" : 97,
                  "kind" : "constant",
                  "value" : {
                    "type" : "INT",
                    "value" : "4"
                  }
                },
                "type" : "binary"
              },
              "operator" : "!=",
              "right" : {
                "go-type" : 97,
                "kind" : "constant",
                "value" : {
                  "type" : "INT",
                  "value" : "0"
                }
              },
              "type" : "binary"
            },
            "operator" : "&&",
            "right" : {
              "go-type" : 165,
              "kind" : "expression",
              "left" : {
                "go-type" : 3,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "gp",
                  "variable" : 3
                }
              },
              "operator" : "==",
              "right" : {
                "field" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "g0",
                  "variable" : 43
                },
                "go-type" : 3,
                "kind" : "expression",
                "target" : {
                  "field" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "m",
                    "variable" : 13
                  },
                  "go-type" : 21,
                  "kind" : "expression",
                  "target" : {
                    "go-type" : 3,
                    "kind" : "expression",
                    "type" : "identifier",
                    "value" : {
                      "ident-kind" : "Var",
                      "kind" : "ident",
                      "value" : "gp",
                      "variable" : 3
                    }
                  },
                  "type" : "selector"
                },
                "type" : "selector"
              },
              "type" : "binary"
            },
            "type" : "binary"
          },
          "operator" : "&&",
          "right" : {
            "go-type" : 165,
            "kind" : "expression",
            "left" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "curg",
                "variable" : 14
              },
              "go-type" : 3,
              "kind" : "expression",
              "target" : {
                "field" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "m",
                  "variable" : 13
                },
                "go-type" : 21,
                "kind" : "expression",
                "target" : {
                  "go-type" : 3,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "gp",
                    "variable" : 3
                  }
                },
                "type" : "selector"
              },
              "type" : "selector"
            },
            "operator" : "!=",
            "right" : {
              "go-type" : 166,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Nil",
                "kind" : "ident",
                "value" : "nil"
              }
            },
            "type" : "binary"
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 219,
      "code" : "if flags&_TraceJumpStack != 0 && gp == gp.m.g0 && gp.m.curg != nil {\n\tswitch f.funcID {\n\tcase funcID_morestack:\n\n\t\tframe.pc = gp.m.curg.sched.pc\n\t\tframe.fn = findfunc(frame.pc)\n\t\tf = frame.fn\n\t\tframe.sp = gp.m.curg.sched.sp\n\t\tcgoCtxt = gp.m.curg.cgoCtxt\n\tcase funcID_systemstack:\n\n\t\tframe.sp = gp.m.curg.sched.sp\n\t\tcgoCtxt = gp.m.curg.cgoCtxt\n\t}\n}",
      "entry" : false,
      "use-vars" : [ 3, 9 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 54, 60, 63 ],
      "in-vars" : [ 7, 18, 3, 26, 39, 40, 5, 31, 33, 15, 27, 11, 34, 6, 8, 35, 38, 4, 9 ],
      "exit" : false,
      "out-vars" : [ 38, 11, 40, 26, 6, 15, 39, 27, 34, 18, 4, 8, 35, 5, 31, 7, 3, 9, 33 ],
      "decl-vars" : [ ],
      "line-start" : 201,
      "ast" : {
        "condition" : {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "funcID",
            "variable" : 44
          },
          "go-type" : 125,
          "kind" : "expression",
          "target" : {
            "go-type" : 120,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "f",
              "variable" : 35
            }
          },
          "type" : "selector"
        },
        "kind" : "statement",
        "type" : "switch"
      },
      "assign-vars" : [ ],
      "line-end" : 218,
      "code" : "switch f.funcID {\ncase funcID_morestack:\n\n\tframe.pc = gp.m.curg.sched.pc\n\tframe.fn = findfunc(frame.pc)\n\tf = frame.fn\n\tframe.sp = gp.m.curg.sched.sp\n\tcgoCtxt = gp.m.curg.cgoCtxt\ncase funcID_systemstack:\n\n\tframe.sp = gp.m.curg.sched.sp\n\tcgoCtxt = gp.m.curg.cgoCtxt\n}",
      "entry" : false,
      "use-vars" : [ 35 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 55 ],
      "in-vars" : [ 15, 8, 39, 34, 31, 7, 3, 6, 27, 38, 11, 5, 18, 26, 40, 4, 9 ],
      "exit" : false,
      "out-vars" : [ 11, 5, 39, 31, 18, 9, 6, 27, 38, 34, 40, 3, 26, 7, 4, 15, 8 ],
      "decl-vars" : [ ],
      "line-start" : 202,
      "ast" : {
        "expressions" : [ {
          "go-type" : 125,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "5"
          }
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 212,
      "code" : "case funcID_morestack:\n\n\tframe.pc = gp.m.curg.sched.pc\n\tframe.fn = findfunc(frame.pc)\n\tf = frame.fn\n\tframe.sp = gp.m.curg.sched.sp\n\tcgoCtxt = gp.m.curg.cgoCtxt",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ 27 ],
      "successors" : [ 56 ],
      "in-vars" : [ 40, 5, 38, 39, 6, 11, 4, 7, 18, 3, 26, 15, 34, 31, 8, 27, 9 ],
      "exit" : false,
      "out-vars" : [ 34, 31, 9, 11, 18, 3, 26, 8, 27, 39, 40, 15, 38, 5, 7, 4, 6 ],
      "decl-vars" : [ ],
      "line-start" : 208,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "pc",
            "variable" : 28
          },
          "go-type" : 2,
          "kind" : "expression",
          "target" : {
            "go-type" : 118,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "frame",
              "variable" : 27
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "pc",
            "variable" : 22
          },
          "go-type" : 2,
          "kind" : "expression",
          "target" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "sched",
              "variable" : 21
            },
            "go-type" : 24,
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "curg",
                "variable" : 14
              },
              "go-type" : 3,
              "kind" : "expression",
              "target" : {
                "field" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "m",
                  "variable" : 13
                },
                "go-type" : 21,
                "kind" : "expression",
                "target" : {
                  "go-type" : 3,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "gp",
                    "variable" : 3
                  }
                },
                "type" : "selector"
              },
              "type" : "selector"
            },
            "type" : "selector"
          },
          "type" : "selector"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 208,
      "code" : "frame.pc = gp.m.curg.sched.pc",
      "entry" : false,
      "use-vars" : [ 27, 3 ]
    }, {
      "update-vars" : [ 27 ],
      "successors" : [ 57 ],
      "in-vars" : [ 27, 39, 4, 26, 18, 3, 11, 34, 5, 31, 7, 6, 15, 8, 38, 40, 9 ],
      "exit" : false,
      "out-vars" : [ 38, 7, 18, 4, 9, 15, 11, 39, 31, 3, 26, 6, 27, 34, 8, 40, 5 ],
      "decl-vars" : [ ],
      "line-start" : 209,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "fn",
            "variable" : 37
          },
          "go-type" : 120,
          "kind" : "expression",
          "target" : {
            "go-type" : 118,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "frame",
              "variable" : 27
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "arguments" : [ {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "pc",
              "variable" : 28
            },
            "go-type" : 2,
            "kind" : "expression",
            "target" : {
              "go-type" : 118,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "frame",
                "variable" : 27
              }
            },
            "type" : "selector"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 174,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 4,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "findfunc"
            }
          },
          "go-type" : 120,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 209,
      "code" : "frame.fn = findfunc(frame.pc)",
      "entry" : false,
      "use-vars" : [ 27 ]
    }, {
      "update-vars" : [ 35 ],
      "successors" : [ 58 ],
      "in-vars" : [ 5, 4, 6, 15, 39, 38, 18, 27, 7, 9, 31, 34, 40, 3, 26, 8, 11 ],
      "exit" : false,
      "out-vars" : [ 38, 7, 4, 6, 35, 5, 18, 3, 9, 11, 39, 31, 26, 15, 8, 27, 34, 40 ],
      "decl-vars" : [ ],
      "line-start" : 210,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 120,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "f",
            "variable" : 35
          }
        } ],
        "right" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "fn",
            "variable" : 37
          },
          "go-type" : 120,
          "kind" : "expression",
          "target" : {
            "go-type" : 118,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "frame",
              "variable" : 27
            }
          },
          "type" : "selector"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 35 ],
      "line-end" : 210,
      "code" : "f = frame.fn",
      "entry" : false,
      "use-vars" : [ 27 ]
    }, {
      "update-vars" : [ 27 ],
      "successors" : [ 59 ],
      "in-vars" : [ 27, 39, 31, 15, 8, 35, 7, 4, 3, 26, 6, 40, 18, 9, 38, 11, 34, 5 ],
      "exit" : false,
      "out-vars" : [ 27, 34, 5, 18, 3, 7, 26, 9, 15, 8, 35, 38, 11, 39, 40, 31, 4, 6 ],
      "decl-vars" : [ ],
      "line-start" : 211,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "sp",
            "variable" : 29
          },
          "go-type" : 2,
          "kind" : "expression",
          "target" : {
            "go-type" : 118,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "frame",
              "variable" : 27
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "sp",
            "variable" : 23
          },
          "go-type" : 2,
          "kind" : "expression",
          "target" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "sched",
              "variable" : 21
            },
            "go-type" : 24,
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "curg",
                "variable" : 14
              },
              "go-type" : 3,
              "kind" : "expression",
              "target" : {
                "field" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "m",
                  "variable" : 13
                },
                "go-type" : 21,
                "kind" : "expression",
                "target" : {
                  "go-type" : 3,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "gp",
                    "variable" : 3
                  }
                },
                "type" : "selector"
              },
              "type" : "selector"
            },
            "type" : "selector"
          },
          "type" : "selector"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 211,
      "code" : "frame.sp = gp.m.curg.sched.sp",
      "entry" : false,
      "use-vars" : [ 3, 27 ]
    }, {
      "update-vars" : [ 33 ],
      "successors" : [ 63 ],
      "in-vars" : [ 27, 40, 9, 39, 31, 7, 18, 3, 8, 11, 5, 6, 35, 38, 34, 4, 26, 15 ],
      "exit" : false,
      "out-vars" : [ 31, 26, 27, 39, 3, 33, 11, 40, 18, 4, 9, 8, 35, 5, 7, 6, 15, 38, 34 ],
      "decl-vars" : [ ],
      "line-start" : 212,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 90,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "cgoCtxt",
            "variable" : 33
          }
        } ],
        "right" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "cgoCtxt",
            "variable" : 32
          },
          "go-type" : 90,
          "kind" : "expression",
          "target" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "curg",
              "variable" : 14
            },
            "go-type" : 3,
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "m",
                "variable" : 13
              },
              "go-type" : 21,
              "kind" : "expression",
              "target" : {
                "go-type" : 3,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "gp",
                  "variable" : 3
                }
              },
              "type" : "selector"
            },
            "type" : "selector"
          },
          "type" : "selector"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 33 ],
      "line-end" : 212,
      "code" : "cgoCtxt = gp.m.curg.cgoCtxt",
      "entry" : false,
      "use-vars" : [ 3 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 61 ],
      "in-vars" : [ 35, 27, 11, 5, 26, 6, 8, 38, 40, 7, 4, 3, 9, 15, 39, 34, 31, 18 ],
      "exit" : false,
      "out-vars" : [ 31, 18, 3, 39, 5, 7, 4, 6, 38, 8, 9, 35, 11, 34, 40, 26, 15, 27 ],
      "decl-vars" : [ ],
      "line-start" : 213,
      "ast" : {
        "expressions" : [ {
          "go-type" : 125,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "13"
          }
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 217,
      "code" : "case funcID_systemstack:\n\n\tframe.sp = gp.m.curg.sched.sp\n\tcgoCtxt = gp.m.curg.cgoCtxt",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ 27 ],
      "successors" : [ 62 ],
      "in-vars" : [ 39, 31, 3, 27, 38, 15, 8, 26, 9, 11, 6, 40, 5, 7, 18, 4, 35, 34 ],
      "exit" : false,
      "out-vars" : [ 38, 11, 39, 4, 26, 34, 40, 31, 18, 3, 27, 5, 6, 35, 7, 9, 15, 8 ],
      "decl-vars" : [ ],
      "line-start" : 216,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "sp",
            "variable" : 29
          },
          "go-type" : 2,
          "kind" : "expression",
          "target" : {
            "go-type" : 118,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "frame",
              "variable" : 27
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "sp",
            "variable" : 23
          },
          "go-type" : 2,
          "kind" : "expression",
          "target" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "sched",
              "variable" : 21
            },
            "go-type" : 24,
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "curg",
                "variable" : 14
              },
              "go-type" : 3,
              "kind" : "expression",
              "target" : {
                "field" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "m",
                  "variable" : 13
                },
                "go-type" : 21,
                "kind" : "expression",
                "target" : {
                  "go-type" : 3,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "gp",
                    "variable" : 3
                  }
                },
                "type" : "selector"
              },
              "type" : "selector"
            },
            "type" : "selector"
          },
          "type" : "selector"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 216,
      "code" : "frame.sp = gp.m.curg.sched.sp",
      "entry" : false,
      "use-vars" : [ 27, 3 ]
    }, {
      "update-vars" : [ 33 ],
      "successors" : [ 63 ],
      "in-vars" : [ 34, 9, 5, 18, 4, 3, 26, 15, 38, 40, 7, 8, 11, 31, 39, 6, 27, 35 ],
      "exit" : false,
      "out-vars" : [ 33, 38, 39, 40, 4, 26, 9, 27, 34, 31, 7, 6, 15, 35, 11, 5, 18, 3, 8 ],
      "decl-vars" : [ ],
      "line-start" : 217,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 90,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "cgoCtxt",
            "variable" : 33
          }
        } ],
        "right" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "cgoCtxt",
            "variable" : 32
          },
          "go-type" : 90,
          "kind" : "expression",
          "target" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "curg",
              "variable" : 14
            },
            "go-type" : 3,
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "m",
                "variable" : 13
              },
              "go-type" : 21,
              "kind" : "expression",
              "target" : {
                "go-type" : 3,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "gp",
                  "variable" : 3
                }
              },
              "type" : "selector"
            },
            "type" : "selector"
          },
          "type" : "selector"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 33 ],
      "line-end" : 217,
      "code" : "cgoCtxt = gp.m.curg.cgoCtxt",
      "entry" : false,
      "use-vars" : [ 3 ]
    }, {
      "update-vars" : [ 27 ],
      "successors" : [ 64 ],
      "in-vars" : [ 39, 5, 7, 33, 15, 27, 35, 11, 31, 8, 6, 40, 4, 9, 3, 26, 38, 34, 18 ],
      "exit" : false,
      "out-vars" : [ 33, 15, 38, 39, 18, 26, 31, 3, 9, 6, 8, 27, 11, 5, 4, 35, 34, 40, 7 ],
      "decl-vars" : [ ],
      "line-start" : 220,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "fp",
            "variable" : 42
          },
          "go-type" : 2,
          "kind" : "expression",
          "target" : {
            "go-type" : 118,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "frame",
              "variable" : 27
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "go-type" : 2,
          "kind" : "expression",
          "left" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "sp",
              "variable" : 29
            },
            "go-type" : 2,
            "kind" : "expression",
            "target" : {
              "go-type" : 118,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "frame",
                "variable" : 27
              }
            },
            "type" : "selector"
          },
          "operator" : "+",
          "right" : {
            "coerced-to" : {
              "go-type" : 2,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 2,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "uintptr"
              }
            },
            "go-type" : 2,
            "kind" : "expression",
            "target" : {
              "arguments" : [ {
                "go-type" : 120,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "f",
                  "variable" : 35
                }
              }, {
                "field" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "pc",
                  "variable" : 28
                },
                "go-type" : 2,
                "kind" : "expression",
                "target" : {
                  "go-type" : 118,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "frame",
                    "variable" : 27
                  }
                },
                "type" : "selector"
              }, {
                "go-type" : 191,
                "kind" : "expression",
                "operator" : "&",
                "target" : {
                  "go-type" : 183,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "cache",
                    "variable" : 38
                  }
                },
                "type" : "unary"
              } ],
              "ellipsis" : false,
              "function" : {
                "go-type" : 189,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "function" : 7,
                  "ident-kind" : "Func",
                  "kind" : "ident",
                  "value" : "funcspdelta"
                }
              },
              "go-type" : 17,
              "kind" : "expression",
              "type" : "call"
            },
            "type" : "cast"
          },
          "type" : "binary"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 220,
      "code" : "frame.fp = frame.sp + uintptr(funcspdelta(f, frame.pc, &cache))",
      "entry" : false,
      "use-vars" : [ 38, 27, 35 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 65, 66 ],
      "in-vars" : [ 27, 39, 40, 5, 9, 33, 6, 15, 8, 11, 18, 4, 3, 26, 35, 38, 34, 31, 7 ],
      "exit" : false,
      "out-vars" : [ 34, 31, 15, 35, 11, 3, 26, 40, 5, 39, 9, 33, 6, 8, 27, 38, 4, 7, 18 ],
      "decl-vars" : [ ],
      "line-start" : 221,
      "ast" : {
        "condition" : {
          "go-type" : 165,
          "kind" : "constant",
          "value" : {
            "type" : "BOOL",
            "value" : "true"
          }
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 224,
      "code" : "if !usesLR {\n\n\tframe.fp += sys.RegSize\n}",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ 27 ],
      "successors" : [ 66 ],
      "in-vars" : [ 6, 8, 39, 4, 3, 9, 33, 35, 7, 18, 31, 26, 27, 11, 34, 15, 38, 40, 5 ],
      "exit" : false,
      "out-vars" : [ 3, 6, 8, 27, 5, 34, 40, 4, 9, 15, 11, 39, 26, 31, 7, 18, 33, 35, 38 ],
      "decl-vars" : [ ],
      "line-start" : 223,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "fp",
            "variable" : 42
          },
          "go-type" : 2,
          "kind" : "expression",
          "target" : {
            "go-type" : 118,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "frame",
              "variable" : 27
            }
          },
          "type" : "selector"
        } ],
        "operator" : "+",
        "right" : [ {
          "go-type" : 2,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "8"
          }
        } ],
        "type" : "assign-operator"
      },
      "assign-vars" : [ ],
      "line-end" : 223,
      "code" : "frame.fp += sys.RegSize",
      "entry" : false,
      "use-vars" : [ 27 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 67 ],
      "in-vars" : [ 31, 9, 8, 11, 18, 4, 3, 26, 15, 38, 39, 40, 7, 27, 35, 34, 5, 33, 6 ],
      "exit" : false,
      "out-vars" : [ 4, 39, 45, 11, 40, 7, 8, 38, 6, 15, 31, 35, 34, 5, 18, 3, 26, 9, 27, 33 ],
      "decl-vars" : [ 45 ],
      "line-start" : 226,
      "ast" : {
        "kind" : "statement",
        "target" : {
          "kind" : "decl",
          "specs" : [ {
            "comments" : [ ],
            "declared-type" : {
              "go-type" : 120,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 120,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "funcInfo"
              }
            },
            "kind" : "spec",
            "names" : [ {
              "ident-kind" : "NoKind",
              "kind" : "ident",
              "value" : "flr"
            } ],
            "type" : "var",
            "values" : [ ]
          } ],
          "type" : "var"
        },
        "type" : "declaration"
      },
      "assign-vars" : [ ],
      "line-end" : 226,
      "code" : "var flr funcInfo",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 68, 70 ],
      "in-vars" : [ 15, 45, 34, 26, 9, 18, 4, 3, 8, 38, 11, 39, 7, 35, 31, 6, 27, 40, 5, 33 ],
      "exit" : false,
      "out-vars" : [ 9, 38, 7, 18, 15, 27, 11, 34, 5, 31, 6, 8, 35, 45, 39, 26, 33, 40, 4, 3 ],
      "decl-vars" : [ ],
      "line-start" : 227,
      "ast" : {
        "condition" : {
          "arguments" : [ {
            "go-type" : 120,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "f",
              "variable" : 35
            }
          }, {
            "go-type" : 13,
            "kind" : "expression",
            "left" : {
              "go-type" : 13,
              "kind" : "expression",
              "left" : {
                "field" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "m",
                  "variable" : 13
                },
                "go-type" : 21,
                "kind" : "expression",
                "target" : {
                  "go-type" : 3,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "gp",
                    "variable" : 3
                  }
                },
                "type" : "selector"
              },
              "operator" : "!=",
              "right" : {
                "go-type" : 166,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Nil",
                  "kind" : "ident",
                  "value" : "nil"
                }
              },
              "type" : "binary"
            },
            "operator" : "&&",
            "right" : {
              "go-type" : 13,
              "kind" : "expression",
              "left" : {
                "go-type" : 3,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "gp",
                  "variable" : 3
                }
              },
              "operator" : "==",
              "right" : {
                "field" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "g0",
                  "variable" : 43
                },
                "go-type" : 3,
                "kind" : "expression",
                "target" : {
                  "field" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "m",
                    "variable" : 13
                  },
                  "go-type" : 21,
                  "kind" : "expression",
                  "target" : {
                    "go-type" : 3,
                    "kind" : "expression",
                    "type" : "identifier",
                    "value" : {
                      "ident-kind" : "Var",
                      "kind" : "ident",
                      "value" : "gp",
                      "variable" : 3
                    }
                  },
                  "type" : "selector"
                },
                "type" : "selector"
              },
              "type" : "binary"
            },
            "type" : "binary"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 193,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 8,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "topofstack"
            }
          },
          "go-type" : 13,
          "kind" : "expression",
          "type" : "call"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 276,
      "code" : "if topofstack(f, gp.m != nil && gp == gp.m.g0) {\n\tframe.lr = 0\n\tflr = funcInfo{}\n} else if usesLR && f.funcID == funcID_jmpdefer {\n\n\tif callback != nil {\n\t\tthrow(\"traceback_arm: found jmpdefer when tracing with callback\")\n\t}\n\tframe.lr = 0\n} else {\n\tvar lrPtr uintptr\n\tif usesLR {\n\t\tif n == 0 && frame.sp < frame.fp || frame.lr == 0 {\n\t\t\tlrPtr = frame.sp\n\t\t\tframe.lr = *(*uintptr)(unsafe.Pointer(lrPtr))\n\t\t}\n\t} else {\n\t\tif frame.lr == 0 {\n\t\t\tlrPtr = frame.fp - sys.RegSize\n\t\t\tframe.lr = uintptr(*(*sys.Uintreg)(unsafe.Pointer(lrPtr)))\n\t\t}\n\t}\n\tflr = findfunc(frame.lr)\n\tif !flr.valid() {\n\n\t\tdoPrint := printing\n\t\tif doPrint && gp.m.incgo && f.funcID == funcID_sigpanic {\n\n\t\t\tdoPrint = false\n\t\t}\n\t\tif callback != nil || doPrint {\n\t\t\tprint(\"runtime: unexpected return pc for \", funcname(f), \" called from \", hex(frame.lr), \"\\n\")\n\t\t\ttracebackHexdump(gp.stack, &frame, lrPtr)\n\t\t}\n\t\tif callback != nil {\n\t\t\tthrow(\"unknown caller pc\")\n\t\t}\n\t}\n}",
      "entry" : false,
      "use-vars" : [ 35, 3 ]
    }, {
      "update-vars" : [ 27 ],
      "successors" : [ 69 ],
      "in-vars" : [ 27, 11, 4, 15, 38, 34, 40, 5, 3, 33, 6, 35, 7, 26, 8, 39, 31, 18, 9 ],
      "exit" : false,
      "out-vars" : [ 27, 40, 5, 3, 33, 6, 15, 31, 18, 26, 8, 11, 9, 35, 38, 39, 34, 7, 4 ],
      "decl-vars" : [ ],
      "line-start" : 228,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "lr",
            "variable" : 30
          },
          "go-type" : 2,
          "kind" : "expression",
          "target" : {
            "go-type" : 118,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "frame",
              "variable" : 27
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "go-type" : 2,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "0"
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 228,
      "code" : "frame.lr = 0",
      "entry" : false,
      "use-vars" : [ 27 ]
    }, {
      "update-vars" : [ 45 ],
      "successors" : [ 92 ],
      "in-vars" : [ 4, 27, 35, 38, 11, 39, 40, 18, 3, 9, 31, 6, 15, 8, 5, 26, 33, 34, 7 ],
      "exit" : false,
      "out-vars" : [ 34, 7, 18, 8, 27, 11, 3, 33, 6, 45, 31, 35, 9, 40, 5, 4, 26, 15, 38, 39 ],
      "decl-vars" : [ ],
      "line-start" : 229,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 120,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "flr",
            "variable" : 45
          }
        } ],
        "right" : [ {
          "declared" : {
            "go-type" : 120,
            "kind" : "type",
            "type" : "identifier",
            "value" : {
              "go-type" : 120,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "funcInfo"
            }
          },
          "go-type" : 120,
          "kind" : "literal",
          "type" : "composite",
          "values" : [ ]
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 45 ],
      "line-end" : 229,
      "code" : "flr = funcInfo{}",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 71, 74 ],
      "in-vars" : [ 35, 39, 31, 8, 38, 34, 40, 26, 9, 33, 7, 4, 6, 15, 27, 45, 11, 5, 18, 3 ],
      "exit" : false,
      "out-vars" : [ 4, 18, 5, 31, 8, 27, 45, 39, 40, 7, 3, 9, 35, 11, 34, 26, 33, 6, 15, 38 ],
      "decl-vars" : [ ],
      "line-start" : 230,
      "ast" : {
        "condition" : {
          "go-type" : 165,
          "kind" : "expression",
          "left" : {
            "go-type" : 165,
            "kind" : "constant",
            "value" : {
              "type" : "BOOL",
              "value" : "false"
            }
          },
          "operator" : "&&",
          "right" : {
            "go-type" : 165,
            "kind" : "expression",
            "left" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "funcID",
                "variable" : 44
              },
              "go-type" : 125,
              "kind" : "expression",
              "target" : {
                "go-type" : 120,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "f",
                  "variable" : 35
                }
              },
              "type" : "selector"
            },
            "operator" : "==",
            "right" : {
              "go-type" : 125,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "3"
              }
            },
            "type" : "binary"
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 276,
      "code" : "if usesLR && f.funcID == funcID_jmpdefer {\n\n\tif callback != nil {\n\t\tthrow(\"traceback_arm: found jmpdefer when tracing with callback\")\n\t}\n\tframe.lr = 0\n} else {\n\tvar lrPtr uintptr\n\tif usesLR {\n\t\tif n == 0 && frame.sp < frame.fp || frame.lr == 0 {\n\t\t\tlrPtr = frame.sp\n\t\t\tframe.lr = *(*uintptr)(unsafe.Pointer(lrPtr))\n\t\t}\n\t} else {\n\t\tif frame.lr == 0 {\n\t\t\tlrPtr = frame.fp - sys.RegSize\n\t\t\tframe.lr = uintptr(*(*sys.Uintreg)(unsafe.Pointer(lrPtr)))\n\t\t}\n\t}\n\tflr = findfunc(frame.lr)\n\tif !flr.valid() {\n\n\t\tdoPrint := printing\n\t\tif doPrint && gp.m.incgo && f.funcID == funcID_sigpanic {\n\n\t\t\tdoPrint = false\n\t\t}\n\t\tif callback != nil || doPrint {\n\t\t\tprint(\"runtime: unexpected return pc for \", funcname(f), \" called from \", hex(frame.lr), \"\\n\")\n\t\t\ttracebackHexdump(gp.stack, &frame, lrPtr)\n\t\t}\n\t\tif callback != nil {\n\t\t\tthrow(\"unknown caller pc\")\n\t\t}\n\t}\n}",
      "entry" : false,
      "use-vars" : [ 35 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 72, 73 ],
      "in-vars" : [ 27, 40, 31, 33, 38, 11, 34, 5, 4, 35, 45, 39, 7, 18, 6, 15, 8, 3, 26, 9 ],
      "exit" : false,
      "out-vars" : [ 6, 15, 8, 5, 4, 9, 27, 35, 33, 45, 40, 7, 34, 31, 18, 3, 26, 38, 11, 39 ],
      "decl-vars" : [ ],
      "line-start" : 237,
      "ast" : {
        "condition" : {
          "go-type" : 165,
          "kind" : "expression",
          "left" : {
            "go-type" : 115,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "callback",
              "variable" : 7
            }
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 166,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Nil",
              "kind" : "ident",
              "value" : "nil"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 239,
      "code" : "if callback != nil {\n\tthrow(\"traceback_arm: found jmpdefer when tracing with callback\")\n}",
      "entry" : false,
      "use-vars" : [ 7 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 73 ],
      "in-vars" : [ 38, 34, 40, 3, 33, 45, 7, 26, 6, 15, 8, 4, 9, 27, 35, 11, 39, 5, 31, 18 ],
      "exit" : false,
      "out-vars" : [ 9, 33, 6, 8, 45, 39, 31, 18, 27, 35, 40, 3, 15, 38, 11, 34, 7, 5, 4, 26 ],
      "decl-vars" : [ ],
      "line-start" : 238,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 39,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "traceback_arm: found jmpdefer when tracing with callback"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 167,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 1,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "throw"
            }
          },
          "go-type" : 36,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 238,
      "code" : "throw(\"traceback_arm: found jmpdefer when tracing with callback\")",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ 27 ],
      "successors" : [ 92 ],
      "in-vars" : [ 15, 45, 11, 18, 9, 6, 27, 5, 7, 3, 26, 34, 40, 8, 33, 35, 38, 39, 31, 4 ],
      "exit" : false,
      "out-vars" : [ 31, 7, 3, 26, 27, 11, 39, 9, 33, 35, 38, 5, 8, 45, 34, 4, 15, 40, 18, 6 ],
      "decl-vars" : [ ],
      "line-start" : 240,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "lr",
            "variable" : 30
          },
          "go-type" : 2,
          "kind" : "expression",
          "target" : {
            "go-type" : 118,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "frame",
              "variable" : 27
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "go-type" : 2,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "0"
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 240,
      "code" : "frame.lr = 0",
      "entry" : false,
      "use-vars" : [ 27 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 75 ],
      "in-vars" : [ 11, 39, 7, 9, 8, 33, 38, 34, 5, 18, 26, 40, 31, 4, 27, 35, 3, 6, 15 ],
      "exit" : false,
      "out-vars" : [ 39, 34, 7, 6, 8, 27, 38, 40, 31, 3, 26, 15, 5, 46, 35, 11, 18, 4, 9, 33 ],
      "decl-vars" : [ 46 ],
      "line-start" : 242,
      "ast" : {
        "kind" : "statement",
        "target" : {
          "kind" : "decl",
          "specs" : [ {
            "comments" : [ ],
            "declared-type" : {
              "go-type" : 2,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 2,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "uintptr"
              }
            },
            "kind" : "spec",
            "names" : [ {
              "ident-kind" : "NoKind",
              "kind" : "ident",
              "value" : "lrPtr"
            } ],
            "type" : "var",
            "values" : [ ]
          } ],
          "type" : "var"
        },
        "type" : "declaration"
      },
      "assign-vars" : [ ],
      "line-end" : 242,
      "code" : "var lrPtr uintptr",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 76, 79 ],
      "in-vars" : [ 31, 3, 33, 34, 40, 5, 18, 6, 38, 11, 39, 15, 46, 8, 27, 7, 4, 35, 26, 9 ],
      "exit" : false,
      "out-vars" : [ 7, 9, 15, 5, 46, 26, 11, 39, 40, 18, 33, 8, 35, 38, 34, 31, 4, 3, 6, 27 ],
      "decl-vars" : [ ],
      "line-start" : 243,
      "ast" : {
        "condition" : {
          "go-type" : 165,
          "kind" : "constant",
          "value" : {
            "type" : "BOOL",
            "value" : "false"
          }
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 253,
      "code" : "if usesLR {\n\tif n == 0 && frame.sp < frame.fp || frame.lr == 0 {\n\t\tlrPtr = frame.sp\n\t\tframe.lr = *(*uintptr)(unsafe.Pointer(lrPtr))\n\t}\n} else {\n\tif frame.lr == 0 {\n\t\tlrPtr = frame.fp - sys.RegSize\n\t\tframe.lr = uintptr(*(*sys.Uintreg)(unsafe.Pointer(lrPtr)))\n\t}\n}",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 77, 82 ],
      "in-vars" : [ 8, 40, 18, 4, 26, 9, 27, 34, 5, 7, 6, 11, 15, 46, 33, 35, 38, 39, 31, 3 ],
      "exit" : false,
      "out-vars" : [ 31, 4, 9, 6, 35, 38, 33, 8, 40, 5, 34, 3, 39, 7, 18, 46, 26, 15, 27, 11 ],
      "decl-vars" : [ ],
      "line-start" : 244,
      "ast" : {
        "condition" : {
          "go-type" : 165,
          "kind" : "expression",
          "left" : {
            "go-type" : 165,
            "kind" : "expression",
            "left" : {
              "go-type" : 165,
              "kind" : "expression",
              "left" : {
                "go-type" : 78,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "n",
                  "variable" : 40
                }
              },
              "operator" : "==",
              "right" : {
                "go-type" : 78,
                "kind" : "constant",
                "value" : {
                  "type" : "INT",
                  "value" : "0"
                }
              },
              "type" : "binary"
            },
            "operator" : "&&",
            "right" : {
              "go-type" : 165,
              "kind" : "expression",
              "left" : {
                "field" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "sp",
                  "variable" : 29
                },
                "go-type" : 2,
                "kind" : "expression",
                "target" : {
                  "go-type" : 118,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "frame",
                    "variable" : 27
                  }
                },
                "type" : "selector"
              },
              "operator" : "<",
              "right" : {
                "field" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "fp",
                  "variable" : 42
                },
                "go-type" : 2,
                "kind" : "expression",
                "target" : {
                  "go-type" : 118,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "frame",
                    "variable" : 27
                  }
                },
                "type" : "selector"
              },
              "type" : "binary"
            },
            "type" : "binary"
          },
          "operator" : "||",
          "right" : {
            "go-type" : 165,
            "kind" : "expression",
            "left" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "lr",
                "variable" : 30
              },
              "go-type" : 2,
              "kind" : "expression",
              "target" : {
                "go-type" : 118,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "frame",
                  "variable" : 27
                }
              },
              "type" : "selector"
            },
            "operator" : "==",
            "right" : {
              "go-type" : 2,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "0"
              }
            },
            "type" : "binary"
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 247,
      "code" : "if n == 0 && frame.sp < frame.fp || frame.lr == 0 {\n\tlrPtr = frame.sp\n\tframe.lr = *(*uintptr)(unsafe.Pointer(lrPtr))\n}",
      "entry" : false,
      "use-vars" : [ 27, 40 ]
    }, {
      "update-vars" : [ 46 ],
      "successors" : [ 78 ],
      "in-vars" : [ 39, 7, 26, 33, 6, 38, 11, 15, 27, 3, 8, 31, 9, 40, 5, 18, 4, 35, 34 ],
      "exit" : false,
      "out-vars" : [ 5, 31, 18, 46, 33, 27, 40, 7, 26, 6, 38, 15, 8, 34, 11, 39, 4, 3, 9, 35 ],
      "decl-vars" : [ ],
      "line-start" : 245,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 2,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "lrPtr",
            "variable" : 46
          }
        } ],
        "right" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "sp",
            "variable" : 29
          },
          "go-type" : 2,
          "kind" : "expression",
          "target" : {
            "go-type" : 118,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "frame",
              "variable" : 27
            }
          },
          "type" : "selector"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 46 ],
      "line-end" : 245,
      "code" : "lrPtr = frame.sp",
      "entry" : false,
      "use-vars" : [ 27 ]
    }, {
      "update-vars" : [ 27 ],
      "successors" : [ 82 ],
      "in-vars" : [ 35, 18, 15, 27, 39, 34, 40, 4, 9, 38, 26, 33, 8, 11, 31, 7, 3, 46, 6, 5 ],
      "exit" : false,
      "out-vars" : [ 33, 34, 7, 18, 3, 31, 46, 9, 8, 38, 39, 40, 5, 6, 27, 35, 4, 26, 11, 15 ],
      "decl-vars" : [ ],
      "line-start" : 246,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "lr",
            "variable" : 30
          },
          "go-type" : 2,
          "kind" : "expression",
          "target" : {
            "go-type" : 118,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "frame",
              "variable" : 27
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "go-type" : 2,
          "kind" : "expression",
          "target" : {
            "coerced-to" : {
              "contained" : {
                "go-type" : 2,
                "kind" : "type",
                "type" : "identifier",
                "value" : {
                  "go-type" : 2,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "uintptr"
                }
              },
              "go-type" : 114,
              "kind" : "type",
              "type" : "pointer"
            },
            "go-type" : 114,
            "kind" : "expression",
            "target" : {
              "coerced-to" : {
                "go-type" : 11,
                "kind" : "type",
                "qualifier" : {
                  "ident-kind" : "PkgName",
                  "kind" : "ident",
                  "package" : 1,
                  "value" : "unsafe"
                },
                "type" : "identifier",
                "value" : {
                  "go-type" : 11,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "Pointer"
                }
              },
              "go-type" : 11,
              "kind" : "expression",
              "target" : {
                "go-type" : 2,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "lrPtr",
                  "variable" : 46
                }
              },
              "type" : "cast"
            },
            "type" : "cast"
          },
          "type" : "star"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 246,
      "code" : "frame.lr = *(*uintptr)(unsafe.Pointer(lrPtr))",
      "entry" : false,
      "use-vars" : [ 46, 27 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 80, 82 ],
      "in-vars" : [ 40, 31, 18, 3, 26, 27, 38, 11, 33, 4, 9, 15, 35, 34, 5, 46, 8, 39, 7, 6 ],
      "exit" : false,
      "out-vars" : [ 35, 38, 40, 8, 27, 31, 7, 18, 3, 46, 33, 11, 4, 26, 6, 15, 34, 5, 9, 39 ],
      "decl-vars" : [ ],
      "line-start" : 249,
      "ast" : {
        "condition" : {
          "go-type" : 165,
          "kind" : "expression",
          "left" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "lr",
              "variable" : 30
            },
            "go-type" : 2,
            "kind" : "expression",
            "target" : {
              "go-type" : 118,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "frame",
                "variable" : 27
              }
            },
            "type" : "selector"
          },
          "operator" : "==",
          "right" : {
            "go-type" : 2,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 252,
      "code" : "if frame.lr == 0 {\n\tlrPtr = frame.fp - sys.RegSize\n\tframe.lr = uintptr(*(*sys.Uintreg)(unsafe.Pointer(lrPtr)))\n}",
      "entry" : false,
      "use-vars" : [ 27 ]
    }, {
      "update-vars" : [ 46 ],
      "successors" : [ 81 ],
      "in-vars" : [ 27, 35, 31, 26, 5, 18, 3, 6, 11, 39, 40, 9, 33, 15, 8, 38, 34, 7, 4 ],
      "exit" : false,
      "out-vars" : [ 15, 7, 26, 39, 40, 31, 9, 35, 11, 5, 18, 3, 46, 8, 27, 38, 33, 6, 34, 4 ],
      "decl-vars" : [ ],
      "line-start" : 250,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 2,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "lrPtr",
            "variable" : 46
          }
        } ],
        "right" : [ {
          "go-type" : 2,
          "kind" : "expression",
          "left" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "fp",
              "variable" : 42
            },
            "go-type" : 2,
            "kind" : "expression",
            "target" : {
              "go-type" : 118,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "frame",
                "variable" : 27
              }
            },
            "type" : "selector"
          },
          "operator" : "-",
          "right" : {
            "go-type" : 2,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "8"
            }
          },
          "type" : "binary"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 46 ],
      "line-end" : 250,
      "code" : "lrPtr = frame.fp - sys.RegSize",
      "entry" : false,
      "use-vars" : [ 27 ]
    }, {
      "update-vars" : [ 27 ],
      "successors" : [ 82 ],
      "in-vars" : [ 46, 26, 34, 7, 3, 33, 6, 27, 18, 4, 31, 35, 38, 39, 9, 15, 8, 11, 40, 5 ],
      "exit" : false,
      "out-vars" : [ 27, 35, 5, 18, 8, 11, 39, 7, 46, 9, 38, 40, 31, 4, 15, 34, 3, 26, 33, 6 ],
      "decl-vars" : [ ],
      "line-start" : 251,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "lr",
            "variable" : 30
          },
          "go-type" : 2,
          "kind" : "expression",
          "target" : {
            "go-type" : 118,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "frame",
              "variable" : 27
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "coerced-to" : {
            "go-type" : 2,
            "kind" : "type",
            "type" : "identifier",
            "value" : {
              "go-type" : 2,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "uintptr"
            }
          },
          "go-type" : 2,
          "kind" : "expression",
          "target" : {
            "go-type" : 27,
            "kind" : "expression",
            "target" : {
              "coerced-to" : {
                "contained" : {
                  "go-type" : 27,
                  "kind" : "type",
                  "qualifier" : {
                    "ident-kind" : "PkgName",
                    "kind" : "ident",
                    "package" : 2,
                    "value" : "sys"
                  },
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 27,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "Uintreg"
                  }
                },
                "go-type" : 173,
                "kind" : "type",
                "type" : "pointer"
              },
              "go-type" : 173,
              "kind" : "expression",
              "target" : {
                "coerced-to" : {
                  "go-type" : 11,
                  "kind" : "type",
                  "qualifier" : {
                    "ident-kind" : "PkgName",
                    "kind" : "ident",
                    "package" : 1,
                    "value" : "unsafe"
                  },
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 11,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "Pointer"
                  }
                },
                "go-type" : 11,
                "kind" : "expression",
                "target" : {
                  "go-type" : 2,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "lrPtr",
                    "variable" : 46
                  }
                },
                "type" : "cast"
              },
              "type" : "cast"
            },
            "type" : "star"
          },
          "type" : "cast"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 251,
      "code" : "frame.lr = uintptr(*(*sys.Uintreg)(unsafe.Pointer(lrPtr)))",
      "entry" : false,
      "use-vars" : [ 46, 27 ]
    }, {
      "update-vars" : [ 45 ],
      "successors" : [ 83 ],
      "in-vars" : [ 27, 38, 11, 3, 26, 15, 18, 8, 35, 39, 40, 5, 31, 4, 46, 9, 34, 7, 33, 6 ],
      "exit" : false,
      "out-vars" : [ 3, 7, 40, 31, 26, 11, 38, 45, 39, 34, 5, 18, 4, 35, 33, 6, 15, 8, 9, 46, 27 ],
      "decl-vars" : [ ],
      "line-start" : 254,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 120,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "flr",
            "variable" : 45
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "lr",
              "variable" : 30
            },
            "go-type" : 2,
            "kind" : "expression",
            "target" : {
              "go-type" : 118,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "frame",
                "variable" : 27
              }
            },
            "type" : "selector"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 174,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 4,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "findfunc"
            }
          },
          "go-type" : 120,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 45 ],
      "line-end" : 254,
      "code" : "flr = findfunc(frame.lr)",
      "entry" : false,
      "use-vars" : [ 27 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 84, 92 ],
      "in-vars" : [ 35, 7, 4, 15, 31, 3, 38, 45, 11, 34, 26, 33, 8, 27, 40, 18, 46, 39, 5, 9, 6 ],
      "exit" : false,
      "out-vars" : [ 45, 7, 18, 4, 15, 8, 33, 6, 35, 38, 11, 39, 31, 26, 34, 40, 5, 3, 46, 27, 9 ],
      "decl-vars" : [ ],
      "line-start" : 255,
      "ast" : {
        "condition" : {
          "go-type" : 13,
          "kind" : "expression",
          "operator" : "!",
          "target" : {
            "arguments" : [ ],
            "ellipsis" : false,
            "function" : {
              "field" : {
                "function" : 5,
                "ident-kind" : "Func",
                "kind" : "ident",
                "value" : "valid"
              },
              "go-type" : 177,
              "kind" : "expression",
              "target" : {
                "go-type" : 120,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "flr",
                  "variable" : 45
                }
              },
              "type" : "selector"
            },
            "go-type" : 13,
            "kind" : "expression",
            "type" : "call"
          },
          "type" : "unary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 275,
      "code" : "if !flr.valid() {\n\n\tdoPrint := printing\n\tif doPrint && gp.m.incgo && f.funcID == funcID_sigpanic {\n\n\t\tdoPrint = false\n\t}\n\tif callback != nil || doPrint {\n\t\tprint(\"runtime: unexpected return pc for \", funcname(f), \" called from \", hex(frame.lr), \"\\n\")\n\t\ttracebackHexdump(gp.stack, &frame, lrPtr)\n\t}\n\tif callback != nil {\n\t\tthrow(\"unknown caller pc\")\n\t}\n}",
      "entry" : false,
      "use-vars" : [ 45 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 85 ],
      "in-vars" : [ 27, 45, 11, 7, 18, 15, 39, 40, 5, 9, 33, 38, 34, 31, 3, 46, 26, 6, 8, 35, 4 ],
      "exit" : false,
      "out-vars" : [ 6, 35, 11, 5, 3, 26, 38, 40, 18, 46, 4, 9, 33, 15, 27, 45, 39, 7, 47, 34, 31, 8 ],
      "decl-vars" : [ 47 ],
      "line-start" : 260,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "doPrint"
          }
        } ],
        "right" : [ {
          "go-type" : 13,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "printing",
            "variable" : 34
          }
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 260,
      "code" : "doPrint := printing",
      "entry" : false,
      "use-vars" : [ 34 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 86, 87 ],
      "in-vars" : [ 5, 31, 26, 9, 6, 15, 35, 40, 18, 3, 46, 33, 8, 45, 11, 34, 7, 27, 39, 47, 4, 38 ],
      "exit" : false,
      "out-vars" : [ 35, 38, 45, 39, 34, 5, 31, 7, 15, 9, 27, 11, 47, 40, 4, 46, 6, 18, 3, 26, 33, 8 ],
      "decl-vars" : [ ],
      "line-start" : 261,
      "ast" : {
        "condition" : {
          "go-type" : 13,
          "kind" : "expression",
          "left" : {
            "go-type" : 13,
            "kind" : "expression",
            "left" : {
              "go-type" : 13,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "doPrint",
                "variable" : 47
              }
            },
            "operator" : "&&",
            "right" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "incgo",
                "variable" : 48
              },
              "go-type" : 13,
              "kind" : "expression",
              "target" : {
                "field" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "m",
                  "variable" : 13
                },
                "go-type" : 21,
                "kind" : "expression",
                "target" : {
                  "go-type" : 3,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "gp",
                    "variable" : 3
                  }
                },
                "type" : "selector"
              },
              "type" : "selector"
            },
            "type" : "binary"
          },
          "operator" : "&&",
          "right" : {
            "go-type" : 13,
            "kind" : "expression",
            "left" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "funcID",
                "variable" : 44
              },
              "go-type" : 125,
              "kind" : "expression",
              "target" : {
                "go-type" : 120,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "f",
                  "variable" : 35
                }
              },
              "type" : "selector"
            },
            "operator" : "==",
            "right" : {
              "go-type" : 125,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "9"
              }
            },
            "type" : "binary"
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 267,
      "code" : "if doPrint && gp.m.incgo && f.funcID == funcID_sigpanic {\n\n\tdoPrint = false\n}",
      "entry" : false,
      "use-vars" : [ 47, 3, 35 ]
    }, {
      "update-vars" : [ 47 ],
      "successors" : [ 87 ],
      "in-vars" : [ 27, 35, 46, 9, 38, 40, 7, 3, 26, 15, 8, 45, 11, 34, 31, 18, 6, 39, 5, 4, 33 ],
      "exit" : false,
      "out-vars" : [ 38, 45, 46, 6, 35, 4, 33, 3, 27, 39, 47, 31, 7, 18, 26, 9, 11, 34, 40, 5, 15, 8 ],
      "decl-vars" : [ ],
      "line-start" : 266,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 13,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "doPrint",
            "variable" : 47
          }
        } ],
        "right" : [ {
          "go-type" : 13,
          "kind" : "constant",
          "value" : {
            "type" : "BOOL",
            "value" : "false"
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 47 ],
      "line-end" : 266,
      "code" : "doPrint = false",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 88, 90 ],
      "in-vars" : [ 35, 11, 7, 26, 15, 45, 47, 40, 5, 31, 39, 3, 9, 6, 8, 46, 33, 27, 38, 34, 18, 4 ],
      "exit" : false,
      "out-vars" : [ 38, 7, 33, 4, 3, 15, 27, 11, 40, 31, 18, 39, 34, 5, 26, 9, 35, 45, 46, 6, 8 ],
      "decl-vars" : [ ],
      "line-start" : 268,
      "ast" : {
        "condition" : {
          "go-type" : 13,
          "kind" : "expression",
          "left" : {
            "go-type" : 13,
            "kind" : "expression",
            "left" : {
              "go-type" : 115,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "callback",
                "variable" : 7
              }
            },
            "operator" : "!=",
            "right" : {
              "go-type" : 166,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Nil",
                "kind" : "ident",
                "value" : "nil"
              }
            },
            "type" : "binary"
          },
          "operator" : "||",
          "right" : {
            "go-type" : 13,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "doPrint",
              "variable" : 47
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 271,
      "code" : "if callback != nil || doPrint {\n\tprint(\"runtime: unexpected return pc for \", funcname(f), \" called from \", hex(frame.lr), \"\\n\")\n\ttracebackHexdump(gp.stack, &frame, lrPtr)\n}",
      "entry" : false,
      "use-vars" : [ 7, 47 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 89 ],
      "in-vars" : [ 31, 9, 6, 34, 40, 27, 35, 39, 11, 15, 7, 18, 4, 3, 46, 38, 45, 5, 26, 33, 8 ],
      "exit" : false,
      "out-vars" : [ 18, 3, 26, 9, 6, 11, 39, 34, 31, 33, 8, 38, 45, 40, 7, 5, 4, 46, 15, 27, 35 ],
      "decl-vars" : [ ],
      "line-start" : 269,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 39,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "runtime: unexpected return pc for "
            }
          }, {
            "arguments" : [ {
              "go-type" : 120,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "f",
                "variable" : 35
              }
            } ],
            "ellipsis" : false,
            "function" : {
              "go-type" : 197,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "function" : 9,
                "ident-kind" : "Func",
                "kind" : "ident",
                "value" : "funcname"
              }
            },
            "go-type" : 39,
            "kind" : "expression",
            "type" : "call"
          }, {
            "go-type" : 39,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : " called from "
            }
          }, {
            "coerced-to" : {
              "go-type" : 180,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 180,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "hex"
              }
            },
            "go-type" : 180,
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "lr",
                "variable" : 30
              },
              "go-type" : 2,
              "kind" : "expression",
              "target" : {
                "go-type" : 118,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "frame",
                  "variable" : 27
                }
              },
              "type" : "selector"
            },
            "type" : "cast"
          }, {
            "go-type" : 39,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "\n"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 195,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Builtin",
              "kind" : "ident",
              "value" : "print"
            }
          },
          "go-type" : 36,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 269,
      "code" : "print(\"runtime: unexpected return pc for \", funcname(f), \" called from \", hex(frame.lr), \"\\n\")",
      "entry" : false,
      "use-vars" : [ 27, 35 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 90 ],
      "in-vars" : [ 33, 35, 11, 7, 9, 5, 31, 4, 6, 27, 38, 45, 46, 3, 26, 15, 8, 39, 34, 40, 18 ],
      "exit" : false,
      "out-vars" : [ 5, 31, 15, 35, 39, 40, 18, 33, 8, 27, 11, 34, 6, 38, 7, 3, 9, 45, 4, 26 ],
      "decl-vars" : [ ],
      "line-start" : 270,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "stack",
              "variable" : 36
            },
            "go-type" : 6,
            "kind" : "expression",
            "target" : {
              "go-type" : 3,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "gp",
                "variable" : 3
              }
            },
            "type" : "selector"
          }, {
            "go-type" : 117,
            "kind" : "expression",
            "operator" : "&",
            "target" : {
              "go-type" : 118,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "frame",
                "variable" : 27
              }
            },
            "type" : "unary"
          }, {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "lrPtr",
              "variable" : 46
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 181,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 6,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "tracebackHexdump"
            }
          },
          "go-type" : 36,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 270,
      "code" : "tracebackHexdump(gp.stack, &frame, lrPtr)",
      "entry" : false,
      "use-vars" : [ 3, 27, 46 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 91, 92 ],
      "in-vars" : [ 27, 39, 3, 9, 6, 38, 34, 31, 4, 35, 45, 11, 40, 7, 18, 5, 26, 33, 15, 8 ],
      "exit" : false,
      "out-vars" : [ 35, 3, 26, 38, 45, 7, 27, 39, 34, 5, 18, 4, 11, 40, 31, 9, 33, 6, 15, 8 ],
      "decl-vars" : [ ],
      "line-start" : 272,
      "ast" : {
        "condition" : {
          "go-type" : 165,
          "kind" : "expression",
          "left" : {
            "go-type" : 115,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "callback",
              "variable" : 7
            }
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 166,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Nil",
              "kind" : "ident",
              "value" : "nil"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 274,
      "code" : "if callback != nil {\n\tthrow(\"unknown caller pc\")\n}",
      "entry" : false,
      "use-vars" : [ 7 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 92 ],
      "in-vars" : [ 9, 39, 5, 31, 3, 26, 6, 11, 35, 45, 40, 18, 33, 27, 34, 7, 4, 15, 8, 38 ],
      "exit" : false,
      "out-vars" : [ 33, 8, 38, 45, 11, 34, 5, 3, 27, 4, 26, 6, 15, 35, 39, 40, 31, 18, 7, 9 ],
      "decl-vars" : [ ],
      "line-start" : 273,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 39,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "unknown caller pc"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 167,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 1,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "throw"
            }
          },
          "go-type" : 36,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 273,
      "code" : "throw(\"unknown caller pc\")",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ 27 ],
      "successors" : [ 93 ],
      "in-vars" : [ 45, 11, 34, 5, 26, 35, 15, 27, 39, 4, 3, 33, 6, 8, 38, 40, 31, 7, 18, 9 ],
      "exit" : false,
      "out-vars" : [ 11, 39, 9, 6, 27, 5, 31, 7, 33, 15, 45, 40, 3, 8, 35, 34, 18, 4, 26, 38 ],
      "decl-vars" : [ ],
      "line-start" : 278,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "varp",
            "variable" : 49
          },
          "go-type" : 2,
          "kind" : "expression",
          "target" : {
            "go-type" : 118,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "frame",
              "variable" : 27
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "fp",
            "variable" : 42
          },
          "go-type" : 2,
          "kind" : "expression",
          "target" : {
            "go-type" : 118,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "frame",
              "variable" : 27
            }
          },
          "type" : "selector"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 278,
      "code" : "frame.varp = frame.fp",
      "entry" : false,
      "use-vars" : [ 27 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 94, 95 ],
      "in-vars" : [ 35, 39, 33, 6, 8, 27, 40, 7, 4, 38, 11, 31, 18, 26, 45, 5, 3, 9, 15, 34 ],
      "exit" : false,
      "out-vars" : [ 15, 31, 9, 40, 26, 18, 4, 33, 35, 45, 11, 39, 34, 5, 7, 3, 27, 38, 6, 8 ],
      "decl-vars" : [ ],
      "line-start" : 279,
      "ast" : {
        "condition" : {
          "go-type" : 165,
          "kind" : "constant",
          "value" : {
            "type" : "BOOL",
            "value" : "true"
          }
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 282,
      "code" : "if !usesLR {\n\n\tframe.varp -= sys.RegSize\n}",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ 27 ],
      "successors" : [ 95 ],
      "in-vars" : [ 27, 35, 38, 34, 26, 6, 15, 11, 39, 7, 18, 9, 33, 5, 3, 8, 45, 40, 31, 4 ],
      "exit" : false,
      "out-vars" : [ 40, 3, 38, 39, 34, 4, 26, 35, 45, 11, 8, 5, 33, 6, 18, 9, 15, 27, 31, 7 ],
      "decl-vars" : [ ],
      "line-start" : 281,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "varp",
            "variable" : 49
          },
          "go-type" : 2,
          "kind" : "expression",
          "target" : {
            "go-type" : 118,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "frame",
              "variable" : 27
            }
          },
          "type" : "selector"
        } ],
        "operator" : "-",
        "right" : [ {
          "go-type" : 2,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "8"
          }
        } ],
        "type" : "assign-operator"
      },
      "assign-vars" : [ ],
      "line-end" : 281,
      "code" : "frame.varp -= sys.RegSize",
      "entry" : false,
      "use-vars" : [ 27 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 96, 97 ],
      "in-vars" : [ 45, 11, 31, 26, 35, 39, 15, 3, 6, 8, 27, 38, 34, 40, 5, 7, 18, 4, 9, 33 ],
      "exit" : false,
      "out-vars" : [ 7, 18, 8, 34, 38, 45, 11, 33, 27, 40, 4, 9, 6, 39, 5, 31, 3, 26, 15, 35 ],
      "decl-vars" : [ ],
      "line-start" : 286,
      "ast" : {
        "condition" : {
          "go-type" : 13,
          "kind" : "expression",
          "left" : {
            "go-type" : 13,
            "kind" : "expression",
            "left" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "varp",
                "variable" : 49
              },
              "go-type" : 2,
              "kind" : "expression",
              "target" : {
                "go-type" : 118,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "frame",
                  "variable" : 27
                }
              },
              "type" : "selector"
            },
            "operator" : ">",
            "right" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "sp",
                "variable" : 29
              },
              "go-type" : 2,
              "kind" : "expression",
              "target" : {
                "go-type" : 118,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "frame",
                  "variable" : 27
                }
              },
              "type" : "selector"
            },
            "type" : "binary"
          },
          "operator" : "&&",
          "right" : {
            "go-type" : 13,
            "kind" : "expression",
            "target" : {
              "go-type" : 13,
              "kind" : "expression",
              "left" : {
                "go-type" : 13,
                "kind" : "expression",
                "left" : {
                  "go-type" : 13,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "framepointer_enabled",
                    "variable" : 11
                  }
                },
                "operator" : "&&",
                "right" : {
                  "go-type" : 13,
                  "kind" : "constant",
                  "value" : {
                    "type" : "BOOL",
                    "value" : "true"
                  }
                },
                "type" : "binary"
              },
              "operator" : "||",
              "right" : {
                "go-type" : 13,
                "kind" : "constant",
                "value" : {
                  "type" : "BOOL",
                  "value" : "false"
                }
              },
              "type" : "binary"
            },
            "type" : "paren"
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 288,
      "code" : "if frame.varp > frame.sp && (framepointer_enabled && GOARCH == \"amd64\" || GOARCH == \"arm64\") {\n\tframe.varp -= sys.RegSize\n}",
      "entry" : false,
      "use-vars" : [ 27, 11 ]
    }, {
      "update-vars" : [ 27 ],
      "successors" : [ 97 ],
      "in-vars" : [ 5, 7, 4, 26, 33, 8, 35, 45, 34, 40, 3, 27, 39, 18, 6, 15, 11, 31, 9, 38 ],
      "exit" : false,
      "out-vars" : [ 8, 39, 40, 18, 15, 27, 4, 33, 7, 9, 6, 35, 5, 31, 34, 3, 26, 38, 45, 11 ],
      "decl-vars" : [ ],
      "line-start" : 287,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "varp",
            "variable" : 49
          },
          "go-type" : 2,
          "kind" : "expression",
          "target" : {
            "go-type" : 118,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "frame",
              "variable" : 27
            }
          },
          "type" : "selector"
        } ],
        "operator" : "-",
        "right" : [ {
          "go-type" : 2,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "8"
          }
        } ],
        "type" : "assign-operator"
      },
      "assign-vars" : [ ],
      "line-end" : 287,
      "code" : "frame.varp -= sys.RegSize",
      "entry" : false,
      "use-vars" : [ 27 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 98, 103 ],
      "in-vars" : [ 18, 3, 27, 35, 38, 5, 31, 7, 33, 45, 11, 26, 9, 39, 34, 40, 6, 8, 4, 15 ],
      "exit" : false,
      "out-vars" : [ 5, 31, 6, 15, 8, 35, 39, 34, 9, 33, 27, 11, 40, 7, 18, 4, 3, 26, 38, 45 ],
      "decl-vars" : [ ],
      "line-start" : 296,
      "ast" : {
        "condition" : {
          "go-type" : 13,
          "kind" : "expression",
          "left" : {
            "go-type" : 13,
            "kind" : "expression",
            "left" : {
              "go-type" : 115,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "callback",
                "variable" : 7
              }
            },
            "operator" : "!=",
            "right" : {
              "go-type" : 166,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Nil",
                "kind" : "ident",
                "value" : "nil"
              }
            },
            "type" : "binary"
          },
          "operator" : "||",
          "right" : {
            "go-type" : 13,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "printing",
              "variable" : 34
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 303,
      "code" : "if callback != nil || printing {\n\tframe.argp = frame.fp + sys.MinFrameSize\n\tvar ok bool\n\tframe.arglen, frame.argmap, ok = getArgInfoFast(f, callback != nil)\n\tif !ok {\n\t\tframe.arglen, frame.argmap = getArgInfo(&frame, f, callback != nil, ctxt)\n\t}\n}",
      "entry" : false,
      "use-vars" : [ 7, 34 ]
    }, {
      "update-vars" : [ 27 ],
      "successors" : [ 99 ],
      "in-vars" : [ 45, 39, 18, 40, 7, 4, 3, 26, 27, 38, 34, 6, 15, 33, 8, 31, 9, 35, 11, 5 ],
      "exit" : false,
      "out-vars" : [ 15, 27, 11, 40, 18, 35, 6, 26, 8, 31, 7, 4, 3, 5, 9, 33, 38, 45, 39, 34 ],
      "decl-vars" : [ ],
      "line-start" : 297,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "argp",
            "variable" : 50
          },
          "go-type" : 2,
          "kind" : "expression",
          "target" : {
            "go-type" : 118,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "frame",
              "variable" : 27
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "go-type" : 2,
          "kind" : "expression",
          "left" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "fp",
              "variable" : 42
            },
            "go-type" : 2,
            "kind" : "expression",
            "target" : {
              "go-type" : 118,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "frame",
                "variable" : 27
              }
            },
            "type" : "selector"
          },
          "operator" : "+",
          "right" : {
            "go-type" : 2,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "type" : "binary"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 297,
      "code" : "frame.argp = frame.fp + sys.MinFrameSize",
      "entry" : false,
      "use-vars" : [ 27 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 100 ],
      "in-vars" : [ 38, 18, 9, 33, 6, 15, 8, 35, 11, 4, 34, 40, 7, 3, 27, 45, 39, 5, 31, 26 ],
      "exit" : false,
      "out-vars" : [ 9, 33, 34, 40, 7, 18, 26, 6, 27, 35, 45, 11, 3, 39, 31, 4, 38, 5, 15, 8 ],
      "decl-vars" : [ 53 ],
      "line-start" : 298,
      "ast" : {
        "kind" : "statement",
        "target" : {
          "kind" : "decl",
          "specs" : [ {
            "comments" : [ ],
            "declared-type" : {
              "go-type" : 13,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 13,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "bool"
              }
            },
            "kind" : "spec",
            "names" : [ {
              "ident-kind" : "NoKind",
              "kind" : "ident",
              "value" : "ok"
            } ],
            "type" : "var",
            "values" : [ ]
          } ],
          "type" : "var"
        },
        "type" : "declaration"
      },
      "assign-vars" : [ ],
      "line-end" : 298,
      "code" : "var ok bool",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ 53, 27 ],
      "successors" : [ 101 ],
      "in-vars" : [ 26, 27, 39, 7, 18, 9, 6, 3, 33, 35, 38, 45, 40, 31, 4, 8, 11, 34, 5, 15 ],
      "exit" : false,
      "out-vars" : [ 11, 39, 18, 4, 3, 38, 5, 53, 9, 15, 34, 45, 6, 8, 35, 40, 31, 7, 26, 33, 27 ],
      "decl-vars" : [ ],
      "line-start" : 299,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "arglen",
            "variable" : 51
          },
          "go-type" : 2,
          "kind" : "expression",
          "target" : {
            "go-type" : 118,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "frame",
              "variable" : 27
            }
          },
          "type" : "selector"
        }, {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "argmap",
            "variable" : 52
          },
          "go-type" : 163,
          "kind" : "expression",
          "target" : {
            "go-type" : 118,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "frame",
              "variable" : 27
            }
          },
          "type" : "selector"
        }, {
          "go-type" : 13,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "ok",
            "variable" : 53
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 120,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "f",
              "variable" : 35
            }
          }, {
            "go-type" : 13,
            "kind" : "expression",
            "left" : {
              "go-type" : 115,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "callback",
                "variable" : 7
              }
            },
            "operator" : "!=",
            "right" : {
              "go-type" : 166,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Nil",
                "kind" : "ident",
                "value" : "nil"
              }
            },
            "type" : "binary"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 201,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 10,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "getArgInfoFast"
            }
          },
          "go-type" : 200,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 53 ],
      "line-end" : 299,
      "code" : "frame.arglen, frame.argmap, ok = getArgInfoFast(f, callback != nil)",
      "entry" : false,
      "use-vars" : [ 35, 7, 27 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 102, 103 ],
      "in-vars" : [ 35, 34, 31, 4, 26, 9, 6, 38, 11, 7, 18, 53, 3, 15, 5, 33, 8, 27, 45, 39, 40 ],
      "exit" : false,
      "out-vars" : [ 7, 15, 38, 5, 18, 3, 26, 8, 45, 11, 39, 40, 9, 33, 6, 27, 35, 4, 34, 31 ],
      "decl-vars" : [ ],
      "line-start" : 300,
      "ast" : {
        "condition" : {
          "go-type" : 13,
          "kind" : "expression",
          "operator" : "!",
          "target" : {
            "go-type" : 13,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "ok",
              "variable" : 53
            }
          },
          "type" : "unary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 302,
      "code" : "if !ok {\n\tframe.arglen, frame.argmap = getArgInfo(&frame, f, callback != nil, ctxt)\n}",
      "entry" : false,
      "use-vars" : [ 53 ]
    }, {
      "update-vars" : [ 27 ],
      "successors" : [ 103 ],
      "in-vars" : [ 27, 11, 18, 26, 9, 40, 5, 6, 8, 33, 35, 38, 7, 4, 3, 45, 39, 34, 31, 15 ],
      "exit" : false,
      "out-vars" : [ 4, 3, 15, 34, 8, 27, 35, 45, 9, 39, 40, 5, 7, 26, 33, 6, 38, 11, 31 ],
      "decl-vars" : [ ],
      "line-start" : 301,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "arglen",
            "variable" : 51
          },
          "go-type" : 2,
          "kind" : "expression",
          "target" : {
            "go-type" : 118,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "frame",
              "variable" : 27
            }
          },
          "type" : "selector"
        }, {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "argmap",
            "variable" : 52
          },
          "go-type" : 163,
          "kind" : "expression",
          "target" : {
            "go-type" : 118,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "frame",
              "variable" : 27
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 117,
            "kind" : "expression",
            "operator" : "&",
            "target" : {
              "go-type" : 118,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "frame",
                "variable" : 27
              }
            },
            "type" : "unary"
          }, {
            "go-type" : 120,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "f",
              "variable" : 35
            }
          }, {
            "go-type" : 13,
            "kind" : "expression",
            "left" : {
              "go-type" : 115,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "callback",
                "variable" : 7
              }
            },
            "operator" : "!=",
            "right" : {
              "go-type" : 166,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Nil",
                "kind" : "ident",
                "value" : "nil"
              }
            },
            "type" : "binary"
          }, {
            "go-type" : 18,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "ctxt",
              "variable" : 18
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 204,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 11,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "getArgInfo"
            }
          },
          "go-type" : 203,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 301,
      "code" : "frame.arglen, frame.argmap = getArgInfo(&frame, f, callback != nil, ctxt)",
      "entry" : false,
      "use-vars" : [ 27, 35, 7, 18 ]
    }, {
      "update-vars" : [ 18 ],
      "successors" : [ 104 ],
      "in-vars" : [ 38, 11, 26, 9, 15, 35, 40, 5, 31, 33, 6, 27, 45, 39, 34, 4, 3, 7, 8 ],
      "exit" : false,
      "out-vars" : [ 38, 33, 6, 4, 3, 27, 35, 45, 11, 39, 7, 15, 8, 34, 26, 40, 5, 31, 18, 9 ],
      "decl-vars" : [ ],
      "line-start" : 304,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 18,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "ctxt",
            "variable" : 18
          }
        } ],
        "right" : [ {
          "go-type" : 166,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Nil",
            "kind" : "ident",
            "value" : "nil"
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 18 ],
      "line-end" : 304,
      "code" : "ctxt = nil",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ 27 ],
      "successors" : [ 105 ],
      "in-vars" : [ 27, 40, 5, 33, 15, 8, 35, 39, 11, 31, 7, 26, 9, 6, 38, 45, 34, 18, 4, 3 ],
      "exit" : false,
      "out-vars" : [ 34, 5, 7, 4, 6, 27, 11, 40, 26, 33, 38, 18, 9, 15, 45, 39, 31, 3, 8, 35 ],
      "decl-vars" : [ ],
      "line-start" : 315,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "continpc",
            "variable" : 54
          },
          "go-type" : 2,
          "kind" : "expression",
          "target" : {
            "go-type" : 118,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "frame",
              "variable" : 27
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "pc",
            "variable" : 28
          },
          "go-type" : 2,
          "kind" : "expression",
          "target" : {
            "go-type" : 118,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "frame",
              "variable" : 27
            }
          },
          "type" : "selector"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 315,
      "code" : "frame.continpc = frame.pc",
      "entry" : false,
      "use-vars" : [ 27 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 106, 109 ],
      "in-vars" : [ 45, 3, 6, 39, 40, 9, 8, 27, 35, 11, 34, 18, 4, 33, 38, 5, 31, 7, 26, 15 ],
      "exit" : false,
      "out-vars" : [ 27, 38, 31, 33, 45, 34, 18, 26, 11, 39, 40, 7, 15, 6, 8, 35, 5, 4, 3, 9 ],
      "decl-vars" : [ ],
      "line-start" : 316,
      "ast" : {
        "condition" : {
          "go-type" : 13,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "waspanic",
            "variable" : 31
          }
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 331,
      "code" : "if waspanic {\n\tif frame.fn.deferreturn != 0 {\n\t\tframe.continpc = frame.fn.entry + uintptr(frame.fn.deferreturn) + 1\n\n\t} else {\n\t\tframe.continpc = 0\n\t}\n}",
      "entry" : false,
      "use-vars" : [ 31 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 107, 108 ],
      "in-vars" : [ 5, 33, 45, 11, 34, 26, 15, 8, 27, 35, 18, 3, 9, 38, 39, 40, 31, 7, 4, 6 ],
      "exit" : false,
      "out-vars" : [ 8, 27, 38, 11, 5, 18, 6, 15, 35, 45, 40, 4, 39, 34, 31, 9, 7, 3, 26, 33 ],
      "decl-vars" : [ ],
      "line-start" : 317,
      "ast" : {
        "condition" : {
          "go-type" : 165,
          "kind" : "expression",
          "left" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "deferreturn",
              "variable" : 55
            },
            "go-type" : 29,
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "fn",
                "variable" : 37
              },
              "go-type" : 120,
              "kind" : "expression",
              "target" : {
                "go-type" : 118,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "frame",
                  "variable" : 27
                }
              },
              "type" : "selector"
            },
            "type" : "selector"
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 29,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 330,
      "code" : "if frame.fn.deferreturn != 0 {\n\tframe.continpc = frame.fn.entry + uintptr(frame.fn.deferreturn) + 1\n\n} else {\n\tframe.continpc = 0\n}",
      "entry" : false,
      "use-vars" : [ 27 ]
    }, {
      "update-vars" : [ 27 ],
      "successors" : [ 109 ],
      "in-vars" : [ 31, 4, 27, 45, 11, 26, 9, 33, 38, 39, 34, 8, 35, 7, 18, 6, 15, 40, 5, 3 ],
      "exit" : false,
      "out-vars" : [ 33, 35, 34, 40, 7, 18, 4, 26, 15, 5, 3, 27, 38, 9, 8, 45, 11, 39, 31, 6 ],
      "decl-vars" : [ ],
      "line-start" : 318,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "continpc",
            "variable" : 54
          },
          "go-type" : 2,
          "kind" : "expression",
          "target" : {
            "go-type" : 118,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "frame",
              "variable" : 27
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "go-type" : 2,
          "kind" : "expression",
          "left" : {
            "go-type" : 2,
            "kind" : "expression",
            "left" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "entry",
                "variable" : 56
              },
              "go-type" : 2,
              "kind" : "expression",
              "target" : {
                "field" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "fn",
                  "variable" : 37
                },
                "go-type" : 120,
                "kind" : "expression",
                "target" : {
                  "go-type" : 118,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "frame",
                    "variable" : 27
                  }
                },
                "type" : "selector"
              },
              "type" : "selector"
            },
            "operator" : "+",
            "right" : {
              "coerced-to" : {
                "go-type" : 2,
                "kind" : "type",
                "type" : "identifier",
                "value" : {
                  "go-type" : 2,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "uintptr"
                }
              },
              "go-type" : 2,
              "kind" : "expression",
              "target" : {
                "field" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "deferreturn",
                  "variable" : 55
                },
                "go-type" : 29,
                "kind" : "expression",
                "target" : {
                  "field" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "fn",
                    "variable" : 37
                  },
                  "go-type" : 120,
                  "kind" : "expression",
                  "target" : {
                    "go-type" : 118,
                    "kind" : "expression",
                    "type" : "identifier",
                    "value" : {
                      "ident-kind" : "Var",
                      "kind" : "ident",
                      "value" : "frame",
                      "variable" : 27
                    }
                  },
                  "type" : "selector"
                },
                "type" : "selector"
              },
              "type" : "cast"
            },
            "type" : "binary"
          },
          "operator" : "+",
          "right" : {
            "go-type" : 2,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "1"
            }
          },
          "type" : "binary"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 318,
      "code" : "frame.continpc = frame.fn.entry + uintptr(frame.fn.deferreturn) + 1",
      "entry" : false,
      "use-vars" : [ 27 ]
    }, {
      "update-vars" : [ 27 ],
      "successors" : [ 109 ],
      "in-vars" : [ 27, 4, 6, 35, 38, 34, 5, 45, 11, 40, 26, 9, 33, 15, 8, 39, 31, 7, 18, 3 ],
      "exit" : false,
      "out-vars" : [ 26, 38, 11, 34, 31, 7, 18, 3, 33, 15, 27, 35, 40, 45, 39, 4, 9, 6, 5, 8 ],
      "decl-vars" : [ ],
      "line-start" : 329,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "continpc",
            "variable" : 54
          },
          "go-type" : 2,
          "kind" : "expression",
          "target" : {
            "go-type" : 118,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "frame",
              "variable" : 27
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "go-type" : 2,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "0"
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 329,
      "code" : "frame.continpc = 0",
      "entry" : false,
      "use-vars" : [ 27 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 110, 112 ],
      "in-vars" : [ 7, 4, 8, 27, 11, 18, 6, 34, 5, 40, 31, 35, 45, 3, 26, 9, 33, 15, 38, 39 ],
      "exit" : false,
      "out-vars" : [ 35, 39, 9, 33, 4, 26, 27, 38, 45, 5, 40, 7, 6, 15, 3, 8, 11, 34, 31, 18 ],
      "decl-vars" : [ ],
      "line-start" : 333,
      "ast" : {
        "condition" : {
          "go-type" : 165,
          "kind" : "expression",
          "left" : {
            "go-type" : 115,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "callback",
              "variable" : 7
            }
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 166,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Nil",
              "kind" : "ident",
              "value" : "nil"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 337,
      "code" : "if callback != nil {\n\tif !callback((*stkframe)(noescape(unsafe.Pointer(&frame))), v) {\n\t\treturn n\n\t}\n}",
      "entry" : false,
      "use-vars" : [ 7 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 111, 112 ],
      "in-vars" : [ 4, 3, 38, 39, 40, 31, 33, 6, 15, 8, 11, 7, 26, 9, 5, 18, 27, 35, 45, 34 ],
      "exit" : false,
      "out-vars" : [ 35, 45, 31, 7, 9, 15, 40, 18, 3, 26, 33, 27, 38, 34, 4, 11, 39, 5, 6, 8 ],
      "decl-vars" : [ ],
      "line-start" : 334,
      "ast" : {
        "condition" : {
          "go-type" : 13,
          "kind" : "expression",
          "operator" : "!",
          "target" : {
            "arguments" : [ {
              "coerced-to" : {
                "contained" : {
                  "go-type" : 118,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 118,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "stkframe"
                  }
                },
                "go-type" : 117,
                "kind" : "type",
                "type" : "pointer"
              },
              "go-type" : 117,
              "kind" : "expression",
              "target" : {
                "arguments" : [ {
                  "coerced-to" : {
                    "go-type" : 11,
                    "kind" : "type",
                    "qualifier" : {
                      "ident-kind" : "PkgName",
                      "kind" : "ident",
                      "package" : 1,
                      "value" : "unsafe"
                    },
                    "type" : "identifier",
                    "value" : {
                      "go-type" : 11,
                      "ident-kind" : "TypeName",
                      "kind" : "ident",
                      "value" : "Pointer"
                    }
                  },
                  "go-type" : 11,
                  "kind" : "expression",
                  "target" : {
                    "go-type" : 117,
                    "kind" : "expression",
                    "operator" : "&",
                    "target" : {
                      "go-type" : 118,
                      "kind" : "expression",
                      "type" : "identifier",
                      "value" : {
                        "ident-kind" : "Var",
                        "kind" : "ident",
                        "value" : "frame",
                        "variable" : 27
                      }
                    },
                    "type" : "unary"
                  },
                  "type" : "cast"
                } ],
                "ellipsis" : false,
                "function" : {
                  "go-type" : 206,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "function" : 12,
                    "ident-kind" : "Func",
                    "kind" : "ident",
                    "value" : "noescape"
                  }
                },
                "go-type" : 11,
                "kind" : "expression",
                "type" : "call"
              },
              "type" : "cast"
            }, {
              "go-type" : 11,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "v",
                "variable" : 8
              }
            } ],
            "ellipsis" : false,
            "function" : {
              "go-type" : 115,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "callback",
                "variable" : 7
              }
            },
            "go-type" : 13,
            "kind" : "expression",
            "type" : "call"
          },
          "type" : "unary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 336,
      "code" : "if !callback((*stkframe)(noescape(unsafe.Pointer(&frame))), v) {\n\treturn n\n}",
      "entry" : false,
      "use-vars" : [ 8, 7, 27 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 40 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 335,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 78,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "n",
            "variable" : 40
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 335,
      "code" : "return n",
      "entry" : false,
      "use-vars" : [ 40 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 113, 142 ],
      "in-vars" : [ 8, 39, 40, 31, 7, 9, 33, 6, 35, 38, 18, 3, 45, 11, 26, 15, 27, 34, 5, 4 ],
      "exit" : false,
      "out-vars" : [ 6, 15, 38, 45, 39, 34, 7, 9, 8, 27, 35, 11, 5, 31, 33, 40, 18, 4, 3, 26 ],
      "decl-vars" : [ ],
      "line-start" : 339,
      "ast" : {
        "condition" : {
          "go-type" : 165,
          "kind" : "expression",
          "left" : {
            "go-type" : 114,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "pcbuf",
              "variable" : 5
            }
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 166,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Nil",
              "kind" : "ident",
              "value" : "nil"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 393,
      "code" : "if pcbuf != nil {\n\tpc := frame.pc\n\n\ttracepc := pc\n\n\tif (n == 0 && flags&_TraceTrap != 0) || waspanic || pc == f.entry {\n\t\tpc++\n\t} else {\n\t\ttracepc--\n\t}\n\n\tif inldata := funcdata(f, _FUNCDATA_InlTree); inldata != nil {\n\t\tinltree := (*[1 << 20]inlinedCall)(inldata)\n\t\tfor {\n\t\t\tix := pcdatavalue(f, _PCDATA_InlTreeIndex, tracepc, &cache)\n\t\t\tif ix < 0 {\n\t\t\t\tbreak\n\t\t\t}\n\t\t\tif inltree[ix].funcID == funcID_wrapper && elideWrapperCalling(lastFuncID) {\n\n\t\t\t} else if skip > 0 {\n\t\t\t\tskip--\n\t\t\t} else if n < max {\n\t\t\t\t(*[1 << 20]uintptr)(unsafe.Pointer(pcbuf))[n] = pc\n\t\t\t\tn++\n\t\t\t}\n\t\t\tlastFuncID = inltree[ix].funcID\n\n\t\t\ttracepc = frame.fn.entry + uintptr(inltree[ix].parentPc)\n\t\t\tpc = tracepc + 1\n\t\t}\n\t}\n\n\tif f.funcID == funcID_wrapper && elideWrapperCalling(lastFuncID) {\n\n\t} else if skip > 0 {\n\t\tskip--\n\t} else if n < max {\n\t\t(*[1 << 20]uintptr)(unsafe.Pointer(pcbuf))[n] = pc\n\t\tn++\n\t}\n\tlastFuncID = f.funcID\n\tn--\n}",
      "entry" : false,
      "use-vars" : [ 5 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 114 ],
      "in-vars" : [ 39, 34, 40, 5, 4, 9, 6, 35, 8, 11, 31, 7, 3, 33, 45, 38, 18, 26, 15, 27 ],
      "exit" : false,
      "out-vars" : [ 38, 11, 9, 33, 35, 40, 5, 31, 26, 15, 8, 27, 7, 3, 57, 39, 34, 18, 4, 6, 45 ],
      "decl-vars" : [ 57 ],
      "line-start" : 340,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "pc"
          }
        } ],
        "right" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "pc",
            "variable" : 28
          },
          "go-type" : 2,
          "kind" : "expression",
          "target" : {
            "go-type" : 118,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "frame",
              "variable" : 27
            }
          },
          "type" : "selector"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 340,
      "code" : "pc := frame.pc",
      "entry" : false,
      "use-vars" : [ 27 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 115 ],
      "in-vars" : [ 11, 39, 7, 26, 15, 57, 38, 34, 5, 4, 33, 8, 27, 45, 31, 18, 3, 35, 40, 9, 6 ],
      "exit" : false,
      "out-vars" : [ 33, 6, 35, 38, 11, 5, 31, 4, 26, 9, 57, 27, 45, 39, 34, 18, 58, 15, 8, 40, 7, 3 ],
      "decl-vars" : [ 58 ],
      "line-start" : 342,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "tracepc"
          }
        } ],
        "right" : [ {
          "go-type" : 2,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "pc",
            "variable" : 57
          }
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 342,
      "code" : "tracepc := pc",
      "entry" : false,
      "use-vars" : [ 57 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 116, 117 ],
      "in-vars" : [ 35, 38, 45, 11, 58, 33, 15, 31, 57, 26, 6, 4, 27, 39, 34, 40, 5, 7, 18, 3, 9, 8 ],
      "exit" : false,
      "out-vars" : [ 11, 9, 15, 38, 45, 34, 31, 7, 57, 27, 35, 39, 18, 33, 40, 5, 4, 3, 58, 26, 6, 8 ],
      "decl-vars" : [ ],
      "line-start" : 354,
      "ast" : {
        "condition" : {
          "go-type" : 13,
          "kind" : "expression",
          "left" : {
            "go-type" : 13,
            "kind" : "expression",
            "left" : {
              "go-type" : 13,
              "kind" : "expression",
              "target" : {
                "go-type" : 13,
                "kind" : "expression",
                "left" : {
                  "go-type" : 13,
                  "kind" : "expression",
                  "left" : {
                    "go-type" : 78,
                    "kind" : "expression",
                    "type" : "identifier",
                    "value" : {
                      "ident-kind" : "Var",
                      "kind" : "ident",
                      "value" : "n",
                      "variable" : 40
                    }
                  },
                  "operator" : "==",
                  "right" : {
                    "go-type" : 78,
                    "kind" : "constant",
                    "value" : {
                      "type" : "INT",
                      "value" : "0"
                    }
                  },
                  "type" : "binary"
                },
                "operator" : "&&",
                "right" : {
                  "go-type" : 13,
                  "kind" : "expression",
                  "left" : {
                    "go-type" : 97,
                    "kind" : "expression",
                    "left" : {
                      "go-type" : 97,
                      "kind" : "expression",
                      "type" : "identifier",
                      "value" : {
                        "ident-kind" : "Var",
                        "kind" : "ident",
                        "value" : "flags",
                        "variable" : 9
                      }
                    },
                    "operator" : "&",
                    "right" : {
                      "go-type" : 97,
                      "kind" : "constant",
                      "value" : {
                        "type" : "INT",
                        "value" : "2"
                      }
                    },
                    "type" : "binary"
                  },
                  "operator" : "!=",
                  "right" : {
                    "go-type" : 97,
                    "kind" : "constant",
                    "value" : {
                      "type" : "INT",
                      "value" : "0"
                    }
                  },
                  "type" : "binary"
                },
                "type" : "binary"
              },
              "type" : "paren"
            },
            "operator" : "||",
            "right" : {
              "go-type" : 13,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "waspanic",
                "variable" : 31
              }
            },
            "type" : "binary"
          },
          "operator" : "||",
          "right" : {
            "go-type" : 13,
            "kind" : "expression",
            "left" : {
              "go-type" : 2,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "pc",
                "variable" : 57
              }
            },
            "operator" : "==",
            "right" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "entry",
                "variable" : 56
              },
              "go-type" : 2,
              "kind" : "expression",
              "target" : {
                "go-type" : 120,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "f",
                  "variable" : 35
                }
              },
              "type" : "selector"
            },
            "type" : "binary"
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 358,
      "code" : "if (n == 0 && flags&_TraceTrap != 0) || waspanic || pc == f.entry {\n\tpc++\n} else {\n\ttracepc--\n}",
      "entry" : false,
      "use-vars" : [ 35, 40, 9, 31, 57 ]
    }, {
      "update-vars" : [ 57 ],
      "successors" : [ 119 ],
      "in-vars" : [ 33, 57, 18, 9, 58, 26, 45, 11, 4, 6, 5, 31, 3, 39, 34, 40, 7, 15, 27, 35, 38, 8 ],
      "exit" : false,
      "out-vars" : [ 45, 40, 9, 15, 8, 27, 35, 4, 26, 34, 5, 3, 58, 33, 57, 31, 39, 7, 18, 6, 38, 11 ],
      "decl-vars" : [ ],
      "line-start" : 355,
      "ast" : {
        "kind" : "statement",
        "operation" : "++",
        "target" : {
          "go-type" : 2,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "pc",
            "variable" : 57
          }
        },
        "type" : "crement"
      },
      "assign-vars" : [ 57 ],
      "line-end" : 355,
      "code" : "pc++",
      "entry" : false,
      "use-vars" : [ 57 ]
    }, {
      "update-vars" : [ 58 ],
      "successors" : [ 119 ],
      "in-vars" : [ 27, 38, 45, 11, 7, 15, 6, 57, 35, 39, 34, 40, 18, 4, 8, 31, 3, 58, 9, 33, 5, 26 ],
      "exit" : false,
      "out-vars" : [ 15, 35, 45, 7, 18, 33, 6, 58, 9, 27, 11, 40, 5, 31, 3, 8, 57, 26, 38, 39, 34, 4 ],
      "decl-vars" : [ ],
      "line-start" : 357,
      "ast" : {
        "kind" : "statement",
        "operation" : "--",
        "target" : {
          "go-type" : 2,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "tracepc",
            "variable" : 58
          }
        },
        "type" : "crement"
      },
      "assign-vars" : [ 58 ],
      "line-end" : 357,
      "code" : "tracepc--",
      "entry" : false,
      "use-vars" : [ 58 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 120, 134 ],
      "in-vars" : [ 45, 39, 40, 3, 58, 9, 8, 5, 7, 18, 26, 33, 27, 11, 34, 15, 57, 35, 38, 31, 4, 6, 59 ],
      "exit" : false,
      "out-vars" : [ 31, 7, 4, 3, 27, 11, 34, 5, 9, 6, 15, 59, 8, 57, 35, 38, 26, 58, 33, 45, 39, 40, 18 ],
      "decl-vars" : [ ],
      "line-start" : 361,
      "ast" : {
        "condition" : {
          "go-type" : 165,
          "kind" : "expression",
          "left" : {
            "go-type" : 11,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "inldata",
              "variable" : 59
            }
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 11,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Nil",
              "kind" : "ident",
              "value" : "nil"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 381,
      "code" : "if inldata := funcdata(f, _FUNCDATA_InlTree); inldata != nil {\n\tinltree := (*[1 << 20]inlinedCall)(inldata)\n\tfor {\n\t\tix := pcdatavalue(f, _PCDATA_InlTreeIndex, tracepc, &cache)\n\t\tif ix < 0 {\n\t\t\tbreak\n\t\t}\n\t\tif inltree[ix].funcID == funcID_wrapper && elideWrapperCalling(lastFuncID) {\n\n\t\t} else if skip > 0 {\n\t\t\tskip--\n\t\t} else if n < max {\n\t\t\t(*[1 << 20]uintptr)(unsafe.Pointer(pcbuf))[n] = pc\n\t\t\tn++\n\t\t}\n\t\tlastFuncID = inltree[ix].funcID\n\n\t\ttracepc = frame.fn.entry + uintptr(inltree[ix].parentPc)\n\t\tpc = tracepc + 1\n\t}\n}",
      "entry" : false,
      "use-vars" : [ 59 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 118 ],
      "in-vars" : [ 57, 27, 38, 34, 5, 4, 9, 35, 58, 6, 39, 31, 18, 3, 26, 33, 15, 45, 11, 40, 7, 8 ],
      "exit" : false,
      "out-vars" : [ 58, 35, 11, 39, 34, 40, 31, 4, 6, 15, 57, 45, 33, 8, 3, 26, 9, 27, 38, 5, 7, 18, 59 ],
      "decl-vars" : [ 59 ],
      "line-start" : 361,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "inldata"
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 120,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "f",
              "variable" : 35
            }
          }, {
            "go-type" : 41,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "4"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 209,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 13,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "funcdata"
            }
          },
          "go-type" : 11,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 361,
      "code" : "inldata := funcdata(f, _FUNCDATA_InlTree)",
      "entry" : false,
      "use-vars" : [ 35 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 121 ],
      "in-vars" : [ 15, 35, 11, 5, 4, 3, 45, 31, 18, 6, 38, 7, 58, 59, 26, 9, 33, 57, 27, 39, 34, 40, 8 ],
      "exit" : false,
      "out-vars" : [ 61, 33, 8, 27, 11, 4, 31, 7, 18, 58, 9, 57, 45, 34, 6, 15, 39, 3, 26, 5, 35, 38, 40 ],
      "decl-vars" : [ 61 ],
      "line-start" : 362,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "inltree"
          }
        } ],
        "right" : [ {
          "coerced-to" : {
            "contained" : {
              "element" : {
                "go-type" : 213,
                "kind" : "type",
                "type" : "identifier",
                "value" : {
                  "go-type" : 213,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "inlinedCall"
                }
              },
              "go-type" : 212,
              "kind" : "type",
              "length" : {
                "go-type" : 216,
                "kind" : "constant",
                "value" : {
                  "type" : "INT",
                  "value" : "1048576"
                }
              },
              "type" : "array"
            },
            "go-type" : 211,
            "kind" : "type",
            "type" : "pointer"
          },
          "go-type" : 211,
          "kind" : "expression",
          "target" : {
            "go-type" : 11,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "inldata",
              "variable" : 59
            }
          },
          "type" : "cast"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 362,
      "code" : "inltree := (*[1 << 20]inlinedCall)(inldata)",
      "entry" : false,
      "use-vars" : [ 59 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 122, 134 ],
      "in-vars" : [ 35, 11, 34, 18, 4, 15, 8, 57, 38, 5, 9, 31, 26, 33, 27, 45, 39, 40, 7, 3, 58, 61, 6 ],
      "exit" : false,
      "out-vars" : [ 35, 40, 9, 33, 6, 27, 39, 5, 18, 4, 58, 26, 57, 11, 7, 3, 8, 38, 34, 31, 61, 15, 45 ],
      "decl-vars" : [ ],
      "line-start" : 363,
      "ast" : {
        "condition" : null,
        "kind" : "statement",
        "type" : "for"
      },
      "assign-vars" : [ ],
      "line-end" : 380,
      "code" : "for {\n\tix := pcdatavalue(f, _PCDATA_InlTreeIndex, tracepc, &cache)\n\tif ix < 0 {\n\t\tbreak\n\t}\n\tif inltree[ix].funcID == funcID_wrapper && elideWrapperCalling(lastFuncID) {\n\n\t} else if skip > 0 {\n\t\tskip--\n\t} else if n < max {\n\t\t(*[1 << 20]uintptr)(unsafe.Pointer(pcbuf))[n] = pc\n\t\tn++\n\t}\n\tlastFuncID = inltree[ix].funcID\n\n\ttracepc = frame.fn.entry + uintptr(inltree[ix].parentPc)\n\tpc = tracepc + 1\n}",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 123 ],
      "in-vars" : [ 61, 26, 9, 35, 38, 7, 4, 11, 39, 58, 31, 18, 3, 33, 57, 45, 40, 5, 15, 27, 34, 6, 8 ],
      "exit" : false,
      "out-vars" : [ 27, 35, 45, 4, 9, 8, 57, 31, 7, 18, 3, 33, 6, 38, 5, 60, 15, 39, 34, 40, 61, 26, 11 ],
      "decl-vars" : [ 60 ],
      "line-start" : 364,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "ix"
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 120,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "f",
              "variable" : 35
            }
          }, {
            "go-type" : 17,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "2"
            }
          }, {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "tracepc",
              "variable" : 58
            }
          }, {
            "go-type" : 191,
            "kind" : "expression",
            "operator" : "&",
            "target" : {
              "go-type" : 183,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "cache",
                "variable" : 38
              }
            },
            "type" : "unary"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 217,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 14,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "pcdatavalue"
            }
          },
          "go-type" : 17,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 364,
      "code" : "ix := pcdatavalue(f, _PCDATA_InlTreeIndex, tracepc, &cache)",
      "entry" : false,
      "use-vars" : [ 35, 58, 38 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 124, 125 ],
      "in-vars" : [ 57, 38, 11, 8, 3, 9, 27, 39, 34, 5, 18, 4, 6, 33, 15, 35, 45, 7, 61, 60, 26, 40, 31 ],
      "exit" : false,
      "out-vars" : [ 26, 15, 35, 18, 9, 6, 34, 3, 38, 33, 8, 57, 27, 39, 40, 5, 31, 7, 4, 45, 11, 61, 60 ],
      "decl-vars" : [ ],
      "line-start" : 365,
      "ast" : {
        "condition" : {
          "go-type" : 165,
          "kind" : "expression",
          "left" : {
            "go-type" : 17,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "ix",
              "variable" : 60
            }
          },
          "operator" : "<",
          "right" : {
            "go-type" : 17,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 367,
      "code" : "if ix < 0 {\n\tbreak\n}",
      "entry" : false,
      "use-vars" : [ 60 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 134 ],
      "in-vars" : [ 45, 4, 9, 6, 15, 27, 35, 39, 3, 7, 33, 8, 57, 38, 34, 40, 26, 11, 5, 31, 18 ],
      "exit" : false,
      "out-vars" : [ 40, 7, 4, 9, 33, 8, 45, 34, 31, 26, 6, 57, 27, 38, 11, 18, 15, 35, 39, 5, 3 ],
      "decl-vars" : [ ],
      "line-start" : 366,
      "ast" : {
        "kind" : "statement",
        "label" : null,
        "type" : "break"
      },
      "assign-vars" : [ ],
      "line-end" : 366,
      "code" : "break",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 126, 131 ],
      "in-vars" : [ 40, 5, 18, 26, 8, 35, 38, 11, 34, 4, 60, 57, 39, 31, 3, 61, 33, 27, 45, 7, 9, 6, 15 ],
      "exit" : false,
      "out-vars" : [ 60, 26, 35, 45, 34, 7, 18, 3, 9, 6, 31, 33, 8, 57, 5, 61, 27, 38, 11, 40, 4, 15 ],
      "decl-vars" : [ ],
      "line-start" : 368,
      "ast" : {
        "condition" : {
          "go-type" : 13,
          "kind" : "expression",
          "left" : {
            "go-type" : 13,
            "kind" : "expression",
            "left" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "funcID",
                "variable" : 62
              },
              "go-type" : 125,
              "kind" : "expression",
              "target" : {
                "go-type" : 213,
                "index" : {
                  "go-type" : 17,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "ix",
                    "variable" : 60
                  }
                },
                "kind" : "expression",
                "target" : {
                  "go-type" : 211,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "inltree",
                    "variable" : 61
                  }
                },
                "type" : "index"
              },
              "type" : "selector"
            },
            "operator" : "==",
            "right" : {
              "go-type" : 125,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "22"
              }
            },
            "type" : "binary"
          },
          "operator" : "&&",
          "right" : {
            "arguments" : [ {
              "go-type" : 125,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "lastFuncID",
                "variable" : 39
              }
            } ],
            "ellipsis" : false,
            "function" : {
              "go-type" : 219,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "function" : 15,
                "ident-kind" : "Func",
                "kind" : "ident",
                "value" : "elideWrapperCalling"
              }
            },
            "go-type" : 13,
            "kind" : "expression",
            "type" : "call"
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 375,
      "code" : "if inltree[ix].funcID == funcID_wrapper && elideWrapperCalling(lastFuncID) {\n\n} else if skip > 0 {\n\tskip--\n} else if n < max {\n\t(*[1 << 20]uintptr)(unsafe.Pointer(pcbuf))[n] = pc\n\tn++\n}",
      "entry" : false,
      "use-vars" : [ 39, 61, 60 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 127, 128 ],
      "in-vars" : [ 31, 60, 26, 9, 15, 34, 4, 3, 61, 8, 11, 5, 7, 33, 6, 40, 18, 57, 27, 35, 38, 45 ],
      "exit" : false,
      "out-vars" : [ 4, 9, 15, 34, 40, 18, 3, 61, 6, 8, 27, 38, 31, 57, 7, 60, 5, 26, 33, 35, 45, 11 ],
      "decl-vars" : [ ],
      "line-start" : 370,
      "ast" : {
        "condition" : {
          "go-type" : 165,
          "kind" : "expression",
          "left" : {
            "go-type" : 78,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "skip",
              "variable" : 4
            }
          },
          "operator" : ">",
          "right" : {
            "go-type" : 78,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 375,
      "code" : "if skip > 0 {\n\tskip--\n} else if n < max {\n\t(*[1 << 20]uintptr)(unsafe.Pointer(pcbuf))[n] = pc\n\tn++\n}",
      "entry" : false,
      "use-vars" : [ 4 ]
    }, {
      "update-vars" : [ 4 ],
      "successors" : [ 131 ],
      "in-vars" : [ 45, 31, 7, 4, 61, 8, 34, 3, 26, 35, 11, 5, 6, 15, 33, 27, 38, 40, 18, 60, 9 ],
      "exit" : false,
      "out-vars" : [ 61, 60, 26, 35, 45, 7, 18, 4, 6, 27, 3, 38, 34, 5, 15, 8, 11, 40, 31, 9, 33 ],
      "decl-vars" : [ ],
      "line-start" : 371,
      "ast" : {
        "kind" : "statement",
        "operation" : "--",
        "target" : {
          "go-type" : 78,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "skip",
            "variable" : 4
          }
        },
        "type" : "crement"
      },
      "assign-vars" : [ 4 ],
      "line-end" : 371,
      "code" : "skip--",
      "entry" : false,
      "use-vars" : [ 4 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 129, 131 ],
      "in-vars" : [ 34, 5, 7, 18, 4, 27, 45, 11, 9, 33, 8, 60, 26, 15, 38, 31, 3, 6, 57, 35, 61, 40 ],
      "exit" : false,
      "out-vars" : [ 6, 15, 38, 45, 11, 5, 3, 33, 40, 4, 8, 27, 35, 7, 18, 61, 60, 57, 34, 31, 26, 9 ],
      "decl-vars" : [ ],
      "line-start" : 372,
      "ast" : {
        "condition" : {
          "go-type" : 165,
          "kind" : "expression",
          "left" : {
            "go-type" : 78,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "n",
              "variable" : 40
            }
          },
          "operator" : "<",
          "right" : {
            "go-type" : 78,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "max",
              "variable" : 6
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 375,
      "code" : "if n < max {\n\t(*[1 << 20]uintptr)(unsafe.Pointer(pcbuf))[n] = pc\n\tn++\n}",
      "entry" : false,
      "use-vars" : [ 40, 6 ]
    }, {
      "update-vars" : [ 5 ],
      "successors" : [ 130 ],
      "in-vars" : [ 4, 6, 35, 45, 7, 33, 15, 27, 31, 5, 3, 61, 26, 57, 40, 34, 18, 60, 9, 8, 38, 11 ],
      "exit" : false,
      "out-vars" : [ 34, 33, 15, 8, 27, 35, 38, 40, 31, 3, 60, 9, 6, 7, 45, 11, 5, 18, 4, 61, 26 ],
      "decl-vars" : [ ],
      "line-start" : 373,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 2,
          "index" : {
            "go-type" : 78,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "n",
              "variable" : 40
            }
          },
          "kind" : "expression",
          "target" : {
            "coerced-to" : {
              "contained" : {
                "element" : {
                  "go-type" : 2,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 2,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "uintptr"
                  }
                },
                "go-type" : 222,
                "kind" : "type",
                "length" : {
                  "go-type" : 216,
                  "kind" : "constant",
                  "value" : {
                    "type" : "INT",
                    "value" : "1048576"
                  }
                },
                "type" : "array"
              },
              "go-type" : 221,
              "kind" : "type",
              "type" : "pointer"
            },
            "go-type" : 221,
            "kind" : "expression",
            "target" : {
              "coerced-to" : {
                "go-type" : 11,
                "kind" : "type",
                "qualifier" : {
                  "ident-kind" : "PkgName",
                  "kind" : "ident",
                  "package" : 1,
                  "value" : "unsafe"
                },
                "type" : "identifier",
                "value" : {
                  "go-type" : 11,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "Pointer"
                }
              },
              "go-type" : 11,
              "kind" : "expression",
              "target" : {
                "go-type" : 114,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "pcbuf",
                  "variable" : 5
                }
              },
              "type" : "cast"
            },
            "type" : "cast"
          },
          "type" : "index"
        } ],
        "right" : [ {
          "go-type" : 2,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "pc",
            "variable" : 57
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 373,
      "code" : "(*[1 << 20]uintptr)(unsafe.Pointer(pcbuf))[n] = pc",
      "entry" : false,
      "use-vars" : [ 5, 57, 40 ]
    }, {
      "update-vars" : [ 40 ],
      "successors" : [ 131 ],
      "in-vars" : [ 26, 9, 8, 38, 11, 60, 31, 4, 27, 35, 34, 7, 3, 61, 15, 45, 40, 5, 18, 33, 6 ],
      "exit" : false,
      "out-vars" : [ 4, 60, 9, 45, 11, 40, 5, 31, 61, 26, 15, 27, 35, 38, 34, 18, 7, 3, 33, 6, 8 ],
      "decl-vars" : [ ],
      "line-start" : 374,
      "ast" : {
        "kind" : "statement",
        "operation" : "++",
        "target" : {
          "go-type" : 78,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "n",
            "variable" : 40
          }
        },
        "type" : "crement"
      },
      "assign-vars" : [ 40 ],
      "line-end" : 374,
      "code" : "n++",
      "entry" : false,
      "use-vars" : [ 40 ]
    }, {
      "update-vars" : [ 39 ],
      "successors" : [ 132 ],
      "in-vars" : [ 34, 4, 15, 45, 31, 7, 18, 3, 60, 26, 40, 35, 38, 33, 8, 27, 5, 61, 9, 6, 11 ],
      "exit" : false,
      "out-vars" : [ 11, 40, 4, 33, 6, 27, 38, 26, 15, 8, 34, 5, 61, 60, 35, 45, 7, 18, 3, 9, 39, 31 ],
      "decl-vars" : [ ],
      "line-start" : 376,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 125,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "lastFuncID",
            "variable" : 39
          }
        } ],
        "right" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "funcID",
            "variable" : 62
          },
          "go-type" : 125,
          "kind" : "expression",
          "target" : {
            "go-type" : 213,
            "index" : {
              "go-type" : 17,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "ix",
                "variable" : 60
              }
            },
            "kind" : "expression",
            "target" : {
              "go-type" : 211,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "inltree",
                "variable" : 61
              }
            },
            "type" : "index"
          },
          "type" : "selector"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 39 ],
      "line-end" : 376,
      "code" : "lastFuncID = inltree[ix].funcID",
      "entry" : false,
      "use-vars" : [ 61, 60 ]
    }, {
      "update-vars" : [ 58 ],
      "successors" : [ 133 ],
      "in-vars" : [ 33, 35, 34, 31, 7, 39, 60, 6, 9, 8, 40, 4, 61, 26, 5, 18, 3, 15, 27, 38, 45, 11 ],
      "exit" : false,
      "out-vars" : [ 4, 8, 35, 7, 39, 31, 18, 33, 38, 11, 5, 58, 6, 27, 34, 3, 61, 26, 9, 15, 45, 40 ],
      "decl-vars" : [ ],
      "line-start" : 378,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 2,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "tracepc",
            "variable" : 58
          }
        } ],
        "right" : [ {
          "go-type" : 2,
          "kind" : "expression",
          "left" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "entry",
              "variable" : 56
            },
            "go-type" : 2,
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "fn",
                "variable" : 37
              },
              "go-type" : 120,
              "kind" : "expression",
              "target" : {
                "go-type" : 118,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "frame",
                  "variable" : 27
                }
              },
              "type" : "selector"
            },
            "type" : "selector"
          },
          "operator" : "+",
          "right" : {
            "coerced-to" : {
              "go-type" : 2,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 2,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "uintptr"
              }
            },
            "go-type" : 2,
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "parentPc",
                "variable" : 63
              },
              "go-type" : 17,
              "kind" : "expression",
              "target" : {
                "go-type" : 213,
                "index" : {
                  "go-type" : 17,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "ix",
                    "variable" : 60
                  }
                },
                "kind" : "expression",
                "target" : {
                  "go-type" : 211,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "inltree",
                    "variable" : 61
                  }
                },
                "type" : "index"
              },
              "type" : "selector"
            },
            "type" : "cast"
          },
          "type" : "binary"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 58 ],
      "line-end" : 378,
      "code" : "tracepc = frame.fn.entry + uintptr(inltree[ix].parentPc)",
      "entry" : false,
      "use-vars" : [ 27, 61, 60 ]
    }, {
      "update-vars" : [ 57 ],
      "successors" : [ 121 ],
      "in-vars" : [ 35, 31, 18, 61, 33, 6, 38, 11, 34, 15, 8, 39, 40, 5, 7, 27, 45, 4, 3, 58, 26, 9 ],
      "exit" : false,
      "out-vars" : [ 18, 61, 57, 45, 39, 34, 5, 31, 26, 35, 9, 33, 3, 58, 6, 15, 8, 27, 38, 11, 40, 7, 4 ],
      "decl-vars" : [ ],
      "line-start" : 379,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 2,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "pc",
            "variable" : 57
          }
        } ],
        "right" : [ {
          "go-type" : 2,
          "kind" : "expression",
          "left" : {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "tracepc",
              "variable" : 58
            }
          },
          "operator" : "+",
          "right" : {
            "go-type" : 2,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "1"
            }
          },
          "type" : "binary"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 57 ],
      "line-end" : 379,
      "code" : "pc = tracepc + 1",
      "entry" : false,
      "use-vars" : [ 58 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 135, 140 ],
      "in-vars" : [ 6, 15, 8, 39, 34, 31, 7, 18, 26, 27, 35, 5, 57, 11, 4, 3, 9, 33, 38, 45, 40 ],
      "exit" : false,
      "out-vars" : [ 5, 4, 3, 9, 33, 6, 27, 35, 40, 31, 7, 8, 57, 38, 34, 26, 15, 45, 11, 18 ],
      "decl-vars" : [ ],
      "line-start" : 383,
      "ast" : {
        "condition" : {
          "go-type" : 13,
          "kind" : "expression",
          "left" : {
            "go-type" : 13,
            "kind" : "expression",
            "left" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "funcID",
                "variable" : 44
              },
              "go-type" : 125,
              "kind" : "expression",
              "target" : {
                "go-type" : 120,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "f",
                  "variable" : 35
                }
              },
              "type" : "selector"
            },
            "operator" : "==",
            "right" : {
              "go-type" : 125,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "22"
              }
            },
            "type" : "binary"
          },
          "operator" : "&&",
          "right" : {
            "arguments" : [ {
              "go-type" : 125,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "lastFuncID",
                "variable" : 39
              }
            } ],
            "ellipsis" : false,
            "function" : {
              "go-type" : 219,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "function" : 15,
                "ident-kind" : "Func",
                "kind" : "ident",
                "value" : "elideWrapperCalling"
              }
            },
            "go-type" : 13,
            "kind" : "expression",
            "type" : "call"
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 390,
      "code" : "if f.funcID == funcID_wrapper && elideWrapperCalling(lastFuncID) {\n\n} else if skip > 0 {\n\tskip--\n} else if n < max {\n\t(*[1 << 20]uintptr)(unsafe.Pointer(pcbuf))[n] = pc\n\tn++\n}",
      "entry" : false,
      "use-vars" : [ 35, 39 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 136, 137 ],
      "in-vars" : [ 40, 7, 18, 4, 3, 33, 11, 34, 15, 8, 35, 26, 5, 6, 57, 38, 31, 9, 27, 45 ],
      "exit" : false,
      "out-vars" : [ 34, 8, 45, 18, 3, 9, 6, 31, 38, 40, 4, 27, 35, 11, 5, 7, 26, 33, 15, 57 ],
      "decl-vars" : [ ],
      "line-start" : 385,
      "ast" : {
        "condition" : {
          "go-type" : 165,
          "kind" : "expression",
          "left" : {
            "go-type" : 78,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "skip",
              "variable" : 4
            }
          },
          "operator" : ">",
          "right" : {
            "go-type" : 78,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 390,
      "code" : "if skip > 0 {\n\tskip--\n} else if n < max {\n\t(*[1 << 20]uintptr)(unsafe.Pointer(pcbuf))[n] = pc\n\tn++\n}",
      "entry" : false,
      "use-vars" : [ 4 ]
    }, {
      "update-vars" : [ 4 ],
      "successors" : [ 140 ],
      "in-vars" : [ 35, 45, 34, 6, 15, 11, 7, 26, 8, 27, 38, 5, 3, 9, 40, 31, 18, 4, 33 ],
      "exit" : false,
      "out-vars" : [ 7, 8, 45, 40, 31, 27, 38, 33, 26, 9, 6, 15, 11, 18, 4, 3, 35, 34, 5 ],
      "decl-vars" : [ ],
      "line-start" : 386,
      "ast" : {
        "kind" : "statement",
        "operation" : "--",
        "target" : {
          "go-type" : 78,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "skip",
            "variable" : 4
          }
        },
        "type" : "crement"
      },
      "assign-vars" : [ 4 ],
      "line-end" : 386,
      "code" : "skip--",
      "entry" : false,
      "use-vars" : [ 4 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 138, 140 ],
      "in-vars" : [ 6, 40, 4, 3, 34, 26, 9, 8, 57, 35, 11, 7, 27, 38, 5, 33, 15, 45, 31, 18 ],
      "exit" : false,
      "out-vars" : [ 40, 5, 18, 4, 3, 8, 11, 38, 26, 27, 35, 45, 31, 7, 33, 6, 15, 57, 9, 34 ],
      "decl-vars" : [ ],
      "line-start" : 387,
      "ast" : {
        "condition" : {
          "go-type" : 165,
          "kind" : "expression",
          "left" : {
            "go-type" : 78,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "n",
              "variable" : 40
            }
          },
          "operator" : "<",
          "right" : {
            "go-type" : 78,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "max",
              "variable" : 6
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 390,
      "code" : "if n < max {\n\t(*[1 << 20]uintptr)(unsafe.Pointer(pcbuf))[n] = pc\n\tn++\n}",
      "entry" : false,
      "use-vars" : [ 40, 6 ]
    }, {
      "update-vars" : [ 5 ],
      "successors" : [ 139 ],
      "in-vars" : [ 40, 5, 31, 3, 34, 11, 18, 26, 33, 15, 45, 38, 7, 8, 35, 27, 4, 9, 6, 57 ],
      "exit" : false,
      "out-vars" : [ 38, 40, 31, 9, 33, 45, 18, 3, 6, 5, 7, 4, 26, 15, 27, 35, 11, 34, 8 ],
      "decl-vars" : [ ],
      "line-start" : 388,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 2,
          "index" : {
            "go-type" : 78,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "n",
              "variable" : 40
            }
          },
          "kind" : "expression",
          "target" : {
            "coerced-to" : {
              "contained" : {
                "element" : {
                  "go-type" : 2,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 2,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "uintptr"
                  }
                },
                "go-type" : 222,
                "kind" : "type",
                "length" : {
                  "go-type" : 216,
                  "kind" : "constant",
                  "value" : {
                    "type" : "INT",
                    "value" : "1048576"
                  }
                },
                "type" : "array"
              },
              "go-type" : 221,
              "kind" : "type",
              "type" : "pointer"
            },
            "go-type" : 221,
            "kind" : "expression",
            "target" : {
              "coerced-to" : {
                "go-type" : 11,
                "kind" : "type",
                "qualifier" : {
                  "ident-kind" : "PkgName",
                  "kind" : "ident",
                  "package" : 1,
                  "value" : "unsafe"
                },
                "type" : "identifier",
                "value" : {
                  "go-type" : 11,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "Pointer"
                }
              },
              "go-type" : 11,
              "kind" : "expression",
              "target" : {
                "go-type" : 114,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "pcbuf",
                  "variable" : 5
                }
              },
              "type" : "cast"
            },
            "type" : "cast"
          },
          "type" : "index"
        } ],
        "right" : [ {
          "go-type" : 2,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "pc",
            "variable" : 57
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 388,
      "code" : "(*[1 << 20]uintptr)(unsafe.Pointer(pcbuf))[n] = pc",
      "entry" : false,
      "use-vars" : [ 57, 5, 40 ]
    }, {
      "update-vars" : [ 40 ],
      "successors" : [ 140 ],
      "in-vars" : [ 18, 35, 34, 31, 7, 9, 15, 38, 40, 5, 26, 6, 33, 8, 27, 45, 11, 4, 3 ],
      "exit" : false,
      "out-vars" : [ 34, 18, 26, 6, 15, 8, 27, 45, 4, 9, 33, 35, 38, 40, 31, 7, 3, 11, 5 ],
      "decl-vars" : [ ],
      "line-start" : 389,
      "ast" : {
        "kind" : "statement",
        "operation" : "++",
        "target" : {
          "go-type" : 78,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "n",
            "variable" : 40
          }
        },
        "type" : "crement"
      },
      "assign-vars" : [ 40 ],
      "line-end" : 389,
      "code" : "n++",
      "entry" : false,
      "use-vars" : [ 40 ]
    }, {
      "update-vars" : [ 39 ],
      "successors" : [ 141 ],
      "in-vars" : [ 27, 26, 9, 15, 38, 34, 40, 45, 11, 5, 31, 7, 33, 6, 35, 18, 4, 3, 8 ],
      "exit" : false,
      "out-vars" : [ 3, 33, 45, 11, 40, 5, 31, 18, 26, 6, 38, 34, 15, 8, 35, 7, 4, 9, 27, 39 ],
      "decl-vars" : [ ],
      "line-start" : 391,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 125,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "lastFuncID",
            "variable" : 39
          }
        } ],
        "right" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "funcID",
            "variable" : 44
          },
          "go-type" : 125,
          "kind" : "expression",
          "target" : {
            "go-type" : 120,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "f",
              "variable" : 35
            }
          },
          "type" : "selector"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 39 ],
      "line-end" : 391,
      "code" : "lastFuncID = f.funcID",
      "entry" : false,
      "use-vars" : [ 35 ]
    }, {
      "update-vars" : [ 40 ],
      "successors" : [ 142 ],
      "in-vars" : [ 45, 7, 4, 6, 11, 18, 26, 15, 39, 34, 31, 3, 8, 27, 35, 38, 40, 5, 9, 33 ],
      "exit" : false,
      "out-vars" : [ 27, 38, 11, 39, 3, 26, 35, 45, 34, 31, 18, 4, 8, 5, 7, 33, 15, 40, 9, 6 ],
      "decl-vars" : [ ],
      "line-start" : 392,
      "ast" : {
        "kind" : "statement",
        "operation" : "--",
        "target" : {
          "go-type" : 78,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "n",
            "variable" : 40
          }
        },
        "type" : "crement"
      },
      "assign-vars" : [ 40 ],
      "line-end" : 392,
      "code" : "n--",
      "entry" : false,
      "use-vars" : [ 40 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 143, 186 ],
      "in-vars" : [ 39, 40, 31, 3, 35, 45, 11, 9, 27, 38, 4, 7, 18, 26, 33, 6, 15, 8, 34, 5 ],
      "exit" : false,
      "out-vars" : [ 39, 40, 5, 6, 8, 35, 45, 7, 4, 27, 31, 18, 26, 33, 15, 38, 11, 34, 3, 9 ],
      "decl-vars" : [ ],
      "line-start" : 395,
      "ast" : {
        "condition" : {
          "go-type" : 13,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "printing",
            "variable" : 34
          }
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 462,
      "code" : "if printing {\n\n\ttracepc := frame.pc\n\tif (n > 0 || flags&_TraceTrap == 0) && frame.pc > f.entry && !waspanic {\n\t\ttracepc--\n\t}\n\n\tif inldata := funcdata(f, _FUNCDATA_InlTree); inldata != nil {\n\t\tinltree := (*[1 << 20]inlinedCall)(inldata)\n\t\tfor {\n\t\t\tix := pcdatavalue(f, _PCDATA_InlTreeIndex, tracepc, nil)\n\t\t\tif ix < 0 {\n\t\t\t\tbreak\n\t\t\t}\n\t\t\tif (flags&_TraceRuntimeFrames) != 0 || showframe(f, gp, nprint == 0, inltree[ix].funcID, lastFuncID) {\n\t\t\t\tname := funcnameFromNameoff(f, inltree[ix].func_)\n\t\t\t\tfile, line := funcline(f, tracepc)\n\t\t\t\tprint(name, \"(...)\\n\")\n\t\t\t\tprint(\"\\t\", file, \":\", line, \"\\n\")\n\t\t\t\tnprint++\n\t\t\t}\n\t\t\tlastFuncID = inltree[ix].funcID\n\n\t\t\ttracepc = frame.fn.entry + uintptr(inltree[ix].parentPc)\n\t\t}\n\t}\n\tif (flags&_TraceRuntimeFrames) != 0 || showframe(f, gp, nprint == 0, f.funcID, lastFuncID) {\n\n\t\tname := funcname(f)\n\t\tfile, line := funcline(f, tracepc)\n\t\tif name == \"runtime.gopanic\" {\n\t\t\tname = \"panic\"\n\t\t}\n\t\tprint(name, \"(\")\n\t\targp := (*[100]uintptr)(unsafe.Pointer(frame.argp))\n\t\tfor i := uintptr(0); i < frame.arglen/sys.PtrSize; i++ {\n\t\t\tif i >= 10 {\n\t\t\t\tprint(\", ...\")\n\t\t\t\tbreak\n\t\t\t}\n\t\t\tif i != 0 {\n\t\t\t\tprint(\", \")\n\t\t\t}\n\t\t\tprint(hex(argp[i]))\n\t\t}\n\t\tprint(\")\\n\")\n\t\tprint(\"\\t\", file, \":\", line)\n\t\tif frame.pc > f.entry {\n\t\t\tprint(\" +\", hex(frame.pc-f.entry))\n\t\t}\n\t\tif gp.m != nil && gp.m.throwing > 0 && gp == gp.m.curg || level >= 2 {\n\t\t\tprint(\" fp=\", hex(frame.fp), \" sp=\", hex(frame.sp), \" pc=\", hex(frame.pc))\n\t\t}\n\t\tprint(\"\\n\")\n\t\tnprint++\n\t}\n\tlastFuncID = f.funcID\n}",
      "entry" : false,
      "use-vars" : [ 34 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 144 ],
      "in-vars" : [ 27, 39, 40, 5, 7, 3, 33, 6, 31, 18, 9, 15, 35, 38, 45, 11, 34, 4, 26, 8 ],
      "exit" : false,
      "out-vars" : [ 18, 15, 27, 35, 38, 39, 7, 34, 4, 9, 6, 64, 11, 40, 26, 33, 45, 5, 31, 3, 8 ],
      "decl-vars" : [ 64 ],
      "line-start" : 404,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "tracepc"
          }
        } ],
        "right" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "pc",
            "variable" : 28
          },
          "go-type" : 2,
          "kind" : "expression",
          "target" : {
            "go-type" : 118,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "frame",
              "variable" : 27
            }
          },
          "type" : "selector"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 404,
      "code" : "tracepc := frame.pc",
      "entry" : false,
      "use-vars" : [ 27 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 145, 147 ],
      "in-vars" : [ 18, 9, 15, 8, 35, 64, 45, 34, 40, 7, 3, 11, 5, 4, 33, 26, 6, 27, 38, 39, 31 ],
      "exit" : false,
      "out-vars" : [ 6, 8, 64, 9, 3, 26, 33, 7, 4, 5, 15, 27, 38, 11, 39, 34, 40, 18, 35, 45 ],
      "decl-vars" : [ ],
      "line-start" : 405,
      "ast" : {
        "condition" : {
          "go-type" : 13,
          "kind" : "expression",
          "left" : {
            "go-type" : 13,
            "kind" : "expression",
            "left" : {
              "go-type" : 13,
              "kind" : "expression",
              "target" : {
                "go-type" : 13,
                "kind" : "expression",
                "left" : {
                  "go-type" : 13,
                  "kind" : "expression",
                  "left" : {
                    "go-type" : 78,
                    "kind" : "expression",
                    "type" : "identifier",
                    "value" : {
                      "ident-kind" : "Var",
                      "kind" : "ident",
                      "value" : "n",
                      "variable" : 40
                    }
                  },
                  "operator" : ">",
                  "right" : {
                    "go-type" : 78,
                    "kind" : "constant",
                    "value" : {
                      "type" : "INT",
                      "value" : "0"
                    }
                  },
                  "type" : "binary"
                },
                "operator" : "||",
                "right" : {
                  "go-type" : 13,
                  "kind" : "expression",
                  "left" : {
                    "go-type" : 97,
                    "kind" : "expression",
                    "left" : {
                      "go-type" : 97,
                      "kind" : "expression",
                      "type" : "identifier",
                      "value" : {
                        "ident-kind" : "Var",
                        "kind" : "ident",
                        "value" : "flags",
                        "variable" : 9
                      }
                    },
                    "operator" : "&",
                    "right" : {
                      "go-type" : 97,
                      "kind" : "constant",
                      "value" : {
                        "type" : "INT",
                        "value" : "2"
                      }
                    },
                    "type" : "binary"
                  },
                  "operator" : "==",
                  "right" : {
                    "go-type" : 97,
                    "kind" : "constant",
                    "value" : {
                      "type" : "INT",
                      "value" : "0"
                    }
                  },
                  "type" : "binary"
                },
                "type" : "binary"
              },
              "type" : "paren"
            },
            "operator" : "&&",
            "right" : {
              "go-type" : 13,
              "kind" : "expression",
              "left" : {
                "field" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "pc",
                  "variable" : 28
                },
                "go-type" : 2,
                "kind" : "expression",
                "target" : {
                  "go-type" : 118,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "frame",
                    "variable" : 27
                  }
                },
                "type" : "selector"
              },
              "operator" : ">",
              "right" : {
                "field" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "entry",
                  "variable" : 56
                },
                "go-type" : 2,
                "kind" : "expression",
                "target" : {
                  "go-type" : 120,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "f",
                    "variable" : 35
                  }
                },
                "type" : "selector"
              },
              "type" : "binary"
            },
            "type" : "binary"
          },
          "operator" : "&&",
          "right" : {
            "go-type" : 13,
            "kind" : "expression",
            "operator" : "!",
            "target" : {
              "go-type" : 13,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "waspanic",
                "variable" : 31
              }
            },
            "type" : "unary"
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 407,
      "code" : "if (n > 0 || flags&_TraceTrap == 0) && frame.pc > f.entry && !waspanic {\n\ttracepc--\n}",
      "entry" : false,
      "use-vars" : [ 27, 35, 31, 40, 9 ]
    }, {
      "update-vars" : [ 64 ],
      "successors" : [ 147 ],
      "in-vars" : [ 26, 38, 7, 4, 3, 64, 18, 33, 45, 11, 34, 15, 5, 9, 6, 8, 27, 35, 39, 40 ],
      "exit" : false,
      "out-vars" : [ 38, 34, 7, 18, 26, 33, 64, 40, 6, 45, 39, 4, 15, 27, 35, 11, 5, 3, 9, 8 ],
      "decl-vars" : [ ],
      "line-start" : 406,
      "ast" : {
        "kind" : "statement",
        "operation" : "--",
        "target" : {
          "go-type" : 2,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "tracepc",
            "variable" : 64
          }
        },
        "type" : "crement"
      },
      "assign-vars" : [ 64 ],
      "line-end" : 406,
      "code" : "tracepc--",
      "entry" : false,
      "use-vars" : [ 64 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 148, 161 ],
      "in-vars" : [ 35, 64, 15, 8, 11, 6, 27, 38, 3, 65, 9, 18, 4, 45, 39, 34, 40, 5, 7, 26, 33 ],
      "exit" : false,
      "out-vars" : [ 65, 9, 27, 35, 38, 39, 40, 3, 15, 8, 45, 11, 5, 6, 33, 64, 34, 7, 18, 4, 26 ],
      "decl-vars" : [ ],
      "line-start" : 409,
      "ast" : {
        "condition" : {
          "go-type" : 165,
          "kind" : "expression",
          "left" : {
            "go-type" : 11,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "inldata",
              "variable" : 65
            }
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 11,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Nil",
              "kind" : "ident",
              "value" : "nil"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 427,
      "code" : "if inldata := funcdata(f, _FUNCDATA_InlTree); inldata != nil {\n\tinltree := (*[1 << 20]inlinedCall)(inldata)\n\tfor {\n\t\tix := pcdatavalue(f, _PCDATA_InlTreeIndex, tracepc, nil)\n\t\tif ix < 0 {\n\t\t\tbreak\n\t\t}\n\t\tif (flags&_TraceRuntimeFrames) != 0 || showframe(f, gp, nprint == 0, inltree[ix].funcID, lastFuncID) {\n\t\t\tname := funcnameFromNameoff(f, inltree[ix].func_)\n\t\t\tfile, line := funcline(f, tracepc)\n\t\t\tprint(name, \"(...)\\n\")\n\t\t\tprint(\"\\t\", file, \":\", line, \"\\n\")\n\t\t\tnprint++\n\t\t}\n\t\tlastFuncID = inltree[ix].funcID\n\n\t\ttracepc = frame.fn.entry + uintptr(inltree[ix].parentPc)\n\t}\n}",
      "entry" : false,
      "use-vars" : [ 65 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 146 ],
      "in-vars" : [ 11, 7, 6, 8, 27, 38, 26, 64, 39, 40, 5, 18, 3, 33, 15, 45, 34, 4, 9, 35 ],
      "exit" : false,
      "out-vars" : [ 9, 8, 5, 64, 40, 18, 4, 3, 65, 6, 35, 39, 34, 45, 38, 11, 7, 26, 33, 15, 27 ],
      "decl-vars" : [ 65 ],
      "line-start" : 409,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "inldata"
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 120,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "f",
              "variable" : 35
            }
          }, {
            "go-type" : 41,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "4"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 209,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 13,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "funcdata"
            }
          },
          "go-type" : 11,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 409,
      "code" : "inldata := funcdata(f, _FUNCDATA_InlTree)",
      "entry" : false,
      "use-vars" : [ 35 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 149 ],
      "in-vars" : [ 18, 4, 9, 27, 35, 38, 45, 40, 8, 65, 6, 39, 34, 5, 7, 26, 64, 11, 3, 33, 15 ],
      "exit" : false,
      "out-vars" : [ 9, 33, 11, 34, 3, 64, 39, 5, 45, 40, 4, 26, 6, 27, 35, 38, 15, 8, 67, 7, 18 ],
      "decl-vars" : [ 67 ],
      "line-start" : 410,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "inltree"
          }
        } ],
        "right" : [ {
          "coerced-to" : {
            "contained" : {
              "element" : {
                "go-type" : 213,
                "kind" : "type",
                "type" : "identifier",
                "value" : {
                  "go-type" : 213,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "inlinedCall"
                }
              },
              "go-type" : 212,
              "kind" : "type",
              "length" : {
                "go-type" : 216,
                "kind" : "constant",
                "value" : {
                  "type" : "INT",
                  "value" : "1048576"
                }
              },
              "type" : "array"
            },
            "go-type" : 211,
            "kind" : "type",
            "type" : "pointer"
          },
          "go-type" : 211,
          "kind" : "expression",
          "target" : {
            "go-type" : 11,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "inldata",
              "variable" : 65
            }
          },
          "type" : "cast"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 410,
      "code" : "inltree := (*[1 << 20]inlinedCall)(inldata)",
      "entry" : false,
      "use-vars" : [ 65 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 150, 161 ],
      "in-vars" : [ 35, 11, 5, 7, 18, 4, 9, 67, 15, 27, 64, 38, 3, 33, 8, 45, 39, 34, 40, 26, 6 ],
      "exit" : false,
      "out-vars" : [ 38, 45, 11, 39, 26, 27, 64, 67, 18, 4, 15, 35, 40, 3, 9, 8, 34, 5, 7, 33, 6 ],
      "decl-vars" : [ ],
      "line-start" : 411,
      "ast" : {
        "condition" : null,
        "kind" : "statement",
        "type" : "for"
      },
      "assign-vars" : [ ],
      "line-end" : 426,
      "code" : "for {\n\tix := pcdatavalue(f, _PCDATA_InlTreeIndex, tracepc, nil)\n\tif ix < 0 {\n\t\tbreak\n\t}\n\tif (flags&_TraceRuntimeFrames) != 0 || showframe(f, gp, nprint == 0, inltree[ix].funcID, lastFuncID) {\n\t\tname := funcnameFromNameoff(f, inltree[ix].func_)\n\t\tfile, line := funcline(f, tracepc)\n\t\tprint(name, \"(...)\\n\")\n\t\tprint(\"\\t\", file, \":\", line, \"\\n\")\n\t\tnprint++\n\t}\n\tlastFuncID = inltree[ix].funcID\n\n\ttracepc = frame.fn.entry + uintptr(inltree[ix].parentPc)\n}",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 151 ],
      "in-vars" : [ 4, 27, 35, 45, 9, 64, 39, 26, 34, 33, 15, 40, 5, 7, 18, 3, 38, 11, 67, 6, 8 ],
      "exit" : false,
      "out-vars" : [ 64, 40, 26, 9, 33, 8, 67, 5, 6, 38, 45, 11, 39, 18, 4, 27, 35, 66, 34, 7, 3, 15 ],
      "decl-vars" : [ 66 ],
      "line-start" : 412,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "ix"
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 120,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "f",
              "variable" : 35
            }
          }, {
            "go-type" : 17,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "2"
            }
          }, {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "tracepc",
              "variable" : 64
            }
          }, {
            "go-type" : 166,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Nil",
              "kind" : "ident",
              "value" : "nil"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 217,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 14,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "pcdatavalue"
            }
          },
          "go-type" : 17,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 412,
      "code" : "ix := pcdatavalue(f, _PCDATA_InlTreeIndex, tracepc, nil)",
      "entry" : false,
      "use-vars" : [ 64, 35 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 152, 153 ],
      "in-vars" : [ 11, 34, 40, 6, 64, 38, 5, 7, 33, 8, 27, 35, 9, 45, 66, 18, 4, 3, 26, 15, 39, 67 ],
      "exit" : false,
      "out-vars" : [ 45, 67, 7, 4, 3, 26, 33, 35, 11, 40, 5, 9, 6, 38, 66, 34, 18, 15, 27, 39, 8, 64 ],
      "decl-vars" : [ ],
      "line-start" : 413,
      "ast" : {
        "condition" : {
          "go-type" : 165,
          "kind" : "expression",
          "left" : {
            "go-type" : 17,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "ix",
              "variable" : 66
            }
          },
          "operator" : "<",
          "right" : {
            "go-type" : 17,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 415,
      "code" : "if ix < 0 {\n\tbreak\n}",
      "entry" : false,
      "use-vars" : [ 66 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 161 ],
      "in-vars" : [ 39, 9, 34, 4, 33, 8, 3, 6, 35, 64, 45, 40, 7, 18, 15, 27, 38, 11, 5, 26 ],
      "exit" : false,
      "out-vars" : [ 35, 64, 39, 34, 40, 7, 27, 3, 26, 6, 38, 45, 11, 18, 4, 15, 5, 9, 33, 8 ],
      "decl-vars" : [ ],
      "line-start" : 414,
      "ast" : {
        "kind" : "statement",
        "label" : null,
        "type" : "break"
      },
      "assign-vars" : [ ],
      "line-end" : 414,
      "code" : "break",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 154, 159 ],
      "in-vars" : [ 8, 38, 45, 34, 5, 67, 66, 7, 9, 15, 64, 18, 4, 33, 40, 3, 26, 6, 27, 35, 11, 39 ],
      "exit" : false,
      "out-vars" : [ 3, 26, 6, 35, 38, 67, 66, 40, 15, 64, 18, 4, 27, 11, 34, 5, 7, 45, 9, 33, 8 ],
      "decl-vars" : [ ],
      "line-start" : 416,
      "ast" : {
        "condition" : {
          "go-type" : 13,
          "kind" : "expression",
          "left" : {
            "go-type" : 13,
            "kind" : "expression",
            "left" : {
              "go-type" : 97,
              "kind" : "expression",
              "target" : {
                "go-type" : 97,
                "kind" : "expression",
                "left" : {
                  "go-type" : 97,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "flags",
                    "variable" : 9
                  }
                },
                "operator" : "&",
                "right" : {
                  "go-type" : 97,
                  "kind" : "constant",
                  "value" : {
                    "type" : "INT",
                    "value" : "1"
                  }
                },
                "type" : "binary"
              },
              "type" : "paren"
            },
            "operator" : "!=",
            "right" : {
              "go-type" : 97,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "0"
              }
            },
            "type" : "binary"
          },
          "operator" : "||",
          "right" : {
            "arguments" : [ {
              "go-type" : 120,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "f",
                "variable" : 35
              }
            }, {
              "go-type" : 3,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "gp",
                "variable" : 3
              }
            }, {
              "go-type" : 13,
              "kind" : "expression",
              "left" : {
                "go-type" : 78,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "nprint",
                  "variable" : 26
                }
              },
              "operator" : "==",
              "right" : {
                "go-type" : 78,
                "kind" : "constant",
                "value" : {
                  "type" : "INT",
                  "value" : "0"
                }
              },
              "type" : "binary"
            }, {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "funcID",
                "variable" : 62
              },
              "go-type" : 125,
              "kind" : "expression",
              "target" : {
                "go-type" : 213,
                "index" : {
                  "go-type" : 17,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "ix",
                    "variable" : 66
                  }
                },
                "kind" : "expression",
                "target" : {
                  "go-type" : 211,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "inltree",
                    "variable" : 67
                  }
                },
                "type" : "index"
              },
              "type" : "selector"
            }, {
              "go-type" : 125,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "lastFuncID",
                "variable" : 39
              }
            } ],
            "ellipsis" : false,
            "function" : {
              "go-type" : 223,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "function" : 16,
                "ident-kind" : "Func",
                "kind" : "ident",
                "value" : "showframe"
              }
            },
            "go-type" : 13,
            "kind" : "expression",
            "type" : "call"
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 422,
      "code" : "if (flags&_TraceRuntimeFrames) != 0 || showframe(f, gp, nprint == 0, inltree[ix].funcID, lastFuncID) {\n\tname := funcnameFromNameoff(f, inltree[ix].func_)\n\tfile, line := funcline(f, tracepc)\n\tprint(name, \"(...)\\n\")\n\tprint(\"\\t\", file, \":\", line, \"\\n\")\n\tnprint++\n}",
      "entry" : false,
      "use-vars" : [ 39, 9, 26, 66, 35, 3, 67 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 155 ],
      "in-vars" : [ 27, 35, 11, 66, 18, 9, 6, 67, 8, 64, 45, 34, 5, 7, 15, 38, 40, 4, 3, 26, 33 ],
      "exit" : false,
      "out-vars" : [ 64, 33, 35, 11, 18, 69, 26, 38, 45, 67, 66, 34, 40, 3, 6, 27, 8, 15, 7, 4, 9, 5 ],
      "decl-vars" : [ 69 ],
      "line-start" : 417,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "name"
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 120,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "f",
              "variable" : 35
            }
          }, {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "func_",
              "variable" : 68
            },
            "go-type" : 17,
            "kind" : "expression",
            "target" : {
              "go-type" : 213,
              "index" : {
                "go-type" : 17,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "ix",
                  "variable" : 66
                }
              },
              "kind" : "expression",
              "target" : {
                "go-type" : 211,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "inltree",
                  "variable" : 67
                }
              },
              "type" : "index"
            },
            "type" : "selector"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 225,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 17,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "funcnameFromNameoff"
            }
          },
          "go-type" : 39,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 417,
      "code" : "name := funcnameFromNameoff(f, inltree[ix].func_)",
      "entry" : false,
      "use-vars" : [ 35, 67, 66 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 156 ],
      "in-vars" : [ 4, 69, 9, 45, 34, 7, 3, 26, 27, 38, 66, 15, 8, 35, 11, 67, 40, 5, 18, 33, 6, 64 ],
      "exit" : false,
      "out-vars" : [ 6, 8, 35, 26, 9, 7, 69, 27, 11, 5, 34, 40, 4, 3, 38, 67, 66, 70, 71, 15, 45, 18, 33 ],
      "decl-vars" : [ 70, 71 ],
      "line-start" : 418,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "file"
          }
        }, {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "line"
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 120,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "f",
              "variable" : 35
            }
          }, {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "tracepc",
              "variable" : 64
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 228,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 18,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "funcline"
            }
          },
          "go-type" : 227,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 418,
      "code" : "file, line := funcline(f, tracepc)",
      "entry" : false,
      "use-vars" : [ 35, 64 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 157 ],
      "in-vars" : [ 18, 3, 69, 70, 27, 67, 5, 6, 38, 34, 26, 45, 40, 7, 4, 9, 33, 71, 15, 35, 11, 66, 8 ],
      "exit" : false,
      "out-vars" : [ 4, 3, 15, 27, 11, 5, 70, 18, 9, 38, 45, 67, 66, 40, 7, 71, 8, 35, 34, 26, 33, 6 ],
      "decl-vars" : [ ],
      "line-start" : 419,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 39,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "name",
              "variable" : 69
            }
          }, {
            "go-type" : 39,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "(...)\n"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 230,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Builtin",
              "kind" : "ident",
              "value" : "print"
            }
          },
          "go-type" : 36,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 419,
      "code" : "print(name, \"(...)\\n\")",
      "entry" : false,
      "use-vars" : [ 69 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 158 ],
      "in-vars" : [ 40, 5, 7, 3, 15, 11, 38, 66, 34, 9, 33, 27, 67, 18, 4, 71, 6, 35, 26, 70, 8, 45 ],
      "exit" : false,
      "out-vars" : [ 6, 27, 38, 45, 7, 9, 33, 35, 11, 66, 18, 15, 67, 34, 40, 4, 5, 3, 26, 8 ],
      "decl-vars" : [ ],
      "line-start" : 420,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 39,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "\t"
            }
          }, {
            "go-type" : 39,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "file",
              "variable" : 70
            }
          }, {
            "go-type" : 39,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : ":"
            }
          }, {
            "go-type" : 17,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "line",
              "variable" : 71
            }
          }, {
            "go-type" : 39,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "\n"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 232,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Builtin",
              "kind" : "ident",
              "value" : "print"
            }
          },
          "go-type" : 36,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 420,
      "code" : "print(\"\\t\", file, \":\", line, \"\\n\")",
      "entry" : false,
      "use-vars" : [ 70, 71 ]
    }, {
      "update-vars" : [ 26 ],
      "successors" : [ 159 ],
      "in-vars" : [ 40, 4, 35, 67, 34, 26, 9, 38, 11, 66, 5, 3, 15, 8, 27, 45, 7, 18, 33, 6 ],
      "exit" : false,
      "out-vars" : [ 27, 35, 38, 45, 5, 18, 7, 33, 6, 8, 67, 66, 34, 3, 11, 40, 4, 26, 9, 15 ],
      "decl-vars" : [ ],
      "line-start" : 421,
      "ast" : {
        "kind" : "statement",
        "operation" : "++",
        "target" : {
          "go-type" : 78,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "nprint",
            "variable" : 26
          }
        },
        "type" : "crement"
      },
      "assign-vars" : [ 26 ],
      "line-end" : 421,
      "code" : "nprint++",
      "entry" : false,
      "use-vars" : [ 26 ]
    }, {
      "update-vars" : [ 39 ],
      "successors" : [ 160 ],
      "in-vars" : [ 6, 8, 7, 18, 4, 27, 45, 66, 40, 5, 26, 33, 67, 34, 3, 15, 35, 38, 11, 9 ],
      "exit" : false,
      "out-vars" : [ 38, 40, 9, 6, 15, 8, 27, 35, 66, 5, 3, 26, 45, 39, 7, 4, 33, 11, 67, 34, 18 ],
      "decl-vars" : [ ],
      "line-start" : 423,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 125,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "lastFuncID",
            "variable" : 39
          }
        } ],
        "right" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "funcID",
            "variable" : 62
          },
          "go-type" : 125,
          "kind" : "expression",
          "target" : {
            "go-type" : 213,
            "index" : {
              "go-type" : 17,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "ix",
                "variable" : 66
              }
            },
            "kind" : "expression",
            "target" : {
              "go-type" : 211,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "inltree",
                "variable" : 67
              }
            },
            "type" : "index"
          },
          "type" : "selector"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 39 ],
      "line-end" : 423,
      "code" : "lastFuncID = inltree[ix].funcID",
      "entry" : false,
      "use-vars" : [ 66, 67 ]
    }, {
      "update-vars" : [ 64 ],
      "successors" : [ 149 ],
      "in-vars" : [ 40, 38, 45, 39, 7, 3, 26, 15, 8, 27, 11, 67, 5, 4, 33, 6, 35, 66, 34, 18, 9 ],
      "exit" : false,
      "out-vars" : [ 18, 4, 3, 27, 64, 34, 5, 7, 9, 11, 39, 40, 26, 38, 67, 6, 8, 35, 45, 33, 15 ],
      "decl-vars" : [ ],
      "line-start" : 425,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 2,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "tracepc",
            "variable" : 64
          }
        } ],
        "right" : [ {
          "go-type" : 2,
          "kind" : "expression",
          "left" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "entry",
              "variable" : 56
            },
            "go-type" : 2,
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "fn",
                "variable" : 37
              },
              "go-type" : 120,
              "kind" : "expression",
              "target" : {
                "go-type" : 118,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "frame",
                  "variable" : 27
                }
              },
              "type" : "selector"
            },
            "type" : "selector"
          },
          "operator" : "+",
          "right" : {
            "coerced-to" : {
              "go-type" : 2,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 2,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "uintptr"
              }
            },
            "go-type" : 2,
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "parentPc",
                "variable" : 63
              },
              "go-type" : 17,
              "kind" : "expression",
              "target" : {
                "go-type" : 213,
                "index" : {
                  "go-type" : 17,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "ix",
                    "variable" : 66
                  }
                },
                "kind" : "expression",
                "target" : {
                  "go-type" : 211,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "inltree",
                    "variable" : 67
                  }
                },
                "type" : "index"
              },
              "type" : "selector"
            },
            "type" : "cast"
          },
          "type" : "binary"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 64 ],
      "line-end" : 425,
      "code" : "tracepc = frame.fn.entry + uintptr(inltree[ix].parentPc)",
      "entry" : false,
      "use-vars" : [ 27, 67, 66 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 162, 185 ],
      "in-vars" : [ 45, 39, 5, 15, 27, 64, 40, 7, 18, 6, 11, 34, 8, 26, 9, 4, 3, 33, 35, 38 ],
      "exit" : false,
      "out-vars" : [ 27, 7, 9, 15, 64, 45, 34, 4, 6, 8, 11, 5, 18, 3, 33, 35, 38, 40, 26 ],
      "decl-vars" : [ ],
      "line-start" : 428,
      "ast" : {
        "condition" : {
          "go-type" : 13,
          "kind" : "expression",
          "left" : {
            "go-type" : 13,
            "kind" : "expression",
            "left" : {
              "go-type" : 97,
              "kind" : "expression",
              "target" : {
                "go-type" : 97,
                "kind" : "expression",
                "left" : {
                  "go-type" : 97,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "flags",
                    "variable" : 9
                  }
                },
                "operator" : "&",
                "right" : {
                  "go-type" : 97,
                  "kind" : "constant",
                  "value" : {
                    "type" : "INT",
                    "value" : "1"
                  }
                },
                "type" : "binary"
              },
              "type" : "paren"
            },
            "operator" : "!=",
            "right" : {
              "go-type" : 97,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "0"
              }
            },
            "type" : "binary"
          },
          "operator" : "||",
          "right" : {
            "arguments" : [ {
              "go-type" : 120,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "f",
                "variable" : 35
              }
            }, {
              "go-type" : 3,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "gp",
                "variable" : 3
              }
            }, {
              "go-type" : 13,
              "kind" : "expression",
              "left" : {
                "go-type" : 78,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "nprint",
                  "variable" : 26
                }
              },
              "operator" : "==",
              "right" : {
                "go-type" : 78,
                "kind" : "constant",
                "value" : {
                  "type" : "INT",
                  "value" : "0"
                }
              },
              "type" : "binary"
            }, {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "funcID",
                "variable" : 44
              },
              "go-type" : 125,
              "kind" : "expression",
              "target" : {
                "go-type" : 120,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "f",
                  "variable" : 35
                }
              },
              "type" : "selector"
            }, {
              "go-type" : 125,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "lastFuncID",
                "variable" : 39
              }
            } ],
            "ellipsis" : false,
            "function" : {
              "go-type" : 223,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "function" : 16,
                "ident-kind" : "Func",
                "kind" : "ident",
                "value" : "showframe"
              }
            },
            "go-type" : 13,
            "kind" : "expression",
            "type" : "call"
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 460,
      "code" : "if (flags&_TraceRuntimeFrames) != 0 || showframe(f, gp, nprint == 0, f.funcID, lastFuncID) {\n\n\tname := funcname(f)\n\tfile, line := funcline(f, tracepc)\n\tif name == \"runtime.gopanic\" {\n\t\tname = \"panic\"\n\t}\n\tprint(name, \"(\")\n\targp := (*[100]uintptr)(unsafe.Pointer(frame.argp))\n\tfor i := uintptr(0); i < frame.arglen/sys.PtrSize; i++ {\n\t\tif i >= 10 {\n\t\t\tprint(\", ...\")\n\t\t\tbreak\n\t\t}\n\t\tif i != 0 {\n\t\t\tprint(\", \")\n\t\t}\n\t\tprint(hex(argp[i]))\n\t}\n\tprint(\")\\n\")\n\tprint(\"\\t\", file, \":\", line)\n\tif frame.pc > f.entry {\n\t\tprint(\" +\", hex(frame.pc-f.entry))\n\t}\n\tif gp.m != nil && gp.m.throwing > 0 && gp == gp.m.curg || level >= 2 {\n\t\tprint(\" fp=\", hex(frame.fp), \" sp=\", hex(frame.sp), \" pc=\", hex(frame.pc))\n\t}\n\tprint(\"\\n\")\n\tnprint++\n}",
      "entry" : false,
      "use-vars" : [ 9, 3, 26, 39, 35 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 163 ],
      "in-vars" : [ 27, 45, 40, 34, 5, 3, 15, 35, 7, 18, 4, 9, 6, 8, 64, 38, 11, 26, 33 ],
      "exit" : false,
      "out-vars" : [ 45, 5, 18, 4, 9, 33, 6, 35, 11, 40, 3, 8, 27, 64, 34, 7, 38, 72, 26, 15 ],
      "decl-vars" : [ 72 ],
      "line-start" : 433,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "name"
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 120,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "f",
              "variable" : 35
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 197,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 9,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "funcname"
            }
          },
          "go-type" : 39,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 433,
      "code" : "name := funcname(f)",
      "entry" : false,
      "use-vars" : [ 35 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 164 ],
      "in-vars" : [ 35, 3, 72, 33, 15, 64, 11, 40, 5, 8, 38, 4, 6, 27, 45, 34, 7, 18, 26, 9 ],
      "exit" : false,
      "out-vars" : [ 40, 5, 7, 3, 33, 6, 4, 15, 27, 35, 45, 11, 34, 26, 9, 76, 75, 38, 18, 72, 8 ],
      "decl-vars" : [ 76, 75 ],
      "line-start" : 434,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "file"
          }
        }, {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "line"
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 120,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "f",
              "variable" : 35
            }
          }, {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "tracepc",
              "variable" : 64
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 228,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 18,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "funcline"
            }
          },
          "go-type" : 227,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 434,
      "code" : "file, line := funcline(f, tracepc)",
      "entry" : false,
      "use-vars" : [ 35, 64 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 165, 166 ],
      "in-vars" : [ 35, 76, 5, 8, 4, 27, 75, 45, 34, 40, 18, 7, 72, 9, 33, 38, 11, 3, 26, 6, 15 ],
      "exit" : false,
      "out-vars" : [ 35, 76, 38, 45, 34, 26, 4, 33, 6, 15, 11, 40, 7, 18, 8, 27, 75, 5, 3, 72, 9 ],
      "decl-vars" : [ ],
      "line-start" : 435,
      "ast" : {
        "condition" : {
          "go-type" : 165,
          "kind" : "expression",
          "left" : {
            "go-type" : 39,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "name",
              "variable" : 72
            }
          },
          "operator" : "==",
          "right" : {
            "go-type" : 39,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "runtime.gopanic"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 437,
      "code" : "if name == \"runtime.gopanic\" {\n\tname = \"panic\"\n}",
      "entry" : false,
      "use-vars" : [ 72 ]
    }, {
      "update-vars" : [ 72 ],
      "successors" : [ 166 ],
      "in-vars" : [ 75, 11, 5, 33, 15, 76, 34, 26, 27, 35, 38, 45, 40, 7, 4, 9, 8, 18, 3, 6 ],
      "exit" : false,
      "out-vars" : [ 33, 6, 35, 7, 18, 3, 72, 9, 8, 27, 76, 38, 26, 45, 11, 75, 34, 40, 5, 4, 15 ],
      "decl-vars" : [ ],
      "line-start" : 436,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 39,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "name",
            "variable" : 72
          }
        } ],
        "right" : [ {
          "go-type" : 39,
          "kind" : "constant",
          "value" : {
            "type" : "STRING",
            "value" : "panic"
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 72 ],
      "line-end" : 436,
      "code" : "name = \"panic\"",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 167 ],
      "in-vars" : [ 5, 7, 4, 8, 76, 75, 11, 34, 40, 26, 33, 6, 15, 35, 45, 3, 72, 27, 38, 18, 9 ],
      "exit" : false,
      "out-vars" : [ 8, 35, 45, 34, 3, 9, 6, 75, 40, 18, 27, 5, 7, 4, 26, 15, 76, 38, 11, 33 ],
      "decl-vars" : [ ],
      "line-start" : 438,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 39,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "name",
              "variable" : 72
            }
          }, {
            "go-type" : 39,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "("
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 230,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Builtin",
              "kind" : "ident",
              "value" : "print"
            }
          },
          "go-type" : 36,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 438,
      "code" : "print(name, \"(\")",
      "entry" : false,
      "use-vars" : [ 72 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 169 ],
      "in-vars" : [ 27, 34, 18, 3, 6, 33, 8, 35, 75, 40, 5, 26, 9, 15, 76, 38, 45, 11, 7, 4 ],
      "exit" : false,
      "out-vars" : [ 45, 34, 3, 15, 8, 35, 38, 4, 9, 6, 74, 27, 11, 40, 7, 26, 33, 76, 75, 5, 18 ],
      "decl-vars" : [ 74 ],
      "line-start" : 439,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "argp"
          }
        } ],
        "right" : [ {
          "coerced-to" : {
            "contained" : {
              "element" : {
                "go-type" : 2,
                "kind" : "type",
                "type" : "identifier",
                "value" : {
                  "go-type" : 2,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "uintptr"
                }
              },
              "go-type" : 235,
              "kind" : "type",
              "length" : {
                "go-type" : 216,
                "kind" : "constant",
                "value" : {
                  "type" : "INT",
                  "value" : "100"
                }
              },
              "type" : "array"
            },
            "go-type" : 234,
            "kind" : "type",
            "type" : "pointer"
          },
          "go-type" : 234,
          "kind" : "expression",
          "target" : {
            "coerced-to" : {
              "go-type" : 11,
              "kind" : "type",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 1,
                "value" : "unsafe"
              },
              "type" : "identifier",
              "value" : {
                "go-type" : 11,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "Pointer"
              }
            },
            "go-type" : 11,
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "argp",
                "variable" : 50
              },
              "go-type" : 2,
              "kind" : "expression",
              "target" : {
                "go-type" : 118,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "frame",
                  "variable" : 27
                }
              },
              "type" : "selector"
            },
            "type" : "cast"
          },
          "type" : "cast"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 439,
      "code" : "argp := (*[100]uintptr)(unsafe.Pointer(frame.argp))",
      "entry" : false,
      "use-vars" : [ 27 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 171, 177 ],
      "in-vars" : [ 3, 73, 15, 27, 38, 11, 4, 75, 18, 33, 74, 7, 8, 35, 76, 45, 40, 6, 34, 5, 26, 9 ],
      "exit" : false,
      "out-vars" : [ 18, 3, 26, 35, 75, 38, 5, 4, 73, 27, 76, 34, 33, 74, 8, 15, 45, 11, 40, 7, 9, 6 ],
      "decl-vars" : [ ],
      "line-start" : 440,
      "ast" : {
        "condition" : {
          "go-type" : 165,
          "kind" : "expression",
          "left" : {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "i",
              "variable" : 73
            }
          },
          "operator" : "<",
          "right" : {
            "go-type" : 2,
            "kind" : "expression",
            "left" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "arglen",
                "variable" : 51
              },
              "go-type" : 2,
              "kind" : "expression",
              "target" : {
                "go-type" : 118,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "frame",
                  "variable" : 27
                }
              },
              "type" : "selector"
            },
            "operator" : "/",
            "right" : {
              "go-type" : 2,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "8"
              }
            },
            "type" : "binary"
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "for"
      },
      "assign-vars" : [ ],
      "line-end" : 449,
      "code" : "for i := uintptr(0); i < frame.arglen/sys.PtrSize; i++ {\n\tif i >= 10 {\n\t\tprint(\", ...\")\n\t\tbreak\n\t}\n\tif i != 0 {\n\t\tprint(\", \")\n\t}\n\tprint(hex(argp[i]))\n}",
      "entry" : false,
      "use-vars" : [ 73, 27 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 168 ],
      "in-vars" : [ 45, 7, 3, 33, 74, 35, 26, 9, 4, 6, 15, 27, 76, 11, 40, 18, 8, 75, 38, 34, 5 ],
      "exit" : false,
      "out-vars" : [ 18, 3, 9, 33, 35, 75, 45, 15, 8, 5, 4, 26, 34, 40, 73, 76, 38, 11, 6, 27, 7, 74 ],
      "decl-vars" : [ 73 ],
      "line-start" : 440,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "i"
          }
        } ],
        "right" : [ {
          "go-type" : 2,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "0"
          }
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 440,
      "code" : "i := uintptr(0)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ 73 ],
      "successors" : [ 168 ],
      "in-vars" : [ 45, 34, 5, 7, 3, 26, 35, 76, 33, 40, 4, 74, 27, 11, 18, 9, 8, 75, 38, 15, 73, 6 ],
      "exit" : false,
      "out-vars" : [ 76, 40, 9, 15, 38, 7, 26, 33, 6, 8, 27, 11, 5, 73, 74, 3, 35, 75, 45, 34, 18, 4 ],
      "decl-vars" : [ ],
      "line-start" : 440,
      "ast" : {
        "kind" : "statement",
        "operation" : "++",
        "target" : {
          "go-type" : 2,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "i",
            "variable" : 73
          }
        },
        "type" : "crement"
      },
      "assign-vars" : [ 73 ],
      "line-end" : 440,
      "code" : "i++",
      "entry" : false,
      "use-vars" : [ 73 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 172, 174 ],
      "in-vars" : [ 35, 26, 9, 15, 8, 11, 40, 5, 3, 73, 74, 27, 76, 75, 45, 4, 6, 38, 34, 7, 18, 33 ],
      "exit" : false,
      "out-vars" : [ 27, 75, 11, 8, 34, 3, 74, 6, 35, 76, 45, 40, 5, 73, 33, 15, 38, 7, 18, 4, 26, 9 ],
      "decl-vars" : [ ],
      "line-start" : 441,
      "ast" : {
        "condition" : {
          "go-type" : 165,
          "kind" : "expression",
          "left" : {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "i",
              "variable" : 73
            }
          },
          "operator" : ">=",
          "right" : {
            "go-type" : 2,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "10"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 444,
      "code" : "if i >= 10 {\n\tprint(\", ...\")\n\tbreak\n}",
      "entry" : false,
      "use-vars" : [ 73 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 173 ],
      "in-vars" : [ 45, 35, 76, 3, 11, 5, 7, 18, 4, 26, 9, 38, 34, 40, 33, 6, 15, 8, 27, 75 ],
      "exit" : false,
      "out-vars" : [ 7, 15, 5, 4, 27, 75, 38, 45, 34, 76, 11, 40, 26, 33, 8, 35, 18, 3, 9, 6 ],
      "decl-vars" : [ ],
      "line-start" : 442,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 39,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : ", ..."
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 236,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Builtin",
              "kind" : "ident",
              "value" : "print"
            }
          },
          "go-type" : 36,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 442,
      "code" : "print(\", ...\")",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 177 ],
      "in-vars" : [ 26, 15, 45, 40, 5, 4, 3, 33, 6, 76, 34, 7, 18, 27, 75, 38, 35, 11, 9, 8 ],
      "exit" : false,
      "out-vars" : [ 76, 45, 4, 26, 8, 3, 9, 35, 75, 38, 34, 18, 6, 15, 27, 40, 5, 7, 33, 11 ],
      "decl-vars" : [ ],
      "line-start" : 443,
      "ast" : {
        "kind" : "statement",
        "label" : null,
        "type" : "break"
      },
      "assign-vars" : [ ],
      "line-end" : 443,
      "code" : "break",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 175, 176 ],
      "in-vars" : [ 26, 9, 33, 27, 35, 76, 40, 73, 75, 38, 45, 18, 74, 11, 34, 4, 8, 5, 7, 3, 6, 15 ],
      "exit" : false,
      "out-vars" : [ 18, 76, 34, 40, 26, 9, 33, 35, 75, 7, 38, 45, 4, 3, 73, 74, 6, 27, 11, 5, 15, 8 ],
      "decl-vars" : [ ],
      "line-start" : 445,
      "ast" : {
        "condition" : {
          "go-type" : 165,
          "kind" : "expression",
          "left" : {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "i",
              "variable" : 73
            }
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 2,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 447,
      "code" : "if i != 0 {\n\tprint(\", \")\n}",
      "entry" : false,
      "use-vars" : [ 73 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 176 ],
      "in-vars" : [ 4, 26, 33, 6, 35, 7, 3, 73, 9, 15, 76, 5, 11, 40, 18, 27, 38, 34, 74, 8, 75, 45 ],
      "exit" : false,
      "out-vars" : [ 74, 76, 11, 34, 4, 3, 26, 9, 35, 45, 40, 27, 38, 5, 8, 75, 7, 18, 73, 33, 6, 15 ],
      "decl-vars" : [ ],
      "line-start" : 446,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 39,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : ", "
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 236,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Builtin",
              "kind" : "ident",
              "value" : "print"
            }
          },
          "go-type" : 36,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 446,
      "code" : "print(\", \")",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 170 ],
      "in-vars" : [ 35, 75, 7, 26, 9, 38, 11, 40, 5, 18, 4, 74, 3, 73, 8, 27, 76, 45, 34, 33, 6, 15 ],
      "exit" : false,
      "out-vars" : [ 18, 4, 26, 45, 34, 40, 5, 7, 6, 76, 73, 8, 35, 75, 3, 74, 15, 27, 38, 11, 9, 33 ],
      "decl-vars" : [ ],
      "line-start" : 448,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "coerced-to" : {
              "go-type" : 180,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 180,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "hex"
              }
            },
            "go-type" : 180,
            "kind" : "expression",
            "target" : {
              "go-type" : 2,
              "index" : {
                "go-type" : 2,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "i",
                  "variable" : 73
                }
              },
              "kind" : "expression",
              "target" : {
                "go-type" : 234,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "argp",
                  "variable" : 74
                }
              },
              "type" : "index"
            },
            "type" : "cast"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 237,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Builtin",
              "kind" : "ident",
              "value" : "print"
            }
          },
          "go-type" : 36,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 448,
      "code" : "print(hex(argp[i]))",
      "entry" : false,
      "use-vars" : [ 74, 73 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 178 ],
      "in-vars" : [ 4, 6, 15, 35, 40, 7, 9, 34, 3, 8, 11, 5, 18, 27, 76, 75, 38, 45, 26, 33 ],
      "exit" : false,
      "out-vars" : [ 5, 3, 9, 33, 11, 45, 18, 26, 75, 76, 38, 34, 40, 15, 35, 7, 4, 6, 8, 27 ],
      "decl-vars" : [ ],
      "line-start" : 450,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 39,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : ")\n"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 236,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Builtin",
              "kind" : "ident",
              "value" : "print"
            }
          },
          "go-type" : 36,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 450,
      "code" : "print(\")\\n\")",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 179 ],
      "in-vars" : [ 76, 11, 7, 33, 27, 5, 4, 9, 15, 40, 18, 26, 6, 35, 38, 45, 34, 3, 8, 75 ],
      "exit" : false,
      "out-vars" : [ 11, 18, 5, 7, 3, 33, 27, 45, 34, 40, 8, 38, 26, 15, 35, 4, 9, 6 ],
      "decl-vars" : [ ],
      "line-start" : 451,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 39,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "\t"
            }
          }, {
            "go-type" : 39,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "file",
              "variable" : 75
            }
          }, {
            "go-type" : 39,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : ":"
            }
          }, {
            "go-type" : 17,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "line",
              "variable" : 76
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 239,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Builtin",
              "kind" : "ident",
              "value" : "print"
            }
          },
          "go-type" : 36,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 451,
      "code" : "print(\"\\t\", file, \":\", line)",
      "entry" : false,
      "use-vars" : [ 76, 75 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 180, 181 ],
      "in-vars" : [ 38, 40, 5, 18, 4, 34, 6, 15, 8, 45, 7, 3, 26, 9, 27, 35, 11, 33 ],
      "exit" : false,
      "out-vars" : [ 5, 7, 26, 9, 35, 38, 45, 6, 27, 40, 4, 8, 11, 18, 3, 34, 33, 15 ],
      "decl-vars" : [ ],
      "line-start" : 452,
      "ast" : {
        "condition" : {
          "go-type" : 165,
          "kind" : "expression",
          "left" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "pc",
              "variable" : 28
            },
            "go-type" : 2,
            "kind" : "expression",
            "target" : {
              "go-type" : 118,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "frame",
                "variable" : 27
              }
            },
            "type" : "selector"
          },
          "operator" : ">",
          "right" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "entry",
              "variable" : 56
            },
            "go-type" : 2,
            "kind" : "expression",
            "target" : {
              "go-type" : 120,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "f",
                "variable" : 35
              }
            },
            "type" : "selector"
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 454,
      "code" : "if frame.pc > f.entry {\n\tprint(\" +\", hex(frame.pc-f.entry))\n}",
      "entry" : false,
      "use-vars" : [ 35, 27 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 181 ],
      "in-vars" : [ 27, 11, 34, 5, 3, 26, 15, 35, 38, 18, 45, 40, 7, 4, 6, 8, 9, 33 ],
      "exit" : false,
      "out-vars" : [ 4, 33, 6, 15, 35, 38, 40, 5, 26, 8, 45, 11, 18, 7, 3, 9, 27, 34 ],
      "decl-vars" : [ ],
      "line-start" : 453,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 39,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : " +"
            }
          }, {
            "coerced-to" : {
              "go-type" : 180,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 180,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "hex"
              }
            },
            "go-type" : 180,
            "kind" : "expression",
            "target" : {
              "go-type" : 2,
              "kind" : "expression",
              "left" : {
                "field" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "pc",
                  "variable" : 28
                },
                "go-type" : 2,
                "kind" : "expression",
                "target" : {
                  "go-type" : 118,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "frame",
                    "variable" : 27
                  }
                },
                "type" : "selector"
              },
              "operator" : "-",
              "right" : {
                "field" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "entry",
                  "variable" : 56
                },
                "go-type" : 2,
                "kind" : "expression",
                "target" : {
                  "go-type" : 120,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "f",
                    "variable" : 35
                  }
                },
                "type" : "selector"
              },
              "type" : "binary"
            },
            "type" : "cast"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 241,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Builtin",
              "kind" : "ident",
              "value" : "print"
            }
          },
          "go-type" : 36,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 453,
      "code" : "print(\" +\", hex(frame.pc-f.entry))",
      "entry" : false,
      "use-vars" : [ 27, 35 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 182, 183 ],
      "in-vars" : [ 38, 18, 9, 6, 8, 45, 11, 40, 15, 4, 3, 33, 5, 7, 26, 27, 35, 34 ],
      "exit" : false,
      "out-vars" : [ 9, 27, 35, 38, 45, 7, 18, 4, 11, 5, 3, 26, 15, 34, 40, 33, 6, 8 ],
      "decl-vars" : [ ],
      "line-start" : 455,
      "ast" : {
        "condition" : {
          "go-type" : 165,
          "kind" : "expression",
          "left" : {
            "go-type" : 165,
            "kind" : "expression",
            "left" : {
              "go-type" : 165,
              "kind" : "expression",
              "left" : {
                "go-type" : 165,
                "kind" : "expression",
                "left" : {
                  "field" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "m",
                    "variable" : 13
                  },
                  "go-type" : 21,
                  "kind" : "expression",
                  "target" : {
                    "go-type" : 3,
                    "kind" : "expression",
                    "type" : "identifier",
                    "value" : {
                      "ident-kind" : "Var",
                      "kind" : "ident",
                      "value" : "gp",
                      "variable" : 3
                    }
                  },
                  "type" : "selector"
                },
                "operator" : "!=",
                "right" : {
                  "go-type" : 166,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Nil",
                    "kind" : "ident",
                    "value" : "nil"
                  }
                },
                "type" : "binary"
              },
              "operator" : "&&",
              "right" : {
                "go-type" : 165,
                "kind" : "expression",
                "left" : {
                  "field" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "throwing",
                    "variable" : 77
                  },
                  "go-type" : 17,
                  "kind" : "expression",
                  "target" : {
                    "field" : {
                      "ident-kind" : "Var",
                      "kind" : "ident",
                      "value" : "m",
                      "variable" : 13
                    },
                    "go-type" : 21,
                    "kind" : "expression",
                    "target" : {
                      "go-type" : 3,
                      "kind" : "expression",
                      "type" : "identifier",
                      "value" : {
                        "ident-kind" : "Var",
                        "kind" : "ident",
                        "value" : "gp",
                        "variable" : 3
                      }
                    },
                    "type" : "selector"
                  },
                  "type" : "selector"
                },
                "operator" : ">",
                "right" : {
                  "go-type" : 17,
                  "kind" : "constant",
                  "value" : {
                    "type" : "INT",
                    "value" : "0"
                  }
                },
                "type" : "binary"
              },
              "type" : "binary"
            },
            "operator" : "&&",
            "right" : {
              "go-type" : 165,
              "kind" : "expression",
              "left" : {
                "go-type" : 3,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "gp",
                  "variable" : 3
                }
              },
              "operator" : "==",
              "right" : {
                "field" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "curg",
                  "variable" : 14
                },
                "go-type" : 3,
                "kind" : "expression",
                "target" : {
                  "field" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "m",
                    "variable" : 13
                  },
                  "go-type" : 21,
                  "kind" : "expression",
                  "target" : {
                    "go-type" : 3,
                    "kind" : "expression",
                    "type" : "identifier",
                    "value" : {
                      "ident-kind" : "Var",
                      "kind" : "ident",
                      "value" : "gp",
                      "variable" : 3
                    }
                  },
                  "type" : "selector"
                },
                "type" : "selector"
              },
              "type" : "binary"
            },
            "type" : "binary"
          },
          "operator" : "||",
          "right" : {
            "go-type" : 165,
            "kind" : "expression",
            "left" : {
              "go-type" : 17,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "level",
                "variable" : 15
              }
            },
            "operator" : ">=",
            "right" : {
              "go-type" : 17,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "2"
              }
            },
            "type" : "binary"
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 457,
      "code" : "if gp.m != nil && gp.m.throwing > 0 && gp == gp.m.curg || level >= 2 {\n\tprint(\" fp=\", hex(frame.fp), \" sp=\", hex(frame.sp), \" pc=\", hex(frame.pc))\n}",
      "entry" : false,
      "use-vars" : [ 3, 15 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 183 ],
      "in-vars" : [ 27, 26, 9, 8, 35, 45, 34, 5, 7, 18, 4, 3, 38, 6, 15, 33, 40, 11 ],
      "exit" : false,
      "out-vars" : [ 4, 3, 38, 45, 26, 6, 35, 11, 34, 5, 7, 33, 27, 40, 18, 9, 15, 8 ],
      "decl-vars" : [ ],
      "line-start" : 456,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 39,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : " fp="
            }
          }, {
            "coerced-to" : {
              "go-type" : 180,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 180,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "hex"
              }
            },
            "go-type" : 180,
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "fp",
                "variable" : 42
              },
              "go-type" : 2,
              "kind" : "expression",
              "target" : {
                "go-type" : 118,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "frame",
                  "variable" : 27
                }
              },
              "type" : "selector"
            },
            "type" : "cast"
          }, {
            "go-type" : 39,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : " sp="
            }
          }, {
            "coerced-to" : {
              "go-type" : 180,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 180,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "hex"
              }
            },
            "go-type" : 180,
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "sp",
                "variable" : 29
              },
              "go-type" : 2,
              "kind" : "expression",
              "target" : {
                "go-type" : 118,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "frame",
                  "variable" : 27
                }
              },
              "type" : "selector"
            },
            "type" : "cast"
          }, {
            "go-type" : 39,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : " pc="
            }
          }, {
            "coerced-to" : {
              "go-type" : 180,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 180,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "hex"
              }
            },
            "go-type" : 180,
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "pc",
                "variable" : 28
              },
              "go-type" : 2,
              "kind" : "expression",
              "target" : {
                "go-type" : 118,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "frame",
                  "variable" : 27
                }
              },
              "type" : "selector"
            },
            "type" : "cast"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 243,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Builtin",
              "kind" : "ident",
              "value" : "print"
            }
          },
          "go-type" : 36,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 456,
      "code" : "print(\" fp=\", hex(frame.fp), \" sp=\", hex(frame.sp), \" pc=\", hex(frame.pc))",
      "entry" : false,
      "use-vars" : [ 27 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 184 ],
      "in-vars" : [ 26, 8, 45, 11, 34, 40, 5, 3, 33, 6, 27, 35, 7, 38, 18, 4, 9, 15 ],
      "exit" : false,
      "out-vars" : [ 35, 38, 45, 40, 27, 11, 4, 3, 6, 8, 34, 18, 9, 33, 5, 7, 26, 15 ],
      "decl-vars" : [ ],
      "line-start" : 458,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 39,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "\n"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 236,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Builtin",
              "kind" : "ident",
              "value" : "print"
            }
          },
          "go-type" : 36,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 458,
      "code" : "print(\"\\n\")",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ 26 ],
      "successors" : [ 185 ],
      "in-vars" : [ 35, 34, 40, 4, 26, 9, 5, 15, 38, 45, 11, 7, 18, 33, 27, 3, 6, 8 ],
      "exit" : false,
      "out-vars" : [ 18, 9, 27, 35, 38, 34, 40, 7, 4, 26, 8, 45, 11, 3, 33, 6, 5, 15 ],
      "decl-vars" : [ ],
      "line-start" : 459,
      "ast" : {
        "kind" : "statement",
        "operation" : "++",
        "target" : {
          "go-type" : 78,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "nprint",
            "variable" : 26
          }
        },
        "type" : "crement"
      },
      "assign-vars" : [ 26 ],
      "line-end" : 459,
      "code" : "nprint++",
      "entry" : false,
      "use-vars" : [ 26 ]
    }, {
      "update-vars" : [ 39 ],
      "successors" : [ 186 ],
      "in-vars" : [ 45, 34, 40, 26, 15, 8, 27, 35, 18, 4, 3, 33, 6, 7, 9, 38, 11, 5 ],
      "exit" : false,
      "out-vars" : [ 33, 15, 38, 5, 4, 3, 8, 39, 40, 7, 18, 26, 27, 35, 45, 6, 11, 34, 9 ],
      "decl-vars" : [ ],
      "line-start" : 461,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 125,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "lastFuncID",
            "variable" : 39
          }
        } ],
        "right" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "funcID",
            "variable" : 44
          },
          "go-type" : 125,
          "kind" : "expression",
          "target" : {
            "go-type" : 120,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "f",
              "variable" : 35
            }
          },
          "type" : "selector"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 39 ],
      "line-end" : 461,
      "code" : "lastFuncID = f.funcID",
      "entry" : false,
      "use-vars" : [ 35 ]
    }, {
      "update-vars" : [ 40 ],
      "successors" : [ 187 ],
      "in-vars" : [ 4, 3, 27, 35, 38, 39, 18, 11, 5, 26, 6, 15, 8, 45, 34, 40, 9, 33, 7 ],
      "exit" : false,
      "out-vars" : [ 7, 3, 15, 35, 38, 18, 26, 8, 45, 34, 39, 40, 5, 4, 9, 33, 27, 11, 6 ],
      "decl-vars" : [ ],
      "line-start" : 463,
      "ast" : {
        "kind" : "statement",
        "operation" : "++",
        "target" : {
          "go-type" : 78,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "n",
            "variable" : 40
          }
        },
        "type" : "crement"
      },
      "assign-vars" : [ 40 ],
      "line-end" : 463,
      "code" : "n++",
      "entry" : false,
      "use-vars" : [ 40 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 188, 192 ],
      "in-vars" : [ 39, 40, 18, 9, 27, 35, 15, 8, 3, 26, 6, 38, 45, 34, 5, 7, 11, 4, 33 ],
      "exit" : false,
      "out-vars" : [ 35, 39, 15, 8, 45, 5, 4, 6, 11, 34, 18, 26, 27, 38, 40, 7, 3, 9, 33 ],
      "decl-vars" : [ ],
      "line-start" : 465,
      "ast" : {
        "condition" : {
          "go-type" : 165,
          "kind" : "expression",
          "left" : {
            "go-type" : 165,
            "kind" : "expression",
            "left" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "funcID",
                "variable" : 44
              },
              "go-type" : 125,
              "kind" : "expression",
              "target" : {
                "go-type" : 120,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "f",
                  "variable" : 35
                }
              },
              "type" : "selector"
            },
            "operator" : "==",
            "right" : {
              "go-type" : 125,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "14"
              }
            },
            "type" : "binary"
          },
          "operator" : "&&",
          "right" : {
            "go-type" : 165,
            "kind" : "expression",
            "left" : {
              "arguments" : [ {
                "go-type" : 90,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "cgoCtxt",
                  "variable" : 33
                }
              } ],
              "ellipsis" : false,
              "function" : {
                "go-type" : 245,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Builtin",
                  "kind" : "ident",
                  "value" : "len"
                }
              },
              "go-type" : 78,
              "kind" : "expression",
              "type" : "call"
            },
            "operator" : ">",
            "right" : {
              "go-type" : 78,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "0"
              }
            },
            "type" : "binary"
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 475,
      "code" : "if f.funcID == funcID_cgocallback_gofunc && len(cgoCtxt) > 0 {\n\tctxt := cgoCtxt[len(cgoCtxt)-1]\n\tcgoCtxt = cgoCtxt[:len(cgoCtxt)-1]\n\n\tif skip == 0 && callback == nil {\n\t\tn = tracebackCgoContext(pcbuf, printing, ctxt, n, max)\n\t}\n}",
      "entry" : false,
      "use-vars" : [ 33, 35 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 189 ],
      "in-vars" : [ 15, 8, 35, 45, 39, 26, 6, 27, 34, 7, 9, 38, 40, 4, 11, 5, 18, 3, 33 ],
      "exit" : false,
      "out-vars" : [ 26, 9, 6, 27, 35, 45, 34, 33, 78, 38, 11, 39, 5, 40, 18, 15, 7, 4, 3, 8 ],
      "decl-vars" : [ 78 ],
      "line-start" : 466,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "ctxt"
          }
        } ],
        "right" : [ {
          "go-type" : 2,
          "index" : {
            "go-type" : 78,
            "kind" : "expression",
            "left" : {
              "arguments" : [ {
                "go-type" : 90,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "cgoCtxt",
                  "variable" : 33
                }
              } ],
              "ellipsis" : false,
              "function" : {
                "go-type" : 245,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Builtin",
                  "kind" : "ident",
                  "value" : "len"
                }
              },
              "go-type" : 78,
              "kind" : "expression",
              "type" : "call"
            },
            "operator" : "-",
            "right" : {
              "go-type" : 78,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "1"
              }
            },
            "type" : "binary"
          },
          "kind" : "expression",
          "target" : {
            "go-type" : 90,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "cgoCtxt",
              "variable" : 33
            }
          },
          "type" : "index"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 466,
      "code" : "ctxt := cgoCtxt[len(cgoCtxt)-1]",
      "entry" : false,
      "use-vars" : [ 33 ]
    }, {
      "update-vars" : [ 33 ],
      "successors" : [ 190 ],
      "in-vars" : [ 11, 3, 33, 4, 9, 6, 26, 15, 45, 39, 40, 18, 5, 7, 78, 8, 27, 35, 38, 34 ],
      "exit" : false,
      "out-vars" : [ 11, 40, 7, 33, 6, 15, 27, 38, 34, 18, 4, 3, 9, 78, 35, 39, 5, 26, 8, 45 ],
      "decl-vars" : [ ],
      "line-start" : 467,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 90,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "cgoCtxt",
            "variable" : 33
          }
        } ],
        "right" : [ {
          "go-type" : 90,
          "type" : "slice",
          "three" : false,
          "high" : {
            "go-type" : 78,
            "kind" : "expression",
            "left" : {
              "arguments" : [ {
                "go-type" : 90,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "cgoCtxt",
                  "variable" : 33
                }
              } ],
              "ellipsis" : false,
              "function" : {
                "go-type" : 245,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Builtin",
                  "kind" : "ident",
                  "value" : "len"
                }
              },
              "go-type" : 78,
              "kind" : "expression",
              "type" : "call"
            },
            "operator" : "-",
            "right" : {
              "go-type" : 78,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "1"
              }
            },
            "type" : "binary"
          },
          "max" : null,
          "kind" : "expression",
          "low" : null,
          "target" : {
            "go-type" : 90,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "cgoCtxt",
              "variable" : 33
            }
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 33 ],
      "line-end" : 467,
      "code" : "cgoCtxt = cgoCtxt[:len(cgoCtxt)-1]",
      "entry" : false,
      "use-vars" : [ 33 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 191, 192 ],
      "in-vars" : [ 9, 33, 78, 8, 35, 34, 26, 11, 6, 4, 3, 15, 45, 5, 18, 40, 7, 27, 38, 39 ],
      "exit" : false,
      "out-vars" : [ 8, 38, 40, 5, 18, 4, 26, 11, 34, 78, 35, 39, 7, 9, 6, 15, 27, 45, 3, 33 ],
      "decl-vars" : [ ],
      "line-start" : 472,
      "ast" : {
        "condition" : {
          "go-type" : 165,
          "kind" : "expression",
          "left" : {
            "go-type" : 165,
            "kind" : "expression",
            "left" : {
              "go-type" : 78,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "skip",
                "variable" : 4
              }
            },
            "operator" : "==",
            "right" : {
              "go-type" : 78,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "0"
              }
            },
            "type" : "binary"
          },
          "operator" : "&&",
          "right" : {
            "go-type" : 165,
            "kind" : "expression",
            "left" : {
              "go-type" : 115,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "callback",
                "variable" : 7
              }
            },
            "operator" : "==",
            "right" : {
              "go-type" : 166,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Nil",
                "kind" : "ident",
                "value" : "nil"
              }
            },
            "type" : "binary"
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 474,
      "code" : "if skip == 0 && callback == nil {\n\tn = tracebackCgoContext(pcbuf, printing, ctxt, n, max)\n}",
      "entry" : false,
      "use-vars" : [ 7, 4 ]
    }, {
      "update-vars" : [ 40 ],
      "successors" : [ 192 ],
      "in-vars" : [ 38, 11, 3, 26, 33, 27, 35, 5, 9, 6, 45, 34, 7, 18, 78, 8, 39, 40, 4, 15 ],
      "exit" : false,
      "out-vars" : [ 11, 4, 26, 38, 5, 3, 9, 27, 45, 39, 34, 40, 6, 8, 35, 18, 33, 15, 7 ],
      "decl-vars" : [ ],
      "line-start" : 473,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 78,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "n",
            "variable" : 40
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 114,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "pcbuf",
              "variable" : 5
            }
          }, {
            "go-type" : 13,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "printing",
              "variable" : 34
            }
          }, {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "ctxt",
              "variable" : 78
            }
          }, {
            "go-type" : 78,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "n",
              "variable" : 40
            }
          }, {
            "go-type" : 78,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "max",
              "variable" : 6
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 247,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 19,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "tracebackCgoContext"
            }
          },
          "go-type" : 78,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 40 ],
      "line-end" : 473,
      "code" : "n = tracebackCgoContext(pcbuf, printing, ctxt, n, max)",
      "entry" : false,
      "use-vars" : [ 78, 40, 6, 5, 34 ]
    }, {
      "update-vars" : [ 31 ],
      "successors" : [ 193 ],
      "in-vars" : [ 39, 11, 34, 7, 4, 8, 35, 45, 3, 6, 40, 18, 5, 26, 9, 33, 15, 27, 38 ],
      "exit" : false,
      "out-vars" : [ 39, 7, 4, 26, 33, 6, 15, 8, 27, 40, 18, 35, 3, 34, 5, 31, 9, 38, 45, 11 ],
      "decl-vars" : [ ],
      "line-start" : 477,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 13,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "waspanic",
            "variable" : 31
          }
        } ],
        "right" : [ {
          "go-type" : 13,
          "kind" : "expression",
          "left" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "funcID",
              "variable" : 44
            },
            "go-type" : 125,
            "kind" : "expression",
            "target" : {
              "go-type" : 120,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "f",
                "variable" : 35
              }
            },
            "type" : "selector"
          },
          "operator" : "==",
          "right" : {
            "go-type" : 125,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "9"
            }
          },
          "type" : "binary"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 31 ],
      "line-end" : 477,
      "code" : "waspanic = f.funcID == funcID_sigpanic",
      "entry" : false,
      "use-vars" : [ 35 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 194 ],
      "in-vars" : [ 38, 39, 34, 26, 33, 6, 8, 35, 31, 7, 4, 45, 11, 5, 18, 3, 15, 27, 9, 40 ],
      "exit" : false,
      "out-vars" : [ 5, 31, 7, 6, 11, 9, 33, 79, 3, 45, 39, 27, 34, 40, 18, 4, 26, 15, 8, 38 ],
      "decl-vars" : [ 79 ],
      "line-start" : 478,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "injectedCall"
          }
        } ],
        "right" : [ {
          "go-type" : 13,
          "kind" : "expression",
          "left" : {
            "go-type" : 13,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "waspanic",
              "variable" : 31
            }
          },
          "operator" : "||",
          "right" : {
            "go-type" : 13,
            "kind" : "expression",
            "left" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "funcID",
                "variable" : 44
              },
              "go-type" : 125,
              "kind" : "expression",
              "target" : {
                "go-type" : 120,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "f",
                  "variable" : 35
                }
              },
              "type" : "selector"
            },
            "operator" : "==",
            "right" : {
              "go-type" : 125,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "21"
              }
            },
            "type" : "binary"
          },
          "type" : "binary"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 478,
      "code" : "injectedCall := waspanic || f.funcID == funcID_asyncPreempt",
      "entry" : false,
      "use-vars" : [ 31, 35 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 195, 196 ],
      "in-vars" : [ 11, 39, 34, 9, 6, 79, 27, 40, 18, 4, 15, 8, 38, 5, 3, 26, 45, 31, 7, 33 ],
      "exit" : false,
      "out-vars" : [ 79, 7, 26, 9, 33, 8, 27, 38, 18, 34, 40, 31, 45, 11, 39, 6, 15, 5, 4, 3 ],
      "decl-vars" : [ ],
      "line-start" : 481,
      "ast" : {
        "condition" : {
          "go-type" : 13,
          "kind" : "expression",
          "operator" : "!",
          "target" : {
            "arguments" : [ ],
            "ellipsis" : false,
            "function" : {
              "field" : {
                "function" : 5,
                "ident-kind" : "Func",
                "kind" : "ident",
                "value" : "valid"
              },
              "go-type" : 177,
              "kind" : "expression",
              "target" : {
                "go-type" : 120,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "flr",
                  "variable" : 45
                }
              },
              "type" : "selector"
            },
            "go-type" : 13,
            "kind" : "expression",
            "type" : "call"
          },
          "type" : "unary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 483,
      "code" : "if !flr.valid() {\n\tbreak\n}",
      "entry" : false,
      "use-vars" : [ 45 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 213 ],
      "in-vars" : [ 6, 27, 34, 40, 7, 3, 26 ],
      "exit" : false,
      "out-vars" : [ 40, 7, 3, 26, 6, 27, 34 ],
      "decl-vars" : [ ],
      "line-start" : 482,
      "ast" : {
        "kind" : "statement",
        "label" : null,
        "type" : "break"
      },
      "assign-vars" : [ ],
      "line-end" : 482,
      "code" : "break",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ 27 ],
      "successors" : [ 197 ],
      "in-vars" : [ 39, 31, 18, 6, 15, 79, 27, 45, 8, 40, 4, 33, 38, 34, 26, 9, 11, 7, 5, 3 ],
      "exit" : false,
      "out-vars" : [ 34, 40, 5, 7, 8, 38, 11, 31, 4, 3, 26, 6, 15, 27, 39, 79, 9, 18, 33 ],
      "decl-vars" : [ ],
      "line-start" : 486,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "fn",
            "variable" : 37
          },
          "go-type" : 120,
          "kind" : "expression",
          "target" : {
            "go-type" : 118,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "frame",
              "variable" : 27
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "go-type" : 120,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "flr",
            "variable" : 45
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 486,
      "code" : "frame.fn = flr",
      "entry" : false,
      "use-vars" : [ 27, 45 ]
    }, {
      "update-vars" : [ 27 ],
      "successors" : [ 198 ],
      "in-vars" : [ 15, 79, 8, 40, 31, 33, 6, 27, 5, 7, 9, 34, 18, 26, 3, 38, 11, 39, 4 ],
      "exit" : false,
      "out-vars" : [ 27, 31, 18, 4, 26, 33, 6, 38, 40, 15, 3, 9, 79, 8, 39, 5, 7, 11, 34 ],
      "decl-vars" : [ ],
      "line-start" : 487,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "pc",
            "variable" : 28
          },
          "go-type" : 2,
          "kind" : "expression",
          "target" : {
            "go-type" : 118,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "frame",
              "variable" : 27
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "lr",
            "variable" : 30
          },
          "go-type" : 2,
          "kind" : "expression",
          "target" : {
            "go-type" : 118,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "frame",
              "variable" : 27
            }
          },
          "type" : "selector"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 487,
      "code" : "frame.pc = frame.lr",
      "entry" : false,
      "use-vars" : [ 27 ]
    }, {
      "update-vars" : [ 27 ],
      "successors" : [ 199 ],
      "in-vars" : [ 11, 33, 6, 8, 27, 39, 31, 18, 26, 15, 34, 5, 9, 79, 38, 40, 7, 4, 3 ],
      "exit" : false,
      "out-vars" : [ 18, 31, 33, 8, 5, 11, 39, 34, 40, 7, 4, 26, 27, 3, 9, 6, 15, 79, 38 ],
      "decl-vars" : [ ],
      "line-start" : 488,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "lr",
            "variable" : 30
          },
          "go-type" : 2,
          "kind" : "expression",
          "target" : {
            "go-type" : 118,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "frame",
              "variable" : 27
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "go-type" : 2,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "0"
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 488,
      "code" : "frame.lr = 0",
      "entry" : false,
      "use-vars" : [ 27 ]
    }, {
      "update-vars" : [ 27 ],
      "successors" : [ 200 ],
      "in-vars" : [ 8, 34, 18, 26, 9, 15, 7, 38, 11, 3, 79, 4, 33, 6, 27, 39, 40, 5, 31 ],
      "exit" : false,
      "out-vars" : [ 9, 33, 15, 79, 27, 7, 6, 8, 11, 39, 3, 18, 4, 40, 5, 31, 26, 38, 34 ],
      "decl-vars" : [ ],
      "line-start" : 489,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "sp",
            "variable" : 29
          },
          "go-type" : 2,
          "kind" : "expression",
          "target" : {
            "go-type" : 118,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "frame",
              "variable" : 27
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "fp",
            "variable" : 42
          },
          "go-type" : 2,
          "kind" : "expression",
          "target" : {
            "go-type" : 118,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "frame",
              "variable" : 27
            }
          },
          "type" : "selector"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 489,
      "code" : "frame.sp = frame.fp",
      "entry" : false,
      "use-vars" : [ 27 ]
    }, {
      "update-vars" : [ 27 ],
      "successors" : [ 201 ],
      "in-vars" : [ 8, 11, 34, 26, 15, 4, 3, 5, 31, 7, 18, 79, 38, 39, 33, 6, 27, 40, 9 ],
      "exit" : false,
      "out-vars" : [ 38, 40, 26, 8, 27, 39, 18, 4, 9, 34, 5, 31, 7, 3, 79, 11, 33, 6, 15 ],
      "decl-vars" : [ ],
      "line-start" : 490,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "fp",
            "variable" : 42
          },
          "go-type" : 2,
          "kind" : "expression",
          "target" : {
            "go-type" : 118,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "frame",
              "variable" : 27
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "go-type" : 2,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "0"
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 490,
      "code" : "frame.fp = 0",
      "entry" : false,
      "use-vars" : [ 27 ]
    }, {
      "update-vars" : [ 27 ],
      "successors" : [ 202 ],
      "in-vars" : [ 7, 79, 27, 38, 40, 6, 8, 5, 3, 26, 15, 11, 18, 4, 9, 33, 39, 34, 31 ],
      "exit" : false,
      "out-vars" : [ 6, 38, 11, 40, 7, 3, 9, 8, 27, 39, 4, 15, 79, 34, 5, 31, 18, 26, 33 ],
      "decl-vars" : [ ],
      "line-start" : 491,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "argmap",
            "variable" : 52
          },
          "go-type" : 163,
          "kind" : "expression",
          "target" : {
            "go-type" : 118,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "frame",
              "variable" : 27
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "go-type" : 166,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Nil",
            "kind" : "ident",
            "value" : "nil"
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 491,
      "code" : "frame.argmap = nil",
      "entry" : false,
      "use-vars" : [ 27 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 47, 203 ],
      "in-vars" : [ 34, 7, 26, 15, 11, 38, 31, 6, 27, 40, 5, 4, 3, 33, 8, 39, 9, 79, 18 ],
      "exit" : false,
      "out-vars" : [ 8, 3, 33, 5, 18, 4, 26, 9, 6, 27, 34, 39, 38, 11, 7, 15, 40, 31 ],
      "decl-vars" : [ ],
      "line-start" : 495,
      "ast" : {
        "condition" : {
          "go-type" : 13,
          "kind" : "expression",
          "left" : {
            "go-type" : 13,
            "kind" : "constant",
            "value" : {
              "type" : "BOOL",
              "value" : "false"
            }
          },
          "operator" : "&&",
          "right" : {
            "go-type" : 13,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "injectedCall",
              "variable" : 79
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 509,
      "code" : "if usesLR && injectedCall {\n\tx := *(*uintptr)(unsafe.Pointer(frame.sp))\n\tframe.sp += sys.MinFrameSize\n\tif GOARCH == \"arm64\" {\n\n\t\tframe.sp += sys.PtrSize\n\t}\n\tf = findfunc(frame.pc)\n\tframe.fn = f\n\tif !f.valid() {\n\t\tframe.pc = x\n\t} else if funcspdelta(f, frame.pc, &cache) == 0 {\n\t\tframe.lr = x\n\t}\n}",
      "entry" : false,
      "use-vars" : [ 79 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 204 ],
      "in-vars" : [ 9, 4, 26, 18, 3, 33, 6, 40, 31, 39, 34, 7, 8, 27, 11, 15, 38, 5 ],
      "exit" : false,
      "out-vars" : [ 33, 6, 40, 7, 18, 4, 3, 26, 34, 11, 39, 31, 80, 8, 27, 5, 9, 15, 38 ],
      "decl-vars" : [ 80 ],
      "line-start" : 496,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "x"
          }
        } ],
        "right" : [ {
          "go-type" : 2,
          "kind" : "expression",
          "target" : {
            "coerced-to" : {
              "contained" : {
                "go-type" : 2,
                "kind" : "type",
                "type" : "identifier",
                "value" : {
                  "go-type" : 2,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "uintptr"
                }
              },
              "go-type" : 114,
              "kind" : "type",
              "type" : "pointer"
            },
            "go-type" : 114,
            "kind" : "expression",
            "target" : {
              "coerced-to" : {
                "go-type" : 11,
                "kind" : "type",
                "qualifier" : {
                  "ident-kind" : "PkgName",
                  "kind" : "ident",
                  "package" : 1,
                  "value" : "unsafe"
                },
                "type" : "identifier",
                "value" : {
                  "go-type" : 11,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "Pointer"
                }
              },
              "go-type" : 11,
              "kind" : "expression",
              "target" : {
                "field" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "sp",
                  "variable" : 29
                },
                "go-type" : 2,
                "kind" : "expression",
                "target" : {
                  "go-type" : 118,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "frame",
                    "variable" : 27
                  }
                },
                "type" : "selector"
              },
              "type" : "cast"
            },
            "type" : "cast"
          },
          "type" : "star"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 496,
      "code" : "x := *(*uintptr)(unsafe.Pointer(frame.sp))",
      "entry" : false,
      "use-vars" : [ 27 ]
    }, {
      "update-vars" : [ 27 ],
      "successors" : [ 205 ],
      "in-vars" : [ 15, 8, 27, 34, 6, 7, 4, 33, 11, 40, 31, 80, 26, 9, 38, 5, 18, 39, 3 ],
      "exit" : false,
      "out-vars" : [ 5, 26, 27, 34, 31, 6, 15, 8, 80, 9, 38, 11, 39, 40, 7, 18, 33, 4, 3 ],
      "decl-vars" : [ ],
      "line-start" : 497,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "sp",
            "variable" : 29
          },
          "go-type" : 2,
          "kind" : "expression",
          "target" : {
            "go-type" : 118,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "frame",
              "variable" : 27
            }
          },
          "type" : "selector"
        } ],
        "operator" : "+",
        "right" : [ {
          "go-type" : 2,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "0"
          }
        } ],
        "type" : "assign-operator"
      },
      "assign-vars" : [ ],
      "line-end" : 497,
      "code" : "frame.sp += sys.MinFrameSize",
      "entry" : false,
      "use-vars" : [ 27 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 206, 207 ],
      "in-vars" : [ 34, 5, 18, 80, 9, 38, 4, 3, 26, 15, 8, 27, 6, 11, 40, 31, 7, 33, 39 ],
      "exit" : false,
      "out-vars" : [ 31, 8, 34, 40, 7, 4, 15, 9, 33, 38, 11, 39, 18, 26, 27, 5, 3, 80, 6 ],
      "decl-vars" : [ ],
      "line-start" : 498,
      "ast" : {
        "condition" : {
          "go-type" : 165,
          "kind" : "constant",
          "value" : {
            "type" : "BOOL",
            "value" : "false"
          }
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 501,
      "code" : "if GOARCH == \"arm64\" {\n\n\tframe.sp += sys.PtrSize\n}",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ 27 ],
      "successors" : [ 207 ],
      "in-vars" : [ 7, 26, 8, 33, 6, 11, 34, 18, 3, 80, 27, 5, 31, 15, 38, 39, 40, 4, 9 ],
      "exit" : false,
      "out-vars" : [ 80, 9, 11, 5, 31, 4, 33, 39, 40, 18, 3, 26, 8, 34, 38, 7, 6, 15, 27 ],
      "decl-vars" : [ ],
      "line-start" : 500,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "sp",
            "variable" : 29
          },
          "go-type" : 2,
          "kind" : "expression",
          "target" : {
            "go-type" : 118,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "frame",
              "variable" : 27
            }
          },
          "type" : "selector"
        } ],
        "operator" : "+",
        "right" : [ {
          "go-type" : 2,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "8"
          }
        } ],
        "type" : "assign-operator"
      },
      "assign-vars" : [ ],
      "line-end" : 500,
      "code" : "frame.sp += sys.PtrSize",
      "entry" : false,
      "use-vars" : [ 27 ]
    }, {
      "update-vars" : [ 35 ],
      "successors" : [ 208 ],
      "in-vars" : [ 27, 34, 5, 80, 38, 39, 7, 4, 3, 26, 9, 15, 11, 40, 31, 18, 33, 6, 8 ],
      "exit" : false,
      "out-vars" : [ 38, 39, 5, 31, 4, 33, 11, 26, 8, 34, 40, 7, 3, 27, 35, 18, 80, 9, 6, 15 ],
      "decl-vars" : [ ],
      "line-start" : 502,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 120,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "f",
            "variable" : 35
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "pc",
              "variable" : 28
            },
            "go-type" : 2,
            "kind" : "expression",
            "target" : {
              "go-type" : 118,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "frame",
                "variable" : 27
              }
            },
            "type" : "selector"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 174,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 4,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "findfunc"
            }
          },
          "go-type" : 120,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 35 ],
      "line-end" : 502,
      "code" : "f = findfunc(frame.pc)",
      "entry" : false,
      "use-vars" : [ 27 ]
    }, {
      "update-vars" : [ 27 ],
      "successors" : [ 209 ],
      "in-vars" : [ 40, 5, 18, 3, 38, 26, 9, 15, 8, 7, 11, 34, 31, 33, 6, 35, 39, 4, 80, 27 ],
      "exit" : false,
      "out-vars" : [ 15, 35, 33, 6, 26, 31, 7, 3, 18, 4, 80, 8, 27, 34, 5, 40, 9, 38, 11, 39 ],
      "decl-vars" : [ ],
      "line-start" : 503,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "fn",
            "variable" : 37
          },
          "go-type" : 120,
          "kind" : "expression",
          "target" : {
            "go-type" : 118,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "frame",
              "variable" : 27
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "go-type" : 120,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "f",
            "variable" : 35
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 503,
      "code" : "frame.fn = f",
      "entry" : false,
      "use-vars" : [ 35, 27 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 210, 211 ],
      "in-vars" : [ 15, 5, 18, 9, 80, 8, 39, 40, 3, 7, 4, 33, 35, 11, 34, 26, 6, 27, 38, 31 ],
      "exit" : false,
      "out-vars" : [ 35, 38, 39, 40, 5, 18, 3, 80, 26, 9, 33, 15, 11, 7, 34, 31, 8, 27, 4, 6 ],
      "decl-vars" : [ ],
      "line-start" : 504,
      "ast" : {
        "condition" : {
          "go-type" : 13,
          "kind" : "expression",
          "operator" : "!",
          "target" : {
            "arguments" : [ ],
            "ellipsis" : false,
            "function" : {
              "field" : {
                "function" : 5,
                "ident-kind" : "Func",
                "kind" : "ident",
                "value" : "valid"
              },
              "go-type" : 177,
              "kind" : "expression",
              "target" : {
                "go-type" : 120,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "f",
                  "variable" : 35
                }
              },
              "type" : "selector"
            },
            "go-type" : 13,
            "kind" : "expression",
            "type" : "call"
          },
          "type" : "unary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 508,
      "code" : "if !f.valid() {\n\tframe.pc = x\n} else if funcspdelta(f, frame.pc, &cache) == 0 {\n\tframe.lr = x\n}",
      "entry" : false,
      "use-vars" : [ 35 ]
    }, {
      "update-vars" : [ 27 ],
      "successors" : [ 47 ],
      "in-vars" : [ 27, 7, 18, 3, 80, 26, 6, 15, 11, 33, 8, 39, 34, 4, 9, 38, 40, 5, 31 ],
      "exit" : false,
      "out-vars" : [ 9, 33, 15, 8, 34, 3, 18, 11, 39, 31, 4, 26, 27, 40, 7, 6, 38, 5 ],
      "decl-vars" : [ ],
      "line-start" : 505,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "pc",
            "variable" : 28
          },
          "go-type" : 2,
          "kind" : "expression",
          "target" : {
            "go-type" : 118,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "frame",
              "variable" : 27
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "go-type" : 2,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "x",
            "variable" : 80
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 505,
      "code" : "frame.pc = x",
      "entry" : false,
      "use-vars" : [ 80, 27 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 47, 212 ],
      "in-vars" : [ 11, 39, 34, 18, 15, 35, 38, 5, 31, 4, 9, 8, 27, 26, 33, 6, 40, 3, 80, 7 ],
      "exit" : false,
      "out-vars" : [ 34, 40, 5, 31, 6, 8, 27, 38, 26, 9, 33, 15, 39, 3, 80, 11, 18, 7, 4 ],
      "decl-vars" : [ ],
      "line-start" : 506,
      "ast" : {
        "condition" : {
          "go-type" : 165,
          "kind" : "expression",
          "left" : {
            "arguments" : [ {
              "go-type" : 120,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "f",
                "variable" : 35
              }
            }, {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "pc",
                "variable" : 28
              },
              "go-type" : 2,
              "kind" : "expression",
              "target" : {
                "go-type" : 118,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "frame",
                  "variable" : 27
                }
              },
              "type" : "selector"
            }, {
              "go-type" : 191,
              "kind" : "expression",
              "operator" : "&",
              "target" : {
                "go-type" : 183,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "cache",
                  "variable" : 38
                }
              },
              "type" : "unary"
            } ],
            "ellipsis" : false,
            "function" : {
              "go-type" : 189,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "function" : 7,
                "ident-kind" : "Func",
                "kind" : "ident",
                "value" : "funcspdelta"
              }
            },
            "go-type" : 17,
            "kind" : "expression",
            "type" : "call"
          },
          "operator" : "==",
          "right" : {
            "go-type" : 17,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 508,
      "code" : "if funcspdelta(f, frame.pc, &cache) == 0 {\n\tframe.lr = x\n}",
      "entry" : false,
      "use-vars" : [ 35, 27, 38 ]
    }, {
      "update-vars" : [ 27 ],
      "successors" : [ 47 ],
      "in-vars" : [ 31, 4, 26, 27, 38, 7, 18, 3, 9, 8, 34, 40, 33, 11, 5, 6, 15, 39, 80 ],
      "exit" : false,
      "out-vars" : [ 39, 5, 31, 18, 26, 8, 11, 38, 34, 7, 4, 3, 27, 33, 40, 6, 15, 9 ],
      "decl-vars" : [ ],
      "line-start" : 507,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "lr",
            "variable" : 30
          },
          "go-type" : 2,
          "kind" : "expression",
          "target" : {
            "go-type" : 118,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "frame",
              "variable" : 27
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "go-type" : 2,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "x",
            "variable" : 80
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 507,
      "code" : "frame.lr = x",
      "entry" : false,
      "use-vars" : [ 80, 27 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 214, 215 ],
      "in-vars" : [ 40, 7, 3, 26, 6, 27, 34 ],
      "exit" : false,
      "out-vars" : [ 27, 40, 7, 3, 26, 6 ],
      "decl-vars" : [ ],
      "line-start" : 512,
      "ast" : {
        "condition" : {
          "go-type" : 13,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "printing",
            "variable" : 34
          }
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 514,
      "code" : "if printing {\n\tn = nprint\n}",
      "entry" : false,
      "use-vars" : [ 34 ]
    }, {
      "update-vars" : [ 40 ],
      "successors" : [ 215 ],
      "in-vars" : [ 26, 6, 27, 7, 3 ],
      "exit" : false,
      "out-vars" : [ 3, 6, 27, 40, 7 ],
      "decl-vars" : [ ],
      "line-start" : 513,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 78,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "n",
            "variable" : 40
          }
        } ],
        "right" : [ {
          "go-type" : 78,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "nprint",
            "variable" : 26
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 40 ],
      "line-end" : 513,
      "code" : "n = nprint",
      "entry" : false,
      "use-vars" : [ 26 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 216, 219 ],
      "in-vars" : [ 27, 40, 7, 3, 6 ],
      "exit" : false,
      "out-vars" : [ 27, 40, 3, 6 ],
      "decl-vars" : [ ],
      "line-start" : 556,
      "ast" : {
        "condition" : {
          "go-type" : 165,
          "kind" : "expression",
          "left" : {
            "go-type" : 165,
            "kind" : "expression",
            "left" : {
              "go-type" : 165,
              "kind" : "expression",
              "left" : {
                "go-type" : 115,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "callback",
                  "variable" : 7
                }
              },
              "operator" : "!=",
              "right" : {
                "go-type" : 166,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Nil",
                  "kind" : "ident",
                  "value" : "nil"
                }
              },
              "type" : "binary"
            },
            "operator" : "&&",
            "right" : {
              "go-type" : 165,
              "kind" : "expression",
              "left" : {
                "go-type" : 78,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "n",
                  "variable" : 40
                }
              },
              "operator" : "<",
              "right" : {
                "go-type" : 78,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "max",
                  "variable" : 6
                }
              },
              "type" : "binary"
            },
            "type" : "binary"
          },
          "operator" : "&&",
          "right" : {
            "go-type" : 165,
            "kind" : "expression",
            "left" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "sp",
                "variable" : 29
              },
              "go-type" : 2,
              "kind" : "expression",
              "target" : {
                "go-type" : 118,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "frame",
                  "variable" : 27
                }
              },
              "type" : "selector"
            },
            "operator" : "!=",
            "right" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "stktopsp",
                "variable" : 81
              },
              "go-type" : 2,
              "kind" : "expression",
              "target" : {
                "go-type" : 3,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "gp",
                  "variable" : 3
                }
              },
              "type" : "selector"
            },
            "type" : "binary"
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 560,
      "code" : "if callback != nil && n < max && frame.sp != gp.stktopsp {\n\tprint(\"runtime: g\", gp.goid, \": frame.sp=\", hex(frame.sp), \" top=\", hex(gp.stktopsp), \"\\n\")\n\tprint(\"\\tstack=[\", hex(gp.stack.lo), \"-\", hex(gp.stack.hi), \"] n=\", n, \" max=\", max, \"\\n\")\n\tthrow(\"traceback did not unwind completely\")\n}",
      "entry" : false,
      "use-vars" : [ 7, 40, 6, 27, 3 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 217 ],
      "in-vars" : [ 6, 27, 40, 3 ],
      "exit" : false,
      "out-vars" : [ 40, 3, 6 ],
      "decl-vars" : [ ],
      "line-start" : 557,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 39,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "runtime: g"
            }
          }, {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "goid",
              "variable" : 82
            },
            "go-type" : 38,
            "kind" : "expression",
            "target" : {
              "go-type" : 3,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "gp",
                "variable" : 3
              }
            },
            "type" : "selector"
          }, {
            "go-type" : 39,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : ": frame.sp="
            }
          }, {
            "coerced-to" : {
              "go-type" : 180,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 180,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "hex"
              }
            },
            "go-type" : 180,
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "sp",
                "variable" : 29
              },
              "go-type" : 2,
              "kind" : "expression",
              "target" : {
                "go-type" : 118,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "frame",
                  "variable" : 27
                }
              },
              "type" : "selector"
            },
            "type" : "cast"
          }, {
            "go-type" : 39,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : " top="
            }
          }, {
            "coerced-to" : {
              "go-type" : 180,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 180,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "hex"
              }
            },
            "go-type" : 180,
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "stktopsp",
                "variable" : 81
              },
              "go-type" : 2,
              "kind" : "expression",
              "target" : {
                "go-type" : 3,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "gp",
                  "variable" : 3
                }
              },
              "type" : "selector"
            },
            "type" : "cast"
          }, {
            "go-type" : 39,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "\n"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 249,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Builtin",
              "kind" : "ident",
              "value" : "print"
            }
          },
          "go-type" : 36,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 557,
      "code" : "print(\"runtime: g\", gp.goid, \": frame.sp=\", hex(frame.sp), \" top=\", hex(gp.stktopsp), \"\\n\")",
      "entry" : false,
      "use-vars" : [ 3, 27 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 218 ],
      "in-vars" : [ 40, 3, 6 ],
      "exit" : false,
      "out-vars" : [ 40 ],
      "decl-vars" : [ ],
      "line-start" : 558,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 39,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "\tstack=["
            }
          }, {
            "coerced-to" : {
              "go-type" : 180,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 180,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "hex"
              }
            },
            "go-type" : 180,
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "lo",
                "variable" : 83
              },
              "go-type" : 2,
              "kind" : "expression",
              "target" : {
                "field" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "stack",
                  "variable" : 36
                },
                "go-type" : 6,
                "kind" : "expression",
                "target" : {
                  "go-type" : 3,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "gp",
                    "variable" : 3
                  }
                },
                "type" : "selector"
              },
              "type" : "selector"
            },
            "type" : "cast"
          }, {
            "go-type" : 39,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "-"
            }
          }, {
            "coerced-to" : {
              "go-type" : 180,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 180,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "hex"
              }
            },
            "go-type" : 180,
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "hi",
                "variable" : 84
              },
              "go-type" : 2,
              "kind" : "expression",
              "target" : {
                "field" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "stack",
                  "variable" : 36
                },
                "go-type" : 6,
                "kind" : "expression",
                "target" : {
                  "go-type" : 3,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "gp",
                    "variable" : 3
                  }
                },
                "type" : "selector"
              },
              "type" : "selector"
            },
            "type" : "cast"
          }, {
            "go-type" : 39,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "] n="
            }
          }, {
            "go-type" : 78,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "n",
              "variable" : 40
            }
          }, {
            "go-type" : 39,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : " max="
            }
          }, {
            "go-type" : 78,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "max",
              "variable" : 6
            }
          }, {
            "go-type" : 39,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "\n"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 251,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Builtin",
              "kind" : "ident",
              "value" : "print"
            }
          },
          "go-type" : 36,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 558,
      "code" : "print(\"\\tstack=[\", hex(gp.stack.lo), \"-\", hex(gp.stack.hi), \"] n=\", n, \" max=\", max, \"\\n\")",
      "entry" : false,
      "use-vars" : [ 3, 40, 6 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 219 ],
      "in-vars" : [ 40 ],
      "exit" : false,
      "out-vars" : [ 40 ],
      "decl-vars" : [ ],
      "line-start" : 559,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 39,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "traceback did not unwind completely"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 167,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 1,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "throw"
            }
          },
          "go-type" : 36,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 559,
      "code" : "throw(\"traceback did not unwind completely\")",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 40 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 562,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 78,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "n",
            "variable" : 40
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 562,
      "code" : "return n",
      "entry" : false,
      "use-vars" : [ 40 ]
    } ],
    "code" : "// Generic traceback. Handles runtime stack prints (pcbuf == nil),\n// the runtime.Callers function (pcbuf != nil), as well as the garbage\n// collector (callback != nil).  A little clunky to merge these, but avoids\n// duplicating the code and all its subtlety.\n//\n// The skip argument is only valid with pcbuf != nil and counts the number\n// of logical frames to skip rather than physical frames (with inlining, a\n// PC in pcbuf can represent multiple calls). If a PC is partially skipped\n// and max > 1, pcbuf[1] will be runtime.skipPleaseUseCallersFrames+N where\n// N indicates the number of logical frames to skip in pcbuf[0].\nfunc gentraceback(pc0, sp0, lr0 uintptr, gp *g, skip int, pcbuf *uintptr, max int, callback func(*stkframe, unsafe.Pointer) bool, v unsafe.Pointer, flags uint) int {\n\tif skip > 0 && callback != nil {\n\t\tthrow(\"gentraceback callback cannot be used with non-zero skip\")\n\t}\n\n\tif ourg := getg(); ourg == gp && ourg == ourg.m.curg {\n\n\t\tthrow(\"gentraceback cannot trace user goroutine on its own stack\")\n\t}\n\tlevel, _, _ := gotraceback()\n\n\tvar ctxt *funcval // Context pointer for unstarted goroutines. See issue #25897.\n\n\tif pc0 == ^uintptr(0) && sp0 == ^uintptr(0) {\n\t\tif gp.syscallsp != 0 {\n\t\t\tpc0 = gp.syscallpc\n\t\t\tsp0 = gp.syscallsp\n\t\t\tif usesLR {\n\t\t\t\tlr0 = 0\n\t\t\t}\n\t\t} else {\n\t\t\tpc0 = gp.sched.pc\n\t\t\tsp0 = gp.sched.sp\n\t\t\tif usesLR {\n\t\t\t\tlr0 = gp.sched.lr\n\t\t\t}\n\t\t\tctxt = (*funcval)(gp.sched.ctxt)\n\t\t}\n\t}\n\n\tnprint := 0\n\tvar frame stkframe\n\tframe.pc = pc0\n\tframe.sp = sp0\n\tif usesLR {\n\t\tframe.lr = lr0\n\t}\n\twaspanic := false\n\tcgoCtxt := gp.cgoCtxt\n\tprinting := pcbuf == nil && callback == nil\n\n\tif frame.pc == 0 {\n\t\tif usesLR {\n\t\t\tframe.pc = *(*uintptr)(unsafe.Pointer(frame.sp))\n\t\t\tframe.lr = 0\n\t\t} else {\n\t\t\tframe.pc = uintptr(*(*sys.Uintreg)(unsafe.Pointer(frame.sp)))\n\t\t\tframe.sp += sys.RegSize\n\t\t}\n\t}\n\n\tf := findfunc(frame.pc)\n\tif !f.valid() {\n\t\tif callback != nil || printing {\n\t\t\tprint(\"runtime: unknown pc \", hex(frame.pc), \"\\n\")\n\t\t\ttracebackHexdump(gp.stack, &frame, 0)\n\t\t}\n\t\tif callback != nil {\n\t\t\tthrow(\"unknown pc\")\n\t\t}\n\t\treturn 0\n\t}\n\tframe.fn = f\n\n\tvar cache pcvalueCache\n\n\tlastFuncID := funcID_normal\n\tn := 0\n\tfor n < max {\n\n\t\tf = frame.fn\n\t\tif f.pcsp == 0 {\n\n\t\t\tbreak\n\t\t}\n\n\t\tif frame.fp == 0 {\n\n\t\t\tif flags&_TraceJumpStack != 0 && gp == gp.m.g0 && gp.m.curg != nil {\n\t\t\t\tswitch f.funcID {\n\t\t\t\tcase funcID_morestack:\n\n\t\t\t\t\tframe.pc = gp.m.curg.sched.pc\n\t\t\t\t\tframe.fn = findfunc(frame.pc)\n\t\t\t\t\tf = frame.fn\n\t\t\t\t\tframe.sp = gp.m.curg.sched.sp\n\t\t\t\t\tcgoCtxt = gp.m.curg.cgoCtxt\n\t\t\t\tcase funcID_systemstack:\n\n\t\t\t\t\tframe.sp = gp.m.curg.sched.sp\n\t\t\t\t\tcgoCtxt = gp.m.curg.cgoCtxt\n\t\t\t\t}\n\t\t\t}\n\t\t\tframe.fp = frame.sp + uintptr(funcspdelta(f, frame.pc, &cache))\n\t\t\tif !usesLR {\n\n\t\t\t\tframe.fp += sys.RegSize\n\t\t\t}\n\t\t}\n\t\tvar flr funcInfo\n\t\tif topofstack(f, gp.m != nil && gp == gp.m.g0) {\n\t\t\tframe.lr = 0\n\t\t\tflr = funcInfo{}\n\t\t} else if usesLR && f.funcID == funcID_jmpdefer {\n\n\t\t\tif callback != nil {\n\t\t\t\tthrow(\"traceback_arm: found jmpdefer when tracing with callback\")\n\t\t\t}\n\t\t\tframe.lr = 0\n\t\t} else {\n\t\t\tvar lrPtr uintptr\n\t\t\tif usesLR {\n\t\t\t\tif n == 0 && frame.sp < frame.fp || frame.lr == 0 {\n\t\t\t\t\tlrPtr = frame.sp\n\t\t\t\t\tframe.lr = *(*uintptr)(unsafe.Pointer(lrPtr))\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif frame.lr == 0 {\n\t\t\t\t\tlrPtr = frame.fp - sys.RegSize\n\t\t\t\t\tframe.lr = uintptr(*(*sys.Uintreg)(unsafe.Pointer(lrPtr)))\n\t\t\t\t}\n\t\t\t}\n\t\t\tflr = findfunc(frame.lr)\n\t\t\tif !flr.valid() {\n\n\t\t\t\tdoPrint := printing\n\t\t\t\tif doPrint && gp.m.incgo && f.funcID == funcID_sigpanic {\n\n\t\t\t\t\tdoPrint = false\n\t\t\t\t}\n\t\t\t\tif callback != nil || doPrint {\n\t\t\t\t\tprint(\"runtime: unexpected return pc for \", funcname(f), \" called from \", hex(frame.lr), \"\\n\")\n\t\t\t\t\ttracebackHexdump(gp.stack, &frame, lrPtr)\n\t\t\t\t}\n\t\t\t\tif callback != nil {\n\t\t\t\t\tthrow(\"unknown caller pc\")\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tframe.varp = frame.fp\n\t\tif !usesLR {\n\n\t\t\tframe.varp -= sys.RegSize\n\t\t}\n\n\t\tif frame.varp > frame.sp && (framepointer_enabled && GOARCH == \"amd64\" || GOARCH == \"arm64\") {\n\t\t\tframe.varp -= sys.RegSize\n\t\t}\n\n\t\tif callback != nil || printing {\n\t\t\tframe.argp = frame.fp + sys.MinFrameSize\n\t\t\tvar ok bool\n\t\t\tframe.arglen, frame.argmap, ok = getArgInfoFast(f, callback != nil)\n\t\t\tif !ok {\n\t\t\t\tframe.arglen, frame.argmap = getArgInfo(&frame, f, callback != nil, ctxt)\n\t\t\t}\n\t\t}\n\t\tctxt = nil\n\n\t\tframe.continpc = frame.pc\n\t\tif waspanic {\n\t\t\tif frame.fn.deferreturn != 0 {\n\t\t\t\tframe.continpc = frame.fn.entry + uintptr(frame.fn.deferreturn) + 1\n\n\t\t\t} else {\n\t\t\t\tframe.continpc = 0\n\t\t\t}\n\t\t}\n\n\t\tif callback != nil {\n\t\t\tif !callback((*stkframe)(noescape(unsafe.Pointer(&frame))), v) {\n\t\t\t\treturn n\n\t\t\t}\n\t\t}\n\n\t\tif pcbuf != nil {\n\t\t\tpc := frame.pc\n\n\t\t\ttracepc := pc\n\n\t\t\tif (n == 0 && flags&_TraceTrap != 0) || waspanic || pc == f.entry {\n\t\t\t\tpc++\n\t\t\t} else {\n\t\t\t\ttracepc--\n\t\t\t}\n\n\t\t\tif inldata := funcdata(f, _FUNCDATA_InlTree); inldata != nil {\n\t\t\t\tinltree := (*[1 << 20]inlinedCall)(inldata)\n\t\t\t\tfor {\n\t\t\t\t\tix := pcdatavalue(f, _PCDATA_InlTreeIndex, tracepc, &cache)\n\t\t\t\t\tif ix < 0 {\n\t\t\t\t\t\tbreak\n\t\t\t\t\t}\n\t\t\t\t\tif inltree[ix].funcID == funcID_wrapper && elideWrapperCalling(lastFuncID) {\n\n\t\t\t\t\t} else if skip > 0 {\n\t\t\t\t\t\tskip--\n\t\t\t\t\t} else if n < max {\n\t\t\t\t\t\t(*[1 << 20]uintptr)(unsafe.Pointer(pcbuf))[n] = pc\n\t\t\t\t\t\tn++\n\t\t\t\t\t}\n\t\t\t\t\tlastFuncID = inltree[ix].funcID\n\n\t\t\t\t\ttracepc = frame.fn.entry + uintptr(inltree[ix].parentPc)\n\t\t\t\t\tpc = tracepc + 1\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif f.funcID == funcID_wrapper && elideWrapperCalling(lastFuncID) {\n\n\t\t\t} else if skip > 0 {\n\t\t\t\tskip--\n\t\t\t} else if n < max {\n\t\t\t\t(*[1 << 20]uintptr)(unsafe.Pointer(pcbuf))[n] = pc\n\t\t\t\tn++\n\t\t\t}\n\t\t\tlastFuncID = f.funcID\n\t\t\tn--\n\t\t}\n\n\t\tif printing {\n\n\t\t\ttracepc := frame.pc\n\t\t\tif (n > 0 || flags&_TraceTrap == 0) && frame.pc > f.entry && !waspanic {\n\t\t\t\ttracepc--\n\t\t\t}\n\n\t\t\tif inldata := funcdata(f, _FUNCDATA_InlTree); inldata != nil {\n\t\t\t\tinltree := (*[1 << 20]inlinedCall)(inldata)\n\t\t\t\tfor {\n\t\t\t\t\tix := pcdatavalue(f, _PCDATA_InlTreeIndex, tracepc, nil)\n\t\t\t\t\tif ix < 0 {\n\t\t\t\t\t\tbreak\n\t\t\t\t\t}\n\t\t\t\t\tif (flags&_TraceRuntimeFrames) != 0 || showframe(f, gp, nprint == 0, inltree[ix].funcID, lastFuncID) {\n\t\t\t\t\t\tname := funcnameFromNameoff(f, inltree[ix].func_)\n\t\t\t\t\t\tfile, line := funcline(f, tracepc)\n\t\t\t\t\t\tprint(name, \"(...)\\n\")\n\t\t\t\t\t\tprint(\"\\t\", file, \":\", line, \"\\n\")\n\t\t\t\t\t\tnprint++\n\t\t\t\t\t}\n\t\t\t\t\tlastFuncID = inltree[ix].funcID\n\n\t\t\t\t\ttracepc = frame.fn.entry + uintptr(inltree[ix].parentPc)\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (flags&_TraceRuntimeFrames) != 0 || showframe(f, gp, nprint == 0, f.funcID, lastFuncID) {\n\n\t\t\t\tname := funcname(f)\n\t\t\t\tfile, line := funcline(f, tracepc)\n\t\t\t\tif name == \"runtime.gopanic\" {\n\t\t\t\t\tname = \"panic\"\n\t\t\t\t}\n\t\t\t\tprint(name, \"(\")\n\t\t\t\targp := (*[100]uintptr)(unsafe.Pointer(frame.argp))\n\t\t\t\tfor i := uintptr(0); i < frame.arglen/sys.PtrSize; i++ {\n\t\t\t\t\tif i >= 10 {\n\t\t\t\t\t\tprint(\", ...\")\n\t\t\t\t\t\tbreak\n\t\t\t\t\t}\n\t\t\t\t\tif i != 0 {\n\t\t\t\t\t\tprint(\", \")\n\t\t\t\t\t}\n\t\t\t\t\tprint(hex(argp[i]))\n\t\t\t\t}\n\t\t\t\tprint(\")\\n\")\n\t\t\t\tprint(\"\\t\", file, \":\", line)\n\t\t\t\tif frame.pc > f.entry {\n\t\t\t\t\tprint(\" +\", hex(frame.pc-f.entry))\n\t\t\t\t}\n\t\t\t\tif gp.m != nil && gp.m.throwing > 0 && gp == gp.m.curg || level >= 2 {\n\t\t\t\t\tprint(\" fp=\", hex(frame.fp), \" sp=\", hex(frame.sp), \" pc=\", hex(frame.pc))\n\t\t\t\t}\n\t\t\t\tprint(\"\\n\")\n\t\t\t\tnprint++\n\t\t\t}\n\t\t\tlastFuncID = f.funcID\n\t\t}\n\t\tn++\n\n\t\tif f.funcID == funcID_cgocallback_gofunc && len(cgoCtxt) > 0 {\n\t\t\tctxt := cgoCtxt[len(cgoCtxt)-1]\n\t\t\tcgoCtxt = cgoCtxt[:len(cgoCtxt)-1]\n\n\t\t\tif skip == 0 && callback == nil {\n\t\t\t\tn = tracebackCgoContext(pcbuf, printing, ctxt, n, max)\n\t\t\t}\n\t\t}\n\n\t\twaspanic = f.funcID == funcID_sigpanic\n\t\tinjectedCall := waspanic || f.funcID == funcID_asyncPreempt\n\n\t\tif !flr.valid() {\n\t\t\tbreak\n\t\t}\n\n\t\tframe.fn = flr\n\t\tframe.pc = frame.lr\n\t\tframe.lr = 0\n\t\tframe.sp = frame.fp\n\t\tframe.fp = 0\n\t\tframe.argmap = nil\n\n\t\tif usesLR && injectedCall {\n\t\t\tx := *(*uintptr)(unsafe.Pointer(frame.sp))\n\t\t\tframe.sp += sys.MinFrameSize\n\t\t\tif GOARCH == \"arm64\" {\n\n\t\t\t\tframe.sp += sys.PtrSize\n\t\t\t}\n\t\t\tf = findfunc(frame.pc)\n\t\t\tframe.fn = f\n\t\t\tif !f.valid() {\n\t\t\t\tframe.pc = x\n\t\t\t} else if funcspdelta(f, frame.pc, &cache) == 0 {\n\t\t\t\tframe.lr = x\n\t\t\t}\n\t\t}\n\t}\n\n\tif printing {\n\t\tn = nprint\n\t}\n\n\tif callback != nil && n < max && frame.sp != gp.stktopsp {\n\t\tprint(\"runtime: g\", gp.goid, \": frame.sp=\", hex(frame.sp), \" top=\", hex(gp.stktopsp), \"\\n\")\n\t\tprint(\"\\tstack=[\", hex(gp.stack.lo), \"-\", hex(gp.stack.hi), \"] n=\", n, \" max=\", max, \"\\n\")\n\t\tthrow(\"traceback did not unwind completely\")\n\t}\n\n\treturn n\n}",
    "defines" : [ 0 ],
    "functions" : [ {
      "name" : "gentraceback",
      "package" : 0,
      "type" : 0,
      "exported" : false
    }, {
      "name" : "throw",
      "package" : 0,
      "type" : 167,
      "exported" : false
    }, {
      "name" : "getg",
      "package" : 0,
      "type" : 169,
      "exported" : false
    }, {
      "name" : "gotraceback",
      "package" : 0,
      "type" : 172,
      "exported" : false
    }, {
      "name" : "findfunc",
      "package" : 0,
      "type" : 174,
      "exported" : false
    }, {
      "name" : "valid",
      "package" : 0,
      "type" : 177,
      "exported" : false
    }, {
      "name" : "tracebackHexdump",
      "package" : 0,
      "type" : 181,
      "exported" : false
    }, {
      "name" : "funcspdelta",
      "package" : 0,
      "type" : 189,
      "exported" : false
    }, {
      "name" : "topofstack",
      "package" : 0,
      "type" : 193,
      "exported" : false
    }, {
      "name" : "funcname",
      "package" : 0,
      "type" : 197,
      "exported" : false
    }, {
      "name" : "getArgInfoFast",
      "package" : 0,
      "type" : 201,
      "exported" : false
    }, {
      "name" : "getArgInfo",
      "package" : 0,
      "type" : 204,
      "exported" : false
    }, {
      "name" : "noescape",
      "package" : 0,
      "type" : 206,
      "exported" : false
    }, {
      "name" : "funcdata",
      "package" : 0,
      "type" : 209,
      "exported" : false
    }, {
      "name" : "pcdatavalue",
      "package" : 0,
      "type" : 217,
      "exported" : false
    }, {
      "name" : "elideWrapperCalling",
      "package" : 0,
      "type" : 219,
      "exported" : false
    }, {
      "name" : "showframe",
      "package" : 0,
      "type" : 223,
      "exported" : false
    }, {
      "name" : "funcnameFromNameoff",
      "package" : 0,
      "type" : 225,
      "exported" : false
    }, {
      "name" : "funcline",
      "package" : 0,
      "type" : 228,
      "exported" : false
    }, {
      "name" : "tracebackCgoContext",
      "package" : 0,
      "type" : 247,
      "exported" : false
    } ],
    "line-end" : 563,
    "line-start" : 98,
    "names" : [ "gentraceback" ],
    "package" : 0,
    "packages" : [ {
      "name" : "runtime",
      "path" : "runtime"
    }, {
      "name" : "unsafe",
      "path" : "unsafe"
    }, {
      "name" : "sys",
      "path" : "runtime/internal/sys"
    } ],
    "params" : [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 ],
    "receivers" : [ ],
    "results" : [ 10 ],
    "type" : "function",
    "types" : [ {
      "name" : "func(pc0 uintptr, sp0 uintptr, lr0 uintptr, gp *runtime.g, skip int, pcbuf *uintptr, max int, callback func(*runtime.stkframe, unsafe.Pointer) bool, v unsafe.Pointer, flags uint) int",
      "params" : 1,
      "recv" : -1,
      "results" : 164,
      "type" : "Signature",
      "underlying" : 0,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "pc0",
        "type" : 2
      }, {
        "name" : "sp0",
        "type" : 2
      }, {
        "name" : "lr0",
        "type" : 2
      }, {
        "name" : "gp",
        "type" : 3
      }, {
        "name" : "skip",
        "type" : 78
      }, {
        "name" : "pcbuf",
        "type" : 114
      }, {
        "name" : "max",
        "type" : 78
      }, {
        "name" : "callback",
        "type" : 115
      }, {
        "name" : "v",
        "type" : 11
      }, {
        "name" : "flags",
        "type" : 97
      } ],
      "name" : "(pc0 uintptr, sp0 uintptr, lr0 uintptr, gp *runtime.g, skip int, pcbuf *uintptr, max int, callback func(*runtime.stkframe, unsafe.Pointer) bool, v unsafe.Pointer, flags uint)",
      "type" : "Tuple",
      "underlying" : 1
    }, {
      "name" : "uintptr",
      "type" : "Basic",
      "underlying" : 2
    }, {
      "elem" : 4,
      "name" : "*runtime.g",
      "type" : "Pointer",
      "underlying" : 3
    }, {
      "local-name" : "g",
      "name" : "runtime.g",
      "package" : 0,
      "type" : "Named",
      "underlying" : 5
    }, {
      "fields" : [ {
        "name" : "stack",
        "type" : 6
      }, {
        "name" : "stackguard0",
        "type" : 2
      }, {
        "name" : "stackguard1",
        "type" : 2
      }, {
        "name" : "_panic",
        "type" : 8
      }, {
        "name" : "_defer",
        "type" : 14
      }, {
        "name" : "m",
        "type" : 21
      }, {
        "name" : "sched",
        "type" : 24
      }, {
        "name" : "syscallsp",
        "type" : 2
      }, {
        "name" : "syscallpc",
        "type" : 2
      }, {
        "name" : "stktopsp",
        "type" : 2
      }, {
        "name" : "param",
        "type" : 11
      }, {
        "name" : "atomicstatus",
        "type" : 29
      }, {
        "name" : "stackLock",
        "type" : 29
      }, {
        "name" : "goid",
        "type" : 38
      }, {
        "name" : "schedlink",
        "type" : 26
      }, {
        "name" : "waitsince",
        "type" : 38
      }, {
        "name" : "waitreason",
        "type" : 84
      }, {
        "name" : "preempt",
        "type" : 13
      }, {
        "name" : "preemptStop",
        "type" : 13
      }, {
        "name" : "preemptShrink",
        "type" : 13
      }, {
        "name" : "asyncSafePoint",
        "type" : 13
      }, {
        "name" : "paniconfault",
        "type" : 13
      }, {
        "name" : "gcscandone",
        "type" : 13
      }, {
        "name" : "throwsplit",
        "type" : 13
      }, {
        "name" : "activeStackChans",
        "type" : 13
      }, {
        "name" : "raceignore",
        "type" : 40
      }, {
        "name" : "sysblocktraced",
        "type" : 13
      }, {
        "name" : "sysexitticks",
        "type" : 38
      }, {
        "name" : "traceseq",
        "type" : 28
      }, {
        "name" : "tracelastp",
        "type" : 37
      }, {
        "name" : "lockedm",
        "type" : 47
      }, {
        "name" : "sig",
        "type" : 29
      }, {
        "name" : "writebuf",
        "type" : 85
      }, {
        "name" : "sigcode0",
        "type" : 2
      }, {
        "name" : "sigcode1",
        "type" : 2
      }, {
        "name" : "sigpc",
        "type" : 2
      }, {
        "name" : "gopc",
        "type" : 2
      }, {
        "name" : "ancestors",
        "type" : 86
      }, {
        "name" : "startpc",
        "type" : 2
      }, {
        "name" : "racectx",
        "type" : 2
      }, {
        "name" : "waiting",
        "type" : 91
      }, {
        "name" : "cgoCtxt",
        "type" : 90
      }, {
        "name" : "labels",
        "type" : 11
      }, {
        "name" : "timer",
        "type" : 109
      }, {
        "name" : "selectDone",
        "type" : 29
      }, {
        "name" : "gcAssistBytes",
        "type" : 38
      } ],
      "name" : "struct{stack runtime.stack; stackguard0 uintptr; stackguard1 uintptr; _panic *runtime._panic; _defer *runtime._defer; m *runtime.m; sched runtime.gobuf; syscallsp uintptr; syscallpc uintptr; stktopsp uintptr; param unsafe.Pointer; atomicstatus uint32; stackLock uint32; goid int64; schedlink runtime.guintptr; waitsince int64; waitreason runtime.waitReason; preempt bool; preemptStop bool; preemptShrink bool; asyncSafePoint bool; paniconfault bool; gcscandone bool; throwsplit bool; activeStackChans bool; raceignore int8; sysblocktraced bool; sysexitticks int64; traceseq uint64; tracelastp runtime.puintptr; lockedm runtime.muintptr; sig uint32; writebuf []byte; sigcode0 uintptr; sigcode1 uintptr; sigpc uintptr; gopc uintptr; ancestors *[]runtime.ancestorInfo; startpc uintptr; racectx uintptr; waiting *runtime.sudog; cgoCtxt []uintptr; labels unsafe.Pointer; timer *runtime.timer; selectDone uint32; gcAssistBytes int64}",
      "type" : "Struct",
      "underlying" : 5
    }, {
      "local-name" : "stack",
      "name" : "runtime.stack",
      "package" : 0,
      "type" : "Named",
      "underlying" : 7
    }, {
      "fields" : [ {
        "name" : "lo",
        "type" : 2
      }, {
        "name" : "hi",
        "type" : 2
      } ],
      "name" : "struct{lo uintptr; hi uintptr}",
      "type" : "Struct",
      "underlying" : 7
    }, {
      "elem" : 9,
      "name" : "*runtime._panic",
      "type" : "Pointer",
      "underlying" : 8
    }, {
      "local-name" : "_panic",
      "name" : "runtime._panic",
      "package" : 0,
      "type" : "Named",
      "underlying" : 10
    }, {
      "fields" : [ {
        "name" : "argp",
        "type" : 11
      }, {
        "name" : "arg",
        "type" : 12
      }, {
        "name" : "link",
        "type" : 8
      }, {
        "name" : "pc",
        "type" : 2
      }, {
        "name" : "sp",
        "type" : 11
      }, {
        "name" : "recovered",
        "type" : 13
      }, {
        "name" : "aborted",
        "type" : 13
      }, {
        "name" : "goexit",
        "type" : 13
      } ],
      "name" : "struct{argp unsafe.Pointer; arg interface{}; link *runtime._panic; pc uintptr; sp unsafe.Pointer; recovered bool; aborted bool; goexit bool}",
      "type" : "Struct",
      "underlying" : 10
    }, {
      "local-name" : "Pointer",
      "name" : "unsafe.Pointer",
      "package" : 1,
      "type" : "Basic",
      "underlying" : 11
    }, {
      "methods" : [ ],
      "name" : "interface{}",
      "type" : "Interface",
      "underlying" : 12
    }, {
      "name" : "bool",
      "type" : "Basic",
      "underlying" : 13
    }, {
      "elem" : 15,
      "name" : "*runtime._defer",
      "type" : "Pointer",
      "underlying" : 14
    }, {
      "local-name" : "_defer",
      "name" : "runtime._defer",
      "package" : 0,
      "type" : "Named",
      "underlying" : 16
    }, {
      "fields" : [ {
        "name" : "siz",
        "type" : 17
      }, {
        "name" : "started",
        "type" : 13
      }, {
        "name" : "heap",
        "type" : 13
      }, {
        "name" : "openDefer",
        "type" : 13
      }, {
        "name" : "sp",
        "type" : 2
      }, {
        "name" : "pc",
        "type" : 2
      }, {
        "name" : "fn",
        "type" : 18
      }, {
        "name" : "_panic",
        "type" : 8
      }, {
        "name" : "link",
        "type" : 14
      }, {
        "name" : "fd",
        "type" : 11
      }, {
        "name" : "varp",
        "type" : 2
      }, {
        "name" : "framepc",
        "type" : 2
      } ],
      "name" : "struct{siz int32; started bool; heap bool; openDefer bool; sp uintptr; pc uintptr; fn *runtime.funcval; _panic *runtime._panic; link *runtime._defer; fd unsafe.Pointer; varp uintptr; framepc uintptr}",
      "type" : "Struct",
      "underlying" : 16
    }, {
      "name" : "int32",
      "type" : "Basic",
      "underlying" : 17
    }, {
      "elem" : 19,
      "name" : "*runtime.funcval",
      "type" : "Pointer",
      "underlying" : 18
    }, {
      "local-name" : "funcval",
      "name" : "runtime.funcval",
      "package" : 0,
      "type" : "Named",
      "underlying" : 20
    }, {
      "fields" : [ {
        "name" : "fn",
        "type" : 2
      } ],
      "name" : "struct{fn uintptr}",
      "type" : "Struct",
      "underlying" : 20
    }, {
      "elem" : 22,
      "name" : "*runtime.m",
      "type" : "Pointer",
      "underlying" : 21
    }, {
      "local-name" : "m",
      "name" : "runtime.m",
      "package" : 0,
      "type" : "Named",
      "underlying" : 23
    }, {
      "fields" : [ {
        "name" : "g0",
        "type" : 3
      }, {
        "name" : "morebuf",
        "type" : 24
      }, {
        "name" : "divmod",
        "type" : 29
      }, {
        "name" : "procid",
        "type" : 28
      }, {
        "name" : "gsignal",
        "type" : 3
      }, {
        "name" : "goSigStack",
        "type" : 30
      }, {
        "name" : "sigmask",
        "type" : 32
      }, {
        "name" : "tls",
        "type" : 34
      }, {
        "name" : "mstartfn",
        "type" : 35
      }, {
        "name" : "curg",
        "type" : 3
      }, {
        "name" : "caughtsig",
        "type" : 26
      }, {
        "name" : "p",
        "type" : 37
      }, {
        "name" : "nextp",
        "type" : 37
      }, {
        "name" : "oldp",
        "type" : 37
      }, {
        "name" : "id",
        "type" : 38
      }, {
        "name" : "mallocing",
        "type" : 17
      }, {
        "name" : "throwing",
        "type" : 17
      }, {
        "name" : "preemptoff",
        "type" : 39
      }, {
        "name" : "locks",
        "type" : 17
      }, {
        "name" : "dying",
        "type" : 17
      }, {
        "name" : "profilehz",
        "type" : 17
      }, {
        "name" : "spinning",
        "type" : 13
      }, {
        "name" : "blocked",
        "type" : 13
      }, {
        "name" : "newSigstack",
        "type" : 13
      }, {
        "name" : "printlock",
        "type" : 40
      }, {
        "name" : "incgo",
        "type" : 13
      }, {
        "name" : "freeWait",
        "type" : 29
      }, {
        "name" : "fastrand",
        "type" : 33
      }, {
        "name" : "needextram",
        "type" : 13
      }, {
        "name" : "traceback",
        "type" : 41
      }, {
        "name" : "ncgocall",
        "type" : 28
      }, {
        "name" : "ncgo",
        "type" : 17
      }, {
        "name" : "cgoCallersUse",
        "type" : 29
      }, {
        "name" : "cgoCallers",
        "type" : 42
      }, {
        "name" : "park",
        "type" : 45
      }, {
        "name" : "alllink",
        "type" : 21
      }, {
        "name" : "schedlink",
        "type" : 47
      }, {
        "name" : "mcache",
        "type" : 48
      }, {
        "name" : "lockedg",
        "type" : 26
      }, {
        "name" : "createstack",
        "type" : 44
      }, {
        "name" : "lockedExt",
        "type" : 29
      }, {
        "name" : "lockedInt",
        "type" : 29
      }, {
        "name" : "nextwaitm",
        "type" : 47
      }, {
        "name" : "waitunlockf",
        "type" : 75
      }, {
        "name" : "waitlock",
        "type" : 11
      }, {
        "name" : "waittraceev",
        "type" : 70
      }, {
        "name" : "waittraceskip",
        "type" : 78
      }, {
        "name" : "startingtrace",
        "type" : 13
      }, {
        "name" : "syscalltick",
        "type" : 29
      }, {
        "name" : "freelink",
        "type" : 21
      }, {
        "name" : "libcall",
        "type" : 79
      }, {
        "name" : "libcallpc",
        "type" : 2
      }, {
        "name" : "libcallsp",
        "type" : 2
      }, {
        "name" : "libcallg",
        "type" : 26
      }, {
        "name" : "syscall",
        "type" : 79
      }, {
        "name" : "vdsoSP",
        "type" : 2
      }, {
        "name" : "vdsoPC",
        "type" : 2
      }, {
        "name" : "preemptGen",
        "type" : 29
      }, {
        "name" : "signalPending",
        "type" : 29
      }, {
        "name" : "dlogPerM",
        "type" : 81
      }, {
        "name" : "mOS",
        "type" : 83
      } ],
      "name" : "struct{g0 *runtime.g; morebuf runtime.gobuf; divmod uint32; procid uint64; gsignal *runtime.g; goSigStack runtime.gsignalStack; sigmask runtime.sigset; tls [6]uintptr; mstartfn func(); curg *runtime.g; caughtsig runtime.guintptr; p runtime.puintptr; nextp runtime.puintptr; oldp runtime.puintptr; id int64; mallocing int32; throwing int32; preemptoff string; locks int32; dying int32; profilehz int32; spinning bool; blocked bool; newSigstack bool; printlock int8; incgo bool; freeWait uint32; fastrand [2]uint32; needextram bool; traceback uint8; ncgocall uint64; ncgo int32; cgoCallersUse uint32; cgoCallers *runtime.cgoCallers; park runtime.note; alllink *runtime.m; schedlink runtime.muintptr; mcache *runtime.mcache; lockedg runtime.guintptr; createstack [32]uintptr; lockedExt uint32; lockedInt uint32; nextwaitm runtime.muintptr; waitunlockf func(*runtime.g, unsafe.Pointer) bool; waitlock unsafe.Pointer; waittraceev byte; waittraceskip int; startingtrace bool; syscalltick uint32; freelink *runtime.m; libcall runtime.libcall; libcallpc uintptr; libcallsp uintptr; libcallg runtime.guintptr; syscall runtime.libcall; vdsoSP uintptr; vdsoPC uintptr; preemptGen uint32; signalPending uint32; runtime.dlogPerM; runtime.mOS}",
      "type" : "Struct",
      "underlying" : 23
    }, {
      "local-name" : "gobuf",
      "name" : "runtime.gobuf",
      "package" : 0,
      "type" : "Named",
      "underlying" : 25
    }, {
      "fields" : [ {
        "name" : "sp",
        "type" : 2
      }, {
        "name" : "pc",
        "type" : 2
      }, {
        "name" : "g",
        "type" : 26
      }, {
        "name" : "ctxt",
        "type" : 11
      }, {
        "name" : "ret",
        "type" : 27
      }, {
        "name" : "lr",
        "type" : 2
      }, {
        "name" : "bp",
        "type" : 2
      } ],
      "name" : "struct{sp uintptr; pc uintptr; g runtime.guintptr; ctxt unsafe.Pointer; ret runtime/internal/sys.Uintreg; lr uintptr; bp uintptr}",
      "type" : "Struct",
      "underlying" : 25
    }, {
      "local-name" : "guintptr",
      "name" : "runtime.guintptr",
      "package" : 0,
      "type" : "Named",
      "underlying" : 2
    }, {
      "local-name" : "Uintreg",
      "name" : "runtime/internal/sys.Uintreg",
      "package" : 2,
      "type" : "Named",
      "underlying" : 28
    }, {
      "name" : "uint64",
      "type" : "Basic",
      "underlying" : 28
    }, {
      "name" : "uint32",
      "type" : "Basic",
      "underlying" : 29
    }, {
      "local-name" : "gsignalStack",
      "name" : "runtime.gsignalStack",
      "package" : 0,
      "type" : "Named",
      "underlying" : 31
    }, {
      "fields" : [ {
        "name" : "stack",
        "type" : 6
      }, {
        "name" : "stackguard0",
        "type" : 2
      }, {
        "name" : "stackguard1",
        "type" : 2
      }, {
        "name" : "stktopsp",
        "type" : 2
      } ],
      "name" : "struct{stack runtime.stack; stackguard0 uintptr; stackguard1 uintptr; stktopsp uintptr}",
      "type" : "Struct",
      "underlying" : 31
    }, {
      "local-name" : "sigset",
      "name" : "runtime.sigset",
      "package" : 0,
      "type" : "Named",
      "underlying" : 33
    }, {
      "elem" : 29,
      "name" : "[2]uint32",
      "type" : "Array",
      "underlying" : 33
    }, {
      "elem" : 2,
      "name" : "[6]uintptr",
      "type" : "Array",
      "underlying" : 34
    }, {
      "name" : "func()",
      "params" : 36,
      "recv" : -1,
      "results" : 36,
      "type" : "Signature",
      "underlying" : 35,
      "variadic" : false
    }, {
      "fields" : [ ],
      "name" : "()",
      "type" : "Tuple",
      "underlying" : 36
    }, {
      "local-name" : "puintptr",
      "name" : "runtime.puintptr",
      "package" : 0,
      "type" : "Named",
      "underlying" : 2
    }, {
      "name" : "int64",
      "type" : "Basic",
      "underlying" : 38
    }, {
      "name" : "string",
      "type" : "Basic",
      "underlying" : 39
    }, {
      "name" : "int8",
      "type" : "Basic",
      "underlying" : 40
    }, {
      "name" : "uint8",
      "type" : "Basic",
      "underlying" : 41
    }, {
      "elem" : 43,
      "name" : "*runtime.cgoCallers",
      "type" : "Pointer",
      "underlying" : 42
    }, {
      "local-name" : "cgoCallers",
      "name" : "runtime.cgoCallers",
      "package" : 0,
      "type" : "Named",
      "underlying" : 44
    }, {
      "elem" : 2,
      "name" : "[32]uintptr",
      "type" : "Array",
      "underlying" : 44
    }, {
      "local-name" : "note",
      "name" : "runtime.note",
      "package" : 0,
      "type" : "Named",
      "underlying" : 46
    }, {
      "fields" : [ {
        "name" : "key",
        "type" : 2
      } ],
      "name" : "struct{key uintptr}",
      "type" : "Struct",
      "underlying" : 46
    }, {
      "local-name" : "muintptr",
      "name" : "runtime.muintptr",
      "package" : 0,
      "type" : "Named",
      "underlying" : 2
    }, {
      "elem" : 49,
      "name" : "*runtime.mcache",
      "type" : "Pointer",
      "underlying" : 48
    }, {
      "local-name" : "mcache",
      "name" : "runtime.mcache",
      "package" : 0,
      "type" : "Named",
      "underlying" : 50
    }, {
      "fields" : [ {
        "name" : "next_sample",
        "type" : 2
      }, {
        "name" : "local_scan",
        "type" : 2
      }, {
        "name" : "tiny",
        "type" : 2
      }, {
        "name" : "tinyoffset",
        "type" : 2
      }, {
        "name" : "local_tinyallocs",
        "type" : 2
      }, {
        "name" : "alloc",
        "type" : 51
      }, {
        "name" : "stackcache",
        "type" : 71
      }, {
        "name" : "local_largefree",
        "type" : 2
      }, {
        "name" : "local_nlargefree",
        "type" : 2
      }, {
        "name" : "local_nsmallfree",
        "type" : 74
      }, {
        "name" : "flushGen",
        "type" : 29
      } ],
      "name" : "struct{next_sample uintptr; local_scan uintptr; tiny uintptr; tinyoffset uintptr; local_tinyallocs uintptr; alloc [134]*runtime.mspan; stackcache [4]runtime.stackfreelist; local_largefree uintptr; local_nlargefree uintptr; local_nsmallfree [67]uintptr; flushGen uint32}",
      "type" : "Struct",
      "underlying" : 50
    }, {
      "elem" : 52,
      "name" : "[134]*runtime.mspan",
      "type" : "Array",
      "underlying" : 51
    }, {
      "elem" : 53,
      "name" : "*runtime.mspan",
      "type" : "Pointer",
      "underlying" : 52
    }, {
      "local-name" : "mspan",
      "name" : "runtime.mspan",
      "package" : 0,
      "type" : "Named",
      "underlying" : 54
    }, {
      "fields" : [ {
        "name" : "next",
        "type" : 52
      }, {
        "name" : "prev",
        "type" : 52
      }, {
        "name" : "list",
        "type" : 55
      }, {
        "name" : "startAddr",
        "type" : 2
      }, {
        "name" : "npages",
        "type" : 2
      }, {
        "name" : "manualFreeList",
        "type" : 58
      }, {
        "name" : "freeindex",
        "type" : 2
      }, {
        "name" : "nelems",
        "type" : 2
      }, {
        "name" : "allocCache",
        "type" : 28
      }, {
        "name" : "allocBits",
        "type" : 59
      }, {
        "name" : "gcmarkBits",
        "type" : 59
      }, {
        "name" : "sweepgen",
        "type" : 29
      }, {
        "name" : "divMul",
        "type" : 61
      }, {
        "name" : "baseMask",
        "type" : 61
      }, {
        "name" : "allocCount",
        "type" : 61
      }, {
        "name" : "spanclass",
        "type" : 62
      }, {
        "name" : "state",
        "type" : 63
      }, {
        "name" : "needzero",
        "type" : 41
      }, {
        "name" : "divShift",
        "type" : 41
      }, {
        "name" : "divShift2",
        "type" : 41
      }, {
        "name" : "elemsize",
        "type" : 2
      }, {
        "name" : "limit",
        "type" : 2
      }, {
        "name" : "speciallock",
        "type" : 66
      }, {
        "name" : "specials",
        "type" : 67
      } ],
      "name" : "struct{next *runtime.mspan; prev *runtime.mspan; list *runtime.mSpanList; startAddr uintptr; npages uintptr; manualFreeList runtime.gclinkptr; freeindex uintptr; nelems uintptr; allocCache uint64; allocBits *runtime.gcBits; gcmarkBits *runtime.gcBits; sweepgen uint32; divMul uint16; baseMask uint16; allocCount uint16; spanclass runtime.spanClass; state runtime.mSpanStateBox; needzero uint8; divShift uint8; divShift2 uint8; elemsize uintptr; limit uintptr; speciallock runtime.mutex; specials *runtime.special}",
      "type" : "Struct",
      "underlying" : 54
    }, {
      "elem" : 56,
      "name" : "*runtime.mSpanList",
      "type" : "Pointer",
      "underlying" : 55
    }, {
      "local-name" : "mSpanList",
      "name" : "runtime.mSpanList",
      "package" : 0,
      "type" : "Named",
      "underlying" : 57
    }, {
      "fields" : [ {
        "name" : "first",
        "type" : 52
      }, {
        "name" : "last",
        "type" : 52
      } ],
      "name" : "struct{first *runtime.mspan; last *runtime.mspan}",
      "type" : "Struct",
      "underlying" : 57
    }, {
      "local-name" : "gclinkptr",
      "name" : "runtime.gclinkptr",
      "package" : 0,
      "type" : "Named",
      "underlying" : 2
    }, {
      "elem" : 60,
      "name" : "*runtime.gcBits",
      "type" : "Pointer",
      "underlying" : 59
    }, {
      "local-name" : "gcBits",
      "name" : "runtime.gcBits",
      "package" : 0,
      "type" : "Named",
      "underlying" : 41
    }, {
      "name" : "uint16",
      "type" : "Basic",
      "underlying" : 61
    }, {
      "local-name" : "spanClass",
      "name" : "runtime.spanClass",
      "package" : 0,
      "type" : "Named",
      "underlying" : 41
    }, {
      "local-name" : "mSpanStateBox",
      "name" : "runtime.mSpanStateBox",
      "package" : 0,
      "type" : "Named",
      "underlying" : 64
    }, {
      "fields" : [ {
        "name" : "s",
        "type" : 65
      } ],
      "name" : "struct{s runtime.mSpanState}",
      "type" : "Struct",
      "underlying" : 64
    }, {
      "local-name" : "mSpanState",
      "name" : "runtime.mSpanState",
      "package" : 0,
      "type" : "Named",
      "underlying" : 41
    }, {
      "local-name" : "mutex",
      "name" : "runtime.mutex",
      "package" : 0,
      "type" : "Named",
      "underlying" : 46
    }, {
      "elem" : 68,
      "name" : "*runtime.special",
      "type" : "Pointer",
      "underlying" : 67
    }, {
      "local-name" : "special",
      "name" : "runtime.special",
      "package" : 0,
      "type" : "Named",
      "underlying" : 69
    }, {
      "fields" : [ {
        "name" : "next",
        "type" : 67
      }, {
        "name" : "offset",
        "type" : 61
      }, {
        "name" : "kind",
        "type" : 70
      } ],
      "name" : "struct{next *runtime.special; offset uint16; kind byte}",
      "type" : "Struct",
      "underlying" : 69
    }, {
      "name" : "byte",
      "type" : "Basic",
      "underlying" : 70
    }, {
      "elem" : 72,
      "name" : "[4]runtime.stackfreelist",
      "type" : "Array",
      "underlying" : 71
    }, {
      "local-name" : "stackfreelist",
      "name" : "runtime.stackfreelist",
      "package" : 0,
      "type" : "Named",
      "underlying" : 73
    }, {
      "fields" : [ {
        "name" : "list",
        "type" : 58
      }, {
        "name" : "size",
        "type" : 2
      } ],
      "name" : "struct{list runtime.gclinkptr; size uintptr}",
      "type" : "Struct",
      "underlying" : 73
    }, {
      "elem" : 2,
      "name" : "[67]uintptr",
      "type" : "Array",
      "underlying" : 74
    }, {
      "name" : "func(*runtime.g, unsafe.Pointer) bool",
      "params" : 76,
      "recv" : -1,
      "results" : 77,
      "type" : "Signature",
      "underlying" : 75,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 3
      }, {
        "name" : "",
        "type" : 11
      } ],
      "name" : "(*runtime.g, unsafe.Pointer)",
      "type" : "Tuple",
      "underlying" : 76
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 13
      } ],
      "name" : "(bool)",
      "type" : "Tuple",
      "underlying" : 77
    }, {
      "name" : "int",
      "type" : "Basic",
      "underlying" : 78
    }, {
      "local-name" : "libcall",
      "name" : "runtime.libcall",
      "package" : 0,
      "type" : "Named",
      "underlying" : 80
    }, {
      "fields" : [ {
        "name" : "fn",
        "type" : 2
      }, {
        "name" : "n",
        "type" : 2
      }, {
        "name" : "args",
        "type" : 2
      }, {
        "name" : "r1",
        "type" : 2
      }, {
        "name" : "r2",
        "type" : 2
      }, {
        "name" : "err",
        "type" : 2
      } ],
      "name" : "struct{fn uintptr; n uintptr; args uintptr; r1 uintptr; r2 uintptr; err uintptr}",
      "type" : "Struct",
      "underlying" : 80
    }, {
      "local-name" : "dlogPerM",
      "name" : "runtime.dlogPerM",
      "package" : 0,
      "type" : "Named",
      "underlying" : 82
    }, {
      "fields" : [ ],
      "name" : "struct{}",
      "type" : "Struct",
      "underlying" : 82
    }, {
      "local-name" : "mOS",
      "name" : "runtime.mOS",
      "package" : 0,
      "type" : "Named",
      "underlying" : 82
    }, {
      "local-name" : "waitReason",
      "name" : "runtime.waitReason",
      "package" : 0,
      "type" : "Named",
      "underlying" : 41
    }, {
      "elem" : 70,
      "name" : "[]byte",
      "type" : "Slice",
      "underlying" : 85
    }, {
      "elem" : 87,
      "name" : "*[]runtime.ancestorInfo",
      "type" : "Pointer",
      "underlying" : 86
    }, {
      "elem" : 88,
      "name" : "[]runtime.ancestorInfo",
      "type" : "Slice",
      "underlying" : 87
    }, {
      "local-name" : "ancestorInfo",
      "name" : "runtime.ancestorInfo",
      "package" : 0,
      "type" : "Named",
      "underlying" : 89
    }, {
      "fields" : [ {
        "name" : "pcs",
        "type" : 90
      }, {
        "name" : "goid",
        "type" : 38
      }, {
        "name" : "gopc",
        "type" : 2
      } ],
      "name" : "struct{pcs []uintptr; goid int64; gopc uintptr}",
      "type" : "Struct",
      "underlying" : 89
    }, {
      "elem" : 2,
      "name" : "[]uintptr",
      "type" : "Slice",
      "underlying" : 90
    }, {
      "elem" : 92,
      "name" : "*runtime.sudog",
      "type" : "Pointer",
      "underlying" : 91
    }, {
      "local-name" : "sudog",
      "name" : "runtime.sudog",
      "package" : 0,
      "type" : "Named",
      "underlying" : 93
    }, {
      "fields" : [ {
        "name" : "g",
        "type" : 3
      }, {
        "name" : "isSelect",
        "type" : 13
      }, {
        "name" : "next",
        "type" : 91
      }, {
        "name" : "prev",
        "type" : 91
      }, {
        "name" : "elem",
        "type" : 11
      }, {
        "name" : "acquiretime",
        "type" : 38
      }, {
        "name" : "releasetime",
        "type" : 38
      }, {
        "name" : "ticket",
        "type" : 29
      }, {
        "name" : "parent",
        "type" : 91
      }, {
        "name" : "waitlink",
        "type" : 91
      }, {
        "name" : "waittail",
        "type" : 91
      }, {
        "name" : "c",
        "type" : 94
      } ],
      "name" : "struct{g *runtime.g; isSelect bool; next *runtime.sudog; prev *runtime.sudog; elem unsafe.Pointer; acquiretime int64; releasetime int64; ticket uint32; parent *runtime.sudog; waitlink *runtime.sudog; waittail *runtime.sudog; c *runtime.hchan}",
      "type" : "Struct",
      "underlying" : 93
    }, {
      "elem" : 95,
      "name" : "*runtime.hchan",
      "type" : "Pointer",
      "underlying" : 94
    }, {
      "local-name" : "hchan",
      "name" : "runtime.hchan",
      "package" : 0,
      "type" : "Named",
      "underlying" : 96
    }, {
      "fields" : [ {
        "name" : "qcount",
        "type" : 97
      }, {
        "name" : "dataqsiz",
        "type" : 97
      }, {
        "name" : "buf",
        "type" : 11
      }, {
        "name" : "elemsize",
        "type" : 61
      }, {
        "name" : "closed",
        "type" : 29
      }, {
        "name" : "elemtype",
        "type" : 98
      }, {
        "name" : "sendx",
        "type" : 97
      }, {
        "name" : "recvx",
        "type" : 97
      }, {
        "name" : "recvq",
        "type" : 107
      }, {
        "name" : "sendq",
        "type" : 107
      }, {
        "name" : "lock",
        "type" : 66
      } ],
      "name" : "struct{qcount uint; dataqsiz uint; buf unsafe.Pointer; elemsize uint16; closed uint32; elemtype *runtime._type; sendx uint; recvx uint; recvq runtime.waitq; sendq runtime.waitq; lock runtime.mutex}",
      "type" : "Struct",
      "underlying" : 96
    }, {
      "name" : "uint",
      "type" : "Basic",
      "underlying" : 97
    }, {
      "elem" : 99,
      "name" : "*runtime._type",
      "type" : "Pointer",
      "underlying" : 98
    }, {
      "local-name" : "_type",
      "name" : "runtime._type",
      "package" : 0,
      "type" : "Named",
      "underlying" : 100
    }, {
      "fields" : [ {
        "name" : "size",
        "type" : 2
      }, {
        "name" : "ptrdata",
        "type" : 2
      }, {
        "name" : "hash",
        "type" : 29
      }, {
        "name" : "tflag",
        "type" : 101
      }, {
        "name" : "align",
        "type" : 41
      }, {
        "name" : "fieldAlign",
        "type" : 41
      }, {
        "name" : "kind",
        "type" : 41
      }, {
        "name" : "equal",
        "type" : 102
      }, {
        "name" : "gcdata",
        "type" : 104
      }, {
        "name" : "str",
        "type" : 105
      }, {
        "name" : "ptrToThis",
        "type" : 106
      } ],
      "name" : "struct{size uintptr; ptrdata uintptr; hash uint32; tflag runtime.tflag; align uint8; fieldAlign uint8; kind uint8; equal func(unsafe.Pointer, unsafe.Pointer) bool; gcdata *byte; str runtime.nameOff; ptrToThis runtime.typeOff}",
      "type" : "Struct",
      "underlying" : 100
    }, {
      "local-name" : "tflag",
      "name" : "runtime.tflag",
      "package" : 0,
      "type" : "Named",
      "underlying" : 41
    }, {
      "name" : "func(unsafe.Pointer, unsafe.Pointer) bool",
      "params" : 103,
      "recv" : -1,
      "results" : 77,
      "type" : "Signature",
      "underlying" : 102,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 11
      }, {
        "name" : "",
        "type" : 11
      } ],
      "name" : "(unsafe.Pointer, unsafe.Pointer)",
      "type" : "Tuple",
      "underlying" : 103
    }, {
      "elem" : 70,
      "name" : "*byte",
      "type" : "Pointer",
      "underlying" : 104
    }, {
      "local-name" : "nameOff",
      "name" : "runtime.nameOff",
      "package" : 0,
      "type" : "Named",
      "underlying" : 17
    }, {
      "local-name" : "typeOff",
      "name" : "runtime.typeOff",
      "package" : 0,
      "type" : "Named",
      "underlying" : 17
    }, {
      "local-name" : "waitq",
      "name" : "runtime.waitq",
      "package" : 0,
      "type" : "Named",
      "underlying" : 108
    }, {
      "fields" : [ {
        "name" : "first",
        "type" : 91
      }, {
        "name" : "last",
        "type" : 91
      } ],
      "name" : "struct{first *runtime.sudog; last *runtime.sudog}",
      "type" : "Struct",
      "underlying" : 108
    }, {
      "elem" : 110,
      "name" : "*runtime.timer",
      "type" : "Pointer",
      "underlying" : 109
    }, {
      "local-name" : "timer",
      "name" : "runtime.timer",
      "package" : 0,
      "type" : "Named",
      "underlying" : 111
    }, {
      "fields" : [ {
        "name" : "pp",
        "type" : 37
      }, {
        "name" : "when",
        "type" : 38
      }, {
        "name" : "period",
        "type" : 38
      }, {
        "name" : "f",
        "type" : 112
      }, {
        "name" : "arg",
        "type" : 12
      }, {
        "name" : "seq",
        "type" : 2
      }, {
        "name" : "nextwhen",
        "type" : 38
      }, {
        "name" : "status",
        "type" : 29
      } ],
      "name" : "struct{pp runtime.puintptr; when int64; period int64; f func(interface{}, uintptr); arg interface{}; seq uintptr; nextwhen int64; status uint32}",
      "type" : "Struct",
      "underlying" : 111
    }, {
      "name" : "func(interface{}, uintptr)",
      "params" : 113,
      "recv" : -1,
      "results" : 36,
      "type" : "Signature",
      "underlying" : 112,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 12
      }, {
        "name" : "",
        "type" : 2
      } ],
      "name" : "(interface{}, uintptr)",
      "type" : "Tuple",
      "underlying" : 113
    }, {
      "elem" : 2,
      "name" : "*uintptr",
      "type" : "Pointer",
      "underlying" : 114
    }, {
      "name" : "func(*runtime.stkframe, unsafe.Pointer) bool",
      "params" : 116,
      "recv" : -1,
      "results" : 77,
      "type" : "Signature",
      "underlying" : 115,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 117
      }, {
        "name" : "",
        "type" : 11
      } ],
      "name" : "(*runtime.stkframe, unsafe.Pointer)",
      "type" : "Tuple",
      "underlying" : 116
    }, {
      "elem" : 118,
      "name" : "*runtime.stkframe",
      "type" : "Pointer",
      "underlying" : 117
    }, {
      "local-name" : "stkframe",
      "name" : "runtime.stkframe",
      "package" : 0,
      "type" : "Named",
      "underlying" : 119
    }, {
      "fields" : [ {
        "name" : "fn",
        "type" : 120
      }, {
        "name" : "pc",
        "type" : 2
      }, {
        "name" : "continpc",
        "type" : 2
      }, {
        "name" : "lr",
        "type" : 2
      }, {
        "name" : "sp",
        "type" : 2
      }, {
        "name" : "fp",
        "type" : 2
      }, {
        "name" : "varp",
        "type" : 2
      }, {
        "name" : "argp",
        "type" : 2
      }, {
        "name" : "arglen",
        "type" : 2
      }, {
        "name" : "argmap",
        "type" : 163
      } ],
      "name" : "struct{fn runtime.funcInfo; pc uintptr; continpc uintptr; lr uintptr; sp uintptr; fp uintptr; varp uintptr; argp uintptr; arglen uintptr; argmap *runtime.bitvector}",
      "type" : "Struct",
      "underlying" : 119
    }, {
      "local-name" : "funcInfo",
      "name" : "runtime.funcInfo",
      "package" : 0,
      "type" : "Named",
      "underlying" : 121
    }, {
      "fields" : [ {
        "name" : "_func",
        "type" : 122
      }, {
        "name" : "datap",
        "type" : 127
      } ],
      "name" : "struct{*runtime._func; datap *runtime.moduledata}",
      "type" : "Struct",
      "underlying" : 121
    }, {
      "elem" : 123,
      "name" : "*runtime._func",
      "type" : "Pointer",
      "underlying" : 122
    }, {
      "local-name" : "_func",
      "name" : "runtime._func",
      "package" : 0,
      "type" : "Named",
      "underlying" : 124
    }, {
      "fields" : [ {
        "name" : "entry",
        "type" : 2
      }, {
        "name" : "nameoff",
        "type" : 17
      }, {
        "name" : "args",
        "type" : 17
      }, {
        "name" : "deferreturn",
        "type" : 29
      }, {
        "name" : "pcsp",
        "type" : 17
      }, {
        "name" : "pcfile",
        "type" : 17
      }, {
        "name" : "pcln",
        "type" : 17
      }, {
        "name" : "npcdata",
        "type" : 17
      }, {
        "name" : "funcID",
        "type" : 125
      }, {
        "name" : "_",
        "type" : 126
      }, {
        "name" : "nfuncdata",
        "type" : 41
      } ],
      "name" : "struct{entry uintptr; nameoff int32; args int32; deferreturn uint32; pcsp int32; pcfile int32; pcln int32; npcdata int32; funcID runtime.funcID; _ [2]int8; nfuncdata uint8}",
      "type" : "Struct",
      "underlying" : 124
    }, {
      "local-name" : "funcID",
      "name" : "runtime.funcID",
      "package" : 0,
      "type" : "Named",
      "underlying" : 41
    }, {
      "elem" : 40,
      "name" : "[2]int8",
      "type" : "Array",
      "underlying" : 126
    }, {
      "elem" : 128,
      "name" : "*runtime.moduledata",
      "type" : "Pointer",
      "underlying" : 127
    }, {
      "local-name" : "moduledata",
      "name" : "runtime.moduledata",
      "package" : 0,
      "type" : "Named",
      "underlying" : 129
    }, {
      "fields" : [ {
        "name" : "pclntable",
        "type" : 85
      }, {
        "name" : "ftab",
        "type" : 130
      }, {
        "name" : "filetab",
        "type" : 133
      }, {
        "name" : "findfunctab",
        "type" : 2
      }, {
        "name" : "minpc",
        "type" : 2
      }, {
        "name" : "maxpc",
        "type" : 2
      }, {
        "name" : "text",
        "type" : 2
      }, {
        "name" : "etext",
        "type" : 2
      }, {
        "name" : "noptrdata",
        "type" : 2
      }, {
        "name" : "enoptrdata",
        "type" : 2
      }, {
        "name" : "data",
        "type" : 2
      }, {
        "name" : "edata",
        "type" : 2
      }, {
        "name" : "bss",
        "type" : 2
      }, {
        "name" : "ebss",
        "type" : 2
      }, {
        "name" : "noptrbss",
        "type" : 2
      }, {
        "name" : "enoptrbss",
        "type" : 2
      }, {
        "name" : "end",
        "type" : 2
      }, {
        "name" : "gcdata",
        "type" : 2
      }, {
        "name" : "gcbss",
        "type" : 2
      }, {
        "name" : "types",
        "type" : 2
      }, {
        "name" : "etypes",
        "type" : 2
      }, {
        "name" : "textsectmap",
        "type" : 134
      }, {
        "name" : "typelinks",
        "type" : 137
      }, {
        "name" : "itablinks",
        "type" : 138
      }, {
        "name" : "ptab",
        "type" : 152
      }, {
        "name" : "pluginpath",
        "type" : 39
      }, {
        "name" : "pkghashes",
        "type" : 155
      }, {
        "name" : "modulename",
        "type" : 39
      }, {
        "name" : "modulehashes",
        "type" : 155
      }, {
        "name" : "hasmain",
        "type" : 41
      }, {
        "name" : "gcdatamask",
        "type" : 159
      }, {
        "name" : "gcbssmask",
        "type" : 159
      }, {
        "name" : "typemap",
        "type" : 162
      }, {
        "name" : "bad",
        "type" : 13
      }, {
        "name" : "next",
        "type" : 127
      } ],
      "name" : "struct{pclntable []byte; ftab []runtime.functab; filetab []uint32; findfunctab uintptr; minpc uintptr; maxpc uintptr; text uintptr; etext uintptr; noptrdata uintptr; enoptrdata uintptr; data uintptr; edata uintptr; bss uintptr; ebss uintptr; noptrbss uintptr; enoptrbss uintptr; end uintptr; gcdata uintptr; gcbss uintptr; types uintptr; etypes uintptr; textsectmap []runtime.textsect; typelinks []int32; itablinks []*runtime.itab; ptab []runtime.ptabEntry; pluginpath string; pkghashes []runtime.modulehash; modulename string; modulehashes []runtime.modulehash; hasmain uint8; gcdatamask runtime.bitvector; gcbssmask runtime.bitvector; typemap map[runtime.typeOff]*runtime._type; bad bool; next *runtime.moduledata}",
      "type" : "Struct",
      "underlying" : 129
    }, {
      "elem" : 131,
      "name" : "[]runtime.functab",
      "type" : "Slice",
      "underlying" : 130
    }, {
      "local-name" : "functab",
      "name" : "runtime.functab",
      "package" : 0,
      "type" : "Named",
      "underlying" : 132
    }, {
      "fields" : [ {
        "name" : "entry",
        "type" : 2
      }, {
        "name" : "funcoff",
        "type" : 2
      } ],
      "name" : "struct{entry uintptr; funcoff uintptr}",
      "type" : "Struct",
      "underlying" : 132
    }, {
      "elem" : 29,
      "name" : "[]uint32",
      "type" : "Slice",
      "underlying" : 133
    }, {
      "elem" : 135,
      "name" : "[]runtime.textsect",
      "type" : "Slice",
      "underlying" : 134
    }, {
      "local-name" : "textsect",
      "name" : "runtime.textsect",
      "package" : 0,
      "type" : "Named",
      "underlying" : 136
    }, {
      "fields" : [ {
        "name" : "vaddr",
        "type" : 2
      }, {
        "name" : "length",
        "type" : 2
      }, {
        "name" : "baseaddr",
        "type" : 2
      } ],
      "name" : "struct{vaddr uintptr; length uintptr; baseaddr uintptr}",
      "type" : "Struct",
      "underlying" : 136
    }, {
      "elem" : 17,
      "name" : "[]int32",
      "type" : "Slice",
      "underlying" : 137
    }, {
      "elem" : 139,
      "name" : "[]*runtime.itab",
      "type" : "Slice",
      "underlying" : 138
    }, {
      "elem" : 140,
      "name" : "*runtime.itab",
      "type" : "Pointer",
      "underlying" : 139
    }, {
      "local-name" : "itab",
      "name" : "runtime.itab",
      "package" : 0,
      "type" : "Named",
      "underlying" : 141
    }, {
      "fields" : [ {
        "name" : "inter",
        "type" : 142
      }, {
        "name" : "_type",
        "type" : 98
      }, {
        "name" : "hash",
        "type" : 29
      }, {
        "name" : "_",
        "type" : 150
      }, {
        "name" : "fun",
        "type" : 151
      } ],
      "name" : "struct{inter *runtime.interfacetype; _type *runtime._type; hash uint32; _ [4]byte; fun [1]uintptr}",
      "type" : "Struct",
      "underlying" : 141
    }, {
      "elem" : 143,
      "name" : "*runtime.interfacetype",
      "type" : "Pointer",
      "underlying" : 142
    }, {
      "local-name" : "interfacetype",
      "name" : "runtime.interfacetype",
      "package" : 0,
      "type" : "Named",
      "underlying" : 144
    }, {
      "fields" : [ {
        "name" : "typ",
        "type" : 99
      }, {
        "name" : "pkgpath",
        "type" : 145
      }, {
        "name" : "mhdr",
        "type" : 147
      } ],
      "name" : "struct{typ runtime._type; pkgpath runtime.name; mhdr []runtime.imethod}",
      "type" : "Struct",
      "underlying" : 144
    }, {
      "local-name" : "name",
      "name" : "runtime.name",
      "package" : 0,
      "type" : "Named",
      "underlying" : 146
    }, {
      "fields" : [ {
        "name" : "bytes",
        "type" : 104
      } ],
      "name" : "struct{bytes *byte}",
      "type" : "Struct",
      "underlying" : 146
    }, {
      "elem" : 148,
      "name" : "[]runtime.imethod",
      "type" : "Slice",
      "underlying" : 147
    }, {
      "local-name" : "imethod",
      "name" : "runtime.imethod",
      "package" : 0,
      "type" : "Named",
      "underlying" : 149
    }, {
      "fields" : [ {
        "name" : "name",
        "type" : 105
      }, {
        "name" : "ityp",
        "type" : 106
      } ],
      "name" : "struct{name runtime.nameOff; ityp runtime.typeOff}",
      "type" : "Struct",
      "underlying" : 149
    }, {
      "elem" : 70,
      "name" : "[4]byte",
      "type" : "Array",
      "underlying" : 150
    }, {
      "elem" : 2,
      "name" : "[1]uintptr",
      "type" : "Array",
      "underlying" : 151
    }, {
      "elem" : 153,
      "name" : "[]runtime.ptabEntry",
      "type" : "Slice",
      "underlying" : 152
    }, {
      "local-name" : "ptabEntry",
      "name" : "runtime.ptabEntry",
      "package" : 0,
      "type" : "Named",
      "underlying" : 154
    }, {
      "fields" : [ {
        "name" : "name",
        "type" : 105
      }, {
        "name" : "typ",
        "type" : 106
      } ],
      "name" : "struct{name runtime.nameOff; typ runtime.typeOff}",
      "type" : "Struct",
      "underlying" : 154
    }, {
      "elem" : 156,
      "name" : "[]runtime.modulehash",
      "type" : "Slice",
      "underlying" : 155
    }, {
      "local-name" : "modulehash",
      "name" : "runtime.modulehash",
      "package" : 0,
      "type" : "Named",
      "underlying" : 157
    }, {
      "fields" : [ {
        "name" : "modulename",
        "type" : 39
      }, {
        "name" : "linktimehash",
        "type" : 39
      }, {
        "name" : "runtimehash",
        "type" : 158
      } ],
      "name" : "struct{modulename string; linktimehash string; runtimehash *string}",
      "type" : "Struct",
      "underlying" : 157
    }, {
      "elem" : 39,
      "name" : "*string",
      "type" : "Pointer",
      "underlying" : 158
    }, {
      "local-name" : "bitvector",
      "name" : "runtime.bitvector",
      "package" : 0,
      "type" : "Named",
      "underlying" : 160
    }, {
      "fields" : [ {
        "name" : "n",
        "type" : 17
      }, {
        "name" : "bytedata",
        "type" : 161
      } ],
      "name" : "struct{n int32; bytedata *uint8}",
      "type" : "Struct",
      "underlying" : 160
    }, {
      "elem" : 41,
      "name" : "*uint8",
      "type" : "Pointer",
      "underlying" : 161
    }, {
      "elem" : 98,
      "key" : 106,
      "name" : "map[runtime.typeOff]*runtime._type",
      "type" : "Map",
      "underlying" : 162
    }, {
      "elem" : 159,
      "name" : "*runtime.bitvector",
      "type" : "Pointer",
      "underlying" : 163
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 78
      } ],
      "name" : "(int)",
      "type" : "Tuple",
      "underlying" : 164
    }, {
      "name" : "untyped bool",
      "type" : "Basic",
      "underlying" : 165
    }, {
      "name" : "untyped nil",
      "type" : "Basic",
      "underlying" : 166
    }, {
      "name" : "func(s string)",
      "params" : 168,
      "recv" : -1,
      "results" : 36,
      "type" : "Signature",
      "underlying" : 167,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "s",
        "type" : 39
      } ],
      "name" : "(s string)",
      "type" : "Tuple",
      "underlying" : 168
    }, {
      "name" : "func() *runtime.g",
      "params" : 36,
      "recv" : -1,
      "results" : 170,
      "type" : "Signature",
      "underlying" : 169,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 3
      } ],
      "name" : "(*runtime.g)",
      "type" : "Tuple",
      "underlying" : 170
    }, {
      "fields" : [ {
        "name" : "level",
        "type" : 17
      }, {
        "name" : "all",
        "type" : 13
      }, {
        "name" : "crash",
        "type" : 13
      } ],
      "name" : "(level int32, all bool, crash bool)",
      "type" : "Tuple",
      "underlying" : 171
    }, {
      "name" : "func() (level int32, all bool, crash bool)",
      "params" : 36,
      "recv" : -1,
      "results" : 171,
      "type" : "Signature",
      "underlying" : 172,
      "variadic" : false
    }, {
      "elem" : 27,
      "name" : "*runtime/internal/sys.Uintreg",
      "type" : "Pointer",
      "underlying" : 173
    }, {
      "name" : "func(pc uintptr) runtime.funcInfo",
      "params" : 175,
      "recv" : -1,
      "results" : 176,
      "type" : "Signature",
      "underlying" : 174,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "pc",
        "type" : 2
      } ],
      "name" : "(pc uintptr)",
      "type" : "Tuple",
      "underlying" : 175
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 120
      } ],
      "name" : "(runtime.funcInfo)",
      "type" : "Tuple",
      "underlying" : 176
    }, {
      "name" : "func() bool",
      "params" : 36,
      "recv" : -1,
      "results" : 77,
      "type" : "Signature",
      "underlying" : 177,
      "variadic" : false
    }, {
      "name" : "func(string, runtime.hex, string)",
      "params" : 179,
      "recv" : -1,
      "results" : 36,
      "type" : "Signature",
      "underlying" : 178,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 39
      }, {
        "name" : "",
        "type" : 180
      }, {
        "name" : "",
        "type" : 39
      } ],
      "name" : "(string, runtime.hex, string)",
      "type" : "Tuple",
      "underlying" : 179
    }, {
      "local-name" : "hex",
      "name" : "runtime.hex",
      "package" : 0,
      "type" : "Named",
      "underlying" : 28
    }, {
      "name" : "func(stk runtime.stack, frame *runtime.stkframe, bad uintptr)",
      "params" : 182,
      "recv" : -1,
      "results" : 36,
      "type" : "Signature",
      "underlying" : 181,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "stk",
        "type" : 6
      }, {
        "name" : "frame",
        "type" : 117
      }, {
        "name" : "bad",
        "type" : 2
      } ],
      "name" : "(stk runtime.stack, frame *runtime.stkframe, bad uintptr)",
      "type" : "Tuple",
      "underlying" : 182
    }, {
      "local-name" : "pcvalueCache",
      "name" : "runtime.pcvalueCache",
      "package" : 0,
      "type" : "Named",
      "underlying" : 184
    }, {
      "fields" : [ {
        "name" : "entries",
        "type" : 185
      } ],
      "name" : "struct{entries [2][8]runtime.pcvalueCacheEnt}",
      "type" : "Struct",
      "underlying" : 184
    }, {
      "elem" : 186,
      "name" : "[2][8]runtime.pcvalueCacheEnt",
      "type" : "Array",
      "underlying" : 185
    }, {
      "elem" : 187,
      "name" : "[8]runtime.pcvalueCacheEnt",
      "type" : "Array",
      "underlying" : 186
    }, {
      "local-name" : "pcvalueCacheEnt",
      "name" : "runtime.pcvalueCacheEnt",
      "package" : 0,
      "type" : "Named",
      "underlying" : 188
    }, {
      "fields" : [ {
        "name" : "targetpc",
        "type" : 2
      }, {
        "name" : "off",
        "type" : 17
      }, {
        "name" : "val",
        "type" : 17
      } ],
      "name" : "struct{targetpc uintptr; off int32; val int32}",
      "type" : "Struct",
      "underlying" : 188
    }, {
      "name" : "func(f runtime.funcInfo, targetpc uintptr, cache *runtime.pcvalueCache) int32",
      "params" : 190,
      "recv" : -1,
      "results" : 192,
      "type" : "Signature",
      "underlying" : 189,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "f",
        "type" : 120
      }, {
        "name" : "targetpc",
        "type" : 2
      }, {
        "name" : "cache",
        "type" : 191
      } ],
      "name" : "(f runtime.funcInfo, targetpc uintptr, cache *runtime.pcvalueCache)",
      "type" : "Tuple",
      "underlying" : 190
    }, {
      "elem" : 183,
      "name" : "*runtime.pcvalueCache",
      "type" : "Pointer",
      "underlying" : 191
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 17
      } ],
      "name" : "(int32)",
      "type" : "Tuple",
      "underlying" : 192
    }, {
      "name" : "func(f runtime.funcInfo, g0 bool) bool",
      "params" : 194,
      "recv" : -1,
      "results" : 77,
      "type" : "Signature",
      "underlying" : 193,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "f",
        "type" : 120
      }, {
        "name" : "g0",
        "type" : 13
      } ],
      "name" : "(f runtime.funcInfo, g0 bool)",
      "type" : "Tuple",
      "underlying" : 194
    }, {
      "name" : "func(string, string, string, runtime.hex, string)",
      "params" : 196,
      "recv" : -1,
      "results" : 36,
      "type" : "Signature",
      "underlying" : 195,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 39
      }, {
        "name" : "",
        "type" : 39
      }, {
        "name" : "",
        "type" : 39
      }, {
        "name" : "",
        "type" : 180
      }, {
        "name" : "",
        "type" : 39
      } ],
      "name" : "(string, string, string, runtime.hex, string)",
      "type" : "Tuple",
      "underlying" : 196
    }, {
      "name" : "func(f runtime.funcInfo) string",
      "params" : 198,
      "recv" : -1,
      "results" : 199,
      "type" : "Signature",
      "underlying" : 197,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "f",
        "type" : 120
      } ],
      "name" : "(f runtime.funcInfo)",
      "type" : "Tuple",
      "underlying" : 198
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 39
      } ],
      "name" : "(string)",
      "type" : "Tuple",
      "underlying" : 199
    }, {
      "fields" : [ {
        "name" : "arglen",
        "type" : 2
      }, {
        "name" : "argmap",
        "type" : 163
      }, {
        "name" : "ok",
        "type" : 13
      } ],
      "name" : "(arglen uintptr, argmap *runtime.bitvector, ok bool)",
      "type" : "Tuple",
      "underlying" : 200
    }, {
      "name" : "func(f runtime.funcInfo, needArgMap bool) (arglen uintptr, argmap *runtime.bitvector, ok bool)",
      "params" : 202,
      "recv" : -1,
      "results" : 200,
      "type" : "Signature",
      "underlying" : 201,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "f",
        "type" : 120
      }, {
        "name" : "needArgMap",
        "type" : 13
      } ],
      "name" : "(f runtime.funcInfo, needArgMap bool)",
      "type" : "Tuple",
      "underlying" : 202
    }, {
      "fields" : [ {
        "name" : "arglen",
        "type" : 2
      }, {
        "name" : "argmap",
        "type" : 163
      } ],
      "name" : "(arglen uintptr, argmap *runtime.bitvector)",
      "type" : "Tuple",
      "underlying" : 203
    }, {
      "name" : "func(frame *runtime.stkframe, f runtime.funcInfo, needArgMap bool, ctxt *runtime.funcval) (arglen uintptr, argmap *runtime.bitvector)",
      "params" : 205,
      "recv" : -1,
      "results" : 203,
      "type" : "Signature",
      "underlying" : 204,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "frame",
        "type" : 117
      }, {
        "name" : "f",
        "type" : 120
      }, {
        "name" : "needArgMap",
        "type" : 13
      }, {
        "name" : "ctxt",
        "type" : 18
      } ],
      "name" : "(frame *runtime.stkframe, f runtime.funcInfo, needArgMap bool, ctxt *runtime.funcval)",
      "type" : "Tuple",
      "underlying" : 205
    }, {
      "name" : "func(p unsafe.Pointer) unsafe.Pointer",
      "params" : 207,
      "recv" : -1,
      "results" : 208,
      "type" : "Signature",
      "underlying" : 206,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "p",
        "type" : 11
      } ],
      "name" : "(p unsafe.Pointer)",
      "type" : "Tuple",
      "underlying" : 207
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 11
      } ],
      "name" : "(unsafe.Pointer)",
      "type" : "Tuple",
      "underlying" : 208
    }, {
      "name" : "func(f runtime.funcInfo, i uint8) unsafe.Pointer",
      "params" : 210,
      "recv" : -1,
      "results" : 208,
      "type" : "Signature",
      "underlying" : 209,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "f",
        "type" : 120
      }, {
        "name" : "i",
        "type" : 41
      } ],
      "name" : "(f runtime.funcInfo, i uint8)",
      "type" : "Tuple",
      "underlying" : 210
    }, {
      "elem" : 212,
      "name" : "*[1048576]runtime.inlinedCall",
      "type" : "Pointer",
      "underlying" : 211
    }, {
      "elem" : 213,
      "name" : "[1048576]runtime.inlinedCall",
      "type" : "Array",
      "underlying" : 212
    }, {
      "local-name" : "inlinedCall",
      "name" : "runtime.inlinedCall",
      "package" : 0,
      "type" : "Named",
      "underlying" : 214
    }, {
      "fields" : [ {
        "name" : "parent",
        "type" : 215
      }, {
        "name" : "funcID",
        "type" : 125
      }, {
        "name" : "_",
        "type" : 70
      }, {
        "name" : "file",
        "type" : 17
      }, {
        "name" : "line",
        "type" : 17
      }, {
        "name" : "func_",
        "type" : 17
      }, {
        "name" : "parentPc",
        "type" : 17
      } ],
      "name" : "struct{parent int16; funcID runtime.funcID; _ byte; file int32; line int32; func_ int32; parentPc int32}",
      "type" : "Struct",
      "underlying" : 214
    }, {
      "name" : "int16",
      "type" : "Basic",
      "underlying" : 215
    }, {
      "name" : "untyped int",
      "type" : "Basic",
      "underlying" : 216
    }, {
      "name" : "func(f runtime.funcInfo, table int32, targetpc uintptr, cache *runtime.pcvalueCache) int32",
      "params" : 218,
      "recv" : -1,
      "results" : 192,
      "type" : "Signature",
      "underlying" : 217,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "f",
        "type" : 120
      }, {
        "name" : "table",
        "type" : 17
      }, {
        "name" : "targetpc",
        "type" : 2
      }, {
        "name" : "cache",
        "type" : 191
      } ],
      "name" : "(f runtime.funcInfo, table int32, targetpc uintptr, cache *runtime.pcvalueCache)",
      "type" : "Tuple",
      "underlying" : 218
    }, {
      "name" : "func(id runtime.funcID) bool",
      "params" : 220,
      "recv" : -1,
      "results" : 77,
      "type" : "Signature",
      "underlying" : 219,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "id",
        "type" : 125
      } ],
      "name" : "(id runtime.funcID)",
      "type" : "Tuple",
      "underlying" : 220
    }, {
      "elem" : 222,
      "name" : "*[1048576]uintptr",
      "type" : "Pointer",
      "underlying" : 221
    }, {
      "elem" : 2,
      "name" : "[1048576]uintptr",
      "type" : "Array",
      "underlying" : 222
    }, {
      "name" : "func(f runtime.funcInfo, gp *runtime.g, firstFrame bool, funcID runtime.funcID, childID runtime.funcID) bool",
      "params" : 224,
      "recv" : -1,
      "results" : 77,
      "type" : "Signature",
      "underlying" : 223,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "f",
        "type" : 120
      }, {
        "name" : "gp",
        "type" : 3
      }, {
        "name" : "firstFrame",
        "type" : 13
      }, {
        "name" : "funcID",
        "type" : 125
      }, {
        "name" : "childID",
        "type" : 125
      } ],
      "name" : "(f runtime.funcInfo, gp *runtime.g, firstFrame bool, funcID runtime.funcID, childID runtime.funcID)",
      "type" : "Tuple",
      "underlying" : 224
    }, {
      "name" : "func(f runtime.funcInfo, nameoff int32) string",
      "params" : 226,
      "recv" : -1,
      "results" : 199,
      "type" : "Signature",
      "underlying" : 225,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "f",
        "type" : 120
      }, {
        "name" : "nameoff",
        "type" : 17
      } ],
      "name" : "(f runtime.funcInfo, nameoff int32)",
      "type" : "Tuple",
      "underlying" : 226
    }, {
      "fields" : [ {
        "name" : "file",
        "type" : 39
      }, {
        "name" : "line",
        "type" : 17
      } ],
      "name" : "(file string, line int32)",
      "type" : "Tuple",
      "underlying" : 227
    }, {
      "name" : "func(f runtime.funcInfo, targetpc uintptr) (file string, line int32)",
      "params" : 229,
      "recv" : -1,
      "results" : 227,
      "type" : "Signature",
      "underlying" : 228,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "f",
        "type" : 120
      }, {
        "name" : "targetpc",
        "type" : 2
      } ],
      "name" : "(f runtime.funcInfo, targetpc uintptr)",
      "type" : "Tuple",
      "underlying" : 229
    }, {
      "name" : "func(string, string)",
      "params" : 231,
      "recv" : -1,
      "results" : 36,
      "type" : "Signature",
      "underlying" : 230,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 39
      }, {
        "name" : "",
        "type" : 39
      } ],
      "name" : "(string, string)",
      "type" : "Tuple",
      "underlying" : 231
    }, {
      "name" : "func(string, string, string, int32, string)",
      "params" : 233,
      "recv" : -1,
      "results" : 36,
      "type" : "Signature",
      "underlying" : 232,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 39
      }, {
        "name" : "",
        "type" : 39
      }, {
        "name" : "",
        "type" : 39
      }, {
        "name" : "",
        "type" : 17
      }, {
        "name" : "",
        "type" : 39
      } ],
      "name" : "(string, string, string, int32, string)",
      "type" : "Tuple",
      "underlying" : 233
    }, {
      "elem" : 235,
      "name" : "*[100]uintptr",
      "type" : "Pointer",
      "underlying" : 234
    }, {
      "elem" : 2,
      "name" : "[100]uintptr",
      "type" : "Array",
      "underlying" : 235
    }, {
      "name" : "func(string)",
      "params" : 199,
      "recv" : -1,
      "results" : 36,
      "type" : "Signature",
      "underlying" : 236,
      "variadic" : false
    }, {
      "name" : "func(runtime.hex)",
      "params" : 238,
      "recv" : -1,
      "results" : 36,
      "type" : "Signature",
      "underlying" : 237,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 180
      } ],
      "name" : "(runtime.hex)",
      "type" : "Tuple",
      "underlying" : 238
    }, {
      "name" : "func(string, string, string, int32)",
      "params" : 240,
      "recv" : -1,
      "results" : 36,
      "type" : "Signature",
      "underlying" : 239,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 39
      }, {
        "name" : "",
        "type" : 39
      }, {
        "name" : "",
        "type" : 39
      }, {
        "name" : "",
        "type" : 17
      } ],
      "name" : "(string, string, string, int32)",
      "type" : "Tuple",
      "underlying" : 240
    }, {
      "name" : "func(string, runtime.hex)",
      "params" : 242,
      "recv" : -1,
      "results" : 36,
      "type" : "Signature",
      "underlying" : 241,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 39
      }, {
        "name" : "",
        "type" : 180
      } ],
      "name" : "(string, runtime.hex)",
      "type" : "Tuple",
      "underlying" : 242
    }, {
      "name" : "func(string, runtime.hex, string, runtime.hex, string, runtime.hex)",
      "params" : 244,
      "recv" : -1,
      "results" : 36,
      "type" : "Signature",
      "underlying" : 243,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 39
      }, {
        "name" : "",
        "type" : 180
      }, {
        "name" : "",
        "type" : 39
      }, {
        "name" : "",
        "type" : 180
      }, {
        "name" : "",
        "type" : 39
      }, {
        "name" : "",
        "type" : 180
      } ],
      "name" : "(string, runtime.hex, string, runtime.hex, string, runtime.hex)",
      "type" : "Tuple",
      "underlying" : 244
    }, {
      "name" : "func([]uintptr) int",
      "params" : 246,
      "recv" : -1,
      "results" : 164,
      "type" : "Signature",
      "underlying" : 245,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 90
      } ],
      "name" : "([]uintptr)",
      "type" : "Tuple",
      "underlying" : 246
    }, {
      "name" : "func(pcbuf *uintptr, printing bool, ctxt uintptr, n int, max int) int",
      "params" : 248,
      "recv" : -1,
      "results" : 164,
      "type" : "Signature",
      "underlying" : 247,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "pcbuf",
        "type" : 114
      }, {
        "name" : "printing",
        "type" : 13
      }, {
        "name" : "ctxt",
        "type" : 2
      }, {
        "name" : "n",
        "type" : 78
      }, {
        "name" : "max",
        "type" : 78
      } ],
      "name" : "(pcbuf *uintptr, printing bool, ctxt uintptr, n int, max int)",
      "type" : "Tuple",
      "underlying" : 248
    }, {
      "name" : "func(string, int64, string, runtime.hex, string, runtime.hex, string)",
      "params" : 250,
      "recv" : -1,
      "results" : 36,
      "type" : "Signature",
      "underlying" : 249,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 39
      }, {
        "name" : "",
        "type" : 38
      }, {
        "name" : "",
        "type" : 39
      }, {
        "name" : "",
        "type" : 180
      }, {
        "name" : "",
        "type" : 39
      }, {
        "name" : "",
        "type" : 180
      }, {
        "name" : "",
        "type" : 39
      } ],
      "name" : "(string, int64, string, runtime.hex, string, runtime.hex, string)",
      "type" : "Tuple",
      "underlying" : 250
    }, {
      "name" : "func(string, runtime.hex, string, runtime.hex, string, int, string, int, string)",
      "params" : 252,
      "recv" : -1,
      "results" : 36,
      "type" : "Signature",
      "underlying" : 251,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 39
      }, {
        "name" : "",
        "type" : 180
      }, {
        "name" : "",
        "type" : 39
      }, {
        "name" : "",
        "type" : 180
      }, {
        "name" : "",
        "type" : 39
      }, {
        "name" : "",
        "type" : 78
      }, {
        "name" : "",
        "type" : 39
      }, {
        "name" : "",
        "type" : 78
      }, {
        "name" : "",
        "type" : 39
      } ],
      "name" : "(string, runtime.hex, string, runtime.hex, string, int, string, int, string)",
      "type" : "Tuple",
      "underlying" : 252
    } ],
    "variables" : [ {
      "name" : "pc0",
      "package" : 0,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "sp0",
      "package" : 0,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "lr0",
      "package" : 0,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "gp",
      "package" : 0,
      "type" : 3,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "skip",
      "package" : 0,
      "type" : 78,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "pcbuf",
      "package" : 0,
      "type" : 114,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "max",
      "package" : 0,
      "type" : 78,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "callback",
      "package" : 0,
      "type" : 115,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "v",
      "package" : 0,
      "type" : 11,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "flags",
      "package" : 0,
      "type" : 97,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "[res0]",
      "package" : 0,
      "type" : 78,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "framepointer_enabled",
      "package" : 0,
      "type" : 13,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "ourg",
      "package" : 0,
      "type" : 3,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "m",
      "package" : 0,
      "type" : 21,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "curg",
      "package" : 0,
      "type" : 3,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "level",
      "package" : 0,
      "type" : 17,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "_",
      "package" : 0,
      "type" : 13,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "_",
      "package" : 0,
      "type" : 13,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "ctxt",
      "package" : 0,
      "type" : 18,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "syscallsp",
      "package" : 0,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "syscallpc",
      "package" : 0,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "sched",
      "package" : 0,
      "type" : 24,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "pc",
      "package" : 0,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "sp",
      "package" : 0,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "lr",
      "package" : 0,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "ctxt",
      "package" : 0,
      "type" : 11,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "nprint",
      "package" : 0,
      "type" : 78,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "frame",
      "package" : 0,
      "type" : 118,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "pc",
      "package" : 0,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "sp",
      "package" : 0,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "lr",
      "package" : 0,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "waspanic",
      "package" : 0,
      "type" : 13,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "cgoCtxt",
      "package" : 0,
      "type" : 90,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "cgoCtxt",
      "package" : 0,
      "type" : 90,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "printing",
      "package" : 0,
      "type" : 13,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "f",
      "package" : 0,
      "type" : 120,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "stack",
      "package" : 0,
      "type" : 6,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "fn",
      "package" : 0,
      "type" : 120,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "cache",
      "package" : 0,
      "type" : 183,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "lastFuncID",
      "package" : 0,
      "type" : 125,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "n",
      "package" : 0,
      "type" : 78,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "pcsp",
      "package" : 0,
      "type" : 17,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "fp",
      "package" : 0,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "g0",
      "package" : 0,
      "type" : 3,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "funcID",
      "package" : 0,
      "type" : 125,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "flr",
      "package" : 0,
      "type" : 120,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "lrPtr",
      "package" : 0,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "doPrint",
      "package" : 0,
      "type" : 13,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "incgo",
      "package" : 0,
      "type" : 13,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "varp",
      "package" : 0,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "argp",
      "package" : 0,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "arglen",
      "package" : 0,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "argmap",
      "package" : 0,
      "type" : 163,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "ok",
      "package" : 0,
      "type" : 13,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "continpc",
      "package" : 0,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "deferreturn",
      "package" : 0,
      "type" : 29,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "entry",
      "package" : 0,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "pc",
      "package" : 0,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "tracepc",
      "package" : 0,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "inldata",
      "package" : 0,
      "type" : 11,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "ix",
      "package" : 0,
      "type" : 17,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "inltree",
      "package" : 0,
      "type" : 211,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "funcID",
      "package" : 0,
      "type" : 125,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "parentPc",
      "package" : 0,
      "type" : 17,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "tracepc",
      "package" : 0,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "inldata",
      "package" : 0,
      "type" : 11,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "ix",
      "package" : 0,
      "type" : 17,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "inltree",
      "package" : 0,
      "type" : 211,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "func_",
      "package" : 0,
      "type" : 17,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "name",
      "package" : 0,
      "type" : 39,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "file",
      "package" : 0,
      "type" : 39,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "line",
      "package" : 0,
      "type" : 17,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "name",
      "package" : 0,
      "type" : 39,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "i",
      "package" : 0,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "argp",
      "package" : 0,
      "type" : 234,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "file",
      "package" : 0,
      "type" : 39,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "line",
      "package" : 0,
      "type" : 17,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "throwing",
      "package" : 0,
      "type" : 17,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "ctxt",
      "package" : 0,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "injectedCall",
      "package" : 0,
      "type" : 13,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "x",
      "package" : 0,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "stktopsp",
      "package" : 0,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "goid",
      "package" : 0,
      "type" : 38,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "lo",
      "package" : 0,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "hi",
      "package" : 0,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : true
    } ]
  },
  "go-version" : "1.14.3"
}