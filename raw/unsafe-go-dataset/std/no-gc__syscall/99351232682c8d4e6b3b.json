{
  "usage" : {
    "file" : "exec_linux.go",
    "label1" : "syscall",
    "label2" : "no-gc",
    "line" : "525",
    "module" : "std",
    "pkg" : "syscall",
    "project" : "kubernetes/kubernetes",
    "snippet" : "RawSyscall(SYS_WRITE, uintptr(pipe), uintptr(unsafe.Pointer(&err1)), unsafe.Sizeof(err1))",
    "version" : "std"
  },
  "cfg" : {
    "blocks" : [ {
      "update-vars" : [ ],
      "successors" : [ 2 ],
      "in-vars" : [ 1, 0, 6, 3, 10, 7, 5, 2, 4, 12, 13, 14 ],
      "exit" : false,
      "out-vars" : [ 4, 14, 13, 5, 2, 1, 0, 6, 3, 10, 7, 12 ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[entry]",
      "entry" : true,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ ],
      "in-vars" : [ ],
      "exit" : true,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[exit]",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 3 ],
      "in-vars" : [ 2, 0, 4, 12, 14, 6, 5, 10, 7, 1, 13, 3 ],
      "exit" : false,
      "out-vars" : [ 4, 12, 14, 6, 0, 10, 7, 5, 2, 1, 13, 3 ],
      "decl-vars" : [ ],
      "line-start" : 135,
      "ast" : {
        "kind" : "statement",
        "target" : {
          "kind" : "decl",
          "specs" : [ {
            "comments" : [ ],
            "declared-type" : null,
            "kind" : "spec",
            "names" : [ {
              "ident-kind" : "NoKind",
              "kind" : "ident",
              "value" : "PR_CAP_AMBIENT"
            } ],
            "type" : "const",
            "values" : [ {
              "go-type" : 31,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "47"
              }
            } ]
          }, {
            "comments" : [ ],
            "declared-type" : null,
            "kind" : "spec",
            "names" : [ {
              "ident-kind" : "NoKind",
              "kind" : "ident",
              "value" : "PR_CAP_AMBIENT_RAISE"
            } ],
            "type" : "const",
            "values" : [ {
              "go-type" : 31,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "2"
              }
            } ]
          } ],
          "type" : "const"
        },
        "type" : "declaration"
      },
      "assign-vars" : [ ],
      "line-end" : 138,
      "code" : "// Defined in linux/prctl.h starting with Linux 4.3.\nconst (\n\tPR_CAP_AMBIENT       = 0x2f\n\tPR_CAP_AMBIENT_RAISE = 0x2\n)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 4 ],
      "in-vars" : [ 2, 1, 12, 6, 13, 7, 0, 4, 14, 3, 10, 5 ],
      "exit" : false,
      "out-vars" : [ 13, 15, 0, 3, 5, 2, 4, 12, 1, 14, 6, 16, 17, 18, 10, 19, 20, 21, 22, 7 ],
      "decl-vars" : [ 18, 23, 22, 20, 24, 16, 25, 19, 17, 15, 21 ],
      "line-start" : 147,
      "ast" : {
        "kind" : "statement",
        "target" : {
          "kind" : "decl",
          "specs" : [ {
            "comments" : [ ],
            "declared-type" : {
              "go-type" : 27,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 27,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "Errno"
              }
            },
            "kind" : "spec",
            "names" : [ {
              "ident-kind" : "NoKind",
              "kind" : "ident",
              "value" : "err2"
            } ],
            "type" : "var",
            "values" : [ ]
          }, {
            "comments" : [ ],
            "declared-type" : {
              "go-type" : 21,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 21,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "int"
              }
            },
            "kind" : "spec",
            "names" : [ {
              "ident-kind" : "NoKind",
              "kind" : "ident",
              "value" : "nextfd"
            } ],
            "type" : "var",
            "values" : [ ]
          }, {
            "comments" : [ ],
            "declared-type" : {
              "go-type" : 21,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 21,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "int"
              }
            },
            "kind" : "spec",
            "names" : [ {
              "ident-kind" : "NoKind",
              "kind" : "ident",
              "value" : "i"
            } ],
            "type" : "var",
            "values" : [ ]
          }, {
            "comments" : [ ],
            "declared-type" : {
              "go-type" : 32,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 32,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "caps"
              }
            },
            "kind" : "spec",
            "names" : [ {
              "ident-kind" : "NoKind",
              "kind" : "ident",
              "value" : "caps"
            } ],
            "type" : "var",
            "values" : [ ]
          }, {
            "comments" : [ ],
            "declared-type" : {
              "go-type" : 11,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 11,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "uintptr"
              }
            },
            "kind" : "spec",
            "names" : [ {
              "ident-kind" : "NoKind",
              "kind" : "ident",
              "value" : "fd1"
            } ],
            "type" : "var",
            "values" : [ ]
          }, {
            "comments" : [ ],
            "declared-type" : {
              "element" : {
                "go-type" : 3,
                "kind" : "type",
                "type" : "identifier",
                "value" : {
                  "go-type" : 3,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "byte"
                }
              },
              "go-type" : 40,
              "kind" : "type",
              "type" : "slice"
            },
            "kind" : "spec",
            "names" : [ {
              "ident-kind" : "NoKind",
              "kind" : "ident",
              "value" : "puid"
            }, {
              "ident-kind" : "NoKind",
              "kind" : "ident",
              "value" : "psetgroups"
            }, {
              "ident-kind" : "NoKind",
              "kind" : "ident",
              "value" : "pgid"
            } ],
            "type" : "var",
            "values" : [ ]
          }, {
            "comments" : [ ],
            "declared-type" : {
              "element" : {
                "go-type" : 3,
                "kind" : "type",
                "type" : "identifier",
                "value" : {
                  "go-type" : 3,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "byte"
                }
              },
              "go-type" : 40,
              "kind" : "type",
              "type" : "slice"
            },
            "kind" : "spec",
            "names" : [ {
              "ident-kind" : "NoKind",
              "kind" : "ident",
              "value" : "uidmap"
            }, {
              "ident-kind" : "NoKind",
              "kind" : "ident",
              "value" : "setgroups"
            }, {
              "ident-kind" : "NoKind",
              "kind" : "ident",
              "value" : "gidmap"
            } ],
            "type" : "var",
            "values" : [ ]
          } ],
          "type" : "var"
        },
        "type" : "declaration"
      },
      "assign-vars" : [ ],
      "line-end" : 155,
      "code" : "// vfork requires that the child not touch any of the parent's\n// active stack frames. Hence, the child does all post-fork\n// processing in this stack frame and never returns, while the\n// parent returns immediately from this frame and does all\n// post-fork processing in the outer frame.\n// Declare all variables at top in case any\n// declarations require heap allocation (e.g., err1).\nvar (\n\terr2                      Errno\n\tnextfd                    int\n\ti                         int\n\tcaps                      caps\n\tfd1                       uintptr\n\tpuid, psetgroups, pgid    []byte\n\tuidmap, setgroups, gidmap []byte\n)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 5, 7 ],
      "in-vars" : [ 10, 7, 0, 4, 3, 16, 22, 17, 14, 13, 21, 1, 20, 15, 5, 12, 6, 19, 18, 2 ],
      "exit" : false,
      "out-vars" : [ 1, 3, 22, 10, 5, 19, 17, 18, 0, 2, 12, 14, 6, 13, 21, 15, 20, 16, 7, 4 ],
      "decl-vars" : [ ],
      "line-start" : 157,
      "ast" : {
        "condition" : {
          "go-type" : 41,
          "kind" : "expression",
          "left" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "UidMappings",
              "variable" : 26
            },
            "go-type" : 23,
            "kind" : "expression",
            "target" : {
              "go-type" : 12,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "sys",
                "variable" : 6
              }
            },
            "type" : "selector"
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 42,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Nil",
              "kind" : "ident",
              "value" : "nil"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 160,
      "code" : "if sys.UidMappings != nil {\n\tpuid = []byte(\"/proc/self/uid_map\\000\")\n\tuidmap = formatIDMappings(sys.UidMappings)\n}",
      "entry" : false,
      "use-vars" : [ 6 ]
    }, {
      "update-vars" : [ 15 ],
      "successors" : [ 6 ],
      "in-vars" : [ 13, 1, 4, 20, 22, 17, 6, 3, 16, 10, 5, 2, 19, 18, 7, 0, 12, 14 ],
      "exit" : false,
      "out-vars" : [ 1, 4, 13, 18, 0, 14, 16, 17, 15, 5, 6, 19, 20, 22, 10, 7, 2, 12, 3 ],
      "decl-vars" : [ ],
      "line-start" : 158,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 40,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "puid",
            "variable" : 15
          }
        } ],
        "right" : [ {
          "coerced-to" : {
            "element" : {
              "go-type" : 3,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 3,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "byte"
              }
            },
            "go-type" : 40,
            "kind" : "type",
            "type" : "slice"
          },
          "go-type" : 40,
          "kind" : "expression",
          "target" : {
            "go-type" : 8,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "/proc/self/uid_map\u0000"
            }
          },
          "type" : "cast"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 15 ],
      "line-end" : 158,
      "code" : "puid = []byte(\"/proc/self/uid_map\\000\")",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ 21 ],
      "successors" : [ 7 ],
      "in-vars" : [ 13, 3, 22, 2, 12, 6, 20, 18, 7, 14, 19, 17, 15, 10, 4, 16, 5, 1, 0 ],
      "exit" : false,
      "out-vars" : [ 3, 17, 1, 12, 22, 10, 7, 4, 14, 19, 20, 16, 21, 18, 2, 6, 13, 15, 5, 0 ],
      "decl-vars" : [ ],
      "line-start" : 159,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 40,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "uidmap",
            "variable" : 21
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "UidMappings",
              "variable" : 26
            },
            "go-type" : 23,
            "kind" : "expression",
            "target" : {
              "go-type" : 12,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "sys",
                "variable" : 6
              }
            },
            "type" : "selector"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 43,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "formatIDMappings"
            }
          },
          "go-type" : 40,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 21 ],
      "line-end" : 159,
      "code" : "uidmap = formatIDMappings(sys.UidMappings)",
      "entry" : false,
      "use-vars" : [ 6 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 8, 14 ],
      "in-vars" : [ 17, 15, 7, 2, 0, 6, 20, 16, 22, 18, 10, 5, 4, 3, 19, 21, 1, 12, 14, 13 ],
      "exit" : false,
      "out-vars" : [ 15, 5, 1, 0, 6, 13, 20, 16, 4, 12, 3, 22, 17, 2, 19, 21, 10, 14, 18, 7 ],
      "decl-vars" : [ ],
      "line-start" : 162,
      "ast" : {
        "condition" : {
          "go-type" : 41,
          "kind" : "expression",
          "left" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "GidMappings",
              "variable" : 27
            },
            "go-type" : 23,
            "kind" : "expression",
            "target" : {
              "go-type" : 12,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "sys",
                "variable" : 6
              }
            },
            "type" : "selector"
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 42,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Nil",
              "kind" : "ident",
              "value" : "nil"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 172,
      "code" : "if sys.GidMappings != nil {\n\tpsetgroups = []byte(\"/proc/self/setgroups\\000\")\n\tpgid = []byte(\"/proc/self/gid_map\\000\")\n\n\tif sys.GidMappingsEnableSetgroups {\n\t\tsetgroups = []byte(\"allow\\000\")\n\t} else {\n\t\tsetgroups = []byte(\"deny\\000\")\n\t}\n\tgidmap = formatIDMappings(sys.GidMappings)\n}",
      "entry" : false,
      "use-vars" : [ 6 ]
    }, {
      "update-vars" : [ 18 ],
      "successors" : [ 9 ],
      "in-vars" : [ 7, 4, 14, 16, 21, 10, 5, 2, 1, 13, 15, 0, 12, 6, 22, 3 ],
      "exit" : false,
      "out-vars" : [ 5, 14, 6, 13, 21, 18, 7, 4, 12, 3, 16, 22, 15, 10, 2, 1, 0 ],
      "decl-vars" : [ ],
      "line-start" : 163,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 40,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "psetgroups",
            "variable" : 18
          }
        } ],
        "right" : [ {
          "coerced-to" : {
            "element" : {
              "go-type" : 3,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 3,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "byte"
              }
            },
            "go-type" : 40,
            "kind" : "type",
            "type" : "slice"
          },
          "go-type" : 40,
          "kind" : "expression",
          "target" : {
            "go-type" : 8,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "/proc/self/setgroups\u0000"
            }
          },
          "type" : "cast"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 18 ],
      "line-end" : 163,
      "code" : "psetgroups = []byte(\"/proc/self/setgroups\\000\")",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ 20 ],
      "successors" : [ 10 ],
      "in-vars" : [ 6, 16, 18, 5, 1, 14, 21, 10, 0, 4, 13, 3, 22, 2, 15, 7, 12 ],
      "exit" : false,
      "out-vars" : [ 15, 2, 1, 6, 3, 0, 20, 7, 4, 12, 14, 13, 16, 21, 22, 18, 10, 5 ],
      "decl-vars" : [ ],
      "line-start" : 164,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 40,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "pgid",
            "variable" : 20
          }
        } ],
        "right" : [ {
          "coerced-to" : {
            "element" : {
              "go-type" : 3,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 3,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "byte"
              }
            },
            "go-type" : 40,
            "kind" : "type",
            "type" : "slice"
          },
          "go-type" : 40,
          "kind" : "expression",
          "target" : {
            "go-type" : 8,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "/proc/self/gid_map\u0000"
            }
          },
          "type" : "cast"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 20 ],
      "line-end" : 164,
      "code" : "pgid = []byte(\"/proc/self/gid_map\\000\")",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 11, 12 ],
      "in-vars" : [ 6, 20, 22, 10, 5, 13, 4, 12, 14, 2, 0, 3, 16, 21, 18, 15, 7, 1 ],
      "exit" : false,
      "out-vars" : [ 5, 1, 0, 20, 22, 15, 10, 7, 13, 3, 16, 6, 2, 21, 18, 4, 12, 14 ],
      "decl-vars" : [ ],
      "line-start" : 166,
      "ast" : {
        "condition" : {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "GidMappingsEnableSetgroups",
            "variable" : 28
          },
          "go-type" : 20,
          "kind" : "expression",
          "target" : {
            "go-type" : 12,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "sys",
              "variable" : 6
            }
          },
          "type" : "selector"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 170,
      "code" : "if sys.GidMappingsEnableSetgroups {\n\tsetgroups = []byte(\"allow\\000\")\n} else {\n\tsetgroups = []byte(\"deny\\000\")\n}",
      "entry" : false,
      "use-vars" : [ 6 ]
    }, {
      "update-vars" : [ 19 ],
      "successors" : [ 13 ],
      "in-vars" : [ 21, 10, 5, 1, 13, 20, 16, 7, 14, 22, 2, 0, 12, 4, 6, 3, 18, 15 ],
      "exit" : false,
      "out-vars" : [ 6, 18, 13, 3, 16, 21, 10, 7, 1, 19, 22, 2, 0, 20, 15, 5, 4, 12, 14 ],
      "decl-vars" : [ ],
      "line-start" : 167,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 40,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "setgroups",
            "variable" : 19
          }
        } ],
        "right" : [ {
          "coerced-to" : {
            "element" : {
              "go-type" : 3,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 3,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "byte"
              }
            },
            "go-type" : 40,
            "kind" : "type",
            "type" : "slice"
          },
          "go-type" : 40,
          "kind" : "expression",
          "target" : {
            "go-type" : 8,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "allow\u0000"
            }
          },
          "type" : "cast"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 19 ],
      "line-end" : 167,
      "code" : "setgroups = []byte(\"allow\\000\")",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ 19 ],
      "successors" : [ 13 ],
      "in-vars" : [ 7, 4, 22, 14, 3, 16, 21, 18, 15, 0, 6, 13, 5, 2, 1, 12, 20, 10 ],
      "exit" : false,
      "out-vars" : [ 4, 6, 13, 3, 20, 10, 1, 0, 14, 16, 18, 15, 7, 2, 19, 21, 22, 5, 12 ],
      "decl-vars" : [ ],
      "line-start" : 169,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 40,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "setgroups",
            "variable" : 19
          }
        } ],
        "right" : [ {
          "coerced-to" : {
            "element" : {
              "go-type" : 3,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 3,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "byte"
              }
            },
            "go-type" : 40,
            "kind" : "type",
            "type" : "slice"
          },
          "go-type" : 40,
          "kind" : "expression",
          "target" : {
            "go-type" : 8,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "deny\u0000"
            }
          },
          "type" : "cast"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 19 ],
      "line-end" : 169,
      "code" : "setgroups = []byte(\"deny\\000\")",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ 17 ],
      "successors" : [ 14 ],
      "in-vars" : [ 18, 1, 0, 4, 22, 15, 7, 5, 2, 14, 6, 19, 20, 12, 13, 3, 16, 21, 10 ],
      "exit" : false,
      "out-vars" : [ 2, 6, 19, 21, 17, 7, 5, 4, 20, 18, 15, 10, 12, 13, 3, 22, 0, 16, 1, 14 ],
      "decl-vars" : [ ],
      "line-start" : 171,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 40,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "gidmap",
            "variable" : 17
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "GidMappings",
              "variable" : 27
            },
            "go-type" : 23,
            "kind" : "expression",
            "target" : {
              "go-type" : 12,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "sys",
                "variable" : 6
              }
            },
            "type" : "selector"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 43,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "formatIDMappings"
            }
          },
          "go-type" : 40,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 17 ],
      "line-end" : 171,
      "code" : "gidmap = formatIDMappings(sys.GidMappings)",
      "entry" : false,
      "use-vars" : [ 6 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 15 ],
      "in-vars" : [ 6, 13, 17, 10, 0, 4, 12, 3, 19, 7, 2, 1, 20, 21, 18, 5, 16, 22, 15, 14 ],
      "exit" : false,
      "out-vars" : [ 7, 29, 4, 6, 13, 22, 1, 14, 20, 17, 5, 3, 16, 10, 15, 2, 0, 12, 19, 21, 18 ],
      "decl-vars" : [ 30, 29 ],
      "line-start" : 175,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "ppid"
          }
        }, {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "_"
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 11,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "39"
            }
          }, {
            "go-type" : 11,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          }, {
            "go-type" : 11,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          }, {
            "go-type" : 11,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 47,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "rawSyscallNoError"
            }
          },
          "go-type" : 46,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 175,
      "code" : "ppid, _ := rawSyscallNoError(SYS_GETPID, 0, 0, 0)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 16 ],
      "in-vars" : [ 0, 4, 14, 13, 3, 10, 2, 21, 22, 7, 12, 6, 20, 17, 15, 5, 1, 19, 16, 18, 29 ],
      "exit" : false,
      "out-vars" : [ 19, 10, 0, 32, 1, 14, 5, 2, 13, 21, 22, 18, 15, 29, 4, 12, 6, 3, 20, 16, 17, 7 ],
      "decl-vars" : [ 32 ],
      "line-start" : 180,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "fd"
          }
        } ],
        "right" : [ {
          "argument" : {
            "element" : {
              "go-type" : 21,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 21,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "int"
              }
            },
            "go-type" : 49,
            "kind" : "type",
            "type" : "slice"
          },
          "go-type" : 49,
          "kind" : "expression",
          "rest" : [ {
            "arguments" : [ {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "Files",
                "variable" : 31
              },
              "go-type" : 10,
              "kind" : "expression",
              "target" : {
                "go-type" : 5,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "attr",
                  "variable" : 5
                }
              },
              "type" : "selector"
            } ],
            "ellipsis" : false,
            "function" : {
              "go-type" : 50,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Builtin",
                "kind" : "ident",
                "value" : "len"
              }
            },
            "go-type" : 21,
            "kind" : "expression",
            "type" : "call"
          } ],
          "type" : "make"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 180,
      "code" : "fd := make([]int, len(attr.Files))",
      "entry" : false,
      "use-vars" : [ 5 ]
    }, {
      "update-vars" : [ 24 ],
      "successors" : [ 17 ],
      "in-vars" : [ 22, 0, 29, 5, 3, 20, 21, 32, 10, 7, 1, 14, 6, 13, 15, 4, 19, 16, 17, 18, 2, 12 ],
      "exit" : false,
      "out-vars" : [ 24, 19, 20, 17, 10, 29, 2, 13, 3, 7, 5, 6, 22, 32, 15, 0, 21, 18, 1, 4, 12, 14, 16 ],
      "decl-vars" : [ ],
      "line-start" : 181,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 21,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "nextfd",
            "variable" : 24
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "Files",
              "variable" : 31
            },
            "go-type" : 10,
            "kind" : "expression",
            "target" : {
              "go-type" : 5,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "attr",
                "variable" : 5
              }
            },
            "type" : "selector"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 50,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Builtin",
              "kind" : "ident",
              "value" : "len"
            }
          },
          "go-type" : 21,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 24 ],
      "line-end" : 181,
      "code" : "nextfd = len(attr.Files)",
      "entry" : false,
      "use-vars" : [ 5 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 18, 21 ],
      "in-vars" : [ 32, 10, 12, 14, 6, 20, 21, 22, 3, 18, 5, 2, 1, 24, 19, 17, 15, 0, 4, 13, 16, 7, 29 ],
      "exit" : false,
      "out-vars" : [ 13, 24, 17, 18, 12, 6, 19, 20, 22, 10, 5, 1, 14, 16, 15, 7, 33, 4, 34, 3, 21, 32, 29, 2, 0 ],
      "decl-vars" : [ 33, 34 ],
      "line-start" : 182,
      "ast" : {
        "is-assign" : false,
        "key" : {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "i"
          }
        },
        "kind" : "statement",
        "target" : {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "Files",
            "variable" : 31
          },
          "go-type" : 10,
          "kind" : "expression",
          "target" : {
            "go-type" : 5,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "attr",
              "variable" : 5
            }
          },
          "type" : "selector"
        },
        "type" : "range",
        "value" : {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "ufd"
          }
        }
      },
      "assign-vars" : [ ],
      "line-end" : 187,
      "code" : "for i, ufd := range attr.Files {\n\tif nextfd < int(ufd) {\n\t\tnextfd = int(ufd)\n\t}\n\tfd[i] = int(ufd)\n}",
      "entry" : false,
      "use-vars" : [ 5 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 19, 20 ],
      "in-vars" : [ 7, 29, 33, 3, 16, 21, 10, 34, 14, 24, 5, 2, 1, 18, 15, 6, 19, 32, 17, 4, 12, 13, 20, 22, 0 ],
      "exit" : false,
      "out-vars" : [ 3, 19, 16, 32, 4, 13, 20, 5, 33, 1, 6, 24, 22, 15, 7, 29, 2, 0, 21, 17, 18, 10, 34, 12, 14 ],
      "decl-vars" : [ ],
      "line-start" : 183,
      "ast" : {
        "condition" : {
          "go-type" : 41,
          "kind" : "expression",
          "left" : {
            "go-type" : 21,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "nextfd",
              "variable" : 24
            }
          },
          "operator" : "<",
          "right" : {
            "coerced-to" : {
              "go-type" : 21,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 21,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "int"
              }
            },
            "go-type" : 21,
            "kind" : "expression",
            "target" : {
              "go-type" : 11,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "ufd",
                "variable" : 33
              }
            },
            "type" : "cast"
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 185,
      "code" : "if nextfd < int(ufd) {\n\tnextfd = int(ufd)\n}",
      "entry" : false,
      "use-vars" : [ 24, 33 ]
    }, {
      "update-vars" : [ 24 ],
      "successors" : [ 20 ],
      "in-vars" : [ 15, 5, 4, 14, 6, 20, 32, 22, 18, 29, 0, 3, 16, 21, 34, 2, 1, 33, 10, 7, 12, 13, 19, 17 ],
      "exit" : false,
      "out-vars" : [ 3, 21, 2, 1, 19, 20, 22, 32, 10, 29, 0, 4, 34, 12, 24, 17, 18, 15, 7, 33, 6, 13, 16, 5, 14 ],
      "decl-vars" : [ ],
      "line-start" : 184,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 21,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "nextfd",
            "variable" : 24
          }
        } ],
        "right" : [ {
          "coerced-to" : {
            "go-type" : 21,
            "kind" : "type",
            "type" : "identifier",
            "value" : {
              "go-type" : 21,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "int"
            }
          },
          "go-type" : 21,
          "kind" : "expression",
          "target" : {
            "go-type" : 11,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "ufd",
              "variable" : 33
            }
          },
          "type" : "cast"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 24 ],
      "line-end" : 184,
      "code" : "nextfd = int(ufd)",
      "entry" : false,
      "use-vars" : [ 33 ]
    }, {
      "update-vars" : [ 32 ],
      "successors" : [ 17 ],
      "in-vars" : [ 13, 24, 19, 32, 15, 2, 4, 6, 10, 7, 29, 0, 33, 3, 20, 21, 17, 18, 5, 12, 14, 16, 22, 1, 34 ],
      "exit" : false,
      "out-vars" : [ 0, 13, 19, 20, 10, 4, 16, 21, 29, 2, 17, 18, 15, 7, 6, 24, 3, 32, 5, 1, 12, 22, 14 ],
      "decl-vars" : [ ],
      "line-start" : 186,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 21,
          "index" : {
            "go-type" : 21,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "i",
              "variable" : 34
            }
          },
          "kind" : "expression",
          "target" : {
            "go-type" : 49,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "fd",
              "variable" : 32
            }
          },
          "type" : "index"
        } ],
        "right" : [ {
          "coerced-to" : {
            "go-type" : 21,
            "kind" : "type",
            "type" : "identifier",
            "value" : {
              "go-type" : 21,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "int"
            }
          },
          "go-type" : 21,
          "kind" : "expression",
          "target" : {
            "go-type" : 11,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "ufd",
              "variable" : 33
            }
          },
          "type" : "cast"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 186,
      "code" : "fd[i] = int(ufd)",
      "entry" : false,
      "use-vars" : [ 33, 32, 34 ]
    }, {
      "update-vars" : [ 24 ],
      "successors" : [ 22 ],
      "in-vars" : [ 15, 6, 24, 3, 19, 16, 22, 17, 10, 7, 14, 13, 32, 18, 29, 2, 4, 20, 21, 1, 0, 12 ],
      "exit" : false,
      "out-vars" : [ 20, 16, 32, 17, 29, 1, 0, 6, 24, 3, 21, 18, 13, 19, 22, 10, 12, 15, 7, 2, 4, 14 ],
      "decl-vars" : [ ],
      "line-start" : 188,
      "ast" : {
        "kind" : "statement",
        "operation" : "++",
        "target" : {
          "go-type" : 21,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "nextfd",
            "variable" : 24
          }
        },
        "type" : "crement"
      },
      "assign-vars" : [ 24 ],
      "line-end" : 188,
      "code" : "nextfd++",
      "entry" : false,
      "use-vars" : [ 24 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 24, 27 ],
      "in-vars" : [ 32, 29, 4, 14, 1, 13, 24, 3, 19, 22, 7, 6, 20, 16, 15, 10, 2, 21, 17, 18, 0, 12 ],
      "exit" : false,
      "out-vars" : [ 19, 21, 2, 14, 6, 20, 7, 12, 3, 16, 17, 15, 10, 0, 4, 13, 24, 22, 32, 18, 29, 1 ],
      "decl-vars" : [ ],
      "line-start" : 192,
      "ast" : {
        "condition" : {
          "go-type" : 41,
          "kind" : "expression",
          "left" : {
            "go-type" : 41,
            "kind" : "expression",
            "left" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "UidMappings",
                "variable" : 26
              },
              "go-type" : 23,
              "kind" : "expression",
              "target" : {
                "go-type" : 12,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "sys",
                  "variable" : 6
                }
              },
              "type" : "selector"
            },
            "operator" : "!=",
            "right" : {
              "go-type" : 42,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Nil",
                "kind" : "ident",
                "value" : "nil"
              }
            },
            "type" : "binary"
          },
          "operator" : "||",
          "right" : {
            "go-type" : 41,
            "kind" : "expression",
            "left" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "GidMappings",
                "variable" : 27
              },
              "go-type" : 23,
              "kind" : "expression",
              "target" : {
                "go-type" : 12,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "sys",
                  "variable" : 6
                }
              },
              "type" : "selector"
            },
            "operator" : "!=",
            "right" : {
              "go-type" : 42,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Nil",
                "kind" : "ident",
                "value" : "nil"
              }
            },
            "type" : "binary"
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 197,
      "code" : "if sys.UidMappings != nil || sys.GidMappings != nil {\n\tif err := forkExecPipe(p[:]); err != nil {\n\t\terr1 = err.(Errno)\n\t\treturn\n\t}\n}",
      "entry" : false,
      "use-vars" : [ 6 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 25, 27 ],
      "in-vars" : [ 7, 2, 14, 21, 10, 16, 17, 18, 12, 6, 20, 3, 32, 15, 0, 36, 13, 24, 29, 1, 4, 19, 22 ],
      "exit" : false,
      "out-vars" : [ 12, 6, 20, 22, 17, 0, 4, 36, 24, 18, 29, 2, 19, 7, 1, 14, 32, 15, 10, 13, 3, 16, 21 ],
      "decl-vars" : [ ],
      "line-start" : 193,
      "ast" : {
        "condition" : {
          "go-type" : 41,
          "kind" : "expression",
          "left" : {
            "go-type" : 53,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "err",
              "variable" : 36
            }
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 42,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Nil",
              "kind" : "ident",
              "value" : "nil"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 196,
      "code" : "if err := forkExecPipe(p[:]); err != nil {\n\terr1 = err.(Errno)\n\treturn\n}",
      "entry" : false,
      "use-vars" : [ 36 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 23 ],
      "in-vars" : [ 6, 22, 10, 29, 15, 7, 24, 19, 20, 16, 32, 17, 4, 12, 21, 2, 0, 14, 13, 3, 18, 1 ],
      "exit" : false,
      "out-vars" : [ 7, 14, 24, 15, 18, 2, 0, 4, 19, 32, 20, 21, 22, 1, 13, 3, 17, 10, 29, 36, 12, 6, 16 ],
      "decl-vars" : [ 36 ],
      "line-start" : 193,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "err"
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 49,
            "type" : "slice",
            "three" : false,
            "high" : null,
            "max" : null,
            "kind" : "expression",
            "low" : null,
            "target" : {
              "go-type" : 28,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "p",
                "variable" : 10
              }
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 58,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "forkExecPipe"
            }
          },
          "go-type" : 53,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 193,
      "code" : "err := forkExecPipe(p[:])",
      "entry" : false,
      "use-vars" : [ 10 ]
    }, {
      "update-vars" : [ 9 ],
      "successors" : [ 26 ],
      "in-vars" : [ 36 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 194,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 27,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "err1",
            "variable" : 9
          }
        } ],
        "right" : [ {
          "asserted" : {
            "go-type" : 27,
            "kind" : "type",
            "type" : "identifier",
            "value" : {
              "go-type" : 27,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "Errno"
            }
          },
          "go-type" : 27,
          "kind" : "expression",
          "target" : {
            "go-type" : 53,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "err",
              "variable" : 36
            }
          },
          "type" : "type-assert"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 9 ],
      "line-end" : 194,
      "code" : "err1 = err.(Errno)",
      "entry" : false,
      "use-vars" : [ 36 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 195,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ ]
      },
      "assign-vars" : [ ],
      "line-end" : 195,
      "code" : "return",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 28 ],
      "in-vars" : [ 3, 22, 32, 18, 10, 2, 6, 13, 15, 4, 14, 24, 19, 21, 7, 0, 12, 20, 16, 1, 17, 29 ],
      "exit" : false,
      "out-vars" : [ 3, 21, 6, 16, 22, 32, 2, 37, 20, 24, 7, 29, 1, 4, 12, 13, 17, 18, 15, 10, 0, 14, 19 ],
      "decl-vars" : [ 37 ],
      "line-start" : 199,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "hasRawVforkSyscall"
          }
        } ],
        "right" : [ {
          "go-type" : 20,
          "kind" : "constant",
          "value" : {
            "type" : "BOOL",
            "value" : "true"
          }
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 199,
      "code" : "hasRawVforkSyscall := runtime.GOARCH == \"amd64\" || runtime.GOARCH == \"ppc64\" || runtime.GOARCH == \"s390x\" || runtime.GOARCH == \"arm64\"",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 29 ],
      "in-vars" : [ 15, 29, 1, 4, 6, 3, 16, 10, 13, 24, 21, 22, 7, 14, 17, 18, 2, 0, 37, 19, 20, 32, 12 ],
      "exit" : false,
      "out-vars" : [ 14, 24, 3, 22, 17, 0, 4, 37, 20, 16, 32, 10, 29, 1, 12, 6, 19, 21, 18, 7, 13, 15, 2 ],
      "decl-vars" : [ ],
      "line-start" : 203,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 61,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "runtime_BeforeFork"
            }
          },
          "go-type" : 56,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 203,
      "code" : "runtime_BeforeFork()",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ 11 ],
      "successors" : [ 30 ],
      "in-vars" : [ 13, 22, 29, 0, 6, 21, 10, 2, 1, 3, 20, 16, 32, 18, 15, 12, 14, 24, 17, 7, 4, 37, 19 ],
      "exit" : false,
      "out-vars" : [ 13, 21, 22, 10, 0, 12, 6, 20, 17, 4, 16, 32, 18, 7, 29, 2, 1, 37, 14, 24, 3, 19, 15 ],
      "decl-vars" : [ ],
      "line-start" : 204,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 20,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "locked",
            "variable" : 11
          }
        } ],
        "right" : [ {
          "go-type" : 20,
          "kind" : "constant",
          "value" : {
            "type" : "BOOL",
            "value" : "true"
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 11 ],
      "line-end" : 204,
      "code" : "locked = true",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 31, 33, 35 ],
      "in-vars" : [ 13, 16, 21, 18, 15, 29, 2, 24, 3, 19, 22, 7, 6, 20, 12, 4, 37, 14, 32, 17, 10, 1, 0 ],
      "exit" : false,
      "out-vars" : [ 16, 29, 0, 3, 19, 20, 32, 37, 6, 13, 18, 7, 2, 12, 14, 24, 21, 22, 17, 15, 10, 1, 4 ],
      "decl-vars" : [ ],
      "line-start" : 205,
      "ast" : {
        "condition" : null,
        "kind" : "statement",
        "type" : "switch"
      },
      "assign-vars" : [ ],
      "line-end" : 212,
      "code" : "switch {\ncase hasRawVforkSyscall && (sys.Cloneflags&CLONE_NEWUSER == 0 && sys.Unshareflags&CLONE_NEWUSER == 0):\n\tr1, err1 = rawVforkSyscall(SYS_CLONE, uintptr(SIGCHLD|CLONE_VFORK|CLONE_VM)|sys.Cloneflags)\ncase runtime.GOARCH == \"s390x\":\n\tr1, _, err1 = RawSyscall6(SYS_CLONE, 0, uintptr(SIGCHLD)|sys.Cloneflags, 0, 0, 0, 0)\ndefault:\n\tr1, _, err1 = RawSyscall6(SYS_CLONE, uintptr(SIGCHLD)|sys.Cloneflags, 0, 0, 0, 0, 0)\n}",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 32 ],
      "in-vars" : [ 10, 12, 13, 19, 16, 17, 29, 1, 4, 37, 3, 22, 32, 15, 14, 6, 24, 7, 0, 20, 21, 18, 2 ],
      "exit" : false,
      "out-vars" : [ 16, 2, 4, 14, 6, 20, 19, 22, 17, 29, 13, 24, 10, 1, 0, 12, 21, 18, 15, 7, 3, 32 ],
      "decl-vars" : [ ],
      "line-start" : 206,
      "ast" : {
        "expressions" : [ {
          "go-type" : 20,
          "kind" : "expression",
          "left" : {
            "go-type" : 20,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "hasRawVforkSyscall",
              "variable" : 37
            }
          },
          "operator" : "&&",
          "right" : {
            "go-type" : 20,
            "kind" : "expression",
            "target" : {
              "go-type" : 20,
              "kind" : "expression",
              "left" : {
                "go-type" : 20,
                "kind" : "expression",
                "left" : {
                  "go-type" : 11,
                  "kind" : "expression",
                  "left" : {
                    "field" : {
                      "ident-kind" : "Var",
                      "kind" : "ident",
                      "value" : "Cloneflags",
                      "variable" : 38
                    },
                    "go-type" : 11,
                    "kind" : "expression",
                    "target" : {
                      "go-type" : 12,
                      "kind" : "expression",
                      "type" : "identifier",
                      "value" : {
                        "ident-kind" : "Var",
                        "kind" : "ident",
                        "value" : "sys",
                        "variable" : 6
                      }
                    },
                    "type" : "selector"
                  },
                  "operator" : "&",
                  "right" : {
                    "go-type" : 11,
                    "kind" : "constant",
                    "value" : {
                      "type" : "INT",
                      "value" : "268435456"
                    }
                  },
                  "type" : "binary"
                },
                "operator" : "==",
                "right" : {
                  "go-type" : 11,
                  "kind" : "constant",
                  "value" : {
                    "type" : "INT",
                    "value" : "0"
                  }
                },
                "type" : "binary"
              },
              "operator" : "&&",
              "right" : {
                "go-type" : 20,
                "kind" : "expression",
                "left" : {
                  "go-type" : 11,
                  "kind" : "expression",
                  "left" : {
                    "field" : {
                      "ident-kind" : "Var",
                      "kind" : "ident",
                      "value" : "Unshareflags",
                      "variable" : 39
                    },
                    "go-type" : 11,
                    "kind" : "expression",
                    "target" : {
                      "go-type" : 12,
                      "kind" : "expression",
                      "type" : "identifier",
                      "value" : {
                        "ident-kind" : "Var",
                        "kind" : "ident",
                        "value" : "sys",
                        "variable" : 6
                      }
                    },
                    "type" : "selector"
                  },
                  "operator" : "&",
                  "right" : {
                    "go-type" : 11,
                    "kind" : "constant",
                    "value" : {
                      "type" : "INT",
                      "value" : "268435456"
                    }
                  },
                  "type" : "binary"
                },
                "operator" : "==",
                "right" : {
                  "go-type" : 11,
                  "kind" : "constant",
                  "value" : {
                    "type" : "INT",
                    "value" : "0"
                  }
                },
                "type" : "binary"
              },
              "type" : "binary"
            },
            "type" : "paren"
          },
          "type" : "binary"
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 207,
      "code" : "case hasRawVforkSyscall && (sys.Cloneflags&CLONE_NEWUSER == 0 && sys.Unshareflags&CLONE_NEWUSER == 0):\n\tr1, err1 = rawVforkSyscall(SYS_CLONE, uintptr(SIGCHLD|CLONE_VFORK|CLONE_VM)|sys.Cloneflags)",
      "entry" : false,
      "use-vars" : [ 6, 37 ]
    }, {
      "update-vars" : [ 9, 8 ],
      "successors" : [ 37 ],
      "in-vars" : [ 19, 29, 6, 3, 21, 15, 10, 7, 14, 13, 20, 0, 12, 18, 2, 22, 32, 17, 1, 4, 24, 16 ],
      "exit" : false,
      "out-vars" : [ 3, 10, 29, 1, 0, 6, 8, 19, 20, 32, 18, 7, 9, 24, 16, 15, 2, 12, 13, 21, 22, 17, 4, 14 ],
      "decl-vars" : [ ],
      "line-start" : 207,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 11,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "r1",
            "variable" : 8
          }
        }, {
          "go-type" : 27,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "err1",
            "variable" : 9
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 11,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "56"
            }
          }, {
            "go-type" : 11,
            "kind" : "expression",
            "left" : {
              "go-type" : 11,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "16657"
              }
            },
            "operator" : "|",
            "right" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "Cloneflags",
                "variable" : 38
              },
              "go-type" : 11,
              "kind" : "expression",
              "target" : {
                "go-type" : 12,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "sys",
                  "variable" : 6
                }
              },
              "type" : "selector"
            },
            "type" : "binary"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 63,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "rawVforkSyscall"
            }
          },
          "go-type" : 62,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 9, 8 ],
      "line-end" : 207,
      "code" : "r1, err1 = rawVforkSyscall(SYS_CLONE, uintptr(SIGCHLD|CLONE_VFORK|CLONE_VM)|sys.Cloneflags)",
      "entry" : false,
      "use-vars" : [ 6 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 34 ],
      "in-vars" : [ 13, 18, 15, 14, 6, 19, 16, 21, 17, 10, 1, 24, 20, 22, 7, 0, 12, 3, 32, 29, 2, 4 ],
      "exit" : false,
      "out-vars" : [ 10, 1, 21, 15, 19, 22, 0, 14, 6, 13, 17, 18, 3, 32, 16, 7, 29, 2, 4, 12, 24, 20 ],
      "decl-vars" : [ ],
      "line-start" : 208,
      "ast" : {
        "expressions" : [ {
          "go-type" : 20,
          "kind" : "constant",
          "value" : {
            "type" : "BOOL",
            "value" : "false"
          }
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 209,
      "code" : "case runtime.GOARCH == \"s390x\":\n\tr1, _, err1 = RawSyscall6(SYS_CLONE, 0, uintptr(SIGCHLD)|sys.Cloneflags, 0, 0, 0, 0)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ 9, 8 ],
      "successors" : [ 37 ],
      "in-vars" : [ 24, 3, 20, 13, 22, 17, 10, 29, 4, 19, 7, 2, 1, 6, 16, 21, 32, 18, 15, 0, 12, 14 ],
      "exit" : false,
      "out-vars" : [ 32, 17, 15, 7, 2, 16, 19, 20, 22, 1, 0, 12, 14, 3, 8, 21, 29, 9, 13, 24, 18, 10, 4, 6 ],
      "decl-vars" : [ ],
      "line-start" : 209,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 11,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "r1",
            "variable" : 8
          }
        }, {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "_"
          }
        }, {
          "go-type" : 27,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "err1",
            "variable" : 9
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 11,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "56"
            }
          }, {
            "go-type" : 11,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          }, {
            "go-type" : 11,
            "kind" : "expression",
            "left" : {
              "go-type" : 11,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "17"
              }
            },
            "operator" : "|",
            "right" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "Cloneflags",
                "variable" : 38
              },
              "go-type" : 11,
              "kind" : "expression",
              "target" : {
                "go-type" : 12,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "sys",
                  "variable" : 6
                }
              },
              "type" : "selector"
            },
            "type" : "binary"
          }, {
            "go-type" : 11,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          }, {
            "go-type" : 11,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          }, {
            "go-type" : 11,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          }, {
            "go-type" : 11,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 66,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "RawSyscall6"
            }
          },
          "go-type" : 65,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 9, 8 ],
      "line-end" : 209,
      "code" : "r1, _, err1 = RawSyscall6(SYS_CLONE, 0, uintptr(SIGCHLD)|sys.Cloneflags, 0, 0, 0, 0)",
      "entry" : false,
      "use-vars" : [ 6 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 36 ],
      "in-vars" : [ 32, 0, 6, 19, 16, 29, 20, 22, 17, 10, 4, 14, 24, 3, 15, 7, 2, 1, 12, 13, 21, 18 ],
      "exit" : false,
      "out-vars" : [ 20, 17, 15, 7, 29, 4, 13, 16, 32, 18, 10, 1, 14, 24, 3, 0, 6, 19, 21, 22, 2, 12 ],
      "decl-vars" : [ ],
      "line-start" : 210,
      "ast" : {
        "expressions" : [ ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 211,
      "code" : "default:\n\tr1, _, err1 = RawSyscall6(SYS_CLONE, uintptr(SIGCHLD)|sys.Cloneflags, 0, 0, 0, 0, 0)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ 8, 9 ],
      "successors" : [ 37 ],
      "in-vars" : [ 29, 1, 0, 14, 13, 15, 19, 20, 18, 10, 4, 12, 6, 3, 22, 17, 21, 32, 7, 2, 24, 16 ],
      "exit" : false,
      "out-vars" : [ 2, 1, 12, 6, 19, 18, 29, 14, 24, 20, 10, 7, 9, 8, 21, 32, 17, 15, 0, 4, 13, 3, 16, 22 ],
      "decl-vars" : [ ],
      "line-start" : 211,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 11,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "r1",
            "variable" : 8
          }
        }, {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "_"
          }
        }, {
          "go-type" : 27,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "err1",
            "variable" : 9
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 11,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "56"
            }
          }, {
            "go-type" : 11,
            "kind" : "expression",
            "left" : {
              "go-type" : 11,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "17"
              }
            },
            "operator" : "|",
            "right" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "Cloneflags",
                "variable" : 38
              },
              "go-type" : 11,
              "kind" : "expression",
              "target" : {
                "go-type" : 12,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "sys",
                  "variable" : 6
                }
              },
              "type" : "selector"
            },
            "type" : "binary"
          }, {
            "go-type" : 11,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          }, {
            "go-type" : 11,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          }, {
            "go-type" : 11,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          }, {
            "go-type" : 11,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          }, {
            "go-type" : 11,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 66,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "RawSyscall6"
            }
          },
          "go-type" : 65,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 8, 9 ],
      "line-end" : 211,
      "code" : "r1, _, err1 = RawSyscall6(SYS_CLONE, uintptr(SIGCHLD)|sys.Cloneflags, 0, 0, 0, 0, 0)",
      "entry" : false,
      "use-vars" : [ 6 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 38, 39 ],
      "in-vars" : [ 24, 8, 21, 32, 18, 10, 29, 19, 15, 2, 6, 3, 20, 22, 17, 7, 1, 0, 12, 9, 13, 16, 4, 14 ],
      "exit" : false,
      "out-vars" : [ 19, 16, 18, 13, 20, 17, 4, 7, 29, 2, 0, 6, 21, 15, 10, 12, 14, 32, 1, 9, 24, 3, 22 ],
      "decl-vars" : [ ],
      "line-start" : 213,
      "ast" : {
        "condition" : {
          "go-type" : 41,
          "kind" : "expression",
          "left" : {
            "go-type" : 41,
            "kind" : "expression",
            "left" : {
              "go-type" : 27,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "err1",
                "variable" : 9
              }
            },
            "operator" : "!=",
            "right" : {
              "go-type" : 27,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "0"
              }
            },
            "type" : "binary"
          },
          "operator" : "||",
          "right" : {
            "go-type" : 41,
            "kind" : "expression",
            "left" : {
              "go-type" : 11,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "r1",
                "variable" : 8
              }
            },
            "operator" : "!=",
            "right" : {
              "go-type" : 11,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "0"
              }
            },
            "type" : "binary"
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 221,
      "code" : "if err1 != 0 || r1 != 0 {\n\n\treturn\n}",
      "entry" : false,
      "use-vars" : [ 9, 8 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 220,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ ]
      },
      "assign-vars" : [ ],
      "line-end" : 220,
      "code" : "return",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 40 ],
      "in-vars" : [ 9, 16, 18, 29, 1, 20, 22, 15, 10, 12, 2, 4, 13, 3, 21, 17, 7, 14, 6, 24, 19, 32, 0 ],
      "exit" : false,
      "out-vars" : [ 13, 6, 16, 29, 12, 9, 22, 17, 18, 15, 7, 14, 24, 3, 19, 20, 21, 32, 10, 2, 1, 0, 4 ],
      "decl-vars" : [ ],
      "line-start" : 225,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 61,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "runtime_AfterForkInChild"
            }
          },
          "go-type" : 56,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 225,
      "code" : "runtime_AfterForkInChild()",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 41, 44 ],
      "in-vars" : [ 9, 19, 12, 14, 6, 24, 3, 2, 4, 1, 0, 20, 16, 21, 32, 7, 29, 13, 22, 17, 18, 15, 10 ],
      "exit" : false,
      "out-vars" : [ 6, 24, 20, 16, 32, 14, 18, 7, 29, 1, 9, 13, 21, 22, 17, 15, 10, 0, 12, 3, 19, 2, 4 ],
      "decl-vars" : [ ],
      "line-start" : 228,
      "ast" : {
        "condition" : {
          "go-type" : 41,
          "kind" : "expression",
          "left" : {
            "arguments" : [ {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "AmbientCaps",
                "variable" : 40
              },
              "go-type" : 10,
              "kind" : "expression",
              "target" : {
                "go-type" : 12,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "sys",
                  "variable" : 6
                }
              },
              "type" : "selector"
            } ],
            "ellipsis" : false,
            "function" : {
              "go-type" : 50,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Builtin",
                "kind" : "ident",
                "value" : "len"
              }
            },
            "go-type" : 21,
            "kind" : "expression",
            "type" : "call"
          },
          "operator" : ">",
          "right" : {
            "go-type" : 21,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 233,
      "code" : "if len(sys.AmbientCaps) > 0 {\n\t_, _, err1 = RawSyscall6(SYS_PRCTL, PR_SET_KEEPCAPS, 1, 0, 0, 0, 0)\n\tif err1 != 0 {\n\t\tgoto childerror\n\t}\n}",
      "entry" : false,
      "use-vars" : [ 6 ]
    }, {
      "update-vars" : [ 9 ],
      "successors" : [ 42 ],
      "in-vars" : [ 1, 13, 3, 19, 21, 22, 32, 17, 4, 14, 6, 24, 16, 18, 2, 20, 15, 10, 29, 12, 7, 0 ],
      "exit" : false,
      "out-vars" : [ 4, 9, 22, 7, 29, 2, 1, 6, 20, 15, 12, 10, 24, 19, 16, 32, 17, 18, 13, 3, 21, 0, 14 ],
      "decl-vars" : [ ],
      "line-start" : 229,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "_"
          }
        }, {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "_"
          }
        }, {
          "go-type" : 27,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "err1",
            "variable" : 9
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 11,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "157"
            }
          }, {
            "go-type" : 11,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "8"
            }
          }, {
            "go-type" : 11,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "1"
            }
          }, {
            "go-type" : 11,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          }, {
            "go-type" : 11,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          }, {
            "go-type" : 11,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          }, {
            "go-type" : 11,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 66,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "RawSyscall6"
            }
          },
          "go-type" : 65,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 9 ],
      "line-end" : 229,
      "code" : "_, _, err1 = RawSyscall6(SYS_PRCTL, PR_SET_KEEPCAPS, 1, 0, 0, 0, 0)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 43, 44 ],
      "in-vars" : [ 3, 19, 22, 10, 29, 12, 9, 6, 21, 18, 15, 2, 24, 16, 17, 7, 1, 4, 13, 20, 32, 0, 14 ],
      "exit" : false,
      "out-vars" : [ 0, 12, 6, 22, 32, 15, 4, 19, 21, 2, 1, 10, 29, 14, 20, 16, 17, 18, 9, 13, 24, 3, 7 ],
      "decl-vars" : [ ],
      "line-start" : 230,
      "ast" : {
        "condition" : {
          "go-type" : 41,
          "kind" : "expression",
          "left" : {
            "go-type" : 27,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "err1",
              "variable" : 9
            }
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 27,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 232,
      "code" : "if err1 != 0 {\n\tgoto childerror\n}",
      "entry" : false,
      "use-vars" : [ 9 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 211 ],
      "in-vars" : [ 9, 7 ],
      "exit" : false,
      "out-vars" : [ 9, 7 ],
      "decl-vars" : [ ],
      "line-start" : 231,
      "ast" : {
        "kind" : "statement",
        "label" : {
          "ident-kind" : "Label",
          "kind" : "ident",
          "value" : "childerror"
        },
        "type" : "goto"
      },
      "assign-vars" : [ ],
      "line-end" : 231,
      "code" : "goto childerror",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 46, 57 ],
      "in-vars" : [ 0, 14, 6, 13, 20, 22, 19, 2, 4, 10, 1, 24, 3, 32, 17, 15, 7, 29, 12, 9, 16, 21, 18 ],
      "exit" : false,
      "out-vars" : [ 32, 2, 4, 14, 9, 24, 21, 22, 15, 13, 20, 16, 10, 7, 1, 12, 6, 19, 17, 0, 3, 18, 29 ],
      "decl-vars" : [ ],
      "line-start" : 236,
      "ast" : {
        "condition" : {
          "go-type" : 41,
          "kind" : "expression",
          "left" : {
            "go-type" : 41,
            "kind" : "expression",
            "left" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "UidMappings",
                "variable" : 26
              },
              "go-type" : 23,
              "kind" : "expression",
              "target" : {
                "go-type" : 12,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "sys",
                  "variable" : 6
                }
              },
              "type" : "selector"
            },
            "operator" : "!=",
            "right" : {
              "go-type" : 42,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Nil",
                "kind" : "ident",
                "value" : "nil"
              }
            },
            "type" : "binary"
          },
          "operator" : "||",
          "right" : {
            "go-type" : 41,
            "kind" : "expression",
            "left" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "GidMappings",
                "variable" : 27
              },
              "go-type" : 23,
              "kind" : "expression",
              "target" : {
                "go-type" : 12,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "sys",
                  "variable" : 6
                }
              },
              "type" : "selector"
            },
            "operator" : "!=",
            "right" : {
              "go-type" : 42,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Nil",
                "kind" : "ident",
                "value" : "nil"
              }
            },
            "type" : "binary"
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 252,
      "code" : "if sys.UidMappings != nil || sys.GidMappings != nil {\n\tif _, _, err1 = RawSyscall(SYS_CLOSE, uintptr(p[1]), 0, 0); err1 != 0 {\n\t\tgoto childerror\n\t}\n\tr1, _, err1 = RawSyscall(SYS_READ, uintptr(p[0]), uintptr(unsafe.Pointer(&err2)), unsafe.Sizeof(err2))\n\tif err1 != 0 {\n\t\tgoto childerror\n\t}\n\tif r1 != unsafe.Sizeof(err2) {\n\t\terr1 = EINVAL\n\t\tgoto childerror\n\t}\n\tif err2 != 0 {\n\t\terr1 = err2\n\t\tgoto childerror\n\t}\n}",
      "entry" : false,
      "use-vars" : [ 6 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 47, 48 ],
      "in-vars" : [ 0, 9, 13, 19, 16, 22, 18, 3, 7, 4, 6, 32, 15, 2, 14, 1, 12, 24, 20, 21, 17, 10, 29 ],
      "exit" : false,
      "out-vars" : [ 24, 4, 14, 10, 2, 0, 6, 20, 32, 17, 18, 12, 7, 1, 13, 3, 19, 22, 15, 9, 16, 21, 29 ],
      "decl-vars" : [ ],
      "line-start" : 237,
      "ast" : {
        "condition" : {
          "go-type" : 41,
          "kind" : "expression",
          "left" : {
            "go-type" : 27,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "err1",
              "variable" : 9
            }
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 27,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 239,
      "code" : "if _, _, err1 = RawSyscall(SYS_CLOSE, uintptr(p[1]), 0, 0); err1 != 0 {\n\tgoto childerror\n}",
      "entry" : false,
      "use-vars" : [ 9 ]
    }, {
      "update-vars" : [ 9 ],
      "successors" : [ 45 ],
      "in-vars" : [ 20, 32, 29, 7, 0, 4, 12, 14, 13, 17, 18, 16, 21, 22, 15, 10, 6, 3, 19, 1, 24, 2 ],
      "exit" : false,
      "out-vars" : [ 13, 22, 10, 7, 9, 2, 4, 16, 3, 19, 20, 21, 17, 18, 1, 6, 14, 32, 15, 29, 0, 12, 24 ],
      "decl-vars" : [ ],
      "line-start" : 237,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "_"
          }
        }, {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "_"
          }
        }, {
          "go-type" : 27,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "err1",
            "variable" : 9
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 11,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "3"
            }
          }, {
            "coerced-to" : {
              "go-type" : 11,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 11,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "uintptr"
              }
            },
            "go-type" : 11,
            "kind" : "expression",
            "target" : {
              "go-type" : 21,
              "index" : {
                "go-type" : 21,
                "kind" : "constant",
                "value" : {
                  "type" : "INT",
                  "value" : "1"
                }
              },
              "kind" : "expression",
              "target" : {
                "go-type" : 28,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "p",
                  "variable" : 10
                }
              },
              "type" : "index"
            },
            "type" : "cast"
          }, {
            "go-type" : 11,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          }, {
            "go-type" : 11,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 68,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "RawSyscall"
            }
          },
          "go-type" : 65,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 9 ],
      "line-end" : 237,
      "code" : "_, _, err1 = RawSyscall(SYS_CLOSE, uintptr(p[1]), 0, 0)",
      "entry" : false,
      "use-vars" : [ 10 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 211 ],
      "in-vars" : [ 9, 7 ],
      "exit" : false,
      "out-vars" : [ 9, 7 ],
      "decl-vars" : [ ],
      "line-start" : 238,
      "ast" : {
        "kind" : "statement",
        "label" : {
          "ident-kind" : "Label",
          "kind" : "ident",
          "value" : "childerror"
        },
        "type" : "goto"
      },
      "assign-vars" : [ ],
      "line-end" : 238,
      "code" : "goto childerror",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ 9, 8 ],
      "successors" : [ 49 ],
      "in-vars" : [ 20, 10, 7, 29, 2, 12, 13, 3, 14, 6, 21, 22, 18, 0, 4, 24, 16, 32, 17, 15, 1, 19 ],
      "exit" : false,
      "out-vars" : [ 6, 0, 4, 13, 8, 16, 22, 17, 7, 29, 12, 19, 21, 18, 1, 14, 9, 24, 3, 20, 32, 15, 2 ],
      "decl-vars" : [ ],
      "line-start" : 240,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 11,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "r1",
            "variable" : 8
          }
        }, {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "_"
          }
        }, {
          "go-type" : 27,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "err1",
            "variable" : 9
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 11,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          }, {
            "coerced-to" : {
              "go-type" : 11,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 11,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "uintptr"
              }
            },
            "go-type" : 11,
            "kind" : "expression",
            "target" : {
              "go-type" : 21,
              "index" : {
                "go-type" : 21,
                "kind" : "constant",
                "value" : {
                  "type" : "INT",
                  "value" : "0"
                }
              },
              "kind" : "expression",
              "target" : {
                "go-type" : 28,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "p",
                  "variable" : 10
                }
              },
              "type" : "index"
            },
            "type" : "cast"
          }, {
            "coerced-to" : {
              "go-type" : 11,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 11,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "uintptr"
              }
            },
            "go-type" : 11,
            "kind" : "expression",
            "target" : {
              "coerced-to" : {
                "go-type" : 69,
                "kind" : "type",
                "qualifier" : {
                  "ident-kind" : "PkgName",
                  "kind" : "ident",
                  "package" : 1,
                  "value" : "unsafe"
                },
                "type" : "identifier",
                "value" : {
                  "go-type" : 69,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "Pointer"
                }
              },
              "go-type" : 69,
              "kind" : "expression",
              "target" : {
                "go-type" : 70,
                "kind" : "expression",
                "operator" : "&",
                "target" : {
                  "go-type" : 27,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "err2",
                    "variable" : 22
                  }
                },
                "type" : "unary"
              },
              "type" : "cast"
            },
            "type" : "cast"
          }, {
            "go-type" : 11,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "8"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 68,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "RawSyscall"
            }
          },
          "go-type" : 65,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 9, 8 ],
      "line-end" : 240,
      "code" : "r1, _, err1 = RawSyscall(SYS_READ, uintptr(p[0]), uintptr(unsafe.Pointer(&err2)), unsafe.Sizeof(err2))",
      "entry" : false,
      "use-vars" : [ 22, 10 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 50, 51 ],
      "in-vars" : [ 32, 17, 1, 0, 4, 21, 6, 24, 3, 19, 9, 20, 16, 22, 18, 15, 29, 12, 8, 14, 7, 2, 13 ],
      "exit" : false,
      "out-vars" : [ 12, 20, 21, 15, 1, 4, 29, 13, 24, 8, 22, 7, 9, 3, 32, 0, 14, 2, 6, 19, 16, 17, 18 ],
      "decl-vars" : [ ],
      "line-start" : 241,
      "ast" : {
        "condition" : {
          "go-type" : 41,
          "kind" : "expression",
          "left" : {
            "go-type" : 27,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "err1",
              "variable" : 9
            }
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 27,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 243,
      "code" : "if err1 != 0 {\n\tgoto childerror\n}",
      "entry" : false,
      "use-vars" : [ 9 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 211 ],
      "in-vars" : [ 9, 7 ],
      "exit" : false,
      "out-vars" : [ 9, 7 ],
      "decl-vars" : [ ],
      "line-start" : 242,
      "ast" : {
        "kind" : "statement",
        "label" : {
          "ident-kind" : "Label",
          "kind" : "ident",
          "value" : "childerror"
        },
        "type" : "goto"
      },
      "assign-vars" : [ ],
      "line-end" : 242,
      "code" : "goto childerror",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 52, 54 ],
      "in-vars" : [ 29, 2, 4, 3, 8, 22, 18, 15, 13, 24, 19, 21, 32, 17, 0, 9, 20, 16, 7, 1, 12, 14, 6 ],
      "exit" : false,
      "out-vars" : [ 3, 16, 18, 1, 0, 9, 22, 32, 15, 2, 4, 12, 24, 21, 7, 14, 20, 13, 19, 17, 29, 6 ],
      "decl-vars" : [ ],
      "line-start" : 244,
      "ast" : {
        "condition" : {
          "go-type" : 41,
          "kind" : "expression",
          "left" : {
            "go-type" : 11,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "r1",
              "variable" : 8
            }
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 11,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "8"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 247,
      "code" : "if r1 != unsafe.Sizeof(err2) {\n\terr1 = EINVAL\n\tgoto childerror\n}",
      "entry" : false,
      "use-vars" : [ 22, 8 ]
    }, {
      "update-vars" : [ 9 ],
      "successors" : [ 53 ],
      "in-vars" : [ 7 ],
      "exit" : false,
      "out-vars" : [ 9, 7 ],
      "decl-vars" : [ ],
      "line-start" : 245,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 27,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "err1",
            "variable" : 9
          }
        } ],
        "right" : [ {
          "go-type" : 27,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "22"
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 9 ],
      "line-end" : 245,
      "code" : "err1 = EINVAL",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 211 ],
      "in-vars" : [ 9, 7 ],
      "exit" : false,
      "out-vars" : [ 9, 7 ],
      "decl-vars" : [ ],
      "line-start" : 246,
      "ast" : {
        "kind" : "statement",
        "label" : {
          "ident-kind" : "Label",
          "kind" : "ident",
          "value" : "childerror"
        },
        "type" : "goto"
      },
      "assign-vars" : [ ],
      "line-end" : 246,
      "code" : "goto childerror",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 55, 57 ],
      "in-vars" : [ 22, 17, 7, 6, 24, 3, 21, 12, 14, 16, 15, 29, 0, 1, 9, 20, 32, 18, 13, 19, 2, 4 ],
      "exit" : false,
      "out-vars" : [ 16, 18, 4, 9, 6, 29, 1, 32, 7, 2, 13, 24, 3, 19, 21, 14, 12, 20, 22, 17, 15, 0 ],
      "decl-vars" : [ ],
      "line-start" : 248,
      "ast" : {
        "condition" : {
          "go-type" : 41,
          "kind" : "expression",
          "left" : {
            "go-type" : 27,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "err2",
              "variable" : 22
            }
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 27,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 251,
      "code" : "if err2 != 0 {\n\terr1 = err2\n\tgoto childerror\n}",
      "entry" : false,
      "use-vars" : [ 22 ]
    }, {
      "update-vars" : [ 9 ],
      "successors" : [ 56 ],
      "in-vars" : [ 22, 7 ],
      "exit" : false,
      "out-vars" : [ 9, 7 ],
      "decl-vars" : [ ],
      "line-start" : 249,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 27,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "err1",
            "variable" : 9
          }
        } ],
        "right" : [ {
          "go-type" : 27,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "err2",
            "variable" : 22
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 9 ],
      "line-end" : 249,
      "code" : "err1 = err2",
      "entry" : false,
      "use-vars" : [ 22 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 211 ],
      "in-vars" : [ 9, 7 ],
      "exit" : false,
      "out-vars" : [ 9, 7 ],
      "decl-vars" : [ ],
      "line-start" : 250,
      "ast" : {
        "kind" : "statement",
        "label" : {
          "ident-kind" : "Label",
          "kind" : "ident",
          "value" : "childerror"
        },
        "type" : "goto"
      },
      "assign-vars" : [ ],
      "line-end" : 250,
      "code" : "goto childerror",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 58, 61 ],
      "in-vars" : [ 24, 0, 21, 18, 15, 2, 4, 9, 6, 3, 17, 32, 7, 29, 1, 13, 19, 20, 16, 12, 14 ],
      "exit" : false,
      "out-vars" : [ 15, 29, 12, 9, 6, 3, 18, 13, 19, 20, 7, 0, 4, 16, 21, 2, 1, 24, 32, 17, 14 ],
      "decl-vars" : [ ],
      "line-start" : 255,
      "ast" : {
        "condition" : {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "Setsid",
            "variable" : 41
          },
          "go-type" : 20,
          "kind" : "expression",
          "target" : {
            "go-type" : 12,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "sys",
              "variable" : 6
            }
          },
          "type" : "selector"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 260,
      "code" : "if sys.Setsid {\n\t_, _, err1 = RawSyscall(SYS_SETSID, 0, 0, 0)\n\tif err1 != 0 {\n\t\tgoto childerror\n\t}\n}",
      "entry" : false,
      "use-vars" : [ 6 ]
    }, {
      "update-vars" : [ 9 ],
      "successors" : [ 59 ],
      "in-vars" : [ 24, 6, 16, 21, 32, 1, 14, 19, 18, 15, 29, 2, 0, 4, 12, 13, 3, 20, 17, 7 ],
      "exit" : false,
      "out-vars" : [ 14, 6, 19, 29, 2, 21, 0, 12, 7, 24, 3, 17, 15, 32, 18, 1, 4, 9, 13, 20, 16 ],
      "decl-vars" : [ ],
      "line-start" : 256,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "_"
          }
        }, {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "_"
          }
        }, {
          "go-type" : 27,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "err1",
            "variable" : 9
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 11,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "112"
            }
          }, {
            "go-type" : 11,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          }, {
            "go-type" : 11,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          }, {
            "go-type" : 11,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 68,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "RawSyscall"
            }
          },
          "go-type" : 65,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 9 ],
      "line-end" : 256,
      "code" : "_, _, err1 = RawSyscall(SYS_SETSID, 0, 0, 0)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 60, 61 ],
      "in-vars" : [ 0, 12, 14, 9, 6, 21, 7, 4, 19, 16, 32, 1, 2, 13, 3, 17, 18, 24, 20, 15, 29 ],
      "exit" : false,
      "out-vars" : [ 1, 0, 4, 32, 15, 7, 3, 19, 16, 20, 17, 12, 14, 9, 13, 24, 29, 2, 6, 21, 18 ],
      "decl-vars" : [ ],
      "line-start" : 257,
      "ast" : {
        "condition" : {
          "go-type" : 41,
          "kind" : "expression",
          "left" : {
            "go-type" : 27,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "err1",
              "variable" : 9
            }
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 27,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 259,
      "code" : "if err1 != 0 {\n\tgoto childerror\n}",
      "entry" : false,
      "use-vars" : [ 9 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 211 ],
      "in-vars" : [ 9, 7 ],
      "exit" : false,
      "out-vars" : [ 9, 7 ],
      "decl-vars" : [ ],
      "line-start" : 258,
      "ast" : {
        "kind" : "statement",
        "label" : {
          "ident-kind" : "Label",
          "kind" : "ident",
          "value" : "childerror"
        },
        "type" : "goto"
      },
      "assign-vars" : [ ],
      "line-end" : 258,
      "code" : "goto childerror",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 62, 65 ],
      "in-vars" : [ 19, 20, 17, 18, 1, 0, 3, 15, 29, 2, 4, 12, 9, 6, 24, 32, 13, 16, 21, 7, 14 ],
      "exit" : false,
      "out-vars" : [ 9, 17, 15, 7, 12, 14, 1, 24, 3, 16, 21, 32, 18, 29, 6, 19, 13, 20, 2, 0, 4 ],
      "decl-vars" : [ ],
      "line-start" : 263,
      "ast" : {
        "condition" : {
          "go-type" : 20,
          "kind" : "expression",
          "left" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "Setpgid",
              "variable" : 42
            },
            "go-type" : 20,
            "kind" : "expression",
            "target" : {
              "go-type" : 12,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "sys",
                "variable" : 6
              }
            },
            "type" : "selector"
          },
          "operator" : "||",
          "right" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "Foreground",
              "variable" : 43
            },
            "go-type" : 20,
            "kind" : "expression",
            "target" : {
              "go-type" : 12,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "sys",
                "variable" : 6
              }
            },
            "type" : "selector"
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 269,
      "code" : "if sys.Setpgid || sys.Foreground {\n\n\t_, _, err1 = RawSyscall(SYS_SETPGID, 0, uintptr(sys.Pgid), 0)\n\tif err1 != 0 {\n\t\tgoto childerror\n\t}\n}",
      "entry" : false,
      "use-vars" : [ 6 ]
    }, {
      "update-vars" : [ 9 ],
      "successors" : [ 63 ],
      "in-vars" : [ 32, 15, 3, 20, 18, 7, 29, 24, 17, 19, 16, 21, 1, 0, 12, 6, 13, 14, 2, 4 ],
      "exit" : false,
      "out-vars" : [ 21, 15, 2, 1, 14, 13, 24, 17, 7, 29, 0, 3, 19, 6, 18, 16, 32, 4, 12, 9, 20 ],
      "decl-vars" : [ ],
      "line-start" : 265,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "_"
          }
        }, {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "_"
          }
        }, {
          "go-type" : 27,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "err1",
            "variable" : 9
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 11,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "109"
            }
          }, {
            "go-type" : 11,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          }, {
            "coerced-to" : {
              "go-type" : 11,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 11,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "uintptr"
              }
            },
            "go-type" : 11,
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "Pgid",
                "variable" : 44
              },
              "go-type" : 21,
              "kind" : "expression",
              "target" : {
                "go-type" : 12,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "sys",
                  "variable" : 6
                }
              },
              "type" : "selector"
            },
            "type" : "cast"
          }, {
            "go-type" : 11,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 68,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "RawSyscall"
            }
          },
          "go-type" : 65,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 9 ],
      "line-end" : 265,
      "code" : "_, _, err1 = RawSyscall(SYS_SETPGID, 0, uintptr(sys.Pgid), 0)",
      "entry" : false,
      "use-vars" : [ 6 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 64, 65 ],
      "in-vars" : [ 32, 15, 7, 0, 14, 9, 16, 20, 24, 3, 21, 17, 29, 2, 12, 6, 19, 18, 1, 4, 13 ],
      "exit" : false,
      "out-vars" : [ 6, 13, 16, 32, 2, 0, 19, 21, 15, 29, 4, 14, 9, 3, 20, 17, 12, 24, 18, 7, 1 ],
      "decl-vars" : [ ],
      "line-start" : 266,
      "ast" : {
        "condition" : {
          "go-type" : 41,
          "kind" : "expression",
          "left" : {
            "go-type" : 27,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "err1",
              "variable" : 9
            }
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 27,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 268,
      "code" : "if err1 != 0 {\n\tgoto childerror\n}",
      "entry" : false,
      "use-vars" : [ 9 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 211 ],
      "in-vars" : [ 9, 7 ],
      "exit" : false,
      "out-vars" : [ 9, 7 ],
      "decl-vars" : [ ],
      "line-start" : 267,
      "ast" : {
        "kind" : "statement",
        "label" : {
          "ident-kind" : "Label",
          "kind" : "ident",
          "value" : "childerror"
        },
        "type" : "goto"
      },
      "assign-vars" : [ ],
      "line-end" : 267,
      "code" : "goto childerror",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 66, 73 ],
      "in-vars" : [ 21, 17, 4, 13, 20, 32, 18, 15, 12, 14, 9, 6, 24, 3, 29, 2, 19, 16, 7, 1, 0 ],
      "exit" : false,
      "out-vars" : [ 6, 19, 21, 32, 17, 18, 2, 9, 4, 14, 0, 16, 15, 29, 1, 24, 20, 7, 12, 3, 13 ],
      "decl-vars" : [ ],
      "line-start" : 271,
      "ast" : {
        "condition" : {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "Foreground",
            "variable" : 43
          },
          "go-type" : 20,
          "kind" : "expression",
          "target" : {
            "go-type" : 12,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "sys",
              "variable" : 6
            }
          },
          "type" : "selector"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 284,
      "code" : "if sys.Foreground {\n\tpgrp := int32(sys.Pgid)\n\tif pgrp == 0 {\n\t\tr1, _ = rawSyscallNoError(SYS_GETPID, 0, 0, 0)\n\n\t\tpgrp = int32(r1)\n\t}\n\n\t_, _, err1 = RawSyscall(SYS_IOCTL, uintptr(sys.Ctty), uintptr(TIOCSPGRP), uintptr(unsafe.Pointer(&pgrp)))\n\tif err1 != 0 {\n\t\tgoto childerror\n\t}\n}",
      "entry" : false,
      "use-vars" : [ 6 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 67 ],
      "in-vars" : [ 24, 21, 17, 13, 3, 19, 15, 14, 4, 12, 32, 18, 29, 1, 0, 6, 20, 16, 7, 2 ],
      "exit" : false,
      "out-vars" : [ 17, 15, 12, 19, 16, 21, 18, 1, 0, 14, 13, 3, 20, 32, 7, 29, 2, 4, 6, 24, 45 ],
      "decl-vars" : [ 45 ],
      "line-start" : 272,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "pgrp"
          }
        } ],
        "right" : [ {
          "coerced-to" : {
            "go-type" : 36,
            "kind" : "type",
            "type" : "identifier",
            "value" : {
              "go-type" : 36,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "int32"
            }
          },
          "go-type" : 36,
          "kind" : "expression",
          "target" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "Pgid",
              "variable" : 44
            },
            "go-type" : 21,
            "kind" : "expression",
            "target" : {
              "go-type" : 12,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "sys",
                "variable" : 6
              }
            },
            "type" : "selector"
          },
          "type" : "cast"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 272,
      "code" : "pgrp := int32(sys.Pgid)",
      "entry" : false,
      "use-vars" : [ 6 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 68, 70 ],
      "in-vars" : [ 17, 13, 20, 16, 32, 18, 29, 2, 6, 14, 12, 19, 21, 15, 7, 3, 45, 1, 0, 4, 24 ],
      "exit" : false,
      "out-vars" : [ 1, 12, 13, 32, 17, 18, 15, 7, 2, 4, 19, 21, 3, 20, 16, 29, 0, 6, 24, 45, 14 ],
      "decl-vars" : [ ],
      "line-start" : 273,
      "ast" : {
        "condition" : {
          "go-type" : 41,
          "kind" : "expression",
          "left" : {
            "go-type" : 36,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "pgrp",
              "variable" : 45
            }
          },
          "operator" : "==",
          "right" : {
            "go-type" : 36,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 277,
      "code" : "if pgrp == 0 {\n\tr1, _ = rawSyscallNoError(SYS_GETPID, 0, 0, 0)\n\n\tpgrp = int32(r1)\n}",
      "entry" : false,
      "use-vars" : [ 45 ]
    }, {
      "update-vars" : [ 8 ],
      "successors" : [ 69 ],
      "in-vars" : [ 6, 13, 3, 29, 0, 2, 1, 4, 18, 24, 19, 20, 16, 21, 32, 17, 12, 14, 15, 7 ],
      "exit" : false,
      "out-vars" : [ 16, 17, 12, 6, 8, 19, 7, 29, 4, 24, 21, 15, 0, 3, 20, 18, 1, 14, 13, 32, 2 ],
      "decl-vars" : [ ],
      "line-start" : 274,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 11,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "r1",
            "variable" : 8
          }
        }, {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "_"
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 11,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "39"
            }
          }, {
            "go-type" : 11,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          }, {
            "go-type" : 11,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          }, {
            "go-type" : 11,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 47,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "rawSyscallNoError"
            }
          },
          "go-type" : 46,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 8 ],
      "line-end" : 274,
      "code" : "r1, _ = rawSyscallNoError(SYS_GETPID, 0, 0, 0)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ 45 ],
      "successors" : [ 70 ],
      "in-vars" : [ 18, 15, 0, 8, 16, 32, 17, 1, 14, 6, 24, 7, 29, 2, 4, 13, 3, 21, 12, 19, 20 ],
      "exit" : false,
      "out-vars" : [ 6, 13, 19, 20, 16, 17, 7, 1, 4, 14, 45, 21, 15, 0, 24, 3, 32, 18, 29, 2, 12 ],
      "decl-vars" : [ ],
      "line-start" : 276,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 36,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "pgrp",
            "variable" : 45
          }
        } ],
        "right" : [ {
          "coerced-to" : {
            "go-type" : 36,
            "kind" : "type",
            "type" : "identifier",
            "value" : {
              "go-type" : 36,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "int32"
            }
          },
          "go-type" : 36,
          "kind" : "expression",
          "target" : {
            "go-type" : 11,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "r1",
              "variable" : 8
            }
          },
          "type" : "cast"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 45 ],
      "line-end" : 276,
      "code" : "pgrp = int32(r1)",
      "entry" : false,
      "use-vars" : [ 8 ]
    }, {
      "update-vars" : [ 9 ],
      "successors" : [ 71 ],
      "in-vars" : [ 24, 45, 15, 32, 29, 0, 4, 1, 3, 20, 16, 18, 17, 7, 2, 12, 6, 13, 19, 21, 14 ],
      "exit" : false,
      "out-vars" : [ 24, 19, 21, 1, 0, 4, 14, 6, 32, 7, 2, 13, 16, 17, 18, 12, 9, 3, 20, 15, 29 ],
      "decl-vars" : [ ],
      "line-start" : 280,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "_"
          }
        }, {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "_"
          }
        }, {
          "go-type" : 27,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "err1",
            "variable" : 9
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 11,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "16"
            }
          }, {
            "coerced-to" : {
              "go-type" : 11,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 11,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "uintptr"
              }
            },
            "go-type" : 11,
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "Ctty",
                "variable" : 46
              },
              "go-type" : 21,
              "kind" : "expression",
              "target" : {
                "go-type" : 12,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "sys",
                  "variable" : 6
                }
              },
              "type" : "selector"
            },
            "type" : "cast"
          }, {
            "go-type" : 11,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "21520"
            }
          }, {
            "coerced-to" : {
              "go-type" : 11,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 11,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "uintptr"
              }
            },
            "go-type" : 11,
            "kind" : "expression",
            "target" : {
              "coerced-to" : {
                "go-type" : 69,
                "kind" : "type",
                "qualifier" : {
                  "ident-kind" : "PkgName",
                  "kind" : "ident",
                  "package" : 1,
                  "value" : "unsafe"
                },
                "type" : "identifier",
                "value" : {
                  "go-type" : 69,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "Pointer"
                }
              },
              "go-type" : 69,
              "kind" : "expression",
              "target" : {
                "go-type" : 71,
                "kind" : "expression",
                "operator" : "&",
                "target" : {
                  "go-type" : 36,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "pgrp",
                    "variable" : 45
                  }
                },
                "type" : "unary"
              },
              "type" : "cast"
            },
            "type" : "cast"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 68,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "RawSyscall"
            }
          },
          "go-type" : 65,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 9 ],
      "line-end" : 280,
      "code" : "_, _, err1 = RawSyscall(SYS_IOCTL, uintptr(sys.Ctty), uintptr(TIOCSPGRP), uintptr(unsafe.Pointer(&pgrp)))",
      "entry" : false,
      "use-vars" : [ 45, 6 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 72, 73 ],
      "in-vars" : [ 9, 16, 1, 13, 20, 32, 4, 14, 3, 17, 18, 12, 7, 29, 2, 6, 24, 19, 21, 15, 0 ],
      "exit" : false,
      "out-vars" : [ 29, 2, 9, 32, 17, 18, 15, 7, 12, 3, 0, 14, 16, 1, 4, 6, 13, 24, 19, 20, 21 ],
      "decl-vars" : [ ],
      "line-start" : 281,
      "ast" : {
        "condition" : {
          "go-type" : 41,
          "kind" : "expression",
          "left" : {
            "go-type" : 27,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "err1",
              "variable" : 9
            }
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 27,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 283,
      "code" : "if err1 != 0 {\n\tgoto childerror\n}",
      "entry" : false,
      "use-vars" : [ 9 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 211 ],
      "in-vars" : [ 7, 9 ],
      "exit" : false,
      "out-vars" : [ 9, 7 ],
      "decl-vars" : [ ],
      "line-start" : 282,
      "ast" : {
        "kind" : "statement",
        "label" : {
          "ident-kind" : "Label",
          "kind" : "ident",
          "value" : "childerror"
        },
        "type" : "goto"
      },
      "assign-vars" : [ ],
      "line-end" : 282,
      "code" : "goto childerror",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 74, 112 ],
      "in-vars" : [ 6, 19, 20, 21, 4, 12, 14, 13, 24, 16, 32, 18, 7, 1, 3, 15, 29, 2, 9, 17, 0 ],
      "exit" : false,
      "out-vars" : [ 14, 19, 32, 15, 7, 29, 1, 13, 24, 0, 17, 18, 9, 6, 3, 20, 16, 21, 2, 4, 12 ],
      "decl-vars" : [ ],
      "line-start" : 287,
      "ast" : {
        "condition" : {
          "go-type" : 41,
          "kind" : "expression",
          "left" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "Unshareflags",
              "variable" : 39
            },
            "go-type" : 11,
            "kind" : "expression",
            "target" : {
              "go-type" : 12,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "sys",
                "variable" : 6
              }
            },
            "type" : "selector"
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 11,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 345,
      "code" : "if sys.Unshareflags != 0 {\n\t_, _, err1 = RawSyscall(SYS_UNSHARE, sys.Unshareflags, 0, 0)\n\tif err1 != 0 {\n\t\tgoto childerror\n\t}\n\n\tif sys.Unshareflags&CLONE_NEWUSER != 0 && sys.GidMappings != nil {\n\t\tdirfd := int(_AT_FDCWD)\n\t\tif fd1, _, err1 = RawSyscall6(SYS_OPENAT, uintptr(dirfd), uintptr(unsafe.Pointer(&psetgroups[0])), uintptr(O_WRONLY), 0, 0, 0); err1 != 0 {\n\t\t\tgoto childerror\n\t\t}\n\t\tr1, _, err1 = RawSyscall(SYS_WRITE, uintptr(fd1), uintptr(unsafe.Pointer(&setgroups[0])), uintptr(len(setgroups)))\n\t\tif err1 != 0 {\n\t\t\tgoto childerror\n\t\t}\n\t\tif _, _, err1 = RawSyscall(SYS_CLOSE, uintptr(fd1), 0, 0); err1 != 0 {\n\t\t\tgoto childerror\n\t\t}\n\n\t\tif fd1, _, err1 = RawSyscall6(SYS_OPENAT, uintptr(dirfd), uintptr(unsafe.Pointer(&pgid[0])), uintptr(O_WRONLY), 0, 0, 0); err1 != 0 {\n\t\t\tgoto childerror\n\t\t}\n\t\tr1, _, err1 = RawSyscall(SYS_WRITE, uintptr(fd1), uintptr(unsafe.Pointer(&gidmap[0])), uintptr(len(gidmap)))\n\t\tif err1 != 0 {\n\t\t\tgoto childerror\n\t\t}\n\t\tif _, _, err1 = RawSyscall(SYS_CLOSE, uintptr(fd1), 0, 0); err1 != 0 {\n\t\t\tgoto childerror\n\t\t}\n\t}\n\n\tif sys.Unshareflags&CLONE_NEWUSER != 0 && sys.UidMappings != nil {\n\t\tdirfd := int(_AT_FDCWD)\n\t\tif fd1, _, err1 = RawSyscall6(SYS_OPENAT, uintptr(dirfd), uintptr(unsafe.Pointer(&puid[0])), uintptr(O_WRONLY), 0, 0, 0); err1 != 0 {\n\t\t\tgoto childerror\n\t\t}\n\t\tr1, _, err1 = RawSyscall(SYS_WRITE, uintptr(fd1), uintptr(unsafe.Pointer(&uidmap[0])), uintptr(len(uidmap)))\n\t\tif err1 != 0 {\n\t\t\tgoto childerror\n\t\t}\n\t\tif _, _, err1 = RawSyscall(SYS_CLOSE, uintptr(fd1), 0, 0); err1 != 0 {\n\t\t\tgoto childerror\n\t\t}\n\t}\n\n\tif sys.Unshareflags&CLONE_NEWNS == CLONE_NEWNS {\n\t\t_, _, err1 = RawSyscall6(SYS_MOUNT, uintptr(unsafe.Pointer(&none[0])), uintptr(unsafe.Pointer(&slash[0])), 0, MS_REC|MS_PRIVATE, 0, 0)\n\t\tif err1 != 0 {\n\t\t\tgoto childerror\n\t\t}\n\t}\n}",
      "entry" : false,
      "use-vars" : [ 6 ]
    }, {
      "update-vars" : [ 9 ],
      "successors" : [ 75 ],
      "in-vars" : [ 6, 24, 3, 21, 13, 20, 17, 29, 2, 19, 15, 1, 0, 4, 16, 32, 18, 7, 12, 14 ],
      "exit" : false,
      "out-vars" : [ 4, 9, 19, 16, 32, 18, 2, 6, 24, 3, 0, 13, 20, 21, 15, 29, 17, 7, 1, 12, 14 ],
      "decl-vars" : [ ],
      "line-start" : 288,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "_"
          }
        }, {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "_"
          }
        }, {
          "go-type" : 27,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "err1",
            "variable" : 9
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 11,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "272"
            }
          }, {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "Unshareflags",
              "variable" : 39
            },
            "go-type" : 11,
            "kind" : "expression",
            "target" : {
              "go-type" : 12,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "sys",
                "variable" : 6
              }
            },
            "type" : "selector"
          }, {
            "go-type" : 11,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          }, {
            "go-type" : 11,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 68,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "RawSyscall"
            }
          },
          "go-type" : 65,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 9 ],
      "line-end" : 288,
      "code" : "_, _, err1 = RawSyscall(SYS_UNSHARE, sys.Unshareflags, 0, 0)",
      "entry" : false,
      "use-vars" : [ 6 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 76, 77 ],
      "in-vars" : [ 6, 13, 21, 32, 18, 15, 9, 20, 29, 2, 4, 12, 3, 16, 17, 7, 14, 24, 1, 0, 19 ],
      "exit" : false,
      "out-vars" : [ 9, 19, 20, 29, 0, 12, 14, 24, 21, 32, 18, 15, 7, 2, 3, 16, 1, 6, 13, 17, 4 ],
      "decl-vars" : [ ],
      "line-start" : 289,
      "ast" : {
        "condition" : {
          "go-type" : 41,
          "kind" : "expression",
          "left" : {
            "go-type" : 27,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "err1",
              "variable" : 9
            }
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 27,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 291,
      "code" : "if err1 != 0 {\n\tgoto childerror\n}",
      "entry" : false,
      "use-vars" : [ 9 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 211 ],
      "in-vars" : [ 9, 7 ],
      "exit" : false,
      "out-vars" : [ 9, 7 ],
      "decl-vars" : [ ],
      "line-start" : 290,
      "ast" : {
        "kind" : "statement",
        "label" : {
          "ident-kind" : "Label",
          "kind" : "ident",
          "value" : "childerror"
        },
        "type" : "goto"
      },
      "assign-vars" : [ ],
      "line-end" : 290,
      "code" : "goto childerror",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 78, 97 ],
      "in-vars" : [ 32, 17, 15, 13, 3, 0, 12, 14, 6, 20, 1, 4, 18, 7, 29, 9, 24, 19, 16, 21, 2 ],
      "exit" : false,
      "out-vars" : [ 24, 3, 20, 16, 29, 2, 14, 13, 32, 15, 7, 0, 4, 12, 21, 1, 17, 6, 19, 18, 9 ],
      "decl-vars" : [ ],
      "line-start" : 293,
      "ast" : {
        "condition" : {
          "go-type" : 41,
          "kind" : "expression",
          "left" : {
            "go-type" : 41,
            "kind" : "expression",
            "left" : {
              "go-type" : 11,
              "kind" : "expression",
              "left" : {
                "field" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "Unshareflags",
                  "variable" : 39
                },
                "go-type" : 11,
                "kind" : "expression",
                "target" : {
                  "go-type" : 12,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "sys",
                    "variable" : 6
                  }
                },
                "type" : "selector"
              },
              "operator" : "&",
              "right" : {
                "go-type" : 11,
                "kind" : "constant",
                "value" : {
                  "type" : "INT",
                  "value" : "268435456"
                }
              },
              "type" : "binary"
            },
            "operator" : "!=",
            "right" : {
              "go-type" : 11,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "0"
              }
            },
            "type" : "binary"
          },
          "operator" : "&&",
          "right" : {
            "go-type" : 41,
            "kind" : "expression",
            "left" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "GidMappings",
                "variable" : 27
              },
              "go-type" : 23,
              "kind" : "expression",
              "target" : {
                "go-type" : 12,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "sys",
                  "variable" : 6
                }
              },
              "type" : "selector"
            },
            "operator" : "!=",
            "right" : {
              "go-type" : 42,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Nil",
                "kind" : "ident",
                "value" : "nil"
              }
            },
            "type" : "binary"
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 316,
      "code" : "if sys.Unshareflags&CLONE_NEWUSER != 0 && sys.GidMappings != nil {\n\tdirfd := int(_AT_FDCWD)\n\tif fd1, _, err1 = RawSyscall6(SYS_OPENAT, uintptr(dirfd), uintptr(unsafe.Pointer(&psetgroups[0])), uintptr(O_WRONLY), 0, 0, 0); err1 != 0 {\n\t\tgoto childerror\n\t}\n\tr1, _, err1 = RawSyscall(SYS_WRITE, uintptr(fd1), uintptr(unsafe.Pointer(&setgroups[0])), uintptr(len(setgroups)))\n\tif err1 != 0 {\n\t\tgoto childerror\n\t}\n\tif _, _, err1 = RawSyscall(SYS_CLOSE, uintptr(fd1), 0, 0); err1 != 0 {\n\t\tgoto childerror\n\t}\n\n\tif fd1, _, err1 = RawSyscall6(SYS_OPENAT, uintptr(dirfd), uintptr(unsafe.Pointer(&pgid[0])), uintptr(O_WRONLY), 0, 0, 0); err1 != 0 {\n\t\tgoto childerror\n\t}\n\tr1, _, err1 = RawSyscall(SYS_WRITE, uintptr(fd1), uintptr(unsafe.Pointer(&gidmap[0])), uintptr(len(gidmap)))\n\tif err1 != 0 {\n\t\tgoto childerror\n\t}\n\tif _, _, err1 = RawSyscall(SYS_CLOSE, uintptr(fd1), 0, 0); err1 != 0 {\n\t\tgoto childerror\n\t}\n}",
      "entry" : false,
      "use-vars" : [ 6 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 80 ],
      "in-vars" : [ 6, 29, 2, 1, 21, 18, 15, 12, 0, 4, 14, 24, 19, 32, 17, 7, 13, 3, 20, 16 ],
      "exit" : false,
      "out-vars" : [ 20, 32, 15, 7, 24, 3, 2, 0, 12, 14, 19, 21, 29, 4, 47, 18, 16, 17, 1, 6, 13 ],
      "decl-vars" : [ 47 ],
      "line-start" : 294,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "dirfd"
          }
        } ],
        "right" : [ {
          "go-type" : 21,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "-100"
          }
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 294,
      "code" : "dirfd := int(_AT_FDCWD)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 81, 82 ],
      "in-vars" : [ 25, 47, 20, 17, 14, 6, 3, 19, 7, 4, 13, 24, 32, 15, 29, 2, 9, 16, 21, 1, 0, 12 ],
      "exit" : false,
      "out-vars" : [ 20, 2, 4, 3, 19, 47, 21, 1, 12, 9, 13, 24, 16, 32, 7, 29, 14, 6, 25, 17, 15, 0 ],
      "decl-vars" : [ ],
      "line-start" : 295,
      "ast" : {
        "condition" : {
          "go-type" : 41,
          "kind" : "expression",
          "left" : {
            "go-type" : 27,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "err1",
              "variable" : 9
            }
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 27,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 297,
      "code" : "if fd1, _, err1 = RawSyscall6(SYS_OPENAT, uintptr(dirfd), uintptr(unsafe.Pointer(&psetgroups[0])), uintptr(O_WRONLY), 0, 0, 0); err1 != 0 {\n\tgoto childerror\n}",
      "entry" : false,
      "use-vars" : [ 9 ]
    }, {
      "update-vars" : [ 9, 25 ],
      "successors" : [ 79 ],
      "in-vars" : [ 21, 17, 15, 2, 14, 3, 19, 16, 32, 1, 0, 4, 12, 6, 13, 18, 47, 20, 29, 24, 7 ],
      "exit" : false,
      "out-vars" : [ 4, 12, 13, 3, 20, 15, 1, 21, 7, 0, 14, 6, 24, 17, 29, 2, 32, 9, 19, 25, 47, 16 ],
      "decl-vars" : [ ],
      "line-start" : 295,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 11,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "fd1",
            "variable" : 25
          }
        }, {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "_"
          }
        }, {
          "go-type" : 27,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "err1",
            "variable" : 9
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 11,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "257"
            }
          }, {
            "coerced-to" : {
              "go-type" : 11,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 11,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "uintptr"
              }
            },
            "go-type" : 11,
            "kind" : "expression",
            "target" : {
              "go-type" : 21,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "dirfd",
                "variable" : 47
              }
            },
            "type" : "cast"
          }, {
            "coerced-to" : {
              "go-type" : 11,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 11,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "uintptr"
              }
            },
            "go-type" : 11,
            "kind" : "expression",
            "target" : {
              "coerced-to" : {
                "go-type" : 69,
                "kind" : "type",
                "qualifier" : {
                  "ident-kind" : "PkgName",
                  "kind" : "ident",
                  "package" : 1,
                  "value" : "unsafe"
                },
                "type" : "identifier",
                "value" : {
                  "go-type" : 69,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "Pointer"
                }
              },
              "go-type" : 69,
              "kind" : "expression",
              "target" : {
                "go-type" : 2,
                "kind" : "expression",
                "operator" : "&",
                "target" : {
                  "go-type" : 3,
                  "index" : {
                    "go-type" : 21,
                    "kind" : "constant",
                    "value" : {
                      "type" : "INT",
                      "value" : "0"
                    }
                  },
                  "kind" : "expression",
                  "target" : {
                    "go-type" : 40,
                    "kind" : "expression",
                    "type" : "identifier",
                    "value" : {
                      "ident-kind" : "Var",
                      "kind" : "ident",
                      "value" : "psetgroups",
                      "variable" : 18
                    }
                  },
                  "type" : "index"
                },
                "type" : "unary"
              },
              "type" : "cast"
            },
            "type" : "cast"
          }, {
            "go-type" : 11,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "1"
            }
          }, {
            "go-type" : 11,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          }, {
            "go-type" : 11,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          }, {
            "go-type" : 11,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 66,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "RawSyscall6"
            }
          },
          "go-type" : 65,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 9, 25 ],
      "line-end" : 295,
      "code" : "fd1, _, err1 = RawSyscall6(SYS_OPENAT, uintptr(dirfd), uintptr(unsafe.Pointer(&psetgroups[0])), uintptr(O_WRONLY), 0, 0, 0)",
      "entry" : false,
      "use-vars" : [ 47, 18 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 211 ],
      "in-vars" : [ 9, 7 ],
      "exit" : false,
      "out-vars" : [ 9, 7 ],
      "decl-vars" : [ ],
      "line-start" : 296,
      "ast" : {
        "kind" : "statement",
        "label" : {
          "ident-kind" : "Label",
          "kind" : "ident",
          "value" : "childerror"
        },
        "type" : "goto"
      },
      "assign-vars" : [ ],
      "line-end" : 296,
      "code" : "goto childerror",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ 9, 8 ],
      "successors" : [ 83 ],
      "in-vars" : [ 3, 25, 21, 15, 2, 14, 6, 19, 47, 20, 16, 17, 29, 12, 13, 32, 7, 1, 0, 4, 24 ],
      "exit" : false,
      "out-vars" : [ 25, 7, 14, 9, 13, 24, 16, 21, 29, 1, 4, 6, 47, 20, 17, 15, 2, 12, 3, 0, 32 ],
      "decl-vars" : [ ],
      "line-start" : 298,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 11,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "r1",
            "variable" : 8
          }
        }, {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "_"
          }
        }, {
          "go-type" : 27,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "err1",
            "variable" : 9
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 11,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "1"
            }
          }, {
            "coerced-to" : {
              "go-type" : 11,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 11,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "uintptr"
              }
            },
            "go-type" : 11,
            "kind" : "expression",
            "target" : {
              "go-type" : 11,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "fd1",
                "variable" : 25
              }
            },
            "type" : "cast"
          }, {
            "coerced-to" : {
              "go-type" : 11,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 11,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "uintptr"
              }
            },
            "go-type" : 11,
            "kind" : "expression",
            "target" : {
              "coerced-to" : {
                "go-type" : 69,
                "kind" : "type",
                "qualifier" : {
                  "ident-kind" : "PkgName",
                  "kind" : "ident",
                  "package" : 1,
                  "value" : "unsafe"
                },
                "type" : "identifier",
                "value" : {
                  "go-type" : 69,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "Pointer"
                }
              },
              "go-type" : 69,
              "kind" : "expression",
              "target" : {
                "go-type" : 2,
                "kind" : "expression",
                "operator" : "&",
                "target" : {
                  "go-type" : 3,
                  "index" : {
                    "go-type" : 21,
                    "kind" : "constant",
                    "value" : {
                      "type" : "INT",
                      "value" : "0"
                    }
                  },
                  "kind" : "expression",
                  "target" : {
                    "go-type" : 40,
                    "kind" : "expression",
                    "type" : "identifier",
                    "value" : {
                      "ident-kind" : "Var",
                      "kind" : "ident",
                      "value" : "setgroups",
                      "variable" : 19
                    }
                  },
                  "type" : "index"
                },
                "type" : "unary"
              },
              "type" : "cast"
            },
            "type" : "cast"
          }, {
            "coerced-to" : {
              "go-type" : 11,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 11,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "uintptr"
              }
            },
            "go-type" : 11,
            "kind" : "expression",
            "target" : {
              "arguments" : [ {
                "go-type" : 40,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "setgroups",
                  "variable" : 19
                }
              } ],
              "ellipsis" : false,
              "function" : {
                "go-type" : 72,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Builtin",
                  "kind" : "ident",
                  "value" : "len"
                }
              },
              "go-type" : 21,
              "kind" : "expression",
              "type" : "call"
            },
            "type" : "cast"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 68,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "RawSyscall"
            }
          },
          "go-type" : 65,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 8, 9 ],
      "line-end" : 298,
      "code" : "r1, _, err1 = RawSyscall(SYS_WRITE, uintptr(fd1), uintptr(unsafe.Pointer(&setgroups[0])), uintptr(len(setgroups)))",
      "entry" : false,
      "use-vars" : [ 25, 19 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 84, 86 ],
      "in-vars" : [ 13, 25, 47, 32, 15, 1, 0, 6, 12, 29, 2, 4, 20, 3, 16, 21, 14, 9, 17, 7, 24 ],
      "exit" : false,
      "out-vars" : [ 7, 25, 21, 2, 14, 6, 24, 3, 15, 29, 1, 9, 20, 17, 32, 0, 4, 12, 13, 47, 16 ],
      "decl-vars" : [ ],
      "line-start" : 299,
      "ast" : {
        "condition" : {
          "go-type" : 41,
          "kind" : "expression",
          "left" : {
            "go-type" : 27,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "err1",
              "variable" : 9
            }
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 27,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 301,
      "code" : "if err1 != 0 {\n\tgoto childerror\n}",
      "entry" : false,
      "use-vars" : [ 9 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 211 ],
      "in-vars" : [ 9, 7 ],
      "exit" : false,
      "out-vars" : [ 9, 7 ],
      "decl-vars" : [ ],
      "line-start" : 300,
      "ast" : {
        "kind" : "statement",
        "label" : {
          "ident-kind" : "Label",
          "kind" : "ident",
          "value" : "childerror"
        },
        "type" : "goto"
      },
      "assign-vars" : [ ],
      "line-end" : 300,
      "code" : "goto childerror",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 87, 89 ],
      "in-vars" : [ 17, 4, 20, 32, 2, 14, 1, 0, 9, 13, 3, 16, 21, 15, 6, 24, 47, 7, 29, 12 ],
      "exit" : false,
      "out-vars" : [ 0, 12, 9, 47, 21, 1, 7, 14, 13, 24, 3, 16, 6, 32, 15, 29, 20, 17, 2, 4 ],
      "decl-vars" : [ ],
      "line-start" : 302,
      "ast" : {
        "condition" : {
          "go-type" : 41,
          "kind" : "expression",
          "left" : {
            "go-type" : 27,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "err1",
              "variable" : 9
            }
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 27,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 304,
      "code" : "if _, _, err1 = RawSyscall(SYS_CLOSE, uintptr(fd1), 0, 0); err1 != 0 {\n\tgoto childerror\n}",
      "entry" : false,
      "use-vars" : [ 9 ]
    }, {
      "update-vars" : [ 9 ],
      "successors" : [ 85 ],
      "in-vars" : [ 25, 17, 6, 20, 16, 21, 32, 29, 14, 24, 3, 47, 15, 2, 13, 1, 0, 4, 12, 7 ],
      "exit" : false,
      "out-vars" : [ 2, 16, 7, 3, 47, 21, 32, 1, 0, 9, 24, 14, 15, 12, 6, 13, 29, 4, 20, 17 ],
      "decl-vars" : [ ],
      "line-start" : 302,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "_"
          }
        }, {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "_"
          }
        }, {
          "go-type" : 27,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "err1",
            "variable" : 9
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 11,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "3"
            }
          }, {
            "coerced-to" : {
              "go-type" : 11,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 11,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "uintptr"
              }
            },
            "go-type" : 11,
            "kind" : "expression",
            "target" : {
              "go-type" : 11,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "fd1",
                "variable" : 25
              }
            },
            "type" : "cast"
          }, {
            "go-type" : 11,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          }, {
            "go-type" : 11,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 68,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "RawSyscall"
            }
          },
          "go-type" : 65,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 9 ],
      "line-end" : 302,
      "code" : "_, _, err1 = RawSyscall(SYS_CLOSE, uintptr(fd1), 0, 0)",
      "entry" : false,
      "use-vars" : [ 25 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 211 ],
      "in-vars" : [ 9, 7 ],
      "exit" : false,
      "out-vars" : [ 9, 7 ],
      "decl-vars" : [ ],
      "line-start" : 303,
      "ast" : {
        "kind" : "statement",
        "label" : {
          "ident-kind" : "Label",
          "kind" : "ident",
          "value" : "childerror"
        },
        "type" : "goto"
      },
      "assign-vars" : [ ],
      "line-end" : 303,
      "code" : "goto childerror",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 90, 91 ],
      "in-vars" : [ 7, 0, 9, 13, 25, 16, 32, 15, 6, 1, 4, 24, 21, 29, 2, 12, 3, 17, 14 ],
      "exit" : false,
      "out-vars" : [ 32, 0, 4, 12, 3, 16, 21, 9, 1, 14, 15, 29, 13, 24, 25, 2, 6, 17, 7 ],
      "decl-vars" : [ ],
      "line-start" : 306,
      "ast" : {
        "condition" : {
          "go-type" : 41,
          "kind" : "expression",
          "left" : {
            "go-type" : 27,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "err1",
              "variable" : 9
            }
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 27,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 308,
      "code" : "if fd1, _, err1 = RawSyscall6(SYS_OPENAT, uintptr(dirfd), uintptr(unsafe.Pointer(&pgid[0])), uintptr(O_WRONLY), 0, 0, 0); err1 != 0 {\n\tgoto childerror\n}",
      "entry" : false,
      "use-vars" : [ 9 ]
    }, {
      "update-vars" : [ 25, 9 ],
      "successors" : [ 88 ],
      "in-vars" : [ 21, 17, 29, 1, 12, 6, 24, 15, 4, 3, 20, 32, 7, 2, 14, 13, 47, 16, 0 ],
      "exit" : false,
      "out-vars" : [ 0, 9, 24, 21, 32, 15, 7, 2, 4, 14, 6, 13, 25, 1, 16, 29, 3, 17, 12 ],
      "decl-vars" : [ ],
      "line-start" : 306,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 11,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "fd1",
            "variable" : 25
          }
        }, {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "_"
          }
        }, {
          "go-type" : 27,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "err1",
            "variable" : 9
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 11,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "257"
            }
          }, {
            "coerced-to" : {
              "go-type" : 11,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 11,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "uintptr"
              }
            },
            "go-type" : 11,
            "kind" : "expression",
            "target" : {
              "go-type" : 21,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "dirfd",
                "variable" : 47
              }
            },
            "type" : "cast"
          }, {
            "coerced-to" : {
              "go-type" : 11,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 11,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "uintptr"
              }
            },
            "go-type" : 11,
            "kind" : "expression",
            "target" : {
              "coerced-to" : {
                "go-type" : 69,
                "kind" : "type",
                "qualifier" : {
                  "ident-kind" : "PkgName",
                  "kind" : "ident",
                  "package" : 1,
                  "value" : "unsafe"
                },
                "type" : "identifier",
                "value" : {
                  "go-type" : 69,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "Pointer"
                }
              },
              "go-type" : 69,
              "kind" : "expression",
              "target" : {
                "go-type" : 2,
                "kind" : "expression",
                "operator" : "&",
                "target" : {
                  "go-type" : 3,
                  "index" : {
                    "go-type" : 21,
                    "kind" : "constant",
                    "value" : {
                      "type" : "INT",
                      "value" : "0"
                    }
                  },
                  "kind" : "expression",
                  "target" : {
                    "go-type" : 40,
                    "kind" : "expression",
                    "type" : "identifier",
                    "value" : {
                      "ident-kind" : "Var",
                      "kind" : "ident",
                      "value" : "pgid",
                      "variable" : 20
                    }
                  },
                  "type" : "index"
                },
                "type" : "unary"
              },
              "type" : "cast"
            },
            "type" : "cast"
          }, {
            "go-type" : 11,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "1"
            }
          }, {
            "go-type" : 11,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          }, {
            "go-type" : 11,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          }, {
            "go-type" : 11,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 66,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "RawSyscall6"
            }
          },
          "go-type" : 65,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 9, 25 ],
      "line-end" : 306,
      "code" : "fd1, _, err1 = RawSyscall6(SYS_OPENAT, uintptr(dirfd), uintptr(unsafe.Pointer(&pgid[0])), uintptr(O_WRONLY), 0, 0, 0)",
      "entry" : false,
      "use-vars" : [ 20, 47 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 211 ],
      "in-vars" : [ 9, 7 ],
      "exit" : false,
      "out-vars" : [ 9, 7 ],
      "decl-vars" : [ ],
      "line-start" : 307,
      "ast" : {
        "kind" : "statement",
        "label" : {
          "ident-kind" : "Label",
          "kind" : "ident",
          "value" : "childerror"
        },
        "type" : "goto"
      },
      "assign-vars" : [ ],
      "line-end" : 307,
      "code" : "goto childerror",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ 9, 8 ],
      "successors" : [ 92 ],
      "in-vars" : [ 6, 13, 16, 1, 0, 3, 29, 12, 24, 25, 32, 17, 15, 7, 4, 14, 21, 2 ],
      "exit" : false,
      "out-vars" : [ 6, 7, 2, 1, 0, 4, 12, 29, 9, 13, 16, 21, 32, 15, 24, 3, 25, 14 ],
      "decl-vars" : [ ],
      "line-start" : 309,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 11,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "r1",
            "variable" : 8
          }
        }, {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "_"
          }
        }, {
          "go-type" : 27,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "err1",
            "variable" : 9
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 11,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "1"
            }
          }, {
            "coerced-to" : {
              "go-type" : 11,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 11,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "uintptr"
              }
            },
            "go-type" : 11,
            "kind" : "expression",
            "target" : {
              "go-type" : 11,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "fd1",
                "variable" : 25
              }
            },
            "type" : "cast"
          }, {
            "coerced-to" : {
              "go-type" : 11,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 11,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "uintptr"
              }
            },
            "go-type" : 11,
            "kind" : "expression",
            "target" : {
              "coerced-to" : {
                "go-type" : 69,
                "kind" : "type",
                "qualifier" : {
                  "ident-kind" : "PkgName",
                  "kind" : "ident",
                  "package" : 1,
                  "value" : "unsafe"
                },
                "type" : "identifier",
                "value" : {
                  "go-type" : 69,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "Pointer"
                }
              },
              "go-type" : 69,
              "kind" : "expression",
              "target" : {
                "go-type" : 2,
                "kind" : "expression",
                "operator" : "&",
                "target" : {
                  "go-type" : 3,
                  "index" : {
                    "go-type" : 21,
                    "kind" : "constant",
                    "value" : {
                      "type" : "INT",
                      "value" : "0"
                    }
                  },
                  "kind" : "expression",
                  "target" : {
                    "go-type" : 40,
                    "kind" : "expression",
                    "type" : "identifier",
                    "value" : {
                      "ident-kind" : "Var",
                      "kind" : "ident",
                      "value" : "gidmap",
                      "variable" : 17
                    }
                  },
                  "type" : "index"
                },
                "type" : "unary"
              },
              "type" : "cast"
            },
            "type" : "cast"
          }, {
            "coerced-to" : {
              "go-type" : 11,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 11,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "uintptr"
              }
            },
            "go-type" : 11,
            "kind" : "expression",
            "target" : {
              "arguments" : [ {
                "go-type" : 40,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "gidmap",
                  "variable" : 17
                }
              } ],
              "ellipsis" : false,
              "function" : {
                "go-type" : 72,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Builtin",
                  "kind" : "ident",
                  "value" : "len"
                }
              },
              "go-type" : 21,
              "kind" : "expression",
              "type" : "call"
            },
            "type" : "cast"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 68,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "RawSyscall"
            }
          },
          "go-type" : 65,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 8, 9 ],
      "line-end" : 309,
      "code" : "r1, _, err1 = RawSyscall(SYS_WRITE, uintptr(fd1), uintptr(unsafe.Pointer(&gidmap[0])), uintptr(len(gidmap)))",
      "entry" : false,
      "use-vars" : [ 25, 17 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 93, 95 ],
      "in-vars" : [ 32, 7, 1, 9, 24, 14, 25, 12, 2, 0, 21, 29, 3, 16, 15, 4, 6, 13 ],
      "exit" : false,
      "out-vars" : [ 4, 9, 7, 32, 12, 3, 16, 25, 21, 15, 2, 6, 13, 1, 0, 14, 24, 29 ],
      "decl-vars" : [ ],
      "line-start" : 310,
      "ast" : {
        "condition" : {
          "go-type" : 41,
          "kind" : "expression",
          "left" : {
            "go-type" : 27,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "err1",
              "variable" : 9
            }
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 27,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 312,
      "code" : "if err1 != 0 {\n\tgoto childerror\n}",
      "entry" : false,
      "use-vars" : [ 9 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 211 ],
      "in-vars" : [ 9, 7 ],
      "exit" : false,
      "out-vars" : [ 7, 9 ],
      "decl-vars" : [ ],
      "line-start" : 311,
      "ast" : {
        "kind" : "statement",
        "label" : {
          "ident-kind" : "Label",
          "kind" : "ident",
          "value" : "childerror"
        },
        "type" : "goto"
      },
      "assign-vars" : [ ],
      "line-end" : 311,
      "code" : "goto childerror",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 96, 97 ],
      "in-vars" : [ 24, 32, 7, 29, 1, 4, 9, 13, 3, 16, 12, 14, 6, 21, 15, 2, 0 ],
      "exit" : false,
      "out-vars" : [ 16, 21, 1, 12, 13, 29, 24, 15, 7, 0, 4, 6, 3, 32, 2, 14, 9 ],
      "decl-vars" : [ ],
      "line-start" : 313,
      "ast" : {
        "condition" : {
          "go-type" : 41,
          "kind" : "expression",
          "left" : {
            "go-type" : 27,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "err1",
              "variable" : 9
            }
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 27,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 315,
      "code" : "if _, _, err1 = RawSyscall(SYS_CLOSE, uintptr(fd1), 0, 0); err1 != 0 {\n\tgoto childerror\n}",
      "entry" : false,
      "use-vars" : [ 9 ]
    }, {
      "update-vars" : [ 9 ],
      "successors" : [ 94 ],
      "in-vars" : [ 15, 7, 29, 0, 4, 3, 21, 32, 13, 24, 25, 12, 1, 14, 6, 16, 2 ],
      "exit" : false,
      "out-vars" : [ 24, 2, 12, 9, 6, 21, 15, 4, 13, 16, 0, 14, 3, 29, 1, 32, 7 ],
      "decl-vars" : [ ],
      "line-start" : 313,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "_"
          }
        }, {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "_"
          }
        }, {
          "go-type" : 27,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "err1",
            "variable" : 9
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 11,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "3"
            }
          }, {
            "coerced-to" : {
              "go-type" : 11,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 11,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "uintptr"
              }
            },
            "go-type" : 11,
            "kind" : "expression",
            "target" : {
              "go-type" : 11,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "fd1",
                "variable" : 25
              }
            },
            "type" : "cast"
          }, {
            "go-type" : 11,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          }, {
            "go-type" : 11,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 68,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "RawSyscall"
            }
          },
          "go-type" : 65,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 9 ],
      "line-end" : 313,
      "code" : "_, _, err1 = RawSyscall(SYS_CLOSE, uintptr(fd1), 0, 0)",
      "entry" : false,
      "use-vars" : [ 25 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 211 ],
      "in-vars" : [ 9, 7 ],
      "exit" : false,
      "out-vars" : [ 9, 7 ],
      "decl-vars" : [ ],
      "line-start" : 314,
      "ast" : {
        "kind" : "statement",
        "label" : {
          "ident-kind" : "Label",
          "kind" : "ident",
          "value" : "childerror"
        },
        "type" : "goto"
      },
      "assign-vars" : [ ],
      "line-end" : 314,
      "code" : "goto childerror",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 98, 108 ],
      "in-vars" : [ 13, 21, 7, 2, 9, 6, 3, 15, 0, 24, 16, 32, 29, 1, 4, 12, 14 ],
      "exit" : false,
      "out-vars" : [ 3, 15, 29, 6, 13, 32, 2, 4, 14, 24, 16, 7, 12, 9, 21, 1, 0 ],
      "decl-vars" : [ ],
      "line-start" : 318,
      "ast" : {
        "condition" : {
          "go-type" : 41,
          "kind" : "expression",
          "left" : {
            "go-type" : 41,
            "kind" : "expression",
            "left" : {
              "go-type" : 11,
              "kind" : "expression",
              "left" : {
                "field" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "Unshareflags",
                  "variable" : 39
                },
                "go-type" : 11,
                "kind" : "expression",
                "target" : {
                  "go-type" : 12,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "sys",
                    "variable" : 6
                  }
                },
                "type" : "selector"
              },
              "operator" : "&",
              "right" : {
                "go-type" : 11,
                "kind" : "constant",
                "value" : {
                  "type" : "INT",
                  "value" : "268435456"
                }
              },
              "type" : "binary"
            },
            "operator" : "!=",
            "right" : {
              "go-type" : 11,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "0"
              }
            },
            "type" : "binary"
          },
          "operator" : "&&",
          "right" : {
            "go-type" : 41,
            "kind" : "expression",
            "left" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "UidMappings",
                "variable" : 26
              },
              "go-type" : 23,
              "kind" : "expression",
              "target" : {
                "go-type" : 12,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "sys",
                  "variable" : 6
                }
              },
              "type" : "selector"
            },
            "operator" : "!=",
            "right" : {
              "go-type" : 42,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Nil",
                "kind" : "ident",
                "value" : "nil"
              }
            },
            "type" : "binary"
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 330,
      "code" : "if sys.Unshareflags&CLONE_NEWUSER != 0 && sys.UidMappings != nil {\n\tdirfd := int(_AT_FDCWD)\n\tif fd1, _, err1 = RawSyscall6(SYS_OPENAT, uintptr(dirfd), uintptr(unsafe.Pointer(&puid[0])), uintptr(O_WRONLY), 0, 0, 0); err1 != 0 {\n\t\tgoto childerror\n\t}\n\tr1, _, err1 = RawSyscall(SYS_WRITE, uintptr(fd1), uintptr(unsafe.Pointer(&uidmap[0])), uintptr(len(uidmap)))\n\tif err1 != 0 {\n\t\tgoto childerror\n\t}\n\tif _, _, err1 = RawSyscall(SYS_CLOSE, uintptr(fd1), 0, 0); err1 != 0 {\n\t\tgoto childerror\n\t}\n}",
      "entry" : false,
      "use-vars" : [ 6 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 100 ],
      "in-vars" : [ 29, 4, 15, 13, 32, 1, 0, 6, 24, 3, 16, 21, 7, 2, 12, 14 ],
      "exit" : false,
      "out-vars" : [ 16, 15, 12, 24, 4, 1, 3, 32, 7, 29, 6, 21, 48, 2, 0, 14, 13 ],
      "decl-vars" : [ 48 ],
      "line-start" : 319,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "dirfd"
          }
        } ],
        "right" : [ {
          "go-type" : 21,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "-100"
          }
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 319,
      "code" : "dirfd := int(_AT_FDCWD)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 101, 102 ],
      "in-vars" : [ 3, 7, 4, 12, 6, 29, 1, 14, 25, 16, 2, 0, 9, 13, 24, 21, 32 ],
      "exit" : false,
      "out-vars" : [ 32, 13, 0, 29, 3, 21, 1, 6, 24, 25, 16, 7, 2, 4, 12, 9, 14 ],
      "decl-vars" : [ ],
      "line-start" : 320,
      "ast" : {
        "condition" : {
          "go-type" : 41,
          "kind" : "expression",
          "left" : {
            "go-type" : 27,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "err1",
              "variable" : 9
            }
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 27,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 322,
      "code" : "if fd1, _, err1 = RawSyscall6(SYS_OPENAT, uintptr(dirfd), uintptr(unsafe.Pointer(&puid[0])), uintptr(O_WRONLY), 0, 0, 0); err1 != 0 {\n\tgoto childerror\n}",
      "entry" : false,
      "use-vars" : [ 9 ]
    }, {
      "update-vars" : [ 9, 25 ],
      "successors" : [ 99 ],
      "in-vars" : [ 24, 3, 21, 15, 7, 29, 32, 48, 12, 14, 4, 6, 13, 16, 2, 1, 0 ],
      "exit" : false,
      "out-vars" : [ 32, 2, 9, 21, 3, 29, 0, 24, 7, 25, 16, 1, 4, 12, 14, 6, 13 ],
      "decl-vars" : [ ],
      "line-start" : 320,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 11,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "fd1",
            "variable" : 25
          }
        }, {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "_"
          }
        }, {
          "go-type" : 27,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "err1",
            "variable" : 9
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 11,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "257"
            }
          }, {
            "coerced-to" : {
              "go-type" : 11,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 11,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "uintptr"
              }
            },
            "go-type" : 11,
            "kind" : "expression",
            "target" : {
              "go-type" : 21,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "dirfd",
                "variable" : 48
              }
            },
            "type" : "cast"
          }, {
            "coerced-to" : {
              "go-type" : 11,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 11,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "uintptr"
              }
            },
            "go-type" : 11,
            "kind" : "expression",
            "target" : {
              "coerced-to" : {
                "go-type" : 69,
                "kind" : "type",
                "qualifier" : {
                  "ident-kind" : "PkgName",
                  "kind" : "ident",
                  "package" : 1,
                  "value" : "unsafe"
                },
                "type" : "identifier",
                "value" : {
                  "go-type" : 69,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "Pointer"
                }
              },
              "go-type" : 69,
              "kind" : "expression",
              "target" : {
                "go-type" : 2,
                "kind" : "expression",
                "operator" : "&",
                "target" : {
                  "go-type" : 3,
                  "index" : {
                    "go-type" : 21,
                    "kind" : "constant",
                    "value" : {
                      "type" : "INT",
                      "value" : "0"
                    }
                  },
                  "kind" : "expression",
                  "target" : {
                    "go-type" : 40,
                    "kind" : "expression",
                    "type" : "identifier",
                    "value" : {
                      "ident-kind" : "Var",
                      "kind" : "ident",
                      "value" : "puid",
                      "variable" : 15
                    }
                  },
                  "type" : "index"
                },
                "type" : "unary"
              },
              "type" : "cast"
            },
            "type" : "cast"
          }, {
            "go-type" : 11,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "1"
            }
          }, {
            "go-type" : 11,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          }, {
            "go-type" : 11,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          }, {
            "go-type" : 11,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 66,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "RawSyscall6"
            }
          },
          "go-type" : 65,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 9, 25 ],
      "line-end" : 320,
      "code" : "fd1, _, err1 = RawSyscall6(SYS_OPENAT, uintptr(dirfd), uintptr(unsafe.Pointer(&puid[0])), uintptr(O_WRONLY), 0, 0, 0)",
      "entry" : false,
      "use-vars" : [ 15, 48 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 211 ],
      "in-vars" : [ 7, 9 ],
      "exit" : false,
      "out-vars" : [ 7, 9 ],
      "decl-vars" : [ ],
      "line-start" : 321,
      "ast" : {
        "kind" : "statement",
        "label" : {
          "ident-kind" : "Label",
          "kind" : "ident",
          "value" : "childerror"
        },
        "type" : "goto"
      },
      "assign-vars" : [ ],
      "line-end" : 321,
      "code" : "goto childerror",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ 9, 8 ],
      "successors" : [ 103 ],
      "in-vars" : [ 4, 24, 21, 32, 1, 25, 7, 2, 0, 14, 6, 3, 16, 12, 13, 29 ],
      "exit" : false,
      "out-vars" : [ 24, 25, 4, 14, 13, 16, 32, 29, 0, 6, 3, 12, 9, 2, 1, 7 ],
      "decl-vars" : [ ],
      "line-start" : 323,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 11,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "r1",
            "variable" : 8
          }
        }, {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "_"
          }
        }, {
          "go-type" : 27,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "err1",
            "variable" : 9
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 11,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "1"
            }
          }, {
            "coerced-to" : {
              "go-type" : 11,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 11,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "uintptr"
              }
            },
            "go-type" : 11,
            "kind" : "expression",
            "target" : {
              "go-type" : 11,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "fd1",
                "variable" : 25
              }
            },
            "type" : "cast"
          }, {
            "coerced-to" : {
              "go-type" : 11,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 11,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "uintptr"
              }
            },
            "go-type" : 11,
            "kind" : "expression",
            "target" : {
              "coerced-to" : {
                "go-type" : 69,
                "kind" : "type",
                "qualifier" : {
                  "ident-kind" : "PkgName",
                  "kind" : "ident",
                  "package" : 1,
                  "value" : "unsafe"
                },
                "type" : "identifier",
                "value" : {
                  "go-type" : 69,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "Pointer"
                }
              },
              "go-type" : 69,
              "kind" : "expression",
              "target" : {
                "go-type" : 2,
                "kind" : "expression",
                "operator" : "&",
                "target" : {
                  "go-type" : 3,
                  "index" : {
                    "go-type" : 21,
                    "kind" : "constant",
                    "value" : {
                      "type" : "INT",
                      "value" : "0"
                    }
                  },
                  "kind" : "expression",
                  "target" : {
                    "go-type" : 40,
                    "kind" : "expression",
                    "type" : "identifier",
                    "value" : {
                      "ident-kind" : "Var",
                      "kind" : "ident",
                      "value" : "uidmap",
                      "variable" : 21
                    }
                  },
                  "type" : "index"
                },
                "type" : "unary"
              },
              "type" : "cast"
            },
            "type" : "cast"
          }, {
            "coerced-to" : {
              "go-type" : 11,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 11,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "uintptr"
              }
            },
            "go-type" : 11,
            "kind" : "expression",
            "target" : {
              "arguments" : [ {
                "go-type" : 40,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "uidmap",
                  "variable" : 21
                }
              } ],
              "ellipsis" : false,
              "function" : {
                "go-type" : 72,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Builtin",
                  "kind" : "ident",
                  "value" : "len"
                }
              },
              "go-type" : 21,
              "kind" : "expression",
              "type" : "call"
            },
            "type" : "cast"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 68,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "RawSyscall"
            }
          },
          "go-type" : 65,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 9, 8 ],
      "line-end" : 323,
      "code" : "r1, _, err1 = RawSyscall(SYS_WRITE, uintptr(fd1), uintptr(unsafe.Pointer(&uidmap[0])), uintptr(len(uidmap)))",
      "entry" : false,
      "use-vars" : [ 21, 25 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 104, 106 ],
      "in-vars" : [ 13, 25, 7, 29, 0, 6, 1, 4, 12, 14, 9, 24, 32, 3, 16, 2 ],
      "exit" : false,
      "out-vars" : [ 7, 2, 14, 12, 9, 16, 32, 29, 0, 6, 24, 3, 25, 13, 1, 4 ],
      "decl-vars" : [ ],
      "line-start" : 324,
      "ast" : {
        "condition" : {
          "go-type" : 41,
          "kind" : "expression",
          "left" : {
            "go-type" : 27,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "err1",
              "variable" : 9
            }
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 27,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 326,
      "code" : "if err1 != 0 {\n\tgoto childerror\n}",
      "entry" : false,
      "use-vars" : [ 9 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 211 ],
      "in-vars" : [ 9, 7 ],
      "exit" : false,
      "out-vars" : [ 9, 7 ],
      "decl-vars" : [ ],
      "line-start" : 325,
      "ast" : {
        "kind" : "statement",
        "label" : {
          "ident-kind" : "Label",
          "kind" : "ident",
          "value" : "childerror"
        },
        "type" : "goto"
      },
      "assign-vars" : [ ],
      "line-end" : 325,
      "code" : "goto childerror",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 107, 108 ],
      "in-vars" : [ 24, 1, 0, 14, 6, 13, 3, 16, 32, 29, 9, 4, 12, 7, 2 ],
      "exit" : false,
      "out-vars" : [ 0, 4, 14, 2, 6, 32, 7, 12, 9, 29, 3, 24, 16, 1, 13 ],
      "decl-vars" : [ ],
      "line-start" : 327,
      "ast" : {
        "condition" : {
          "go-type" : 41,
          "kind" : "expression",
          "left" : {
            "go-type" : 27,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "err1",
              "variable" : 9
            }
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 27,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 329,
      "code" : "if _, _, err1 = RawSyscall(SYS_CLOSE, uintptr(fd1), 0, 0); err1 != 0 {\n\tgoto childerror\n}",
      "entry" : false,
      "use-vars" : [ 9 ]
    }, {
      "update-vars" : [ 9 ],
      "successors" : [ 105 ],
      "in-vars" : [ 25, 29, 16, 1, 0, 6, 13, 24, 3, 7, 2, 14, 32, 4, 12 ],
      "exit" : false,
      "out-vars" : [ 14, 9, 13, 32, 2, 4, 12, 6, 24, 3, 16, 7, 29, 1, 0 ],
      "decl-vars" : [ ],
      "line-start" : 327,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "_"
          }
        }, {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "_"
          }
        }, {
          "go-type" : 27,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "err1",
            "variable" : 9
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 11,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "3"
            }
          }, {
            "coerced-to" : {
              "go-type" : 11,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 11,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "uintptr"
              }
            },
            "go-type" : 11,
            "kind" : "expression",
            "target" : {
              "go-type" : 11,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "fd1",
                "variable" : 25
              }
            },
            "type" : "cast"
          }, {
            "go-type" : 11,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          }, {
            "go-type" : 11,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 68,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "RawSyscall"
            }
          },
          "go-type" : 65,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 9 ],
      "line-end" : 327,
      "code" : "_, _, err1 = RawSyscall(SYS_CLOSE, uintptr(fd1), 0, 0)",
      "entry" : false,
      "use-vars" : [ 25 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 211 ],
      "in-vars" : [ 9, 7 ],
      "exit" : false,
      "out-vars" : [ 7, 9 ],
      "decl-vars" : [ ],
      "line-start" : 328,
      "ast" : {
        "kind" : "statement",
        "label" : {
          "ident-kind" : "Label",
          "kind" : "ident",
          "value" : "childerror"
        },
        "type" : "goto"
      },
      "assign-vars" : [ ],
      "line-end" : 328,
      "code" : "goto childerror",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 109, 112 ],
      "in-vars" : [ 24, 3, 16, 9, 13, 4, 14, 7, 2, 32, 29, 0, 12, 6, 1 ],
      "exit" : false,
      "out-vars" : [ 14, 6, 24, 16, 2, 4, 12, 7, 13, 32, 29, 9, 3, 1, 0 ],
      "decl-vars" : [ ],
      "line-start" : 339,
      "ast" : {
        "condition" : {
          "go-type" : 41,
          "kind" : "expression",
          "left" : {
            "go-type" : 11,
            "kind" : "expression",
            "left" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "Unshareflags",
                "variable" : 39
              },
              "go-type" : 11,
              "kind" : "expression",
              "target" : {
                "go-type" : 12,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "sys",
                  "variable" : 6
                }
              },
              "type" : "selector"
            },
            "operator" : "&",
            "right" : {
              "go-type" : 11,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "131072"
              }
            },
            "type" : "binary"
          },
          "operator" : "==",
          "right" : {
            "go-type" : 11,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "131072"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 344,
      "code" : "if sys.Unshareflags&CLONE_NEWNS == CLONE_NEWNS {\n\t_, _, err1 = RawSyscall6(SYS_MOUNT, uintptr(unsafe.Pointer(&none[0])), uintptr(unsafe.Pointer(&slash[0])), 0, MS_REC|MS_PRIVATE, 0, 0)\n\tif err1 != 0 {\n\t\tgoto childerror\n\t}\n}",
      "entry" : false,
      "use-vars" : [ 6 ]
    }, {
      "update-vars" : [ 9 ],
      "successors" : [ 110 ],
      "in-vars" : [ 0, 1, 13, 24, 3, 32, 6, 29, 12, 16, 2, 4, 14, 7 ],
      "exit" : false,
      "out-vars" : [ 9, 6, 13, 24, 3, 32, 7, 1, 4, 16, 29, 2, 0 ],
      "decl-vars" : [ ],
      "line-start" : 340,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "_"
          }
        }, {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "_"
          }
        }, {
          "go-type" : 27,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "err1",
            "variable" : 9
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 11,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "165"
            }
          }, {
            "coerced-to" : {
              "go-type" : 11,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 11,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "uintptr"
              }
            },
            "go-type" : 11,
            "kind" : "expression",
            "target" : {
              "coerced-to" : {
                "go-type" : 69,
                "kind" : "type",
                "qualifier" : {
                  "ident-kind" : "PkgName",
                  "kind" : "ident",
                  "package" : 1,
                  "value" : "unsafe"
                },
                "type" : "identifier",
                "value" : {
                  "go-type" : 69,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "Pointer"
                }
              },
              "go-type" : 69,
              "kind" : "expression",
              "target" : {
                "go-type" : 2,
                "kind" : "expression",
                "operator" : "&",
                "target" : {
                  "go-type" : 3,
                  "index" : {
                    "go-type" : 21,
                    "kind" : "constant",
                    "value" : {
                      "type" : "INT",
                      "value" : "0"
                    }
                  },
                  "kind" : "expression",
                  "target" : {
                    "go-type" : 29,
                    "kind" : "expression",
                    "type" : "identifier",
                    "value" : {
                      "ident-kind" : "Var",
                      "kind" : "ident",
                      "value" : "none",
                      "variable" : 12
                    }
                  },
                  "type" : "index"
                },
                "type" : "unary"
              },
              "type" : "cast"
            },
            "type" : "cast"
          }, {
            "coerced-to" : {
              "go-type" : 11,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 11,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "uintptr"
              }
            },
            "go-type" : 11,
            "kind" : "expression",
            "target" : {
              "coerced-to" : {
                "go-type" : 69,
                "kind" : "type",
                "qualifier" : {
                  "ident-kind" : "PkgName",
                  "kind" : "ident",
                  "package" : 1,
                  "value" : "unsafe"
                },
                "type" : "identifier",
                "value" : {
                  "go-type" : 69,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "Pointer"
                }
              },
              "go-type" : 69,
              "kind" : "expression",
              "target" : {
                "go-type" : 2,
                "kind" : "expression",
                "operator" : "&",
                "target" : {
                  "go-type" : 3,
                  "index" : {
                    "go-type" : 21,
                    "kind" : "constant",
                    "value" : {
                      "type" : "INT",
                      "value" : "0"
                    }
                  },
                  "kind" : "expression",
                  "target" : {
                    "go-type" : 30,
                    "kind" : "expression",
                    "type" : "identifier",
                    "value" : {
                      "ident-kind" : "Var",
                      "kind" : "ident",
                      "value" : "slash",
                      "variable" : 14
                    }
                  },
                  "type" : "index"
                },
                "type" : "unary"
              },
              "type" : "cast"
            },
            "type" : "cast"
          }, {
            "go-type" : 11,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          }, {
            "go-type" : 11,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "278528"
            }
          }, {
            "go-type" : 11,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          }, {
            "go-type" : 11,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 66,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "RawSyscall6"
            }
          },
          "go-type" : 65,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 9 ],
      "line-end" : 340,
      "code" : "_, _, err1 = RawSyscall6(SYS_MOUNT, uintptr(unsafe.Pointer(&none[0])), uintptr(unsafe.Pointer(&slash[0])), 0, MS_REC|MS_PRIVATE, 0, 0)",
      "entry" : false,
      "use-vars" : [ 12, 14 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 111, 112 ],
      "in-vars" : [ 16, 2, 0, 9, 13, 24, 3, 1, 4, 6, 32, 7, 29 ],
      "exit" : false,
      "out-vars" : [ 24, 3, 32, 29, 1, 0, 9, 13, 7, 2, 4, 6, 16 ],
      "decl-vars" : [ ],
      "line-start" : 341,
      "ast" : {
        "condition" : {
          "go-type" : 41,
          "kind" : "expression",
          "left" : {
            "go-type" : 27,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "err1",
              "variable" : 9
            }
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 27,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 343,
      "code" : "if err1 != 0 {\n\tgoto childerror\n}",
      "entry" : false,
      "use-vars" : [ 9 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 211 ],
      "in-vars" : [ 9, 7 ],
      "exit" : false,
      "out-vars" : [ 9, 7 ],
      "decl-vars" : [ ],
      "line-start" : 342,
      "ast" : {
        "kind" : "statement",
        "label" : {
          "ident-kind" : "Label",
          "kind" : "ident",
          "value" : "childerror"
        },
        "type" : "goto"
      },
      "assign-vars" : [ ],
      "line-end" : 342,
      "code" : "goto childerror",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 113, 117 ],
      "in-vars" : [ 24, 3, 7, 2, 1, 9, 6, 32, 29, 0, 4, 13, 16 ],
      "exit" : false,
      "out-vars" : [ 9, 32, 2, 0, 4, 1, 6, 13, 24, 3, 16, 7, 29 ],
      "decl-vars" : [ ],
      "line-start" : 348,
      "ast" : {
        "condition" : {
          "go-type" : 41,
          "kind" : "expression",
          "left" : {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "chroot",
              "variable" : 3
            }
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 42,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Nil",
              "kind" : "ident",
              "value" : "nil"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 353,
      "code" : "if chroot != nil {\n\t_, _, err1 = RawSyscall(SYS_CHROOT, uintptr(unsafe.Pointer(chroot)), 0, 0)\n\tif err1 != 0 {\n\t\tgoto childerror\n\t}\n}",
      "entry" : false,
      "use-vars" : [ 3 ]
    }, {
      "update-vars" : [ 9 ],
      "successors" : [ 114 ],
      "in-vars" : [ 3, 16, 7, 29, 0, 24, 13, 32, 2, 1, 4, 6 ],
      "exit" : false,
      "out-vars" : [ 1, 4, 6, 13, 16, 7, 29, 2, 9, 24, 32, 0 ],
      "decl-vars" : [ ],
      "line-start" : 349,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "_"
          }
        }, {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "_"
          }
        }, {
          "go-type" : 27,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "err1",
            "variable" : 9
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 11,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "161"
            }
          }, {
            "coerced-to" : {
              "go-type" : 11,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 11,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "uintptr"
              }
            },
            "go-type" : 11,
            "kind" : "expression",
            "target" : {
              "coerced-to" : {
                "go-type" : 69,
                "kind" : "type",
                "qualifier" : {
                  "ident-kind" : "PkgName",
                  "kind" : "ident",
                  "package" : 1,
                  "value" : "unsafe"
                },
                "type" : "identifier",
                "value" : {
                  "go-type" : 69,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "Pointer"
                }
              },
              "go-type" : 69,
              "kind" : "expression",
              "target" : {
                "go-type" : 2,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "chroot",
                  "variable" : 3
                }
              },
              "type" : "cast"
            },
            "type" : "cast"
          }, {
            "go-type" : 11,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          }, {
            "go-type" : 11,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 68,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "RawSyscall"
            }
          },
          "go-type" : 65,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 9 ],
      "line-end" : 349,
      "code" : "_, _, err1 = RawSyscall(SYS_CHROOT, uintptr(unsafe.Pointer(chroot)), 0, 0)",
      "entry" : false,
      "use-vars" : [ 3 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 115, 117 ],
      "in-vars" : [ 6, 13, 24, 32, 29, 2, 0, 9, 16, 7, 1, 4 ],
      "exit" : false,
      "out-vars" : [ 1, 0, 4, 9, 6, 24, 2, 29, 13, 16, 32, 7 ],
      "decl-vars" : [ ],
      "line-start" : 350,
      "ast" : {
        "condition" : {
          "go-type" : 41,
          "kind" : "expression",
          "left" : {
            "go-type" : 27,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "err1",
              "variable" : 9
            }
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 27,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 352,
      "code" : "if err1 != 0 {\n\tgoto childerror\n}",
      "entry" : false,
      "use-vars" : [ 9 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 211 ],
      "in-vars" : [ 9, 7 ],
      "exit" : false,
      "out-vars" : [ 9, 7 ],
      "decl-vars" : [ ],
      "line-start" : 351,
      "ast" : {
        "kind" : "statement",
        "label" : {
          "ident-kind" : "Label",
          "kind" : "ident",
          "value" : "childerror"
        },
        "type" : "goto"
      },
      "assign-vars" : [ ],
      "line-end" : 351,
      "code" : "goto childerror",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 118, 132 ],
      "in-vars" : [ 1, 9, 6, 13, 16, 32, 29, 2, 0, 24, 50, 7, 4 ],
      "exit" : false,
      "out-vars" : [ 50, 16, 7, 29, 0, 2, 1, 4, 9, 6, 13, 24, 32 ],
      "decl-vars" : [ ],
      "line-start" : 356,
      "ast" : {
        "condition" : {
          "go-type" : 41,
          "kind" : "expression",
          "left" : {
            "go-type" : 15,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "cred",
              "variable" : 50
            }
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 42,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Nil",
              "kind" : "ident",
              "value" : "nil"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 376,
      "code" : "if cred := sys.Credential; cred != nil {\n\tngroups := uintptr(len(cred.Groups))\n\tgroups := uintptr(0)\n\tif ngroups > 0 {\n\t\tgroups = uintptr(unsafe.Pointer(&cred.Groups[0]))\n\t}\n\tif !(sys.GidMappings != nil && !sys.GidMappingsEnableSetgroups && ngroups == 0) && !cred.NoSetGroups {\n\t\t_, _, err1 = RawSyscall(_SYS_setgroups, ngroups, groups, 0)\n\t\tif err1 != 0 {\n\t\t\tgoto childerror\n\t\t}\n\t}\n\t_, _, err1 = RawSyscall(sys_SETGID, uintptr(cred.Gid), 0, 0)\n\tif err1 != 0 {\n\t\tgoto childerror\n\t}\n\t_, _, err1 = RawSyscall(sys_SETUID, uintptr(cred.Uid), 0, 0)\n\tif err1 != 0 {\n\t\tgoto childerror\n\t}\n}",
      "entry" : false,
      "use-vars" : [ 50 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 116 ],
      "in-vars" : [ 32, 7, 1, 9, 6, 13, 24, 16, 29, 2, 0, 4 ],
      "exit" : false,
      "out-vars" : [ 24, 16, 7, 1, 0, 4, 9, 13, 50, 32, 29, 2, 6 ],
      "decl-vars" : [ 50 ],
      "line-start" : 356,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "cred"
          }
        } ],
        "right" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "Credential",
            "variable" : 49
          },
          "go-type" : 15,
          "kind" : "expression",
          "target" : {
            "go-type" : 12,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "sys",
              "variable" : 6
            }
          },
          "type" : "selector"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 356,
      "code" : "cred := sys.Credential",
      "entry" : false,
      "use-vars" : [ 6 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 119 ],
      "in-vars" : [ 29, 0, 13, 16, 32, 7, 2, 1, 4, 6, 24, 50 ],
      "exit" : false,
      "out-vars" : [ 7, 29, 2, 0, 13, 24, 50, 32, 1, 4, 6, 52, 16 ],
      "decl-vars" : [ 52 ],
      "line-start" : 357,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "ngroups"
          }
        } ],
        "right" : [ {
          "coerced-to" : {
            "go-type" : 11,
            "kind" : "type",
            "type" : "identifier",
            "value" : {
              "go-type" : 11,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "uintptr"
            }
          },
          "go-type" : 11,
          "kind" : "expression",
          "target" : {
            "arguments" : [ {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "Groups",
                "variable" : 51
              },
              "go-type" : 19,
              "kind" : "expression",
              "target" : {
                "go-type" : 15,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "cred",
                  "variable" : 50
                }
              },
              "type" : "selector"
            } ],
            "ellipsis" : false,
            "function" : {
              "go-type" : 73,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Builtin",
                "kind" : "ident",
                "value" : "len"
              }
            },
            "go-type" : 21,
            "kind" : "expression",
            "type" : "call"
          },
          "type" : "cast"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 357,
      "code" : "ngroups := uintptr(len(cred.Groups))",
      "entry" : false,
      "use-vars" : [ 50 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 120 ],
      "in-vars" : [ 7, 1, 0, 4, 6, 13, 24, 50, 2, 52, 16, 32, 29 ],
      "exit" : false,
      "out-vars" : [ 53, 52, 50, 7, 6, 29, 1, 4, 13, 32, 2, 24, 16, 0 ],
      "decl-vars" : [ 53 ],
      "line-start" : 358,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "groups"
          }
        } ],
        "right" : [ {
          "go-type" : 11,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "0"
          }
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 358,
      "code" : "groups := uintptr(0)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 121, 122 ],
      "in-vars" : [ 24, 16, 13, 52, 32, 7, 53, 50, 29, 2, 1, 0, 4, 6 ],
      "exit" : false,
      "out-vars" : [ 16, 7, 6, 24, 53, 52, 32, 2, 0, 4, 13, 50, 29, 1 ],
      "decl-vars" : [ ],
      "line-start" : 359,
      "ast" : {
        "condition" : {
          "go-type" : 41,
          "kind" : "expression",
          "left" : {
            "go-type" : 11,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "ngroups",
              "variable" : 52
            }
          },
          "operator" : ">",
          "right" : {
            "go-type" : 11,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 361,
      "code" : "if ngroups > 0 {\n\tgroups = uintptr(unsafe.Pointer(&cred.Groups[0]))\n}",
      "entry" : false,
      "use-vars" : [ 52 ]
    }, {
      "update-vars" : [ 53 ],
      "successors" : [ 122 ],
      "in-vars" : [ 6, 24, 50, 16, 7, 29, 13, 52, 32, 2, 1, 0, 4 ],
      "exit" : false,
      "out-vars" : [ 1, 24, 7, 2, 13, 16, 50, 29, 4, 53, 52, 0, 6, 32 ],
      "decl-vars" : [ ],
      "line-start" : 360,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 11,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "groups",
            "variable" : 53
          }
        } ],
        "right" : [ {
          "coerced-to" : {
            "go-type" : 11,
            "kind" : "type",
            "type" : "identifier",
            "value" : {
              "go-type" : 11,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "uintptr"
            }
          },
          "go-type" : 11,
          "kind" : "expression",
          "target" : {
            "coerced-to" : {
              "go-type" : 69,
              "kind" : "type",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 1,
                "value" : "unsafe"
              },
              "type" : "identifier",
              "value" : {
                "go-type" : 69,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "Pointer"
              }
            },
            "go-type" : 69,
            "kind" : "expression",
            "target" : {
              "go-type" : 75,
              "kind" : "expression",
              "operator" : "&",
              "target" : {
                "go-type" : 18,
                "index" : {
                  "go-type" : 21,
                  "kind" : "constant",
                  "value" : {
                    "type" : "INT",
                    "value" : "0"
                  }
                },
                "kind" : "expression",
                "target" : {
                  "field" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "Groups",
                    "variable" : 51
                  },
                  "go-type" : 19,
                  "kind" : "expression",
                  "target" : {
                    "go-type" : 15,
                    "kind" : "expression",
                    "type" : "identifier",
                    "value" : {
                      "ident-kind" : "Var",
                      "kind" : "ident",
                      "value" : "cred",
                      "variable" : 50
                    }
                  },
                  "type" : "selector"
                },
                "type" : "index"
              },
              "type" : "unary"
            },
            "type" : "cast"
          },
          "type" : "cast"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 53 ],
      "line-end" : 360,
      "code" : "groups = uintptr(unsafe.Pointer(&cred.Groups[0]))",
      "entry" : false,
      "use-vars" : [ 50 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 123, 126 ],
      "in-vars" : [ 6, 32, 0, 53, 52, 50, 16, 7, 13, 24, 29, 1, 4, 2 ],
      "exit" : false,
      "out-vars" : [ 2, 4, 6, 50, 7, 52, 29, 32, 1, 13, 24, 16, 53, 0 ],
      "decl-vars" : [ ],
      "line-start" : 362,
      "ast" : {
        "condition" : {
          "go-type" : 20,
          "kind" : "expression",
          "left" : {
            "go-type" : 20,
            "kind" : "expression",
            "operator" : "!",
            "target" : {
              "go-type" : 20,
              "kind" : "expression",
              "target" : {
                "go-type" : 20,
                "kind" : "expression",
                "left" : {
                  "go-type" : 20,
                  "kind" : "expression",
                  "left" : {
                    "go-type" : 20,
                    "kind" : "expression",
                    "left" : {
                      "field" : {
                        "ident-kind" : "Var",
                        "kind" : "ident",
                        "value" : "GidMappings",
                        "variable" : 27
                      },
                      "go-type" : 23,
                      "kind" : "expression",
                      "target" : {
                        "go-type" : 12,
                        "kind" : "expression",
                        "type" : "identifier",
                        "value" : {
                          "ident-kind" : "Var",
                          "kind" : "ident",
                          "value" : "sys",
                          "variable" : 6
                        }
                      },
                      "type" : "selector"
                    },
                    "operator" : "!=",
                    "right" : {
                      "go-type" : 42,
                      "kind" : "expression",
                      "type" : "identifier",
                      "value" : {
                        "ident-kind" : "Nil",
                        "kind" : "ident",
                        "value" : "nil"
                      }
                    },
                    "type" : "binary"
                  },
                  "operator" : "&&",
                  "right" : {
                    "go-type" : 20,
                    "kind" : "expression",
                    "operator" : "!",
                    "target" : {
                      "field" : {
                        "ident-kind" : "Var",
                        "kind" : "ident",
                        "value" : "GidMappingsEnableSetgroups",
                        "variable" : 28
                      },
                      "go-type" : 20,
                      "kind" : "expression",
                      "target" : {
                        "go-type" : 12,
                        "kind" : "expression",
                        "type" : "identifier",
                        "value" : {
                          "ident-kind" : "Var",
                          "kind" : "ident",
                          "value" : "sys",
                          "variable" : 6
                        }
                      },
                      "type" : "selector"
                    },
                    "type" : "unary"
                  },
                  "type" : "binary"
                },
                "operator" : "&&",
                "right" : {
                  "go-type" : 20,
                  "kind" : "expression",
                  "left" : {
                    "go-type" : 11,
                    "kind" : "expression",
                    "type" : "identifier",
                    "value" : {
                      "ident-kind" : "Var",
                      "kind" : "ident",
                      "value" : "ngroups",
                      "variable" : 52
                    }
                  },
                  "operator" : "==",
                  "right" : {
                    "go-type" : 11,
                    "kind" : "constant",
                    "value" : {
                      "type" : "INT",
                      "value" : "0"
                    }
                  },
                  "type" : "binary"
                },
                "type" : "binary"
              },
              "type" : "paren"
            },
            "type" : "unary"
          },
          "operator" : "&&",
          "right" : {
            "go-type" : 20,
            "kind" : "expression",
            "operator" : "!",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "NoSetGroups",
                "variable" : 54
              },
              "go-type" : 20,
              "kind" : "expression",
              "target" : {
                "go-type" : 15,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "cred",
                  "variable" : 50
                }
              },
              "type" : "selector"
            },
            "type" : "unary"
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 367,
      "code" : "if !(sys.GidMappings != nil && !sys.GidMappingsEnableSetgroups && ngroups == 0) && !cred.NoSetGroups {\n\t_, _, err1 = RawSyscall(_SYS_setgroups, ngroups, groups, 0)\n\tif err1 != 0 {\n\t\tgoto childerror\n\t}\n}",
      "entry" : false,
      "use-vars" : [ 6, 52, 50 ]
    }, {
      "update-vars" : [ 9 ],
      "successors" : [ 124 ],
      "in-vars" : [ 6, 24, 16, 32, 29, 1, 53, 7, 2, 13, 52, 50, 0, 4 ],
      "exit" : false,
      "out-vars" : [ 0, 6, 24, 50, 7, 2, 1, 4, 9, 13, 16, 32, 29 ],
      "decl-vars" : [ ],
      "line-start" : 363,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "_"
          }
        }, {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "_"
          }
        }, {
          "go-type" : 27,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "err1",
            "variable" : 9
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 11,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "116"
            }
          }, {
            "go-type" : 11,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "ngroups",
              "variable" : 52
            }
          }, {
            "go-type" : 11,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "groups",
              "variable" : 53
            }
          }, {
            "go-type" : 11,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 68,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "RawSyscall"
            }
          },
          "go-type" : 65,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 9 ],
      "line-end" : 363,
      "code" : "_, _, err1 = RawSyscall(_SYS_setgroups, ngroups, groups, 0)",
      "entry" : false,
      "use-vars" : [ 52, 53 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 125, 126 ],
      "in-vars" : [ 6, 13, 24, 50, 16, 32, 7, 9, 2, 0, 4, 29, 1 ],
      "exit" : false,
      "out-vars" : [ 50, 16, 29, 4, 9, 6, 13, 2, 1, 0, 24, 32, 7 ],
      "decl-vars" : [ ],
      "line-start" : 364,
      "ast" : {
        "condition" : {
          "go-type" : 41,
          "kind" : "expression",
          "left" : {
            "go-type" : 27,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "err1",
              "variable" : 9
            }
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 27,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 366,
      "code" : "if err1 != 0 {\n\tgoto childerror\n}",
      "entry" : false,
      "use-vars" : [ 9 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 211 ],
      "in-vars" : [ 9, 7 ],
      "exit" : false,
      "out-vars" : [ 9, 7 ],
      "decl-vars" : [ ],
      "line-start" : 365,
      "ast" : {
        "kind" : "statement",
        "label" : {
          "ident-kind" : "Label",
          "kind" : "ident",
          "value" : "childerror"
        },
        "type" : "goto"
      },
      "assign-vars" : [ ],
      "line-end" : 365,
      "code" : "goto childerror",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ 9 ],
      "successors" : [ 127 ],
      "in-vars" : [ 32, 2, 6, 13, 50, 16, 0, 4, 24, 7, 29, 1 ],
      "exit" : false,
      "out-vars" : [ 0, 4, 9, 6, 50, 1, 7, 29, 2, 13, 24, 16, 32 ],
      "decl-vars" : [ ],
      "line-start" : 368,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "_"
          }
        }, {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "_"
          }
        }, {
          "go-type" : 27,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "err1",
            "variable" : 9
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 11,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "106"
            }
          }, {
            "coerced-to" : {
              "go-type" : 11,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 11,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "uintptr"
              }
            },
            "go-type" : 11,
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "Gid",
                "variable" : 55
              },
              "go-type" : 18,
              "kind" : "expression",
              "target" : {
                "go-type" : 15,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "cred",
                  "variable" : 50
                }
              },
              "type" : "selector"
            },
            "type" : "cast"
          }, {
            "go-type" : 11,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          }, {
            "go-type" : 11,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 68,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "RawSyscall"
            }
          },
          "go-type" : 65,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 9 ],
      "line-end" : 368,
      "code" : "_, _, err1 = RawSyscall(sys_SETGID, uintptr(cred.Gid), 0, 0)",
      "entry" : false,
      "use-vars" : [ 50 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 128, 129 ],
      "in-vars" : [ 7, 29, 2, 0, 4, 24, 50, 32, 16, 1, 9, 6, 13 ],
      "exit" : false,
      "out-vars" : [ 24, 50, 16, 32, 7, 1, 6, 13, 0, 4, 2, 9, 29 ],
      "decl-vars" : [ ],
      "line-start" : 369,
      "ast" : {
        "condition" : {
          "go-type" : 41,
          "kind" : "expression",
          "left" : {
            "go-type" : 27,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "err1",
              "variable" : 9
            }
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 27,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 371,
      "code" : "if err1 != 0 {\n\tgoto childerror\n}",
      "entry" : false,
      "use-vars" : [ 9 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 211 ],
      "in-vars" : [ 9, 7 ],
      "exit" : false,
      "out-vars" : [ 9, 7 ],
      "decl-vars" : [ ],
      "line-start" : 370,
      "ast" : {
        "kind" : "statement",
        "label" : {
          "ident-kind" : "Label",
          "kind" : "ident",
          "value" : "childerror"
        },
        "type" : "goto"
      },
      "assign-vars" : [ ],
      "line-end" : 370,
      "code" : "goto childerror",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ 9 ],
      "successors" : [ 130 ],
      "in-vars" : [ 29, 4, 6, 13, 24, 50, 16, 7, 32, 2, 1, 0 ],
      "exit" : false,
      "out-vars" : [ 4, 9, 13, 7, 2, 29, 1, 0, 6, 24, 16, 32 ],
      "decl-vars" : [ ],
      "line-start" : 372,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "_"
          }
        }, {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "_"
          }
        }, {
          "go-type" : 27,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "err1",
            "variable" : 9
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 11,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "105"
            }
          }, {
            "coerced-to" : {
              "go-type" : 11,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 11,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "uintptr"
              }
            },
            "go-type" : 11,
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "Uid",
                "variable" : 56
              },
              "go-type" : 18,
              "kind" : "expression",
              "target" : {
                "go-type" : 15,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "cred",
                  "variable" : 50
                }
              },
              "type" : "selector"
            },
            "type" : "cast"
          }, {
            "go-type" : 11,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          }, {
            "go-type" : 11,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 68,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "RawSyscall"
            }
          },
          "go-type" : 65,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 9 ],
      "line-end" : 372,
      "code" : "_, _, err1 = RawSyscall(sys_SETUID, uintptr(cred.Uid), 0, 0)",
      "entry" : false,
      "use-vars" : [ 50 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 131, 132 ],
      "in-vars" : [ 9, 6, 29, 0, 4, 1, 13, 24, 16, 32, 7, 2 ],
      "exit" : false,
      "out-vars" : [ 4, 9, 13, 24, 16, 32, 2, 1, 6, 7, 29, 0 ],
      "decl-vars" : [ ],
      "line-start" : 373,
      "ast" : {
        "condition" : {
          "go-type" : 41,
          "kind" : "expression",
          "left" : {
            "go-type" : 27,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "err1",
              "variable" : 9
            }
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 27,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 375,
      "code" : "if err1 != 0 {\n\tgoto childerror\n}",
      "entry" : false,
      "use-vars" : [ 9 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 211 ],
      "in-vars" : [ 9, 7 ],
      "exit" : false,
      "out-vars" : [ 9, 7 ],
      "decl-vars" : [ ],
      "line-start" : 374,
      "ast" : {
        "kind" : "statement",
        "label" : {
          "ident-kind" : "Label",
          "kind" : "ident",
          "value" : "childerror"
        },
        "type" : "goto"
      },
      "assign-vars" : [ ],
      "line-end" : 374,
      "code" : "goto childerror",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 133, 147 ],
      "in-vars" : [ 9, 6, 13, 24, 16, 7, 29, 1, 4, 32, 2, 0 ],
      "exit" : false,
      "out-vars" : [ 13, 24, 7, 2, 1, 0, 9, 6, 29, 4, 16, 32 ],
      "decl-vars" : [ ],
      "line-start" : 378,
      "ast" : {
        "condition" : {
          "go-type" : 41,
          "kind" : "expression",
          "left" : {
            "arguments" : [ {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "AmbientCaps",
                "variable" : 40
              },
              "go-type" : 10,
              "kind" : "expression",
              "target" : {
                "go-type" : 12,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "sys",
                  "variable" : 6
                }
              },
              "type" : "selector"
            } ],
            "ellipsis" : false,
            "function" : {
              "go-type" : 50,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Builtin",
                "kind" : "ident",
                "value" : "len"
              }
            },
            "go-type" : 21,
            "kind" : "expression",
            "type" : "call"
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 21,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 404,
      "code" : "if len(sys.AmbientCaps) != 0 {\n\n\tcaps.hdr.version = _LINUX_CAPABILITY_VERSION_3\n\n\tif _, _, err1 := RawSyscall(SYS_CAPGET, uintptr(unsafe.Pointer(&caps.hdr)), uintptr(unsafe.Pointer(&caps.data[0])), 0); err1 != 0 {\n\t\tgoto childerror\n\t}\n\n\tfor _, c := range sys.AmbientCaps {\n\n\t\tcaps.data[capToIndex(c)].permitted |= capToMask(c)\n\t\tcaps.data[capToIndex(c)].inheritable |= capToMask(c)\n\t}\n\n\tif _, _, err1 := RawSyscall(SYS_CAPSET, uintptr(unsafe.Pointer(&caps.hdr)), uintptr(unsafe.Pointer(&caps.data[0])), 0); err1 != 0 {\n\t\tgoto childerror\n\t}\n\n\tfor _, c := range sys.AmbientCaps {\n\t\t_, _, err1 = RawSyscall6(SYS_PRCTL, PR_CAP_AMBIENT, uintptr(PR_CAP_AMBIENT_RAISE), c, 0, 0, 0)\n\t\tif err1 != 0 {\n\t\t\tgoto childerror\n\t\t}\n\t}\n}",
      "entry" : false,
      "use-vars" : [ 6 ]
    }, {
      "update-vars" : [ 16 ],
      "successors" : [ 135 ],
      "in-vars" : [ 9, 13, 16, 32, 29, 0, 4, 6, 24, 7, 2, 1 ],
      "exit" : false,
      "out-vars" : [ 4, 6, 24, 32, 2, 1, 0, 9, 13, 16, 7, 29 ],
      "decl-vars" : [ ],
      "line-start" : 381,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "version",
            "variable" : 58
          },
          "go-type" : 18,
          "kind" : "expression",
          "target" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "hdr",
              "variable" : 57
            },
            "go-type" : 34,
            "kind" : "expression",
            "target" : {
              "go-type" : 32,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "caps",
                "variable" : 16
              }
            },
            "type" : "selector"
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "go-type" : 18,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "537396514"
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 381,
      "code" : "caps.hdr.version = _LINUX_CAPABILITY_VERSION_3",
      "entry" : false,
      "use-vars" : [ 16 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 136, 137 ],
      "in-vars" : [ 6, 32, 7, 29, 1, 0, 60, 9, 24, 16, 2, 4, 13 ],
      "exit" : false,
      "out-vars" : [ 6, 16, 32, 2, 0, 9, 24, 7, 29, 1, 4, 13 ],
      "decl-vars" : [ ],
      "line-start" : 383,
      "ast" : {
        "condition" : {
          "go-type" : 41,
          "kind" : "expression",
          "left" : {
            "go-type" : 27,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "err1",
              "variable" : 60
            }
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 27,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 385,
      "code" : "if _, _, err1 := RawSyscall(SYS_CAPGET, uintptr(unsafe.Pointer(&caps.hdr)), uintptr(unsafe.Pointer(&caps.data[0])), 0); err1 != 0 {\n\tgoto childerror\n}",
      "entry" : false,
      "use-vars" : [ 60 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 134 ],
      "in-vars" : [ 24, 7, 2, 1, 4, 13, 6, 16, 32, 29, 0, 9 ],
      "exit" : false,
      "out-vars" : [ 6, 13, 24, 7, 1, 0, 9, 32, 29, 2, 4, 60, 16 ],
      "decl-vars" : [ 60, 66, 67 ],
      "line-start" : 383,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "_"
          }
        }, {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "_"
          }
        }, {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "err1"
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 11,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "125"
            }
          }, {
            "coerced-to" : {
              "go-type" : 11,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 11,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "uintptr"
              }
            },
            "go-type" : 11,
            "kind" : "expression",
            "target" : {
              "coerced-to" : {
                "go-type" : 69,
                "kind" : "type",
                "qualifier" : {
                  "ident-kind" : "PkgName",
                  "kind" : "ident",
                  "package" : 1,
                  "value" : "unsafe"
                },
                "type" : "identifier",
                "value" : {
                  "go-type" : 69,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "Pointer"
                }
              },
              "go-type" : 69,
              "kind" : "expression",
              "target" : {
                "go-type" : 76,
                "kind" : "expression",
                "operator" : "&",
                "target" : {
                  "field" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "hdr",
                    "variable" : 57
                  },
                  "go-type" : 34,
                  "kind" : "expression",
                  "target" : {
                    "go-type" : 32,
                    "kind" : "expression",
                    "type" : "identifier",
                    "value" : {
                      "ident-kind" : "Var",
                      "kind" : "ident",
                      "value" : "caps",
                      "variable" : 16
                    }
                  },
                  "type" : "selector"
                },
                "type" : "unary"
              },
              "type" : "cast"
            },
            "type" : "cast"
          }, {
            "coerced-to" : {
              "go-type" : 11,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 11,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "uintptr"
              }
            },
            "go-type" : 11,
            "kind" : "expression",
            "target" : {
              "coerced-to" : {
                "go-type" : 69,
                "kind" : "type",
                "qualifier" : {
                  "ident-kind" : "PkgName",
                  "kind" : "ident",
                  "package" : 1,
                  "value" : "unsafe"
                },
                "type" : "identifier",
                "value" : {
                  "go-type" : 69,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "Pointer"
                }
              },
              "go-type" : 69,
              "kind" : "expression",
              "target" : {
                "go-type" : 77,
                "kind" : "expression",
                "operator" : "&",
                "target" : {
                  "go-type" : 38,
                  "index" : {
                    "go-type" : 21,
                    "kind" : "constant",
                    "value" : {
                      "type" : "INT",
                      "value" : "0"
                    }
                  },
                  "kind" : "expression",
                  "target" : {
                    "field" : {
                      "ident-kind" : "Var",
                      "kind" : "ident",
                      "value" : "data",
                      "variable" : 59
                    },
                    "go-type" : 37,
                    "kind" : "expression",
                    "target" : {
                      "go-type" : 32,
                      "kind" : "expression",
                      "type" : "identifier",
                      "value" : {
                        "ident-kind" : "Var",
                        "kind" : "ident",
                        "value" : "caps",
                        "variable" : 16
                      }
                    },
                    "type" : "selector"
                  },
                  "type" : "index"
                },
                "type" : "unary"
              },
              "type" : "cast"
            },
            "type" : "cast"
          }, {
            "go-type" : 11,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 68,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "RawSyscall"
            }
          },
          "go-type" : 65,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 383,
      "code" : "_, _, err1 := RawSyscall(SYS_CAPGET, uintptr(unsafe.Pointer(&caps.hdr)), uintptr(unsafe.Pointer(&caps.data[0])), 0)",
      "entry" : false,
      "use-vars" : [ 16 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 211 ],
      "in-vars" : [ 9, 7 ],
      "exit" : false,
      "out-vars" : [ 9, 7 ],
      "decl-vars" : [ ],
      "line-start" : 384,
      "ast" : {
        "kind" : "statement",
        "label" : {
          "ident-kind" : "Label",
          "kind" : "ident",
          "value" : "childerror"
        },
        "type" : "goto"
      },
      "assign-vars" : [ ],
      "line-end" : 384,
      "code" : "goto childerror",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 138, 141 ],
      "in-vars" : [ 29, 2, 1, 6, 13, 24, 16, 32, 9, 7, 0, 4 ],
      "exit" : false,
      "out-vars" : [ 1, 4, 9, 6, 32, 7, 29, 2, 13, 24, 16, 61, 0 ],
      "decl-vars" : [ 61, 68 ],
      "line-start" : 387,
      "ast" : {
        "is-assign" : false,
        "key" : {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "_"
          }
        },
        "kind" : "statement",
        "target" : {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "AmbientCaps",
            "variable" : 40
          },
          "go-type" : 10,
          "kind" : "expression",
          "target" : {
            "go-type" : 12,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "sys",
              "variable" : 6
            }
          },
          "type" : "selector"
        },
        "type" : "range",
        "value" : {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "c"
          }
        }
      },
      "assign-vars" : [ ],
      "line-end" : 392,
      "code" : "for _, c := range sys.AmbientCaps {\n\n\tcaps.data[capToIndex(c)].permitted |= capToMask(c)\n\tcaps.data[capToIndex(c)].inheritable |= capToMask(c)\n}",
      "entry" : false,
      "use-vars" : [ 6 ]
    }, {
      "update-vars" : [ 16 ],
      "successors" : [ 139 ],
      "in-vars" : [ 24, 29, 4, 16, 61, 32, 7, 2, 9, 6, 13, 1, 0 ],
      "exit" : false,
      "out-vars" : [ 13, 16, 4, 7, 29, 2, 9, 6, 24, 61, 32, 1, 0 ],
      "decl-vars" : [ ],
      "line-start" : 390,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "permitted",
            "variable" : 62
          },
          "go-type" : 18,
          "kind" : "expression",
          "target" : {
            "go-type" : 38,
            "index" : {
              "arguments" : [ {
                "go-type" : 11,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "c",
                  "variable" : 61
                }
              } ],
              "ellipsis" : false,
              "function" : {
                "go-type" : 78,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Func",
                  "kind" : "ident",
                  "value" : "capToIndex"
                }
              },
              "go-type" : 11,
              "kind" : "expression",
              "type" : "call"
            },
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "data",
                "variable" : 59
              },
              "go-type" : 37,
              "kind" : "expression",
              "target" : {
                "go-type" : 32,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "caps",
                  "variable" : 16
                }
              },
              "type" : "selector"
            },
            "type" : "index"
          },
          "type" : "selector"
        } ],
        "operator" : "|",
        "right" : [ {
          "arguments" : [ {
            "go-type" : 11,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "c",
              "variable" : 61
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 81,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "capToMask"
            }
          },
          "go-type" : 18,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign-operator"
      },
      "assign-vars" : [ ],
      "line-end" : 390,
      "code" : "caps.data[capToIndex(c)].permitted |= capToMask(c)",
      "entry" : false,
      "use-vars" : [ 61, 16 ]
    }, {
      "update-vars" : [ 16 ],
      "successors" : [ 137 ],
      "in-vars" : [ 6, 13, 24, 61, 7, 29, 1, 9, 0, 32, 2, 4, 16 ],
      "exit" : false,
      "out-vars" : [ 2, 4, 32, 7, 29, 9, 6, 13, 24, 16, 1, 0 ],
      "decl-vars" : [ ],
      "line-start" : 391,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "inheritable",
            "variable" : 63
          },
          "go-type" : 18,
          "kind" : "expression",
          "target" : {
            "go-type" : 38,
            "index" : {
              "arguments" : [ {
                "go-type" : 11,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "c",
                  "variable" : 61
                }
              } ],
              "ellipsis" : false,
              "function" : {
                "go-type" : 78,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Func",
                  "kind" : "ident",
                  "value" : "capToIndex"
                }
              },
              "go-type" : 11,
              "kind" : "expression",
              "type" : "call"
            },
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "data",
                "variable" : 59
              },
              "go-type" : 37,
              "kind" : "expression",
              "target" : {
                "go-type" : 32,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "caps",
                  "variable" : 16
                }
              },
              "type" : "selector"
            },
            "type" : "index"
          },
          "type" : "selector"
        } ],
        "operator" : "|",
        "right" : [ {
          "arguments" : [ {
            "go-type" : 11,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "c",
              "variable" : 61
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 81,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "capToMask"
            }
          },
          "go-type" : 18,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign-operator"
      },
      "assign-vars" : [ ],
      "line-end" : 391,
      "code" : "caps.data[capToIndex(c)].inheritable |= capToMask(c)",
      "entry" : false,
      "use-vars" : [ 16, 61 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 142, 143 ],
      "in-vars" : [ 9, 6, 32, 7, 29, 2, 1, 0, 4, 13, 24, 64 ],
      "exit" : false,
      "out-vars" : [ 2, 1, 4, 6, 24, 32, 29, 9, 13, 7, 0 ],
      "decl-vars" : [ ],
      "line-start" : 394,
      "ast" : {
        "condition" : {
          "go-type" : 41,
          "kind" : "expression",
          "left" : {
            "go-type" : 27,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "err1",
              "variable" : 64
            }
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 27,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 396,
      "code" : "if _, _, err1 := RawSyscall(SYS_CAPSET, uintptr(unsafe.Pointer(&caps.hdr)), uintptr(unsafe.Pointer(&caps.data[0])), 0); err1 != 0 {\n\tgoto childerror\n}",
      "entry" : false,
      "use-vars" : [ 64 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 140 ],
      "in-vars" : [ 6, 32, 29, 16, 7, 2, 1, 0, 9, 13, 24, 4 ],
      "exit" : false,
      "out-vars" : [ 6, 24, 32, 1, 64, 4, 9, 13, 7, 29, 2, 0 ],
      "decl-vars" : [ 69, 70, 64 ],
      "line-start" : 394,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "_"
          }
        }, {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "_"
          }
        }, {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "err1"
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 11,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "126"
            }
          }, {
            "coerced-to" : {
              "go-type" : 11,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 11,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "uintptr"
              }
            },
            "go-type" : 11,
            "kind" : "expression",
            "target" : {
              "coerced-to" : {
                "go-type" : 69,
                "kind" : "type",
                "qualifier" : {
                  "ident-kind" : "PkgName",
                  "kind" : "ident",
                  "package" : 1,
                  "value" : "unsafe"
                },
                "type" : "identifier",
                "value" : {
                  "go-type" : 69,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "Pointer"
                }
              },
              "go-type" : 69,
              "kind" : "expression",
              "target" : {
                "go-type" : 76,
                "kind" : "expression",
                "operator" : "&",
                "target" : {
                  "field" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "hdr",
                    "variable" : 57
                  },
                  "go-type" : 34,
                  "kind" : "expression",
                  "target" : {
                    "go-type" : 32,
                    "kind" : "expression",
                    "type" : "identifier",
                    "value" : {
                      "ident-kind" : "Var",
                      "kind" : "ident",
                      "value" : "caps",
                      "variable" : 16
                    }
                  },
                  "type" : "selector"
                },
                "type" : "unary"
              },
              "type" : "cast"
            },
            "type" : "cast"
          }, {
            "coerced-to" : {
              "go-type" : 11,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 11,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "uintptr"
              }
            },
            "go-type" : 11,
            "kind" : "expression",
            "target" : {
              "coerced-to" : {
                "go-type" : 69,
                "kind" : "type",
                "qualifier" : {
                  "ident-kind" : "PkgName",
                  "kind" : "ident",
                  "package" : 1,
                  "value" : "unsafe"
                },
                "type" : "identifier",
                "value" : {
                  "go-type" : 69,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "Pointer"
                }
              },
              "go-type" : 69,
              "kind" : "expression",
              "target" : {
                "go-type" : 77,
                "kind" : "expression",
                "operator" : "&",
                "target" : {
                  "go-type" : 38,
                  "index" : {
                    "go-type" : 21,
                    "kind" : "constant",
                    "value" : {
                      "type" : "INT",
                      "value" : "0"
                    }
                  },
                  "kind" : "expression",
                  "target" : {
                    "field" : {
                      "ident-kind" : "Var",
                      "kind" : "ident",
                      "value" : "data",
                      "variable" : 59
                    },
                    "go-type" : 37,
                    "kind" : "expression",
                    "target" : {
                      "go-type" : 32,
                      "kind" : "expression",
                      "type" : "identifier",
                      "value" : {
                        "ident-kind" : "Var",
                        "kind" : "ident",
                        "value" : "caps",
                        "variable" : 16
                      }
                    },
                    "type" : "selector"
                  },
                  "type" : "index"
                },
                "type" : "unary"
              },
              "type" : "cast"
            },
            "type" : "cast"
          }, {
            "go-type" : 11,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 68,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "RawSyscall"
            }
          },
          "go-type" : 65,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 394,
      "code" : "_, _, err1 := RawSyscall(SYS_CAPSET, uintptr(unsafe.Pointer(&caps.hdr)), uintptr(unsafe.Pointer(&caps.data[0])), 0)",
      "entry" : false,
      "use-vars" : [ 16 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 211 ],
      "in-vars" : [ 9, 7 ],
      "exit" : false,
      "out-vars" : [ 9, 7 ],
      "decl-vars" : [ ],
      "line-start" : 395,
      "ast" : {
        "kind" : "statement",
        "label" : {
          "ident-kind" : "Label",
          "kind" : "ident",
          "value" : "childerror"
        },
        "type" : "goto"
      },
      "assign-vars" : [ ],
      "line-end" : 395,
      "code" : "goto childerror",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 144, 147 ],
      "in-vars" : [ 29, 2, 0, 4, 6, 13, 24, 32, 7, 1 ],
      "exit" : false,
      "out-vars" : [ 4, 13, 32, 7, 65, 1, 0, 6, 24, 29, 2 ],
      "decl-vars" : [ 65, 71 ],
      "line-start" : 398,
      "ast" : {
        "is-assign" : false,
        "key" : {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "_"
          }
        },
        "kind" : "statement",
        "target" : {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "AmbientCaps",
            "variable" : 40
          },
          "go-type" : 10,
          "kind" : "expression",
          "target" : {
            "go-type" : 12,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "sys",
              "variable" : 6
            }
          },
          "type" : "selector"
        },
        "type" : "range",
        "value" : {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "c"
          }
        }
      },
      "assign-vars" : [ ],
      "line-end" : 403,
      "code" : "for _, c := range sys.AmbientCaps {\n\t_, _, err1 = RawSyscall6(SYS_PRCTL, PR_CAP_AMBIENT, uintptr(PR_CAP_AMBIENT_RAISE), c, 0, 0, 0)\n\tif err1 != 0 {\n\t\tgoto childerror\n\t}\n}",
      "entry" : false,
      "use-vars" : [ 6 ]
    }, {
      "update-vars" : [ 9 ],
      "successors" : [ 145 ],
      "in-vars" : [ 24, 32, 7, 65, 2, 0, 4, 13, 29, 1, 6 ],
      "exit" : false,
      "out-vars" : [ 13, 24, 32, 1, 9, 6, 2, 0, 4, 7, 29 ],
      "decl-vars" : [ ],
      "line-start" : 399,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "_"
          }
        }, {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "_"
          }
        }, {
          "go-type" : 27,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "err1",
            "variable" : 9
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 11,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "157"
            }
          }, {
            "go-type" : 11,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "47"
            }
          }, {
            "go-type" : 11,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "2"
            }
          }, {
            "go-type" : 11,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "c",
              "variable" : 65
            }
          }, {
            "go-type" : 11,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          }, {
            "go-type" : 11,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          }, {
            "go-type" : 11,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 66,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "RawSyscall6"
            }
          },
          "go-type" : 65,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 9 ],
      "line-end" : 399,
      "code" : "_, _, err1 = RawSyscall6(SYS_PRCTL, PR_CAP_AMBIENT, uintptr(PR_CAP_AMBIENT_RAISE), c, 0, 0, 0)",
      "entry" : false,
      "use-vars" : [ 65 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 143, 146 ],
      "in-vars" : [ 24, 32, 29, 2, 0, 9, 6, 13, 4, 7, 1 ],
      "exit" : false,
      "out-vars" : [ 9, 13, 29, 0, 4, 6, 24, 32, 7, 2, 1 ],
      "decl-vars" : [ ],
      "line-start" : 400,
      "ast" : {
        "condition" : {
          "go-type" : 41,
          "kind" : "expression",
          "left" : {
            "go-type" : 27,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "err1",
              "variable" : 9
            }
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 27,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 402,
      "code" : "if err1 != 0 {\n\tgoto childerror\n}",
      "entry" : false,
      "use-vars" : [ 9 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 211 ],
      "in-vars" : [ 9, 7 ],
      "exit" : false,
      "out-vars" : [ 9, 7 ],
      "decl-vars" : [ ],
      "line-start" : 401,
      "ast" : {
        "kind" : "statement",
        "label" : {
          "ident-kind" : "Label",
          "kind" : "ident",
          "value" : "childerror"
        },
        "type" : "goto"
      },
      "assign-vars" : [ ],
      "line-end" : 401,
      "code" : "goto childerror",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 148, 151 ],
      "in-vars" : [ 29, 1, 0, 4, 24, 13, 32, 7, 2, 6 ],
      "exit" : false,
      "out-vars" : [ 13, 24, 1, 0, 2, 4, 6, 32, 7, 29 ],
      "decl-vars" : [ ],
      "line-start" : 407,
      "ast" : {
        "condition" : {
          "go-type" : 41,
          "kind" : "expression",
          "left" : {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "dir",
              "variable" : 4
            }
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 42,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Nil",
              "kind" : "ident",
              "value" : "nil"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 412,
      "code" : "if dir != nil {\n\t_, _, err1 = RawSyscall(SYS_CHDIR, uintptr(unsafe.Pointer(dir)), 0, 0)\n\tif err1 != 0 {\n\t\tgoto childerror\n\t}\n}",
      "entry" : false,
      "use-vars" : [ 4 ]
    }, {
      "update-vars" : [ 9 ],
      "successors" : [ 149 ],
      "in-vars" : [ 6, 24, 7, 29, 4, 13, 32, 2, 1, 0 ],
      "exit" : false,
      "out-vars" : [ 0, 9, 13, 24, 7, 29, 2, 1, 6, 32 ],
      "decl-vars" : [ ],
      "line-start" : 408,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "_"
          }
        }, {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "_"
          }
        }, {
          "go-type" : 27,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "err1",
            "variable" : 9
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 11,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "80"
            }
          }, {
            "coerced-to" : {
              "go-type" : 11,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 11,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "uintptr"
              }
            },
            "go-type" : 11,
            "kind" : "expression",
            "target" : {
              "coerced-to" : {
                "go-type" : 69,
                "kind" : "type",
                "qualifier" : {
                  "ident-kind" : "PkgName",
                  "kind" : "ident",
                  "package" : 1,
                  "value" : "unsafe"
                },
                "type" : "identifier",
                "value" : {
                  "go-type" : 69,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "Pointer"
                }
              },
              "go-type" : 69,
              "kind" : "expression",
              "target" : {
                "go-type" : 2,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "dir",
                  "variable" : 4
                }
              },
              "type" : "cast"
            },
            "type" : "cast"
          }, {
            "go-type" : 11,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          }, {
            "go-type" : 11,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 68,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "RawSyscall"
            }
          },
          "go-type" : 65,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 9 ],
      "line-end" : 408,
      "code" : "_, _, err1 = RawSyscall(SYS_CHDIR, uintptr(unsafe.Pointer(dir)), 0, 0)",
      "entry" : false,
      "use-vars" : [ 4 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 150, 151 ],
      "in-vars" : [ 24, 0, 9, 13, 7, 29, 2, 1, 6, 32 ],
      "exit" : false,
      "out-vars" : [ 0, 9, 24, 32, 29, 1, 6, 13, 7, 2 ],
      "decl-vars" : [ ],
      "line-start" : 409,
      "ast" : {
        "condition" : {
          "go-type" : 41,
          "kind" : "expression",
          "left" : {
            "go-type" : 27,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "err1",
              "variable" : 9
            }
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 27,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 411,
      "code" : "if err1 != 0 {\n\tgoto childerror\n}",
      "entry" : false,
      "use-vars" : [ 9 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 211 ],
      "in-vars" : [ 9, 7 ],
      "exit" : false,
      "out-vars" : [ 9, 7 ],
      "decl-vars" : [ ],
      "line-start" : 410,
      "ast" : {
        "kind" : "statement",
        "label" : {
          "ident-kind" : "Label",
          "kind" : "ident",
          "value" : "childerror"
        },
        "type" : "goto"
      },
      "assign-vars" : [ ],
      "line-end" : 410,
      "code" : "goto childerror",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 152, 161 ],
      "in-vars" : [ 7, 6, 13, 29, 2, 1, 0, 24, 32 ],
      "exit" : false,
      "out-vars" : [ 13, 29, 0, 6, 24, 32, 7, 2, 1 ],
      "decl-vars" : [ ],
      "line-start" : 415,
      "ast" : {
        "condition" : {
          "go-type" : 41,
          "kind" : "expression",
          "left" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "Pdeathsig",
              "variable" : 72
            },
            "go-type" : 22,
            "kind" : "expression",
            "target" : {
              "go-type" : 12,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "sys",
                "variable" : 6
              }
            },
            "type" : "selector"
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 22,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 432,
      "code" : "if sys.Pdeathsig != 0 {\n\t_, _, err1 = RawSyscall6(SYS_PRCTL, PR_SET_PDEATHSIG, uintptr(sys.Pdeathsig), 0, 0, 0, 0)\n\tif err1 != 0 {\n\t\tgoto childerror\n\t}\n\n\tr1, _ = rawSyscallNoError(SYS_GETPPID, 0, 0, 0)\n\tif r1 != ppid {\n\t\tpid, _ := rawSyscallNoError(SYS_GETPID, 0, 0, 0)\n\t\t_, _, err1 := RawSyscall(SYS_KILL, pid, uintptr(sys.Pdeathsig), 0)\n\t\tif err1 != 0 {\n\t\t\tgoto childerror\n\t\t}\n\t}\n}",
      "entry" : false,
      "use-vars" : [ 6 ]
    }, {
      "update-vars" : [ 9 ],
      "successors" : [ 153 ],
      "in-vars" : [ 6, 7, 29, 1, 13, 24, 32, 2, 0 ],
      "exit" : false,
      "out-vars" : [ 29, 2, 9, 13, 24, 32, 7, 6, 1, 0 ],
      "decl-vars" : [ ],
      "line-start" : 416,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "_"
          }
        }, {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "_"
          }
        }, {
          "go-type" : 27,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "err1",
            "variable" : 9
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 11,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "157"
            }
          }, {
            "go-type" : 11,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "1"
            }
          }, {
            "coerced-to" : {
              "go-type" : 11,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 11,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "uintptr"
              }
            },
            "go-type" : 11,
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "Pdeathsig",
                "variable" : 72
              },
              "go-type" : 22,
              "kind" : "expression",
              "target" : {
                "go-type" : 12,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "sys",
                  "variable" : 6
                }
              },
              "type" : "selector"
            },
            "type" : "cast"
          }, {
            "go-type" : 11,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          }, {
            "go-type" : 11,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          }, {
            "go-type" : 11,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          }, {
            "go-type" : 11,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 66,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "RawSyscall6"
            }
          },
          "go-type" : 65,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 9 ],
      "line-end" : 416,
      "code" : "_, _, err1 = RawSyscall6(SYS_PRCTL, PR_SET_PDEATHSIG, uintptr(sys.Pdeathsig), 0, 0, 0, 0)",
      "entry" : false,
      "use-vars" : [ 6 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 154, 155 ],
      "in-vars" : [ 29, 2, 9, 6, 32, 7, 1, 0, 13, 24 ],
      "exit" : false,
      "out-vars" : [ 9, 6, 13, 24, 32, 7, 29, 2, 1, 0 ],
      "decl-vars" : [ ],
      "line-start" : 417,
      "ast" : {
        "condition" : {
          "go-type" : 41,
          "kind" : "expression",
          "left" : {
            "go-type" : 27,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "err1",
              "variable" : 9
            }
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 27,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 419,
      "code" : "if err1 != 0 {\n\tgoto childerror\n}",
      "entry" : false,
      "use-vars" : [ 9 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 211 ],
      "in-vars" : [ 9, 7 ],
      "exit" : false,
      "out-vars" : [ 9, 7 ],
      "decl-vars" : [ ],
      "line-start" : 418,
      "ast" : {
        "kind" : "statement",
        "label" : {
          "ident-kind" : "Label",
          "kind" : "ident",
          "value" : "childerror"
        },
        "type" : "goto"
      },
      "assign-vars" : [ ],
      "line-end" : 418,
      "code" : "goto childerror",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ 8 ],
      "successors" : [ 156 ],
      "in-vars" : [ 29, 1, 9, 6, 7, 2, 0, 13, 24, 32 ],
      "exit" : false,
      "out-vars" : [ 2, 0, 9, 6, 8, 32, 7, 29, 1, 13, 24 ],
      "decl-vars" : [ ],
      "line-start" : 424,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 11,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "r1",
            "variable" : 8
          }
        }, {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "_"
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 11,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "110"
            }
          }, {
            "go-type" : 11,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          }, {
            "go-type" : 11,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          }, {
            "go-type" : 11,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 47,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "rawSyscallNoError"
            }
          },
          "go-type" : 46,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 8 ],
      "line-end" : 424,
      "code" : "r1, _ = rawSyscallNoError(SYS_GETPPID, 0, 0, 0)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 157, 161 ],
      "in-vars" : [ 6, 24, 29, 2, 0, 1, 9, 13, 8, 32, 7 ],
      "exit" : false,
      "out-vars" : [ 24, 7, 2, 9, 6, 13, 32, 1, 0 ],
      "decl-vars" : [ ],
      "line-start" : 425,
      "ast" : {
        "condition" : {
          "go-type" : 41,
          "kind" : "expression",
          "left" : {
            "go-type" : 11,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "r1",
              "variable" : 8
            }
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 11,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "ppid",
              "variable" : 29
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 431,
      "code" : "if r1 != ppid {\n\tpid, _ := rawSyscallNoError(SYS_GETPID, 0, 0, 0)\n\t_, _, err1 := RawSyscall(SYS_KILL, pid, uintptr(sys.Pdeathsig), 0)\n\tif err1 != 0 {\n\t\tgoto childerror\n\t}\n}",
      "entry" : false,
      "use-vars" : [ 8, 29 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 158 ],
      "in-vars" : [ 9, 13, 7, 1, 6, 24, 32, 2, 0 ],
      "exit" : false,
      "out-vars" : [ 6, 24, 73, 7, 9, 13, 32, 2, 1, 0 ],
      "decl-vars" : [ 75, 73 ],
      "line-start" : 426,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "pid"
          }
        }, {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "_"
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 11,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "39"
            }
          }, {
            "go-type" : 11,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          }, {
            "go-type" : 11,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          }, {
            "go-type" : 11,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 47,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "rawSyscallNoError"
            }
          },
          "go-type" : 46,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 426,
      "code" : "pid, _ := rawSyscallNoError(SYS_GETPID, 0, 0, 0)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 159 ],
      "in-vars" : [ 9, 24, 73, 32, 0, 6, 13, 7, 2, 1 ],
      "exit" : false,
      "out-vars" : [ 7, 2, 13, 6, 24, 74, 32, 1, 0, 9 ],
      "decl-vars" : [ 74, 76, 77 ],
      "line-start" : 427,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "_"
          }
        }, {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "_"
          }
        }, {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "err1"
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 11,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "62"
            }
          }, {
            "go-type" : 11,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "pid",
              "variable" : 73
            }
          }, {
            "coerced-to" : {
              "go-type" : 11,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 11,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "uintptr"
              }
            },
            "go-type" : 11,
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "Pdeathsig",
                "variable" : 72
              },
              "go-type" : 22,
              "kind" : "expression",
              "target" : {
                "go-type" : 12,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "sys",
                  "variable" : 6
                }
              },
              "type" : "selector"
            },
            "type" : "cast"
          }, {
            "go-type" : 11,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 68,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "RawSyscall"
            }
          },
          "go-type" : 65,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 427,
      "code" : "_, _, err1 := RawSyscall(SYS_KILL, pid, uintptr(sys.Pdeathsig), 0)",
      "entry" : false,
      "use-vars" : [ 73, 6 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 160, 161 ],
      "in-vars" : [ 24, 32, 7, 2, 1, 0, 9, 6, 13, 74 ],
      "exit" : false,
      "out-vars" : [ 24, 32, 7, 6, 13, 1, 0, 9, 2 ],
      "decl-vars" : [ ],
      "line-start" : 428,
      "ast" : {
        "condition" : {
          "go-type" : 41,
          "kind" : "expression",
          "left" : {
            "go-type" : 27,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "err1",
              "variable" : 74
            }
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 27,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 430,
      "code" : "if err1 != 0 {\n\tgoto childerror\n}",
      "entry" : false,
      "use-vars" : [ 74 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 211 ],
      "in-vars" : [ 9, 7 ],
      "exit" : false,
      "out-vars" : [ 9, 7 ],
      "decl-vars" : [ ],
      "line-start" : 429,
      "ast" : {
        "kind" : "statement",
        "label" : {
          "ident-kind" : "Label",
          "kind" : "ident",
          "value" : "childerror"
        },
        "type" : "goto"
      },
      "assign-vars" : [ ],
      "line-end" : 429,
      "code" : "goto childerror",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 162, 169 ],
      "in-vars" : [ 7, 2, 1, 0, 6, 13, 24, 32 ],
      "exit" : false,
      "out-vars" : [ 32, 7, 2, 1, 0, 6, 13, 24 ],
      "decl-vars" : [ ],
      "line-start" : 436,
      "ast" : {
        "condition" : {
          "go-type" : 41,
          "kind" : "expression",
          "left" : {
            "go-type" : 21,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "pipe",
              "variable" : 7
            }
          },
          "operator" : "<",
          "right" : {
            "go-type" : 21,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "nextfd",
              "variable" : 24
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 444,
      "code" : "if pipe < nextfd {\n\t_, _, err1 = RawSyscall(_SYS_dup, uintptr(pipe), uintptr(nextfd), 0)\n\tif err1 != 0 {\n\t\tgoto childerror\n\t}\n\tRawSyscall(fcntl64Syscall, uintptr(nextfd), F_SETFD, FD_CLOEXEC)\n\tpipe = nextfd\n\tnextfd++\n}",
      "entry" : false,
      "use-vars" : [ 7, 24 ]
    }, {
      "update-vars" : [ 9 ],
      "successors" : [ 163 ],
      "in-vars" : [ 6, 13, 24, 32, 7, 2, 1, 0 ],
      "exit" : false,
      "out-vars" : [ 13, 32, 7, 2, 9, 24, 1, 0, 6 ],
      "decl-vars" : [ ],
      "line-start" : 437,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "_"
          }
        }, {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "_"
          }
        }, {
          "go-type" : 27,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "err1",
            "variable" : 9
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 11,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "33"
            }
          }, {
            "coerced-to" : {
              "go-type" : 11,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 11,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "uintptr"
              }
            },
            "go-type" : 11,
            "kind" : "expression",
            "target" : {
              "go-type" : 21,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "pipe",
                "variable" : 7
              }
            },
            "type" : "cast"
          }, {
            "coerced-to" : {
              "go-type" : 11,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 11,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "uintptr"
              }
            },
            "go-type" : 11,
            "kind" : "expression",
            "target" : {
              "go-type" : 21,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "nextfd",
                "variable" : 24
              }
            },
            "type" : "cast"
          }, {
            "go-type" : 11,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 68,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "RawSyscall"
            }
          },
          "go-type" : 65,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 9 ],
      "line-end" : 437,
      "code" : "_, _, err1 = RawSyscall(_SYS_dup, uintptr(pipe), uintptr(nextfd), 0)",
      "entry" : false,
      "use-vars" : [ 7, 24 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 164, 165 ],
      "in-vars" : [ 13, 24, 32, 7, 2, 0, 9, 6, 1 ],
      "exit" : false,
      "out-vars" : [ 0, 13, 24, 7, 1, 9, 6, 32, 2 ],
      "decl-vars" : [ ],
      "line-start" : 438,
      "ast" : {
        "condition" : {
          "go-type" : 41,
          "kind" : "expression",
          "left" : {
            "go-type" : 27,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "err1",
              "variable" : 9
            }
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 27,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 440,
      "code" : "if err1 != 0 {\n\tgoto childerror\n}",
      "entry" : false,
      "use-vars" : [ 9 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 211 ],
      "in-vars" : [ 7, 9 ],
      "exit" : false,
      "out-vars" : [ 9, 7 ],
      "decl-vars" : [ ],
      "line-start" : 439,
      "ast" : {
        "kind" : "statement",
        "label" : {
          "ident-kind" : "Label",
          "kind" : "ident",
          "value" : "childerror"
        },
        "type" : "goto"
      },
      "assign-vars" : [ ],
      "line-end" : 439,
      "code" : "goto childerror",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 166 ],
      "in-vars" : [ 24, 32, 2, 1, 0, 6, 13 ],
      "exit" : false,
      "out-vars" : [ 0, 6, 13, 24, 32, 2, 1 ],
      "decl-vars" : [ ],
      "line-start" : 441,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 11,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "fcntl64Syscall",
              "variable" : 13
            }
          }, {
            "coerced-to" : {
              "go-type" : 11,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 11,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "uintptr"
              }
            },
            "go-type" : 11,
            "kind" : "expression",
            "target" : {
              "go-type" : 21,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "nextfd",
                "variable" : 24
              }
            },
            "type" : "cast"
          }, {
            "go-type" : 11,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "2"
            }
          }, {
            "go-type" : 11,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "1"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 68,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "RawSyscall"
            }
          },
          "go-type" : 65,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 441,
      "code" : "RawSyscall(fcntl64Syscall, uintptr(nextfd), F_SETFD, FD_CLOEXEC)",
      "entry" : false,
      "use-vars" : [ 24, 13 ]
    }, {
      "update-vars" : [ 7 ],
      "successors" : [ 167 ],
      "in-vars" : [ 32, 2, 1, 0, 6, 13, 24 ],
      "exit" : false,
      "out-vars" : [ 6, 13, 24, 32, 7, 2, 1, 0 ],
      "decl-vars" : [ ],
      "line-start" : 442,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 21,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "pipe",
            "variable" : 7
          }
        } ],
        "right" : [ {
          "go-type" : 21,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "nextfd",
            "variable" : 24
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 7 ],
      "line-end" : 442,
      "code" : "pipe = nextfd",
      "entry" : false,
      "use-vars" : [ 24 ]
    }, {
      "update-vars" : [ 24 ],
      "successors" : [ 169 ],
      "in-vars" : [ 32, 7, 2, 1, 0, 6, 13, 24 ],
      "exit" : false,
      "out-vars" : [ 32, 7, 2, 1, 0, 6, 13, 24 ],
      "decl-vars" : [ ],
      "line-start" : 443,
      "ast" : {
        "kind" : "statement",
        "operation" : "++",
        "target" : {
          "go-type" : 21,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "nextfd",
            "variable" : 24
          }
        },
        "type" : "crement"
      },
      "assign-vars" : [ 24 ],
      "line-end" : 443,
      "code" : "nextfd++",
      "entry" : false,
      "use-vars" : [ 24 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 171, 181 ],
      "in-vars" : [ 13, 23, 7, 1, 6, 24, 32, 2, 0 ],
      "exit" : false,
      "out-vars" : [ 0, 13, 24, 32, 1, 6, 23, 7, 2 ],
      "decl-vars" : [ ],
      "line-start" : 445,
      "ast" : {
        "condition" : {
          "go-type" : 41,
          "kind" : "expression",
          "left" : {
            "go-type" : 21,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "i",
              "variable" : 23
            }
          },
          "operator" : "<",
          "right" : {
            "arguments" : [ {
              "go-type" : 49,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "fd",
                "variable" : 32
              }
            } ],
            "ellipsis" : false,
            "function" : {
              "go-type" : 83,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Builtin",
                "kind" : "ident",
                "value" : "len"
              }
            },
            "go-type" : 21,
            "kind" : "expression",
            "type" : "call"
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "for"
      },
      "assign-vars" : [ ],
      "line-end" : 458,
      "code" : "for i = 0; i < len(fd); i++ {\n\tif fd[i] >= 0 && fd[i] < int(i) {\n\t\tif nextfd == pipe {\n\t\t\tnextfd++\n\t\t}\n\t\t_, _, err1 = RawSyscall(_SYS_dup, uintptr(fd[i]), uintptr(nextfd), 0)\n\t\tif err1 != 0 {\n\t\t\tgoto childerror\n\t\t}\n\t\tRawSyscall(fcntl64Syscall, uintptr(nextfd), F_SETFD, FD_CLOEXEC)\n\t\tfd[i] = nextfd\n\t\tnextfd++\n\t}\n}",
      "entry" : false,
      "use-vars" : [ 23, 32 ]
    }, {
      "update-vars" : [ 23 ],
      "successors" : [ 168 ],
      "in-vars" : [ 32, 7, 2, 1, 0, 6, 13, 24 ],
      "exit" : false,
      "out-vars" : [ 2, 1, 23, 7, 24, 32, 0, 6, 13 ],
      "decl-vars" : [ ],
      "line-start" : 445,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 21,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "i",
            "variable" : 23
          }
        } ],
        "right" : [ {
          "go-type" : 21,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "0"
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 23 ],
      "line-end" : 445,
      "code" : "i = 0",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ 23 ],
      "successors" : [ 168 ],
      "in-vars" : [ 6, 24, 23, 7, 2, 1, 13, 32, 0 ],
      "exit" : false,
      "out-vars" : [ 24, 23, 2, 1, 6, 13, 32, 7, 0 ],
      "decl-vars" : [ ],
      "line-start" : 445,
      "ast" : {
        "kind" : "statement",
        "operation" : "++",
        "target" : {
          "go-type" : 21,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "i",
            "variable" : 23
          }
        },
        "type" : "crement"
      },
      "assign-vars" : [ 23 ],
      "line-end" : 445,
      "code" : "i++",
      "entry" : false,
      "use-vars" : [ 23 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 170, 172 ],
      "in-vars" : [ 1, 0, 24, 32, 23, 7, 6, 13, 2 ],
      "exit" : false,
      "out-vars" : [ 32, 7, 6, 13, 2, 1, 0, 24, 23 ],
      "decl-vars" : [ ],
      "line-start" : 446,
      "ast" : {
        "condition" : {
          "go-type" : 41,
          "kind" : "expression",
          "left" : {
            "go-type" : 41,
            "kind" : "expression",
            "left" : {
              "go-type" : 21,
              "index" : {
                "go-type" : 21,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "i",
                  "variable" : 23
                }
              },
              "kind" : "expression",
              "target" : {
                "go-type" : 49,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "fd",
                  "variable" : 32
                }
              },
              "type" : "index"
            },
            "operator" : ">=",
            "right" : {
              "go-type" : 21,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "0"
              }
            },
            "type" : "binary"
          },
          "operator" : "&&",
          "right" : {
            "go-type" : 41,
            "kind" : "expression",
            "left" : {
              "go-type" : 21,
              "index" : {
                "go-type" : 21,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "i",
                  "variable" : 23
                }
              },
              "kind" : "expression",
              "target" : {
                "go-type" : 49,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "fd",
                  "variable" : 32
                }
              },
              "type" : "index"
            },
            "operator" : "<",
            "right" : {
              "coerced-to" : {
                "go-type" : 21,
                "kind" : "type",
                "type" : "identifier",
                "value" : {
                  "go-type" : 21,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "int"
                }
              },
              "go-type" : 21,
              "kind" : "expression",
              "target" : {
                "go-type" : 21,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "i",
                  "variable" : 23
                }
              },
              "type" : "cast"
            },
            "type" : "binary"
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 457,
      "code" : "if fd[i] >= 0 && fd[i] < int(i) {\n\tif nextfd == pipe {\n\t\tnextfd++\n\t}\n\t_, _, err1 = RawSyscall(_SYS_dup, uintptr(fd[i]), uintptr(nextfd), 0)\n\tif err1 != 0 {\n\t\tgoto childerror\n\t}\n\tRawSyscall(fcntl64Syscall, uintptr(nextfd), F_SETFD, FD_CLOEXEC)\n\tfd[i] = nextfd\n\tnextfd++\n}",
      "entry" : false,
      "use-vars" : [ 23, 32 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 173, 174 ],
      "in-vars" : [ 13, 32, 2, 1, 6, 23, 7, 0, 24 ],
      "exit" : false,
      "out-vars" : [ 13, 32, 7, 6, 24, 23, 2, 1, 0 ],
      "decl-vars" : [ ],
      "line-start" : 447,
      "ast" : {
        "condition" : {
          "go-type" : 41,
          "kind" : "expression",
          "left" : {
            "go-type" : 21,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "nextfd",
              "variable" : 24
            }
          },
          "operator" : "==",
          "right" : {
            "go-type" : 21,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "pipe",
              "variable" : 7
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 449,
      "code" : "if nextfd == pipe {\n\tnextfd++\n}",
      "entry" : false,
      "use-vars" : [ 24, 7 ]
    }, {
      "update-vars" : [ 24 ],
      "successors" : [ 174 ],
      "in-vars" : [ 32, 2, 6, 13, 24, 0, 23, 7, 1 ],
      "exit" : false,
      "out-vars" : [ 7, 13, 23, 32, 2, 1, 0, 6, 24 ],
      "decl-vars" : [ ],
      "line-start" : 448,
      "ast" : {
        "kind" : "statement",
        "operation" : "++",
        "target" : {
          "go-type" : 21,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "nextfd",
            "variable" : 24
          }
        },
        "type" : "crement"
      },
      "assign-vars" : [ 24 ],
      "line-end" : 448,
      "code" : "nextfd++",
      "entry" : false,
      "use-vars" : [ 24 ]
    }, {
      "update-vars" : [ 9 ],
      "successors" : [ 175 ],
      "in-vars" : [ 32, 23, 7, 0, 6, 13, 24, 2, 1 ],
      "exit" : false,
      "out-vars" : [ 7, 2, 1, 0, 9, 6, 13, 24, 32, 23 ],
      "decl-vars" : [ ],
      "line-start" : 450,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "_"
          }
        }, {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "_"
          }
        }, {
          "go-type" : 27,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "err1",
            "variable" : 9
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 11,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "33"
            }
          }, {
            "coerced-to" : {
              "go-type" : 11,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 11,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "uintptr"
              }
            },
            "go-type" : 11,
            "kind" : "expression",
            "target" : {
              "go-type" : 21,
              "index" : {
                "go-type" : 21,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "i",
                  "variable" : 23
                }
              },
              "kind" : "expression",
              "target" : {
                "go-type" : 49,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "fd",
                  "variable" : 32
                }
              },
              "type" : "index"
            },
            "type" : "cast"
          }, {
            "coerced-to" : {
              "go-type" : 11,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 11,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "uintptr"
              }
            },
            "go-type" : 11,
            "kind" : "expression",
            "target" : {
              "go-type" : 21,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "nextfd",
                "variable" : 24
              }
            },
            "type" : "cast"
          }, {
            "go-type" : 11,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 68,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "RawSyscall"
            }
          },
          "go-type" : 65,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 9 ],
      "line-end" : 450,
      "code" : "_, _, err1 = RawSyscall(_SYS_dup, uintptr(fd[i]), uintptr(nextfd), 0)",
      "entry" : false,
      "use-vars" : [ 32, 23, 24 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 176, 177 ],
      "in-vars" : [ 9, 32, 23, 7, 2, 1, 6, 13, 24, 0 ],
      "exit" : false,
      "out-vars" : [ 32, 7, 2, 1, 6, 13, 24, 23, 0, 9 ],
      "decl-vars" : [ ],
      "line-start" : 451,
      "ast" : {
        "condition" : {
          "go-type" : 41,
          "kind" : "expression",
          "left" : {
            "go-type" : 27,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "err1",
              "variable" : 9
            }
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 27,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 453,
      "code" : "if err1 != 0 {\n\tgoto childerror\n}",
      "entry" : false,
      "use-vars" : [ 9 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 211 ],
      "in-vars" : [ 9, 7 ],
      "exit" : false,
      "out-vars" : [ 7, 9 ],
      "decl-vars" : [ ],
      "line-start" : 452,
      "ast" : {
        "kind" : "statement",
        "label" : {
          "ident-kind" : "Label",
          "kind" : "ident",
          "value" : "childerror"
        },
        "type" : "goto"
      },
      "assign-vars" : [ ],
      "line-end" : 452,
      "code" : "goto childerror",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 178 ],
      "in-vars" : [ 6, 24, 32, 0, 13, 23, 7, 2, 1 ],
      "exit" : false,
      "out-vars" : [ 6, 24, 32, 23, 2, 13, 7, 1, 0 ],
      "decl-vars" : [ ],
      "line-start" : 454,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 11,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "fcntl64Syscall",
              "variable" : 13
            }
          }, {
            "coerced-to" : {
              "go-type" : 11,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 11,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "uintptr"
              }
            },
            "go-type" : 11,
            "kind" : "expression",
            "target" : {
              "go-type" : 21,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "nextfd",
                "variable" : 24
              }
            },
            "type" : "cast"
          }, {
            "go-type" : 11,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "2"
            }
          }, {
            "go-type" : 11,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "1"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 68,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "RawSyscall"
            }
          },
          "go-type" : 65,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 454,
      "code" : "RawSyscall(fcntl64Syscall, uintptr(nextfd), F_SETFD, FD_CLOEXEC)",
      "entry" : false,
      "use-vars" : [ 13, 24 ]
    }, {
      "update-vars" : [ 32 ],
      "successors" : [ 179 ],
      "in-vars" : [ 32, 7, 2, 0, 6, 13, 24, 23, 1 ],
      "exit" : false,
      "out-vars" : [ 0, 6, 13, 24, 23, 7, 32, 2, 1 ],
      "decl-vars" : [ ],
      "line-start" : 455,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 21,
          "index" : {
            "go-type" : 21,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "i",
              "variable" : 23
            }
          },
          "kind" : "expression",
          "target" : {
            "go-type" : 49,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "fd",
              "variable" : 32
            }
          },
          "type" : "index"
        } ],
        "right" : [ {
          "go-type" : 21,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "nextfd",
            "variable" : 24
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 455,
      "code" : "fd[i] = nextfd",
      "entry" : false,
      "use-vars" : [ 32, 23, 24 ]
    }, {
      "update-vars" : [ 24 ],
      "successors" : [ 170 ],
      "in-vars" : [ 6, 13, 32, 0, 24, 23, 7, 2, 1 ],
      "exit" : false,
      "out-vars" : [ 7, 2, 24, 32, 23, 0, 6, 13, 1 ],
      "decl-vars" : [ ],
      "line-start" : 456,
      "ast" : {
        "kind" : "statement",
        "operation" : "++",
        "target" : {
          "go-type" : 21,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "nextfd",
            "variable" : 24
          }
        },
        "type" : "crement"
      },
      "assign-vars" : [ 24 ],
      "line-end" : 456,
      "code" : "nextfd++",
      "entry" : false,
      "use-vars" : [ 24 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 183, 195 ],
      "in-vars" : [ 2, 1, 0, 6, 13, 32, 23, 7 ],
      "exit" : false,
      "out-vars" : [ 23, 7, 2, 1, 0, 6, 13, 32 ],
      "decl-vars" : [ ],
      "line-start" : 461,
      "ast" : {
        "condition" : {
          "go-type" : 41,
          "kind" : "expression",
          "left" : {
            "go-type" : 21,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "i",
              "variable" : 23
            }
          },
          "operator" : "<",
          "right" : {
            "arguments" : [ {
              "go-type" : 49,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "fd",
                "variable" : 32
              }
            } ],
            "ellipsis" : false,
            "function" : {
              "go-type" : 83,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Builtin",
                "kind" : "ident",
                "value" : "len"
              }
            },
            "go-type" : 21,
            "kind" : "expression",
            "type" : "call"
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "for"
      },
      "assign-vars" : [ ],
      "line-end" : 481,
      "code" : "for i = 0; i < len(fd); i++ {\n\tif fd[i] == -1 {\n\t\tRawSyscall(SYS_CLOSE, uintptr(i), 0, 0)\n\t\tcontinue\n\t}\n\tif fd[i] == int(i) {\n\n\t\t_, _, err1 = RawSyscall(fcntl64Syscall, uintptr(fd[i]), F_SETFD, 0)\n\t\tif err1 != 0 {\n\t\t\tgoto childerror\n\t\t}\n\t\tcontinue\n\t}\n\n\t_, _, err1 = RawSyscall(_SYS_dup, uintptr(fd[i]), uintptr(i), 0)\n\tif err1 != 0 {\n\t\tgoto childerror\n\t}\n}",
      "entry" : false,
      "use-vars" : [ 23, 32 ]
    }, {
      "update-vars" : [ 23 ],
      "successors" : [ 180 ],
      "in-vars" : [ 1, 0, 6, 13, 32, 7, 2 ],
      "exit" : false,
      "out-vars" : [ 1, 0, 6, 13, 32, 23, 7, 2 ],
      "decl-vars" : [ ],
      "line-start" : 461,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 21,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "i",
            "variable" : 23
          }
        } ],
        "right" : [ {
          "go-type" : 21,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "0"
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 23 ],
      "line-end" : 461,
      "code" : "i = 0",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ 23 ],
      "successors" : [ 180 ],
      "in-vars" : [ 6, 13, 32, 23, 7, 2, 1, 0 ],
      "exit" : false,
      "out-vars" : [ 6, 13, 32, 23, 7, 2, 1, 0 ],
      "decl-vars" : [ ],
      "line-start" : 461,
      "ast" : {
        "kind" : "statement",
        "operation" : "++",
        "target" : {
          "go-type" : 21,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "i",
            "variable" : 23
          }
        },
        "type" : "crement"
      },
      "assign-vars" : [ 23 ],
      "line-end" : 461,
      "code" : "i++",
      "entry" : false,
      "use-vars" : [ 23 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 184, 186 ],
      "in-vars" : [ 7, 2, 1, 0, 6, 13, 32, 23 ],
      "exit" : false,
      "out-vars" : [ 0, 6, 13, 32, 23, 7, 2, 1 ],
      "decl-vars" : [ ],
      "line-start" : 462,
      "ast" : {
        "condition" : {
          "go-type" : 41,
          "kind" : "expression",
          "left" : {
            "go-type" : 21,
            "index" : {
              "go-type" : 21,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "i",
                "variable" : 23
              }
            },
            "kind" : "expression",
            "target" : {
              "go-type" : 49,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "fd",
                "variable" : 32
              }
            },
            "type" : "index"
          },
          "operator" : "==",
          "right" : {
            "go-type" : 21,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "-1"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 465,
      "code" : "if fd[i] == -1 {\n\tRawSyscall(SYS_CLOSE, uintptr(i), 0, 0)\n\tcontinue\n}",
      "entry" : false,
      "use-vars" : [ 32, 23 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 185 ],
      "in-vars" : [ 2, 1, 0, 6, 13, 32, 23, 7 ],
      "exit" : false,
      "out-vars" : [ 23, 7, 2, 1, 0, 6, 13, 32 ],
      "decl-vars" : [ ],
      "line-start" : 463,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 11,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "3"
            }
          }, {
            "coerced-to" : {
              "go-type" : 11,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 11,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "uintptr"
              }
            },
            "go-type" : 11,
            "kind" : "expression",
            "target" : {
              "go-type" : 21,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "i",
                "variable" : 23
              }
            },
            "type" : "cast"
          }, {
            "go-type" : 11,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          }, {
            "go-type" : 11,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 68,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "RawSyscall"
            }
          },
          "go-type" : 65,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 463,
      "code" : "RawSyscall(SYS_CLOSE, uintptr(i), 0, 0)",
      "entry" : false,
      "use-vars" : [ 23 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 182 ],
      "in-vars" : [ 13, 32, 23, 7, 2, 1, 0, 6 ],
      "exit" : false,
      "out-vars" : [ 13, 32, 23, 7, 2, 1, 0, 6 ],
      "decl-vars" : [ ],
      "line-start" : 464,
      "ast" : {
        "kind" : "statement",
        "label" : null,
        "type" : "continue"
      },
      "assign-vars" : [ ],
      "line-end" : 464,
      "code" : "continue",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 187, 191 ],
      "in-vars" : [ 7, 2, 1, 0, 6, 13, 32, 23 ],
      "exit" : false,
      "out-vars" : [ 1, 0, 6, 13, 32, 23, 7, 2 ],
      "decl-vars" : [ ],
      "line-start" : 466,
      "ast" : {
        "condition" : {
          "go-type" : 41,
          "kind" : "expression",
          "left" : {
            "go-type" : 21,
            "index" : {
              "go-type" : 21,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "i",
                "variable" : 23
              }
            },
            "kind" : "expression",
            "target" : {
              "go-type" : 49,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "fd",
                "variable" : 32
              }
            },
            "type" : "index"
          },
          "operator" : "==",
          "right" : {
            "coerced-to" : {
              "go-type" : 21,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 21,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "int"
              }
            },
            "go-type" : 21,
            "kind" : "expression",
            "target" : {
              "go-type" : 21,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "i",
                "variable" : 23
              }
            },
            "type" : "cast"
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 474,
      "code" : "if fd[i] == int(i) {\n\n\t_, _, err1 = RawSyscall(fcntl64Syscall, uintptr(fd[i]), F_SETFD, 0)\n\tif err1 != 0 {\n\t\tgoto childerror\n\t}\n\tcontinue\n}",
      "entry" : false,
      "use-vars" : [ 32, 23 ]
    }, {
      "update-vars" : [ 9 ],
      "successors" : [ 188 ],
      "in-vars" : [ 0, 6, 13, 32, 23, 7, 2, 1 ],
      "exit" : false,
      "out-vars" : [ 9, 6, 13, 2, 32, 23, 7, 1, 0 ],
      "decl-vars" : [ ],
      "line-start" : 469,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "_"
          }
        }, {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "_"
          }
        }, {
          "go-type" : 27,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "err1",
            "variable" : 9
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 11,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "fcntl64Syscall",
              "variable" : 13
            }
          }, {
            "coerced-to" : {
              "go-type" : 11,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 11,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "uintptr"
              }
            },
            "go-type" : 11,
            "kind" : "expression",
            "target" : {
              "go-type" : 21,
              "index" : {
                "go-type" : 21,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "i",
                  "variable" : 23
                }
              },
              "kind" : "expression",
              "target" : {
                "go-type" : 49,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "fd",
                  "variable" : 32
                }
              },
              "type" : "index"
            },
            "type" : "cast"
          }, {
            "go-type" : 11,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "2"
            }
          }, {
            "go-type" : 11,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 68,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "RawSyscall"
            }
          },
          "go-type" : 65,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 9 ],
      "line-end" : 469,
      "code" : "_, _, err1 = RawSyscall(fcntl64Syscall, uintptr(fd[i]), F_SETFD, 0)",
      "entry" : false,
      "use-vars" : [ 13, 32, 23 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 189, 190 ],
      "in-vars" : [ 1, 6, 7, 2, 23, 0, 9, 13, 32 ],
      "exit" : false,
      "out-vars" : [ 23, 7, 9, 13, 32, 0, 6, 2, 1 ],
      "decl-vars" : [ ],
      "line-start" : 470,
      "ast" : {
        "condition" : {
          "go-type" : 41,
          "kind" : "expression",
          "left" : {
            "go-type" : 27,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "err1",
              "variable" : 9
            }
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 27,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 472,
      "code" : "if err1 != 0 {\n\tgoto childerror\n}",
      "entry" : false,
      "use-vars" : [ 9 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 211 ],
      "in-vars" : [ 9, 7 ],
      "exit" : false,
      "out-vars" : [ 9, 7 ],
      "decl-vars" : [ ],
      "line-start" : 471,
      "ast" : {
        "kind" : "statement",
        "label" : {
          "ident-kind" : "Label",
          "kind" : "ident",
          "value" : "childerror"
        },
        "type" : "goto"
      },
      "assign-vars" : [ ],
      "line-end" : 471,
      "code" : "goto childerror",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 182 ],
      "in-vars" : [ 1, 0, 6, 13, 32, 23, 7, 2 ],
      "exit" : false,
      "out-vars" : [ 2, 1, 0, 6, 13, 32, 23, 7 ],
      "decl-vars" : [ ],
      "line-start" : 473,
      "ast" : {
        "kind" : "statement",
        "label" : null,
        "type" : "continue"
      },
      "assign-vars" : [ ],
      "line-end" : 473,
      "code" : "continue",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ 9 ],
      "successors" : [ 192 ],
      "in-vars" : [ 23, 7, 2, 1, 0, 6, 13, 32 ],
      "exit" : false,
      "out-vars" : [ 6, 2, 1, 9, 13, 32, 23, 7, 0 ],
      "decl-vars" : [ ],
      "line-start" : 477,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "_"
          }
        }, {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "_"
          }
        }, {
          "go-type" : 27,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "err1",
            "variable" : 9
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 11,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "33"
            }
          }, {
            "coerced-to" : {
              "go-type" : 11,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 11,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "uintptr"
              }
            },
            "go-type" : 11,
            "kind" : "expression",
            "target" : {
              "go-type" : 21,
              "index" : {
                "go-type" : 21,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "i",
                  "variable" : 23
                }
              },
              "kind" : "expression",
              "target" : {
                "go-type" : 49,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "fd",
                  "variable" : 32
                }
              },
              "type" : "index"
            },
            "type" : "cast"
          }, {
            "coerced-to" : {
              "go-type" : 11,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 11,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "uintptr"
              }
            },
            "go-type" : 11,
            "kind" : "expression",
            "target" : {
              "go-type" : 21,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "i",
                "variable" : 23
              }
            },
            "type" : "cast"
          }, {
            "go-type" : 11,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 68,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "RawSyscall"
            }
          },
          "go-type" : 65,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 9 ],
      "line-end" : 477,
      "code" : "_, _, err1 = RawSyscall(_SYS_dup, uintptr(fd[i]), uintptr(i), 0)",
      "entry" : false,
      "use-vars" : [ 32, 23 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 182, 193 ],
      "in-vars" : [ 7, 2, 0, 9, 23, 32, 1, 6, 13 ],
      "exit" : false,
      "out-vars" : [ 6, 32, 2, 0, 9, 13, 23, 7, 1 ],
      "decl-vars" : [ ],
      "line-start" : 478,
      "ast" : {
        "condition" : {
          "go-type" : 41,
          "kind" : "expression",
          "left" : {
            "go-type" : 27,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "err1",
              "variable" : 9
            }
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 27,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 480,
      "code" : "if err1 != 0 {\n\tgoto childerror\n}",
      "entry" : false,
      "use-vars" : [ 9 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 211 ],
      "in-vars" : [ 9, 7 ],
      "exit" : false,
      "out-vars" : [ 9, 7 ],
      "decl-vars" : [ ],
      "line-start" : 479,
      "ast" : {
        "kind" : "statement",
        "label" : {
          "ident-kind" : "Label",
          "kind" : "ident",
          "value" : "childerror"
        },
        "type" : "goto"
      },
      "assign-vars" : [ ],
      "line-end" : 479,
      "code" : "goto childerror",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 197, 198 ],
      "in-vars" : [ 7, 2, 1, 0, 6, 23 ],
      "exit" : false,
      "out-vars" : [ 6, 23, 7, 2, 1, 0 ],
      "decl-vars" : [ ],
      "line-start" : 487,
      "ast" : {
        "condition" : {
          "go-type" : 41,
          "kind" : "expression",
          "left" : {
            "go-type" : 21,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "i",
              "variable" : 23
            }
          },
          "operator" : "<",
          "right" : {
            "go-type" : 21,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "3"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "for"
      },
      "assign-vars" : [ ],
      "line-end" : 489,
      "code" : "for i = len(fd); i < 3; i++ {\n\tRawSyscall(SYS_CLOSE, uintptr(i), 0, 0)\n}",
      "entry" : false,
      "use-vars" : [ 23 ]
    }, {
      "update-vars" : [ 23 ],
      "successors" : [ 194 ],
      "in-vars" : [ 7, 2, 1, 0, 6, 32 ],
      "exit" : false,
      "out-vars" : [ 7, 2, 1, 0, 6, 23 ],
      "decl-vars" : [ ],
      "line-start" : 487,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 21,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "i",
            "variable" : 23
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 49,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "fd",
              "variable" : 32
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 83,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Builtin",
              "kind" : "ident",
              "value" : "len"
            }
          },
          "go-type" : 21,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 23 ],
      "line-end" : 487,
      "code" : "i = len(fd)",
      "entry" : false,
      "use-vars" : [ 32 ]
    }, {
      "update-vars" : [ 23 ],
      "successors" : [ 194 ],
      "in-vars" : [ 7, 2, 1, 0, 6, 23 ],
      "exit" : false,
      "out-vars" : [ 6, 23, 7, 2, 1, 0 ],
      "decl-vars" : [ ],
      "line-start" : 487,
      "ast" : {
        "kind" : "statement",
        "operation" : "++",
        "target" : {
          "go-type" : 21,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "i",
            "variable" : 23
          }
        },
        "type" : "crement"
      },
      "assign-vars" : [ 23 ],
      "line-end" : 487,
      "code" : "i++",
      "entry" : false,
      "use-vars" : [ 23 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 196 ],
      "in-vars" : [ 6, 23, 7, 2, 1, 0 ],
      "exit" : false,
      "out-vars" : [ 0, 6, 23, 7, 2, 1 ],
      "decl-vars" : [ ],
      "line-start" : 488,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 11,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "3"
            }
          }, {
            "coerced-to" : {
              "go-type" : 11,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 11,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "uintptr"
              }
            },
            "go-type" : 11,
            "kind" : "expression",
            "target" : {
              "go-type" : 21,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "i",
                "variable" : 23
              }
            },
            "type" : "cast"
          }, {
            "go-type" : 11,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          }, {
            "go-type" : 11,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 68,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "RawSyscall"
            }
          },
          "go-type" : 65,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 488,
      "code" : "RawSyscall(SYS_CLOSE, uintptr(i), 0, 0)",
      "entry" : false,
      "use-vars" : [ 23 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 199, 202 ],
      "in-vars" : [ 0, 6, 7, 2, 1 ],
      "exit" : false,
      "out-vars" : [ 6, 7, 2, 1, 0 ],
      "decl-vars" : [ ],
      "line-start" : 492,
      "ast" : {
        "condition" : {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "Noctty",
            "variable" : 78
          },
          "go-type" : 20,
          "kind" : "expression",
          "target" : {
            "go-type" : 12,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "sys",
              "variable" : 6
            }
          },
          "type" : "selector"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 497,
      "code" : "if sys.Noctty {\n\t_, _, err1 = RawSyscall(SYS_IOCTL, 0, uintptr(TIOCNOTTY), 0)\n\tif err1 != 0 {\n\t\tgoto childerror\n\t}\n}",
      "entry" : false,
      "use-vars" : [ 6 ]
    }, {
      "update-vars" : [ 9 ],
      "successors" : [ 200 ],
      "in-vars" : [ 7, 2, 1, 0, 6 ],
      "exit" : false,
      "out-vars" : [ 2, 1, 0, 9, 6, 7 ],
      "decl-vars" : [ ],
      "line-start" : 493,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "_"
          }
        }, {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "_"
          }
        }, {
          "go-type" : 27,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "err1",
            "variable" : 9
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 11,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "16"
            }
          }, {
            "go-type" : 11,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          }, {
            "go-type" : 11,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "21538"
            }
          }, {
            "go-type" : 11,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 68,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "RawSyscall"
            }
          },
          "go-type" : 65,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 9 ],
      "line-end" : 493,
      "code" : "_, _, err1 = RawSyscall(SYS_IOCTL, 0, uintptr(TIOCNOTTY), 0)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 201, 202 ],
      "in-vars" : [ 1, 0, 9, 6, 7, 2 ],
      "exit" : false,
      "out-vars" : [ 9, 6, 7, 2, 1, 0 ],
      "decl-vars" : [ ],
      "line-start" : 494,
      "ast" : {
        "condition" : {
          "go-type" : 41,
          "kind" : "expression",
          "left" : {
            "go-type" : 27,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "err1",
              "variable" : 9
            }
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 27,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 496,
      "code" : "if err1 != 0 {\n\tgoto childerror\n}",
      "entry" : false,
      "use-vars" : [ 9 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 211 ],
      "in-vars" : [ 7, 9 ],
      "exit" : false,
      "out-vars" : [ 9, 7 ],
      "decl-vars" : [ ],
      "line-start" : 495,
      "ast" : {
        "kind" : "statement",
        "label" : {
          "ident-kind" : "Label",
          "kind" : "ident",
          "value" : "childerror"
        },
        "type" : "goto"
      },
      "assign-vars" : [ ],
      "line-end" : 495,
      "code" : "goto childerror",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 203, 206 ],
      "in-vars" : [ 1, 0, 6, 7, 2 ],
      "exit" : false,
      "out-vars" : [ 2, 1, 0, 6, 7 ],
      "decl-vars" : [ ],
      "line-start" : 500,
      "ast" : {
        "condition" : {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "Setctty",
            "variable" : 79
          },
          "go-type" : 20,
          "kind" : "expression",
          "target" : {
            "go-type" : 12,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "sys",
              "variable" : 6
            }
          },
          "type" : "selector"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 505,
      "code" : "if sys.Setctty {\n\t_, _, err1 = RawSyscall(SYS_IOCTL, uintptr(sys.Ctty), uintptr(TIOCSCTTY), 1)\n\tif err1 != 0 {\n\t\tgoto childerror\n\t}\n}",
      "entry" : false,
      "use-vars" : [ 6 ]
    }, {
      "update-vars" : [ 9 ],
      "successors" : [ 204 ],
      "in-vars" : [ 1, 0, 6, 7, 2 ],
      "exit" : false,
      "out-vars" : [ 9, 6, 7, 2, 1, 0 ],
      "decl-vars" : [ ],
      "line-start" : 501,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "_"
          }
        }, {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "_"
          }
        }, {
          "go-type" : 27,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "err1",
            "variable" : 9
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 11,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "16"
            }
          }, {
            "coerced-to" : {
              "go-type" : 11,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 11,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "uintptr"
              }
            },
            "go-type" : 11,
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "Ctty",
                "variable" : 46
              },
              "go-type" : 21,
              "kind" : "expression",
              "target" : {
                "go-type" : 12,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "sys",
                  "variable" : 6
                }
              },
              "type" : "selector"
            },
            "type" : "cast"
          }, {
            "go-type" : 11,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "21518"
            }
          }, {
            "go-type" : 11,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "1"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 68,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "RawSyscall"
            }
          },
          "go-type" : 65,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 9 ],
      "line-end" : 501,
      "code" : "_, _, err1 = RawSyscall(SYS_IOCTL, uintptr(sys.Ctty), uintptr(TIOCSCTTY), 1)",
      "entry" : false,
      "use-vars" : [ 6 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 205, 206 ],
      "in-vars" : [ 1, 0, 9, 6, 7, 2 ],
      "exit" : false,
      "out-vars" : [ 7, 2, 1, 0, 9, 6 ],
      "decl-vars" : [ ],
      "line-start" : 502,
      "ast" : {
        "condition" : {
          "go-type" : 41,
          "kind" : "expression",
          "left" : {
            "go-type" : 27,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "err1",
              "variable" : 9
            }
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 27,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 504,
      "code" : "if err1 != 0 {\n\tgoto childerror\n}",
      "entry" : false,
      "use-vars" : [ 9 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 211 ],
      "in-vars" : [ 7, 9 ],
      "exit" : false,
      "out-vars" : [ 9, 7 ],
      "decl-vars" : [ ],
      "line-start" : 503,
      "ast" : {
        "kind" : "statement",
        "label" : {
          "ident-kind" : "Label",
          "kind" : "ident",
          "value" : "childerror"
        },
        "type" : "goto"
      },
      "assign-vars" : [ ],
      "line-end" : 503,
      "code" : "goto childerror",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 207, 210 ],
      "in-vars" : [ 2, 1, 0, 6, 7 ],
      "exit" : false,
      "out-vars" : [ 7, 2, 1, 0 ],
      "decl-vars" : [ ],
      "line-start" : 510,
      "ast" : {
        "condition" : {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "Ptrace",
            "variable" : 80
          },
          "go-type" : 20,
          "kind" : "expression",
          "target" : {
            "go-type" : 12,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "sys",
              "variable" : 6
            }
          },
          "type" : "selector"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 515,
      "code" : "if sys.Ptrace {\n\t_, _, err1 = RawSyscall(SYS_PTRACE, uintptr(PTRACE_TRACEME), 0, 0)\n\tif err1 != 0 {\n\t\tgoto childerror\n\t}\n}",
      "entry" : false,
      "use-vars" : [ 6 ]
    }, {
      "update-vars" : [ 9 ],
      "successors" : [ 208 ],
      "in-vars" : [ 7, 2, 1, 0 ],
      "exit" : false,
      "out-vars" : [ 9, 7, 2, 1, 0 ],
      "decl-vars" : [ ],
      "line-start" : 511,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "_"
          }
        }, {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "_"
          }
        }, {
          "go-type" : 27,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "err1",
            "variable" : 9
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 11,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "101"
            }
          }, {
            "go-type" : 11,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          }, {
            "go-type" : 11,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          }, {
            "go-type" : 11,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 68,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "RawSyscall"
            }
          },
          "go-type" : 65,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 9 ],
      "line-end" : 511,
      "code" : "_, _, err1 = RawSyscall(SYS_PTRACE, uintptr(PTRACE_TRACEME), 0, 0)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 209, 210 ],
      "in-vars" : [ 9, 7, 2, 1, 0 ],
      "exit" : false,
      "out-vars" : [ 9, 7, 2, 1, 0 ],
      "decl-vars" : [ ],
      "line-start" : 512,
      "ast" : {
        "condition" : {
          "go-type" : 41,
          "kind" : "expression",
          "left" : {
            "go-type" : 27,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "err1",
              "variable" : 9
            }
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 27,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 514,
      "code" : "if err1 != 0 {\n\tgoto childerror\n}",
      "entry" : false,
      "use-vars" : [ 9 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 211 ],
      "in-vars" : [ 9, 7 ],
      "exit" : false,
      "out-vars" : [ 7, 9 ],
      "decl-vars" : [ ],
      "line-start" : 513,
      "ast" : {
        "kind" : "statement",
        "label" : {
          "ident-kind" : "Label",
          "kind" : "ident",
          "value" : "childerror"
        },
        "type" : "goto"
      },
      "assign-vars" : [ ],
      "line-end" : 513,
      "code" : "goto childerror",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ 9 ],
      "successors" : [ 211 ],
      "in-vars" : [ 7, 2, 1, 0 ],
      "exit" : false,
      "out-vars" : [ 7, 9 ],
      "decl-vars" : [ ],
      "line-start" : 518,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "_"
          }
        }, {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "_"
          }
        }, {
          "go-type" : 27,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "err1",
            "variable" : 9
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 11,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "59"
            }
          }, {
            "coerced-to" : {
              "go-type" : 11,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 11,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "uintptr"
              }
            },
            "go-type" : 11,
            "kind" : "expression",
            "target" : {
              "coerced-to" : {
                "go-type" : 69,
                "kind" : "type",
                "qualifier" : {
                  "ident-kind" : "PkgName",
                  "kind" : "ident",
                  "package" : 1,
                  "value" : "unsafe"
                },
                "type" : "identifier",
                "value" : {
                  "go-type" : 69,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "Pointer"
                }
              },
              "go-type" : 69,
              "kind" : "expression",
              "target" : {
                "go-type" : 2,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "argv0",
                  "variable" : 0
                }
              },
              "type" : "cast"
            },
            "type" : "cast"
          }, {
            "coerced-to" : {
              "go-type" : 11,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 11,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "uintptr"
              }
            },
            "go-type" : 11,
            "kind" : "expression",
            "target" : {
              "coerced-to" : {
                "go-type" : 69,
                "kind" : "type",
                "qualifier" : {
                  "ident-kind" : "PkgName",
                  "kind" : "ident",
                  "package" : 1,
                  "value" : "unsafe"
                },
                "type" : "identifier",
                "value" : {
                  "go-type" : 69,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "Pointer"
                }
              },
              "go-type" : 69,
              "kind" : "expression",
              "target" : {
                "go-type" : 85,
                "kind" : "expression",
                "operator" : "&",
                "target" : {
                  "go-type" : 2,
                  "index" : {
                    "go-type" : 21,
                    "kind" : "constant",
                    "value" : {
                      "type" : "INT",
                      "value" : "0"
                    }
                  },
                  "kind" : "expression",
                  "target" : {
                    "go-type" : 4,
                    "kind" : "expression",
                    "type" : "identifier",
                    "value" : {
                      "ident-kind" : "Var",
                      "kind" : "ident",
                      "value" : "argv",
                      "variable" : 1
                    }
                  },
                  "type" : "index"
                },
                "type" : "unary"
              },
              "type" : "cast"
            },
            "type" : "cast"
          }, {
            "coerced-to" : {
              "go-type" : 11,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 11,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "uintptr"
              }
            },
            "go-type" : 11,
            "kind" : "expression",
            "target" : {
              "coerced-to" : {
                "go-type" : 69,
                "kind" : "type",
                "qualifier" : {
                  "ident-kind" : "PkgName",
                  "kind" : "ident",
                  "package" : 1,
                  "value" : "unsafe"
                },
                "type" : "identifier",
                "value" : {
                  "go-type" : 69,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "Pointer"
                }
              },
              "go-type" : 69,
              "kind" : "expression",
              "target" : {
                "go-type" : 85,
                "kind" : "expression",
                "operator" : "&",
                "target" : {
                  "go-type" : 2,
                  "index" : {
                    "go-type" : 21,
                    "kind" : "constant",
                    "value" : {
                      "type" : "INT",
                      "value" : "0"
                    }
                  },
                  "kind" : "expression",
                  "target" : {
                    "go-type" : 4,
                    "kind" : "expression",
                    "type" : "identifier",
                    "value" : {
                      "ident-kind" : "Var",
                      "kind" : "ident",
                      "value" : "envv",
                      "variable" : 2
                    }
                  },
                  "type" : "index"
                },
                "type" : "unary"
              },
              "type" : "cast"
            },
            "type" : "cast"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 68,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "RawSyscall"
            }
          },
          "go-type" : 65,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 9 ],
      "line-end" : 521,
      "code" : "_, _, err1 = RawSyscall(SYS_EXECVE,\n\tuintptr(unsafe.Pointer(argv0)),\n\tuintptr(unsafe.Pointer(&argv[0])),\n\tuintptr(unsafe.Pointer(&envv[0])))",
      "entry" : false,
      "use-vars" : [ 1, 2, 0 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 212 ],
      "in-vars" : [ 9, 7 ],
      "exit" : false,
      "out-vars" : [ 7, 9 ],
      "decl-vars" : [ ],
      "line-start" : 523,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 11,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "1"
            }
          }, {
            "coerced-to" : {
              "go-type" : 11,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 11,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "uintptr"
              }
            },
            "go-type" : 11,
            "kind" : "expression",
            "target" : {
              "go-type" : 21,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "pipe",
                "variable" : 7
              }
            },
            "type" : "cast"
          }, {
            "coerced-to" : {
              "go-type" : 11,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 11,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "uintptr"
              }
            },
            "go-type" : 11,
            "kind" : "expression",
            "target" : {
              "coerced-to" : {
                "go-type" : 69,
                "kind" : "type",
                "qualifier" : {
                  "ident-kind" : "PkgName",
                  "kind" : "ident",
                  "package" : 1,
                  "value" : "unsafe"
                },
                "type" : "identifier",
                "value" : {
                  "go-type" : 69,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "Pointer"
                }
              },
              "go-type" : 69,
              "kind" : "expression",
              "target" : {
                "go-type" : 70,
                "kind" : "expression",
                "operator" : "&",
                "target" : {
                  "go-type" : 27,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "err1",
                    "variable" : 9
                  }
                },
                "type" : "unary"
              },
              "type" : "cast"
            },
            "type" : "cast"
          }, {
            "go-type" : 11,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "8"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 68,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "RawSyscall"
            }
          },
          "go-type" : 65,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 525,
      "code" : "childerror:\n\n\tRawSyscall(SYS_WRITE, uintptr(pipe), uintptr(unsafe.Pointer(&err1)), unsafe.Sizeof(err1))",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 213 ],
      "in-vars" : [ 9, 7 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 525,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 11,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "1"
            }
          }, {
            "coerced-to" : {
              "go-type" : 11,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 11,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "uintptr"
              }
            },
            "go-type" : 11,
            "kind" : "expression",
            "target" : {
              "go-type" : 21,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "pipe",
                "variable" : 7
              }
            },
            "type" : "cast"
          }, {
            "coerced-to" : {
              "go-type" : 11,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 11,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "uintptr"
              }
            },
            "go-type" : 11,
            "kind" : "expression",
            "target" : {
              "coerced-to" : {
                "go-type" : 69,
                "kind" : "type",
                "qualifier" : {
                  "ident-kind" : "PkgName",
                  "kind" : "ident",
                  "package" : 1,
                  "value" : "unsafe"
                },
                "type" : "identifier",
                "value" : {
                  "go-type" : 69,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "Pointer"
                }
              },
              "go-type" : 69,
              "kind" : "expression",
              "target" : {
                "go-type" : 70,
                "kind" : "expression",
                "operator" : "&",
                "target" : {
                  "go-type" : 27,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "err1",
                    "variable" : 9
                  }
                },
                "type" : "unary"
              },
              "type" : "cast"
            },
            "type" : "cast"
          }, {
            "go-type" : 11,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "8"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 68,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "RawSyscall"
            }
          },
          "go-type" : 65,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 525,
      "code" : "RawSyscall(SYS_WRITE, uintptr(pipe), uintptr(unsafe.Pointer(&err1)), unsafe.Sizeof(err1))",
      "entry" : false,
      "use-vars" : [ 7, 9 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1, 214 ],
      "in-vars" : [ ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 526,
      "ast" : {
        "condition" : null,
        "kind" : "statement",
        "type" : "for"
      },
      "assign-vars" : [ ],
      "line-end" : 528,
      "code" : "for {\n\tRawSyscall(SYS_EXIT, 253, 0, 0)\n}",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 213 ],
      "in-vars" : [ ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 527,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 11,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "60"
            }
          }, {
            "go-type" : 11,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "253"
            }
          }, {
            "go-type" : 11,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          }, {
            "go-type" : 11,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 68,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "RawSyscall"
            }
          },
          "go-type" : 65,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 527,
      "code" : "RawSyscall(SYS_EXIT, 253, 0, 0)",
      "entry" : false,
      "use-vars" : [ ]
    } ],
    "code" : "// forkAndExecInChild1 implements the body of forkAndExecInChild up to\n// the parent's post-fork path. This is a separate function so we can\n// separate the child's and parent's stack frames if we're using\n// vfork.\n//\n// This is go:noinline because the point is to keep the stack frames\n// of this and forkAndExecInChild separate.\n//\n//go:noinline\n//go:norace\nfunc forkAndExecInChild1(argv0 *byte, argv, envv []*byte, chroot, dir *byte, attr *ProcAttr, sys *SysProcAttr, pipe int) (r1 uintptr, err1 Errno, p [2]int, locked bool) {\n\t// Defined in linux/prctl.h starting with Linux 4.3.\n\tconst (\n\t\tPR_CAP_AMBIENT       = 0x2f\n\t\tPR_CAP_AMBIENT_RAISE = 0x2\n\t)\n\n\t// vfork requires that the child not touch any of the parent's\n\t// active stack frames. Hence, the child does all post-fork\n\t// processing in this stack frame and never returns, while the\n\t// parent returns immediately from this frame and does all\n\t// post-fork processing in the outer frame.\n\t// Declare all variables at top in case any\n\t// declarations require heap allocation (e.g., err1).\n\tvar (\n\t\terr2                      Errno\n\t\tnextfd                    int\n\t\ti                         int\n\t\tcaps                      caps\n\t\tfd1                       uintptr\n\t\tpuid, psetgroups, pgid    []byte\n\t\tuidmap, setgroups, gidmap []byte\n\t)\n\n\tif sys.UidMappings != nil {\n\t\tpuid = []byte(\"/proc/self/uid_map\\000\")\n\t\tuidmap = formatIDMappings(sys.UidMappings)\n\t}\n\n\tif sys.GidMappings != nil {\n\t\tpsetgroups = []byte(\"/proc/self/setgroups\\000\")\n\t\tpgid = []byte(\"/proc/self/gid_map\\000\")\n\n\t\tif sys.GidMappingsEnableSetgroups {\n\t\t\tsetgroups = []byte(\"allow\\000\")\n\t\t} else {\n\t\t\tsetgroups = []byte(\"deny\\000\")\n\t\t}\n\t\tgidmap = formatIDMappings(sys.GidMappings)\n\t}\n\n\tppid, _ := rawSyscallNoError(SYS_GETPID, 0, 0, 0)\n\n\tfd := make([]int, len(attr.Files))\n\tnextfd = len(attr.Files)\n\tfor i, ufd := range attr.Files {\n\t\tif nextfd < int(ufd) {\n\t\t\tnextfd = int(ufd)\n\t\t}\n\t\tfd[i] = int(ufd)\n\t}\n\tnextfd++\n\n\tif sys.UidMappings != nil || sys.GidMappings != nil {\n\t\tif err := forkExecPipe(p[:]); err != nil {\n\t\t\terr1 = err.(Errno)\n\t\t\treturn\n\t\t}\n\t}\n\n\thasRawVforkSyscall := runtime.GOARCH == \"amd64\" || runtime.GOARCH == \"ppc64\" || runtime.GOARCH == \"s390x\" || runtime.GOARCH == \"arm64\"\n\n\truntime_BeforeFork()\n\tlocked = true\n\tswitch {\n\tcase hasRawVforkSyscall && (sys.Cloneflags&CLONE_NEWUSER == 0 && sys.Unshareflags&CLONE_NEWUSER == 0):\n\t\tr1, err1 = rawVforkSyscall(SYS_CLONE, uintptr(SIGCHLD|CLONE_VFORK|CLONE_VM)|sys.Cloneflags)\n\tcase runtime.GOARCH == \"s390x\":\n\t\tr1, _, err1 = RawSyscall6(SYS_CLONE, 0, uintptr(SIGCHLD)|sys.Cloneflags, 0, 0, 0, 0)\n\tdefault:\n\t\tr1, _, err1 = RawSyscall6(SYS_CLONE, uintptr(SIGCHLD)|sys.Cloneflags, 0, 0, 0, 0, 0)\n\t}\n\tif err1 != 0 || r1 != 0 {\n\n\t\treturn\n\t}\n\n\truntime_AfterForkInChild()\n\n\tif len(sys.AmbientCaps) > 0 {\n\t\t_, _, err1 = RawSyscall6(SYS_PRCTL, PR_SET_KEEPCAPS, 1, 0, 0, 0, 0)\n\t\tif err1 != 0 {\n\t\t\tgoto childerror\n\t\t}\n\t}\n\n\tif sys.UidMappings != nil || sys.GidMappings != nil {\n\t\tif _, _, err1 = RawSyscall(SYS_CLOSE, uintptr(p[1]), 0, 0); err1 != 0 {\n\t\t\tgoto childerror\n\t\t}\n\t\tr1, _, err1 = RawSyscall(SYS_READ, uintptr(p[0]), uintptr(unsafe.Pointer(&err2)), unsafe.Sizeof(err2))\n\t\tif err1 != 0 {\n\t\t\tgoto childerror\n\t\t}\n\t\tif r1 != unsafe.Sizeof(err2) {\n\t\t\terr1 = EINVAL\n\t\t\tgoto childerror\n\t\t}\n\t\tif err2 != 0 {\n\t\t\terr1 = err2\n\t\t\tgoto childerror\n\t\t}\n\t}\n\n\tif sys.Setsid {\n\t\t_, _, err1 = RawSyscall(SYS_SETSID, 0, 0, 0)\n\t\tif err1 != 0 {\n\t\t\tgoto childerror\n\t\t}\n\t}\n\n\tif sys.Setpgid || sys.Foreground {\n\n\t\t_, _, err1 = RawSyscall(SYS_SETPGID, 0, uintptr(sys.Pgid), 0)\n\t\tif err1 != 0 {\n\t\t\tgoto childerror\n\t\t}\n\t}\n\n\tif sys.Foreground {\n\t\tpgrp := int32(sys.Pgid)\n\t\tif pgrp == 0 {\n\t\t\tr1, _ = rawSyscallNoError(SYS_GETPID, 0, 0, 0)\n\n\t\t\tpgrp = int32(r1)\n\t\t}\n\n\t\t_, _, err1 = RawSyscall(SYS_IOCTL, uintptr(sys.Ctty), uintptr(TIOCSPGRP), uintptr(unsafe.Pointer(&pgrp)))\n\t\tif err1 != 0 {\n\t\t\tgoto childerror\n\t\t}\n\t}\n\n\tif sys.Unshareflags != 0 {\n\t\t_, _, err1 = RawSyscall(SYS_UNSHARE, sys.Unshareflags, 0, 0)\n\t\tif err1 != 0 {\n\t\t\tgoto childerror\n\t\t}\n\n\t\tif sys.Unshareflags&CLONE_NEWUSER != 0 && sys.GidMappings != nil {\n\t\t\tdirfd := int(_AT_FDCWD)\n\t\t\tif fd1, _, err1 = RawSyscall6(SYS_OPENAT, uintptr(dirfd), uintptr(unsafe.Pointer(&psetgroups[0])), uintptr(O_WRONLY), 0, 0, 0); err1 != 0 {\n\t\t\t\tgoto childerror\n\t\t\t}\n\t\t\tr1, _, err1 = RawSyscall(SYS_WRITE, uintptr(fd1), uintptr(unsafe.Pointer(&setgroups[0])), uintptr(len(setgroups)))\n\t\t\tif err1 != 0 {\n\t\t\t\tgoto childerror\n\t\t\t}\n\t\t\tif _, _, err1 = RawSyscall(SYS_CLOSE, uintptr(fd1), 0, 0); err1 != 0 {\n\t\t\t\tgoto childerror\n\t\t\t}\n\n\t\t\tif fd1, _, err1 = RawSyscall6(SYS_OPENAT, uintptr(dirfd), uintptr(unsafe.Pointer(&pgid[0])), uintptr(O_WRONLY), 0, 0, 0); err1 != 0 {\n\t\t\t\tgoto childerror\n\t\t\t}\n\t\t\tr1, _, err1 = RawSyscall(SYS_WRITE, uintptr(fd1), uintptr(unsafe.Pointer(&gidmap[0])), uintptr(len(gidmap)))\n\t\t\tif err1 != 0 {\n\t\t\t\tgoto childerror\n\t\t\t}\n\t\t\tif _, _, err1 = RawSyscall(SYS_CLOSE, uintptr(fd1), 0, 0); err1 != 0 {\n\t\t\t\tgoto childerror\n\t\t\t}\n\t\t}\n\n\t\tif sys.Unshareflags&CLONE_NEWUSER != 0 && sys.UidMappings != nil {\n\t\t\tdirfd := int(_AT_FDCWD)\n\t\t\tif fd1, _, err1 = RawSyscall6(SYS_OPENAT, uintptr(dirfd), uintptr(unsafe.Pointer(&puid[0])), uintptr(O_WRONLY), 0, 0, 0); err1 != 0 {\n\t\t\t\tgoto childerror\n\t\t\t}\n\t\t\tr1, _, err1 = RawSyscall(SYS_WRITE, uintptr(fd1), uintptr(unsafe.Pointer(&uidmap[0])), uintptr(len(uidmap)))\n\t\t\tif err1 != 0 {\n\t\t\t\tgoto childerror\n\t\t\t}\n\t\t\tif _, _, err1 = RawSyscall(SYS_CLOSE, uintptr(fd1), 0, 0); err1 != 0 {\n\t\t\t\tgoto childerror\n\t\t\t}\n\t\t}\n\n\t\tif sys.Unshareflags&CLONE_NEWNS == CLONE_NEWNS {\n\t\t\t_, _, err1 = RawSyscall6(SYS_MOUNT, uintptr(unsafe.Pointer(&none[0])), uintptr(unsafe.Pointer(&slash[0])), 0, MS_REC|MS_PRIVATE, 0, 0)\n\t\t\tif err1 != 0 {\n\t\t\t\tgoto childerror\n\t\t\t}\n\t\t}\n\t}\n\n\tif chroot != nil {\n\t\t_, _, err1 = RawSyscall(SYS_CHROOT, uintptr(unsafe.Pointer(chroot)), 0, 0)\n\t\tif err1 != 0 {\n\t\t\tgoto childerror\n\t\t}\n\t}\n\n\tif cred := sys.Credential; cred != nil {\n\t\tngroups := uintptr(len(cred.Groups))\n\t\tgroups := uintptr(0)\n\t\tif ngroups > 0 {\n\t\t\tgroups = uintptr(unsafe.Pointer(&cred.Groups[0]))\n\t\t}\n\t\tif !(sys.GidMappings != nil && !sys.GidMappingsEnableSetgroups && ngroups == 0) && !cred.NoSetGroups {\n\t\t\t_, _, err1 = RawSyscall(_SYS_setgroups, ngroups, groups, 0)\n\t\t\tif err1 != 0 {\n\t\t\t\tgoto childerror\n\t\t\t}\n\t\t}\n\t\t_, _, err1 = RawSyscall(sys_SETGID, uintptr(cred.Gid), 0, 0)\n\t\tif err1 != 0 {\n\t\t\tgoto childerror\n\t\t}\n\t\t_, _, err1 = RawSyscall(sys_SETUID, uintptr(cred.Uid), 0, 0)\n\t\tif err1 != 0 {\n\t\t\tgoto childerror\n\t\t}\n\t}\n\n\tif len(sys.AmbientCaps) != 0 {\n\n\t\tcaps.hdr.version = _LINUX_CAPABILITY_VERSION_3\n\n\t\tif _, _, err1 := RawSyscall(SYS_CAPGET, uintptr(unsafe.Pointer(&caps.hdr)), uintptr(unsafe.Pointer(&caps.data[0])), 0); err1 != 0 {\n\t\t\tgoto childerror\n\t\t}\n\n\t\tfor _, c := range sys.AmbientCaps {\n\n\t\t\tcaps.data[capToIndex(c)].permitted |= capToMask(c)\n\t\t\tcaps.data[capToIndex(c)].inheritable |= capToMask(c)\n\t\t}\n\n\t\tif _, _, err1 := RawSyscall(SYS_CAPSET, uintptr(unsafe.Pointer(&caps.hdr)), uintptr(unsafe.Pointer(&caps.data[0])), 0); err1 != 0 {\n\t\t\tgoto childerror\n\t\t}\n\n\t\tfor _, c := range sys.AmbientCaps {\n\t\t\t_, _, err1 = RawSyscall6(SYS_PRCTL, PR_CAP_AMBIENT, uintptr(PR_CAP_AMBIENT_RAISE), c, 0, 0, 0)\n\t\t\tif err1 != 0 {\n\t\t\t\tgoto childerror\n\t\t\t}\n\t\t}\n\t}\n\n\tif dir != nil {\n\t\t_, _, err1 = RawSyscall(SYS_CHDIR, uintptr(unsafe.Pointer(dir)), 0, 0)\n\t\tif err1 != 0 {\n\t\t\tgoto childerror\n\t\t}\n\t}\n\n\tif sys.Pdeathsig != 0 {\n\t\t_, _, err1 = RawSyscall6(SYS_PRCTL, PR_SET_PDEATHSIG, uintptr(sys.Pdeathsig), 0, 0, 0, 0)\n\t\tif err1 != 0 {\n\t\t\tgoto childerror\n\t\t}\n\n\t\tr1, _ = rawSyscallNoError(SYS_GETPPID, 0, 0, 0)\n\t\tif r1 != ppid {\n\t\t\tpid, _ := rawSyscallNoError(SYS_GETPID, 0, 0, 0)\n\t\t\t_, _, err1 := RawSyscall(SYS_KILL, pid, uintptr(sys.Pdeathsig), 0)\n\t\t\tif err1 != 0 {\n\t\t\t\tgoto childerror\n\t\t\t}\n\t\t}\n\t}\n\n\tif pipe < nextfd {\n\t\t_, _, err1 = RawSyscall(_SYS_dup, uintptr(pipe), uintptr(nextfd), 0)\n\t\tif err1 != 0 {\n\t\t\tgoto childerror\n\t\t}\n\t\tRawSyscall(fcntl64Syscall, uintptr(nextfd), F_SETFD, FD_CLOEXEC)\n\t\tpipe = nextfd\n\t\tnextfd++\n\t}\n\tfor i = 0; i < len(fd); i++ {\n\t\tif fd[i] >= 0 && fd[i] < int(i) {\n\t\t\tif nextfd == pipe {\n\t\t\t\tnextfd++\n\t\t\t}\n\t\t\t_, _, err1 = RawSyscall(_SYS_dup, uintptr(fd[i]), uintptr(nextfd), 0)\n\t\t\tif err1 != 0 {\n\t\t\t\tgoto childerror\n\t\t\t}\n\t\t\tRawSyscall(fcntl64Syscall, uintptr(nextfd), F_SETFD, FD_CLOEXEC)\n\t\t\tfd[i] = nextfd\n\t\t\tnextfd++\n\t\t}\n\t}\n\n\tfor i = 0; i < len(fd); i++ {\n\t\tif fd[i] == -1 {\n\t\t\tRawSyscall(SYS_CLOSE, uintptr(i), 0, 0)\n\t\t\tcontinue\n\t\t}\n\t\tif fd[i] == int(i) {\n\n\t\t\t_, _, err1 = RawSyscall(fcntl64Syscall, uintptr(fd[i]), F_SETFD, 0)\n\t\t\tif err1 != 0 {\n\t\t\t\tgoto childerror\n\t\t\t}\n\t\t\tcontinue\n\t\t}\n\n\t\t_, _, err1 = RawSyscall(_SYS_dup, uintptr(fd[i]), uintptr(i), 0)\n\t\tif err1 != 0 {\n\t\t\tgoto childerror\n\t\t}\n\t}\n\n\tfor i = len(fd); i < 3; i++ {\n\t\tRawSyscall(SYS_CLOSE, uintptr(i), 0, 0)\n\t}\n\n\tif sys.Noctty {\n\t\t_, _, err1 = RawSyscall(SYS_IOCTL, 0, uintptr(TIOCNOTTY), 0)\n\t\tif err1 != 0 {\n\t\t\tgoto childerror\n\t\t}\n\t}\n\n\tif sys.Setctty {\n\t\t_, _, err1 = RawSyscall(SYS_IOCTL, uintptr(sys.Ctty), uintptr(TIOCSCTTY), 1)\n\t\tif err1 != 0 {\n\t\t\tgoto childerror\n\t\t}\n\t}\n\n\tif sys.Ptrace {\n\t\t_, _, err1 = RawSyscall(SYS_PTRACE, uintptr(PTRACE_TRACEME), 0, 0)\n\t\tif err1 != 0 {\n\t\t\tgoto childerror\n\t\t}\n\t}\n\n\t_, _, err1 = RawSyscall(SYS_EXECVE,\n\t\tuintptr(unsafe.Pointer(argv0)),\n\t\tuintptr(unsafe.Pointer(&argv[0])),\n\t\tuintptr(unsafe.Pointer(&envv[0])))\n\nchilderror:\n\n\tRawSyscall(SYS_WRITE, uintptr(pipe), uintptr(unsafe.Pointer(&err1)), unsafe.Sizeof(err1))\n\tfor {\n\t\tRawSyscall(SYS_EXIT, 253, 0, 0)\n\t}\n}",
    "defines" : [ 0 ],
    "functions" : [ {
      "name" : "forkAndExecInChild1",
      "package" : 0,
      "type" : 0,
      "exported" : false
    }, {
      "name" : "formatIDMappings",
      "package" : 0,
      "type" : 43,
      "exported" : false
    }, {
      "name" : "rawSyscallNoError",
      "package" : 0,
      "type" : 47,
      "exported" : false
    }, {
      "name" : "forkExecPipe",
      "package" : 0,
      "type" : 58,
      "exported" : false
    }, {
      "name" : "runtime_BeforeFork",
      "package" : 0,
      "type" : 61,
      "exported" : false
    }, {
      "name" : "rawVforkSyscall",
      "package" : 0,
      "type" : 63,
      "exported" : false
    }, {
      "name" : "RawSyscall6",
      "package" : 0,
      "type" : 66,
      "exported" : true
    }, {
      "name" : "runtime_AfterForkInChild",
      "package" : 0,
      "type" : 61,
      "exported" : false
    }, {
      "name" : "RawSyscall",
      "package" : 0,
      "type" : 68,
      "exported" : true
    }, {
      "name" : "capToIndex",
      "package" : 0,
      "type" : 78,
      "exported" : false
    }, {
      "name" : "capToMask",
      "package" : 0,
      "type" : 81,
      "exported" : false
    } ],
    "line-end" : 529,
    "line-start" : 133,
    "names" : [ "forkAndExecInChild1" ],
    "package" : 0,
    "packages" : [ {
      "name" : "syscall",
      "path" : "syscall"
    }, {
      "name" : "unsafe",
      "path" : "unsafe"
    } ],
    "params" : [ 0, 1, 2, 3, 4, 5, 6, 7 ],
    "receivers" : [ ],
    "results" : [ 8, 9, 10, 11 ],
    "type" : "function",
    "types" : [ {
      "name" : "func(argv0 *byte, argv []*byte, envv []*byte, chroot *byte, dir *byte, attr *syscall.ProcAttr, sys *syscall.SysProcAttr, pipe int) (r1 uintptr, err1 syscall.Errno, p [2]int, locked bool)",
      "params" : 1,
      "recv" : -1,
      "results" : 26,
      "type" : "Signature",
      "underlying" : 0,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "argv0",
        "type" : 2
      }, {
        "name" : "argv",
        "type" : 4
      }, {
        "name" : "envv",
        "type" : 4
      }, {
        "name" : "chroot",
        "type" : 2
      }, {
        "name" : "dir",
        "type" : 2
      }, {
        "name" : "attr",
        "type" : 5
      }, {
        "name" : "sys",
        "type" : 12
      }, {
        "name" : "pipe",
        "type" : 21
      } ],
      "name" : "(argv0 *byte, argv []*byte, envv []*byte, chroot *byte, dir *byte, attr *syscall.ProcAttr, sys *syscall.SysProcAttr, pipe int)",
      "type" : "Tuple",
      "underlying" : 1
    }, {
      "elem" : 3,
      "name" : "*byte",
      "type" : "Pointer",
      "underlying" : 2
    }, {
      "name" : "byte",
      "type" : "Basic",
      "underlying" : 3
    }, {
      "elem" : 2,
      "name" : "[]*byte",
      "type" : "Slice",
      "underlying" : 4
    }, {
      "elem" : 6,
      "name" : "*syscall.ProcAttr",
      "type" : "Pointer",
      "underlying" : 5
    }, {
      "local-name" : "ProcAttr",
      "name" : "syscall.ProcAttr",
      "package" : 0,
      "type" : "Named",
      "underlying" : 7
    }, {
      "fields" : [ {
        "name" : "Dir",
        "type" : 8
      }, {
        "name" : "Env",
        "type" : 9
      }, {
        "name" : "Files",
        "type" : 10
      }, {
        "name" : "Sys",
        "type" : 12
      } ],
      "name" : "struct{Dir string; Env []string; Files []uintptr; Sys *syscall.SysProcAttr}",
      "type" : "Struct",
      "underlying" : 7
    }, {
      "name" : "string",
      "type" : "Basic",
      "underlying" : 8
    }, {
      "elem" : 8,
      "name" : "[]string",
      "type" : "Slice",
      "underlying" : 9
    }, {
      "elem" : 11,
      "name" : "[]uintptr",
      "type" : "Slice",
      "underlying" : 10
    }, {
      "name" : "uintptr",
      "type" : "Basic",
      "underlying" : 11
    }, {
      "elem" : 13,
      "name" : "*syscall.SysProcAttr",
      "type" : "Pointer",
      "underlying" : 12
    }, {
      "local-name" : "SysProcAttr",
      "name" : "syscall.SysProcAttr",
      "package" : 0,
      "type" : "Named",
      "underlying" : 14
    }, {
      "fields" : [ {
        "name" : "Chroot",
        "type" : 8
      }, {
        "name" : "Credential",
        "type" : 15
      }, {
        "name" : "Ptrace",
        "type" : 20
      }, {
        "name" : "Setsid",
        "type" : 20
      }, {
        "name" : "Setpgid",
        "type" : 20
      }, {
        "name" : "Setctty",
        "type" : 20
      }, {
        "name" : "Noctty",
        "type" : 20
      }, {
        "name" : "Ctty",
        "type" : 21
      }, {
        "name" : "Foreground",
        "type" : 20
      }, {
        "name" : "Pgid",
        "type" : 21
      }, {
        "name" : "Pdeathsig",
        "type" : 22
      }, {
        "name" : "Cloneflags",
        "type" : 11
      }, {
        "name" : "Unshareflags",
        "type" : 11
      }, {
        "name" : "UidMappings",
        "type" : 23
      }, {
        "name" : "GidMappings",
        "type" : 23
      }, {
        "name" : "GidMappingsEnableSetgroups",
        "type" : 20
      }, {
        "name" : "AmbientCaps",
        "type" : 10
      } ],
      "name" : "struct{Chroot string; Credential *syscall.Credential; Ptrace bool; Setsid bool; Setpgid bool; Setctty bool; Noctty bool; Ctty int; Foreground bool; Pgid int; Pdeathsig syscall.Signal; Cloneflags uintptr; Unshareflags uintptr; UidMappings []syscall.SysProcIDMap; GidMappings []syscall.SysProcIDMap; GidMappingsEnableSetgroups bool; AmbientCaps []uintptr}",
      "type" : "Struct",
      "underlying" : 14
    }, {
      "elem" : 16,
      "name" : "*syscall.Credential",
      "type" : "Pointer",
      "underlying" : 15
    }, {
      "local-name" : "Credential",
      "name" : "syscall.Credential",
      "package" : 0,
      "type" : "Named",
      "underlying" : 17
    }, {
      "fields" : [ {
        "name" : "Uid",
        "type" : 18
      }, {
        "name" : "Gid",
        "type" : 18
      }, {
        "name" : "Groups",
        "type" : 19
      }, {
        "name" : "NoSetGroups",
        "type" : 20
      } ],
      "name" : "struct{Uid uint32; Gid uint32; Groups []uint32; NoSetGroups bool}",
      "type" : "Struct",
      "underlying" : 17
    }, {
      "name" : "uint32",
      "type" : "Basic",
      "underlying" : 18
    }, {
      "elem" : 18,
      "name" : "[]uint32",
      "type" : "Slice",
      "underlying" : 19
    }, {
      "name" : "bool",
      "type" : "Basic",
      "underlying" : 20
    }, {
      "name" : "int",
      "type" : "Basic",
      "underlying" : 21
    }, {
      "local-name" : "Signal",
      "name" : "syscall.Signal",
      "package" : 0,
      "type" : "Named",
      "underlying" : 21
    }, {
      "elem" : 24,
      "name" : "[]syscall.SysProcIDMap",
      "type" : "Slice",
      "underlying" : 23
    }, {
      "local-name" : "SysProcIDMap",
      "name" : "syscall.SysProcIDMap",
      "package" : 0,
      "type" : "Named",
      "underlying" : 25
    }, {
      "fields" : [ {
        "name" : "ContainerID",
        "type" : 21
      }, {
        "name" : "HostID",
        "type" : 21
      }, {
        "name" : "Size",
        "type" : 21
      } ],
      "name" : "struct{ContainerID int; HostID int; Size int}",
      "type" : "Struct",
      "underlying" : 25
    }, {
      "fields" : [ {
        "name" : "r1",
        "type" : 11
      }, {
        "name" : "err1",
        "type" : 27
      }, {
        "name" : "p",
        "type" : 28
      }, {
        "name" : "locked",
        "type" : 20
      } ],
      "name" : "(r1 uintptr, err1 syscall.Errno, p [2]int, locked bool)",
      "type" : "Tuple",
      "underlying" : 26
    }, {
      "local-name" : "Errno",
      "name" : "syscall.Errno",
      "package" : 0,
      "type" : "Named",
      "underlying" : 11
    }, {
      "elem" : 21,
      "name" : "[2]int",
      "type" : "Array",
      "underlying" : 28
    }, {
      "elem" : 3,
      "name" : "[5]byte",
      "type" : "Array",
      "underlying" : 29
    }, {
      "elem" : 3,
      "name" : "[2]byte",
      "type" : "Array",
      "underlying" : 30
    }, {
      "name" : "untyped int",
      "type" : "Basic",
      "underlying" : 31
    }, {
      "local-name" : "caps",
      "name" : "syscall.caps",
      "package" : 0,
      "type" : "Named",
      "underlying" : 33
    }, {
      "fields" : [ {
        "name" : "hdr",
        "type" : 34
      }, {
        "name" : "data",
        "type" : 37
      } ],
      "name" : "struct{hdr syscall.capHeader; data [2]syscall.capData}",
      "type" : "Struct",
      "underlying" : 33
    }, {
      "local-name" : "capHeader",
      "name" : "syscall.capHeader",
      "package" : 0,
      "type" : "Named",
      "underlying" : 35
    }, {
      "fields" : [ {
        "name" : "version",
        "type" : 18
      }, {
        "name" : "pid",
        "type" : 36
      } ],
      "name" : "struct{version uint32; pid int32}",
      "type" : "Struct",
      "underlying" : 35
    }, {
      "name" : "int32",
      "type" : "Basic",
      "underlying" : 36
    }, {
      "elem" : 38,
      "name" : "[2]syscall.capData",
      "type" : "Array",
      "underlying" : 37
    }, {
      "local-name" : "capData",
      "name" : "syscall.capData",
      "package" : 0,
      "type" : "Named",
      "underlying" : 39
    }, {
      "fields" : [ {
        "name" : "effective",
        "type" : 18
      }, {
        "name" : "permitted",
        "type" : 18
      }, {
        "name" : "inheritable",
        "type" : 18
      } ],
      "name" : "struct{effective uint32; permitted uint32; inheritable uint32}",
      "type" : "Struct",
      "underlying" : 39
    }, {
      "elem" : 3,
      "name" : "[]byte",
      "type" : "Slice",
      "underlying" : 40
    }, {
      "name" : "untyped bool",
      "type" : "Basic",
      "underlying" : 41
    }, {
      "name" : "untyped nil",
      "type" : "Basic",
      "underlying" : 42
    }, {
      "name" : "func(idMap []syscall.SysProcIDMap) []byte",
      "params" : 44,
      "recv" : -1,
      "results" : 45,
      "type" : "Signature",
      "underlying" : 43,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "idMap",
        "type" : 23
      } ],
      "name" : "(idMap []syscall.SysProcIDMap)",
      "type" : "Tuple",
      "underlying" : 44
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 40
      } ],
      "name" : "([]byte)",
      "type" : "Tuple",
      "underlying" : 45
    }, {
      "fields" : [ {
        "name" : "r1",
        "type" : 11
      }, {
        "name" : "r2",
        "type" : 11
      } ],
      "name" : "(r1 uintptr, r2 uintptr)",
      "type" : "Tuple",
      "underlying" : 46
    }, {
      "name" : "func(trap uintptr, a1 uintptr, a2 uintptr, a3 uintptr) (r1 uintptr, r2 uintptr)",
      "params" : 48,
      "recv" : -1,
      "results" : 46,
      "type" : "Signature",
      "underlying" : 47,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "trap",
        "type" : 11
      }, {
        "name" : "a1",
        "type" : 11
      }, {
        "name" : "a2",
        "type" : 11
      }, {
        "name" : "a3",
        "type" : 11
      } ],
      "name" : "(trap uintptr, a1 uintptr, a2 uintptr, a3 uintptr)",
      "type" : "Tuple",
      "underlying" : 48
    }, {
      "elem" : 21,
      "name" : "[]int",
      "type" : "Slice",
      "underlying" : 49
    }, {
      "name" : "func([]uintptr) int",
      "params" : 51,
      "recv" : -1,
      "results" : 52,
      "type" : "Signature",
      "underlying" : 50,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 10
      } ],
      "name" : "([]uintptr)",
      "type" : "Tuple",
      "underlying" : 51
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 21
      } ],
      "name" : "(int)",
      "type" : "Tuple",
      "underlying" : 52
    }, {
      "local-name" : "error",
      "name" : "error",
      "package" : -1,
      "type" : "Named",
      "underlying" : 54
    }, {
      "methods" : [ {
        "name" : "Error",
        "type" : 55
      } ],
      "name" : "interface{Error() string}",
      "type" : "Interface",
      "underlying" : 54
    }, {
      "name" : "func() string",
      "params" : 56,
      "recv" : 35,
      "results" : 57,
      "type" : "Signature",
      "underlying" : 55,
      "variadic" : false
    }, {
      "fields" : [ ],
      "name" : "()",
      "type" : "Tuple",
      "underlying" : 56
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 8
      } ],
      "name" : "(string)",
      "type" : "Tuple",
      "underlying" : 57
    }, {
      "name" : "func(p []int) (err error)",
      "params" : 59,
      "recv" : -1,
      "results" : 60,
      "type" : "Signature",
      "underlying" : 58,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "p",
        "type" : 49
      } ],
      "name" : "(p []int)",
      "type" : "Tuple",
      "underlying" : 59
    }, {
      "fields" : [ {
        "name" : "err",
        "type" : 53
      } ],
      "name" : "(err error)",
      "type" : "Tuple",
      "underlying" : 60
    }, {
      "name" : "func()",
      "params" : 56,
      "recv" : -1,
      "results" : 56,
      "type" : "Signature",
      "underlying" : 61,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "r1",
        "type" : 11
      }, {
        "name" : "err",
        "type" : 27
      } ],
      "name" : "(r1 uintptr, err syscall.Errno)",
      "type" : "Tuple",
      "underlying" : 62
    }, {
      "name" : "func(trap uintptr, a1 uintptr) (r1 uintptr, err syscall.Errno)",
      "params" : 64,
      "recv" : -1,
      "results" : 62,
      "type" : "Signature",
      "underlying" : 63,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "trap",
        "type" : 11
      }, {
        "name" : "a1",
        "type" : 11
      } ],
      "name" : "(trap uintptr, a1 uintptr)",
      "type" : "Tuple",
      "underlying" : 64
    }, {
      "fields" : [ {
        "name" : "r1",
        "type" : 11
      }, {
        "name" : "r2",
        "type" : 11
      }, {
        "name" : "err",
        "type" : 27
      } ],
      "name" : "(r1 uintptr, r2 uintptr, err syscall.Errno)",
      "type" : "Tuple",
      "underlying" : 65
    }, {
      "name" : "func(trap uintptr, a1 uintptr, a2 uintptr, a3 uintptr, a4 uintptr, a5 uintptr, a6 uintptr) (r1 uintptr, r2 uintptr, err syscall.Errno)",
      "params" : 67,
      "recv" : -1,
      "results" : 65,
      "type" : "Signature",
      "underlying" : 66,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "trap",
        "type" : 11
      }, {
        "name" : "a1",
        "type" : 11
      }, {
        "name" : "a2",
        "type" : 11
      }, {
        "name" : "a3",
        "type" : 11
      }, {
        "name" : "a4",
        "type" : 11
      }, {
        "name" : "a5",
        "type" : 11
      }, {
        "name" : "a6",
        "type" : 11
      } ],
      "name" : "(trap uintptr, a1 uintptr, a2 uintptr, a3 uintptr, a4 uintptr, a5 uintptr, a6 uintptr)",
      "type" : "Tuple",
      "underlying" : 67
    }, {
      "name" : "func(trap uintptr, a1 uintptr, a2 uintptr, a3 uintptr) (r1 uintptr, r2 uintptr, err syscall.Errno)",
      "params" : 48,
      "recv" : -1,
      "results" : 65,
      "type" : "Signature",
      "underlying" : 68,
      "variadic" : false
    }, {
      "local-name" : "Pointer",
      "name" : "unsafe.Pointer",
      "package" : 1,
      "type" : "Basic",
      "underlying" : 69
    }, {
      "elem" : 27,
      "name" : "*syscall.Errno",
      "type" : "Pointer",
      "underlying" : 70
    }, {
      "elem" : 36,
      "name" : "*int32",
      "type" : "Pointer",
      "underlying" : 71
    }, {
      "name" : "func([]byte) int",
      "params" : 45,
      "recv" : -1,
      "results" : 52,
      "type" : "Signature",
      "underlying" : 72,
      "variadic" : false
    }, {
      "name" : "func([]uint32) int",
      "params" : 74,
      "recv" : -1,
      "results" : 52,
      "type" : "Signature",
      "underlying" : 73,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 19
      } ],
      "name" : "([]uint32)",
      "type" : "Tuple",
      "underlying" : 74
    }, {
      "elem" : 18,
      "name" : "*uint32",
      "type" : "Pointer",
      "underlying" : 75
    }, {
      "elem" : 34,
      "name" : "*syscall.capHeader",
      "type" : "Pointer",
      "underlying" : 76
    }, {
      "elem" : 38,
      "name" : "*syscall.capData",
      "type" : "Pointer",
      "underlying" : 77
    }, {
      "name" : "func(cap uintptr) uintptr",
      "params" : 79,
      "recv" : -1,
      "results" : 80,
      "type" : "Signature",
      "underlying" : 78,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "cap",
        "type" : 11
      } ],
      "name" : "(cap uintptr)",
      "type" : "Tuple",
      "underlying" : 79
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 11
      } ],
      "name" : "(uintptr)",
      "type" : "Tuple",
      "underlying" : 80
    }, {
      "name" : "func(cap uintptr) uint32",
      "params" : 79,
      "recv" : -1,
      "results" : 82,
      "type" : "Signature",
      "underlying" : 81,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 18
      } ],
      "name" : "(uint32)",
      "type" : "Tuple",
      "underlying" : 82
    }, {
      "name" : "func([]int) int",
      "params" : 84,
      "recv" : -1,
      "results" : 52,
      "type" : "Signature",
      "underlying" : 83,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 49
      } ],
      "name" : "([]int)",
      "type" : "Tuple",
      "underlying" : 84
    }, {
      "elem" : 2,
      "name" : "**byte",
      "type" : "Pointer",
      "underlying" : 85
    } ],
    "variables" : [ {
      "name" : "argv0",
      "package" : 0,
      "type" : 2,
      "exported" : false
    }, {
      "name" : "argv",
      "package" : 0,
      "type" : 4,
      "exported" : false
    }, {
      "name" : "envv",
      "package" : 0,
      "type" : 4,
      "exported" : false
    }, {
      "name" : "chroot",
      "package" : 0,
      "type" : 2,
      "exported" : false
    }, {
      "name" : "dir",
      "package" : 0,
      "type" : 2,
      "exported" : false
    }, {
      "name" : "attr",
      "package" : 0,
      "type" : 5,
      "exported" : false
    }, {
      "name" : "sys",
      "package" : 0,
      "type" : 12,
      "exported" : false
    }, {
      "name" : "pipe",
      "package" : 0,
      "type" : 21,
      "exported" : false
    }, {
      "name" : "r1",
      "package" : 0,
      "type" : 11,
      "exported" : false
    }, {
      "name" : "err1",
      "package" : 0,
      "type" : 27,
      "exported" : false
    }, {
      "name" : "p",
      "package" : 0,
      "type" : 28,
      "exported" : false
    }, {
      "name" : "locked",
      "package" : 0,
      "type" : 20,
      "exported" : false
    }, {
      "name" : "none",
      "package" : 0,
      "type" : 29,
      "exported" : false
    }, {
      "name" : "fcntl64Syscall",
      "package" : 0,
      "type" : 11,
      "exported" : false
    }, {
      "name" : "slash",
      "package" : 0,
      "type" : 30,
      "exported" : false
    }, {
      "name" : "puid",
      "package" : 0,
      "type" : 40,
      "exported" : false
    }, {
      "name" : "caps",
      "package" : 0,
      "type" : 32,
      "exported" : false
    }, {
      "name" : "gidmap",
      "package" : 0,
      "type" : 40,
      "exported" : false
    }, {
      "name" : "psetgroups",
      "package" : 0,
      "type" : 40,
      "exported" : false
    }, {
      "name" : "setgroups",
      "package" : 0,
      "type" : 40,
      "exported" : false
    }, {
      "name" : "pgid",
      "package" : 0,
      "type" : 40,
      "exported" : false
    }, {
      "name" : "uidmap",
      "package" : 0,
      "type" : 40,
      "exported" : false
    }, {
      "name" : "err2",
      "package" : 0,
      "type" : 27,
      "exported" : false
    }, {
      "name" : "i",
      "package" : 0,
      "type" : 21,
      "exported" : false
    }, {
      "name" : "nextfd",
      "package" : 0,
      "type" : 21,
      "exported" : false
    }, {
      "name" : "fd1",
      "package" : 0,
      "type" : 11,
      "exported" : false
    }, {
      "name" : "UidMappings",
      "package" : 0,
      "type" : 23,
      "exported" : true
    }, {
      "name" : "GidMappings",
      "package" : 0,
      "type" : 23,
      "exported" : true
    }, {
      "name" : "GidMappingsEnableSetgroups",
      "package" : 0,
      "type" : 20,
      "exported" : true
    }, {
      "name" : "ppid",
      "package" : 0,
      "type" : 11,
      "exported" : false
    }, {
      "name" : "_",
      "package" : 0,
      "type" : 11,
      "exported" : false
    }, {
      "name" : "Files",
      "package" : 0,
      "type" : 10,
      "exported" : true
    }, {
      "name" : "fd",
      "package" : 0,
      "type" : 49,
      "exported" : false
    }, {
      "name" : "ufd",
      "package" : 0,
      "type" : 11,
      "exported" : false
    }, {
      "name" : "i",
      "package" : 0,
      "type" : 21,
      "exported" : false
    }, {
      "name" : "",
      "package" : -1,
      "type" : 53,
      "exported" : false
    }, {
      "name" : "err",
      "package" : 0,
      "type" : 53,
      "exported" : false
    }, {
      "name" : "hasRawVforkSyscall",
      "package" : 0,
      "type" : 20,
      "exported" : false
    }, {
      "name" : "Cloneflags",
      "package" : 0,
      "type" : 11,
      "exported" : true
    }, {
      "name" : "Unshareflags",
      "package" : 0,
      "type" : 11,
      "exported" : true
    }, {
      "name" : "AmbientCaps",
      "package" : 0,
      "type" : 10,
      "exported" : true
    }, {
      "name" : "Setsid",
      "package" : 0,
      "type" : 20,
      "exported" : true
    }, {
      "name" : "Setpgid",
      "package" : 0,
      "type" : 20,
      "exported" : true
    }, {
      "name" : "Foreground",
      "package" : 0,
      "type" : 20,
      "exported" : true
    }, {
      "name" : "Pgid",
      "package" : 0,
      "type" : 21,
      "exported" : true
    }, {
      "name" : "pgrp",
      "package" : 0,
      "type" : 36,
      "exported" : false
    }, {
      "name" : "Ctty",
      "package" : 0,
      "type" : 21,
      "exported" : true
    }, {
      "name" : "dirfd",
      "package" : 0,
      "type" : 21,
      "exported" : false
    }, {
      "name" : "dirfd",
      "package" : 0,
      "type" : 21,
      "exported" : false
    }, {
      "name" : "Credential",
      "package" : 0,
      "type" : 15,
      "exported" : true
    }, {
      "name" : "cred",
      "package" : 0,
      "type" : 15,
      "exported" : false
    }, {
      "name" : "Groups",
      "package" : 0,
      "type" : 19,
      "exported" : true
    }, {
      "name" : "ngroups",
      "package" : 0,
      "type" : 11,
      "exported" : false
    }, {
      "name" : "groups",
      "package" : 0,
      "type" : 11,
      "exported" : false
    }, {
      "name" : "NoSetGroups",
      "package" : 0,
      "type" : 20,
      "exported" : true
    }, {
      "name" : "Gid",
      "package" : 0,
      "type" : 18,
      "exported" : true
    }, {
      "name" : "Uid",
      "package" : 0,
      "type" : 18,
      "exported" : true
    }, {
      "name" : "hdr",
      "package" : 0,
      "type" : 34,
      "exported" : false
    }, {
      "name" : "version",
      "package" : 0,
      "type" : 18,
      "exported" : false
    }, {
      "name" : "data",
      "package" : 0,
      "type" : 37,
      "exported" : false
    }, {
      "name" : "err1",
      "package" : 0,
      "type" : 27,
      "exported" : false
    }, {
      "name" : "c",
      "package" : 0,
      "type" : 11,
      "exported" : false
    }, {
      "name" : "permitted",
      "package" : 0,
      "type" : 18,
      "exported" : false
    }, {
      "name" : "inheritable",
      "package" : 0,
      "type" : 18,
      "exported" : false
    }, {
      "name" : "err1",
      "package" : 0,
      "type" : 27,
      "exported" : false
    }, {
      "name" : "c",
      "package" : 0,
      "type" : 11,
      "exported" : false
    }, {
      "name" : "_",
      "package" : 0,
      "type" : 11,
      "exported" : false
    }, {
      "name" : "_",
      "package" : 0,
      "type" : 11,
      "exported" : false
    }, {
      "name" : "_",
      "package" : 0,
      "type" : 21,
      "exported" : false
    }, {
      "name" : "_",
      "package" : 0,
      "type" : 11,
      "exported" : false
    }, {
      "name" : "_",
      "package" : 0,
      "type" : 11,
      "exported" : false
    }, {
      "name" : "_",
      "package" : 0,
      "type" : 21,
      "exported" : false
    }, {
      "name" : "Pdeathsig",
      "package" : 0,
      "type" : 22,
      "exported" : true
    }, {
      "name" : "pid",
      "package" : 0,
      "type" : 11,
      "exported" : false
    }, {
      "name" : "err1",
      "package" : 0,
      "type" : 27,
      "exported" : false
    }, {
      "name" : "_",
      "package" : 0,
      "type" : 11,
      "exported" : false
    }, {
      "name" : "_",
      "package" : 0,
      "type" : 11,
      "exported" : false
    }, {
      "name" : "_",
      "package" : 0,
      "type" : 11,
      "exported" : false
    }, {
      "name" : "Noctty",
      "package" : 0,
      "type" : 20,
      "exported" : true
    }, {
      "name" : "Setctty",
      "package" : 0,
      "type" : 20,
      "exported" : true
    }, {
      "name" : "Ptrace",
      "package" : 0,
      "type" : 20,
      "exported" : true
    } ]
  },
  "go-version" : "1.14.3"
}