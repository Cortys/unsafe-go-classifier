{
  "usage" : {
    "file" : "exec_unix.go",
    "label1" : "syscall",
    "label2" : "no-gc",
    "line" : "291",
    "module" : "std",
    "pkg" : "syscall",
    "project" : "kubernetes/kubernetes",
    "snippet" : "uintptr(unsafe.Pointer(&envvp[0])))",
    "version" : "std"
  },
  "cfg" : {
    "blocks" : [ {
      "update-vars" : [ ],
      "successors" : [ 2 ],
      "in-vars" : [ 5, 6, 2, 3, 1 ],
      "exit" : false,
      "out-vars" : [ 3, 1, 5, 6, 2 ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[entry]",
      "entry" : true,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ ],
      "in-vars" : [ ],
      "exit" : true,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[exit]",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 3 ],
      "in-vars" : [ 3, 1, 5, 6, 2 ],
      "exit" : false,
      "out-vars" : [ 4, 2, 3, 7, 5, 6 ],
      "decl-vars" : [ 4, 7 ],
      "line-start" : 263,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "argv0p"
          }
        }, {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "err",
            "variable" : 4
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "argv0",
              "variable" : 1
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 22,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 1,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "BytePtrFromString"
            }
          },
          "go-type" : 21,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 263,
      "code" : "argv0p, err := BytePtrFromString(argv0)",
      "entry" : false,
      "use-vars" : [ 1 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 4, 5 ],
      "in-vars" : [ 6, 4, 2, 3, 7, 5 ],
      "exit" : false,
      "out-vars" : [ 7, 5, 6, 4, 2, 3 ],
      "decl-vars" : [ ],
      "line-start" : 264,
      "ast" : {
        "condition" : {
          "go-type" : 24,
          "kind" : "expression",
          "left" : {
            "go-type" : 5,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "err",
              "variable" : 4
            }
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 25,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Nil",
              "kind" : "ident",
              "value" : "nil"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 266,
      "code" : "if err != nil {\n\treturn err\n}",
      "entry" : false,
      "use-vars" : [ 4 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 4 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 265,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 5,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "err",
            "variable" : 4
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 265,
      "code" : "return err",
      "entry" : false,
      "use-vars" : [ 4 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 6 ],
      "in-vars" : [ 7, 5, 6, 2, 3 ],
      "exit" : false,
      "out-vars" : [ 5, 6, 4, 3, 7, 8 ],
      "decl-vars" : [ 4, 8 ],
      "line-start" : 267,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "argvp"
          }
        }, {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "err",
            "variable" : 4
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 3,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "argv",
              "variable" : 2
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 28,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 2,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "SlicePtrFromStrings"
            }
          },
          "go-type" : 26,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 267,
      "code" : "argvp, err := SlicePtrFromStrings(argv)",
      "entry" : false,
      "use-vars" : [ 2 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 7, 8 ],
      "in-vars" : [ 6, 4, 3, 7, 8, 5 ],
      "exit" : false,
      "out-vars" : [ 4, 3, 7, 8, 5, 6 ],
      "decl-vars" : [ ],
      "line-start" : 268,
      "ast" : {
        "condition" : {
          "go-type" : 24,
          "kind" : "expression",
          "left" : {
            "go-type" : 5,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "err",
              "variable" : 4
            }
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 25,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Nil",
              "kind" : "ident",
              "value" : "nil"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 270,
      "code" : "if err != nil {\n\treturn err\n}",
      "entry" : false,
      "use-vars" : [ 4 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 4 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 269,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 5,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "err",
            "variable" : 4
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 269,
      "code" : "return err",
      "entry" : false,
      "use-vars" : [ 4 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 9 ],
      "in-vars" : [ 7, 8, 5, 6, 3 ],
      "exit" : false,
      "out-vars" : [ 7, 8, 5, 9, 6, 4 ],
      "decl-vars" : [ 4, 9 ],
      "line-start" : 271,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "envvp"
          }
        }, {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "err",
            "variable" : 4
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 3,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "envv",
              "variable" : 3
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 28,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 2,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "SlicePtrFromStrings"
            }
          },
          "go-type" : 26,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 271,
      "code" : "envvp, err := SlicePtrFromStrings(envv)",
      "entry" : false,
      "use-vars" : [ 3 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 10, 11 ],
      "in-vars" : [ 7, 8, 5, 9, 6, 4 ],
      "exit" : false,
      "out-vars" : [ 6, 4, 7, 8, 5, 9 ],
      "decl-vars" : [ ],
      "line-start" : 272,
      "ast" : {
        "condition" : {
          "go-type" : 24,
          "kind" : "expression",
          "left" : {
            "go-type" : 5,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "err",
              "variable" : 4
            }
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 25,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Nil",
              "kind" : "ident",
              "value" : "nil"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 274,
      "code" : "if err != nil {\n\treturn err\n}",
      "entry" : false,
      "use-vars" : [ 4 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 4 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 273,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 5,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "err",
            "variable" : 4
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 273,
      "code" : "return err",
      "entry" : false,
      "use-vars" : [ 4 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 12 ],
      "in-vars" : [ 7, 8, 5, 9, 6 ],
      "exit" : false,
      "out-vars" : [ 8, 5, 9, 6, 7 ],
      "decl-vars" : [ ],
      "line-start" : 275,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 30,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 3,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "runtime_BeforeExec"
            }
          },
          "go-type" : 8,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 275,
      "code" : "runtime_BeforeExec()",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 13 ],
      "in-vars" : [ 8, 5, 9, 6, 7 ],
      "exit" : false,
      "out-vars" : [ 7, 8, 5, 9, 6 ],
      "decl-vars" : [ 10 ],
      "line-start" : 277,
      "ast" : {
        "kind" : "statement",
        "target" : {
          "kind" : "decl",
          "specs" : [ {
            "comments" : [ ],
            "declared-type" : {
              "go-type" : 5,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 5,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "error"
              }
            },
            "kind" : "spec",
            "names" : [ {
              "ident-kind" : "NoKind",
              "kind" : "ident",
              "value" : "err1"
            } ],
            "type" : "var",
            "values" : [ ]
          } ],
          "type" : "var"
        },
        "type" : "declaration"
      },
      "assign-vars" : [ ],
      "line-end" : 277,
      "code" : "var err1 error",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 14, 15 ],
      "in-vars" : [ 7, 8, 5, 9, 6 ],
      "exit" : false,
      "out-vars" : [ 9, 6, 7, 8, 5 ],
      "decl-vars" : [ ],
      "line-start" : 278,
      "ast" : {
        "condition" : {
          "go-type" : 24,
          "kind" : "constant",
          "value" : {
            "type" : "BOOL",
            "value" : "false"
          }
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 292,
      "code" : "if runtime.GOOS == \"solaris\" || runtime.GOOS == \"illumos\" || runtime.GOOS == \"aix\" {\n\n\terr1 = execveLibc(\n\t\tuintptr(unsafe.Pointer(argv0p)),\n\t\tuintptr(unsafe.Pointer(&argvp[0])),\n\t\tuintptr(unsafe.Pointer(&envvp[0])))\n} else if runtime.GOOS == \"darwin\" {\n\n\terr1 = execveDarwin(argv0p, &argvp[0], &envvp[0])\n} else {\n\t_, _, err1 = RawSyscall(SYS_EXECVE,\n\t\tuintptr(unsafe.Pointer(argv0p)),\n\t\tuintptr(unsafe.Pointer(&argvp[0])),\n\t\tuintptr(unsafe.Pointer(&envvp[0])))\n}",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ 10 ],
      "successors" : [ 18 ],
      "in-vars" : [ 7, 8, 5, 9 ],
      "exit" : false,
      "out-vars" : [ 10 ],
      "decl-vars" : [ ],
      "line-start" : 280,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 5,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "err1",
            "variable" : 10
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "coerced-to" : {
              "go-type" : 12,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 12,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "uintptr"
              }
            },
            "go-type" : 12,
            "kind" : "expression",
            "target" : {
              "coerced-to" : {
                "go-type" : 31,
                "kind" : "type",
                "qualifier" : {
                  "ident-kind" : "PkgName",
                  "kind" : "ident",
                  "package" : 1,
                  "value" : "unsafe"
                },
                "type" : "identifier",
                "value" : {
                  "go-type" : 31,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "Pointer"
                }
              },
              "go-type" : 31,
              "kind" : "expression",
              "target" : {
                "go-type" : 17,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "argv0p",
                  "variable" : 7
                }
              },
              "type" : "cast"
            },
            "type" : "cast"
          }, {
            "coerced-to" : {
              "go-type" : 12,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 12,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "uintptr"
              }
            },
            "go-type" : 12,
            "kind" : "expression",
            "target" : {
              "coerced-to" : {
                "go-type" : 31,
                "kind" : "type",
                "qualifier" : {
                  "ident-kind" : "PkgName",
                  "kind" : "ident",
                  "package" : 1,
                  "value" : "unsafe"
                },
                "type" : "identifier",
                "value" : {
                  "go-type" : 31,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "Pointer"
                }
              },
              "go-type" : 31,
              "kind" : "expression",
              "target" : {
                "go-type" : 19,
                "kind" : "expression",
                "operator" : "&",
                "target" : {
                  "go-type" : 17,
                  "index" : {
                    "go-type" : 32,
                    "kind" : "constant",
                    "value" : {
                      "type" : "INT",
                      "value" : "0"
                    }
                  },
                  "kind" : "expression",
                  "target" : {
                    "go-type" : 27,
                    "kind" : "expression",
                    "type" : "identifier",
                    "value" : {
                      "ident-kind" : "Var",
                      "kind" : "ident",
                      "value" : "argvp",
                      "variable" : 8
                    }
                  },
                  "type" : "index"
                },
                "type" : "unary"
              },
              "type" : "cast"
            },
            "type" : "cast"
          }, {
            "coerced-to" : {
              "go-type" : 12,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 12,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "uintptr"
              }
            },
            "go-type" : 12,
            "kind" : "expression",
            "target" : {
              "coerced-to" : {
                "go-type" : 31,
                "kind" : "type",
                "qualifier" : {
                  "ident-kind" : "PkgName",
                  "kind" : "ident",
                  "package" : 1,
                  "value" : "unsafe"
                },
                "type" : "identifier",
                "value" : {
                  "go-type" : 31,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "Pointer"
                }
              },
              "go-type" : 31,
              "kind" : "expression",
              "target" : {
                "go-type" : 19,
                "kind" : "expression",
                "operator" : "&",
                "target" : {
                  "go-type" : 17,
                  "index" : {
                    "go-type" : 32,
                    "kind" : "constant",
                    "value" : {
                      "type" : "INT",
                      "value" : "0"
                    }
                  },
                  "kind" : "expression",
                  "target" : {
                    "go-type" : 27,
                    "kind" : "expression",
                    "type" : "identifier",
                    "value" : {
                      "ident-kind" : "Var",
                      "kind" : "ident",
                      "value" : "envvp",
                      "variable" : 9
                    }
                  },
                  "type" : "index"
                },
                "type" : "unary"
              },
              "type" : "cast"
            },
            "type" : "cast"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 10,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "execveLibc",
              "variable" : 5
            }
          },
          "go-type" : 14,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 10 ],
      "line-end" : 283,
      "code" : "err1 = execveLibc(\n\tuintptr(unsafe.Pointer(argv0p)),\n\tuintptr(unsafe.Pointer(&argvp[0])),\n\tuintptr(unsafe.Pointer(&envvp[0])))",
      "entry" : false,
      "use-vars" : [ 8, 5, 7, 9 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 16, 17 ],
      "in-vars" : [ 7, 8, 9, 6 ],
      "exit" : false,
      "out-vars" : [ 8, 9, 6, 7 ],
      "decl-vars" : [ ],
      "line-start" : 284,
      "ast" : {
        "condition" : {
          "go-type" : 24,
          "kind" : "constant",
          "value" : {
            "type" : "BOOL",
            "value" : "false"
          }
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 292,
      "code" : "if runtime.GOOS == \"darwin\" {\n\n\terr1 = execveDarwin(argv0p, &argvp[0], &envvp[0])\n} else {\n\t_, _, err1 = RawSyscall(SYS_EXECVE,\n\t\tuintptr(unsafe.Pointer(argv0p)),\n\t\tuintptr(unsafe.Pointer(&argvp[0])),\n\t\tuintptr(unsafe.Pointer(&envvp[0])))\n}",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ 10 ],
      "successors" : [ 18 ],
      "in-vars" : [ 7, 8, 9, 6 ],
      "exit" : false,
      "out-vars" : [ 10 ],
      "decl-vars" : [ ],
      "line-start" : 286,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 5,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "err1",
            "variable" : 10
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 17,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "argv0p",
              "variable" : 7
            }
          }, {
            "go-type" : 19,
            "kind" : "expression",
            "operator" : "&",
            "target" : {
              "go-type" : 17,
              "index" : {
                "go-type" : 32,
                "kind" : "constant",
                "value" : {
                  "type" : "INT",
                  "value" : "0"
                }
              },
              "kind" : "expression",
              "target" : {
                "go-type" : 27,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "argvp",
                  "variable" : 8
                }
              },
              "type" : "index"
            },
            "type" : "unary"
          }, {
            "go-type" : 19,
            "kind" : "expression",
            "operator" : "&",
            "target" : {
              "go-type" : 17,
              "index" : {
                "go-type" : 32,
                "kind" : "constant",
                "value" : {
                  "type" : "INT",
                  "value" : "0"
                }
              },
              "kind" : "expression",
              "target" : {
                "go-type" : 27,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "envvp",
                  "variable" : 9
                }
              },
              "type" : "index"
            },
            "type" : "unary"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 15,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "execveDarwin",
              "variable" : 6
            }
          },
          "go-type" : 5,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 10 ],
      "line-end" : 286,
      "code" : "err1 = execveDarwin(argv0p, &argvp[0], &envvp[0])",
      "entry" : false,
      "use-vars" : [ 9, 6, 7, 8 ]
    }, {
      "update-vars" : [ 10 ],
      "successors" : [ 18 ],
      "in-vars" : [ 7, 8, 9 ],
      "exit" : false,
      "out-vars" : [ 10 ],
      "decl-vars" : [ ],
      "line-start" : 288,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "_"
          }
        }, {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "_"
          }
        }, {
          "go-type" : 5,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "err1",
            "variable" : 10
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 12,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "59"
            }
          }, {
            "coerced-to" : {
              "go-type" : 12,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 12,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "uintptr"
              }
            },
            "go-type" : 12,
            "kind" : "expression",
            "target" : {
              "coerced-to" : {
                "go-type" : 31,
                "kind" : "type",
                "qualifier" : {
                  "ident-kind" : "PkgName",
                  "kind" : "ident",
                  "package" : 1,
                  "value" : "unsafe"
                },
                "type" : "identifier",
                "value" : {
                  "go-type" : 31,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "Pointer"
                }
              },
              "go-type" : 31,
              "kind" : "expression",
              "target" : {
                "go-type" : 17,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "argv0p",
                  "variable" : 7
                }
              },
              "type" : "cast"
            },
            "type" : "cast"
          }, {
            "coerced-to" : {
              "go-type" : 12,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 12,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "uintptr"
              }
            },
            "go-type" : 12,
            "kind" : "expression",
            "target" : {
              "coerced-to" : {
                "go-type" : 31,
                "kind" : "type",
                "qualifier" : {
                  "ident-kind" : "PkgName",
                  "kind" : "ident",
                  "package" : 1,
                  "value" : "unsafe"
                },
                "type" : "identifier",
                "value" : {
                  "go-type" : 31,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "Pointer"
                }
              },
              "go-type" : 31,
              "kind" : "expression",
              "target" : {
                "go-type" : 19,
                "kind" : "expression",
                "operator" : "&",
                "target" : {
                  "go-type" : 17,
                  "index" : {
                    "go-type" : 32,
                    "kind" : "constant",
                    "value" : {
                      "type" : "INT",
                      "value" : "0"
                    }
                  },
                  "kind" : "expression",
                  "target" : {
                    "go-type" : 27,
                    "kind" : "expression",
                    "type" : "identifier",
                    "value" : {
                      "ident-kind" : "Var",
                      "kind" : "ident",
                      "value" : "argvp",
                      "variable" : 8
                    }
                  },
                  "type" : "index"
                },
                "type" : "unary"
              },
              "type" : "cast"
            },
            "type" : "cast"
          }, {
            "coerced-to" : {
              "go-type" : 12,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 12,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "uintptr"
              }
            },
            "go-type" : 12,
            "kind" : "expression",
            "target" : {
              "coerced-to" : {
                "go-type" : 31,
                "kind" : "type",
                "qualifier" : {
                  "ident-kind" : "PkgName",
                  "kind" : "ident",
                  "package" : 1,
                  "value" : "unsafe"
                },
                "type" : "identifier",
                "value" : {
                  "go-type" : 31,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "Pointer"
                }
              },
              "go-type" : 31,
              "kind" : "expression",
              "target" : {
                "go-type" : 19,
                "kind" : "expression",
                "operator" : "&",
                "target" : {
                  "go-type" : 17,
                  "index" : {
                    "go-type" : 32,
                    "kind" : "constant",
                    "value" : {
                      "type" : "INT",
                      "value" : "0"
                    }
                  },
                  "kind" : "expression",
                  "target" : {
                    "go-type" : 27,
                    "kind" : "expression",
                    "type" : "identifier",
                    "value" : {
                      "ident-kind" : "Var",
                      "kind" : "ident",
                      "value" : "envvp",
                      "variable" : 9
                    }
                  },
                  "type" : "index"
                },
                "type" : "unary"
              },
              "type" : "cast"
            },
            "type" : "cast"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 34,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 4,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "RawSyscall"
            }
          },
          "go-type" : 33,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 10 ],
      "line-end" : 291,
      "code" : "_, _, err1 = RawSyscall(SYS_EXECVE,\n\tuintptr(unsafe.Pointer(argv0p)),\n\tuintptr(unsafe.Pointer(&argvp[0])),\n\tuintptr(unsafe.Pointer(&envvp[0])))",
      "entry" : false,
      "use-vars" : [ 8, 9, 7 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 19 ],
      "in-vars" : [ 10 ],
      "exit" : false,
      "out-vars" : [ 10 ],
      "decl-vars" : [ ],
      "line-start" : 293,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 30,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 5,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "runtime_AfterExec"
            }
          },
          "go-type" : 8,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 293,
      "code" : "runtime_AfterExec()",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 10 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 294,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 5,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "err1",
            "variable" : 10
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 294,
      "code" : "return err1",
      "entry" : false,
      "use-vars" : [ 10 ]
    } ],
    "code" : "// Exec invokes the execve(2) system call.\nfunc Exec(argv0 string, argv []string, envv []string) (err error) {\n\targv0p, err := BytePtrFromString(argv0)\n\tif err != nil {\n\t\treturn err\n\t}\n\targvp, err := SlicePtrFromStrings(argv)\n\tif err != nil {\n\t\treturn err\n\t}\n\tenvvp, err := SlicePtrFromStrings(envv)\n\tif err != nil {\n\t\treturn err\n\t}\n\truntime_BeforeExec()\n\n\tvar err1 error\n\tif runtime.GOOS == \"solaris\" || runtime.GOOS == \"illumos\" || runtime.GOOS == \"aix\" {\n\n\t\terr1 = execveLibc(\n\t\t\tuintptr(unsafe.Pointer(argv0p)),\n\t\t\tuintptr(unsafe.Pointer(&argvp[0])),\n\t\t\tuintptr(unsafe.Pointer(&envvp[0])))\n\t} else if runtime.GOOS == \"darwin\" {\n\n\t\terr1 = execveDarwin(argv0p, &argvp[0], &envvp[0])\n\t} else {\n\t\t_, _, err1 = RawSyscall(SYS_EXECVE,\n\t\t\tuintptr(unsafe.Pointer(argv0p)),\n\t\t\tuintptr(unsafe.Pointer(&argvp[0])),\n\t\t\tuintptr(unsafe.Pointer(&envvp[0])))\n\t}\n\truntime_AfterExec()\n\treturn err1\n}",
    "defines" : [ 0 ],
    "functions" : [ {
      "name" : "Exec",
      "package" : 0,
      "type" : 0,
      "exported" : true
    }, {
      "name" : "BytePtrFromString",
      "package" : 0,
      "type" : 22,
      "exported" : true
    }, {
      "name" : "SlicePtrFromStrings",
      "package" : 0,
      "type" : 28,
      "exported" : true
    }, {
      "name" : "runtime_BeforeExec",
      "package" : 0,
      "type" : 30,
      "exported" : false
    }, {
      "name" : "RawSyscall",
      "package" : 0,
      "type" : 34,
      "exported" : true
    }, {
      "name" : "runtime_AfterExec",
      "package" : 0,
      "type" : 30,
      "exported" : false
    } ],
    "line-end" : 295,
    "line-start" : 262,
    "names" : [ "Exec" ],
    "package" : 0,
    "packages" : [ {
      "name" : "syscall",
      "path" : "syscall"
    }, {
      "name" : "unsafe",
      "path" : "unsafe"
    } ],
    "params" : [ 1, 2, 3 ],
    "receivers" : [ ],
    "results" : [ 4 ],
    "type" : "function",
    "types" : [ {
      "name" : "func(argv0 string, argv []string, envv []string) (err error)",
      "params" : 1,
      "recv" : -1,
      "results" : 4,
      "type" : "Signature",
      "underlying" : 0,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "argv0",
        "type" : 2
      }, {
        "name" : "argv",
        "type" : 3
      }, {
        "name" : "envv",
        "type" : 3
      } ],
      "name" : "(argv0 string, argv []string, envv []string)",
      "type" : "Tuple",
      "underlying" : 1
    }, {
      "name" : "string",
      "type" : "Basic",
      "underlying" : 2
    }, {
      "elem" : 2,
      "name" : "[]string",
      "type" : "Slice",
      "underlying" : 3
    }, {
      "fields" : [ {
        "name" : "err",
        "type" : 5
      } ],
      "name" : "(err error)",
      "type" : "Tuple",
      "underlying" : 4
    }, {
      "local-name" : "error",
      "name" : "error",
      "package" : -1,
      "type" : "Named",
      "underlying" : 6
    }, {
      "methods" : [ {
        "name" : "Error",
        "type" : 7
      } ],
      "name" : "interface{Error() string}",
      "type" : "Interface",
      "underlying" : 6
    }, {
      "name" : "func() string",
      "params" : 8,
      "recv" : 0,
      "results" : 9,
      "type" : "Signature",
      "underlying" : 7,
      "variadic" : false
    }, {
      "fields" : [ ],
      "name" : "()",
      "type" : "Tuple",
      "underlying" : 8
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 2
      } ],
      "name" : "(string)",
      "type" : "Tuple",
      "underlying" : 9
    }, {
      "name" : "func(path uintptr, argv uintptr, envp uintptr) syscall.Errno",
      "params" : 11,
      "recv" : -1,
      "results" : 13,
      "type" : "Signature",
      "underlying" : 10,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "path",
        "type" : 12
      }, {
        "name" : "argv",
        "type" : 12
      }, {
        "name" : "envp",
        "type" : 12
      } ],
      "name" : "(path uintptr, argv uintptr, envp uintptr)",
      "type" : "Tuple",
      "underlying" : 11
    }, {
      "name" : "uintptr",
      "type" : "Basic",
      "underlying" : 12
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 14
      } ],
      "name" : "(syscall.Errno)",
      "type" : "Tuple",
      "underlying" : 13
    }, {
      "local-name" : "Errno",
      "name" : "syscall.Errno",
      "package" : 0,
      "type" : "Named",
      "underlying" : 12
    }, {
      "name" : "func(path *byte, argv **byte, envp **byte) error",
      "params" : 16,
      "recv" : -1,
      "results" : 20,
      "type" : "Signature",
      "underlying" : 15,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "path",
        "type" : 17
      }, {
        "name" : "argv",
        "type" : 19
      }, {
        "name" : "envp",
        "type" : 19
      } ],
      "name" : "(path *byte, argv **byte, envp **byte)",
      "type" : "Tuple",
      "underlying" : 16
    }, {
      "elem" : 18,
      "name" : "*byte",
      "type" : "Pointer",
      "underlying" : 17
    }, {
      "name" : "byte",
      "type" : "Basic",
      "underlying" : 18
    }, {
      "elem" : 17,
      "name" : "**byte",
      "type" : "Pointer",
      "underlying" : 19
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 5
      } ],
      "name" : "(error)",
      "type" : "Tuple",
      "underlying" : 20
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 17
      }, {
        "name" : "",
        "type" : 5
      } ],
      "name" : "(*byte, error)",
      "type" : "Tuple",
      "underlying" : 21
    }, {
      "name" : "func(s string) (*byte, error)",
      "params" : 23,
      "recv" : -1,
      "results" : 21,
      "type" : "Signature",
      "underlying" : 22,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "s",
        "type" : 2
      } ],
      "name" : "(s string)",
      "type" : "Tuple",
      "underlying" : 23
    }, {
      "name" : "untyped bool",
      "type" : "Basic",
      "underlying" : 24
    }, {
      "name" : "untyped nil",
      "type" : "Basic",
      "underlying" : 25
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 27
      }, {
        "name" : "",
        "type" : 5
      } ],
      "name" : "([]*byte, error)",
      "type" : "Tuple",
      "underlying" : 26
    }, {
      "elem" : 17,
      "name" : "[]*byte",
      "type" : "Slice",
      "underlying" : 27
    }, {
      "name" : "func(ss []string) ([]*byte, error)",
      "params" : 29,
      "recv" : -1,
      "results" : 26,
      "type" : "Signature",
      "underlying" : 28,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "ss",
        "type" : 3
      } ],
      "name" : "(ss []string)",
      "type" : "Tuple",
      "underlying" : 29
    }, {
      "name" : "func()",
      "params" : 8,
      "recv" : -1,
      "results" : 8,
      "type" : "Signature",
      "underlying" : 30,
      "variadic" : false
    }, {
      "local-name" : "Pointer",
      "name" : "unsafe.Pointer",
      "package" : 1,
      "type" : "Basic",
      "underlying" : 31
    }, {
      "name" : "int",
      "type" : "Basic",
      "underlying" : 32
    }, {
      "fields" : [ {
        "name" : "r1",
        "type" : 12
      }, {
        "name" : "r2",
        "type" : 12
      }, {
        "name" : "err",
        "type" : 14
      } ],
      "name" : "(r1 uintptr, r2 uintptr, err syscall.Errno)",
      "type" : "Tuple",
      "underlying" : 33
    }, {
      "name" : "func(trap uintptr, a1 uintptr, a2 uintptr, a3 uintptr) (r1 uintptr, r2 uintptr, err syscall.Errno)",
      "params" : 35,
      "recv" : -1,
      "results" : 33,
      "type" : "Signature",
      "underlying" : 34,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "trap",
        "type" : 12
      }, {
        "name" : "a1",
        "type" : 12
      }, {
        "name" : "a2",
        "type" : 12
      }, {
        "name" : "a3",
        "type" : 12
      } ],
      "name" : "(trap uintptr, a1 uintptr, a2 uintptr, a3 uintptr)",
      "type" : "Tuple",
      "underlying" : 35
    } ],
    "variables" : [ {
      "name" : "",
      "package" : -1,
      "type" : 5,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "argv0",
      "package" : 0,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "argv",
      "package" : 0,
      "type" : 3,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "envv",
      "package" : 0,
      "type" : 3,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "err",
      "package" : 0,
      "type" : 5,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "execveLibc",
      "package" : 0,
      "type" : 10,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "execveDarwin",
      "package" : 0,
      "type" : 15,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "argv0p",
      "package" : 0,
      "type" : 17,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "argvp",
      "package" : 0,
      "type" : 27,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "envvp",
      "package" : 0,
      "type" : 27,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "err1",
      "package" : 0,
      "type" : 5,
      "exported" : false,
      "embedded" : false,
      "field" : false
    } ]
  },
  "go-version" : "1.14.3"
}