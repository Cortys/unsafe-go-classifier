{
  "usage" : {
    "file" : "zsyscall_linux_amd64.go",
    "label1" : "syscall",
    "label2" : "no-gc",
    "line" : "1578",
    "module" : "std",
    "pkg" : "syscall",
    "project" : "kubernetes/kubernetes",
    "snippet" : "r0, _, e1 := Syscall6(SYS_RECVFROM, uintptr(fd), uintptr(_p0), uintptr(len(p)), uintptr(flags), uintptr(unsafe.Pointer(from)), uintptr(unsafe.Pointer(fromlen)))",
    "version" : "std"
  },
  "cfg" : {
    "blocks" : [ {
      "update-vars" : [ ],
      "successors" : [ 2 ],
      "in-vars" : [ 3, 4, 8, 1, 5, 2 ],
      "exit" : false,
      "out-vars" : [ 1, 5, 2, 3, 4, 8 ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[entry]",
      "entry" : true,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ ],
      "in-vars" : [ ],
      "exit" : true,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[exit]",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 3 ],
      "in-vars" : [ 5, 2, 3, 4, 8, 1 ],
      "exit" : false,
      "out-vars" : [ 8, 1, 5, 2, 3, 4 ],
      "decl-vars" : [ 9 ],
      "line-start" : 1572,
      "ast" : {
        "kind" : "statement",
        "target" : {
          "kind" : "decl",
          "specs" : [ {
            "comments" : [ ],
            "declared-type" : {
              "go-type" : 25,
              "kind" : "type",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 1,
                "value" : "unsafe"
              },
              "type" : "identifier",
              "value" : {
                "go-type" : 25,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "Pointer"
              }
            },
            "kind" : "spec",
            "names" : [ {
              "ident-kind" : "NoKind",
              "kind" : "ident",
              "value" : "_p0"
            } ],
            "type" : "var",
            "values" : [ ]
          } ],
          "type" : "var"
        },
        "type" : "declaration"
      },
      "assign-vars" : [ ],
      "line-end" : 1572,
      "code" : "var _p0 unsafe.Pointer",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 4, 5 ],
      "in-vars" : [ 4, 8, 1, 5, 2, 3 ],
      "exit" : false,
      "out-vars" : [ 1, 5, 2, 3, 4, 8 ],
      "decl-vars" : [ ],
      "line-start" : 1573,
      "ast" : {
        "condition" : {
          "go-type" : 26,
          "kind" : "expression",
          "left" : {
            "arguments" : [ {
              "go-type" : 3,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "p",
                "variable" : 2
              }
            } ],
            "ellipsis" : false,
            "function" : {
              "go-type" : 27,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Builtin",
                "kind" : "ident",
                "value" : "len"
              }
            },
            "go-type" : 2,
            "kind" : "expression",
            "type" : "call"
          },
          "operator" : ">",
          "right" : {
            "go-type" : 2,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 1577,
      "code" : "if len(p) > 0 {\n\t_p0 = unsafe.Pointer(&p[0])\n} else {\n\t_p0 = unsafe.Pointer(&_zero)\n}",
      "entry" : false,
      "use-vars" : [ 2 ]
    }, {
      "update-vars" : [ 9 ],
      "successors" : [ 6 ],
      "in-vars" : [ 1, 5, 2, 3, 4 ],
      "exit" : false,
      "out-vars" : [ 1, 9, 5, 2, 3, 4 ],
      "decl-vars" : [ ],
      "line-start" : 1574,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 25,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "_p0",
            "variable" : 9
          }
        } ],
        "right" : [ {
          "coerced-to" : {
            "go-type" : 25,
            "kind" : "type",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 1,
              "value" : "unsafe"
            },
            "type" : "identifier",
            "value" : {
              "go-type" : 25,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "Pointer"
            }
          },
          "go-type" : 25,
          "kind" : "expression",
          "target" : {
            "go-type" : 30,
            "kind" : "expression",
            "operator" : "&",
            "target" : {
              "go-type" : 4,
              "index" : {
                "go-type" : 2,
                "kind" : "constant",
                "value" : {
                  "type" : "INT",
                  "value" : "0"
                }
              },
              "kind" : "expression",
              "target" : {
                "go-type" : 3,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "p",
                  "variable" : 2
                }
              },
              "type" : "index"
            },
            "type" : "unary"
          },
          "type" : "cast"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 9 ],
      "line-end" : 1574,
      "code" : "_p0 = unsafe.Pointer(&p[0])",
      "entry" : false,
      "use-vars" : [ 2 ]
    }, {
      "update-vars" : [ 9 ],
      "successors" : [ 6 ],
      "in-vars" : [ 1, 5, 2, 3, 4, 8 ],
      "exit" : false,
      "out-vars" : [ 3, 4, 1, 9, 5, 2 ],
      "decl-vars" : [ ],
      "line-start" : 1576,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 25,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "_p0",
            "variable" : 9
          }
        } ],
        "right" : [ {
          "coerced-to" : {
            "go-type" : 25,
            "kind" : "type",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 1,
              "value" : "unsafe"
            },
            "type" : "identifier",
            "value" : {
              "go-type" : 25,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "Pointer"
            }
          },
          "go-type" : 25,
          "kind" : "expression",
          "target" : {
            "go-type" : 31,
            "kind" : "expression",
            "operator" : "&",
            "target" : {
              "go-type" : 24,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "_zero",
                "variable" : 8
              }
            },
            "type" : "unary"
          },
          "type" : "cast"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 9 ],
      "line-end" : 1576,
      "code" : "_p0 = unsafe.Pointer(&_zero)",
      "entry" : false,
      "use-vars" : [ 8 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 7 ],
      "in-vars" : [ 9, 5, 2, 3, 4, 1 ],
      "exit" : false,
      "out-vars" : [ 10, 11 ],
      "decl-vars" : [ 10, 12, 11 ],
      "line-start" : 1578,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "r0"
          }
        }, {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "_"
          }
        }, {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "e1"
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 24,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "45"
            }
          }, {
            "coerced-to" : {
              "go-type" : 24,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 24,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "uintptr"
              }
            },
            "go-type" : 24,
            "kind" : "expression",
            "target" : {
              "go-type" : 2,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "fd",
                "variable" : 1
              }
            },
            "type" : "cast"
          }, {
            "coerced-to" : {
              "go-type" : 24,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 24,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "uintptr"
              }
            },
            "go-type" : 24,
            "kind" : "expression",
            "target" : {
              "go-type" : 25,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "_p0",
                "variable" : 9
              }
            },
            "type" : "cast"
          }, {
            "coerced-to" : {
              "go-type" : 24,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 24,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "uintptr"
              }
            },
            "go-type" : 24,
            "kind" : "expression",
            "target" : {
              "arguments" : [ {
                "go-type" : 3,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "p",
                  "variable" : 2
                }
              } ],
              "ellipsis" : false,
              "function" : {
                "go-type" : 27,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Builtin",
                  "kind" : "ident",
                  "value" : "len"
                }
              },
              "go-type" : 2,
              "kind" : "expression",
              "type" : "call"
            },
            "type" : "cast"
          }, {
            "coerced-to" : {
              "go-type" : 24,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 24,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "uintptr"
              }
            },
            "go-type" : 24,
            "kind" : "expression",
            "target" : {
              "go-type" : 2,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "flags",
                "variable" : 3
              }
            },
            "type" : "cast"
          }, {
            "coerced-to" : {
              "go-type" : 24,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 24,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "uintptr"
              }
            },
            "go-type" : 24,
            "kind" : "expression",
            "target" : {
              "coerced-to" : {
                "go-type" : 25,
                "kind" : "type",
                "qualifier" : {
                  "ident-kind" : "PkgName",
                  "kind" : "ident",
                  "package" : 1,
                  "value" : "unsafe"
                },
                "type" : "identifier",
                "value" : {
                  "go-type" : 25,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "Pointer"
                }
              },
              "go-type" : 25,
              "kind" : "expression",
              "target" : {
                "go-type" : 5,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "from",
                  "variable" : 4
                }
              },
              "type" : "cast"
            },
            "type" : "cast"
          }, {
            "coerced-to" : {
              "go-type" : 24,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 24,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "uintptr"
              }
            },
            "go-type" : 24,
            "kind" : "expression",
            "target" : {
              "coerced-to" : {
                "go-type" : 25,
                "kind" : "type",
                "qualifier" : {
                  "ident-kind" : "PkgName",
                  "kind" : "ident",
                  "package" : 1,
                  "value" : "unsafe"
                },
                "type" : "identifier",
                "value" : {
                  "go-type" : 25,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "Pointer"
                }
              },
              "go-type" : 25,
              "kind" : "expression",
              "target" : {
                "go-type" : 14,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "fromlen",
                  "variable" : 5
                }
              },
              "type" : "cast"
            },
            "type" : "cast"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 34,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "Syscall6"
            }
          },
          "go-type" : 32,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 1578,
      "code" : "r0, _, e1 := Syscall6(SYS_RECVFROM, uintptr(fd), uintptr(_p0), uintptr(len(p)), uintptr(flags), uintptr(unsafe.Pointer(from)), uintptr(unsafe.Pointer(fromlen)))",
      "entry" : false,
      "use-vars" : [ 2, 9, 5, 1, 3, 4 ]
    }, {
      "update-vars" : [ 6 ],
      "successors" : [ 8 ],
      "in-vars" : [ 10, 11 ],
      "exit" : false,
      "out-vars" : [ 10 ],
      "decl-vars" : [ ],
      "line-start" : 1579,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 2,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "n",
            "variable" : 6
          }
        } ],
        "right" : [ {
          "coerced-to" : {
            "go-type" : 2,
            "kind" : "type",
            "type" : "identifier",
            "value" : {
              "go-type" : 2,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "int"
            }
          },
          "go-type" : 2,
          "kind" : "expression",
          "target" : {
            "go-type" : 24,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "r0",
              "variable" : 11
            }
          },
          "type" : "cast"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 6 ],
      "line-end" : 1579,
      "code" : "n = int(r0)",
      "entry" : false,
      "use-vars" : [ 11 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 9, 10 ],
      "in-vars" : [ 10 ],
      "exit" : false,
      "out-vars" : [ 10 ],
      "decl-vars" : [ ],
      "line-start" : 1580,
      "ast" : {
        "condition" : {
          "go-type" : 26,
          "kind" : "expression",
          "left" : {
            "go-type" : 33,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "e1",
              "variable" : 10
            }
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 33,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 1582,
      "code" : "if e1 != 0 {\n\terr = errnoErr(e1)\n}",
      "entry" : false,
      "use-vars" : [ 10 ]
    }, {
      "update-vars" : [ 7 ],
      "successors" : [ 10 ],
      "in-vars" : [ 10 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 1581,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 18,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "err",
            "variable" : 7
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 33,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "e1",
              "variable" : 10
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 36,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "errnoErr"
            }
          },
          "go-type" : 18,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 7 ],
      "line-end" : 1581,
      "code" : "err = errnoErr(e1)",
      "entry" : false,
      "use-vars" : [ 10 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 1583,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ ]
      },
      "assign-vars" : [ ],
      "line-end" : 1583,
      "code" : "return",
      "entry" : false,
      "use-vars" : [ ]
    } ],
    "code" : "func recvfrom(fd int, p []byte, flags int, from *RawSockaddrAny, fromlen *_Socklen) (n int, err error) {\n\tvar _p0 unsafe.Pointer\n\tif len(p) > 0 {\n\t\t_p0 = unsafe.Pointer(&p[0])\n\t} else {\n\t\t_p0 = unsafe.Pointer(&_zero)\n\t}\n\tr0, _, e1 := Syscall6(SYS_RECVFROM, uintptr(fd), uintptr(_p0), uintptr(len(p)), uintptr(flags), uintptr(unsafe.Pointer(from)), uintptr(unsafe.Pointer(fromlen)))\n\tn = int(r0)\n\tif e1 != 0 {\n\t\terr = errnoErr(e1)\n\t}\n\treturn\n}",
    "defines" : [ 0 ],
    "functions" : [ {
      "name" : "recvfrom",
      "package" : 0,
      "type" : 0,
      "exported" : false
    }, {
      "name" : "Syscall6",
      "package" : 0,
      "type" : 34,
      "exported" : true
    }, {
      "name" : "errnoErr",
      "package" : 0,
      "type" : 36,
      "exported" : false
    } ],
    "line-end" : 1584,
    "line-start" : 1571,
    "names" : [ "recvfrom" ],
    "package" : 0,
    "packages" : [ {
      "name" : "syscall",
      "path" : "syscall"
    }, {
      "name" : "unsafe",
      "path" : "unsafe"
    } ],
    "params" : [ 1, 2, 3, 4, 5 ],
    "receivers" : [ ],
    "results" : [ 6, 7 ],
    "type" : "function",
    "types" : [ {
      "name" : "func(fd int, p []byte, flags int, from *syscall.RawSockaddrAny, fromlen *syscall._Socklen) (n int, err error)",
      "params" : 1,
      "recv" : -1,
      "results" : 17,
      "type" : "Signature",
      "underlying" : 0,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "fd",
        "type" : 2
      }, {
        "name" : "p",
        "type" : 3
      }, {
        "name" : "flags",
        "type" : 2
      }, {
        "name" : "from",
        "type" : 5
      }, {
        "name" : "fromlen",
        "type" : 14
      } ],
      "name" : "(fd int, p []byte, flags int, from *syscall.RawSockaddrAny, fromlen *syscall._Socklen)",
      "type" : "Tuple",
      "underlying" : 1
    }, {
      "name" : "int",
      "type" : "Basic",
      "underlying" : 2
    }, {
      "elem" : 4,
      "name" : "[]byte",
      "type" : "Slice",
      "underlying" : 3
    }, {
      "name" : "byte",
      "type" : "Basic",
      "underlying" : 4
    }, {
      "elem" : 6,
      "name" : "*syscall.RawSockaddrAny",
      "type" : "Pointer",
      "underlying" : 5
    }, {
      "local-name" : "RawSockaddrAny",
      "name" : "syscall.RawSockaddrAny",
      "package" : 0,
      "type" : "Named",
      "underlying" : 7
    }, {
      "fields" : [ {
        "name" : "Addr",
        "type" : 8
      }, {
        "name" : "Pad",
        "type" : 13
      } ],
      "name" : "struct{Addr syscall.RawSockaddr; Pad [96]int8}",
      "type" : "Struct",
      "underlying" : 7
    }, {
      "local-name" : "RawSockaddr",
      "name" : "syscall.RawSockaddr",
      "package" : 0,
      "type" : "Named",
      "underlying" : 9
    }, {
      "fields" : [ {
        "name" : "Family",
        "type" : 10
      }, {
        "name" : "Data",
        "type" : 11
      } ],
      "name" : "struct{Family uint16; Data [14]int8}",
      "type" : "Struct",
      "underlying" : 9
    }, {
      "name" : "uint16",
      "type" : "Basic",
      "underlying" : 10
    }, {
      "elem" : 12,
      "name" : "[14]int8",
      "type" : "Array",
      "underlying" : 11
    }, {
      "name" : "int8",
      "type" : "Basic",
      "underlying" : 12
    }, {
      "elem" : 12,
      "name" : "[96]int8",
      "type" : "Array",
      "underlying" : 13
    }, {
      "elem" : 15,
      "name" : "*syscall._Socklen",
      "type" : "Pointer",
      "underlying" : 14
    }, {
      "local-name" : "_Socklen",
      "name" : "syscall._Socklen",
      "package" : 0,
      "type" : "Named",
      "underlying" : 16
    }, {
      "name" : "uint32",
      "type" : "Basic",
      "underlying" : 16
    }, {
      "fields" : [ {
        "name" : "n",
        "type" : 2
      }, {
        "name" : "err",
        "type" : 18
      } ],
      "name" : "(n int, err error)",
      "type" : "Tuple",
      "underlying" : 17
    }, {
      "local-name" : "error",
      "name" : "error",
      "package" : -1,
      "type" : "Named",
      "underlying" : 19
    }, {
      "methods" : [ {
        "name" : "Error",
        "type" : 20
      } ],
      "name" : "interface{Error() string}",
      "type" : "Interface",
      "underlying" : 19
    }, {
      "name" : "func() string",
      "params" : 21,
      "recv" : 0,
      "results" : 22,
      "type" : "Signature",
      "underlying" : 20,
      "variadic" : false
    }, {
      "fields" : [ ],
      "name" : "()",
      "type" : "Tuple",
      "underlying" : 21
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 23
      } ],
      "name" : "(string)",
      "type" : "Tuple",
      "underlying" : 22
    }, {
      "name" : "string",
      "type" : "Basic",
      "underlying" : 23
    }, {
      "name" : "uintptr",
      "type" : "Basic",
      "underlying" : 24
    }, {
      "local-name" : "Pointer",
      "name" : "unsafe.Pointer",
      "package" : 1,
      "type" : "Basic",
      "underlying" : 25
    }, {
      "name" : "untyped bool",
      "type" : "Basic",
      "underlying" : 26
    }, {
      "name" : "func([]byte) int",
      "params" : 28,
      "recv" : -1,
      "results" : 29,
      "type" : "Signature",
      "underlying" : 27,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 3
      } ],
      "name" : "([]byte)",
      "type" : "Tuple",
      "underlying" : 28
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 2
      } ],
      "name" : "(int)",
      "type" : "Tuple",
      "underlying" : 29
    }, {
      "elem" : 4,
      "name" : "*byte",
      "type" : "Pointer",
      "underlying" : 30
    }, {
      "elem" : 24,
      "name" : "*uintptr",
      "type" : "Pointer",
      "underlying" : 31
    }, {
      "fields" : [ {
        "name" : "r1",
        "type" : 24
      }, {
        "name" : "r2",
        "type" : 24
      }, {
        "name" : "err",
        "type" : 33
      } ],
      "name" : "(r1 uintptr, r2 uintptr, err syscall.Errno)",
      "type" : "Tuple",
      "underlying" : 32
    }, {
      "local-name" : "Errno",
      "name" : "syscall.Errno",
      "package" : 0,
      "type" : "Named",
      "underlying" : 24
    }, {
      "name" : "func(trap uintptr, a1 uintptr, a2 uintptr, a3 uintptr, a4 uintptr, a5 uintptr, a6 uintptr) (r1 uintptr, r2 uintptr, err syscall.Errno)",
      "params" : 35,
      "recv" : -1,
      "results" : 32,
      "type" : "Signature",
      "underlying" : 34,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "trap",
        "type" : 24
      }, {
        "name" : "a1",
        "type" : 24
      }, {
        "name" : "a2",
        "type" : 24
      }, {
        "name" : "a3",
        "type" : 24
      }, {
        "name" : "a4",
        "type" : 24
      }, {
        "name" : "a5",
        "type" : 24
      }, {
        "name" : "a6",
        "type" : 24
      } ],
      "name" : "(trap uintptr, a1 uintptr, a2 uintptr, a3 uintptr, a4 uintptr, a5 uintptr, a6 uintptr)",
      "type" : "Tuple",
      "underlying" : 35
    }, {
      "name" : "func(e syscall.Errno) error",
      "params" : 37,
      "recv" : -1,
      "results" : 38,
      "type" : "Signature",
      "underlying" : 36,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "e",
        "type" : 33
      } ],
      "name" : "(e syscall.Errno)",
      "type" : "Tuple",
      "underlying" : 37
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 18
      } ],
      "name" : "(error)",
      "type" : "Tuple",
      "underlying" : 38
    } ],
    "variables" : [ {
      "name" : "",
      "package" : -1,
      "type" : 18,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "fd",
      "package" : 0,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "p",
      "package" : 0,
      "type" : 3,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "flags",
      "package" : 0,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "from",
      "package" : 0,
      "type" : 5,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "fromlen",
      "package" : 0,
      "type" : 14,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "n",
      "package" : 0,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "err",
      "package" : 0,
      "type" : 18,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "_zero",
      "package" : 0,
      "type" : 24,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "_p0",
      "package" : 0,
      "type" : 25,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "e1",
      "package" : 0,
      "type" : 33,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "r0",
      "package" : 0,
      "type" : 24,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "_",
      "package" : 0,
      "type" : 24,
      "exported" : false,
      "embedded" : false,
      "field" : false
    } ]
  },
  "go-version" : "1.14.3"
}