{
  "usage" : {
    "file" : "exec_linux.go",
    "label1" : "syscall",
    "label2" : "no-gc",
    "line" : "93",
    "module" : "std",
    "pkg" : "syscall",
    "project" : "kubernetes/kubernetes",
    "snippet" : "RawSyscall(SYS_WRITE, uintptr(p[1]), uintptr(unsafe.Pointer(&err2)), unsafe.Sizeof(err2))",
    "version" : "std"
  },
  "cfg" : {
    "blocks" : [ {
      "update-vars" : [ ],
      "successors" : [ 2 ],
      "in-vars" : [ 7, 6, 0, 2, 5, 1, 3, 4 ],
      "exit" : false,
      "out-vars" : [ 6, 0, 2, 5, 1, 3, 4, 7 ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[entry]",
      "entry" : true,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ ],
      "in-vars" : [ ],
      "exit" : true,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[exit]",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 3 ],
      "in-vars" : [ 0, 2, 5, 1, 3, 4, 7, 6 ],
      "exit" : false,
      "out-vars" : [ 10, 11, 12, 6, 13 ],
      "decl-vars" : [ 12, 13, 10, 11 ],
      "line-start" : 72,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "r1"
          }
        }, {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "err1"
          }
        }, {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "p"
          }
        }, {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "locked"
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "argv0",
              "variable" : 0
            }
          }, {
            "go-type" : 4,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "argv",
              "variable" : 1
            }
          }, {
            "go-type" : 4,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "envv",
              "variable" : 2
            }
          }, {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "chroot",
              "variable" : 3
            }
          }, {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "dir",
              "variable" : 4
            }
          }, {
            "go-type" : 5,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "attr",
              "variable" : 5
            }
          }, {
            "go-type" : 12,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "sys",
              "variable" : 6
            }
          }, {
            "go-type" : 21,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "pipe",
              "variable" : 7
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 30,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 1,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "forkAndExecInChild1"
            }
          },
          "go-type" : 28,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 72,
      "code" : "r1, err1, p, locked := forkAndExecInChild1(argv0, argv, envv, chroot, dir, attr, sys, pipe)",
      "entry" : false,
      "use-vars" : [ 4, 5, 6, 2, 3, 7, 0, 1 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 4, 5 ],
      "in-vars" : [ 11, 12, 6, 13, 10 ],
      "exit" : false,
      "out-vars" : [ 6, 13, 10, 11 ],
      "decl-vars" : [ ],
      "line-start" : 73,
      "ast" : {
        "condition" : {
          "go-type" : 20,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "locked",
            "variable" : 12
          }
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 75,
      "code" : "if locked {\n\truntime_AfterFork()\n}",
      "entry" : false,
      "use-vars" : [ 12 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 5 ],
      "in-vars" : [ 6, 13, 10, 11 ],
      "exit" : false,
      "out-vars" : [ 6, 13, 10, 11 ],
      "decl-vars" : [ ],
      "line-start" : 74,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 32,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 2,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "runtime_AfterFork"
            }
          },
          "go-type" : 31,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 74,
      "code" : "runtime_AfterFork()",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 6, 7 ],
      "in-vars" : [ 10, 11, 6, 13 ],
      "exit" : false,
      "out-vars" : [ 6, 13, 10, 11 ],
      "decl-vars" : [ ],
      "line-start" : 76,
      "ast" : {
        "condition" : {
          "go-type" : 33,
          "kind" : "expression",
          "left" : {
            "go-type" : 27,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "err1",
              "variable" : 10
            }
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 27,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 78,
      "code" : "if err1 != 0 {\n\treturn 0, err1\n}",
      "entry" : false,
      "use-vars" : [ 10 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 10 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 77,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 21,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "0"
          }
        }, {
          "go-type" : 27,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "err1",
            "variable" : 10
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 77,
      "code" : "return 0, err1",
      "entry" : false,
      "use-vars" : [ 10 ]
    }, {
      "update-vars" : [ 8 ],
      "successors" : [ 8 ],
      "in-vars" : [ 6, 13, 11 ],
      "exit" : false,
      "out-vars" : [ 13, 8, 6 ],
      "decl-vars" : [ ],
      "line-start" : 81,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 21,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "pid",
            "variable" : 8
          }
        } ],
        "right" : [ {
          "coerced-to" : {
            "go-type" : 21,
            "kind" : "type",
            "type" : "identifier",
            "value" : {
              "go-type" : 21,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "int"
            }
          },
          "go-type" : 21,
          "kind" : "expression",
          "target" : {
            "go-type" : 11,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "r1",
              "variable" : 11
            }
          },
          "type" : "cast"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 8 ],
      "line-end" : 81,
      "code" : "pid = int(r1)",
      "entry" : false,
      "use-vars" : [ 11 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 9, 17 ],
      "in-vars" : [ 6, 13, 8 ],
      "exit" : false,
      "out-vars" : [ 6, 13, 8 ],
      "decl-vars" : [ ],
      "line-start" : 83,
      "ast" : {
        "condition" : {
          "go-type" : 33,
          "kind" : "expression",
          "left" : {
            "go-type" : 33,
            "kind" : "expression",
            "left" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "UidMappings",
                "variable" : 14
              },
              "go-type" : 23,
              "kind" : "expression",
              "target" : {
                "go-type" : 12,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "sys",
                  "variable" : 6
                }
              },
              "type" : "selector"
            },
            "operator" : "!=",
            "right" : {
              "go-type" : 34,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Nil",
                "kind" : "ident",
                "value" : "nil"
              }
            },
            "type" : "binary"
          },
          "operator" : "||",
          "right" : {
            "go-type" : 33,
            "kind" : "expression",
            "left" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "GidMappings",
                "variable" : 15
              },
              "go-type" : 23,
              "kind" : "expression",
              "target" : {
                "go-type" : 12,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "sys",
                  "variable" : 6
                }
              },
              "type" : "selector"
            },
            "operator" : "!=",
            "right" : {
              "go-type" : 34,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Nil",
                "kind" : "ident",
                "value" : "nil"
              }
            },
            "type" : "binary"
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 95,
      "code" : "if sys.UidMappings != nil || sys.GidMappings != nil {\n\tClose(p[0])\n\tvar err2 Errno\n\n\tif sys.Unshareflags&CLONE_NEWUSER == 0 {\n\t\tif err := writeUidGidMappings(pid, sys); err != nil {\n\t\t\terr2 = err.(Errno)\n\t\t}\n\t}\n\tRawSyscall(SYS_WRITE, uintptr(p[1]), uintptr(unsafe.Pointer(&err2)), unsafe.Sizeof(err2))\n\tClose(p[1])\n}",
      "entry" : false,
      "use-vars" : [ 6 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 10 ],
      "in-vars" : [ 6, 13, 8 ],
      "exit" : false,
      "out-vars" : [ 6, 13, 8 ],
      "decl-vars" : [ ],
      "line-start" : 84,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 21,
            "index" : {
              "go-type" : 21,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "0"
              }
            },
            "kind" : "expression",
            "target" : {
              "go-type" : 29,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "p",
                "variable" : 13
              }
            },
            "type" : "index"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 39,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 3,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "Close"
            }
          },
          "go-type" : 35,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 84,
      "code" : "Close(p[0])",
      "entry" : false,
      "use-vars" : [ 13 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 11 ],
      "in-vars" : [ 6, 13, 8 ],
      "exit" : false,
      "out-vars" : [ 6, 19, 13, 8 ],
      "decl-vars" : [ 19 ],
      "line-start" : 85,
      "ast" : {
        "kind" : "statement",
        "target" : {
          "kind" : "decl",
          "specs" : [ {
            "comments" : [ ],
            "declared-type" : {
              "go-type" : 27,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 27,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "Errno"
              }
            },
            "kind" : "spec",
            "names" : [ {
              "ident-kind" : "NoKind",
              "kind" : "ident",
              "value" : "err2"
            } ],
            "type" : "var",
            "values" : [ ]
          } ],
          "type" : "var"
        },
        "type" : "declaration"
      },
      "assign-vars" : [ ],
      "line-end" : 85,
      "code" : "var err2 Errno",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 13, 15 ],
      "in-vars" : [ 19, 13, 8, 6 ],
      "exit" : false,
      "out-vars" : [ 8, 6, 19, 13 ],
      "decl-vars" : [ ],
      "line-start" : 88,
      "ast" : {
        "condition" : {
          "go-type" : 33,
          "kind" : "expression",
          "left" : {
            "go-type" : 11,
            "kind" : "expression",
            "left" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "Unshareflags",
                "variable" : 17
              },
              "go-type" : 11,
              "kind" : "expression",
              "target" : {
                "go-type" : 12,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "sys",
                  "variable" : 6
                }
              },
              "type" : "selector"
            },
            "operator" : "&",
            "right" : {
              "go-type" : 11,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "268435456"
              }
            },
            "type" : "binary"
          },
          "operator" : "==",
          "right" : {
            "go-type" : 11,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 92,
      "code" : "if sys.Unshareflags&CLONE_NEWUSER == 0 {\n\tif err := writeUidGidMappings(pid, sys); err != nil {\n\t\terr2 = err.(Errno)\n\t}\n}",
      "entry" : false,
      "use-vars" : [ 6 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 14, 15 ],
      "in-vars" : [ 18, 19, 13, 8 ],
      "exit" : false,
      "out-vars" : [ 18, 19, 13, 8 ],
      "decl-vars" : [ ],
      "line-start" : 89,
      "ast" : {
        "condition" : {
          "go-type" : 33,
          "kind" : "expression",
          "left" : {
            "go-type" : 35,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "err",
              "variable" : 18
            }
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 34,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Nil",
              "kind" : "ident",
              "value" : "nil"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 91,
      "code" : "if err := writeUidGidMappings(pid, sys); err != nil {\n\terr2 = err.(Errno)\n}",
      "entry" : false,
      "use-vars" : [ 18 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 12 ],
      "in-vars" : [ 8, 6, 19, 13 ],
      "exit" : false,
      "out-vars" : [ 18, 19, 13, 8 ],
      "decl-vars" : [ 18 ],
      "line-start" : 89,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "err"
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 21,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "pid",
              "variable" : 8
            }
          }, {
            "go-type" : 12,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "sys",
              "variable" : 6
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 42,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 4,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "writeUidGidMappings"
            }
          },
          "go-type" : 35,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 89,
      "code" : "err := writeUidGidMappings(pid, sys)",
      "entry" : false,
      "use-vars" : [ 8, 6 ]
    }, {
      "update-vars" : [ 19 ],
      "successors" : [ 15 ],
      "in-vars" : [ 18, 13, 8 ],
      "exit" : false,
      "out-vars" : [ 19, 13, 8 ],
      "decl-vars" : [ ],
      "line-start" : 90,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 27,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "err2",
            "variable" : 19
          }
        } ],
        "right" : [ {
          "asserted" : {
            "go-type" : 27,
            "kind" : "type",
            "type" : "identifier",
            "value" : {
              "go-type" : 27,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "Errno"
            }
          },
          "go-type" : 27,
          "kind" : "expression",
          "target" : {
            "go-type" : 35,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "err",
              "variable" : 18
            }
          },
          "type" : "type-assert"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 19 ],
      "line-end" : 90,
      "code" : "err2 = err.(Errno)",
      "entry" : false,
      "use-vars" : [ 18 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 16 ],
      "in-vars" : [ 19, 13, 8 ],
      "exit" : false,
      "out-vars" : [ 8, 13 ],
      "decl-vars" : [ ],
      "line-start" : 93,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 11,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "1"
            }
          }, {
            "coerced-to" : {
              "go-type" : 11,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 11,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "uintptr"
              }
            },
            "go-type" : 11,
            "kind" : "expression",
            "target" : {
              "go-type" : 21,
              "index" : {
                "go-type" : 21,
                "kind" : "constant",
                "value" : {
                  "type" : "INT",
                  "value" : "1"
                }
              },
              "kind" : "expression",
              "target" : {
                "go-type" : 29,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "p",
                  "variable" : 13
                }
              },
              "type" : "index"
            },
            "type" : "cast"
          }, {
            "coerced-to" : {
              "go-type" : 11,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 11,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "uintptr"
              }
            },
            "go-type" : 11,
            "kind" : "expression",
            "target" : {
              "coerced-to" : {
                "go-type" : 48,
                "kind" : "type",
                "qualifier" : {
                  "ident-kind" : "PkgName",
                  "kind" : "ident",
                  "package" : 1,
                  "value" : "unsafe"
                },
                "type" : "identifier",
                "value" : {
                  "go-type" : 48,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "Pointer"
                }
              },
              "go-type" : 48,
              "kind" : "expression",
              "target" : {
                "go-type" : 49,
                "kind" : "expression",
                "operator" : "&",
                "target" : {
                  "go-type" : 27,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "err2",
                    "variable" : 19
                  }
                },
                "type" : "unary"
              },
              "type" : "cast"
            },
            "type" : "cast"
          }, {
            "go-type" : 11,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "8"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 46,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 5,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "RawSyscall"
            }
          },
          "go-type" : 45,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 93,
      "code" : "RawSyscall(SYS_WRITE, uintptr(p[1]), uintptr(unsafe.Pointer(&err2)), unsafe.Sizeof(err2))",
      "entry" : false,
      "use-vars" : [ 13, 19 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 17 ],
      "in-vars" : [ 13, 8 ],
      "exit" : false,
      "out-vars" : [ 8 ],
      "decl-vars" : [ ],
      "line-start" : 94,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 21,
            "index" : {
              "go-type" : 21,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "1"
              }
            },
            "kind" : "expression",
            "target" : {
              "go-type" : 29,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "p",
                "variable" : 13
              }
            },
            "type" : "index"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 39,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 3,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "Close"
            }
          },
          "go-type" : 35,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 94,
      "code" : "Close(p[1])",
      "entry" : false,
      "use-vars" : [ 13 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 8 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 97,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 21,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "pid",
            "variable" : 8
          }
        }, {
          "go-type" : 27,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "0"
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 97,
      "code" : "return pid, 0",
      "entry" : false,
      "use-vars" : [ 8 ]
    } ],
    "code" : "// Fork, dup fd onto 0..len(fd), and exec(argv0, argvv, envv) in child.\n// If a dup or exec fails, write the errno error to pipe.\n// (Pipe is close-on-exec so if exec succeeds, it will be closed.)\n// In the child, this function must not acquire any locks, because\n// they might have been locked at the time of the fork. This means\n// no rescheduling, no malloc calls, and no new stack segments.\n// For the same reason compiler does not race instrument it.\n// The calls to RawSyscall are okay because they are assembly\n// functions that do not grow the stack.\n//go:norace\nfunc forkAndExecInChild(argv0 *byte, argv, envv []*byte, chroot, dir *byte, attr *ProcAttr, sys *SysProcAttr, pipe int) (pid int, err Errno) {\n\n\tr1, err1, p, locked := forkAndExecInChild1(argv0, argv, envv, chroot, dir, attr, sys, pipe)\n\tif locked {\n\t\truntime_AfterFork()\n\t}\n\tif err1 != 0 {\n\t\treturn 0, err1\n\t}\n\n\tpid = int(r1)\n\n\tif sys.UidMappings != nil || sys.GidMappings != nil {\n\t\tClose(p[0])\n\t\tvar err2 Errno\n\n\t\tif sys.Unshareflags&CLONE_NEWUSER == 0 {\n\t\t\tif err := writeUidGidMappings(pid, sys); err != nil {\n\t\t\t\terr2 = err.(Errno)\n\t\t\t}\n\t\t}\n\t\tRawSyscall(SYS_WRITE, uintptr(p[1]), uintptr(unsafe.Pointer(&err2)), unsafe.Sizeof(err2))\n\t\tClose(p[1])\n\t}\n\n\treturn pid, 0\n}",
    "defines" : [ 0 ],
    "functions" : [ {
      "name" : "forkAndExecInChild",
      "package" : 0,
      "type" : 0,
      "exported" : false
    }, {
      "name" : "forkAndExecInChild1",
      "package" : 0,
      "type" : 30,
      "exported" : false
    }, {
      "name" : "runtime_AfterFork",
      "package" : 0,
      "type" : 32,
      "exported" : false
    }, {
      "name" : "Close",
      "package" : 0,
      "type" : 39,
      "exported" : true
    }, {
      "name" : "writeUidGidMappings",
      "package" : 0,
      "type" : 42,
      "exported" : false
    }, {
      "name" : "RawSyscall",
      "package" : 0,
      "type" : 46,
      "exported" : true
    } ],
    "line-end" : 98,
    "line-start" : 69,
    "names" : [ "forkAndExecInChild" ],
    "package" : 0,
    "packages" : [ {
      "name" : "syscall",
      "path" : "syscall"
    }, {
      "name" : "unsafe",
      "path" : "unsafe"
    } ],
    "params" : [ 0, 1, 2, 3, 4, 5, 6, 7 ],
    "receivers" : [ ],
    "results" : [ 8, 9 ],
    "type" : "function",
    "types" : [ {
      "name" : "func(argv0 *byte, argv []*byte, envv []*byte, chroot *byte, dir *byte, attr *syscall.ProcAttr, sys *syscall.SysProcAttr, pipe int) (pid int, err syscall.Errno)",
      "params" : 1,
      "recv" : -1,
      "results" : 26,
      "type" : "Signature",
      "underlying" : 0,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "argv0",
        "type" : 2
      }, {
        "name" : "argv",
        "type" : 4
      }, {
        "name" : "envv",
        "type" : 4
      }, {
        "name" : "chroot",
        "type" : 2
      }, {
        "name" : "dir",
        "type" : 2
      }, {
        "name" : "attr",
        "type" : 5
      }, {
        "name" : "sys",
        "type" : 12
      }, {
        "name" : "pipe",
        "type" : 21
      } ],
      "name" : "(argv0 *byte, argv []*byte, envv []*byte, chroot *byte, dir *byte, attr *syscall.ProcAttr, sys *syscall.SysProcAttr, pipe int)",
      "type" : "Tuple",
      "underlying" : 1
    }, {
      "elem" : 3,
      "name" : "*byte",
      "type" : "Pointer",
      "underlying" : 2
    }, {
      "name" : "byte",
      "type" : "Basic",
      "underlying" : 3
    }, {
      "elem" : 2,
      "name" : "[]*byte",
      "type" : "Slice",
      "underlying" : 4
    }, {
      "elem" : 6,
      "name" : "*syscall.ProcAttr",
      "type" : "Pointer",
      "underlying" : 5
    }, {
      "local-name" : "ProcAttr",
      "name" : "syscall.ProcAttr",
      "package" : 0,
      "type" : "Named",
      "underlying" : 7
    }, {
      "fields" : [ {
        "name" : "Dir",
        "type" : 8
      }, {
        "name" : "Env",
        "type" : 9
      }, {
        "name" : "Files",
        "type" : 10
      }, {
        "name" : "Sys",
        "type" : 12
      } ],
      "name" : "struct{Dir string; Env []string; Files []uintptr; Sys *syscall.SysProcAttr}",
      "type" : "Struct",
      "underlying" : 7
    }, {
      "name" : "string",
      "type" : "Basic",
      "underlying" : 8
    }, {
      "elem" : 8,
      "name" : "[]string",
      "type" : "Slice",
      "underlying" : 9
    }, {
      "elem" : 11,
      "name" : "[]uintptr",
      "type" : "Slice",
      "underlying" : 10
    }, {
      "name" : "uintptr",
      "type" : "Basic",
      "underlying" : 11
    }, {
      "elem" : 13,
      "name" : "*syscall.SysProcAttr",
      "type" : "Pointer",
      "underlying" : 12
    }, {
      "local-name" : "SysProcAttr",
      "name" : "syscall.SysProcAttr",
      "package" : 0,
      "type" : "Named",
      "underlying" : 14
    }, {
      "fields" : [ {
        "name" : "Chroot",
        "type" : 8
      }, {
        "name" : "Credential",
        "type" : 15
      }, {
        "name" : "Ptrace",
        "type" : 20
      }, {
        "name" : "Setsid",
        "type" : 20
      }, {
        "name" : "Setpgid",
        "type" : 20
      }, {
        "name" : "Setctty",
        "type" : 20
      }, {
        "name" : "Noctty",
        "type" : 20
      }, {
        "name" : "Ctty",
        "type" : 21
      }, {
        "name" : "Foreground",
        "type" : 20
      }, {
        "name" : "Pgid",
        "type" : 21
      }, {
        "name" : "Pdeathsig",
        "type" : 22
      }, {
        "name" : "Cloneflags",
        "type" : 11
      }, {
        "name" : "Unshareflags",
        "type" : 11
      }, {
        "name" : "UidMappings",
        "type" : 23
      }, {
        "name" : "GidMappings",
        "type" : 23
      }, {
        "name" : "GidMappingsEnableSetgroups",
        "type" : 20
      }, {
        "name" : "AmbientCaps",
        "type" : 10
      } ],
      "name" : "struct{Chroot string; Credential *syscall.Credential; Ptrace bool; Setsid bool; Setpgid bool; Setctty bool; Noctty bool; Ctty int; Foreground bool; Pgid int; Pdeathsig syscall.Signal; Cloneflags uintptr; Unshareflags uintptr; UidMappings []syscall.SysProcIDMap; GidMappings []syscall.SysProcIDMap; GidMappingsEnableSetgroups bool; AmbientCaps []uintptr}",
      "type" : "Struct",
      "underlying" : 14
    }, {
      "elem" : 16,
      "name" : "*syscall.Credential",
      "type" : "Pointer",
      "underlying" : 15
    }, {
      "local-name" : "Credential",
      "name" : "syscall.Credential",
      "package" : 0,
      "type" : "Named",
      "underlying" : 17
    }, {
      "fields" : [ {
        "name" : "Uid",
        "type" : 18
      }, {
        "name" : "Gid",
        "type" : 18
      }, {
        "name" : "Groups",
        "type" : 19
      }, {
        "name" : "NoSetGroups",
        "type" : 20
      } ],
      "name" : "struct{Uid uint32; Gid uint32; Groups []uint32; NoSetGroups bool}",
      "type" : "Struct",
      "underlying" : 17
    }, {
      "name" : "uint32",
      "type" : "Basic",
      "underlying" : 18
    }, {
      "elem" : 18,
      "name" : "[]uint32",
      "type" : "Slice",
      "underlying" : 19
    }, {
      "name" : "bool",
      "type" : "Basic",
      "underlying" : 20
    }, {
      "name" : "int",
      "type" : "Basic",
      "underlying" : 21
    }, {
      "local-name" : "Signal",
      "name" : "syscall.Signal",
      "package" : 0,
      "type" : "Named",
      "underlying" : 21
    }, {
      "elem" : 24,
      "name" : "[]syscall.SysProcIDMap",
      "type" : "Slice",
      "underlying" : 23
    }, {
      "local-name" : "SysProcIDMap",
      "name" : "syscall.SysProcIDMap",
      "package" : 0,
      "type" : "Named",
      "underlying" : 25
    }, {
      "fields" : [ {
        "name" : "ContainerID",
        "type" : 21
      }, {
        "name" : "HostID",
        "type" : 21
      }, {
        "name" : "Size",
        "type" : 21
      } ],
      "name" : "struct{ContainerID int; HostID int; Size int}",
      "type" : "Struct",
      "underlying" : 25
    }, {
      "fields" : [ {
        "name" : "pid",
        "type" : 21
      }, {
        "name" : "err",
        "type" : 27
      } ],
      "name" : "(pid int, err syscall.Errno)",
      "type" : "Tuple",
      "underlying" : 26
    }, {
      "local-name" : "Errno",
      "name" : "syscall.Errno",
      "package" : 0,
      "type" : "Named",
      "underlying" : 11
    }, {
      "fields" : [ {
        "name" : "r1",
        "type" : 11
      }, {
        "name" : "err1",
        "type" : 27
      }, {
        "name" : "p",
        "type" : 29
      }, {
        "name" : "locked",
        "type" : 20
      } ],
      "name" : "(r1 uintptr, err1 syscall.Errno, p [2]int, locked bool)",
      "type" : "Tuple",
      "underlying" : 28
    }, {
      "elem" : 21,
      "name" : "[2]int",
      "type" : "Array",
      "underlying" : 29
    }, {
      "name" : "func(argv0 *byte, argv []*byte, envv []*byte, chroot *byte, dir *byte, attr *syscall.ProcAttr, sys *syscall.SysProcAttr, pipe int) (r1 uintptr, err1 syscall.Errno, p [2]int, locked bool)",
      "params" : 1,
      "recv" : -1,
      "results" : 28,
      "type" : "Signature",
      "underlying" : 30,
      "variadic" : false
    }, {
      "fields" : [ ],
      "name" : "()",
      "type" : "Tuple",
      "underlying" : 31
    }, {
      "name" : "func()",
      "params" : 31,
      "recv" : -1,
      "results" : 31,
      "type" : "Signature",
      "underlying" : 32,
      "variadic" : false
    }, {
      "name" : "untyped bool",
      "type" : "Basic",
      "underlying" : 33
    }, {
      "name" : "untyped nil",
      "type" : "Basic",
      "underlying" : 34
    }, {
      "local-name" : "error",
      "name" : "error",
      "package" : -1,
      "type" : "Named",
      "underlying" : 36
    }, {
      "methods" : [ {
        "name" : "Error",
        "type" : 37
      } ],
      "name" : "interface{Error() string}",
      "type" : "Interface",
      "underlying" : 36
    }, {
      "name" : "func() string",
      "params" : 31,
      "recv" : 16,
      "results" : 38,
      "type" : "Signature",
      "underlying" : 37,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 8
      } ],
      "name" : "(string)",
      "type" : "Tuple",
      "underlying" : 38
    }, {
      "name" : "func(fd int) (err error)",
      "params" : 40,
      "recv" : -1,
      "results" : 41,
      "type" : "Signature",
      "underlying" : 39,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "fd",
        "type" : 21
      } ],
      "name" : "(fd int)",
      "type" : "Tuple",
      "underlying" : 40
    }, {
      "fields" : [ {
        "name" : "err",
        "type" : 35
      } ],
      "name" : "(err error)",
      "type" : "Tuple",
      "underlying" : 41
    }, {
      "name" : "func(pid int, sys *syscall.SysProcAttr) error",
      "params" : 43,
      "recv" : -1,
      "results" : 44,
      "type" : "Signature",
      "underlying" : 42,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "pid",
        "type" : 21
      }, {
        "name" : "sys",
        "type" : 12
      } ],
      "name" : "(pid int, sys *syscall.SysProcAttr)",
      "type" : "Tuple",
      "underlying" : 43
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 35
      } ],
      "name" : "(error)",
      "type" : "Tuple",
      "underlying" : 44
    }, {
      "fields" : [ {
        "name" : "r1",
        "type" : 11
      }, {
        "name" : "r2",
        "type" : 11
      }, {
        "name" : "err",
        "type" : 27
      } ],
      "name" : "(r1 uintptr, r2 uintptr, err syscall.Errno)",
      "type" : "Tuple",
      "underlying" : 45
    }, {
      "name" : "func(trap uintptr, a1 uintptr, a2 uintptr, a3 uintptr) (r1 uintptr, r2 uintptr, err syscall.Errno)",
      "params" : 47,
      "recv" : -1,
      "results" : 45,
      "type" : "Signature",
      "underlying" : 46,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "trap",
        "type" : 11
      }, {
        "name" : "a1",
        "type" : 11
      }, {
        "name" : "a2",
        "type" : 11
      }, {
        "name" : "a3",
        "type" : 11
      } ],
      "name" : "(trap uintptr, a1 uintptr, a2 uintptr, a3 uintptr)",
      "type" : "Tuple",
      "underlying" : 47
    }, {
      "local-name" : "Pointer",
      "name" : "unsafe.Pointer",
      "package" : 1,
      "type" : "Basic",
      "underlying" : 48
    }, {
      "elem" : 27,
      "name" : "*syscall.Errno",
      "type" : "Pointer",
      "underlying" : 49
    } ],
    "variables" : [ {
      "name" : "argv0",
      "package" : 0,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "argv",
      "package" : 0,
      "type" : 4,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "envv",
      "package" : 0,
      "type" : 4,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "chroot",
      "package" : 0,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "dir",
      "package" : 0,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "attr",
      "package" : 0,
      "type" : 5,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "sys",
      "package" : 0,
      "type" : 12,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "pipe",
      "package" : 0,
      "type" : 21,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "pid",
      "package" : 0,
      "type" : 21,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "err",
      "package" : 0,
      "type" : 27,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "err1",
      "package" : 0,
      "type" : 27,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "r1",
      "package" : 0,
      "type" : 11,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "locked",
      "package" : 0,
      "type" : 20,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "p",
      "package" : 0,
      "type" : 29,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "UidMappings",
      "package" : 0,
      "type" : 23,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "GidMappings",
      "package" : 0,
      "type" : 23,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "",
      "package" : -1,
      "type" : 35,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "Unshareflags",
      "package" : 0,
      "type" : 11,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "err",
      "package" : 0,
      "type" : 35,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "err2",
      "package" : 0,
      "type" : 27,
      "exported" : false,
      "embedded" : false,
      "field" : false
    } ]
  },
  "go-version" : "1.14.3"
}