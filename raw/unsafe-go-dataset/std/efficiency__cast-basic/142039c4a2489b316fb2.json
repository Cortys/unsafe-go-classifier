{
  "usage" : {
    "file" : "symtab.go",
    "label1" : "cast-basic",
    "label2" : "efficiency",
    "line" : "435",
    "module" : "std",
    "pkg" : "runtime",
    "project" : "kubernetes/kubernetes",
    "snippet" : "md.gcdatamask = progToPointerMask((*byte)(unsafe.Pointer(md.gcdata)), md.edata-md.data)",
    "version" : "std"
  },
  "cfg" : {
    "blocks" : [ {
      "update-vars" : [ ],
      "successors" : [ 2 ],
      "in-vars" : [ 0, 1 ],
      "exit" : false,
      "out-vars" : [ 0, 1 ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[entry]",
      "entry" : true,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ ],
      "in-vars" : [ ],
      "exit" : true,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[exit]",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 4 ],
      "in-vars" : [ 0, 1 ],
      "exit" : false,
      "out-vars" : [ 2, 0, 1 ],
      "decl-vars" : [ 2 ],
      "line-start" : 428,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "modules"
          }
        } ],
        "right" : [ {
          "argument" : {
            "element" : {
              "contained" : {
                "go-type" : 2,
                "kind" : "type",
                "type" : "identifier",
                "value" : {
                  "go-type" : 2,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "moduledata"
                }
              },
              "go-type" : 56,
              "kind" : "type",
              "type" : "pointer"
            },
            "go-type" : 58,
            "kind" : "type",
            "type" : "slice"
          },
          "go-type" : 57,
          "kind" : "expression",
          "type" : "new"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 428,
      "code" : "modules := new([]*moduledata)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 6, 12 ],
      "in-vars" : [ 3, 2, 0, 1 ],
      "exit" : false,
      "out-vars" : [ 2, 0, 1, 3 ],
      "decl-vars" : [ ],
      "line-start" : 429,
      "ast" : {
        "condition" : {
          "go-type" : 59,
          "kind" : "expression",
          "left" : {
            "go-type" : 56,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "md",
              "variable" : 3
            }
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 60,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Nil",
              "kind" : "ident",
              "value" : "nil"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "for"
      },
      "assign-vars" : [ ],
      "line-end" : 438,
      "code" : "for md := &firstmoduledata; md != nil; md = md.next {\n\tif md.bad {\n\t\tcontinue\n\t}\n\t*modules = append(*modules, md)\n\tif md.gcdatamask == (bitvector{}) {\n\t\tmd.gcdatamask = progToPointerMask((*byte)(unsafe.Pointer(md.gcdata)), md.edata-md.data)\n\t\tmd.gcbssmask = progToPointerMask((*byte)(unsafe.Pointer(md.gcbss)), md.ebss-md.bss)\n\t}\n}",
      "entry" : false,
      "use-vars" : [ 3 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 3 ],
      "in-vars" : [ 2, 0, 1 ],
      "exit" : false,
      "out-vars" : [ 0, 1, 3, 2 ],
      "decl-vars" : [ 3 ],
      "line-start" : 429,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "md"
          }
        } ],
        "right" : [ {
          "go-type" : 56,
          "kind" : "expression",
          "operator" : "&",
          "target" : {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "firstmoduledata",
              "variable" : 0
            }
          },
          "type" : "unary"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 429,
      "code" : "md := &firstmoduledata",
      "entry" : false,
      "use-vars" : [ 0 ]
    }, {
      "update-vars" : [ 3 ],
      "successors" : [ 3 ],
      "in-vars" : [ 3, 2, 0, 1 ],
      "exit" : false,
      "out-vars" : [ 3, 2, 0, 1 ],
      "decl-vars" : [ ],
      "line-start" : 429,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 56,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "md",
            "variable" : 3
          }
        } ],
        "right" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "next",
            "variable" : 4
          },
          "go-type" : 56,
          "kind" : "expression",
          "target" : {
            "go-type" : 56,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "md",
              "variable" : 3
            }
          },
          "type" : "selector"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 3 ],
      "line-end" : 429,
      "code" : "md = md.next",
      "entry" : false,
      "use-vars" : [ 3 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 7, 8 ],
      "in-vars" : [ 0, 1, 3, 2 ],
      "exit" : false,
      "out-vars" : [ 3, 2, 0, 1 ],
      "decl-vars" : [ ],
      "line-start" : 430,
      "ast" : {
        "condition" : {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "bad",
            "variable" : 5
          },
          "go-type" : 32,
          "kind" : "expression",
          "target" : {
            "go-type" : 56,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "md",
              "variable" : 3
            }
          },
          "type" : "selector"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 432,
      "code" : "if md.bad {\n\tcontinue\n}",
      "entry" : false,
      "use-vars" : [ 3 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 5 ],
      "in-vars" : [ 3, 2, 0, 1 ],
      "exit" : false,
      "out-vars" : [ 1, 3, 2, 0 ],
      "decl-vars" : [ ],
      "line-start" : 431,
      "ast" : {
        "kind" : "statement",
        "label" : null,
        "type" : "continue"
      },
      "assign-vars" : [ ],
      "line-end" : 431,
      "code" : "continue",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 9 ],
      "in-vars" : [ 3, 2, 0, 1 ],
      "exit" : false,
      "out-vars" : [ 2, 0, 1, 3 ],
      "decl-vars" : [ ],
      "line-start" : 433,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 58,
          "kind" : "expression",
          "target" : {
            "go-type" : 57,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "modules",
              "variable" : 2
            }
          },
          "type" : "star"
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 58,
            "kind" : "expression",
            "target" : {
              "go-type" : 57,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "modules",
                "variable" : 2
              }
            },
            "type" : "star"
          }, {
            "go-type" : 56,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "md",
              "variable" : 3
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 61,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Builtin",
              "kind" : "ident",
              "value" : "append"
            }
          },
          "go-type" : 58,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 433,
      "code" : "*modules = append(*modules, md)",
      "entry" : false,
      "use-vars" : [ 2, 3 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 10, 5 ],
      "in-vars" : [ 3, 2, 0, 1 ],
      "exit" : false,
      "out-vars" : [ 3, 2, 0, 1 ],
      "decl-vars" : [ ],
      "line-start" : 434,
      "ast" : {
        "condition" : {
          "go-type" : 59,
          "kind" : "expression",
          "left" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "gcdatamask",
              "variable" : 6
            },
            "go-type" : 52,
            "kind" : "expression",
            "target" : {
              "go-type" : 56,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "md",
                "variable" : 3
              }
            },
            "type" : "selector"
          },
          "operator" : "==",
          "right" : {
            "go-type" : 52,
            "kind" : "expression",
            "target" : {
              "declared" : {
                "go-type" : 52,
                "kind" : "type",
                "type" : "identifier",
                "value" : {
                  "go-type" : 52,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "bitvector"
                }
              },
              "go-type" : 52,
              "kind" : "literal",
              "type" : "composite",
              "values" : [ ]
            },
            "type" : "paren"
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 437,
      "code" : "if md.gcdatamask == (bitvector{}) {\n\tmd.gcdatamask = progToPointerMask((*byte)(unsafe.Pointer(md.gcdata)), md.edata-md.data)\n\tmd.gcbssmask = progToPointerMask((*byte)(unsafe.Pointer(md.gcbss)), md.ebss-md.bss)\n}",
      "entry" : false,
      "use-vars" : [ 3 ]
    }, {
      "update-vars" : [ 3 ],
      "successors" : [ 11 ],
      "in-vars" : [ 2, 0, 1, 3 ],
      "exit" : false,
      "out-vars" : [ 3, 2, 0, 1 ],
      "decl-vars" : [ ],
      "line-start" : 435,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "gcdatamask",
            "variable" : 6
          },
          "go-type" : 52,
          "kind" : "expression",
          "target" : {
            "go-type" : 56,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "md",
              "variable" : 3
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "arguments" : [ {
            "coerced-to" : {
              "contained" : {
                "go-type" : 5,
                "kind" : "type",
                "type" : "identifier",
                "value" : {
                  "go-type" : 5,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "byte"
                }
              },
              "go-type" : 33,
              "kind" : "type",
              "type" : "pointer"
            },
            "go-type" : 33,
            "kind" : "expression",
            "target" : {
              "coerced-to" : {
                "go-type" : 30,
                "kind" : "type",
                "qualifier" : {
                  "ident-kind" : "PkgName",
                  "kind" : "ident",
                  "package" : 1,
                  "value" : "unsafe"
                },
                "type" : "identifier",
                "value" : {
                  "go-type" : 30,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "Pointer"
                }
              },
              "go-type" : 30,
              "kind" : "expression",
              "target" : {
                "field" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "gcdata",
                  "variable" : 7
                },
                "go-type" : 9,
                "kind" : "expression",
                "target" : {
                  "go-type" : 56,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "md",
                    "variable" : 3
                  }
                },
                "type" : "selector"
              },
              "type" : "cast"
            },
            "type" : "cast"
          }, {
            "go-type" : 9,
            "kind" : "expression",
            "left" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "edata",
                "variable" : 8
              },
              "go-type" : 9,
              "kind" : "expression",
              "target" : {
                "go-type" : 56,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "md",
                  "variable" : 3
                }
              },
              "type" : "selector"
            },
            "operator" : "-",
            "right" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "data",
                "variable" : 9
              },
              "go-type" : 9,
              "kind" : "expression",
              "target" : {
                "go-type" : 56,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "md",
                  "variable" : 3
                }
              },
              "type" : "selector"
            },
            "type" : "binary"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 64,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 1,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "progToPointerMask"
            }
          },
          "go-type" : 52,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 435,
      "code" : "md.gcdatamask = progToPointerMask((*byte)(unsafe.Pointer(md.gcdata)), md.edata-md.data)",
      "entry" : false,
      "use-vars" : [ 3 ]
    }, {
      "update-vars" : [ 3 ],
      "successors" : [ 5 ],
      "in-vars" : [ 0, 1, 3, 2 ],
      "exit" : false,
      "out-vars" : [ 3, 2, 0, 1 ],
      "decl-vars" : [ ],
      "line-start" : 436,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "gcbssmask",
            "variable" : 10
          },
          "go-type" : 52,
          "kind" : "expression",
          "target" : {
            "go-type" : 56,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "md",
              "variable" : 3
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "arguments" : [ {
            "coerced-to" : {
              "contained" : {
                "go-type" : 5,
                "kind" : "type",
                "type" : "identifier",
                "value" : {
                  "go-type" : 5,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "byte"
                }
              },
              "go-type" : 33,
              "kind" : "type",
              "type" : "pointer"
            },
            "go-type" : 33,
            "kind" : "expression",
            "target" : {
              "coerced-to" : {
                "go-type" : 30,
                "kind" : "type",
                "qualifier" : {
                  "ident-kind" : "PkgName",
                  "kind" : "ident",
                  "package" : 1,
                  "value" : "unsafe"
                },
                "type" : "identifier",
                "value" : {
                  "go-type" : 30,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "Pointer"
                }
              },
              "go-type" : 30,
              "kind" : "expression",
              "target" : {
                "field" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "gcbss",
                  "variable" : 11
                },
                "go-type" : 9,
                "kind" : "expression",
                "target" : {
                  "go-type" : 56,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "md",
                    "variable" : 3
                  }
                },
                "type" : "selector"
              },
              "type" : "cast"
            },
            "type" : "cast"
          }, {
            "go-type" : 9,
            "kind" : "expression",
            "left" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "ebss",
                "variable" : 12
              },
              "go-type" : 9,
              "kind" : "expression",
              "target" : {
                "go-type" : 56,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "md",
                  "variable" : 3
                }
              },
              "type" : "selector"
            },
            "operator" : "-",
            "right" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "bss",
                "variable" : 13
              },
              "go-type" : 9,
              "kind" : "expression",
              "target" : {
                "go-type" : 56,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "md",
                  "variable" : 3
                }
              },
              "type" : "selector"
            },
            "type" : "binary"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 64,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 1,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "progToPointerMask"
            }
          },
          "go-type" : 52,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 436,
      "code" : "md.gcbssmask = progToPointerMask((*byte)(unsafe.Pointer(md.gcbss)), md.ebss-md.bss)",
      "entry" : false,
      "use-vars" : [ 3 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 13, 17 ],
      "in-vars" : [ 0, 1, 2 ],
      "exit" : false,
      "out-vars" : [ 2, 0, 16, 14, 1 ],
      "decl-vars" : [ 14, 16 ],
      "line-start" : 449,
      "ast" : {
        "is-assign" : false,
        "key" : {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "i"
          }
        },
        "kind" : "statement",
        "target" : {
          "go-type" : 58,
          "kind" : "expression",
          "target" : {
            "go-type" : 57,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "modules",
              "variable" : 2
            }
          },
          "type" : "star"
        },
        "type" : "range",
        "value" : {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "md"
          }
        }
      },
      "assign-vars" : [ ],
      "line-end" : 455,
      "code" : "for i, md := range *modules {\n\tif md.hasmain != 0 {\n\t\t(*modules)[0] = md\n\t\t(*modules)[i] = &firstmoduledata\n\t\tbreak\n\t}\n}",
      "entry" : false,
      "use-vars" : [ 2 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 14, 12 ],
      "in-vars" : [ 2, 0, 16, 14, 1 ],
      "exit" : false,
      "out-vars" : [ 2, 0, 16, 14, 1 ],
      "decl-vars" : [ ],
      "line-start" : 450,
      "ast" : {
        "condition" : {
          "go-type" : 59,
          "kind" : "expression",
          "left" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "hasmain",
              "variable" : 15
            },
            "go-type" : 27,
            "kind" : "expression",
            "target" : {
              "go-type" : 56,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "md",
                "variable" : 14
              }
            },
            "type" : "selector"
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 27,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 454,
      "code" : "if md.hasmain != 0 {\n\t(*modules)[0] = md\n\t(*modules)[i] = &firstmoduledata\n\tbreak\n}",
      "entry" : false,
      "use-vars" : [ 14 ]
    }, {
      "update-vars" : [ 2 ],
      "successors" : [ 15 ],
      "in-vars" : [ 2, 0, 16, 14, 1 ],
      "exit" : false,
      "out-vars" : [ 2, 0, 16, 1 ],
      "decl-vars" : [ ],
      "line-start" : 451,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 56,
          "index" : {
            "go-type" : 67,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "kind" : "expression",
          "target" : {
            "go-type" : 58,
            "kind" : "expression",
            "target" : {
              "go-type" : 58,
              "kind" : "expression",
              "target" : {
                "go-type" : 57,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "modules",
                  "variable" : 2
                }
              },
              "type" : "star"
            },
            "type" : "paren"
          },
          "type" : "index"
        } ],
        "right" : [ {
          "go-type" : 56,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "md",
            "variable" : 14
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 451,
      "code" : "(*modules)[0] = md",
      "entry" : false,
      "use-vars" : [ 14, 2 ]
    }, {
      "update-vars" : [ 2 ],
      "successors" : [ 16 ],
      "in-vars" : [ 2, 0, 16, 1 ],
      "exit" : false,
      "out-vars" : [ 2, 1 ],
      "decl-vars" : [ ],
      "line-start" : 452,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 56,
          "index" : {
            "go-type" : 67,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "i",
              "variable" : 16
            }
          },
          "kind" : "expression",
          "target" : {
            "go-type" : 58,
            "kind" : "expression",
            "target" : {
              "go-type" : 58,
              "kind" : "expression",
              "target" : {
                "go-type" : 57,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "modules",
                  "variable" : 2
                }
              },
              "type" : "star"
            },
            "type" : "paren"
          },
          "type" : "index"
        } ],
        "right" : [ {
          "go-type" : 56,
          "kind" : "expression",
          "operator" : "&",
          "target" : {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "firstmoduledata",
              "variable" : 0
            }
          },
          "type" : "unary"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 452,
      "code" : "(*modules)[i] = &firstmoduledata",
      "entry" : false,
      "use-vars" : [ 0, 16, 2 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 17 ],
      "in-vars" : [ 2, 1 ],
      "exit" : false,
      "out-vars" : [ 2, 1 ],
      "decl-vars" : [ ],
      "line-start" : 453,
      "ast" : {
        "kind" : "statement",
        "label" : null,
        "type" : "break"
      },
      "assign-vars" : [ ],
      "line-end" : 453,
      "code" : "break",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 2, 1 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 457,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "coerced-to" : {
              "go-type" : 30,
              "kind" : "type",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 1,
                "value" : "unsafe"
              },
              "type" : "identifier",
              "value" : {
                "go-type" : 30,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "Pointer"
              }
            },
            "go-type" : 30,
            "kind" : "expression",
            "target" : {
              "go-type" : 70,
              "kind" : "expression",
              "operator" : "&",
              "target" : {
                "go-type" : 57,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "modulesSlice",
                  "variable" : 1
                }
              },
              "type" : "unary"
            },
            "type" : "cast"
          }, {
            "coerced-to" : {
              "go-type" : 30,
              "kind" : "type",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 1,
                "value" : "unsafe"
              },
              "type" : "identifier",
              "value" : {
                "go-type" : 30,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "Pointer"
              }
            },
            "go-type" : 30,
            "kind" : "expression",
            "target" : {
              "go-type" : 57,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "modules",
                "variable" : 2
              }
            },
            "type" : "cast"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 68,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 2,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "atomicstorep"
            }
          },
          "go-type" : 1,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 457,
      "code" : "atomicstorep(unsafe.Pointer(&modulesSlice), unsafe.Pointer(modules))",
      "entry" : false,
      "use-vars" : [ 1, 2 ]
    } ],
    "code" : "// modulesinit creates the active modules slice out of all loaded modules.\n//\n// When a module is first loaded by the dynamic linker, an .init_array\n// function (written by cmd/link) is invoked to call addmoduledata,\n// appending to the module to the linked list that starts with\n// firstmoduledata.\n//\n// There are two times this can happen in the lifecycle of a Go\n// program. First, if compiled with -linkshared, a number of modules\n// built with -buildmode=shared can be loaded at program initialization.\n// Second, a Go program can load a module while running that was built\n// with -buildmode=plugin.\n//\n// After loading, this function is called which initializes the\n// moduledata so it is usable by the GC and creates a new activeModules\n// list.\n//\n// Only one goroutine may call modulesinit at a time.\nfunc modulesinit() {\n\tmodules := new([]*moduledata)\n\tfor md := &firstmoduledata; md != nil; md = md.next {\n\t\tif md.bad {\n\t\t\tcontinue\n\t\t}\n\t\t*modules = append(*modules, md)\n\t\tif md.gcdatamask == (bitvector{}) {\n\t\t\tmd.gcdatamask = progToPointerMask((*byte)(unsafe.Pointer(md.gcdata)), md.edata-md.data)\n\t\t\tmd.gcbssmask = progToPointerMask((*byte)(unsafe.Pointer(md.gcbss)), md.ebss-md.bss)\n\t\t}\n\t}\n\n\tfor i, md := range *modules {\n\t\tif md.hasmain != 0 {\n\t\t\t(*modules)[0] = md\n\t\t\t(*modules)[i] = &firstmoduledata\n\t\t\tbreak\n\t\t}\n\t}\n\n\tatomicstorep(unsafe.Pointer(&modulesSlice), unsafe.Pointer(modules))\n}",
    "defines" : [ 0 ],
    "functions" : [ {
      "name" : "modulesinit",
      "package" : 0,
      "type" : 0,
      "exported" : false
    }, {
      "name" : "progToPointerMask",
      "package" : 0,
      "type" : 64,
      "exported" : false
    }, {
      "name" : "atomicstorep",
      "package" : 0,
      "type" : 68,
      "exported" : false
    } ],
    "line-end" : 458,
    "line-start" : 427,
    "names" : [ "modulesinit" ],
    "package" : 0,
    "packages" : [ {
      "name" : "runtime",
      "path" : "runtime"
    }, {
      "name" : "unsafe",
      "path" : "unsafe"
    } ],
    "params" : [ ],
    "receivers" : [ ],
    "results" : [ ],
    "type" : "function",
    "types" : [ {
      "name" : "func()",
      "params" : 1,
      "recv" : -1,
      "results" : 1,
      "type" : "Signature",
      "underlying" : 0,
      "variadic" : false
    }, {
      "fields" : [ ],
      "name" : "()",
      "type" : "Tuple",
      "underlying" : 1
    }, {
      "local-name" : "moduledata",
      "name" : "runtime.moduledata",
      "package" : 0,
      "type" : "Named",
      "underlying" : 3
    }, {
      "fields" : [ {
        "name" : "pclntable",
        "type" : 4
      }, {
        "name" : "ftab",
        "type" : 6
      }, {
        "name" : "filetab",
        "type" : 10
      }, {
        "name" : "findfunctab",
        "type" : 9
      }, {
        "name" : "minpc",
        "type" : 9
      }, {
        "name" : "maxpc",
        "type" : 9
      }, {
        "name" : "text",
        "type" : 9
      }, {
        "name" : "etext",
        "type" : 9
      }, {
        "name" : "noptrdata",
        "type" : 9
      }, {
        "name" : "enoptrdata",
        "type" : 9
      }, {
        "name" : "data",
        "type" : 9
      }, {
        "name" : "edata",
        "type" : 9
      }, {
        "name" : "bss",
        "type" : 9
      }, {
        "name" : "ebss",
        "type" : 9
      }, {
        "name" : "noptrbss",
        "type" : 9
      }, {
        "name" : "enoptrbss",
        "type" : 9
      }, {
        "name" : "end",
        "type" : 9
      }, {
        "name" : "gcdata",
        "type" : 9
      }, {
        "name" : "gcbss",
        "type" : 9
      }, {
        "name" : "types",
        "type" : 9
      }, {
        "name" : "etypes",
        "type" : 9
      }, {
        "name" : "textsectmap",
        "type" : 12
      }, {
        "name" : "typelinks",
        "type" : 15
      }, {
        "name" : "itablinks",
        "type" : 17
      }, {
        "name" : "ptab",
        "type" : 44
      }, {
        "name" : "pluginpath",
        "type" : 47
      }, {
        "name" : "pkghashes",
        "type" : 48
      }, {
        "name" : "modulename",
        "type" : 47
      }, {
        "name" : "modulehashes",
        "type" : 48
      }, {
        "name" : "hasmain",
        "type" : 27
      }, {
        "name" : "gcdatamask",
        "type" : 52
      }, {
        "name" : "gcbssmask",
        "type" : 52
      }, {
        "name" : "typemap",
        "type" : 55
      }, {
        "name" : "bad",
        "type" : 32
      }, {
        "name" : "next",
        "type" : 56
      } ],
      "name" : "struct{pclntable []byte; ftab []runtime.functab; filetab []uint32; findfunctab uintptr; minpc uintptr; maxpc uintptr; text uintptr; etext uintptr; noptrdata uintptr; enoptrdata uintptr; data uintptr; edata uintptr; bss uintptr; ebss uintptr; noptrbss uintptr; enoptrbss uintptr; end uintptr; gcdata uintptr; gcbss uintptr; types uintptr; etypes uintptr; textsectmap []runtime.textsect; typelinks []int32; itablinks []*runtime.itab; ptab []runtime.ptabEntry; pluginpath string; pkghashes []runtime.modulehash; modulename string; modulehashes []runtime.modulehash; hasmain uint8; gcdatamask runtime.bitvector; gcbssmask runtime.bitvector; typemap map[runtime.typeOff]*runtime._type; bad bool; next *runtime.moduledata}",
      "type" : "Struct",
      "underlying" : 3
    }, {
      "elem" : 5,
      "name" : "[]byte",
      "type" : "Slice",
      "underlying" : 4
    }, {
      "name" : "byte",
      "type" : "Basic",
      "underlying" : 5
    }, {
      "elem" : 7,
      "name" : "[]runtime.functab",
      "type" : "Slice",
      "underlying" : 6
    }, {
      "local-name" : "functab",
      "name" : "runtime.functab",
      "package" : 0,
      "type" : "Named",
      "underlying" : 8
    }, {
      "fields" : [ {
        "name" : "entry",
        "type" : 9
      }, {
        "name" : "funcoff",
        "type" : 9
      } ],
      "name" : "struct{entry uintptr; funcoff uintptr}",
      "type" : "Struct",
      "underlying" : 8
    }, {
      "name" : "uintptr",
      "type" : "Basic",
      "underlying" : 9
    }, {
      "elem" : 11,
      "name" : "[]uint32",
      "type" : "Slice",
      "underlying" : 10
    }, {
      "name" : "uint32",
      "type" : "Basic",
      "underlying" : 11
    }, {
      "elem" : 13,
      "name" : "[]runtime.textsect",
      "type" : "Slice",
      "underlying" : 12
    }, {
      "local-name" : "textsect",
      "name" : "runtime.textsect",
      "package" : 0,
      "type" : "Named",
      "underlying" : 14
    }, {
      "fields" : [ {
        "name" : "vaddr",
        "type" : 9
      }, {
        "name" : "length",
        "type" : 9
      }, {
        "name" : "baseaddr",
        "type" : 9
      } ],
      "name" : "struct{vaddr uintptr; length uintptr; baseaddr uintptr}",
      "type" : "Struct",
      "underlying" : 14
    }, {
      "elem" : 16,
      "name" : "[]int32",
      "type" : "Slice",
      "underlying" : 15
    }, {
      "name" : "int32",
      "type" : "Basic",
      "underlying" : 16
    }, {
      "elem" : 18,
      "name" : "[]*runtime.itab",
      "type" : "Slice",
      "underlying" : 17
    }, {
      "elem" : 19,
      "name" : "*runtime.itab",
      "type" : "Pointer",
      "underlying" : 18
    }, {
      "local-name" : "itab",
      "name" : "runtime.itab",
      "package" : 0,
      "type" : "Named",
      "underlying" : 20
    }, {
      "fields" : [ {
        "name" : "inter",
        "type" : 21
      }, {
        "name" : "_type",
        "type" : 41
      }, {
        "name" : "hash",
        "type" : 11
      }, {
        "name" : "_",
        "type" : 42
      }, {
        "name" : "fun",
        "type" : 43
      } ],
      "name" : "struct{inter *runtime.interfacetype; _type *runtime._type; hash uint32; _ [4]byte; fun [1]uintptr}",
      "type" : "Struct",
      "underlying" : 20
    }, {
      "elem" : 22,
      "name" : "*runtime.interfacetype",
      "type" : "Pointer",
      "underlying" : 21
    }, {
      "local-name" : "interfacetype",
      "name" : "runtime.interfacetype",
      "package" : 0,
      "type" : "Named",
      "underlying" : 23
    }, {
      "fields" : [ {
        "name" : "typ",
        "type" : 24
      }, {
        "name" : "pkgpath",
        "type" : 36
      }, {
        "name" : "mhdr",
        "type" : 38
      } ],
      "name" : "struct{typ runtime._type; pkgpath runtime.name; mhdr []runtime.imethod}",
      "type" : "Struct",
      "underlying" : 23
    }, {
      "local-name" : "_type",
      "name" : "runtime._type",
      "package" : 0,
      "type" : "Named",
      "underlying" : 25
    }, {
      "fields" : [ {
        "name" : "size",
        "type" : 9
      }, {
        "name" : "ptrdata",
        "type" : 9
      }, {
        "name" : "hash",
        "type" : 11
      }, {
        "name" : "tflag",
        "type" : 26
      }, {
        "name" : "align",
        "type" : 27
      }, {
        "name" : "fieldAlign",
        "type" : 27
      }, {
        "name" : "kind",
        "type" : 27
      }, {
        "name" : "equal",
        "type" : 28
      }, {
        "name" : "gcdata",
        "type" : 33
      }, {
        "name" : "str",
        "type" : 34
      }, {
        "name" : "ptrToThis",
        "type" : 35
      } ],
      "name" : "struct{size uintptr; ptrdata uintptr; hash uint32; tflag runtime.tflag; align uint8; fieldAlign uint8; kind uint8; equal func(unsafe.Pointer, unsafe.Pointer) bool; gcdata *byte; str runtime.nameOff; ptrToThis runtime.typeOff}",
      "type" : "Struct",
      "underlying" : 25
    }, {
      "local-name" : "tflag",
      "name" : "runtime.tflag",
      "package" : 0,
      "type" : "Named",
      "underlying" : 27
    }, {
      "name" : "uint8",
      "type" : "Basic",
      "underlying" : 27
    }, {
      "name" : "func(unsafe.Pointer, unsafe.Pointer) bool",
      "params" : 29,
      "recv" : -1,
      "results" : 31,
      "type" : "Signature",
      "underlying" : 28,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 30
      }, {
        "name" : "",
        "type" : 30
      } ],
      "name" : "(unsafe.Pointer, unsafe.Pointer)",
      "type" : "Tuple",
      "underlying" : 29
    }, {
      "local-name" : "Pointer",
      "name" : "unsafe.Pointer",
      "package" : 1,
      "type" : "Basic",
      "underlying" : 30
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 32
      } ],
      "name" : "(bool)",
      "type" : "Tuple",
      "underlying" : 31
    }, {
      "name" : "bool",
      "type" : "Basic",
      "underlying" : 32
    }, {
      "elem" : 5,
      "name" : "*byte",
      "type" : "Pointer",
      "underlying" : 33
    }, {
      "local-name" : "nameOff",
      "name" : "runtime.nameOff",
      "package" : 0,
      "type" : "Named",
      "underlying" : 16
    }, {
      "local-name" : "typeOff",
      "name" : "runtime.typeOff",
      "package" : 0,
      "type" : "Named",
      "underlying" : 16
    }, {
      "local-name" : "name",
      "name" : "runtime.name",
      "package" : 0,
      "type" : "Named",
      "underlying" : 37
    }, {
      "fields" : [ {
        "name" : "bytes",
        "type" : 33
      } ],
      "name" : "struct{bytes *byte}",
      "type" : "Struct",
      "underlying" : 37
    }, {
      "elem" : 39,
      "name" : "[]runtime.imethod",
      "type" : "Slice",
      "underlying" : 38
    }, {
      "local-name" : "imethod",
      "name" : "runtime.imethod",
      "package" : 0,
      "type" : "Named",
      "underlying" : 40
    }, {
      "fields" : [ {
        "name" : "name",
        "type" : 34
      }, {
        "name" : "ityp",
        "type" : 35
      } ],
      "name" : "struct{name runtime.nameOff; ityp runtime.typeOff}",
      "type" : "Struct",
      "underlying" : 40
    }, {
      "elem" : 24,
      "name" : "*runtime._type",
      "type" : "Pointer",
      "underlying" : 41
    }, {
      "elem" : 5,
      "name" : "[4]byte",
      "type" : "Array",
      "underlying" : 42
    }, {
      "elem" : 9,
      "name" : "[1]uintptr",
      "type" : "Array",
      "underlying" : 43
    }, {
      "elem" : 45,
      "name" : "[]runtime.ptabEntry",
      "type" : "Slice",
      "underlying" : 44
    }, {
      "local-name" : "ptabEntry",
      "name" : "runtime.ptabEntry",
      "package" : 0,
      "type" : "Named",
      "underlying" : 46
    }, {
      "fields" : [ {
        "name" : "name",
        "type" : 34
      }, {
        "name" : "typ",
        "type" : 35
      } ],
      "name" : "struct{name runtime.nameOff; typ runtime.typeOff}",
      "type" : "Struct",
      "underlying" : 46
    }, {
      "name" : "string",
      "type" : "Basic",
      "underlying" : 47
    }, {
      "elem" : 49,
      "name" : "[]runtime.modulehash",
      "type" : "Slice",
      "underlying" : 48
    }, {
      "local-name" : "modulehash",
      "name" : "runtime.modulehash",
      "package" : 0,
      "type" : "Named",
      "underlying" : 50
    }, {
      "fields" : [ {
        "name" : "modulename",
        "type" : 47
      }, {
        "name" : "linktimehash",
        "type" : 47
      }, {
        "name" : "runtimehash",
        "type" : 51
      } ],
      "name" : "struct{modulename string; linktimehash string; runtimehash *string}",
      "type" : "Struct",
      "underlying" : 50
    }, {
      "elem" : 47,
      "name" : "*string",
      "type" : "Pointer",
      "underlying" : 51
    }, {
      "local-name" : "bitvector",
      "name" : "runtime.bitvector",
      "package" : 0,
      "type" : "Named",
      "underlying" : 53
    }, {
      "fields" : [ {
        "name" : "n",
        "type" : 16
      }, {
        "name" : "bytedata",
        "type" : 54
      } ],
      "name" : "struct{n int32; bytedata *uint8}",
      "type" : "Struct",
      "underlying" : 53
    }, {
      "elem" : 27,
      "name" : "*uint8",
      "type" : "Pointer",
      "underlying" : 54
    }, {
      "elem" : 41,
      "key" : 35,
      "name" : "map[runtime.typeOff]*runtime._type",
      "type" : "Map",
      "underlying" : 55
    }, {
      "elem" : 2,
      "name" : "*runtime.moduledata",
      "type" : "Pointer",
      "underlying" : 56
    }, {
      "elem" : 58,
      "name" : "*[]*runtime.moduledata",
      "type" : "Pointer",
      "underlying" : 57
    }, {
      "elem" : 56,
      "name" : "[]*runtime.moduledata",
      "type" : "Slice",
      "underlying" : 58
    }, {
      "name" : "untyped bool",
      "type" : "Basic",
      "underlying" : 59
    }, {
      "name" : "untyped nil",
      "type" : "Basic",
      "underlying" : 60
    }, {
      "name" : "func([]*runtime.moduledata, ...*runtime.moduledata) []*runtime.moduledata",
      "params" : 62,
      "recv" : -1,
      "results" : 63,
      "type" : "Signature",
      "underlying" : 61,
      "variadic" : true
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 58
      }, {
        "name" : "",
        "type" : 58
      } ],
      "name" : "([]*runtime.moduledata, []*runtime.moduledata)",
      "type" : "Tuple",
      "underlying" : 62
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 58
      } ],
      "name" : "([]*runtime.moduledata)",
      "type" : "Tuple",
      "underlying" : 63
    }, {
      "name" : "func(prog *byte, size uintptr) runtime.bitvector",
      "params" : 65,
      "recv" : -1,
      "results" : 66,
      "type" : "Signature",
      "underlying" : 64,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "prog",
        "type" : 33
      }, {
        "name" : "size",
        "type" : 9
      } ],
      "name" : "(prog *byte, size uintptr)",
      "type" : "Tuple",
      "underlying" : 65
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 52
      } ],
      "name" : "(runtime.bitvector)",
      "type" : "Tuple",
      "underlying" : 66
    }, {
      "name" : "int",
      "type" : "Basic",
      "underlying" : 67
    }, {
      "name" : "func(ptr unsafe.Pointer, new unsafe.Pointer)",
      "params" : 69,
      "recv" : -1,
      "results" : 1,
      "type" : "Signature",
      "underlying" : 68,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "ptr",
        "type" : 30
      }, {
        "name" : "new",
        "type" : 30
      } ],
      "name" : "(ptr unsafe.Pointer, new unsafe.Pointer)",
      "type" : "Tuple",
      "underlying" : 69
    }, {
      "elem" : 57,
      "name" : "**[]*runtime.moduledata",
      "type" : "Pointer",
      "underlying" : 70
    } ],
    "variables" : [ {
      "name" : "firstmoduledata",
      "package" : 0,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "modulesSlice",
      "package" : 0,
      "type" : 57,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "modules",
      "package" : 0,
      "type" : 57,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "md",
      "package" : 0,
      "type" : 56,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "next",
      "package" : 0,
      "type" : 56,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "bad",
      "package" : 0,
      "type" : 32,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "gcdatamask",
      "package" : 0,
      "type" : 52,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "gcdata",
      "package" : 0,
      "type" : 9,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "edata",
      "package" : 0,
      "type" : 9,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "data",
      "package" : 0,
      "type" : 9,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "gcbssmask",
      "package" : 0,
      "type" : 52,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "gcbss",
      "package" : 0,
      "type" : 9,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "ebss",
      "package" : 0,
      "type" : 9,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "bss",
      "package" : 0,
      "type" : 9,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "md",
      "package" : 0,
      "type" : 56,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "hasmain",
      "package" : 0,
      "type" : 27,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "i",
      "package" : 0,
      "type" : 67,
      "exported" : false,
      "embedded" : false,
      "field" : false
    } ]
  },
  "go-version" : "1.14.3"
}