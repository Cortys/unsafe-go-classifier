{
  "usage" : {
    "file" : "syscall_linux.go",
    "label1" : "delegate",
    "label2" : "ffi",
    "line" : "994",
    "module" : "golang.org/x/sys",
    "pkg" : "golang.org/x/sys/unix",
    "project" : "gorgonia/gorgonia",
    "snippet" : "err := getsockopt(fd, level, opt, unsafe.Pointer(&buf[0]), &vallen)",
    "version" : "v0.0.0-20190412213103-97732733099d"
  },
  "cfg" : {
    "blocks" : [ {
      "update-vars" : [ ],
      "successors" : [ 2 ],
      "in-vars" : [ 1, 2, 3 ],
      "exit" : false,
      "out-vars" : [ 1, 2, 3 ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[entry]",
      "entry" : true,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ ],
      "in-vars" : [ ],
      "exit" : true,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[exit]",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 3 ],
      "in-vars" : [ 3, 1, 2 ],
      "exit" : false,
      "out-vars" : [ 3, 6, 1, 2 ],
      "decl-vars" : [ 6 ],
      "line-start" : 992,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "buf"
          }
        } ],
        "right" : [ {
          "argument" : {
            "element" : {
              "go-type" : 11,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 11,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "byte"
              }
            },
            "go-type" : 10,
            "kind" : "type",
            "type" : "slice"
          },
          "go-type" : 10,
          "kind" : "expression",
          "rest" : [ {
            "go-type" : 2,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "256"
            }
          } ],
          "type" : "make"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 992,
      "code" : "buf := make([]byte, 256)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 4 ],
      "in-vars" : [ 6, 1, 2, 3 ],
      "exit" : false,
      "out-vars" : [ 6, 7, 1, 2, 3 ],
      "decl-vars" : [ 7 ],
      "line-start" : 993,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "vallen"
          }
        } ],
        "right" : [ {
          "coerced-to" : {
            "go-type" : 12,
            "kind" : "type",
            "type" : "identifier",
            "value" : {
              "go-type" : 12,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "_Socklen"
            }
          },
          "go-type" : 12,
          "kind" : "expression",
          "target" : {
            "arguments" : [ {
              "go-type" : 10,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "buf",
                "variable" : 6
              }
            } ],
            "ellipsis" : false,
            "function" : {
              "go-type" : 14,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Builtin",
                "kind" : "ident",
                "value" : "len"
              }
            },
            "go-type" : 2,
            "kind" : "expression",
            "type" : "call"
          },
          "type" : "cast"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 993,
      "code" : "vallen := _Socklen(len(buf))",
      "entry" : false,
      "use-vars" : [ 6 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 5 ],
      "in-vars" : [ 6, 7, 1, 2, 3 ],
      "exit" : false,
      "out-vars" : [ 1, 2, 3, 6, 7, 8 ],
      "decl-vars" : [ 8 ],
      "line-start" : 994,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "err"
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "fd",
              "variable" : 1
            }
          }, {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "level",
              "variable" : 2
            }
          }, {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "opt",
              "variable" : 3
            }
          }, {
            "coerced-to" : {
              "go-type" : 19,
              "kind" : "type",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 1,
                "value" : "unsafe"
              },
              "type" : "identifier",
              "value" : {
                "go-type" : 19,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "Pointer"
              }
            },
            "go-type" : 19,
            "kind" : "expression",
            "target" : {
              "go-type" : 22,
              "kind" : "expression",
              "operator" : "&",
              "target" : {
                "go-type" : 11,
                "index" : {
                  "go-type" : 2,
                  "kind" : "constant",
                  "value" : {
                    "type" : "INT",
                    "value" : "0"
                  }
                },
                "kind" : "expression",
                "target" : {
                  "go-type" : 10,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "buf",
                    "variable" : 6
                  }
                },
                "type" : "index"
              },
              "type" : "unary"
            },
            "type" : "cast"
          }, {
            "go-type" : 20,
            "kind" : "expression",
            "operator" : "&",
            "target" : {
              "go-type" : 12,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "vallen",
                "variable" : 7
              }
            },
            "type" : "unary"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 17,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "getsockopt"
            }
          },
          "go-type" : 5,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 994,
      "code" : "err := getsockopt(fd, level, opt, unsafe.Pointer(&buf[0]), &vallen)",
      "entry" : false,
      "use-vars" : [ 2, 3, 6, 7, 1 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 6, 11 ],
      "in-vars" : [ 3, 6, 7, 8, 1, 2 ],
      "exit" : false,
      "out-vars" : [ 2, 3, 6, 7, 8, 1 ],
      "decl-vars" : [ ],
      "line-start" : 995,
      "ast" : {
        "condition" : {
          "go-type" : 23,
          "kind" : "expression",
          "left" : {
            "go-type" : 5,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "err",
              "variable" : 8
            }
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 24,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Nil",
              "kind" : "ident",
              "value" : "nil"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 1003,
      "code" : "if err != nil {\n\tif err == ERANGE {\n\t\tbuf = make([]byte, vallen)\n\t\terr = getsockopt(fd, level, opt, unsafe.Pointer(&buf[0]), &vallen)\n\t}\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n}",
      "entry" : false,
      "use-vars" : [ 8 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 7, 9 ],
      "in-vars" : [ 1, 2, 3, 6, 7, 8 ],
      "exit" : false,
      "out-vars" : [ 6, 7, 8, 1, 2, 3 ],
      "decl-vars" : [ ],
      "line-start" : 996,
      "ast" : {
        "condition" : {
          "go-type" : 23,
          "kind" : "expression",
          "left" : {
            "go-type" : 5,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "err",
              "variable" : 8
            }
          },
          "operator" : "==",
          "right" : {
            "go-type" : 25,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "34"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 999,
      "code" : "if err == ERANGE {\n\tbuf = make([]byte, vallen)\n\terr = getsockopt(fd, level, opt, unsafe.Pointer(&buf[0]), &vallen)\n}",
      "entry" : false,
      "use-vars" : [ 8 ]
    }, {
      "update-vars" : [ 6 ],
      "successors" : [ 8 ],
      "in-vars" : [ 3, 7, 1, 2 ],
      "exit" : false,
      "out-vars" : [ 1, 2, 3, 6, 7 ],
      "decl-vars" : [ ],
      "line-start" : 997,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 10,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "buf",
            "variable" : 6
          }
        } ],
        "right" : [ {
          "argument" : {
            "element" : {
              "go-type" : 11,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 11,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "byte"
              }
            },
            "go-type" : 10,
            "kind" : "type",
            "type" : "slice"
          },
          "go-type" : 10,
          "kind" : "expression",
          "rest" : [ {
            "go-type" : 12,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "vallen",
              "variable" : 7
            }
          } ],
          "type" : "make"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 6 ],
      "line-end" : 997,
      "code" : "buf = make([]byte, vallen)",
      "entry" : false,
      "use-vars" : [ 7 ]
    }, {
      "update-vars" : [ 8 ],
      "successors" : [ 9 ],
      "in-vars" : [ 6, 7, 1, 2, 3 ],
      "exit" : false,
      "out-vars" : [ 6, 7, 8 ],
      "decl-vars" : [ ],
      "line-start" : 998,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 5,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "err",
            "variable" : 8
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "fd",
              "variable" : 1
            }
          }, {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "level",
              "variable" : 2
            }
          }, {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "opt",
              "variable" : 3
            }
          }, {
            "coerced-to" : {
              "go-type" : 19,
              "kind" : "type",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 1,
                "value" : "unsafe"
              },
              "type" : "identifier",
              "value" : {
                "go-type" : 19,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "Pointer"
              }
            },
            "go-type" : 19,
            "kind" : "expression",
            "target" : {
              "go-type" : 22,
              "kind" : "expression",
              "operator" : "&",
              "target" : {
                "go-type" : 11,
                "index" : {
                  "go-type" : 2,
                  "kind" : "constant",
                  "value" : {
                    "type" : "INT",
                    "value" : "0"
                  }
                },
                "kind" : "expression",
                "target" : {
                  "go-type" : 10,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "buf",
                    "variable" : 6
                  }
                },
                "type" : "index"
              },
              "type" : "unary"
            },
            "type" : "cast"
          }, {
            "go-type" : 20,
            "kind" : "expression",
            "operator" : "&",
            "target" : {
              "go-type" : 12,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "vallen",
                "variable" : 7
              }
            },
            "type" : "unary"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 17,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "getsockopt"
            }
          },
          "go-type" : 5,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 8 ],
      "line-end" : 998,
      "code" : "err = getsockopt(fd, level, opt, unsafe.Pointer(&buf[0]), &vallen)",
      "entry" : false,
      "use-vars" : [ 7, 1, 2, 3, 6 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 10, 11 ],
      "in-vars" : [ 8, 6, 7 ],
      "exit" : false,
      "out-vars" : [ 7, 8, 6 ],
      "decl-vars" : [ ],
      "line-start" : 1000,
      "ast" : {
        "condition" : {
          "go-type" : 23,
          "kind" : "expression",
          "left" : {
            "go-type" : 5,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "err",
              "variable" : 8
            }
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 24,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Nil",
              "kind" : "ident",
              "value" : "nil"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 1002,
      "code" : "if err != nil {\n\treturn \"\", err\n}",
      "entry" : false,
      "use-vars" : [ 8 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 8 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 1001,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 4,
          "kind" : "constant",
          "value" : {
            "type" : "STRING",
            "value" : ""
          }
        }, {
          "go-type" : 5,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "err",
            "variable" : 8
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 1001,
      "code" : "return \"\", err",
      "entry" : false,
      "use-vars" : [ 8 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 6, 7 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 1004,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "coerced-to" : {
            "go-type" : 4,
            "kind" : "type",
            "type" : "identifier",
            "value" : {
              "go-type" : 4,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "string"
            }
          },
          "go-type" : 4,
          "kind" : "expression",
          "target" : {
            "go-type" : 10,
            "type" : "slice",
            "three" : false,
            "high" : {
              "go-type" : 12,
              "kind" : "expression",
              "left" : {
                "go-type" : 12,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "vallen",
                  "variable" : 7
                }
              },
              "operator" : "-",
              "right" : {
                "go-type" : 12,
                "kind" : "constant",
                "value" : {
                  "type" : "INT",
                  "value" : "1"
                }
              },
              "type" : "binary"
            },
            "max" : null,
            "kind" : "expression",
            "low" : null,
            "target" : {
              "go-type" : 10,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "buf",
                "variable" : 6
              }
            }
          },
          "type" : "cast"
        }, {
          "go-type" : 24,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Nil",
            "kind" : "ident",
            "value" : "nil"
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 1004,
      "code" : "return string(buf[:vallen-1]), nil",
      "entry" : false,
      "use-vars" : [ 6, 7 ]
    } ],
    "code" : "// GetsockoptString returns the string value of the socket option opt for the\n// socket associated with fd at the given socket level.\nfunc GetsockoptString(fd, level, opt int) (string, error) {\n\tbuf := make([]byte, 256)\n\tvallen := _Socklen(len(buf))\n\terr := getsockopt(fd, level, opt, unsafe.Pointer(&buf[0]), &vallen)\n\tif err != nil {\n\t\tif err == ERANGE {\n\t\t\tbuf = make([]byte, vallen)\n\t\t\terr = getsockopt(fd, level, opt, unsafe.Pointer(&buf[0]), &vallen)\n\t\t}\n\t\tif err != nil {\n\t\t\treturn \"\", err\n\t\t}\n\t}\n\treturn string(buf[:vallen-1]), nil\n}",
    "defines" : [ 0 ],
    "functions" : [ {
      "name" : "GetsockoptString",
      "package" : 0,
      "type" : 0,
      "exported" : true
    }, {
      "name" : "getsockopt",
      "package" : 0,
      "type" : 17,
      "exported" : false
    } ],
    "line-end" : 1005,
    "line-start" : 991,
    "names" : [ "GetsockoptString" ],
    "package" : 0,
    "packages" : [ {
      "name" : "unix",
      "path" : "golang.org/x/sys/unix"
    }, {
      "name" : "unsafe",
      "path" : "unsafe"
    }, {
      "name" : "syscall",
      "path" : "syscall"
    } ],
    "params" : [ 1, 2, 3 ],
    "receivers" : [ ],
    "results" : [ 4, 5 ],
    "type" : "function",
    "types" : [ {
      "name" : "func(fd int, level int, opt int) (string, error)",
      "params" : 1,
      "recv" : -1,
      "results" : 3,
      "type" : "Signature",
      "underlying" : 0,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "fd",
        "type" : 2
      }, {
        "name" : "level",
        "type" : 2
      }, {
        "name" : "opt",
        "type" : 2
      } ],
      "name" : "(fd int, level int, opt int)",
      "type" : "Tuple",
      "underlying" : 1
    }, {
      "name" : "int",
      "type" : "Basic",
      "underlying" : 2
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 4
      }, {
        "name" : "",
        "type" : 5
      } ],
      "name" : "(string, error)",
      "type" : "Tuple",
      "underlying" : 3
    }, {
      "name" : "string",
      "type" : "Basic",
      "underlying" : 4
    }, {
      "local-name" : "error",
      "name" : "error",
      "package" : -1,
      "type" : "Named",
      "underlying" : 6
    }, {
      "methods" : [ {
        "name" : "Error",
        "type" : 7
      } ],
      "name" : "interface{Error() string}",
      "type" : "Interface",
      "underlying" : 6
    }, {
      "name" : "func() string",
      "params" : 8,
      "recv" : 0,
      "results" : 9,
      "type" : "Signature",
      "underlying" : 7,
      "variadic" : false
    }, {
      "fields" : [ ],
      "name" : "()",
      "type" : "Tuple",
      "underlying" : 8
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 4
      } ],
      "name" : "(string)",
      "type" : "Tuple",
      "underlying" : 9
    }, {
      "elem" : 11,
      "name" : "[]byte",
      "type" : "Slice",
      "underlying" : 10
    }, {
      "name" : "byte",
      "type" : "Basic",
      "underlying" : 11
    }, {
      "local-name" : "_Socklen",
      "name" : "golang.org/x/sys/unix._Socklen",
      "package" : 0,
      "type" : "Named",
      "underlying" : 13
    }, {
      "name" : "uint32",
      "type" : "Basic",
      "underlying" : 13
    }, {
      "name" : "func([]byte) int",
      "params" : 15,
      "recv" : -1,
      "results" : 16,
      "type" : "Signature",
      "underlying" : 14,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 10
      } ],
      "name" : "([]byte)",
      "type" : "Tuple",
      "underlying" : 15
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 2
      } ],
      "name" : "(int)",
      "type" : "Tuple",
      "underlying" : 16
    }, {
      "name" : "func(s int, level int, name int, val unsafe.Pointer, vallen *golang.org/x/sys/unix._Socklen) (err error)",
      "params" : 18,
      "recv" : -1,
      "results" : 21,
      "type" : "Signature",
      "underlying" : 17,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "s",
        "type" : 2
      }, {
        "name" : "level",
        "type" : 2
      }, {
        "name" : "name",
        "type" : 2
      }, {
        "name" : "val",
        "type" : 19
      }, {
        "name" : "vallen",
        "type" : 20
      } ],
      "name" : "(s int, level int, name int, val unsafe.Pointer, vallen *golang.org/x/sys/unix._Socklen)",
      "type" : "Tuple",
      "underlying" : 18
    }, {
      "local-name" : "Pointer",
      "name" : "unsafe.Pointer",
      "package" : 1,
      "type" : "Basic",
      "underlying" : 19
    }, {
      "elem" : 12,
      "name" : "*golang.org/x/sys/unix._Socklen",
      "type" : "Pointer",
      "underlying" : 20
    }, {
      "fields" : [ {
        "name" : "err",
        "type" : 5
      } ],
      "name" : "(err error)",
      "type" : "Tuple",
      "underlying" : 21
    }, {
      "elem" : 11,
      "name" : "*byte",
      "type" : "Pointer",
      "underlying" : 22
    }, {
      "name" : "untyped bool",
      "type" : "Basic",
      "underlying" : 23
    }, {
      "name" : "untyped nil",
      "type" : "Basic",
      "underlying" : 24
    }, {
      "local-name" : "Errno",
      "name" : "syscall.Errno",
      "package" : 2,
      "type" : "Named",
      "underlying" : 26
    }, {
      "name" : "uintptr",
      "type" : "Basic",
      "underlying" : 26
    } ],
    "variables" : [ {
      "name" : "",
      "package" : -1,
      "type" : 5,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "fd",
      "package" : 0,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "level",
      "package" : 0,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "opt",
      "package" : 0,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "[res0]",
      "package" : 0,
      "type" : 4,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "[res1]",
      "package" : 0,
      "type" : 5,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "buf",
      "package" : 0,
      "type" : 10,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "vallen",
      "package" : 0,
      "type" : 12,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "err",
      "package" : 0,
      "type" : 5,
      "exported" : false,
      "embedded" : false,
      "field" : false
    } ]
  },
  "go-version" : "1.14.3"
}