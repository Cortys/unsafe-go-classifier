{
  "usage" : {
    "file" : "mheap.go",
    "label1" : "delegate",
    "label2" : "ffi",
    "line" : "1229",
    "module" : "std",
    "pkg" : "runtime",
    "project" : "kubernetes/kubernetes",
    "snippet" : "sysUsed(unsafe.Pointer(base), nbytes)",
    "version" : "std"
  },
  "cfg" : {
    "blocks" : [ {
      "update-vars" : [ ],
      "successors" : [ 2 ],
      "in-vars" : [ 1, 6, 7, 8, 9, 10, 5, 0, 11, 4, 2, 3, 12 ],
      "exit" : false,
      "out-vars" : [ 10, 0, 1, 7, 8, 12, 4, 2, 3, 5, 6, 11, 9 ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[entry]",
      "entry" : true,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ ],
      "in-vars" : [ ],
      "exit" : true,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[exit]",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 3 ],
      "in-vars" : [ 12, 10, 3, 5, 0, 1, 6, 8, 11, 4, 2, 7, 9 ],
      "exit" : false,
      "out-vars" : [ 6, 10, 2, 3, 13, 12, 11, 9, 1, 7, 8, 5, 0, 4 ],
      "decl-vars" : [ 13 ],
      "line-start" : 1077,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "gp"
          }
        } ],
        "right" : [ {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 205,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 1,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "getg"
            }
          },
          "go-type" : 126,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 1077,
      "code" : "gp := getg()",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 4 ],
      "in-vars" : [ 1, 12, 13, 5, 7, 8, 6, 11, 4, 9, 10, 2, 3, 0 ],
      "exit" : false,
      "out-vars" : [ 3, 1, 14, 7, 12, 11, 10, 0, 4, 13, 5, 8, 2, 15, 6, 9 ],
      "decl-vars" : [ 15, 14 ],
      "line-start" : 1078,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "base"
          }
        }, {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "scav"
          }
        } ],
        "right" : [ {
          "go-type" : 2,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "0"
          }
        }, {
          "go-type" : 2,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "0"
          }
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 1078,
      "code" : "base, scav := uintptr(0), uintptr(0)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 5 ],
      "in-vars" : [ 10, 0, 15, 14, 11, 4, 9, 3, 8, 1, 6, 7, 13, 2, 5, 12 ],
      "exit" : false,
      "out-vars" : [ 13, 15, 8, 11, 18, 3, 5, 12, 2, 0, 1, 14, 9, 10, 6, 7, 4 ],
      "decl-vars" : [ 18 ],
      "line-start" : 1081,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "pp"
          }
        } ],
        "right" : [ {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "function" : 2,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "ptr"
            },
            "go-type" : 246,
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "p",
                "variable" : 17
              },
              "go-type" : 151,
              "kind" : "expression",
              "target" : {
                "field" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "m",
                  "variable" : 16
                },
                "go-type" : 138,
                "kind" : "expression",
                "target" : {
                  "go-type" : 126,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "gp",
                    "variable" : 13
                  }
                },
                "type" : "selector"
              },
              "type" : "selector"
            },
            "type" : "selector"
          },
          "go-type" : 207,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 1081,
      "code" : "pp := gp.m.p.ptr()",
      "entry" : false,
      "use-vars" : [ 13 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 6, 16 ],
      "in-vars" : [ 6, 8, 13, 2, 5, 0, 15, 7, 4, 18, 3, 14, 10, 1, 12, 11, 9 ],
      "exit" : false,
      "out-vars" : [ 15, 9, 10, 7, 2, 13, 3, 0, 1, 14, 12, 4, 18, 6, 8, 11, 5 ],
      "decl-vars" : [ ],
      "line-start" : 1082,
      "ast" : {
        "condition" : {
          "go-type" : 248,
          "kind" : "expression",
          "left" : {
            "go-type" : 248,
            "kind" : "expression",
            "left" : {
              "go-type" : 207,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "pp",
                "variable" : 18
              }
            },
            "operator" : "!=",
            "right" : {
              "go-type" : 249,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Nil",
                "kind" : "ident",
                "value" : "nil"
              }
            },
            "type" : "binary"
          },
          "operator" : "&&",
          "right" : {
            "go-type" : 248,
            "kind" : "expression",
            "left" : {
              "go-type" : 2,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "npages",
                "variable" : 1
              }
            },
            "operator" : "<",
            "right" : {
              "go-type" : 2,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "16"
              }
            },
            "type" : "binary"
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 1114,
      "code" : "if pp != nil && npages < pageCachePages/4 {\n\tc := &pp.pcache\n\n\tif c.empty() {\n\t\tlock(&h.lock)\n\t\t*c = h.pages.allocToCache()\n\t\tunlock(&h.lock)\n\t}\n\n\tbase, scav = c.alloc(npages)\n\tif base != 0 {\n\t\ts = h.tryAllocMSpan()\n\n\t\tif s != nil && gcBlackenEnabled == 0 && (manual || spanclass.sizeclass() != 0) {\n\t\t\tgoto HaveSpan\n\t\t}\n\n\t}\n}",
      "entry" : false,
      "use-vars" : [ 1, 18 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 7 ],
      "in-vars" : [ 18, 10, 3, 5, 1, 4, 13, 2, 0, 8, 12, 11, 9, 7, 6 ],
      "exit" : false,
      "out-vars" : [ 20, 7, 8, 4, 11, 13, 3, 1, 9, 10, 2, 5, 0, 6, 12 ],
      "decl-vars" : [ 20 ],
      "line-start" : 1083,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "c"
          }
        } ],
        "right" : [ {
          "go-type" : 250,
          "kind" : "expression",
          "operator" : "&",
          "target" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "pcache",
              "variable" : 19
            },
            "go-type" : 212,
            "kind" : "expression",
            "target" : {
              "go-type" : 207,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "pp",
                "variable" : 18
              }
            },
            "type" : "selector"
          },
          "type" : "unary"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 1083,
      "code" : "c := &pp.pcache",
      "entry" : false,
      "use-vars" : [ 18 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 8, 11 ],
      "in-vars" : [ 13, 2, 0, 1, 6, 10, 3, 5, 20, 7, 8, 12, 11, 4, 9 ],
      "exit" : false,
      "out-vars" : [ 9, 3, 6, 12, 11, 7, 8, 4, 13, 1, 20, 10, 2, 5, 0 ],
      "decl-vars" : [ ],
      "line-start" : 1086,
      "ast" : {
        "condition" : {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "function" : 3,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "empty"
            },
            "go-type" : 251,
            "kind" : "expression",
            "target" : {
              "go-type" : 250,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "c",
                "variable" : 20
              }
            },
            "type" : "selector"
          },
          "go-type" : 3,
          "kind" : "expression",
          "type" : "call"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 1090,
      "code" : "if c.empty() {\n\tlock(&h.lock)\n\t*c = h.pages.allocToCache()\n\tunlock(&h.lock)\n}",
      "entry" : false,
      "use-vars" : [ 20 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 9 ],
      "in-vars" : [ 6, 4, 9, 13, 3, 0, 1, 20, 12, 10, 8, 2, 5, 7, 11 ],
      "exit" : false,
      "out-vars" : [ 13, 9, 0, 1, 12, 4, 3, 7, 8, 10, 2, 5, 20, 6, 11 ],
      "decl-vars" : [ ],
      "line-start" : 1087,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 52,
            "kind" : "expression",
            "operator" : "&",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "lock",
                "variable" : 21
              },
              "go-type" : 23,
              "kind" : "expression",
              "target" : {
                "go-type" : 29,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "h",
                  "variable" : 0
                }
              },
              "type" : "selector"
            },
            "type" : "unary"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 252,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 4,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "lock"
            }
          },
          "go-type" : 86,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 1087,
      "code" : "lock(&h.lock)",
      "entry" : false,
      "use-vars" : [ 0 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 10 ],
      "in-vars" : [ 1, 8, 12, 3, 4, 11, 5, 6, 9, 2, 10, 0, 20, 7, 13 ],
      "exit" : false,
      "out-vars" : [ 11, 13, 2, 1, 12, 4, 3, 5, 6, 7, 0, 9, 10, 20, 8 ],
      "decl-vars" : [ ],
      "line-start" : 1088,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 212,
          "kind" : "expression",
          "target" : {
            "go-type" : 250,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "c",
              "variable" : 20
            }
          },
          "type" : "star"
        } ],
        "right" : [ {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "function" : 5,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "allocToCache"
            },
            "go-type" : 254,
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "pages",
                "variable" : 22
              },
              "go-type" : 32,
              "kind" : "expression",
              "target" : {
                "go-type" : 29,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "h",
                  "variable" : 0
                }
              },
              "type" : "selector"
            },
            "type" : "selector"
          },
          "go-type" : 212,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 1088,
      "code" : "*c = h.pages.allocToCache()",
      "entry" : false,
      "use-vars" : [ 0 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 11 ],
      "in-vars" : [ 10, 2, 5, 6, 4, 8, 12, 13, 3, 0, 1, 20, 7, 11, 9 ],
      "exit" : false,
      "out-vars" : [ 0, 1, 12, 3, 5, 7, 11, 4, 9, 2, 6, 20, 8, 13, 10 ],
      "decl-vars" : [ ],
      "line-start" : 1089,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 52,
            "kind" : "expression",
            "operator" : "&",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "lock",
                "variable" : 21
              },
              "go-type" : 23,
              "kind" : "expression",
              "target" : {
                "go-type" : 29,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "h",
                  "variable" : 0
                }
              },
              "type" : "selector"
            },
            "type" : "unary"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 252,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 6,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "unlock"
            }
          },
          "go-type" : 86,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 1089,
      "code" : "unlock(&h.lock)",
      "entry" : false,
      "use-vars" : [ 0 ]
    }, {
      "update-vars" : [ 14, 15 ],
      "successors" : [ 12 ],
      "in-vars" : [ 1, 5, 0, 7, 4, 13, 6, 11, 8, 12, 9, 10, 2, 3, 20 ],
      "exit" : false,
      "out-vars" : [ 15, 12, 13, 0, 1, 4, 3, 8, 9, 7, 2, 5, 14, 6, 11, 10 ],
      "decl-vars" : [ ],
      "line-start" : 1093,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 2,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "base",
            "variable" : 15
          }
        }, {
          "go-type" : 2,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "scav",
            "variable" : 14
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "npages",
              "variable" : 1
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "function" : 7,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "alloc"
            },
            "go-type" : 257,
            "kind" : "expression",
            "target" : {
              "go-type" : 250,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "c",
                "variable" : 20
              }
            },
            "type" : "selector"
          },
          "go-type" : 256,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 14, 15 ],
      "line-end" : 1093,
      "code" : "base, scav = c.alloc(npages)",
      "entry" : false,
      "use-vars" : [ 1, 20 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 13, 16 ],
      "in-vars" : [ 4, 9, 14, 12, 13, 10, 2, 5, 8, 11, 3, 0, 1, 15, 6, 7 ],
      "exit" : false,
      "out-vars" : [ 12, 5, 1, 14, 6, 9, 13, 10, 8, 11, 4, 2, 15, 7, 3, 0 ],
      "decl-vars" : [ ],
      "line-start" : 1094,
      "ast" : {
        "condition" : {
          "go-type" : 248,
          "kind" : "expression",
          "left" : {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "base",
              "variable" : 15
            }
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 2,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 1113,
      "code" : "if base != 0 {\n\ts = h.tryAllocMSpan()\n\n\tif s != nil && gcBlackenEnabled == 0 && (manual || spanclass.sizeclass() != 0) {\n\t\tgoto HaveSpan\n\t}\n\n}",
      "entry" : false,
      "use-vars" : [ 15 ]
    }, {
      "update-vars" : [ 5 ],
      "successors" : [ 14 ],
      "in-vars" : [ 14, 6, 8, 11, 13, 2, 0, 1, 9, 10, 3, 15, 4, 7, 12 ],
      "exit" : false,
      "out-vars" : [ 3, 5, 1, 13, 6, 8, 12, 9, 2, 0, 15, 14, 11, 10, 7, 4 ],
      "decl-vars" : [ ],
      "line-start" : 1095,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 9,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "s",
            "variable" : 5
          }
        } ],
        "right" : [ {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "function" : 8,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "tryAllocMSpan"
            },
            "go-type" : 259,
            "kind" : "expression",
            "target" : {
              "go-type" : 29,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "h",
                "variable" : 0
              }
            },
            "type" : "selector"
          },
          "go-type" : 9,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 5 ],
      "line-end" : 1095,
      "code" : "s = h.tryAllocMSpan()",
      "entry" : false,
      "use-vars" : [ 0 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 15, 16 ],
      "in-vars" : [ 3, 14, 8, 12, 0, 1, 7, 13, 5, 6, 11, 4, 10, 2, 15, 9 ],
      "exit" : false,
      "out-vars" : [ 12, 13, 10, 8, 11, 9, 15, 7, 0, 1, 14, 2, 5, 4, 3, 6 ],
      "decl-vars" : [ ],
      "line-start" : 1097,
      "ast" : {
        "condition" : {
          "go-type" : 3,
          "kind" : "expression",
          "left" : {
            "go-type" : 3,
            "kind" : "expression",
            "left" : {
              "go-type" : 3,
              "kind" : "expression",
              "left" : {
                "go-type" : 9,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "s",
                  "variable" : 5
                }
              },
              "operator" : "!=",
              "right" : {
                "go-type" : 249,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Nil",
                  "kind" : "ident",
                  "value" : "nil"
                }
              },
              "type" : "binary"
            },
            "operator" : "&&",
            "right" : {
              "go-type" : 3,
              "kind" : "expression",
              "left" : {
                "go-type" : 18,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "gcBlackenEnabled",
                  "variable" : 10
                }
              },
              "operator" : "==",
              "right" : {
                "go-type" : 18,
                "kind" : "constant",
                "value" : {
                  "type" : "INT",
                  "value" : "0"
                }
              },
              "type" : "binary"
            },
            "type" : "binary"
          },
          "operator" : "&&",
          "right" : {
            "go-type" : 3,
            "kind" : "expression",
            "target" : {
              "go-type" : 3,
              "kind" : "expression",
              "left" : {
                "go-type" : 3,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "manual",
                  "variable" : 2
                }
              },
              "operator" : "||",
              "right" : {
                "go-type" : 3,
                "kind" : "expression",
                "left" : {
                  "arguments" : [ ],
                  "ellipsis" : false,
                  "function" : {
                    "field" : {
                      "function" : 9,
                      "ident-kind" : "Func",
                      "kind" : "ident",
                      "value" : "sizeclass"
                    },
                    "go-type" : 261,
                    "kind" : "expression",
                    "target" : {
                      "go-type" : 4,
                      "kind" : "expression",
                      "type" : "identifier",
                      "value" : {
                        "ident-kind" : "Var",
                        "kind" : "ident",
                        "value" : "spanclass",
                        "variable" : 3
                      }
                    },
                    "type" : "selector"
                  },
                  "go-type" : 153,
                  "kind" : "expression",
                  "type" : "call"
                },
                "operator" : "!=",
                "right" : {
                  "go-type" : 153,
                  "kind" : "constant",
                  "value" : {
                    "type" : "INT",
                    "value" : "0"
                  }
                },
                "type" : "binary"
              },
              "type" : "binary"
            },
            "type" : "paren"
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 1099,
      "code" : "if s != nil && gcBlackenEnabled == 0 && (manual || spanclass.sizeclass() != 0) {\n\tgoto HaveSpan\n}",
      "entry" : false,
      "use-vars" : [ 10, 2, 3, 5 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 40 ],
      "in-vars" : [ 1, 15, 6, 7, 2, 3, 5, 12, 4, 0, 14, 8 ],
      "exit" : false,
      "out-vars" : [ 1, 15, 6, 7, 4, 3, 5, 14, 8, 12, 2, 0 ],
      "decl-vars" : [ ],
      "line-start" : 1098,
      "ast" : {
        "kind" : "statement",
        "label" : {
          "ident-kind" : "Label",
          "kind" : "ident",
          "value" : "HaveSpan"
        },
        "type" : "goto"
      },
      "assign-vars" : [ ],
      "line-end" : 1098,
      "code" : "goto HaveSpan",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 17 ],
      "in-vars" : [ 5, 1, 14, 6, 8, 9, 10, 2, 4, 13, 3, 0, 7, 12, 11, 15 ],
      "exit" : false,
      "out-vars" : [ 15, 8, 10, 2, 5, 14, 6, 7, 4, 3, 12, 13, 0, 1, 11, 9 ],
      "decl-vars" : [ ],
      "line-start" : 1118,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 52,
            "kind" : "expression",
            "operator" : "&",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "lock",
                "variable" : 21
              },
              "go-type" : 23,
              "kind" : "expression",
              "target" : {
                "go-type" : 29,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "h",
                  "variable" : 0
                }
              },
              "type" : "selector"
            },
            "type" : "unary"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 252,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 4,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "lock"
            }
          },
          "go-type" : 86,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 1118,
      "code" : "lock(&h.lock)",
      "entry" : false,
      "use-vars" : [ 0 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 18, 26 ],
      "in-vars" : [ 1, 14, 12, 11, 13, 3, 6, 7, 5, 0, 8, 10, 2, 9, 15, 4 ],
      "exit" : false,
      "out-vars" : [ 6, 8, 13, 3, 15, 12, 2, 0, 1, 14, 11, 10, 7, 4, 9, 5 ],
      "decl-vars" : [ ],
      "line-start" : 1120,
      "ast" : {
        "condition" : {
          "go-type" : 248,
          "kind" : "expression",
          "left" : {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "base",
              "variable" : 15
            }
          },
          "operator" : "==",
          "right" : {
            "go-type" : 2,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 1133,
      "code" : "if base == 0 {\n\n\tbase, scav = h.pages.alloc(npages)\n\tif base == 0 {\n\t\tif !h.grow(npages) {\n\t\t\tunlock(&h.lock)\n\t\t\treturn nil\n\t\t}\n\t\tbase, scav = h.pages.alloc(npages)\n\t\tif base == 0 {\n\t\t\tthrow(\"grew heap, but no adequate free space found\")\n\t\t}\n\t}\n}",
      "entry" : false,
      "use-vars" : [ 15 ]
    }, {
      "update-vars" : [ 14, 15 ],
      "successors" : [ 19 ],
      "in-vars" : [ 10, 1, 8, 2, 0, 5, 7, 13, 3, 11, 4, 9, 6, 12 ],
      "exit" : false,
      "out-vars" : [ 13, 14, 6, 8, 4, 0, 7, 12, 11, 9, 2, 3, 10, 5, 1, 15 ],
      "decl-vars" : [ ],
      "line-start" : 1122,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 2,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "base",
            "variable" : 15
          }
        }, {
          "go-type" : 2,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "scav",
            "variable" : 14
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "npages",
              "variable" : 1
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "function" : 10,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "alloc"
            },
            "go-type" : 264,
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "pages",
                "variable" : 22
              },
              "go-type" : 32,
              "kind" : "expression",
              "target" : {
                "go-type" : 29,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "h",
                  "variable" : 0
                }
              },
              "type" : "selector"
            },
            "type" : "selector"
          },
          "go-type" : 263,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 14, 15 ],
      "line-end" : 1122,
      "code" : "base, scav = h.pages.alloc(npages)",
      "entry" : false,
      "use-vars" : [ 1, 0 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 20, 26 ],
      "in-vars" : [ 13, 1, 7, 10, 15, 8, 4, 9, 3, 5, 0, 14, 12, 2, 6, 11 ],
      "exit" : false,
      "out-vars" : [ 1, 6, 12, 10, 15, 3, 0, 14, 8, 11, 13, 5, 7, 4, 9, 2 ],
      "decl-vars" : [ ],
      "line-start" : 1123,
      "ast" : {
        "condition" : {
          "go-type" : 248,
          "kind" : "expression",
          "left" : {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "base",
              "variable" : 15
            }
          },
          "operator" : "==",
          "right" : {
            "go-type" : 2,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 1132,
      "code" : "if base == 0 {\n\tif !h.grow(npages) {\n\t\tunlock(&h.lock)\n\t\treturn nil\n\t}\n\tbase, scav = h.pages.alloc(npages)\n\tif base == 0 {\n\t\tthrow(\"grew heap, but no adequate free space found\")\n\t}\n}",
      "entry" : false,
      "use-vars" : [ 15 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 21, 23 ],
      "in-vars" : [ 6, 13, 10, 0, 2, 8, 12, 9, 4, 3, 5, 1, 7, 11 ],
      "exit" : false,
      "out-vars" : [ 3, 9, 13, 10, 2, 5, 0, 7, 1, 6, 12, 8, 11, 4 ],
      "decl-vars" : [ ],
      "line-start" : 1124,
      "ast" : {
        "condition" : {
          "go-type" : 3,
          "kind" : "expression",
          "operator" : "!",
          "target" : {
            "arguments" : [ {
              "go-type" : 2,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "npages",
                "variable" : 1
              }
            } ],
            "ellipsis" : false,
            "function" : {
              "field" : {
                "function" : 11,
                "ident-kind" : "Func",
                "kind" : "ident",
                "value" : "grow"
              },
              "go-type" : 265,
              "kind" : "expression",
              "target" : {
                "go-type" : 29,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "h",
                  "variable" : 0
                }
              },
              "type" : "selector"
            },
            "go-type" : 3,
            "kind" : "expression",
            "type" : "call"
          },
          "type" : "unary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 1127,
      "code" : "if !h.grow(npages) {\n\tunlock(&h.lock)\n\treturn nil\n}",
      "entry" : false,
      "use-vars" : [ 0, 1 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 22 ],
      "in-vars" : [ 0 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 1125,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 52,
            "kind" : "expression",
            "operator" : "&",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "lock",
                "variable" : 21
              },
              "go-type" : 23,
              "kind" : "expression",
              "target" : {
                "go-type" : 29,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "h",
                  "variable" : 0
                }
              },
              "type" : "selector"
            },
            "type" : "unary"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 252,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 6,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "unlock"
            }
          },
          "go-type" : 86,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 1125,
      "code" : "unlock(&h.lock)",
      "entry" : false,
      "use-vars" : [ 0 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 1126,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 249,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Nil",
            "kind" : "ident",
            "value" : "nil"
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 1126,
      "code" : "return nil",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ 15, 14 ],
      "successors" : [ 24 ],
      "in-vars" : [ 7, 11, 3, 0, 1, 2, 8, 13, 10, 5, 6, 12, 4, 9 ],
      "exit" : false,
      "out-vars" : [ 3, 8, 9, 11, 4, 13, 5, 6, 7, 15, 14, 12, 10, 2, 0, 1 ],
      "decl-vars" : [ ],
      "line-start" : 1128,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 2,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "base",
            "variable" : 15
          }
        }, {
          "go-type" : 2,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "scav",
            "variable" : 14
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "npages",
              "variable" : 1
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "function" : 10,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "alloc"
            },
            "go-type" : 264,
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "pages",
                "variable" : 22
              },
              "go-type" : 32,
              "kind" : "expression",
              "target" : {
                "go-type" : 29,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "h",
                  "variable" : 0
                }
              },
              "type" : "selector"
            },
            "type" : "selector"
          },
          "go-type" : 263,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 14, 15 ],
      "line-end" : 1128,
      "code" : "base, scav = h.pages.alloc(npages)",
      "entry" : false,
      "use-vars" : [ 1, 0 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 25, 26 ],
      "in-vars" : [ 9, 10, 1, 6, 8, 4, 2, 11, 12, 3, 5, 0, 14, 7, 13, 15 ],
      "exit" : false,
      "out-vars" : [ 6, 2, 3, 9, 1, 15, 14, 8, 5, 0, 7, 12, 11, 4, 13, 10 ],
      "decl-vars" : [ ],
      "line-start" : 1129,
      "ast" : {
        "condition" : {
          "go-type" : 248,
          "kind" : "expression",
          "left" : {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "base",
              "variable" : 15
            }
          },
          "operator" : "==",
          "right" : {
            "go-type" : 2,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 1131,
      "code" : "if base == 0 {\n\tthrow(\"grew heap, but no adequate free space found\")\n}",
      "entry" : false,
      "use-vars" : [ 15 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 26 ],
      "in-vars" : [ 2, 3, 0, 6, 12, 1, 7, 4, 13, 10, 5, 15, 14, 8, 11, 9 ],
      "exit" : false,
      "out-vars" : [ 3, 6, 7, 11, 2, 5, 1, 14, 8, 10, 4, 9, 15, 0, 12, 13 ],
      "decl-vars" : [ ],
      "line-start" : 1130,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 152,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "grew heap, but no adequate free space found"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 267,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 12,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "throw"
            }
          },
          "go-type" : 86,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 1130,
      "code" : "throw(\"grew heap, but no adequate free space found\")",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 27, 28 ],
      "in-vars" : [ 13, 10, 12, 5, 7, 8, 0, 15, 14, 4, 9, 2, 3, 1, 6, 11 ],
      "exit" : false,
      "out-vars" : [ 7, 9, 10, 0, 1, 12, 3, 6, 8, 4, 13, 5, 15, 2, 14, 11 ],
      "decl-vars" : [ ],
      "line-start" : 1134,
      "ast" : {
        "condition" : {
          "go-type" : 248,
          "kind" : "expression",
          "left" : {
            "go-type" : 9,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "s",
              "variable" : 5
            }
          },
          "operator" : "==",
          "right" : {
            "go-type" : 249,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Nil",
              "kind" : "ident",
              "value" : "nil"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 1138,
      "code" : "if s == nil {\n\n\ts = h.allocMSpanLocked()\n}",
      "entry" : false,
      "use-vars" : [ 5 ]
    }, {
      "update-vars" : [ 5 ],
      "successors" : [ 28 ],
      "in-vars" : [ 10, 1, 6, 8, 12, 11, 3, 7, 9, 0, 14, 13, 2, 15, 4 ],
      "exit" : false,
      "out-vars" : [ 13, 10, 0, 14, 1, 11, 9, 2, 15, 7, 8, 12, 3, 5, 6, 4 ],
      "decl-vars" : [ ],
      "line-start" : 1137,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 9,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "s",
            "variable" : 5
          }
        } ],
        "right" : [ {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "function" : 13,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "allocMSpanLocked"
            },
            "go-type" : 259,
            "kind" : "expression",
            "target" : {
              "go-type" : 29,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "h",
                "variable" : 0
              }
            },
            "type" : "selector"
          },
          "go-type" : 9,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 5 ],
      "line-end" : 1137,
      "code" : "s = h.allocMSpanLocked()",
      "entry" : false,
      "use-vars" : [ 0 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 29, 39 ],
      "in-vars" : [ 13, 3, 2, 15, 14, 7, 4, 0, 6, 9, 10, 5, 1, 8, 12, 11 ],
      "exit" : false,
      "out-vars" : [ 7, 5, 14, 4, 2, 0, 11, 9, 10, 12, 1, 15, 6, 8, 13, 3 ],
      "decl-vars" : [ ],
      "line-start" : 1139,
      "ast" : {
        "condition" : {
          "go-type" : 3,
          "kind" : "expression",
          "operator" : "!",
          "target" : {
            "go-type" : 3,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "manual",
              "variable" : 2
            }
          },
          "type" : "unary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 1160,
      "code" : "if !manual {\n\n\tmemstats.heap_scan += uint64(gp.m.mcache.local_scan)\n\tgp.m.mcache.local_scan = 0\n\tmemstats.tinyallocs += uint64(gp.m.mcache.local_tinyallocs)\n\tgp.m.mcache.local_tinyallocs = 0\n\n\tif spanclass.sizeclass() == 0 {\n\t\tmheap_.largealloc += uint64(npages * pageSize)\n\t\tmheap_.nlargealloc++\n\t\tatomic.Xadd64(&memstats.heap_live, int64(npages*pageSize))\n\t}\n\n\tif gcBlackenEnabled != 0 {\n\t\tgcController.revise()\n\t}\n}",
      "entry" : false,
      "use-vars" : [ 2 ]
    }, {
      "update-vars" : [ 6 ],
      "successors" : [ 30 ],
      "in-vars" : [ 13, 2, 14, 3, 6, 12, 10, 0, 1, 15, 8, 11, 4, 5, 7, 9 ],
      "exit" : false,
      "out-vars" : [ 10, 0, 1, 15, 7, 13, 14, 6, 2, 4, 9, 3, 5, 8, 12, 11 ],
      "decl-vars" : [ ],
      "line-start" : 1144,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "heap_scan",
            "variable" : 23
          },
          "go-type" : 7,
          "kind" : "expression",
          "target" : {
            "go-type" : 110,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "memstats",
              "variable" : 6
            }
          },
          "type" : "selector"
        } ],
        "operator" : "+",
        "right" : [ {
          "coerced-to" : {
            "go-type" : 7,
            "kind" : "type",
            "type" : "identifier",
            "value" : {
              "go-type" : 7,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "uint64"
            }
          },
          "go-type" : 7,
          "kind" : "expression",
          "target" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "local_scan",
              "variable" : 25
            },
            "go-type" : 2,
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "mcache",
                "variable" : 24
              },
              "go-type" : 159,
              "kind" : "expression",
              "target" : {
                "field" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "m",
                  "variable" : 16
                },
                "go-type" : 138,
                "kind" : "expression",
                "target" : {
                  "go-type" : 126,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "gp",
                    "variable" : 13
                  }
                },
                "type" : "selector"
              },
              "type" : "selector"
            },
            "type" : "selector"
          },
          "type" : "cast"
        } ],
        "type" : "assign-operator"
      },
      "assign-vars" : [ ],
      "line-end" : 1144,
      "code" : "memstats.heap_scan += uint64(gp.m.mcache.local_scan)",
      "entry" : false,
      "use-vars" : [ 6, 13 ]
    }, {
      "update-vars" : [ 13 ],
      "successors" : [ 31 ],
      "in-vars" : [ 0, 7, 8, 11, 9, 13, 1, 10, 15, 2, 3, 5, 14, 6, 12, 4 ],
      "exit" : false,
      "out-vars" : [ 3, 0, 14, 6, 8, 12, 11, 9, 13, 10, 5, 1, 15, 2, 7, 4 ],
      "decl-vars" : [ ],
      "line-start" : 1145,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "local_scan",
            "variable" : 25
          },
          "go-type" : 2,
          "kind" : "expression",
          "target" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "mcache",
              "variable" : 24
            },
            "go-type" : 159,
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "m",
                "variable" : 16
              },
              "go-type" : 138,
              "kind" : "expression",
              "target" : {
                "go-type" : 126,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "gp",
                  "variable" : 13
                }
              },
              "type" : "selector"
            },
            "type" : "selector"
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "go-type" : 2,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "0"
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 1145,
      "code" : "gp.m.mcache.local_scan = 0",
      "entry" : false,
      "use-vars" : [ 13 ]
    }, {
      "update-vars" : [ 6 ],
      "successors" : [ 32 ],
      "in-vars" : [ 0, 7, 8, 11, 4, 9, 13, 10, 15, 12, 2, 3, 5, 1, 14, 6 ],
      "exit" : false,
      "out-vars" : [ 5, 0, 7, 8, 11, 10, 6, 12, 9, 3, 1, 15, 14, 2, 4, 13 ],
      "decl-vars" : [ ],
      "line-start" : 1146,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "tinyallocs",
            "variable" : 26
          },
          "go-type" : 7,
          "kind" : "expression",
          "target" : {
            "go-type" : 110,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "memstats",
              "variable" : 6
            }
          },
          "type" : "selector"
        } ],
        "operator" : "+",
        "right" : [ {
          "coerced-to" : {
            "go-type" : 7,
            "kind" : "type",
            "type" : "identifier",
            "value" : {
              "go-type" : 7,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "uint64"
            }
          },
          "go-type" : 7,
          "kind" : "expression",
          "target" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "local_tinyallocs",
              "variable" : 27
            },
            "go-type" : 2,
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "mcache",
                "variable" : 24
              },
              "go-type" : 159,
              "kind" : "expression",
              "target" : {
                "field" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "m",
                  "variable" : 16
                },
                "go-type" : 138,
                "kind" : "expression",
                "target" : {
                  "go-type" : 126,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "gp",
                    "variable" : 13
                  }
                },
                "type" : "selector"
              },
              "type" : "selector"
            },
            "type" : "selector"
          },
          "type" : "cast"
        } ],
        "type" : "assign-operator"
      },
      "assign-vars" : [ ],
      "line-end" : 1146,
      "code" : "memstats.tinyallocs += uint64(gp.m.mcache.local_tinyallocs)",
      "entry" : false,
      "use-vars" : [ 6, 13 ]
    }, {
      "update-vars" : [ 13 ],
      "successors" : [ 33 ],
      "in-vars" : [ 15, 14, 8, 4, 2, 5, 3, 6, 9, 0, 10, 1, 7, 12, 11, 13 ],
      "exit" : false,
      "out-vars" : [ 8, 12, 4, 10, 0, 1, 6, 7, 9, 3, 15, 14, 5, 11, 2 ],
      "decl-vars" : [ ],
      "line-start" : 1147,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "local_tinyallocs",
            "variable" : 27
          },
          "go-type" : 2,
          "kind" : "expression",
          "target" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "mcache",
              "variable" : 24
            },
            "go-type" : 159,
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "m",
                "variable" : 16
              },
              "go-type" : 138,
              "kind" : "expression",
              "target" : {
                "go-type" : 126,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "gp",
                  "variable" : 13
                }
              },
              "type" : "selector"
            },
            "type" : "selector"
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "go-type" : 2,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "0"
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 1147,
      "code" : "gp.m.mcache.local_tinyallocs = 0",
      "entry" : false,
      "use-vars" : [ 13 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 34, 37 ],
      "in-vars" : [ 12, 4, 3, 14, 7, 10, 0, 15, 9, 6, 8, 11, 2, 5, 1 ],
      "exit" : false,
      "out-vars" : [ 3, 12, 11, 5, 7, 10, 2, 0, 15, 6, 8, 4, 9, 1, 14 ],
      "decl-vars" : [ ],
      "line-start" : 1150,
      "ast" : {
        "condition" : {
          "go-type" : 248,
          "kind" : "expression",
          "left" : {
            "arguments" : [ ],
            "ellipsis" : false,
            "function" : {
              "field" : {
                "function" : 9,
                "ident-kind" : "Func",
                "kind" : "ident",
                "value" : "sizeclass"
              },
              "go-type" : 261,
              "kind" : "expression",
              "target" : {
                "go-type" : 4,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "spanclass",
                  "variable" : 3
                }
              },
              "type" : "selector"
            },
            "go-type" : 153,
            "kind" : "expression",
            "type" : "call"
          },
          "operator" : "==",
          "right" : {
            "go-type" : 153,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 1154,
      "code" : "if spanclass.sizeclass() == 0 {\n\tmheap_.largealloc += uint64(npages * pageSize)\n\tmheap_.nlargealloc++\n\tatomic.Xadd64(&memstats.heap_live, int64(npages*pageSize))\n}",
      "entry" : false,
      "use-vars" : [ 3 ]
    }, {
      "update-vars" : [ 11 ],
      "successors" : [ 35 ],
      "in-vars" : [ 14, 4, 10, 5, 1, 7, 8, 2, 6, 11, 9, 15, 0, 12, 3 ],
      "exit" : false,
      "out-vars" : [ 10, 6, 7, 8, 11, 2, 15, 14, 4, 9, 3, 5, 0, 1, 12 ],
      "decl-vars" : [ ],
      "line-start" : 1151,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "largealloc",
            "variable" : 28
          },
          "go-type" : 7,
          "kind" : "expression",
          "target" : {
            "go-type" : 30,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "mheap_",
              "variable" : 11
            }
          },
          "type" : "selector"
        } ],
        "operator" : "+",
        "right" : [ {
          "coerced-to" : {
            "go-type" : 7,
            "kind" : "type",
            "type" : "identifier",
            "value" : {
              "go-type" : 7,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "uint64"
            }
          },
          "go-type" : 7,
          "kind" : "expression",
          "target" : {
            "go-type" : 2,
            "kind" : "expression",
            "left" : {
              "go-type" : 2,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "npages",
                "variable" : 1
              }
            },
            "operator" : "*",
            "right" : {
              "go-type" : 2,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "8192"
              }
            },
            "type" : "binary"
          },
          "type" : "cast"
        } ],
        "type" : "assign-operator"
      },
      "assign-vars" : [ ],
      "line-end" : 1151,
      "code" : "mheap_.largealloc += uint64(npages * pageSize)",
      "entry" : false,
      "use-vars" : [ 1, 11 ]
    }, {
      "update-vars" : [ 11 ],
      "successors" : [ 36 ],
      "in-vars" : [ 1, 15, 7, 11, 3, 5, 0, 8, 4, 9, 10, 12, 2, 14, 6 ],
      "exit" : false,
      "out-vars" : [ 3, 14, 7, 8, 10, 15, 9, 1, 5, 0, 6, 12, 4, 2 ],
      "decl-vars" : [ ],
      "line-start" : 1152,
      "ast" : {
        "kind" : "statement",
        "operation" : "++",
        "target" : {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "nlargealloc",
            "variable" : 29
          },
          "go-type" : 7,
          "kind" : "expression",
          "target" : {
            "go-type" : 30,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "mheap_",
              "variable" : 11
            }
          },
          "type" : "selector"
        },
        "type" : "crement"
      },
      "assign-vars" : [ ],
      "line-end" : 1152,
      "code" : "mheap_.nlargealloc++",
      "entry" : false,
      "use-vars" : [ 11 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 37 ],
      "in-vars" : [ 10, 2, 3, 15, 9, 5, 14, 6, 4, 1, 7, 0, 8, 12 ],
      "exit" : false,
      "out-vars" : [ 0, 15, 7, 12, 5, 1, 6, 10, 8, 2, 14, 4, 9, 3 ],
      "decl-vars" : [ ],
      "line-start" : 1153,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 6,
            "kind" : "expression",
            "operator" : "&",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "heap_live",
                "variable" : 30
              },
              "go-type" : 7,
              "kind" : "expression",
              "target" : {
                "go-type" : 110,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "memstats",
                  "variable" : 6
                }
              },
              "type" : "selector"
            },
            "type" : "unary"
          }, {
            "coerced-to" : {
              "go-type" : 121,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 121,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "int64"
              }
            },
            "go-type" : 121,
            "kind" : "expression",
            "target" : {
              "go-type" : 2,
              "kind" : "expression",
              "left" : {
                "go-type" : 2,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "npages",
                  "variable" : 1
                }
              },
              "operator" : "*",
              "right" : {
                "go-type" : 2,
                "kind" : "constant",
                "value" : {
                  "type" : "INT",
                  "value" : "8192"
                }
              },
              "type" : "binary"
            },
            "type" : "cast"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 269,
            "kind" : "expression",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 4,
              "value" : "atomic"
            },
            "type" : "identifier",
            "value" : {
              "function" : 14,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "Xadd64"
            }
          },
          "go-type" : 7,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 1153,
      "code" : "atomic.Xadd64(&memstats.heap_live, int64(npages*pageSize))",
      "entry" : false,
      "use-vars" : [ 1, 6 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 38, 39 ],
      "in-vars" : [ 10, 4, 3, 5, 12, 15, 6, 7, 9, 2, 0, 1, 14, 8 ],
      "exit" : false,
      "out-vars" : [ 8, 12, 2, 5, 0, 15, 14, 7, 4, 3, 1, 6, 9 ],
      "decl-vars" : [ ],
      "line-start" : 1157,
      "ast" : {
        "condition" : {
          "go-type" : 248,
          "kind" : "expression",
          "left" : {
            "go-type" : 18,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "gcBlackenEnabled",
              "variable" : 10
            }
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 18,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 1159,
      "code" : "if gcBlackenEnabled != 0 {\n\tgcController.revise()\n}",
      "entry" : false,
      "use-vars" : [ 10 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 39 ],
      "in-vars" : [ 8, 4, 9, 0, 15, 6, 7, 14, 12, 2, 3, 5, 1 ],
      "exit" : false,
      "out-vars" : [ 3, 5, 0, 7, 12, 8, 4, 2, 1, 15, 14, 6 ],
      "decl-vars" : [ ],
      "line-start" : 1158,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "function" : 15,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "revise"
            },
            "go-type" : 150,
            "kind" : "expression",
            "target" : {
              "go-type" : 119,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "gcController",
                "variable" : 9
              }
            },
            "type" : "selector"
          },
          "go-type" : 86,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 1158,
      "code" : "gcController.revise()",
      "entry" : false,
      "use-vars" : [ 9 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 40 ],
      "in-vars" : [ 6, 7, 12, 2, 5, 0, 1, 15, 4, 3, 14, 8 ],
      "exit" : false,
      "out-vars" : [ 3, 5, 0, 7, 8, 4, 2, 1, 15, 14, 6, 12 ],
      "decl-vars" : [ ],
      "line-start" : 1161,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 52,
            "kind" : "expression",
            "operator" : "&",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "lock",
                "variable" : 21
              },
              "go-type" : 23,
              "kind" : "expression",
              "target" : {
                "go-type" : 29,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "h",
                  "variable" : 0
                }
              },
              "type" : "selector"
            },
            "type" : "unary"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 252,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 6,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "unlock"
            }
          },
          "go-type" : 86,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 1161,
      "code" : "unlock(&h.lock)",
      "entry" : false,
      "use-vars" : [ 0 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 41 ],
      "in-vars" : [ 1, 6, 8, 2, 5, 0, 15, 14, 7, 12, 4, 3 ],
      "exit" : false,
      "out-vars" : [ 5, 0, 1, 4, 7, 8, 12, 2, 3, 15, 14, 6 ],
      "decl-vars" : [ ],
      "line-start" : 1163,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "base",
              "variable" : 15
            }
          }, {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "npages",
              "variable" : 1
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "function" : 16,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "init"
            },
            "go-type" : 272,
            "kind" : "expression",
            "target" : {
              "go-type" : 9,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "s",
                "variable" : 5
              }
            },
            "type" : "selector"
          },
          "go-type" : 86,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 1166,
      "code" : "HaveSpan:\n\n\ts.init(base, npages)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 42 ],
      "in-vars" : [ 14, 6, 7, 12, 3, 1, 15, 8, 4, 2, 5, 0 ],
      "exit" : false,
      "out-vars" : [ 3, 5, 1, 4, 12, 2, 0, 15, 14, 6, 7, 8 ],
      "decl-vars" : [ ],
      "line-start" : 1166,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "base",
              "variable" : 15
            }
          }, {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "npages",
              "variable" : 1
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "function" : 16,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "init"
            },
            "go-type" : 272,
            "kind" : "expression",
            "target" : {
              "go-type" : 9,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "s",
                "variable" : 5
              }
            },
            "type" : "selector"
          },
          "go-type" : 86,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 1166,
      "code" : "s.init(base, npages)",
      "entry" : false,
      "use-vars" : [ 1, 5, 15 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 43, 44 ],
      "in-vars" : [ 1, 7, 12, 4, 2, 3, 5, 0, 15, 14, 6, 8 ],
      "exit" : false,
      "out-vars" : [ 15, 14, 6, 8, 4, 3, 5, 0, 1, 7, 12, 2 ],
      "decl-vars" : [ ],
      "line-start" : 1167,
      "ast" : {
        "condition" : {
          "arguments" : [ {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "base",
              "variable" : 15
            }
          }, {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "npages",
              "variable" : 1
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "function" : 17,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "allocNeedsZero"
            },
            "go-type" : 274,
            "kind" : "expression",
            "target" : {
              "go-type" : 29,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "h",
                "variable" : 0
              }
            },
            "type" : "selector"
          },
          "go-type" : 3,
          "kind" : "expression",
          "type" : "call"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 1169,
      "code" : "if h.allocNeedsZero(base, npages) {\n\ts.needzero = 1\n}",
      "entry" : false,
      "use-vars" : [ 0, 15, 1 ]
    }, {
      "update-vars" : [ 5 ],
      "successors" : [ 44 ],
      "in-vars" : [ 6, 7, 8, 12, 5, 14, 0, 1, 15, 4, 2, 3 ],
      "exit" : false,
      "out-vars" : [ 3, 5, 0, 1, 15, 7, 8, 2, 4, 12, 6, 14 ],
      "decl-vars" : [ ],
      "line-start" : 1168,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "needzero",
            "variable" : 31
          },
          "go-type" : 5,
          "kind" : "expression",
          "target" : {
            "go-type" : 9,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "s",
              "variable" : 5
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "go-type" : 5,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "1"
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 1168,
      "code" : "s.needzero = 1",
      "entry" : false,
      "use-vars" : [ 5 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 45 ],
      "in-vars" : [ 0, 15, 6, 8, 4, 2, 3, 14, 7, 12, 5, 1 ],
      "exit" : false,
      "out-vars" : [ 7, 8, 12, 0, 1, 15, 14, 32, 2, 3, 5, 6, 4 ],
      "decl-vars" : [ 32 ],
      "line-start" : 1170,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "nbytes"
          }
        } ],
        "right" : [ {
          "go-type" : 2,
          "kind" : "expression",
          "left" : {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "npages",
              "variable" : 1
            }
          },
          "operator" : "*",
          "right" : {
            "go-type" : 2,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "8192"
            }
          },
          "type" : "binary"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 1170,
      "code" : "nbytes := npages * pageSize",
      "entry" : false,
      "use-vars" : [ 1 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 46, 51 ],
      "in-vars" : [ 32, 8, 12, 4, 3, 14, 0, 1, 15, 6, 7, 2, 5 ],
      "exit" : false,
      "out-vars" : [ 12, 4, 15, 32, 7, 0, 1, 14, 6, 8, 2, 3, 5 ],
      "decl-vars" : [ ],
      "line-start" : 1171,
      "ast" : {
        "condition" : {
          "go-type" : 3,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "manual",
            "variable" : 2
          }
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 1223,
      "code" : "if manual {\n\ts.manualFreeList = 0\n\ts.nelems = 0\n\ts.limit = s.base() + s.npages*pageSize\n\n\tmSysStatDec(&memstats.heap_sys, s.npages*pageSize)\n\ts.state.set(mSpanManual)\n} else {\n\n\ts.spanclass = spanclass\n\tif sizeclass := spanclass.sizeclass(); sizeclass == 0 {\n\t\ts.elemsize = nbytes\n\t\ts.nelems = 1\n\n\t\ts.divShift = 0\n\t\ts.divMul = 0\n\t\ts.divShift2 = 0\n\t\ts.baseMask = 0\n\t} else {\n\t\ts.elemsize = uintptr(class_to_size[sizeclass])\n\t\ts.nelems = nbytes / s.elemsize\n\n\t\tm := &class_to_divmagic[sizeclass]\n\t\ts.divShift = m.shift\n\t\ts.divMul = m.mul\n\t\ts.divShift2 = m.shift2\n\t\ts.baseMask = m.baseMask\n\t}\n\n\ts.freeindex = 0\n\ts.allocCache = ^uint64(0)\n\ts.gcmarkBits = newMarkBits(s.nelems)\n\ts.allocBits = newAllocBits(s.nelems)\n\n\tatomic.Store(&s.sweepgen, h.sweepgen)\n\n\ts.state.set(mSpanInUse)\n}",
      "entry" : false,
      "use-vars" : [ 2 ]
    }, {
      "update-vars" : [ 5 ],
      "successors" : [ 47 ],
      "in-vars" : [ 32, 2, 5, 0, 1, 15, 14, 6, 12, 4 ],
      "exit" : false,
      "out-vars" : [ 5, 1, 6, 12, 32, 4, 2, 0, 15, 14 ],
      "decl-vars" : [ ],
      "line-start" : 1172,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "manualFreeList",
            "variable" : 33
          },
          "go-type" : 15,
          "kind" : "expression",
          "target" : {
            "go-type" : 9,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "s",
              "variable" : 5
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "go-type" : 15,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "0"
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 1172,
      "code" : "s.manualFreeList = 0",
      "entry" : false,
      "use-vars" : [ 5 ]
    }, {
      "update-vars" : [ 5 ],
      "successors" : [ 48 ],
      "in-vars" : [ 32, 2, 5, 6, 14, 12, 4, 0, 1, 15 ],
      "exit" : false,
      "out-vars" : [ 4, 2, 0, 1, 15, 14, 32, 5, 6, 12 ],
      "decl-vars" : [ ],
      "line-start" : 1173,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "nelems",
            "variable" : 34
          },
          "go-type" : 2,
          "kind" : "expression",
          "target" : {
            "go-type" : 9,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "s",
              "variable" : 5
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "go-type" : 2,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "0"
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 1173,
      "code" : "s.nelems = 0",
      "entry" : false,
      "use-vars" : [ 5 ]
    }, {
      "update-vars" : [ 5 ],
      "successors" : [ 49 ],
      "in-vars" : [ 6, 2, 5, 1, 32, 12, 4, 0, 15, 14 ],
      "exit" : false,
      "out-vars" : [ 2, 5, 0, 14, 1, 15, 6, 32, 12, 4 ],
      "decl-vars" : [ ],
      "line-start" : 1174,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "limit",
            "variable" : 35
          },
          "go-type" : 2,
          "kind" : "expression",
          "target" : {
            "go-type" : 9,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "s",
              "variable" : 5
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "go-type" : 2,
          "kind" : "expression",
          "left" : {
            "arguments" : [ ],
            "ellipsis" : false,
            "function" : {
              "field" : {
                "function" : 18,
                "ident-kind" : "Func",
                "kind" : "ident",
                "value" : "base"
              },
              "go-type" : 277,
              "kind" : "expression",
              "target" : {
                "go-type" : 9,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "s",
                  "variable" : 5
                }
              },
              "type" : "selector"
            },
            "go-type" : 2,
            "kind" : "expression",
            "type" : "call"
          },
          "operator" : "+",
          "right" : {
            "go-type" : 2,
            "kind" : "expression",
            "left" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "npages",
                "variable" : 36
              },
              "go-type" : 2,
              "kind" : "expression",
              "target" : {
                "go-type" : 9,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "s",
                  "variable" : 5
                }
              },
              "type" : "selector"
            },
            "operator" : "*",
            "right" : {
              "go-type" : 2,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "8192"
              }
            },
            "type" : "binary"
          },
          "type" : "binary"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 1174,
      "code" : "s.limit = s.base() + s.npages*pageSize",
      "entry" : false,
      "use-vars" : [ 5 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 50 ],
      "in-vars" : [ 2, 1, 15, 4, 5, 0, 14, 6, 32, 12 ],
      "exit" : false,
      "out-vars" : [ 4, 0, 14, 1, 15, 6, 32, 12, 2, 5 ],
      "decl-vars" : [ ],
      "line-start" : 1176,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 6,
            "kind" : "expression",
            "operator" : "&",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "heap_sys",
                "variable" : 37
              },
              "go-type" : 7,
              "kind" : "expression",
              "target" : {
                "go-type" : 110,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "memstats",
                  "variable" : 6
                }
              },
              "type" : "selector"
            },
            "type" : "unary"
          }, {
            "go-type" : 2,
            "kind" : "expression",
            "left" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "npages",
                "variable" : 36
              },
              "go-type" : 2,
              "kind" : "expression",
              "target" : {
                "go-type" : 9,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "s",
                  "variable" : 5
                }
              },
              "type" : "selector"
            },
            "operator" : "*",
            "right" : {
              "go-type" : 2,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "8192"
              }
            },
            "type" : "binary"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 279,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 19,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "mSysStatDec"
            }
          },
          "go-type" : 86,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 1176,
      "code" : "mSysStatDec(&memstats.heap_sys, s.npages*pageSize)",
      "entry" : false,
      "use-vars" : [ 5, 6 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 73 ],
      "in-vars" : [ 2, 5, 0, 1, 15, 32, 4, 14, 6, 12 ],
      "exit" : false,
      "out-vars" : [ 12, 4, 0, 1, 6, 14, 32, 2, 5, 15 ],
      "decl-vars" : [ ],
      "line-start" : 1177,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 22,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "2"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "function" : 20,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "set"
            },
            "go-type" : 281,
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "state",
                "variable" : 38
              },
              "go-type" : 20,
              "kind" : "expression",
              "target" : {
                "go-type" : 9,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "s",
                  "variable" : 5
                }
              },
              "type" : "selector"
            },
            "type" : "selector"
          },
          "go-type" : 86,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 1177,
      "code" : "s.state.set(mSpanManual)",
      "entry" : false,
      "use-vars" : [ 5 ]
    }, {
      "update-vars" : [ 5 ],
      "successors" : [ 53 ],
      "in-vars" : [ 5, 0, 7, 8, 4, 2, 1, 15, 14, 6, 32, 12, 3 ],
      "exit" : false,
      "out-vars" : [ 6, 32, 7, 12, 4, 3, 1, 15, 14, 8, 2, 5, 0 ],
      "decl-vars" : [ ],
      "line-start" : 1181,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "spanclass",
            "variable" : 39
          },
          "go-type" : 4,
          "kind" : "expression",
          "target" : {
            "go-type" : 9,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "s",
              "variable" : 5
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "go-type" : 4,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "spanclass",
            "variable" : 3
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 1181,
      "code" : "s.spanclass = spanclass",
      "entry" : false,
      "use-vars" : [ 3, 5 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 54, 60 ],
      "in-vars" : [ 12, 2, 5, 6, 32, 8, 7, 4, 0, 1, 15, 14, 40 ],
      "exit" : false,
      "out-vars" : [ 40, 32, 7, 8, 2, 0, 1, 15, 12, 4, 5, 14, 6 ],
      "decl-vars" : [ ],
      "line-start" : 1182,
      "ast" : {
        "condition" : {
          "go-type" : 248,
          "kind" : "expression",
          "left" : {
            "go-type" : 153,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "sizeclass",
              "variable" : 40
            }
          },
          "operator" : "==",
          "right" : {
            "go-type" : 153,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 1199,
      "code" : "if sizeclass := spanclass.sizeclass(); sizeclass == 0 {\n\ts.elemsize = nbytes\n\ts.nelems = 1\n\n\ts.divShift = 0\n\ts.divMul = 0\n\ts.divShift2 = 0\n\ts.baseMask = 0\n} else {\n\ts.elemsize = uintptr(class_to_size[sizeclass])\n\ts.nelems = nbytes / s.elemsize\n\n\tm := &class_to_divmagic[sizeclass]\n\ts.divShift = m.shift\n\ts.divMul = m.mul\n\ts.divShift2 = m.shift2\n\ts.baseMask = m.baseMask\n}",
      "entry" : false,
      "use-vars" : [ 40 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 52 ],
      "in-vars" : [ 2, 3, 1, 15, 6, 32, 8, 12, 5, 0, 14, 7, 4 ],
      "exit" : false,
      "out-vars" : [ 2, 5, 1, 14, 8, 12, 4, 0, 15, 6, 40, 32, 7 ],
      "decl-vars" : [ 40 ],
      "line-start" : 1182,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "sizeclass"
          }
        } ],
        "right" : [ {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "function" : 9,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "sizeclass"
            },
            "go-type" : 261,
            "kind" : "expression",
            "target" : {
              "go-type" : 4,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "spanclass",
                "variable" : 3
              }
            },
            "type" : "selector"
          },
          "go-type" : 153,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 1182,
      "code" : "sizeclass := spanclass.sizeclass()",
      "entry" : false,
      "use-vars" : [ 3 ]
    }, {
      "update-vars" : [ 5 ],
      "successors" : [ 55 ],
      "in-vars" : [ 2, 0, 14, 6, 12, 4, 5, 1, 15, 32 ],
      "exit" : false,
      "out-vars" : [ 2, 1, 15, 12, 5, 0, 14, 6, 32, 4 ],
      "decl-vars" : [ ],
      "line-start" : 1183,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "elemsize",
            "variable" : 41
          },
          "go-type" : 2,
          "kind" : "expression",
          "target" : {
            "go-type" : 9,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "s",
              "variable" : 5
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "go-type" : 2,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "nbytes",
            "variable" : 32
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 1183,
      "code" : "s.elemsize = nbytes",
      "entry" : false,
      "use-vars" : [ 5, 32 ]
    }, {
      "update-vars" : [ 5 ],
      "successors" : [ 56 ],
      "in-vars" : [ 14, 32, 12, 4, 5, 15, 1, 6, 2, 0 ],
      "exit" : false,
      "out-vars" : [ 2, 15, 6, 12, 32, 4, 5, 0, 1, 14 ],
      "decl-vars" : [ ],
      "line-start" : 1184,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "nelems",
            "variable" : 34
          },
          "go-type" : 2,
          "kind" : "expression",
          "target" : {
            "go-type" : 9,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "s",
              "variable" : 5
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "go-type" : 2,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "1"
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 1184,
      "code" : "s.nelems = 1",
      "entry" : false,
      "use-vars" : [ 5 ]
    }, {
      "update-vars" : [ 5 ],
      "successors" : [ 57 ],
      "in-vars" : [ 2, 5, 0, 15, 6, 1, 14, 32, 12, 4 ],
      "exit" : false,
      "out-vars" : [ 1, 15, 14, 32, 4, 2, 5, 0, 6, 12 ],
      "decl-vars" : [ ],
      "line-start" : 1186,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "divShift",
            "variable" : 42
          },
          "go-type" : 5,
          "kind" : "expression",
          "target" : {
            "go-type" : 9,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "s",
              "variable" : 5
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "go-type" : 5,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "0"
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 1186,
      "code" : "s.divShift = 0",
      "entry" : false,
      "use-vars" : [ 5 ]
    }, {
      "update-vars" : [ 5 ],
      "successors" : [ 58 ],
      "in-vars" : [ 2, 5, 0, 6, 4, 1, 15, 14, 32, 12 ],
      "exit" : false,
      "out-vars" : [ 4, 5, 0, 15, 12, 32, 2, 1, 14, 6 ],
      "decl-vars" : [ ],
      "line-start" : 1187,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "divMul",
            "variable" : 43
          },
          "go-type" : 19,
          "kind" : "expression",
          "target" : {
            "go-type" : 9,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "s",
              "variable" : 5
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "go-type" : 19,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "0"
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 1187,
      "code" : "s.divMul = 0",
      "entry" : false,
      "use-vars" : [ 5 ]
    }, {
      "update-vars" : [ 5 ],
      "successors" : [ 59 ],
      "in-vars" : [ 0, 14, 2, 5, 1, 15, 6, 32, 12, 4 ],
      "exit" : false,
      "out-vars" : [ 5, 15, 14, 32, 12, 4, 2, 0, 1, 6 ],
      "decl-vars" : [ ],
      "line-start" : 1188,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "divShift2",
            "variable" : 44
          },
          "go-type" : 5,
          "kind" : "expression",
          "target" : {
            "go-type" : 9,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "s",
              "variable" : 5
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "go-type" : 5,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "0"
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 1188,
      "code" : "s.divShift2 = 0",
      "entry" : false,
      "use-vars" : [ 5 ]
    }, {
      "update-vars" : [ 5 ],
      "successors" : [ 67 ],
      "in-vars" : [ 15, 14, 6, 32, 4, 1, 5, 0, 12, 2 ],
      "exit" : false,
      "out-vars" : [ 4, 5, 15, 6, 32, 12, 2, 0, 1, 14 ],
      "decl-vars" : [ ],
      "line-start" : 1189,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "baseMask",
            "variable" : 45
          },
          "go-type" : 19,
          "kind" : "expression",
          "target" : {
            "go-type" : 9,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "s",
              "variable" : 5
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "go-type" : 19,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "0"
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 1189,
      "code" : "s.baseMask = 0",
      "entry" : false,
      "use-vars" : [ 5 ]
    }, {
      "update-vars" : [ 5 ],
      "successors" : [ 61 ],
      "in-vars" : [ 15, 4, 6, 40, 32, 2, 5, 0, 1, 14, 7, 8, 12 ],
      "exit" : false,
      "out-vars" : [ 14, 40, 7, 4, 2, 5, 0, 15, 1, 6, 32, 12 ],
      "decl-vars" : [ ],
      "line-start" : 1191,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "elemsize",
            "variable" : 41
          },
          "go-type" : 2,
          "kind" : "expression",
          "target" : {
            "go-type" : 9,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "s",
              "variable" : 5
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "coerced-to" : {
            "go-type" : 2,
            "kind" : "type",
            "type" : "identifier",
            "value" : {
              "go-type" : 2,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "uintptr"
            }
          },
          "go-type" : 2,
          "kind" : "expression",
          "target" : {
            "go-type" : 19,
            "index" : {
              "go-type" : 153,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "sizeclass",
                "variable" : 40
              }
            },
            "kind" : "expression",
            "target" : {
              "go-type" : 118,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "class_to_size",
                "variable" : 8
              }
            },
            "type" : "index"
          },
          "type" : "cast"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 1191,
      "code" : "s.elemsize = uintptr(class_to_size[sizeclass])",
      "entry" : false,
      "use-vars" : [ 5, 8, 40 ]
    }, {
      "update-vars" : [ 5 ],
      "successors" : [ 62 ],
      "in-vars" : [ 15, 6, 32, 7, 4, 2, 0, 1, 14, 40, 12, 5 ],
      "exit" : false,
      "out-vars" : [ 14, 12, 4, 2, 5, 0, 15, 7, 1, 6, 40, 32 ],
      "decl-vars" : [ ],
      "line-start" : 1192,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "nelems",
            "variable" : 34
          },
          "go-type" : 2,
          "kind" : "expression",
          "target" : {
            "go-type" : 9,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "s",
              "variable" : 5
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "go-type" : 2,
          "kind" : "expression",
          "left" : {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "nbytes",
              "variable" : 32
            }
          },
          "operator" : "/",
          "right" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "elemsize",
              "variable" : 41
            },
            "go-type" : 2,
            "kind" : "expression",
            "target" : {
              "go-type" : 9,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "s",
                "variable" : 5
              }
            },
            "type" : "selector"
          },
          "type" : "binary"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 1192,
      "code" : "s.nelems = nbytes / s.elemsize",
      "entry" : false,
      "use-vars" : [ 32, 5 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 63 ],
      "in-vars" : [ 0, 1, 14, 32, 7, 12, 4, 5, 15, 6, 40, 2 ],
      "exit" : false,
      "out-vars" : [ 2, 1, 12, 5, 0, 15, 14, 6, 46, 32, 4 ],
      "decl-vars" : [ 46 ],
      "line-start" : 1194,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "m"
          }
        } ],
        "right" : [ {
          "go-type" : 283,
          "kind" : "expression",
          "operator" : "&",
          "target" : {
            "go-type" : 116,
            "index" : {
              "go-type" : 153,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "sizeclass",
                "variable" : 40
              }
            },
            "kind" : "expression",
            "target" : {
              "go-type" : 115,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "class_to_divmagic",
                "variable" : 7
              }
            },
            "type" : "index"
          },
          "type" : "unary"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 1194,
      "code" : "m := &class_to_divmagic[sizeclass]",
      "entry" : false,
      "use-vars" : [ 40, 7 ]
    }, {
      "update-vars" : [ 5 ],
      "successors" : [ 64 ],
      "in-vars" : [ 0, 1, 4, 2, 15, 14, 6, 46, 32, 12, 5 ],
      "exit" : false,
      "out-vars" : [ 5, 0, 14, 6, 32, 2, 1, 15, 46, 12, 4 ],
      "decl-vars" : [ ],
      "line-start" : 1195,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "divShift",
            "variable" : 42
          },
          "go-type" : 5,
          "kind" : "expression",
          "target" : {
            "go-type" : 9,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "s",
              "variable" : 5
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "shift",
            "variable" : 47
          },
          "go-type" : 5,
          "kind" : "expression",
          "target" : {
            "go-type" : 283,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "m",
              "variable" : 46
            }
          },
          "type" : "selector"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 1195,
      "code" : "s.divShift = m.shift",
      "entry" : false,
      "use-vars" : [ 46, 5 ]
    }, {
      "update-vars" : [ 5 ],
      "successors" : [ 65 ],
      "in-vars" : [ 14, 32, 12, 0, 15, 1, 6, 46, 4, 2, 5 ],
      "exit" : false,
      "out-vars" : [ 6, 46, 12, 4, 5, 15, 14, 32, 2, 0, 1 ],
      "decl-vars" : [ ],
      "line-start" : 1196,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "divMul",
            "variable" : 43
          },
          "go-type" : 19,
          "kind" : "expression",
          "target" : {
            "go-type" : 9,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "s",
              "variable" : 5
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "mul",
            "variable" : 48
          },
          "go-type" : 19,
          "kind" : "expression",
          "target" : {
            "go-type" : 283,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "m",
              "variable" : 46
            }
          },
          "type" : "selector"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 1196,
      "code" : "s.divMul = m.mul",
      "entry" : false,
      "use-vars" : [ 46, 5 ]
    }, {
      "update-vars" : [ 5 ],
      "successors" : [ 66 ],
      "in-vars" : [ 1, 15, 6, 46, 12, 2, 0, 32, 4, 5, 14 ],
      "exit" : false,
      "out-vars" : [ 4, 14, 32, 12, 1, 15, 6, 46, 2, 5, 0 ],
      "decl-vars" : [ ],
      "line-start" : 1197,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "divShift2",
            "variable" : 44
          },
          "go-type" : 5,
          "kind" : "expression",
          "target" : {
            "go-type" : 9,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "s",
              "variable" : 5
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "shift2",
            "variable" : 49
          },
          "go-type" : 5,
          "kind" : "expression",
          "target" : {
            "go-type" : 283,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "m",
              "variable" : 46
            }
          },
          "type" : "selector"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 1197,
      "code" : "s.divShift2 = m.shift2",
      "entry" : false,
      "use-vars" : [ 5, 46 ]
    }, {
      "update-vars" : [ 5 ],
      "successors" : [ 67 ],
      "in-vars" : [ 5, 14, 32, 12, 2, 0, 1, 15, 6, 46, 4 ],
      "exit" : false,
      "out-vars" : [ 4, 2, 5, 0, 1, 15, 14, 32, 6, 12 ],
      "decl-vars" : [ ],
      "line-start" : 1198,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "baseMask",
            "variable" : 45
          },
          "go-type" : 19,
          "kind" : "expression",
          "target" : {
            "go-type" : 9,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "s",
              "variable" : 5
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "baseMask",
            "variable" : 50
          },
          "go-type" : 19,
          "kind" : "expression",
          "target" : {
            "go-type" : 283,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "m",
              "variable" : 46
            }
          },
          "type" : "selector"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 1198,
      "code" : "s.baseMask = m.baseMask",
      "entry" : false,
      "use-vars" : [ 46, 5 ]
    }, {
      "update-vars" : [ 5 ],
      "successors" : [ 68 ],
      "in-vars" : [ 2, 6, 32, 12, 4, 5, 0, 1, 15, 14 ],
      "exit" : false,
      "out-vars" : [ 14, 12, 2, 5, 0, 1, 15, 6, 32, 4 ],
      "decl-vars" : [ ],
      "line-start" : 1202,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "freeindex",
            "variable" : 51
          },
          "go-type" : 2,
          "kind" : "expression",
          "target" : {
            "go-type" : 9,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "s",
              "variable" : 5
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "go-type" : 2,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "0"
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 1202,
      "code" : "s.freeindex = 0",
      "entry" : false,
      "use-vars" : [ 5 ]
    }, {
      "update-vars" : [ 5 ],
      "successors" : [ 69 ],
      "in-vars" : [ 2, 0, 1, 14, 6, 4, 5, 15, 32, 12 ],
      "exit" : false,
      "out-vars" : [ 15, 6, 12, 4, 0, 5, 1, 14, 32, 2 ],
      "decl-vars" : [ ],
      "line-start" : 1203,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "allocCache",
            "variable" : 52
          },
          "go-type" : 7,
          "kind" : "expression",
          "target" : {
            "go-type" : 9,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "s",
              "variable" : 5
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "go-type" : 7,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "18446744073709551615"
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 1203,
      "code" : "s.allocCache = ^uint64(0)",
      "entry" : false,
      "use-vars" : [ 5 ]
    }, {
      "update-vars" : [ 5 ],
      "successors" : [ 70 ],
      "in-vars" : [ 2, 0, 1, 6, 32, 4, 5, 15, 14, 12 ],
      "exit" : false,
      "out-vars" : [ 32, 12, 4, 2, 5, 14, 6, 0, 1, 15 ],
      "decl-vars" : [ ],
      "line-start" : 1204,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "gcmarkBits",
            "variable" : 53
          },
          "go-type" : 16,
          "kind" : "expression",
          "target" : {
            "go-type" : 9,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "s",
              "variable" : 5
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "arguments" : [ {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "nelems",
              "variable" : 34
            },
            "go-type" : 2,
            "kind" : "expression",
            "target" : {
              "go-type" : 9,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "s",
                "variable" : 5
              }
            },
            "type" : "selector"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 284,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 21,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "newMarkBits"
            }
          },
          "go-type" : 16,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 1204,
      "code" : "s.gcmarkBits = newMarkBits(s.nelems)",
      "entry" : false,
      "use-vars" : [ 5 ]
    }, {
      "update-vars" : [ 5 ],
      "successors" : [ 71 ],
      "in-vars" : [ 2, 5, 1, 32, 12, 4, 0, 15, 14, 6 ],
      "exit" : false,
      "out-vars" : [ 1, 14, 0, 15, 6, 32, 12, 4, 2, 5 ],
      "decl-vars" : [ ],
      "line-start" : 1205,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "allocBits",
            "variable" : 54
          },
          "go-type" : 16,
          "kind" : "expression",
          "target" : {
            "go-type" : 9,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "s",
              "variable" : 5
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "arguments" : [ {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "nelems",
              "variable" : 34
            },
            "go-type" : 2,
            "kind" : "expression",
            "target" : {
              "go-type" : 9,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "s",
                "variable" : 5
              }
            },
            "type" : "selector"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 284,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 22,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "newAllocBits"
            }
          },
          "go-type" : 16,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 1205,
      "code" : "s.allocBits = newAllocBits(s.nelems)",
      "entry" : false,
      "use-vars" : [ 5 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 72 ],
      "in-vars" : [ 15, 32, 4, 5, 0, 14, 6, 12, 2, 1 ],
      "exit" : false,
      "out-vars" : [ 4, 1, 15, 14, 32, 12, 2, 5, 0, 6 ],
      "decl-vars" : [ ],
      "line-start" : 1210,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 289,
            "kind" : "expression",
            "operator" : "&",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "sweepgen",
                "variable" : 55
              },
              "go-type" : 18,
              "kind" : "expression",
              "target" : {
                "go-type" : 9,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "s",
                  "variable" : 5
                }
              },
              "type" : "selector"
            },
            "type" : "unary"
          }, {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "sweepgen",
              "variable" : 56
            },
            "go-type" : 18,
            "kind" : "expression",
            "target" : {
              "go-type" : 29,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "h",
                "variable" : 0
              }
            },
            "type" : "selector"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 287,
            "kind" : "expression",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 4,
              "value" : "atomic"
            },
            "type" : "identifier",
            "value" : {
              "function" : 23,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "Store"
            }
          },
          "go-type" : 86,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 1210,
      "code" : "atomic.Store(&s.sweepgen, h.sweepgen)",
      "entry" : false,
      "use-vars" : [ 5, 0 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 73 ],
      "in-vars" : [ 1, 15, 14, 6, 2, 5, 0, 32, 12, 4 ],
      "exit" : false,
      "out-vars" : [ 2, 5, 15, 32, 12, 0, 1, 14, 6, 4 ],
      "decl-vars" : [ ],
      "line-start" : 1222,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 22,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "1"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "function" : 20,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "set"
            },
            "go-type" : 281,
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "state",
                "variable" : 38
              },
              "go-type" : 20,
              "kind" : "expression",
              "target" : {
                "go-type" : 9,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "s",
                  "variable" : 5
                }
              },
              "type" : "selector"
            },
            "type" : "selector"
          },
          "go-type" : 86,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 1222,
      "code" : "s.state.set(mSpanInUse)",
      "entry" : false,
      "use-vars" : [ 5 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 74, 76 ],
      "in-vars" : [ 15, 12, 2, 5, 0, 1, 14, 6, 32, 4 ],
      "exit" : false,
      "out-vars" : [ 15, 14, 12, 4, 2, 5, 0, 1, 6, 32 ],
      "decl-vars" : [ ],
      "line-start" : 1226,
      "ast" : {
        "condition" : {
          "go-type" : 248,
          "kind" : "expression",
          "left" : {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "scav",
              "variable" : 14
            }
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 2,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 1231,
      "code" : "if scav != 0 {\n\n\tsysUsed(unsafe.Pointer(base), nbytes)\n\tmSysStatDec(&memstats.heap_released, scav)\n}",
      "entry" : false,
      "use-vars" : [ 14 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 75 ],
      "in-vars" : [ 6, 32, 12, 2, 1, 15, 14, 4, 5, 0 ],
      "exit" : false,
      "out-vars" : [ 1, 6, 32, 4, 2, 5, 0, 14, 12 ],
      "decl-vars" : [ ],
      "line-start" : 1229,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "coerced-to" : {
              "go-type" : 57,
              "kind" : "type",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 1,
                "value" : "unsafe"
              },
              "type" : "identifier",
              "value" : {
                "go-type" : 57,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "Pointer"
              }
            },
            "go-type" : 57,
            "kind" : "expression",
            "target" : {
              "go-type" : 2,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "base",
                "variable" : 15
              }
            },
            "type" : "cast"
          }, {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "nbytes",
              "variable" : 32
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 290,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 24,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "sysUsed"
            }
          },
          "go-type" : 86,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 1229,
      "code" : "sysUsed(unsafe.Pointer(base), nbytes)",
      "entry" : false,
      "use-vars" : [ 15, 32 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 76 ],
      "in-vars" : [ 14, 32, 2, 5, 0, 4, 1, 6, 12 ],
      "exit" : false,
      "out-vars" : [ 1, 6, 32, 12, 4, 2, 5, 0 ],
      "decl-vars" : [ ],
      "line-start" : 1230,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 6,
            "kind" : "expression",
            "operator" : "&",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "heap_released",
                "variable" : 57
              },
              "go-type" : 7,
              "kind" : "expression",
              "target" : {
                "go-type" : 110,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "memstats",
                  "variable" : 6
                }
              },
              "type" : "selector"
            },
            "type" : "unary"
          }, {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "scav",
              "variable" : 14
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 279,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 19,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "mSysStatDec"
            }
          },
          "go-type" : 86,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 1230,
      "code" : "mSysStatDec(&memstats.heap_released, scav)",
      "entry" : false,
      "use-vars" : [ 6, 14 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 77 ],
      "in-vars" : [ 2, 5, 0, 1, 6, 32, 12, 4 ],
      "exit" : false,
      "out-vars" : [ 2, 5, 0, 1, 6, 32, 12 ],
      "decl-vars" : [ ],
      "line-start" : 1233,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 6,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "sysStat",
              "variable" : 4
            }
          }, {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "nbytes",
              "variable" : 32
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 279,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 25,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "mSysStatInc"
            }
          },
          "go-type" : 86,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 1233,
      "code" : "mSysStatInc(sysStat, nbytes)",
      "entry" : false,
      "use-vars" : [ 4, 32 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 78 ],
      "in-vars" : [ 0, 1, 6, 32, 12, 2, 5 ],
      "exit" : false,
      "out-vars" : [ 1, 12, 2, 5, 0 ],
      "decl-vars" : [ ],
      "line-start" : 1234,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 6,
            "kind" : "expression",
            "operator" : "&",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "heap_idle",
                "variable" : 58
              },
              "go-type" : 7,
              "kind" : "expression",
              "target" : {
                "go-type" : 110,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "memstats",
                  "variable" : 6
                }
              },
              "type" : "selector"
            },
            "type" : "unary"
          }, {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "nbytes",
              "variable" : 32
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 279,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 19,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "mSysStatDec"
            }
          },
          "go-type" : 86,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 1234,
      "code" : "mSysStatDec(&memstats.heap_idle, nbytes)",
      "entry" : false,
      "use-vars" : [ 6, 32 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 79 ],
      "in-vars" : [ 0, 1, 12, 2, 5 ],
      "exit" : false,
      "out-vars" : [ 2, 5, 0, 1, 12 ],
      "decl-vars" : [ ],
      "line-start" : 1242,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "arguments" : [ ],
            "ellipsis" : false,
            "function" : {
              "field" : {
                "function" : 18,
                "ident-kind" : "Func",
                "kind" : "ident",
                "value" : "base"
              },
              "go-type" : 277,
              "kind" : "expression",
              "target" : {
                "go-type" : 9,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "s",
                  "variable" : 5
                }
              },
              "type" : "selector"
            },
            "go-type" : 2,
            "kind" : "expression",
            "type" : "call"
          }, {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "npages",
              "variable" : 1
            }
          }, {
            "go-type" : 9,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "s",
              "variable" : 5
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "function" : 26,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "setSpans"
            },
            "go-type" : 292,
            "kind" : "expression",
            "target" : {
              "go-type" : 29,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "h",
                "variable" : 0
              }
            },
            "type" : "selector"
          },
          "go-type" : 86,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 1242,
      "code" : "h.setSpans(s.base(), npages, s)",
      "entry" : false,
      "use-vars" : [ 0, 5, 1 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 80, 86 ],
      "in-vars" : [ 2, 5, 0, 1, 12 ],
      "exit" : false,
      "out-vars" : [ 12, 5, 0, 1 ],
      "decl-vars" : [ ],
      "line-start" : 1244,
      "ast" : {
        "condition" : {
          "go-type" : 3,
          "kind" : "expression",
          "operator" : "!",
          "target" : {
            "go-type" : 3,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "manual",
              "variable" : 2
            }
          },
          "type" : "unary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 1268,
      "code" : "if !manual {\n\n\th.sweepSpans[h.sweepgen/2%2].push(s)\n\n\tarena, pageIdx, pageMask := pageIndexOf(s.base())\n\tatomic.Or8(&arena.pageInUse[pageIdx], pageMask)\n\n\tatomic.Xadd64(&h.pagesInUse, int64(npages))\n\n\tif trace.enabled {\n\n\t\ttraceHeapAlloc()\n\t}\n}",
      "entry" : false,
      "use-vars" : [ 2 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 81 ],
      "in-vars" : [ 12, 5, 0, 1 ],
      "exit" : false,
      "out-vars" : [ 0, 1, 12, 5 ],
      "decl-vars" : [ ],
      "line-start" : 1251,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 9,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "s",
              "variable" : 5
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "function" : 27,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "push"
            },
            "go-type" : 294,
            "kind" : "expression",
            "target" : {
              "go-type" : 55,
              "index" : {
                "go-type" : 18,
                "kind" : "expression",
                "left" : {
                  "go-type" : 18,
                  "kind" : "expression",
                  "left" : {
                    "field" : {
                      "ident-kind" : "Var",
                      "kind" : "ident",
                      "value" : "sweepgen",
                      "variable" : 56
                    },
                    "go-type" : 18,
                    "kind" : "expression",
                    "target" : {
                      "go-type" : 29,
                      "kind" : "expression",
                      "type" : "identifier",
                      "value" : {
                        "ident-kind" : "Var",
                        "kind" : "ident",
                        "value" : "h",
                        "variable" : 0
                      }
                    },
                    "type" : "selector"
                  },
                  "operator" : "/",
                  "right" : {
                    "go-type" : 18,
                    "kind" : "constant",
                    "value" : {
                      "type" : "INT",
                      "value" : "2"
                    }
                  },
                  "type" : "binary"
                },
                "operator" : "%",
                "right" : {
                  "go-type" : 18,
                  "kind" : "constant",
                  "value" : {
                    "type" : "INT",
                    "value" : "2"
                  }
                },
                "type" : "binary"
              },
              "kind" : "expression",
              "target" : {
                "field" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "sweepSpans",
                  "variable" : 59
                },
                "go-type" : 54,
                "kind" : "expression",
                "target" : {
                  "go-type" : 29,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "h",
                    "variable" : 0
                  }
                },
                "type" : "selector"
              },
              "type" : "index"
            },
            "type" : "selector"
          },
          "go-type" : 86,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 1251,
      "code" : "h.sweepSpans[h.sweepgen/2%2].push(s)",
      "entry" : false,
      "use-vars" : [ 5, 0 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 82 ],
      "in-vars" : [ 5, 0, 1, 12 ],
      "exit" : false,
      "out-vars" : [ 1, 62, 63, 60, 12, 5, 0 ],
      "decl-vars" : [ 60, 63, 62 ],
      "line-start" : 1258,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "arena"
          }
        }, {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "pageIdx"
          }
        }, {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "pageMask"
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "arguments" : [ ],
            "ellipsis" : false,
            "function" : {
              "field" : {
                "function" : 18,
                "ident-kind" : "Func",
                "kind" : "ident",
                "value" : "base"
              },
              "go-type" : 277,
              "kind" : "expression",
              "target" : {
                "go-type" : 9,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "s",
                  "variable" : 5
                }
              },
              "type" : "selector"
            },
            "go-type" : 2,
            "kind" : "expression",
            "type" : "call"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 296,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 28,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "pageIndexOf"
            }
          },
          "go-type" : 295,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 1258,
      "code" : "arena, pageIdx, pageMask := pageIndexOf(s.base())",
      "entry" : false,
      "use-vars" : [ 5 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 83 ],
      "in-vars" : [ 62, 63, 60, 12, 5, 0, 1 ],
      "exit" : false,
      "out-vars" : [ 1, 12, 5, 0 ],
      "decl-vars" : [ ],
      "line-start" : 1259,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 300,
            "kind" : "expression",
            "operator" : "&",
            "target" : {
              "go-type" : 5,
              "index" : {
                "go-type" : 2,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "pageIdx",
                  "variable" : 62
                }
              },
              "kind" : "expression",
              "target" : {
                "field" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "pageInUse",
                  "variable" : 61
                },
                "go-type" : 68,
                "kind" : "expression",
                "target" : {
                  "go-type" : 63,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "arena",
                    "variable" : 60
                  }
                },
                "type" : "selector"
              },
              "type" : "index"
            },
            "type" : "unary"
          }, {
            "go-type" : 5,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "pageMask",
              "variable" : 63
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 298,
            "kind" : "expression",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 4,
              "value" : "atomic"
            },
            "type" : "identifier",
            "value" : {
              "function" : 29,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "Or8"
            }
          },
          "go-type" : 86,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 1259,
      "code" : "atomic.Or8(&arena.pageInUse[pageIdx], pageMask)",
      "entry" : false,
      "use-vars" : [ 62, 63, 60 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 84 ],
      "in-vars" : [ 5, 0, 1, 12 ],
      "exit" : false,
      "out-vars" : [ 5, 12 ],
      "decl-vars" : [ ],
      "line-start" : 1262,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 6,
            "kind" : "expression",
            "operator" : "&",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "pagesInUse",
                "variable" : 64
              },
              "go-type" : 7,
              "kind" : "expression",
              "target" : {
                "go-type" : 29,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "h",
                  "variable" : 0
                }
              },
              "type" : "selector"
            },
            "type" : "unary"
          }, {
            "coerced-to" : {
              "go-type" : 121,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 121,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "int64"
              }
            },
            "go-type" : 121,
            "kind" : "expression",
            "target" : {
              "go-type" : 2,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "npages",
                "variable" : 1
              }
            },
            "type" : "cast"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 269,
            "kind" : "expression",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 4,
              "value" : "atomic"
            },
            "type" : "identifier",
            "value" : {
              "function" : 14,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "Xadd64"
            }
          },
          "go-type" : 7,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 1262,
      "code" : "atomic.Xadd64(&h.pagesInUse, int64(npages))",
      "entry" : false,
      "use-vars" : [ 1, 0 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 85, 86 ],
      "in-vars" : [ 5, 12 ],
      "exit" : false,
      "out-vars" : [ 5 ],
      "decl-vars" : [ ],
      "line-start" : 1264,
      "ast" : {
        "condition" : {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "enabled",
            "variable" : 65
          },
          "go-type" : 3,
          "kind" : "expression",
          "target" : {
            "go-type" : 125,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "trace",
              "variable" : 12
            }
          },
          "type" : "selector"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 1267,
      "code" : "if trace.enabled {\n\n\ttraceHeapAlloc()\n}",
      "entry" : false,
      "use-vars" : [ 12 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 86 ],
      "in-vars" : [ 5 ],
      "exit" : false,
      "out-vars" : [ 5 ],
      "decl-vars" : [ ],
      "line-start" : 1266,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 150,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 30,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "traceHeapAlloc"
            }
          },
          "go-type" : 86,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 1266,
      "code" : "traceHeapAlloc()",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 5 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 1269,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 9,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "s",
            "variable" : 5
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 1269,
      "code" : "return s",
      "entry" : false,
      "use-vars" : [ 5 ]
    } ],
    "code" : "// allocSpan allocates an mspan which owns npages worth of memory.\n//\n// If manual == false, allocSpan allocates a heap span of class spanclass\n// and updates heap accounting. If manual == true, allocSpan allocates a\n// manually-managed span (spanclass is ignored), and the caller is\n// responsible for any accounting related to its use of the span. Either\n// way, allocSpan will atomically add the bytes in the newly allocated\n// span to *sysStat.\n//\n// The returned span is fully initialized.\n//\n// h must not be locked.\n//\n// allocSpan must be called on the system stack both because it acquires\n// the heap lock and because it must block GC transitions.\n//\n//go:systemstack\nfunc (h *mheap) allocSpan(npages uintptr, manual bool, spanclass spanClass, sysStat *uint64) (s *mspan) {\n\n\tgp := getg()\n\tbase, scav := uintptr(0), uintptr(0)\n\n\tpp := gp.m.p.ptr()\n\tif pp != nil && npages < pageCachePages/4 {\n\t\tc := &pp.pcache\n\n\t\tif c.empty() {\n\t\t\tlock(&h.lock)\n\t\t\t*c = h.pages.allocToCache()\n\t\t\tunlock(&h.lock)\n\t\t}\n\n\t\tbase, scav = c.alloc(npages)\n\t\tif base != 0 {\n\t\t\ts = h.tryAllocMSpan()\n\n\t\t\tif s != nil && gcBlackenEnabled == 0 && (manual || spanclass.sizeclass() != 0) {\n\t\t\t\tgoto HaveSpan\n\t\t\t}\n\n\t\t}\n\t}\n\n\tlock(&h.lock)\n\n\tif base == 0 {\n\n\t\tbase, scav = h.pages.alloc(npages)\n\t\tif base == 0 {\n\t\t\tif !h.grow(npages) {\n\t\t\t\tunlock(&h.lock)\n\t\t\t\treturn nil\n\t\t\t}\n\t\t\tbase, scav = h.pages.alloc(npages)\n\t\t\tif base == 0 {\n\t\t\t\tthrow(\"grew heap, but no adequate free space found\")\n\t\t\t}\n\t\t}\n\t}\n\tif s == nil {\n\n\t\ts = h.allocMSpanLocked()\n\t}\n\tif !manual {\n\n\t\tmemstats.heap_scan += uint64(gp.m.mcache.local_scan)\n\t\tgp.m.mcache.local_scan = 0\n\t\tmemstats.tinyallocs += uint64(gp.m.mcache.local_tinyallocs)\n\t\tgp.m.mcache.local_tinyallocs = 0\n\n\t\tif spanclass.sizeclass() == 0 {\n\t\t\tmheap_.largealloc += uint64(npages * pageSize)\n\t\t\tmheap_.nlargealloc++\n\t\t\tatomic.Xadd64(&memstats.heap_live, int64(npages*pageSize))\n\t\t}\n\n\t\tif gcBlackenEnabled != 0 {\n\t\t\tgcController.revise()\n\t\t}\n\t}\n\tunlock(&h.lock)\n\nHaveSpan:\n\n\ts.init(base, npages)\n\tif h.allocNeedsZero(base, npages) {\n\t\ts.needzero = 1\n\t}\n\tnbytes := npages * pageSize\n\tif manual {\n\t\ts.manualFreeList = 0\n\t\ts.nelems = 0\n\t\ts.limit = s.base() + s.npages*pageSize\n\n\t\tmSysStatDec(&memstats.heap_sys, s.npages*pageSize)\n\t\ts.state.set(mSpanManual)\n\t} else {\n\n\t\ts.spanclass = spanclass\n\t\tif sizeclass := spanclass.sizeclass(); sizeclass == 0 {\n\t\t\ts.elemsize = nbytes\n\t\t\ts.nelems = 1\n\n\t\t\ts.divShift = 0\n\t\t\ts.divMul = 0\n\t\t\ts.divShift2 = 0\n\t\t\ts.baseMask = 0\n\t\t} else {\n\t\t\ts.elemsize = uintptr(class_to_size[sizeclass])\n\t\t\ts.nelems = nbytes / s.elemsize\n\n\t\t\tm := &class_to_divmagic[sizeclass]\n\t\t\ts.divShift = m.shift\n\t\t\ts.divMul = m.mul\n\t\t\ts.divShift2 = m.shift2\n\t\t\ts.baseMask = m.baseMask\n\t\t}\n\n\t\ts.freeindex = 0\n\t\ts.allocCache = ^uint64(0)\n\t\ts.gcmarkBits = newMarkBits(s.nelems)\n\t\ts.allocBits = newAllocBits(s.nelems)\n\n\t\tatomic.Store(&s.sweepgen, h.sweepgen)\n\n\t\ts.state.set(mSpanInUse)\n\t}\n\n\tif scav != 0 {\n\n\t\tsysUsed(unsafe.Pointer(base), nbytes)\n\t\tmSysStatDec(&memstats.heap_released, scav)\n\t}\n\n\tmSysStatInc(sysStat, nbytes)\n\tmSysStatDec(&memstats.heap_idle, nbytes)\n\n\th.setSpans(s.base(), npages, s)\n\n\tif !manual {\n\n\t\th.sweepSpans[h.sweepgen/2%2].push(s)\n\n\t\tarena, pageIdx, pageMask := pageIndexOf(s.base())\n\t\tatomic.Or8(&arena.pageInUse[pageIdx], pageMask)\n\n\t\tatomic.Xadd64(&h.pagesInUse, int64(npages))\n\n\t\tif trace.enabled {\n\n\t\t\ttraceHeapAlloc()\n\t\t}\n\t}\n\treturn s\n}",
    "defines" : [ 0 ],
    "functions" : [ {
      "name" : "allocSpan",
      "package" : 0,
      "type" : 0,
      "exported" : false
    }, {
      "name" : "getg",
      "package" : 0,
      "type" : 205,
      "exported" : false
    }, {
      "name" : "ptr",
      "package" : 0,
      "type" : 246,
      "exported" : false
    }, {
      "name" : "empty",
      "package" : 0,
      "type" : 251,
      "exported" : false
    }, {
      "name" : "lock",
      "package" : 0,
      "type" : 252,
      "exported" : false
    }, {
      "name" : "allocToCache",
      "package" : 0,
      "type" : 254,
      "exported" : false
    }, {
      "name" : "unlock",
      "package" : 0,
      "type" : 252,
      "exported" : false
    }, {
      "name" : "alloc",
      "package" : 0,
      "type" : 257,
      "exported" : false
    }, {
      "name" : "tryAllocMSpan",
      "package" : 0,
      "type" : 259,
      "exported" : false
    }, {
      "name" : "sizeclass",
      "package" : 0,
      "type" : 261,
      "exported" : false
    }, {
      "name" : "alloc",
      "package" : 0,
      "type" : 264,
      "exported" : false
    }, {
      "name" : "grow",
      "package" : 0,
      "type" : 265,
      "exported" : false
    }, {
      "name" : "throw",
      "package" : 0,
      "type" : 267,
      "exported" : false
    }, {
      "name" : "allocMSpanLocked",
      "package" : 0,
      "type" : 259,
      "exported" : false
    }, {
      "name" : "Xadd64",
      "package" : 4,
      "type" : 269,
      "exported" : true
    }, {
      "name" : "revise",
      "package" : 0,
      "type" : 150,
      "exported" : false
    }, {
      "name" : "init",
      "package" : 0,
      "type" : 272,
      "exported" : false
    }, {
      "name" : "allocNeedsZero",
      "package" : 0,
      "type" : 274,
      "exported" : false
    }, {
      "name" : "base",
      "package" : 0,
      "type" : 277,
      "exported" : false
    }, {
      "name" : "mSysStatDec",
      "package" : 0,
      "type" : 279,
      "exported" : false
    }, {
      "name" : "set",
      "package" : 0,
      "type" : 281,
      "exported" : false
    }, {
      "name" : "newMarkBits",
      "package" : 0,
      "type" : 284,
      "exported" : false
    }, {
      "name" : "newAllocBits",
      "package" : 0,
      "type" : 284,
      "exported" : false
    }, {
      "name" : "Store",
      "package" : 4,
      "type" : 287,
      "exported" : true
    }, {
      "name" : "sysUsed",
      "package" : 0,
      "type" : 290,
      "exported" : false
    }, {
      "name" : "mSysStatInc",
      "package" : 0,
      "type" : 279,
      "exported" : false
    }, {
      "name" : "setSpans",
      "package" : 0,
      "type" : 292,
      "exported" : false
    }, {
      "name" : "push",
      "package" : 0,
      "type" : 294,
      "exported" : false
    }, {
      "name" : "pageIndexOf",
      "package" : 0,
      "type" : 296,
      "exported" : false
    }, {
      "name" : "Or8",
      "package" : 4,
      "type" : 298,
      "exported" : true
    }, {
      "name" : "traceHeapAlloc",
      "package" : 0,
      "type" : 150,
      "exported" : false
    } ],
    "line-end" : 1270,
    "line-start" : 1075,
    "names" : [ "allocSpan" ],
    "package" : 0,
    "packages" : [ {
      "name" : "runtime",
      "path" : "runtime"
    }, {
      "name" : "unsafe",
      "path" : "unsafe"
    }, {
      "name" : "cpu",
      "path" : "internal/cpu"
    }, {
      "name" : "sys",
      "path" : "runtime/internal/sys"
    }, {
      "name" : "atomic",
      "path" : "runtime/internal/atomic"
    } ],
    "params" : [ 1, 2, 3, 4 ],
    "receivers" : [ 0 ],
    "results" : [ 5 ],
    "type" : "function",
    "types" : [ {
      "name" : "func(npages uintptr, manual bool, spanclass runtime.spanClass, sysStat *uint64) (s *runtime.mspan)",
      "params" : 1,
      "recv" : 0,
      "results" : 8,
      "type" : "Signature",
      "underlying" : 0,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "npages",
        "type" : 2
      }, {
        "name" : "manual",
        "type" : 3
      }, {
        "name" : "spanclass",
        "type" : 4
      }, {
        "name" : "sysStat",
        "type" : 6
      } ],
      "name" : "(npages uintptr, manual bool, spanclass runtime.spanClass, sysStat *uint64)",
      "type" : "Tuple",
      "underlying" : 1
    }, {
      "name" : "uintptr",
      "type" : "Basic",
      "underlying" : 2
    }, {
      "name" : "bool",
      "type" : "Basic",
      "underlying" : 3
    }, {
      "local-name" : "spanClass",
      "name" : "runtime.spanClass",
      "package" : 0,
      "type" : "Named",
      "underlying" : 5
    }, {
      "name" : "uint8",
      "type" : "Basic",
      "underlying" : 5
    }, {
      "elem" : 7,
      "name" : "*uint64",
      "type" : "Pointer",
      "underlying" : 6
    }, {
      "name" : "uint64",
      "type" : "Basic",
      "underlying" : 7
    }, {
      "fields" : [ {
        "name" : "s",
        "type" : 9
      } ],
      "name" : "(s *runtime.mspan)",
      "type" : "Tuple",
      "underlying" : 8
    }, {
      "elem" : 10,
      "name" : "*runtime.mspan",
      "type" : "Pointer",
      "underlying" : 9
    }, {
      "local-name" : "mspan",
      "name" : "runtime.mspan",
      "package" : 0,
      "type" : "Named",
      "underlying" : 11
    }, {
      "fields" : [ {
        "name" : "next",
        "type" : 9
      }, {
        "name" : "prev",
        "type" : 9
      }, {
        "name" : "list",
        "type" : 12
      }, {
        "name" : "startAddr",
        "type" : 2
      }, {
        "name" : "npages",
        "type" : 2
      }, {
        "name" : "manualFreeList",
        "type" : 15
      }, {
        "name" : "freeindex",
        "type" : 2
      }, {
        "name" : "nelems",
        "type" : 2
      }, {
        "name" : "allocCache",
        "type" : 7
      }, {
        "name" : "allocBits",
        "type" : 16
      }, {
        "name" : "gcmarkBits",
        "type" : 16
      }, {
        "name" : "sweepgen",
        "type" : 18
      }, {
        "name" : "divMul",
        "type" : 19
      }, {
        "name" : "baseMask",
        "type" : 19
      }, {
        "name" : "allocCount",
        "type" : 19
      }, {
        "name" : "spanclass",
        "type" : 4
      }, {
        "name" : "state",
        "type" : 20
      }, {
        "name" : "needzero",
        "type" : 5
      }, {
        "name" : "divShift",
        "type" : 5
      }, {
        "name" : "divShift2",
        "type" : 5
      }, {
        "name" : "elemsize",
        "type" : 2
      }, {
        "name" : "limit",
        "type" : 2
      }, {
        "name" : "speciallock",
        "type" : 23
      }, {
        "name" : "specials",
        "type" : 25
      } ],
      "name" : "struct{next *runtime.mspan; prev *runtime.mspan; list *runtime.mSpanList; startAddr uintptr; npages uintptr; manualFreeList runtime.gclinkptr; freeindex uintptr; nelems uintptr; allocCache uint64; allocBits *runtime.gcBits; gcmarkBits *runtime.gcBits; sweepgen uint32; divMul uint16; baseMask uint16; allocCount uint16; spanclass runtime.spanClass; state runtime.mSpanStateBox; needzero uint8; divShift uint8; divShift2 uint8; elemsize uintptr; limit uintptr; speciallock runtime.mutex; specials *runtime.special}",
      "type" : "Struct",
      "underlying" : 11
    }, {
      "elem" : 13,
      "name" : "*runtime.mSpanList",
      "type" : "Pointer",
      "underlying" : 12
    }, {
      "local-name" : "mSpanList",
      "name" : "runtime.mSpanList",
      "package" : 0,
      "type" : "Named",
      "underlying" : 14
    }, {
      "fields" : [ {
        "name" : "first",
        "type" : 9
      }, {
        "name" : "last",
        "type" : 9
      } ],
      "name" : "struct{first *runtime.mspan; last *runtime.mspan}",
      "type" : "Struct",
      "underlying" : 14
    }, {
      "local-name" : "gclinkptr",
      "name" : "runtime.gclinkptr",
      "package" : 0,
      "type" : "Named",
      "underlying" : 2
    }, {
      "elem" : 17,
      "name" : "*runtime.gcBits",
      "type" : "Pointer",
      "underlying" : 16
    }, {
      "local-name" : "gcBits",
      "name" : "runtime.gcBits",
      "package" : 0,
      "type" : "Named",
      "underlying" : 5
    }, {
      "name" : "uint32",
      "type" : "Basic",
      "underlying" : 18
    }, {
      "name" : "uint16",
      "type" : "Basic",
      "underlying" : 19
    }, {
      "local-name" : "mSpanStateBox",
      "name" : "runtime.mSpanStateBox",
      "package" : 0,
      "type" : "Named",
      "underlying" : 21
    }, {
      "fields" : [ {
        "name" : "s",
        "type" : 22
      } ],
      "name" : "struct{s runtime.mSpanState}",
      "type" : "Struct",
      "underlying" : 21
    }, {
      "local-name" : "mSpanState",
      "name" : "runtime.mSpanState",
      "package" : 0,
      "type" : "Named",
      "underlying" : 5
    }, {
      "local-name" : "mutex",
      "name" : "runtime.mutex",
      "package" : 0,
      "type" : "Named",
      "underlying" : 24
    }, {
      "fields" : [ {
        "name" : "key",
        "type" : 2
      } ],
      "name" : "struct{key uintptr}",
      "type" : "Struct",
      "underlying" : 24
    }, {
      "elem" : 26,
      "name" : "*runtime.special",
      "type" : "Pointer",
      "underlying" : 25
    }, {
      "local-name" : "special",
      "name" : "runtime.special",
      "package" : 0,
      "type" : "Named",
      "underlying" : 27
    }, {
      "fields" : [ {
        "name" : "next",
        "type" : 25
      }, {
        "name" : "offset",
        "type" : 19
      }, {
        "name" : "kind",
        "type" : 28
      } ],
      "name" : "struct{next *runtime.special; offset uint16; kind byte}",
      "type" : "Struct",
      "underlying" : 27
    }, {
      "name" : "byte",
      "type" : "Basic",
      "underlying" : 28
    }, {
      "elem" : 30,
      "name" : "*runtime.mheap",
      "type" : "Pointer",
      "underlying" : 29
    }, {
      "local-name" : "mheap",
      "name" : "runtime.mheap",
      "package" : 0,
      "type" : "Named",
      "underlying" : 31
    }, {
      "fields" : [ {
        "name" : "lock",
        "type" : 23
      }, {
        "name" : "pages",
        "type" : 32
      }, {
        "name" : "sweepgen",
        "type" : 18
      }, {
        "name" : "sweepdone",
        "type" : 18
      }, {
        "name" : "sweepers",
        "type" : 18
      }, {
        "name" : "allspans",
        "type" : 53
      }, {
        "name" : "sweepSpans",
        "type" : 54
      }, {
        "name" : "pagesInUse",
        "type" : 7
      }, {
        "name" : "pagesSwept",
        "type" : 7
      }, {
        "name" : "pagesSweptBasis",
        "type" : 7
      }, {
        "name" : "sweepHeapLiveBasis",
        "type" : 7
      }, {
        "name" : "sweepPagesPerByte",
        "type" : 58
      }, {
        "name" : "scavengeGoal",
        "type" : 7
      }, {
        "name" : "reclaimIndex",
        "type" : 7
      }, {
        "name" : "reclaimCredit",
        "type" : 2
      }, {
        "name" : "largealloc",
        "type" : 7
      }, {
        "name" : "nlargealloc",
        "type" : 7
      }, {
        "name" : "largefree",
        "type" : 7
      }, {
        "name" : "nlargefree",
        "type" : 7
      }, {
        "name" : "nsmallfree",
        "type" : 59
      }, {
        "name" : "arenas",
        "type" : 60
      }, {
        "name" : "heapArenaAlloc",
        "type" : 69
      }, {
        "name" : "arenaHints",
        "type" : 71
      }, {
        "name" : "arena",
        "type" : 69
      }, {
        "name" : "allArenas",
        "type" : 74
      }, {
        "name" : "sweepArenas",
        "type" : 74
      }, {
        "name" : "curArena",
        "type" : 76
      }, {
        "name" : "_",
        "type" : 18
      }, {
        "name" : "central",
        "type" : 77
      }, {
        "name" : "spanalloc",
        "type" : 82
      }, {
        "name" : "cachealloc",
        "type" : 82
      }, {
        "name" : "specialfinalizeralloc",
        "type" : 82
      }, {
        "name" : "specialprofilealloc",
        "type" : 82
      }, {
        "name" : "speciallock",
        "type" : 23
      }, {
        "name" : "arenaHintAlloc",
        "type" : 82
      }, {
        "name" : "unused",
        "type" : 90
      } ],
      "name" : "struct{lock runtime.mutex; pages runtime.pageAlloc; sweepgen uint32; sweepdone uint32; sweepers uint32; allspans []*runtime.mspan; sweepSpans [2]runtime.gcSweepBuf; pagesInUse uint64; pagesSwept uint64; pagesSweptBasis uint64; sweepHeapLiveBasis uint64; sweepPagesPerByte float64; scavengeGoal uint64; reclaimIndex uint64; reclaimCredit uintptr; largealloc uint64; nlargealloc uint64; largefree uint64; nlargefree uint64; nsmallfree [67]uint64; arenas [1]*[4194304]*runtime.heapArena; heapArenaAlloc runtime.linearAlloc; arenaHints *runtime.arenaHint; arena runtime.linearAlloc; allArenas []runtime.arenaIdx; sweepArenas []runtime.arenaIdx; curArena struct{base uintptr; end uintptr}; _ uint32; central [134]struct{mcentral runtime.mcentral; pad [8]byte}; spanalloc runtime.fixalloc; cachealloc runtime.fixalloc; specialfinalizeralloc runtime.fixalloc; specialprofilealloc runtime.fixalloc; speciallock runtime.mutex; arenaHintAlloc runtime.fixalloc; unused *runtime.specialfinalizer}",
      "type" : "Struct",
      "underlying" : 31
    }, {
      "local-name" : "pageAlloc",
      "name" : "runtime.pageAlloc",
      "package" : 0,
      "type" : "Named",
      "underlying" : 33
    }, {
      "fields" : [ {
        "name" : "summary",
        "type" : 34
      }, {
        "name" : "chunks",
        "type" : 37
      }, {
        "name" : "searchAddr",
        "type" : 2
      }, {
        "name" : "scavAddr",
        "type" : 2
      }, {
        "name" : "scavReleased",
        "type" : 2
      }, {
        "name" : "start",
        "type" : 45
      }, {
        "name" : "end",
        "type" : 45
      }, {
        "name" : "inUse",
        "type" : 47
      }, {
        "name" : "mheapLock",
        "type" : 52
      }, {
        "name" : "sysStat",
        "type" : 6
      }, {
        "name" : "test",
        "type" : 3
      } ],
      "name" : "struct{summary [5][]runtime.pallocSum; chunks [8192]*[8192]runtime.pallocData; searchAddr uintptr; scavAddr uintptr; scavReleased uintptr; start runtime.chunkIdx; end runtime.chunkIdx; inUse runtime.addrRanges; mheapLock *runtime.mutex; sysStat *uint64; test bool}",
      "type" : "Struct",
      "underlying" : 33
    }, {
      "elem" : 35,
      "name" : "[5][]runtime.pallocSum",
      "type" : "Array",
      "underlying" : 34
    }, {
      "elem" : 36,
      "name" : "[]runtime.pallocSum",
      "type" : "Slice",
      "underlying" : 35
    }, {
      "local-name" : "pallocSum",
      "name" : "runtime.pallocSum",
      "package" : 0,
      "type" : "Named",
      "underlying" : 7
    }, {
      "elem" : 38,
      "name" : "[8192]*[8192]runtime.pallocData",
      "type" : "Array",
      "underlying" : 37
    }, {
      "elem" : 39,
      "name" : "*[8192]runtime.pallocData",
      "type" : "Pointer",
      "underlying" : 38
    }, {
      "elem" : 40,
      "name" : "[8192]runtime.pallocData",
      "type" : "Array",
      "underlying" : 39
    }, {
      "local-name" : "pallocData",
      "name" : "runtime.pallocData",
      "package" : 0,
      "type" : "Named",
      "underlying" : 41
    }, {
      "fields" : [ {
        "name" : "pallocBits",
        "type" : 42
      }, {
        "name" : "scavenged",
        "type" : 44
      } ],
      "name" : "struct{runtime.pallocBits; scavenged runtime.pageBits}",
      "type" : "Struct",
      "underlying" : 41
    }, {
      "local-name" : "pallocBits",
      "name" : "runtime.pallocBits",
      "package" : 0,
      "type" : "Named",
      "underlying" : 43
    }, {
      "elem" : 7,
      "name" : "[8]uint64",
      "type" : "Array",
      "underlying" : 43
    }, {
      "local-name" : "pageBits",
      "name" : "runtime.pageBits",
      "package" : 0,
      "type" : "Named",
      "underlying" : 43
    }, {
      "local-name" : "chunkIdx",
      "name" : "runtime.chunkIdx",
      "package" : 0,
      "type" : "Named",
      "underlying" : 46
    }, {
      "name" : "uint",
      "type" : "Basic",
      "underlying" : 46
    }, {
      "local-name" : "addrRanges",
      "name" : "runtime.addrRanges",
      "package" : 0,
      "type" : "Named",
      "underlying" : 48
    }, {
      "fields" : [ {
        "name" : "ranges",
        "type" : 49
      }, {
        "name" : "sysStat",
        "type" : 6
      } ],
      "name" : "struct{ranges []runtime.addrRange; sysStat *uint64}",
      "type" : "Struct",
      "underlying" : 48
    }, {
      "elem" : 50,
      "name" : "[]runtime.addrRange",
      "type" : "Slice",
      "underlying" : 49
    }, {
      "local-name" : "addrRange",
      "name" : "runtime.addrRange",
      "package" : 0,
      "type" : "Named",
      "underlying" : 51
    }, {
      "fields" : [ {
        "name" : "base",
        "type" : 2
      }, {
        "name" : "limit",
        "type" : 2
      } ],
      "name" : "struct{base uintptr; limit uintptr}",
      "type" : "Struct",
      "underlying" : 51
    }, {
      "elem" : 23,
      "name" : "*runtime.mutex",
      "type" : "Pointer",
      "underlying" : 52
    }, {
      "elem" : 9,
      "name" : "[]*runtime.mspan",
      "type" : "Slice",
      "underlying" : 53
    }, {
      "elem" : 55,
      "name" : "[2]runtime.gcSweepBuf",
      "type" : "Array",
      "underlying" : 54
    }, {
      "local-name" : "gcSweepBuf",
      "name" : "runtime.gcSweepBuf",
      "package" : 0,
      "type" : "Named",
      "underlying" : 56
    }, {
      "fields" : [ {
        "name" : "spineLock",
        "type" : 23
      }, {
        "name" : "spine",
        "type" : 57
      }, {
        "name" : "spineLen",
        "type" : 2
      }, {
        "name" : "spineCap",
        "type" : 2
      }, {
        "name" : "index",
        "type" : 18
      } ],
      "name" : "struct{spineLock runtime.mutex; spine unsafe.Pointer; spineLen uintptr; spineCap uintptr; index uint32}",
      "type" : "Struct",
      "underlying" : 56
    }, {
      "local-name" : "Pointer",
      "name" : "unsafe.Pointer",
      "package" : 1,
      "type" : "Basic",
      "underlying" : 57
    }, {
      "name" : "float64",
      "type" : "Basic",
      "underlying" : 58
    }, {
      "elem" : 7,
      "name" : "[67]uint64",
      "type" : "Array",
      "underlying" : 59
    }, {
      "elem" : 61,
      "name" : "[1]*[4194304]*runtime.heapArena",
      "type" : "Array",
      "underlying" : 60
    }, {
      "elem" : 62,
      "name" : "*[4194304]*runtime.heapArena",
      "type" : "Pointer",
      "underlying" : 61
    }, {
      "elem" : 63,
      "name" : "[4194304]*runtime.heapArena",
      "type" : "Array",
      "underlying" : 62
    }, {
      "elem" : 64,
      "name" : "*runtime.heapArena",
      "type" : "Pointer",
      "underlying" : 63
    }, {
      "local-name" : "heapArena",
      "name" : "runtime.heapArena",
      "package" : 0,
      "type" : "Named",
      "underlying" : 65
    }, {
      "fields" : [ {
        "name" : "bitmap",
        "type" : 66
      }, {
        "name" : "spans",
        "type" : 67
      }, {
        "name" : "pageInUse",
        "type" : 68
      }, {
        "name" : "pageMarks",
        "type" : 68
      }, {
        "name" : "zeroedBase",
        "type" : 2
      } ],
      "name" : "struct{bitmap [2097152]byte; spans [8192]*runtime.mspan; pageInUse [1024]uint8; pageMarks [1024]uint8; zeroedBase uintptr}",
      "type" : "Struct",
      "underlying" : 65
    }, {
      "elem" : 28,
      "name" : "[2097152]byte",
      "type" : "Array",
      "underlying" : 66
    }, {
      "elem" : 9,
      "name" : "[8192]*runtime.mspan",
      "type" : "Array",
      "underlying" : 67
    }, {
      "elem" : 5,
      "name" : "[1024]uint8",
      "type" : "Array",
      "underlying" : 68
    }, {
      "local-name" : "linearAlloc",
      "name" : "runtime.linearAlloc",
      "package" : 0,
      "type" : "Named",
      "underlying" : 70
    }, {
      "fields" : [ {
        "name" : "next",
        "type" : 2
      }, {
        "name" : "mapped",
        "type" : 2
      }, {
        "name" : "end",
        "type" : 2
      } ],
      "name" : "struct{next uintptr; mapped uintptr; end uintptr}",
      "type" : "Struct",
      "underlying" : 70
    }, {
      "elem" : 72,
      "name" : "*runtime.arenaHint",
      "type" : "Pointer",
      "underlying" : 71
    }, {
      "local-name" : "arenaHint",
      "name" : "runtime.arenaHint",
      "package" : 0,
      "type" : "Named",
      "underlying" : 73
    }, {
      "fields" : [ {
        "name" : "addr",
        "type" : 2
      }, {
        "name" : "down",
        "type" : 3
      }, {
        "name" : "next",
        "type" : 71
      } ],
      "name" : "struct{addr uintptr; down bool; next *runtime.arenaHint}",
      "type" : "Struct",
      "underlying" : 73
    }, {
      "elem" : 75,
      "name" : "[]runtime.arenaIdx",
      "type" : "Slice",
      "underlying" : 74
    }, {
      "local-name" : "arenaIdx",
      "name" : "runtime.arenaIdx",
      "package" : 0,
      "type" : "Named",
      "underlying" : 46
    }, {
      "fields" : [ {
        "name" : "base",
        "type" : 2
      }, {
        "name" : "end",
        "type" : 2
      } ],
      "name" : "struct{base uintptr; end uintptr}",
      "type" : "Struct",
      "underlying" : 76
    }, {
      "elem" : 78,
      "name" : "[134]struct{mcentral runtime.mcentral; pad [8]byte}",
      "type" : "Array",
      "underlying" : 77
    }, {
      "fields" : [ {
        "name" : "mcentral",
        "type" : 79
      }, {
        "name" : "pad",
        "type" : 81
      } ],
      "name" : "struct{mcentral runtime.mcentral; pad [8]byte}",
      "type" : "Struct",
      "underlying" : 78
    }, {
      "local-name" : "mcentral",
      "name" : "runtime.mcentral",
      "package" : 0,
      "type" : "Named",
      "underlying" : 80
    }, {
      "fields" : [ {
        "name" : "lock",
        "type" : 23
      }, {
        "name" : "spanclass",
        "type" : 4
      }, {
        "name" : "nonempty",
        "type" : 13
      }, {
        "name" : "empty",
        "type" : 13
      }, {
        "name" : "nmalloc",
        "type" : 7
      } ],
      "name" : "struct{lock runtime.mutex; spanclass runtime.spanClass; nonempty runtime.mSpanList; empty runtime.mSpanList; nmalloc uint64}",
      "type" : "Struct",
      "underlying" : 80
    }, {
      "elem" : 28,
      "name" : "[8]byte",
      "type" : "Array",
      "underlying" : 81
    }, {
      "local-name" : "fixalloc",
      "name" : "runtime.fixalloc",
      "package" : 0,
      "type" : "Named",
      "underlying" : 83
    }, {
      "fields" : [ {
        "name" : "size",
        "type" : 2
      }, {
        "name" : "first",
        "type" : 84
      }, {
        "name" : "arg",
        "type" : 57
      }, {
        "name" : "list",
        "type" : 87
      }, {
        "name" : "chunk",
        "type" : 2
      }, {
        "name" : "nchunk",
        "type" : 18
      }, {
        "name" : "inuse",
        "type" : 2
      }, {
        "name" : "stat",
        "type" : 6
      }, {
        "name" : "zero",
        "type" : 3
      } ],
      "name" : "struct{size uintptr; first func(arg unsafe.Pointer, p unsafe.Pointer); arg unsafe.Pointer; list *runtime.mlink; chunk uintptr; nchunk uint32; inuse uintptr; stat *uint64; zero bool}",
      "type" : "Struct",
      "underlying" : 83
    }, {
      "name" : "func(arg unsafe.Pointer, p unsafe.Pointer)",
      "params" : 85,
      "recv" : -1,
      "results" : 86,
      "type" : "Signature",
      "underlying" : 84,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "arg",
        "type" : 57
      }, {
        "name" : "p",
        "type" : 57
      } ],
      "name" : "(arg unsafe.Pointer, p unsafe.Pointer)",
      "type" : "Tuple",
      "underlying" : 85
    }, {
      "fields" : [ ],
      "name" : "()",
      "type" : "Tuple",
      "underlying" : 86
    }, {
      "elem" : 88,
      "name" : "*runtime.mlink",
      "type" : "Pointer",
      "underlying" : 87
    }, {
      "local-name" : "mlink",
      "name" : "runtime.mlink",
      "package" : 0,
      "type" : "Named",
      "underlying" : 89
    }, {
      "fields" : [ {
        "name" : "next",
        "type" : 87
      } ],
      "name" : "struct{next *runtime.mlink}",
      "type" : "Struct",
      "underlying" : 89
    }, {
      "elem" : 91,
      "name" : "*runtime.specialfinalizer",
      "type" : "Pointer",
      "underlying" : 90
    }, {
      "local-name" : "specialfinalizer",
      "name" : "runtime.specialfinalizer",
      "package" : 0,
      "type" : "Named",
      "underlying" : 92
    }, {
      "fields" : [ {
        "name" : "special",
        "type" : 26
      }, {
        "name" : "fn",
        "type" : 93
      }, {
        "name" : "nret",
        "type" : 2
      }, {
        "name" : "fint",
        "type" : 96
      }, {
        "name" : "ot",
        "type" : 107
      } ],
      "name" : "struct{special runtime.special; fn *runtime.funcval; nret uintptr; fint *runtime._type; ot *runtime.ptrtype}",
      "type" : "Struct",
      "underlying" : 92
    }, {
      "elem" : 94,
      "name" : "*runtime.funcval",
      "type" : "Pointer",
      "underlying" : 93
    }, {
      "local-name" : "funcval",
      "name" : "runtime.funcval",
      "package" : 0,
      "type" : "Named",
      "underlying" : 95
    }, {
      "fields" : [ {
        "name" : "fn",
        "type" : 2
      } ],
      "name" : "struct{fn uintptr}",
      "type" : "Struct",
      "underlying" : 95
    }, {
      "elem" : 97,
      "name" : "*runtime._type",
      "type" : "Pointer",
      "underlying" : 96
    }, {
      "local-name" : "_type",
      "name" : "runtime._type",
      "package" : 0,
      "type" : "Named",
      "underlying" : 98
    }, {
      "fields" : [ {
        "name" : "size",
        "type" : 2
      }, {
        "name" : "ptrdata",
        "type" : 2
      }, {
        "name" : "hash",
        "type" : 18
      }, {
        "name" : "tflag",
        "type" : 99
      }, {
        "name" : "align",
        "type" : 5
      }, {
        "name" : "fieldAlign",
        "type" : 5
      }, {
        "name" : "kind",
        "type" : 5
      }, {
        "name" : "equal",
        "type" : 100
      }, {
        "name" : "gcdata",
        "type" : 103
      }, {
        "name" : "str",
        "type" : 104
      }, {
        "name" : "ptrToThis",
        "type" : 106
      } ],
      "name" : "struct{size uintptr; ptrdata uintptr; hash uint32; tflag runtime.tflag; align uint8; fieldAlign uint8; kind uint8; equal func(unsafe.Pointer, unsafe.Pointer) bool; gcdata *byte; str runtime.nameOff; ptrToThis runtime.typeOff}",
      "type" : "Struct",
      "underlying" : 98
    }, {
      "local-name" : "tflag",
      "name" : "runtime.tflag",
      "package" : 0,
      "type" : "Named",
      "underlying" : 5
    }, {
      "name" : "func(unsafe.Pointer, unsafe.Pointer) bool",
      "params" : 101,
      "recv" : -1,
      "results" : 102,
      "type" : "Signature",
      "underlying" : 100,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 57
      }, {
        "name" : "",
        "type" : 57
      } ],
      "name" : "(unsafe.Pointer, unsafe.Pointer)",
      "type" : "Tuple",
      "underlying" : 101
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 3
      } ],
      "name" : "(bool)",
      "type" : "Tuple",
      "underlying" : 102
    }, {
      "elem" : 28,
      "name" : "*byte",
      "type" : "Pointer",
      "underlying" : 103
    }, {
      "local-name" : "nameOff",
      "name" : "runtime.nameOff",
      "package" : 0,
      "type" : "Named",
      "underlying" : 105
    }, {
      "name" : "int32",
      "type" : "Basic",
      "underlying" : 105
    }, {
      "local-name" : "typeOff",
      "name" : "runtime.typeOff",
      "package" : 0,
      "type" : "Named",
      "underlying" : 105
    }, {
      "elem" : 108,
      "name" : "*runtime.ptrtype",
      "type" : "Pointer",
      "underlying" : 107
    }, {
      "local-name" : "ptrtype",
      "name" : "runtime.ptrtype",
      "package" : 0,
      "type" : "Named",
      "underlying" : 109
    }, {
      "fields" : [ {
        "name" : "typ",
        "type" : 97
      }, {
        "name" : "elem",
        "type" : 96
      } ],
      "name" : "struct{typ runtime._type; elem *runtime._type}",
      "type" : "Struct",
      "underlying" : 109
    }, {
      "local-name" : "mstats",
      "name" : "runtime.mstats",
      "package" : 0,
      "type" : "Named",
      "underlying" : 111
    }, {
      "fields" : [ {
        "name" : "alloc",
        "type" : 7
      }, {
        "name" : "total_alloc",
        "type" : 7
      }, {
        "name" : "sys",
        "type" : 7
      }, {
        "name" : "nlookup",
        "type" : 7
      }, {
        "name" : "nmalloc",
        "type" : 7
      }, {
        "name" : "nfree",
        "type" : 7
      }, {
        "name" : "heap_alloc",
        "type" : 7
      }, {
        "name" : "heap_sys",
        "type" : 7
      }, {
        "name" : "heap_idle",
        "type" : 7
      }, {
        "name" : "heap_inuse",
        "type" : 7
      }, {
        "name" : "heap_released",
        "type" : 7
      }, {
        "name" : "heap_objects",
        "type" : 7
      }, {
        "name" : "stacks_inuse",
        "type" : 7
      }, {
        "name" : "stacks_sys",
        "type" : 7
      }, {
        "name" : "mspan_inuse",
        "type" : 7
      }, {
        "name" : "mspan_sys",
        "type" : 7
      }, {
        "name" : "mcache_inuse",
        "type" : 7
      }, {
        "name" : "mcache_sys",
        "type" : 7
      }, {
        "name" : "buckhash_sys",
        "type" : 7
      }, {
        "name" : "gc_sys",
        "type" : 7
      }, {
        "name" : "other_sys",
        "type" : 7
      }, {
        "name" : "next_gc",
        "type" : 7
      }, {
        "name" : "last_gc_unix",
        "type" : 7
      }, {
        "name" : "pause_total_ns",
        "type" : 7
      }, {
        "name" : "pause_ns",
        "type" : 112
      }, {
        "name" : "pause_end",
        "type" : 112
      }, {
        "name" : "numgc",
        "type" : 18
      }, {
        "name" : "numforcedgc",
        "type" : 18
      }, {
        "name" : "gc_cpu_fraction",
        "type" : 58
      }, {
        "name" : "enablegc",
        "type" : 3
      }, {
        "name" : "debuggc",
        "type" : 3
      }, {
        "name" : "by_size",
        "type" : 113
      }, {
        "name" : "last_gc_nanotime",
        "type" : 7
      }, {
        "name" : "tinyallocs",
        "type" : 7
      }, {
        "name" : "last_next_gc",
        "type" : 7
      }, {
        "name" : "last_heap_inuse",
        "type" : 7
      }, {
        "name" : "triggerRatio",
        "type" : 58
      }, {
        "name" : "gc_trigger",
        "type" : 7
      }, {
        "name" : "heap_live",
        "type" : 7
      }, {
        "name" : "heap_scan",
        "type" : 7
      }, {
        "name" : "heap_marked",
        "type" : 7
      } ],
      "name" : "struct{alloc uint64; total_alloc uint64; sys uint64; nlookup uint64; nmalloc uint64; nfree uint64; heap_alloc uint64; heap_sys uint64; heap_idle uint64; heap_inuse uint64; heap_released uint64; heap_objects uint64; stacks_inuse uint64; stacks_sys uint64; mspan_inuse uint64; mspan_sys uint64; mcache_inuse uint64; mcache_sys uint64; buckhash_sys uint64; gc_sys uint64; other_sys uint64; next_gc uint64; last_gc_unix uint64; pause_total_ns uint64; pause_ns [256]uint64; pause_end [256]uint64; numgc uint32; numforcedgc uint32; gc_cpu_fraction float64; enablegc bool; debuggc bool; by_size [67]struct{size uint32; nmalloc uint64; nfree uint64}; last_gc_nanotime uint64; tinyallocs uint64; last_next_gc uint64; last_heap_inuse uint64; triggerRatio float64; gc_trigger uint64; heap_live uint64; heap_scan uint64; heap_marked uint64}",
      "type" : "Struct",
      "underlying" : 111
    }, {
      "elem" : 7,
      "name" : "[256]uint64",
      "type" : "Array",
      "underlying" : 112
    }, {
      "elem" : 114,
      "name" : "[67]struct{size uint32; nmalloc uint64; nfree uint64}",
      "type" : "Array",
      "underlying" : 113
    }, {
      "fields" : [ {
        "name" : "size",
        "type" : 18
      }, {
        "name" : "nmalloc",
        "type" : 7
      }, {
        "name" : "nfree",
        "type" : 7
      } ],
      "name" : "struct{size uint32; nmalloc uint64; nfree uint64}",
      "type" : "Struct",
      "underlying" : 114
    }, {
      "elem" : 116,
      "name" : "[67]runtime.divMagic",
      "type" : "Array",
      "underlying" : 115
    }, {
      "local-name" : "divMagic",
      "name" : "runtime.divMagic",
      "package" : 0,
      "type" : "Named",
      "underlying" : 117
    }, {
      "fields" : [ {
        "name" : "shift",
        "type" : 5
      }, {
        "name" : "shift2",
        "type" : 5
      }, {
        "name" : "mul",
        "type" : 19
      }, {
        "name" : "baseMask",
        "type" : 19
      } ],
      "name" : "struct{shift uint8; shift2 uint8; mul uint16; baseMask uint16}",
      "type" : "Struct",
      "underlying" : 117
    }, {
      "elem" : 19,
      "name" : "[67]uint16",
      "type" : "Array",
      "underlying" : 118
    }, {
      "local-name" : "gcControllerState",
      "name" : "runtime.gcControllerState",
      "package" : 0,
      "type" : "Named",
      "underlying" : 120
    }, {
      "fields" : [ {
        "name" : "scanWork",
        "type" : 121
      }, {
        "name" : "bgScanCredit",
        "type" : 121
      }, {
        "name" : "assistTime",
        "type" : 121
      }, {
        "name" : "dedicatedMarkTime",
        "type" : 121
      }, {
        "name" : "fractionalMarkTime",
        "type" : 121
      }, {
        "name" : "idleMarkTime",
        "type" : 121
      }, {
        "name" : "markStartTime",
        "type" : 121
      }, {
        "name" : "dedicatedMarkWorkersNeeded",
        "type" : 121
      }, {
        "name" : "assistWorkPerByte",
        "type" : 58
      }, {
        "name" : "assistBytesPerWork",
        "type" : 58
      }, {
        "name" : "fractionalUtilizationGoal",
        "type" : 58
      }, {
        "name" : "_",
        "type" : 122
      } ],
      "name" : "struct{scanWork int64; bgScanCredit int64; assistTime int64; dedicatedMarkTime int64; fractionalMarkTime int64; idleMarkTime int64; markStartTime int64; dedicatedMarkWorkersNeeded int64; assistWorkPerByte float64; assistBytesPerWork float64; fractionalUtilizationGoal float64; _ internal/cpu.CacheLinePad}",
      "type" : "Struct",
      "underlying" : 120
    }, {
      "name" : "int64",
      "type" : "Basic",
      "underlying" : 121
    }, {
      "local-name" : "CacheLinePad",
      "name" : "internal/cpu.CacheLinePad",
      "package" : 2,
      "type" : "Named",
      "underlying" : 123
    }, {
      "fields" : [ {
        "name" : "_",
        "type" : 124
      } ],
      "name" : "struct{_ [64]byte}",
      "type" : "Struct",
      "underlying" : 123
    }, {
      "elem" : 28,
      "name" : "[64]byte",
      "type" : "Array",
      "underlying" : 124
    }, {
      "fields" : [ {
        "name" : "lock",
        "type" : 23
      }, {
        "name" : "lockOwner",
        "type" : 126
      }, {
        "name" : "enabled",
        "type" : 3
      }, {
        "name" : "shutdown",
        "type" : 3
      }, {
        "name" : "headerWritten",
        "type" : 3
      }, {
        "name" : "footerWritten",
        "type" : 3
      }, {
        "name" : "shutdownSema",
        "type" : 18
      }, {
        "name" : "seqStart",
        "type" : 7
      }, {
        "name" : "ticksStart",
        "type" : 121
      }, {
        "name" : "ticksEnd",
        "type" : 121
      }, {
        "name" : "timeStart",
        "type" : 121
      }, {
        "name" : "timeEnd",
        "type" : 121
      }, {
        "name" : "seqGC",
        "type" : 7
      }, {
        "name" : "reading",
        "type" : 195
      }, {
        "name" : "empty",
        "type" : 195
      }, {
        "name" : "fullHead",
        "type" : 195
      }, {
        "name" : "fullTail",
        "type" : 195
      }, {
        "name" : "reader",
        "type" : 143
      }, {
        "name" : "stackTab",
        "type" : 196
      }, {
        "name" : "stringsLock",
        "type" : 23
      }, {
        "name" : "strings",
        "type" : 203
      }, {
        "name" : "stringSeq",
        "type" : 7
      }, {
        "name" : "markWorkerLabels",
        "type" : 204
      }, {
        "name" : "bufLock",
        "type" : 23
      }, {
        "name" : "buf",
        "type" : 195
      } ],
      "name" : "struct{lock runtime.mutex; lockOwner *runtime.g; enabled bool; shutdown bool; headerWritten bool; footerWritten bool; shutdownSema uint32; seqStart uint64; ticksStart int64; ticksEnd int64; timeStart int64; timeEnd int64; seqGC uint64; reading runtime.traceBufPtr; empty runtime.traceBufPtr; fullHead runtime.traceBufPtr; fullTail runtime.traceBufPtr; reader runtime.guintptr; stackTab runtime.traceStackTable; stringsLock runtime.mutex; strings map[string]uint64; stringSeq uint64; markWorkerLabels [3]uint64; bufLock runtime.mutex; buf runtime.traceBufPtr}",
      "type" : "Struct",
      "underlying" : 125
    }, {
      "elem" : 127,
      "name" : "*runtime.g",
      "type" : "Pointer",
      "underlying" : 126
    }, {
      "local-name" : "g",
      "name" : "runtime.g",
      "package" : 0,
      "type" : "Named",
      "underlying" : 128
    }, {
      "fields" : [ {
        "name" : "stack",
        "type" : 129
      }, {
        "name" : "stackguard0",
        "type" : 2
      }, {
        "name" : "stackguard1",
        "type" : 2
      }, {
        "name" : "_panic",
        "type" : 131
      }, {
        "name" : "_defer",
        "type" : 135
      }, {
        "name" : "m",
        "type" : 138
      }, {
        "name" : "sched",
        "type" : 141
      }, {
        "name" : "syscallsp",
        "type" : 2
      }, {
        "name" : "syscallpc",
        "type" : 2
      }, {
        "name" : "stktopsp",
        "type" : 2
      }, {
        "name" : "param",
        "type" : 57
      }, {
        "name" : "atomicstatus",
        "type" : 18
      }, {
        "name" : "stackLock",
        "type" : 18
      }, {
        "name" : "goid",
        "type" : 121
      }, {
        "name" : "schedlink",
        "type" : 143
      }, {
        "name" : "waitsince",
        "type" : 121
      }, {
        "name" : "waitreason",
        "type" : 175
      }, {
        "name" : "preempt",
        "type" : 3
      }, {
        "name" : "preemptStop",
        "type" : 3
      }, {
        "name" : "preemptShrink",
        "type" : 3
      }, {
        "name" : "asyncSafePoint",
        "type" : 3
      }, {
        "name" : "paniconfault",
        "type" : 3
      }, {
        "name" : "gcscandone",
        "type" : 3
      }, {
        "name" : "throwsplit",
        "type" : 3
      }, {
        "name" : "activeStackChans",
        "type" : 3
      }, {
        "name" : "raceignore",
        "type" : 153
      }, {
        "name" : "sysblocktraced",
        "type" : 3
      }, {
        "name" : "sysexitticks",
        "type" : 121
      }, {
        "name" : "traceseq",
        "type" : 7
      }, {
        "name" : "tracelastp",
        "type" : 151
      }, {
        "name" : "lockedm",
        "type" : 158
      }, {
        "name" : "sig",
        "type" : 18
      }, {
        "name" : "writebuf",
        "type" : 176
      }, {
        "name" : "sigcode0",
        "type" : 2
      }, {
        "name" : "sigcode1",
        "type" : 2
      }, {
        "name" : "sigpc",
        "type" : 2
      }, {
        "name" : "gopc",
        "type" : 2
      }, {
        "name" : "ancestors",
        "type" : 177
      }, {
        "name" : "startpc",
        "type" : 2
      }, {
        "name" : "racectx",
        "type" : 2
      }, {
        "name" : "waiting",
        "type" : 182
      }, {
        "name" : "cgoCtxt",
        "type" : 181
      }, {
        "name" : "labels",
        "type" : 57
      }, {
        "name" : "timer",
        "type" : 190
      }, {
        "name" : "selectDone",
        "type" : 18
      }, {
        "name" : "gcAssistBytes",
        "type" : 121
      } ],
      "name" : "struct{stack runtime.stack; stackguard0 uintptr; stackguard1 uintptr; _panic *runtime._panic; _defer *runtime._defer; m *runtime.m; sched runtime.gobuf; syscallsp uintptr; syscallpc uintptr; stktopsp uintptr; param unsafe.Pointer; atomicstatus uint32; stackLock uint32; goid int64; schedlink runtime.guintptr; waitsince int64; waitreason runtime.waitReason; preempt bool; preemptStop bool; preemptShrink bool; asyncSafePoint bool; paniconfault bool; gcscandone bool; throwsplit bool; activeStackChans bool; raceignore int8; sysblocktraced bool; sysexitticks int64; traceseq uint64; tracelastp runtime.puintptr; lockedm runtime.muintptr; sig uint32; writebuf []byte; sigcode0 uintptr; sigcode1 uintptr; sigpc uintptr; gopc uintptr; ancestors *[]runtime.ancestorInfo; startpc uintptr; racectx uintptr; waiting *runtime.sudog; cgoCtxt []uintptr; labels unsafe.Pointer; timer *runtime.timer; selectDone uint32; gcAssistBytes int64}",
      "type" : "Struct",
      "underlying" : 128
    }, {
      "local-name" : "stack",
      "name" : "runtime.stack",
      "package" : 0,
      "type" : "Named",
      "underlying" : 130
    }, {
      "fields" : [ {
        "name" : "lo",
        "type" : 2
      }, {
        "name" : "hi",
        "type" : 2
      } ],
      "name" : "struct{lo uintptr; hi uintptr}",
      "type" : "Struct",
      "underlying" : 130
    }, {
      "elem" : 132,
      "name" : "*runtime._panic",
      "type" : "Pointer",
      "underlying" : 131
    }, {
      "local-name" : "_panic",
      "name" : "runtime._panic",
      "package" : 0,
      "type" : "Named",
      "underlying" : 133
    }, {
      "fields" : [ {
        "name" : "argp",
        "type" : 57
      }, {
        "name" : "arg",
        "type" : 134
      }, {
        "name" : "link",
        "type" : 131
      }, {
        "name" : "pc",
        "type" : 2
      }, {
        "name" : "sp",
        "type" : 57
      }, {
        "name" : "recovered",
        "type" : 3
      }, {
        "name" : "aborted",
        "type" : 3
      }, {
        "name" : "goexit",
        "type" : 3
      } ],
      "name" : "struct{argp unsafe.Pointer; arg interface{}; link *runtime._panic; pc uintptr; sp unsafe.Pointer; recovered bool; aborted bool; goexit bool}",
      "type" : "Struct",
      "underlying" : 133
    }, {
      "methods" : [ ],
      "name" : "interface{}",
      "type" : "Interface",
      "underlying" : 134
    }, {
      "elem" : 136,
      "name" : "*runtime._defer",
      "type" : "Pointer",
      "underlying" : 135
    }, {
      "local-name" : "_defer",
      "name" : "runtime._defer",
      "package" : 0,
      "type" : "Named",
      "underlying" : 137
    }, {
      "fields" : [ {
        "name" : "siz",
        "type" : 105
      }, {
        "name" : "started",
        "type" : 3
      }, {
        "name" : "heap",
        "type" : 3
      }, {
        "name" : "openDefer",
        "type" : 3
      }, {
        "name" : "sp",
        "type" : 2
      }, {
        "name" : "pc",
        "type" : 2
      }, {
        "name" : "fn",
        "type" : 93
      }, {
        "name" : "_panic",
        "type" : 131
      }, {
        "name" : "link",
        "type" : 135
      }, {
        "name" : "fd",
        "type" : 57
      }, {
        "name" : "varp",
        "type" : 2
      }, {
        "name" : "framepc",
        "type" : 2
      } ],
      "name" : "struct{siz int32; started bool; heap bool; openDefer bool; sp uintptr; pc uintptr; fn *runtime.funcval; _panic *runtime._panic; link *runtime._defer; fd unsafe.Pointer; varp uintptr; framepc uintptr}",
      "type" : "Struct",
      "underlying" : 137
    }, {
      "elem" : 139,
      "name" : "*runtime.m",
      "type" : "Pointer",
      "underlying" : 138
    }, {
      "local-name" : "m",
      "name" : "runtime.m",
      "package" : 0,
      "type" : "Named",
      "underlying" : 140
    }, {
      "fields" : [ {
        "name" : "g0",
        "type" : 126
      }, {
        "name" : "morebuf",
        "type" : 141
      }, {
        "name" : "divmod",
        "type" : 18
      }, {
        "name" : "procid",
        "type" : 7
      }, {
        "name" : "gsignal",
        "type" : 126
      }, {
        "name" : "goSigStack",
        "type" : 145
      }, {
        "name" : "sigmask",
        "type" : 147
      }, {
        "name" : "tls",
        "type" : 149
      }, {
        "name" : "mstartfn",
        "type" : 150
      }, {
        "name" : "curg",
        "type" : 126
      }, {
        "name" : "caughtsig",
        "type" : 143
      }, {
        "name" : "p",
        "type" : 151
      }, {
        "name" : "nextp",
        "type" : 151
      }, {
        "name" : "oldp",
        "type" : 151
      }, {
        "name" : "id",
        "type" : 121
      }, {
        "name" : "mallocing",
        "type" : 105
      }, {
        "name" : "throwing",
        "type" : 105
      }, {
        "name" : "preemptoff",
        "type" : 152
      }, {
        "name" : "locks",
        "type" : 105
      }, {
        "name" : "dying",
        "type" : 105
      }, {
        "name" : "profilehz",
        "type" : 105
      }, {
        "name" : "spinning",
        "type" : 3
      }, {
        "name" : "blocked",
        "type" : 3
      }, {
        "name" : "newSigstack",
        "type" : 3
      }, {
        "name" : "printlock",
        "type" : 153
      }, {
        "name" : "incgo",
        "type" : 3
      }, {
        "name" : "freeWait",
        "type" : 18
      }, {
        "name" : "fastrand",
        "type" : 148
      }, {
        "name" : "needextram",
        "type" : 3
      }, {
        "name" : "traceback",
        "type" : 5
      }, {
        "name" : "ncgocall",
        "type" : 7
      }, {
        "name" : "ncgo",
        "type" : 105
      }, {
        "name" : "cgoCallersUse",
        "type" : 18
      }, {
        "name" : "cgoCallers",
        "type" : 154
      }, {
        "name" : "park",
        "type" : 157
      }, {
        "name" : "alllink",
        "type" : 138
      }, {
        "name" : "schedlink",
        "type" : 158
      }, {
        "name" : "mcache",
        "type" : 159
      }, {
        "name" : "lockedg",
        "type" : 143
      }, {
        "name" : "createstack",
        "type" : 156
      }, {
        "name" : "lockedExt",
        "type" : 18
      }, {
        "name" : "lockedInt",
        "type" : 18
      }, {
        "name" : "nextwaitm",
        "type" : 158
      }, {
        "name" : "waitunlockf",
        "type" : 167
      }, {
        "name" : "waitlock",
        "type" : 57
      }, {
        "name" : "waittraceev",
        "type" : 28
      }, {
        "name" : "waittraceskip",
        "type" : 169
      }, {
        "name" : "startingtrace",
        "type" : 3
      }, {
        "name" : "syscalltick",
        "type" : 18
      }, {
        "name" : "freelink",
        "type" : 138
      }, {
        "name" : "libcall",
        "type" : 170
      }, {
        "name" : "libcallpc",
        "type" : 2
      }, {
        "name" : "libcallsp",
        "type" : 2
      }, {
        "name" : "libcallg",
        "type" : 143
      }, {
        "name" : "syscall",
        "type" : 170
      }, {
        "name" : "vdsoSP",
        "type" : 2
      }, {
        "name" : "vdsoPC",
        "type" : 2
      }, {
        "name" : "preemptGen",
        "type" : 18
      }, {
        "name" : "signalPending",
        "type" : 18
      }, {
        "name" : "dlogPerM",
        "type" : 172
      }, {
        "name" : "mOS",
        "type" : 174
      } ],
      "name" : "struct{g0 *runtime.g; morebuf runtime.gobuf; divmod uint32; procid uint64; gsignal *runtime.g; goSigStack runtime.gsignalStack; sigmask runtime.sigset; tls [6]uintptr; mstartfn func(); curg *runtime.g; caughtsig runtime.guintptr; p runtime.puintptr; nextp runtime.puintptr; oldp runtime.puintptr; id int64; mallocing int32; throwing int32; preemptoff string; locks int32; dying int32; profilehz int32; spinning bool; blocked bool; newSigstack bool; printlock int8; incgo bool; freeWait uint32; fastrand [2]uint32; needextram bool; traceback uint8; ncgocall uint64; ncgo int32; cgoCallersUse uint32; cgoCallers *runtime.cgoCallers; park runtime.note; alllink *runtime.m; schedlink runtime.muintptr; mcache *runtime.mcache; lockedg runtime.guintptr; createstack [32]uintptr; lockedExt uint32; lockedInt uint32; nextwaitm runtime.muintptr; waitunlockf func(*runtime.g, unsafe.Pointer) bool; waitlock unsafe.Pointer; waittraceev byte; waittraceskip int; startingtrace bool; syscalltick uint32; freelink *runtime.m; libcall runtime.libcall; libcallpc uintptr; libcallsp uintptr; libcallg runtime.guintptr; syscall runtime.libcall; vdsoSP uintptr; vdsoPC uintptr; preemptGen uint32; signalPending uint32; runtime.dlogPerM; runtime.mOS}",
      "type" : "Struct",
      "underlying" : 140
    }, {
      "local-name" : "gobuf",
      "name" : "runtime.gobuf",
      "package" : 0,
      "type" : "Named",
      "underlying" : 142
    }, {
      "fields" : [ {
        "name" : "sp",
        "type" : 2
      }, {
        "name" : "pc",
        "type" : 2
      }, {
        "name" : "g",
        "type" : 143
      }, {
        "name" : "ctxt",
        "type" : 57
      }, {
        "name" : "ret",
        "type" : 144
      }, {
        "name" : "lr",
        "type" : 2
      }, {
        "name" : "bp",
        "type" : 2
      } ],
      "name" : "struct{sp uintptr; pc uintptr; g runtime.guintptr; ctxt unsafe.Pointer; ret runtime/internal/sys.Uintreg; lr uintptr; bp uintptr}",
      "type" : "Struct",
      "underlying" : 142
    }, {
      "local-name" : "guintptr",
      "name" : "runtime.guintptr",
      "package" : 0,
      "type" : "Named",
      "underlying" : 2
    }, {
      "local-name" : "Uintreg",
      "name" : "runtime/internal/sys.Uintreg",
      "package" : 3,
      "type" : "Named",
      "underlying" : 7
    }, {
      "local-name" : "gsignalStack",
      "name" : "runtime.gsignalStack",
      "package" : 0,
      "type" : "Named",
      "underlying" : 146
    }, {
      "fields" : [ {
        "name" : "stack",
        "type" : 129
      }, {
        "name" : "stackguard0",
        "type" : 2
      }, {
        "name" : "stackguard1",
        "type" : 2
      }, {
        "name" : "stktopsp",
        "type" : 2
      } ],
      "name" : "struct{stack runtime.stack; stackguard0 uintptr; stackguard1 uintptr; stktopsp uintptr}",
      "type" : "Struct",
      "underlying" : 146
    }, {
      "local-name" : "sigset",
      "name" : "runtime.sigset",
      "package" : 0,
      "type" : "Named",
      "underlying" : 148
    }, {
      "elem" : 18,
      "name" : "[2]uint32",
      "type" : "Array",
      "underlying" : 148
    }, {
      "elem" : 2,
      "name" : "[6]uintptr",
      "type" : "Array",
      "underlying" : 149
    }, {
      "name" : "func()",
      "params" : 86,
      "recv" : -1,
      "results" : 86,
      "type" : "Signature",
      "underlying" : 150,
      "variadic" : false
    }, {
      "local-name" : "puintptr",
      "name" : "runtime.puintptr",
      "package" : 0,
      "type" : "Named",
      "underlying" : 2
    }, {
      "name" : "string",
      "type" : "Basic",
      "underlying" : 152
    }, {
      "name" : "int8",
      "type" : "Basic",
      "underlying" : 153
    }, {
      "elem" : 155,
      "name" : "*runtime.cgoCallers",
      "type" : "Pointer",
      "underlying" : 154
    }, {
      "local-name" : "cgoCallers",
      "name" : "runtime.cgoCallers",
      "package" : 0,
      "type" : "Named",
      "underlying" : 156
    }, {
      "elem" : 2,
      "name" : "[32]uintptr",
      "type" : "Array",
      "underlying" : 156
    }, {
      "local-name" : "note",
      "name" : "runtime.note",
      "package" : 0,
      "type" : "Named",
      "underlying" : 24
    }, {
      "local-name" : "muintptr",
      "name" : "runtime.muintptr",
      "package" : 0,
      "type" : "Named",
      "underlying" : 2
    }, {
      "elem" : 160,
      "name" : "*runtime.mcache",
      "type" : "Pointer",
      "underlying" : 159
    }, {
      "local-name" : "mcache",
      "name" : "runtime.mcache",
      "package" : 0,
      "type" : "Named",
      "underlying" : 161
    }, {
      "fields" : [ {
        "name" : "next_sample",
        "type" : 2
      }, {
        "name" : "local_scan",
        "type" : 2
      }, {
        "name" : "tiny",
        "type" : 2
      }, {
        "name" : "tinyoffset",
        "type" : 2
      }, {
        "name" : "local_tinyallocs",
        "type" : 2
      }, {
        "name" : "alloc",
        "type" : 162
      }, {
        "name" : "stackcache",
        "type" : 163
      }, {
        "name" : "local_largefree",
        "type" : 2
      }, {
        "name" : "local_nlargefree",
        "type" : 2
      }, {
        "name" : "local_nsmallfree",
        "type" : 166
      }, {
        "name" : "flushGen",
        "type" : 18
      } ],
      "name" : "struct{next_sample uintptr; local_scan uintptr; tiny uintptr; tinyoffset uintptr; local_tinyallocs uintptr; alloc [134]*runtime.mspan; stackcache [4]runtime.stackfreelist; local_largefree uintptr; local_nlargefree uintptr; local_nsmallfree [67]uintptr; flushGen uint32}",
      "type" : "Struct",
      "underlying" : 161
    }, {
      "elem" : 9,
      "name" : "[134]*runtime.mspan",
      "type" : "Array",
      "underlying" : 162
    }, {
      "elem" : 164,
      "name" : "[4]runtime.stackfreelist",
      "type" : "Array",
      "underlying" : 163
    }, {
      "local-name" : "stackfreelist",
      "name" : "runtime.stackfreelist",
      "package" : 0,
      "type" : "Named",
      "underlying" : 165
    }, {
      "fields" : [ {
        "name" : "list",
        "type" : 15
      }, {
        "name" : "size",
        "type" : 2
      } ],
      "name" : "struct{list runtime.gclinkptr; size uintptr}",
      "type" : "Struct",
      "underlying" : 165
    }, {
      "elem" : 2,
      "name" : "[67]uintptr",
      "type" : "Array",
      "underlying" : 166
    }, {
      "name" : "func(*runtime.g, unsafe.Pointer) bool",
      "params" : 168,
      "recv" : -1,
      "results" : 102,
      "type" : "Signature",
      "underlying" : 167,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 126
      }, {
        "name" : "",
        "type" : 57
      } ],
      "name" : "(*runtime.g, unsafe.Pointer)",
      "type" : "Tuple",
      "underlying" : 168
    }, {
      "name" : "int",
      "type" : "Basic",
      "underlying" : 169
    }, {
      "local-name" : "libcall",
      "name" : "runtime.libcall",
      "package" : 0,
      "type" : "Named",
      "underlying" : 171
    }, {
      "fields" : [ {
        "name" : "fn",
        "type" : 2
      }, {
        "name" : "n",
        "type" : 2
      }, {
        "name" : "args",
        "type" : 2
      }, {
        "name" : "r1",
        "type" : 2
      }, {
        "name" : "r2",
        "type" : 2
      }, {
        "name" : "err",
        "type" : 2
      } ],
      "name" : "struct{fn uintptr; n uintptr; args uintptr; r1 uintptr; r2 uintptr; err uintptr}",
      "type" : "Struct",
      "underlying" : 171
    }, {
      "local-name" : "dlogPerM",
      "name" : "runtime.dlogPerM",
      "package" : 0,
      "type" : "Named",
      "underlying" : 173
    }, {
      "fields" : [ ],
      "name" : "struct{}",
      "type" : "Struct",
      "underlying" : 173
    }, {
      "local-name" : "mOS",
      "name" : "runtime.mOS",
      "package" : 0,
      "type" : "Named",
      "underlying" : 173
    }, {
      "local-name" : "waitReason",
      "name" : "runtime.waitReason",
      "package" : 0,
      "type" : "Named",
      "underlying" : 5
    }, {
      "elem" : 28,
      "name" : "[]byte",
      "type" : "Slice",
      "underlying" : 176
    }, {
      "elem" : 178,
      "name" : "*[]runtime.ancestorInfo",
      "type" : "Pointer",
      "underlying" : 177
    }, {
      "elem" : 179,
      "name" : "[]runtime.ancestorInfo",
      "type" : "Slice",
      "underlying" : 178
    }, {
      "local-name" : "ancestorInfo",
      "name" : "runtime.ancestorInfo",
      "package" : 0,
      "type" : "Named",
      "underlying" : 180
    }, {
      "fields" : [ {
        "name" : "pcs",
        "type" : 181
      }, {
        "name" : "goid",
        "type" : 121
      }, {
        "name" : "gopc",
        "type" : 2
      } ],
      "name" : "struct{pcs []uintptr; goid int64; gopc uintptr}",
      "type" : "Struct",
      "underlying" : 180
    }, {
      "elem" : 2,
      "name" : "[]uintptr",
      "type" : "Slice",
      "underlying" : 181
    }, {
      "elem" : 183,
      "name" : "*runtime.sudog",
      "type" : "Pointer",
      "underlying" : 182
    }, {
      "local-name" : "sudog",
      "name" : "runtime.sudog",
      "package" : 0,
      "type" : "Named",
      "underlying" : 184
    }, {
      "fields" : [ {
        "name" : "g",
        "type" : 126
      }, {
        "name" : "isSelect",
        "type" : 3
      }, {
        "name" : "next",
        "type" : 182
      }, {
        "name" : "prev",
        "type" : 182
      }, {
        "name" : "elem",
        "type" : 57
      }, {
        "name" : "acquiretime",
        "type" : 121
      }, {
        "name" : "releasetime",
        "type" : 121
      }, {
        "name" : "ticket",
        "type" : 18
      }, {
        "name" : "parent",
        "type" : 182
      }, {
        "name" : "waitlink",
        "type" : 182
      }, {
        "name" : "waittail",
        "type" : 182
      }, {
        "name" : "c",
        "type" : 185
      } ],
      "name" : "struct{g *runtime.g; isSelect bool; next *runtime.sudog; prev *runtime.sudog; elem unsafe.Pointer; acquiretime int64; releasetime int64; ticket uint32; parent *runtime.sudog; waitlink *runtime.sudog; waittail *runtime.sudog; c *runtime.hchan}",
      "type" : "Struct",
      "underlying" : 184
    }, {
      "elem" : 186,
      "name" : "*runtime.hchan",
      "type" : "Pointer",
      "underlying" : 185
    }, {
      "local-name" : "hchan",
      "name" : "runtime.hchan",
      "package" : 0,
      "type" : "Named",
      "underlying" : 187
    }, {
      "fields" : [ {
        "name" : "qcount",
        "type" : 46
      }, {
        "name" : "dataqsiz",
        "type" : 46
      }, {
        "name" : "buf",
        "type" : 57
      }, {
        "name" : "elemsize",
        "type" : 19
      }, {
        "name" : "closed",
        "type" : 18
      }, {
        "name" : "elemtype",
        "type" : 96
      }, {
        "name" : "sendx",
        "type" : 46
      }, {
        "name" : "recvx",
        "type" : 46
      }, {
        "name" : "recvq",
        "type" : 188
      }, {
        "name" : "sendq",
        "type" : 188
      }, {
        "name" : "lock",
        "type" : 23
      } ],
      "name" : "struct{qcount uint; dataqsiz uint; buf unsafe.Pointer; elemsize uint16; closed uint32; elemtype *runtime._type; sendx uint; recvx uint; recvq runtime.waitq; sendq runtime.waitq; lock runtime.mutex}",
      "type" : "Struct",
      "underlying" : 187
    }, {
      "local-name" : "waitq",
      "name" : "runtime.waitq",
      "package" : 0,
      "type" : "Named",
      "underlying" : 189
    }, {
      "fields" : [ {
        "name" : "first",
        "type" : 182
      }, {
        "name" : "last",
        "type" : 182
      } ],
      "name" : "struct{first *runtime.sudog; last *runtime.sudog}",
      "type" : "Struct",
      "underlying" : 189
    }, {
      "elem" : 191,
      "name" : "*runtime.timer",
      "type" : "Pointer",
      "underlying" : 190
    }, {
      "local-name" : "timer",
      "name" : "runtime.timer",
      "package" : 0,
      "type" : "Named",
      "underlying" : 192
    }, {
      "fields" : [ {
        "name" : "pp",
        "type" : 151
      }, {
        "name" : "when",
        "type" : 121
      }, {
        "name" : "period",
        "type" : 121
      }, {
        "name" : "f",
        "type" : 193
      }, {
        "name" : "arg",
        "type" : 134
      }, {
        "name" : "seq",
        "type" : 2
      }, {
        "name" : "nextwhen",
        "type" : 121
      }, {
        "name" : "status",
        "type" : 18
      } ],
      "name" : "struct{pp runtime.puintptr; when int64; period int64; f func(interface{}, uintptr); arg interface{}; seq uintptr; nextwhen int64; status uint32}",
      "type" : "Struct",
      "underlying" : 192
    }, {
      "name" : "func(interface{}, uintptr)",
      "params" : 194,
      "recv" : -1,
      "results" : 86,
      "type" : "Signature",
      "underlying" : 193,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 134
      }, {
        "name" : "",
        "type" : 2
      } ],
      "name" : "(interface{}, uintptr)",
      "type" : "Tuple",
      "underlying" : 194
    }, {
      "local-name" : "traceBufPtr",
      "name" : "runtime.traceBufPtr",
      "package" : 0,
      "type" : "Named",
      "underlying" : 2
    }, {
      "local-name" : "traceStackTable",
      "name" : "runtime.traceStackTable",
      "package" : 0,
      "type" : "Named",
      "underlying" : 197
    }, {
      "fields" : [ {
        "name" : "lock",
        "type" : 23
      }, {
        "name" : "seq",
        "type" : 18
      }, {
        "name" : "mem",
        "type" : 198
      }, {
        "name" : "tab",
        "type" : 201
      } ],
      "name" : "struct{lock runtime.mutex; seq uint32; mem runtime.traceAlloc; tab [8192]runtime.traceStackPtr}",
      "type" : "Struct",
      "underlying" : 197
    }, {
      "local-name" : "traceAlloc",
      "name" : "runtime.traceAlloc",
      "package" : 0,
      "type" : "Named",
      "underlying" : 199
    }, {
      "fields" : [ {
        "name" : "head",
        "type" : 200
      }, {
        "name" : "off",
        "type" : 2
      } ],
      "name" : "struct{head runtime.traceAllocBlockPtr; off uintptr}",
      "type" : "Struct",
      "underlying" : 199
    }, {
      "local-name" : "traceAllocBlockPtr",
      "name" : "runtime.traceAllocBlockPtr",
      "package" : 0,
      "type" : "Named",
      "underlying" : 2
    }, {
      "elem" : 202,
      "name" : "[8192]runtime.traceStackPtr",
      "type" : "Array",
      "underlying" : 201
    }, {
      "local-name" : "traceStackPtr",
      "name" : "runtime.traceStackPtr",
      "package" : 0,
      "type" : "Named",
      "underlying" : 2
    }, {
      "elem" : 7,
      "key" : 152,
      "name" : "map[string]uint64",
      "type" : "Map",
      "underlying" : 203
    }, {
      "elem" : 7,
      "name" : "[3]uint64",
      "type" : "Array",
      "underlying" : 204
    }, {
      "name" : "func() *runtime.g",
      "params" : 86,
      "recv" : -1,
      "results" : 206,
      "type" : "Signature",
      "underlying" : 205,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 126
      } ],
      "name" : "(*runtime.g)",
      "type" : "Tuple",
      "underlying" : 206
    }, {
      "elem" : 208,
      "name" : "*runtime.p",
      "type" : "Pointer",
      "underlying" : 207
    }, {
      "local-name" : "p",
      "name" : "runtime.p",
      "package" : 0,
      "type" : "Named",
      "underlying" : 209
    }, {
      "fields" : [ {
        "name" : "id",
        "type" : 105
      }, {
        "name" : "status",
        "type" : 18
      }, {
        "name" : "link",
        "type" : 151
      }, {
        "name" : "schedtick",
        "type" : 18
      }, {
        "name" : "syscalltick",
        "type" : 18
      }, {
        "name" : "sysmontick",
        "type" : 210
      }, {
        "name" : "m",
        "type" : 158
      }, {
        "name" : "mcache",
        "type" : 159
      }, {
        "name" : "pcache",
        "type" : 212
      }, {
        "name" : "raceprocctx",
        "type" : 2
      }, {
        "name" : "deferpool",
        "type" : 214
      }, {
        "name" : "deferpoolbuf",
        "type" : 216
      }, {
        "name" : "goidcache",
        "type" : 7
      }, {
        "name" : "goidcacheend",
        "type" : 7
      }, {
        "name" : "runqhead",
        "type" : 18
      }, {
        "name" : "runqtail",
        "type" : 18
      }, {
        "name" : "runq",
        "type" : 218
      }, {
        "name" : "runnext",
        "type" : 143
      }, {
        "name" : "gFree",
        "type" : 219
      }, {
        "name" : "sudogcache",
        "type" : 222
      }, {
        "name" : "sudogbuf",
        "type" : 223
      }, {
        "name" : "mspancache",
        "type" : 224
      }, {
        "name" : "tracebuf",
        "type" : 195
      }, {
        "name" : "traceSweep",
        "type" : 3
      }, {
        "name" : "traceSwept",
        "type" : 2
      }, {
        "name" : "traceReclaimed",
        "type" : 2
      }, {
        "name" : "palloc",
        "type" : 226
      }, {
        "name" : "_",
        "type" : 18
      }, {
        "name" : "timer0When",
        "type" : 7
      }, {
        "name" : "gcAssistTime",
        "type" : 121
      }, {
        "name" : "gcFractionalMarkTime",
        "type" : 121
      }, {
        "name" : "gcBgMarkWorker",
        "type" : 143
      }, {
        "name" : "gcMarkWorkerMode",
        "type" : 230
      }, {
        "name" : "gcMarkWorkerStartTime",
        "type" : 121
      }, {
        "name" : "gcw",
        "type" : 231
      }, {
        "name" : "wbBuf",
        "type" : 242
      }, {
        "name" : "runSafePointFn",
        "type" : 18
      }, {
        "name" : "timersLock",
        "type" : 23
      }, {
        "name" : "timers",
        "type" : 245
      }, {
        "name" : "numTimers",
        "type" : 18
      }, {
        "name" : "adjustTimers",
        "type" : 18
      }, {
        "name" : "deletedTimers",
        "type" : 18
      }, {
        "name" : "timerRaceCtx",
        "type" : 2
      }, {
        "name" : "preempt",
        "type" : 3
      }, {
        "name" : "pad",
        "type" : 122
      } ],
      "name" : "struct{id int32; status uint32; link runtime.puintptr; schedtick uint32; syscalltick uint32; sysmontick runtime.sysmontick; m runtime.muintptr; mcache *runtime.mcache; pcache runtime.pageCache; raceprocctx uintptr; deferpool [5][]*runtime._defer; deferpoolbuf [5][32]*runtime._defer; goidcache uint64; goidcacheend uint64; runqhead uint32; runqtail uint32; runq [256]runtime.guintptr; runnext runtime.guintptr; gFree struct{runtime.gList; n int32}; sudogcache []*runtime.sudog; sudogbuf [128]*runtime.sudog; mspancache struct{len int; buf [128]*runtime.mspan}; tracebuf runtime.traceBufPtr; traceSweep bool; traceSwept uintptr; traceReclaimed uintptr; palloc runtime.persistentAlloc; _ uint32; timer0When uint64; gcAssistTime int64; gcFractionalMarkTime int64; gcBgMarkWorker runtime.guintptr; gcMarkWorkerMode runtime.gcMarkWorkerMode; gcMarkWorkerStartTime int64; gcw runtime.gcWork; wbBuf runtime.wbBuf; runSafePointFn uint32; timersLock runtime.mutex; timers []*runtime.timer; numTimers uint32; adjustTimers uint32; deletedTimers uint32; timerRaceCtx uintptr; preempt bool; pad internal/cpu.CacheLinePad}",
      "type" : "Struct",
      "underlying" : 209
    }, {
      "local-name" : "sysmontick",
      "name" : "runtime.sysmontick",
      "package" : 0,
      "type" : "Named",
      "underlying" : 211
    }, {
      "fields" : [ {
        "name" : "schedtick",
        "type" : 18
      }, {
        "name" : "schedwhen",
        "type" : 121
      }, {
        "name" : "syscalltick",
        "type" : 18
      }, {
        "name" : "syscallwhen",
        "type" : 121
      } ],
      "name" : "struct{schedtick uint32; schedwhen int64; syscalltick uint32; syscallwhen int64}",
      "type" : "Struct",
      "underlying" : 211
    }, {
      "local-name" : "pageCache",
      "name" : "runtime.pageCache",
      "package" : 0,
      "type" : "Named",
      "underlying" : 213
    }, {
      "fields" : [ {
        "name" : "base",
        "type" : 2
      }, {
        "name" : "cache",
        "type" : 7
      }, {
        "name" : "scav",
        "type" : 7
      } ],
      "name" : "struct{base uintptr; cache uint64; scav uint64}",
      "type" : "Struct",
      "underlying" : 213
    }, {
      "elem" : 215,
      "name" : "[5][]*runtime._defer",
      "type" : "Array",
      "underlying" : 214
    }, {
      "elem" : 135,
      "name" : "[]*runtime._defer",
      "type" : "Slice",
      "underlying" : 215
    }, {
      "elem" : 217,
      "name" : "[5][32]*runtime._defer",
      "type" : "Array",
      "underlying" : 216
    }, {
      "elem" : 135,
      "name" : "[32]*runtime._defer",
      "type" : "Array",
      "underlying" : 217
    }, {
      "elem" : 143,
      "name" : "[256]runtime.guintptr",
      "type" : "Array",
      "underlying" : 218
    }, {
      "fields" : [ {
        "name" : "gList",
        "type" : 220
      }, {
        "name" : "n",
        "type" : 105
      } ],
      "name" : "struct{runtime.gList; n int32}",
      "type" : "Struct",
      "underlying" : 219
    }, {
      "local-name" : "gList",
      "name" : "runtime.gList",
      "package" : 0,
      "type" : "Named",
      "underlying" : 221
    }, {
      "fields" : [ {
        "name" : "head",
        "type" : 143
      } ],
      "name" : "struct{head runtime.guintptr}",
      "type" : "Struct",
      "underlying" : 221
    }, {
      "elem" : 182,
      "name" : "[]*runtime.sudog",
      "type" : "Slice",
      "underlying" : 222
    }, {
      "elem" : 182,
      "name" : "[128]*runtime.sudog",
      "type" : "Array",
      "underlying" : 223
    }, {
      "fields" : [ {
        "name" : "len",
        "type" : 169
      }, {
        "name" : "buf",
        "type" : 225
      } ],
      "name" : "struct{len int; buf [128]*runtime.mspan}",
      "type" : "Struct",
      "underlying" : 224
    }, {
      "elem" : 9,
      "name" : "[128]*runtime.mspan",
      "type" : "Array",
      "underlying" : 225
    }, {
      "local-name" : "persistentAlloc",
      "name" : "runtime.persistentAlloc",
      "package" : 0,
      "type" : "Named",
      "underlying" : 227
    }, {
      "fields" : [ {
        "name" : "base",
        "type" : 228
      }, {
        "name" : "off",
        "type" : 2
      } ],
      "name" : "struct{base *runtime.notInHeap; off uintptr}",
      "type" : "Struct",
      "underlying" : 227
    }, {
      "elem" : 229,
      "name" : "*runtime.notInHeap",
      "type" : "Pointer",
      "underlying" : 228
    }, {
      "local-name" : "notInHeap",
      "name" : "runtime.notInHeap",
      "package" : 0,
      "type" : "Named",
      "underlying" : 173
    }, {
      "local-name" : "gcMarkWorkerMode",
      "name" : "runtime.gcMarkWorkerMode",
      "package" : 0,
      "type" : "Named",
      "underlying" : 169
    }, {
      "local-name" : "gcWork",
      "name" : "runtime.gcWork",
      "package" : 0,
      "type" : "Named",
      "underlying" : 232
    }, {
      "fields" : [ {
        "name" : "wbuf1",
        "type" : 233
      }, {
        "name" : "wbuf2",
        "type" : 233
      }, {
        "name" : "bytesMarked",
        "type" : 7
      }, {
        "name" : "scanWork",
        "type" : 121
      }, {
        "name" : "flushedWork",
        "type" : 3
      }, {
        "name" : "pauseGen",
        "type" : 18
      }, {
        "name" : "putGen",
        "type" : 18
      }, {
        "name" : "pauseStack",
        "type" : 241
      } ],
      "name" : "struct{wbuf1 *runtime.workbuf; wbuf2 *runtime.workbuf; bytesMarked uint64; scanWork int64; flushedWork bool; pauseGen uint32; putGen uint32; pauseStack [16]uintptr}",
      "type" : "Struct",
      "underlying" : 232
    }, {
      "elem" : 234,
      "name" : "*runtime.workbuf",
      "type" : "Pointer",
      "underlying" : 233
    }, {
      "local-name" : "workbuf",
      "name" : "runtime.workbuf",
      "package" : 0,
      "type" : "Named",
      "underlying" : 235
    }, {
      "fields" : [ {
        "name" : "workbufhdr",
        "type" : 236
      }, {
        "name" : "obj",
        "type" : 240
      } ],
      "name" : "struct{runtime.workbufhdr; obj [253]uintptr}",
      "type" : "Struct",
      "underlying" : 235
    }, {
      "local-name" : "workbufhdr",
      "name" : "runtime.workbufhdr",
      "package" : 0,
      "type" : "Named",
      "underlying" : 237
    }, {
      "fields" : [ {
        "name" : "node",
        "type" : 238
      }, {
        "name" : "nobj",
        "type" : 169
      } ],
      "name" : "struct{node runtime.lfnode; nobj int}",
      "type" : "Struct",
      "underlying" : 237
    }, {
      "local-name" : "lfnode",
      "name" : "runtime.lfnode",
      "package" : 0,
      "type" : "Named",
      "underlying" : 239
    }, {
      "fields" : [ {
        "name" : "next",
        "type" : 7
      }, {
        "name" : "pushcnt",
        "type" : 2
      } ],
      "name" : "struct{next uint64; pushcnt uintptr}",
      "type" : "Struct",
      "underlying" : 239
    }, {
      "elem" : 2,
      "name" : "[253]uintptr",
      "type" : "Array",
      "underlying" : 240
    }, {
      "elem" : 2,
      "name" : "[16]uintptr",
      "type" : "Array",
      "underlying" : 241
    }, {
      "local-name" : "wbBuf",
      "name" : "runtime.wbBuf",
      "package" : 0,
      "type" : "Named",
      "underlying" : 243
    }, {
      "fields" : [ {
        "name" : "next",
        "type" : 2
      }, {
        "name" : "end",
        "type" : 2
      }, {
        "name" : "buf",
        "type" : 244
      }, {
        "name" : "debugGen",
        "type" : 18
      } ],
      "name" : "struct{next uintptr; end uintptr; buf [512]uintptr; debugGen uint32}",
      "type" : "Struct",
      "underlying" : 243
    }, {
      "elem" : 2,
      "name" : "[512]uintptr",
      "type" : "Array",
      "underlying" : 244
    }, {
      "elem" : 190,
      "name" : "[]*runtime.timer",
      "type" : "Slice",
      "underlying" : 245
    }, {
      "name" : "func() *runtime.p",
      "params" : 86,
      "recv" : -1,
      "results" : 247,
      "type" : "Signature",
      "underlying" : 246,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 207
      } ],
      "name" : "(*runtime.p)",
      "type" : "Tuple",
      "underlying" : 247
    }, {
      "name" : "untyped bool",
      "type" : "Basic",
      "underlying" : 248
    }, {
      "name" : "untyped nil",
      "type" : "Basic",
      "underlying" : 249
    }, {
      "elem" : 212,
      "name" : "*runtime.pageCache",
      "type" : "Pointer",
      "underlying" : 250
    }, {
      "name" : "func() bool",
      "params" : 86,
      "recv" : -1,
      "results" : 102,
      "type" : "Signature",
      "underlying" : 251,
      "variadic" : false
    }, {
      "name" : "func(l *runtime.mutex)",
      "params" : 253,
      "recv" : -1,
      "results" : 86,
      "type" : "Signature",
      "underlying" : 252,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "l",
        "type" : 52
      } ],
      "name" : "(l *runtime.mutex)",
      "type" : "Tuple",
      "underlying" : 253
    }, {
      "name" : "func() runtime.pageCache",
      "params" : 86,
      "recv" : -1,
      "results" : 255,
      "type" : "Signature",
      "underlying" : 254,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 212
      } ],
      "name" : "(runtime.pageCache)",
      "type" : "Tuple",
      "underlying" : 255
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 2
      }, {
        "name" : "",
        "type" : 2
      } ],
      "name" : "(uintptr, uintptr)",
      "type" : "Tuple",
      "underlying" : 256
    }, {
      "name" : "func(npages uintptr) (uintptr, uintptr)",
      "params" : 258,
      "recv" : -1,
      "results" : 256,
      "type" : "Signature",
      "underlying" : 257,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "npages",
        "type" : 2
      } ],
      "name" : "(npages uintptr)",
      "type" : "Tuple",
      "underlying" : 258
    }, {
      "name" : "func() *runtime.mspan",
      "params" : 86,
      "recv" : -1,
      "results" : 260,
      "type" : "Signature",
      "underlying" : 259,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 9
      } ],
      "name" : "(*runtime.mspan)",
      "type" : "Tuple",
      "underlying" : 260
    }, {
      "name" : "func() int8",
      "params" : 86,
      "recv" : -1,
      "results" : 262,
      "type" : "Signature",
      "underlying" : 261,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 153
      } ],
      "name" : "(int8)",
      "type" : "Tuple",
      "underlying" : 262
    }, {
      "fields" : [ {
        "name" : "addr",
        "type" : 2
      }, {
        "name" : "scav",
        "type" : 2
      } ],
      "name" : "(addr uintptr, scav uintptr)",
      "type" : "Tuple",
      "underlying" : 263
    }, {
      "name" : "func(npages uintptr) (addr uintptr, scav uintptr)",
      "params" : 258,
      "recv" : -1,
      "results" : 263,
      "type" : "Signature",
      "underlying" : 264,
      "variadic" : false
    }, {
      "name" : "func(npage uintptr) bool",
      "params" : 266,
      "recv" : -1,
      "results" : 102,
      "type" : "Signature",
      "underlying" : 265,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "npage",
        "type" : 2
      } ],
      "name" : "(npage uintptr)",
      "type" : "Tuple",
      "underlying" : 266
    }, {
      "name" : "func(s string)",
      "params" : 268,
      "recv" : -1,
      "results" : 86,
      "type" : "Signature",
      "underlying" : 267,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "s",
        "type" : 152
      } ],
      "name" : "(s string)",
      "type" : "Tuple",
      "underlying" : 268
    }, {
      "name" : "func(ptr *uint64, delta int64) uint64",
      "params" : 270,
      "recv" : -1,
      "results" : 271,
      "type" : "Signature",
      "underlying" : 269,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "ptr",
        "type" : 6
      }, {
        "name" : "delta",
        "type" : 121
      } ],
      "name" : "(ptr *uint64, delta int64)",
      "type" : "Tuple",
      "underlying" : 270
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 7
      } ],
      "name" : "(uint64)",
      "type" : "Tuple",
      "underlying" : 271
    }, {
      "name" : "func(base uintptr, npages uintptr)",
      "params" : 273,
      "recv" : -1,
      "results" : 86,
      "type" : "Signature",
      "underlying" : 272,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "base",
        "type" : 2
      }, {
        "name" : "npages",
        "type" : 2
      } ],
      "name" : "(base uintptr, npages uintptr)",
      "type" : "Tuple",
      "underlying" : 273
    }, {
      "name" : "func(base uintptr, npage uintptr) (needZero bool)",
      "params" : 275,
      "recv" : -1,
      "results" : 276,
      "type" : "Signature",
      "underlying" : 274,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "base",
        "type" : 2
      }, {
        "name" : "npage",
        "type" : 2
      } ],
      "name" : "(base uintptr, npage uintptr)",
      "type" : "Tuple",
      "underlying" : 275
    }, {
      "fields" : [ {
        "name" : "needZero",
        "type" : 3
      } ],
      "name" : "(needZero bool)",
      "type" : "Tuple",
      "underlying" : 276
    }, {
      "name" : "func() uintptr",
      "params" : 86,
      "recv" : -1,
      "results" : 278,
      "type" : "Signature",
      "underlying" : 277,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 2
      } ],
      "name" : "(uintptr)",
      "type" : "Tuple",
      "underlying" : 278
    }, {
      "name" : "func(sysStat *uint64, n uintptr)",
      "params" : 280,
      "recv" : -1,
      "results" : 86,
      "type" : "Signature",
      "underlying" : 279,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "sysStat",
        "type" : 6
      }, {
        "name" : "n",
        "type" : 2
      } ],
      "name" : "(sysStat *uint64, n uintptr)",
      "type" : "Tuple",
      "underlying" : 280
    }, {
      "name" : "func(s runtime.mSpanState)",
      "params" : 282,
      "recv" : -1,
      "results" : 86,
      "type" : "Signature",
      "underlying" : 281,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "s",
        "type" : 22
      } ],
      "name" : "(s runtime.mSpanState)",
      "type" : "Tuple",
      "underlying" : 282
    }, {
      "elem" : 116,
      "name" : "*runtime.divMagic",
      "type" : "Pointer",
      "underlying" : 283
    }, {
      "name" : "func(nelems uintptr) *runtime.gcBits",
      "params" : 285,
      "recv" : -1,
      "results" : 286,
      "type" : "Signature",
      "underlying" : 284,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "nelems",
        "type" : 2
      } ],
      "name" : "(nelems uintptr)",
      "type" : "Tuple",
      "underlying" : 285
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 16
      } ],
      "name" : "(*runtime.gcBits)",
      "type" : "Tuple",
      "underlying" : 286
    }, {
      "name" : "func(ptr *uint32, val uint32)",
      "params" : 288,
      "recv" : -1,
      "results" : 86,
      "type" : "Signature",
      "underlying" : 287,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "ptr",
        "type" : 289
      }, {
        "name" : "val",
        "type" : 18
      } ],
      "name" : "(ptr *uint32, val uint32)",
      "type" : "Tuple",
      "underlying" : 288
    }, {
      "elem" : 18,
      "name" : "*uint32",
      "type" : "Pointer",
      "underlying" : 289
    }, {
      "name" : "func(v unsafe.Pointer, n uintptr)",
      "params" : 291,
      "recv" : -1,
      "results" : 86,
      "type" : "Signature",
      "underlying" : 290,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "v",
        "type" : 57
      }, {
        "name" : "n",
        "type" : 2
      } ],
      "name" : "(v unsafe.Pointer, n uintptr)",
      "type" : "Tuple",
      "underlying" : 291
    }, {
      "name" : "func(base uintptr, npage uintptr, s *runtime.mspan)",
      "params" : 293,
      "recv" : -1,
      "results" : 86,
      "type" : "Signature",
      "underlying" : 292,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "base",
        "type" : 2
      }, {
        "name" : "npage",
        "type" : 2
      }, {
        "name" : "s",
        "type" : 9
      } ],
      "name" : "(base uintptr, npage uintptr, s *runtime.mspan)",
      "type" : "Tuple",
      "underlying" : 293
    }, {
      "name" : "func(s *runtime.mspan)",
      "params" : 8,
      "recv" : -1,
      "results" : 86,
      "type" : "Signature",
      "underlying" : 294,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "arena",
        "type" : 63
      }, {
        "name" : "pageIdx",
        "type" : 2
      }, {
        "name" : "pageMask",
        "type" : 5
      } ],
      "name" : "(arena *runtime.heapArena, pageIdx uintptr, pageMask uint8)",
      "type" : "Tuple",
      "underlying" : 295
    }, {
      "name" : "func(p uintptr) (arena *runtime.heapArena, pageIdx uintptr, pageMask uint8)",
      "params" : 297,
      "recv" : -1,
      "results" : 295,
      "type" : "Signature",
      "underlying" : 296,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "p",
        "type" : 2
      } ],
      "name" : "(p uintptr)",
      "type" : "Tuple",
      "underlying" : 297
    }, {
      "name" : "func(ptr *uint8, val uint8)",
      "params" : 299,
      "recv" : -1,
      "results" : 86,
      "type" : "Signature",
      "underlying" : 298,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "ptr",
        "type" : 300
      }, {
        "name" : "val",
        "type" : 5
      } ],
      "name" : "(ptr *uint8, val uint8)",
      "type" : "Tuple",
      "underlying" : 299
    }, {
      "elem" : 5,
      "name" : "*uint8",
      "type" : "Pointer",
      "underlying" : 300
    } ],
    "variables" : [ {
      "name" : "h",
      "package" : 0,
      "type" : 29,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "npages",
      "package" : 0,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "manual",
      "package" : 0,
      "type" : 3,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "spanclass",
      "package" : 0,
      "type" : 4,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "sysStat",
      "package" : 0,
      "type" : 6,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "s",
      "package" : 0,
      "type" : 9,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "memstats",
      "package" : 0,
      "type" : 110,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "class_to_divmagic",
      "package" : 0,
      "type" : 115,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "class_to_size",
      "package" : 0,
      "type" : 118,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "gcController",
      "package" : 0,
      "type" : 119,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "gcBlackenEnabled",
      "package" : 0,
      "type" : 18,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "mheap_",
      "package" : 0,
      "type" : 30,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "trace",
      "package" : 0,
      "type" : 125,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "gp",
      "package" : 0,
      "type" : 126,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "scav",
      "package" : 0,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "base",
      "package" : 0,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "m",
      "package" : 0,
      "type" : 138,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "p",
      "package" : 0,
      "type" : 151,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "pp",
      "package" : 0,
      "type" : 207,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "pcache",
      "package" : 0,
      "type" : 212,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "c",
      "package" : 0,
      "type" : 250,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "lock",
      "package" : 0,
      "type" : 23,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "pages",
      "package" : 0,
      "type" : 32,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "heap_scan",
      "package" : 0,
      "type" : 7,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "mcache",
      "package" : 0,
      "type" : 159,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "local_scan",
      "package" : 0,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "tinyallocs",
      "package" : 0,
      "type" : 7,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "local_tinyallocs",
      "package" : 0,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "largealloc",
      "package" : 0,
      "type" : 7,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "nlargealloc",
      "package" : 0,
      "type" : 7,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "heap_live",
      "package" : 0,
      "type" : 7,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "needzero",
      "package" : 0,
      "type" : 5,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "nbytes",
      "package" : 0,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "manualFreeList",
      "package" : 0,
      "type" : 15,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "nelems",
      "package" : 0,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "limit",
      "package" : 0,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "npages",
      "package" : 0,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "heap_sys",
      "package" : 0,
      "type" : 7,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "state",
      "package" : 0,
      "type" : 20,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "spanclass",
      "package" : 0,
      "type" : 4,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "sizeclass",
      "package" : 0,
      "type" : 153,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "elemsize",
      "package" : 0,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "divShift",
      "package" : 0,
      "type" : 5,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "divMul",
      "package" : 0,
      "type" : 19,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "divShift2",
      "package" : 0,
      "type" : 5,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "baseMask",
      "package" : 0,
      "type" : 19,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "m",
      "package" : 0,
      "type" : 283,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "shift",
      "package" : 0,
      "type" : 5,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "mul",
      "package" : 0,
      "type" : 19,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "shift2",
      "package" : 0,
      "type" : 5,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "baseMask",
      "package" : 0,
      "type" : 19,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "freeindex",
      "package" : 0,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "allocCache",
      "package" : 0,
      "type" : 7,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "gcmarkBits",
      "package" : 0,
      "type" : 16,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "allocBits",
      "package" : 0,
      "type" : 16,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "sweepgen",
      "package" : 0,
      "type" : 18,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "sweepgen",
      "package" : 0,
      "type" : 18,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "heap_released",
      "package" : 0,
      "type" : 7,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "heap_idle",
      "package" : 0,
      "type" : 7,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "sweepSpans",
      "package" : 0,
      "type" : 54,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "arena",
      "package" : 0,
      "type" : 63,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "pageInUse",
      "package" : 0,
      "type" : 68,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "pageIdx",
      "package" : 0,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "pageMask",
      "package" : 0,
      "type" : 5,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "pagesInUse",
      "package" : 0,
      "type" : 7,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "enabled",
      "package" : 0,
      "type" : 3,
      "exported" : false,
      "embedded" : false,
      "field" : true
    } ]
  },
  "go-version" : "1.14.3"
}