{
  "usage" : {
    "file" : "map.go",
    "label1" : "delegate",
    "label2" : "ffi",
    "line" : "800",
    "module" : "std",
    "pkg" : "runtime",
    "project" : "kubernetes/kubernetes",
    "snippet" : "racereadpc(unsafe.Pointer(h), callerpc, funcPC(mapiterinit))",
    "version" : "std"
  },
  "cfg" : {
    "blocks" : [ {
      "update-vars" : [ ],
      "successors" : [ 2 ],
      "in-vars" : [ 1, 2, 0 ],
      "exit" : false,
      "out-vars" : [ 1, 2, 0 ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[entry]",
      "entry" : true,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ ],
      "in-vars" : [ ],
      "exit" : true,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[exit]",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 3, 5 ],
      "in-vars" : [ 0, 1, 2 ],
      "exit" : false,
      "out-vars" : [ 1, 2, 0 ],
      "decl-vars" : [ ],
      "line-start" : 798,
      "ast" : {
        "condition" : {
          "go-type" : 43,
          "kind" : "expression",
          "left" : {
            "go-type" : 43,
            "kind" : "constant",
            "value" : {
              "type" : "BOOL",
              "value" : "false"
            }
          },
          "operator" : "&&",
          "right" : {
            "go-type" : 43,
            "kind" : "expression",
            "left" : {
              "go-type" : 26,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "h",
                "variable" : 1
              }
            },
            "operator" : "!=",
            "right" : {
              "go-type" : 44,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Nil",
                "kind" : "ident",
                "value" : "nil"
              }
            },
            "type" : "binary"
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 801,
      "code" : "if raceenabled && h != nil {\n\tcallerpc := getcallerpc()\n\tracereadpc(unsafe.Pointer(h), callerpc, funcPC(mapiterinit))\n}",
      "entry" : false,
      "use-vars" : [ 1 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 4 ],
      "in-vars" : [ 1, 2, 0 ],
      "exit" : false,
      "out-vars" : [ 1, 3, 2, 0 ],
      "decl-vars" : [ 3 ],
      "line-start" : 799,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "callerpc"
          }
        } ],
        "right" : [ {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 45,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 1,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "getcallerpc"
            }
          },
          "go-type" : 7,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 799,
      "code" : "callerpc := getcallerpc()",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 5 ],
      "in-vars" : [ 1, 3, 2, 0 ],
      "exit" : false,
      "out-vars" : [ 1, 2, 0 ],
      "decl-vars" : [ ],
      "line-start" : 800,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "coerced-to" : {
              "go-type" : 13,
              "kind" : "type",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 1,
                "value" : "unsafe"
              },
              "type" : "identifier",
              "value" : {
                "go-type" : 13,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "Pointer"
              }
            },
            "go-type" : 13,
            "kind" : "expression",
            "target" : {
              "go-type" : 26,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "h",
                "variable" : 1
              }
            },
            "type" : "cast"
          }, {
            "go-type" : 7,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "callerpc",
              "variable" : 3
            }
          }, {
            "arguments" : [ {
              "go-type" : 0,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "function" : 0,
                "ident-kind" : "Func",
                "kind" : "ident",
                "value" : "mapiterinit"
              }
            } ],
            "ellipsis" : false,
            "function" : {
              "go-type" : 48,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "function" : 3,
                "ident-kind" : "Func",
                "kind" : "ident",
                "value" : "funcPC"
              }
            },
            "go-type" : 7,
            "kind" : "expression",
            "type" : "call"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 46,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 2,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "racereadpc"
            }
          },
          "go-type" : 42,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 800,
      "code" : "racereadpc(unsafe.Pointer(h), callerpc, funcPC(mapiterinit))",
      "entry" : false,
      "use-vars" : [ 1, 3 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 6, 7 ],
      "in-vars" : [ 1, 2, 0 ],
      "exit" : false,
      "out-vars" : [ 2, 0, 1 ],
      "decl-vars" : [ ],
      "line-start" : 803,
      "ast" : {
        "condition" : {
          "go-type" : 43,
          "kind" : "expression",
          "left" : {
            "go-type" : 43,
            "kind" : "expression",
            "left" : {
              "go-type" : 26,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "h",
                "variable" : 1
              }
            },
            "operator" : "==",
            "right" : {
              "go-type" : 44,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Nil",
                "kind" : "ident",
                "value" : "nil"
              }
            },
            "type" : "binary"
          },
          "operator" : "||",
          "right" : {
            "go-type" : 43,
            "kind" : "expression",
            "left" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "count",
                "variable" : 4
              },
              "go-type" : 29,
              "kind" : "expression",
              "target" : {
                "go-type" : 26,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "h",
                  "variable" : 1
                }
              },
              "type" : "selector"
            },
            "operator" : "==",
            "right" : {
              "go-type" : 29,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "0"
              }
            },
            "type" : "binary"
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 805,
      "code" : "if h == nil || h.count == 0 {\n\treturn\n}",
      "entry" : false,
      "use-vars" : [ 1 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 804,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ ]
      },
      "assign-vars" : [ ],
      "line-end" : 804,
      "code" : "return",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 8, 9 ],
      "in-vars" : [ 1, 2, 0 ],
      "exit" : false,
      "out-vars" : [ 1, 2, 0 ],
      "decl-vars" : [ ],
      "line-start" : 807,
      "ast" : {
        "condition" : {
          "go-type" : 43,
          "kind" : "constant",
          "value" : {
            "type" : "BOOL",
            "value" : "false"
          }
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 809,
      "code" : "if unsafe.Sizeof(hiter{})/sys.PtrSize != 12 {\n\tthrow(\"hash_iter size incorrect\")\n}",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 9 ],
      "in-vars" : [ 1, 2, 0 ],
      "exit" : false,
      "out-vars" : [ 0, 1, 2 ],
      "decl-vars" : [ ],
      "line-start" : 808,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 53,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "hash_iter size incorrect"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 51,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 4,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "throw"
            }
          },
          "go-type" : 42,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 808,
      "code" : "throw(\"hash_iter size incorrect\")",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ 2 ],
      "successors" : [ 10 ],
      "in-vars" : [ 1, 2, 0 ],
      "exit" : false,
      "out-vars" : [ 1, 2, 0 ],
      "decl-vars" : [ ],
      "line-start" : 810,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "t",
            "variable" : 5
          },
          "go-type" : 2,
          "kind" : "expression",
          "target" : {
            "go-type" : 39,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "it",
              "variable" : 2
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "go-type" : 2,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "t",
            "variable" : 0
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 810,
      "code" : "it.t = t",
      "entry" : false,
      "use-vars" : [ 0, 2 ]
    }, {
      "update-vars" : [ 2 ],
      "successors" : [ 11 ],
      "in-vars" : [ 1, 2, 0 ],
      "exit" : false,
      "out-vars" : [ 1, 2, 0 ],
      "decl-vars" : [ ],
      "line-start" : 811,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "h",
            "variable" : 6
          },
          "go-type" : 26,
          "kind" : "expression",
          "target" : {
            "go-type" : 39,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "it",
              "variable" : 2
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "go-type" : 26,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "h",
            "variable" : 1
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 811,
      "code" : "it.h = h",
      "entry" : false,
      "use-vars" : [ 2, 1 ]
    }, {
      "update-vars" : [ 2 ],
      "successors" : [ 12 ],
      "in-vars" : [ 1, 2, 0 ],
      "exit" : false,
      "out-vars" : [ 0, 1, 2 ],
      "decl-vars" : [ ],
      "line-start" : 814,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "B",
            "variable" : 7
          },
          "go-type" : 10,
          "kind" : "expression",
          "target" : {
            "go-type" : 39,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "it",
              "variable" : 2
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "B",
            "variable" : 8
          },
          "go-type" : 10,
          "kind" : "expression",
          "target" : {
            "go-type" : 26,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "h",
              "variable" : 1
            }
          },
          "type" : "selector"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 814,
      "code" : "it.B = h.B",
      "entry" : false,
      "use-vars" : [ 1, 2 ]
    }, {
      "update-vars" : [ 2 ],
      "successors" : [ 13 ],
      "in-vars" : [ 1, 2, 0 ],
      "exit" : false,
      "out-vars" : [ 1, 2, 0 ],
      "decl-vars" : [ ],
      "line-start" : 815,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "buckets",
            "variable" : 9
          },
          "go-type" : 13,
          "kind" : "expression",
          "target" : {
            "go-type" : 39,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "it",
              "variable" : 2
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "buckets",
            "variable" : 10
          },
          "go-type" : 13,
          "kind" : "expression",
          "target" : {
            "go-type" : 26,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "h",
              "variable" : 1
            }
          },
          "type" : "selector"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 815,
      "code" : "it.buckets = h.buckets",
      "entry" : false,
      "use-vars" : [ 1, 2 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 14, 17 ],
      "in-vars" : [ 1, 2, 0 ],
      "exit" : false,
      "out-vars" : [ 1, 2 ],
      "decl-vars" : [ ],
      "line-start" : 816,
      "ast" : {
        "condition" : {
          "go-type" : 43,
          "kind" : "expression",
          "left" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "ptrdata",
              "variable" : 12
            },
            "go-type" : 7,
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "bucket",
                "variable" : 11
              },
              "go-type" : 21,
              "kind" : "expression",
              "target" : {
                "go-type" : 2,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "t",
                  "variable" : 0
                }
              },
              "type" : "selector"
            },
            "type" : "selector"
          },
          "operator" : "==",
          "right" : {
            "go-type" : 7,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 824,
      "code" : "if t.bucket.ptrdata == 0 {\n\n\th.createOverflow()\n\tit.overflow = h.extra.overflow\n\tit.oldoverflow = h.extra.oldoverflow\n}",
      "entry" : false,
      "use-vars" : [ 0 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 15 ],
      "in-vars" : [ 1, 2 ],
      "exit" : false,
      "out-vars" : [ 1, 2 ],
      "decl-vars" : [ ],
      "line-start" : 821,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "function" : 5,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "createOverflow"
            },
            "go-type" : 54,
            "kind" : "expression",
            "target" : {
              "go-type" : 26,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "h",
                "variable" : 1
              }
            },
            "type" : "selector"
          },
          "go-type" : 42,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 821,
      "code" : "h.createOverflow()",
      "entry" : false,
      "use-vars" : [ 1 ]
    }, {
      "update-vars" : [ 2 ],
      "successors" : [ 16 ],
      "in-vars" : [ 1, 2 ],
      "exit" : false,
      "out-vars" : [ 1, 2 ],
      "decl-vars" : [ ],
      "line-start" : 822,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "overflow",
            "variable" : 13
          },
          "go-type" : 33,
          "kind" : "expression",
          "target" : {
            "go-type" : 39,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "it",
              "variable" : 2
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "overflow",
            "variable" : 15
          },
          "go-type" : 33,
          "kind" : "expression",
          "target" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "extra",
              "variable" : 14
            },
            "go-type" : 30,
            "kind" : "expression",
            "target" : {
              "go-type" : 26,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "h",
                "variable" : 1
              }
            },
            "type" : "selector"
          },
          "type" : "selector"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 822,
      "code" : "it.overflow = h.extra.overflow",
      "entry" : false,
      "use-vars" : [ 1, 2 ]
    }, {
      "update-vars" : [ 2 ],
      "successors" : [ 17 ],
      "in-vars" : [ 2, 1 ],
      "exit" : false,
      "out-vars" : [ 1, 2 ],
      "decl-vars" : [ ],
      "line-start" : 823,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "oldoverflow",
            "variable" : 16
          },
          "go-type" : 33,
          "kind" : "expression",
          "target" : {
            "go-type" : 39,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "it",
              "variable" : 2
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "oldoverflow",
            "variable" : 17
          },
          "go-type" : 33,
          "kind" : "expression",
          "target" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "extra",
              "variable" : 14
            },
            "go-type" : 30,
            "kind" : "expression",
            "target" : {
              "go-type" : 26,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "h",
                "variable" : 1
              }
            },
            "type" : "selector"
          },
          "type" : "selector"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 823,
      "code" : "it.oldoverflow = h.extra.oldoverflow",
      "entry" : false,
      "use-vars" : [ 2, 1 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 18 ],
      "in-vars" : [ 1, 2 ],
      "exit" : false,
      "out-vars" : [ 2, 18, 1 ],
      "decl-vars" : [ 18 ],
      "line-start" : 827,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "r"
          }
        } ],
        "right" : [ {
          "coerced-to" : {
            "go-type" : 7,
            "kind" : "type",
            "type" : "identifier",
            "value" : {
              "go-type" : 7,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "uintptr"
            }
          },
          "go-type" : 7,
          "kind" : "expression",
          "target" : {
            "arguments" : [ ],
            "ellipsis" : false,
            "function" : {
              "go-type" : 55,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "function" : 6,
                "ident-kind" : "Func",
                "kind" : "ident",
                "value" : "fastrand"
              }
            },
            "go-type" : 8,
            "kind" : "expression",
            "type" : "call"
          },
          "type" : "cast"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 827,
      "code" : "r := uintptr(fastrand())",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 19, 20 ],
      "in-vars" : [ 1, 2, 18 ],
      "exit" : false,
      "out-vars" : [ 1, 2, 18 ],
      "decl-vars" : [ ],
      "line-start" : 828,
      "ast" : {
        "condition" : {
          "go-type" : 43,
          "kind" : "expression",
          "left" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "B",
              "variable" : 8
            },
            "go-type" : 10,
            "kind" : "expression",
            "target" : {
              "go-type" : 26,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "h",
                "variable" : 1
              }
            },
            "type" : "selector"
          },
          "operator" : ">",
          "right" : {
            "go-type" : 10,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "28"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 830,
      "code" : "if h.B > 31-bucketCntBits {\n\tr += uintptr(fastrand()) << 31\n}",
      "entry" : false,
      "use-vars" : [ 1 ]
    }, {
      "update-vars" : [ 18 ],
      "successors" : [ 20 ],
      "in-vars" : [ 1, 2, 18 ],
      "exit" : false,
      "out-vars" : [ 1, 2, 18 ],
      "decl-vars" : [ ],
      "line-start" : 829,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 7,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "r",
            "variable" : 18
          }
        } ],
        "operator" : "+",
        "right" : [ {
          "go-type" : 7,
          "kind" : "expression",
          "left" : {
            "coerced-to" : {
              "go-type" : 7,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 7,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "uintptr"
              }
            },
            "go-type" : 7,
            "kind" : "expression",
            "target" : {
              "arguments" : [ ],
              "ellipsis" : false,
              "function" : {
                "go-type" : 55,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "function" : 6,
                  "ident-kind" : "Func",
                  "kind" : "ident",
                  "value" : "fastrand"
                }
              },
              "go-type" : 8,
              "kind" : "expression",
              "type" : "call"
            },
            "type" : "cast"
          },
          "operator" : "<<",
          "right" : {
            "go-type" : 57,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "31"
            }
          },
          "type" : "binary"
        } ],
        "type" : "assign-operator"
      },
      "assign-vars" : [ 18 ],
      "line-end" : 829,
      "code" : "r += uintptr(fastrand()) << 31",
      "entry" : false,
      "use-vars" : [ 18 ]
    }, {
      "update-vars" : [ 2 ],
      "successors" : [ 21 ],
      "in-vars" : [ 2, 18, 1 ],
      "exit" : false,
      "out-vars" : [ 1, 2, 18 ],
      "decl-vars" : [ ],
      "line-start" : 831,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "startBucket",
            "variable" : 19
          },
          "go-type" : 7,
          "kind" : "expression",
          "target" : {
            "go-type" : 39,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "it",
              "variable" : 2
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "go-type" : 7,
          "kind" : "expression",
          "left" : {
            "go-type" : 7,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "r",
              "variable" : 18
            }
          },
          "operator" : "&",
          "right" : {
            "arguments" : [ {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "B",
                "variable" : 8
              },
              "go-type" : 10,
              "kind" : "expression",
              "target" : {
                "go-type" : 26,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "h",
                  "variable" : 1
                }
              },
              "type" : "selector"
            } ],
            "ellipsis" : false,
            "function" : {
              "go-type" : 58,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "function" : 7,
                "ident-kind" : "Func",
                "kind" : "ident",
                "value" : "bucketMask"
              }
            },
            "go-type" : 7,
            "kind" : "expression",
            "type" : "call"
          },
          "type" : "binary"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 831,
      "code" : "it.startBucket = r & bucketMask(h.B)",
      "entry" : false,
      "use-vars" : [ 18, 1, 2 ]
    }, {
      "update-vars" : [ 2 ],
      "successors" : [ 22 ],
      "in-vars" : [ 2, 18, 1 ],
      "exit" : false,
      "out-vars" : [ 1, 2 ],
      "decl-vars" : [ ],
      "line-start" : 832,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "offset",
            "variable" : 20
          },
          "go-type" : 10,
          "kind" : "expression",
          "target" : {
            "go-type" : 39,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "it",
              "variable" : 2
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "coerced-to" : {
            "go-type" : 10,
            "kind" : "type",
            "type" : "identifier",
            "value" : {
              "go-type" : 10,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "uint8"
            }
          },
          "go-type" : 10,
          "kind" : "expression",
          "target" : {
            "go-type" : 7,
            "kind" : "expression",
            "left" : {
              "go-type" : 7,
              "kind" : "expression",
              "left" : {
                "go-type" : 7,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "r",
                  "variable" : 18
                }
              },
              "operator" : ">>",
              "right" : {
                "field" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "B",
                  "variable" : 8
                },
                "go-type" : 10,
                "kind" : "expression",
                "target" : {
                  "go-type" : 26,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "h",
                    "variable" : 1
                  }
                },
                "type" : "selector"
              },
              "type" : "binary"
            },
            "operator" : "&",
            "right" : {
              "go-type" : 7,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "7"
              }
            },
            "type" : "binary"
          },
          "type" : "cast"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 832,
      "code" : "it.offset = uint8(r >> h.B & (bucketCnt - 1))",
      "entry" : false,
      "use-vars" : [ 18, 1, 2 ]
    }, {
      "update-vars" : [ 2 ],
      "successors" : [ 24 ],
      "in-vars" : [ 1, 2 ],
      "exit" : false,
      "out-vars" : [ 1, 2 ],
      "decl-vars" : [ ],
      "line-start" : 835,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "bucket",
            "variable" : 21
          },
          "go-type" : 7,
          "kind" : "expression",
          "target" : {
            "go-type" : 39,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "it",
              "variable" : 2
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "startBucket",
            "variable" : 19
          },
          "go-type" : 7,
          "kind" : "expression",
          "target" : {
            "go-type" : 39,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "it",
              "variable" : 2
            }
          },
          "type" : "selector"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 835,
      "code" : "it.bucket = it.startBucket",
      "entry" : false,
      "use-vars" : [ 2 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 25, 26 ],
      "in-vars" : [ 23, 1, 2 ],
      "exit" : false,
      "out-vars" : [ 1, 2 ],
      "decl-vars" : [ ],
      "line-start" : 839,
      "ast" : {
        "condition" : {
          "go-type" : 43,
          "kind" : "expression",
          "left" : {
            "go-type" : 10,
            "kind" : "expression",
            "left" : {
              "go-type" : 10,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "old",
                "variable" : 23
              }
            },
            "operator" : "&",
            "right" : {
              "go-type" : 10,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "3"
              }
            },
            "type" : "binary"
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 10,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "3"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 841,
      "code" : "if old := h.flags; old&(iterator|oldIterator) != iterator|oldIterator {\n\tatomic.Or8(&h.flags, iterator|oldIterator)\n}",
      "entry" : false,
      "use-vars" : [ 23 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 23 ],
      "in-vars" : [ 1, 2 ],
      "exit" : false,
      "out-vars" : [ 23, 1, 2 ],
      "decl-vars" : [ 23 ],
      "line-start" : 839,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "old"
          }
        } ],
        "right" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "flags",
            "variable" : 22
          },
          "go-type" : 10,
          "kind" : "expression",
          "target" : {
            "go-type" : 26,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "h",
              "variable" : 1
            }
          },
          "type" : "selector"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 839,
      "code" : "old := h.flags",
      "entry" : false,
      "use-vars" : [ 1 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 26 ],
      "in-vars" : [ 1, 2 ],
      "exit" : false,
      "out-vars" : [ 2 ],
      "decl-vars" : [ ],
      "line-start" : 840,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 62,
            "kind" : "expression",
            "operator" : "&",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "flags",
                "variable" : 22
              },
              "go-type" : 10,
              "kind" : "expression",
              "target" : {
                "go-type" : 26,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "h",
                  "variable" : 1
                }
              },
              "type" : "selector"
            },
            "type" : "unary"
          }, {
            "go-type" : 10,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "3"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 60,
            "kind" : "expression",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 2,
              "value" : "atomic"
            },
            "type" : "identifier",
            "value" : {
              "function" : 8,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "Or8"
            }
          },
          "go-type" : 42,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 840,
      "code" : "atomic.Or8(&h.flags, iterator|oldIterator)",
      "entry" : false,
      "use-vars" : [ 1 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 2 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 843,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 39,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "it",
              "variable" : 2
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 63,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 9,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "mapiternext"
            }
          },
          "go-type" : 42,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 843,
      "code" : "mapiternext(it)",
      "entry" : false,
      "use-vars" : [ 2 ]
    } ],
    "code" : "// mapiterinit initializes the hiter struct used for ranging over maps.\n// The hiter struct pointed to by 'it' is allocated on the stack\n// by the compilers order pass or on the heap by reflect_mapiterinit.\n// Both need to have zeroed hiter since the struct contains pointers.\nfunc mapiterinit(t *maptype, h *hmap, it *hiter) {\n\tif raceenabled && h != nil {\n\t\tcallerpc := getcallerpc()\n\t\tracereadpc(unsafe.Pointer(h), callerpc, funcPC(mapiterinit))\n\t}\n\n\tif h == nil || h.count == 0 {\n\t\treturn\n\t}\n\n\tif unsafe.Sizeof(hiter{})/sys.PtrSize != 12 {\n\t\tthrow(\"hash_iter size incorrect\")\n\t}\n\tit.t = t\n\tit.h = h\n\n\tit.B = h.B\n\tit.buckets = h.buckets\n\tif t.bucket.ptrdata == 0 {\n\n\t\th.createOverflow()\n\t\tit.overflow = h.extra.overflow\n\t\tit.oldoverflow = h.extra.oldoverflow\n\t}\n\n\tr := uintptr(fastrand())\n\tif h.B > 31-bucketCntBits {\n\t\tr += uintptr(fastrand()) << 31\n\t}\n\tit.startBucket = r & bucketMask(h.B)\n\tit.offset = uint8(r >> h.B & (bucketCnt - 1))\n\n\tit.bucket = it.startBucket\n\n\tif old := h.flags; old&(iterator|oldIterator) != iterator|oldIterator {\n\t\tatomic.Or8(&h.flags, iterator|oldIterator)\n\t}\n\n\tmapiternext(it)\n}",
    "defines" : [ 0 ],
    "functions" : [ {
      "name" : "mapiterinit",
      "package" : 0,
      "type" : 0,
      "exported" : false
    }, {
      "name" : "getcallerpc",
      "package" : 0,
      "type" : 45,
      "exported" : false
    }, {
      "name" : "racereadpc",
      "package" : 0,
      "type" : 46,
      "exported" : false
    }, {
      "name" : "funcPC",
      "package" : 0,
      "type" : 48,
      "exported" : false
    }, {
      "name" : "throw",
      "package" : 0,
      "type" : 51,
      "exported" : false
    }, {
      "name" : "createOverflow",
      "package" : 0,
      "type" : 54,
      "exported" : false
    }, {
      "name" : "fastrand",
      "package" : 0,
      "type" : 55,
      "exported" : false
    }, {
      "name" : "bucketMask",
      "package" : 0,
      "type" : 58,
      "exported" : false
    }, {
      "name" : "Or8",
      "package" : 2,
      "type" : 60,
      "exported" : true
    }, {
      "name" : "mapiternext",
      "package" : 0,
      "type" : 63,
      "exported" : false
    } ],
    "line-end" : 844,
    "line-start" : 797,
    "names" : [ "mapiterinit" ],
    "package" : 0,
    "packages" : [ {
      "name" : "runtime",
      "path" : "runtime"
    }, {
      "name" : "unsafe",
      "path" : "unsafe"
    }, {
      "name" : "atomic",
      "path" : "runtime/internal/atomic"
    } ],
    "params" : [ 0, 1, 2 ],
    "receivers" : [ ],
    "results" : [ ],
    "type" : "function",
    "types" : [ {
      "name" : "func(t *runtime.maptype, h *runtime.hmap, it *runtime.hiter)",
      "params" : 1,
      "recv" : -1,
      "results" : 42,
      "type" : "Signature",
      "underlying" : 0,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "t",
        "type" : 2
      }, {
        "name" : "h",
        "type" : 26
      }, {
        "name" : "it",
        "type" : 39
      } ],
      "name" : "(t *runtime.maptype, h *runtime.hmap, it *runtime.hiter)",
      "type" : "Tuple",
      "underlying" : 1
    }, {
      "elem" : 3,
      "name" : "*runtime.maptype",
      "type" : "Pointer",
      "underlying" : 2
    }, {
      "local-name" : "maptype",
      "name" : "runtime.maptype",
      "package" : 0,
      "type" : "Named",
      "underlying" : 4
    }, {
      "fields" : [ {
        "name" : "typ",
        "type" : 5
      }, {
        "name" : "key",
        "type" : 21
      }, {
        "name" : "elem",
        "type" : 21
      }, {
        "name" : "bucket",
        "type" : 21
      }, {
        "name" : "hasher",
        "type" : 22
      }, {
        "name" : "keysize",
        "type" : 10
      }, {
        "name" : "elemsize",
        "type" : 10
      }, {
        "name" : "bucketsize",
        "type" : 25
      }, {
        "name" : "flags",
        "type" : 8
      } ],
      "name" : "struct{typ runtime._type; key *runtime._type; elem *runtime._type; bucket *runtime._type; hasher func(unsafe.Pointer, uintptr) uintptr; keysize uint8; elemsize uint8; bucketsize uint16; flags uint32}",
      "type" : "Struct",
      "underlying" : 4
    }, {
      "local-name" : "_type",
      "name" : "runtime._type",
      "package" : 0,
      "type" : "Named",
      "underlying" : 6
    }, {
      "fields" : [ {
        "name" : "size",
        "type" : 7
      }, {
        "name" : "ptrdata",
        "type" : 7
      }, {
        "name" : "hash",
        "type" : 8
      }, {
        "name" : "tflag",
        "type" : 9
      }, {
        "name" : "align",
        "type" : 10
      }, {
        "name" : "fieldAlign",
        "type" : 10
      }, {
        "name" : "kind",
        "type" : 10
      }, {
        "name" : "equal",
        "type" : 11
      }, {
        "name" : "gcdata",
        "type" : 16
      }, {
        "name" : "str",
        "type" : 18
      }, {
        "name" : "ptrToThis",
        "type" : 20
      } ],
      "name" : "struct{size uintptr; ptrdata uintptr; hash uint32; tflag runtime.tflag; align uint8; fieldAlign uint8; kind uint8; equal func(unsafe.Pointer, unsafe.Pointer) bool; gcdata *byte; str runtime.nameOff; ptrToThis runtime.typeOff}",
      "type" : "Struct",
      "underlying" : 6
    }, {
      "name" : "uintptr",
      "type" : "Basic",
      "underlying" : 7
    }, {
      "name" : "uint32",
      "type" : "Basic",
      "underlying" : 8
    }, {
      "local-name" : "tflag",
      "name" : "runtime.tflag",
      "package" : 0,
      "type" : "Named",
      "underlying" : 10
    }, {
      "name" : "uint8",
      "type" : "Basic",
      "underlying" : 10
    }, {
      "name" : "func(unsafe.Pointer, unsafe.Pointer) bool",
      "params" : 12,
      "recv" : -1,
      "results" : 14,
      "type" : "Signature",
      "underlying" : 11,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 13
      }, {
        "name" : "",
        "type" : 13
      } ],
      "name" : "(unsafe.Pointer, unsafe.Pointer)",
      "type" : "Tuple",
      "underlying" : 12
    }, {
      "local-name" : "Pointer",
      "name" : "unsafe.Pointer",
      "package" : 1,
      "type" : "Basic",
      "underlying" : 13
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 15
      } ],
      "name" : "(bool)",
      "type" : "Tuple",
      "underlying" : 14
    }, {
      "name" : "bool",
      "type" : "Basic",
      "underlying" : 15
    }, {
      "elem" : 17,
      "name" : "*byte",
      "type" : "Pointer",
      "underlying" : 16
    }, {
      "name" : "byte",
      "type" : "Basic",
      "underlying" : 17
    }, {
      "local-name" : "nameOff",
      "name" : "runtime.nameOff",
      "package" : 0,
      "type" : "Named",
      "underlying" : 19
    }, {
      "name" : "int32",
      "type" : "Basic",
      "underlying" : 19
    }, {
      "local-name" : "typeOff",
      "name" : "runtime.typeOff",
      "package" : 0,
      "type" : "Named",
      "underlying" : 19
    }, {
      "elem" : 5,
      "name" : "*runtime._type",
      "type" : "Pointer",
      "underlying" : 21
    }, {
      "name" : "func(unsafe.Pointer, uintptr) uintptr",
      "params" : 23,
      "recv" : -1,
      "results" : 24,
      "type" : "Signature",
      "underlying" : 22,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 13
      }, {
        "name" : "",
        "type" : 7
      } ],
      "name" : "(unsafe.Pointer, uintptr)",
      "type" : "Tuple",
      "underlying" : 23
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 7
      } ],
      "name" : "(uintptr)",
      "type" : "Tuple",
      "underlying" : 24
    }, {
      "name" : "uint16",
      "type" : "Basic",
      "underlying" : 25
    }, {
      "elem" : 27,
      "name" : "*runtime.hmap",
      "type" : "Pointer",
      "underlying" : 26
    }, {
      "local-name" : "hmap",
      "name" : "runtime.hmap",
      "package" : 0,
      "type" : "Named",
      "underlying" : 28
    }, {
      "fields" : [ {
        "name" : "count",
        "type" : 29
      }, {
        "name" : "flags",
        "type" : 10
      }, {
        "name" : "B",
        "type" : 10
      }, {
        "name" : "noverflow",
        "type" : 25
      }, {
        "name" : "hash0",
        "type" : 8
      }, {
        "name" : "buckets",
        "type" : 13
      }, {
        "name" : "oldbuckets",
        "type" : 13
      }, {
        "name" : "nevacuate",
        "type" : 7
      }, {
        "name" : "extra",
        "type" : 30
      } ],
      "name" : "struct{count int; flags uint8; B uint8; noverflow uint16; hash0 uint32; buckets unsafe.Pointer; oldbuckets unsafe.Pointer; nevacuate uintptr; extra *runtime.mapextra}",
      "type" : "Struct",
      "underlying" : 28
    }, {
      "name" : "int",
      "type" : "Basic",
      "underlying" : 29
    }, {
      "elem" : 31,
      "name" : "*runtime.mapextra",
      "type" : "Pointer",
      "underlying" : 30
    }, {
      "local-name" : "mapextra",
      "name" : "runtime.mapextra",
      "package" : 0,
      "type" : "Named",
      "underlying" : 32
    }, {
      "fields" : [ {
        "name" : "overflow",
        "type" : 33
      }, {
        "name" : "oldoverflow",
        "type" : 33
      }, {
        "name" : "nextOverflow",
        "type" : 35
      } ],
      "name" : "struct{overflow *[]*runtime.bmap; oldoverflow *[]*runtime.bmap; nextOverflow *runtime.bmap}",
      "type" : "Struct",
      "underlying" : 32
    }, {
      "elem" : 34,
      "name" : "*[]*runtime.bmap",
      "type" : "Pointer",
      "underlying" : 33
    }, {
      "elem" : 35,
      "name" : "[]*runtime.bmap",
      "type" : "Slice",
      "underlying" : 34
    }, {
      "elem" : 36,
      "name" : "*runtime.bmap",
      "type" : "Pointer",
      "underlying" : 35
    }, {
      "local-name" : "bmap",
      "name" : "runtime.bmap",
      "package" : 0,
      "type" : "Named",
      "underlying" : 37
    }, {
      "fields" : [ {
        "name" : "tophash",
        "type" : 38
      } ],
      "name" : "struct{tophash [8]uint8}",
      "type" : "Struct",
      "underlying" : 37
    }, {
      "elem" : 10,
      "name" : "[8]uint8",
      "type" : "Array",
      "underlying" : 38
    }, {
      "elem" : 40,
      "name" : "*runtime.hiter",
      "type" : "Pointer",
      "underlying" : 39
    }, {
      "local-name" : "hiter",
      "name" : "runtime.hiter",
      "package" : 0,
      "type" : "Named",
      "underlying" : 41
    }, {
      "fields" : [ {
        "name" : "key",
        "type" : 13
      }, {
        "name" : "elem",
        "type" : 13
      }, {
        "name" : "t",
        "type" : 2
      }, {
        "name" : "h",
        "type" : 26
      }, {
        "name" : "buckets",
        "type" : 13
      }, {
        "name" : "bptr",
        "type" : 35
      }, {
        "name" : "overflow",
        "type" : 33
      }, {
        "name" : "oldoverflow",
        "type" : 33
      }, {
        "name" : "startBucket",
        "type" : 7
      }, {
        "name" : "offset",
        "type" : 10
      }, {
        "name" : "wrapped",
        "type" : 15
      }, {
        "name" : "B",
        "type" : 10
      }, {
        "name" : "i",
        "type" : 10
      }, {
        "name" : "bucket",
        "type" : 7
      }, {
        "name" : "checkBucket",
        "type" : 7
      } ],
      "name" : "struct{key unsafe.Pointer; elem unsafe.Pointer; t *runtime.maptype; h *runtime.hmap; buckets unsafe.Pointer; bptr *runtime.bmap; overflow *[]*runtime.bmap; oldoverflow *[]*runtime.bmap; startBucket uintptr; offset uint8; wrapped bool; B uint8; i uint8; bucket uintptr; checkBucket uintptr}",
      "type" : "Struct",
      "underlying" : 41
    }, {
      "fields" : [ ],
      "name" : "()",
      "type" : "Tuple",
      "underlying" : 42
    }, {
      "name" : "untyped bool",
      "type" : "Basic",
      "underlying" : 43
    }, {
      "name" : "untyped nil",
      "type" : "Basic",
      "underlying" : 44
    }, {
      "name" : "func() uintptr",
      "params" : 42,
      "recv" : -1,
      "results" : 24,
      "type" : "Signature",
      "underlying" : 45,
      "variadic" : false
    }, {
      "name" : "func(addr unsafe.Pointer, callerpc uintptr, pc uintptr)",
      "params" : 47,
      "recv" : -1,
      "results" : 42,
      "type" : "Signature",
      "underlying" : 46,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "addr",
        "type" : 13
      }, {
        "name" : "callerpc",
        "type" : 7
      }, {
        "name" : "pc",
        "type" : 7
      } ],
      "name" : "(addr unsafe.Pointer, callerpc uintptr, pc uintptr)",
      "type" : "Tuple",
      "underlying" : 47
    }, {
      "name" : "func(f interface{}) uintptr",
      "params" : 49,
      "recv" : -1,
      "results" : 24,
      "type" : "Signature",
      "underlying" : 48,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "f",
        "type" : 50
      } ],
      "name" : "(f interface{})",
      "type" : "Tuple",
      "underlying" : 49
    }, {
      "methods" : [ ],
      "name" : "interface{}",
      "type" : "Interface",
      "underlying" : 50
    }, {
      "name" : "func(s string)",
      "params" : 52,
      "recv" : -1,
      "results" : 42,
      "type" : "Signature",
      "underlying" : 51,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "s",
        "type" : 53
      } ],
      "name" : "(s string)",
      "type" : "Tuple",
      "underlying" : 52
    }, {
      "name" : "string",
      "type" : "Basic",
      "underlying" : 53
    }, {
      "name" : "func()",
      "params" : 42,
      "recv" : -1,
      "results" : 42,
      "type" : "Signature",
      "underlying" : 54,
      "variadic" : false
    }, {
      "name" : "func() uint32",
      "params" : 42,
      "recv" : -1,
      "results" : 56,
      "type" : "Signature",
      "underlying" : 55,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 8
      } ],
      "name" : "(uint32)",
      "type" : "Tuple",
      "underlying" : 56
    }, {
      "name" : "untyped int",
      "type" : "Basic",
      "underlying" : 57
    }, {
      "name" : "func(b uint8) uintptr",
      "params" : 59,
      "recv" : -1,
      "results" : 24,
      "type" : "Signature",
      "underlying" : 58,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "b",
        "type" : 10
      } ],
      "name" : "(b uint8)",
      "type" : "Tuple",
      "underlying" : 59
    }, {
      "name" : "func(ptr *uint8, val uint8)",
      "params" : 61,
      "recv" : -1,
      "results" : 42,
      "type" : "Signature",
      "underlying" : 60,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "ptr",
        "type" : 62
      }, {
        "name" : "val",
        "type" : 10
      } ],
      "name" : "(ptr *uint8, val uint8)",
      "type" : "Tuple",
      "underlying" : 61
    }, {
      "elem" : 10,
      "name" : "*uint8",
      "type" : "Pointer",
      "underlying" : 62
    }, {
      "name" : "func(it *runtime.hiter)",
      "params" : 64,
      "recv" : -1,
      "results" : 42,
      "type" : "Signature",
      "underlying" : 63,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "it",
        "type" : 39
      } ],
      "name" : "(it *runtime.hiter)",
      "type" : "Tuple",
      "underlying" : 64
    } ],
    "variables" : [ {
      "name" : "t",
      "package" : 0,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "h",
      "package" : 0,
      "type" : 26,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "it",
      "package" : 0,
      "type" : 39,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "callerpc",
      "package" : 0,
      "type" : 7,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "count",
      "package" : 0,
      "type" : 29,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "t",
      "package" : 0,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "h",
      "package" : 0,
      "type" : 26,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "B",
      "package" : 0,
      "type" : 10,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "B",
      "package" : 0,
      "type" : 10,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "buckets",
      "package" : 0,
      "type" : 13,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "buckets",
      "package" : 0,
      "type" : 13,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "bucket",
      "package" : 0,
      "type" : 21,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "ptrdata",
      "package" : 0,
      "type" : 7,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "overflow",
      "package" : 0,
      "type" : 33,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "extra",
      "package" : 0,
      "type" : 30,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "overflow",
      "package" : 0,
      "type" : 33,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "oldoverflow",
      "package" : 0,
      "type" : 33,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "oldoverflow",
      "package" : 0,
      "type" : 33,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "r",
      "package" : 0,
      "type" : 7,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "startBucket",
      "package" : 0,
      "type" : 7,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "offset",
      "package" : 0,
      "type" : 10,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "bucket",
      "package" : 0,
      "type" : 7,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "flags",
      "package" : 0,
      "type" : 10,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "old",
      "package" : 0,
      "type" : 10,
      "exported" : false,
      "embedded" : false,
      "field" : false
    } ]
  },
  "go-version" : "1.14.3"
}