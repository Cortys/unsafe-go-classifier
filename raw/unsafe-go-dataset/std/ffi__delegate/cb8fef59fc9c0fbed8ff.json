{
  "usage" : {
    "file" : "signal_unix.go",
    "label1" : "delegate",
    "label2" : "ffi",
    "line" : "525",
    "module" : "std",
    "pkg" : "runtime",
    "project" : "kubernetes/kubernetes",
    "snippet" : "func sighandler(sig uint32, info *siginfo, ctxt unsafe.Pointer, gp *g) {",
    "version" : "std"
  },
  "cfg" : {
    "blocks" : [ {
      "update-vars" : [ ],
      "successors" : [ 2 ],
      "in-vars" : [ 0, 3, 4, 1, 2, 5, 6, 7, 8 ],
      "exit" : false,
      "out-vars" : [ 6, 7, 4, 1, 8, 5, 0, 3, 2 ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[entry]",
      "entry" : true,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ ],
      "in-vars" : [ ],
      "exit" : true,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[exit]",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 3 ],
      "in-vars" : [ 6, 7, 2, 8, 5, 0, 3, 4, 1 ],
      "exit" : false,
      "out-vars" : [ 4, 2, 5, 3, 9, 7, 0, 6, 1, 8 ],
      "decl-vars" : [ 9 ],
      "line-start" : 526,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "_g_"
          }
        } ],
        "right" : [ {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 127,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "getg"
            }
          },
          "go-type" : 9,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 526,
      "code" : "_g_ := getg()",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 4 ],
      "in-vars" : [ 9, 7, 2, 3, 0, 6, 4, 1, 8, 5 ],
      "exit" : false,
      "out-vars" : [ 3, 9, 4, 0, 6, 7, 1, 8, 5, 10 ],
      "decl-vars" : [ 10 ],
      "line-start" : 527,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "c"
          }
        } ],
        "right" : [ {
          "go-type" : 119,
          "kind" : "expression",
          "operator" : "&",
          "target" : {
            "declared" : {
              "go-type" : 120,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 120,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "sigctxt"
              }
            },
            "go-type" : 120,
            "kind" : "literal",
            "type" : "composite",
            "values" : [ {
              "go-type" : 3,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "info",
                "variable" : 1
              }
            }, {
              "go-type" : 8,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "ctxt",
                "variable" : 2
              }
            } ]
          },
          "type" : "unary"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 527,
      "code" : "c := &sigctxt{info, ctxt}",
      "entry" : false,
      "use-vars" : [ 1, 2 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 5, 7 ],
      "in-vars" : [ 1, 3, 10, 6, 9, 7, 4, 8, 5, 0 ],
      "exit" : false,
      "out-vars" : [ 10, 9, 4, 8, 5, 6, 7, 1, 0, 3 ],
      "decl-vars" : [ ],
      "line-start" : 529,
      "ast" : {
        "condition" : {
          "go-type" : 129,
          "kind" : "expression",
          "left" : {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "sig",
              "variable" : 0
            }
          },
          "operator" : "==",
          "right" : {
            "go-type" : 2,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "27"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 532,
      "code" : "if sig == _SIGPROF {\n\tsigprof(c.sigpc(), c.sigsp(), c.siglr(), gp, _g_.m)\n\treturn\n}",
      "entry" : false,
      "use-vars" : [ 0 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 6 ],
      "in-vars" : [ 3, 10, 9 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 530,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "arguments" : [ ],
            "ellipsis" : false,
            "function" : {
              "field" : {
                "ident-kind" : "Func",
                "kind" : "ident",
                "value" : "sigpc"
              },
              "go-type" : 132,
              "kind" : "expression",
              "target" : {
                "go-type" : 119,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "c",
                  "variable" : 10
                }
              },
              "type" : "selector"
            },
            "go-type" : 14,
            "kind" : "expression",
            "type" : "call"
          }, {
            "arguments" : [ ],
            "ellipsis" : false,
            "function" : {
              "field" : {
                "ident-kind" : "Func",
                "kind" : "ident",
                "value" : "sigsp"
              },
              "go-type" : 132,
              "kind" : "expression",
              "target" : {
                "go-type" : 119,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "c",
                  "variable" : 10
                }
              },
              "type" : "selector"
            },
            "go-type" : 14,
            "kind" : "expression",
            "type" : "call"
          }, {
            "arguments" : [ ],
            "ellipsis" : false,
            "function" : {
              "field" : {
                "ident-kind" : "Func",
                "kind" : "ident",
                "value" : "siglr"
              },
              "go-type" : 132,
              "kind" : "expression",
              "target" : {
                "go-type" : 119,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "c",
                  "variable" : 10
                }
              },
              "type" : "selector"
            },
            "go-type" : 14,
            "kind" : "expression",
            "type" : "call"
          }, {
            "go-type" : 9,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "gp",
              "variable" : 3
            }
          }, {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "m",
              "variable" : 11
            },
            "go-type" : 26,
            "kind" : "expression",
            "target" : {
              "go-type" : 9,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "_g_",
                "variable" : 9
              }
            },
            "type" : "selector"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 130,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "sigprof"
            }
          },
          "go-type" : 39,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 530,
      "code" : "sigprof(c.sigpc(), c.sigsp(), c.siglr(), gp, _g_.m)",
      "entry" : false,
      "use-vars" : [ 9, 10, 3 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 531,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ ]
      },
      "assign-vars" : [ ],
      "line-end" : 531,
      "code" : "return",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 8, 9 ],
      "in-vars" : [ 10, 9, 7, 0, 6, 3, 4, 1, 8, 5 ],
      "exit" : false,
      "out-vars" : [ 3, 10, 9, 7, 8, 5, 0, 6 ],
      "decl-vars" : [ ],
      "line-start" : 534,
      "ast" : {
        "condition" : {
          "go-type" : 19,
          "kind" : "expression",
          "left" : {
            "go-type" : 19,
            "kind" : "expression",
            "left" : {
              "go-type" : 19,
              "kind" : "expression",
              "left" : {
                "go-type" : 2,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "sig",
                  "variable" : 0
                }
              },
              "operator" : "==",
              "right" : {
                "go-type" : 2,
                "kind" : "constant",
                "value" : {
                  "type" : "INT",
                  "value" : "5"
                }
              },
              "type" : "binary"
            },
            "operator" : "&&",
            "right" : {
              "go-type" : 19,
              "kind" : "expression",
              "left" : {
                "go-type" : 117,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "testSigtrap",
                  "variable" : 4
                }
              },
              "operator" : "!=",
              "right" : {
                "go-type" : 134,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Nil",
                  "kind" : "ident",
                  "value" : "nil"
                }
              },
              "type" : "binary"
            },
            "type" : "binary"
          },
          "operator" : "&&",
          "right" : {
            "arguments" : [ {
              "go-type" : 3,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "info",
                "variable" : 1
              }
            }, {
              "coerced-to" : {
                "contained" : {
                  "go-type" : 120,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 120,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "sigctxt"
                  }
                },
                "go-type" : 119,
                "kind" : "type",
                "type" : "pointer"
              },
              "go-type" : 119,
              "kind" : "expression",
              "target" : {
                "arguments" : [ {
                  "coerced-to" : {
                    "go-type" : 8,
                    "kind" : "type",
                    "qualifier" : {
                      "ident-kind" : "PkgName",
                      "kind" : "ident",
                      "package" : 1,
                      "value" : "unsafe"
                    },
                    "type" : "identifier",
                    "value" : {
                      "go-type" : 8,
                      "ident-kind" : "TypeName",
                      "kind" : "ident",
                      "value" : "Pointer"
                    }
                  },
                  "go-type" : 8,
                  "kind" : "expression",
                  "target" : {
                    "go-type" : 119,
                    "kind" : "expression",
                    "type" : "identifier",
                    "value" : {
                      "ident-kind" : "Var",
                      "kind" : "ident",
                      "value" : "c",
                      "variable" : 10
                    }
                  },
                  "type" : "cast"
                } ],
                "ellipsis" : false,
                "function" : {
                  "go-type" : 135,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Func",
                    "kind" : "ident",
                    "value" : "noescape"
                  }
                },
                "go-type" : 8,
                "kind" : "expression",
                "type" : "call"
              },
              "type" : "cast"
            }, {
              "go-type" : 9,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "gp",
                "variable" : 3
              }
            } ],
            "ellipsis" : false,
            "function" : {
              "go-type" : 117,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "testSigtrap",
                "variable" : 4
              }
            },
            "go-type" : 19,
            "kind" : "expression",
            "type" : "call"
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 536,
      "code" : "if sig == _SIGTRAP && testSigtrap != nil && testSigtrap(info, (*sigctxt)(noescape(unsafe.Pointer(c))), gp) {\n\treturn\n}",
      "entry" : false,
      "use-vars" : [ 10, 3, 0, 1, 4 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 535,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ ]
      },
      "assign-vars" : [ ],
      "line-end" : 535,
      "code" : "return",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 10, 11 ],
      "in-vars" : [ 3, 10, 9, 7, 8, 5, 0, 6 ],
      "exit" : false,
      "out-vars" : [ 5, 0, 6, 3, 10, 9, 7 ],
      "decl-vars" : [ ],
      "line-start" : 538,
      "ast" : {
        "condition" : {
          "go-type" : 19,
          "kind" : "expression",
          "left" : {
            "go-type" : 19,
            "kind" : "expression",
            "left" : {
              "go-type" : 19,
              "kind" : "expression",
              "left" : {
                "go-type" : 2,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "sig",
                  "variable" : 0
                }
              },
              "operator" : "==",
              "right" : {
                "go-type" : 2,
                "kind" : "constant",
                "value" : {
                  "type" : "INT",
                  "value" : "10"
                }
              },
              "type" : "binary"
            },
            "operator" : "&&",
            "right" : {
              "go-type" : 19,
              "kind" : "expression",
              "left" : {
                "go-type" : 125,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "testSigusr1",
                  "variable" : 8
                }
              },
              "operator" : "!=",
              "right" : {
                "go-type" : 134,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Nil",
                  "kind" : "ident",
                  "value" : "nil"
                }
              },
              "type" : "binary"
            },
            "type" : "binary"
          },
          "operator" : "&&",
          "right" : {
            "arguments" : [ {
              "go-type" : 9,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "gp",
                "variable" : 3
              }
            } ],
            "ellipsis" : false,
            "function" : {
              "go-type" : 125,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "testSigusr1",
                "variable" : 8
              }
            },
            "go-type" : 19,
            "kind" : "expression",
            "type" : "call"
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 540,
      "code" : "if sig == _SIGUSR1 && testSigusr1 != nil && testSigusr1(gp) {\n\treturn\n}",
      "entry" : false,
      "use-vars" : [ 0, 8, 3 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 539,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ ]
      },
      "assign-vars" : [ ],
      "line-end" : 539,
      "code" : "return",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 12, 13 ],
      "in-vars" : [ 9, 7, 5, 0, 6, 3, 10 ],
      "exit" : false,
      "out-vars" : [ 9, 7, 5, 0, 6, 3, 10 ],
      "decl-vars" : [ ],
      "line-start" : 542,
      "ast" : {
        "condition" : {
          "go-type" : 129,
          "kind" : "expression",
          "left" : {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "sig",
              "variable" : 0
            }
          },
          "operator" : "==",
          "right" : {
            "go-type" : 2,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "23"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 548,
      "code" : "if sig == sigPreempt {\n\n\tdoSigPreempt(gp, c)\n\n}",
      "entry" : false,
      "use-vars" : [ 0 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 13 ],
      "in-vars" : [ 6, 3, 10, 9, 7, 5, 0 ],
      "exit" : false,
      "out-vars" : [ 9, 7, 5, 0, 6, 3, 10 ],
      "decl-vars" : [ ],
      "line-start" : 544,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 9,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "gp",
              "variable" : 3
            }
          }, {
            "go-type" : 119,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "c",
              "variable" : 10
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 138,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "doSigPreempt"
            }
          },
          "go-type" : 39,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 544,
      "code" : "doSigPreempt(gp, c)",
      "entry" : false,
      "use-vars" : [ 3, 10 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 14 ],
      "in-vars" : [ 10, 9, 7, 5, 0, 6, 3 ],
      "exit" : false,
      "out-vars" : [ 3, 10, 9, 7, 5, 0, 6, 12 ],
      "decl-vars" : [ 12 ],
      "line-start" : 550,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "flags"
          }
        } ],
        "right" : [ {
          "go-type" : 6,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "4"
          }
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 550,
      "code" : "flags := int32(_SigThrow)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 15, 16 ],
      "in-vars" : [ 6, 12, 3, 10, 9, 7, 5, 0 ],
      "exit" : false,
      "out-vars" : [ 10, 9, 7, 5, 0, 6, 12, 3 ],
      "decl-vars" : [ ],
      "line-start" : 551,
      "ast" : {
        "condition" : {
          "go-type" : 129,
          "kind" : "expression",
          "left" : {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "sig",
              "variable" : 0
            }
          },
          "operator" : "<",
          "right" : {
            "go-type" : 2,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "65"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 553,
      "code" : "if sig < uint32(len(sigtable)) {\n\tflags = sigtable[sig].flags\n}",
      "entry" : false,
      "use-vars" : [ 6, 0 ]
    }, {
      "update-vars" : [ 12 ],
      "successors" : [ 16 ],
      "in-vars" : [ 0, 6, 3, 10, 9, 7, 5 ],
      "exit" : false,
      "out-vars" : [ 9, 7, 5, 0, 6, 12, 3, 10 ],
      "decl-vars" : [ ],
      "line-start" : 552,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 6,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "flags",
            "variable" : 12
          }
        } ],
        "right" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "flags",
            "variable" : 13
          },
          "go-type" : 6,
          "kind" : "expression",
          "target" : {
            "go-type" : 123,
            "index" : {
              "go-type" : 2,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "sig",
                "variable" : 0
              }
            },
            "kind" : "expression",
            "target" : {
              "go-type" : 122,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "sigtable",
                "variable" : 6
              }
            },
            "type" : "index"
          },
          "type" : "selector"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 12 ],
      "line-end" : 552,
      "code" : "flags = sigtable[sig].flags",
      "entry" : false,
      "use-vars" : [ 6, 0 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 17, 18 ],
      "in-vars" : [ 12, 3, 10, 9, 7, 5, 0, 6 ],
      "exit" : false,
      "out-vars" : [ 5, 0, 6, 12, 3, 10, 9, 7 ],
      "decl-vars" : [ ],
      "line-start" : 554,
      "ast" : {
        "condition" : {
          "go-type" : 19,
          "kind" : "expression",
          "left" : {
            "go-type" : 19,
            "kind" : "expression",
            "left" : {
              "go-type" : 6,
              "kind" : "expression",
              "left" : {
                "go-type" : 6,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "flags",
                  "variable" : 12
                }
              },
              "operator" : "&",
              "right" : {
                "go-type" : 6,
                "kind" : "constant",
                "value" : {
                  "type" : "INT",
                  "value" : "8"
                }
              },
              "type" : "binary"
            },
            "operator" : "!=",
            "right" : {
              "go-type" : 6,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "0"
              }
            },
            "type" : "binary"
          },
          "operator" : "&&",
          "right" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "throwsplit",
              "variable" : 14
            },
            "go-type" : 19,
            "kind" : "expression",
            "target" : {
              "go-type" : 9,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "gp",
                "variable" : 3
              }
            },
            "type" : "selector"
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 558,
      "code" : "if flags&_SigPanic != 0 && gp.throwsplit {\n\n\tflags = (flags &^ _SigPanic) | _SigThrow\n}",
      "entry" : false,
      "use-vars" : [ 12, 3 ]
    }, {
      "update-vars" : [ 12 ],
      "successors" : [ 18 ],
      "in-vars" : [ 5, 0, 6, 12, 3, 10, 9, 7 ],
      "exit" : false,
      "out-vars" : [ 9, 7, 5, 0, 6, 12, 3, 10 ],
      "decl-vars" : [ ],
      "line-start" : 557,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 6,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "flags",
            "variable" : 12
          }
        } ],
        "right" : [ {
          "go-type" : 6,
          "kind" : "expression",
          "left" : {
            "go-type" : 6,
            "kind" : "expression",
            "target" : {
              "go-type" : 6,
              "kind" : "expression",
              "left" : {
                "go-type" : 6,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "flags",
                  "variable" : 12
                }
              },
              "operator" : "&^",
              "right" : {
                "go-type" : 6,
                "kind" : "constant",
                "value" : {
                  "type" : "INT",
                  "value" : "8"
                }
              },
              "type" : "binary"
            },
            "type" : "paren"
          },
          "operator" : "|",
          "right" : {
            "go-type" : 6,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "4"
            }
          },
          "type" : "binary"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 12 ],
      "line-end" : 557,
      "code" : "flags = (flags &^ _SigPanic) | _SigThrow",
      "entry" : false,
      "use-vars" : [ 12 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 19, 20 ],
      "in-vars" : [ 9, 7, 5, 0, 6, 12, 3, 10 ],
      "exit" : false,
      "out-vars" : [ 7, 5, 0, 6, 12, 3, 10, 9 ],
      "decl-vars" : [ ],
      "line-start" : 559,
      "ast" : {
        "condition" : {
          "arguments" : [ {
            "arguments" : [ ],
            "ellipsis" : false,
            "function" : {
              "field" : {
                "ident-kind" : "Func",
                "kind" : "ident",
                "value" : "sigpc"
              },
              "go-type" : 132,
              "kind" : "expression",
              "target" : {
                "go-type" : 119,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "c",
                  "variable" : 10
                }
              },
              "type" : "selector"
            },
            "go-type" : 14,
            "kind" : "expression",
            "type" : "call"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 140,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "isAbortPC"
            }
          },
          "go-type" : 19,
          "kind" : "expression",
          "type" : "call"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 563,
      "code" : "if isAbortPC(c.sigpc()) {\n\n\tflags = _SigThrow\n}",
      "entry" : false,
      "use-vars" : [ 10 ]
    }, {
      "update-vars" : [ 12 ],
      "successors" : [ 20 ],
      "in-vars" : [ 6, 3, 10, 9, 7, 5, 0 ],
      "exit" : false,
      "out-vars" : [ 0, 6, 12, 3, 10, 9, 7, 5 ],
      "decl-vars" : [ ],
      "line-start" : 562,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 6,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "flags",
            "variable" : 12
          }
        } ],
        "right" : [ {
          "go-type" : 6,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "4"
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 12 ],
      "line-end" : 562,
      "code" : "flags = _SigThrow",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 21, 27 ],
      "in-vars" : [ 5, 0, 6, 12, 3, 10, 9, 7 ],
      "exit" : false,
      "out-vars" : [ 6, 12, 3, 10, 9, 7, 5, 0 ],
      "decl-vars" : [ ],
      "line-start" : 564,
      "ast" : {
        "condition" : {
          "go-type" : 129,
          "kind" : "expression",
          "left" : {
            "go-type" : 129,
            "kind" : "expression",
            "left" : {
              "arguments" : [ ],
              "ellipsis" : false,
              "function" : {
                "field" : {
                  "ident-kind" : "Func",
                  "kind" : "ident",
                  "value" : "sigcode"
                },
                "go-type" : 142,
                "kind" : "expression",
                "target" : {
                  "go-type" : 119,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "c",
                    "variable" : 10
                  }
                },
                "type" : "selector"
              },
              "go-type" : 7,
              "kind" : "expression",
              "type" : "call"
            },
            "operator" : "!=",
            "right" : {
              "go-type" : 7,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "0"
              }
            },
            "type" : "binary"
          },
          "operator" : "&&",
          "right" : {
            "go-type" : 129,
            "kind" : "expression",
            "left" : {
              "go-type" : 6,
              "kind" : "expression",
              "left" : {
                "go-type" : 6,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "flags",
                  "variable" : 12
                }
              },
              "operator" : "&",
              "right" : {
                "go-type" : 6,
                "kind" : "constant",
                "value" : {
                  "type" : "INT",
                  "value" : "8"
                }
              },
              "type" : "binary"
            },
            "operator" : "!=",
            "right" : {
              "go-type" : 6,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "0"
              }
            },
            "type" : "binary"
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 580,
      "code" : "if c.sigcode() != _SI_USER && flags&_SigPanic != 0 {\n\n\tgp.sig = sig\n\tgp.sigcode0 = uintptr(c.sigcode())\n\tgp.sigcode1 = uintptr(c.fault())\n\tgp.sigpc = c.sigpc()\n\n\tc.preparePanic(sig, gp)\n\treturn\n}",
      "entry" : false,
      "use-vars" : [ 10, 12 ]
    }, {
      "update-vars" : [ 3 ],
      "successors" : [ 22 ],
      "in-vars" : [ 10, 0, 3 ],
      "exit" : false,
      "out-vars" : [ 0, 3, 10 ],
      "decl-vars" : [ ],
      "line-start" : 573,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "sig",
            "variable" : 15
          },
          "go-type" : 2,
          "kind" : "expression",
          "target" : {
            "go-type" : 9,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "gp",
              "variable" : 3
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "go-type" : 2,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "sig",
            "variable" : 0
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 573,
      "code" : "gp.sig = sig",
      "entry" : false,
      "use-vars" : [ 0, 3 ]
    }, {
      "update-vars" : [ 3 ],
      "successors" : [ 23 ],
      "in-vars" : [ 0, 3, 10 ],
      "exit" : false,
      "out-vars" : [ 0, 3, 10 ],
      "decl-vars" : [ ],
      "line-start" : 574,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "sigcode0",
            "variable" : 16
          },
          "go-type" : 14,
          "kind" : "expression",
          "target" : {
            "go-type" : 9,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "gp",
              "variable" : 3
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "coerced-to" : {
            "go-type" : 14,
            "kind" : "type",
            "type" : "identifier",
            "value" : {
              "go-type" : 14,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "uintptr"
            }
          },
          "go-type" : 14,
          "kind" : "expression",
          "target" : {
            "arguments" : [ ],
            "ellipsis" : false,
            "function" : {
              "field" : {
                "ident-kind" : "Func",
                "kind" : "ident",
                "value" : "sigcode"
              },
              "go-type" : 142,
              "kind" : "expression",
              "target" : {
                "go-type" : 119,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "c",
                  "variable" : 10
                }
              },
              "type" : "selector"
            },
            "go-type" : 7,
            "kind" : "expression",
            "type" : "call"
          },
          "type" : "cast"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 574,
      "code" : "gp.sigcode0 = uintptr(c.sigcode())",
      "entry" : false,
      "use-vars" : [ 10, 3 ]
    }, {
      "update-vars" : [ 3 ],
      "successors" : [ 24 ],
      "in-vars" : [ 0, 3, 10 ],
      "exit" : false,
      "out-vars" : [ 10, 0, 3 ],
      "decl-vars" : [ ],
      "line-start" : 575,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "sigcode1",
            "variable" : 17
          },
          "go-type" : 14,
          "kind" : "expression",
          "target" : {
            "go-type" : 9,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "gp",
              "variable" : 3
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "coerced-to" : {
            "go-type" : 14,
            "kind" : "type",
            "type" : "identifier",
            "value" : {
              "go-type" : 14,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "uintptr"
            }
          },
          "go-type" : 14,
          "kind" : "expression",
          "target" : {
            "arguments" : [ ],
            "ellipsis" : false,
            "function" : {
              "field" : {
                "ident-kind" : "Func",
                "kind" : "ident",
                "value" : "fault"
              },
              "go-type" : 132,
              "kind" : "expression",
              "target" : {
                "go-type" : 119,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "c",
                  "variable" : 10
                }
              },
              "type" : "selector"
            },
            "go-type" : 14,
            "kind" : "expression",
            "type" : "call"
          },
          "type" : "cast"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 575,
      "code" : "gp.sigcode1 = uintptr(c.fault())",
      "entry" : false,
      "use-vars" : [ 10, 3 ]
    }, {
      "update-vars" : [ 3 ],
      "successors" : [ 25 ],
      "in-vars" : [ 0, 3, 10 ],
      "exit" : false,
      "out-vars" : [ 0, 3, 10 ],
      "decl-vars" : [ ],
      "line-start" : 576,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "sigpc",
            "variable" : 18
          },
          "go-type" : 14,
          "kind" : "expression",
          "target" : {
            "go-type" : 9,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "gp",
              "variable" : 3
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "sigpc"
            },
            "go-type" : 132,
            "kind" : "expression",
            "target" : {
              "go-type" : 119,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "c",
                "variable" : 10
              }
            },
            "type" : "selector"
          },
          "go-type" : 14,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 576,
      "code" : "gp.sigpc = c.sigpc()",
      "entry" : false,
      "use-vars" : [ 10, 3 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 26 ],
      "in-vars" : [ 0, 3, 10 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 578,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "sig",
              "variable" : 0
            }
          }, {
            "go-type" : 9,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "gp",
              "variable" : 3
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "preparePanic"
            },
            "go-type" : 144,
            "kind" : "expression",
            "target" : {
              "go-type" : 119,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "c",
                "variable" : 10
              }
            },
            "type" : "selector"
          },
          "go-type" : 39,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 578,
      "code" : "c.preparePanic(sig, gp)",
      "entry" : false,
      "use-vars" : [ 0, 3, 10 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 579,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ ]
      },
      "assign-vars" : [ ],
      "line-end" : 579,
      "code" : "return",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 28, 30 ],
      "in-vars" : [ 9, 7, 5, 0, 6, 12, 3, 10 ],
      "exit" : false,
      "out-vars" : [ 6, 12, 3, 10, 9, 7, 5, 0 ],
      "decl-vars" : [ ],
      "line-start" : 582,
      "ast" : {
        "condition" : {
          "go-type" : 129,
          "kind" : "expression",
          "left" : {
            "go-type" : 129,
            "kind" : "expression",
            "left" : {
              "arguments" : [ ],
              "ellipsis" : false,
              "function" : {
                "field" : {
                  "ident-kind" : "Func",
                  "kind" : "ident",
                  "value" : "sigcode"
                },
                "go-type" : 142,
                "kind" : "expression",
                "target" : {
                  "go-type" : 119,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "c",
                    "variable" : 10
                  }
                },
                "type" : "selector"
              },
              "go-type" : 7,
              "kind" : "expression",
              "type" : "call"
            },
            "operator" : "==",
            "right" : {
              "go-type" : 7,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "0"
              }
            },
            "type" : "binary"
          },
          "operator" : "||",
          "right" : {
            "go-type" : 129,
            "kind" : "expression",
            "left" : {
              "go-type" : 6,
              "kind" : "expression",
              "left" : {
                "go-type" : 6,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "flags",
                  "variable" : 12
                }
              },
              "operator" : "&",
              "right" : {
                "go-type" : 6,
                "kind" : "constant",
                "value" : {
                  "type" : "INT",
                  "value" : "1"
                }
              },
              "type" : "binary"
            },
            "operator" : "!=",
            "right" : {
              "go-type" : 6,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "0"
              }
            },
            "type" : "binary"
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 586,
      "code" : "if c.sigcode() == _SI_USER || flags&_SigNotify != 0 {\n\tif sigsend(sig) {\n\t\treturn\n\t}\n}",
      "entry" : false,
      "use-vars" : [ 10, 12 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 29, 30 ],
      "in-vars" : [ 10, 9, 7, 5, 0, 6, 12, 3 ],
      "exit" : false,
      "out-vars" : [ 7, 5, 0, 6, 12, 3, 10, 9 ],
      "decl-vars" : [ ],
      "line-start" : 583,
      "ast" : {
        "condition" : {
          "arguments" : [ {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "sig",
              "variable" : 0
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 146,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "sigsend"
            }
          },
          "go-type" : 19,
          "kind" : "expression",
          "type" : "call"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 585,
      "code" : "if sigsend(sig) {\n\treturn\n}",
      "entry" : false,
      "use-vars" : [ 0 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 584,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ ]
      },
      "assign-vars" : [ ],
      "line-end" : 584,
      "code" : "return",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 31, 32 ],
      "in-vars" : [ 12, 3, 10, 9, 7, 5, 0, 6 ],
      "exit" : false,
      "out-vars" : [ 3, 10, 9, 7, 5, 0, 6, 12 ],
      "decl-vars" : [ ],
      "line-start" : 588,
      "ast" : {
        "condition" : {
          "go-type" : 19,
          "kind" : "expression",
          "left" : {
            "go-type" : 19,
            "kind" : "expression",
            "left" : {
              "arguments" : [ ],
              "ellipsis" : false,
              "function" : {
                "field" : {
                  "ident-kind" : "Func",
                  "kind" : "ident",
                  "value" : "sigcode"
                },
                "go-type" : 142,
                "kind" : "expression",
                "target" : {
                  "go-type" : 119,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "c",
                    "variable" : 10
                  }
                },
                "type" : "selector"
              },
              "go-type" : 7,
              "kind" : "expression",
              "type" : "call"
            },
            "operator" : "==",
            "right" : {
              "go-type" : 7,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "0"
              }
            },
            "type" : "binary"
          },
          "operator" : "&&",
          "right" : {
            "arguments" : [ {
              "go-type" : 2,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "sig",
                "variable" : 0
              }
            } ],
            "ellipsis" : false,
            "function" : {
              "go-type" : 146,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Func",
                "kind" : "ident",
                "value" : "signal_ignored"
              }
            },
            "go-type" : 19,
            "kind" : "expression",
            "type" : "call"
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 590,
      "code" : "if c.sigcode() == _SI_USER && signal_ignored(sig) {\n\treturn\n}",
      "entry" : false,
      "use-vars" : [ 0, 10 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 589,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ ]
      },
      "assign-vars" : [ ],
      "line-end" : 589,
      "code" : "return",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 33, 34 ],
      "in-vars" : [ 7, 5, 0, 6, 12, 3, 10, 9 ],
      "exit" : false,
      "out-vars" : [ 5, 0, 6, 12, 3, 10, 9, 7 ],
      "decl-vars" : [ ],
      "line-start" : 592,
      "ast" : {
        "condition" : {
          "go-type" : 129,
          "kind" : "expression",
          "left" : {
            "go-type" : 6,
            "kind" : "expression",
            "left" : {
              "go-type" : 6,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "flags",
                "variable" : 12
              }
            },
            "operator" : "&",
            "right" : {
              "go-type" : 6,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "2"
              }
            },
            "type" : "binary"
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 6,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 594,
      "code" : "if flags&_SigKill != 0 {\n\tdieFromSignal(sig)\n}",
      "entry" : false,
      "use-vars" : [ 12 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 34 ],
      "in-vars" : [ 5, 0, 6, 12, 3, 10, 9, 7 ],
      "exit" : false,
      "out-vars" : [ 7, 5, 0, 6, 12, 3, 10, 9 ],
      "decl-vars" : [ ],
      "line-start" : 593,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "sig",
              "variable" : 0
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 148,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "dieFromSignal"
            }
          },
          "go-type" : 39,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 593,
      "code" : "dieFromSignal(sig)",
      "entry" : false,
      "use-vars" : [ 0 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 35, 36 ],
      "in-vars" : [ 3, 10, 9, 7, 5, 0, 6, 12 ],
      "exit" : false,
      "out-vars" : [ 9, 7, 5, 0, 6, 3, 10 ],
      "decl-vars" : [ ],
      "line-start" : 596,
      "ast" : {
        "condition" : {
          "go-type" : 129,
          "kind" : "expression",
          "left" : {
            "go-type" : 6,
            "kind" : "expression",
            "left" : {
              "go-type" : 6,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "flags",
                "variable" : 12
              }
            },
            "operator" : "&",
            "right" : {
              "go-type" : 6,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "4"
              }
            },
            "type" : "binary"
          },
          "operator" : "==",
          "right" : {
            "go-type" : 6,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 598,
      "code" : "if flags&_SigThrow == 0 {\n\treturn\n}",
      "entry" : false,
      "use-vars" : [ 12 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 597,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ ]
      },
      "assign-vars" : [ ],
      "line-end" : 597,
      "code" : "return",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ 9 ],
      "successors" : [ 37 ],
      "in-vars" : [ 5, 0, 6, 3, 10, 9, 7 ],
      "exit" : false,
      "out-vars" : [ 0, 6, 3, 10, 9, 7, 5 ],
      "decl-vars" : [ ],
      "line-start" : 600,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "throwing",
            "variable" : 19
          },
          "go-type" : 6,
          "kind" : "expression",
          "target" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "m",
              "variable" : 11
            },
            "go-type" : 26,
            "kind" : "expression",
            "target" : {
              "go-type" : 9,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "_g_",
                "variable" : 9
              }
            },
            "type" : "selector"
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "go-type" : 6,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "1"
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 600,
      "code" : "_g_.m.throwing = 1",
      "entry" : false,
      "use-vars" : [ 9 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 38 ],
      "in-vars" : [ 5, 0, 6, 3, 10, 9, 7 ],
      "exit" : false,
      "out-vars" : [ 10, 9, 7, 5, 0, 6, 3 ],
      "decl-vars" : [ ],
      "line-start" : 601,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 9,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "gp",
              "variable" : 3
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "set"
            },
            "go-type" : 150,
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "caughtsig",
                "variable" : 20
              },
              "go-type" : 31,
              "kind" : "expression",
              "target" : {
                "field" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "m",
                  "variable" : 11
                },
                "go-type" : 26,
                "kind" : "expression",
                "target" : {
                  "go-type" : 9,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "_g_",
                    "variable" : 9
                  }
                },
                "type" : "selector"
              },
              "type" : "selector"
            },
            "type" : "selector"
          },
          "go-type" : 39,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 601,
      "code" : "_g_.m.caughtsig.set(gp)",
      "entry" : false,
      "use-vars" : [ 3, 9 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 39, 40 ],
      "in-vars" : [ 5, 0, 6, 3, 10, 9, 7 ],
      "exit" : false,
      "out-vars" : [ 0, 6, 3, 10, 9, 7, 5 ],
      "decl-vars" : [ ],
      "line-start" : 603,
      "ast" : {
        "condition" : {
          "go-type" : 129,
          "kind" : "expression",
          "left" : {
            "go-type" : 6,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "crashing",
              "variable" : 5
            }
          },
          "operator" : "==",
          "right" : {
            "go-type" : 6,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 605,
      "code" : "if crashing == 0 {\n\tstartpanic_m()\n}",
      "entry" : false,
      "use-vars" : [ 5 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 40 ],
      "in-vars" : [ 9, 7, 5, 0, 6, 3, 10 ],
      "exit" : false,
      "out-vars" : [ 0, 6, 3, 10, 9, 7, 5 ],
      "decl-vars" : [ ],
      "line-start" : 604,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 152,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "startpanic_m"
            }
          },
          "go-type" : 19,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 604,
      "code" : "startpanic_m()",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 41, 42 ],
      "in-vars" : [ 9, 7, 5, 0, 6, 3, 10 ],
      "exit" : false,
      "out-vars" : [ 6, 3, 10, 9, 7, 5, 0 ],
      "decl-vars" : [ ],
      "line-start" : 607,
      "ast" : {
        "condition" : {
          "go-type" : 129,
          "kind" : "expression",
          "left" : {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "sig",
              "variable" : 0
            }
          },
          "operator" : "<",
          "right" : {
            "go-type" : 2,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "65"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 611,
      "code" : "if sig < uint32(len(sigtable)) {\n\tprint(sigtable[sig].name, \"\\n\")\n} else {\n\tprint(\"Signal \", sig, \"\\n\")\n}",
      "entry" : false,
      "use-vars" : [ 0, 6 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 43 ],
      "in-vars" : [ 6, 3, 10, 9, 7, 5, 0 ],
      "exit" : false,
      "out-vars" : [ 5, 3, 10, 9, 7 ],
      "decl-vars" : [ ],
      "line-start" : 608,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "name",
              "variable" : 21
            },
            "go-type" : 42,
            "kind" : "expression",
            "target" : {
              "go-type" : 123,
              "index" : {
                "go-type" : 2,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "sig",
                  "variable" : 0
                }
              },
              "kind" : "expression",
              "target" : {
                "go-type" : 122,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "sigtable",
                  "variable" : 6
                }
              },
              "type" : "index"
            },
            "type" : "selector"
          }, {
            "go-type" : 42,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "\n"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 153,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Builtin",
              "kind" : "ident",
              "value" : "print"
            }
          },
          "go-type" : 39,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 608,
      "code" : "print(sigtable[sig].name, \"\\n\")",
      "entry" : false,
      "use-vars" : [ 6, 0 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 43 ],
      "in-vars" : [ 7, 5, 0, 3, 10, 9 ],
      "exit" : false,
      "out-vars" : [ 9, 7, 5, 3, 10 ],
      "decl-vars" : [ ],
      "line-start" : 610,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 42,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "Signal "
            }
          }, {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "sig",
              "variable" : 0
            }
          }, {
            "go-type" : 42,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "\n"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 155,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Builtin",
              "kind" : "ident",
              "value" : "print"
            }
          },
          "go-type" : 39,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 610,
      "code" : "print(\"Signal \", sig, \"\\n\")",
      "entry" : false,
      "use-vars" : [ 0 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 44 ],
      "in-vars" : [ 5, 3, 10, 9, 7 ],
      "exit" : false,
      "out-vars" : [ 5, 3, 10, 9, 7 ],
      "decl-vars" : [ ],
      "line-start" : 613,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 42,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "PC="
            }
          }, {
            "coerced-to" : {
              "go-type" : 159,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 159,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "hex"
              }
            },
            "go-type" : 159,
            "kind" : "expression",
            "target" : {
              "arguments" : [ ],
              "ellipsis" : false,
              "function" : {
                "field" : {
                  "ident-kind" : "Func",
                  "kind" : "ident",
                  "value" : "sigpc"
                },
                "go-type" : 132,
                "kind" : "expression",
                "target" : {
                  "go-type" : 119,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "c",
                    "variable" : 10
                  }
                },
                "type" : "selector"
              },
              "go-type" : 14,
              "kind" : "expression",
              "type" : "call"
            },
            "type" : "cast"
          }, {
            "go-type" : 42,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : " m="
            }
          }, {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "id",
              "variable" : 22
            },
            "go-type" : 41,
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "m",
                "variable" : 11
              },
              "go-type" : 26,
              "kind" : "expression",
              "target" : {
                "go-type" : 9,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "_g_",
                  "variable" : 9
                }
              },
              "type" : "selector"
            },
            "type" : "selector"
          }, {
            "go-type" : 42,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : " sigcode="
            }
          }, {
            "arguments" : [ ],
            "ellipsis" : false,
            "function" : {
              "field" : {
                "ident-kind" : "Func",
                "kind" : "ident",
                "value" : "sigcode"
              },
              "go-type" : 142,
              "kind" : "expression",
              "target" : {
                "go-type" : 119,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "c",
                  "variable" : 10
                }
              },
              "type" : "selector"
            },
            "go-type" : 7,
            "kind" : "expression",
            "type" : "call"
          }, {
            "go-type" : 42,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "\n"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 157,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Builtin",
              "kind" : "ident",
              "value" : "print"
            }
          },
          "go-type" : 39,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 613,
      "code" : "print(\"PC=\", hex(c.sigpc()), \" m=\", _g_.m.id, \" sigcode=\", c.sigcode(), \"\\n\")",
      "entry" : false,
      "use-vars" : [ 9, 10 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 45, 47 ],
      "in-vars" : [ 5, 3, 10, 9, 7 ],
      "exit" : false,
      "out-vars" : [ 5, 3, 10, 9, 7 ],
      "decl-vars" : [ ],
      "line-start" : 614,
      "ast" : {
        "condition" : {
          "go-type" : 129,
          "kind" : "expression",
          "left" : {
            "go-type" : 129,
            "kind" : "expression",
            "left" : {
              "go-type" : 129,
              "kind" : "expression",
              "left" : {
                "field" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "lockedg",
                  "variable" : 23
                },
                "go-type" : 31,
                "kind" : "expression",
                "target" : {
                  "field" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "m",
                    "variable" : 11
                  },
                  "go-type" : 26,
                  "kind" : "expression",
                  "target" : {
                    "go-type" : 9,
                    "kind" : "expression",
                    "type" : "identifier",
                    "value" : {
                      "ident-kind" : "Var",
                      "kind" : "ident",
                      "value" : "_g_",
                      "variable" : 9
                    }
                  },
                  "type" : "selector"
                },
                "type" : "selector"
              },
              "operator" : "!=",
              "right" : {
                "go-type" : 31,
                "kind" : "constant",
                "value" : {
                  "type" : "INT",
                  "value" : "0"
                }
              },
              "type" : "binary"
            },
            "operator" : "&&",
            "right" : {
              "go-type" : 129,
              "kind" : "expression",
              "left" : {
                "field" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "ncgo",
                  "variable" : 24
                },
                "go-type" : 6,
                "kind" : "expression",
                "target" : {
                  "field" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "m",
                    "variable" : 11
                  },
                  "go-type" : 26,
                  "kind" : "expression",
                  "target" : {
                    "go-type" : 9,
                    "kind" : "expression",
                    "type" : "identifier",
                    "value" : {
                      "ident-kind" : "Var",
                      "kind" : "ident",
                      "value" : "_g_",
                      "variable" : 9
                    }
                  },
                  "type" : "selector"
                },
                "type" : "selector"
              },
              "operator" : ">",
              "right" : {
                "go-type" : 6,
                "kind" : "constant",
                "value" : {
                  "type" : "INT",
                  "value" : "0"
                }
              },
              "type" : "binary"
            },
            "type" : "binary"
          },
          "operator" : "&&",
          "right" : {
            "go-type" : 129,
            "kind" : "expression",
            "left" : {
              "go-type" : 9,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "gp",
                "variable" : 3
              }
            },
            "operator" : "==",
            "right" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "g0",
                "variable" : 25
              },
              "go-type" : 9,
              "kind" : "expression",
              "target" : {
                "field" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "m",
                  "variable" : 11
                },
                "go-type" : 26,
                "kind" : "expression",
                "target" : {
                  "go-type" : 9,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "_g_",
                    "variable" : 9
                  }
                },
                "type" : "selector"
              },
              "type" : "selector"
            },
            "type" : "binary"
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 617,
      "code" : "if _g_.m.lockedg != 0 && _g_.m.ncgo > 0 && gp == _g_.m.g0 {\n\tprint(\"signal arrived during cgo execution\\n\")\n\tgp = _g_.m.lockedg.ptr()\n}",
      "entry" : false,
      "use-vars" : [ 9, 3 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 46 ],
      "in-vars" : [ 5, 10, 9, 7 ],
      "exit" : false,
      "out-vars" : [ 7, 5, 10, 9 ],
      "decl-vars" : [ ],
      "line-start" : 615,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 42,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "signal arrived during cgo execution\n"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 160,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Builtin",
              "kind" : "ident",
              "value" : "print"
            }
          },
          "go-type" : 39,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 615,
      "code" : "print(\"signal arrived during cgo execution\\n\")",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ 3 ],
      "successors" : [ 47 ],
      "in-vars" : [ 5, 10, 9, 7 ],
      "exit" : false,
      "out-vars" : [ 5, 3, 10, 9, 7 ],
      "decl-vars" : [ ],
      "line-start" : 616,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 9,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "gp",
            "variable" : 3
          }
        } ],
        "right" : [ {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "ptr"
            },
            "go-type" : 127,
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "lockedg",
                "variable" : 23
              },
              "go-type" : 31,
              "kind" : "expression",
              "target" : {
                "field" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "m",
                  "variable" : 11
                },
                "go-type" : 26,
                "kind" : "expression",
                "target" : {
                  "go-type" : 9,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "_g_",
                    "variable" : 9
                  }
                },
                "type" : "selector"
              },
              "type" : "selector"
            },
            "type" : "selector"
          },
          "go-type" : 9,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 3 ],
      "line-end" : 616,
      "code" : "gp = _g_.m.lockedg.ptr()",
      "entry" : false,
      "use-vars" : [ 9 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 48 ],
      "in-vars" : [ 5, 3, 10, 9, 7 ],
      "exit" : false,
      "out-vars" : [ 7, 5, 3, 10, 9 ],
      "decl-vars" : [ ],
      "line-start" : 618,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 42,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "\n"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 160,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Builtin",
              "kind" : "ident",
              "value" : "print"
            }
          },
          "go-type" : 39,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 618,
      "code" : "print(\"\\n\")",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 49 ],
      "in-vars" : [ 5, 3, 10, 9, 7 ],
      "exit" : false,
      "out-vars" : [ 9, 7, 26, 27, 5, 3, 10 ],
      "decl-vars" : [ 27, 26, 28 ],
      "line-start" : 620,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "level"
          }
        }, {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "_"
          }
        }, {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "docrash"
          }
        } ],
        "right" : [ {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 163,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "gotraceback"
            }
          },
          "go-type" : 162,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 620,
      "code" : "level, _, docrash := gotraceback()",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 50, 59 ],
      "in-vars" : [ 10, 9, 7, 26, 27, 5, 3 ],
      "exit" : false,
      "out-vars" : [ 9, 7, 26, 5, 3, 10 ],
      "decl-vars" : [ ],
      "line-start" : 621,
      "ast" : {
        "condition" : {
          "go-type" : 129,
          "kind" : "expression",
          "left" : {
            "go-type" : 6,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "level",
              "variable" : 27
            }
          },
          "operator" : ">",
          "right" : {
            "go-type" : 6,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 633,
      "code" : "if level > 0 {\n\tgoroutineheader(gp)\n\ttracebacktrap(c.sigpc(), c.sigsp(), c.siglr(), gp)\n\tif crashing > 0 && gp != _g_.m.curg && _g_.m.curg != nil && readgstatus(_g_.m.curg)&^_Gscan == _Grunning {\n\n\t\tgoroutineheader(_g_.m.curg)\n\t\ttraceback(^uintptr(0), ^uintptr(0), 0, _g_.m.curg)\n\t} else if crashing == 0 {\n\t\ttracebackothers(gp)\n\t\tprint(\"\\n\")\n\t}\n\tdumpregs(c)\n}",
      "entry" : false,
      "use-vars" : [ 27 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 51 ],
      "in-vars" : [ 5, 3, 10, 9, 7, 26 ],
      "exit" : false,
      "out-vars" : [ 3, 10, 9, 7, 26, 5 ],
      "decl-vars" : [ ],
      "line-start" : 622,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 9,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "gp",
              "variable" : 3
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 164,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "goroutineheader"
            }
          },
          "go-type" : 39,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 622,
      "code" : "goroutineheader(gp)",
      "entry" : false,
      "use-vars" : [ 3 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 52 ],
      "in-vars" : [ 5, 3, 10, 9, 7, 26 ],
      "exit" : false,
      "out-vars" : [ 5, 3, 10, 9, 7, 26 ],
      "decl-vars" : [ ],
      "line-start" : 623,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "arguments" : [ ],
            "ellipsis" : false,
            "function" : {
              "field" : {
                "ident-kind" : "Func",
                "kind" : "ident",
                "value" : "sigpc"
              },
              "go-type" : 132,
              "kind" : "expression",
              "target" : {
                "go-type" : 119,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "c",
                  "variable" : 10
                }
              },
              "type" : "selector"
            },
            "go-type" : 14,
            "kind" : "expression",
            "type" : "call"
          }, {
            "arguments" : [ ],
            "ellipsis" : false,
            "function" : {
              "field" : {
                "ident-kind" : "Func",
                "kind" : "ident",
                "value" : "sigsp"
              },
              "go-type" : 132,
              "kind" : "expression",
              "target" : {
                "go-type" : 119,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "c",
                  "variable" : 10
                }
              },
              "type" : "selector"
            },
            "go-type" : 14,
            "kind" : "expression",
            "type" : "call"
          }, {
            "arguments" : [ ],
            "ellipsis" : false,
            "function" : {
              "field" : {
                "ident-kind" : "Func",
                "kind" : "ident",
                "value" : "siglr"
              },
              "go-type" : 132,
              "kind" : "expression",
              "target" : {
                "go-type" : 119,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "c",
                  "variable" : 10
                }
              },
              "type" : "selector"
            },
            "go-type" : 14,
            "kind" : "expression",
            "type" : "call"
          }, {
            "go-type" : 9,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "gp",
              "variable" : 3
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 165,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "tracebacktrap"
            }
          },
          "go-type" : 39,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 623,
      "code" : "tracebacktrap(c.sigpc(), c.sigsp(), c.siglr(), gp)",
      "entry" : false,
      "use-vars" : [ 3, 10 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 53, 55 ],
      "in-vars" : [ 7, 26, 5, 3, 10, 9 ],
      "exit" : false,
      "out-vars" : [ 5, 3, 10, 9, 7, 26 ],
      "decl-vars" : [ ],
      "line-start" : 624,
      "ast" : {
        "condition" : {
          "go-type" : 129,
          "kind" : "expression",
          "left" : {
            "go-type" : 129,
            "kind" : "expression",
            "left" : {
              "go-type" : 129,
              "kind" : "expression",
              "left" : {
                "go-type" : 129,
                "kind" : "expression",
                "left" : {
                  "go-type" : 6,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "crashing",
                    "variable" : 5
                  }
                },
                "operator" : ">",
                "right" : {
                  "go-type" : 6,
                  "kind" : "constant",
                  "value" : {
                    "type" : "INT",
                    "value" : "0"
                  }
                },
                "type" : "binary"
              },
              "operator" : "&&",
              "right" : {
                "go-type" : 129,
                "kind" : "expression",
                "left" : {
                  "go-type" : 9,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "gp",
                    "variable" : 3
                  }
                },
                "operator" : "!=",
                "right" : {
                  "field" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "curg",
                    "variable" : 29
                  },
                  "go-type" : 9,
                  "kind" : "expression",
                  "target" : {
                    "field" : {
                      "ident-kind" : "Var",
                      "kind" : "ident",
                      "value" : "m",
                      "variable" : 11
                    },
                    "go-type" : 26,
                    "kind" : "expression",
                    "target" : {
                      "go-type" : 9,
                      "kind" : "expression",
                      "type" : "identifier",
                      "value" : {
                        "ident-kind" : "Var",
                        "kind" : "ident",
                        "value" : "_g_",
                        "variable" : 9
                      }
                    },
                    "type" : "selector"
                  },
                  "type" : "selector"
                },
                "type" : "binary"
              },
              "type" : "binary"
            },
            "operator" : "&&",
            "right" : {
              "go-type" : 129,
              "kind" : "expression",
              "left" : {
                "field" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "curg",
                  "variable" : 29
                },
                "go-type" : 9,
                "kind" : "expression",
                "target" : {
                  "field" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "m",
                    "variable" : 11
                  },
                  "go-type" : 26,
                  "kind" : "expression",
                  "target" : {
                    "go-type" : 9,
                    "kind" : "expression",
                    "type" : "identifier",
                    "value" : {
                      "ident-kind" : "Var",
                      "kind" : "ident",
                      "value" : "_g_",
                      "variable" : 9
                    }
                  },
                  "type" : "selector"
                },
                "type" : "selector"
              },
              "operator" : "!=",
              "right" : {
                "go-type" : 134,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Nil",
                  "kind" : "ident",
                  "value" : "nil"
                }
              },
              "type" : "binary"
            },
            "type" : "binary"
          },
          "operator" : "&&",
          "right" : {
            "go-type" : 129,
            "kind" : "expression",
            "left" : {
              "go-type" : 2,
              "kind" : "expression",
              "left" : {
                "arguments" : [ {
                  "field" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "curg",
                    "variable" : 29
                  },
                  "go-type" : 9,
                  "kind" : "expression",
                  "target" : {
                    "field" : {
                      "ident-kind" : "Var",
                      "kind" : "ident",
                      "value" : "m",
                      "variable" : 11
                    },
                    "go-type" : 26,
                    "kind" : "expression",
                    "target" : {
                      "go-type" : 9,
                      "kind" : "expression",
                      "type" : "identifier",
                      "value" : {
                        "ident-kind" : "Var",
                        "kind" : "ident",
                        "value" : "_g_",
                        "variable" : 9
                      }
                    },
                    "type" : "selector"
                  },
                  "type" : "selector"
                } ],
                "ellipsis" : false,
                "function" : {
                  "go-type" : 167,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Func",
                    "kind" : "ident",
                    "value" : "readgstatus"
                  }
                },
                "go-type" : 2,
                "kind" : "expression",
                "type" : "call"
              },
              "operator" : "&^",
              "right" : {
                "go-type" : 2,
                "kind" : "constant",
                "value" : {
                  "type" : "INT",
                  "value" : "4096"
                }
              },
              "type" : "binary"
            },
            "operator" : "==",
            "right" : {
              "go-type" : 2,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "2"
              }
            },
            "type" : "binary"
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 631,
      "code" : "if crashing > 0 && gp != _g_.m.curg && _g_.m.curg != nil && readgstatus(_g_.m.curg)&^_Gscan == _Grunning {\n\n\tgoroutineheader(_g_.m.curg)\n\ttraceback(^uintptr(0), ^uintptr(0), 0, _g_.m.curg)\n} else if crashing == 0 {\n\ttracebackothers(gp)\n\tprint(\"\\n\")\n}",
      "entry" : false,
      "use-vars" : [ 3, 9, 5 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 54 ],
      "in-vars" : [ 5, 10, 9, 7, 26 ],
      "exit" : false,
      "out-vars" : [ 5, 10, 9, 7, 26 ],
      "decl-vars" : [ ],
      "line-start" : 626,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "curg",
              "variable" : 29
            },
            "go-type" : 9,
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "m",
                "variable" : 11
              },
              "go-type" : 26,
              "kind" : "expression",
              "target" : {
                "go-type" : 9,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "_g_",
                  "variable" : 9
                }
              },
              "type" : "selector"
            },
            "type" : "selector"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 164,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "goroutineheader"
            }
          },
          "go-type" : 39,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 626,
      "code" : "goroutineheader(_g_.m.curg)",
      "entry" : false,
      "use-vars" : [ 9 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 58 ],
      "in-vars" : [ 5, 10, 9, 7, 26 ],
      "exit" : false,
      "out-vars" : [ 7, 26, 5, 10 ],
      "decl-vars" : [ ],
      "line-start" : 627,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 14,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "18446744073709551615"
            }
          }, {
            "go-type" : 14,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "18446744073709551615"
            }
          }, {
            "go-type" : 14,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          }, {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "curg",
              "variable" : 29
            },
            "go-type" : 9,
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "m",
                "variable" : 11
              },
              "go-type" : 26,
              "kind" : "expression",
              "target" : {
                "go-type" : 9,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "_g_",
                  "variable" : 9
                }
              },
              "type" : "selector"
            },
            "type" : "selector"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 165,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "traceback"
            }
          },
          "go-type" : 39,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 627,
      "code" : "traceback(^uintptr(0), ^uintptr(0), 0, _g_.m.curg)",
      "entry" : false,
      "use-vars" : [ 9 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 56, 58 ],
      "in-vars" : [ 5, 3, 10, 7, 26 ],
      "exit" : false,
      "out-vars" : [ 5, 3, 10, 7, 26 ],
      "decl-vars" : [ ],
      "line-start" : 628,
      "ast" : {
        "condition" : {
          "go-type" : 129,
          "kind" : "expression",
          "left" : {
            "go-type" : 6,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "crashing",
              "variable" : 5
            }
          },
          "operator" : "==",
          "right" : {
            "go-type" : 6,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 631,
      "code" : "if crashing == 0 {\n\ttracebackothers(gp)\n\tprint(\"\\n\")\n}",
      "entry" : false,
      "use-vars" : [ 5 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 57 ],
      "in-vars" : [ 7, 26, 5, 3, 10 ],
      "exit" : false,
      "out-vars" : [ 7, 26, 5, 10 ],
      "decl-vars" : [ ],
      "line-start" : 629,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 9,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "gp",
              "variable" : 3
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 169,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "tracebackothers"
            }
          },
          "go-type" : 39,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 629,
      "code" : "tracebackothers(gp)",
      "entry" : false,
      "use-vars" : [ 3 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 58 ],
      "in-vars" : [ 10, 7, 26, 5 ],
      "exit" : false,
      "out-vars" : [ 26, 5, 10, 7 ],
      "decl-vars" : [ ],
      "line-start" : 630,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 42,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "\n"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 160,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Builtin",
              "kind" : "ident",
              "value" : "print"
            }
          },
          "go-type" : 39,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 630,
      "code" : "print(\"\\n\")",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 59 ],
      "in-vars" : [ 5, 10, 7, 26 ],
      "exit" : false,
      "out-vars" : [ 5, 7, 26 ],
      "decl-vars" : [ ],
      "line-start" : 632,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 119,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "c",
              "variable" : 10
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 171,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "dumpregs"
            }
          },
          "go-type" : 39,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 632,
      "code" : "dumpregs(c)",
      "entry" : false,
      "use-vars" : [ 10 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 60, 66 ],
      "in-vars" : [ 26, 5, 7 ],
      "exit" : false,
      "out-vars" : [ 7, 5 ],
      "decl-vars" : [ ],
      "line-start" : 635,
      "ast" : {
        "condition" : {
          "go-type" : 19,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "docrash",
            "variable" : 26
          }
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 653,
      "code" : "if docrash {\n\tcrashing++\n\tif crashing < mcount()-int32(extraMCount) {\n\n\t\tprint(\"\\n-----\\n\\n\")\n\t\traiseproc(_SIGQUIT)\n\t\tusleep(5 * 1000 * 1000)\n\t}\n\tcrash()\n}",
      "entry" : false,
      "use-vars" : [ 26 ]
    }, {
      "update-vars" : [ 5 ],
      "successors" : [ 61 ],
      "in-vars" : [ 5, 7 ],
      "exit" : false,
      "out-vars" : [ 5, 7 ],
      "decl-vars" : [ ],
      "line-start" : 636,
      "ast" : {
        "kind" : "statement",
        "operation" : "++",
        "target" : {
          "go-type" : 6,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "crashing",
            "variable" : 5
          }
        },
        "type" : "crement"
      },
      "assign-vars" : [ 5 ],
      "line-end" : 636,
      "code" : "crashing++",
      "entry" : false,
      "use-vars" : [ 5 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 62, 65 ],
      "in-vars" : [ 5, 7 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 637,
      "ast" : {
        "condition" : {
          "go-type" : 129,
          "kind" : "expression",
          "left" : {
            "go-type" : 6,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "crashing",
              "variable" : 5
            }
          },
          "operator" : "<",
          "right" : {
            "go-type" : 6,
            "kind" : "expression",
            "left" : {
              "arguments" : [ ],
              "ellipsis" : false,
              "function" : {
                "go-type" : 173,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Func",
                  "kind" : "ident",
                  "value" : "mcount"
                }
              },
              "go-type" : 6,
              "kind" : "expression",
              "type" : "call"
            },
            "operator" : "-",
            "right" : {
              "coerced-to" : {
                "go-type" : 6,
                "kind" : "type",
                "type" : "identifier",
                "value" : {
                  "go-type" : 6,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "int32"
                }
              },
              "go-type" : 6,
              "kind" : "expression",
              "target" : {
                "go-type" : 2,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "extraMCount",
                  "variable" : 7
                }
              },
              "type" : "cast"
            },
            "type" : "binary"
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 651,
      "code" : "if crashing < mcount()-int32(extraMCount) {\n\n\tprint(\"\\n-----\\n\\n\")\n\traiseproc(_SIGQUIT)\n\tusleep(5 * 1000 * 1000)\n}",
      "entry" : false,
      "use-vars" : [ 5, 7 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 63 ],
      "in-vars" : [ ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 648,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 42,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "\n-----\n\n"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 160,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Builtin",
              "kind" : "ident",
              "value" : "print"
            }
          },
          "go-type" : 39,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 648,
      "code" : "print(\"\\n-----\\n\\n\")",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 64 ],
      "in-vars" : [ ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 649,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 2,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "3"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 148,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "raiseproc"
            }
          },
          "go-type" : 39,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 649,
      "code" : "raiseproc(_SIGQUIT)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 65 ],
      "in-vars" : [ ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 650,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 2,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "5000000"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 175,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "usleep"
            }
          },
          "go-type" : 39,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 650,
      "code" : "usleep(5 * 1000 * 1000)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 66 ],
      "in-vars" : [ ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 652,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 38,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "crash"
            }
          },
          "go-type" : 39,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 652,
      "code" : "crash()",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 67 ],
      "in-vars" : [ ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 655,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 38,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "printDebugLog"
            }
          },
          "go-type" : 39,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 655,
      "code" : "printDebugLog()",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 657,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 6,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "2"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 177,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "exit"
            }
          },
          "go-type" : 39,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 657,
      "code" : "exit(2)",
      "entry" : false,
      "use-vars" : [ ]
    } ],
    "code" : "// sighandler is invoked when a signal occurs. The global g will be\n// set to a gsignal goroutine and we will be running on the alternate\n// signal stack. The parameter g will be the value of the global g\n// when the signal occurred. The sig, info, and ctxt parameters are\n// from the system signal handler: they are the parameters passed when\n// the SA is passed to the sigaction system call.\n//\n// The garbage collector may have stopped the world, so write barriers\n// are not allowed.\n//\n//go:nowritebarrierrec\nfunc sighandler(sig uint32, info *siginfo, ctxt unsafe.Pointer, gp *g) {\n\t_g_ := getg()\n\tc := &sigctxt{info, ctxt}\n\n\tif sig == _SIGPROF {\n\t\tsigprof(c.sigpc(), c.sigsp(), c.siglr(), gp, _g_.m)\n\t\treturn\n\t}\n\n\tif sig == _SIGTRAP && testSigtrap != nil && testSigtrap(info, (*sigctxt)(noescape(unsafe.Pointer(c))), gp) {\n\t\treturn\n\t}\n\n\tif sig == _SIGUSR1 && testSigusr1 != nil && testSigusr1(gp) {\n\t\treturn\n\t}\n\n\tif sig == sigPreempt {\n\n\t\tdoSigPreempt(gp, c)\n\n\t}\n\n\tflags := int32(_SigThrow)\n\tif sig < uint32(len(sigtable)) {\n\t\tflags = sigtable[sig].flags\n\t}\n\tif flags&_SigPanic != 0 && gp.throwsplit {\n\n\t\tflags = (flags &^ _SigPanic) | _SigThrow\n\t}\n\tif isAbortPC(c.sigpc()) {\n\n\t\tflags = _SigThrow\n\t}\n\tif c.sigcode() != _SI_USER && flags&_SigPanic != 0 {\n\n\t\tgp.sig = sig\n\t\tgp.sigcode0 = uintptr(c.sigcode())\n\t\tgp.sigcode1 = uintptr(c.fault())\n\t\tgp.sigpc = c.sigpc()\n\n\t\tc.preparePanic(sig, gp)\n\t\treturn\n\t}\n\n\tif c.sigcode() == _SI_USER || flags&_SigNotify != 0 {\n\t\tif sigsend(sig) {\n\t\t\treturn\n\t\t}\n\t}\n\n\tif c.sigcode() == _SI_USER && signal_ignored(sig) {\n\t\treturn\n\t}\n\n\tif flags&_SigKill != 0 {\n\t\tdieFromSignal(sig)\n\t}\n\n\tif flags&_SigThrow == 0 {\n\t\treturn\n\t}\n\n\t_g_.m.throwing = 1\n\t_g_.m.caughtsig.set(gp)\n\n\tif crashing == 0 {\n\t\tstartpanic_m()\n\t}\n\n\tif sig < uint32(len(sigtable)) {\n\t\tprint(sigtable[sig].name, \"\\n\")\n\t} else {\n\t\tprint(\"Signal \", sig, \"\\n\")\n\t}\n\n\tprint(\"PC=\", hex(c.sigpc()), \" m=\", _g_.m.id, \" sigcode=\", c.sigcode(), \"\\n\")\n\tif _g_.m.lockedg != 0 && _g_.m.ncgo > 0 && gp == _g_.m.g0 {\n\t\tprint(\"signal arrived during cgo execution\\n\")\n\t\tgp = _g_.m.lockedg.ptr()\n\t}\n\tprint(\"\\n\")\n\n\tlevel, _, docrash := gotraceback()\n\tif level > 0 {\n\t\tgoroutineheader(gp)\n\t\ttracebacktrap(c.sigpc(), c.sigsp(), c.siglr(), gp)\n\t\tif crashing > 0 && gp != _g_.m.curg && _g_.m.curg != nil && readgstatus(_g_.m.curg)&^_Gscan == _Grunning {\n\n\t\t\tgoroutineheader(_g_.m.curg)\n\t\t\ttraceback(^uintptr(0), ^uintptr(0), 0, _g_.m.curg)\n\t\t} else if crashing == 0 {\n\t\t\ttracebackothers(gp)\n\t\t\tprint(\"\\n\")\n\t\t}\n\t\tdumpregs(c)\n\t}\n\n\tif docrash {\n\t\tcrashing++\n\t\tif crashing < mcount()-int32(extraMCount) {\n\n\t\t\tprint(\"\\n-----\\n\\n\")\n\t\t\traiseproc(_SIGQUIT)\n\t\t\tusleep(5 * 1000 * 1000)\n\t\t}\n\t\tcrash()\n\t}\n\n\tprintDebugLog()\n\n\texit(2)\n}",
    "defines" : [ 0 ],
    "functions" : [ {
      "name" : "sighandler",
      "package" : 0,
      "type" : 0,
      "exported" : false
    }, {
      "name" : "getg",
      "package" : 0,
      "type" : 127,
      "exported" : false
    }, {
      "name" : "sigprof",
      "package" : 0,
      "type" : 130,
      "exported" : false
    }, {
      "name" : "sigpc",
      "package" : 0,
      "type" : 132,
      "exported" : false
    }, {
      "name" : "sigsp",
      "package" : 0,
      "type" : 132,
      "exported" : false
    }, {
      "name" : "siglr",
      "package" : 0,
      "type" : 132,
      "exported" : false
    }, {
      "name" : "noescape",
      "package" : 0,
      "type" : 135,
      "exported" : false
    }, {
      "name" : "doSigPreempt",
      "package" : 0,
      "type" : 138,
      "exported" : false
    }, {
      "name" : "isAbortPC",
      "package" : 0,
      "type" : 140,
      "exported" : false
    }, {
      "name" : "sigcode",
      "package" : 0,
      "type" : 142,
      "exported" : false
    }, {
      "name" : "fault",
      "package" : 0,
      "type" : 132,
      "exported" : false
    }, {
      "name" : "preparePanic",
      "package" : 0,
      "type" : 144,
      "exported" : false
    }, {
      "name" : "sigsend",
      "package" : 0,
      "type" : 146,
      "exported" : false
    }, {
      "name" : "signal_ignored",
      "package" : 0,
      "type" : 146,
      "exported" : false
    }, {
      "name" : "dieFromSignal",
      "package" : 0,
      "type" : 148,
      "exported" : false
    }, {
      "name" : "set",
      "package" : 0,
      "type" : 150,
      "exported" : false
    }, {
      "name" : "startpanic_m",
      "package" : 0,
      "type" : 152,
      "exported" : false
    }, {
      "name" : "ptr",
      "package" : 0,
      "type" : 127,
      "exported" : false
    }, {
      "name" : "gotraceback",
      "package" : 0,
      "type" : 163,
      "exported" : false
    }, {
      "name" : "goroutineheader",
      "package" : 0,
      "type" : 164,
      "exported" : false
    }, {
      "name" : "tracebacktrap",
      "package" : 0,
      "type" : 165,
      "exported" : false
    }, {
      "name" : "readgstatus",
      "package" : 0,
      "type" : 167,
      "exported" : false
    }, {
      "name" : "traceback",
      "package" : 0,
      "type" : 165,
      "exported" : false
    }, {
      "name" : "tracebackothers",
      "package" : 0,
      "type" : 169,
      "exported" : false
    }, {
      "name" : "dumpregs",
      "package" : 0,
      "type" : 171,
      "exported" : false
    }, {
      "name" : "mcount",
      "package" : 0,
      "type" : 173,
      "exported" : false
    }, {
      "name" : "raiseproc",
      "package" : 0,
      "type" : 148,
      "exported" : false
    }, {
      "name" : "usleep",
      "package" : 0,
      "type" : 175,
      "exported" : false
    }, {
      "name" : "crash",
      "package" : 0,
      "type" : 38,
      "exported" : false
    }, {
      "name" : "printDebugLog",
      "package" : 0,
      "type" : 38,
      "exported" : false
    }, {
      "name" : "exit",
      "package" : 0,
      "type" : 177,
      "exported" : false
    } ],
    "line-end" : 658,
    "line-start" : 525,
    "names" : [ "sighandler" ],
    "package" : 0,
    "packages" : [ {
      "name" : "runtime",
      "path" : "runtime"
    }, {
      "name" : "unsafe",
      "path" : "unsafe"
    }, {
      "name" : "sys",
      "path" : "runtime/internal/sys"
    } ],
    "params" : [ 0, 1, 2, 3 ],
    "receivers" : [ ],
    "results" : [ ],
    "type" : "function",
    "types" : [ {
      "name" : "func(sig uint32, info *runtime.siginfo, ctxt unsafe.Pointer, gp *runtime.g)",
      "params" : 1,
      "recv" : -1,
      "results" : 39,
      "type" : "Signature",
      "underlying" : 0,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "sig",
        "type" : 2
      }, {
        "name" : "info",
        "type" : 3
      }, {
        "name" : "ctxt",
        "type" : 8
      }, {
        "name" : "gp",
        "type" : 9
      } ],
      "name" : "(sig uint32, info *runtime.siginfo, ctxt unsafe.Pointer, gp *runtime.g)",
      "type" : "Tuple",
      "underlying" : 1
    }, {
      "name" : "uint32",
      "type" : "Basic",
      "underlying" : 2
    }, {
      "elem" : 4,
      "name" : "*runtime.siginfo",
      "type" : "Pointer",
      "underlying" : 3
    }, {
      "local-name" : "siginfo",
      "name" : "runtime.siginfo",
      "package" : 0,
      "type" : "Named",
      "underlying" : 5
    }, {
      "fields" : [ {
        "name" : "si_signo",
        "type" : 6
      }, {
        "name" : "si_errno",
        "type" : 6
      }, {
        "name" : "si_code",
        "type" : 6
      }, {
        "name" : "si_addr",
        "type" : 7
      } ],
      "name" : "struct{si_signo int32; si_errno int32; si_code int32; si_addr uint64}",
      "type" : "Struct",
      "underlying" : 5
    }, {
      "name" : "int32",
      "type" : "Basic",
      "underlying" : 6
    }, {
      "name" : "uint64",
      "type" : "Basic",
      "underlying" : 7
    }, {
      "local-name" : "Pointer",
      "name" : "unsafe.Pointer",
      "package" : 1,
      "type" : "Basic",
      "underlying" : 8
    }, {
      "elem" : 10,
      "name" : "*runtime.g",
      "type" : "Pointer",
      "underlying" : 9
    }, {
      "local-name" : "g",
      "name" : "runtime.g",
      "package" : 0,
      "type" : "Named",
      "underlying" : 11
    }, {
      "fields" : [ {
        "name" : "stack",
        "type" : 12
      }, {
        "name" : "stackguard0",
        "type" : 14
      }, {
        "name" : "stackguard1",
        "type" : 14
      }, {
        "name" : "_panic",
        "type" : 15
      }, {
        "name" : "_defer",
        "type" : 20
      }, {
        "name" : "m",
        "type" : 26
      }, {
        "name" : "sched",
        "type" : 29
      }, {
        "name" : "syscallsp",
        "type" : 14
      }, {
        "name" : "syscallpc",
        "type" : 14
      }, {
        "name" : "stktopsp",
        "type" : 14
      }, {
        "name" : "param",
        "type" : 8
      }, {
        "name" : "atomicstatus",
        "type" : 2
      }, {
        "name" : "stackLock",
        "type" : 2
      }, {
        "name" : "goid",
        "type" : 41
      }, {
        "name" : "schedlink",
        "type" : 31
      }, {
        "name" : "waitsince",
        "type" : 41
      }, {
        "name" : "waitreason",
        "type" : 87
      }, {
        "name" : "preempt",
        "type" : 19
      }, {
        "name" : "preemptStop",
        "type" : 19
      }, {
        "name" : "preemptShrink",
        "type" : 19
      }, {
        "name" : "asyncSafePoint",
        "type" : 19
      }, {
        "name" : "paniconfault",
        "type" : 19
      }, {
        "name" : "gcscandone",
        "type" : 19
      }, {
        "name" : "throwsplit",
        "type" : 19
      }, {
        "name" : "activeStackChans",
        "type" : 19
      }, {
        "name" : "raceignore",
        "type" : 43
      }, {
        "name" : "sysblocktraced",
        "type" : 19
      }, {
        "name" : "sysexitticks",
        "type" : 41
      }, {
        "name" : "traceseq",
        "type" : 7
      }, {
        "name" : "tracelastp",
        "type" : 40
      }, {
        "name" : "lockedm",
        "type" : 50
      }, {
        "name" : "sig",
        "type" : 2
      }, {
        "name" : "writebuf",
        "type" : 88
      }, {
        "name" : "sigcode0",
        "type" : 14
      }, {
        "name" : "sigcode1",
        "type" : 14
      }, {
        "name" : "sigpc",
        "type" : 14
      }, {
        "name" : "gopc",
        "type" : 14
      }, {
        "name" : "ancestors",
        "type" : 89
      }, {
        "name" : "startpc",
        "type" : 14
      }, {
        "name" : "racectx",
        "type" : 14
      }, {
        "name" : "waiting",
        "type" : 94
      }, {
        "name" : "cgoCtxt",
        "type" : 93
      }, {
        "name" : "labels",
        "type" : 8
      }, {
        "name" : "timer",
        "type" : 112
      }, {
        "name" : "selectDone",
        "type" : 2
      }, {
        "name" : "gcAssistBytes",
        "type" : 41
      } ],
      "name" : "struct{stack runtime.stack; stackguard0 uintptr; stackguard1 uintptr; _panic *runtime._panic; _defer *runtime._defer; m *runtime.m; sched runtime.gobuf; syscallsp uintptr; syscallpc uintptr; stktopsp uintptr; param unsafe.Pointer; atomicstatus uint32; stackLock uint32; goid int64; schedlink runtime.guintptr; waitsince int64; waitreason runtime.waitReason; preempt bool; preemptStop bool; preemptShrink bool; asyncSafePoint bool; paniconfault bool; gcscandone bool; throwsplit bool; activeStackChans bool; raceignore int8; sysblocktraced bool; sysexitticks int64; traceseq uint64; tracelastp runtime.puintptr; lockedm runtime.muintptr; sig uint32; writebuf []byte; sigcode0 uintptr; sigcode1 uintptr; sigpc uintptr; gopc uintptr; ancestors *[]runtime.ancestorInfo; startpc uintptr; racectx uintptr; waiting *runtime.sudog; cgoCtxt []uintptr; labels unsafe.Pointer; timer *runtime.timer; selectDone uint32; gcAssistBytes int64}",
      "type" : "Struct",
      "underlying" : 11
    }, {
      "local-name" : "stack",
      "name" : "runtime.stack",
      "package" : 0,
      "type" : "Named",
      "underlying" : 13
    }, {
      "fields" : [ {
        "name" : "lo",
        "type" : 14
      }, {
        "name" : "hi",
        "type" : 14
      } ],
      "name" : "struct{lo uintptr; hi uintptr}",
      "type" : "Struct",
      "underlying" : 13
    }, {
      "name" : "uintptr",
      "type" : "Basic",
      "underlying" : 14
    }, {
      "elem" : 16,
      "name" : "*runtime._panic",
      "type" : "Pointer",
      "underlying" : 15
    }, {
      "local-name" : "_panic",
      "name" : "runtime._panic",
      "package" : 0,
      "type" : "Named",
      "underlying" : 17
    }, {
      "fields" : [ {
        "name" : "argp",
        "type" : 8
      }, {
        "name" : "arg",
        "type" : 18
      }, {
        "name" : "link",
        "type" : 15
      }, {
        "name" : "pc",
        "type" : 14
      }, {
        "name" : "sp",
        "type" : 8
      }, {
        "name" : "recovered",
        "type" : 19
      }, {
        "name" : "aborted",
        "type" : 19
      }, {
        "name" : "goexit",
        "type" : 19
      } ],
      "name" : "struct{argp unsafe.Pointer; arg interface{}; link *runtime._panic; pc uintptr; sp unsafe.Pointer; recovered bool; aborted bool; goexit bool}",
      "type" : "Struct",
      "underlying" : 17
    }, {
      "methods" : [ ],
      "name" : "interface{}",
      "type" : "Interface",
      "underlying" : 18
    }, {
      "name" : "bool",
      "type" : "Basic",
      "underlying" : 19
    }, {
      "elem" : 21,
      "name" : "*runtime._defer",
      "type" : "Pointer",
      "underlying" : 20
    }, {
      "local-name" : "_defer",
      "name" : "runtime._defer",
      "package" : 0,
      "type" : "Named",
      "underlying" : 22
    }, {
      "fields" : [ {
        "name" : "siz",
        "type" : 6
      }, {
        "name" : "started",
        "type" : 19
      }, {
        "name" : "heap",
        "type" : 19
      }, {
        "name" : "openDefer",
        "type" : 19
      }, {
        "name" : "sp",
        "type" : 14
      }, {
        "name" : "pc",
        "type" : 14
      }, {
        "name" : "fn",
        "type" : 23
      }, {
        "name" : "_panic",
        "type" : 15
      }, {
        "name" : "link",
        "type" : 20
      }, {
        "name" : "fd",
        "type" : 8
      }, {
        "name" : "varp",
        "type" : 14
      }, {
        "name" : "framepc",
        "type" : 14
      } ],
      "name" : "struct{siz int32; started bool; heap bool; openDefer bool; sp uintptr; pc uintptr; fn *runtime.funcval; _panic *runtime._panic; link *runtime._defer; fd unsafe.Pointer; varp uintptr; framepc uintptr}",
      "type" : "Struct",
      "underlying" : 22
    }, {
      "elem" : 24,
      "name" : "*runtime.funcval",
      "type" : "Pointer",
      "underlying" : 23
    }, {
      "local-name" : "funcval",
      "name" : "runtime.funcval",
      "package" : 0,
      "type" : "Named",
      "underlying" : 25
    }, {
      "fields" : [ {
        "name" : "fn",
        "type" : 14
      } ],
      "name" : "struct{fn uintptr}",
      "type" : "Struct",
      "underlying" : 25
    }, {
      "elem" : 27,
      "name" : "*runtime.m",
      "type" : "Pointer",
      "underlying" : 26
    }, {
      "local-name" : "m",
      "name" : "runtime.m",
      "package" : 0,
      "type" : "Named",
      "underlying" : 28
    }, {
      "fields" : [ {
        "name" : "g0",
        "type" : 9
      }, {
        "name" : "morebuf",
        "type" : 29
      }, {
        "name" : "divmod",
        "type" : 2
      }, {
        "name" : "procid",
        "type" : 7
      }, {
        "name" : "gsignal",
        "type" : 9
      }, {
        "name" : "goSigStack",
        "type" : 33
      }, {
        "name" : "sigmask",
        "type" : 35
      }, {
        "name" : "tls",
        "type" : 37
      }, {
        "name" : "mstartfn",
        "type" : 38
      }, {
        "name" : "curg",
        "type" : 9
      }, {
        "name" : "caughtsig",
        "type" : 31
      }, {
        "name" : "p",
        "type" : 40
      }, {
        "name" : "nextp",
        "type" : 40
      }, {
        "name" : "oldp",
        "type" : 40
      }, {
        "name" : "id",
        "type" : 41
      }, {
        "name" : "mallocing",
        "type" : 6
      }, {
        "name" : "throwing",
        "type" : 6
      }, {
        "name" : "preemptoff",
        "type" : 42
      }, {
        "name" : "locks",
        "type" : 6
      }, {
        "name" : "dying",
        "type" : 6
      }, {
        "name" : "profilehz",
        "type" : 6
      }, {
        "name" : "spinning",
        "type" : 19
      }, {
        "name" : "blocked",
        "type" : 19
      }, {
        "name" : "newSigstack",
        "type" : 19
      }, {
        "name" : "printlock",
        "type" : 43
      }, {
        "name" : "incgo",
        "type" : 19
      }, {
        "name" : "freeWait",
        "type" : 2
      }, {
        "name" : "fastrand",
        "type" : 36
      }, {
        "name" : "needextram",
        "type" : 19
      }, {
        "name" : "traceback",
        "type" : 44
      }, {
        "name" : "ncgocall",
        "type" : 7
      }, {
        "name" : "ncgo",
        "type" : 6
      }, {
        "name" : "cgoCallersUse",
        "type" : 2
      }, {
        "name" : "cgoCallers",
        "type" : 45
      }, {
        "name" : "park",
        "type" : 48
      }, {
        "name" : "alllink",
        "type" : 26
      }, {
        "name" : "schedlink",
        "type" : 50
      }, {
        "name" : "mcache",
        "type" : 51
      }, {
        "name" : "lockedg",
        "type" : 31
      }, {
        "name" : "createstack",
        "type" : 47
      }, {
        "name" : "lockedExt",
        "type" : 2
      }, {
        "name" : "lockedInt",
        "type" : 2
      }, {
        "name" : "nextwaitm",
        "type" : 50
      }, {
        "name" : "waitunlockf",
        "type" : 78
      }, {
        "name" : "waitlock",
        "type" : 8
      }, {
        "name" : "waittraceev",
        "type" : 73
      }, {
        "name" : "waittraceskip",
        "type" : 81
      }, {
        "name" : "startingtrace",
        "type" : 19
      }, {
        "name" : "syscalltick",
        "type" : 2
      }, {
        "name" : "freelink",
        "type" : 26
      }, {
        "name" : "libcall",
        "type" : 82
      }, {
        "name" : "libcallpc",
        "type" : 14
      }, {
        "name" : "libcallsp",
        "type" : 14
      }, {
        "name" : "libcallg",
        "type" : 31
      }, {
        "name" : "syscall",
        "type" : 82
      }, {
        "name" : "vdsoSP",
        "type" : 14
      }, {
        "name" : "vdsoPC",
        "type" : 14
      }, {
        "name" : "preemptGen",
        "type" : 2
      }, {
        "name" : "signalPending",
        "type" : 2
      }, {
        "name" : "dlogPerM",
        "type" : 84
      }, {
        "name" : "mOS",
        "type" : 86
      } ],
      "name" : "struct{g0 *runtime.g; morebuf runtime.gobuf; divmod uint32; procid uint64; gsignal *runtime.g; goSigStack runtime.gsignalStack; sigmask runtime.sigset; tls [6]uintptr; mstartfn func(); curg *runtime.g; caughtsig runtime.guintptr; p runtime.puintptr; nextp runtime.puintptr; oldp runtime.puintptr; id int64; mallocing int32; throwing int32; preemptoff string; locks int32; dying int32; profilehz int32; spinning bool; blocked bool; newSigstack bool; printlock int8; incgo bool; freeWait uint32; fastrand [2]uint32; needextram bool; traceback uint8; ncgocall uint64; ncgo int32; cgoCallersUse uint32; cgoCallers *runtime.cgoCallers; park runtime.note; alllink *runtime.m; schedlink runtime.muintptr; mcache *runtime.mcache; lockedg runtime.guintptr; createstack [32]uintptr; lockedExt uint32; lockedInt uint32; nextwaitm runtime.muintptr; waitunlockf func(*runtime.g, unsafe.Pointer) bool; waitlock unsafe.Pointer; waittraceev byte; waittraceskip int; startingtrace bool; syscalltick uint32; freelink *runtime.m; libcall runtime.libcall; libcallpc uintptr; libcallsp uintptr; libcallg runtime.guintptr; syscall runtime.libcall; vdsoSP uintptr; vdsoPC uintptr; preemptGen uint32; signalPending uint32; runtime.dlogPerM; runtime.mOS}",
      "type" : "Struct",
      "underlying" : 28
    }, {
      "local-name" : "gobuf",
      "name" : "runtime.gobuf",
      "package" : 0,
      "type" : "Named",
      "underlying" : 30
    }, {
      "fields" : [ {
        "name" : "sp",
        "type" : 14
      }, {
        "name" : "pc",
        "type" : 14
      }, {
        "name" : "g",
        "type" : 31
      }, {
        "name" : "ctxt",
        "type" : 8
      }, {
        "name" : "ret",
        "type" : 32
      }, {
        "name" : "lr",
        "type" : 14
      }, {
        "name" : "bp",
        "type" : 14
      } ],
      "name" : "struct{sp uintptr; pc uintptr; g runtime.guintptr; ctxt unsafe.Pointer; ret runtime/internal/sys.Uintreg; lr uintptr; bp uintptr}",
      "type" : "Struct",
      "underlying" : 30
    }, {
      "local-name" : "guintptr",
      "name" : "runtime.guintptr",
      "package" : 0,
      "type" : "Named",
      "underlying" : 14
    }, {
      "local-name" : "Uintreg",
      "name" : "runtime/internal/sys.Uintreg",
      "package" : 2,
      "type" : "Named",
      "underlying" : 7
    }, {
      "local-name" : "gsignalStack",
      "name" : "runtime.gsignalStack",
      "package" : 0,
      "type" : "Named",
      "underlying" : 34
    }, {
      "fields" : [ {
        "name" : "stack",
        "type" : 12
      }, {
        "name" : "stackguard0",
        "type" : 14
      }, {
        "name" : "stackguard1",
        "type" : 14
      }, {
        "name" : "stktopsp",
        "type" : 14
      } ],
      "name" : "struct{stack runtime.stack; stackguard0 uintptr; stackguard1 uintptr; stktopsp uintptr}",
      "type" : "Struct",
      "underlying" : 34
    }, {
      "local-name" : "sigset",
      "name" : "runtime.sigset",
      "package" : 0,
      "type" : "Named",
      "underlying" : 36
    }, {
      "elem" : 2,
      "name" : "[2]uint32",
      "type" : "Array",
      "underlying" : 36
    }, {
      "elem" : 14,
      "name" : "[6]uintptr",
      "type" : "Array",
      "underlying" : 37
    }, {
      "name" : "func()",
      "params" : 39,
      "recv" : -1,
      "results" : 39,
      "type" : "Signature",
      "underlying" : 38,
      "variadic" : false
    }, {
      "fields" : [ ],
      "name" : "()",
      "type" : "Tuple",
      "underlying" : 39
    }, {
      "local-name" : "puintptr",
      "name" : "runtime.puintptr",
      "package" : 0,
      "type" : "Named",
      "underlying" : 14
    }, {
      "name" : "int64",
      "type" : "Basic",
      "underlying" : 41
    }, {
      "name" : "string",
      "type" : "Basic",
      "underlying" : 42
    }, {
      "name" : "int8",
      "type" : "Basic",
      "underlying" : 43
    }, {
      "name" : "uint8",
      "type" : "Basic",
      "underlying" : 44
    }, {
      "elem" : 46,
      "name" : "*runtime.cgoCallers",
      "type" : "Pointer",
      "underlying" : 45
    }, {
      "local-name" : "cgoCallers",
      "name" : "runtime.cgoCallers",
      "package" : 0,
      "type" : "Named",
      "underlying" : 47
    }, {
      "elem" : 14,
      "name" : "[32]uintptr",
      "type" : "Array",
      "underlying" : 47
    }, {
      "local-name" : "note",
      "name" : "runtime.note",
      "package" : 0,
      "type" : "Named",
      "underlying" : 49
    }, {
      "fields" : [ {
        "name" : "key",
        "type" : 14
      } ],
      "name" : "struct{key uintptr}",
      "type" : "Struct",
      "underlying" : 49
    }, {
      "local-name" : "muintptr",
      "name" : "runtime.muintptr",
      "package" : 0,
      "type" : "Named",
      "underlying" : 14
    }, {
      "elem" : 52,
      "name" : "*runtime.mcache",
      "type" : "Pointer",
      "underlying" : 51
    }, {
      "local-name" : "mcache",
      "name" : "runtime.mcache",
      "package" : 0,
      "type" : "Named",
      "underlying" : 53
    }, {
      "fields" : [ {
        "name" : "next_sample",
        "type" : 14
      }, {
        "name" : "local_scan",
        "type" : 14
      }, {
        "name" : "tiny",
        "type" : 14
      }, {
        "name" : "tinyoffset",
        "type" : 14
      }, {
        "name" : "local_tinyallocs",
        "type" : 14
      }, {
        "name" : "alloc",
        "type" : 54
      }, {
        "name" : "stackcache",
        "type" : 74
      }, {
        "name" : "local_largefree",
        "type" : 14
      }, {
        "name" : "local_nlargefree",
        "type" : 14
      }, {
        "name" : "local_nsmallfree",
        "type" : 77
      }, {
        "name" : "flushGen",
        "type" : 2
      } ],
      "name" : "struct{next_sample uintptr; local_scan uintptr; tiny uintptr; tinyoffset uintptr; local_tinyallocs uintptr; alloc [134]*runtime.mspan; stackcache [4]runtime.stackfreelist; local_largefree uintptr; local_nlargefree uintptr; local_nsmallfree [67]uintptr; flushGen uint32}",
      "type" : "Struct",
      "underlying" : 53
    }, {
      "elem" : 55,
      "name" : "[134]*runtime.mspan",
      "type" : "Array",
      "underlying" : 54
    }, {
      "elem" : 56,
      "name" : "*runtime.mspan",
      "type" : "Pointer",
      "underlying" : 55
    }, {
      "local-name" : "mspan",
      "name" : "runtime.mspan",
      "package" : 0,
      "type" : "Named",
      "underlying" : 57
    }, {
      "fields" : [ {
        "name" : "next",
        "type" : 55
      }, {
        "name" : "prev",
        "type" : 55
      }, {
        "name" : "list",
        "type" : 58
      }, {
        "name" : "startAddr",
        "type" : 14
      }, {
        "name" : "npages",
        "type" : 14
      }, {
        "name" : "manualFreeList",
        "type" : 61
      }, {
        "name" : "freeindex",
        "type" : 14
      }, {
        "name" : "nelems",
        "type" : 14
      }, {
        "name" : "allocCache",
        "type" : 7
      }, {
        "name" : "allocBits",
        "type" : 62
      }, {
        "name" : "gcmarkBits",
        "type" : 62
      }, {
        "name" : "sweepgen",
        "type" : 2
      }, {
        "name" : "divMul",
        "type" : 64
      }, {
        "name" : "baseMask",
        "type" : 64
      }, {
        "name" : "allocCount",
        "type" : 64
      }, {
        "name" : "spanclass",
        "type" : 65
      }, {
        "name" : "state",
        "type" : 66
      }, {
        "name" : "needzero",
        "type" : 44
      }, {
        "name" : "divShift",
        "type" : 44
      }, {
        "name" : "divShift2",
        "type" : 44
      }, {
        "name" : "elemsize",
        "type" : 14
      }, {
        "name" : "limit",
        "type" : 14
      }, {
        "name" : "speciallock",
        "type" : 69
      }, {
        "name" : "specials",
        "type" : 70
      } ],
      "name" : "struct{next *runtime.mspan; prev *runtime.mspan; list *runtime.mSpanList; startAddr uintptr; npages uintptr; manualFreeList runtime.gclinkptr; freeindex uintptr; nelems uintptr; allocCache uint64; allocBits *runtime.gcBits; gcmarkBits *runtime.gcBits; sweepgen uint32; divMul uint16; baseMask uint16; allocCount uint16; spanclass runtime.spanClass; state runtime.mSpanStateBox; needzero uint8; divShift uint8; divShift2 uint8; elemsize uintptr; limit uintptr; speciallock runtime.mutex; specials *runtime.special}",
      "type" : "Struct",
      "underlying" : 57
    }, {
      "elem" : 59,
      "name" : "*runtime.mSpanList",
      "type" : "Pointer",
      "underlying" : 58
    }, {
      "local-name" : "mSpanList",
      "name" : "runtime.mSpanList",
      "package" : 0,
      "type" : "Named",
      "underlying" : 60
    }, {
      "fields" : [ {
        "name" : "first",
        "type" : 55
      }, {
        "name" : "last",
        "type" : 55
      } ],
      "name" : "struct{first *runtime.mspan; last *runtime.mspan}",
      "type" : "Struct",
      "underlying" : 60
    }, {
      "local-name" : "gclinkptr",
      "name" : "runtime.gclinkptr",
      "package" : 0,
      "type" : "Named",
      "underlying" : 14
    }, {
      "elem" : 63,
      "name" : "*runtime.gcBits",
      "type" : "Pointer",
      "underlying" : 62
    }, {
      "local-name" : "gcBits",
      "name" : "runtime.gcBits",
      "package" : 0,
      "type" : "Named",
      "underlying" : 44
    }, {
      "name" : "uint16",
      "type" : "Basic",
      "underlying" : 64
    }, {
      "local-name" : "spanClass",
      "name" : "runtime.spanClass",
      "package" : 0,
      "type" : "Named",
      "underlying" : 44
    }, {
      "local-name" : "mSpanStateBox",
      "name" : "runtime.mSpanStateBox",
      "package" : 0,
      "type" : "Named",
      "underlying" : 67
    }, {
      "fields" : [ {
        "name" : "s",
        "type" : 68
      } ],
      "name" : "struct{s runtime.mSpanState}",
      "type" : "Struct",
      "underlying" : 67
    }, {
      "local-name" : "mSpanState",
      "name" : "runtime.mSpanState",
      "package" : 0,
      "type" : "Named",
      "underlying" : 44
    }, {
      "local-name" : "mutex",
      "name" : "runtime.mutex",
      "package" : 0,
      "type" : "Named",
      "underlying" : 49
    }, {
      "elem" : 71,
      "name" : "*runtime.special",
      "type" : "Pointer",
      "underlying" : 70
    }, {
      "local-name" : "special",
      "name" : "runtime.special",
      "package" : 0,
      "type" : "Named",
      "underlying" : 72
    }, {
      "fields" : [ {
        "name" : "next",
        "type" : 70
      }, {
        "name" : "offset",
        "type" : 64
      }, {
        "name" : "kind",
        "type" : 73
      } ],
      "name" : "struct{next *runtime.special; offset uint16; kind byte}",
      "type" : "Struct",
      "underlying" : 72
    }, {
      "name" : "byte",
      "type" : "Basic",
      "underlying" : 73
    }, {
      "elem" : 75,
      "name" : "[4]runtime.stackfreelist",
      "type" : "Array",
      "underlying" : 74
    }, {
      "local-name" : "stackfreelist",
      "name" : "runtime.stackfreelist",
      "package" : 0,
      "type" : "Named",
      "underlying" : 76
    }, {
      "fields" : [ {
        "name" : "list",
        "type" : 61
      }, {
        "name" : "size",
        "type" : 14
      } ],
      "name" : "struct{list runtime.gclinkptr; size uintptr}",
      "type" : "Struct",
      "underlying" : 76
    }, {
      "elem" : 14,
      "name" : "[67]uintptr",
      "type" : "Array",
      "underlying" : 77
    }, {
      "name" : "func(*runtime.g, unsafe.Pointer) bool",
      "params" : 79,
      "recv" : -1,
      "results" : 80,
      "type" : "Signature",
      "underlying" : 78,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 9
      }, {
        "name" : "",
        "type" : 8
      } ],
      "name" : "(*runtime.g, unsafe.Pointer)",
      "type" : "Tuple",
      "underlying" : 79
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 19
      } ],
      "name" : "(bool)",
      "type" : "Tuple",
      "underlying" : 80
    }, {
      "name" : "int",
      "type" : "Basic",
      "underlying" : 81
    }, {
      "local-name" : "libcall",
      "name" : "runtime.libcall",
      "package" : 0,
      "type" : "Named",
      "underlying" : 83
    }, {
      "fields" : [ {
        "name" : "fn",
        "type" : 14
      }, {
        "name" : "n",
        "type" : 14
      }, {
        "name" : "args",
        "type" : 14
      }, {
        "name" : "r1",
        "type" : 14
      }, {
        "name" : "r2",
        "type" : 14
      }, {
        "name" : "err",
        "type" : 14
      } ],
      "name" : "struct{fn uintptr; n uintptr; args uintptr; r1 uintptr; r2 uintptr; err uintptr}",
      "type" : "Struct",
      "underlying" : 83
    }, {
      "local-name" : "dlogPerM",
      "name" : "runtime.dlogPerM",
      "package" : 0,
      "type" : "Named",
      "underlying" : 85
    }, {
      "fields" : [ ],
      "name" : "struct{}",
      "type" : "Struct",
      "underlying" : 85
    }, {
      "local-name" : "mOS",
      "name" : "runtime.mOS",
      "package" : 0,
      "type" : "Named",
      "underlying" : 85
    }, {
      "local-name" : "waitReason",
      "name" : "runtime.waitReason",
      "package" : 0,
      "type" : "Named",
      "underlying" : 44
    }, {
      "elem" : 73,
      "name" : "[]byte",
      "type" : "Slice",
      "underlying" : 88
    }, {
      "elem" : 90,
      "name" : "*[]runtime.ancestorInfo",
      "type" : "Pointer",
      "underlying" : 89
    }, {
      "elem" : 91,
      "name" : "[]runtime.ancestorInfo",
      "type" : "Slice",
      "underlying" : 90
    }, {
      "local-name" : "ancestorInfo",
      "name" : "runtime.ancestorInfo",
      "package" : 0,
      "type" : "Named",
      "underlying" : 92
    }, {
      "fields" : [ {
        "name" : "pcs",
        "type" : 93
      }, {
        "name" : "goid",
        "type" : 41
      }, {
        "name" : "gopc",
        "type" : 14
      } ],
      "name" : "struct{pcs []uintptr; goid int64; gopc uintptr}",
      "type" : "Struct",
      "underlying" : 92
    }, {
      "elem" : 14,
      "name" : "[]uintptr",
      "type" : "Slice",
      "underlying" : 93
    }, {
      "elem" : 95,
      "name" : "*runtime.sudog",
      "type" : "Pointer",
      "underlying" : 94
    }, {
      "local-name" : "sudog",
      "name" : "runtime.sudog",
      "package" : 0,
      "type" : "Named",
      "underlying" : 96
    }, {
      "fields" : [ {
        "name" : "g",
        "type" : 9
      }, {
        "name" : "isSelect",
        "type" : 19
      }, {
        "name" : "next",
        "type" : 94
      }, {
        "name" : "prev",
        "type" : 94
      }, {
        "name" : "elem",
        "type" : 8
      }, {
        "name" : "acquiretime",
        "type" : 41
      }, {
        "name" : "releasetime",
        "type" : 41
      }, {
        "name" : "ticket",
        "type" : 2
      }, {
        "name" : "parent",
        "type" : 94
      }, {
        "name" : "waitlink",
        "type" : 94
      }, {
        "name" : "waittail",
        "type" : 94
      }, {
        "name" : "c",
        "type" : 97
      } ],
      "name" : "struct{g *runtime.g; isSelect bool; next *runtime.sudog; prev *runtime.sudog; elem unsafe.Pointer; acquiretime int64; releasetime int64; ticket uint32; parent *runtime.sudog; waitlink *runtime.sudog; waittail *runtime.sudog; c *runtime.hchan}",
      "type" : "Struct",
      "underlying" : 96
    }, {
      "elem" : 98,
      "name" : "*runtime.hchan",
      "type" : "Pointer",
      "underlying" : 97
    }, {
      "local-name" : "hchan",
      "name" : "runtime.hchan",
      "package" : 0,
      "type" : "Named",
      "underlying" : 99
    }, {
      "fields" : [ {
        "name" : "qcount",
        "type" : 100
      }, {
        "name" : "dataqsiz",
        "type" : 100
      }, {
        "name" : "buf",
        "type" : 8
      }, {
        "name" : "elemsize",
        "type" : 64
      }, {
        "name" : "closed",
        "type" : 2
      }, {
        "name" : "elemtype",
        "type" : 101
      }, {
        "name" : "sendx",
        "type" : 100
      }, {
        "name" : "recvx",
        "type" : 100
      }, {
        "name" : "recvq",
        "type" : 110
      }, {
        "name" : "sendq",
        "type" : 110
      }, {
        "name" : "lock",
        "type" : 69
      } ],
      "name" : "struct{qcount uint; dataqsiz uint; buf unsafe.Pointer; elemsize uint16; closed uint32; elemtype *runtime._type; sendx uint; recvx uint; recvq runtime.waitq; sendq runtime.waitq; lock runtime.mutex}",
      "type" : "Struct",
      "underlying" : 99
    }, {
      "name" : "uint",
      "type" : "Basic",
      "underlying" : 100
    }, {
      "elem" : 102,
      "name" : "*runtime._type",
      "type" : "Pointer",
      "underlying" : 101
    }, {
      "local-name" : "_type",
      "name" : "runtime._type",
      "package" : 0,
      "type" : "Named",
      "underlying" : 103
    }, {
      "fields" : [ {
        "name" : "size",
        "type" : 14
      }, {
        "name" : "ptrdata",
        "type" : 14
      }, {
        "name" : "hash",
        "type" : 2
      }, {
        "name" : "tflag",
        "type" : 104
      }, {
        "name" : "align",
        "type" : 44
      }, {
        "name" : "fieldAlign",
        "type" : 44
      }, {
        "name" : "kind",
        "type" : 44
      }, {
        "name" : "equal",
        "type" : 105
      }, {
        "name" : "gcdata",
        "type" : 107
      }, {
        "name" : "str",
        "type" : 108
      }, {
        "name" : "ptrToThis",
        "type" : 109
      } ],
      "name" : "struct{size uintptr; ptrdata uintptr; hash uint32; tflag runtime.tflag; align uint8; fieldAlign uint8; kind uint8; equal func(unsafe.Pointer, unsafe.Pointer) bool; gcdata *byte; str runtime.nameOff; ptrToThis runtime.typeOff}",
      "type" : "Struct",
      "underlying" : 103
    }, {
      "local-name" : "tflag",
      "name" : "runtime.tflag",
      "package" : 0,
      "type" : "Named",
      "underlying" : 44
    }, {
      "name" : "func(unsafe.Pointer, unsafe.Pointer) bool",
      "params" : 106,
      "recv" : -1,
      "results" : 80,
      "type" : "Signature",
      "underlying" : 105,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 8
      }, {
        "name" : "",
        "type" : 8
      } ],
      "name" : "(unsafe.Pointer, unsafe.Pointer)",
      "type" : "Tuple",
      "underlying" : 106
    }, {
      "elem" : 73,
      "name" : "*byte",
      "type" : "Pointer",
      "underlying" : 107
    }, {
      "local-name" : "nameOff",
      "name" : "runtime.nameOff",
      "package" : 0,
      "type" : "Named",
      "underlying" : 6
    }, {
      "local-name" : "typeOff",
      "name" : "runtime.typeOff",
      "package" : 0,
      "type" : "Named",
      "underlying" : 6
    }, {
      "local-name" : "waitq",
      "name" : "runtime.waitq",
      "package" : 0,
      "type" : "Named",
      "underlying" : 111
    }, {
      "fields" : [ {
        "name" : "first",
        "type" : 94
      }, {
        "name" : "last",
        "type" : 94
      } ],
      "name" : "struct{first *runtime.sudog; last *runtime.sudog}",
      "type" : "Struct",
      "underlying" : 111
    }, {
      "elem" : 113,
      "name" : "*runtime.timer",
      "type" : "Pointer",
      "underlying" : 112
    }, {
      "local-name" : "timer",
      "name" : "runtime.timer",
      "package" : 0,
      "type" : "Named",
      "underlying" : 114
    }, {
      "fields" : [ {
        "name" : "pp",
        "type" : 40
      }, {
        "name" : "when",
        "type" : 41
      }, {
        "name" : "period",
        "type" : 41
      }, {
        "name" : "f",
        "type" : 115
      }, {
        "name" : "arg",
        "type" : 18
      }, {
        "name" : "seq",
        "type" : 14
      }, {
        "name" : "nextwhen",
        "type" : 41
      }, {
        "name" : "status",
        "type" : 2
      } ],
      "name" : "struct{pp runtime.puintptr; when int64; period int64; f func(interface{}, uintptr); arg interface{}; seq uintptr; nextwhen int64; status uint32}",
      "type" : "Struct",
      "underlying" : 114
    }, {
      "name" : "func(interface{}, uintptr)",
      "params" : 116,
      "recv" : -1,
      "results" : 39,
      "type" : "Signature",
      "underlying" : 115,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 18
      }, {
        "name" : "",
        "type" : 14
      } ],
      "name" : "(interface{}, uintptr)",
      "type" : "Tuple",
      "underlying" : 116
    }, {
      "name" : "func(info *runtime.siginfo, ctxt *runtime.sigctxt, gp *runtime.g) bool",
      "params" : 118,
      "recv" : -1,
      "results" : 80,
      "type" : "Signature",
      "underlying" : 117,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "info",
        "type" : 3
      }, {
        "name" : "ctxt",
        "type" : 119
      }, {
        "name" : "gp",
        "type" : 9
      } ],
      "name" : "(info *runtime.siginfo, ctxt *runtime.sigctxt, gp *runtime.g)",
      "type" : "Tuple",
      "underlying" : 118
    }, {
      "elem" : 120,
      "name" : "*runtime.sigctxt",
      "type" : "Pointer",
      "underlying" : 119
    }, {
      "local-name" : "sigctxt",
      "name" : "runtime.sigctxt",
      "package" : 0,
      "type" : "Named",
      "underlying" : 121
    }, {
      "fields" : [ {
        "name" : "info",
        "type" : 3
      }, {
        "name" : "ctxt",
        "type" : 8
      } ],
      "name" : "struct{info *runtime.siginfo; ctxt unsafe.Pointer}",
      "type" : "Struct",
      "underlying" : 121
    }, {
      "elem" : 123,
      "name" : "[65]runtime.sigTabT",
      "type" : "Array",
      "underlying" : 122
    }, {
      "local-name" : "sigTabT",
      "name" : "runtime.sigTabT",
      "package" : 0,
      "type" : "Named",
      "underlying" : 124
    }, {
      "fields" : [ {
        "name" : "flags",
        "type" : 6
      }, {
        "name" : "name",
        "type" : 42
      } ],
      "name" : "struct{flags int32; name string}",
      "type" : "Struct",
      "underlying" : 124
    }, {
      "name" : "func(gp *runtime.g) bool",
      "params" : 126,
      "recv" : -1,
      "results" : 80,
      "type" : "Signature",
      "underlying" : 125,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "gp",
        "type" : 9
      } ],
      "name" : "(gp *runtime.g)",
      "type" : "Tuple",
      "underlying" : 126
    }, {
      "name" : "func() *runtime.g",
      "params" : 39,
      "recv" : -1,
      "results" : 128,
      "type" : "Signature",
      "underlying" : 127,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 9
      } ],
      "name" : "(*runtime.g)",
      "type" : "Tuple",
      "underlying" : 128
    }, {
      "name" : "untyped bool",
      "type" : "Basic",
      "underlying" : 129
    }, {
      "name" : "func(pc uintptr, sp uintptr, lr uintptr, gp *runtime.g, mp *runtime.m)",
      "params" : 131,
      "recv" : -1,
      "results" : 39,
      "type" : "Signature",
      "underlying" : 130,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "pc",
        "type" : 14
      }, {
        "name" : "sp",
        "type" : 14
      }, {
        "name" : "lr",
        "type" : 14
      }, {
        "name" : "gp",
        "type" : 9
      }, {
        "name" : "mp",
        "type" : 26
      } ],
      "name" : "(pc uintptr, sp uintptr, lr uintptr, gp *runtime.g, mp *runtime.m)",
      "type" : "Tuple",
      "underlying" : 131
    }, {
      "name" : "func() uintptr",
      "params" : 39,
      "recv" : -1,
      "results" : 133,
      "type" : "Signature",
      "underlying" : 132,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 14
      } ],
      "name" : "(uintptr)",
      "type" : "Tuple",
      "underlying" : 133
    }, {
      "name" : "untyped nil",
      "type" : "Basic",
      "underlying" : 134
    }, {
      "name" : "func(p unsafe.Pointer) unsafe.Pointer",
      "params" : 136,
      "recv" : -1,
      "results" : 137,
      "type" : "Signature",
      "underlying" : 135,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "p",
        "type" : 8
      } ],
      "name" : "(p unsafe.Pointer)",
      "type" : "Tuple",
      "underlying" : 136
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 8
      } ],
      "name" : "(unsafe.Pointer)",
      "type" : "Tuple",
      "underlying" : 137
    }, {
      "name" : "func(gp *runtime.g, ctxt *runtime.sigctxt)",
      "params" : 139,
      "recv" : -1,
      "results" : 39,
      "type" : "Signature",
      "underlying" : 138,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "gp",
        "type" : 9
      }, {
        "name" : "ctxt",
        "type" : 119
      } ],
      "name" : "(gp *runtime.g, ctxt *runtime.sigctxt)",
      "type" : "Tuple",
      "underlying" : 139
    }, {
      "name" : "func(pc uintptr) bool",
      "params" : 141,
      "recv" : -1,
      "results" : 80,
      "type" : "Signature",
      "underlying" : 140,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "pc",
        "type" : 14
      } ],
      "name" : "(pc uintptr)",
      "type" : "Tuple",
      "underlying" : 141
    }, {
      "name" : "func() uint64",
      "params" : 39,
      "recv" : -1,
      "results" : 143,
      "type" : "Signature",
      "underlying" : 142,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 7
      } ],
      "name" : "(uint64)",
      "type" : "Tuple",
      "underlying" : 143
    }, {
      "name" : "func(sig uint32, gp *runtime.g)",
      "params" : 145,
      "recv" : -1,
      "results" : 39,
      "type" : "Signature",
      "underlying" : 144,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "sig",
        "type" : 2
      }, {
        "name" : "gp",
        "type" : 9
      } ],
      "name" : "(sig uint32, gp *runtime.g)",
      "type" : "Tuple",
      "underlying" : 145
    }, {
      "name" : "func(s uint32) bool",
      "params" : 147,
      "recv" : -1,
      "results" : 80,
      "type" : "Signature",
      "underlying" : 146,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "s",
        "type" : 2
      } ],
      "name" : "(s uint32)",
      "type" : "Tuple",
      "underlying" : 147
    }, {
      "name" : "func(sig uint32)",
      "params" : 149,
      "recv" : -1,
      "results" : 39,
      "type" : "Signature",
      "underlying" : 148,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "sig",
        "type" : 2
      } ],
      "name" : "(sig uint32)",
      "type" : "Tuple",
      "underlying" : 149
    }, {
      "name" : "func(g *runtime.g)",
      "params" : 151,
      "recv" : -1,
      "results" : 39,
      "type" : "Signature",
      "underlying" : 150,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "g",
        "type" : 9
      } ],
      "name" : "(g *runtime.g)",
      "type" : "Tuple",
      "underlying" : 151
    }, {
      "name" : "func() bool",
      "params" : 39,
      "recv" : -1,
      "results" : 80,
      "type" : "Signature",
      "underlying" : 152,
      "variadic" : false
    }, {
      "name" : "func(string, string)",
      "params" : 154,
      "recv" : -1,
      "results" : 39,
      "type" : "Signature",
      "underlying" : 153,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 42
      }, {
        "name" : "",
        "type" : 42
      } ],
      "name" : "(string, string)",
      "type" : "Tuple",
      "underlying" : 154
    }, {
      "name" : "func(string, uint32, string)",
      "params" : 156,
      "recv" : -1,
      "results" : 39,
      "type" : "Signature",
      "underlying" : 155,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 42
      }, {
        "name" : "",
        "type" : 2
      }, {
        "name" : "",
        "type" : 42
      } ],
      "name" : "(string, uint32, string)",
      "type" : "Tuple",
      "underlying" : 156
    }, {
      "name" : "func(string, runtime.hex, string, int64, string, uint64, string)",
      "params" : 158,
      "recv" : -1,
      "results" : 39,
      "type" : "Signature",
      "underlying" : 157,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 42
      }, {
        "name" : "",
        "type" : 159
      }, {
        "name" : "",
        "type" : 42
      }, {
        "name" : "",
        "type" : 41
      }, {
        "name" : "",
        "type" : 42
      }, {
        "name" : "",
        "type" : 7
      }, {
        "name" : "",
        "type" : 42
      } ],
      "name" : "(string, runtime.hex, string, int64, string, uint64, string)",
      "type" : "Tuple",
      "underlying" : 158
    }, {
      "local-name" : "hex",
      "name" : "runtime.hex",
      "package" : 0,
      "type" : "Named",
      "underlying" : 7
    }, {
      "name" : "func(string)",
      "params" : 161,
      "recv" : -1,
      "results" : 39,
      "type" : "Signature",
      "underlying" : 160,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 42
      } ],
      "name" : "(string)",
      "type" : "Tuple",
      "underlying" : 161
    }, {
      "fields" : [ {
        "name" : "level",
        "type" : 6
      }, {
        "name" : "all",
        "type" : 19
      }, {
        "name" : "crash",
        "type" : 19
      } ],
      "name" : "(level int32, all bool, crash bool)",
      "type" : "Tuple",
      "underlying" : 162
    }, {
      "name" : "func() (level int32, all bool, crash bool)",
      "params" : 39,
      "recv" : -1,
      "results" : 162,
      "type" : "Signature",
      "underlying" : 163,
      "variadic" : false
    }, {
      "name" : "func(gp *runtime.g)",
      "params" : 126,
      "recv" : -1,
      "results" : 39,
      "type" : "Signature",
      "underlying" : 164,
      "variadic" : false
    }, {
      "name" : "func(pc uintptr, sp uintptr, lr uintptr, gp *runtime.g)",
      "params" : 166,
      "recv" : -1,
      "results" : 39,
      "type" : "Signature",
      "underlying" : 165,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "pc",
        "type" : 14
      }, {
        "name" : "sp",
        "type" : 14
      }, {
        "name" : "lr",
        "type" : 14
      }, {
        "name" : "gp",
        "type" : 9
      } ],
      "name" : "(pc uintptr, sp uintptr, lr uintptr, gp *runtime.g)",
      "type" : "Tuple",
      "underlying" : 166
    }, {
      "name" : "func(gp *runtime.g) uint32",
      "params" : 126,
      "recv" : -1,
      "results" : 168,
      "type" : "Signature",
      "underlying" : 167,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 2
      } ],
      "name" : "(uint32)",
      "type" : "Tuple",
      "underlying" : 168
    }, {
      "name" : "func(me *runtime.g)",
      "params" : 170,
      "recv" : -1,
      "results" : 39,
      "type" : "Signature",
      "underlying" : 169,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "me",
        "type" : 9
      } ],
      "name" : "(me *runtime.g)",
      "type" : "Tuple",
      "underlying" : 170
    }, {
      "name" : "func(c *runtime.sigctxt)",
      "params" : 172,
      "recv" : -1,
      "results" : 39,
      "type" : "Signature",
      "underlying" : 171,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "c",
        "type" : 119
      } ],
      "name" : "(c *runtime.sigctxt)",
      "type" : "Tuple",
      "underlying" : 172
    }, {
      "name" : "func() int32",
      "params" : 39,
      "recv" : -1,
      "results" : 174,
      "type" : "Signature",
      "underlying" : 173,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 6
      } ],
      "name" : "(int32)",
      "type" : "Tuple",
      "underlying" : 174
    }, {
      "name" : "func(usec uint32)",
      "params" : 176,
      "recv" : -1,
      "results" : 39,
      "type" : "Signature",
      "underlying" : 175,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "usec",
        "type" : 2
      } ],
      "name" : "(usec uint32)",
      "type" : "Tuple",
      "underlying" : 176
    }, {
      "name" : "func(code int32)",
      "params" : 178,
      "recv" : -1,
      "results" : 39,
      "type" : "Signature",
      "underlying" : 177,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "code",
        "type" : 6
      } ],
      "name" : "(code int32)",
      "type" : "Tuple",
      "underlying" : 178
    } ],
    "variables" : [ {
      "name" : "sig",
      "package" : 0,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "info",
      "package" : 0,
      "type" : 3,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "ctxt",
      "package" : 0,
      "type" : 8,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "gp",
      "package" : 0,
      "type" : 9,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "testSigtrap",
      "package" : 0,
      "type" : 117,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "crashing",
      "package" : 0,
      "type" : 6,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "sigtable",
      "package" : 0,
      "type" : 122,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "extraMCount",
      "package" : 0,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "testSigusr1",
      "package" : 0,
      "type" : 125,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "_g_",
      "package" : 0,
      "type" : 9,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "c",
      "package" : 0,
      "type" : 119,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "m",
      "package" : 0,
      "type" : 26,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "flags",
      "package" : 0,
      "type" : 6,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "flags",
      "package" : 0,
      "type" : 6,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "throwsplit",
      "package" : 0,
      "type" : 19,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "sig",
      "package" : 0,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "sigcode0",
      "package" : 0,
      "type" : 14,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "sigcode1",
      "package" : 0,
      "type" : 14,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "sigpc",
      "package" : 0,
      "type" : 14,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "throwing",
      "package" : 0,
      "type" : 6,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "caughtsig",
      "package" : 0,
      "type" : 31,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "name",
      "package" : 0,
      "type" : 42,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "id",
      "package" : 0,
      "type" : 41,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "lockedg",
      "package" : 0,
      "type" : 31,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "ncgo",
      "package" : 0,
      "type" : 6,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "g0",
      "package" : 0,
      "type" : 9,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "docrash",
      "package" : 0,
      "type" : 19,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "level",
      "package" : 0,
      "type" : 6,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "_",
      "package" : 0,
      "type" : 19,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "curg",
      "package" : 0,
      "type" : 9,
      "exported" : false,
      "embedded" : false,
      "field" : true
    } ]
  },
  "go-version" : "1.14.3"
}