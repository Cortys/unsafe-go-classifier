{
  "usage" : {
    "file" : "syscall_linux.go",
    "label1" : "delegate",
    "label2" : "ffi",
    "line" : "1380",
    "module" : "golang.org/x/sys",
    "pkg" : "golang.org/x/sys/unix",
    "project" : "elastic/beats",
    "snippet" : "err = ptrace(req, pid, addr+uintptr(n), uintptr(unsafe.Pointer(&buf[0])))",
    "version" : "v0.0.0-20200106162015-b016eb3dc98e"
  },
  "cfg" : {
    "blocks" : [ {
      "update-vars" : [ ],
      "successors" : [ 2 ],
      "in-vars" : [ 4, 3, 1, 2 ],
      "exit" : false,
      "out-vars" : [ 1, 2, 4, 3 ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[entry]",
      "entry" : true,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ ],
      "in-vars" : [ ],
      "exit" : true,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[exit]",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 3 ],
      "in-vars" : [ 2, 4, 3, 1 ],
      "exit" : false,
      "out-vars" : [ 4, 3, 1, 7, 2 ],
      "decl-vars" : [ 7 ],
      "line-start" : 1359,
      "ast" : {
        "kind" : "statement",
        "target" : {
          "kind" : "decl",
          "specs" : [ {
            "comments" : [ ],
            "declared-type" : {
              "element" : {
                "go-type" : 5,
                "kind" : "type",
                "type" : "identifier",
                "value" : {
                  "go-type" : 5,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "byte"
                }
              },
              "go-type" : 13,
              "kind" : "type",
              "length" : {
                "go-type" : 14,
                "kind" : "constant",
                "value" : {
                  "type" : "INT",
                  "value" : "8"
                }
              },
              "type" : "array"
            },
            "kind" : "spec",
            "names" : [ {
              "ident-kind" : "NoKind",
              "kind" : "ident",
              "value" : "buf"
            } ],
            "type" : "var",
            "values" : [ ]
          } ],
          "type" : "var"
        },
        "type" : "declaration"
      },
      "assign-vars" : [ ],
      "line-end" : 1359,
      "code" : "var buf [SizeofPtr]byte",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 4 ],
      "in-vars" : [ 4, 3, 1, 7, 2 ],
      "exit" : false,
      "out-vars" : [ 8, 3, 1, 7, 2, 4 ],
      "decl-vars" : [ 8 ],
      "line-start" : 1366,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "n"
          }
        } ],
        "right" : [ {
          "go-type" : 2,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "0"
          }
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 1366,
      "code" : "n := 0",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 5, 10 ],
      "in-vars" : [ 8, 3, 1, 7, 2, 4 ],
      "exit" : false,
      "out-vars" : [ 7, 2, 4, 8, 3, 1 ],
      "decl-vars" : [ ],
      "line-start" : 1367,
      "ast" : {
        "condition" : {
          "go-type" : 15,
          "kind" : "expression",
          "left" : {
            "go-type" : 3,
            "kind" : "expression",
            "left" : {
              "go-type" : 3,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "addr",
                "variable" : 3
              }
            },
            "operator" : "%",
            "right" : {
              "go-type" : 3,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "8"
              }
            },
            "type" : "binary"
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 3,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 1374,
      "code" : "if addr%SizeofPtr != 0 {\n\terr = ptrace(req, pid, addr-addr%SizeofPtr, uintptr(unsafe.Pointer(&buf[0])))\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tn += copy(out, buf[addr%SizeofPtr:])\n\tout = out[n:]\n}",
      "entry" : false,
      "use-vars" : [ 3 ]
    }, {
      "update-vars" : [ 6 ],
      "successors" : [ 6 ],
      "in-vars" : [ 2, 4, 8, 3, 1, 7 ],
      "exit" : false,
      "out-vars" : [ 8, 6, 3, 1, 7, 2, 4 ],
      "decl-vars" : [ ],
      "line-start" : 1368,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 7,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "err",
            "variable" : 6
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "req",
              "variable" : 1
            }
          }, {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "pid",
              "variable" : 2
            }
          }, {
            "go-type" : 3,
            "kind" : "expression",
            "left" : {
              "go-type" : 3,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "addr",
                "variable" : 3
              }
            },
            "operator" : "-",
            "right" : {
              "go-type" : 3,
              "kind" : "expression",
              "left" : {
                "go-type" : 3,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "addr",
                  "variable" : 3
                }
              },
              "operator" : "%",
              "right" : {
                "go-type" : 3,
                "kind" : "constant",
                "value" : {
                  "type" : "INT",
                  "value" : "8"
                }
              },
              "type" : "binary"
            },
            "type" : "binary"
          }, {
            "coerced-to" : {
              "go-type" : 3,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 3,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "uintptr"
              }
            },
            "go-type" : 3,
            "kind" : "expression",
            "target" : {
              "coerced-to" : {
                "go-type" : 19,
                "kind" : "type",
                "qualifier" : {
                  "ident-kind" : "PkgName",
                  "kind" : "ident",
                  "package" : 1,
                  "value" : "unsafe"
                },
                "type" : "identifier",
                "value" : {
                  "go-type" : 19,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "Pointer"
                }
              },
              "go-type" : 19,
              "kind" : "expression",
              "target" : {
                "go-type" : 20,
                "kind" : "expression",
                "operator" : "&",
                "target" : {
                  "go-type" : 5,
                  "index" : {
                    "go-type" : 2,
                    "kind" : "constant",
                    "value" : {
                      "type" : "INT",
                      "value" : "0"
                    }
                  },
                  "kind" : "expression",
                  "target" : {
                    "go-type" : 13,
                    "kind" : "expression",
                    "type" : "identifier",
                    "value" : {
                      "ident-kind" : "Var",
                      "kind" : "ident",
                      "value" : "buf",
                      "variable" : 7
                    }
                  },
                  "type" : "index"
                },
                "type" : "unary"
              },
              "type" : "cast"
            },
            "type" : "cast"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 16,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 1,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "ptrace"
            }
          },
          "go-type" : 7,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 6 ],
      "line-end" : 1368,
      "code" : "err = ptrace(req, pid, addr-addr%SizeofPtr, uintptr(unsafe.Pointer(&buf[0])))",
      "entry" : false,
      "use-vars" : [ 1, 7, 2, 3 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 7, 8 ],
      "in-vars" : [ 2, 4, 8, 6, 3, 1, 7 ],
      "exit" : false,
      "out-vars" : [ 2, 4, 8, 6, 3, 1, 7 ],
      "decl-vars" : [ ],
      "line-start" : 1369,
      "ast" : {
        "condition" : {
          "go-type" : 15,
          "kind" : "expression",
          "left" : {
            "go-type" : 7,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "err",
              "variable" : 6
            }
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 21,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Nil",
              "kind" : "ident",
              "value" : "nil"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 1371,
      "code" : "if err != nil {\n\treturn 0, err\n}",
      "entry" : false,
      "use-vars" : [ 6 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 6 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 1370,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 2,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "0"
          }
        }, {
          "go-type" : 7,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "err",
            "variable" : 6
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 1370,
      "code" : "return 0, err",
      "entry" : false,
      "use-vars" : [ 6 ]
    }, {
      "update-vars" : [ 8 ],
      "successors" : [ 9 ],
      "in-vars" : [ 3, 1, 7, 2, 4, 8 ],
      "exit" : false,
      "out-vars" : [ 7, 2, 4, 8, 3, 1 ],
      "decl-vars" : [ ],
      "line-start" : 1372,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 2,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "n",
            "variable" : 8
          }
        } ],
        "operator" : "+",
        "right" : [ {
          "arguments" : [ {
            "go-type" : 4,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "out",
              "variable" : 4
            }
          }, {
            "go-type" : 4,
            "type" : "slice",
            "three" : false,
            "high" : null,
            "max" : null,
            "kind" : "expression",
            "low" : {
              "go-type" : 3,
              "kind" : "expression",
              "left" : {
                "go-type" : 3,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "addr",
                  "variable" : 3
                }
              },
              "operator" : "%",
              "right" : {
                "go-type" : 3,
                "kind" : "constant",
                "value" : {
                  "type" : "INT",
                  "value" : "8"
                }
              },
              "type" : "binary"
            },
            "target" : {
              "go-type" : 13,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "buf",
                "variable" : 7
              }
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 22,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Builtin",
              "kind" : "ident",
              "value" : "copy"
            }
          },
          "go-type" : 2,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign-operator"
      },
      "assign-vars" : [ 8 ],
      "line-end" : 1372,
      "code" : "n += copy(out, buf[addr%SizeofPtr:])",
      "entry" : false,
      "use-vars" : [ 8, 4, 7, 3 ]
    }, {
      "update-vars" : [ 4 ],
      "successors" : [ 10 ],
      "in-vars" : [ 1, 7, 2, 4, 8, 3 ],
      "exit" : false,
      "out-vars" : [ 1, 7, 2, 4, 8, 3 ],
      "decl-vars" : [ ],
      "line-start" : 1373,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 4,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "out",
            "variable" : 4
          }
        } ],
        "right" : [ {
          "go-type" : 4,
          "type" : "slice",
          "three" : false,
          "high" : null,
          "max" : null,
          "kind" : "expression",
          "low" : {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "n",
              "variable" : 8
            }
          },
          "target" : {
            "go-type" : 4,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "out",
              "variable" : 4
            }
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 4 ],
      "line-end" : 1373,
      "code" : "out = out[n:]",
      "entry" : false,
      "use-vars" : [ 4, 8 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 11, 17 ],
      "in-vars" : [ 8, 3, 1, 7, 2, 4 ],
      "exit" : false,
      "out-vars" : [ 1, 7, 2, 4, 8, 3 ],
      "decl-vars" : [ ],
      "line-start" : 1377,
      "ast" : {
        "condition" : {
          "go-type" : 15,
          "kind" : "expression",
          "left" : {
            "arguments" : [ {
              "go-type" : 4,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "out",
                "variable" : 4
              }
            } ],
            "ellipsis" : false,
            "function" : {
              "go-type" : 25,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Builtin",
                "kind" : "ident",
                "value" : "len"
              }
            },
            "go-type" : 2,
            "kind" : "expression",
            "type" : "call"
          },
          "operator" : ">",
          "right" : {
            "go-type" : 2,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "for"
      },
      "assign-vars" : [ ],
      "line-end" : 1387,
      "code" : "for len(out) > 0 {\n\n\terr = ptrace(req, pid, addr+uintptr(n), uintptr(unsafe.Pointer(&buf[0])))\n\tif err != nil {\n\t\treturn n, err\n\t}\n\tcopied := copy(out, buf[0:])\n\tn += copied\n\tout = out[copied:]\n}",
      "entry" : false,
      "use-vars" : [ 4 ]
    }, {
      "update-vars" : [ 6 ],
      "successors" : [ 12 ],
      "in-vars" : [ 7, 2, 4, 8, 3, 1 ],
      "exit" : false,
      "out-vars" : [ 3, 1, 7, 2, 4, 8, 6 ],
      "decl-vars" : [ ],
      "line-start" : 1380,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 7,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "err",
            "variable" : 6
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "req",
              "variable" : 1
            }
          }, {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "pid",
              "variable" : 2
            }
          }, {
            "go-type" : 3,
            "kind" : "expression",
            "left" : {
              "go-type" : 3,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "addr",
                "variable" : 3
              }
            },
            "operator" : "+",
            "right" : {
              "coerced-to" : {
                "go-type" : 3,
                "kind" : "type",
                "type" : "identifier",
                "value" : {
                  "go-type" : 3,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "uintptr"
                }
              },
              "go-type" : 3,
              "kind" : "expression",
              "target" : {
                "go-type" : 2,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "n",
                  "variable" : 8
                }
              },
              "type" : "cast"
            },
            "type" : "binary"
          }, {
            "coerced-to" : {
              "go-type" : 3,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 3,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "uintptr"
              }
            },
            "go-type" : 3,
            "kind" : "expression",
            "target" : {
              "coerced-to" : {
                "go-type" : 19,
                "kind" : "type",
                "qualifier" : {
                  "ident-kind" : "PkgName",
                  "kind" : "ident",
                  "package" : 1,
                  "value" : "unsafe"
                },
                "type" : "identifier",
                "value" : {
                  "go-type" : 19,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "Pointer"
                }
              },
              "go-type" : 19,
              "kind" : "expression",
              "target" : {
                "go-type" : 20,
                "kind" : "expression",
                "operator" : "&",
                "target" : {
                  "go-type" : 5,
                  "index" : {
                    "go-type" : 2,
                    "kind" : "constant",
                    "value" : {
                      "type" : "INT",
                      "value" : "0"
                    }
                  },
                  "kind" : "expression",
                  "target" : {
                    "go-type" : 13,
                    "kind" : "expression",
                    "type" : "identifier",
                    "value" : {
                      "ident-kind" : "Var",
                      "kind" : "ident",
                      "value" : "buf",
                      "variable" : 7
                    }
                  },
                  "type" : "index"
                },
                "type" : "unary"
              },
              "type" : "cast"
            },
            "type" : "cast"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 16,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 1,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "ptrace"
            }
          },
          "go-type" : 7,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 6 ],
      "line-end" : 1380,
      "code" : "err = ptrace(req, pid, addr+uintptr(n), uintptr(unsafe.Pointer(&buf[0])))",
      "entry" : false,
      "use-vars" : [ 7, 1, 3, 2, 8 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 13, 14 ],
      "in-vars" : [ 4, 8, 6, 3, 1, 7, 2 ],
      "exit" : false,
      "out-vars" : [ 4, 8, 6, 3, 1, 7, 2 ],
      "decl-vars" : [ ],
      "line-start" : 1381,
      "ast" : {
        "condition" : {
          "go-type" : 15,
          "kind" : "expression",
          "left" : {
            "go-type" : 7,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "err",
              "variable" : 6
            }
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 21,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Nil",
              "kind" : "ident",
              "value" : "nil"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 1383,
      "code" : "if err != nil {\n\treturn n, err\n}",
      "entry" : false,
      "use-vars" : [ 6 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 6, 8 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 1382,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 2,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "n",
            "variable" : 8
          }
        }, {
          "go-type" : 7,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "err",
            "variable" : 6
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 1382,
      "code" : "return n, err",
      "entry" : false,
      "use-vars" : [ 8, 6 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 15 ],
      "in-vars" : [ 4, 8, 3, 1, 7, 2 ],
      "exit" : false,
      "out-vars" : [ 2, 4, 8, 9, 3, 1, 7 ],
      "decl-vars" : [ 9 ],
      "line-start" : 1384,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "copied"
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 4,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "out",
              "variable" : 4
            }
          }, {
            "go-type" : 4,
            "type" : "slice",
            "three" : false,
            "high" : null,
            "max" : null,
            "kind" : "expression",
            "low" : {
              "go-type" : 2,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "0"
              }
            },
            "target" : {
              "go-type" : 13,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "buf",
                "variable" : 7
              }
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 22,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Builtin",
              "kind" : "ident",
              "value" : "copy"
            }
          },
          "go-type" : 2,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 1384,
      "code" : "copied := copy(out, buf[0:])",
      "entry" : false,
      "use-vars" : [ 4, 7 ]
    }, {
      "update-vars" : [ 8 ],
      "successors" : [ 16 ],
      "in-vars" : [ 9, 3, 1, 7, 2, 4, 8 ],
      "exit" : false,
      "out-vars" : [ 3, 1, 7, 2, 4, 8, 9 ],
      "decl-vars" : [ ],
      "line-start" : 1385,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 2,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "n",
            "variable" : 8
          }
        } ],
        "operator" : "+",
        "right" : [ {
          "go-type" : 2,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "copied",
            "variable" : 9
          }
        } ],
        "type" : "assign-operator"
      },
      "assign-vars" : [ 8 ],
      "line-end" : 1385,
      "code" : "n += copied",
      "entry" : false,
      "use-vars" : [ 9, 8 ]
    }, {
      "update-vars" : [ 4 ],
      "successors" : [ 10 ],
      "in-vars" : [ 2, 4, 8, 9, 3, 1, 7 ],
      "exit" : false,
      "out-vars" : [ 2, 4, 8, 3, 1, 7 ],
      "decl-vars" : [ ],
      "line-start" : 1386,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 4,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "out",
            "variable" : 4
          }
        } ],
        "right" : [ {
          "go-type" : 4,
          "type" : "slice",
          "three" : false,
          "high" : null,
          "max" : null,
          "kind" : "expression",
          "low" : {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "copied",
              "variable" : 9
            }
          },
          "target" : {
            "go-type" : 4,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "out",
              "variable" : 4
            }
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 4 ],
      "line-end" : 1386,
      "code" : "out = out[copied:]",
      "entry" : false,
      "use-vars" : [ 4, 9 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 8 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 1389,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 2,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "n",
            "variable" : 8
          }
        }, {
          "go-type" : 21,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Nil",
            "kind" : "ident",
            "value" : "nil"
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 1389,
      "code" : "return n, nil",
      "entry" : false,
      "use-vars" : [ 8 ]
    } ],
    "code" : "func ptracePeek(req int, pid int, addr uintptr, out []byte) (count int, err error) {\n\n\tvar buf [SizeofPtr]byte\n\n\tn := 0\n\tif addr%SizeofPtr != 0 {\n\t\terr = ptrace(req, pid, addr-addr%SizeofPtr, uintptr(unsafe.Pointer(&buf[0])))\n\t\tif err != nil {\n\t\t\treturn 0, err\n\t\t}\n\t\tn += copy(out, buf[addr%SizeofPtr:])\n\t\tout = out[n:]\n\t}\n\n\tfor len(out) > 0 {\n\n\t\terr = ptrace(req, pid, addr+uintptr(n), uintptr(unsafe.Pointer(&buf[0])))\n\t\tif err != nil {\n\t\t\treturn n, err\n\t\t}\n\t\tcopied := copy(out, buf[0:])\n\t\tn += copied\n\t\tout = out[copied:]\n\t}\n\n\treturn n, nil\n}",
    "defines" : [ 0 ],
    "functions" : [ {
      "name" : "ptracePeek",
      "package" : 0,
      "type" : 0,
      "exported" : false
    }, {
      "name" : "ptrace",
      "package" : 0,
      "type" : 16,
      "exported" : false
    } ],
    "line-end" : 1390,
    "line-start" : 1352,
    "names" : [ "ptracePeek" ],
    "package" : 0,
    "packages" : [ {
      "name" : "unix",
      "path" : "golang.org/x/sys/unix"
    }, {
      "name" : "unsafe",
      "path" : "unsafe"
    } ],
    "params" : [ 1, 2, 3, 4 ],
    "receivers" : [ ],
    "results" : [ 5, 6 ],
    "type" : "function",
    "types" : [ {
      "name" : "func(req int, pid int, addr uintptr, out []byte) (count int, err error)",
      "params" : 1,
      "recv" : -1,
      "results" : 6,
      "type" : "Signature",
      "underlying" : 0,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "req",
        "type" : 2
      }, {
        "name" : "pid",
        "type" : 2
      }, {
        "name" : "addr",
        "type" : 3
      }, {
        "name" : "out",
        "type" : 4
      } ],
      "name" : "(req int, pid int, addr uintptr, out []byte)",
      "type" : "Tuple",
      "underlying" : 1
    }, {
      "name" : "int",
      "type" : "Basic",
      "underlying" : 2
    }, {
      "name" : "uintptr",
      "type" : "Basic",
      "underlying" : 3
    }, {
      "elem" : 5,
      "name" : "[]byte",
      "type" : "Slice",
      "underlying" : 4
    }, {
      "name" : "byte",
      "type" : "Basic",
      "underlying" : 5
    }, {
      "fields" : [ {
        "name" : "count",
        "type" : 2
      }, {
        "name" : "err",
        "type" : 7
      } ],
      "name" : "(count int, err error)",
      "type" : "Tuple",
      "underlying" : 6
    }, {
      "local-name" : "error",
      "name" : "error",
      "package" : -1,
      "type" : "Named",
      "underlying" : 8
    }, {
      "methods" : [ {
        "name" : "Error",
        "type" : 9
      } ],
      "name" : "interface{Error() string}",
      "type" : "Interface",
      "underlying" : 8
    }, {
      "name" : "(error) func() string",
      "params" : 10,
      "recv" : 0,
      "results" : 11,
      "type" : "Signature",
      "underlying" : 9,
      "variadic" : false
    }, {
      "fields" : [ ],
      "name" : "()",
      "type" : "Tuple",
      "underlying" : 10
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 12
      } ],
      "name" : "(string)",
      "type" : "Tuple",
      "underlying" : 11
    }, {
      "name" : "string",
      "type" : "Basic",
      "underlying" : 12
    }, {
      "elem" : 5,
      "name" : "[8]byte",
      "type" : "Array",
      "underlying" : 13
    }, {
      "name" : "untyped int",
      "type" : "Basic",
      "underlying" : 14
    }, {
      "name" : "untyped bool",
      "type" : "Basic",
      "underlying" : 15
    }, {
      "name" : "func(request int, pid int, addr uintptr, data uintptr) (err error)",
      "params" : 17,
      "recv" : -1,
      "results" : 18,
      "type" : "Signature",
      "underlying" : 16,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "request",
        "type" : 2
      }, {
        "name" : "pid",
        "type" : 2
      }, {
        "name" : "addr",
        "type" : 3
      }, {
        "name" : "data",
        "type" : 3
      } ],
      "name" : "(request int, pid int, addr uintptr, data uintptr)",
      "type" : "Tuple",
      "underlying" : 17
    }, {
      "fields" : [ {
        "name" : "err",
        "type" : 7
      } ],
      "name" : "(err error)",
      "type" : "Tuple",
      "underlying" : 18
    }, {
      "local-name" : "Pointer",
      "name" : "unsafe.Pointer",
      "package" : 1,
      "type" : "Basic",
      "underlying" : 19
    }, {
      "elem" : 5,
      "name" : "*byte",
      "type" : "Pointer",
      "underlying" : 20
    }, {
      "name" : "untyped nil",
      "type" : "Basic",
      "underlying" : 21
    }, {
      "name" : "func([]byte, []byte) int",
      "params" : 23,
      "recv" : -1,
      "results" : 24,
      "type" : "Signature",
      "underlying" : 22,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 4
      }, {
        "name" : "",
        "type" : 4
      } ],
      "name" : "([]byte, []byte)",
      "type" : "Tuple",
      "underlying" : 23
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 2
      } ],
      "name" : "(int)",
      "type" : "Tuple",
      "underlying" : 24
    }, {
      "name" : "func([]byte) int",
      "params" : 26,
      "recv" : -1,
      "results" : 24,
      "type" : "Signature",
      "underlying" : 25,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 4
      } ],
      "name" : "([]byte)",
      "type" : "Tuple",
      "underlying" : 26
    } ],
    "variables" : [ {
      "name" : "",
      "package" : -1,
      "type" : 7,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "req",
      "package" : 0,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "pid",
      "package" : 0,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "addr",
      "package" : 0,
      "type" : 3,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "out",
      "package" : 0,
      "type" : 4,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "count",
      "package" : 0,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "err",
      "package" : 0,
      "type" : 7,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "buf",
      "package" : 0,
      "type" : 13,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "n",
      "package" : 0,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "copied",
      "package" : 0,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : false
    } ]
  },
  "go-version" : "1.14.3"
}