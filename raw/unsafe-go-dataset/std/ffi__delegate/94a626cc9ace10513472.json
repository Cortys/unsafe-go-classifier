{
  "usage" : {
    "file" : "signal_unix.go",
    "label1" : "delegate",
    "label2" : "ffi",
    "line" : "926",
    "module" : "std",
    "pkg" : "runtime",
    "project" : "kubernetes/kubernetes",
    "snippet" : "func sigfwdgo(sig uint32, info *siginfo, ctx unsafe.Pointer) bool {",
    "version" : "std"
  },
  "cfg" : {
    "blocks" : [ {
      "update-vars" : [ ],
      "successors" : [ 2 ],
      "in-vars" : [ 2, 4, 5, 6, 7, 0, 1 ],
      "exit" : false,
      "out-vars" : [ 7, 0, 1, 2, 4, 5, 6 ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[entry]",
      "entry" : true,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ ],
      "in-vars" : [ ],
      "exit" : true,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[exit]",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 3, 4 ],
      "in-vars" : [ 6, 7, 0, 1, 2, 4, 5 ],
      "exit" : false,
      "out-vars" : [ 5, 6, 7, 0, 1, 2, 4 ],
      "decl-vars" : [ ],
      "line-start" : 927,
      "ast" : {
        "condition" : {
          "go-type" : 18,
          "kind" : "expression",
          "left" : {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "sig",
              "variable" : 0
            }
          },
          "operator" : ">=",
          "right" : {
            "go-type" : 2,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "65"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 929,
      "code" : "if sig >= uint32(len(sigtable)) {\n\treturn false\n}",
      "entry" : false,
      "use-vars" : [ 0, 6 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 928,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 10,
          "kind" : "constant",
          "value" : {
            "type" : "BOOL",
            "value" : "false"
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 928,
      "code" : "return false",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 5 ],
      "in-vars" : [ 4, 5, 6, 7, 0, 1, 2 ],
      "exit" : false,
      "out-vars" : [ 0, 8, 1, 2, 4, 5, 6 ],
      "decl-vars" : [ 8 ],
      "line-start" : 930,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "fwdFn"
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 21,
            "kind" : "expression",
            "operator" : "&",
            "target" : {
              "go-type" : 17,
              "index" : {
                "go-type" : 2,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "sig",
                  "variable" : 0
                }
              },
              "kind" : "expression",
              "target" : {
                "go-type" : 16,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "fwdSig",
                  "variable" : 7
                }
              },
              "type" : "index"
            },
            "type" : "unary"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 19,
            "kind" : "expression",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 2,
              "value" : "atomic"
            },
            "type" : "identifier",
            "value" : {
              "function" : 1,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "Loaduintptr"
            }
          },
          "go-type" : 17,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 930,
      "code" : "fwdFn := atomic.Loaduintptr(&fwdSig[sig])",
      "entry" : false,
      "use-vars" : [ 0, 7 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 6 ],
      "in-vars" : [ 6, 0, 8, 1, 2, 4, 5 ],
      "exit" : false,
      "out-vars" : [ 2, 10, 4, 5, 0, 8, 1 ],
      "decl-vars" : [ 10 ],
      "line-start" : 931,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "flags"
          }
        } ],
        "right" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "flags",
            "variable" : 9
          },
          "go-type" : 6,
          "kind" : "expression",
          "target" : {
            "go-type" : 13,
            "index" : {
              "go-type" : 2,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "sig",
                "variable" : 0
              }
            },
            "kind" : "expression",
            "target" : {
              "go-type" : 12,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "sigtable",
                "variable" : 6
              }
            },
            "type" : "index"
          },
          "type" : "selector"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 931,
      "code" : "flags := sigtable[sig].flags",
      "entry" : false,
      "use-vars" : [ 6, 0 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 7, 15 ],
      "in-vars" : [ 8, 1, 2, 10, 4, 5, 0 ],
      "exit" : false,
      "out-vars" : [ 0, 8, 1, 2, 10 ],
      "decl-vars" : [ ],
      "line-start" : 934,
      "ast" : {
        "condition" : {
          "go-type" : 10,
          "kind" : "expression",
          "left" : {
            "go-type" : 10,
            "kind" : "expression",
            "left" : {
              "arguments" : [ {
                "go-type" : 25,
                "kind" : "expression",
                "operator" : "&",
                "target" : {
                  "go-type" : 2,
                  "index" : {
                    "go-type" : 2,
                    "kind" : "expression",
                    "type" : "identifier",
                    "value" : {
                      "ident-kind" : "Var",
                      "kind" : "ident",
                      "value" : "sig",
                      "variable" : 0
                    }
                  },
                  "kind" : "expression",
                  "target" : {
                    "go-type" : 11,
                    "kind" : "expression",
                    "type" : "identifier",
                    "value" : {
                      "ident-kind" : "Var",
                      "kind" : "ident",
                      "value" : "handlingSig",
                      "variable" : 4
                    }
                  },
                  "type" : "index"
                },
                "type" : "unary"
              } ],
              "ellipsis" : false,
              "function" : {
                "go-type" : 23,
                "kind" : "expression",
                "qualifier" : {
                  "ident-kind" : "PkgName",
                  "kind" : "ident",
                  "package" : 2,
                  "value" : "atomic"
                },
                "type" : "identifier",
                "value" : {
                  "function" : 2,
                  "ident-kind" : "Func",
                  "kind" : "ident",
                  "value" : "Load"
                }
              },
              "go-type" : 2,
              "kind" : "expression",
              "type" : "call"
            },
            "operator" : "==",
            "right" : {
              "go-type" : 2,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "0"
              }
            },
            "type" : "binary"
          },
          "operator" : "||",
          "right" : {
            "go-type" : 10,
            "kind" : "expression",
            "operator" : "!",
            "target" : {
              "go-type" : 10,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "signalsOK",
                "variable" : 5
              }
            },
            "type" : "unary"
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 949,
      "code" : "if atomic.Load(&handlingSig[sig]) == 0 || !signalsOK {\n\n\tif fwdFn == _SIG_IGN || (fwdFn == _SIG_DFL && flags&_SigIgn != 0) {\n\t\treturn true\n\t}\n\n\tif fwdFn == _SIG_DFL {\n\t\tsetsig(sig, _SIG_DFL)\n\t\tdieFromSignal(sig)\n\t\treturn false\n\t}\n\n\tsigfwd(fwdFn, sig, info, ctx)\n\treturn true\n}",
      "entry" : false,
      "use-vars" : [ 4, 0, 5 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 8, 9 ],
      "in-vars" : [ 0, 8, 1, 2, 10 ],
      "exit" : false,
      "out-vars" : [ 0, 8, 1, 2 ],
      "decl-vars" : [ ],
      "line-start" : 936,
      "ast" : {
        "condition" : {
          "go-type" : 18,
          "kind" : "expression",
          "left" : {
            "go-type" : 18,
            "kind" : "expression",
            "left" : {
              "go-type" : 17,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "fwdFn",
                "variable" : 8
              }
            },
            "operator" : "==",
            "right" : {
              "go-type" : 17,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "1"
              }
            },
            "type" : "binary"
          },
          "operator" : "||",
          "right" : {
            "go-type" : 18,
            "kind" : "expression",
            "target" : {
              "go-type" : 18,
              "kind" : "expression",
              "left" : {
                "go-type" : 18,
                "kind" : "expression",
                "left" : {
                  "go-type" : 17,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "fwdFn",
                    "variable" : 8
                  }
                },
                "operator" : "==",
                "right" : {
                  "go-type" : 17,
                  "kind" : "constant",
                  "value" : {
                    "type" : "INT",
                    "value" : "0"
                  }
                },
                "type" : "binary"
              },
              "operator" : "&&",
              "right" : {
                "go-type" : 18,
                "kind" : "expression",
                "left" : {
                  "go-type" : 6,
                  "kind" : "expression",
                  "left" : {
                    "go-type" : 6,
                    "kind" : "expression",
                    "type" : "identifier",
                    "value" : {
                      "ident-kind" : "Var",
                      "kind" : "ident",
                      "value" : "flags",
                      "variable" : 10
                    }
                  },
                  "operator" : "&",
                  "right" : {
                    "go-type" : 6,
                    "kind" : "constant",
                    "value" : {
                      "type" : "INT",
                      "value" : "256"
                    }
                  },
                  "type" : "binary"
                },
                "operator" : "!=",
                "right" : {
                  "go-type" : 6,
                  "kind" : "constant",
                  "value" : {
                    "type" : "INT",
                    "value" : "0"
                  }
                },
                "type" : "binary"
              },
              "type" : "binary"
            },
            "type" : "paren"
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 938,
      "code" : "if fwdFn == _SIG_IGN || (fwdFn == _SIG_DFL && flags&_SigIgn != 0) {\n\treturn true\n}",
      "entry" : false,
      "use-vars" : [ 8, 10 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 937,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 10,
          "kind" : "constant",
          "value" : {
            "type" : "BOOL",
            "value" : "true"
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 937,
      "code" : "return true",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 10, 13 ],
      "in-vars" : [ 0, 8, 1, 2 ],
      "exit" : false,
      "out-vars" : [ 0, 8, 1, 2 ],
      "decl-vars" : [ ],
      "line-start" : 941,
      "ast" : {
        "condition" : {
          "go-type" : 18,
          "kind" : "expression",
          "left" : {
            "go-type" : 17,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "fwdFn",
              "variable" : 8
            }
          },
          "operator" : "==",
          "right" : {
            "go-type" : 17,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 945,
      "code" : "if fwdFn == _SIG_DFL {\n\tsetsig(sig, _SIG_DFL)\n\tdieFromSignal(sig)\n\treturn false\n}",
      "entry" : false,
      "use-vars" : [ 8 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 11 ],
      "in-vars" : [ 0 ],
      "exit" : false,
      "out-vars" : [ 0 ],
      "decl-vars" : [ ],
      "line-start" : 942,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "sig",
              "variable" : 0
            }
          }, {
            "go-type" : 17,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 28,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 3,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "setsig"
            }
          },
          "go-type" : 27,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 942,
      "code" : "setsig(sig, _SIG_DFL)",
      "entry" : false,
      "use-vars" : [ 0 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 12 ],
      "in-vars" : [ 0 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 943,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "sig",
              "variable" : 0
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 30,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 4,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "dieFromSignal"
            }
          },
          "go-type" : 27,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 943,
      "code" : "dieFromSignal(sig)",
      "entry" : false,
      "use-vars" : [ 0 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 944,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 10,
          "kind" : "constant",
          "value" : {
            "type" : "BOOL",
            "value" : "false"
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 944,
      "code" : "return false",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 14 ],
      "in-vars" : [ 0, 8, 1, 2 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 947,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 17,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "fwdFn",
              "variable" : 8
            }
          }, {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "sig",
              "variable" : 0
            }
          }, {
            "go-type" : 3,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "info",
              "variable" : 1
            }
          }, {
            "go-type" : 8,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "ctx",
              "variable" : 2
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 32,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 5,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "sigfwd"
            }
          },
          "go-type" : 27,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 947,
      "code" : "sigfwd(fwdFn, sig, info, ctx)",
      "entry" : false,
      "use-vars" : [ 8, 0, 1, 2 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 948,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 10,
          "kind" : "constant",
          "value" : {
            "type" : "BOOL",
            "value" : "true"
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 948,
      "code" : "return true",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 16, 17 ],
      "in-vars" : [ 2, 10, 0, 8, 1 ],
      "exit" : false,
      "out-vars" : [ 0, 8, 1, 2, 10 ],
      "decl-vars" : [ ],
      "line-start" : 954,
      "ast" : {
        "condition" : {
          "go-type" : 18,
          "kind" : "expression",
          "left" : {
            "go-type" : 18,
            "kind" : "constant",
            "value" : {
              "type" : "BOOL",
              "value" : "false"
            }
          },
          "operator" : "&&",
          "right" : {
            "go-type" : 18,
            "kind" : "expression",
            "left" : {
              "go-type" : 2,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "sig",
                "variable" : 0
              }
            },
            "operator" : "==",
            "right" : {
              "go-type" : 2,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "13"
              }
            },
            "type" : "binary"
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 956,
      "code" : "if GOOS == \"darwin\" && sig == _SIGPIPE {\n\treturn true\n}",
      "entry" : false,
      "use-vars" : [ 0 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 955,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 10,
          "kind" : "constant",
          "value" : {
            "type" : "BOOL",
            "value" : "true"
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 955,
      "code" : "return true",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 18, 19 ],
      "in-vars" : [ 0, 8, 1, 2, 10 ],
      "exit" : false,
      "out-vars" : [ 1, 2, 10, 0, 8 ],
      "decl-vars" : [ ],
      "line-start" : 959,
      "ast" : {
        "condition" : {
          "go-type" : 18,
          "kind" : "expression",
          "left" : {
            "go-type" : 17,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "fwdFn",
              "variable" : 8
            }
          },
          "operator" : "==",
          "right" : {
            "go-type" : 17,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 961,
      "code" : "if fwdFn == _SIG_DFL {\n\treturn false\n}",
      "entry" : false,
      "use-vars" : [ 8 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 960,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 10,
          "kind" : "constant",
          "value" : {
            "type" : "BOOL",
            "value" : "false"
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 960,
      "code" : "return false",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 20 ],
      "in-vars" : [ 0, 8, 1, 2, 10 ],
      "exit" : false,
      "out-vars" : [ 11, 10, 0, 8, 1, 2 ],
      "decl-vars" : [ 11 ],
      "line-start" : 963,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "c"
          }
        } ],
        "right" : [ {
          "go-type" : 34,
          "kind" : "expression",
          "operator" : "&",
          "target" : {
            "declared" : {
              "go-type" : 35,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 35,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "sigctxt"
              }
            },
            "go-type" : 35,
            "kind" : "literal",
            "type" : "composite",
            "values" : [ {
              "go-type" : 3,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "info",
                "variable" : 1
              }
            }, {
              "go-type" : 8,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "ctx",
                "variable" : 2
              }
            } ]
          },
          "type" : "unary"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 963,
      "code" : "c := &sigctxt{info, ctx}",
      "entry" : false,
      "use-vars" : [ 1, 2 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 21, 22 ],
      "in-vars" : [ 2, 11, 10, 0, 8, 1 ],
      "exit" : false,
      "out-vars" : [ 0, 8, 1, 2, 11 ],
      "decl-vars" : [ ],
      "line-start" : 968,
      "ast" : {
        "condition" : {
          "go-type" : 18,
          "kind" : "expression",
          "left" : {
            "go-type" : 18,
            "kind" : "expression",
            "target" : {
              "go-type" : 18,
              "kind" : "expression",
              "left" : {
                "go-type" : 18,
                "kind" : "expression",
                "left" : {
                  "arguments" : [ ],
                  "ellipsis" : false,
                  "function" : {
                    "field" : {
                      "function" : 6,
                      "ident-kind" : "Func",
                      "kind" : "ident",
                      "value" : "sigcode"
                    },
                    "go-type" : 37,
                    "kind" : "expression",
                    "target" : {
                      "go-type" : 34,
                      "kind" : "expression",
                      "type" : "identifier",
                      "value" : {
                        "ident-kind" : "Var",
                        "kind" : "ident",
                        "value" : "c",
                        "variable" : 11
                      }
                    },
                    "type" : "selector"
                  },
                  "go-type" : 7,
                  "kind" : "expression",
                  "type" : "call"
                },
                "operator" : "==",
                "right" : {
                  "go-type" : 7,
                  "kind" : "constant",
                  "value" : {
                    "type" : "INT",
                    "value" : "0"
                  }
                },
                "type" : "binary"
              },
              "operator" : "||",
              "right" : {
                "go-type" : 18,
                "kind" : "expression",
                "left" : {
                  "go-type" : 6,
                  "kind" : "expression",
                  "left" : {
                    "go-type" : 6,
                    "kind" : "expression",
                    "type" : "identifier",
                    "value" : {
                      "ident-kind" : "Var",
                      "kind" : "ident",
                      "value" : "flags",
                      "variable" : 10
                    }
                  },
                  "operator" : "&",
                  "right" : {
                    "go-type" : 6,
                    "kind" : "constant",
                    "value" : {
                      "type" : "INT",
                      "value" : "8"
                    }
                  },
                  "type" : "binary"
                },
                "operator" : "==",
                "right" : {
                  "go-type" : 6,
                  "kind" : "constant",
                  "value" : {
                    "type" : "INT",
                    "value" : "0"
                  }
                },
                "type" : "binary"
              },
              "type" : "binary"
            },
            "type" : "paren"
          },
          "operator" : "&&",
          "right" : {
            "go-type" : 18,
            "kind" : "expression",
            "left" : {
              "go-type" : 2,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "sig",
                "variable" : 0
              }
            },
            "operator" : "!=",
            "right" : {
              "go-type" : 2,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "13"
              }
            },
            "type" : "binary"
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 970,
      "code" : "if (c.sigcode() == _SI_USER || flags&_SigPanic == 0) && sig != _SIGPIPE {\n\treturn false\n}",
      "entry" : false,
      "use-vars" : [ 11, 10, 0 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 969,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 10,
          "kind" : "constant",
          "value" : {
            "type" : "BOOL",
            "value" : "false"
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 969,
      "code" : "return false",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 23 ],
      "in-vars" : [ 0, 8, 1, 2, 11 ],
      "exit" : false,
      "out-vars" : [ 0, 8, 1, 2, 13 ],
      "decl-vars" : [ 13 ],
      "line-start" : 975,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "g"
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 34,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "c",
              "variable" : 11
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 143,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 7,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "sigFetchG"
            }
          },
          "go-type" : 40,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 975,
      "code" : "g := sigFetchG(c)",
      "entry" : false,
      "use-vars" : [ 11 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 24, 25 ],
      "in-vars" : [ 2, 13, 0, 8, 1 ],
      "exit" : false,
      "out-vars" : [ 2, 0, 8, 1 ],
      "decl-vars" : [ ],
      "line-start" : 976,
      "ast" : {
        "condition" : {
          "go-type" : 10,
          "kind" : "expression",
          "left" : {
            "go-type" : 10,
            "kind" : "expression",
            "left" : {
              "go-type" : 10,
              "kind" : "expression",
              "left" : {
                "go-type" : 10,
                "kind" : "expression",
                "left" : {
                  "go-type" : 40,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "g",
                    "variable" : 13
                  }
                },
                "operator" : "!=",
                "right" : {
                  "go-type" : 146,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Nil",
                    "kind" : "ident",
                    "value" : "nil"
                  }
                },
                "type" : "binary"
              },
              "operator" : "&&",
              "right" : {
                "go-type" : 10,
                "kind" : "expression",
                "left" : {
                  "field" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "m",
                    "variable" : 14
                  },
                  "go-type" : 55,
                  "kind" : "expression",
                  "target" : {
                    "go-type" : 40,
                    "kind" : "expression",
                    "type" : "identifier",
                    "value" : {
                      "ident-kind" : "Var",
                      "kind" : "ident",
                      "value" : "g",
                      "variable" : 13
                    }
                  },
                  "type" : "selector"
                },
                "operator" : "!=",
                "right" : {
                  "go-type" : 146,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Nil",
                    "kind" : "ident",
                    "value" : "nil"
                  }
                },
                "type" : "binary"
              },
              "type" : "binary"
            },
            "operator" : "&&",
            "right" : {
              "go-type" : 10,
              "kind" : "expression",
              "left" : {
                "field" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "curg",
                  "variable" : 15
                },
                "go-type" : 40,
                "kind" : "expression",
                "target" : {
                  "field" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "m",
                    "variable" : 14
                  },
                  "go-type" : 55,
                  "kind" : "expression",
                  "target" : {
                    "go-type" : 40,
                    "kind" : "expression",
                    "type" : "identifier",
                    "value" : {
                      "ident-kind" : "Var",
                      "kind" : "ident",
                      "value" : "g",
                      "variable" : 13
                    }
                  },
                  "type" : "selector"
                },
                "type" : "selector"
              },
              "operator" : "!=",
              "right" : {
                "go-type" : 146,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Nil",
                  "kind" : "ident",
                  "value" : "nil"
                }
              },
              "type" : "binary"
            },
            "type" : "binary"
          },
          "operator" : "&&",
          "right" : {
            "go-type" : 10,
            "kind" : "expression",
            "operator" : "!",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "incgo",
                "variable" : 16
              },
              "go-type" : 10,
              "kind" : "expression",
              "target" : {
                "field" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "m",
                  "variable" : 14
                },
                "go-type" : 55,
                "kind" : "expression",
                "target" : {
                  "go-type" : 40,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "g",
                    "variable" : 13
                  }
                },
                "type" : "selector"
              },
              "type" : "selector"
            },
            "type" : "unary"
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 978,
      "code" : "if g != nil && g.m != nil && g.m.curg != nil && !g.m.incgo {\n\treturn false\n}",
      "entry" : false,
      "use-vars" : [ 13 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 977,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 10,
          "kind" : "constant",
          "value" : {
            "type" : "BOOL",
            "value" : "false"
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 977,
      "code" : "return false",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 26, 27 ],
      "in-vars" : [ 0, 8, 1, 2 ],
      "exit" : false,
      "out-vars" : [ 1, 2, 0, 8 ],
      "decl-vars" : [ ],
      "line-start" : 981,
      "ast" : {
        "condition" : {
          "go-type" : 18,
          "kind" : "expression",
          "left" : {
            "go-type" : 17,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "fwdFn",
              "variable" : 8
            }
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 17,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "1"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 983,
      "code" : "if fwdFn != _SIG_IGN {\n\tsigfwd(fwdFn, sig, info, ctx)\n}",
      "entry" : false,
      "use-vars" : [ 8 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 27 ],
      "in-vars" : [ 0, 8, 1, 2 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 982,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 17,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "fwdFn",
              "variable" : 8
            }
          }, {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "sig",
              "variable" : 0
            }
          }, {
            "go-type" : 3,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "info",
              "variable" : 1
            }
          }, {
            "go-type" : 8,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "ctx",
              "variable" : 2
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 32,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 5,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "sigfwd"
            }
          },
          "go-type" : 27,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 982,
      "code" : "sigfwd(fwdFn, sig, info, ctx)",
      "entry" : false,
      "use-vars" : [ 8, 0, 1, 2 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 985,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 10,
          "kind" : "constant",
          "value" : {
            "type" : "BOOL",
            "value" : "true"
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 985,
      "code" : "return true",
      "entry" : false,
      "use-vars" : [ ]
    } ],
    "code" : "// Determines if the signal should be handled by Go and if not, forwards the\n// signal to the handler that was installed before Go's. Returns whether the\n// signal was forwarded.\n// This is called by the signal handler, and the world may be stopped.\n//go:nosplit\n//go:nowritebarrierrec\nfunc sigfwdgo(sig uint32, info *siginfo, ctx unsafe.Pointer) bool {\n\tif sig >= uint32(len(sigtable)) {\n\t\treturn false\n\t}\n\tfwdFn := atomic.Loaduintptr(&fwdSig[sig])\n\tflags := sigtable[sig].flags\n\n\tif atomic.Load(&handlingSig[sig]) == 0 || !signalsOK {\n\n\t\tif fwdFn == _SIG_IGN || (fwdFn == _SIG_DFL && flags&_SigIgn != 0) {\n\t\t\treturn true\n\t\t}\n\n\t\tif fwdFn == _SIG_DFL {\n\t\t\tsetsig(sig, _SIG_DFL)\n\t\t\tdieFromSignal(sig)\n\t\t\treturn false\n\t\t}\n\n\t\tsigfwd(fwdFn, sig, info, ctx)\n\t\treturn true\n\t}\n\n\tif GOOS == \"darwin\" && sig == _SIGPIPE {\n\t\treturn true\n\t}\n\n\tif fwdFn == _SIG_DFL {\n\t\treturn false\n\t}\n\n\tc := &sigctxt{info, ctx}\n\n\tif (c.sigcode() == _SI_USER || flags&_SigPanic == 0) && sig != _SIGPIPE {\n\t\treturn false\n\t}\n\n\tg := sigFetchG(c)\n\tif g != nil && g.m != nil && g.m.curg != nil && !g.m.incgo {\n\t\treturn false\n\t}\n\n\tif fwdFn != _SIG_IGN {\n\t\tsigfwd(fwdFn, sig, info, ctx)\n\t}\n\n\treturn true\n}",
    "defines" : [ 0 ],
    "functions" : [ {
      "name" : "sigfwdgo",
      "package" : 0,
      "type" : 0,
      "exported" : false
    }, {
      "name" : "Loaduintptr",
      "package" : 2,
      "type" : 19,
      "exported" : true
    }, {
      "name" : "Load",
      "package" : 2,
      "type" : 23,
      "exported" : true
    }, {
      "name" : "setsig",
      "package" : 0,
      "type" : 28,
      "exported" : false
    }, {
      "name" : "dieFromSignal",
      "package" : 0,
      "type" : 30,
      "exported" : false
    }, {
      "name" : "sigfwd",
      "package" : 0,
      "type" : 32,
      "exported" : false
    }, {
      "name" : "sigcode",
      "package" : 0,
      "type" : 39,
      "exported" : false
    }, {
      "name" : "sigFetchG",
      "package" : 0,
      "type" : 143,
      "exported" : false
    } ],
    "line-end" : 986,
    "line-start" : 926,
    "names" : [ "sigfwdgo" ],
    "package" : 0,
    "packages" : [ {
      "name" : "runtime",
      "path" : "runtime"
    }, {
      "name" : "unsafe",
      "path" : "unsafe"
    }, {
      "name" : "atomic",
      "path" : "runtime/internal/atomic"
    }, {
      "name" : "sys",
      "path" : "runtime/internal/sys"
    } ],
    "params" : [ 0, 1, 2 ],
    "receivers" : [ ],
    "results" : [ 3 ],
    "type" : "function",
    "types" : [ {
      "name" : "func(sig uint32, info *runtime.siginfo, ctx unsafe.Pointer) bool",
      "params" : 1,
      "recv" : -1,
      "results" : 9,
      "type" : "Signature",
      "underlying" : 0,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "sig",
        "type" : 2
      }, {
        "name" : "info",
        "type" : 3
      }, {
        "name" : "ctx",
        "type" : 8
      } ],
      "name" : "(sig uint32, info *runtime.siginfo, ctx unsafe.Pointer)",
      "type" : "Tuple",
      "underlying" : 1
    }, {
      "name" : "uint32",
      "type" : "Basic",
      "underlying" : 2
    }, {
      "elem" : 4,
      "name" : "*runtime.siginfo",
      "type" : "Pointer",
      "underlying" : 3
    }, {
      "local-name" : "siginfo",
      "name" : "runtime.siginfo",
      "package" : 0,
      "type" : "Named",
      "underlying" : 5
    }, {
      "fields" : [ {
        "name" : "si_signo",
        "type" : 6
      }, {
        "name" : "si_errno",
        "type" : 6
      }, {
        "name" : "si_code",
        "type" : 6
      }, {
        "name" : "si_addr",
        "type" : 7
      } ],
      "name" : "struct{si_signo int32; si_errno int32; si_code int32; si_addr uint64}",
      "type" : "Struct",
      "underlying" : 5
    }, {
      "name" : "int32",
      "type" : "Basic",
      "underlying" : 6
    }, {
      "name" : "uint64",
      "type" : "Basic",
      "underlying" : 7
    }, {
      "local-name" : "Pointer",
      "name" : "unsafe.Pointer",
      "package" : 1,
      "type" : "Basic",
      "underlying" : 8
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 10
      } ],
      "name" : "(bool)",
      "type" : "Tuple",
      "underlying" : 9
    }, {
      "name" : "bool",
      "type" : "Basic",
      "underlying" : 10
    }, {
      "elem" : 2,
      "name" : "[65]uint32",
      "type" : "Array",
      "underlying" : 11
    }, {
      "elem" : 13,
      "name" : "[65]runtime.sigTabT",
      "type" : "Array",
      "underlying" : 12
    }, {
      "local-name" : "sigTabT",
      "name" : "runtime.sigTabT",
      "package" : 0,
      "type" : "Named",
      "underlying" : 14
    }, {
      "fields" : [ {
        "name" : "flags",
        "type" : 6
      }, {
        "name" : "name",
        "type" : 15
      } ],
      "name" : "struct{flags int32; name string}",
      "type" : "Struct",
      "underlying" : 14
    }, {
      "name" : "string",
      "type" : "Basic",
      "underlying" : 15
    }, {
      "elem" : 17,
      "name" : "[65]uintptr",
      "type" : "Array",
      "underlying" : 16
    }, {
      "name" : "uintptr",
      "type" : "Basic",
      "underlying" : 17
    }, {
      "name" : "untyped bool",
      "type" : "Basic",
      "underlying" : 18
    }, {
      "name" : "func(ptr *uintptr) uintptr",
      "params" : 20,
      "recv" : -1,
      "results" : 22,
      "type" : "Signature",
      "underlying" : 19,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "ptr",
        "type" : 21
      } ],
      "name" : "(ptr *uintptr)",
      "type" : "Tuple",
      "underlying" : 20
    }, {
      "elem" : 17,
      "name" : "*uintptr",
      "type" : "Pointer",
      "underlying" : 21
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 17
      } ],
      "name" : "(uintptr)",
      "type" : "Tuple",
      "underlying" : 22
    }, {
      "name" : "func(ptr *uint32) uint32",
      "params" : 24,
      "recv" : -1,
      "results" : 26,
      "type" : "Signature",
      "underlying" : 23,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "ptr",
        "type" : 25
      } ],
      "name" : "(ptr *uint32)",
      "type" : "Tuple",
      "underlying" : 24
    }, {
      "elem" : 2,
      "name" : "*uint32",
      "type" : "Pointer",
      "underlying" : 25
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 2
      } ],
      "name" : "(uint32)",
      "type" : "Tuple",
      "underlying" : 26
    }, {
      "fields" : [ ],
      "name" : "()",
      "type" : "Tuple",
      "underlying" : 27
    }, {
      "name" : "func(i uint32, fn uintptr)",
      "params" : 29,
      "recv" : -1,
      "results" : 27,
      "type" : "Signature",
      "underlying" : 28,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "i",
        "type" : 2
      }, {
        "name" : "fn",
        "type" : 17
      } ],
      "name" : "(i uint32, fn uintptr)",
      "type" : "Tuple",
      "underlying" : 29
    }, {
      "name" : "func(sig uint32)",
      "params" : 31,
      "recv" : -1,
      "results" : 27,
      "type" : "Signature",
      "underlying" : 30,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "sig",
        "type" : 2
      } ],
      "name" : "(sig uint32)",
      "type" : "Tuple",
      "underlying" : 31
    }, {
      "name" : "func(fn uintptr, sig uint32, info *runtime.siginfo, ctx unsafe.Pointer)",
      "params" : 33,
      "recv" : -1,
      "results" : 27,
      "type" : "Signature",
      "underlying" : 32,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "fn",
        "type" : 17
      }, {
        "name" : "sig",
        "type" : 2
      }, {
        "name" : "info",
        "type" : 3
      }, {
        "name" : "ctx",
        "type" : 8
      } ],
      "name" : "(fn uintptr, sig uint32, info *runtime.siginfo, ctx unsafe.Pointer)",
      "type" : "Tuple",
      "underlying" : 33
    }, {
      "elem" : 35,
      "name" : "*runtime.sigctxt",
      "type" : "Pointer",
      "underlying" : 34
    }, {
      "local-name" : "sigctxt",
      "name" : "runtime.sigctxt",
      "package" : 0,
      "type" : "Named",
      "underlying" : 36
    }, {
      "fields" : [ {
        "name" : "info",
        "type" : 3
      }, {
        "name" : "ctxt",
        "type" : 8
      } ],
      "name" : "struct{info *runtime.siginfo; ctxt unsafe.Pointer}",
      "type" : "Struct",
      "underlying" : 36
    }, {
      "name" : "func() uint64",
      "params" : 27,
      "recv" : -1,
      "results" : 38,
      "type" : "Signature",
      "underlying" : 37,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 7
      } ],
      "name" : "(uint64)",
      "type" : "Tuple",
      "underlying" : 38
    }, {
      "name" : "(*runtime.sigctxt) func() uint64",
      "params" : 27,
      "recv" : 12,
      "results" : 38,
      "type" : "Signature",
      "underlying" : 39,
      "variadic" : false
    }, {
      "elem" : 41,
      "name" : "*runtime.g",
      "type" : "Pointer",
      "underlying" : 40
    }, {
      "local-name" : "g",
      "name" : "runtime.g",
      "package" : 0,
      "type" : "Named",
      "underlying" : 42
    }, {
      "fields" : [ {
        "name" : "stack",
        "type" : 43
      }, {
        "name" : "stackguard0",
        "type" : 17
      }, {
        "name" : "stackguard1",
        "type" : 17
      }, {
        "name" : "_panic",
        "type" : 45
      }, {
        "name" : "_defer",
        "type" : 49
      }, {
        "name" : "m",
        "type" : 55
      }, {
        "name" : "sched",
        "type" : 58
      }, {
        "name" : "syscallsp",
        "type" : 17
      }, {
        "name" : "syscallpc",
        "type" : 17
      }, {
        "name" : "stktopsp",
        "type" : 17
      }, {
        "name" : "param",
        "type" : 8
      }, {
        "name" : "atomicstatus",
        "type" : 2
      }, {
        "name" : "stackLock",
        "type" : 2
      }, {
        "name" : "goid",
        "type" : 69
      }, {
        "name" : "schedlink",
        "type" : 60
      }, {
        "name" : "waitsince",
        "type" : 69
      }, {
        "name" : "waitreason",
        "type" : 113
      }, {
        "name" : "preempt",
        "type" : 10
      }, {
        "name" : "preemptStop",
        "type" : 10
      }, {
        "name" : "preemptShrink",
        "type" : 10
      }, {
        "name" : "asyncSafePoint",
        "type" : 10
      }, {
        "name" : "paniconfault",
        "type" : 10
      }, {
        "name" : "gcscandone",
        "type" : 10
      }, {
        "name" : "throwsplit",
        "type" : 10
      }, {
        "name" : "activeStackChans",
        "type" : 10
      }, {
        "name" : "raceignore",
        "type" : 70
      }, {
        "name" : "sysblocktraced",
        "type" : 10
      }, {
        "name" : "sysexitticks",
        "type" : 69
      }, {
        "name" : "traceseq",
        "type" : 7
      }, {
        "name" : "tracelastp",
        "type" : 68
      }, {
        "name" : "lockedm",
        "type" : 77
      }, {
        "name" : "sig",
        "type" : 2
      }, {
        "name" : "writebuf",
        "type" : 114
      }, {
        "name" : "sigcode0",
        "type" : 17
      }, {
        "name" : "sigcode1",
        "type" : 17
      }, {
        "name" : "sigpc",
        "type" : 17
      }, {
        "name" : "gopc",
        "type" : 17
      }, {
        "name" : "ancestors",
        "type" : 115
      }, {
        "name" : "startpc",
        "type" : 17
      }, {
        "name" : "racectx",
        "type" : 17
      }, {
        "name" : "waiting",
        "type" : 120
      }, {
        "name" : "cgoCtxt",
        "type" : 119
      }, {
        "name" : "labels",
        "type" : 8
      }, {
        "name" : "timer",
        "type" : 138
      }, {
        "name" : "selectDone",
        "type" : 2
      }, {
        "name" : "gcAssistBytes",
        "type" : 69
      } ],
      "name" : "struct{stack runtime.stack; stackguard0 uintptr; stackguard1 uintptr; _panic *runtime._panic; _defer *runtime._defer; m *runtime.m; sched runtime.gobuf; syscallsp uintptr; syscallpc uintptr; stktopsp uintptr; param unsafe.Pointer; atomicstatus uint32; stackLock uint32; goid int64; schedlink runtime.guintptr; waitsince int64; waitreason runtime.waitReason; preempt bool; preemptStop bool; preemptShrink bool; asyncSafePoint bool; paniconfault bool; gcscandone bool; throwsplit bool; activeStackChans bool; raceignore int8; sysblocktraced bool; sysexitticks int64; traceseq uint64; tracelastp runtime.puintptr; lockedm runtime.muintptr; sig uint32; writebuf []byte; sigcode0 uintptr; sigcode1 uintptr; sigpc uintptr; gopc uintptr; ancestors *[]runtime.ancestorInfo; startpc uintptr; racectx uintptr; waiting *runtime.sudog; cgoCtxt []uintptr; labels unsafe.Pointer; timer *runtime.timer; selectDone uint32; gcAssistBytes int64}",
      "type" : "Struct",
      "underlying" : 42
    }, {
      "local-name" : "stack",
      "name" : "runtime.stack",
      "package" : 0,
      "type" : "Named",
      "underlying" : 44
    }, {
      "fields" : [ {
        "name" : "lo",
        "type" : 17
      }, {
        "name" : "hi",
        "type" : 17
      } ],
      "name" : "struct{lo uintptr; hi uintptr}",
      "type" : "Struct",
      "underlying" : 44
    }, {
      "elem" : 46,
      "name" : "*runtime._panic",
      "type" : "Pointer",
      "underlying" : 45
    }, {
      "local-name" : "_panic",
      "name" : "runtime._panic",
      "package" : 0,
      "type" : "Named",
      "underlying" : 47
    }, {
      "fields" : [ {
        "name" : "argp",
        "type" : 8
      }, {
        "name" : "arg",
        "type" : 48
      }, {
        "name" : "link",
        "type" : 45
      }, {
        "name" : "pc",
        "type" : 17
      }, {
        "name" : "sp",
        "type" : 8
      }, {
        "name" : "recovered",
        "type" : 10
      }, {
        "name" : "aborted",
        "type" : 10
      }, {
        "name" : "goexit",
        "type" : 10
      } ],
      "name" : "struct{argp unsafe.Pointer; arg interface{}; link *runtime._panic; pc uintptr; sp unsafe.Pointer; recovered bool; aborted bool; goexit bool}",
      "type" : "Struct",
      "underlying" : 47
    }, {
      "methods" : [ ],
      "name" : "interface{}",
      "type" : "Interface",
      "underlying" : 48
    }, {
      "elem" : 50,
      "name" : "*runtime._defer",
      "type" : "Pointer",
      "underlying" : 49
    }, {
      "local-name" : "_defer",
      "name" : "runtime._defer",
      "package" : 0,
      "type" : "Named",
      "underlying" : 51
    }, {
      "fields" : [ {
        "name" : "siz",
        "type" : 6
      }, {
        "name" : "started",
        "type" : 10
      }, {
        "name" : "heap",
        "type" : 10
      }, {
        "name" : "openDefer",
        "type" : 10
      }, {
        "name" : "sp",
        "type" : 17
      }, {
        "name" : "pc",
        "type" : 17
      }, {
        "name" : "fn",
        "type" : 52
      }, {
        "name" : "_panic",
        "type" : 45
      }, {
        "name" : "link",
        "type" : 49
      }, {
        "name" : "fd",
        "type" : 8
      }, {
        "name" : "varp",
        "type" : 17
      }, {
        "name" : "framepc",
        "type" : 17
      } ],
      "name" : "struct{siz int32; started bool; heap bool; openDefer bool; sp uintptr; pc uintptr; fn *runtime.funcval; _panic *runtime._panic; link *runtime._defer; fd unsafe.Pointer; varp uintptr; framepc uintptr}",
      "type" : "Struct",
      "underlying" : 51
    }, {
      "elem" : 53,
      "name" : "*runtime.funcval",
      "type" : "Pointer",
      "underlying" : 52
    }, {
      "local-name" : "funcval",
      "name" : "runtime.funcval",
      "package" : 0,
      "type" : "Named",
      "underlying" : 54
    }, {
      "fields" : [ {
        "name" : "fn",
        "type" : 17
      } ],
      "name" : "struct{fn uintptr}",
      "type" : "Struct",
      "underlying" : 54
    }, {
      "elem" : 56,
      "name" : "*runtime.m",
      "type" : "Pointer",
      "underlying" : 55
    }, {
      "local-name" : "m",
      "name" : "runtime.m",
      "package" : 0,
      "type" : "Named",
      "underlying" : 57
    }, {
      "fields" : [ {
        "name" : "g0",
        "type" : 40
      }, {
        "name" : "morebuf",
        "type" : 58
      }, {
        "name" : "divmod",
        "type" : 2
      }, {
        "name" : "procid",
        "type" : 7
      }, {
        "name" : "gsignal",
        "type" : 40
      }, {
        "name" : "goSigStack",
        "type" : 62
      }, {
        "name" : "sigmask",
        "type" : 64
      }, {
        "name" : "tls",
        "type" : 66
      }, {
        "name" : "mstartfn",
        "type" : 67
      }, {
        "name" : "curg",
        "type" : 40
      }, {
        "name" : "caughtsig",
        "type" : 60
      }, {
        "name" : "p",
        "type" : 68
      }, {
        "name" : "nextp",
        "type" : 68
      }, {
        "name" : "oldp",
        "type" : 68
      }, {
        "name" : "id",
        "type" : 69
      }, {
        "name" : "mallocing",
        "type" : 6
      }, {
        "name" : "throwing",
        "type" : 6
      }, {
        "name" : "preemptoff",
        "type" : 15
      }, {
        "name" : "locks",
        "type" : 6
      }, {
        "name" : "dying",
        "type" : 6
      }, {
        "name" : "profilehz",
        "type" : 6
      }, {
        "name" : "spinning",
        "type" : 10
      }, {
        "name" : "blocked",
        "type" : 10
      }, {
        "name" : "newSigstack",
        "type" : 10
      }, {
        "name" : "printlock",
        "type" : 70
      }, {
        "name" : "incgo",
        "type" : 10
      }, {
        "name" : "freeWait",
        "type" : 2
      }, {
        "name" : "fastrand",
        "type" : 65
      }, {
        "name" : "needextram",
        "type" : 10
      }, {
        "name" : "traceback",
        "type" : 71
      }, {
        "name" : "ncgocall",
        "type" : 7
      }, {
        "name" : "ncgo",
        "type" : 6
      }, {
        "name" : "cgoCallersUse",
        "type" : 2
      }, {
        "name" : "cgoCallers",
        "type" : 72
      }, {
        "name" : "park",
        "type" : 75
      }, {
        "name" : "alllink",
        "type" : 55
      }, {
        "name" : "schedlink",
        "type" : 77
      }, {
        "name" : "mcache",
        "type" : 78
      }, {
        "name" : "lockedg",
        "type" : 60
      }, {
        "name" : "createstack",
        "type" : 74
      }, {
        "name" : "lockedExt",
        "type" : 2
      }, {
        "name" : "lockedInt",
        "type" : 2
      }, {
        "name" : "nextwaitm",
        "type" : 77
      }, {
        "name" : "waitunlockf",
        "type" : 105
      }, {
        "name" : "waitlock",
        "type" : 8
      }, {
        "name" : "waittraceev",
        "type" : 100
      }, {
        "name" : "waittraceskip",
        "type" : 107
      }, {
        "name" : "startingtrace",
        "type" : 10
      }, {
        "name" : "syscalltick",
        "type" : 2
      }, {
        "name" : "freelink",
        "type" : 55
      }, {
        "name" : "libcall",
        "type" : 108
      }, {
        "name" : "libcallpc",
        "type" : 17
      }, {
        "name" : "libcallsp",
        "type" : 17
      }, {
        "name" : "libcallg",
        "type" : 60
      }, {
        "name" : "syscall",
        "type" : 108
      }, {
        "name" : "vdsoSP",
        "type" : 17
      }, {
        "name" : "vdsoPC",
        "type" : 17
      }, {
        "name" : "preemptGen",
        "type" : 2
      }, {
        "name" : "signalPending",
        "type" : 2
      }, {
        "name" : "dlogPerM",
        "type" : 110
      }, {
        "name" : "mOS",
        "type" : 112
      } ],
      "name" : "struct{g0 *runtime.g; morebuf runtime.gobuf; divmod uint32; procid uint64; gsignal *runtime.g; goSigStack runtime.gsignalStack; sigmask runtime.sigset; tls [6]uintptr; mstartfn func(); curg *runtime.g; caughtsig runtime.guintptr; p runtime.puintptr; nextp runtime.puintptr; oldp runtime.puintptr; id int64; mallocing int32; throwing int32; preemptoff string; locks int32; dying int32; profilehz int32; spinning bool; blocked bool; newSigstack bool; printlock int8; incgo bool; freeWait uint32; fastrand [2]uint32; needextram bool; traceback uint8; ncgocall uint64; ncgo int32; cgoCallersUse uint32; cgoCallers *runtime.cgoCallers; park runtime.note; alllink *runtime.m; schedlink runtime.muintptr; mcache *runtime.mcache; lockedg runtime.guintptr; createstack [32]uintptr; lockedExt uint32; lockedInt uint32; nextwaitm runtime.muintptr; waitunlockf func(*runtime.g, unsafe.Pointer) bool; waitlock unsafe.Pointer; waittraceev byte; waittraceskip int; startingtrace bool; syscalltick uint32; freelink *runtime.m; libcall runtime.libcall; libcallpc uintptr; libcallsp uintptr; libcallg runtime.guintptr; syscall runtime.libcall; vdsoSP uintptr; vdsoPC uintptr; preemptGen uint32; signalPending uint32; runtime.dlogPerM; runtime.mOS}",
      "type" : "Struct",
      "underlying" : 57
    }, {
      "local-name" : "gobuf",
      "name" : "runtime.gobuf",
      "package" : 0,
      "type" : "Named",
      "underlying" : 59
    }, {
      "fields" : [ {
        "name" : "sp",
        "type" : 17
      }, {
        "name" : "pc",
        "type" : 17
      }, {
        "name" : "g",
        "type" : 60
      }, {
        "name" : "ctxt",
        "type" : 8
      }, {
        "name" : "ret",
        "type" : 61
      }, {
        "name" : "lr",
        "type" : 17
      }, {
        "name" : "bp",
        "type" : 17
      } ],
      "name" : "struct{sp uintptr; pc uintptr; g runtime.guintptr; ctxt unsafe.Pointer; ret runtime/internal/sys.Uintreg; lr uintptr; bp uintptr}",
      "type" : "Struct",
      "underlying" : 59
    }, {
      "local-name" : "guintptr",
      "name" : "runtime.guintptr",
      "package" : 0,
      "type" : "Named",
      "underlying" : 17
    }, {
      "local-name" : "Uintreg",
      "name" : "runtime/internal/sys.Uintreg",
      "package" : 3,
      "type" : "Named",
      "underlying" : 7
    }, {
      "local-name" : "gsignalStack",
      "name" : "runtime.gsignalStack",
      "package" : 0,
      "type" : "Named",
      "underlying" : 63
    }, {
      "fields" : [ {
        "name" : "stack",
        "type" : 43
      }, {
        "name" : "stackguard0",
        "type" : 17
      }, {
        "name" : "stackguard1",
        "type" : 17
      }, {
        "name" : "stktopsp",
        "type" : 17
      } ],
      "name" : "struct{stack runtime.stack; stackguard0 uintptr; stackguard1 uintptr; stktopsp uintptr}",
      "type" : "Struct",
      "underlying" : 63
    }, {
      "local-name" : "sigset",
      "name" : "runtime.sigset",
      "package" : 0,
      "type" : "Named",
      "underlying" : 65
    }, {
      "elem" : 2,
      "name" : "[2]uint32",
      "type" : "Array",
      "underlying" : 65
    }, {
      "elem" : 17,
      "name" : "[6]uintptr",
      "type" : "Array",
      "underlying" : 66
    }, {
      "name" : "func()",
      "params" : 27,
      "recv" : -1,
      "results" : 27,
      "type" : "Signature",
      "underlying" : 67,
      "variadic" : false
    }, {
      "local-name" : "puintptr",
      "name" : "runtime.puintptr",
      "package" : 0,
      "type" : "Named",
      "underlying" : 17
    }, {
      "name" : "int64",
      "type" : "Basic",
      "underlying" : 69
    }, {
      "name" : "int8",
      "type" : "Basic",
      "underlying" : 70
    }, {
      "name" : "uint8",
      "type" : "Basic",
      "underlying" : 71
    }, {
      "elem" : 73,
      "name" : "*runtime.cgoCallers",
      "type" : "Pointer",
      "underlying" : 72
    }, {
      "local-name" : "cgoCallers",
      "name" : "runtime.cgoCallers",
      "package" : 0,
      "type" : "Named",
      "underlying" : 74
    }, {
      "elem" : 17,
      "name" : "[32]uintptr",
      "type" : "Array",
      "underlying" : 74
    }, {
      "local-name" : "note",
      "name" : "runtime.note",
      "package" : 0,
      "type" : "Named",
      "underlying" : 76
    }, {
      "fields" : [ {
        "name" : "key",
        "type" : 17
      } ],
      "name" : "struct{key uintptr}",
      "type" : "Struct",
      "underlying" : 76
    }, {
      "local-name" : "muintptr",
      "name" : "runtime.muintptr",
      "package" : 0,
      "type" : "Named",
      "underlying" : 17
    }, {
      "elem" : 79,
      "name" : "*runtime.mcache",
      "type" : "Pointer",
      "underlying" : 78
    }, {
      "local-name" : "mcache",
      "name" : "runtime.mcache",
      "package" : 0,
      "type" : "Named",
      "underlying" : 80
    }, {
      "fields" : [ {
        "name" : "next_sample",
        "type" : 17
      }, {
        "name" : "local_scan",
        "type" : 17
      }, {
        "name" : "tiny",
        "type" : 17
      }, {
        "name" : "tinyoffset",
        "type" : 17
      }, {
        "name" : "local_tinyallocs",
        "type" : 17
      }, {
        "name" : "alloc",
        "type" : 81
      }, {
        "name" : "stackcache",
        "type" : 101
      }, {
        "name" : "local_largefree",
        "type" : 17
      }, {
        "name" : "local_nlargefree",
        "type" : 17
      }, {
        "name" : "local_nsmallfree",
        "type" : 104
      }, {
        "name" : "flushGen",
        "type" : 2
      } ],
      "name" : "struct{next_sample uintptr; local_scan uintptr; tiny uintptr; tinyoffset uintptr; local_tinyallocs uintptr; alloc [134]*runtime.mspan; stackcache [4]runtime.stackfreelist; local_largefree uintptr; local_nlargefree uintptr; local_nsmallfree [67]uintptr; flushGen uint32}",
      "type" : "Struct",
      "underlying" : 80
    }, {
      "elem" : 82,
      "name" : "[134]*runtime.mspan",
      "type" : "Array",
      "underlying" : 81
    }, {
      "elem" : 83,
      "name" : "*runtime.mspan",
      "type" : "Pointer",
      "underlying" : 82
    }, {
      "local-name" : "mspan",
      "name" : "runtime.mspan",
      "package" : 0,
      "type" : "Named",
      "underlying" : 84
    }, {
      "fields" : [ {
        "name" : "next",
        "type" : 82
      }, {
        "name" : "prev",
        "type" : 82
      }, {
        "name" : "list",
        "type" : 85
      }, {
        "name" : "startAddr",
        "type" : 17
      }, {
        "name" : "npages",
        "type" : 17
      }, {
        "name" : "manualFreeList",
        "type" : 88
      }, {
        "name" : "freeindex",
        "type" : 17
      }, {
        "name" : "nelems",
        "type" : 17
      }, {
        "name" : "allocCache",
        "type" : 7
      }, {
        "name" : "allocBits",
        "type" : 89
      }, {
        "name" : "gcmarkBits",
        "type" : 89
      }, {
        "name" : "sweepgen",
        "type" : 2
      }, {
        "name" : "divMul",
        "type" : 91
      }, {
        "name" : "baseMask",
        "type" : 91
      }, {
        "name" : "allocCount",
        "type" : 91
      }, {
        "name" : "spanclass",
        "type" : 92
      }, {
        "name" : "state",
        "type" : 93
      }, {
        "name" : "needzero",
        "type" : 71
      }, {
        "name" : "divShift",
        "type" : 71
      }, {
        "name" : "divShift2",
        "type" : 71
      }, {
        "name" : "elemsize",
        "type" : 17
      }, {
        "name" : "limit",
        "type" : 17
      }, {
        "name" : "speciallock",
        "type" : 96
      }, {
        "name" : "specials",
        "type" : 97
      } ],
      "name" : "struct{next *runtime.mspan; prev *runtime.mspan; list *runtime.mSpanList; startAddr uintptr; npages uintptr; manualFreeList runtime.gclinkptr; freeindex uintptr; nelems uintptr; allocCache uint64; allocBits *runtime.gcBits; gcmarkBits *runtime.gcBits; sweepgen uint32; divMul uint16; baseMask uint16; allocCount uint16; spanclass runtime.spanClass; state runtime.mSpanStateBox; needzero uint8; divShift uint8; divShift2 uint8; elemsize uintptr; limit uintptr; speciallock runtime.mutex; specials *runtime.special}",
      "type" : "Struct",
      "underlying" : 84
    }, {
      "elem" : 86,
      "name" : "*runtime.mSpanList",
      "type" : "Pointer",
      "underlying" : 85
    }, {
      "local-name" : "mSpanList",
      "name" : "runtime.mSpanList",
      "package" : 0,
      "type" : "Named",
      "underlying" : 87
    }, {
      "fields" : [ {
        "name" : "first",
        "type" : 82
      }, {
        "name" : "last",
        "type" : 82
      } ],
      "name" : "struct{first *runtime.mspan; last *runtime.mspan}",
      "type" : "Struct",
      "underlying" : 87
    }, {
      "local-name" : "gclinkptr",
      "name" : "runtime.gclinkptr",
      "package" : 0,
      "type" : "Named",
      "underlying" : 17
    }, {
      "elem" : 90,
      "name" : "*runtime.gcBits",
      "type" : "Pointer",
      "underlying" : 89
    }, {
      "local-name" : "gcBits",
      "name" : "runtime.gcBits",
      "package" : 0,
      "type" : "Named",
      "underlying" : 71
    }, {
      "name" : "uint16",
      "type" : "Basic",
      "underlying" : 91
    }, {
      "local-name" : "spanClass",
      "name" : "runtime.spanClass",
      "package" : 0,
      "type" : "Named",
      "underlying" : 71
    }, {
      "local-name" : "mSpanStateBox",
      "name" : "runtime.mSpanStateBox",
      "package" : 0,
      "type" : "Named",
      "underlying" : 94
    }, {
      "fields" : [ {
        "name" : "s",
        "type" : 95
      } ],
      "name" : "struct{s runtime.mSpanState}",
      "type" : "Struct",
      "underlying" : 94
    }, {
      "local-name" : "mSpanState",
      "name" : "runtime.mSpanState",
      "package" : 0,
      "type" : "Named",
      "underlying" : 71
    }, {
      "local-name" : "mutex",
      "name" : "runtime.mutex",
      "package" : 0,
      "type" : "Named",
      "underlying" : 76
    }, {
      "elem" : 98,
      "name" : "*runtime.special",
      "type" : "Pointer",
      "underlying" : 97
    }, {
      "local-name" : "special",
      "name" : "runtime.special",
      "package" : 0,
      "type" : "Named",
      "underlying" : 99
    }, {
      "fields" : [ {
        "name" : "next",
        "type" : 97
      }, {
        "name" : "offset",
        "type" : 91
      }, {
        "name" : "kind",
        "type" : 100
      } ],
      "name" : "struct{next *runtime.special; offset uint16; kind byte}",
      "type" : "Struct",
      "underlying" : 99
    }, {
      "name" : "byte",
      "type" : "Basic",
      "underlying" : 100
    }, {
      "elem" : 102,
      "name" : "[4]runtime.stackfreelist",
      "type" : "Array",
      "underlying" : 101
    }, {
      "local-name" : "stackfreelist",
      "name" : "runtime.stackfreelist",
      "package" : 0,
      "type" : "Named",
      "underlying" : 103
    }, {
      "fields" : [ {
        "name" : "list",
        "type" : 88
      }, {
        "name" : "size",
        "type" : 17
      } ],
      "name" : "struct{list runtime.gclinkptr; size uintptr}",
      "type" : "Struct",
      "underlying" : 103
    }, {
      "elem" : 17,
      "name" : "[67]uintptr",
      "type" : "Array",
      "underlying" : 104
    }, {
      "name" : "func(*runtime.g, unsafe.Pointer) bool",
      "params" : 106,
      "recv" : -1,
      "results" : 9,
      "type" : "Signature",
      "underlying" : 105,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 40
      }, {
        "name" : "",
        "type" : 8
      } ],
      "name" : "(*runtime.g, unsafe.Pointer)",
      "type" : "Tuple",
      "underlying" : 106
    }, {
      "name" : "int",
      "type" : "Basic",
      "underlying" : 107
    }, {
      "local-name" : "libcall",
      "name" : "runtime.libcall",
      "package" : 0,
      "type" : "Named",
      "underlying" : 109
    }, {
      "fields" : [ {
        "name" : "fn",
        "type" : 17
      }, {
        "name" : "n",
        "type" : 17
      }, {
        "name" : "args",
        "type" : 17
      }, {
        "name" : "r1",
        "type" : 17
      }, {
        "name" : "r2",
        "type" : 17
      }, {
        "name" : "err",
        "type" : 17
      } ],
      "name" : "struct{fn uintptr; n uintptr; args uintptr; r1 uintptr; r2 uintptr; err uintptr}",
      "type" : "Struct",
      "underlying" : 109
    }, {
      "local-name" : "dlogPerM",
      "name" : "runtime.dlogPerM",
      "package" : 0,
      "type" : "Named",
      "underlying" : 111
    }, {
      "fields" : [ ],
      "name" : "struct{}",
      "type" : "Struct",
      "underlying" : 111
    }, {
      "local-name" : "mOS",
      "name" : "runtime.mOS",
      "package" : 0,
      "type" : "Named",
      "underlying" : 111
    }, {
      "local-name" : "waitReason",
      "name" : "runtime.waitReason",
      "package" : 0,
      "type" : "Named",
      "underlying" : 71
    }, {
      "elem" : 100,
      "name" : "[]byte",
      "type" : "Slice",
      "underlying" : 114
    }, {
      "elem" : 116,
      "name" : "*[]runtime.ancestorInfo",
      "type" : "Pointer",
      "underlying" : 115
    }, {
      "elem" : 117,
      "name" : "[]runtime.ancestorInfo",
      "type" : "Slice",
      "underlying" : 116
    }, {
      "local-name" : "ancestorInfo",
      "name" : "runtime.ancestorInfo",
      "package" : 0,
      "type" : "Named",
      "underlying" : 118
    }, {
      "fields" : [ {
        "name" : "pcs",
        "type" : 119
      }, {
        "name" : "goid",
        "type" : 69
      }, {
        "name" : "gopc",
        "type" : 17
      } ],
      "name" : "struct{pcs []uintptr; goid int64; gopc uintptr}",
      "type" : "Struct",
      "underlying" : 118
    }, {
      "elem" : 17,
      "name" : "[]uintptr",
      "type" : "Slice",
      "underlying" : 119
    }, {
      "elem" : 121,
      "name" : "*runtime.sudog",
      "type" : "Pointer",
      "underlying" : 120
    }, {
      "local-name" : "sudog",
      "name" : "runtime.sudog",
      "package" : 0,
      "type" : "Named",
      "underlying" : 122
    }, {
      "fields" : [ {
        "name" : "g",
        "type" : 40
      }, {
        "name" : "isSelect",
        "type" : 10
      }, {
        "name" : "next",
        "type" : 120
      }, {
        "name" : "prev",
        "type" : 120
      }, {
        "name" : "elem",
        "type" : 8
      }, {
        "name" : "acquiretime",
        "type" : 69
      }, {
        "name" : "releasetime",
        "type" : 69
      }, {
        "name" : "ticket",
        "type" : 2
      }, {
        "name" : "parent",
        "type" : 120
      }, {
        "name" : "waitlink",
        "type" : 120
      }, {
        "name" : "waittail",
        "type" : 120
      }, {
        "name" : "c",
        "type" : 123
      } ],
      "name" : "struct{g *runtime.g; isSelect bool; next *runtime.sudog; prev *runtime.sudog; elem unsafe.Pointer; acquiretime int64; releasetime int64; ticket uint32; parent *runtime.sudog; waitlink *runtime.sudog; waittail *runtime.sudog; c *runtime.hchan}",
      "type" : "Struct",
      "underlying" : 122
    }, {
      "elem" : 124,
      "name" : "*runtime.hchan",
      "type" : "Pointer",
      "underlying" : 123
    }, {
      "local-name" : "hchan",
      "name" : "runtime.hchan",
      "package" : 0,
      "type" : "Named",
      "underlying" : 125
    }, {
      "fields" : [ {
        "name" : "qcount",
        "type" : 126
      }, {
        "name" : "dataqsiz",
        "type" : 126
      }, {
        "name" : "buf",
        "type" : 8
      }, {
        "name" : "elemsize",
        "type" : 91
      }, {
        "name" : "closed",
        "type" : 2
      }, {
        "name" : "elemtype",
        "type" : 127
      }, {
        "name" : "sendx",
        "type" : 126
      }, {
        "name" : "recvx",
        "type" : 126
      }, {
        "name" : "recvq",
        "type" : 136
      }, {
        "name" : "sendq",
        "type" : 136
      }, {
        "name" : "lock",
        "type" : 96
      } ],
      "name" : "struct{qcount uint; dataqsiz uint; buf unsafe.Pointer; elemsize uint16; closed uint32; elemtype *runtime._type; sendx uint; recvx uint; recvq runtime.waitq; sendq runtime.waitq; lock runtime.mutex}",
      "type" : "Struct",
      "underlying" : 125
    }, {
      "name" : "uint",
      "type" : "Basic",
      "underlying" : 126
    }, {
      "elem" : 128,
      "name" : "*runtime._type",
      "type" : "Pointer",
      "underlying" : 127
    }, {
      "local-name" : "_type",
      "name" : "runtime._type",
      "package" : 0,
      "type" : "Named",
      "underlying" : 129
    }, {
      "fields" : [ {
        "name" : "size",
        "type" : 17
      }, {
        "name" : "ptrdata",
        "type" : 17
      }, {
        "name" : "hash",
        "type" : 2
      }, {
        "name" : "tflag",
        "type" : 130
      }, {
        "name" : "align",
        "type" : 71
      }, {
        "name" : "fieldAlign",
        "type" : 71
      }, {
        "name" : "kind",
        "type" : 71
      }, {
        "name" : "equal",
        "type" : 131
      }, {
        "name" : "gcdata",
        "type" : 133
      }, {
        "name" : "str",
        "type" : 134
      }, {
        "name" : "ptrToThis",
        "type" : 135
      } ],
      "name" : "struct{size uintptr; ptrdata uintptr; hash uint32; tflag runtime.tflag; align uint8; fieldAlign uint8; kind uint8; equal func(unsafe.Pointer, unsafe.Pointer) bool; gcdata *byte; str runtime.nameOff; ptrToThis runtime.typeOff}",
      "type" : "Struct",
      "underlying" : 129
    }, {
      "local-name" : "tflag",
      "name" : "runtime.tflag",
      "package" : 0,
      "type" : "Named",
      "underlying" : 71
    }, {
      "name" : "func(unsafe.Pointer, unsafe.Pointer) bool",
      "params" : 132,
      "recv" : -1,
      "results" : 9,
      "type" : "Signature",
      "underlying" : 131,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 8
      }, {
        "name" : "",
        "type" : 8
      } ],
      "name" : "(unsafe.Pointer, unsafe.Pointer)",
      "type" : "Tuple",
      "underlying" : 132
    }, {
      "elem" : 100,
      "name" : "*byte",
      "type" : "Pointer",
      "underlying" : 133
    }, {
      "local-name" : "nameOff",
      "name" : "runtime.nameOff",
      "package" : 0,
      "type" : "Named",
      "underlying" : 6
    }, {
      "local-name" : "typeOff",
      "name" : "runtime.typeOff",
      "package" : 0,
      "type" : "Named",
      "underlying" : 6
    }, {
      "local-name" : "waitq",
      "name" : "runtime.waitq",
      "package" : 0,
      "type" : "Named",
      "underlying" : 137
    }, {
      "fields" : [ {
        "name" : "first",
        "type" : 120
      }, {
        "name" : "last",
        "type" : 120
      } ],
      "name" : "struct{first *runtime.sudog; last *runtime.sudog}",
      "type" : "Struct",
      "underlying" : 137
    }, {
      "elem" : 139,
      "name" : "*runtime.timer",
      "type" : "Pointer",
      "underlying" : 138
    }, {
      "local-name" : "timer",
      "name" : "runtime.timer",
      "package" : 0,
      "type" : "Named",
      "underlying" : 140
    }, {
      "fields" : [ {
        "name" : "pp",
        "type" : 68
      }, {
        "name" : "when",
        "type" : 69
      }, {
        "name" : "period",
        "type" : 69
      }, {
        "name" : "f",
        "type" : 141
      }, {
        "name" : "arg",
        "type" : 48
      }, {
        "name" : "seq",
        "type" : 17
      }, {
        "name" : "nextwhen",
        "type" : 69
      }, {
        "name" : "status",
        "type" : 2
      } ],
      "name" : "struct{pp runtime.puintptr; when int64; period int64; f func(interface{}, uintptr); arg interface{}; seq uintptr; nextwhen int64; status uint32}",
      "type" : "Struct",
      "underlying" : 140
    }, {
      "name" : "func(interface{}, uintptr)",
      "params" : 142,
      "recv" : -1,
      "results" : 27,
      "type" : "Signature",
      "underlying" : 141,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 48
      }, {
        "name" : "",
        "type" : 17
      } ],
      "name" : "(interface{}, uintptr)",
      "type" : "Tuple",
      "underlying" : 142
    }, {
      "name" : "func(c *runtime.sigctxt) *runtime.g",
      "params" : 144,
      "recv" : -1,
      "results" : 145,
      "type" : "Signature",
      "underlying" : 143,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "c",
        "type" : 34
      } ],
      "name" : "(c *runtime.sigctxt)",
      "type" : "Tuple",
      "underlying" : 144
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 40
      } ],
      "name" : "(*runtime.g)",
      "type" : "Tuple",
      "underlying" : 145
    }, {
      "name" : "untyped nil",
      "type" : "Basic",
      "underlying" : 146
    } ],
    "variables" : [ {
      "name" : "sig",
      "package" : 0,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "info",
      "package" : 0,
      "type" : 3,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "ctx",
      "package" : 0,
      "type" : 8,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "[res0]",
      "package" : 0,
      "type" : 10,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "handlingSig",
      "package" : 0,
      "type" : 11,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "signalsOK",
      "package" : 0,
      "type" : 10,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "sigtable",
      "package" : 0,
      "type" : 12,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "fwdSig",
      "package" : 0,
      "type" : 16,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "fwdFn",
      "package" : 0,
      "type" : 17,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "flags",
      "package" : 0,
      "type" : 6,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "flags",
      "package" : 0,
      "type" : 6,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "c",
      "package" : 0,
      "type" : 34,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "c",
      "package" : 0,
      "type" : 34,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "g",
      "package" : 0,
      "type" : 40,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "m",
      "package" : 0,
      "type" : 55,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "curg",
      "package" : 0,
      "type" : 40,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "incgo",
      "package" : 0,
      "type" : 10,
      "exported" : false,
      "embedded" : false,
      "field" : true
    } ]
  },
  "go-version" : "1.14.3"
}