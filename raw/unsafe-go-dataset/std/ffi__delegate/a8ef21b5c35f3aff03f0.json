{
  "usage" : {
    "file" : "mbitmap.go",
    "label1" : "delegate",
    "label2" : "ffi",
    "line" : "822",
    "module" : "std",
    "pkg" : "runtime",
    "project" : "kubernetes/kubernetes",
    "snippet" : "memclrNoHeapPointers(unsafe.Pointer(h.bitp), nbyte)",
    "version" : "std"
  },
  "cfg" : {
    "blocks" : [ {
      "update-vars" : [ ],
      "successors" : [ 2 ],
      "in-vars" : [ 0, 1 ],
      "exit" : false,
      "out-vars" : [ 0, 1 ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[entry]",
      "entry" : true,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ ],
      "in-vars" : [ ],
      "exit" : true,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[exit]",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 3 ],
      "in-vars" : [ 0, 1 ],
      "exit" : false,
      "out-vars" : [ 0, 3, 1 ],
      "decl-vars" : [ 3 ],
      "line-start" : 804,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "nw"
          }
        } ],
        "right" : [ {
          "go-type" : 8,
          "kind" : "expression",
          "left" : {
            "go-type" : 8,
            "kind" : "expression",
            "target" : {
              "go-type" : 8,
              "kind" : "expression",
              "left" : {
                "field" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "npages",
                  "variable" : 2
                },
                "go-type" : 8,
                "kind" : "expression",
                "target" : {
                  "go-type" : 2,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "s",
                    "variable" : 1
                  }
                },
                "type" : "selector"
              },
              "operator" : "<<",
              "right" : {
                "go-type" : 27,
                "kind" : "constant",
                "value" : {
                  "type" : "INT",
                  "value" : "13"
                }
              },
              "type" : "binary"
            },
            "type" : "paren"
          },
          "operator" : "/",
          "right" : {
            "go-type" : 8,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "8"
            }
          },
          "type" : "binary"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 804,
      "code" : "nw := (s.npages << _PageShift) / sys.PtrSize",
      "entry" : false,
      "use-vars" : [ 1 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 4, 5 ],
      "in-vars" : [ 0, 3, 1 ],
      "exit" : false,
      "out-vars" : [ 0, 3, 1 ],
      "decl-vars" : [ ],
      "line-start" : 805,
      "ast" : {
        "condition" : {
          "go-type" : 28,
          "kind" : "expression",
          "left" : {
            "go-type" : 8,
            "kind" : "expression",
            "left" : {
              "go-type" : 8,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "nw",
                "variable" : 3
              }
            },
            "operator" : "%",
            "right" : {
              "go-type" : 8,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "4"
              }
            },
            "type" : "binary"
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 8,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 807,
      "code" : "if nw%wordsPerBitmapByte != 0 {\n\tthrow(\"initSpan: unaligned length\")\n}",
      "entry" : false,
      "use-vars" : [ 3 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 5 ],
      "in-vars" : [ 0, 3, 1 ],
      "exit" : false,
      "out-vars" : [ 0, 3, 1 ],
      "decl-vars" : [ ],
      "line-start" : 806,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 31,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "initSpan: unaligned length"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 29,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "throw"
            }
          },
          "go-type" : 26,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 806,
      "code" : "throw(\"initSpan: unaligned length\")",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 6, 7 ],
      "in-vars" : [ 0, 3, 1 ],
      "exit" : false,
      "out-vars" : [ 1, 0, 3 ],
      "decl-vars" : [ ],
      "line-start" : 808,
      "ast" : {
        "condition" : {
          "go-type" : 28,
          "kind" : "expression",
          "left" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "shift",
              "variable" : 4
            },
            "go-type" : 14,
            "kind" : "expression",
            "target" : {
              "go-type" : 0,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "h",
                "variable" : 0
              }
            },
            "type" : "selector"
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 14,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 810,
      "code" : "if h.shift != 0 {\n\tthrow(\"initSpan: unaligned base\")\n}",
      "entry" : false,
      "use-vars" : [ 0 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 7 ],
      "in-vars" : [ 3, 1, 0 ],
      "exit" : false,
      "out-vars" : [ 0, 3, 1 ],
      "decl-vars" : [ ],
      "line-start" : 809,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 31,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "initSpan: unaligned base"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 29,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "throw"
            }
          },
          "go-type" : 26,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 809,
      "code" : "throw(\"initSpan: unaligned base\")",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 8 ],
      "in-vars" : [ 0, 3, 1 ],
      "exit" : false,
      "out-vars" : [ 0, 3, 6 ],
      "decl-vars" : [ 6 ],
      "line-start" : 811,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "isPtrs"
          }
        } ],
        "right" : [ {
          "go-type" : 32,
          "kind" : "expression",
          "left" : {
            "go-type" : 32,
            "kind" : "constant",
            "value" : {
              "type" : "BOOL",
              "value" : "true"
            }
          },
          "operator" : "&&",
          "right" : {
            "go-type" : 32,
            "kind" : "expression",
            "left" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "elemsize",
                "variable" : 5
              },
              "go-type" : 8,
              "kind" : "expression",
              "target" : {
                "go-type" : 2,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "s",
                  "variable" : 1
                }
              },
              "type" : "selector"
            },
            "operator" : "==",
            "right" : {
              "go-type" : 8,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "8"
              }
            },
            "type" : "binary"
          },
          "type" : "binary"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 811,
      "code" : "isPtrs := sys.PtrSize == 8 && s.elemsize == sys.PtrSize",
      "entry" : false,
      "use-vars" : [ 1 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1, 9 ],
      "in-vars" : [ 3, 6, 0 ],
      "exit" : false,
      "out-vars" : [ 0, 3, 6 ],
      "decl-vars" : [ ],
      "line-start" : 812,
      "ast" : {
        "condition" : {
          "go-type" : 28,
          "kind" : "expression",
          "left" : {
            "go-type" : 8,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "nw",
              "variable" : 3
            }
          },
          "operator" : ">",
          "right" : {
            "go-type" : 8,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "for"
      },
      "assign-vars" : [ ],
      "line-end" : 826,
      "code" : "for nw > 0 {\n\thNext, anw := h.forwardOrBoundary(nw)\n\tnbyte := anw / wordsPerBitmapByte\n\tif isPtrs {\n\t\tbitp := h.bitp\n\t\tfor i := uintptr(0); i < nbyte; i++ {\n\t\t\t*bitp = bitPointerAll | bitScanAll\n\t\t\tbitp = add1(bitp)\n\t\t}\n\t} else {\n\t\tmemclrNoHeapPointers(unsafe.Pointer(h.bitp), nbyte)\n\t}\n\th = hNext\n\tnw -= anw\n}",
      "entry" : false,
      "use-vars" : [ 3 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 10 ],
      "in-vars" : [ 0, 3, 6 ],
      "exit" : false,
      "out-vars" : [ 12, 7, 0, 3, 6 ],
      "decl-vars" : [ 7, 12 ],
      "line-start" : 813,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "hNext"
          }
        }, {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "anw"
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 8,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "nw",
              "variable" : 3
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "forwardOrBoundary"
            },
            "go-type" : 34,
            "kind" : "expression",
            "target" : {
              "go-type" : 0,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "h",
                "variable" : 0
              }
            },
            "type" : "selector"
          },
          "go-type" : 33,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 813,
      "code" : "hNext, anw := h.forwardOrBoundary(nw)",
      "entry" : false,
      "use-vars" : [ 0, 3 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 11 ],
      "in-vars" : [ 0, 3, 6, 12, 7 ],
      "exit" : false,
      "out-vars" : [ 3, 6, 12, 10, 7, 0 ],
      "decl-vars" : [ 10 ],
      "line-start" : 814,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "nbyte"
          }
        } ],
        "right" : [ {
          "go-type" : 8,
          "kind" : "expression",
          "left" : {
            "go-type" : 8,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "anw",
              "variable" : 7
            }
          },
          "operator" : "/",
          "right" : {
            "go-type" : 8,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "4"
            }
          },
          "type" : "binary"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 814,
      "code" : "nbyte := anw / wordsPerBitmapByte",
      "entry" : false,
      "use-vars" : [ 7 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 12, 18 ],
      "in-vars" : [ 12, 10, 7, 0, 3, 6 ],
      "exit" : false,
      "out-vars" : [ 7, 0, 3, 6, 12, 10 ],
      "decl-vars" : [ ],
      "line-start" : 815,
      "ast" : {
        "condition" : {
          "go-type" : 32,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "isPtrs",
            "variable" : 6
          }
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 823,
      "code" : "if isPtrs {\n\tbitp := h.bitp\n\tfor i := uintptr(0); i < nbyte; i++ {\n\t\t*bitp = bitPointerAll | bitScanAll\n\t\tbitp = add1(bitp)\n\t}\n} else {\n\tmemclrNoHeapPointers(unsafe.Pointer(h.bitp), nbyte)\n}",
      "entry" : false,
      "use-vars" : [ 6 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 14 ],
      "in-vars" : [ 10, 7, 0, 3, 6, 12 ],
      "exit" : false,
      "out-vars" : [ 11, 3, 6, 12, 10, 7 ],
      "decl-vars" : [ 11 ],
      "line-start" : 816,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "bitp"
          }
        } ],
        "right" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "bitp",
            "variable" : 8
          },
          "go-type" : 2,
          "kind" : "expression",
          "target" : {
            "go-type" : 0,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "h",
              "variable" : 0
            }
          },
          "type" : "selector"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 816,
      "code" : "bitp := h.bitp",
      "entry" : false,
      "use-vars" : [ 0 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 16, 19 ],
      "in-vars" : [ 12, 10, 7, 11, 3, 6, 9 ],
      "exit" : false,
      "out-vars" : [ 3, 6, 9, 12, 10, 7, 11 ],
      "decl-vars" : [ ],
      "line-start" : 817,
      "ast" : {
        "condition" : {
          "go-type" : 28,
          "kind" : "expression",
          "left" : {
            "go-type" : 8,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "i",
              "variable" : 9
            }
          },
          "operator" : "<",
          "right" : {
            "go-type" : 8,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "nbyte",
              "variable" : 10
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "for"
      },
      "assign-vars" : [ ],
      "line-end" : 820,
      "code" : "for i := uintptr(0); i < nbyte; i++ {\n\t*bitp = bitPointerAll | bitScanAll\n\tbitp = add1(bitp)\n}",
      "entry" : false,
      "use-vars" : [ 9, 10 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 13 ],
      "in-vars" : [ 11, 3, 6, 12, 10, 7 ],
      "exit" : false,
      "out-vars" : [ 12, 10, 7, 11, 3, 6, 9 ],
      "decl-vars" : [ 9 ],
      "line-start" : 817,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "i"
          }
        } ],
        "right" : [ {
          "go-type" : 8,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "0"
          }
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 817,
      "code" : "i := uintptr(0)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ 9 ],
      "successors" : [ 13 ],
      "in-vars" : [ 9, 12, 10, 7, 11, 3, 6 ],
      "exit" : false,
      "out-vars" : [ 3, 6, 9, 12, 10, 7, 11 ],
      "decl-vars" : [ ],
      "line-start" : 817,
      "ast" : {
        "kind" : "statement",
        "operation" : "++",
        "target" : {
          "go-type" : 8,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "i",
            "variable" : 9
          }
        },
        "type" : "crement"
      },
      "assign-vars" : [ 9 ],
      "line-end" : 817,
      "code" : "i++",
      "entry" : false,
      "use-vars" : [ 9 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 17 ],
      "in-vars" : [ 9, 12, 10, 7, 11, 3, 6 ],
      "exit" : false,
      "out-vars" : [ 9, 12, 10, 7, 11, 3, 6 ],
      "decl-vars" : [ ],
      "line-start" : 818,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 13,
          "kind" : "expression",
          "target" : {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "bitp",
              "variable" : 11
            }
          },
          "type" : "star"
        } ],
        "right" : [ {
          "go-type" : 13,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "255"
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 818,
      "code" : "*bitp = bitPointerAll | bitScanAll",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ 11 ],
      "successors" : [ 15 ],
      "in-vars" : [ 6, 9, 12, 10, 7, 11, 3 ],
      "exit" : false,
      "out-vars" : [ 6, 9, 12, 10, 7, 11, 3 ],
      "decl-vars" : [ ],
      "line-start" : 819,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 2,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "bitp",
            "variable" : 11
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "bitp",
              "variable" : 11
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 37,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "add1"
            }
          },
          "go-type" : 36,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 11 ],
      "line-end" : 819,
      "code" : "bitp = add1(bitp)",
      "entry" : false,
      "use-vars" : [ 11 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 19 ],
      "in-vars" : [ 10, 7, 0, 3, 6, 12 ],
      "exit" : false,
      "out-vars" : [ 7, 3, 6, 12 ],
      "decl-vars" : [ ],
      "line-start" : 822,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "coerced-to" : {
              "go-type" : 42,
              "kind" : "type",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 1,
                "value" : "unsafe"
              },
              "type" : "identifier",
              "value" : {
                "go-type" : 42,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "Pointer"
              }
            },
            "go-type" : 42,
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "bitp",
                "variable" : 8
              },
              "go-type" : 2,
              "kind" : "expression",
              "target" : {
                "go-type" : 0,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "h",
                  "variable" : 0
                }
              },
              "type" : "selector"
            },
            "type" : "cast"
          }, {
            "go-type" : 8,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "nbyte",
              "variable" : 10
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 40,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "memclrNoHeapPointers"
            }
          },
          "go-type" : 26,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 822,
      "code" : "memclrNoHeapPointers(unsafe.Pointer(h.bitp), nbyte)",
      "entry" : false,
      "use-vars" : [ 10, 0 ]
    }, {
      "update-vars" : [ 0 ],
      "successors" : [ 20 ],
      "in-vars" : [ 7, 3, 6, 12 ],
      "exit" : false,
      "out-vars" : [ 7, 0, 3, 6 ],
      "decl-vars" : [ ],
      "line-start" : 824,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 0,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "h",
            "variable" : 0
          }
        } ],
        "right" : [ {
          "go-type" : 0,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "hNext",
            "variable" : 12
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 0 ],
      "line-end" : 824,
      "code" : "h = hNext",
      "entry" : false,
      "use-vars" : [ 12 ]
    }, {
      "update-vars" : [ 3 ],
      "successors" : [ 8 ],
      "in-vars" : [ 0, 3, 6, 7 ],
      "exit" : false,
      "out-vars" : [ 6, 0, 3 ],
      "decl-vars" : [ ],
      "line-start" : 825,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 8,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "nw",
            "variable" : 3
          }
        } ],
        "operator" : "-",
        "right" : [ {
          "go-type" : 8,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "anw",
            "variable" : 7
          }
        } ],
        "type" : "assign-operator"
      },
      "assign-vars" : [ 3 ],
      "line-end" : 825,
      "code" : "nw -= anw",
      "entry" : false,
      "use-vars" : [ 7, 3 ]
    } ],
    "code" : "// initSpan initializes the heap bitmap for a span.\n// It clears all checkmark bits.\n// If this is a span of pointer-sized objects, it initializes all\n// words to pointer/scan.\n// Otherwise, it initializes all words to scalar/dead.\nfunc (h heapBits) initSpan(s *mspan) {\n\n\tnw := (s.npages << _PageShift) / sys.PtrSize\n\tif nw%wordsPerBitmapByte != 0 {\n\t\tthrow(\"initSpan: unaligned length\")\n\t}\n\tif h.shift != 0 {\n\t\tthrow(\"initSpan: unaligned base\")\n\t}\n\tisPtrs := sys.PtrSize == 8 && s.elemsize == sys.PtrSize\n\tfor nw > 0 {\n\t\thNext, anw := h.forwardOrBoundary(nw)\n\t\tnbyte := anw / wordsPerBitmapByte\n\t\tif isPtrs {\n\t\t\tbitp := h.bitp\n\t\t\tfor i := uintptr(0); i < nbyte; i++ {\n\t\t\t\t*bitp = bitPointerAll | bitScanAll\n\t\t\t\tbitp = add1(bitp)\n\t\t\t}\n\t\t} else {\n\t\t\tmemclrNoHeapPointers(unsafe.Pointer(h.bitp), nbyte)\n\t\t}\n\t\th = hNext\n\t\tnw -= anw\n\t}\n}",
    "defines" : [ 0 ],
    "functions" : [ {
      "name" : "initSpan",
      "package" : 0,
      "type" : 0,
      "exported" : false
    }, {
      "name" : "throw",
      "package" : 0,
      "type" : 29,
      "exported" : false
    }, {
      "name" : "forwardOrBoundary",
      "package" : 0,
      "type" : 34,
      "exported" : false
    }, {
      "name" : "add1",
      "package" : 0,
      "type" : 37,
      "exported" : false
    }, {
      "name" : "memclrNoHeapPointers",
      "package" : 0,
      "type" : 40,
      "exported" : false
    } ],
    "line-end" : 827,
    "line-start" : 802,
    "names" : [ "initSpan" ],
    "package" : 0,
    "packages" : [ {
      "name" : "runtime",
      "path" : "runtime"
    }, {
      "name" : "unsafe",
      "path" : "unsafe"
    } ],
    "params" : [ 1 ],
    "receivers" : [ 0 ],
    "results" : [ ],
    "type" : "function",
    "types" : [ {
      "name" : "func(s *runtime.mspan)",
      "params" : 1,
      "recv" : 0,
      "results" : 26,
      "type" : "Signature",
      "underlying" : 0,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "s",
        "type" : 2
      } ],
      "name" : "(s *runtime.mspan)",
      "type" : "Tuple",
      "underlying" : 1
    }, {
      "elem" : 3,
      "name" : "*runtime.mspan",
      "type" : "Pointer",
      "underlying" : 2
    }, {
      "local-name" : "mspan",
      "name" : "runtime.mspan",
      "package" : 0,
      "type" : "Named",
      "underlying" : 4
    }, {
      "fields" : [ {
        "name" : "next",
        "type" : 2
      }, {
        "name" : "prev",
        "type" : 2
      }, {
        "name" : "list",
        "type" : 5
      }, {
        "name" : "startAddr",
        "type" : 8
      }, {
        "name" : "npages",
        "type" : 8
      }, {
        "name" : "manualFreeList",
        "type" : 9
      }, {
        "name" : "freeindex",
        "type" : 8
      }, {
        "name" : "nelems",
        "type" : 8
      }, {
        "name" : "allocCache",
        "type" : 10
      }, {
        "name" : "allocBits",
        "type" : 11
      }, {
        "name" : "gcmarkBits",
        "type" : 11
      }, {
        "name" : "sweepgen",
        "type" : 14
      }, {
        "name" : "divMul",
        "type" : 15
      }, {
        "name" : "baseMask",
        "type" : 15
      }, {
        "name" : "allocCount",
        "type" : 15
      }, {
        "name" : "spanclass",
        "type" : 16
      }, {
        "name" : "state",
        "type" : 17
      }, {
        "name" : "needzero",
        "type" : 13
      }, {
        "name" : "divShift",
        "type" : 13
      }, {
        "name" : "divShift2",
        "type" : 13
      }, {
        "name" : "elemsize",
        "type" : 8
      }, {
        "name" : "limit",
        "type" : 8
      }, {
        "name" : "speciallock",
        "type" : 20
      }, {
        "name" : "specials",
        "type" : 22
      } ],
      "name" : "struct{next *runtime.mspan; prev *runtime.mspan; list *runtime.mSpanList; startAddr uintptr; npages uintptr; manualFreeList runtime.gclinkptr; freeindex uintptr; nelems uintptr; allocCache uint64; allocBits *runtime.gcBits; gcmarkBits *runtime.gcBits; sweepgen uint32; divMul uint16; baseMask uint16; allocCount uint16; spanclass runtime.spanClass; state runtime.mSpanStateBox; needzero uint8; divShift uint8; divShift2 uint8; elemsize uintptr; limit uintptr; speciallock runtime.mutex; specials *runtime.special}",
      "type" : "Struct",
      "underlying" : 4
    }, {
      "elem" : 6,
      "name" : "*runtime.mSpanList",
      "type" : "Pointer",
      "underlying" : 5
    }, {
      "local-name" : "mSpanList",
      "name" : "runtime.mSpanList",
      "package" : 0,
      "type" : "Named",
      "underlying" : 7
    }, {
      "fields" : [ {
        "name" : "first",
        "type" : 2
      }, {
        "name" : "last",
        "type" : 2
      } ],
      "name" : "struct{first *runtime.mspan; last *runtime.mspan}",
      "type" : "Struct",
      "underlying" : 7
    }, {
      "name" : "uintptr",
      "type" : "Basic",
      "underlying" : 8
    }, {
      "local-name" : "gclinkptr",
      "name" : "runtime.gclinkptr",
      "package" : 0,
      "type" : "Named",
      "underlying" : 8
    }, {
      "name" : "uint64",
      "type" : "Basic",
      "underlying" : 10
    }, {
      "elem" : 12,
      "name" : "*runtime.gcBits",
      "type" : "Pointer",
      "underlying" : 11
    }, {
      "local-name" : "gcBits",
      "name" : "runtime.gcBits",
      "package" : 0,
      "type" : "Named",
      "underlying" : 13
    }, {
      "name" : "uint8",
      "type" : "Basic",
      "underlying" : 13
    }, {
      "name" : "uint32",
      "type" : "Basic",
      "underlying" : 14
    }, {
      "name" : "uint16",
      "type" : "Basic",
      "underlying" : 15
    }, {
      "local-name" : "spanClass",
      "name" : "runtime.spanClass",
      "package" : 0,
      "type" : "Named",
      "underlying" : 13
    }, {
      "local-name" : "mSpanStateBox",
      "name" : "runtime.mSpanStateBox",
      "package" : 0,
      "type" : "Named",
      "underlying" : 18
    }, {
      "fields" : [ {
        "name" : "s",
        "type" : 19
      } ],
      "name" : "struct{s runtime.mSpanState}",
      "type" : "Struct",
      "underlying" : 18
    }, {
      "local-name" : "mSpanState",
      "name" : "runtime.mSpanState",
      "package" : 0,
      "type" : "Named",
      "underlying" : 13
    }, {
      "local-name" : "mutex",
      "name" : "runtime.mutex",
      "package" : 0,
      "type" : "Named",
      "underlying" : 21
    }, {
      "fields" : [ {
        "name" : "key",
        "type" : 8
      } ],
      "name" : "struct{key uintptr}",
      "type" : "Struct",
      "underlying" : 21
    }, {
      "elem" : 23,
      "name" : "*runtime.special",
      "type" : "Pointer",
      "underlying" : 22
    }, {
      "local-name" : "special",
      "name" : "runtime.special",
      "package" : 0,
      "type" : "Named",
      "underlying" : 24
    }, {
      "fields" : [ {
        "name" : "next",
        "type" : 22
      }, {
        "name" : "offset",
        "type" : 15
      }, {
        "name" : "kind",
        "type" : 25
      } ],
      "name" : "struct{next *runtime.special; offset uint16; kind byte}",
      "type" : "Struct",
      "underlying" : 24
    }, {
      "name" : "byte",
      "type" : "Basic",
      "underlying" : 25
    }, {
      "fields" : [ ],
      "name" : "()",
      "type" : "Tuple",
      "underlying" : 26
    }, {
      "name" : "untyped int",
      "type" : "Basic",
      "underlying" : 27
    }, {
      "name" : "untyped bool",
      "type" : "Basic",
      "underlying" : 28
    }, {
      "name" : "func(s string)",
      "params" : 30,
      "recv" : -1,
      "results" : 26,
      "type" : "Signature",
      "underlying" : 29,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "s",
        "type" : 31
      } ],
      "name" : "(s string)",
      "type" : "Tuple",
      "underlying" : 30
    }, {
      "name" : "string",
      "type" : "Basic",
      "underlying" : 31
    }, {
      "name" : "bool",
      "type" : "Basic",
      "underlying" : 32
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 0
      }, {
        "name" : "",
        "type" : 8
      } ],
      "name" : "(runtime.heapBits, uintptr)",
      "type" : "Tuple",
      "underlying" : 33
    }, {
      "name" : "func(n uintptr) (runtime.heapBits, uintptr)",
      "params" : 35,
      "recv" : -1,
      "results" : 33,
      "type" : "Signature",
      "underlying" : 34,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "n",
        "type" : 8
      } ],
      "name" : "(n uintptr)",
      "type" : "Tuple",
      "underlying" : 35
    }, {
      "elem" : 25,
      "name" : "*byte",
      "type" : "Pointer",
      "underlying" : 36
    }, {
      "name" : "func(p *byte) *byte",
      "params" : 38,
      "recv" : -1,
      "results" : 39,
      "type" : "Signature",
      "underlying" : 37,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "p",
        "type" : 36
      } ],
      "name" : "(p *byte)",
      "type" : "Tuple",
      "underlying" : 38
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 36
      } ],
      "name" : "(*byte)",
      "type" : "Tuple",
      "underlying" : 39
    }, {
      "name" : "func(ptr unsafe.Pointer, n uintptr)",
      "params" : 41,
      "recv" : -1,
      "results" : 26,
      "type" : "Signature",
      "underlying" : 40,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "ptr",
        "type" : 42
      }, {
        "name" : "n",
        "type" : 8
      } ],
      "name" : "(ptr unsafe.Pointer, n uintptr)",
      "type" : "Tuple",
      "underlying" : 41
    }, {
      "local-name" : "Pointer",
      "name" : "unsafe.Pointer",
      "package" : 1,
      "type" : "Basic",
      "underlying" : 42
    } ],
    "variables" : [ {
      "name" : "h",
      "package" : 0,
      "type" : 0,
      "exported" : false
    }, {
      "name" : "s",
      "package" : 0,
      "type" : 2,
      "exported" : false
    }, {
      "name" : "npages",
      "package" : 0,
      "type" : 8,
      "exported" : false
    }, {
      "name" : "nw",
      "package" : 0,
      "type" : 8,
      "exported" : false
    }, {
      "name" : "shift",
      "package" : 0,
      "type" : 14,
      "exported" : false
    }, {
      "name" : "elemsize",
      "package" : 0,
      "type" : 8,
      "exported" : false
    }, {
      "name" : "isPtrs",
      "package" : 0,
      "type" : 32,
      "exported" : false
    }, {
      "name" : "anw",
      "package" : 0,
      "type" : 8,
      "exported" : false
    }, {
      "name" : "bitp",
      "package" : 0,
      "type" : 2,
      "exported" : false
    }, {
      "name" : "i",
      "package" : 0,
      "type" : 8,
      "exported" : false
    }, {
      "name" : "nbyte",
      "package" : 0,
      "type" : 8,
      "exported" : false
    }, {
      "name" : "bitp",
      "package" : 0,
      "type" : 2,
      "exported" : false
    }, {
      "name" : "hNext",
      "package" : 0,
      "type" : 0,
      "exported" : false
    } ]
  },
  "go-version" : "1.14.3"
}