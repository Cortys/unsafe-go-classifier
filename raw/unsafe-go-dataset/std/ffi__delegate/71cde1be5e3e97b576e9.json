{
  "usage" : {
    "file" : "os_linux.go",
    "label1" : "delegate",
    "label2" : "ffi",
    "line" : "167",
    "module" : "std",
    "pkg" : "runtime",
    "project" : "kubernetes/kubernetes",
    "snippet" : "func newosproc0(stacksize uintptr, fn unsafe.Pointer) {",
    "version" : "std"
  },
  "cfg" : {
    "blocks" : [ {
      "update-vars" : [ ],
      "successors" : [ 2 ],
      "in-vars" : [ 2, 3, 1, 0, 4 ],
      "exit" : false,
      "out-vars" : [ 1, 0, 4, 2, 3 ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[entry]",
      "entry" : true,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ ],
      "in-vars" : [ ],
      "exit" : true,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[exit]",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 3 ],
      "in-vars" : [ 2, 3, 1, 0, 4 ],
      "exit" : false,
      "out-vars" : [ 6, 0, 2, 3, 1 ],
      "decl-vars" : [ 6 ],
      "line-start" : 168,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "stack"
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "stacksize",
              "variable" : 0
            }
          }, {
            "go-type" : 18,
            "kind" : "expression",
            "operator" : "&",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "stacks_sys",
                "variable" : 5
              },
              "go-type" : 9,
              "kind" : "expression",
              "target" : {
                "go-type" : 7,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "memstats",
                  "variable" : 4
                }
              },
              "type" : "selector"
            },
            "type" : "unary"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 16,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "sysAlloc"
            }
          },
          "go-type" : 3,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 168,
      "code" : "stack := sysAlloc(stacksize, &memstats.stacks_sys)",
      "entry" : false,
      "use-vars" : [ 0, 4 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 4, 6 ],
      "in-vars" : [ 3, 1, 6, 0, 2 ],
      "exit" : false,
      "out-vars" : [ 6, 0, 2, 3, 1 ],
      "decl-vars" : [ ],
      "line-start" : 169,
      "ast" : {
        "condition" : {
          "go-type" : 20,
          "kind" : "expression",
          "left" : {
            "go-type" : 3,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "stack",
              "variable" : 6
            }
          },
          "operator" : "==",
          "right" : {
            "go-type" : 3,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Nil",
              "kind" : "ident",
              "value" : "nil"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 172,
      "code" : "if stack == nil {\n\twrite(2, unsafe.Pointer(&failallocatestack[0]), int32(len(failallocatestack)))\n\texit(1)\n}",
      "entry" : false,
      "use-vars" : [ 6 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 5 ],
      "in-vars" : [ 0, 2, 3, 1, 6 ],
      "exit" : false,
      "out-vars" : [ 6, 0, 2, 1 ],
      "decl-vars" : [ ],
      "line-start" : 170,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 2,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "2"
            }
          }, {
            "coerced-to" : {
              "go-type" : 3,
              "kind" : "type",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 1,
                "value" : "unsafe"
              },
              "type" : "identifier",
              "value" : {
                "go-type" : 3,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "Pointer"
              }
            },
            "go-type" : 3,
            "kind" : "expression",
            "target" : {
              "go-type" : 25,
              "kind" : "expression",
              "operator" : "&",
              "target" : {
                "go-type" : 6,
                "index" : {
                  "go-type" : 26,
                  "kind" : "constant",
                  "value" : {
                    "type" : "INT",
                    "value" : "0"
                  }
                },
                "kind" : "expression",
                "target" : {
                  "go-type" : 5,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "failallocatestack",
                    "variable" : 3
                  }
                },
                "type" : "index"
              },
              "type" : "unary"
            },
            "type" : "cast"
          }, {
            "coerced-to" : {
              "go-type" : 21,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 21,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "int32"
              }
            },
            "go-type" : 21,
            "kind" : "expression",
            "target" : {
              "arguments" : [ {
                "go-type" : 5,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "failallocatestack",
                  "variable" : 3
                }
              } ],
              "ellipsis" : false,
              "function" : {
                "go-type" : 27,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Builtin",
                  "kind" : "ident",
                  "value" : "len"
                }
              },
              "go-type" : 26,
              "kind" : "expression",
              "type" : "call"
            },
            "type" : "cast"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 22,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "write"
            }
          },
          "go-type" : 21,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 170,
      "code" : "write(2, unsafe.Pointer(&failallocatestack[0]), int32(len(failallocatestack)))",
      "entry" : false,
      "use-vars" : [ 3 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 6 ],
      "in-vars" : [ 6, 0, 2, 1 ],
      "exit" : false,
      "out-vars" : [ 0, 2, 1, 6 ],
      "decl-vars" : [ ],
      "line-start" : 171,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 21,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "1"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 30,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "exit"
            }
          },
          "go-type" : 4,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 171,
      "code" : "exit(1)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 7 ],
      "in-vars" : [ 6, 0, 2, 1 ],
      "exit" : false,
      "out-vars" : [ 2, 7 ],
      "decl-vars" : [ 7 ],
      "line-start" : 173,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "ret"
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 21,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "331520"
            }
          }, {
            "coerced-to" : {
              "go-type" : 3,
              "kind" : "type",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 1,
                "value" : "unsafe"
              },
              "type" : "identifier",
              "value" : {
                "go-type" : 3,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "Pointer"
              }
            },
            "go-type" : 3,
            "kind" : "expression",
            "target" : {
              "go-type" : 2,
              "kind" : "expression",
              "left" : {
                "coerced-to" : {
                  "go-type" : 2,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 2,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "uintptr"
                  }
                },
                "go-type" : 2,
                "kind" : "expression",
                "target" : {
                  "go-type" : 3,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "stack",
                    "variable" : 6
                  }
                },
                "type" : "cast"
              },
              "operator" : "+",
              "right" : {
                "go-type" : 2,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "stacksize",
                  "variable" : 0
                }
              },
              "type" : "binary"
            },
            "type" : "cast"
          }, {
            "go-type" : 3,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Nil",
              "kind" : "ident",
              "value" : "nil"
            }
          }, {
            "go-type" : 3,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Nil",
              "kind" : "ident",
              "value" : "nil"
            }
          }, {
            "go-type" : 3,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "fn",
              "variable" : 1
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 32,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "clone"
            }
          },
          "go-type" : 21,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 173,
      "code" : "ret := clone(cloneFlags, unsafe.Pointer(uintptr(stack)+stacksize), nil, nil, fn)",
      "entry" : false,
      "use-vars" : [ 0, 6, 1 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1, 8 ],
      "in-vars" : [ 2, 7 ],
      "exit" : false,
      "out-vars" : [ 2 ],
      "decl-vars" : [ ],
      "line-start" : 174,
      "ast" : {
        "condition" : {
          "go-type" : 20,
          "kind" : "expression",
          "left" : {
            "go-type" : 21,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "ret",
              "variable" : 7
            }
          },
          "operator" : "<",
          "right" : {
            "go-type" : 21,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 177,
      "code" : "if ret < 0 {\n\twrite(2, unsafe.Pointer(&failthreadcreate[0]), int32(len(failthreadcreate)))\n\texit(1)\n}",
      "entry" : false,
      "use-vars" : [ 7 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 9 ],
      "in-vars" : [ 2 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 175,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 2,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "2"
            }
          }, {
            "coerced-to" : {
              "go-type" : 3,
              "kind" : "type",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 1,
                "value" : "unsafe"
              },
              "type" : "identifier",
              "value" : {
                "go-type" : 3,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "Pointer"
              }
            },
            "go-type" : 3,
            "kind" : "expression",
            "target" : {
              "go-type" : 25,
              "kind" : "expression",
              "operator" : "&",
              "target" : {
                "go-type" : 6,
                "index" : {
                  "go-type" : 26,
                  "kind" : "constant",
                  "value" : {
                    "type" : "INT",
                    "value" : "0"
                  }
                },
                "kind" : "expression",
                "target" : {
                  "go-type" : 5,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "failthreadcreate",
                    "variable" : 2
                  }
                },
                "type" : "index"
              },
              "type" : "unary"
            },
            "type" : "cast"
          }, {
            "coerced-to" : {
              "go-type" : 21,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 21,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "int32"
              }
            },
            "go-type" : 21,
            "kind" : "expression",
            "target" : {
              "arguments" : [ {
                "go-type" : 5,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "failthreadcreate",
                  "variable" : 2
                }
              } ],
              "ellipsis" : false,
              "function" : {
                "go-type" : 27,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Builtin",
                  "kind" : "ident",
                  "value" : "len"
                }
              },
              "go-type" : 26,
              "kind" : "expression",
              "type" : "call"
            },
            "type" : "cast"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 22,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "write"
            }
          },
          "go-type" : 21,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 175,
      "code" : "write(2, unsafe.Pointer(&failthreadcreate[0]), int32(len(failthreadcreate)))",
      "entry" : false,
      "use-vars" : [ 2 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 176,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 21,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "1"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 30,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "exit"
            }
          },
          "go-type" : 4,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 176,
      "code" : "exit(1)",
      "entry" : false,
      "use-vars" : [ ]
    } ],
    "code" : "// Version of newosproc that doesn't require a valid G.\n//go:nosplit\nfunc newosproc0(stacksize uintptr, fn unsafe.Pointer) {\n\tstack := sysAlloc(stacksize, &memstats.stacks_sys)\n\tif stack == nil {\n\t\twrite(2, unsafe.Pointer(&failallocatestack[0]), int32(len(failallocatestack)))\n\t\texit(1)\n\t}\n\tret := clone(cloneFlags, unsafe.Pointer(uintptr(stack)+stacksize), nil, nil, fn)\n\tif ret < 0 {\n\t\twrite(2, unsafe.Pointer(&failthreadcreate[0]), int32(len(failthreadcreate)))\n\t\texit(1)\n\t}\n}",
    "defines" : [ 0 ],
    "functions" : [ {
      "name" : "newosproc0",
      "package" : 0,
      "type" : 0,
      "exported" : false
    }, {
      "name" : "sysAlloc",
      "package" : 0,
      "type" : 16,
      "exported" : false
    }, {
      "name" : "write",
      "package" : 0,
      "type" : 22,
      "exported" : false
    }, {
      "name" : "exit",
      "package" : 0,
      "type" : 30,
      "exported" : false
    }, {
      "name" : "clone",
      "package" : 0,
      "type" : 32,
      "exported" : false
    } ],
    "line-end" : 178,
    "line-start" : 167,
    "names" : [ "newosproc0" ],
    "package" : 0,
    "packages" : [ {
      "name" : "runtime",
      "path" : "runtime"
    }, {
      "name" : "unsafe",
      "path" : "unsafe"
    } ],
    "params" : [ 0, 1 ],
    "receivers" : [ ],
    "results" : [ ],
    "type" : "function",
    "types" : [ {
      "name" : "func(stacksize uintptr, fn unsafe.Pointer)",
      "params" : 1,
      "recv" : -1,
      "results" : 4,
      "type" : "Signature",
      "underlying" : 0,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "stacksize",
        "type" : 2
      }, {
        "name" : "fn",
        "type" : 3
      } ],
      "name" : "(stacksize uintptr, fn unsafe.Pointer)",
      "type" : "Tuple",
      "underlying" : 1
    }, {
      "name" : "uintptr",
      "type" : "Basic",
      "underlying" : 2
    }, {
      "local-name" : "Pointer",
      "name" : "unsafe.Pointer",
      "package" : 1,
      "type" : "Basic",
      "underlying" : 3
    }, {
      "fields" : [ ],
      "name" : "()",
      "type" : "Tuple",
      "underlying" : 4
    }, {
      "elem" : 6,
      "name" : "[]byte",
      "type" : "Slice",
      "underlying" : 5
    }, {
      "name" : "byte",
      "type" : "Basic",
      "underlying" : 6
    }, {
      "local-name" : "mstats",
      "name" : "runtime.mstats",
      "package" : 0,
      "type" : "Named",
      "underlying" : 8
    }, {
      "fields" : [ {
        "name" : "alloc",
        "type" : 9
      }, {
        "name" : "total_alloc",
        "type" : 9
      }, {
        "name" : "sys",
        "type" : 9
      }, {
        "name" : "nlookup",
        "type" : 9
      }, {
        "name" : "nmalloc",
        "type" : 9
      }, {
        "name" : "nfree",
        "type" : 9
      }, {
        "name" : "heap_alloc",
        "type" : 9
      }, {
        "name" : "heap_sys",
        "type" : 9
      }, {
        "name" : "heap_idle",
        "type" : 9
      }, {
        "name" : "heap_inuse",
        "type" : 9
      }, {
        "name" : "heap_released",
        "type" : 9
      }, {
        "name" : "heap_objects",
        "type" : 9
      }, {
        "name" : "stacks_inuse",
        "type" : 9
      }, {
        "name" : "stacks_sys",
        "type" : 9
      }, {
        "name" : "mspan_inuse",
        "type" : 9
      }, {
        "name" : "mspan_sys",
        "type" : 9
      }, {
        "name" : "mcache_inuse",
        "type" : 9
      }, {
        "name" : "mcache_sys",
        "type" : 9
      }, {
        "name" : "buckhash_sys",
        "type" : 9
      }, {
        "name" : "gc_sys",
        "type" : 9
      }, {
        "name" : "other_sys",
        "type" : 9
      }, {
        "name" : "next_gc",
        "type" : 9
      }, {
        "name" : "last_gc_unix",
        "type" : 9
      }, {
        "name" : "pause_total_ns",
        "type" : 9
      }, {
        "name" : "pause_ns",
        "type" : 10
      }, {
        "name" : "pause_end",
        "type" : 10
      }, {
        "name" : "numgc",
        "type" : 11
      }, {
        "name" : "numforcedgc",
        "type" : 11
      }, {
        "name" : "gc_cpu_fraction",
        "type" : 12
      }, {
        "name" : "enablegc",
        "type" : 13
      }, {
        "name" : "debuggc",
        "type" : 13
      }, {
        "name" : "by_size",
        "type" : 14
      }, {
        "name" : "last_gc_nanotime",
        "type" : 9
      }, {
        "name" : "tinyallocs",
        "type" : 9
      }, {
        "name" : "last_next_gc",
        "type" : 9
      }, {
        "name" : "last_heap_inuse",
        "type" : 9
      }, {
        "name" : "triggerRatio",
        "type" : 12
      }, {
        "name" : "gc_trigger",
        "type" : 9
      }, {
        "name" : "heap_live",
        "type" : 9
      }, {
        "name" : "heap_scan",
        "type" : 9
      }, {
        "name" : "heap_marked",
        "type" : 9
      } ],
      "name" : "struct{alloc uint64; total_alloc uint64; sys uint64; nlookup uint64; nmalloc uint64; nfree uint64; heap_alloc uint64; heap_sys uint64; heap_idle uint64; heap_inuse uint64; heap_released uint64; heap_objects uint64; stacks_inuse uint64; stacks_sys uint64; mspan_inuse uint64; mspan_sys uint64; mcache_inuse uint64; mcache_sys uint64; buckhash_sys uint64; gc_sys uint64; other_sys uint64; next_gc uint64; last_gc_unix uint64; pause_total_ns uint64; pause_ns [256]uint64; pause_end [256]uint64; numgc uint32; numforcedgc uint32; gc_cpu_fraction float64; enablegc bool; debuggc bool; by_size [67]struct{size uint32; nmalloc uint64; nfree uint64}; last_gc_nanotime uint64; tinyallocs uint64; last_next_gc uint64; last_heap_inuse uint64; triggerRatio float64; gc_trigger uint64; heap_live uint64; heap_scan uint64; heap_marked uint64}",
      "type" : "Struct",
      "underlying" : 8
    }, {
      "name" : "uint64",
      "type" : "Basic",
      "underlying" : 9
    }, {
      "elem" : 9,
      "name" : "[256]uint64",
      "type" : "Array",
      "underlying" : 10
    }, {
      "name" : "uint32",
      "type" : "Basic",
      "underlying" : 11
    }, {
      "name" : "float64",
      "type" : "Basic",
      "underlying" : 12
    }, {
      "name" : "bool",
      "type" : "Basic",
      "underlying" : 13
    }, {
      "elem" : 15,
      "name" : "[67]struct{size uint32; nmalloc uint64; nfree uint64}",
      "type" : "Array",
      "underlying" : 14
    }, {
      "fields" : [ {
        "name" : "size",
        "type" : 11
      }, {
        "name" : "nmalloc",
        "type" : 9
      }, {
        "name" : "nfree",
        "type" : 9
      } ],
      "name" : "struct{size uint32; nmalloc uint64; nfree uint64}",
      "type" : "Struct",
      "underlying" : 15
    }, {
      "name" : "func(n uintptr, sysStat *uint64) unsafe.Pointer",
      "params" : 17,
      "recv" : -1,
      "results" : 19,
      "type" : "Signature",
      "underlying" : 16,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "n",
        "type" : 2
      }, {
        "name" : "sysStat",
        "type" : 18
      } ],
      "name" : "(n uintptr, sysStat *uint64)",
      "type" : "Tuple",
      "underlying" : 17
    }, {
      "elem" : 9,
      "name" : "*uint64",
      "type" : "Pointer",
      "underlying" : 18
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 3
      } ],
      "name" : "(unsafe.Pointer)",
      "type" : "Tuple",
      "underlying" : 19
    }, {
      "name" : "untyped bool",
      "type" : "Basic",
      "underlying" : 20
    }, {
      "name" : "int32",
      "type" : "Basic",
      "underlying" : 21
    }, {
      "name" : "func(fd uintptr, p unsafe.Pointer, n int32) int32",
      "params" : 23,
      "recv" : -1,
      "results" : 24,
      "type" : "Signature",
      "underlying" : 22,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "fd",
        "type" : 2
      }, {
        "name" : "p",
        "type" : 3
      }, {
        "name" : "n",
        "type" : 21
      } ],
      "name" : "(fd uintptr, p unsafe.Pointer, n int32)",
      "type" : "Tuple",
      "underlying" : 23
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 21
      } ],
      "name" : "(int32)",
      "type" : "Tuple",
      "underlying" : 24
    }, {
      "elem" : 6,
      "name" : "*byte",
      "type" : "Pointer",
      "underlying" : 25
    }, {
      "name" : "int",
      "type" : "Basic",
      "underlying" : 26
    }, {
      "name" : "func([]byte) int",
      "params" : 28,
      "recv" : -1,
      "results" : 29,
      "type" : "Signature",
      "underlying" : 27,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 5
      } ],
      "name" : "([]byte)",
      "type" : "Tuple",
      "underlying" : 28
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 26
      } ],
      "name" : "(int)",
      "type" : "Tuple",
      "underlying" : 29
    }, {
      "name" : "func(code int32)",
      "params" : 31,
      "recv" : -1,
      "results" : 4,
      "type" : "Signature",
      "underlying" : 30,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "code",
        "type" : 21
      } ],
      "name" : "(code int32)",
      "type" : "Tuple",
      "underlying" : 31
    }, {
      "name" : "func(flags int32, stk unsafe.Pointer, mp unsafe.Pointer, gp unsafe.Pointer, fn unsafe.Pointer) int32",
      "params" : 33,
      "recv" : -1,
      "results" : 24,
      "type" : "Signature",
      "underlying" : 32,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "flags",
        "type" : 21
      }, {
        "name" : "stk",
        "type" : 3
      }, {
        "name" : "mp",
        "type" : 3
      }, {
        "name" : "gp",
        "type" : 3
      }, {
        "name" : "fn",
        "type" : 3
      } ],
      "name" : "(flags int32, stk unsafe.Pointer, mp unsafe.Pointer, gp unsafe.Pointer, fn unsafe.Pointer)",
      "type" : "Tuple",
      "underlying" : 33
    } ],
    "variables" : [ {
      "name" : "stacksize",
      "package" : 0,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "fn",
      "package" : 0,
      "type" : 3,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "failthreadcreate",
      "package" : 0,
      "type" : 5,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "failallocatestack",
      "package" : 0,
      "type" : 5,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "memstats",
      "package" : 0,
      "type" : 7,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "stacks_sys",
      "package" : 0,
      "type" : 9,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "stack",
      "package" : 0,
      "type" : 3,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "ret",
      "package" : 0,
      "type" : 21,
      "exported" : false,
      "embedded" : false,
      "field" : false
    } ]
  },
  "go-version" : "1.14.3"
}