{
  "usage" : {
    "file" : "rwmutex.go",
    "label1" : "delegate",
    "label2" : "ffi",
    "line" : "65",
    "module" : "std",
    "pkg" : "sync",
    "project" : "kubernetes/kubernetes",
    "snippet" : "race.ReleaseMerge(unsafe.Pointer(&rw.writerSem))",
    "version" : "std"
  },
  "cfg" : {
    "blocks" : [ {
      "update-vars" : [ ],
      "successors" : [ 2 ],
      "in-vars" : [ 0 ],
      "exit" : false,
      "out-vars" : [ 0 ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[entry]",
      "entry" : true,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ ],
      "in-vars" : [ ],
      "exit" : true,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[exit]",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 3, 7 ],
      "in-vars" : [ 0 ],
      "exit" : false,
      "out-vars" : [ 0 ],
      "decl-vars" : [ ],
      "line-start" : 63,
      "ast" : {
        "condition" : {
          "go-type" : 9,
          "kind" : "constant",
          "value" : {
            "type" : "BOOL",
            "value" : "false"
          }
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 67,
      "code" : "if race.Enabled {\n\t_ = rw.w.state\n\trace.ReleaseMerge(unsafe.Pointer(&rw.writerSem))\n\trace.Disable()\n}",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 4 ],
      "in-vars" : [ 0 ],
      "exit" : false,
      "out-vars" : [ 0 ],
      "decl-vars" : [ ],
      "line-start" : 64,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "_"
          }
        } ],
        "right" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "state",
            "variable" : 2
          },
          "go-type" : 7,
          "kind" : "expression",
          "target" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "w",
              "variable" : 1
            },
            "go-type" : 5,
            "kind" : "expression",
            "target" : {
              "go-type" : 2,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "rw",
                "variable" : 0
              }
            },
            "type" : "selector"
          },
          "type" : "selector"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 64,
      "code" : "_ = rw.w.state",
      "entry" : false,
      "use-vars" : [ 0 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 5 ],
      "in-vars" : [ 0 ],
      "exit" : false,
      "out-vars" : [ 0 ],
      "decl-vars" : [ ],
      "line-start" : 65,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "coerced-to" : {
              "go-type" : 12,
              "kind" : "type",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 1,
                "value" : "unsafe"
              },
              "type" : "identifier",
              "value" : {
                "go-type" : 12,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "Pointer"
              }
            },
            "go-type" : 12,
            "kind" : "expression",
            "target" : {
              "go-type" : 13,
              "kind" : "expression",
              "operator" : "&",
              "target" : {
                "field" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "writerSem",
                  "variable" : 3
                },
                "go-type" : 8,
                "kind" : "expression",
                "target" : {
                  "go-type" : 2,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "rw",
                    "variable" : 0
                  }
                },
                "type" : "selector"
              },
              "type" : "unary"
            },
            "type" : "cast"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 10,
            "kind" : "expression",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 2,
              "value" : "race"
            },
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "ReleaseMerge"
            }
          },
          "go-type" : 1,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 65,
      "code" : "race.ReleaseMerge(unsafe.Pointer(&rw.writerSem))",
      "entry" : false,
      "use-vars" : [ 0 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 7 ],
      "in-vars" : [ 0 ],
      "exit" : false,
      "out-vars" : [ 0 ],
      "decl-vars" : [ ],
      "line-start" : 66,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 0,
            "kind" : "expression",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 2,
              "value" : "race"
            },
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "Disable"
            }
          },
          "go-type" : 1,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 66,
      "code" : "race.Disable()",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 8, 9 ],
      "in-vars" : [ 0, 5 ],
      "exit" : false,
      "out-vars" : [ 0, 5 ],
      "decl-vars" : [ ],
      "line-start" : 68,
      "ast" : {
        "condition" : {
          "go-type" : 9,
          "kind" : "expression",
          "left" : {
            "go-type" : 7,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "r",
              "variable" : 5
            }
          },
          "operator" : "<",
          "right" : {
            "go-type" : 7,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 71,
      "code" : "if r := atomic.AddInt32(&rw.readerCount, -1); r < 0 {\n\n\trw.rUnlockSlow(r)\n}",
      "entry" : false,
      "use-vars" : [ 5 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 6 ],
      "in-vars" : [ 0 ],
      "exit" : false,
      "out-vars" : [ 5, 0 ],
      "decl-vars" : [ 5 ],
      "line-start" : 68,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "r"
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 16,
            "kind" : "expression",
            "operator" : "&",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "readerCount",
                "variable" : 4
              },
              "go-type" : 7,
              "kind" : "expression",
              "target" : {
                "go-type" : 2,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "rw",
                  "variable" : 0
                }
              },
              "type" : "selector"
            },
            "type" : "unary"
          }, {
            "go-type" : 7,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "-1"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 14,
            "kind" : "expression",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 3,
              "value" : "atomic"
            },
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "AddInt32"
            }
          },
          "go-type" : 7,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 68,
      "code" : "r := atomic.AddInt32(&rw.readerCount, -1)",
      "entry" : false,
      "use-vars" : [ 0 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 9 ],
      "in-vars" : [ 0, 5 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 70,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 7,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "r",
              "variable" : 5
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "rUnlockSlow"
            },
            "go-type" : 18,
            "kind" : "expression",
            "target" : {
              "go-type" : 2,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "rw",
                "variable" : 0
              }
            },
            "type" : "selector"
          },
          "go-type" : 1,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 70,
      "code" : "rw.rUnlockSlow(r)",
      "entry" : false,
      "use-vars" : [ 0, 5 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1, 10 ],
      "in-vars" : [ ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 72,
      "ast" : {
        "condition" : {
          "go-type" : 9,
          "kind" : "constant",
          "value" : {
            "type" : "BOOL",
            "value" : "false"
          }
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 74,
      "code" : "if race.Enabled {\n\trace.Enable()\n}",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 73,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 0,
            "kind" : "expression",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 2,
              "value" : "race"
            },
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "Enable"
            }
          },
          "go-type" : 1,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 73,
      "code" : "race.Enable()",
      "entry" : false,
      "use-vars" : [ ]
    } ],
    "code" : "// RUnlock undoes a single RLock call;\n// it does not affect other simultaneous readers.\n// It is a run-time error if rw is not locked for reading\n// on entry to RUnlock.\nfunc (rw *RWMutex) RUnlock() {\n\tif race.Enabled {\n\t\t_ = rw.w.state\n\t\trace.ReleaseMerge(unsafe.Pointer(&rw.writerSem))\n\t\trace.Disable()\n\t}\n\tif r := atomic.AddInt32(&rw.readerCount, -1); r < 0 {\n\n\t\trw.rUnlockSlow(r)\n\t}\n\tif race.Enabled {\n\t\trace.Enable()\n\t}\n}",
    "defines" : [ 0 ],
    "functions" : [ {
      "name" : "RUnlock",
      "package" : 0,
      "type" : 0,
      "exported" : true
    }, {
      "name" : "ReleaseMerge",
      "package" : 2,
      "type" : 10,
      "exported" : true
    }, {
      "name" : "Disable",
      "package" : 2,
      "type" : 0,
      "exported" : true
    }, {
      "name" : "AddInt32",
      "package" : 3,
      "type" : 14,
      "exported" : true
    }, {
      "name" : "rUnlockSlow",
      "package" : 0,
      "type" : 18,
      "exported" : false
    }, {
      "name" : "Enable",
      "package" : 2,
      "type" : 0,
      "exported" : true
    } ],
    "line-end" : 75,
    "line-start" : 62,
    "names" : [ "RUnlock" ],
    "package" : 0,
    "packages" : [ {
      "name" : "sync",
      "path" : "sync"
    }, {
      "name" : "unsafe",
      "path" : "unsafe"
    }, {
      "name" : "race",
      "path" : "internal/race"
    }, {
      "name" : "atomic",
      "path" : "sync/atomic"
    } ],
    "params" : [ ],
    "receivers" : [ 0 ],
    "results" : [ ],
    "type" : "function",
    "types" : [ {
      "name" : "func()",
      "params" : 1,
      "recv" : 0,
      "results" : 1,
      "type" : "Signature",
      "underlying" : 0,
      "variadic" : false
    }, {
      "fields" : [ ],
      "name" : "()",
      "type" : "Tuple",
      "underlying" : 1
    }, {
      "elem" : 3,
      "name" : "*sync.RWMutex",
      "type" : "Pointer",
      "underlying" : 2
    }, {
      "local-name" : "RWMutex",
      "name" : "sync.RWMutex",
      "package" : 0,
      "type" : "Named",
      "underlying" : 4
    }, {
      "fields" : [ {
        "name" : "w",
        "type" : 5
      }, {
        "name" : "writerSem",
        "type" : 8
      }, {
        "name" : "readerSem",
        "type" : 8
      }, {
        "name" : "readerCount",
        "type" : 7
      }, {
        "name" : "readerWait",
        "type" : 7
      } ],
      "name" : "struct{w sync.Mutex; writerSem uint32; readerSem uint32; readerCount int32; readerWait int32}",
      "type" : "Struct",
      "underlying" : 4
    }, {
      "local-name" : "Mutex",
      "name" : "sync.Mutex",
      "package" : 0,
      "type" : "Named",
      "underlying" : 6
    }, {
      "fields" : [ {
        "name" : "state",
        "type" : 7
      }, {
        "name" : "sema",
        "type" : 8
      } ],
      "name" : "struct{state int32; sema uint32}",
      "type" : "Struct",
      "underlying" : 6
    }, {
      "name" : "int32",
      "type" : "Basic",
      "underlying" : 7
    }, {
      "name" : "uint32",
      "type" : "Basic",
      "underlying" : 8
    }, {
      "name" : "untyped bool",
      "type" : "Basic",
      "underlying" : 9
    }, {
      "name" : "func(addr unsafe.Pointer)",
      "params" : 11,
      "recv" : -1,
      "results" : 1,
      "type" : "Signature",
      "underlying" : 10,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "addr",
        "type" : 12
      } ],
      "name" : "(addr unsafe.Pointer)",
      "type" : "Tuple",
      "underlying" : 11
    }, {
      "local-name" : "Pointer",
      "name" : "unsafe.Pointer",
      "package" : 1,
      "type" : "Basic",
      "underlying" : 12
    }, {
      "elem" : 8,
      "name" : "*uint32",
      "type" : "Pointer",
      "underlying" : 13
    }, {
      "name" : "func(addr *int32, delta int32) (new int32)",
      "params" : 15,
      "recv" : -1,
      "results" : 17,
      "type" : "Signature",
      "underlying" : 14,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "addr",
        "type" : 16
      }, {
        "name" : "delta",
        "type" : 7
      } ],
      "name" : "(addr *int32, delta int32)",
      "type" : "Tuple",
      "underlying" : 15
    }, {
      "elem" : 7,
      "name" : "*int32",
      "type" : "Pointer",
      "underlying" : 16
    }, {
      "fields" : [ {
        "name" : "new",
        "type" : 7
      } ],
      "name" : "(new int32)",
      "type" : "Tuple",
      "underlying" : 17
    }, {
      "name" : "func(r int32)",
      "params" : 19,
      "recv" : -1,
      "results" : 1,
      "type" : "Signature",
      "underlying" : 18,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "r",
        "type" : 7
      } ],
      "name" : "(r int32)",
      "type" : "Tuple",
      "underlying" : 19
    } ],
    "variables" : [ {
      "name" : "rw",
      "package" : 0,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "w",
      "package" : 0,
      "type" : 5,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "state",
      "package" : 0,
      "type" : 7,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "writerSem",
      "package" : 0,
      "type" : 8,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "readerCount",
      "package" : 0,
      "type" : 7,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "r",
      "package" : 0,
      "type" : 7,
      "exported" : false,
      "embedded" : false,
      "field" : false
    } ]
  },
  "go-version" : "1.14.3"
}