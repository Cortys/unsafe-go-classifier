{
  "usage" : {
    "file" : "mgcsweep.go",
    "label1" : "delegate",
    "label2" : "ffi",
    "line" : "308",
    "module" : "std",
    "pkg" : "runtime",
    "project" : "kubernetes/kubernetes",
    "snippet" : "racefree(unsafe.Pointer(x), size)",
    "version" : "std"
  },
  "cfg" : {
    "blocks" : [ {
      "update-vars" : [ ],
      "successors" : [ 2 ],
      "in-vars" : [ 3, 4, 1, 0, 5 ],
      "exit" : false,
      "out-vars" : [ 4, 1, 0, 5, 3 ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[entry]",
      "entry" : true,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ ],
      "in-vars" : [ ],
      "exit" : true,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[exit]",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 3 ],
      "in-vars" : [ 0, 5, 3, 4, 1 ],
      "exit" : false,
      "out-vars" : [ 5, 3, 4, 1, 0, 6 ],
      "decl-vars" : [ 6 ],
      "line-start" : 209,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "_g_"
          }
        } ],
        "right" : [ {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 190,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 1,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "getg"
            }
          },
          "go-type" : 29,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 209,
      "code" : "_g_ := getg()",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 4, 5 ],
      "in-vars" : [ 0, 6, 5, 3, 4, 1 ],
      "exit" : false,
      "out-vars" : [ 0, 6, 5, 3, 4, 1 ],
      "decl-vars" : [ ],
      "line-start" : 210,
      "ast" : {
        "condition" : {
          "go-type" : 192,
          "kind" : "expression",
          "left" : {
            "go-type" : 192,
            "kind" : "expression",
            "left" : {
              "go-type" : 192,
              "kind" : "expression",
              "left" : {
                "field" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "locks",
                  "variable" : 8
                },
                "go-type" : 42,
                "kind" : "expression",
                "target" : {
                  "field" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "m",
                    "variable" : 7
                  },
                  "go-type" : 46,
                  "kind" : "expression",
                  "target" : {
                    "go-type" : 29,
                    "kind" : "expression",
                    "type" : "identifier",
                    "value" : {
                      "ident-kind" : "Var",
                      "kind" : "ident",
                      "value" : "_g_",
                      "variable" : 6
                    }
                  },
                  "type" : "selector"
                },
                "type" : "selector"
              },
              "operator" : "==",
              "right" : {
                "go-type" : 42,
                "kind" : "constant",
                "value" : {
                  "type" : "INT",
                  "value" : "0"
                }
              },
              "type" : "binary"
            },
            "operator" : "&&",
            "right" : {
              "go-type" : 192,
              "kind" : "expression",
              "left" : {
                "field" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "mallocing",
                  "variable" : 9
                },
                "go-type" : 42,
                "kind" : "expression",
                "target" : {
                  "field" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "m",
                    "variable" : 7
                  },
                  "go-type" : 46,
                  "kind" : "expression",
                  "target" : {
                    "go-type" : 29,
                    "kind" : "expression",
                    "type" : "identifier",
                    "value" : {
                      "ident-kind" : "Var",
                      "kind" : "ident",
                      "value" : "_g_",
                      "variable" : 6
                    }
                  },
                  "type" : "selector"
                },
                "type" : "selector"
              },
              "operator" : "==",
              "right" : {
                "go-type" : 42,
                "kind" : "constant",
                "value" : {
                  "type" : "INT",
                  "value" : "0"
                }
              },
              "type" : "binary"
            },
            "type" : "binary"
          },
          "operator" : "&&",
          "right" : {
            "go-type" : 192,
            "kind" : "expression",
            "left" : {
              "go-type" : 29,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "_g_",
                "variable" : 6
              }
            },
            "operator" : "!=",
            "right" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "g0",
                "variable" : 10
              },
              "go-type" : 29,
              "kind" : "expression",
              "target" : {
                "field" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "m",
                  "variable" : 7
                },
                "go-type" : 46,
                "kind" : "expression",
                "target" : {
                  "go-type" : 29,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "_g_",
                    "variable" : 6
                  }
                },
                "type" : "selector"
              },
              "type" : "selector"
            },
            "type" : "binary"
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 212,
      "code" : "if _g_.m.locks == 0 && _g_.m.mallocing == 0 && _g_ != _g_.m.g0 {\n\tthrow(\"mspan.sweep: m is not locked\")\n}",
      "entry" : false,
      "use-vars" : [ 6 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 5 ],
      "in-vars" : [ 5, 3, 4, 1, 0, 6 ],
      "exit" : false,
      "out-vars" : [ 4, 1, 0, 6, 5, 3 ],
      "decl-vars" : [ ],
      "line-start" : 211,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 62,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "mspan.sweep: m is not locked"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 193,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 2,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "throw"
            }
          },
          "go-type" : 59,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 211,
      "code" : "throw(\"mspan.sweep: m is not locked\")",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 7 ],
      "in-vars" : [ 4, 1, 0, 6, 5, 3 ],
      "exit" : false,
      "out-vars" : [ 4, 1, 0, 6, 5, 3, 12 ],
      "decl-vars" : [ 12 ],
      "line-start" : 213,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "sweepgen"
          }
        } ],
        "right" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "sweepgen",
            "variable" : 11
          },
          "go-type" : 16,
          "kind" : "expression",
          "target" : {
            "go-type" : 126,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "mheap_",
              "variable" : 5
            }
          },
          "type" : "selector"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 213,
      "code" : "sweepgen := mheap_.sweepgen",
      "entry" : false,
      "use-vars" : [ 5 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 8, 10 ],
      "in-vars" : [ 14, 0, 6, 5, 3, 12, 4, 1 ],
      "exit" : false,
      "out-vars" : [ 6, 5, 3, 12, 4, 1, 14, 0 ],
      "decl-vars" : [ ],
      "line-start" : 214,
      "ast" : {
        "condition" : {
          "go-type" : 192,
          "kind" : "expression",
          "left" : {
            "go-type" : 192,
            "kind" : "expression",
            "left" : {
              "go-type" : 21,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "state",
                "variable" : 14
              }
            },
            "operator" : "!=",
            "right" : {
              "go-type" : 21,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "1"
              }
            },
            "type" : "binary"
          },
          "operator" : "||",
          "right" : {
            "go-type" : 192,
            "kind" : "expression",
            "left" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "sweepgen",
                "variable" : 15
              },
              "go-type" : 16,
              "kind" : "expression",
              "target" : {
                "go-type" : 4,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "s",
                  "variable" : 0
                }
              },
              "type" : "selector"
            },
            "operator" : "!=",
            "right" : {
              "go-type" : 16,
              "kind" : "expression",
              "left" : {
                "go-type" : 16,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "sweepgen",
                  "variable" : 12
                }
              },
              "operator" : "-",
              "right" : {
                "go-type" : 16,
                "kind" : "constant",
                "value" : {
                  "type" : "INT",
                  "value" : "1"
                }
              },
              "type" : "binary"
            },
            "type" : "binary"
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 217,
      "code" : "if state := s.state.get(); state != mSpanInUse || s.sweepgen != sweepgen-1 {\n\tprint(\"mspan.sweep: state=\", state, \" sweepgen=\", s.sweepgen, \" mheap.sweepgen=\", sweepgen, \"\\n\")\n\tthrow(\"mspan.sweep: bad span state\")\n}",
      "entry" : false,
      "use-vars" : [ 14, 0, 12 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 6 ],
      "in-vars" : [ 4, 1, 0, 6, 5, 3, 12 ],
      "exit" : false,
      "out-vars" : [ 0, 6, 5, 3, 12, 4, 1, 14 ],
      "decl-vars" : [ 14 ],
      "line-start" : 214,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "state"
          }
        } ],
        "right" : [ {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "function" : 3,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "get"
            },
            "go-type" : 195,
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "state",
                "variable" : 13
              },
              "go-type" : 19,
              "kind" : "expression",
              "target" : {
                "go-type" : 4,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "s",
                  "variable" : 0
                }
              },
              "type" : "selector"
            },
            "type" : "selector"
          },
          "go-type" : 21,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 214,
      "code" : "state := s.state.get()",
      "entry" : false,
      "use-vars" : [ 0 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 9 ],
      "in-vars" : [ 4, 1, 14, 0, 6, 5, 3, 12 ],
      "exit" : false,
      "out-vars" : [ 0, 6, 5, 3, 12, 4, 1 ],
      "decl-vars" : [ ],
      "line-start" : 215,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 62,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "mspan.sweep: state="
            }
          }, {
            "go-type" : 21,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "state",
              "variable" : 14
            }
          }, {
            "go-type" : 62,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : " sweepgen="
            }
          }, {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "sweepgen",
              "variable" : 15
            },
            "go-type" : 16,
            "kind" : "expression",
            "target" : {
              "go-type" : 4,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "s",
                "variable" : 0
              }
            },
            "type" : "selector"
          }, {
            "go-type" : 62,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : " mheap.sweepgen="
            }
          }, {
            "go-type" : 16,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "sweepgen",
              "variable" : 12
            }
          }, {
            "go-type" : 62,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "\n"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 197,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Builtin",
              "kind" : "ident",
              "value" : "print"
            }
          },
          "go-type" : 59,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 215,
      "code" : "print(\"mspan.sweep: state=\", state, \" sweepgen=\", s.sweepgen, \" mheap.sweepgen=\", sweepgen, \"\\n\")",
      "entry" : false,
      "use-vars" : [ 0, 12, 14 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 10 ],
      "in-vars" : [ 6, 5, 3, 12, 4, 1, 0 ],
      "exit" : false,
      "out-vars" : [ 4, 1, 0, 6, 5, 3, 12 ],
      "decl-vars" : [ ],
      "line-start" : 216,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 62,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "mspan.sweep: bad span state"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 193,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 2,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "throw"
            }
          },
          "go-type" : 59,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 216,
      "code" : "throw(\"mspan.sweep: bad span state\")",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 11, 12 ],
      "in-vars" : [ 12, 4, 1, 0, 6, 5, 3 ],
      "exit" : false,
      "out-vars" : [ 4, 1, 0, 6, 5, 3, 12 ],
      "decl-vars" : [ ],
      "line-start" : 219,
      "ast" : {
        "condition" : {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "enabled",
            "variable" : 16
          },
          "go-type" : 2,
          "kind" : "expression",
          "target" : {
            "go-type" : 28,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "trace",
              "variable" : 3
            }
          },
          "type" : "selector"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 221,
      "code" : "if trace.enabled {\n\ttraceGCSweepSpan(s.npages * _PageSize)\n}",
      "entry" : false,
      "use-vars" : [ 3 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 12 ],
      "in-vars" : [ 3, 12, 4, 1, 0, 6, 5 ],
      "exit" : false,
      "out-vars" : [ 4, 1, 0, 6, 5, 3, 12 ],
      "decl-vars" : [ ],
      "line-start" : 220,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 10,
            "kind" : "expression",
            "left" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "npages",
                "variable" : 17
              },
              "go-type" : 10,
              "kind" : "expression",
              "target" : {
                "go-type" : 4,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "s",
                  "variable" : 0
                }
              },
              "type" : "selector"
            },
            "operator" : "*",
            "right" : {
              "go-type" : 10,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "8192"
              }
            },
            "type" : "binary"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 199,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 4,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "traceGCSweepSpan"
            }
          },
          "go-type" : 59,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 220,
      "code" : "traceGCSweepSpan(s.npages * _PageSize)",
      "entry" : false,
      "use-vars" : [ 0 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 13 ],
      "in-vars" : [ 0, 6, 5, 3, 12, 4, 1 ],
      "exit" : false,
      "out-vars" : [ 5, 3, 12, 4, 1, 0, 6 ],
      "decl-vars" : [ ],
      "line-start" : 223,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 147,
            "kind" : "expression",
            "operator" : "&",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "pagesSwept",
                "variable" : 18
              },
              "go-type" : 12,
              "kind" : "expression",
              "target" : {
                "go-type" : 126,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "mheap_",
                  "variable" : 5
                }
              },
              "type" : "selector"
            },
            "type" : "unary"
          }, {
            "coerced-to" : {
              "go-type" : 61,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 61,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "int64"
              }
            },
            "go-type" : 61,
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "npages",
                "variable" : 17
              },
              "go-type" : 10,
              "kind" : "expression",
              "target" : {
                "go-type" : 4,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "s",
                  "variable" : 0
                }
              },
              "type" : "selector"
            },
            "type" : "cast"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 201,
            "kind" : "expression",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 3,
              "value" : "atomic"
            },
            "type" : "identifier",
            "value" : {
              "function" : 5,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "Xadd64"
            }
          },
          "go-type" : 12,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 223,
      "code" : "atomic.Xadd64(&mheap_.pagesSwept, int64(s.npages))",
      "entry" : false,
      "use-vars" : [ 0, 5 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 14 ],
      "in-vars" : [ 1, 0, 6, 5, 3, 12, 4 ],
      "exit" : false,
      "out-vars" : [ 1, 0, 6, 5, 20, 3, 12, 4 ],
      "decl-vars" : [ 20 ],
      "line-start" : 225,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "spc"
          }
        } ],
        "right" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "spanclass",
            "variable" : 19
          },
          "go-type" : 18,
          "kind" : "expression",
          "target" : {
            "go-type" : 4,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "s",
              "variable" : 0
            }
          },
          "type" : "selector"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 225,
      "code" : "spc := s.spanclass",
      "entry" : false,
      "use-vars" : [ 0 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 15 ],
      "in-vars" : [ 12, 4, 1, 0, 6, 5, 20, 3 ],
      "exit" : false,
      "out-vars" : [ 0, 5, 12, 22, 6, 20, 3, 4, 1 ],
      "decl-vars" : [ 22 ],
      "line-start" : 226,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "size"
          }
        } ],
        "right" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "elemsize",
            "variable" : 21
          },
          "go-type" : 10,
          "kind" : "expression",
          "target" : {
            "go-type" : 4,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "s",
              "variable" : 0
            }
          },
          "type" : "selector"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 226,
      "code" : "size := s.elemsize",
      "entry" : false,
      "use-vars" : [ 0 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 16 ],
      "in-vars" : [ 4, 5, 12, 6, 20, 3, 1, 22, 0 ],
      "exit" : false,
      "out-vars" : [ 12, 6, 0, 5, 23, 20, 3, 4, 1, 22 ],
      "decl-vars" : [ 23 ],
      "line-start" : 227,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "res"
          }
        } ],
        "right" : [ {
          "go-type" : 2,
          "kind" : "constant",
          "value" : {
            "type" : "BOOL",
            "value" : "false"
          }
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 227,
      "code" : "res := false",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 17 ],
      "in-vars" : [ 22, 0, 23, 20, 3, 6, 5, 12, 4, 1 ],
      "exit" : false,
      "out-vars" : [ 22, 5, 20, 12, 1, 0, 23, 25, 3, 4 ],
      "decl-vars" : [ 25 ],
      "line-start" : 229,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "c"
          }
        } ],
        "right" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "mcache",
            "variable" : 24
          },
          "go-type" : 69,
          "kind" : "expression",
          "target" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "m",
              "variable" : 7
            },
            "go-type" : 46,
            "kind" : "expression",
            "target" : {
              "go-type" : 29,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "_g_",
                "variable" : 6
              }
            },
            "type" : "selector"
          },
          "type" : "selector"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 229,
      "code" : "c := _g_.m.mcache",
      "entry" : false,
      "use-vars" : [ 6 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 18 ],
      "in-vars" : [ 23, 5, 0, 25, 20, 3, 12, 4, 1, 22 ],
      "exit" : false,
      "out-vars" : [ 23, 3, 4, 1, 26, 5, 25, 20, 12, 22, 0 ],
      "decl-vars" : [ 26 ],
      "line-start" : 230,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "freeToHeap"
          }
        } ],
        "right" : [ {
          "go-type" : 2,
          "kind" : "constant",
          "value" : {
            "type" : "BOOL",
            "value" : "false"
          }
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 230,
      "code" : "freeToHeap := false",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 19 ],
      "in-vars" : [ 26, 12, 4, 1, 22, 5, 23, 25, 20, 3, 0 ],
      "exit" : false,
      "out-vars" : [ 0, 26, 5, 20, 3, 1, 28, 22, 12, 4, 23, 25 ],
      "decl-vars" : [ 28 ],
      "line-start" : 248,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "specialp"
          }
        } ],
        "right" : [ {
          "go-type" : 204,
          "kind" : "expression",
          "operator" : "&",
          "target" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "specials",
              "variable" : 27
            },
            "go-type" : 24,
            "kind" : "expression",
            "target" : {
              "go-type" : 4,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "s",
                "variable" : 0
              }
            },
            "type" : "selector"
          },
          "type" : "unary"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 248,
      "code" : "specialp := &s.specials",
      "entry" : false,
      "use-vars" : [ 0 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 20 ],
      "in-vars" : [ 5, 23, 25, 20, 3, 28, 22, 26, 12, 0, 4, 1 ],
      "exit" : false,
      "out-vars" : [ 1, 22, 26, 5, 25, 3, 4, 29, 0, 23, 20, 12 ],
      "decl-vars" : [ 29 ],
      "line-start" : 249,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "special"
          }
        } ],
        "right" : [ {
          "go-type" : 24,
          "kind" : "expression",
          "target" : {
            "go-type" : 204,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "specialp",
              "variable" : 28
            }
          },
          "type" : "star"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 249,
      "code" : "special := *specialp",
      "entry" : false,
      "use-vars" : [ 28 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 21, 45 ],
      "in-vars" : [ 0, 26, 25, 12, 29, 22, 20, 3, 4, 1, 5, 23 ],
      "exit" : false,
      "out-vars" : [ 12, 1, 0, 26, 5, 25, 3, 29, 22, 23, 20, 4 ],
      "decl-vars" : [ ],
      "line-start" : 250,
      "ast" : {
        "condition" : {
          "go-type" : 192,
          "kind" : "expression",
          "left" : {
            "go-type" : 24,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "special",
              "variable" : 29
            }
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 205,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Nil",
              "kind" : "ident",
              "value" : "nil"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "for"
      },
      "assign-vars" : [ ],
      "line-end" : 291,
      "code" : "for special != nil {\n\n\tobjIndex := uintptr(special.offset) / size\n\tp := s.base() + objIndex*size\n\tmbits := s.markBitsForIndex(objIndex)\n\tif !mbits.isMarked() {\n\n\t\thasFin := false\n\t\tendOffset := p - s.base() + size\n\t\tfor tmp := special; tmp != nil && uintptr(tmp.offset) < endOffset; tmp = tmp.next {\n\t\t\tif tmp.kind == _KindSpecialFinalizer {\n\n\t\t\t\tmbits.setMarkedNonAtomic()\n\t\t\t\thasFin = true\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\n\t\tfor special != nil && uintptr(special.offset) < endOffset {\n\n\t\t\tp := s.base() + uintptr(special.offset)\n\t\t\tif special.kind == _KindSpecialFinalizer || !hasFin {\n\n\t\t\t\ty := special\n\t\t\t\tspecial = special.next\n\t\t\t\t*specialp = special\n\t\t\t\tfreespecial(y, unsafe.Pointer(p), size)\n\t\t\t} else {\n\n\t\t\t\tspecialp = &special.next\n\t\t\t\tspecial = *specialp\n\t\t\t}\n\t\t}\n\t} else {\n\n\t\tspecialp = &special.next\n\t\tspecial = *specialp\n\t}\n}",
      "entry" : false,
      "use-vars" : [ 29 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 22 ],
      "in-vars" : [ 29, 0, 12, 4, 1, 22, 26, 5, 23, 25, 20, 3 ],
      "exit" : false,
      "out-vars" : [ 22, 31, 26, 12, 1, 3, 4, 29, 0, 5, 23, 25, 20 ],
      "decl-vars" : [ 31 ],
      "line-start" : 252,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "objIndex"
          }
        } ],
        "right" : [ {
          "go-type" : 10,
          "kind" : "expression",
          "left" : {
            "coerced-to" : {
              "go-type" : 10,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 10,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "uintptr"
              }
            },
            "go-type" : 10,
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "offset",
                "variable" : 30
              },
              "go-type" : 17,
              "kind" : "expression",
              "target" : {
                "go-type" : 24,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "special",
                  "variable" : 29
                }
              },
              "type" : "selector"
            },
            "type" : "cast"
          },
          "operator" : "/",
          "right" : {
            "go-type" : 10,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "size",
              "variable" : 22
            }
          },
          "type" : "binary"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 252,
      "code" : "objIndex := uintptr(special.offset) / size",
      "entry" : false,
      "use-vars" : [ 29, 22 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 23 ],
      "in-vars" : [ 5, 3, 12, 4, 22, 0, 31, 25, 20, 1, 29, 26, 23 ],
      "exit" : false,
      "out-vars" : [ 22, 0, 26, 23, 25, 29, 5, 33, 31, 12, 20, 3, 4, 1 ],
      "decl-vars" : [ 33 ],
      "line-start" : 253,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "p"
          }
        } ],
        "right" : [ {
          "go-type" : 10,
          "kind" : "expression",
          "left" : {
            "arguments" : [ ],
            "ellipsis" : false,
            "function" : {
              "field" : {
                "function" : 6,
                "ident-kind" : "Func",
                "kind" : "ident",
                "value" : "base"
              },
              "go-type" : 206,
              "kind" : "expression",
              "target" : {
                "go-type" : 4,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "s",
                  "variable" : 0
                }
              },
              "type" : "selector"
            },
            "go-type" : 10,
            "kind" : "expression",
            "type" : "call"
          },
          "operator" : "+",
          "right" : {
            "go-type" : 10,
            "kind" : "expression",
            "left" : {
              "go-type" : 10,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "objIndex",
                "variable" : 31
              }
            },
            "operator" : "*",
            "right" : {
              "go-type" : 10,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "size",
                "variable" : 22
              }
            },
            "type" : "binary"
          },
          "type" : "binary"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 253,
      "code" : "p := s.base() + objIndex*size",
      "entry" : false,
      "use-vars" : [ 0, 31, 22 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 24 ],
      "in-vars" : [ 0, 26, 5, 23, 20, 12, 33, 31, 25, 3, 29, 22, 4, 1 ],
      "exit" : false,
      "out-vars" : [ 33, 5, 25, 4, 1, 29, 22, 0, 26, 23, 20, 12, 32, 3 ],
      "decl-vars" : [ 32 ],
      "line-start" : 254,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "mbits"
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 10,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "objIndex",
              "variable" : 31
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "function" : 7,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "markBitsForIndex"
            },
            "go-type" : 211,
            "kind" : "expression",
            "target" : {
              "go-type" : 4,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "s",
                "variable" : 0
              }
            },
            "type" : "selector"
          },
          "go-type" : 208,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 254,
      "code" : "mbits := s.markBitsForIndex(objIndex)",
      "entry" : false,
      "use-vars" : [ 0, 31 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 25, 43 ],
      "in-vars" : [ 3, 12, 1, 22, 32, 4, 23, 25, 0, 26, 5, 20, 29, 33 ],
      "exit" : false,
      "out-vars" : [ 12, 1, 23, 20, 33, 26, 3, 5, 32, 0, 25, 4, 29, 22 ],
      "decl-vars" : [ ],
      "line-start" : 255,
      "ast" : {
        "condition" : {
          "go-type" : 2,
          "kind" : "expression",
          "operator" : "!",
          "target" : {
            "arguments" : [ ],
            "ellipsis" : false,
            "function" : {
              "field" : {
                "function" : 8,
                "ident-kind" : "Func",
                "kind" : "ident",
                "value" : "isMarked"
              },
              "go-type" : 214,
              "kind" : "expression",
              "target" : {
                "go-type" : 208,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "mbits",
                  "variable" : 32
                }
              },
              "type" : "selector"
            },
            "go-type" : 2,
            "kind" : "expression",
            "type" : "call"
          },
          "type" : "unary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 290,
      "code" : "if !mbits.isMarked() {\n\n\thasFin := false\n\tendOffset := p - s.base() + size\n\tfor tmp := special; tmp != nil && uintptr(tmp.offset) < endOffset; tmp = tmp.next {\n\t\tif tmp.kind == _KindSpecialFinalizer {\n\n\t\t\tmbits.setMarkedNonAtomic()\n\t\t\thasFin = true\n\t\t\tbreak\n\t\t}\n\t}\n\n\tfor special != nil && uintptr(special.offset) < endOffset {\n\n\t\tp := s.base() + uintptr(special.offset)\n\t\tif special.kind == _KindSpecialFinalizer || !hasFin {\n\n\t\t\ty := special\n\t\t\tspecial = special.next\n\t\t\t*specialp = special\n\t\t\tfreespecial(y, unsafe.Pointer(p), size)\n\t\t} else {\n\n\t\t\tspecialp = &special.next\n\t\t\tspecial = *specialp\n\t\t}\n\t}\n} else {\n\n\tspecialp = &special.next\n\tspecial = *specialp\n}",
      "entry" : false,
      "use-vars" : [ 32 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 26 ],
      "in-vars" : [ 32, 29, 33, 3, 5, 22, 0, 26, 23, 25, 20, 12, 4, 1 ],
      "exit" : false,
      "out-vars" : [ 22, 1, 5, 29, 33, 26, 32, 4, 38, 0, 20, 12, 23, 25, 3 ],
      "decl-vars" : [ 38 ],
      "line-start" : 258,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "hasFin"
          }
        } ],
        "right" : [ {
          "go-type" : 2,
          "kind" : "constant",
          "value" : {
            "type" : "BOOL",
            "value" : "false"
          }
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 258,
      "code" : "hasFin := false",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 28 ],
      "in-vars" : [ 38, 33, 5, 26, 1, 25, 20, 12, 4, 29, 22, 0, 23, 32, 3 ],
      "exit" : false,
      "out-vars" : [ 3, 4, 22, 32, 25, 23, 20, 38, 35, 26, 5, 12, 1, 29, 0 ],
      "decl-vars" : [ 35 ],
      "line-start" : 259,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "endOffset"
          }
        } ],
        "right" : [ {
          "go-type" : 10,
          "kind" : "expression",
          "left" : {
            "go-type" : 10,
            "kind" : "expression",
            "left" : {
              "go-type" : 10,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "p",
                "variable" : 33
              }
            },
            "operator" : "-",
            "right" : {
              "arguments" : [ ],
              "ellipsis" : false,
              "function" : {
                "field" : {
                  "function" : 6,
                  "ident-kind" : "Func",
                  "kind" : "ident",
                  "value" : "base"
                },
                "go-type" : 206,
                "kind" : "expression",
                "target" : {
                  "go-type" : 4,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "s",
                    "variable" : 0
                  }
                },
                "type" : "selector"
              },
              "go-type" : 10,
              "kind" : "expression",
              "type" : "call"
            },
            "type" : "binary"
          },
          "operator" : "+",
          "right" : {
            "go-type" : 10,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "size",
              "variable" : 22
            }
          },
          "type" : "binary"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 259,
      "code" : "endOffset := p - s.base() + size",
      "entry" : false,
      "use-vars" : [ 22, 33, 0 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 30, 34 ],
      "in-vars" : [ 32, 3, 12, 4, 1, 29, 22, 5, 20, 38, 26, 35, 23, 25, 0, 34 ],
      "exit" : false,
      "out-vars" : [ 4, 0, 34, 26, 5, 25, 20, 3, 12, 1, 38, 29, 22, 35, 23, 32 ],
      "decl-vars" : [ ],
      "line-start" : 260,
      "ast" : {
        "condition" : {
          "go-type" : 192,
          "kind" : "expression",
          "left" : {
            "go-type" : 192,
            "kind" : "expression",
            "left" : {
              "go-type" : 24,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "tmp",
                "variable" : 34
              }
            },
            "operator" : "!=",
            "right" : {
              "go-type" : 205,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Nil",
                "kind" : "ident",
                "value" : "nil"
              }
            },
            "type" : "binary"
          },
          "operator" : "&&",
          "right" : {
            "go-type" : 192,
            "kind" : "expression",
            "left" : {
              "coerced-to" : {
                "go-type" : 10,
                "kind" : "type",
                "type" : "identifier",
                "value" : {
                  "go-type" : 10,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "uintptr"
                }
              },
              "go-type" : 10,
              "kind" : "expression",
              "target" : {
                "field" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "offset",
                  "variable" : 30
                },
                "go-type" : 17,
                "kind" : "expression",
                "target" : {
                  "go-type" : 24,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "tmp",
                    "variable" : 34
                  }
                },
                "type" : "selector"
              },
              "type" : "cast"
            },
            "operator" : "<",
            "right" : {
              "go-type" : 10,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "endOffset",
                "variable" : 35
              }
            },
            "type" : "binary"
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "for"
      },
      "assign-vars" : [ ],
      "line-end" : 267,
      "code" : "for tmp := special; tmp != nil && uintptr(tmp.offset) < endOffset; tmp = tmp.next {\n\tif tmp.kind == _KindSpecialFinalizer {\n\n\t\tmbits.setMarkedNonAtomic()\n\t\thasFin = true\n\t\tbreak\n\t}\n}",
      "entry" : false,
      "use-vars" : [ 34, 35 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 27 ],
      "in-vars" : [ 25, 32, 3, 4, 1, 29, 38, 35, 20, 26, 0, 5, 23, 12, 22 ],
      "exit" : false,
      "out-vars" : [ 26, 32, 0, 35, 23, 22, 34, 25, 3, 4, 1, 38, 29, 5, 20, 12 ],
      "decl-vars" : [ 34 ],
      "line-start" : 260,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "tmp"
          }
        } ],
        "right" : [ {
          "go-type" : 24,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "special",
            "variable" : 29
          }
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 260,
      "code" : "tmp := special",
      "entry" : false,
      "use-vars" : [ 29 ]
    }, {
      "update-vars" : [ 34 ],
      "successors" : [ 27 ],
      "in-vars" : [ 0, 5, 25, 38, 20, 32, 3, 4, 22, 34, 23, 12, 29, 26, 35, 1 ],
      "exit" : false,
      "out-vars" : [ 5, 25, 4, 38, 23, 12, 1, 22, 20, 32, 34, 0, 26, 35, 3, 29 ],
      "decl-vars" : [ ],
      "line-start" : 260,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 24,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "tmp",
            "variable" : 34
          }
        } ],
        "right" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "next",
            "variable" : 36
          },
          "go-type" : 24,
          "kind" : "expression",
          "target" : {
            "go-type" : 24,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "tmp",
              "variable" : 34
            }
          },
          "type" : "selector"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 34 ],
      "line-end" : 260,
      "code" : "tmp = tmp.next",
      "entry" : false,
      "use-vars" : [ 34 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 31, 29 ],
      "in-vars" : [ 35, 20, 4, 34, 26, 29, 23, 5, 25, 3, 1, 38, 0, 12, 22, 32 ],
      "exit" : false,
      "out-vars" : [ 1, 29, 26, 35, 20, 34, 25, 32, 23, 22, 0, 5, 3, 12, 4, 38 ],
      "decl-vars" : [ ],
      "line-start" : 261,
      "ast" : {
        "condition" : {
          "go-type" : 192,
          "kind" : "expression",
          "left" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "kind",
              "variable" : 37
            },
            "go-type" : 27,
            "kind" : "expression",
            "target" : {
              "go-type" : 24,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "tmp",
                "variable" : 34
              }
            },
            "type" : "selector"
          },
          "operator" : "==",
          "right" : {
            "go-type" : 27,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "1"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 266,
      "code" : "if tmp.kind == _KindSpecialFinalizer {\n\n\tmbits.setMarkedNonAtomic()\n\thasFin = true\n\tbreak\n}",
      "entry" : false,
      "use-vars" : [ 34 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 32 ],
      "in-vars" : [ 20, 1, 29, 5, 12, 4, 23, 32, 26, 25, 22, 0, 35, 3 ],
      "exit" : false,
      "out-vars" : [ 0, 26, 5, 23, 20, 3, 12, 22, 4, 35, 25, 1, 29 ],
      "decl-vars" : [ ],
      "line-start" : 263,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "function" : 9,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "setMarkedNonAtomic"
            },
            "go-type" : 58,
            "kind" : "expression",
            "target" : {
              "go-type" : 208,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "mbits",
                "variable" : 32
              }
            },
            "type" : "selector"
          },
          "go-type" : 59,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 263,
      "code" : "mbits.setMarkedNonAtomic()",
      "entry" : false,
      "use-vars" : [ 32 ]
    }, {
      "update-vars" : [ 38 ],
      "successors" : [ 33 ],
      "in-vars" : [ 0, 26, 23, 12, 4, 1, 29, 5, 35, 25, 20, 3, 22 ],
      "exit" : false,
      "out-vars" : [ 3, 1, 29, 22, 26, 35, 20, 4, 23, 25, 12, 38, 0, 5 ],
      "decl-vars" : [ ],
      "line-start" : 264,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 2,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "hasFin",
            "variable" : 38
          }
        } ],
        "right" : [ {
          "go-type" : 2,
          "kind" : "constant",
          "value" : {
            "type" : "BOOL",
            "value" : "true"
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 38 ],
      "line-end" : 264,
      "code" : "hasFin = true",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 34 ],
      "in-vars" : [ 26, 3, 1, 35, 4, 29, 22, 0, 25, 12, 38, 5, 23, 20 ],
      "exit" : false,
      "out-vars" : [ 3, 38, 0, 25, 12, 22, 5, 1, 29, 26, 35, 23, 20, 4 ],
      "decl-vars" : [ ],
      "line-start" : 265,
      "ast" : {
        "kind" : "statement",
        "label" : null,
        "type" : "break"
      },
      "assign-vars" : [ ],
      "line-end" : 265,
      "code" : "break",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 35, 20 ],
      "in-vars" : [ 35, 23, 3, 38, 29, 26, 5, 25, 20, 4, 22, 0, 12, 1 ],
      "exit" : false,
      "out-vars" : [ 22, 0, 12, 38, 23, 20, 3, 4, 26, 1, 29, 5, 35, 25 ],
      "decl-vars" : [ ],
      "line-start" : 269,
      "ast" : {
        "condition" : {
          "go-type" : 192,
          "kind" : "expression",
          "left" : {
            "go-type" : 192,
            "kind" : "expression",
            "left" : {
              "go-type" : 24,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "special",
                "variable" : 29
              }
            },
            "operator" : "!=",
            "right" : {
              "go-type" : 205,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Nil",
                "kind" : "ident",
                "value" : "nil"
              }
            },
            "type" : "binary"
          },
          "operator" : "&&",
          "right" : {
            "go-type" : 192,
            "kind" : "expression",
            "left" : {
              "coerced-to" : {
                "go-type" : 10,
                "kind" : "type",
                "type" : "identifier",
                "value" : {
                  "go-type" : 10,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "uintptr"
                }
              },
              "go-type" : 10,
              "kind" : "expression",
              "target" : {
                "field" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "offset",
                  "variable" : 30
                },
                "go-type" : 17,
                "kind" : "expression",
                "target" : {
                  "go-type" : 24,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "special",
                    "variable" : 29
                  }
                },
                "type" : "selector"
              },
              "type" : "cast"
            },
            "operator" : "<",
            "right" : {
              "go-type" : 10,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "endOffset",
                "variable" : 35
              }
            },
            "type" : "binary"
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "for"
      },
      "assign-vars" : [ ],
      "line-end" : 285,
      "code" : "for special != nil && uintptr(special.offset) < endOffset {\n\n\tp := s.base() + uintptr(special.offset)\n\tif special.kind == _KindSpecialFinalizer || !hasFin {\n\n\t\ty := special\n\t\tspecial = special.next\n\t\t*specialp = special\n\t\tfreespecial(y, unsafe.Pointer(p), size)\n\t} else {\n\n\t\tspecialp = &special.next\n\t\tspecial = *specialp\n\t}\n}",
      "entry" : false,
      "use-vars" : [ 29, 35 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 36 ],
      "in-vars" : [ 0, 5, 3, 1, 22, 26, 25, 38, 29, 35, 4, 23, 20, 12 ],
      "exit" : false,
      "out-vars" : [ 29, 5, 3, 35, 12, 0, 23, 20, 1, 38, 22, 26, 40, 25, 4 ],
      "decl-vars" : [ 40 ],
      "line-start" : 272,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "p"
          }
        } ],
        "right" : [ {
          "go-type" : 10,
          "kind" : "expression",
          "left" : {
            "arguments" : [ ],
            "ellipsis" : false,
            "function" : {
              "field" : {
                "function" : 6,
                "ident-kind" : "Func",
                "kind" : "ident",
                "value" : "base"
              },
              "go-type" : 206,
              "kind" : "expression",
              "target" : {
                "go-type" : 4,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "s",
                  "variable" : 0
                }
              },
              "type" : "selector"
            },
            "go-type" : 10,
            "kind" : "expression",
            "type" : "call"
          },
          "operator" : "+",
          "right" : {
            "coerced-to" : {
              "go-type" : 10,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 10,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "uintptr"
              }
            },
            "go-type" : 10,
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "offset",
                "variable" : 30
              },
              "go-type" : 17,
              "kind" : "expression",
              "target" : {
                "go-type" : 24,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "special",
                  "variable" : 29
                }
              },
              "type" : "selector"
            },
            "type" : "cast"
          },
          "type" : "binary"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 272,
      "code" : "p := s.base() + uintptr(special.offset)",
      "entry" : false,
      "use-vars" : [ 29, 0 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 37, 41 ],
      "in-vars" : [ 3, 12, 35, 25, 1, 22, 0, 26, 20, 4, 29, 40, 23, 38, 5 ],
      "exit" : false,
      "out-vars" : [ 22, 26, 5, 3, 38, 29, 0, 23, 25, 20, 12, 1, 40, 4, 35 ],
      "decl-vars" : [ ],
      "line-start" : 273,
      "ast" : {
        "condition" : {
          "go-type" : 2,
          "kind" : "expression",
          "left" : {
            "go-type" : 2,
            "kind" : "expression",
            "left" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "kind",
                "variable" : 37
              },
              "go-type" : 27,
              "kind" : "expression",
              "target" : {
                "go-type" : 24,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "special",
                  "variable" : 29
                }
              },
              "type" : "selector"
            },
            "operator" : "==",
            "right" : {
              "go-type" : 27,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "1"
              }
            },
            "type" : "binary"
          },
          "operator" : "||",
          "right" : {
            "go-type" : 2,
            "kind" : "expression",
            "operator" : "!",
            "target" : {
              "go-type" : 2,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "hasFin",
                "variable" : 38
              }
            },
            "type" : "unary"
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 284,
      "code" : "if special.kind == _KindSpecialFinalizer || !hasFin {\n\n\ty := special\n\tspecial = special.next\n\t*specialp = special\n\tfreespecial(y, unsafe.Pointer(p), size)\n} else {\n\n\tspecialp = &special.next\n\tspecial = *specialp\n}",
      "entry" : false,
      "use-vars" : [ 38, 29 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 38 ],
      "in-vars" : [ 22, 26, 5, 25, 38, 23, 20, 1, 29, 35, 40, 0, 3, 12, 4 ],
      "exit" : false,
      "out-vars" : [ 35, 20, 1, 22, 5, 25, 3, 4, 29, 39, 0, 40, 12, 38, 23, 26 ],
      "decl-vars" : [ 39 ],
      "line-start" : 275,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "y"
          }
        } ],
        "right" : [ {
          "go-type" : 24,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "special",
            "variable" : 29
          }
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 275,
      "code" : "y := special",
      "entry" : false,
      "use-vars" : [ 29 ]
    }, {
      "update-vars" : [ 29 ],
      "successors" : [ 39 ],
      "in-vars" : [ 22, 23, 20, 38, 4, 1, 25, 12, 39, 29, 35, 40, 0, 26, 5, 3 ],
      "exit" : false,
      "out-vars" : [ 25, 20, 38, 29, 35, 23, 26, 3, 4, 39, 5, 40, 22, 0, 12, 1 ],
      "decl-vars" : [ ],
      "line-start" : 276,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 24,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "special",
            "variable" : 29
          }
        } ],
        "right" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "next",
            "variable" : 36
          },
          "go-type" : 24,
          "kind" : "expression",
          "target" : {
            "go-type" : 24,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "special",
              "variable" : 29
            }
          },
          "type" : "selector"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 29 ],
      "line-end" : 276,
      "code" : "special = special.next",
      "entry" : false,
      "use-vars" : [ 29 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 40 ],
      "in-vars" : [ 0, 1, 3, 38, 22, 26, 40, 23, 25, 39, 5, 20, 12, 4, 29, 35 ],
      "exit" : false,
      "out-vars" : [ 23, 39, 29, 0, 5, 25, 3, 38, 1, 22, 26, 35, 40, 20, 12, 4 ],
      "decl-vars" : [ ],
      "line-start" : 277,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 24,
          "kind" : "expression",
          "target" : {
            "go-type" : 204,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "specialp",
              "variable" : 28
            }
          },
          "type" : "star"
        } ],
        "right" : [ {
          "go-type" : 24,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "special",
            "variable" : 29
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 277,
      "code" : "*specialp = special",
      "entry" : false,
      "use-vars" : [ 29 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 34 ],
      "in-vars" : [ 5, 3, 4, 38, 29, 26, 40, 25, 12, 0, 39, 22, 35, 23, 20, 1 ],
      "exit" : false,
      "out-vars" : [ 20, 25, 12, 1, 38, 0, 26, 23, 4, 29, 22, 5, 35, 3 ],
      "decl-vars" : [ ],
      "line-start" : 278,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 24,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "y",
              "variable" : 39
            }
          }, {
            "coerced-to" : {
              "go-type" : 37,
              "kind" : "type",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 1,
                "value" : "unsafe"
              },
              "type" : "identifier",
              "value" : {
                "go-type" : 37,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "Pointer"
              }
            },
            "go-type" : 37,
            "kind" : "expression",
            "target" : {
              "go-type" : 10,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "p",
                "variable" : 40
              }
            },
            "type" : "cast"
          }, {
            "go-type" : 10,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "size",
              "variable" : 22
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 215,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 10,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "freespecial"
            }
          },
          "go-type" : 59,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 278,
      "code" : "freespecial(y, unsafe.Pointer(p), size)",
      "entry" : false,
      "use-vars" : [ 39, 40, 22 ]
    }, {
      "update-vars" : [ 28 ],
      "successors" : [ 42 ],
      "in-vars" : [ 12, 0, 25, 26, 5, 20, 38, 29, 4, 22, 35, 1, 23, 3 ],
      "exit" : false,
      "out-vars" : [ 20, 12, 4, 38, 22, 23, 28, 0, 26, 5, 1, 35, 25, 3 ],
      "decl-vars" : [ ],
      "line-start" : 282,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 204,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "specialp",
            "variable" : 28
          }
        } ],
        "right" : [ {
          "go-type" : 204,
          "kind" : "expression",
          "operator" : "&",
          "target" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "next",
              "variable" : 36
            },
            "go-type" : 24,
            "kind" : "expression",
            "target" : {
              "go-type" : 24,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "special",
                "variable" : 29
              }
            },
            "type" : "selector"
          },
          "type" : "unary"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 28 ],
      "line-end" : 282,
      "code" : "specialp = &special.next",
      "entry" : false,
      "use-vars" : [ 29 ]
    }, {
      "update-vars" : [ 29 ],
      "successors" : [ 34 ],
      "in-vars" : [ 5, 35, 25, 20, 28, 0, 3, 12, 23, 38, 22, 1, 26, 4 ],
      "exit" : false,
      "out-vars" : [ 38, 20, 3, 4, 29, 0, 35, 12, 1, 5, 22, 26, 23, 25 ],
      "decl-vars" : [ ],
      "line-start" : 283,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 24,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "special",
            "variable" : 29
          }
        } ],
        "right" : [ {
          "go-type" : 24,
          "kind" : "expression",
          "target" : {
            "go-type" : 204,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "specialp",
              "variable" : 28
            }
          },
          "type" : "star"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 29 ],
      "line-end" : 283,
      "code" : "special = *specialp",
      "entry" : false,
      "use-vars" : [ 28 ]
    }, {
      "update-vars" : [ 28 ],
      "successors" : [ 44 ],
      "in-vars" : [ 29, 22, 26, 23, 12, 0, 5, 25, 20, 3, 4, 1 ],
      "exit" : false,
      "out-vars" : [ 1, 26, 20, 3, 12, 23, 25, 4, 28, 22, 0, 5 ],
      "decl-vars" : [ ],
      "line-start" : 288,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 204,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "specialp",
            "variable" : 28
          }
        } ],
        "right" : [ {
          "go-type" : 204,
          "kind" : "expression",
          "operator" : "&",
          "target" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "next",
              "variable" : 36
            },
            "go-type" : 24,
            "kind" : "expression",
            "target" : {
              "go-type" : 24,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "special",
                "variable" : 29
              }
            },
            "type" : "selector"
          },
          "type" : "unary"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 28 ],
      "line-end" : 288,
      "code" : "specialp = &special.next",
      "entry" : false,
      "use-vars" : [ 29 ]
    }, {
      "update-vars" : [ 29 ],
      "successors" : [ 20 ],
      "in-vars" : [ 25, 22, 0, 26, 23, 12, 4, 1, 28, 5, 20, 3 ],
      "exit" : false,
      "out-vars" : [ 22, 23, 25, 3, 12, 1, 29, 0, 26, 5, 20, 4 ],
      "decl-vars" : [ ],
      "line-start" : 289,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 24,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "special",
            "variable" : 29
          }
        } ],
        "right" : [ {
          "go-type" : 24,
          "kind" : "expression",
          "target" : {
            "go-type" : 204,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "specialp",
              "variable" : 28
            }
          },
          "type" : "star"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 29 ],
      "line-end" : 289,
      "code" : "special = *specialp",
      "entry" : false,
      "use-vars" : [ 28 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 46, 63 ],
      "in-vars" : [ 22, 0, 26, 12, 4, 5, 23, 25, 20, 3, 1 ],
      "exit" : false,
      "out-vars" : [ 22, 23, 1, 20, 3, 12, 4, 0, 26, 5, 25 ],
      "decl-vars" : [ ],
      "line-start" : 293,
      "ast" : {
        "condition" : {
          "go-type" : 192,
          "kind" : "expression",
          "left" : {
            "go-type" : 192,
            "kind" : "expression",
            "left" : {
              "go-type" : 192,
              "kind" : "expression",
              "left" : {
                "go-type" : 192,
                "kind" : "expression",
                "left" : {
                  "field" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "allocfreetrace",
                    "variable" : 41
                  },
                  "go-type" : 42,
                  "kind" : "expression",
                  "target" : {
                    "go-type" : 125,
                    "kind" : "expression",
                    "type" : "identifier",
                    "value" : {
                      "ident-kind" : "Var",
                      "kind" : "ident",
                      "value" : "debug",
                      "variable" : 4
                    }
                  },
                  "type" : "selector"
                },
                "operator" : "!=",
                "right" : {
                  "go-type" : 42,
                  "kind" : "constant",
                  "value" : {
                    "type" : "INT",
                    "value" : "0"
                  }
                },
                "type" : "binary"
              },
              "operator" : "||",
              "right" : {
                "go-type" : 192,
                "kind" : "expression",
                "left" : {
                  "field" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "clobberfree",
                    "variable" : 42
                  },
                  "go-type" : 42,
                  "kind" : "expression",
                  "target" : {
                    "go-type" : 125,
                    "kind" : "expression",
                    "type" : "identifier",
                    "value" : {
                      "ident-kind" : "Var",
                      "kind" : "ident",
                      "value" : "debug",
                      "variable" : 4
                    }
                  },
                  "type" : "selector"
                },
                "operator" : "!=",
                "right" : {
                  "go-type" : 42,
                  "kind" : "constant",
                  "value" : {
                    "type" : "INT",
                    "value" : "0"
                  }
                },
                "type" : "binary"
              },
              "type" : "binary"
            },
            "operator" : "||",
            "right" : {
              "go-type" : 192,
              "kind" : "constant",
              "value" : {
                "type" : "BOOL",
                "value" : "false"
              }
            },
            "type" : "binary"
          },
          "operator" : "||",
          "right" : {
            "go-type" : 192,
            "kind" : "constant",
            "value" : {
              "type" : "BOOL",
              "value" : "false"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 317,
      "code" : "if debug.allocfreetrace != 0 || debug.clobberfree != 0 || raceenabled || msanenabled {\n\n\tmbits := s.markBitsForBase()\n\tabits := s.allocBitsForIndex(0)\n\tfor i := uintptr(0); i < s.nelems; i++ {\n\t\tif !mbits.isMarked() && (abits.index < s.freeindex || abits.isMarked()) {\n\t\t\tx := s.base() + i*s.elemsize\n\t\t\tif debug.allocfreetrace != 0 {\n\t\t\t\ttracefree(unsafe.Pointer(x), size)\n\t\t\t}\n\t\t\tif debug.clobberfree != 0 {\n\t\t\t\tclobberfree(unsafe.Pointer(x), size)\n\t\t\t}\n\t\t\tif raceenabled {\n\t\t\t\tracefree(unsafe.Pointer(x), size)\n\t\t\t}\n\t\t\tif msanenabled {\n\t\t\t\tmsanfree(unsafe.Pointer(x), size)\n\t\t\t}\n\t\t}\n\t\tmbits.advance()\n\t\tabits.advance()\n\t}\n}",
      "entry" : false,
      "use-vars" : [ 4 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 47 ],
      "in-vars" : [ 22, 26, 20, 3, 12, 4, 0, 5, 23, 25, 1 ],
      "exit" : false,
      "out-vars" : [ 45, 23, 20, 4, 1, 3, 12, 22, 0, 26, 5, 25 ],
      "decl-vars" : [ 45 ],
      "line-start" : 296,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "mbits"
          }
        } ],
        "right" : [ {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "function" : 11,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "markBitsForBase"
            },
            "go-type" : 217,
            "kind" : "expression",
            "target" : {
              "go-type" : 4,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "s",
                "variable" : 0
              }
            },
            "type" : "selector"
          },
          "go-type" : 208,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 296,
      "code" : "mbits := s.markBitsForBase()",
      "entry" : false,
      "use-vars" : [ 0 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 49 ],
      "in-vars" : [ 20, 4, 1, 0, 45, 5, 23, 25, 3, 12, 22, 26 ],
      "exit" : false,
      "out-vars" : [ 45, 25, 20, 3, 46, 0, 26, 5, 12, 4, 1, 22, 23 ],
      "decl-vars" : [ 46 ],
      "line-start" : 297,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "abits"
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 10,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "function" : 12,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "allocBitsForIndex"
            },
            "go-type" : 218,
            "kind" : "expression",
            "target" : {
              "go-type" : 4,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "s",
                "variable" : 0
              }
            },
            "type" : "selector"
          },
          "go-type" : 208,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 297,
      "code" : "abits := s.allocBitsForIndex(0)",
      "entry" : false,
      "use-vars" : [ 0 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 51, 63 ],
      "in-vars" : [ 0, 23, 20, 1, 46, 43, 5, 25, 45, 3, 4, 22, 26, 12 ],
      "exit" : false,
      "out-vars" : [ 26, 22, 0, 4, 1, 46, 45, 23, 3, 43, 5, 25, 20, 12 ],
      "decl-vars" : [ ],
      "line-start" : 298,
      "ast" : {
        "condition" : {
          "go-type" : 192,
          "kind" : "expression",
          "left" : {
            "go-type" : 10,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "i",
              "variable" : 43
            }
          },
          "operator" : "<",
          "right" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "nelems",
              "variable" : 44
            },
            "go-type" : 10,
            "kind" : "expression",
            "target" : {
              "go-type" : 4,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "s",
                "variable" : 0
              }
            },
            "type" : "selector"
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "for"
      },
      "assign-vars" : [ ],
      "line-end" : 316,
      "code" : "for i := uintptr(0); i < s.nelems; i++ {\n\tif !mbits.isMarked() && (abits.index < s.freeindex || abits.isMarked()) {\n\t\tx := s.base() + i*s.elemsize\n\t\tif debug.allocfreetrace != 0 {\n\t\t\ttracefree(unsafe.Pointer(x), size)\n\t\t}\n\t\tif debug.clobberfree != 0 {\n\t\t\tclobberfree(unsafe.Pointer(x), size)\n\t\t}\n\t\tif raceenabled {\n\t\t\tracefree(unsafe.Pointer(x), size)\n\t\t}\n\t\tif msanenabled {\n\t\t\tmsanfree(unsafe.Pointer(x), size)\n\t\t}\n\t}\n\tmbits.advance()\n\tabits.advance()\n}",
      "entry" : false,
      "use-vars" : [ 43, 0 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 48 ],
      "in-vars" : [ 5, 20, 4, 1, 26, 46, 0, 45, 23, 25, 3, 12, 22 ],
      "exit" : false,
      "out-vars" : [ 26, 45, 23, 25, 20, 3, 0, 5, 22, 43, 12, 4, 1, 46 ],
      "decl-vars" : [ 43 ],
      "line-start" : 298,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "i"
          }
        } ],
        "right" : [ {
          "go-type" : 10,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "0"
          }
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 298,
      "code" : "i := uintptr(0)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ 43 ],
      "successors" : [ 48 ],
      "in-vars" : [ 26, 3, 12, 23, 4, 22, 46, 43, 45, 0, 5, 25, 20, 1 ],
      "exit" : false,
      "out-vars" : [ 23, 26, 25, 4, 46, 0, 45, 20, 3, 1, 43, 5, 22, 12 ],
      "decl-vars" : [ ],
      "line-start" : 298,
      "ast" : {
        "kind" : "statement",
        "operation" : "++",
        "target" : {
          "go-type" : 10,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "i",
            "variable" : 43
          }
        },
        "type" : "crement"
      },
      "assign-vars" : [ 43 ],
      "line-end" : 298,
      "code" : "i++",
      "entry" : false,
      "use-vars" : [ 43 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 52, 61 ],
      "in-vars" : [ 46, 43, 22, 5, 23, 20, 45, 12, 4, 1, 0, 26, 25, 3 ],
      "exit" : false,
      "out-vars" : [ 25, 0, 45, 23, 22, 26, 12, 4, 1, 46, 5, 20, 43, 3 ],
      "decl-vars" : [ ],
      "line-start" : 299,
      "ast" : {
        "condition" : {
          "go-type" : 2,
          "kind" : "expression",
          "left" : {
            "go-type" : 2,
            "kind" : "expression",
            "operator" : "!",
            "target" : {
              "arguments" : [ ],
              "ellipsis" : false,
              "function" : {
                "field" : {
                  "function" : 8,
                  "ident-kind" : "Func",
                  "kind" : "ident",
                  "value" : "isMarked"
                },
                "go-type" : 214,
                "kind" : "expression",
                "target" : {
                  "go-type" : 208,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "mbits",
                    "variable" : 45
                  }
                },
                "type" : "selector"
              },
              "go-type" : 2,
              "kind" : "expression",
              "type" : "call"
            },
            "type" : "unary"
          },
          "operator" : "&&",
          "right" : {
            "go-type" : 2,
            "kind" : "expression",
            "target" : {
              "go-type" : 2,
              "kind" : "expression",
              "left" : {
                "go-type" : 2,
                "kind" : "expression",
                "left" : {
                  "field" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "index",
                    "variable" : 47
                  },
                  "go-type" : 10,
                  "kind" : "expression",
                  "target" : {
                    "go-type" : 208,
                    "kind" : "expression",
                    "type" : "identifier",
                    "value" : {
                      "ident-kind" : "Var",
                      "kind" : "ident",
                      "value" : "abits",
                      "variable" : 46
                    }
                  },
                  "type" : "selector"
                },
                "operator" : "<",
                "right" : {
                  "field" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "freeindex",
                    "variable" : 48
                  },
                  "go-type" : 10,
                  "kind" : "expression",
                  "target" : {
                    "go-type" : 4,
                    "kind" : "expression",
                    "type" : "identifier",
                    "value" : {
                      "ident-kind" : "Var",
                      "kind" : "ident",
                      "value" : "s",
                      "variable" : 0
                    }
                  },
                  "type" : "selector"
                },
                "type" : "binary"
              },
              "operator" : "||",
              "right" : {
                "arguments" : [ ],
                "ellipsis" : false,
                "function" : {
                  "field" : {
                    "function" : 8,
                    "ident-kind" : "Func",
                    "kind" : "ident",
                    "value" : "isMarked"
                  },
                  "go-type" : 214,
                  "kind" : "expression",
                  "target" : {
                    "go-type" : 208,
                    "kind" : "expression",
                    "type" : "identifier",
                    "value" : {
                      "ident-kind" : "Var",
                      "kind" : "ident",
                      "value" : "abits",
                      "variable" : 46
                    }
                  },
                  "type" : "selector"
                },
                "go-type" : 2,
                "kind" : "expression",
                "type" : "call"
              },
              "type" : "binary"
            },
            "type" : "paren"
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 313,
      "code" : "if !mbits.isMarked() && (abits.index < s.freeindex || abits.isMarked()) {\n\tx := s.base() + i*s.elemsize\n\tif debug.allocfreetrace != 0 {\n\t\ttracefree(unsafe.Pointer(x), size)\n\t}\n\tif debug.clobberfree != 0 {\n\t\tclobberfree(unsafe.Pointer(x), size)\n\t}\n\tif raceenabled {\n\t\tracefree(unsafe.Pointer(x), size)\n\t}\n\tif msanenabled {\n\t\tmsanfree(unsafe.Pointer(x), size)\n\t}\n}",
      "entry" : false,
      "use-vars" : [ 45, 0, 46 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 53 ],
      "in-vars" : [ 25, 3, 4, 26, 1, 0, 43, 45, 20, 12, 22, 46, 5, 23 ],
      "exit" : false,
      "out-vars" : [ 5, 45, 25, 12, 0, 23, 3, 22, 26, 1, 49, 46, 43, 20, 4 ],
      "decl-vars" : [ 49 ],
      "line-start" : 300,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "x"
          }
        } ],
        "right" : [ {
          "go-type" : 10,
          "kind" : "expression",
          "left" : {
            "arguments" : [ ],
            "ellipsis" : false,
            "function" : {
              "field" : {
                "function" : 6,
                "ident-kind" : "Func",
                "kind" : "ident",
                "value" : "base"
              },
              "go-type" : 206,
              "kind" : "expression",
              "target" : {
                "go-type" : 4,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "s",
                  "variable" : 0
                }
              },
              "type" : "selector"
            },
            "go-type" : 10,
            "kind" : "expression",
            "type" : "call"
          },
          "operator" : "+",
          "right" : {
            "go-type" : 10,
            "kind" : "expression",
            "left" : {
              "go-type" : 10,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "i",
                "variable" : 43
              }
            },
            "operator" : "*",
            "right" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "elemsize",
                "variable" : 21
              },
              "go-type" : 10,
              "kind" : "expression",
              "target" : {
                "go-type" : 4,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "s",
                  "variable" : 0
                }
              },
              "type" : "selector"
            },
            "type" : "binary"
          },
          "type" : "binary"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 300,
      "code" : "x := s.base() + i*s.elemsize",
      "entry" : false,
      "use-vars" : [ 0, 43 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 54, 55 ],
      "in-vars" : [ 49, 46, 3, 4, 20, 1, 22, 0, 43, 26, 12, 5, 45, 23, 25 ],
      "exit" : false,
      "out-vars" : [ 45, 1, 49, 26, 5, 20, 3, 22, 46, 23, 25, 12, 0, 43, 4 ],
      "decl-vars" : [ ],
      "line-start" : 301,
      "ast" : {
        "condition" : {
          "go-type" : 192,
          "kind" : "expression",
          "left" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "allocfreetrace",
              "variable" : 41
            },
            "go-type" : 42,
            "kind" : "expression",
            "target" : {
              "go-type" : 125,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "debug",
                "variable" : 4
              }
            },
            "type" : "selector"
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 42,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 303,
      "code" : "if debug.allocfreetrace != 0 {\n\ttracefree(unsafe.Pointer(x), size)\n}",
      "entry" : false,
      "use-vars" : [ 4 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 55 ],
      "in-vars" : [ 45, 25, 12, 4, 22, 46, 0, 43, 5, 23, 20, 26, 1, 49, 3 ],
      "exit" : false,
      "out-vars" : [ 49, 5, 45, 25, 4, 1, 22, 46, 0, 26, 43, 12, 23, 20, 3 ],
      "decl-vars" : [ ],
      "line-start" : 302,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "coerced-to" : {
              "go-type" : 37,
              "kind" : "type",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 1,
                "value" : "unsafe"
              },
              "type" : "identifier",
              "value" : {
                "go-type" : 37,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "Pointer"
              }
            },
            "go-type" : 37,
            "kind" : "expression",
            "target" : {
              "go-type" : 10,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "x",
                "variable" : 49
              }
            },
            "type" : "cast"
          }, {
            "go-type" : 10,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "size",
              "variable" : 22
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 220,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 13,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "tracefree"
            }
          },
          "go-type" : 59,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 302,
      "code" : "tracefree(unsafe.Pointer(x), size)",
      "entry" : false,
      "use-vars" : [ 49, 22 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 56, 57 ],
      "in-vars" : [ 5, 20, 45, 1, 12, 4, 46, 0, 43, 26, 3, 49, 22, 23, 25 ],
      "exit" : false,
      "out-vars" : [ 22, 26, 25, 20, 3, 5, 45, 23, 1, 49, 46, 0, 4, 43, 12 ],
      "decl-vars" : [ ],
      "line-start" : 304,
      "ast" : {
        "condition" : {
          "go-type" : 192,
          "kind" : "expression",
          "left" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "clobberfree",
              "variable" : 42
            },
            "go-type" : 42,
            "kind" : "expression",
            "target" : {
              "go-type" : 125,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "debug",
                "variable" : 4
              }
            },
            "type" : "selector"
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 42,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 306,
      "code" : "if debug.clobberfree != 0 {\n\tclobberfree(unsafe.Pointer(x), size)\n}",
      "entry" : false,
      "use-vars" : [ 4 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 57 ],
      "in-vars" : [ 3, 1, 26, 23, 20, 4, 0, 45, 5, 25, 12, 49, 22, 46, 43 ],
      "exit" : false,
      "out-vars" : [ 25, 49, 22, 4, 1, 5, 3, 23, 20, 12, 46, 45, 26, 0, 43 ],
      "decl-vars" : [ ],
      "line-start" : 305,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "coerced-to" : {
              "go-type" : 37,
              "kind" : "type",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 1,
                "value" : "unsafe"
              },
              "type" : "identifier",
              "value" : {
                "go-type" : 37,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "Pointer"
              }
            },
            "go-type" : 37,
            "kind" : "expression",
            "target" : {
              "go-type" : 10,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "x",
                "variable" : 49
              }
            },
            "type" : "cast"
          }, {
            "go-type" : 10,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "size",
              "variable" : 22
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 222,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 14,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "clobberfree"
            }
          },
          "go-type" : 59,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 305,
      "code" : "clobberfree(unsafe.Pointer(x), size)",
      "entry" : false,
      "use-vars" : [ 49, 22 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 58, 59 ],
      "in-vars" : [ 5, 25, 3, 12, 1, 0, 43, 45, 49, 23, 20, 46, 26, 4, 22 ],
      "exit" : false,
      "out-vars" : [ 43, 45, 1, 49, 22, 23, 20, 46, 0, 5, 12, 3, 4, 26, 25 ],
      "decl-vars" : [ ],
      "line-start" : 307,
      "ast" : {
        "condition" : {
          "go-type" : 192,
          "kind" : "constant",
          "value" : {
            "type" : "BOOL",
            "value" : "false"
          }
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 309,
      "code" : "if raceenabled {\n\tracefree(unsafe.Pointer(x), size)\n}",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 59 ],
      "in-vars" : [ 0, 1, 22, 23, 3, 12, 45, 20, 43, 26, 5, 25, 4, 49, 46 ],
      "exit" : false,
      "out-vars" : [ 3, 49, 5, 20, 12, 4, 22, 43, 1, 46, 26, 45, 23, 25, 0 ],
      "decl-vars" : [ ],
      "line-start" : 308,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "coerced-to" : {
              "go-type" : 37,
              "kind" : "type",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 1,
                "value" : "unsafe"
              },
              "type" : "identifier",
              "value" : {
                "go-type" : 37,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "Pointer"
              }
            },
            "go-type" : 37,
            "kind" : "expression",
            "target" : {
              "go-type" : 10,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "x",
                "variable" : 49
              }
            },
            "type" : "cast"
          }, {
            "go-type" : 10,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "size",
              "variable" : 22
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 224,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 15,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "racefree"
            }
          },
          "go-type" : 59,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 308,
      "code" : "racefree(unsafe.Pointer(x), size)",
      "entry" : false,
      "use-vars" : [ 49, 22 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 60, 61 ],
      "in-vars" : [ 4, 46, 5, 3, 12, 43, 25, 49, 26, 45, 23, 20, 1, 22, 0 ],
      "exit" : false,
      "out-vars" : [ 45, 25, 20, 49, 46, 0, 26, 22, 43, 23, 5, 3, 1, 12, 4 ],
      "decl-vars" : [ ],
      "line-start" : 310,
      "ast" : {
        "condition" : {
          "go-type" : 192,
          "kind" : "constant",
          "value" : {
            "type" : "BOOL",
            "value" : "false"
          }
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 312,
      "code" : "if msanenabled {\n\tmsanfree(unsafe.Pointer(x), size)\n}",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 61 ],
      "in-vars" : [ 49, 5, 45, 1, 0, 25, 4, 22, 46, 43, 26, 23, 20, 3, 12 ],
      "exit" : false,
      "out-vars" : [ 45, 23, 4, 22, 46, 0, 26, 12, 43, 5, 25, 20, 3, 1 ],
      "decl-vars" : [ ],
      "line-start" : 311,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "coerced-to" : {
              "go-type" : 37,
              "kind" : "type",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 1,
                "value" : "unsafe"
              },
              "type" : "identifier",
              "value" : {
                "go-type" : 37,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "Pointer"
              }
            },
            "go-type" : 37,
            "kind" : "expression",
            "target" : {
              "go-type" : 10,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "x",
                "variable" : 49
              }
            },
            "type" : "cast"
          }, {
            "go-type" : 10,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "size",
              "variable" : 22
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 226,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 16,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "msanfree"
            }
          },
          "go-type" : 59,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 311,
      "code" : "msanfree(unsafe.Pointer(x), size)",
      "entry" : false,
      "use-vars" : [ 49, 22 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 62 ],
      "in-vars" : [ 22, 0, 20, 3, 43, 45, 25, 12, 26, 5, 4, 46, 23, 1 ],
      "exit" : false,
      "out-vars" : [ 43, 4, 22, 45, 23, 25, 46, 5, 12, 1, 0, 26, 20, 3 ],
      "decl-vars" : [ ],
      "line-start" : 314,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "function" : 17,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "advance"
            },
            "go-type" : 58,
            "kind" : "expression",
            "target" : {
              "go-type" : 208,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "mbits",
                "variable" : 45
              }
            },
            "type" : "selector"
          },
          "go-type" : 59,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 314,
      "code" : "mbits.advance()",
      "entry" : false,
      "use-vars" : [ 45 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 50 ],
      "in-vars" : [ 20, 22, 46, 26, 25, 4, 43, 5, 45, 23, 12, 0, 3, 1 ],
      "exit" : false,
      "out-vars" : [ 1, 43, 20, 4, 0, 12, 22, 26, 5, 25, 3, 46, 45, 23 ],
      "decl-vars" : [ ],
      "line-start" : 315,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "function" : 17,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "advance"
            },
            "go-type" : 58,
            "kind" : "expression",
            "target" : {
              "go-type" : 208,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "abits",
                "variable" : 46
              }
            },
            "type" : "selector"
          },
          "go-type" : 59,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 315,
      "code" : "abits.advance()",
      "entry" : false,
      "use-vars" : [ 46 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 64 ],
      "in-vars" : [ 25, 3, 12, 1, 0, 5, 23, 20, 4, 22, 26 ],
      "exit" : false,
      "out-vars" : [ 26, 25, 20, 3, 1, 12, 4, 22, 0, 50, 5, 23 ],
      "decl-vars" : [ 50 ],
      "line-start" : 320,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "nalloc"
          }
        } ],
        "right" : [ {
          "coerced-to" : {
            "go-type" : 17,
            "kind" : "type",
            "type" : "identifier",
            "value" : {
              "go-type" : 17,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "uint16"
            }
          },
          "go-type" : 17,
          "kind" : "expression",
          "target" : {
            "arguments" : [ ],
            "ellipsis" : false,
            "function" : {
              "field" : {
                "function" : 18,
                "ident-kind" : "Func",
                "kind" : "ident",
                "value" : "countAlloc"
              },
              "go-type" : 228,
              "kind" : "expression",
              "target" : {
                "go-type" : 4,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "s",
                  "variable" : 0
                }
              },
              "type" : "selector"
            },
            "go-type" : 79,
            "kind" : "expression",
            "type" : "call"
          },
          "type" : "cast"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 320,
      "code" : "nalloc := uint16(s.countAlloc())",
      "entry" : false,
      "use-vars" : [ 0 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 65, 67 ],
      "in-vars" : [ 22, 0, 26, 25, 3, 50, 5, 23, 20, 12, 4, 1 ],
      "exit" : false,
      "out-vars" : [ 50, 26, 23, 25, 4, 12, 1, 22, 0, 5, 20, 3 ],
      "decl-vars" : [ ],
      "line-start" : 321,
      "ast" : {
        "condition" : {
          "go-type" : 192,
          "kind" : "expression",
          "left" : {
            "go-type" : 192,
            "kind" : "expression",
            "left" : {
              "arguments" : [ ],
              "ellipsis" : false,
              "function" : {
                "field" : {
                  "function" : 19,
                  "ident-kind" : "Func",
                  "kind" : "ident",
                  "value" : "sizeclass"
                },
                "go-type" : 230,
                "kind" : "expression",
                "target" : {
                  "go-type" : 18,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "spc",
                    "variable" : 20
                  }
                },
                "type" : "selector"
              },
              "go-type" : 63,
              "kind" : "expression",
              "type" : "call"
            },
            "operator" : "==",
            "right" : {
              "go-type" : 63,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "0"
              }
            },
            "type" : "binary"
          },
          "operator" : "&&",
          "right" : {
            "go-type" : 192,
            "kind" : "expression",
            "left" : {
              "go-type" : 17,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "nalloc",
                "variable" : 50
              }
            },
            "operator" : "==",
            "right" : {
              "go-type" : 17,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "0"
              }
            },
            "type" : "binary"
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 324,
      "code" : "if spc.sizeclass() == 0 && nalloc == 0 {\n\ts.needzero = 1\n\tfreeToHeap = true\n}",
      "entry" : false,
      "use-vars" : [ 50, 20 ]
    }, {
      "update-vars" : [ 0 ],
      "successors" : [ 66 ],
      "in-vars" : [ 12, 22, 50, 5, 23, 25, 20, 3, 4, 1, 0 ],
      "exit" : false,
      "out-vars" : [ 4, 1, 5, 23, 25, 20, 3, 22, 0, 50, 12 ],
      "decl-vars" : [ ],
      "line-start" : 322,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "needzero",
            "variable" : 51
          },
          "go-type" : 15,
          "kind" : "expression",
          "target" : {
            "go-type" : 4,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "s",
              "variable" : 0
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "go-type" : 15,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "1"
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 322,
      "code" : "s.needzero = 1",
      "entry" : false,
      "use-vars" : [ 0 ]
    }, {
      "update-vars" : [ 26 ],
      "successors" : [ 67 ],
      "in-vars" : [ 22, 5, 23, 20, 3, 12, 0, 50, 25, 4, 1 ],
      "exit" : false,
      "out-vars" : [ 12, 4, 1, 22, 50, 25, 20, 3, 0, 26, 5, 23 ],
      "decl-vars" : [ ],
      "line-start" : 323,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 2,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "freeToHeap",
            "variable" : 26
          }
        } ],
        "right" : [ {
          "go-type" : 2,
          "kind" : "constant",
          "value" : {
            "type" : "BOOL",
            "value" : "true"
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 26 ],
      "line-end" : 323,
      "code" : "freeToHeap = true",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 68 ],
      "in-vars" : [ 0, 26, 5, 3, 1, 22, 50, 23, 25, 20, 12, 4 ],
      "exit" : false,
      "out-vars" : [ 23, 25, 20, 3, 12, 4, 53, 0, 50, 26, 5, 1, 22 ],
      "decl-vars" : [ 53 ],
      "line-start" : 325,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "nfreed"
          }
        } ],
        "right" : [ {
          "go-type" : 17,
          "kind" : "expression",
          "left" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "allocCount",
              "variable" : 52
            },
            "go-type" : 17,
            "kind" : "expression",
            "target" : {
              "go-type" : 4,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "s",
                "variable" : 0
              }
            },
            "type" : "selector"
          },
          "operator" : "-",
          "right" : {
            "go-type" : 17,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "nalloc",
              "variable" : 50
            }
          },
          "type" : "binary"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 325,
      "code" : "nfreed := s.allocCount - nalloc",
      "entry" : false,
      "use-vars" : [ 0, 50 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 69, 71 ],
      "in-vars" : [ 1, 0, 53, 50, 26, 23, 25, 4, 22, 5, 20, 3, 12 ],
      "exit" : false,
      "out-vars" : [ 50, 5, 25, 3, 1, 4, 22, 0, 53, 26, 23, 20, 12 ],
      "decl-vars" : [ ],
      "line-start" : 326,
      "ast" : {
        "condition" : {
          "go-type" : 192,
          "kind" : "expression",
          "left" : {
            "go-type" : 17,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "nalloc",
              "variable" : 50
            }
          },
          "operator" : ">",
          "right" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "allocCount",
              "variable" : 52
            },
            "go-type" : 17,
            "kind" : "expression",
            "target" : {
              "go-type" : 4,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "s",
                "variable" : 0
              }
            },
            "type" : "selector"
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 329,
      "code" : "if nalloc > s.allocCount {\n\tprint(\"runtime: nelems=\", s.nelems, \" nalloc=\", nalloc, \" previous allocCount=\", s.allocCount, \" nfreed=\", nfreed, \"\\n\")\n\tthrow(\"sweep increased allocation count\")\n}",
      "entry" : false,
      "use-vars" : [ 50, 0 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 70 ],
      "in-vars" : [ 50, 5, 23, 20, 1, 22, 0, 53, 26, 25, 3, 12, 4 ],
      "exit" : false,
      "out-vars" : [ 0, 53, 5, 20, 3, 12, 4, 1, 22, 50, 26, 23, 25 ],
      "decl-vars" : [ ],
      "line-start" : 327,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 62,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "runtime: nelems="
            }
          }, {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "nelems",
              "variable" : 44
            },
            "go-type" : 10,
            "kind" : "expression",
            "target" : {
              "go-type" : 4,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "s",
                "variable" : 0
              }
            },
            "type" : "selector"
          }, {
            "go-type" : 62,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : " nalloc="
            }
          }, {
            "go-type" : 17,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "nalloc",
              "variable" : 50
            }
          }, {
            "go-type" : 62,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : " previous allocCount="
            }
          }, {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "allocCount",
              "variable" : 52
            },
            "go-type" : 17,
            "kind" : "expression",
            "target" : {
              "go-type" : 4,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "s",
                "variable" : 0
              }
            },
            "type" : "selector"
          }, {
            "go-type" : 62,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : " nfreed="
            }
          }, {
            "go-type" : 17,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "nfreed",
              "variable" : 53
            }
          }, {
            "go-type" : 62,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "\n"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 232,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Builtin",
              "kind" : "ident",
              "value" : "print"
            }
          },
          "go-type" : 59,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 327,
      "code" : "print(\"runtime: nelems=\", s.nelems, \" nalloc=\", nalloc, \" previous allocCount=\", s.allocCount, \" nfreed=\", nfreed, \"\\n\")",
      "entry" : false,
      "use-vars" : [ 0, 50, 53 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 71 ],
      "in-vars" : [ 22, 5, 20, 12, 4, 25, 3, 1, 0, 53, 50, 26, 23 ],
      "exit" : false,
      "out-vars" : [ 53, 50, 0, 26, 5, 23, 25, 20, 3, 12, 22, 1, 4 ],
      "decl-vars" : [ ],
      "line-start" : 328,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 62,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "sweep increased allocation count"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 193,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 2,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "throw"
            }
          },
          "go-type" : 59,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 328,
      "code" : "throw(\"sweep increased allocation count\")",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ 0 ],
      "successors" : [ 72 ],
      "in-vars" : [ 20, 3, 12, 4, 22, 53, 5, 25, 1, 0, 50, 26, 23 ],
      "exit" : false,
      "out-vars" : [ 4, 22, 53, 26, 5, 25, 1, 0, 23, 20, 3, 12 ],
      "decl-vars" : [ ],
      "line-start" : 331,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "allocCount",
            "variable" : 52
          },
          "go-type" : 17,
          "kind" : "expression",
          "target" : {
            "go-type" : 4,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "s",
              "variable" : 0
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "go-type" : 17,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "nalloc",
            "variable" : 50
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 331,
      "code" : "s.allocCount = nalloc",
      "entry" : false,
      "use-vars" : [ 50, 0 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 73 ],
      "in-vars" : [ 3, 12, 23, 25, 20, 26, 5, 4, 1, 22, 0, 53 ],
      "exit" : false,
      "out-vars" : [ 23, 25, 20, 22, 0, 53, 26, 5, 3, 12, 1, 4, 54 ],
      "decl-vars" : [ 54 ],
      "line-start" : 332,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "wasempty"
          }
        } ],
        "right" : [ {
          "go-type" : 2,
          "kind" : "expression",
          "left" : {
            "arguments" : [ ],
            "ellipsis" : false,
            "function" : {
              "field" : {
                "function" : 20,
                "ident-kind" : "Func",
                "kind" : "ident",
                "value" : "nextFreeIndex"
              },
              "go-type" : 206,
              "kind" : "expression",
              "target" : {
                "go-type" : 4,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "s",
                  "variable" : 0
                }
              },
              "type" : "selector"
            },
            "go-type" : 10,
            "kind" : "expression",
            "type" : "call"
          },
          "operator" : "==",
          "right" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "nelems",
              "variable" : 44
            },
            "go-type" : 10,
            "kind" : "expression",
            "target" : {
              "go-type" : 4,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "s",
                "variable" : 0
              }
            },
            "type" : "selector"
          },
          "type" : "binary"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 332,
      "code" : "wasempty := s.nextFreeIndex() == s.nelems",
      "entry" : false,
      "use-vars" : [ 0 ]
    }, {
      "update-vars" : [ 0 ],
      "successors" : [ 74 ],
      "in-vars" : [ 5, 25, 20, 3, 12, 4, 0, 26, 1, 23, 54, 22, 53 ],
      "exit" : false,
      "out-vars" : [ 0, 53, 26, 5, 23, 25, 3, 4, 1, 54, 22, 20, 12 ],
      "decl-vars" : [ ],
      "line-start" : 333,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "freeindex",
            "variable" : 48
          },
          "go-type" : 10,
          "kind" : "expression",
          "target" : {
            "go-type" : 4,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "s",
              "variable" : 0
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "go-type" : 10,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "0"
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 333,
      "code" : "s.freeindex = 0",
      "entry" : false,
      "use-vars" : [ 0 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 75, 76 ],
      "in-vars" : [ 3, 12, 4, 22, 53, 26, 5, 25, 1, 54, 0, 23, 20 ],
      "exit" : false,
      "out-vars" : [ 26, 5, 12, 4, 54, 22, 0, 53, 23, 25, 20, 1 ],
      "decl-vars" : [ ],
      "line-start" : 334,
      "ast" : {
        "condition" : {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "enabled",
            "variable" : 16
          },
          "go-type" : 2,
          "kind" : "expression",
          "target" : {
            "go-type" : 28,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "trace",
              "variable" : 3
            }
          },
          "type" : "selector"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 336,
      "code" : "if trace.enabled {\n\tgetg().m.p.ptr().traceReclaimed += uintptr(nfreed) * s.elemsize\n}",
      "entry" : false,
      "use-vars" : [ 3 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 76 ],
      "in-vars" : [ 1, 0, 53, 26, 23, 25, 20, 22, 5, 12, 4, 54 ],
      "exit" : false,
      "out-vars" : [ 23, 25, 4, 22, 0, 26, 5, 54, 53, 20, 12, 1 ],
      "decl-vars" : [ ],
      "line-start" : 335,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "traceReclaimed",
            "variable" : 56
          },
          "go-type" : 10,
          "kind" : "expression",
          "target" : {
            "arguments" : [ ],
            "ellipsis" : false,
            "function" : {
              "field" : {
                "function" : 21,
                "ident-kind" : "Func",
                "kind" : "ident",
                "value" : "ptr"
              },
              "go-type" : 276,
              "kind" : "expression",
              "target" : {
                "field" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "p",
                  "variable" : 55
                },
                "go-type" : 60,
                "kind" : "expression",
                "target" : {
                  "field" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "m",
                    "variable" : 7
                  },
                  "go-type" : 46,
                  "kind" : "expression",
                  "target" : {
                    "arguments" : [ ],
                    "ellipsis" : false,
                    "function" : {
                      "go-type" : 190,
                      "kind" : "expression",
                      "type" : "identifier",
                      "value" : {
                        "function" : 1,
                        "ident-kind" : "Func",
                        "kind" : "ident",
                        "value" : "getg"
                      }
                    },
                    "go-type" : 29,
                    "kind" : "expression",
                    "type" : "call"
                  },
                  "type" : "selector"
                },
                "type" : "selector"
              },
              "type" : "selector"
            },
            "go-type" : 234,
            "kind" : "expression",
            "type" : "call"
          },
          "type" : "selector"
        } ],
        "operator" : "+",
        "right" : [ {
          "go-type" : 10,
          "kind" : "expression",
          "left" : {
            "coerced-to" : {
              "go-type" : 10,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 10,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "uintptr"
              }
            },
            "go-type" : 10,
            "kind" : "expression",
            "target" : {
              "go-type" : 17,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "nfreed",
                "variable" : 53
              }
            },
            "type" : "cast"
          },
          "operator" : "*",
          "right" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "elemsize",
              "variable" : 21
            },
            "go-type" : 10,
            "kind" : "expression",
            "target" : {
              "go-type" : 4,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "s",
                "variable" : 0
              }
            },
            "type" : "selector"
          },
          "type" : "binary"
        } ],
        "type" : "assign-operator"
      },
      "assign-vars" : [ ],
      "line-end" : 335,
      "code" : "getg().m.p.ptr().traceReclaimed += uintptr(nfreed) * s.elemsize",
      "entry" : false,
      "use-vars" : [ 53, 0 ]
    }, {
      "update-vars" : [ 0 ],
      "successors" : [ 77 ],
      "in-vars" : [ 26, 23, 20, 12, 1, 54, 22, 0, 53, 5, 25, 4 ],
      "exit" : false,
      "out-vars" : [ 22, 0, 53, 5, 25, 4, 26, 23, 20, 12, 1, 54 ],
      "decl-vars" : [ ],
      "line-start" : 340,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "allocBits",
            "variable" : 57
          },
          "go-type" : 13,
          "kind" : "expression",
          "target" : {
            "go-type" : 4,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "s",
              "variable" : 0
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "gcmarkBits",
            "variable" : 58
          },
          "go-type" : 13,
          "kind" : "expression",
          "target" : {
            "go-type" : 4,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "s",
              "variable" : 0
            }
          },
          "type" : "selector"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 340,
      "code" : "s.allocBits = s.gcmarkBits",
      "entry" : false,
      "use-vars" : [ 0 ]
    }, {
      "update-vars" : [ 0 ],
      "successors" : [ 78 ],
      "in-vars" : [ 53, 5, 54, 22, 26, 23, 25, 20, 12, 4, 1, 0 ],
      "exit" : false,
      "out-vars" : [ 22, 26, 20, 4, 1, 0, 53, 5, 23, 25, 12, 54 ],
      "decl-vars" : [ ],
      "line-start" : 341,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "gcmarkBits",
            "variable" : 58
          },
          "go-type" : 13,
          "kind" : "expression",
          "target" : {
            "go-type" : 4,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "s",
              "variable" : 0
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "arguments" : [ {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "nelems",
              "variable" : 44
            },
            "go-type" : 10,
            "kind" : "expression",
            "target" : {
              "go-type" : 4,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "s",
                "variable" : 0
              }
            },
            "type" : "selector"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 278,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 22,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "newMarkBits"
            }
          },
          "go-type" : 13,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 341,
      "code" : "s.gcmarkBits = newMarkBits(s.nelems)",
      "entry" : false,
      "use-vars" : [ 0 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 79 ],
      "in-vars" : [ 22, 25, 20, 4, 1, 0, 53, 26, 5, 23, 12, 54 ],
      "exit" : false,
      "out-vars" : [ 20, 4, 22, 53, 26, 5, 23, 0, 25, 12, 1, 54 ],
      "decl-vars" : [ ],
      "line-start" : 344,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 10,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "function" : 23,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "refillAllocCache"
            },
            "go-type" : 281,
            "kind" : "expression",
            "target" : {
              "go-type" : 4,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "s",
                "variable" : 0
              }
            },
            "type" : "selector"
          },
          "go-type" : 59,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 344,
      "code" : "s.refillAllocCache(0)",
      "entry" : false,
      "use-vars" : [ 0 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 81, 85 ],
      "in-vars" : [ 23, 20, 12, 4, 26, 5, 53, 25, 1, 54, 22, 0 ],
      "exit" : false,
      "out-vars" : [ 12, 54, 22, 23, 20, 5, 25, 4, 1, 0, 53, 26 ],
      "decl-vars" : [ ],
      "line-start" : 351,
      "ast" : {
        "condition" : {
          "go-type" : 2,
          "kind" : "expression",
          "left" : {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "freeToHeap",
              "variable" : 26
            }
          },
          "operator" : "||",
          "right" : {
            "go-type" : 2,
            "kind" : "expression",
            "left" : {
              "go-type" : 17,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "nfreed",
                "variable" : 53
              }
            },
            "operator" : "==",
            "right" : {
              "go-type" : 17,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "0"
              }
            },
            "type" : "binary"
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 362,
      "code" : "if freeToHeap || nfreed == 0 {\n\n\tif state := s.state.get(); state != mSpanInUse || s.sweepgen != sweepgen-1 {\n\t\tprint(\"mspan.sweep: state=\", state, \" sweepgen=\", s.sweepgen, \" mheap.sweepgen=\", sweepgen, \"\\n\")\n\t\tthrow(\"mspan.sweep: bad span state after sweep\")\n\t}\n\n\tatomic.Store(&s.sweepgen, sweepgen)\n}",
      "entry" : false,
      "use-vars" : [ 26, 53 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 82, 84 ],
      "in-vars" : [ 54, 5, 23, 4, 26, 25, 20, 12, 59, 22, 0, 53, 1 ],
      "exit" : false,
      "out-vars" : [ 5, 4, 1, 53, 26, 23, 25, 20, 12, 59, 54, 22, 0 ],
      "decl-vars" : [ ],
      "line-start" : 354,
      "ast" : {
        "condition" : {
          "go-type" : 192,
          "kind" : "expression",
          "left" : {
            "go-type" : 192,
            "kind" : "expression",
            "left" : {
              "go-type" : 21,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "state",
                "variable" : 59
              }
            },
            "operator" : "!=",
            "right" : {
              "go-type" : 21,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "1"
              }
            },
            "type" : "binary"
          },
          "operator" : "||",
          "right" : {
            "go-type" : 192,
            "kind" : "expression",
            "left" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "sweepgen",
                "variable" : 15
              },
              "go-type" : 16,
              "kind" : "expression",
              "target" : {
                "go-type" : 4,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "s",
                  "variable" : 0
                }
              },
              "type" : "selector"
            },
            "operator" : "!=",
            "right" : {
              "go-type" : 16,
              "kind" : "expression",
              "left" : {
                "go-type" : 16,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "sweepgen",
                  "variable" : 12
                }
              },
              "operator" : "-",
              "right" : {
                "go-type" : 16,
                "kind" : "constant",
                "value" : {
                  "type" : "INT",
                  "value" : "1"
                }
              },
              "type" : "binary"
            },
            "type" : "binary"
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 357,
      "code" : "if state := s.state.get(); state != mSpanInUse || s.sweepgen != sweepgen-1 {\n\tprint(\"mspan.sweep: state=\", state, \" sweepgen=\", s.sweepgen, \" mheap.sweepgen=\", sweepgen, \"\\n\")\n\tthrow(\"mspan.sweep: bad span state after sweep\")\n}",
      "entry" : false,
      "use-vars" : [ 12, 59, 0 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 80 ],
      "in-vars" : [ 4, 54, 22, 5, 23, 25, 20, 12, 1, 0, 53, 26 ],
      "exit" : false,
      "out-vars" : [ 12, 59, 4, 54, 22, 5, 23, 20, 1, 0, 53, 26, 25 ],
      "decl-vars" : [ 59 ],
      "line-start" : 354,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "state"
          }
        } ],
        "right" : [ {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "function" : 3,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "get"
            },
            "go-type" : 195,
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "state",
                "variable" : 13
              },
              "go-type" : 19,
              "kind" : "expression",
              "target" : {
                "go-type" : 4,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "s",
                  "variable" : 0
                }
              },
              "type" : "selector"
            },
            "type" : "selector"
          },
          "go-type" : 21,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 354,
      "code" : "state := s.state.get()",
      "entry" : false,
      "use-vars" : [ 0 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 83 ],
      "in-vars" : [ 1, 0, 26, 5, 25, 12, 59, 4, 22, 53, 23, 20, 54 ],
      "exit" : false,
      "out-vars" : [ 23, 20, 12, 1, 53, 26, 5, 25, 4, 54, 22, 0 ],
      "decl-vars" : [ ],
      "line-start" : 355,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 62,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "mspan.sweep: state="
            }
          }, {
            "go-type" : 21,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "state",
              "variable" : 59
            }
          }, {
            "go-type" : 62,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : " sweepgen="
            }
          }, {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "sweepgen",
              "variable" : 15
            },
            "go-type" : 16,
            "kind" : "expression",
            "target" : {
              "go-type" : 4,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "s",
                "variable" : 0
              }
            },
            "type" : "selector"
          }, {
            "go-type" : 62,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : " mheap.sweepgen="
            }
          }, {
            "go-type" : 16,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "sweepgen",
              "variable" : 12
            }
          }, {
            "go-type" : 62,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "\n"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 197,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Builtin",
              "kind" : "ident",
              "value" : "print"
            }
          },
          "go-type" : 59,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 355,
      "code" : "print(\"mspan.sweep: state=\", state, \" sweepgen=\", s.sweepgen, \" mheap.sweepgen=\", sweepgen, \"\\n\")",
      "entry" : false,
      "use-vars" : [ 59, 0, 12 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 84 ],
      "in-vars" : [ 20, 4, 1, 54, 0, 53, 5, 25, 12, 22, 26, 23 ],
      "exit" : false,
      "out-vars" : [ 5, 23, 25, 12, 1, 22, 53, 26, 20, 4, 54, 0 ],
      "decl-vars" : [ ],
      "line-start" : 356,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 62,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "mspan.sweep: bad span state after sweep"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 193,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 2,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "throw"
            }
          },
          "go-type" : 59,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 356,
      "code" : "throw(\"mspan.sweep: bad span state after sweep\")",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 85 ],
      "in-vars" : [ 26, 23, 25, 20, 54, 22, 53, 12, 4, 1, 0, 5 ],
      "exit" : false,
      "out-vars" : [ 23, 4, 0, 26, 5, 25, 20, 12, 1, 54, 22, 53 ],
      "decl-vars" : [ ],
      "line-start" : 361,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 285,
            "kind" : "expression",
            "operator" : "&",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "sweepgen",
                "variable" : 15
              },
              "go-type" : 16,
              "kind" : "expression",
              "target" : {
                "go-type" : 4,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "s",
                  "variable" : 0
                }
              },
              "type" : "selector"
            },
            "type" : "unary"
          }, {
            "go-type" : 16,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "sweepgen",
              "variable" : 12
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 283,
            "kind" : "expression",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 3,
              "value" : "atomic"
            },
            "type" : "identifier",
            "value" : {
              "function" : 24,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "Store"
            }
          },
          "go-type" : 59,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 361,
      "code" : "atomic.Store(&s.sweepgen, sweepgen)",
      "entry" : false,
      "use-vars" : [ 0, 12 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 86, 88 ],
      "in-vars" : [ 22, 5, 25, 4, 54, 12, 1, 0, 53, 26, 23, 20 ],
      "exit" : false,
      "out-vars" : [ 20, 12, 1, 54, 22, 23, 26, 5, 25, 4, 0, 53 ],
      "decl-vars" : [ ],
      "line-start" : 364,
      "ast" : {
        "condition" : {
          "go-type" : 192,
          "kind" : "expression",
          "left" : {
            "go-type" : 192,
            "kind" : "expression",
            "left" : {
              "go-type" : 17,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "nfreed",
                "variable" : 53
              }
            },
            "operator" : ">",
            "right" : {
              "go-type" : 17,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "0"
              }
            },
            "type" : "binary"
          },
          "operator" : "&&",
          "right" : {
            "go-type" : 192,
            "kind" : "expression",
            "left" : {
              "arguments" : [ ],
              "ellipsis" : false,
              "function" : {
                "field" : {
                  "function" : 19,
                  "ident-kind" : "Func",
                  "kind" : "ident",
                  "value" : "sizeclass"
                },
                "go-type" : 230,
                "kind" : "expression",
                "target" : {
                  "go-type" : 18,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "spc",
                    "variable" : 20
                  }
                },
                "type" : "selector"
              },
              "go-type" : 63,
              "kind" : "expression",
              "type" : "call"
            },
            "operator" : "!=",
            "right" : {
              "go-type" : 63,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "0"
              }
            },
            "type" : "binary"
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 394,
      "code" : "if nfreed > 0 && spc.sizeclass() != 0 {\n\tc.local_nsmallfree[spc.sizeclass()] += uintptr(nfreed)\n\tres = mheap_.central[spc].mcentral.freeSpan(s, preserve, wasempty)\n\n} else if freeToHeap {\n\n\tif debug.efence > 0 {\n\t\ts.limit = 0\n\t\tsysFault(unsafe.Pointer(s.base()), size)\n\t} else {\n\t\tmheap_.freeSpan(s)\n\t}\n\tc.local_nlargefree++\n\tc.local_largefree += size\n\tres = true\n}",
      "entry" : false,
      "use-vars" : [ 53, 20 ]
    }, {
      "update-vars" : [ 25 ],
      "successors" : [ 87 ],
      "in-vars" : [ 5, 25, 20, 12, 1, 54, 0, 53 ],
      "exit" : false,
      "out-vars" : [ 20, 12, 1, 54, 0, 5 ],
      "decl-vars" : [ ],
      "line-start" : 365,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 10,
          "index" : {
            "arguments" : [ ],
            "ellipsis" : false,
            "function" : {
              "field" : {
                "function" : 19,
                "ident-kind" : "Func",
                "kind" : "ident",
                "value" : "sizeclass"
              },
              "go-type" : 230,
              "kind" : "expression",
              "target" : {
                "go-type" : 18,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "spc",
                  "variable" : 20
                }
              },
              "type" : "selector"
            },
            "go-type" : 63,
            "kind" : "expression",
            "type" : "call"
          },
          "kind" : "expression",
          "target" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "local_nsmallfree",
              "variable" : 60
            },
            "go-type" : 76,
            "kind" : "expression",
            "target" : {
              "go-type" : 69,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "c",
                "variable" : 25
              }
            },
            "type" : "selector"
          },
          "type" : "index"
        } ],
        "operator" : "+",
        "right" : [ {
          "coerced-to" : {
            "go-type" : 10,
            "kind" : "type",
            "type" : "identifier",
            "value" : {
              "go-type" : 10,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "uintptr"
            }
          },
          "go-type" : 10,
          "kind" : "expression",
          "target" : {
            "go-type" : 17,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "nfreed",
              "variable" : 53
            }
          },
          "type" : "cast"
        } ],
        "type" : "assign-operator"
      },
      "assign-vars" : [ ],
      "line-end" : 365,
      "code" : "c.local_nsmallfree[spc.sizeclass()] += uintptr(nfreed)",
      "entry" : false,
      "use-vars" : [ 53, 25, 20 ]
    }, {
      "update-vars" : [ 23 ],
      "successors" : [ 96 ],
      "in-vars" : [ 12, 1, 54, 0, 5, 20 ],
      "exit" : false,
      "out-vars" : [ 0, 5, 23, 12 ],
      "decl-vars" : [ ],
      "line-start" : 366,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 2,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "res",
            "variable" : 23
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 4,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "s",
              "variable" : 0
            }
          }, {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "preserve",
              "variable" : 1
            }
          }, {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "wasempty",
              "variable" : 54
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "function" : 25,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "freeSpan"
            },
            "go-type" : 286,
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "mcentral",
                "variable" : 62
              },
              "go-type" : 174,
              "kind" : "expression",
              "target" : {
                "go-type" : 173,
                "index" : {
                  "go-type" : 18,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "spc",
                    "variable" : 20
                  }
                },
                "kind" : "expression",
                "target" : {
                  "field" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "central",
                    "variable" : 61
                  },
                  "go-type" : 172,
                  "kind" : "expression",
                  "target" : {
                    "go-type" : 126,
                    "kind" : "expression",
                    "type" : "identifier",
                    "value" : {
                      "ident-kind" : "Var",
                      "kind" : "ident",
                      "value" : "mheap_",
                      "variable" : 5
                    }
                  },
                  "type" : "selector"
                },
                "type" : "index"
              },
              "type" : "selector"
            },
            "type" : "selector"
          },
          "go-type" : 2,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 23 ],
      "line-end" : 366,
      "code" : "res = mheap_.central[spc].mcentral.freeSpan(s, preserve, wasempty)",
      "entry" : false,
      "use-vars" : [ 20, 0, 1, 54, 5 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 89, 96 ],
      "in-vars" : [ 0, 26, 5, 23, 25, 12, 4, 22 ],
      "exit" : false,
      "out-vars" : [ 23, 25, 12, 4, 22, 0, 5 ],
      "decl-vars" : [ ],
      "line-start" : 368,
      "ast" : {
        "condition" : {
          "go-type" : 2,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "freeToHeap",
            "variable" : 26
          }
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 394,
      "code" : "if freeToHeap {\n\n\tif debug.efence > 0 {\n\t\ts.limit = 0\n\t\tsysFault(unsafe.Pointer(s.base()), size)\n\t} else {\n\t\tmheap_.freeSpan(s)\n\t}\n\tc.local_nlargefree++\n\tc.local_largefree += size\n\tres = true\n}",
      "entry" : false,
      "use-vars" : [ 26 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 90, 92 ],
      "in-vars" : [ 22, 0, 5, 25, 12, 4 ],
      "exit" : false,
      "out-vars" : [ 25, 12, 22, 0, 5 ],
      "decl-vars" : [ ],
      "line-start" : 385,
      "ast" : {
        "condition" : {
          "go-type" : 192,
          "kind" : "expression",
          "left" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "efence",
              "variable" : 63
            },
            "go-type" : 42,
            "kind" : "expression",
            "target" : {
              "go-type" : 125,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "debug",
                "variable" : 4
              }
            },
            "type" : "selector"
          },
          "operator" : ">",
          "right" : {
            "go-type" : 42,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 390,
      "code" : "if debug.efence > 0 {\n\ts.limit = 0\n\tsysFault(unsafe.Pointer(s.base()), size)\n} else {\n\tmheap_.freeSpan(s)\n}",
      "entry" : false,
      "use-vars" : [ 4 ]
    }, {
      "update-vars" : [ 0 ],
      "successors" : [ 91 ],
      "in-vars" : [ 0, 5, 25, 12, 22 ],
      "exit" : false,
      "out-vars" : [ 0, 5, 25, 12, 22 ],
      "decl-vars" : [ ],
      "line-start" : 386,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "limit",
            "variable" : 64
          },
          "go-type" : 10,
          "kind" : "expression",
          "target" : {
            "go-type" : 4,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "s",
              "variable" : 0
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "go-type" : 10,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "0"
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 386,
      "code" : "s.limit = 0",
      "entry" : false,
      "use-vars" : [ 0 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 93 ],
      "in-vars" : [ 22, 0, 5, 25, 12 ],
      "exit" : false,
      "out-vars" : [ 12, 22, 0, 5, 25 ],
      "decl-vars" : [ ],
      "line-start" : 387,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "coerced-to" : {
              "go-type" : 37,
              "kind" : "type",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 1,
                "value" : "unsafe"
              },
              "type" : "identifier",
              "value" : {
                "go-type" : 37,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "Pointer"
              }
            },
            "go-type" : 37,
            "kind" : "expression",
            "target" : {
              "arguments" : [ ],
              "ellipsis" : false,
              "function" : {
                "field" : {
                  "function" : 6,
                  "ident-kind" : "Func",
                  "kind" : "ident",
                  "value" : "base"
                },
                "go-type" : 206,
                "kind" : "expression",
                "target" : {
                  "go-type" : 4,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "s",
                    "variable" : 0
                  }
                },
                "type" : "selector"
              },
              "go-type" : 10,
              "kind" : "expression",
              "type" : "call"
            },
            "type" : "cast"
          }, {
            "go-type" : 10,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "size",
              "variable" : 22
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 288,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 26,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "sysFault"
            }
          },
          "go-type" : 59,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 387,
      "code" : "sysFault(unsafe.Pointer(s.base()), size)",
      "entry" : false,
      "use-vars" : [ 22, 0 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 93 ],
      "in-vars" : [ 25, 12, 22, 0, 5 ],
      "exit" : false,
      "out-vars" : [ 22, 0, 5, 25, 12 ],
      "decl-vars" : [ ],
      "line-start" : 389,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 4,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "s",
              "variable" : 0
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "function" : 27,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "freeSpan"
            },
            "go-type" : 290,
            "kind" : "expression",
            "target" : {
              "go-type" : 126,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "mheap_",
                "variable" : 5
              }
            },
            "type" : "selector"
          },
          "go-type" : 59,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 389,
      "code" : "mheap_.freeSpan(s)",
      "entry" : false,
      "use-vars" : [ 0, 5 ]
    }, {
      "update-vars" : [ 25 ],
      "successors" : [ 94 ],
      "in-vars" : [ 25, 12, 22, 0, 5 ],
      "exit" : false,
      "out-vars" : [ 25, 12, 22, 0, 5 ],
      "decl-vars" : [ ],
      "line-start" : 391,
      "ast" : {
        "kind" : "statement",
        "operation" : "++",
        "target" : {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "local_nlargefree",
            "variable" : 65
          },
          "go-type" : 10,
          "kind" : "expression",
          "target" : {
            "go-type" : 69,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "c",
              "variable" : 25
            }
          },
          "type" : "selector"
        },
        "type" : "crement"
      },
      "assign-vars" : [ ],
      "line-end" : 391,
      "code" : "c.local_nlargefree++",
      "entry" : false,
      "use-vars" : [ 25 ]
    }, {
      "update-vars" : [ 25 ],
      "successors" : [ 95 ],
      "in-vars" : [ 12, 22, 0, 5, 25 ],
      "exit" : false,
      "out-vars" : [ 12, 0, 5 ],
      "decl-vars" : [ ],
      "line-start" : 392,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "local_largefree",
            "variable" : 66
          },
          "go-type" : 10,
          "kind" : "expression",
          "target" : {
            "go-type" : 69,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "c",
              "variable" : 25
            }
          },
          "type" : "selector"
        } ],
        "operator" : "+",
        "right" : [ {
          "go-type" : 10,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "size",
            "variable" : 22
          }
        } ],
        "type" : "assign-operator"
      },
      "assign-vars" : [ ],
      "line-end" : 392,
      "code" : "c.local_largefree += size",
      "entry" : false,
      "use-vars" : [ 22, 25 ]
    }, {
      "update-vars" : [ 23 ],
      "successors" : [ 96 ],
      "in-vars" : [ 0, 5, 12 ],
      "exit" : false,
      "out-vars" : [ 0, 5, 23, 12 ],
      "decl-vars" : [ ],
      "line-start" : 393,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 2,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "res",
            "variable" : 23
          }
        } ],
        "right" : [ {
          "go-type" : 2,
          "kind" : "constant",
          "value" : {
            "type" : "BOOL",
            "value" : "true"
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 23 ],
      "line-end" : 393,
      "code" : "res = true",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 97, 98 ],
      "in-vars" : [ 0, 5, 23, 12 ],
      "exit" : false,
      "out-vars" : [ 0, 5, 23, 12 ],
      "decl-vars" : [ ],
      "line-start" : 395,
      "ast" : {
        "condition" : {
          "go-type" : 2,
          "kind" : "expression",
          "operator" : "!",
          "target" : {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "res",
              "variable" : 23
            }
          },
          "type" : "unary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 399,
      "code" : "if !res {\n\n\tmheap_.sweepSpans[sweepgen/2%2].push(s)\n}",
      "entry" : false,
      "use-vars" : [ 23 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 98 ],
      "in-vars" : [ 0, 5, 23, 12 ],
      "exit" : false,
      "out-vars" : [ 23 ],
      "decl-vars" : [ ],
      "line-start" : 398,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 4,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "s",
              "variable" : 0
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "function" : 28,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "push"
            },
            "go-type" : 290,
            "kind" : "expression",
            "target" : {
              "go-type" : 151,
              "index" : {
                "go-type" : 16,
                "kind" : "expression",
                "left" : {
                  "go-type" : 16,
                  "kind" : "expression",
                  "left" : {
                    "go-type" : 16,
                    "kind" : "expression",
                    "type" : "identifier",
                    "value" : {
                      "ident-kind" : "Var",
                      "kind" : "ident",
                      "value" : "sweepgen",
                      "variable" : 12
                    }
                  },
                  "operator" : "/",
                  "right" : {
                    "go-type" : 16,
                    "kind" : "constant",
                    "value" : {
                      "type" : "INT",
                      "value" : "2"
                    }
                  },
                  "type" : "binary"
                },
                "operator" : "%",
                "right" : {
                  "go-type" : 16,
                  "kind" : "constant",
                  "value" : {
                    "type" : "INT",
                    "value" : "2"
                  }
                },
                "type" : "binary"
              },
              "kind" : "expression",
              "target" : {
                "field" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "sweepSpans",
                  "variable" : 67
                },
                "go-type" : 150,
                "kind" : "expression",
                "target" : {
                  "go-type" : 126,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "mheap_",
                    "variable" : 5
                  }
                },
                "type" : "selector"
              },
              "type" : "index"
            },
            "type" : "selector"
          },
          "go-type" : 59,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 398,
      "code" : "mheap_.sweepSpans[sweepgen/2%2].push(s)",
      "entry" : false,
      "use-vars" : [ 5, 12, 0 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 23 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 400,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 2,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "res",
            "variable" : 23
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 400,
      "code" : "return res",
      "entry" : false,
      "use-vars" : [ 23 ]
    } ],
    "code" : "// Sweep frees or collects finalizers for blocks not marked in the mark phase.\n// It clears the mark bits in preparation for the next GC round.\n// Returns true if the span was returned to heap.\n// If preserve=true, don't return it to heap nor relink in mcentral lists;\n// caller takes care of it.\nfunc (s *mspan) sweep(preserve bool) bool {\n\n\t_g_ := getg()\n\tif _g_.m.locks == 0 && _g_.m.mallocing == 0 && _g_ != _g_.m.g0 {\n\t\tthrow(\"mspan.sweep: m is not locked\")\n\t}\n\tsweepgen := mheap_.sweepgen\n\tif state := s.state.get(); state != mSpanInUse || s.sweepgen != sweepgen-1 {\n\t\tprint(\"mspan.sweep: state=\", state, \" sweepgen=\", s.sweepgen, \" mheap.sweepgen=\", sweepgen, \"\\n\")\n\t\tthrow(\"mspan.sweep: bad span state\")\n\t}\n\n\tif trace.enabled {\n\t\ttraceGCSweepSpan(s.npages * _PageSize)\n\t}\n\n\tatomic.Xadd64(&mheap_.pagesSwept, int64(s.npages))\n\n\tspc := s.spanclass\n\tsize := s.elemsize\n\tres := false\n\n\tc := _g_.m.mcache\n\tfreeToHeap := false\n\n\tspecialp := &s.specials\n\tspecial := *specialp\n\tfor special != nil {\n\n\t\tobjIndex := uintptr(special.offset) / size\n\t\tp := s.base() + objIndex*size\n\t\tmbits := s.markBitsForIndex(objIndex)\n\t\tif !mbits.isMarked() {\n\n\t\t\thasFin := false\n\t\t\tendOffset := p - s.base() + size\n\t\t\tfor tmp := special; tmp != nil && uintptr(tmp.offset) < endOffset; tmp = tmp.next {\n\t\t\t\tif tmp.kind == _KindSpecialFinalizer {\n\n\t\t\t\t\tmbits.setMarkedNonAtomic()\n\t\t\t\t\thasFin = true\n\t\t\t\t\tbreak\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfor special != nil && uintptr(special.offset) < endOffset {\n\n\t\t\t\tp := s.base() + uintptr(special.offset)\n\t\t\t\tif special.kind == _KindSpecialFinalizer || !hasFin {\n\n\t\t\t\t\ty := special\n\t\t\t\t\tspecial = special.next\n\t\t\t\t\t*specialp = special\n\t\t\t\t\tfreespecial(y, unsafe.Pointer(p), size)\n\t\t\t\t} else {\n\n\t\t\t\t\tspecialp = &special.next\n\t\t\t\t\tspecial = *specialp\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\n\t\t\tspecialp = &special.next\n\t\t\tspecial = *specialp\n\t\t}\n\t}\n\n\tif debug.allocfreetrace != 0 || debug.clobberfree != 0 || raceenabled || msanenabled {\n\n\t\tmbits := s.markBitsForBase()\n\t\tabits := s.allocBitsForIndex(0)\n\t\tfor i := uintptr(0); i < s.nelems; i++ {\n\t\t\tif !mbits.isMarked() && (abits.index < s.freeindex || abits.isMarked()) {\n\t\t\t\tx := s.base() + i*s.elemsize\n\t\t\t\tif debug.allocfreetrace != 0 {\n\t\t\t\t\ttracefree(unsafe.Pointer(x), size)\n\t\t\t\t}\n\t\t\t\tif debug.clobberfree != 0 {\n\t\t\t\t\tclobberfree(unsafe.Pointer(x), size)\n\t\t\t\t}\n\t\t\t\tif raceenabled {\n\t\t\t\t\tracefree(unsafe.Pointer(x), size)\n\t\t\t\t}\n\t\t\t\tif msanenabled {\n\t\t\t\t\tmsanfree(unsafe.Pointer(x), size)\n\t\t\t\t}\n\t\t\t}\n\t\t\tmbits.advance()\n\t\t\tabits.advance()\n\t\t}\n\t}\n\n\tnalloc := uint16(s.countAlloc())\n\tif spc.sizeclass() == 0 && nalloc == 0 {\n\t\ts.needzero = 1\n\t\tfreeToHeap = true\n\t}\n\tnfreed := s.allocCount - nalloc\n\tif nalloc > s.allocCount {\n\t\tprint(\"runtime: nelems=\", s.nelems, \" nalloc=\", nalloc, \" previous allocCount=\", s.allocCount, \" nfreed=\", nfreed, \"\\n\")\n\t\tthrow(\"sweep increased allocation count\")\n\t}\n\n\ts.allocCount = nalloc\n\twasempty := s.nextFreeIndex() == s.nelems\n\ts.freeindex = 0\n\tif trace.enabled {\n\t\tgetg().m.p.ptr().traceReclaimed += uintptr(nfreed) * s.elemsize\n\t}\n\n\ts.allocBits = s.gcmarkBits\n\ts.gcmarkBits = newMarkBits(s.nelems)\n\n\ts.refillAllocCache(0)\n\n\tif freeToHeap || nfreed == 0 {\n\n\t\tif state := s.state.get(); state != mSpanInUse || s.sweepgen != sweepgen-1 {\n\t\t\tprint(\"mspan.sweep: state=\", state, \" sweepgen=\", s.sweepgen, \" mheap.sweepgen=\", sweepgen, \"\\n\")\n\t\t\tthrow(\"mspan.sweep: bad span state after sweep\")\n\t\t}\n\n\t\tatomic.Store(&s.sweepgen, sweepgen)\n\t}\n\n\tif nfreed > 0 && spc.sizeclass() != 0 {\n\t\tc.local_nsmallfree[spc.sizeclass()] += uintptr(nfreed)\n\t\tres = mheap_.central[spc].mcentral.freeSpan(s, preserve, wasempty)\n\n\t} else if freeToHeap {\n\n\t\tif debug.efence > 0 {\n\t\t\ts.limit = 0\n\t\t\tsysFault(unsafe.Pointer(s.base()), size)\n\t\t} else {\n\t\t\tmheap_.freeSpan(s)\n\t\t}\n\t\tc.local_nlargefree++\n\t\tc.local_largefree += size\n\t\tres = true\n\t}\n\tif !res {\n\n\t\tmheap_.sweepSpans[sweepgen/2%2].push(s)\n\t}\n\treturn res\n}",
    "defines" : [ 0 ],
    "functions" : [ {
      "name" : "sweep",
      "package" : 0,
      "type" : 0,
      "exported" : false
    }, {
      "name" : "getg",
      "package" : 0,
      "type" : 190,
      "exported" : false
    }, {
      "name" : "throw",
      "package" : 0,
      "type" : 193,
      "exported" : false
    }, {
      "name" : "get",
      "package" : 0,
      "type" : 195,
      "exported" : false
    }, {
      "name" : "traceGCSweepSpan",
      "package" : 0,
      "type" : 199,
      "exported" : false
    }, {
      "name" : "Xadd64",
      "package" : 3,
      "type" : 201,
      "exported" : true
    }, {
      "name" : "base",
      "package" : 0,
      "type" : 206,
      "exported" : false
    }, {
      "name" : "markBitsForIndex",
      "package" : 0,
      "type" : 211,
      "exported" : false
    }, {
      "name" : "isMarked",
      "package" : 0,
      "type" : 214,
      "exported" : false
    }, {
      "name" : "setMarkedNonAtomic",
      "package" : 0,
      "type" : 58,
      "exported" : false
    }, {
      "name" : "freespecial",
      "package" : 0,
      "type" : 215,
      "exported" : false
    }, {
      "name" : "markBitsForBase",
      "package" : 0,
      "type" : 217,
      "exported" : false
    }, {
      "name" : "allocBitsForIndex",
      "package" : 0,
      "type" : 218,
      "exported" : false
    }, {
      "name" : "tracefree",
      "package" : 0,
      "type" : 220,
      "exported" : false
    }, {
      "name" : "clobberfree",
      "package" : 0,
      "type" : 222,
      "exported" : false
    }, {
      "name" : "racefree",
      "package" : 0,
      "type" : 224,
      "exported" : false
    }, {
      "name" : "msanfree",
      "package" : 0,
      "type" : 226,
      "exported" : false
    }, {
      "name" : "advance",
      "package" : 0,
      "type" : 58,
      "exported" : false
    }, {
      "name" : "countAlloc",
      "package" : 0,
      "type" : 228,
      "exported" : false
    }, {
      "name" : "sizeclass",
      "package" : 0,
      "type" : 230,
      "exported" : false
    }, {
      "name" : "nextFreeIndex",
      "package" : 0,
      "type" : 206,
      "exported" : false
    }, {
      "name" : "ptr",
      "package" : 0,
      "type" : 276,
      "exported" : false
    }, {
      "name" : "newMarkBits",
      "package" : 0,
      "type" : 278,
      "exported" : false
    }, {
      "name" : "refillAllocCache",
      "package" : 0,
      "type" : 281,
      "exported" : false
    }, {
      "name" : "Store",
      "package" : 3,
      "type" : 283,
      "exported" : true
    }, {
      "name" : "freeSpan",
      "package" : 0,
      "type" : 286,
      "exported" : false
    }, {
      "name" : "sysFault",
      "package" : 0,
      "type" : 288,
      "exported" : false
    }, {
      "name" : "freeSpan",
      "package" : 0,
      "type" : 290,
      "exported" : false
    }, {
      "name" : "push",
      "package" : 0,
      "type" : 290,
      "exported" : false
    } ],
    "line-end" : 401,
    "line-start" : 206,
    "names" : [ "sweep" ],
    "package" : 0,
    "packages" : [ {
      "name" : "runtime",
      "path" : "runtime"
    }, {
      "name" : "unsafe",
      "path" : "unsafe"
    }, {
      "name" : "sys",
      "path" : "runtime/internal/sys"
    }, {
      "name" : "atomic",
      "path" : "runtime/internal/atomic"
    }, {
      "name" : "cpu",
      "path" : "internal/cpu"
    } ],
    "params" : [ 1 ],
    "receivers" : [ 0 ],
    "results" : [ 2 ],
    "type" : "function",
    "types" : [ {
      "name" : "func(preserve bool) bool",
      "params" : 1,
      "recv" : 0,
      "results" : 3,
      "type" : "Signature",
      "underlying" : 0,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "preserve",
        "type" : 2
      } ],
      "name" : "(preserve bool)",
      "type" : "Tuple",
      "underlying" : 1
    }, {
      "name" : "bool",
      "type" : "Basic",
      "underlying" : 2
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 2
      } ],
      "name" : "(bool)",
      "type" : "Tuple",
      "underlying" : 3
    }, {
      "elem" : 5,
      "name" : "*runtime.mspan",
      "type" : "Pointer",
      "underlying" : 4
    }, {
      "local-name" : "mspan",
      "name" : "runtime.mspan",
      "package" : 0,
      "type" : "Named",
      "underlying" : 6
    }, {
      "fields" : [ {
        "name" : "next",
        "type" : 4
      }, {
        "name" : "prev",
        "type" : 4
      }, {
        "name" : "list",
        "type" : 7
      }, {
        "name" : "startAddr",
        "type" : 10
      }, {
        "name" : "npages",
        "type" : 10
      }, {
        "name" : "manualFreeList",
        "type" : 11
      }, {
        "name" : "freeindex",
        "type" : 10
      }, {
        "name" : "nelems",
        "type" : 10
      }, {
        "name" : "allocCache",
        "type" : 12
      }, {
        "name" : "allocBits",
        "type" : 13
      }, {
        "name" : "gcmarkBits",
        "type" : 13
      }, {
        "name" : "sweepgen",
        "type" : 16
      }, {
        "name" : "divMul",
        "type" : 17
      }, {
        "name" : "baseMask",
        "type" : 17
      }, {
        "name" : "allocCount",
        "type" : 17
      }, {
        "name" : "spanclass",
        "type" : 18
      }, {
        "name" : "state",
        "type" : 19
      }, {
        "name" : "needzero",
        "type" : 15
      }, {
        "name" : "divShift",
        "type" : 15
      }, {
        "name" : "divShift2",
        "type" : 15
      }, {
        "name" : "elemsize",
        "type" : 10
      }, {
        "name" : "limit",
        "type" : 10
      }, {
        "name" : "speciallock",
        "type" : 22
      }, {
        "name" : "specials",
        "type" : 24
      } ],
      "name" : "struct{next *runtime.mspan; prev *runtime.mspan; list *runtime.mSpanList; startAddr uintptr; npages uintptr; manualFreeList runtime.gclinkptr; freeindex uintptr; nelems uintptr; allocCache uint64; allocBits *runtime.gcBits; gcmarkBits *runtime.gcBits; sweepgen uint32; divMul uint16; baseMask uint16; allocCount uint16; spanclass runtime.spanClass; state runtime.mSpanStateBox; needzero uint8; divShift uint8; divShift2 uint8; elemsize uintptr; limit uintptr; speciallock runtime.mutex; specials *runtime.special}",
      "type" : "Struct",
      "underlying" : 6
    }, {
      "elem" : 8,
      "name" : "*runtime.mSpanList",
      "type" : "Pointer",
      "underlying" : 7
    }, {
      "local-name" : "mSpanList",
      "name" : "runtime.mSpanList",
      "package" : 0,
      "type" : "Named",
      "underlying" : 9
    }, {
      "fields" : [ {
        "name" : "first",
        "type" : 4
      }, {
        "name" : "last",
        "type" : 4
      } ],
      "name" : "struct{first *runtime.mspan; last *runtime.mspan}",
      "type" : "Struct",
      "underlying" : 9
    }, {
      "name" : "uintptr",
      "type" : "Basic",
      "underlying" : 10
    }, {
      "local-name" : "gclinkptr",
      "name" : "runtime.gclinkptr",
      "package" : 0,
      "type" : "Named",
      "underlying" : 10
    }, {
      "name" : "uint64",
      "type" : "Basic",
      "underlying" : 12
    }, {
      "elem" : 14,
      "name" : "*runtime.gcBits",
      "type" : "Pointer",
      "underlying" : 13
    }, {
      "local-name" : "gcBits",
      "name" : "runtime.gcBits",
      "package" : 0,
      "type" : "Named",
      "underlying" : 15
    }, {
      "name" : "uint8",
      "type" : "Basic",
      "underlying" : 15
    }, {
      "name" : "uint32",
      "type" : "Basic",
      "underlying" : 16
    }, {
      "name" : "uint16",
      "type" : "Basic",
      "underlying" : 17
    }, {
      "local-name" : "spanClass",
      "name" : "runtime.spanClass",
      "package" : 0,
      "type" : "Named",
      "underlying" : 15
    }, {
      "local-name" : "mSpanStateBox",
      "name" : "runtime.mSpanStateBox",
      "package" : 0,
      "type" : "Named",
      "underlying" : 20
    }, {
      "fields" : [ {
        "name" : "s",
        "type" : 21
      } ],
      "name" : "struct{s runtime.mSpanState}",
      "type" : "Struct",
      "underlying" : 20
    }, {
      "local-name" : "mSpanState",
      "name" : "runtime.mSpanState",
      "package" : 0,
      "type" : "Named",
      "underlying" : 15
    }, {
      "local-name" : "mutex",
      "name" : "runtime.mutex",
      "package" : 0,
      "type" : "Named",
      "underlying" : 23
    }, {
      "fields" : [ {
        "name" : "key",
        "type" : 10
      } ],
      "name" : "struct{key uintptr}",
      "type" : "Struct",
      "underlying" : 23
    }, {
      "elem" : 25,
      "name" : "*runtime.special",
      "type" : "Pointer",
      "underlying" : 24
    }, {
      "local-name" : "special",
      "name" : "runtime.special",
      "package" : 0,
      "type" : "Named",
      "underlying" : 26
    }, {
      "fields" : [ {
        "name" : "next",
        "type" : 24
      }, {
        "name" : "offset",
        "type" : 17
      }, {
        "name" : "kind",
        "type" : 27
      } ],
      "name" : "struct{next *runtime.special; offset uint16; kind byte}",
      "type" : "Struct",
      "underlying" : 26
    }, {
      "name" : "byte",
      "type" : "Basic",
      "underlying" : 27
    }, {
      "fields" : [ {
        "name" : "lock",
        "type" : 22
      }, {
        "name" : "lockOwner",
        "type" : 29
      }, {
        "name" : "enabled",
        "type" : 2
      }, {
        "name" : "shutdown",
        "type" : 2
      }, {
        "name" : "headerWritten",
        "type" : 2
      }, {
        "name" : "footerWritten",
        "type" : 2
      }, {
        "name" : "shutdownSema",
        "type" : 16
      }, {
        "name" : "seqStart",
        "type" : 12
      }, {
        "name" : "ticksStart",
        "type" : 61
      }, {
        "name" : "ticksEnd",
        "type" : 61
      }, {
        "name" : "timeStart",
        "type" : 61
      }, {
        "name" : "timeEnd",
        "type" : 61
      }, {
        "name" : "seqGC",
        "type" : 12
      }, {
        "name" : "reading",
        "type" : 115
      }, {
        "name" : "empty",
        "type" : 115
      }, {
        "name" : "fullHead",
        "type" : 115
      }, {
        "name" : "fullTail",
        "type" : 115
      }, {
        "name" : "reader",
        "type" : 51
      }, {
        "name" : "stackTab",
        "type" : 116
      }, {
        "name" : "stringsLock",
        "type" : 22
      }, {
        "name" : "strings",
        "type" : 123
      }, {
        "name" : "stringSeq",
        "type" : 12
      }, {
        "name" : "markWorkerLabels",
        "type" : 124
      }, {
        "name" : "bufLock",
        "type" : 22
      }, {
        "name" : "buf",
        "type" : 115
      } ],
      "name" : "struct{lock runtime.mutex; lockOwner *runtime.g; enabled bool; shutdown bool; headerWritten bool; footerWritten bool; shutdownSema uint32; seqStart uint64; ticksStart int64; ticksEnd int64; timeStart int64; timeEnd int64; seqGC uint64; reading runtime.traceBufPtr; empty runtime.traceBufPtr; fullHead runtime.traceBufPtr; fullTail runtime.traceBufPtr; reader runtime.guintptr; stackTab runtime.traceStackTable; stringsLock runtime.mutex; strings map[string]uint64; stringSeq uint64; markWorkerLabels [3]uint64; bufLock runtime.mutex; buf runtime.traceBufPtr}",
      "type" : "Struct",
      "underlying" : 28
    }, {
      "elem" : 30,
      "name" : "*runtime.g",
      "type" : "Pointer",
      "underlying" : 29
    }, {
      "local-name" : "g",
      "name" : "runtime.g",
      "package" : 0,
      "type" : "Named",
      "underlying" : 31
    }, {
      "fields" : [ {
        "name" : "stack",
        "type" : 32
      }, {
        "name" : "stackguard0",
        "type" : 10
      }, {
        "name" : "stackguard1",
        "type" : 10
      }, {
        "name" : "_panic",
        "type" : 34
      }, {
        "name" : "_defer",
        "type" : 39
      }, {
        "name" : "m",
        "type" : 46
      }, {
        "name" : "sched",
        "type" : 49
      }, {
        "name" : "syscallsp",
        "type" : 10
      }, {
        "name" : "syscallpc",
        "type" : 10
      }, {
        "name" : "stktopsp",
        "type" : 10
      }, {
        "name" : "param",
        "type" : 37
      }, {
        "name" : "atomicstatus",
        "type" : 16
      }, {
        "name" : "stackLock",
        "type" : 16
      }, {
        "name" : "goid",
        "type" : 61
      }, {
        "name" : "schedlink",
        "type" : 51
      }, {
        "name" : "waitsince",
        "type" : 61
      }, {
        "name" : "waitreason",
        "type" : 85
      }, {
        "name" : "preempt",
        "type" : 2
      }, {
        "name" : "preemptStop",
        "type" : 2
      }, {
        "name" : "preemptShrink",
        "type" : 2
      }, {
        "name" : "asyncSafePoint",
        "type" : 2
      }, {
        "name" : "paniconfault",
        "type" : 2
      }, {
        "name" : "gcscandone",
        "type" : 2
      }, {
        "name" : "throwsplit",
        "type" : 2
      }, {
        "name" : "activeStackChans",
        "type" : 2
      }, {
        "name" : "raceignore",
        "type" : 63
      }, {
        "name" : "sysblocktraced",
        "type" : 2
      }, {
        "name" : "sysexitticks",
        "type" : 61
      }, {
        "name" : "traceseq",
        "type" : 12
      }, {
        "name" : "tracelastp",
        "type" : 60
      }, {
        "name" : "lockedm",
        "type" : 68
      }, {
        "name" : "sig",
        "type" : 16
      }, {
        "name" : "writebuf",
        "type" : 86
      }, {
        "name" : "sigcode0",
        "type" : 10
      }, {
        "name" : "sigcode1",
        "type" : 10
      }, {
        "name" : "sigpc",
        "type" : 10
      }, {
        "name" : "gopc",
        "type" : 10
      }, {
        "name" : "ancestors",
        "type" : 87
      }, {
        "name" : "startpc",
        "type" : 10
      }, {
        "name" : "racectx",
        "type" : 10
      }, {
        "name" : "waiting",
        "type" : 92
      }, {
        "name" : "cgoCtxt",
        "type" : 91
      }, {
        "name" : "labels",
        "type" : 37
      }, {
        "name" : "timer",
        "type" : 110
      }, {
        "name" : "selectDone",
        "type" : 16
      }, {
        "name" : "gcAssistBytes",
        "type" : 61
      } ],
      "name" : "struct{stack runtime.stack; stackguard0 uintptr; stackguard1 uintptr; _panic *runtime._panic; _defer *runtime._defer; m *runtime.m; sched runtime.gobuf; syscallsp uintptr; syscallpc uintptr; stktopsp uintptr; param unsafe.Pointer; atomicstatus uint32; stackLock uint32; goid int64; schedlink runtime.guintptr; waitsince int64; waitreason runtime.waitReason; preempt bool; preemptStop bool; preemptShrink bool; asyncSafePoint bool; paniconfault bool; gcscandone bool; throwsplit bool; activeStackChans bool; raceignore int8; sysblocktraced bool; sysexitticks int64; traceseq uint64; tracelastp runtime.puintptr; lockedm runtime.muintptr; sig uint32; writebuf []byte; sigcode0 uintptr; sigcode1 uintptr; sigpc uintptr; gopc uintptr; ancestors *[]runtime.ancestorInfo; startpc uintptr; racectx uintptr; waiting *runtime.sudog; cgoCtxt []uintptr; labels unsafe.Pointer; timer *runtime.timer; selectDone uint32; gcAssistBytes int64}",
      "type" : "Struct",
      "underlying" : 31
    }, {
      "local-name" : "stack",
      "name" : "runtime.stack",
      "package" : 0,
      "type" : "Named",
      "underlying" : 33
    }, {
      "fields" : [ {
        "name" : "lo",
        "type" : 10
      }, {
        "name" : "hi",
        "type" : 10
      } ],
      "name" : "struct{lo uintptr; hi uintptr}",
      "type" : "Struct",
      "underlying" : 33
    }, {
      "elem" : 35,
      "name" : "*runtime._panic",
      "type" : "Pointer",
      "underlying" : 34
    }, {
      "local-name" : "_panic",
      "name" : "runtime._panic",
      "package" : 0,
      "type" : "Named",
      "underlying" : 36
    }, {
      "fields" : [ {
        "name" : "argp",
        "type" : 37
      }, {
        "name" : "arg",
        "type" : 38
      }, {
        "name" : "link",
        "type" : 34
      }, {
        "name" : "pc",
        "type" : 10
      }, {
        "name" : "sp",
        "type" : 37
      }, {
        "name" : "recovered",
        "type" : 2
      }, {
        "name" : "aborted",
        "type" : 2
      }, {
        "name" : "goexit",
        "type" : 2
      } ],
      "name" : "struct{argp unsafe.Pointer; arg interface{}; link *runtime._panic; pc uintptr; sp unsafe.Pointer; recovered bool; aborted bool; goexit bool}",
      "type" : "Struct",
      "underlying" : 36
    }, {
      "local-name" : "Pointer",
      "name" : "unsafe.Pointer",
      "package" : 1,
      "type" : "Basic",
      "underlying" : 37
    }, {
      "methods" : [ ],
      "name" : "interface{}",
      "type" : "Interface",
      "underlying" : 38
    }, {
      "elem" : 40,
      "name" : "*runtime._defer",
      "type" : "Pointer",
      "underlying" : 39
    }, {
      "local-name" : "_defer",
      "name" : "runtime._defer",
      "package" : 0,
      "type" : "Named",
      "underlying" : 41
    }, {
      "fields" : [ {
        "name" : "siz",
        "type" : 42
      }, {
        "name" : "started",
        "type" : 2
      }, {
        "name" : "heap",
        "type" : 2
      }, {
        "name" : "openDefer",
        "type" : 2
      }, {
        "name" : "sp",
        "type" : 10
      }, {
        "name" : "pc",
        "type" : 10
      }, {
        "name" : "fn",
        "type" : 43
      }, {
        "name" : "_panic",
        "type" : 34
      }, {
        "name" : "link",
        "type" : 39
      }, {
        "name" : "fd",
        "type" : 37
      }, {
        "name" : "varp",
        "type" : 10
      }, {
        "name" : "framepc",
        "type" : 10
      } ],
      "name" : "struct{siz int32; started bool; heap bool; openDefer bool; sp uintptr; pc uintptr; fn *runtime.funcval; _panic *runtime._panic; link *runtime._defer; fd unsafe.Pointer; varp uintptr; framepc uintptr}",
      "type" : "Struct",
      "underlying" : 41
    }, {
      "name" : "int32",
      "type" : "Basic",
      "underlying" : 42
    }, {
      "elem" : 44,
      "name" : "*runtime.funcval",
      "type" : "Pointer",
      "underlying" : 43
    }, {
      "local-name" : "funcval",
      "name" : "runtime.funcval",
      "package" : 0,
      "type" : "Named",
      "underlying" : 45
    }, {
      "fields" : [ {
        "name" : "fn",
        "type" : 10
      } ],
      "name" : "struct{fn uintptr}",
      "type" : "Struct",
      "underlying" : 45
    }, {
      "elem" : 47,
      "name" : "*runtime.m",
      "type" : "Pointer",
      "underlying" : 46
    }, {
      "local-name" : "m",
      "name" : "runtime.m",
      "package" : 0,
      "type" : "Named",
      "underlying" : 48
    }, {
      "fields" : [ {
        "name" : "g0",
        "type" : 29
      }, {
        "name" : "morebuf",
        "type" : 49
      }, {
        "name" : "divmod",
        "type" : 16
      }, {
        "name" : "procid",
        "type" : 12
      }, {
        "name" : "gsignal",
        "type" : 29
      }, {
        "name" : "goSigStack",
        "type" : 53
      }, {
        "name" : "sigmask",
        "type" : 55
      }, {
        "name" : "tls",
        "type" : 57
      }, {
        "name" : "mstartfn",
        "type" : 58
      }, {
        "name" : "curg",
        "type" : 29
      }, {
        "name" : "caughtsig",
        "type" : 51
      }, {
        "name" : "p",
        "type" : 60
      }, {
        "name" : "nextp",
        "type" : 60
      }, {
        "name" : "oldp",
        "type" : 60
      }, {
        "name" : "id",
        "type" : 61
      }, {
        "name" : "mallocing",
        "type" : 42
      }, {
        "name" : "throwing",
        "type" : 42
      }, {
        "name" : "preemptoff",
        "type" : 62
      }, {
        "name" : "locks",
        "type" : 42
      }, {
        "name" : "dying",
        "type" : 42
      }, {
        "name" : "profilehz",
        "type" : 42
      }, {
        "name" : "spinning",
        "type" : 2
      }, {
        "name" : "blocked",
        "type" : 2
      }, {
        "name" : "newSigstack",
        "type" : 2
      }, {
        "name" : "printlock",
        "type" : 63
      }, {
        "name" : "incgo",
        "type" : 2
      }, {
        "name" : "freeWait",
        "type" : 16
      }, {
        "name" : "fastrand",
        "type" : 56
      }, {
        "name" : "needextram",
        "type" : 2
      }, {
        "name" : "traceback",
        "type" : 15
      }, {
        "name" : "ncgocall",
        "type" : 12
      }, {
        "name" : "ncgo",
        "type" : 42
      }, {
        "name" : "cgoCallersUse",
        "type" : 16
      }, {
        "name" : "cgoCallers",
        "type" : 64
      }, {
        "name" : "park",
        "type" : 67
      }, {
        "name" : "alllink",
        "type" : 46
      }, {
        "name" : "schedlink",
        "type" : 68
      }, {
        "name" : "mcache",
        "type" : 69
      }, {
        "name" : "lockedg",
        "type" : 51
      }, {
        "name" : "createstack",
        "type" : 66
      }, {
        "name" : "lockedExt",
        "type" : 16
      }, {
        "name" : "lockedInt",
        "type" : 16
      }, {
        "name" : "nextwaitm",
        "type" : 68
      }, {
        "name" : "waitunlockf",
        "type" : 77
      }, {
        "name" : "waitlock",
        "type" : 37
      }, {
        "name" : "waittraceev",
        "type" : 27
      }, {
        "name" : "waittraceskip",
        "type" : 79
      }, {
        "name" : "startingtrace",
        "type" : 2
      }, {
        "name" : "syscalltick",
        "type" : 16
      }, {
        "name" : "freelink",
        "type" : 46
      }, {
        "name" : "libcall",
        "type" : 80
      }, {
        "name" : "libcallpc",
        "type" : 10
      }, {
        "name" : "libcallsp",
        "type" : 10
      }, {
        "name" : "libcallg",
        "type" : 51
      }, {
        "name" : "syscall",
        "type" : 80
      }, {
        "name" : "vdsoSP",
        "type" : 10
      }, {
        "name" : "vdsoPC",
        "type" : 10
      }, {
        "name" : "preemptGen",
        "type" : 16
      }, {
        "name" : "signalPending",
        "type" : 16
      }, {
        "name" : "dlogPerM",
        "type" : 82
      }, {
        "name" : "mOS",
        "type" : 84
      } ],
      "name" : "struct{g0 *runtime.g; morebuf runtime.gobuf; divmod uint32; procid uint64; gsignal *runtime.g; goSigStack runtime.gsignalStack; sigmask runtime.sigset; tls [6]uintptr; mstartfn func(); curg *runtime.g; caughtsig runtime.guintptr; p runtime.puintptr; nextp runtime.puintptr; oldp runtime.puintptr; id int64; mallocing int32; throwing int32; preemptoff string; locks int32; dying int32; profilehz int32; spinning bool; blocked bool; newSigstack bool; printlock int8; incgo bool; freeWait uint32; fastrand [2]uint32; needextram bool; traceback uint8; ncgocall uint64; ncgo int32; cgoCallersUse uint32; cgoCallers *runtime.cgoCallers; park runtime.note; alllink *runtime.m; schedlink runtime.muintptr; mcache *runtime.mcache; lockedg runtime.guintptr; createstack [32]uintptr; lockedExt uint32; lockedInt uint32; nextwaitm runtime.muintptr; waitunlockf func(*runtime.g, unsafe.Pointer) bool; waitlock unsafe.Pointer; waittraceev byte; waittraceskip int; startingtrace bool; syscalltick uint32; freelink *runtime.m; libcall runtime.libcall; libcallpc uintptr; libcallsp uintptr; libcallg runtime.guintptr; syscall runtime.libcall; vdsoSP uintptr; vdsoPC uintptr; preemptGen uint32; signalPending uint32; runtime.dlogPerM; runtime.mOS}",
      "type" : "Struct",
      "underlying" : 48
    }, {
      "local-name" : "gobuf",
      "name" : "runtime.gobuf",
      "package" : 0,
      "type" : "Named",
      "underlying" : 50
    }, {
      "fields" : [ {
        "name" : "sp",
        "type" : 10
      }, {
        "name" : "pc",
        "type" : 10
      }, {
        "name" : "g",
        "type" : 51
      }, {
        "name" : "ctxt",
        "type" : 37
      }, {
        "name" : "ret",
        "type" : 52
      }, {
        "name" : "lr",
        "type" : 10
      }, {
        "name" : "bp",
        "type" : 10
      } ],
      "name" : "struct{sp uintptr; pc uintptr; g runtime.guintptr; ctxt unsafe.Pointer; ret runtime/internal/sys.Uintreg; lr uintptr; bp uintptr}",
      "type" : "Struct",
      "underlying" : 50
    }, {
      "local-name" : "guintptr",
      "name" : "runtime.guintptr",
      "package" : 0,
      "type" : "Named",
      "underlying" : 10
    }, {
      "local-name" : "Uintreg",
      "name" : "runtime/internal/sys.Uintreg",
      "package" : 2,
      "type" : "Named",
      "underlying" : 12
    }, {
      "local-name" : "gsignalStack",
      "name" : "runtime.gsignalStack",
      "package" : 0,
      "type" : "Named",
      "underlying" : 54
    }, {
      "fields" : [ {
        "name" : "stack",
        "type" : 32
      }, {
        "name" : "stackguard0",
        "type" : 10
      }, {
        "name" : "stackguard1",
        "type" : 10
      }, {
        "name" : "stktopsp",
        "type" : 10
      } ],
      "name" : "struct{stack runtime.stack; stackguard0 uintptr; stackguard1 uintptr; stktopsp uintptr}",
      "type" : "Struct",
      "underlying" : 54
    }, {
      "local-name" : "sigset",
      "name" : "runtime.sigset",
      "package" : 0,
      "type" : "Named",
      "underlying" : 56
    }, {
      "elem" : 16,
      "name" : "[2]uint32",
      "type" : "Array",
      "underlying" : 56
    }, {
      "elem" : 10,
      "name" : "[6]uintptr",
      "type" : "Array",
      "underlying" : 57
    }, {
      "name" : "func()",
      "params" : 59,
      "recv" : -1,
      "results" : 59,
      "type" : "Signature",
      "underlying" : 58,
      "variadic" : false
    }, {
      "fields" : [ ],
      "name" : "()",
      "type" : "Tuple",
      "underlying" : 59
    }, {
      "local-name" : "puintptr",
      "name" : "runtime.puintptr",
      "package" : 0,
      "type" : "Named",
      "underlying" : 10
    }, {
      "name" : "int64",
      "type" : "Basic",
      "underlying" : 61
    }, {
      "name" : "string",
      "type" : "Basic",
      "underlying" : 62
    }, {
      "name" : "int8",
      "type" : "Basic",
      "underlying" : 63
    }, {
      "elem" : 65,
      "name" : "*runtime.cgoCallers",
      "type" : "Pointer",
      "underlying" : 64
    }, {
      "local-name" : "cgoCallers",
      "name" : "runtime.cgoCallers",
      "package" : 0,
      "type" : "Named",
      "underlying" : 66
    }, {
      "elem" : 10,
      "name" : "[32]uintptr",
      "type" : "Array",
      "underlying" : 66
    }, {
      "local-name" : "note",
      "name" : "runtime.note",
      "package" : 0,
      "type" : "Named",
      "underlying" : 23
    }, {
      "local-name" : "muintptr",
      "name" : "runtime.muintptr",
      "package" : 0,
      "type" : "Named",
      "underlying" : 10
    }, {
      "elem" : 70,
      "name" : "*runtime.mcache",
      "type" : "Pointer",
      "underlying" : 69
    }, {
      "local-name" : "mcache",
      "name" : "runtime.mcache",
      "package" : 0,
      "type" : "Named",
      "underlying" : 71
    }, {
      "fields" : [ {
        "name" : "next_sample",
        "type" : 10
      }, {
        "name" : "local_scan",
        "type" : 10
      }, {
        "name" : "tiny",
        "type" : 10
      }, {
        "name" : "tinyoffset",
        "type" : 10
      }, {
        "name" : "local_tinyallocs",
        "type" : 10
      }, {
        "name" : "alloc",
        "type" : 72
      }, {
        "name" : "stackcache",
        "type" : 73
      }, {
        "name" : "local_largefree",
        "type" : 10
      }, {
        "name" : "local_nlargefree",
        "type" : 10
      }, {
        "name" : "local_nsmallfree",
        "type" : 76
      }, {
        "name" : "flushGen",
        "type" : 16
      } ],
      "name" : "struct{next_sample uintptr; local_scan uintptr; tiny uintptr; tinyoffset uintptr; local_tinyallocs uintptr; alloc [134]*runtime.mspan; stackcache [4]runtime.stackfreelist; local_largefree uintptr; local_nlargefree uintptr; local_nsmallfree [67]uintptr; flushGen uint32}",
      "type" : "Struct",
      "underlying" : 71
    }, {
      "elem" : 4,
      "name" : "[134]*runtime.mspan",
      "type" : "Array",
      "underlying" : 72
    }, {
      "elem" : 74,
      "name" : "[4]runtime.stackfreelist",
      "type" : "Array",
      "underlying" : 73
    }, {
      "local-name" : "stackfreelist",
      "name" : "runtime.stackfreelist",
      "package" : 0,
      "type" : "Named",
      "underlying" : 75
    }, {
      "fields" : [ {
        "name" : "list",
        "type" : 11
      }, {
        "name" : "size",
        "type" : 10
      } ],
      "name" : "struct{list runtime.gclinkptr; size uintptr}",
      "type" : "Struct",
      "underlying" : 75
    }, {
      "elem" : 10,
      "name" : "[67]uintptr",
      "type" : "Array",
      "underlying" : 76
    }, {
      "name" : "func(*runtime.g, unsafe.Pointer) bool",
      "params" : 78,
      "recv" : -1,
      "results" : 3,
      "type" : "Signature",
      "underlying" : 77,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 29
      }, {
        "name" : "",
        "type" : 37
      } ],
      "name" : "(*runtime.g, unsafe.Pointer)",
      "type" : "Tuple",
      "underlying" : 78
    }, {
      "name" : "int",
      "type" : "Basic",
      "underlying" : 79
    }, {
      "local-name" : "libcall",
      "name" : "runtime.libcall",
      "package" : 0,
      "type" : "Named",
      "underlying" : 81
    }, {
      "fields" : [ {
        "name" : "fn",
        "type" : 10
      }, {
        "name" : "n",
        "type" : 10
      }, {
        "name" : "args",
        "type" : 10
      }, {
        "name" : "r1",
        "type" : 10
      }, {
        "name" : "r2",
        "type" : 10
      }, {
        "name" : "err",
        "type" : 10
      } ],
      "name" : "struct{fn uintptr; n uintptr; args uintptr; r1 uintptr; r2 uintptr; err uintptr}",
      "type" : "Struct",
      "underlying" : 81
    }, {
      "local-name" : "dlogPerM",
      "name" : "runtime.dlogPerM",
      "package" : 0,
      "type" : "Named",
      "underlying" : 83
    }, {
      "fields" : [ ],
      "name" : "struct{}",
      "type" : "Struct",
      "underlying" : 83
    }, {
      "local-name" : "mOS",
      "name" : "runtime.mOS",
      "package" : 0,
      "type" : "Named",
      "underlying" : 83
    }, {
      "local-name" : "waitReason",
      "name" : "runtime.waitReason",
      "package" : 0,
      "type" : "Named",
      "underlying" : 15
    }, {
      "elem" : 27,
      "name" : "[]byte",
      "type" : "Slice",
      "underlying" : 86
    }, {
      "elem" : 88,
      "name" : "*[]runtime.ancestorInfo",
      "type" : "Pointer",
      "underlying" : 87
    }, {
      "elem" : 89,
      "name" : "[]runtime.ancestorInfo",
      "type" : "Slice",
      "underlying" : 88
    }, {
      "local-name" : "ancestorInfo",
      "name" : "runtime.ancestorInfo",
      "package" : 0,
      "type" : "Named",
      "underlying" : 90
    }, {
      "fields" : [ {
        "name" : "pcs",
        "type" : 91
      }, {
        "name" : "goid",
        "type" : 61
      }, {
        "name" : "gopc",
        "type" : 10
      } ],
      "name" : "struct{pcs []uintptr; goid int64; gopc uintptr}",
      "type" : "Struct",
      "underlying" : 90
    }, {
      "elem" : 10,
      "name" : "[]uintptr",
      "type" : "Slice",
      "underlying" : 91
    }, {
      "elem" : 93,
      "name" : "*runtime.sudog",
      "type" : "Pointer",
      "underlying" : 92
    }, {
      "local-name" : "sudog",
      "name" : "runtime.sudog",
      "package" : 0,
      "type" : "Named",
      "underlying" : 94
    }, {
      "fields" : [ {
        "name" : "g",
        "type" : 29
      }, {
        "name" : "isSelect",
        "type" : 2
      }, {
        "name" : "next",
        "type" : 92
      }, {
        "name" : "prev",
        "type" : 92
      }, {
        "name" : "elem",
        "type" : 37
      }, {
        "name" : "acquiretime",
        "type" : 61
      }, {
        "name" : "releasetime",
        "type" : 61
      }, {
        "name" : "ticket",
        "type" : 16
      }, {
        "name" : "parent",
        "type" : 92
      }, {
        "name" : "waitlink",
        "type" : 92
      }, {
        "name" : "waittail",
        "type" : 92
      }, {
        "name" : "c",
        "type" : 95
      } ],
      "name" : "struct{g *runtime.g; isSelect bool; next *runtime.sudog; prev *runtime.sudog; elem unsafe.Pointer; acquiretime int64; releasetime int64; ticket uint32; parent *runtime.sudog; waitlink *runtime.sudog; waittail *runtime.sudog; c *runtime.hchan}",
      "type" : "Struct",
      "underlying" : 94
    }, {
      "elem" : 96,
      "name" : "*runtime.hchan",
      "type" : "Pointer",
      "underlying" : 95
    }, {
      "local-name" : "hchan",
      "name" : "runtime.hchan",
      "package" : 0,
      "type" : "Named",
      "underlying" : 97
    }, {
      "fields" : [ {
        "name" : "qcount",
        "type" : 98
      }, {
        "name" : "dataqsiz",
        "type" : 98
      }, {
        "name" : "buf",
        "type" : 37
      }, {
        "name" : "elemsize",
        "type" : 17
      }, {
        "name" : "closed",
        "type" : 16
      }, {
        "name" : "elemtype",
        "type" : 99
      }, {
        "name" : "sendx",
        "type" : 98
      }, {
        "name" : "recvx",
        "type" : 98
      }, {
        "name" : "recvq",
        "type" : 108
      }, {
        "name" : "sendq",
        "type" : 108
      }, {
        "name" : "lock",
        "type" : 22
      } ],
      "name" : "struct{qcount uint; dataqsiz uint; buf unsafe.Pointer; elemsize uint16; closed uint32; elemtype *runtime._type; sendx uint; recvx uint; recvq runtime.waitq; sendq runtime.waitq; lock runtime.mutex}",
      "type" : "Struct",
      "underlying" : 97
    }, {
      "name" : "uint",
      "type" : "Basic",
      "underlying" : 98
    }, {
      "elem" : 100,
      "name" : "*runtime._type",
      "type" : "Pointer",
      "underlying" : 99
    }, {
      "local-name" : "_type",
      "name" : "runtime._type",
      "package" : 0,
      "type" : "Named",
      "underlying" : 101
    }, {
      "fields" : [ {
        "name" : "size",
        "type" : 10
      }, {
        "name" : "ptrdata",
        "type" : 10
      }, {
        "name" : "hash",
        "type" : 16
      }, {
        "name" : "tflag",
        "type" : 102
      }, {
        "name" : "align",
        "type" : 15
      }, {
        "name" : "fieldAlign",
        "type" : 15
      }, {
        "name" : "kind",
        "type" : 15
      }, {
        "name" : "equal",
        "type" : 103
      }, {
        "name" : "gcdata",
        "type" : 105
      }, {
        "name" : "str",
        "type" : 106
      }, {
        "name" : "ptrToThis",
        "type" : 107
      } ],
      "name" : "struct{size uintptr; ptrdata uintptr; hash uint32; tflag runtime.tflag; align uint8; fieldAlign uint8; kind uint8; equal func(unsafe.Pointer, unsafe.Pointer) bool; gcdata *byte; str runtime.nameOff; ptrToThis runtime.typeOff}",
      "type" : "Struct",
      "underlying" : 101
    }, {
      "local-name" : "tflag",
      "name" : "runtime.tflag",
      "package" : 0,
      "type" : "Named",
      "underlying" : 15
    }, {
      "name" : "func(unsafe.Pointer, unsafe.Pointer) bool",
      "params" : 104,
      "recv" : -1,
      "results" : 3,
      "type" : "Signature",
      "underlying" : 103,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 37
      }, {
        "name" : "",
        "type" : 37
      } ],
      "name" : "(unsafe.Pointer, unsafe.Pointer)",
      "type" : "Tuple",
      "underlying" : 104
    }, {
      "elem" : 27,
      "name" : "*byte",
      "type" : "Pointer",
      "underlying" : 105
    }, {
      "local-name" : "nameOff",
      "name" : "runtime.nameOff",
      "package" : 0,
      "type" : "Named",
      "underlying" : 42
    }, {
      "local-name" : "typeOff",
      "name" : "runtime.typeOff",
      "package" : 0,
      "type" : "Named",
      "underlying" : 42
    }, {
      "local-name" : "waitq",
      "name" : "runtime.waitq",
      "package" : 0,
      "type" : "Named",
      "underlying" : 109
    }, {
      "fields" : [ {
        "name" : "first",
        "type" : 92
      }, {
        "name" : "last",
        "type" : 92
      } ],
      "name" : "struct{first *runtime.sudog; last *runtime.sudog}",
      "type" : "Struct",
      "underlying" : 109
    }, {
      "elem" : 111,
      "name" : "*runtime.timer",
      "type" : "Pointer",
      "underlying" : 110
    }, {
      "local-name" : "timer",
      "name" : "runtime.timer",
      "package" : 0,
      "type" : "Named",
      "underlying" : 112
    }, {
      "fields" : [ {
        "name" : "pp",
        "type" : 60
      }, {
        "name" : "when",
        "type" : 61
      }, {
        "name" : "period",
        "type" : 61
      }, {
        "name" : "f",
        "type" : 113
      }, {
        "name" : "arg",
        "type" : 38
      }, {
        "name" : "seq",
        "type" : 10
      }, {
        "name" : "nextwhen",
        "type" : 61
      }, {
        "name" : "status",
        "type" : 16
      } ],
      "name" : "struct{pp runtime.puintptr; when int64; period int64; f func(interface{}, uintptr); arg interface{}; seq uintptr; nextwhen int64; status uint32}",
      "type" : "Struct",
      "underlying" : 112
    }, {
      "name" : "func(interface{}, uintptr)",
      "params" : 114,
      "recv" : -1,
      "results" : 59,
      "type" : "Signature",
      "underlying" : 113,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 38
      }, {
        "name" : "",
        "type" : 10
      } ],
      "name" : "(interface{}, uintptr)",
      "type" : "Tuple",
      "underlying" : 114
    }, {
      "local-name" : "traceBufPtr",
      "name" : "runtime.traceBufPtr",
      "package" : 0,
      "type" : "Named",
      "underlying" : 10
    }, {
      "local-name" : "traceStackTable",
      "name" : "runtime.traceStackTable",
      "package" : 0,
      "type" : "Named",
      "underlying" : 117
    }, {
      "fields" : [ {
        "name" : "lock",
        "type" : 22
      }, {
        "name" : "seq",
        "type" : 16
      }, {
        "name" : "mem",
        "type" : 118
      }, {
        "name" : "tab",
        "type" : 121
      } ],
      "name" : "struct{lock runtime.mutex; seq uint32; mem runtime.traceAlloc; tab [8192]runtime.traceStackPtr}",
      "type" : "Struct",
      "underlying" : 117
    }, {
      "local-name" : "traceAlloc",
      "name" : "runtime.traceAlloc",
      "package" : 0,
      "type" : "Named",
      "underlying" : 119
    }, {
      "fields" : [ {
        "name" : "head",
        "type" : 120
      }, {
        "name" : "off",
        "type" : 10
      } ],
      "name" : "struct{head runtime.traceAllocBlockPtr; off uintptr}",
      "type" : "Struct",
      "underlying" : 119
    }, {
      "local-name" : "traceAllocBlockPtr",
      "name" : "runtime.traceAllocBlockPtr",
      "package" : 0,
      "type" : "Named",
      "underlying" : 10
    }, {
      "elem" : 122,
      "name" : "[8192]runtime.traceStackPtr",
      "type" : "Array",
      "underlying" : 121
    }, {
      "local-name" : "traceStackPtr",
      "name" : "runtime.traceStackPtr",
      "package" : 0,
      "type" : "Named",
      "underlying" : 10
    }, {
      "elem" : 12,
      "key" : 62,
      "name" : "map[string]uint64",
      "type" : "Map",
      "underlying" : 123
    }, {
      "elem" : 12,
      "name" : "[3]uint64",
      "type" : "Array",
      "underlying" : 124
    }, {
      "fields" : [ {
        "name" : "allocfreetrace",
        "type" : 42
      }, {
        "name" : "cgocheck",
        "type" : 42
      }, {
        "name" : "clobberfree",
        "type" : 42
      }, {
        "name" : "efence",
        "type" : 42
      }, {
        "name" : "gccheckmark",
        "type" : 42
      }, {
        "name" : "gcpacertrace",
        "type" : 42
      }, {
        "name" : "gcshrinkstackoff",
        "type" : 42
      }, {
        "name" : "gcstoptheworld",
        "type" : 42
      }, {
        "name" : "gctrace",
        "type" : 42
      }, {
        "name" : "invalidptr",
        "type" : 42
      }, {
        "name" : "madvdontneed",
        "type" : 42
      }, {
        "name" : "sbrk",
        "type" : 42
      }, {
        "name" : "scavenge",
        "type" : 42
      }, {
        "name" : "scavtrace",
        "type" : 42
      }, {
        "name" : "scheddetail",
        "type" : 42
      }, {
        "name" : "schedtrace",
        "type" : 42
      }, {
        "name" : "tracebackancestors",
        "type" : 42
      }, {
        "name" : "asyncpreemptoff",
        "type" : 42
      } ],
      "name" : "struct{allocfreetrace int32; cgocheck int32; clobberfree int32; efence int32; gccheckmark int32; gcpacertrace int32; gcshrinkstackoff int32; gcstoptheworld int32; gctrace int32; invalidptr int32; madvdontneed int32; sbrk int32; scavenge int32; scavtrace int32; scheddetail int32; schedtrace int32; tracebackancestors int32; asyncpreemptoff int32}",
      "type" : "Struct",
      "underlying" : 125
    }, {
      "local-name" : "mheap",
      "name" : "runtime.mheap",
      "package" : 0,
      "type" : "Named",
      "underlying" : 127
    }, {
      "fields" : [ {
        "name" : "lock",
        "type" : 22
      }, {
        "name" : "pages",
        "type" : 128
      }, {
        "name" : "sweepgen",
        "type" : 16
      }, {
        "name" : "sweepdone",
        "type" : 16
      }, {
        "name" : "sweepers",
        "type" : 16
      }, {
        "name" : "allspans",
        "type" : 149
      }, {
        "name" : "sweepSpans",
        "type" : 150
      }, {
        "name" : "pagesInUse",
        "type" : 12
      }, {
        "name" : "pagesSwept",
        "type" : 12
      }, {
        "name" : "pagesSweptBasis",
        "type" : 12
      }, {
        "name" : "sweepHeapLiveBasis",
        "type" : 12
      }, {
        "name" : "sweepPagesPerByte",
        "type" : 153
      }, {
        "name" : "scavengeGoal",
        "type" : 12
      }, {
        "name" : "reclaimIndex",
        "type" : 12
      }, {
        "name" : "reclaimCredit",
        "type" : 10
      }, {
        "name" : "largealloc",
        "type" : 12
      }, {
        "name" : "nlargealloc",
        "type" : 12
      }, {
        "name" : "largefree",
        "type" : 12
      }, {
        "name" : "nlargefree",
        "type" : 12
      }, {
        "name" : "nsmallfree",
        "type" : 154
      }, {
        "name" : "arenas",
        "type" : 155
      }, {
        "name" : "heapArenaAlloc",
        "type" : 164
      }, {
        "name" : "arenaHints",
        "type" : 166
      }, {
        "name" : "arena",
        "type" : 164
      }, {
        "name" : "allArenas",
        "type" : 169
      }, {
        "name" : "sweepArenas",
        "type" : 169
      }, {
        "name" : "curArena",
        "type" : 171
      }, {
        "name" : "_",
        "type" : 16
      }, {
        "name" : "central",
        "type" : 172
      }, {
        "name" : "spanalloc",
        "type" : 177
      }, {
        "name" : "cachealloc",
        "type" : 177
      }, {
        "name" : "specialfinalizeralloc",
        "type" : 177
      }, {
        "name" : "specialprofilealloc",
        "type" : 177
      }, {
        "name" : "speciallock",
        "type" : 22
      }, {
        "name" : "arenaHintAlloc",
        "type" : 177
      }, {
        "name" : "unused",
        "type" : 184
      } ],
      "name" : "struct{lock runtime.mutex; pages runtime.pageAlloc; sweepgen uint32; sweepdone uint32; sweepers uint32; allspans []*runtime.mspan; sweepSpans [2]runtime.gcSweepBuf; pagesInUse uint64; pagesSwept uint64; pagesSweptBasis uint64; sweepHeapLiveBasis uint64; sweepPagesPerByte float64; scavengeGoal uint64; reclaimIndex uint64; reclaimCredit uintptr; largealloc uint64; nlargealloc uint64; largefree uint64; nlargefree uint64; nsmallfree [67]uint64; arenas [1]*[4194304]*runtime.heapArena; heapArenaAlloc runtime.linearAlloc; arenaHints *runtime.arenaHint; arena runtime.linearAlloc; allArenas []runtime.arenaIdx; sweepArenas []runtime.arenaIdx; curArena struct{base uintptr; end uintptr}; _ uint32; central [134]struct{mcentral runtime.mcentral; pad [8]byte}; spanalloc runtime.fixalloc; cachealloc runtime.fixalloc; specialfinalizeralloc runtime.fixalloc; specialprofilealloc runtime.fixalloc; speciallock runtime.mutex; arenaHintAlloc runtime.fixalloc; unused *runtime.specialfinalizer}",
      "type" : "Struct",
      "underlying" : 127
    }, {
      "local-name" : "pageAlloc",
      "name" : "runtime.pageAlloc",
      "package" : 0,
      "type" : "Named",
      "underlying" : 129
    }, {
      "fields" : [ {
        "name" : "summary",
        "type" : 130
      }, {
        "name" : "chunks",
        "type" : 133
      }, {
        "name" : "searchAddr",
        "type" : 10
      }, {
        "name" : "scavAddr",
        "type" : 10
      }, {
        "name" : "scavReleased",
        "type" : 10
      }, {
        "name" : "start",
        "type" : 141
      }, {
        "name" : "end",
        "type" : 141
      }, {
        "name" : "inUse",
        "type" : 142
      }, {
        "name" : "mheapLock",
        "type" : 148
      }, {
        "name" : "sysStat",
        "type" : 147
      }, {
        "name" : "test",
        "type" : 2
      } ],
      "name" : "struct{summary [5][]runtime.pallocSum; chunks [8192]*[8192]runtime.pallocData; searchAddr uintptr; scavAddr uintptr; scavReleased uintptr; start runtime.chunkIdx; end runtime.chunkIdx; inUse runtime.addrRanges; mheapLock *runtime.mutex; sysStat *uint64; test bool}",
      "type" : "Struct",
      "underlying" : 129
    }, {
      "elem" : 131,
      "name" : "[5][]runtime.pallocSum",
      "type" : "Array",
      "underlying" : 130
    }, {
      "elem" : 132,
      "name" : "[]runtime.pallocSum",
      "type" : "Slice",
      "underlying" : 131
    }, {
      "local-name" : "pallocSum",
      "name" : "runtime.pallocSum",
      "package" : 0,
      "type" : "Named",
      "underlying" : 12
    }, {
      "elem" : 134,
      "name" : "[8192]*[8192]runtime.pallocData",
      "type" : "Array",
      "underlying" : 133
    }, {
      "elem" : 135,
      "name" : "*[8192]runtime.pallocData",
      "type" : "Pointer",
      "underlying" : 134
    }, {
      "elem" : 136,
      "name" : "[8192]runtime.pallocData",
      "type" : "Array",
      "underlying" : 135
    }, {
      "local-name" : "pallocData",
      "name" : "runtime.pallocData",
      "package" : 0,
      "type" : "Named",
      "underlying" : 137
    }, {
      "fields" : [ {
        "name" : "pallocBits",
        "type" : 138
      }, {
        "name" : "scavenged",
        "type" : 140
      } ],
      "name" : "struct{runtime.pallocBits; scavenged runtime.pageBits}",
      "type" : "Struct",
      "underlying" : 137
    }, {
      "local-name" : "pallocBits",
      "name" : "runtime.pallocBits",
      "package" : 0,
      "type" : "Named",
      "underlying" : 139
    }, {
      "elem" : 12,
      "name" : "[8]uint64",
      "type" : "Array",
      "underlying" : 139
    }, {
      "local-name" : "pageBits",
      "name" : "runtime.pageBits",
      "package" : 0,
      "type" : "Named",
      "underlying" : 139
    }, {
      "local-name" : "chunkIdx",
      "name" : "runtime.chunkIdx",
      "package" : 0,
      "type" : "Named",
      "underlying" : 98
    }, {
      "local-name" : "addrRanges",
      "name" : "runtime.addrRanges",
      "package" : 0,
      "type" : "Named",
      "underlying" : 143
    }, {
      "fields" : [ {
        "name" : "ranges",
        "type" : 144
      }, {
        "name" : "sysStat",
        "type" : 147
      } ],
      "name" : "struct{ranges []runtime.addrRange; sysStat *uint64}",
      "type" : "Struct",
      "underlying" : 143
    }, {
      "elem" : 145,
      "name" : "[]runtime.addrRange",
      "type" : "Slice",
      "underlying" : 144
    }, {
      "local-name" : "addrRange",
      "name" : "runtime.addrRange",
      "package" : 0,
      "type" : "Named",
      "underlying" : 146
    }, {
      "fields" : [ {
        "name" : "base",
        "type" : 10
      }, {
        "name" : "limit",
        "type" : 10
      } ],
      "name" : "struct{base uintptr; limit uintptr}",
      "type" : "Struct",
      "underlying" : 146
    }, {
      "elem" : 12,
      "name" : "*uint64",
      "type" : "Pointer",
      "underlying" : 147
    }, {
      "elem" : 22,
      "name" : "*runtime.mutex",
      "type" : "Pointer",
      "underlying" : 148
    }, {
      "elem" : 4,
      "name" : "[]*runtime.mspan",
      "type" : "Slice",
      "underlying" : 149
    }, {
      "elem" : 151,
      "name" : "[2]runtime.gcSweepBuf",
      "type" : "Array",
      "underlying" : 150
    }, {
      "local-name" : "gcSweepBuf",
      "name" : "runtime.gcSweepBuf",
      "package" : 0,
      "type" : "Named",
      "underlying" : 152
    }, {
      "fields" : [ {
        "name" : "spineLock",
        "type" : 22
      }, {
        "name" : "spine",
        "type" : 37
      }, {
        "name" : "spineLen",
        "type" : 10
      }, {
        "name" : "spineCap",
        "type" : 10
      }, {
        "name" : "index",
        "type" : 16
      } ],
      "name" : "struct{spineLock runtime.mutex; spine unsafe.Pointer; spineLen uintptr; spineCap uintptr; index uint32}",
      "type" : "Struct",
      "underlying" : 152
    }, {
      "name" : "float64",
      "type" : "Basic",
      "underlying" : 153
    }, {
      "elem" : 12,
      "name" : "[67]uint64",
      "type" : "Array",
      "underlying" : 154
    }, {
      "elem" : 156,
      "name" : "[1]*[4194304]*runtime.heapArena",
      "type" : "Array",
      "underlying" : 155
    }, {
      "elem" : 157,
      "name" : "*[4194304]*runtime.heapArena",
      "type" : "Pointer",
      "underlying" : 156
    }, {
      "elem" : 158,
      "name" : "[4194304]*runtime.heapArena",
      "type" : "Array",
      "underlying" : 157
    }, {
      "elem" : 159,
      "name" : "*runtime.heapArena",
      "type" : "Pointer",
      "underlying" : 158
    }, {
      "local-name" : "heapArena",
      "name" : "runtime.heapArena",
      "package" : 0,
      "type" : "Named",
      "underlying" : 160
    }, {
      "fields" : [ {
        "name" : "bitmap",
        "type" : 161
      }, {
        "name" : "spans",
        "type" : 162
      }, {
        "name" : "pageInUse",
        "type" : 163
      }, {
        "name" : "pageMarks",
        "type" : 163
      }, {
        "name" : "zeroedBase",
        "type" : 10
      } ],
      "name" : "struct{bitmap [2097152]byte; spans [8192]*runtime.mspan; pageInUse [1024]uint8; pageMarks [1024]uint8; zeroedBase uintptr}",
      "type" : "Struct",
      "underlying" : 160
    }, {
      "elem" : 27,
      "name" : "[2097152]byte",
      "type" : "Array",
      "underlying" : 161
    }, {
      "elem" : 4,
      "name" : "[8192]*runtime.mspan",
      "type" : "Array",
      "underlying" : 162
    }, {
      "elem" : 15,
      "name" : "[1024]uint8",
      "type" : "Array",
      "underlying" : 163
    }, {
      "local-name" : "linearAlloc",
      "name" : "runtime.linearAlloc",
      "package" : 0,
      "type" : "Named",
      "underlying" : 165
    }, {
      "fields" : [ {
        "name" : "next",
        "type" : 10
      }, {
        "name" : "mapped",
        "type" : 10
      }, {
        "name" : "end",
        "type" : 10
      } ],
      "name" : "struct{next uintptr; mapped uintptr; end uintptr}",
      "type" : "Struct",
      "underlying" : 165
    }, {
      "elem" : 167,
      "name" : "*runtime.arenaHint",
      "type" : "Pointer",
      "underlying" : 166
    }, {
      "local-name" : "arenaHint",
      "name" : "runtime.arenaHint",
      "package" : 0,
      "type" : "Named",
      "underlying" : 168
    }, {
      "fields" : [ {
        "name" : "addr",
        "type" : 10
      }, {
        "name" : "down",
        "type" : 2
      }, {
        "name" : "next",
        "type" : 166
      } ],
      "name" : "struct{addr uintptr; down bool; next *runtime.arenaHint}",
      "type" : "Struct",
      "underlying" : 168
    }, {
      "elem" : 170,
      "name" : "[]runtime.arenaIdx",
      "type" : "Slice",
      "underlying" : 169
    }, {
      "local-name" : "arenaIdx",
      "name" : "runtime.arenaIdx",
      "package" : 0,
      "type" : "Named",
      "underlying" : 98
    }, {
      "fields" : [ {
        "name" : "base",
        "type" : 10
      }, {
        "name" : "end",
        "type" : 10
      } ],
      "name" : "struct{base uintptr; end uintptr}",
      "type" : "Struct",
      "underlying" : 171
    }, {
      "elem" : 173,
      "name" : "[134]struct{mcentral runtime.mcentral; pad [8]byte}",
      "type" : "Array",
      "underlying" : 172
    }, {
      "fields" : [ {
        "name" : "mcentral",
        "type" : 174
      }, {
        "name" : "pad",
        "type" : 176
      } ],
      "name" : "struct{mcentral runtime.mcentral; pad [8]byte}",
      "type" : "Struct",
      "underlying" : 173
    }, {
      "local-name" : "mcentral",
      "name" : "runtime.mcentral",
      "package" : 0,
      "type" : "Named",
      "underlying" : 175
    }, {
      "fields" : [ {
        "name" : "lock",
        "type" : 22
      }, {
        "name" : "spanclass",
        "type" : 18
      }, {
        "name" : "nonempty",
        "type" : 8
      }, {
        "name" : "empty",
        "type" : 8
      }, {
        "name" : "nmalloc",
        "type" : 12
      } ],
      "name" : "struct{lock runtime.mutex; spanclass runtime.spanClass; nonempty runtime.mSpanList; empty runtime.mSpanList; nmalloc uint64}",
      "type" : "Struct",
      "underlying" : 175
    }, {
      "elem" : 27,
      "name" : "[8]byte",
      "type" : "Array",
      "underlying" : 176
    }, {
      "local-name" : "fixalloc",
      "name" : "runtime.fixalloc",
      "package" : 0,
      "type" : "Named",
      "underlying" : 178
    }, {
      "fields" : [ {
        "name" : "size",
        "type" : 10
      }, {
        "name" : "first",
        "type" : 179
      }, {
        "name" : "arg",
        "type" : 37
      }, {
        "name" : "list",
        "type" : 181
      }, {
        "name" : "chunk",
        "type" : 10
      }, {
        "name" : "nchunk",
        "type" : 16
      }, {
        "name" : "inuse",
        "type" : 10
      }, {
        "name" : "stat",
        "type" : 147
      }, {
        "name" : "zero",
        "type" : 2
      } ],
      "name" : "struct{size uintptr; first func(arg unsafe.Pointer, p unsafe.Pointer); arg unsafe.Pointer; list *runtime.mlink; chunk uintptr; nchunk uint32; inuse uintptr; stat *uint64; zero bool}",
      "type" : "Struct",
      "underlying" : 178
    }, {
      "name" : "func(arg unsafe.Pointer, p unsafe.Pointer)",
      "params" : 180,
      "recv" : -1,
      "results" : 59,
      "type" : "Signature",
      "underlying" : 179,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "arg",
        "type" : 37
      }, {
        "name" : "p",
        "type" : 37
      } ],
      "name" : "(arg unsafe.Pointer, p unsafe.Pointer)",
      "type" : "Tuple",
      "underlying" : 180
    }, {
      "elem" : 182,
      "name" : "*runtime.mlink",
      "type" : "Pointer",
      "underlying" : 181
    }, {
      "local-name" : "mlink",
      "name" : "runtime.mlink",
      "package" : 0,
      "type" : "Named",
      "underlying" : 183
    }, {
      "fields" : [ {
        "name" : "next",
        "type" : 181
      } ],
      "name" : "struct{next *runtime.mlink}",
      "type" : "Struct",
      "underlying" : 183
    }, {
      "elem" : 185,
      "name" : "*runtime.specialfinalizer",
      "type" : "Pointer",
      "underlying" : 184
    }, {
      "local-name" : "specialfinalizer",
      "name" : "runtime.specialfinalizer",
      "package" : 0,
      "type" : "Named",
      "underlying" : 186
    }, {
      "fields" : [ {
        "name" : "special",
        "type" : 25
      }, {
        "name" : "fn",
        "type" : 43
      }, {
        "name" : "nret",
        "type" : 10
      }, {
        "name" : "fint",
        "type" : 99
      }, {
        "name" : "ot",
        "type" : 187
      } ],
      "name" : "struct{special runtime.special; fn *runtime.funcval; nret uintptr; fint *runtime._type; ot *runtime.ptrtype}",
      "type" : "Struct",
      "underlying" : 186
    }, {
      "elem" : 188,
      "name" : "*runtime.ptrtype",
      "type" : "Pointer",
      "underlying" : 187
    }, {
      "local-name" : "ptrtype",
      "name" : "runtime.ptrtype",
      "package" : 0,
      "type" : "Named",
      "underlying" : 189
    }, {
      "fields" : [ {
        "name" : "typ",
        "type" : 100
      }, {
        "name" : "elem",
        "type" : 99
      } ],
      "name" : "struct{typ runtime._type; elem *runtime._type}",
      "type" : "Struct",
      "underlying" : 189
    }, {
      "name" : "func() *runtime.g",
      "params" : 59,
      "recv" : -1,
      "results" : 191,
      "type" : "Signature",
      "underlying" : 190,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 29
      } ],
      "name" : "(*runtime.g)",
      "type" : "Tuple",
      "underlying" : 191
    }, {
      "name" : "untyped bool",
      "type" : "Basic",
      "underlying" : 192
    }, {
      "name" : "func(s string)",
      "params" : 194,
      "recv" : -1,
      "results" : 59,
      "type" : "Signature",
      "underlying" : 193,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "s",
        "type" : 62
      } ],
      "name" : "(s string)",
      "type" : "Tuple",
      "underlying" : 194
    }, {
      "name" : "func() runtime.mSpanState",
      "params" : 59,
      "recv" : -1,
      "results" : 196,
      "type" : "Signature",
      "underlying" : 195,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 21
      } ],
      "name" : "(runtime.mSpanState)",
      "type" : "Tuple",
      "underlying" : 196
    }, {
      "name" : "func(string, runtime.mSpanState, string, uint32, string, uint32, string)",
      "params" : 198,
      "recv" : -1,
      "results" : 59,
      "type" : "Signature",
      "underlying" : 197,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 62
      }, {
        "name" : "",
        "type" : 21
      }, {
        "name" : "",
        "type" : 62
      }, {
        "name" : "",
        "type" : 16
      }, {
        "name" : "",
        "type" : 62
      }, {
        "name" : "",
        "type" : 16
      }, {
        "name" : "",
        "type" : 62
      } ],
      "name" : "(string, runtime.mSpanState, string, uint32, string, uint32, string)",
      "type" : "Tuple",
      "underlying" : 198
    }, {
      "name" : "func(bytesSwept uintptr)",
      "params" : 200,
      "recv" : -1,
      "results" : 59,
      "type" : "Signature",
      "underlying" : 199,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "bytesSwept",
        "type" : 10
      } ],
      "name" : "(bytesSwept uintptr)",
      "type" : "Tuple",
      "underlying" : 200
    }, {
      "name" : "func(ptr *uint64, delta int64) uint64",
      "params" : 202,
      "recv" : -1,
      "results" : 203,
      "type" : "Signature",
      "underlying" : 201,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "ptr",
        "type" : 147
      }, {
        "name" : "delta",
        "type" : 61
      } ],
      "name" : "(ptr *uint64, delta int64)",
      "type" : "Tuple",
      "underlying" : 202
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 12
      } ],
      "name" : "(uint64)",
      "type" : "Tuple",
      "underlying" : 203
    }, {
      "elem" : 24,
      "name" : "**runtime.special",
      "type" : "Pointer",
      "underlying" : 204
    }, {
      "name" : "untyped nil",
      "type" : "Basic",
      "underlying" : 205
    }, {
      "name" : "func() uintptr",
      "params" : 59,
      "recv" : -1,
      "results" : 207,
      "type" : "Signature",
      "underlying" : 206,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 10
      } ],
      "name" : "(uintptr)",
      "type" : "Tuple",
      "underlying" : 207
    }, {
      "local-name" : "markBits",
      "name" : "runtime.markBits",
      "package" : 0,
      "type" : "Named",
      "underlying" : 209
    }, {
      "fields" : [ {
        "name" : "bytep",
        "type" : 210
      }, {
        "name" : "mask",
        "type" : 15
      }, {
        "name" : "index",
        "type" : 10
      } ],
      "name" : "struct{bytep *uint8; mask uint8; index uintptr}",
      "type" : "Struct",
      "underlying" : 209
    }, {
      "elem" : 15,
      "name" : "*uint8",
      "type" : "Pointer",
      "underlying" : 210
    }, {
      "name" : "func(objIndex uintptr) runtime.markBits",
      "params" : 212,
      "recv" : -1,
      "results" : 213,
      "type" : "Signature",
      "underlying" : 211,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "objIndex",
        "type" : 10
      } ],
      "name" : "(objIndex uintptr)",
      "type" : "Tuple",
      "underlying" : 212
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 208
      } ],
      "name" : "(runtime.markBits)",
      "type" : "Tuple",
      "underlying" : 213
    }, {
      "name" : "func() bool",
      "params" : 59,
      "recv" : -1,
      "results" : 3,
      "type" : "Signature",
      "underlying" : 214,
      "variadic" : false
    }, {
      "name" : "func(s *runtime.special, p unsafe.Pointer, size uintptr)",
      "params" : 216,
      "recv" : -1,
      "results" : 59,
      "type" : "Signature",
      "underlying" : 215,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "s",
        "type" : 24
      }, {
        "name" : "p",
        "type" : 37
      }, {
        "name" : "size",
        "type" : 10
      } ],
      "name" : "(s *runtime.special, p unsafe.Pointer, size uintptr)",
      "type" : "Tuple",
      "underlying" : 216
    }, {
      "name" : "func() runtime.markBits",
      "params" : 59,
      "recv" : -1,
      "results" : 213,
      "type" : "Signature",
      "underlying" : 217,
      "variadic" : false
    }, {
      "name" : "func(allocBitIndex uintptr) runtime.markBits",
      "params" : 219,
      "recv" : -1,
      "results" : 213,
      "type" : "Signature",
      "underlying" : 218,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "allocBitIndex",
        "type" : 10
      } ],
      "name" : "(allocBitIndex uintptr)",
      "type" : "Tuple",
      "underlying" : 219
    }, {
      "name" : "func(p unsafe.Pointer, size uintptr)",
      "params" : 221,
      "recv" : -1,
      "results" : 59,
      "type" : "Signature",
      "underlying" : 220,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "p",
        "type" : 37
      }, {
        "name" : "size",
        "type" : 10
      } ],
      "name" : "(p unsafe.Pointer, size uintptr)",
      "type" : "Tuple",
      "underlying" : 221
    }, {
      "name" : "func(x unsafe.Pointer, size uintptr)",
      "params" : 223,
      "recv" : -1,
      "results" : 59,
      "type" : "Signature",
      "underlying" : 222,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "x",
        "type" : 37
      }, {
        "name" : "size",
        "type" : 10
      } ],
      "name" : "(x unsafe.Pointer, size uintptr)",
      "type" : "Tuple",
      "underlying" : 223
    }, {
      "name" : "func(p unsafe.Pointer, sz uintptr)",
      "params" : 225,
      "recv" : -1,
      "results" : 59,
      "type" : "Signature",
      "underlying" : 224,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "p",
        "type" : 37
      }, {
        "name" : "sz",
        "type" : 10
      } ],
      "name" : "(p unsafe.Pointer, sz uintptr)",
      "type" : "Tuple",
      "underlying" : 225
    }, {
      "name" : "func(addr unsafe.Pointer, sz uintptr)",
      "params" : 227,
      "recv" : -1,
      "results" : 59,
      "type" : "Signature",
      "underlying" : 226,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "addr",
        "type" : 37
      }, {
        "name" : "sz",
        "type" : 10
      } ],
      "name" : "(addr unsafe.Pointer, sz uintptr)",
      "type" : "Tuple",
      "underlying" : 227
    }, {
      "name" : "func() int",
      "params" : 59,
      "recv" : -1,
      "results" : 229,
      "type" : "Signature",
      "underlying" : 228,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 79
      } ],
      "name" : "(int)",
      "type" : "Tuple",
      "underlying" : 229
    }, {
      "name" : "func() int8",
      "params" : 59,
      "recv" : -1,
      "results" : 231,
      "type" : "Signature",
      "underlying" : 230,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 63
      } ],
      "name" : "(int8)",
      "type" : "Tuple",
      "underlying" : 231
    }, {
      "name" : "func(string, uintptr, string, uint16, string, uint16, string, uint16, string)",
      "params" : 233,
      "recv" : -1,
      "results" : 59,
      "type" : "Signature",
      "underlying" : 232,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 62
      }, {
        "name" : "",
        "type" : 10
      }, {
        "name" : "",
        "type" : 62
      }, {
        "name" : "",
        "type" : 17
      }, {
        "name" : "",
        "type" : 62
      }, {
        "name" : "",
        "type" : 17
      }, {
        "name" : "",
        "type" : 62
      }, {
        "name" : "",
        "type" : 17
      }, {
        "name" : "",
        "type" : 62
      } ],
      "name" : "(string, uintptr, string, uint16, string, uint16, string, uint16, string)",
      "type" : "Tuple",
      "underlying" : 233
    }, {
      "elem" : 235,
      "name" : "*runtime.p",
      "type" : "Pointer",
      "underlying" : 234
    }, {
      "local-name" : "p",
      "name" : "runtime.p",
      "package" : 0,
      "type" : "Named",
      "underlying" : 236
    }, {
      "fields" : [ {
        "name" : "id",
        "type" : 42
      }, {
        "name" : "status",
        "type" : 16
      }, {
        "name" : "link",
        "type" : 60
      }, {
        "name" : "schedtick",
        "type" : 16
      }, {
        "name" : "syscalltick",
        "type" : 16
      }, {
        "name" : "sysmontick",
        "type" : 237
      }, {
        "name" : "m",
        "type" : 68
      }, {
        "name" : "mcache",
        "type" : 69
      }, {
        "name" : "pcache",
        "type" : 239
      }, {
        "name" : "raceprocctx",
        "type" : 10
      }, {
        "name" : "deferpool",
        "type" : 241
      }, {
        "name" : "deferpoolbuf",
        "type" : 243
      }, {
        "name" : "goidcache",
        "type" : 12
      }, {
        "name" : "goidcacheend",
        "type" : 12
      }, {
        "name" : "runqhead",
        "type" : 16
      }, {
        "name" : "runqtail",
        "type" : 16
      }, {
        "name" : "runq",
        "type" : 245
      }, {
        "name" : "runnext",
        "type" : 51
      }, {
        "name" : "gFree",
        "type" : 246
      }, {
        "name" : "sudogcache",
        "type" : 249
      }, {
        "name" : "sudogbuf",
        "type" : 250
      }, {
        "name" : "mspancache",
        "type" : 251
      }, {
        "name" : "tracebuf",
        "type" : 115
      }, {
        "name" : "traceSweep",
        "type" : 2
      }, {
        "name" : "traceSwept",
        "type" : 10
      }, {
        "name" : "traceReclaimed",
        "type" : 10
      }, {
        "name" : "palloc",
        "type" : 253
      }, {
        "name" : "_",
        "type" : 16
      }, {
        "name" : "timer0When",
        "type" : 12
      }, {
        "name" : "gcAssistTime",
        "type" : 61
      }, {
        "name" : "gcFractionalMarkTime",
        "type" : 61
      }, {
        "name" : "gcBgMarkWorker",
        "type" : 51
      }, {
        "name" : "gcMarkWorkerMode",
        "type" : 257
      }, {
        "name" : "gcMarkWorkerStartTime",
        "type" : 61
      }, {
        "name" : "gcw",
        "type" : 258
      }, {
        "name" : "wbBuf",
        "type" : 269
      }, {
        "name" : "runSafePointFn",
        "type" : 16
      }, {
        "name" : "timersLock",
        "type" : 22
      }, {
        "name" : "timers",
        "type" : 272
      }, {
        "name" : "numTimers",
        "type" : 16
      }, {
        "name" : "adjustTimers",
        "type" : 16
      }, {
        "name" : "deletedTimers",
        "type" : 16
      }, {
        "name" : "timerRaceCtx",
        "type" : 10
      }, {
        "name" : "preempt",
        "type" : 2
      }, {
        "name" : "pad",
        "type" : 273
      } ],
      "name" : "struct{id int32; status uint32; link runtime.puintptr; schedtick uint32; syscalltick uint32; sysmontick runtime.sysmontick; m runtime.muintptr; mcache *runtime.mcache; pcache runtime.pageCache; raceprocctx uintptr; deferpool [5][]*runtime._defer; deferpoolbuf [5][32]*runtime._defer; goidcache uint64; goidcacheend uint64; runqhead uint32; runqtail uint32; runq [256]runtime.guintptr; runnext runtime.guintptr; gFree struct{runtime.gList; n int32}; sudogcache []*runtime.sudog; sudogbuf [128]*runtime.sudog; mspancache struct{len int; buf [128]*runtime.mspan}; tracebuf runtime.traceBufPtr; traceSweep bool; traceSwept uintptr; traceReclaimed uintptr; palloc runtime.persistentAlloc; _ uint32; timer0When uint64; gcAssistTime int64; gcFractionalMarkTime int64; gcBgMarkWorker runtime.guintptr; gcMarkWorkerMode runtime.gcMarkWorkerMode; gcMarkWorkerStartTime int64; gcw runtime.gcWork; wbBuf runtime.wbBuf; runSafePointFn uint32; timersLock runtime.mutex; timers []*runtime.timer; numTimers uint32; adjustTimers uint32; deletedTimers uint32; timerRaceCtx uintptr; preempt bool; pad internal/cpu.CacheLinePad}",
      "type" : "Struct",
      "underlying" : 236
    }, {
      "local-name" : "sysmontick",
      "name" : "runtime.sysmontick",
      "package" : 0,
      "type" : "Named",
      "underlying" : 238
    }, {
      "fields" : [ {
        "name" : "schedtick",
        "type" : 16
      }, {
        "name" : "schedwhen",
        "type" : 61
      }, {
        "name" : "syscalltick",
        "type" : 16
      }, {
        "name" : "syscallwhen",
        "type" : 61
      } ],
      "name" : "struct{schedtick uint32; schedwhen int64; syscalltick uint32; syscallwhen int64}",
      "type" : "Struct",
      "underlying" : 238
    }, {
      "local-name" : "pageCache",
      "name" : "runtime.pageCache",
      "package" : 0,
      "type" : "Named",
      "underlying" : 240
    }, {
      "fields" : [ {
        "name" : "base",
        "type" : 10
      }, {
        "name" : "cache",
        "type" : 12
      }, {
        "name" : "scav",
        "type" : 12
      } ],
      "name" : "struct{base uintptr; cache uint64; scav uint64}",
      "type" : "Struct",
      "underlying" : 240
    }, {
      "elem" : 242,
      "name" : "[5][]*runtime._defer",
      "type" : "Array",
      "underlying" : 241
    }, {
      "elem" : 39,
      "name" : "[]*runtime._defer",
      "type" : "Slice",
      "underlying" : 242
    }, {
      "elem" : 244,
      "name" : "[5][32]*runtime._defer",
      "type" : "Array",
      "underlying" : 243
    }, {
      "elem" : 39,
      "name" : "[32]*runtime._defer",
      "type" : "Array",
      "underlying" : 244
    }, {
      "elem" : 51,
      "name" : "[256]runtime.guintptr",
      "type" : "Array",
      "underlying" : 245
    }, {
      "fields" : [ {
        "name" : "gList",
        "type" : 247
      }, {
        "name" : "n",
        "type" : 42
      } ],
      "name" : "struct{runtime.gList; n int32}",
      "type" : "Struct",
      "underlying" : 246
    }, {
      "local-name" : "gList",
      "name" : "runtime.gList",
      "package" : 0,
      "type" : "Named",
      "underlying" : 248
    }, {
      "fields" : [ {
        "name" : "head",
        "type" : 51
      } ],
      "name" : "struct{head runtime.guintptr}",
      "type" : "Struct",
      "underlying" : 248
    }, {
      "elem" : 92,
      "name" : "[]*runtime.sudog",
      "type" : "Slice",
      "underlying" : 249
    }, {
      "elem" : 92,
      "name" : "[128]*runtime.sudog",
      "type" : "Array",
      "underlying" : 250
    }, {
      "fields" : [ {
        "name" : "len",
        "type" : 79
      }, {
        "name" : "buf",
        "type" : 252
      } ],
      "name" : "struct{len int; buf [128]*runtime.mspan}",
      "type" : "Struct",
      "underlying" : 251
    }, {
      "elem" : 4,
      "name" : "[128]*runtime.mspan",
      "type" : "Array",
      "underlying" : 252
    }, {
      "local-name" : "persistentAlloc",
      "name" : "runtime.persistentAlloc",
      "package" : 0,
      "type" : "Named",
      "underlying" : 254
    }, {
      "fields" : [ {
        "name" : "base",
        "type" : 255
      }, {
        "name" : "off",
        "type" : 10
      } ],
      "name" : "struct{base *runtime.notInHeap; off uintptr}",
      "type" : "Struct",
      "underlying" : 254
    }, {
      "elem" : 256,
      "name" : "*runtime.notInHeap",
      "type" : "Pointer",
      "underlying" : 255
    }, {
      "local-name" : "notInHeap",
      "name" : "runtime.notInHeap",
      "package" : 0,
      "type" : "Named",
      "underlying" : 83
    }, {
      "local-name" : "gcMarkWorkerMode",
      "name" : "runtime.gcMarkWorkerMode",
      "package" : 0,
      "type" : "Named",
      "underlying" : 79
    }, {
      "local-name" : "gcWork",
      "name" : "runtime.gcWork",
      "package" : 0,
      "type" : "Named",
      "underlying" : 259
    }, {
      "fields" : [ {
        "name" : "wbuf1",
        "type" : 260
      }, {
        "name" : "wbuf2",
        "type" : 260
      }, {
        "name" : "bytesMarked",
        "type" : 12
      }, {
        "name" : "scanWork",
        "type" : 61
      }, {
        "name" : "flushedWork",
        "type" : 2
      }, {
        "name" : "pauseGen",
        "type" : 16
      }, {
        "name" : "putGen",
        "type" : 16
      }, {
        "name" : "pauseStack",
        "type" : 268
      } ],
      "name" : "struct{wbuf1 *runtime.workbuf; wbuf2 *runtime.workbuf; bytesMarked uint64; scanWork int64; flushedWork bool; pauseGen uint32; putGen uint32; pauseStack [16]uintptr}",
      "type" : "Struct",
      "underlying" : 259
    }, {
      "elem" : 261,
      "name" : "*runtime.workbuf",
      "type" : "Pointer",
      "underlying" : 260
    }, {
      "local-name" : "workbuf",
      "name" : "runtime.workbuf",
      "package" : 0,
      "type" : "Named",
      "underlying" : 262
    }, {
      "fields" : [ {
        "name" : "workbufhdr",
        "type" : 263
      }, {
        "name" : "obj",
        "type" : 267
      } ],
      "name" : "struct{runtime.workbufhdr; obj [253]uintptr}",
      "type" : "Struct",
      "underlying" : 262
    }, {
      "local-name" : "workbufhdr",
      "name" : "runtime.workbufhdr",
      "package" : 0,
      "type" : "Named",
      "underlying" : 264
    }, {
      "fields" : [ {
        "name" : "node",
        "type" : 265
      }, {
        "name" : "nobj",
        "type" : 79
      } ],
      "name" : "struct{node runtime.lfnode; nobj int}",
      "type" : "Struct",
      "underlying" : 264
    }, {
      "local-name" : "lfnode",
      "name" : "runtime.lfnode",
      "package" : 0,
      "type" : "Named",
      "underlying" : 266
    }, {
      "fields" : [ {
        "name" : "next",
        "type" : 12
      }, {
        "name" : "pushcnt",
        "type" : 10
      } ],
      "name" : "struct{next uint64; pushcnt uintptr}",
      "type" : "Struct",
      "underlying" : 266
    }, {
      "elem" : 10,
      "name" : "[253]uintptr",
      "type" : "Array",
      "underlying" : 267
    }, {
      "elem" : 10,
      "name" : "[16]uintptr",
      "type" : "Array",
      "underlying" : 268
    }, {
      "local-name" : "wbBuf",
      "name" : "runtime.wbBuf",
      "package" : 0,
      "type" : "Named",
      "underlying" : 270
    }, {
      "fields" : [ {
        "name" : "next",
        "type" : 10
      }, {
        "name" : "end",
        "type" : 10
      }, {
        "name" : "buf",
        "type" : 271
      }, {
        "name" : "debugGen",
        "type" : 16
      } ],
      "name" : "struct{next uintptr; end uintptr; buf [512]uintptr; debugGen uint32}",
      "type" : "Struct",
      "underlying" : 270
    }, {
      "elem" : 10,
      "name" : "[512]uintptr",
      "type" : "Array",
      "underlying" : 271
    }, {
      "elem" : 110,
      "name" : "[]*runtime.timer",
      "type" : "Slice",
      "underlying" : 272
    }, {
      "local-name" : "CacheLinePad",
      "name" : "internal/cpu.CacheLinePad",
      "package" : 4,
      "type" : "Named",
      "underlying" : 274
    }, {
      "fields" : [ {
        "name" : "_",
        "type" : 275
      } ],
      "name" : "struct{_ [64]byte}",
      "type" : "Struct",
      "underlying" : 274
    }, {
      "elem" : 27,
      "name" : "[64]byte",
      "type" : "Array",
      "underlying" : 275
    }, {
      "name" : "func() *runtime.p",
      "params" : 59,
      "recv" : -1,
      "results" : 277,
      "type" : "Signature",
      "underlying" : 276,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 234
      } ],
      "name" : "(*runtime.p)",
      "type" : "Tuple",
      "underlying" : 277
    }, {
      "name" : "func(nelems uintptr) *runtime.gcBits",
      "params" : 279,
      "recv" : -1,
      "results" : 280,
      "type" : "Signature",
      "underlying" : 278,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "nelems",
        "type" : 10
      } ],
      "name" : "(nelems uintptr)",
      "type" : "Tuple",
      "underlying" : 279
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 13
      } ],
      "name" : "(*runtime.gcBits)",
      "type" : "Tuple",
      "underlying" : 280
    }, {
      "name" : "func(whichByte uintptr)",
      "params" : 282,
      "recv" : -1,
      "results" : 59,
      "type" : "Signature",
      "underlying" : 281,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "whichByte",
        "type" : 10
      } ],
      "name" : "(whichByte uintptr)",
      "type" : "Tuple",
      "underlying" : 282
    }, {
      "name" : "func(ptr *uint32, val uint32)",
      "params" : 284,
      "recv" : -1,
      "results" : 59,
      "type" : "Signature",
      "underlying" : 283,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "ptr",
        "type" : 285
      }, {
        "name" : "val",
        "type" : 16
      } ],
      "name" : "(ptr *uint32, val uint32)",
      "type" : "Tuple",
      "underlying" : 284
    }, {
      "elem" : 16,
      "name" : "*uint32",
      "type" : "Pointer",
      "underlying" : 285
    }, {
      "name" : "func(s *runtime.mspan, preserve bool, wasempty bool) bool",
      "params" : 287,
      "recv" : -1,
      "results" : 3,
      "type" : "Signature",
      "underlying" : 286,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "s",
        "type" : 4
      }, {
        "name" : "preserve",
        "type" : 2
      }, {
        "name" : "wasempty",
        "type" : 2
      } ],
      "name" : "(s *runtime.mspan, preserve bool, wasempty bool)",
      "type" : "Tuple",
      "underlying" : 287
    }, {
      "name" : "func(v unsafe.Pointer, n uintptr)",
      "params" : 289,
      "recv" : -1,
      "results" : 59,
      "type" : "Signature",
      "underlying" : 288,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "v",
        "type" : 37
      }, {
        "name" : "n",
        "type" : 10
      } ],
      "name" : "(v unsafe.Pointer, n uintptr)",
      "type" : "Tuple",
      "underlying" : 289
    }, {
      "name" : "func(s *runtime.mspan)",
      "params" : 291,
      "recv" : -1,
      "results" : 59,
      "type" : "Signature",
      "underlying" : 290,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "s",
        "type" : 4
      } ],
      "name" : "(s *runtime.mspan)",
      "type" : "Tuple",
      "underlying" : 291
    } ],
    "variables" : [ {
      "name" : "s",
      "package" : 0,
      "type" : 4,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "preserve",
      "package" : 0,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "[res0]",
      "package" : 0,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "trace",
      "package" : 0,
      "type" : 28,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "debug",
      "package" : 0,
      "type" : 125,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "mheap_",
      "package" : 0,
      "type" : 126,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "_g_",
      "package" : 0,
      "type" : 29,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "m",
      "package" : 0,
      "type" : 46,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "locks",
      "package" : 0,
      "type" : 42,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "mallocing",
      "package" : 0,
      "type" : 42,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "g0",
      "package" : 0,
      "type" : 29,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "sweepgen",
      "package" : 0,
      "type" : 16,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "sweepgen",
      "package" : 0,
      "type" : 16,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "state",
      "package" : 0,
      "type" : 19,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "state",
      "package" : 0,
      "type" : 21,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "sweepgen",
      "package" : 0,
      "type" : 16,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "enabled",
      "package" : 0,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "npages",
      "package" : 0,
      "type" : 10,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "pagesSwept",
      "package" : 0,
      "type" : 12,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "spanclass",
      "package" : 0,
      "type" : 18,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "spc",
      "package" : 0,
      "type" : 18,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "elemsize",
      "package" : 0,
      "type" : 10,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "size",
      "package" : 0,
      "type" : 10,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "res",
      "package" : 0,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "mcache",
      "package" : 0,
      "type" : 69,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "c",
      "package" : 0,
      "type" : 69,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "freeToHeap",
      "package" : 0,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "specials",
      "package" : 0,
      "type" : 24,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "specialp",
      "package" : 0,
      "type" : 204,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "special",
      "package" : 0,
      "type" : 24,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "offset",
      "package" : 0,
      "type" : 17,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "objIndex",
      "package" : 0,
      "type" : 10,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "mbits",
      "package" : 0,
      "type" : 208,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "p",
      "package" : 0,
      "type" : 10,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "tmp",
      "package" : 0,
      "type" : 24,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "endOffset",
      "package" : 0,
      "type" : 10,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "next",
      "package" : 0,
      "type" : 24,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "kind",
      "package" : 0,
      "type" : 27,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "hasFin",
      "package" : 0,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "y",
      "package" : 0,
      "type" : 24,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "p",
      "package" : 0,
      "type" : 10,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "allocfreetrace",
      "package" : 0,
      "type" : 42,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "clobberfree",
      "package" : 0,
      "type" : 42,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "i",
      "package" : 0,
      "type" : 10,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "nelems",
      "package" : 0,
      "type" : 10,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "mbits",
      "package" : 0,
      "type" : 208,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "abits",
      "package" : 0,
      "type" : 208,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "index",
      "package" : 0,
      "type" : 10,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "freeindex",
      "package" : 0,
      "type" : 10,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "x",
      "package" : 0,
      "type" : 10,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "nalloc",
      "package" : 0,
      "type" : 17,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "needzero",
      "package" : 0,
      "type" : 15,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "allocCount",
      "package" : 0,
      "type" : 17,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "nfreed",
      "package" : 0,
      "type" : 17,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "wasempty",
      "package" : 0,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "p",
      "package" : 0,
      "type" : 60,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "traceReclaimed",
      "package" : 0,
      "type" : 10,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "allocBits",
      "package" : 0,
      "type" : 13,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "gcmarkBits",
      "package" : 0,
      "type" : 13,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "state",
      "package" : 0,
      "type" : 21,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "local_nsmallfree",
      "package" : 0,
      "type" : 76,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "central",
      "package" : 0,
      "type" : 172,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "mcentral",
      "package" : 0,
      "type" : 174,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "efence",
      "package" : 0,
      "type" : 42,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "limit",
      "package" : 0,
      "type" : 10,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "local_nlargefree",
      "package" : 0,
      "type" : 10,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "local_largefree",
      "package" : 0,
      "type" : 10,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "sweepSpans",
      "package" : 0,
      "type" : 150,
      "exported" : false,
      "embedded" : false,
      "field" : true
    } ]
  },
  "go-version" : "1.14.3"
}