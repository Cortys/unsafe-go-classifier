{
  "usage" : {
    "file" : "mgcmark.go",
    "label1" : "delegate",
    "label2" : "ffi",
    "line" : "731",
    "module" : "std",
    "pkg" : "runtime",
    "project" : "kubernetes/kubernetes",
    "snippet" : "scanblock(uintptr(unsafe.Pointer(&gp.sched.ctxt)), sys.PtrSize, &oneptrmask[0], gcw, &state)",
    "version" : "std"
  },
  "cfg" : {
    "blocks" : [ {
      "update-vars" : [ ],
      "successors" : [ 2 ],
      "in-vars" : [ 0, 1, 2, 3, 4 ],
      "exit" : false,
      "out-vars" : [ 1, 2, 3, 4, 0 ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[entry]",
      "entry" : true,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ ],
      "in-vars" : [ ],
      "exit" : true,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[exit]",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 3, 5 ],
      "in-vars" : [ 0, 1, 2, 3, 4 ],
      "exit" : false,
      "out-vars" : [ 4, 0, 1, 2, 3 ],
      "decl-vars" : [ ],
      "line-start" : 686,
      "ast" : {
        "condition" : {
          "go-type" : 174,
          "kind" : "expression",
          "left" : {
            "go-type" : 29,
            "kind" : "expression",
            "left" : {
              "arguments" : [ {
                "go-type" : 2,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "gp",
                  "variable" : 0
                }
              } ],
              "ellipsis" : false,
              "function" : {
                "go-type" : 175,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Func",
                  "kind" : "ident",
                  "value" : "readgstatus"
                }
              },
              "go-type" : 29,
              "kind" : "expression",
              "type" : "call"
            },
            "operator" : "&",
            "right" : {
              "go-type" : 29,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "4096"
              }
            },
            "type" : "binary"
          },
          "operator" : "==",
          "right" : {
            "go-type" : 29,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 689,
      "code" : "if readgstatus(gp)&_Gscan == 0 {\n\tprint(\"runtime:scanstack: gp=\", gp, \", goid=\", gp.goid, \", gp->atomicstatus=\", hex(readgstatus(gp)), \"\\n\")\n\tthrow(\"scanstack - bad status\")\n}",
      "entry" : false,
      "use-vars" : [ 0 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 4 ],
      "in-vars" : [ 3, 4, 0, 1, 2 ],
      "exit" : false,
      "out-vars" : [ 0, 1, 2, 3, 4 ],
      "decl-vars" : [ ],
      "line-start" : 687,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 39,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "runtime:scanstack: gp="
            }
          }, {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "gp",
              "variable" : 0
            }
          }, {
            "go-type" : 39,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : ", goid="
            }
          }, {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "goid",
              "variable" : 5
            },
            "go-type" : 38,
            "kind" : "expression",
            "target" : {
              "go-type" : 2,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "gp",
                "variable" : 0
              }
            },
            "type" : "selector"
          }, {
            "go-type" : 39,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : ", gp->atomicstatus="
            }
          }, {
            "coerced-to" : {
              "go-type" : 180,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 180,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "hex"
              }
            },
            "go-type" : 180,
            "kind" : "expression",
            "target" : {
              "arguments" : [ {
                "go-type" : 2,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "gp",
                  "variable" : 0
                }
              } ],
              "ellipsis" : false,
              "function" : {
                "go-type" : 175,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Func",
                  "kind" : "ident",
                  "value" : "readgstatus"
                }
              },
              "go-type" : 29,
              "kind" : "expression",
              "type" : "call"
            },
            "type" : "cast"
          }, {
            "go-type" : 39,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "\n"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 178,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Builtin",
              "kind" : "ident",
              "value" : "print"
            }
          },
          "go-type" : 36,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 687,
      "code" : "print(\"runtime:scanstack: gp=\", gp, \", goid=\", gp.goid, \", gp->atomicstatus=\", hex(readgstatus(gp)), \"\\n\")",
      "entry" : false,
      "use-vars" : [ 0 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 5 ],
      "in-vars" : [ 4, 0, 1, 2, 3 ],
      "exit" : false,
      "out-vars" : [ 1, 2, 3, 4, 0 ],
      "decl-vars" : [ ],
      "line-start" : 688,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 39,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "scanstack - bad status"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 181,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "throw"
            }
          },
          "go-type" : 36,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 688,
      "code" : "throw(\"scanstack - bad status\")",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 6, 9, 11, 14 ],
      "in-vars" : [ 2, 3, 4, 0, 1 ],
      "exit" : false,
      "out-vars" : [ 0, 1, 2, 3, 4 ],
      "decl-vars" : [ ],
      "line-start" : 691,
      "ast" : {
        "condition" : {
          "go-type" : 29,
          "kind" : "expression",
          "left" : {
            "arguments" : [ {
              "go-type" : 2,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "gp",
                "variable" : 0
              }
            } ],
            "ellipsis" : false,
            "function" : {
              "go-type" : 175,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Func",
                "kind" : "ident",
                "value" : "readgstatus"
              }
            },
            "go-type" : 29,
            "kind" : "expression",
            "type" : "call"
          },
          "operator" : "&^",
          "right" : {
            "go-type" : 29,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "4096"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "switch"
      },
      "assign-vars" : [ ],
      "line-end" : 702,
      "code" : "switch readgstatus(gp) &^ _Gscan {\ndefault:\n\tprint(\"runtime: gp=\", gp, \", goid=\", gp.goid, \", gp->atomicstatus=\", readgstatus(gp), \"\\n\")\n\tthrow(\"mark - bad status\")\ncase _Gdead:\n\treturn\ncase _Grunning:\n\tprint(\"runtime: gp=\", gp, \", goid=\", gp.goid, \", gp->atomicstatus=\", readgstatus(gp), \"\\n\")\n\tthrow(\"scanstack: goroutine not stopped\")\ncase _Grunnable, _Gsyscall, _Gwaiting:\n\n}",
      "entry" : false,
      "use-vars" : [ 0 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 7 ],
      "in-vars" : [ 1, 2, 3, 4, 0 ],
      "exit" : false,
      "out-vars" : [ 2, 3, 4, 0, 1 ],
      "decl-vars" : [ ],
      "line-start" : 692,
      "ast" : {
        "expressions" : [ ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 694,
      "code" : "default:\n\tprint(\"runtime: gp=\", gp, \", goid=\", gp.goid, \", gp->atomicstatus=\", readgstatus(gp), \"\\n\")\n\tthrow(\"mark - bad status\")",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 8 ],
      "in-vars" : [ 2, 3, 4, 0, 1 ],
      "exit" : false,
      "out-vars" : [ 4, 0, 1, 2, 3 ],
      "decl-vars" : [ ],
      "line-start" : 693,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 39,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "runtime: gp="
            }
          }, {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "gp",
              "variable" : 0
            }
          }, {
            "go-type" : 39,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : ", goid="
            }
          }, {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "goid",
              "variable" : 5
            },
            "go-type" : 38,
            "kind" : "expression",
            "target" : {
              "go-type" : 2,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "gp",
                "variable" : 0
              }
            },
            "type" : "selector"
          }, {
            "go-type" : 39,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : ", gp->atomicstatus="
            }
          }, {
            "arguments" : [ {
              "go-type" : 2,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "gp",
                "variable" : 0
              }
            } ],
            "ellipsis" : false,
            "function" : {
              "go-type" : 175,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Func",
                "kind" : "ident",
                "value" : "readgstatus"
              }
            },
            "go-type" : 29,
            "kind" : "expression",
            "type" : "call"
          }, {
            "go-type" : 39,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "\n"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 183,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Builtin",
              "kind" : "ident",
              "value" : "print"
            }
          },
          "go-type" : 36,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 693,
      "code" : "print(\"runtime: gp=\", gp, \", goid=\", gp.goid, \", gp->atomicstatus=\", readgstatus(gp), \"\\n\")",
      "entry" : false,
      "use-vars" : [ 0 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 15 ],
      "in-vars" : [ 3, 4, 0, 1, 2 ],
      "exit" : false,
      "out-vars" : [ 0, 1, 2, 3, 4 ],
      "decl-vars" : [ ],
      "line-start" : 694,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 39,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "mark - bad status"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 181,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "throw"
            }
          },
          "go-type" : 36,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 694,
      "code" : "throw(\"mark - bad status\")",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 10 ],
      "in-vars" : [ ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 695,
      "ast" : {
        "expressions" : [ {
          "go-type" : 29,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "6"
          }
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 696,
      "code" : "case _Gdead:\n\treturn",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 696,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ ]
      },
      "assign-vars" : [ ],
      "line-end" : 696,
      "code" : "return",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 12 ],
      "in-vars" : [ 0, 1, 2, 3, 4 ],
      "exit" : false,
      "out-vars" : [ 0, 1, 2, 3, 4 ],
      "decl-vars" : [ ],
      "line-start" : 697,
      "ast" : {
        "expressions" : [ {
          "go-type" : 29,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "2"
          }
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 699,
      "code" : "case _Grunning:\n\tprint(\"runtime: gp=\", gp, \", goid=\", gp.goid, \", gp->atomicstatus=\", readgstatus(gp), \"\\n\")\n\tthrow(\"scanstack: goroutine not stopped\")",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 13 ],
      "in-vars" : [ 0, 1, 2, 3, 4 ],
      "exit" : false,
      "out-vars" : [ 0, 1, 2, 3, 4 ],
      "decl-vars" : [ ],
      "line-start" : 698,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 39,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "runtime: gp="
            }
          }, {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "gp",
              "variable" : 0
            }
          }, {
            "go-type" : 39,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : ", goid="
            }
          }, {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "goid",
              "variable" : 5
            },
            "go-type" : 38,
            "kind" : "expression",
            "target" : {
              "go-type" : 2,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "gp",
                "variable" : 0
              }
            },
            "type" : "selector"
          }, {
            "go-type" : 39,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : ", gp->atomicstatus="
            }
          }, {
            "arguments" : [ {
              "go-type" : 2,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "gp",
                "variable" : 0
              }
            } ],
            "ellipsis" : false,
            "function" : {
              "go-type" : 175,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Func",
                "kind" : "ident",
                "value" : "readgstatus"
              }
            },
            "go-type" : 29,
            "kind" : "expression",
            "type" : "call"
          }, {
            "go-type" : 39,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "\n"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 183,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Builtin",
              "kind" : "ident",
              "value" : "print"
            }
          },
          "go-type" : 36,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 698,
      "code" : "print(\"runtime: gp=\", gp, \", goid=\", gp.goid, \", gp->atomicstatus=\", readgstatus(gp), \"\\n\")",
      "entry" : false,
      "use-vars" : [ 0 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 15 ],
      "in-vars" : [ 0, 1, 2, 3, 4 ],
      "exit" : false,
      "out-vars" : [ 4, 0, 1, 2, 3 ],
      "decl-vars" : [ ],
      "line-start" : 699,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 39,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "scanstack: goroutine not stopped"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 181,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "throw"
            }
          },
          "go-type" : 36,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 699,
      "code" : "throw(\"scanstack: goroutine not stopped\")",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 15 ],
      "in-vars" : [ 3, 4, 0, 1, 2 ],
      "exit" : false,
      "out-vars" : [ 0, 1, 2, 3, 4 ],
      "decl-vars" : [ ],
      "line-start" : 700,
      "ast" : {
        "expressions" : [ {
          "go-type" : 29,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "1"
          }
        }, {
          "go-type" : 29,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "3"
          }
        }, {
          "go-type" : 29,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "4"
          }
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 700,
      "code" : "case _Grunnable, _Gsyscall, _Gwaiting:",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 16, 17 ],
      "in-vars" : [ 2, 3, 4, 0, 1 ],
      "exit" : false,
      "out-vars" : [ 0, 1, 2, 3, 4 ],
      "decl-vars" : [ ],
      "line-start" : 704,
      "ast" : {
        "condition" : {
          "go-type" : 174,
          "kind" : "expression",
          "left" : {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "gp",
              "variable" : 0
            }
          },
          "operator" : "==",
          "right" : {
            "arguments" : [ ],
            "ellipsis" : false,
            "function" : {
              "go-type" : 185,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Func",
                "kind" : "ident",
                "value" : "getg"
              }
            },
            "go-type" : 2,
            "kind" : "expression",
            "type" : "call"
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 706,
      "code" : "if gp == getg() {\n\tthrow(\"can't scan our own stack\")\n}",
      "entry" : false,
      "use-vars" : [ 0 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 17 ],
      "in-vars" : [ 3, 4, 0, 1, 2 ],
      "exit" : false,
      "out-vars" : [ 0, 1, 2, 3, 4 ],
      "decl-vars" : [ ],
      "line-start" : 705,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 39,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "can't scan our own stack"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 181,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "throw"
            }
          },
          "go-type" : 36,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 705,
      "code" : "throw(\"can't scan our own stack\")",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 18, 19 ],
      "in-vars" : [ 1, 2, 3, 4, 0 ],
      "exit" : false,
      "out-vars" : [ 2, 3, 4, 0, 1 ],
      "decl-vars" : [ ],
      "line-start" : 708,
      "ast" : {
        "condition" : {
          "arguments" : [ {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "gp",
              "variable" : 0
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 187,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "isShrinkStackSafe"
            }
          },
          "go-type" : 13,
          "kind" : "expression",
          "type" : "call"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 714,
      "code" : "if isShrinkStackSafe(gp) {\n\n\tshrinkstack(gp)\n} else {\n\n\tgp.preemptShrink = true\n}",
      "entry" : false,
      "use-vars" : [ 0 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 20 ],
      "in-vars" : [ 0, 1, 2, 3, 4 ],
      "exit" : false,
      "out-vars" : [ 1, 2, 3, 4, 0 ],
      "decl-vars" : [ ],
      "line-start" : 710,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "gp",
              "variable" : 0
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 188,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "shrinkstack"
            }
          },
          "go-type" : 36,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 710,
      "code" : "shrinkstack(gp)",
      "entry" : false,
      "use-vars" : [ 0 ]
    }, {
      "update-vars" : [ 0 ],
      "successors" : [ 20 ],
      "in-vars" : [ 0, 1, 2, 3, 4 ],
      "exit" : false,
      "out-vars" : [ 0, 1, 2, 3, 4 ],
      "decl-vars" : [ ],
      "line-start" : 713,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "preemptShrink",
            "variable" : 6
          },
          "go-type" : 13,
          "kind" : "expression",
          "target" : {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "gp",
              "variable" : 0
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "go-type" : 13,
          "kind" : "constant",
          "value" : {
            "type" : "BOOL",
            "value" : "true"
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 713,
      "code" : "gp.preemptShrink = true",
      "entry" : false,
      "use-vars" : [ 0 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 21 ],
      "in-vars" : [ 0, 1, 2, 3, 4 ],
      "exit" : false,
      "out-vars" : [ 4, 0, 1, 7, 2, 3 ],
      "decl-vars" : [ 7 ],
      "line-start" : 716,
      "ast" : {
        "kind" : "statement",
        "target" : {
          "kind" : "decl",
          "specs" : [ {
            "comments" : [ ],
            "declared-type" : {
              "go-type" : 189,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 189,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "stackScanState"
              }
            },
            "kind" : "spec",
            "names" : [ {
              "ident-kind" : "NoKind",
              "kind" : "ident",
              "value" : "state"
            } ],
            "type" : "var",
            "values" : [ ]
          } ],
          "type" : "var"
        },
        "type" : "declaration"
      },
      "assign-vars" : [ ],
      "line-end" : 716,
      "code" : "var state stackScanState",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ 7 ],
      "successors" : [ 22 ],
      "in-vars" : [ 0, 1, 7, 2, 3, 4 ],
      "exit" : false,
      "out-vars" : [ 0, 1, 7, 2, 3, 4 ],
      "decl-vars" : [ ],
      "line-start" : 717,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "stack",
            "variable" : 8
          },
          "go-type" : 5,
          "kind" : "expression",
          "target" : {
            "go-type" : 189,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "state",
              "variable" : 7
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "stack",
            "variable" : 9
          },
          "go-type" : 5,
          "kind" : "expression",
          "target" : {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "gp",
              "variable" : 0
            }
          },
          "type" : "selector"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 717,
      "code" : "state.stack = gp.stack",
      "entry" : false,
      "use-vars" : [ 0, 7 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 23, 24 ],
      "in-vars" : [ 2, 3, 4, 0, 1, 7 ],
      "exit" : false,
      "out-vars" : [ 0, 1, 7, 2, 3, 4 ],
      "decl-vars" : [ ],
      "line-start" : 719,
      "ast" : {
        "condition" : {
          "go-type" : 174,
          "kind" : "constant",
          "value" : {
            "type" : "BOOL",
            "value" : "false"
          }
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 721,
      "code" : "if stackTraceDebug {\n\tprintln(\"stack trace goroutine\", gp.goid)\n}",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 24 ],
      "in-vars" : [ 7, 2, 3, 4, 0, 1 ],
      "exit" : false,
      "out-vars" : [ 3, 4, 0, 1, 7, 2 ],
      "decl-vars" : [ ],
      "line-start" : 720,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 39,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "stack trace goroutine"
            }
          }, {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "goid",
              "variable" : 5
            },
            "go-type" : 38,
            "kind" : "expression",
            "target" : {
              "go-type" : 2,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "gp",
                "variable" : 0
              }
            },
            "type" : "selector"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 212,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Builtin",
              "kind" : "ident",
              "value" : "println"
            }
          },
          "go-type" : 36,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 720,
      "code" : "println(\"stack trace goroutine\", gp.goid)",
      "entry" : false,
      "use-vars" : [ 0 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 25, 26 ],
      "in-vars" : [ 0, 1, 7, 2, 3, 4 ],
      "exit" : false,
      "out-vars" : [ 7, 2, 3, 4, 0, 1 ],
      "decl-vars" : [ ],
      "line-start" : 723,
      "ast" : {
        "condition" : {
          "go-type" : 13,
          "kind" : "expression",
          "left" : {
            "go-type" : 13,
            "kind" : "constant",
            "value" : {
              "type" : "BOOL",
              "value" : "false"
            }
          },
          "operator" : "&&",
          "right" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "asyncSafePoint",
              "variable" : 10
            },
            "go-type" : 13,
            "kind" : "expression",
            "target" : {
              "go-type" : 2,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "gp",
                "variable" : 0
              }
            },
            "type" : "selector"
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 725,
      "code" : "if debugScanConservative && gp.asyncSafePoint {\n\tprint(\"scanning async preempted goroutine \", gp.goid, \" stack [\", hex(gp.stack.lo), \",\", hex(gp.stack.hi), \")\\n\")\n}",
      "entry" : false,
      "use-vars" : [ 0 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 26 ],
      "in-vars" : [ 3, 4, 0, 1, 7, 2 ],
      "exit" : false,
      "out-vars" : [ 0, 1, 7, 2, 3, 4 ],
      "decl-vars" : [ ],
      "line-start" : 724,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 39,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "scanning async preempted goroutine "
            }
          }, {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "goid",
              "variable" : 5
            },
            "go-type" : 38,
            "kind" : "expression",
            "target" : {
              "go-type" : 2,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "gp",
                "variable" : 0
              }
            },
            "type" : "selector"
          }, {
            "go-type" : 39,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : " stack ["
            }
          }, {
            "coerced-to" : {
              "go-type" : 180,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 180,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "hex"
              }
            },
            "go-type" : 180,
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "lo",
                "variable" : 11
              },
              "go-type" : 7,
              "kind" : "expression",
              "target" : {
                "field" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "stack",
                  "variable" : 9
                },
                "go-type" : 5,
                "kind" : "expression",
                "target" : {
                  "go-type" : 2,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "gp",
                    "variable" : 0
                  }
                },
                "type" : "selector"
              },
              "type" : "selector"
            },
            "type" : "cast"
          }, {
            "go-type" : 39,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : ","
            }
          }, {
            "coerced-to" : {
              "go-type" : 180,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 180,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "hex"
              }
            },
            "go-type" : 180,
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "hi",
                "variable" : 12
              },
              "go-type" : 7,
              "kind" : "expression",
              "target" : {
                "field" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "stack",
                  "variable" : 9
                },
                "go-type" : 5,
                "kind" : "expression",
                "target" : {
                  "go-type" : 2,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "gp",
                    "variable" : 0
                  }
                },
                "type" : "selector"
              },
              "type" : "selector"
            },
            "type" : "cast"
          }, {
            "go-type" : 39,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : ")\n"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 214,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Builtin",
              "kind" : "ident",
              "value" : "print"
            }
          },
          "go-type" : 36,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 724,
      "code" : "print(\"scanning async preempted goroutine \", gp.goid, \" stack [\", hex(gp.stack.lo), \",\", hex(gp.stack.hi), \")\\n\")",
      "entry" : false,
      "use-vars" : [ 0 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 27, 28 ],
      "in-vars" : [ 0, 1, 7, 2, 3, 4 ],
      "exit" : false,
      "out-vars" : [ 0, 1, 7, 2, 3, 4 ],
      "decl-vars" : [ ],
      "line-start" : 730,
      "ast" : {
        "condition" : {
          "go-type" : 174,
          "kind" : "expression",
          "left" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "ctxt",
              "variable" : 14
            },
            "go-type" : 11,
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "sched",
                "variable" : 13
              },
              "go-type" : 24,
              "kind" : "expression",
              "target" : {
                "go-type" : 2,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "gp",
                  "variable" : 0
                }
              },
              "type" : "selector"
            },
            "type" : "selector"
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 11,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Nil",
              "kind" : "ident",
              "value" : "nil"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 732,
      "code" : "if gp.sched.ctxt != nil {\n\tscanblock(uintptr(unsafe.Pointer(&gp.sched.ctxt)), sys.PtrSize, &oneptrmask[0], gcw, &state)\n}",
      "entry" : false,
      "use-vars" : [ 0 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 28 ],
      "in-vars" : [ 0, 1, 7, 2, 3, 4 ],
      "exit" : false,
      "out-vars" : [ 4, 0, 1, 7, 2, 3 ],
      "decl-vars" : [ ],
      "line-start" : 731,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "coerced-to" : {
              "go-type" : 7,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 7,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "uintptr"
              }
            },
            "go-type" : 7,
            "kind" : "expression",
            "target" : {
              "coerced-to" : {
                "go-type" : 11,
                "kind" : "type",
                "qualifier" : {
                  "ident-kind" : "PkgName",
                  "kind" : "ident",
                  "package" : 1,
                  "value" : "unsafe"
                },
                "type" : "identifier",
                "value" : {
                  "go-type" : 11,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "Pointer"
                }
              },
              "go-type" : 11,
              "kind" : "expression",
              "target" : {
                "go-type" : 219,
                "kind" : "expression",
                "operator" : "&",
                "target" : {
                  "field" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "ctxt",
                    "variable" : 14
                  },
                  "go-type" : 11,
                  "kind" : "expression",
                  "target" : {
                    "field" : {
                      "ident-kind" : "Var",
                      "kind" : "ident",
                      "value" : "sched",
                      "variable" : 13
                    },
                    "go-type" : 24,
                    "kind" : "expression",
                    "target" : {
                      "go-type" : 2,
                      "kind" : "expression",
                      "type" : "identifier",
                      "value" : {
                        "ident-kind" : "Var",
                        "kind" : "ident",
                        "value" : "gp",
                        "variable" : 0
                      }
                    },
                    "type" : "selector"
                  },
                  "type" : "selector"
                },
                "type" : "unary"
              },
              "type" : "cast"
            },
            "type" : "cast"
          }, {
            "go-type" : 7,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "8"
            }
          }, {
            "go-type" : 170,
            "kind" : "expression",
            "operator" : "&",
            "target" : {
              "go-type" : 41,
              "index" : {
                "go-type" : 78,
                "kind" : "constant",
                "value" : {
                  "type" : "INT",
                  "value" : "0"
                }
              },
              "kind" : "expression",
              "target" : {
                "go-type" : 173,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "oneptrmask",
                  "variable" : 4
                }
              },
              "type" : "index"
            },
            "type" : "unary"
          }, {
            "go-type" : 114,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "gcw",
              "variable" : 1
            }
          }, {
            "go-type" : 218,
            "kind" : "expression",
            "operator" : "&",
            "target" : {
              "go-type" : 189,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "state",
                "variable" : 7
              }
            },
            "type" : "unary"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 216,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "scanblock"
            }
          },
          "go-type" : 36,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 731,
      "code" : "scanblock(uintptr(unsafe.Pointer(&gp.sched.ctxt)), sys.PtrSize, &oneptrmask[0], gcw, &state)",
      "entry" : false,
      "use-vars" : [ 0, 4, 1, 7 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 29 ],
      "in-vars" : [ 0, 1, 7, 2, 3, 4 ],
      "exit" : false,
      "out-vars" : [ 4, 0, 15, 1, 7 ],
      "decl-vars" : [ 15 ],
      "line-start" : 735,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "scanframe"
          }
        } ],
        "right" : [ {
          "body" : [ {
            "kind" : "statement",
            "type" : "expression",
            "value" : {
              "arguments" : [ {
                "go-type" : 126,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "frame",
                  "variable" : 2
                }
              }, {
                "go-type" : 218,
                "kind" : "expression",
                "operator" : "&",
                "target" : {
                  "go-type" : 189,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "state",
                    "variable" : 7
                  }
                },
                "type" : "unary"
              }, {
                "go-type" : 114,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "gcw",
                  "variable" : 1
                }
              } ],
              "ellipsis" : false,
              "function" : {
                "go-type" : 222,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Func",
                  "kind" : "ident",
                  "value" : "scanframeworker"
                }
              },
              "go-type" : 36,
              "kind" : "expression",
              "type" : "call"
            }
          }, {
            "kind" : "statement",
            "type" : "return",
            "values" : [ {
              "go-type" : 13,
              "kind" : "constant",
              "value" : {
                "type" : "BOOL",
                "value" : "true"
              }
            } ]
          } ],
          "go-type" : 220,
          "kind" : "literal",
          "params" : [ {
            "declared-type" : {
              "contained" : {
                "go-type" : 127,
                "kind" : "type",
                "type" : "identifier",
                "value" : {
                  "go-type" : 127,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "stkframe"
                }
              },
              "go-type" : 126,
              "kind" : "type",
              "type" : "pointer"
            },
            "kind" : "field",
            "names" : [ {
              "ident-kind" : "NoKind",
              "kind" : "ident",
              "value" : "frame"
            } ],
            "tag" : null
          }, {
            "declared-type" : {
              "go-type" : 11,
              "kind" : "type",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 1,
                "value" : "unsafe"
              },
              "type" : "identifier",
              "value" : {
                "go-type" : 11,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "Pointer"
              }
            },
            "kind" : "field",
            "names" : [ {
              "ident-kind" : "NoKind",
              "kind" : "ident",
              "value" : "unused"
            } ],
            "tag" : null
          } ],
          "results" : [ {
            "declared-type" : {
              "go-type" : 13,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 13,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "bool"
              }
            },
            "kind" : "field",
            "names" : [ ],
            "tag" : null
          } ],
          "type" : "function",
          "variadic" : null
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 738,
      "code" : "scanframe := func(frame *stkframe, unused unsafe.Pointer) bool {\n\tscanframeworker(frame, &state, gcw)\n\treturn true\n}",
      "entry" : false,
      "use-vars" : [ 2, 3, 7, 1 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 30 ],
      "in-vars" : [ 4, 0, 15, 1, 7 ],
      "exit" : false,
      "out-vars" : [ 1, 7, 4, 0, 15 ],
      "decl-vars" : [ ],
      "line-start" : 739,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 7,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "18446744073709551615"
            }
          }, {
            "go-type" : 7,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "18446744073709551615"
            }
          }, {
            "go-type" : 7,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          }, {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "gp",
              "variable" : 0
            }
          }, {
            "go-type" : 78,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          }, {
            "go-type" : 230,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Nil",
              "kind" : "ident",
              "value" : "nil"
            }
          }, {
            "go-type" : 78,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "2147483647"
            }
          }, {
            "go-type" : 220,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "scanframe",
              "variable" : 15
            }
          }, {
            "go-type" : 11,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Nil",
              "kind" : "ident",
              "value" : "nil"
            }
          }, {
            "go-type" : 97,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 224,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "gentraceback"
            }
          },
          "go-type" : 78,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 739,
      "code" : "gentraceback(^uintptr(0), ^uintptr(0), 0, gp, 0, nil, 0x7fffffff, scanframe, nil, 0)",
      "entry" : false,
      "use-vars" : [ 15, 0 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 32 ],
      "in-vars" : [ 7, 4, 0, 15, 1 ],
      "exit" : false,
      "out-vars" : [ 0, 1, 7, 4 ],
      "decl-vars" : [ ],
      "line-start" : 745,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "gp",
              "variable" : 0
            }
          }, {
            "go-type" : 220,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "scanframe",
              "variable" : 15
            }
          }, {
            "go-type" : 11,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Nil",
              "kind" : "ident",
              "value" : "nil"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 231,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "tracebackdefers"
            }
          },
          "go-type" : 36,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 745,
      "code" : "tracebackdefers(gp, scanframe, nil)",
      "entry" : false,
      "use-vars" : [ 0, 15 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 34, 40 ],
      "in-vars" : [ 17, 4, 0, 1, 7 ],
      "exit" : false,
      "out-vars" : [ 0, 1, 7, 17, 4 ],
      "decl-vars" : [ ],
      "line-start" : 748,
      "ast" : {
        "condition" : {
          "go-type" : 174,
          "kind" : "expression",
          "left" : {
            "go-type" : 14,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "d",
              "variable" : 17
            }
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 230,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Nil",
              "kind" : "ident",
              "value" : "nil"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "for"
      },
      "assign-vars" : [ ],
      "line-end" : 765,
      "code" : "for d := gp._defer; d != nil; d = d.link {\n\tif d.fn != nil {\n\n\t\tscanblock(uintptr(unsafe.Pointer(&d.fn)), sys.PtrSize, &oneptrmask[0], gcw, &state)\n\t}\n\tif d.link != nil {\n\n\t\tscanblock(uintptr(unsafe.Pointer(&d.link)), sys.PtrSize, &oneptrmask[0], gcw, &state)\n\t}\n\n\tif d.heap {\n\t\tscanblock(uintptr(unsafe.Pointer(&d)), sys.PtrSize, &oneptrmask[0], gcw, &state)\n\t}\n}",
      "entry" : false,
      "use-vars" : [ 17 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 31 ],
      "in-vars" : [ 7, 4, 0, 1 ],
      "exit" : false,
      "out-vars" : [ 0, 1, 7, 17, 4 ],
      "decl-vars" : [ 17 ],
      "line-start" : 748,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "d"
          }
        } ],
        "right" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "_defer",
            "variable" : 16
          },
          "go-type" : 14,
          "kind" : "expression",
          "target" : {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "gp",
              "variable" : 0
            }
          },
          "type" : "selector"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 748,
      "code" : "d := gp._defer",
      "entry" : false,
      "use-vars" : [ 0 ]
    }, {
      "update-vars" : [ 17 ],
      "successors" : [ 31 ],
      "in-vars" : [ 1, 7, 17, 4, 0 ],
      "exit" : false,
      "out-vars" : [ 0, 1, 7, 17, 4 ],
      "decl-vars" : [ ],
      "line-start" : 748,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 14,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "d",
            "variable" : 17
          }
        } ],
        "right" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "link",
            "variable" : 18
          },
          "go-type" : 14,
          "kind" : "expression",
          "target" : {
            "go-type" : 14,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "d",
              "variable" : 17
            }
          },
          "type" : "selector"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 17 ],
      "line-end" : 748,
      "code" : "d = d.link",
      "entry" : false,
      "use-vars" : [ 17 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 35, 36 ],
      "in-vars" : [ 4, 0, 1, 7, 17 ],
      "exit" : false,
      "out-vars" : [ 0, 1, 7, 17, 4 ],
      "decl-vars" : [ ],
      "line-start" : 749,
      "ast" : {
        "condition" : {
          "go-type" : 174,
          "kind" : "expression",
          "left" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "fn",
              "variable" : 19
            },
            "go-type" : 18,
            "kind" : "expression",
            "target" : {
              "go-type" : 14,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "d",
                "variable" : 17
              }
            },
            "type" : "selector"
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 230,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Nil",
              "kind" : "ident",
              "value" : "nil"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 753,
      "code" : "if d.fn != nil {\n\n\tscanblock(uintptr(unsafe.Pointer(&d.fn)), sys.PtrSize, &oneptrmask[0], gcw, &state)\n}",
      "entry" : false,
      "use-vars" : [ 17 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 36 ],
      "in-vars" : [ 4, 0, 1, 7, 17 ],
      "exit" : false,
      "out-vars" : [ 17, 4, 0, 1, 7 ],
      "decl-vars" : [ ],
      "line-start" : 752,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "coerced-to" : {
              "go-type" : 7,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 7,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "uintptr"
              }
            },
            "go-type" : 7,
            "kind" : "expression",
            "target" : {
              "coerced-to" : {
                "go-type" : 11,
                "kind" : "type",
                "qualifier" : {
                  "ident-kind" : "PkgName",
                  "kind" : "ident",
                  "package" : 1,
                  "value" : "unsafe"
                },
                "type" : "identifier",
                "value" : {
                  "go-type" : 11,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "Pointer"
                }
              },
              "go-type" : 11,
              "kind" : "expression",
              "target" : {
                "go-type" : 233,
                "kind" : "expression",
                "operator" : "&",
                "target" : {
                  "field" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "fn",
                    "variable" : 19
                  },
                  "go-type" : 18,
                  "kind" : "expression",
                  "target" : {
                    "go-type" : 14,
                    "kind" : "expression",
                    "type" : "identifier",
                    "value" : {
                      "ident-kind" : "Var",
                      "kind" : "ident",
                      "value" : "d",
                      "variable" : 17
                    }
                  },
                  "type" : "selector"
                },
                "type" : "unary"
              },
              "type" : "cast"
            },
            "type" : "cast"
          }, {
            "go-type" : 7,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "8"
            }
          }, {
            "go-type" : 170,
            "kind" : "expression",
            "operator" : "&",
            "target" : {
              "go-type" : 41,
              "index" : {
                "go-type" : 78,
                "kind" : "constant",
                "value" : {
                  "type" : "INT",
                  "value" : "0"
                }
              },
              "kind" : "expression",
              "target" : {
                "go-type" : 173,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "oneptrmask",
                  "variable" : 4
                }
              },
              "type" : "index"
            },
            "type" : "unary"
          }, {
            "go-type" : 114,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "gcw",
              "variable" : 1
            }
          }, {
            "go-type" : 218,
            "kind" : "expression",
            "operator" : "&",
            "target" : {
              "go-type" : 189,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "state",
                "variable" : 7
              }
            },
            "type" : "unary"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 216,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "scanblock"
            }
          },
          "go-type" : 36,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 752,
      "code" : "scanblock(uintptr(unsafe.Pointer(&d.fn)), sys.PtrSize, &oneptrmask[0], gcw, &state)",
      "entry" : false,
      "use-vars" : [ 1, 17, 4, 7 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 37, 38 ],
      "in-vars" : [ 0, 1, 7, 17, 4 ],
      "exit" : false,
      "out-vars" : [ 17, 4, 0, 1, 7 ],
      "decl-vars" : [ ],
      "line-start" : 754,
      "ast" : {
        "condition" : {
          "go-type" : 174,
          "kind" : "expression",
          "left" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "link",
              "variable" : 18
            },
            "go-type" : 14,
            "kind" : "expression",
            "target" : {
              "go-type" : 14,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "d",
                "variable" : 17
              }
            },
            "type" : "selector"
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 230,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Nil",
              "kind" : "ident",
              "value" : "nil"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 758,
      "code" : "if d.link != nil {\n\n\tscanblock(uintptr(unsafe.Pointer(&d.link)), sys.PtrSize, &oneptrmask[0], gcw, &state)\n}",
      "entry" : false,
      "use-vars" : [ 17 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 38 ],
      "in-vars" : [ 0, 1, 7, 17, 4 ],
      "exit" : false,
      "out-vars" : [ 1, 7, 17, 4, 0 ],
      "decl-vars" : [ ],
      "line-start" : 757,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "coerced-to" : {
              "go-type" : 7,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 7,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "uintptr"
              }
            },
            "go-type" : 7,
            "kind" : "expression",
            "target" : {
              "coerced-to" : {
                "go-type" : 11,
                "kind" : "type",
                "qualifier" : {
                  "ident-kind" : "PkgName",
                  "kind" : "ident",
                  "package" : 1,
                  "value" : "unsafe"
                },
                "type" : "identifier",
                "value" : {
                  "go-type" : 11,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "Pointer"
                }
              },
              "go-type" : 11,
              "kind" : "expression",
              "target" : {
                "go-type" : 234,
                "kind" : "expression",
                "operator" : "&",
                "target" : {
                  "field" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "link",
                    "variable" : 18
                  },
                  "go-type" : 14,
                  "kind" : "expression",
                  "target" : {
                    "go-type" : 14,
                    "kind" : "expression",
                    "type" : "identifier",
                    "value" : {
                      "ident-kind" : "Var",
                      "kind" : "ident",
                      "value" : "d",
                      "variable" : 17
                    }
                  },
                  "type" : "selector"
                },
                "type" : "unary"
              },
              "type" : "cast"
            },
            "type" : "cast"
          }, {
            "go-type" : 7,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "8"
            }
          }, {
            "go-type" : 170,
            "kind" : "expression",
            "operator" : "&",
            "target" : {
              "go-type" : 41,
              "index" : {
                "go-type" : 78,
                "kind" : "constant",
                "value" : {
                  "type" : "INT",
                  "value" : "0"
                }
              },
              "kind" : "expression",
              "target" : {
                "go-type" : 173,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "oneptrmask",
                  "variable" : 4
                }
              },
              "type" : "index"
            },
            "type" : "unary"
          }, {
            "go-type" : 114,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "gcw",
              "variable" : 1
            }
          }, {
            "go-type" : 218,
            "kind" : "expression",
            "operator" : "&",
            "target" : {
              "go-type" : 189,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "state",
                "variable" : 7
              }
            },
            "type" : "unary"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 216,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "scanblock"
            }
          },
          "go-type" : 36,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 757,
      "code" : "scanblock(uintptr(unsafe.Pointer(&d.link)), sys.PtrSize, &oneptrmask[0], gcw, &state)",
      "entry" : false,
      "use-vars" : [ 17, 4, 7, 1 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 33, 39 ],
      "in-vars" : [ 0, 1, 7, 17, 4 ],
      "exit" : false,
      "out-vars" : [ 7, 17, 4, 0, 1 ],
      "decl-vars" : [ ],
      "line-start" : 762,
      "ast" : {
        "condition" : {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "heap",
            "variable" : 20
          },
          "go-type" : 13,
          "kind" : "expression",
          "target" : {
            "go-type" : 14,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "d",
              "variable" : 17
            }
          },
          "type" : "selector"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 764,
      "code" : "if d.heap {\n\tscanblock(uintptr(unsafe.Pointer(&d)), sys.PtrSize, &oneptrmask[0], gcw, &state)\n}",
      "entry" : false,
      "use-vars" : [ 17 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 33 ],
      "in-vars" : [ 17, 4, 0, 1, 7 ],
      "exit" : false,
      "out-vars" : [ 1, 7, 17, 4, 0 ],
      "decl-vars" : [ ],
      "line-start" : 763,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "coerced-to" : {
              "go-type" : 7,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 7,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "uintptr"
              }
            },
            "go-type" : 7,
            "kind" : "expression",
            "target" : {
              "coerced-to" : {
                "go-type" : 11,
                "kind" : "type",
                "qualifier" : {
                  "ident-kind" : "PkgName",
                  "kind" : "ident",
                  "package" : 1,
                  "value" : "unsafe"
                },
                "type" : "identifier",
                "value" : {
                  "go-type" : 11,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "Pointer"
                }
              },
              "go-type" : 11,
              "kind" : "expression",
              "target" : {
                "go-type" : 234,
                "kind" : "expression",
                "operator" : "&",
                "target" : {
                  "go-type" : 14,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "d",
                    "variable" : 17
                  }
                },
                "type" : "unary"
              },
              "type" : "cast"
            },
            "type" : "cast"
          }, {
            "go-type" : 7,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "8"
            }
          }, {
            "go-type" : 170,
            "kind" : "expression",
            "operator" : "&",
            "target" : {
              "go-type" : 41,
              "index" : {
                "go-type" : 78,
                "kind" : "constant",
                "value" : {
                  "type" : "INT",
                  "value" : "0"
                }
              },
              "kind" : "expression",
              "target" : {
                "go-type" : 173,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "oneptrmask",
                  "variable" : 4
                }
              },
              "type" : "index"
            },
            "type" : "unary"
          }, {
            "go-type" : 114,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "gcw",
              "variable" : 1
            }
          }, {
            "go-type" : 218,
            "kind" : "expression",
            "operator" : "&",
            "target" : {
              "go-type" : 189,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "state",
                "variable" : 7
              }
            },
            "type" : "unary"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 216,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "scanblock"
            }
          },
          "go-type" : 36,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 763,
      "code" : "scanblock(uintptr(unsafe.Pointer(&d)), sys.PtrSize, &oneptrmask[0], gcw, &state)",
      "entry" : false,
      "use-vars" : [ 7, 17, 1, 4 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 41, 42 ],
      "in-vars" : [ 1, 7, 0 ],
      "exit" : false,
      "out-vars" : [ 0, 1, 7 ],
      "decl-vars" : [ ],
      "line-start" : 766,
      "ast" : {
        "condition" : {
          "go-type" : 174,
          "kind" : "expression",
          "left" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "_panic",
              "variable" : 21
            },
            "go-type" : 8,
            "kind" : "expression",
            "target" : {
              "go-type" : 2,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "gp",
                "variable" : 0
              }
            },
            "type" : "selector"
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 230,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Nil",
              "kind" : "ident",
              "value" : "nil"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 769,
      "code" : "if gp._panic != nil {\n\n\tstate.putPtr(uintptr(unsafe.Pointer(gp._panic)), false)\n}",
      "entry" : false,
      "use-vars" : [ 0 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 42 ],
      "in-vars" : [ 0, 1, 7 ],
      "exit" : false,
      "out-vars" : [ 1, 7, 0 ],
      "decl-vars" : [ ],
      "line-start" : 768,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "coerced-to" : {
              "go-type" : 7,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 7,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "uintptr"
              }
            },
            "go-type" : 7,
            "kind" : "expression",
            "target" : {
              "coerced-to" : {
                "go-type" : 11,
                "kind" : "type",
                "qualifier" : {
                  "ident-kind" : "PkgName",
                  "kind" : "ident",
                  "package" : 1,
                  "value" : "unsafe"
                },
                "type" : "identifier",
                "value" : {
                  "go-type" : 11,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "Pointer"
                }
              },
              "go-type" : 11,
              "kind" : "expression",
              "target" : {
                "field" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "_panic",
                  "variable" : 21
                },
                "go-type" : 8,
                "kind" : "expression",
                "target" : {
                  "go-type" : 2,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "gp",
                    "variable" : 0
                  }
                },
                "type" : "selector"
              },
              "type" : "cast"
            },
            "type" : "cast"
          }, {
            "go-type" : 13,
            "kind" : "constant",
            "value" : {
              "type" : "BOOL",
              "value" : "false"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "putPtr"
            },
            "go-type" : 235,
            "kind" : "expression",
            "target" : {
              "go-type" : 189,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "state",
                "variable" : 7
              }
            },
            "type" : "selector"
          },
          "go-type" : 36,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 768,
      "code" : "state.putPtr(uintptr(unsafe.Pointer(gp._panic)), false)",
      "entry" : false,
      "use-vars" : [ 7, 0 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 43 ],
      "in-vars" : [ 0, 1, 7 ],
      "exit" : false,
      "out-vars" : [ 0, 1, 7 ],
      "decl-vars" : [ ],
      "line-start" : 776,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "buildIndex"
            },
            "go-type" : 35,
            "kind" : "expression",
            "target" : {
              "go-type" : 189,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "state",
                "variable" : 7
              }
            },
            "type" : "selector"
          },
          "go-type" : 36,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 776,
      "code" : "state.buildIndex()",
      "entry" : false,
      "use-vars" : [ 7 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 44, 72 ],
      "in-vars" : [ 0, 1, 7 ],
      "exit" : false,
      "out-vars" : [ 0, 1, 7 ],
      "decl-vars" : [ ],
      "line-start" : 777,
      "ast" : {
        "condition" : null,
        "kind" : "statement",
        "type" : "for"
      },
      "assign-vars" : [ ],
      "line-end" : 827,
      "code" : "for {\n\tp, conservative := state.getPtr()\n\tif p == 0 {\n\t\tbreak\n\t}\n\tobj := state.findObject(p)\n\tif obj == nil {\n\t\tcontinue\n\t}\n\tt := obj.typ\n\tif t == nil {\n\n\t\tcontinue\n\t}\n\tobj.setType(nil)\n\tif stackTraceDebug {\n\t\tprintlock()\n\t\tprint(\"  live stkobj at\", hex(state.stack.lo+uintptr(obj.off)), \"of type\", t.string())\n\t\tif conservative {\n\t\t\tprint(\" (conservative)\")\n\t\t}\n\t\tprintln()\n\t\tprintunlock()\n\t}\n\tgcdata := t.gcdata\n\tvar s *mspan\n\tif t.kind&kindGCProg != 0 {\n\n\t\ts = materializeGCProg(t.ptrdata, gcdata)\n\t\tgcdata = (*byte)(unsafe.Pointer(s.startAddr))\n\t}\n\n\tb := state.stack.lo + uintptr(obj.off)\n\tif conservative {\n\t\tscanConservative(b, t.ptrdata, gcdata, gcw, &state)\n\t} else {\n\t\tscanblock(b, t.ptrdata, gcdata, gcw, &state)\n\t}\n\n\tif s != nil {\n\t\tdematerializeGCProg(s)\n\t}\n}",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 45 ],
      "in-vars" : [ 0, 1, 7 ],
      "exit" : false,
      "out-vars" : [ 0, 1, 7, 27, 22 ],
      "decl-vars" : [ 22, 27 ],
      "line-start" : 778,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "p"
          }
        }, {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "conservative"
          }
        } ],
        "right" : [ {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "getPtr"
            },
            "go-type" : 237,
            "kind" : "expression",
            "target" : {
              "go-type" : 189,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "state",
                "variable" : 7
              }
            },
            "type" : "selector"
          },
          "go-type" : 236,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 778,
      "code" : "p, conservative := state.getPtr()",
      "entry" : false,
      "use-vars" : [ 7 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 46, 47 ],
      "in-vars" : [ 0, 1, 7, 27, 22 ],
      "exit" : false,
      "out-vars" : [ 0, 1, 7, 27, 22 ],
      "decl-vars" : [ ],
      "line-start" : 779,
      "ast" : {
        "condition" : {
          "go-type" : 174,
          "kind" : "expression",
          "left" : {
            "go-type" : 7,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "p",
              "variable" : 22
            }
          },
          "operator" : "==",
          "right" : {
            "go-type" : 7,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 781,
      "code" : "if p == 0 {\n\tbreak\n}",
      "entry" : false,
      "use-vars" : [ 22 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 72 ],
      "in-vars" : [ 0, 7 ],
      "exit" : false,
      "out-vars" : [ 7, 0 ],
      "decl-vars" : [ ],
      "line-start" : 780,
      "ast" : {
        "kind" : "statement",
        "label" : null,
        "type" : "break"
      },
      "assign-vars" : [ ],
      "line-end" : 780,
      "code" : "break",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 48 ],
      "in-vars" : [ 0, 1, 7, 27, 22 ],
      "exit" : false,
      "out-vars" : [ 0, 1, 7, 27, 23 ],
      "decl-vars" : [ 23 ],
      "line-start" : 782,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "obj"
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 7,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "p",
              "variable" : 22
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "findObject"
            },
            "go-type" : 238,
            "kind" : "expression",
            "target" : {
              "go-type" : 189,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "state",
                "variable" : 7
              }
            },
            "type" : "selector"
          },
          "go-type" : 211,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 782,
      "code" : "obj := state.findObject(p)",
      "entry" : false,
      "use-vars" : [ 7, 22 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 49, 50 ],
      "in-vars" : [ 23, 0, 1, 7, 27 ],
      "exit" : false,
      "out-vars" : [ 27, 23, 0, 1, 7 ],
      "decl-vars" : [ ],
      "line-start" : 783,
      "ast" : {
        "condition" : {
          "go-type" : 174,
          "kind" : "expression",
          "left" : {
            "go-type" : 211,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "obj",
              "variable" : 23
            }
          },
          "operator" : "==",
          "right" : {
            "go-type" : 230,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Nil",
              "kind" : "ident",
              "value" : "nil"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 785,
      "code" : "if obj == nil {\n\tcontinue\n}",
      "entry" : false,
      "use-vars" : [ 23 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 43 ],
      "in-vars" : [ 0, 1, 7 ],
      "exit" : false,
      "out-vars" : [ 0, 1, 7 ],
      "decl-vars" : [ ],
      "line-start" : 784,
      "ast" : {
        "kind" : "statement",
        "label" : null,
        "type" : "continue"
      },
      "assign-vars" : [ ],
      "line-end" : 784,
      "code" : "continue",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 51 ],
      "in-vars" : [ 0, 1, 7, 27, 23 ],
      "exit" : false,
      "out-vars" : [ 7, 25, 27, 23, 0, 1 ],
      "decl-vars" : [ 25 ],
      "line-start" : 786,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "t"
          }
        } ],
        "right" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "typ",
            "variable" : 24
          },
          "go-type" : 98,
          "kind" : "expression",
          "target" : {
            "go-type" : 211,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "obj",
              "variable" : 23
            }
          },
          "type" : "selector"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 786,
      "code" : "t := obj.typ",
      "entry" : false,
      "use-vars" : [ 23 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 52, 53 ],
      "in-vars" : [ 0, 1, 7, 25, 27, 23 ],
      "exit" : false,
      "out-vars" : [ 0, 1, 7, 25, 27, 23 ],
      "decl-vars" : [ ],
      "line-start" : 787,
      "ast" : {
        "condition" : {
          "go-type" : 174,
          "kind" : "expression",
          "left" : {
            "go-type" : 98,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "t",
              "variable" : 25
            }
          },
          "operator" : "==",
          "right" : {
            "go-type" : 230,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Nil",
              "kind" : "ident",
              "value" : "nil"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 790,
      "code" : "if t == nil {\n\n\tcontinue\n}",
      "entry" : false,
      "use-vars" : [ 25 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 43 ],
      "in-vars" : [ 0, 1, 7 ],
      "exit" : false,
      "out-vars" : [ 0, 1, 7 ],
      "decl-vars" : [ ],
      "line-start" : 789,
      "ast" : {
        "kind" : "statement",
        "label" : null,
        "type" : "continue"
      },
      "assign-vars" : [ ],
      "line-end" : 789,
      "code" : "continue",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 54 ],
      "in-vars" : [ 0, 1, 7, 25, 27, 23 ],
      "exit" : false,
      "out-vars" : [ 0, 1, 7, 25, 27, 23 ],
      "decl-vars" : [ ],
      "line-start" : 791,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 230,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Nil",
              "kind" : "ident",
              "value" : "nil"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "setType"
            },
            "go-type" : 241,
            "kind" : "expression",
            "target" : {
              "go-type" : 211,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "obj",
                "variable" : 23
              }
            },
            "type" : "selector"
          },
          "go-type" : 36,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 791,
      "code" : "obj.setType(nil)",
      "entry" : false,
      "use-vars" : [ 23 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 55, 61 ],
      "in-vars" : [ 0, 1, 7, 25, 27, 23 ],
      "exit" : false,
      "out-vars" : [ 25, 27, 23, 0, 1, 7 ],
      "decl-vars" : [ ],
      "line-start" : 792,
      "ast" : {
        "condition" : {
          "go-type" : 174,
          "kind" : "constant",
          "value" : {
            "type" : "BOOL",
            "value" : "false"
          }
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 800,
      "code" : "if stackTraceDebug {\n\tprintlock()\n\tprint(\"  live stkobj at\", hex(state.stack.lo+uintptr(obj.off)), \"of type\", t.string())\n\tif conservative {\n\t\tprint(\" (conservative)\")\n\t}\n\tprintln()\n\tprintunlock()\n}",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 56 ],
      "in-vars" : [ 1, 7, 25, 27, 23, 0 ],
      "exit" : false,
      "out-vars" : [ 0, 1, 7, 25, 27, 23 ],
      "decl-vars" : [ ],
      "line-start" : 793,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 35,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "printlock"
            }
          },
          "go-type" : 36,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 793,
      "code" : "printlock()",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 57 ],
      "in-vars" : [ 1, 7, 25, 27, 23, 0 ],
      "exit" : false,
      "out-vars" : [ 27, 23, 0, 1, 7, 25 ],
      "decl-vars" : [ ],
      "line-start" : 794,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 39,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "  live stkobj at"
            }
          }, {
            "coerced-to" : {
              "go-type" : 180,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 180,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "hex"
              }
            },
            "go-type" : 180,
            "kind" : "expression",
            "target" : {
              "go-type" : 7,
              "kind" : "expression",
              "left" : {
                "field" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "lo",
                  "variable" : 11
                },
                "go-type" : 7,
                "kind" : "expression",
                "target" : {
                  "field" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "stack",
                    "variable" : 8
                  },
                  "go-type" : 5,
                  "kind" : "expression",
                  "target" : {
                    "go-type" : 189,
                    "kind" : "expression",
                    "type" : "identifier",
                    "value" : {
                      "ident-kind" : "Var",
                      "kind" : "ident",
                      "value" : "state",
                      "variable" : 7
                    }
                  },
                  "type" : "selector"
                },
                "type" : "selector"
              },
              "operator" : "+",
              "right" : {
                "coerced-to" : {
                  "go-type" : 7,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 7,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "uintptr"
                  }
                },
                "go-type" : 7,
                "kind" : "expression",
                "target" : {
                  "field" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "off",
                    "variable" : 26
                  },
                  "go-type" : 29,
                  "kind" : "expression",
                  "target" : {
                    "go-type" : 211,
                    "kind" : "expression",
                    "type" : "identifier",
                    "value" : {
                      "ident-kind" : "Var",
                      "kind" : "ident",
                      "value" : "obj",
                      "variable" : 23
                    }
                  },
                  "type" : "selector"
                },
                "type" : "cast"
              },
              "type" : "binary"
            },
            "type" : "cast"
          }, {
            "go-type" : 39,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "of type"
            }
          }, {
            "arguments" : [ ],
            "ellipsis" : false,
            "function" : {
              "field" : {
                "ident-kind" : "Func",
                "kind" : "ident",
                "value" : "string"
              },
              "go-type" : 245,
              "kind" : "expression",
              "target" : {
                "go-type" : 98,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "t",
                  "variable" : 25
                }
              },
              "type" : "selector"
            },
            "go-type" : 39,
            "kind" : "expression",
            "type" : "call"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 243,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Builtin",
              "kind" : "ident",
              "value" : "print"
            }
          },
          "go-type" : 36,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 794,
      "code" : "print(\"  live stkobj at\", hex(state.stack.lo+uintptr(obj.off)), \"of type\", t.string())",
      "entry" : false,
      "use-vars" : [ 25, 7, 23 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 58, 59 ],
      "in-vars" : [ 25, 27, 23, 0, 1, 7 ],
      "exit" : false,
      "out-vars" : [ 0, 1, 7, 25, 27, 23 ],
      "decl-vars" : [ ],
      "line-start" : 795,
      "ast" : {
        "condition" : {
          "go-type" : 13,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "conservative",
            "variable" : 27
          }
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 797,
      "code" : "if conservative {\n\tprint(\" (conservative)\")\n}",
      "entry" : false,
      "use-vars" : [ 27 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 59 ],
      "in-vars" : [ 27, 23, 0, 1, 7, 25 ],
      "exit" : false,
      "out-vars" : [ 0, 1, 7, 25, 27, 23 ],
      "decl-vars" : [ ],
      "line-start" : 796,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 39,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : " (conservative)"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 247,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Builtin",
              "kind" : "ident",
              "value" : "print"
            }
          },
          "go-type" : 36,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 796,
      "code" : "print(\" (conservative)\")",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 60 ],
      "in-vars" : [ 0, 1, 7, 25, 27, 23 ],
      "exit" : false,
      "out-vars" : [ 0, 1, 7, 25, 27, 23 ],
      "decl-vars" : [ ],
      "line-start" : 798,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 35,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Builtin",
              "kind" : "ident",
              "value" : "println"
            }
          },
          "go-type" : 36,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 798,
      "code" : "println()",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 61 ],
      "in-vars" : [ 25, 27, 23, 0, 1, 7 ],
      "exit" : false,
      "out-vars" : [ 23, 0, 1, 7, 25, 27 ],
      "decl-vars" : [ ],
      "line-start" : 799,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 35,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "printunlock"
            }
          },
          "go-type" : 36,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 799,
      "code" : "printunlock()",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 62 ],
      "in-vars" : [ 0, 1, 7, 25, 27, 23 ],
      "exit" : false,
      "out-vars" : [ 25, 32, 27, 23, 0, 1, 7 ],
      "decl-vars" : [ 32 ],
      "line-start" : 801,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "gcdata"
          }
        } ],
        "right" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "gcdata",
            "variable" : 28
          },
          "go-type" : 104,
          "kind" : "expression",
          "target" : {
            "go-type" : 98,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "t",
              "variable" : 25
            }
          },
          "type" : "selector"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 801,
      "code" : "gcdata := t.gcdata",
      "entry" : false,
      "use-vars" : [ 25 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 63 ],
      "in-vars" : [ 7, 25, 32, 27, 23, 0, 1 ],
      "exit" : false,
      "out-vars" : [ 25, 32, 27, 23, 30, 0, 1, 7 ],
      "decl-vars" : [ 30 ],
      "line-start" : 802,
      "ast" : {
        "kind" : "statement",
        "target" : {
          "kind" : "decl",
          "specs" : [ {
            "comments" : [ ],
            "declared-type" : {
              "contained" : {
                "go-type" : 53,
                "kind" : "type",
                "type" : "identifier",
                "value" : {
                  "go-type" : 53,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "mspan"
                }
              },
              "go-type" : 52,
              "kind" : "type",
              "type" : "pointer"
            },
            "kind" : "spec",
            "names" : [ {
              "ident-kind" : "NoKind",
              "kind" : "ident",
              "value" : "s"
            } ],
            "type" : "var",
            "values" : [ ]
          } ],
          "type" : "var"
        },
        "type" : "declaration"
      },
      "assign-vars" : [ ],
      "line-end" : 802,
      "code" : "var s *mspan",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 64, 66 ],
      "in-vars" : [ 7, 25, 32, 27, 23, 30, 0, 1 ],
      "exit" : false,
      "out-vars" : [ 32, 27, 23, 30, 0, 1, 7, 25 ],
      "decl-vars" : [ ],
      "line-start" : 803,
      "ast" : {
        "condition" : {
          "go-type" : 174,
          "kind" : "expression",
          "left" : {
            "go-type" : 41,
            "kind" : "expression",
            "left" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "kind",
                "variable" : 29
              },
              "go-type" : 41,
              "kind" : "expression",
              "target" : {
                "go-type" : 98,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "t",
                  "variable" : 25
                }
              },
              "type" : "selector"
            },
            "operator" : "&",
            "right" : {
              "go-type" : 41,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "64"
              }
            },
            "type" : "binary"
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 41,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 815,
      "code" : "if t.kind&kindGCProg != 0 {\n\n\ts = materializeGCProg(t.ptrdata, gcdata)\n\tgcdata = (*byte)(unsafe.Pointer(s.startAddr))\n}",
      "entry" : false,
      "use-vars" : [ 25 ]
    }, {
      "update-vars" : [ 30 ],
      "successors" : [ 65 ],
      "in-vars" : [ 23, 0, 1, 7, 25, 32, 27 ],
      "exit" : false,
      "out-vars" : [ 7, 25, 27, 23, 30, 0, 1 ],
      "decl-vars" : [ ],
      "line-start" : 813,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 52,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "s",
            "variable" : 30
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "ptrdata",
              "variable" : 31
            },
            "go-type" : 7,
            "kind" : "expression",
            "target" : {
              "go-type" : 98,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "t",
                "variable" : 25
              }
            },
            "type" : "selector"
          }, {
            "go-type" : 104,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "gcdata",
              "variable" : 32
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 248,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "materializeGCProg"
            }
          },
          "go-type" : 52,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 30 ],
      "line-end" : 813,
      "code" : "s = materializeGCProg(t.ptrdata, gcdata)",
      "entry" : false,
      "use-vars" : [ 25, 32 ]
    }, {
      "update-vars" : [ 32 ],
      "successors" : [ 66 ],
      "in-vars" : [ 0, 1, 7, 25, 27, 23, 30 ],
      "exit" : false,
      "out-vars" : [ 30, 0, 1, 7, 25, 32, 27, 23 ],
      "decl-vars" : [ ],
      "line-start" : 814,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 104,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "gcdata",
            "variable" : 32
          }
        } ],
        "right" : [ {
          "coerced-to" : {
            "contained" : {
              "go-type" : 70,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 70,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "byte"
              }
            },
            "go-type" : 104,
            "kind" : "type",
            "type" : "pointer"
          },
          "go-type" : 104,
          "kind" : "expression",
          "target" : {
            "coerced-to" : {
              "go-type" : 11,
              "kind" : "type",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 1,
                "value" : "unsafe"
              },
              "type" : "identifier",
              "value" : {
                "go-type" : 11,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "Pointer"
              }
            },
            "go-type" : 11,
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "startAddr",
                "variable" : 33
              },
              "go-type" : 7,
              "kind" : "expression",
              "target" : {
                "go-type" : 52,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "s",
                  "variable" : 30
                }
              },
              "type" : "selector"
            },
            "type" : "cast"
          },
          "type" : "cast"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 32 ],
      "line-end" : 814,
      "code" : "gcdata = (*byte)(unsafe.Pointer(s.startAddr))",
      "entry" : false,
      "use-vars" : [ 30 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 67 ],
      "in-vars" : [ 30, 0, 1, 7, 25, 32, 27, 23 ],
      "exit" : false,
      "out-vars" : [ 30, 0, 1, 7, 34, 25, 32, 27 ],
      "decl-vars" : [ 34 ],
      "line-start" : 817,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "b"
          }
        } ],
        "right" : [ {
          "go-type" : 7,
          "kind" : "expression",
          "left" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "lo",
              "variable" : 11
            },
            "go-type" : 7,
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "stack",
                "variable" : 8
              },
              "go-type" : 5,
              "kind" : "expression",
              "target" : {
                "go-type" : 189,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "state",
                  "variable" : 7
                }
              },
              "type" : "selector"
            },
            "type" : "selector"
          },
          "operator" : "+",
          "right" : {
            "coerced-to" : {
              "go-type" : 7,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 7,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "uintptr"
              }
            },
            "go-type" : 7,
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "off",
                "variable" : 26
              },
              "go-type" : 29,
              "kind" : "expression",
              "target" : {
                "go-type" : 211,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "obj",
                  "variable" : 23
                }
              },
              "type" : "selector"
            },
            "type" : "cast"
          },
          "type" : "binary"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 817,
      "code" : "b := state.stack.lo + uintptr(obj.off)",
      "entry" : false,
      "use-vars" : [ 23, 7 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 68, 69 ],
      "in-vars" : [ 25, 32, 27, 30, 0, 1, 7, 34 ],
      "exit" : false,
      "out-vars" : [ 1, 7, 34, 25, 32, 30, 0 ],
      "decl-vars" : [ ],
      "line-start" : 818,
      "ast" : {
        "condition" : {
          "go-type" : 13,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "conservative",
            "variable" : 27
          }
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 822,
      "code" : "if conservative {\n\tscanConservative(b, t.ptrdata, gcdata, gcw, &state)\n} else {\n\tscanblock(b, t.ptrdata, gcdata, gcw, &state)\n}",
      "entry" : false,
      "use-vars" : [ 27 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 70 ],
      "in-vars" : [ 30, 0, 1, 7, 34, 25, 32 ],
      "exit" : false,
      "out-vars" : [ 7, 30, 0, 1 ],
      "decl-vars" : [ ],
      "line-start" : 819,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 7,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "b",
              "variable" : 34
            }
          }, {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "ptrdata",
              "variable" : 31
            },
            "go-type" : 7,
            "kind" : "expression",
            "target" : {
              "go-type" : 98,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "t",
                "variable" : 25
              }
            },
            "type" : "selector"
          }, {
            "go-type" : 104,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "gcdata",
              "variable" : 32
            }
          }, {
            "go-type" : 114,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "gcw",
              "variable" : 1
            }
          }, {
            "go-type" : 218,
            "kind" : "expression",
            "operator" : "&",
            "target" : {
              "go-type" : 189,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "state",
                "variable" : 7
              }
            },
            "type" : "unary"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 251,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "scanConservative"
            }
          },
          "go-type" : 36,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 819,
      "code" : "scanConservative(b, t.ptrdata, gcdata, gcw, &state)",
      "entry" : false,
      "use-vars" : [ 7, 34, 25, 32, 1 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 70 ],
      "in-vars" : [ 32, 30, 0, 1, 7, 34, 25 ],
      "exit" : false,
      "out-vars" : [ 1, 7, 30, 0 ],
      "decl-vars" : [ ],
      "line-start" : 821,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 7,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "b",
              "variable" : 34
            }
          }, {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "ptrdata",
              "variable" : 31
            },
            "go-type" : 7,
            "kind" : "expression",
            "target" : {
              "go-type" : 98,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "t",
                "variable" : 25
              }
            },
            "type" : "selector"
          }, {
            "go-type" : 104,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "gcdata",
              "variable" : 32
            }
          }, {
            "go-type" : 114,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "gcw",
              "variable" : 1
            }
          }, {
            "go-type" : 218,
            "kind" : "expression",
            "operator" : "&",
            "target" : {
              "go-type" : 189,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "state",
                "variable" : 7
              }
            },
            "type" : "unary"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 216,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "scanblock"
            }
          },
          "go-type" : 36,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 821,
      "code" : "scanblock(b, t.ptrdata, gcdata, gcw, &state)",
      "entry" : false,
      "use-vars" : [ 34, 25, 32, 1, 7 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 43, 71 ],
      "in-vars" : [ 0, 1, 7, 30 ],
      "exit" : false,
      "out-vars" : [ 30, 0, 1, 7 ],
      "decl-vars" : [ ],
      "line-start" : 824,
      "ast" : {
        "condition" : {
          "go-type" : 174,
          "kind" : "expression",
          "left" : {
            "go-type" : 52,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "s",
              "variable" : 30
            }
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 230,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Nil",
              "kind" : "ident",
              "value" : "nil"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 826,
      "code" : "if s != nil {\n\tdematerializeGCProg(s)\n}",
      "entry" : false,
      "use-vars" : [ 30 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 43 ],
      "in-vars" : [ 0, 1, 7, 30 ],
      "exit" : false,
      "out-vars" : [ 0, 1, 7 ],
      "decl-vars" : [ ],
      "line-start" : 825,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 52,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "s",
              "variable" : 30
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 253,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "dematerializeGCProg"
            }
          },
          "go-type" : 36,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 825,
      "code" : "dematerializeGCProg(s)",
      "entry" : false,
      "use-vars" : [ 30 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 73, 82 ],
      "in-vars" : [ 7, 0 ],
      "exit" : false,
      "out-vars" : [ 0, 7 ],
      "decl-vars" : [ ],
      "line-start" : 831,
      "ast" : {
        "condition" : {
          "go-type" : 174,
          "kind" : "expression",
          "left" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "head",
              "variable" : 35
            },
            "go-type" : 203,
            "kind" : "expression",
            "target" : {
              "go-type" : 189,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "state",
                "variable" : 7
              }
            },
            "type" : "selector"
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 230,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Nil",
              "kind" : "ident",
              "value" : "nil"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "for"
      },
      "assign-vars" : [ ],
      "line-end" : 845,
      "code" : "for state.head != nil {\n\tx := state.head\n\tstate.head = x.next\n\tif stackTraceDebug {\n\t\tfor _, obj := range x.obj[:x.nobj] {\n\t\t\tif obj.typ == nil {\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tprintln(\"  dead stkobj at\", hex(gp.stack.lo+uintptr(obj.off)), \"of type\", obj.typ.string())\n\n\t\t}\n\t}\n\tx.nobj = 0\n\tputempty((*workbuf)(unsafe.Pointer(x)))\n}",
      "entry" : false,
      "use-vars" : [ 7 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 74 ],
      "in-vars" : [ 0, 7 ],
      "exit" : false,
      "out-vars" : [ 0, 7, 36 ],
      "decl-vars" : [ 36 ],
      "line-start" : 832,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "x"
          }
        } ],
        "right" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "head",
            "variable" : 35
          },
          "go-type" : 203,
          "kind" : "expression",
          "target" : {
            "go-type" : 189,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "state",
              "variable" : 7
            }
          },
          "type" : "selector"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 832,
      "code" : "x := state.head",
      "entry" : false,
      "use-vars" : [ 7 ]
    }, {
      "update-vars" : [ 7 ],
      "successors" : [ 75 ],
      "in-vars" : [ 36, 0, 7 ],
      "exit" : false,
      "out-vars" : [ 0, 7, 36 ],
      "decl-vars" : [ ],
      "line-start" : 833,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "head",
            "variable" : 35
          },
          "go-type" : 203,
          "kind" : "expression",
          "target" : {
            "go-type" : 189,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "state",
              "variable" : 7
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "next",
            "variable" : 37
          },
          "go-type" : 203,
          "kind" : "expression",
          "target" : {
            "go-type" : 203,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "x",
              "variable" : 36
            }
          },
          "type" : "selector"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 833,
      "code" : "state.head = x.next",
      "entry" : false,
      "use-vars" : [ 7, 36 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 76, 80 ],
      "in-vars" : [ 0, 7, 36 ],
      "exit" : false,
      "out-vars" : [ 0, 7, 36 ],
      "decl-vars" : [ ],
      "line-start" : 834,
      "ast" : {
        "condition" : {
          "go-type" : 174,
          "kind" : "constant",
          "value" : {
            "type" : "BOOL",
            "value" : "false"
          }
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 842,
      "code" : "if stackTraceDebug {\n\tfor _, obj := range x.obj[:x.nobj] {\n\t\tif obj.typ == nil {\n\t\t\tcontinue\n\t\t}\n\t\tprintln(\"  dead stkobj at\", hex(gp.stack.lo+uintptr(obj.off)), \"of type\", obj.typ.string())\n\n\t}\n}",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 77, 80 ],
      "in-vars" : [ 0, 7, 36 ],
      "exit" : false,
      "out-vars" : [ 0, 7, 36, 40 ],
      "decl-vars" : [ 40, 41 ],
      "line-start" : 835,
      "ast" : {
        "is-assign" : false,
        "key" : {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "_"
          }
        },
        "kind" : "statement",
        "target" : {
          "go-type" : 255,
          "type" : "slice",
          "three" : false,
          "high" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "nobj",
              "variable" : 39
            },
            "go-type" : 78,
            "kind" : "expression",
            "target" : {
              "go-type" : 203,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "x",
                "variable" : 36
              }
            },
            "type" : "selector"
          },
          "max" : null,
          "kind" : "expression",
          "low" : null,
          "target" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "obj",
              "variable" : 38
            },
            "go-type" : 208,
            "kind" : "expression",
            "target" : {
              "go-type" : 203,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "x",
                "variable" : 36
              }
            },
            "type" : "selector"
          }
        },
        "type" : "range",
        "value" : {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "obj"
          }
        }
      },
      "assign-vars" : [ ],
      "line-end" : 841,
      "code" : "for _, obj := range x.obj[:x.nobj] {\n\tif obj.typ == nil {\n\t\tcontinue\n\t}\n\tprintln(\"  dead stkobj at\", hex(gp.stack.lo+uintptr(obj.off)), \"of type\", obj.typ.string())\n\n}",
      "entry" : false,
      "use-vars" : [ 36 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 78, 79 ],
      "in-vars" : [ 36, 40, 0, 7 ],
      "exit" : false,
      "out-vars" : [ 36, 40, 0, 7 ],
      "decl-vars" : [ ],
      "line-start" : 836,
      "ast" : {
        "condition" : {
          "go-type" : 174,
          "kind" : "expression",
          "left" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "typ",
              "variable" : 24
            },
            "go-type" : 98,
            "kind" : "expression",
            "target" : {
              "go-type" : 209,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "obj",
                "variable" : 40
              }
            },
            "type" : "selector"
          },
          "operator" : "==",
          "right" : {
            "go-type" : 230,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Nil",
              "kind" : "ident",
              "value" : "nil"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 838,
      "code" : "if obj.typ == nil {\n\tcontinue\n}",
      "entry" : false,
      "use-vars" : [ 40 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 76 ],
      "in-vars" : [ 0, 7, 36 ],
      "exit" : false,
      "out-vars" : [ 0, 7, 36 ],
      "decl-vars" : [ ],
      "line-start" : 837,
      "ast" : {
        "kind" : "statement",
        "label" : null,
        "type" : "continue"
      },
      "assign-vars" : [ ],
      "line-end" : 837,
      "code" : "continue",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 76 ],
      "in-vars" : [ 36, 40, 0, 7 ],
      "exit" : false,
      "out-vars" : [ 0, 7, 36 ],
      "decl-vars" : [ ],
      "line-start" : 839,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 39,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "  dead stkobj at"
            }
          }, {
            "coerced-to" : {
              "go-type" : 180,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 180,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "hex"
              }
            },
            "go-type" : 180,
            "kind" : "expression",
            "target" : {
              "go-type" : 7,
              "kind" : "expression",
              "left" : {
                "field" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "lo",
                  "variable" : 11
                },
                "go-type" : 7,
                "kind" : "expression",
                "target" : {
                  "field" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "stack",
                    "variable" : 9
                  },
                  "go-type" : 5,
                  "kind" : "expression",
                  "target" : {
                    "go-type" : 2,
                    "kind" : "expression",
                    "type" : "identifier",
                    "value" : {
                      "ident-kind" : "Var",
                      "kind" : "ident",
                      "value" : "gp",
                      "variable" : 0
                    }
                  },
                  "type" : "selector"
                },
                "type" : "selector"
              },
              "operator" : "+",
              "right" : {
                "coerced-to" : {
                  "go-type" : 7,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 7,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "uintptr"
                  }
                },
                "go-type" : 7,
                "kind" : "expression",
                "target" : {
                  "field" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "off",
                    "variable" : 26
                  },
                  "go-type" : 29,
                  "kind" : "expression",
                  "target" : {
                    "go-type" : 209,
                    "kind" : "expression",
                    "type" : "identifier",
                    "value" : {
                      "ident-kind" : "Var",
                      "kind" : "ident",
                      "value" : "obj",
                      "variable" : 40
                    }
                  },
                  "type" : "selector"
                },
                "type" : "cast"
              },
              "type" : "binary"
            },
            "type" : "cast"
          }, {
            "go-type" : 39,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "of type"
            }
          }, {
            "arguments" : [ ],
            "ellipsis" : false,
            "function" : {
              "field" : {
                "ident-kind" : "Func",
                "kind" : "ident",
                "value" : "string"
              },
              "go-type" : 245,
              "kind" : "expression",
              "target" : {
                "field" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "typ",
                  "variable" : 24
                },
                "go-type" : 98,
                "kind" : "expression",
                "target" : {
                  "go-type" : 209,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "obj",
                    "variable" : 40
                  }
                },
                "type" : "selector"
              },
              "type" : "selector"
            },
            "go-type" : 39,
            "kind" : "expression",
            "type" : "call"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 243,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Builtin",
              "kind" : "ident",
              "value" : "println"
            }
          },
          "go-type" : 36,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 839,
      "code" : "println(\"  dead stkobj at\", hex(gp.stack.lo+uintptr(obj.off)), \"of type\", obj.typ.string())",
      "entry" : false,
      "use-vars" : [ 40, 0 ]
    }, {
      "update-vars" : [ 36 ],
      "successors" : [ 81 ],
      "in-vars" : [ 36, 0, 7 ],
      "exit" : false,
      "out-vars" : [ 0, 7, 36 ],
      "decl-vars" : [ ],
      "line-start" : 843,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "nobj",
            "variable" : 39
          },
          "go-type" : 78,
          "kind" : "expression",
          "target" : {
            "go-type" : 203,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "x",
              "variable" : 36
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "go-type" : 78,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "0"
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 843,
      "code" : "x.nobj = 0",
      "entry" : false,
      "use-vars" : [ 36 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 72 ],
      "in-vars" : [ 0, 7, 36 ],
      "exit" : false,
      "out-vars" : [ 0, 7 ],
      "decl-vars" : [ ],
      "line-start" : 844,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "coerced-to" : {
              "contained" : {
                "go-type" : 118,
                "kind" : "type",
                "type" : "identifier",
                "value" : {
                  "go-type" : 118,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "workbuf"
                }
              },
              "go-type" : 117,
              "kind" : "type",
              "type" : "pointer"
            },
            "go-type" : 117,
            "kind" : "expression",
            "target" : {
              "coerced-to" : {
                "go-type" : 11,
                "kind" : "type",
                "qualifier" : {
                  "ident-kind" : "PkgName",
                  "kind" : "ident",
                  "package" : 1,
                  "value" : "unsafe"
                },
                "type" : "identifier",
                "value" : {
                  "go-type" : 11,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "Pointer"
                }
              },
              "go-type" : 11,
              "kind" : "expression",
              "target" : {
                "go-type" : 203,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "x",
                  "variable" : 36
                }
              },
              "type" : "cast"
            },
            "type" : "cast"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 256,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "putempty"
            }
          },
          "go-type" : 36,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 844,
      "code" : "putempty((*workbuf)(unsafe.Pointer(x)))",
      "entry" : false,
      "use-vars" : [ 36 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1, 83 ],
      "in-vars" : [ 7 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 846,
      "ast" : {
        "condition" : {
          "go-type" : 174,
          "kind" : "expression",
          "left" : {
            "go-type" : 174,
            "kind" : "expression",
            "left" : {
              "go-type" : 174,
              "kind" : "expression",
              "left" : {
                "field" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "buf",
                  "variable" : 42
                },
                "go-type" : 197,
                "kind" : "expression",
                "target" : {
                  "go-type" : 189,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "state",
                    "variable" : 7
                  }
                },
                "type" : "selector"
              },
              "operator" : "!=",
              "right" : {
                "go-type" : 230,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Nil",
                  "kind" : "ident",
                  "value" : "nil"
                }
              },
              "type" : "binary"
            },
            "operator" : "||",
            "right" : {
              "go-type" : 174,
              "kind" : "expression",
              "left" : {
                "field" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "cbuf",
                  "variable" : 43
                },
                "go-type" : 197,
                "kind" : "expression",
                "target" : {
                  "go-type" : 189,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "state",
                    "variable" : 7
                  }
                },
                "type" : "selector"
              },
              "operator" : "!=",
              "right" : {
                "go-type" : 230,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Nil",
                  "kind" : "ident",
                  "value" : "nil"
                }
              },
              "type" : "binary"
            },
            "type" : "binary"
          },
          "operator" : "||",
          "right" : {
            "go-type" : 174,
            "kind" : "expression",
            "left" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "freeBuf",
                "variable" : 44
              },
              "go-type" : 197,
              "kind" : "expression",
              "target" : {
                "go-type" : 189,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "state",
                  "variable" : 7
                }
              },
              "type" : "selector"
            },
            "operator" : "!=",
            "right" : {
              "go-type" : 230,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Nil",
                "kind" : "ident",
                "value" : "nil"
              }
            },
            "type" : "binary"
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 848,
      "code" : "if state.buf != nil || state.cbuf != nil || state.freeBuf != nil {\n\tthrow(\"remaining pointer buffers\")\n}",
      "entry" : false,
      "use-vars" : [ 7 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 847,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 39,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "remaining pointer buffers"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 181,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "throw"
            }
          },
          "go-type" : 36,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 847,
      "code" : "throw(\"remaining pointer buffers\")",
      "entry" : false,
      "use-vars" : [ ]
    } ],
    "code" : "// scanstack scans gp's stack, greying all pointers found on the stack.\n//\n// scanstack will also shrink the stack if it is safe to do so. If it\n// is not, it schedules a stack shrink for the next synchronous safe\n// point.\n//\n// scanstack is marked go:systemstack because it must not be preempted\n// while using a workbuf.\n//\n//go:nowritebarrier\n//go:systemstack\nfunc scanstack(gp *g, gcw *gcWork) {\n\tif readgstatus(gp)&_Gscan == 0 {\n\t\tprint(\"runtime:scanstack: gp=\", gp, \", goid=\", gp.goid, \", gp->atomicstatus=\", hex(readgstatus(gp)), \"\\n\")\n\t\tthrow(\"scanstack - bad status\")\n\t}\n\n\tswitch readgstatus(gp) &^ _Gscan {\n\tdefault:\n\t\tprint(\"runtime: gp=\", gp, \", goid=\", gp.goid, \", gp->atomicstatus=\", readgstatus(gp), \"\\n\")\n\t\tthrow(\"mark - bad status\")\n\tcase _Gdead:\n\t\treturn\n\tcase _Grunning:\n\t\tprint(\"runtime: gp=\", gp, \", goid=\", gp.goid, \", gp->atomicstatus=\", readgstatus(gp), \"\\n\")\n\t\tthrow(\"scanstack: goroutine not stopped\")\n\tcase _Grunnable, _Gsyscall, _Gwaiting:\n\n\t}\n\n\tif gp == getg() {\n\t\tthrow(\"can't scan our own stack\")\n\t}\n\n\tif isShrinkStackSafe(gp) {\n\n\t\tshrinkstack(gp)\n\t} else {\n\n\t\tgp.preemptShrink = true\n\t}\n\n\tvar state stackScanState\n\tstate.stack = gp.stack\n\n\tif stackTraceDebug {\n\t\tprintln(\"stack trace goroutine\", gp.goid)\n\t}\n\n\tif debugScanConservative && gp.asyncSafePoint {\n\t\tprint(\"scanning async preempted goroutine \", gp.goid, \" stack [\", hex(gp.stack.lo), \",\", hex(gp.stack.hi), \")\\n\")\n\t}\n\n\tif gp.sched.ctxt != nil {\n\t\tscanblock(uintptr(unsafe.Pointer(&gp.sched.ctxt)), sys.PtrSize, &oneptrmask[0], gcw, &state)\n\t}\n\n\tscanframe := func(frame *stkframe, unused unsafe.Pointer) bool {\n\t\tscanframeworker(frame, &state, gcw)\n\t\treturn true\n\t}\n\tgentraceback(^uintptr(0), ^uintptr(0), 0, gp, 0, nil, 0x7fffffff, scanframe, nil, 0)\n\n\ttracebackdefers(gp, scanframe, nil)\n\n\tfor d := gp._defer; d != nil; d = d.link {\n\t\tif d.fn != nil {\n\n\t\t\tscanblock(uintptr(unsafe.Pointer(&d.fn)), sys.PtrSize, &oneptrmask[0], gcw, &state)\n\t\t}\n\t\tif d.link != nil {\n\n\t\t\tscanblock(uintptr(unsafe.Pointer(&d.link)), sys.PtrSize, &oneptrmask[0], gcw, &state)\n\t\t}\n\n\t\tif d.heap {\n\t\t\tscanblock(uintptr(unsafe.Pointer(&d)), sys.PtrSize, &oneptrmask[0], gcw, &state)\n\t\t}\n\t}\n\tif gp._panic != nil {\n\n\t\tstate.putPtr(uintptr(unsafe.Pointer(gp._panic)), false)\n\t}\n\n\tstate.buildIndex()\n\tfor {\n\t\tp, conservative := state.getPtr()\n\t\tif p == 0 {\n\t\t\tbreak\n\t\t}\n\t\tobj := state.findObject(p)\n\t\tif obj == nil {\n\t\t\tcontinue\n\t\t}\n\t\tt := obj.typ\n\t\tif t == nil {\n\n\t\t\tcontinue\n\t\t}\n\t\tobj.setType(nil)\n\t\tif stackTraceDebug {\n\t\t\tprintlock()\n\t\t\tprint(\"  live stkobj at\", hex(state.stack.lo+uintptr(obj.off)), \"of type\", t.string())\n\t\t\tif conservative {\n\t\t\t\tprint(\" (conservative)\")\n\t\t\t}\n\t\t\tprintln()\n\t\t\tprintunlock()\n\t\t}\n\t\tgcdata := t.gcdata\n\t\tvar s *mspan\n\t\tif t.kind&kindGCProg != 0 {\n\n\t\t\ts = materializeGCProg(t.ptrdata, gcdata)\n\t\t\tgcdata = (*byte)(unsafe.Pointer(s.startAddr))\n\t\t}\n\n\t\tb := state.stack.lo + uintptr(obj.off)\n\t\tif conservative {\n\t\t\tscanConservative(b, t.ptrdata, gcdata, gcw, &state)\n\t\t} else {\n\t\t\tscanblock(b, t.ptrdata, gcdata, gcw, &state)\n\t\t}\n\n\t\tif s != nil {\n\t\t\tdematerializeGCProg(s)\n\t\t}\n\t}\n\n\tfor state.head != nil {\n\t\tx := state.head\n\t\tstate.head = x.next\n\t\tif stackTraceDebug {\n\t\t\tfor _, obj := range x.obj[:x.nobj] {\n\t\t\t\tif obj.typ == nil {\n\t\t\t\t\tcontinue\n\t\t\t\t}\n\t\t\t\tprintln(\"  dead stkobj at\", hex(gp.stack.lo+uintptr(obj.off)), \"of type\", obj.typ.string())\n\n\t\t\t}\n\t\t}\n\t\tx.nobj = 0\n\t\tputempty((*workbuf)(unsafe.Pointer(x)))\n\t}\n\tif state.buf != nil || state.cbuf != nil || state.freeBuf != nil {\n\t\tthrow(\"remaining pointer buffers\")\n\t}\n}",
    "defines" : [ 0 ],
    "functions" : [ {
      "name" : "scanstack",
      "package" : 0,
      "type" : 0,
      "exported" : false
    }, {
      "name" : "readgstatus",
      "package" : 0,
      "type" : 175,
      "exported" : false
    }, {
      "name" : "throw",
      "package" : 0,
      "type" : 181,
      "exported" : false
    }, {
      "name" : "getg",
      "package" : 0,
      "type" : 185,
      "exported" : false
    }, {
      "name" : "isShrinkStackSafe",
      "package" : 0,
      "type" : 187,
      "exported" : false
    }, {
      "name" : "shrinkstack",
      "package" : 0,
      "type" : 188,
      "exported" : false
    }, {
      "name" : "scanblock",
      "package" : 0,
      "type" : 216,
      "exported" : false
    }, {
      "name" : "scanframeworker",
      "package" : 0,
      "type" : 222,
      "exported" : false
    }, {
      "name" : "gentraceback",
      "package" : 0,
      "type" : 224,
      "exported" : false
    }, {
      "name" : "tracebackdefers",
      "package" : 0,
      "type" : 231,
      "exported" : false
    }, {
      "name" : "putPtr",
      "package" : 0,
      "type" : 235,
      "exported" : false
    }, {
      "name" : "buildIndex",
      "package" : 0,
      "type" : 35,
      "exported" : false
    }, {
      "name" : "getPtr",
      "package" : 0,
      "type" : 237,
      "exported" : false
    }, {
      "name" : "findObject",
      "package" : 0,
      "type" : 238,
      "exported" : false
    }, {
      "name" : "setType",
      "package" : 0,
      "type" : 241,
      "exported" : false
    }, {
      "name" : "printlock",
      "package" : 0,
      "type" : 35,
      "exported" : false
    }, {
      "name" : "string",
      "package" : 0,
      "type" : 245,
      "exported" : false
    }, {
      "name" : "printunlock",
      "package" : 0,
      "type" : 35,
      "exported" : false
    }, {
      "name" : "materializeGCProg",
      "package" : 0,
      "type" : 248,
      "exported" : false
    }, {
      "name" : "scanConservative",
      "package" : 0,
      "type" : 251,
      "exported" : false
    }, {
      "name" : "dematerializeGCProg",
      "package" : 0,
      "type" : 253,
      "exported" : false
    }, {
      "name" : "putempty",
      "package" : 0,
      "type" : 256,
      "exported" : false
    } ],
    "line-end" : 849,
    "line-start" : 685,
    "names" : [ "scanstack" ],
    "package" : 0,
    "packages" : [ {
      "name" : "runtime",
      "path" : "runtime"
    }, {
      "name" : "unsafe",
      "path" : "unsafe"
    }, {
      "name" : "sys",
      "path" : "runtime/internal/sys"
    } ],
    "params" : [ 0, 1 ],
    "receivers" : [ ],
    "results" : [ ],
    "type" : "function",
    "types" : [ {
      "name" : "func(gp *runtime.g, gcw *runtime.gcWork)",
      "params" : 1,
      "recv" : -1,
      "results" : 36,
      "type" : "Signature",
      "underlying" : 0,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "gp",
        "type" : 2
      }, {
        "name" : "gcw",
        "type" : 114
      } ],
      "name" : "(gp *runtime.g, gcw *runtime.gcWork)",
      "type" : "Tuple",
      "underlying" : 1
    }, {
      "elem" : 3,
      "name" : "*runtime.g",
      "type" : "Pointer",
      "underlying" : 2
    }, {
      "local-name" : "g",
      "name" : "runtime.g",
      "package" : 0,
      "type" : "Named",
      "underlying" : 4
    }, {
      "fields" : [ {
        "name" : "stack",
        "type" : 5
      }, {
        "name" : "stackguard0",
        "type" : 7
      }, {
        "name" : "stackguard1",
        "type" : 7
      }, {
        "name" : "_panic",
        "type" : 8
      }, {
        "name" : "_defer",
        "type" : 14
      }, {
        "name" : "m",
        "type" : 21
      }, {
        "name" : "sched",
        "type" : 24
      }, {
        "name" : "syscallsp",
        "type" : 7
      }, {
        "name" : "syscallpc",
        "type" : 7
      }, {
        "name" : "stktopsp",
        "type" : 7
      }, {
        "name" : "param",
        "type" : 11
      }, {
        "name" : "atomicstatus",
        "type" : 29
      }, {
        "name" : "stackLock",
        "type" : 29
      }, {
        "name" : "goid",
        "type" : 38
      }, {
        "name" : "schedlink",
        "type" : 26
      }, {
        "name" : "waitsince",
        "type" : 38
      }, {
        "name" : "waitreason",
        "type" : 84
      }, {
        "name" : "preempt",
        "type" : 13
      }, {
        "name" : "preemptStop",
        "type" : 13
      }, {
        "name" : "preemptShrink",
        "type" : 13
      }, {
        "name" : "asyncSafePoint",
        "type" : 13
      }, {
        "name" : "paniconfault",
        "type" : 13
      }, {
        "name" : "gcscandone",
        "type" : 13
      }, {
        "name" : "throwsplit",
        "type" : 13
      }, {
        "name" : "activeStackChans",
        "type" : 13
      }, {
        "name" : "raceignore",
        "type" : 40
      }, {
        "name" : "sysblocktraced",
        "type" : 13
      }, {
        "name" : "sysexitticks",
        "type" : 38
      }, {
        "name" : "traceseq",
        "type" : 28
      }, {
        "name" : "tracelastp",
        "type" : 37
      }, {
        "name" : "lockedm",
        "type" : 47
      }, {
        "name" : "sig",
        "type" : 29
      }, {
        "name" : "writebuf",
        "type" : 85
      }, {
        "name" : "sigcode0",
        "type" : 7
      }, {
        "name" : "sigcode1",
        "type" : 7
      }, {
        "name" : "sigpc",
        "type" : 7
      }, {
        "name" : "gopc",
        "type" : 7
      }, {
        "name" : "ancestors",
        "type" : 86
      }, {
        "name" : "startpc",
        "type" : 7
      }, {
        "name" : "racectx",
        "type" : 7
      }, {
        "name" : "waiting",
        "type" : 91
      }, {
        "name" : "cgoCtxt",
        "type" : 90
      }, {
        "name" : "labels",
        "type" : 11
      }, {
        "name" : "timer",
        "type" : 109
      }, {
        "name" : "selectDone",
        "type" : 29
      }, {
        "name" : "gcAssistBytes",
        "type" : 38
      } ],
      "name" : "struct{stack runtime.stack; stackguard0 uintptr; stackguard1 uintptr; _panic *runtime._panic; _defer *runtime._defer; m *runtime.m; sched runtime.gobuf; syscallsp uintptr; syscallpc uintptr; stktopsp uintptr; param unsafe.Pointer; atomicstatus uint32; stackLock uint32; goid int64; schedlink runtime.guintptr; waitsince int64; waitreason runtime.waitReason; preempt bool; preemptStop bool; preemptShrink bool; asyncSafePoint bool; paniconfault bool; gcscandone bool; throwsplit bool; activeStackChans bool; raceignore int8; sysblocktraced bool; sysexitticks int64; traceseq uint64; tracelastp runtime.puintptr; lockedm runtime.muintptr; sig uint32; writebuf []byte; sigcode0 uintptr; sigcode1 uintptr; sigpc uintptr; gopc uintptr; ancestors *[]runtime.ancestorInfo; startpc uintptr; racectx uintptr; waiting *runtime.sudog; cgoCtxt []uintptr; labels unsafe.Pointer; timer *runtime.timer; selectDone uint32; gcAssistBytes int64}",
      "type" : "Struct",
      "underlying" : 4
    }, {
      "local-name" : "stack",
      "name" : "runtime.stack",
      "package" : 0,
      "type" : "Named",
      "underlying" : 6
    }, {
      "fields" : [ {
        "name" : "lo",
        "type" : 7
      }, {
        "name" : "hi",
        "type" : 7
      } ],
      "name" : "struct{lo uintptr; hi uintptr}",
      "type" : "Struct",
      "underlying" : 6
    }, {
      "name" : "uintptr",
      "type" : "Basic",
      "underlying" : 7
    }, {
      "elem" : 9,
      "name" : "*runtime._panic",
      "type" : "Pointer",
      "underlying" : 8
    }, {
      "local-name" : "_panic",
      "name" : "runtime._panic",
      "package" : 0,
      "type" : "Named",
      "underlying" : 10
    }, {
      "fields" : [ {
        "name" : "argp",
        "type" : 11
      }, {
        "name" : "arg",
        "type" : 12
      }, {
        "name" : "link",
        "type" : 8
      }, {
        "name" : "pc",
        "type" : 7
      }, {
        "name" : "sp",
        "type" : 11
      }, {
        "name" : "recovered",
        "type" : 13
      }, {
        "name" : "aborted",
        "type" : 13
      }, {
        "name" : "goexit",
        "type" : 13
      } ],
      "name" : "struct{argp unsafe.Pointer; arg interface{}; link *runtime._panic; pc uintptr; sp unsafe.Pointer; recovered bool; aborted bool; goexit bool}",
      "type" : "Struct",
      "underlying" : 10
    }, {
      "local-name" : "Pointer",
      "name" : "unsafe.Pointer",
      "package" : 1,
      "type" : "Basic",
      "underlying" : 11
    }, {
      "methods" : [ ],
      "name" : "interface{}",
      "type" : "Interface",
      "underlying" : 12
    }, {
      "name" : "bool",
      "type" : "Basic",
      "underlying" : 13
    }, {
      "elem" : 15,
      "name" : "*runtime._defer",
      "type" : "Pointer",
      "underlying" : 14
    }, {
      "local-name" : "_defer",
      "name" : "runtime._defer",
      "package" : 0,
      "type" : "Named",
      "underlying" : 16
    }, {
      "fields" : [ {
        "name" : "siz",
        "type" : 17
      }, {
        "name" : "started",
        "type" : 13
      }, {
        "name" : "heap",
        "type" : 13
      }, {
        "name" : "openDefer",
        "type" : 13
      }, {
        "name" : "sp",
        "type" : 7
      }, {
        "name" : "pc",
        "type" : 7
      }, {
        "name" : "fn",
        "type" : 18
      }, {
        "name" : "_panic",
        "type" : 8
      }, {
        "name" : "link",
        "type" : 14
      }, {
        "name" : "fd",
        "type" : 11
      }, {
        "name" : "varp",
        "type" : 7
      }, {
        "name" : "framepc",
        "type" : 7
      } ],
      "name" : "struct{siz int32; started bool; heap bool; openDefer bool; sp uintptr; pc uintptr; fn *runtime.funcval; _panic *runtime._panic; link *runtime._defer; fd unsafe.Pointer; varp uintptr; framepc uintptr}",
      "type" : "Struct",
      "underlying" : 16
    }, {
      "name" : "int32",
      "type" : "Basic",
      "underlying" : 17
    }, {
      "elem" : 19,
      "name" : "*runtime.funcval",
      "type" : "Pointer",
      "underlying" : 18
    }, {
      "local-name" : "funcval",
      "name" : "runtime.funcval",
      "package" : 0,
      "type" : "Named",
      "underlying" : 20
    }, {
      "fields" : [ {
        "name" : "fn",
        "type" : 7
      } ],
      "name" : "struct{fn uintptr}",
      "type" : "Struct",
      "underlying" : 20
    }, {
      "elem" : 22,
      "name" : "*runtime.m",
      "type" : "Pointer",
      "underlying" : 21
    }, {
      "local-name" : "m",
      "name" : "runtime.m",
      "package" : 0,
      "type" : "Named",
      "underlying" : 23
    }, {
      "fields" : [ {
        "name" : "g0",
        "type" : 2
      }, {
        "name" : "morebuf",
        "type" : 24
      }, {
        "name" : "divmod",
        "type" : 29
      }, {
        "name" : "procid",
        "type" : 28
      }, {
        "name" : "gsignal",
        "type" : 2
      }, {
        "name" : "goSigStack",
        "type" : 30
      }, {
        "name" : "sigmask",
        "type" : 32
      }, {
        "name" : "tls",
        "type" : 34
      }, {
        "name" : "mstartfn",
        "type" : 35
      }, {
        "name" : "curg",
        "type" : 2
      }, {
        "name" : "caughtsig",
        "type" : 26
      }, {
        "name" : "p",
        "type" : 37
      }, {
        "name" : "nextp",
        "type" : 37
      }, {
        "name" : "oldp",
        "type" : 37
      }, {
        "name" : "id",
        "type" : 38
      }, {
        "name" : "mallocing",
        "type" : 17
      }, {
        "name" : "throwing",
        "type" : 17
      }, {
        "name" : "preemptoff",
        "type" : 39
      }, {
        "name" : "locks",
        "type" : 17
      }, {
        "name" : "dying",
        "type" : 17
      }, {
        "name" : "profilehz",
        "type" : 17
      }, {
        "name" : "spinning",
        "type" : 13
      }, {
        "name" : "blocked",
        "type" : 13
      }, {
        "name" : "newSigstack",
        "type" : 13
      }, {
        "name" : "printlock",
        "type" : 40
      }, {
        "name" : "incgo",
        "type" : 13
      }, {
        "name" : "freeWait",
        "type" : 29
      }, {
        "name" : "fastrand",
        "type" : 33
      }, {
        "name" : "needextram",
        "type" : 13
      }, {
        "name" : "traceback",
        "type" : 41
      }, {
        "name" : "ncgocall",
        "type" : 28
      }, {
        "name" : "ncgo",
        "type" : 17
      }, {
        "name" : "cgoCallersUse",
        "type" : 29
      }, {
        "name" : "cgoCallers",
        "type" : 42
      }, {
        "name" : "park",
        "type" : 45
      }, {
        "name" : "alllink",
        "type" : 21
      }, {
        "name" : "schedlink",
        "type" : 47
      }, {
        "name" : "mcache",
        "type" : 48
      }, {
        "name" : "lockedg",
        "type" : 26
      }, {
        "name" : "createstack",
        "type" : 44
      }, {
        "name" : "lockedExt",
        "type" : 29
      }, {
        "name" : "lockedInt",
        "type" : 29
      }, {
        "name" : "nextwaitm",
        "type" : 47
      }, {
        "name" : "waitunlockf",
        "type" : 75
      }, {
        "name" : "waitlock",
        "type" : 11
      }, {
        "name" : "waittraceev",
        "type" : 70
      }, {
        "name" : "waittraceskip",
        "type" : 78
      }, {
        "name" : "startingtrace",
        "type" : 13
      }, {
        "name" : "syscalltick",
        "type" : 29
      }, {
        "name" : "freelink",
        "type" : 21
      }, {
        "name" : "libcall",
        "type" : 79
      }, {
        "name" : "libcallpc",
        "type" : 7
      }, {
        "name" : "libcallsp",
        "type" : 7
      }, {
        "name" : "libcallg",
        "type" : 26
      }, {
        "name" : "syscall",
        "type" : 79
      }, {
        "name" : "vdsoSP",
        "type" : 7
      }, {
        "name" : "vdsoPC",
        "type" : 7
      }, {
        "name" : "preemptGen",
        "type" : 29
      }, {
        "name" : "signalPending",
        "type" : 29
      }, {
        "name" : "dlogPerM",
        "type" : 81
      }, {
        "name" : "mOS",
        "type" : 83
      } ],
      "name" : "struct{g0 *runtime.g; morebuf runtime.gobuf; divmod uint32; procid uint64; gsignal *runtime.g; goSigStack runtime.gsignalStack; sigmask runtime.sigset; tls [6]uintptr; mstartfn func(); curg *runtime.g; caughtsig runtime.guintptr; p runtime.puintptr; nextp runtime.puintptr; oldp runtime.puintptr; id int64; mallocing int32; throwing int32; preemptoff string; locks int32; dying int32; profilehz int32; spinning bool; blocked bool; newSigstack bool; printlock int8; incgo bool; freeWait uint32; fastrand [2]uint32; needextram bool; traceback uint8; ncgocall uint64; ncgo int32; cgoCallersUse uint32; cgoCallers *runtime.cgoCallers; park runtime.note; alllink *runtime.m; schedlink runtime.muintptr; mcache *runtime.mcache; lockedg runtime.guintptr; createstack [32]uintptr; lockedExt uint32; lockedInt uint32; nextwaitm runtime.muintptr; waitunlockf func(*runtime.g, unsafe.Pointer) bool; waitlock unsafe.Pointer; waittraceev byte; waittraceskip int; startingtrace bool; syscalltick uint32; freelink *runtime.m; libcall runtime.libcall; libcallpc uintptr; libcallsp uintptr; libcallg runtime.guintptr; syscall runtime.libcall; vdsoSP uintptr; vdsoPC uintptr; preemptGen uint32; signalPending uint32; runtime.dlogPerM; runtime.mOS}",
      "type" : "Struct",
      "underlying" : 23
    }, {
      "local-name" : "gobuf",
      "name" : "runtime.gobuf",
      "package" : 0,
      "type" : "Named",
      "underlying" : 25
    }, {
      "fields" : [ {
        "name" : "sp",
        "type" : 7
      }, {
        "name" : "pc",
        "type" : 7
      }, {
        "name" : "g",
        "type" : 26
      }, {
        "name" : "ctxt",
        "type" : 11
      }, {
        "name" : "ret",
        "type" : 27
      }, {
        "name" : "lr",
        "type" : 7
      }, {
        "name" : "bp",
        "type" : 7
      } ],
      "name" : "struct{sp uintptr; pc uintptr; g runtime.guintptr; ctxt unsafe.Pointer; ret runtime/internal/sys.Uintreg; lr uintptr; bp uintptr}",
      "type" : "Struct",
      "underlying" : 25
    }, {
      "local-name" : "guintptr",
      "name" : "runtime.guintptr",
      "package" : 0,
      "type" : "Named",
      "underlying" : 7
    }, {
      "local-name" : "Uintreg",
      "name" : "runtime/internal/sys.Uintreg",
      "package" : 2,
      "type" : "Named",
      "underlying" : 28
    }, {
      "name" : "uint64",
      "type" : "Basic",
      "underlying" : 28
    }, {
      "name" : "uint32",
      "type" : "Basic",
      "underlying" : 29
    }, {
      "local-name" : "gsignalStack",
      "name" : "runtime.gsignalStack",
      "package" : 0,
      "type" : "Named",
      "underlying" : 31
    }, {
      "fields" : [ {
        "name" : "stack",
        "type" : 5
      }, {
        "name" : "stackguard0",
        "type" : 7
      }, {
        "name" : "stackguard1",
        "type" : 7
      }, {
        "name" : "stktopsp",
        "type" : 7
      } ],
      "name" : "struct{stack runtime.stack; stackguard0 uintptr; stackguard1 uintptr; stktopsp uintptr}",
      "type" : "Struct",
      "underlying" : 31
    }, {
      "local-name" : "sigset",
      "name" : "runtime.sigset",
      "package" : 0,
      "type" : "Named",
      "underlying" : 33
    }, {
      "elem" : 29,
      "name" : "[2]uint32",
      "type" : "Array",
      "underlying" : 33
    }, {
      "elem" : 7,
      "name" : "[6]uintptr",
      "type" : "Array",
      "underlying" : 34
    }, {
      "name" : "func()",
      "params" : 36,
      "recv" : -1,
      "results" : 36,
      "type" : "Signature",
      "underlying" : 35,
      "variadic" : false
    }, {
      "fields" : [ ],
      "name" : "()",
      "type" : "Tuple",
      "underlying" : 36
    }, {
      "local-name" : "puintptr",
      "name" : "runtime.puintptr",
      "package" : 0,
      "type" : "Named",
      "underlying" : 7
    }, {
      "name" : "int64",
      "type" : "Basic",
      "underlying" : 38
    }, {
      "name" : "string",
      "type" : "Basic",
      "underlying" : 39
    }, {
      "name" : "int8",
      "type" : "Basic",
      "underlying" : 40
    }, {
      "name" : "uint8",
      "type" : "Basic",
      "underlying" : 41
    }, {
      "elem" : 43,
      "name" : "*runtime.cgoCallers",
      "type" : "Pointer",
      "underlying" : 42
    }, {
      "local-name" : "cgoCallers",
      "name" : "runtime.cgoCallers",
      "package" : 0,
      "type" : "Named",
      "underlying" : 44
    }, {
      "elem" : 7,
      "name" : "[32]uintptr",
      "type" : "Array",
      "underlying" : 44
    }, {
      "local-name" : "note",
      "name" : "runtime.note",
      "package" : 0,
      "type" : "Named",
      "underlying" : 46
    }, {
      "fields" : [ {
        "name" : "key",
        "type" : 7
      } ],
      "name" : "struct{key uintptr}",
      "type" : "Struct",
      "underlying" : 46
    }, {
      "local-name" : "muintptr",
      "name" : "runtime.muintptr",
      "package" : 0,
      "type" : "Named",
      "underlying" : 7
    }, {
      "elem" : 49,
      "name" : "*runtime.mcache",
      "type" : "Pointer",
      "underlying" : 48
    }, {
      "local-name" : "mcache",
      "name" : "runtime.mcache",
      "package" : 0,
      "type" : "Named",
      "underlying" : 50
    }, {
      "fields" : [ {
        "name" : "next_sample",
        "type" : 7
      }, {
        "name" : "local_scan",
        "type" : 7
      }, {
        "name" : "tiny",
        "type" : 7
      }, {
        "name" : "tinyoffset",
        "type" : 7
      }, {
        "name" : "local_tinyallocs",
        "type" : 7
      }, {
        "name" : "alloc",
        "type" : 51
      }, {
        "name" : "stackcache",
        "type" : 71
      }, {
        "name" : "local_largefree",
        "type" : 7
      }, {
        "name" : "local_nlargefree",
        "type" : 7
      }, {
        "name" : "local_nsmallfree",
        "type" : 74
      }, {
        "name" : "flushGen",
        "type" : 29
      } ],
      "name" : "struct{next_sample uintptr; local_scan uintptr; tiny uintptr; tinyoffset uintptr; local_tinyallocs uintptr; alloc [134]*runtime.mspan; stackcache [4]runtime.stackfreelist; local_largefree uintptr; local_nlargefree uintptr; local_nsmallfree [67]uintptr; flushGen uint32}",
      "type" : "Struct",
      "underlying" : 50
    }, {
      "elem" : 52,
      "name" : "[134]*runtime.mspan",
      "type" : "Array",
      "underlying" : 51
    }, {
      "elem" : 53,
      "name" : "*runtime.mspan",
      "type" : "Pointer",
      "underlying" : 52
    }, {
      "local-name" : "mspan",
      "name" : "runtime.mspan",
      "package" : 0,
      "type" : "Named",
      "underlying" : 54
    }, {
      "fields" : [ {
        "name" : "next",
        "type" : 52
      }, {
        "name" : "prev",
        "type" : 52
      }, {
        "name" : "list",
        "type" : 55
      }, {
        "name" : "startAddr",
        "type" : 7
      }, {
        "name" : "npages",
        "type" : 7
      }, {
        "name" : "manualFreeList",
        "type" : 58
      }, {
        "name" : "freeindex",
        "type" : 7
      }, {
        "name" : "nelems",
        "type" : 7
      }, {
        "name" : "allocCache",
        "type" : 28
      }, {
        "name" : "allocBits",
        "type" : 59
      }, {
        "name" : "gcmarkBits",
        "type" : 59
      }, {
        "name" : "sweepgen",
        "type" : 29
      }, {
        "name" : "divMul",
        "type" : 61
      }, {
        "name" : "baseMask",
        "type" : 61
      }, {
        "name" : "allocCount",
        "type" : 61
      }, {
        "name" : "spanclass",
        "type" : 62
      }, {
        "name" : "state",
        "type" : 63
      }, {
        "name" : "needzero",
        "type" : 41
      }, {
        "name" : "divShift",
        "type" : 41
      }, {
        "name" : "divShift2",
        "type" : 41
      }, {
        "name" : "elemsize",
        "type" : 7
      }, {
        "name" : "limit",
        "type" : 7
      }, {
        "name" : "speciallock",
        "type" : 66
      }, {
        "name" : "specials",
        "type" : 67
      } ],
      "name" : "struct{next *runtime.mspan; prev *runtime.mspan; list *runtime.mSpanList; startAddr uintptr; npages uintptr; manualFreeList runtime.gclinkptr; freeindex uintptr; nelems uintptr; allocCache uint64; allocBits *runtime.gcBits; gcmarkBits *runtime.gcBits; sweepgen uint32; divMul uint16; baseMask uint16; allocCount uint16; spanclass runtime.spanClass; state runtime.mSpanStateBox; needzero uint8; divShift uint8; divShift2 uint8; elemsize uintptr; limit uintptr; speciallock runtime.mutex; specials *runtime.special}",
      "type" : "Struct",
      "underlying" : 54
    }, {
      "elem" : 56,
      "name" : "*runtime.mSpanList",
      "type" : "Pointer",
      "underlying" : 55
    }, {
      "local-name" : "mSpanList",
      "name" : "runtime.mSpanList",
      "package" : 0,
      "type" : "Named",
      "underlying" : 57
    }, {
      "fields" : [ {
        "name" : "first",
        "type" : 52
      }, {
        "name" : "last",
        "type" : 52
      } ],
      "name" : "struct{first *runtime.mspan; last *runtime.mspan}",
      "type" : "Struct",
      "underlying" : 57
    }, {
      "local-name" : "gclinkptr",
      "name" : "runtime.gclinkptr",
      "package" : 0,
      "type" : "Named",
      "underlying" : 7
    }, {
      "elem" : 60,
      "name" : "*runtime.gcBits",
      "type" : "Pointer",
      "underlying" : 59
    }, {
      "local-name" : "gcBits",
      "name" : "runtime.gcBits",
      "package" : 0,
      "type" : "Named",
      "underlying" : 41
    }, {
      "name" : "uint16",
      "type" : "Basic",
      "underlying" : 61
    }, {
      "local-name" : "spanClass",
      "name" : "runtime.spanClass",
      "package" : 0,
      "type" : "Named",
      "underlying" : 41
    }, {
      "local-name" : "mSpanStateBox",
      "name" : "runtime.mSpanStateBox",
      "package" : 0,
      "type" : "Named",
      "underlying" : 64
    }, {
      "fields" : [ {
        "name" : "s",
        "type" : 65
      } ],
      "name" : "struct{s runtime.mSpanState}",
      "type" : "Struct",
      "underlying" : 64
    }, {
      "local-name" : "mSpanState",
      "name" : "runtime.mSpanState",
      "package" : 0,
      "type" : "Named",
      "underlying" : 41
    }, {
      "local-name" : "mutex",
      "name" : "runtime.mutex",
      "package" : 0,
      "type" : "Named",
      "underlying" : 46
    }, {
      "elem" : 68,
      "name" : "*runtime.special",
      "type" : "Pointer",
      "underlying" : 67
    }, {
      "local-name" : "special",
      "name" : "runtime.special",
      "package" : 0,
      "type" : "Named",
      "underlying" : 69
    }, {
      "fields" : [ {
        "name" : "next",
        "type" : 67
      }, {
        "name" : "offset",
        "type" : 61
      }, {
        "name" : "kind",
        "type" : 70
      } ],
      "name" : "struct{next *runtime.special; offset uint16; kind byte}",
      "type" : "Struct",
      "underlying" : 69
    }, {
      "name" : "byte",
      "type" : "Basic",
      "underlying" : 70
    }, {
      "elem" : 72,
      "name" : "[4]runtime.stackfreelist",
      "type" : "Array",
      "underlying" : 71
    }, {
      "local-name" : "stackfreelist",
      "name" : "runtime.stackfreelist",
      "package" : 0,
      "type" : "Named",
      "underlying" : 73
    }, {
      "fields" : [ {
        "name" : "list",
        "type" : 58
      }, {
        "name" : "size",
        "type" : 7
      } ],
      "name" : "struct{list runtime.gclinkptr; size uintptr}",
      "type" : "Struct",
      "underlying" : 73
    }, {
      "elem" : 7,
      "name" : "[67]uintptr",
      "type" : "Array",
      "underlying" : 74
    }, {
      "name" : "func(*runtime.g, unsafe.Pointer) bool",
      "params" : 76,
      "recv" : -1,
      "results" : 77,
      "type" : "Signature",
      "underlying" : 75,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 2
      }, {
        "name" : "",
        "type" : 11
      } ],
      "name" : "(*runtime.g, unsafe.Pointer)",
      "type" : "Tuple",
      "underlying" : 76
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 13
      } ],
      "name" : "(bool)",
      "type" : "Tuple",
      "underlying" : 77
    }, {
      "name" : "int",
      "type" : "Basic",
      "underlying" : 78
    }, {
      "local-name" : "libcall",
      "name" : "runtime.libcall",
      "package" : 0,
      "type" : "Named",
      "underlying" : 80
    }, {
      "fields" : [ {
        "name" : "fn",
        "type" : 7
      }, {
        "name" : "n",
        "type" : 7
      }, {
        "name" : "args",
        "type" : 7
      }, {
        "name" : "r1",
        "type" : 7
      }, {
        "name" : "r2",
        "type" : 7
      }, {
        "name" : "err",
        "type" : 7
      } ],
      "name" : "struct{fn uintptr; n uintptr; args uintptr; r1 uintptr; r2 uintptr; err uintptr}",
      "type" : "Struct",
      "underlying" : 80
    }, {
      "local-name" : "dlogPerM",
      "name" : "runtime.dlogPerM",
      "package" : 0,
      "type" : "Named",
      "underlying" : 82
    }, {
      "fields" : [ ],
      "name" : "struct{}",
      "type" : "Struct",
      "underlying" : 82
    }, {
      "local-name" : "mOS",
      "name" : "runtime.mOS",
      "package" : 0,
      "type" : "Named",
      "underlying" : 82
    }, {
      "local-name" : "waitReason",
      "name" : "runtime.waitReason",
      "package" : 0,
      "type" : "Named",
      "underlying" : 41
    }, {
      "elem" : 70,
      "name" : "[]byte",
      "type" : "Slice",
      "underlying" : 85
    }, {
      "elem" : 87,
      "name" : "*[]runtime.ancestorInfo",
      "type" : "Pointer",
      "underlying" : 86
    }, {
      "elem" : 88,
      "name" : "[]runtime.ancestorInfo",
      "type" : "Slice",
      "underlying" : 87
    }, {
      "local-name" : "ancestorInfo",
      "name" : "runtime.ancestorInfo",
      "package" : 0,
      "type" : "Named",
      "underlying" : 89
    }, {
      "fields" : [ {
        "name" : "pcs",
        "type" : 90
      }, {
        "name" : "goid",
        "type" : 38
      }, {
        "name" : "gopc",
        "type" : 7
      } ],
      "name" : "struct{pcs []uintptr; goid int64; gopc uintptr}",
      "type" : "Struct",
      "underlying" : 89
    }, {
      "elem" : 7,
      "name" : "[]uintptr",
      "type" : "Slice",
      "underlying" : 90
    }, {
      "elem" : 92,
      "name" : "*runtime.sudog",
      "type" : "Pointer",
      "underlying" : 91
    }, {
      "local-name" : "sudog",
      "name" : "runtime.sudog",
      "package" : 0,
      "type" : "Named",
      "underlying" : 93
    }, {
      "fields" : [ {
        "name" : "g",
        "type" : 2
      }, {
        "name" : "isSelect",
        "type" : 13
      }, {
        "name" : "next",
        "type" : 91
      }, {
        "name" : "prev",
        "type" : 91
      }, {
        "name" : "elem",
        "type" : 11
      }, {
        "name" : "acquiretime",
        "type" : 38
      }, {
        "name" : "releasetime",
        "type" : 38
      }, {
        "name" : "ticket",
        "type" : 29
      }, {
        "name" : "parent",
        "type" : 91
      }, {
        "name" : "waitlink",
        "type" : 91
      }, {
        "name" : "waittail",
        "type" : 91
      }, {
        "name" : "c",
        "type" : 94
      } ],
      "name" : "struct{g *runtime.g; isSelect bool; next *runtime.sudog; prev *runtime.sudog; elem unsafe.Pointer; acquiretime int64; releasetime int64; ticket uint32; parent *runtime.sudog; waitlink *runtime.sudog; waittail *runtime.sudog; c *runtime.hchan}",
      "type" : "Struct",
      "underlying" : 93
    }, {
      "elem" : 95,
      "name" : "*runtime.hchan",
      "type" : "Pointer",
      "underlying" : 94
    }, {
      "local-name" : "hchan",
      "name" : "runtime.hchan",
      "package" : 0,
      "type" : "Named",
      "underlying" : 96
    }, {
      "fields" : [ {
        "name" : "qcount",
        "type" : 97
      }, {
        "name" : "dataqsiz",
        "type" : 97
      }, {
        "name" : "buf",
        "type" : 11
      }, {
        "name" : "elemsize",
        "type" : 61
      }, {
        "name" : "closed",
        "type" : 29
      }, {
        "name" : "elemtype",
        "type" : 98
      }, {
        "name" : "sendx",
        "type" : 97
      }, {
        "name" : "recvx",
        "type" : 97
      }, {
        "name" : "recvq",
        "type" : 107
      }, {
        "name" : "sendq",
        "type" : 107
      }, {
        "name" : "lock",
        "type" : 66
      } ],
      "name" : "struct{qcount uint; dataqsiz uint; buf unsafe.Pointer; elemsize uint16; closed uint32; elemtype *runtime._type; sendx uint; recvx uint; recvq runtime.waitq; sendq runtime.waitq; lock runtime.mutex}",
      "type" : "Struct",
      "underlying" : 96
    }, {
      "name" : "uint",
      "type" : "Basic",
      "underlying" : 97
    }, {
      "elem" : 99,
      "name" : "*runtime._type",
      "type" : "Pointer",
      "underlying" : 98
    }, {
      "local-name" : "_type",
      "name" : "runtime._type",
      "package" : 0,
      "type" : "Named",
      "underlying" : 100
    }, {
      "fields" : [ {
        "name" : "size",
        "type" : 7
      }, {
        "name" : "ptrdata",
        "type" : 7
      }, {
        "name" : "hash",
        "type" : 29
      }, {
        "name" : "tflag",
        "type" : 101
      }, {
        "name" : "align",
        "type" : 41
      }, {
        "name" : "fieldAlign",
        "type" : 41
      }, {
        "name" : "kind",
        "type" : 41
      }, {
        "name" : "equal",
        "type" : 102
      }, {
        "name" : "gcdata",
        "type" : 104
      }, {
        "name" : "str",
        "type" : 105
      }, {
        "name" : "ptrToThis",
        "type" : 106
      } ],
      "name" : "struct{size uintptr; ptrdata uintptr; hash uint32; tflag runtime.tflag; align uint8; fieldAlign uint8; kind uint8; equal func(unsafe.Pointer, unsafe.Pointer) bool; gcdata *byte; str runtime.nameOff; ptrToThis runtime.typeOff}",
      "type" : "Struct",
      "underlying" : 100
    }, {
      "local-name" : "tflag",
      "name" : "runtime.tflag",
      "package" : 0,
      "type" : "Named",
      "underlying" : 41
    }, {
      "name" : "func(unsafe.Pointer, unsafe.Pointer) bool",
      "params" : 103,
      "recv" : -1,
      "results" : 77,
      "type" : "Signature",
      "underlying" : 102,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 11
      }, {
        "name" : "",
        "type" : 11
      } ],
      "name" : "(unsafe.Pointer, unsafe.Pointer)",
      "type" : "Tuple",
      "underlying" : 103
    }, {
      "elem" : 70,
      "name" : "*byte",
      "type" : "Pointer",
      "underlying" : 104
    }, {
      "local-name" : "nameOff",
      "name" : "runtime.nameOff",
      "package" : 0,
      "type" : "Named",
      "underlying" : 17
    }, {
      "local-name" : "typeOff",
      "name" : "runtime.typeOff",
      "package" : 0,
      "type" : "Named",
      "underlying" : 17
    }, {
      "local-name" : "waitq",
      "name" : "runtime.waitq",
      "package" : 0,
      "type" : "Named",
      "underlying" : 108
    }, {
      "fields" : [ {
        "name" : "first",
        "type" : 91
      }, {
        "name" : "last",
        "type" : 91
      } ],
      "name" : "struct{first *runtime.sudog; last *runtime.sudog}",
      "type" : "Struct",
      "underlying" : 108
    }, {
      "elem" : 110,
      "name" : "*runtime.timer",
      "type" : "Pointer",
      "underlying" : 109
    }, {
      "local-name" : "timer",
      "name" : "runtime.timer",
      "package" : 0,
      "type" : "Named",
      "underlying" : 111
    }, {
      "fields" : [ {
        "name" : "pp",
        "type" : 37
      }, {
        "name" : "when",
        "type" : 38
      }, {
        "name" : "period",
        "type" : 38
      }, {
        "name" : "f",
        "type" : 112
      }, {
        "name" : "arg",
        "type" : 12
      }, {
        "name" : "seq",
        "type" : 7
      }, {
        "name" : "nextwhen",
        "type" : 38
      }, {
        "name" : "status",
        "type" : 29
      } ],
      "name" : "struct{pp runtime.puintptr; when int64; period int64; f func(interface{}, uintptr); arg interface{}; seq uintptr; nextwhen int64; status uint32}",
      "type" : "Struct",
      "underlying" : 111
    }, {
      "name" : "func(interface{}, uintptr)",
      "params" : 113,
      "recv" : -1,
      "results" : 36,
      "type" : "Signature",
      "underlying" : 112,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 12
      }, {
        "name" : "",
        "type" : 7
      } ],
      "name" : "(interface{}, uintptr)",
      "type" : "Tuple",
      "underlying" : 113
    }, {
      "elem" : 115,
      "name" : "*runtime.gcWork",
      "type" : "Pointer",
      "underlying" : 114
    }, {
      "local-name" : "gcWork",
      "name" : "runtime.gcWork",
      "package" : 0,
      "type" : "Named",
      "underlying" : 116
    }, {
      "fields" : [ {
        "name" : "wbuf1",
        "type" : 117
      }, {
        "name" : "wbuf2",
        "type" : 117
      }, {
        "name" : "bytesMarked",
        "type" : 28
      }, {
        "name" : "scanWork",
        "type" : 38
      }, {
        "name" : "flushedWork",
        "type" : 13
      }, {
        "name" : "pauseGen",
        "type" : 29
      }, {
        "name" : "putGen",
        "type" : 29
      }, {
        "name" : "pauseStack",
        "type" : 125
      } ],
      "name" : "struct{wbuf1 *runtime.workbuf; wbuf2 *runtime.workbuf; bytesMarked uint64; scanWork int64; flushedWork bool; pauseGen uint32; putGen uint32; pauseStack [16]uintptr}",
      "type" : "Struct",
      "underlying" : 116
    }, {
      "elem" : 118,
      "name" : "*runtime.workbuf",
      "type" : "Pointer",
      "underlying" : 117
    }, {
      "local-name" : "workbuf",
      "name" : "runtime.workbuf",
      "package" : 0,
      "type" : "Named",
      "underlying" : 119
    }, {
      "fields" : [ {
        "name" : "workbufhdr",
        "type" : 120
      }, {
        "name" : "obj",
        "type" : 124
      } ],
      "name" : "struct{runtime.workbufhdr; obj [253]uintptr}",
      "type" : "Struct",
      "underlying" : 119
    }, {
      "local-name" : "workbufhdr",
      "name" : "runtime.workbufhdr",
      "package" : 0,
      "type" : "Named",
      "underlying" : 121
    }, {
      "fields" : [ {
        "name" : "node",
        "type" : 122
      }, {
        "name" : "nobj",
        "type" : 78
      } ],
      "name" : "struct{node runtime.lfnode; nobj int}",
      "type" : "Struct",
      "underlying" : 121
    }, {
      "local-name" : "lfnode",
      "name" : "runtime.lfnode",
      "package" : 0,
      "type" : "Named",
      "underlying" : 123
    }, {
      "fields" : [ {
        "name" : "next",
        "type" : 28
      }, {
        "name" : "pushcnt",
        "type" : 7
      } ],
      "name" : "struct{next uint64; pushcnt uintptr}",
      "type" : "Struct",
      "underlying" : 123
    }, {
      "elem" : 7,
      "name" : "[253]uintptr",
      "type" : "Array",
      "underlying" : 124
    }, {
      "elem" : 7,
      "name" : "[16]uintptr",
      "type" : "Array",
      "underlying" : 125
    }, {
      "elem" : 127,
      "name" : "*runtime.stkframe",
      "type" : "Pointer",
      "underlying" : 126
    }, {
      "local-name" : "stkframe",
      "name" : "runtime.stkframe",
      "package" : 0,
      "type" : "Named",
      "underlying" : 128
    }, {
      "fields" : [ {
        "name" : "fn",
        "type" : 129
      }, {
        "name" : "pc",
        "type" : 7
      }, {
        "name" : "continpc",
        "type" : 7
      }, {
        "name" : "lr",
        "type" : 7
      }, {
        "name" : "sp",
        "type" : 7
      }, {
        "name" : "fp",
        "type" : 7
      }, {
        "name" : "varp",
        "type" : 7
      }, {
        "name" : "argp",
        "type" : 7
      }, {
        "name" : "arglen",
        "type" : 7
      }, {
        "name" : "argmap",
        "type" : 172
      } ],
      "name" : "struct{fn runtime.funcInfo; pc uintptr; continpc uintptr; lr uintptr; sp uintptr; fp uintptr; varp uintptr; argp uintptr; arglen uintptr; argmap *runtime.bitvector}",
      "type" : "Struct",
      "underlying" : 128
    }, {
      "local-name" : "funcInfo",
      "name" : "runtime.funcInfo",
      "package" : 0,
      "type" : "Named",
      "underlying" : 130
    }, {
      "fields" : [ {
        "name" : "_func",
        "type" : 131
      }, {
        "name" : "datap",
        "type" : 136
      } ],
      "name" : "struct{*runtime._func; datap *runtime.moduledata}",
      "type" : "Struct",
      "underlying" : 130
    }, {
      "elem" : 132,
      "name" : "*runtime._func",
      "type" : "Pointer",
      "underlying" : 131
    }, {
      "local-name" : "_func",
      "name" : "runtime._func",
      "package" : 0,
      "type" : "Named",
      "underlying" : 133
    }, {
      "fields" : [ {
        "name" : "entry",
        "type" : 7
      }, {
        "name" : "nameoff",
        "type" : 17
      }, {
        "name" : "args",
        "type" : 17
      }, {
        "name" : "deferreturn",
        "type" : 29
      }, {
        "name" : "pcsp",
        "type" : 17
      }, {
        "name" : "pcfile",
        "type" : 17
      }, {
        "name" : "pcln",
        "type" : 17
      }, {
        "name" : "npcdata",
        "type" : 17
      }, {
        "name" : "funcID",
        "type" : 134
      }, {
        "name" : "_",
        "type" : 135
      }, {
        "name" : "nfuncdata",
        "type" : 41
      } ],
      "name" : "struct{entry uintptr; nameoff int32; args int32; deferreturn uint32; pcsp int32; pcfile int32; pcln int32; npcdata int32; funcID runtime.funcID; _ [2]int8; nfuncdata uint8}",
      "type" : "Struct",
      "underlying" : 133
    }, {
      "local-name" : "funcID",
      "name" : "runtime.funcID",
      "package" : 0,
      "type" : "Named",
      "underlying" : 41
    }, {
      "elem" : 40,
      "name" : "[2]int8",
      "type" : "Array",
      "underlying" : 135
    }, {
      "elem" : 137,
      "name" : "*runtime.moduledata",
      "type" : "Pointer",
      "underlying" : 136
    }, {
      "local-name" : "moduledata",
      "name" : "runtime.moduledata",
      "package" : 0,
      "type" : "Named",
      "underlying" : 138
    }, {
      "fields" : [ {
        "name" : "pclntable",
        "type" : 85
      }, {
        "name" : "ftab",
        "type" : 139
      }, {
        "name" : "filetab",
        "type" : 142
      }, {
        "name" : "findfunctab",
        "type" : 7
      }, {
        "name" : "minpc",
        "type" : 7
      }, {
        "name" : "maxpc",
        "type" : 7
      }, {
        "name" : "text",
        "type" : 7
      }, {
        "name" : "etext",
        "type" : 7
      }, {
        "name" : "noptrdata",
        "type" : 7
      }, {
        "name" : "enoptrdata",
        "type" : 7
      }, {
        "name" : "data",
        "type" : 7
      }, {
        "name" : "edata",
        "type" : 7
      }, {
        "name" : "bss",
        "type" : 7
      }, {
        "name" : "ebss",
        "type" : 7
      }, {
        "name" : "noptrbss",
        "type" : 7
      }, {
        "name" : "enoptrbss",
        "type" : 7
      }, {
        "name" : "end",
        "type" : 7
      }, {
        "name" : "gcdata",
        "type" : 7
      }, {
        "name" : "gcbss",
        "type" : 7
      }, {
        "name" : "types",
        "type" : 7
      }, {
        "name" : "etypes",
        "type" : 7
      }, {
        "name" : "textsectmap",
        "type" : 143
      }, {
        "name" : "typelinks",
        "type" : 146
      }, {
        "name" : "itablinks",
        "type" : 147
      }, {
        "name" : "ptab",
        "type" : 161
      }, {
        "name" : "pluginpath",
        "type" : 39
      }, {
        "name" : "pkghashes",
        "type" : 164
      }, {
        "name" : "modulename",
        "type" : 39
      }, {
        "name" : "modulehashes",
        "type" : 164
      }, {
        "name" : "hasmain",
        "type" : 41
      }, {
        "name" : "gcdatamask",
        "type" : 168
      }, {
        "name" : "gcbssmask",
        "type" : 168
      }, {
        "name" : "typemap",
        "type" : 171
      }, {
        "name" : "bad",
        "type" : 13
      }, {
        "name" : "next",
        "type" : 136
      } ],
      "name" : "struct{pclntable []byte; ftab []runtime.functab; filetab []uint32; findfunctab uintptr; minpc uintptr; maxpc uintptr; text uintptr; etext uintptr; noptrdata uintptr; enoptrdata uintptr; data uintptr; edata uintptr; bss uintptr; ebss uintptr; noptrbss uintptr; enoptrbss uintptr; end uintptr; gcdata uintptr; gcbss uintptr; types uintptr; etypes uintptr; textsectmap []runtime.textsect; typelinks []int32; itablinks []*runtime.itab; ptab []runtime.ptabEntry; pluginpath string; pkghashes []runtime.modulehash; modulename string; modulehashes []runtime.modulehash; hasmain uint8; gcdatamask runtime.bitvector; gcbssmask runtime.bitvector; typemap map[runtime.typeOff]*runtime._type; bad bool; next *runtime.moduledata}",
      "type" : "Struct",
      "underlying" : 138
    }, {
      "elem" : 140,
      "name" : "[]runtime.functab",
      "type" : "Slice",
      "underlying" : 139
    }, {
      "local-name" : "functab",
      "name" : "runtime.functab",
      "package" : 0,
      "type" : "Named",
      "underlying" : 141
    }, {
      "fields" : [ {
        "name" : "entry",
        "type" : 7
      }, {
        "name" : "funcoff",
        "type" : 7
      } ],
      "name" : "struct{entry uintptr; funcoff uintptr}",
      "type" : "Struct",
      "underlying" : 141
    }, {
      "elem" : 29,
      "name" : "[]uint32",
      "type" : "Slice",
      "underlying" : 142
    }, {
      "elem" : 144,
      "name" : "[]runtime.textsect",
      "type" : "Slice",
      "underlying" : 143
    }, {
      "local-name" : "textsect",
      "name" : "runtime.textsect",
      "package" : 0,
      "type" : "Named",
      "underlying" : 145
    }, {
      "fields" : [ {
        "name" : "vaddr",
        "type" : 7
      }, {
        "name" : "length",
        "type" : 7
      }, {
        "name" : "baseaddr",
        "type" : 7
      } ],
      "name" : "struct{vaddr uintptr; length uintptr; baseaddr uintptr}",
      "type" : "Struct",
      "underlying" : 145
    }, {
      "elem" : 17,
      "name" : "[]int32",
      "type" : "Slice",
      "underlying" : 146
    }, {
      "elem" : 148,
      "name" : "[]*runtime.itab",
      "type" : "Slice",
      "underlying" : 147
    }, {
      "elem" : 149,
      "name" : "*runtime.itab",
      "type" : "Pointer",
      "underlying" : 148
    }, {
      "local-name" : "itab",
      "name" : "runtime.itab",
      "package" : 0,
      "type" : "Named",
      "underlying" : 150
    }, {
      "fields" : [ {
        "name" : "inter",
        "type" : 151
      }, {
        "name" : "_type",
        "type" : 98
      }, {
        "name" : "hash",
        "type" : 29
      }, {
        "name" : "_",
        "type" : 159
      }, {
        "name" : "fun",
        "type" : 160
      } ],
      "name" : "struct{inter *runtime.interfacetype; _type *runtime._type; hash uint32; _ [4]byte; fun [1]uintptr}",
      "type" : "Struct",
      "underlying" : 150
    }, {
      "elem" : 152,
      "name" : "*runtime.interfacetype",
      "type" : "Pointer",
      "underlying" : 151
    }, {
      "local-name" : "interfacetype",
      "name" : "runtime.interfacetype",
      "package" : 0,
      "type" : "Named",
      "underlying" : 153
    }, {
      "fields" : [ {
        "name" : "typ",
        "type" : 99
      }, {
        "name" : "pkgpath",
        "type" : 154
      }, {
        "name" : "mhdr",
        "type" : 156
      } ],
      "name" : "struct{typ runtime._type; pkgpath runtime.name; mhdr []runtime.imethod}",
      "type" : "Struct",
      "underlying" : 153
    }, {
      "local-name" : "name",
      "name" : "runtime.name",
      "package" : 0,
      "type" : "Named",
      "underlying" : 155
    }, {
      "fields" : [ {
        "name" : "bytes",
        "type" : 104
      } ],
      "name" : "struct{bytes *byte}",
      "type" : "Struct",
      "underlying" : 155
    }, {
      "elem" : 157,
      "name" : "[]runtime.imethod",
      "type" : "Slice",
      "underlying" : 156
    }, {
      "local-name" : "imethod",
      "name" : "runtime.imethod",
      "package" : 0,
      "type" : "Named",
      "underlying" : 158
    }, {
      "fields" : [ {
        "name" : "name",
        "type" : 105
      }, {
        "name" : "ityp",
        "type" : 106
      } ],
      "name" : "struct{name runtime.nameOff; ityp runtime.typeOff}",
      "type" : "Struct",
      "underlying" : 158
    }, {
      "elem" : 70,
      "name" : "[4]byte",
      "type" : "Array",
      "underlying" : 159
    }, {
      "elem" : 7,
      "name" : "[1]uintptr",
      "type" : "Array",
      "underlying" : 160
    }, {
      "elem" : 162,
      "name" : "[]runtime.ptabEntry",
      "type" : "Slice",
      "underlying" : 161
    }, {
      "local-name" : "ptabEntry",
      "name" : "runtime.ptabEntry",
      "package" : 0,
      "type" : "Named",
      "underlying" : 163
    }, {
      "fields" : [ {
        "name" : "name",
        "type" : 105
      }, {
        "name" : "typ",
        "type" : 106
      } ],
      "name" : "struct{name runtime.nameOff; typ runtime.typeOff}",
      "type" : "Struct",
      "underlying" : 163
    }, {
      "elem" : 165,
      "name" : "[]runtime.modulehash",
      "type" : "Slice",
      "underlying" : 164
    }, {
      "local-name" : "modulehash",
      "name" : "runtime.modulehash",
      "package" : 0,
      "type" : "Named",
      "underlying" : 166
    }, {
      "fields" : [ {
        "name" : "modulename",
        "type" : 39
      }, {
        "name" : "linktimehash",
        "type" : 39
      }, {
        "name" : "runtimehash",
        "type" : 167
      } ],
      "name" : "struct{modulename string; linktimehash string; runtimehash *string}",
      "type" : "Struct",
      "underlying" : 166
    }, {
      "elem" : 39,
      "name" : "*string",
      "type" : "Pointer",
      "underlying" : 167
    }, {
      "local-name" : "bitvector",
      "name" : "runtime.bitvector",
      "package" : 0,
      "type" : "Named",
      "underlying" : 169
    }, {
      "fields" : [ {
        "name" : "n",
        "type" : 17
      }, {
        "name" : "bytedata",
        "type" : 170
      } ],
      "name" : "struct{n int32; bytedata *uint8}",
      "type" : "Struct",
      "underlying" : 169
    }, {
      "elem" : 41,
      "name" : "*uint8",
      "type" : "Pointer",
      "underlying" : 170
    }, {
      "elem" : 98,
      "key" : 106,
      "name" : "map[runtime.typeOff]*runtime._type",
      "type" : "Map",
      "underlying" : 171
    }, {
      "elem" : 168,
      "name" : "*runtime.bitvector",
      "type" : "Pointer",
      "underlying" : 172
    }, {
      "elem" : 41,
      "name" : "[1]uint8",
      "type" : "Array",
      "underlying" : 173
    }, {
      "name" : "untyped bool",
      "type" : "Basic",
      "underlying" : 174
    }, {
      "name" : "func(gp *runtime.g) uint32",
      "params" : 176,
      "recv" : -1,
      "results" : 177,
      "type" : "Signature",
      "underlying" : 175,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "gp",
        "type" : 2
      } ],
      "name" : "(gp *runtime.g)",
      "type" : "Tuple",
      "underlying" : 176
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 29
      } ],
      "name" : "(uint32)",
      "type" : "Tuple",
      "underlying" : 177
    }, {
      "name" : "func(string, *runtime.g, string, int64, string, runtime.hex, string)",
      "params" : 179,
      "recv" : -1,
      "results" : 36,
      "type" : "Signature",
      "underlying" : 178,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 39
      }, {
        "name" : "",
        "type" : 2
      }, {
        "name" : "",
        "type" : 39
      }, {
        "name" : "",
        "type" : 38
      }, {
        "name" : "",
        "type" : 39
      }, {
        "name" : "",
        "type" : 180
      }, {
        "name" : "",
        "type" : 39
      } ],
      "name" : "(string, *runtime.g, string, int64, string, runtime.hex, string)",
      "type" : "Tuple",
      "underlying" : 179
    }, {
      "local-name" : "hex",
      "name" : "runtime.hex",
      "package" : 0,
      "type" : "Named",
      "underlying" : 28
    }, {
      "name" : "func(s string)",
      "params" : 182,
      "recv" : -1,
      "results" : 36,
      "type" : "Signature",
      "underlying" : 181,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "s",
        "type" : 39
      } ],
      "name" : "(s string)",
      "type" : "Tuple",
      "underlying" : 182
    }, {
      "name" : "func(string, *runtime.g, string, int64, string, uint32, string)",
      "params" : 184,
      "recv" : -1,
      "results" : 36,
      "type" : "Signature",
      "underlying" : 183,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 39
      }, {
        "name" : "",
        "type" : 2
      }, {
        "name" : "",
        "type" : 39
      }, {
        "name" : "",
        "type" : 38
      }, {
        "name" : "",
        "type" : 39
      }, {
        "name" : "",
        "type" : 29
      }, {
        "name" : "",
        "type" : 39
      } ],
      "name" : "(string, *runtime.g, string, int64, string, uint32, string)",
      "type" : "Tuple",
      "underlying" : 184
    }, {
      "name" : "func() *runtime.g",
      "params" : 36,
      "recv" : -1,
      "results" : 186,
      "type" : "Signature",
      "underlying" : 185,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 2
      } ],
      "name" : "(*runtime.g)",
      "type" : "Tuple",
      "underlying" : 186
    }, {
      "name" : "func(gp *runtime.g) bool",
      "params" : 176,
      "recv" : -1,
      "results" : 77,
      "type" : "Signature",
      "underlying" : 187,
      "variadic" : false
    }, {
      "name" : "func(gp *runtime.g)",
      "params" : 176,
      "recv" : -1,
      "results" : 36,
      "type" : "Signature",
      "underlying" : 188,
      "variadic" : false
    }, {
      "local-name" : "stackScanState",
      "name" : "runtime.stackScanState",
      "package" : 0,
      "type" : "Named",
      "underlying" : 190
    }, {
      "fields" : [ {
        "name" : "cache",
        "type" : 191
      }, {
        "name" : "stack",
        "type" : 5
      }, {
        "name" : "conservative",
        "type" : 13
      }, {
        "name" : "buf",
        "type" : 197
      }, {
        "name" : "freeBuf",
        "type" : 197
      }, {
        "name" : "cbuf",
        "type" : 197
      }, {
        "name" : "head",
        "type" : 203
      }, {
        "name" : "tail",
        "type" : 203
      }, {
        "name" : "nobjs",
        "type" : 78
      }, {
        "name" : "root",
        "type" : 211
      } ],
      "name" : "struct{cache runtime.pcvalueCache; stack runtime.stack; conservative bool; buf *runtime.stackWorkBuf; freeBuf *runtime.stackWorkBuf; cbuf *runtime.stackWorkBuf; head *runtime.stackObjectBuf; tail *runtime.stackObjectBuf; nobjs int; root *runtime.stackObject}",
      "type" : "Struct",
      "underlying" : 190
    }, {
      "local-name" : "pcvalueCache",
      "name" : "runtime.pcvalueCache",
      "package" : 0,
      "type" : "Named",
      "underlying" : 192
    }, {
      "fields" : [ {
        "name" : "entries",
        "type" : 193
      } ],
      "name" : "struct{entries [2][8]runtime.pcvalueCacheEnt}",
      "type" : "Struct",
      "underlying" : 192
    }, {
      "elem" : 194,
      "name" : "[2][8]runtime.pcvalueCacheEnt",
      "type" : "Array",
      "underlying" : 193
    }, {
      "elem" : 195,
      "name" : "[8]runtime.pcvalueCacheEnt",
      "type" : "Array",
      "underlying" : 194
    }, {
      "local-name" : "pcvalueCacheEnt",
      "name" : "runtime.pcvalueCacheEnt",
      "package" : 0,
      "type" : "Named",
      "underlying" : 196
    }, {
      "fields" : [ {
        "name" : "targetpc",
        "type" : 7
      }, {
        "name" : "off",
        "type" : 17
      }, {
        "name" : "val",
        "type" : 17
      } ],
      "name" : "struct{targetpc uintptr; off int32; val int32}",
      "type" : "Struct",
      "underlying" : 196
    }, {
      "elem" : 198,
      "name" : "*runtime.stackWorkBuf",
      "type" : "Pointer",
      "underlying" : 197
    }, {
      "local-name" : "stackWorkBuf",
      "name" : "runtime.stackWorkBuf",
      "package" : 0,
      "type" : "Named",
      "underlying" : 199
    }, {
      "fields" : [ {
        "name" : "stackWorkBufHdr",
        "type" : 200
      }, {
        "name" : "obj",
        "type" : 202
      } ],
      "name" : "struct{runtime.stackWorkBufHdr; obj [252]uintptr}",
      "type" : "Struct",
      "underlying" : 199
    }, {
      "local-name" : "stackWorkBufHdr",
      "name" : "runtime.stackWorkBufHdr",
      "package" : 0,
      "type" : "Named",
      "underlying" : 201
    }, {
      "fields" : [ {
        "name" : "workbufhdr",
        "type" : 120
      }, {
        "name" : "next",
        "type" : 197
      } ],
      "name" : "struct{runtime.workbufhdr; next *runtime.stackWorkBuf}",
      "type" : "Struct",
      "underlying" : 201
    }, {
      "elem" : 7,
      "name" : "[252]uintptr",
      "type" : "Array",
      "underlying" : 202
    }, {
      "elem" : 204,
      "name" : "*runtime.stackObjectBuf",
      "type" : "Pointer",
      "underlying" : 203
    }, {
      "local-name" : "stackObjectBuf",
      "name" : "runtime.stackObjectBuf",
      "package" : 0,
      "type" : "Named",
      "underlying" : 205
    }, {
      "fields" : [ {
        "name" : "stackObjectBufHdr",
        "type" : 206
      }, {
        "name" : "obj",
        "type" : 208
      } ],
      "name" : "struct{runtime.stackObjectBufHdr; obj [63]runtime.stackObject}",
      "type" : "Struct",
      "underlying" : 205
    }, {
      "local-name" : "stackObjectBufHdr",
      "name" : "runtime.stackObjectBufHdr",
      "package" : 0,
      "type" : "Named",
      "underlying" : 207
    }, {
      "fields" : [ {
        "name" : "workbufhdr",
        "type" : 120
      }, {
        "name" : "next",
        "type" : 203
      } ],
      "name" : "struct{runtime.workbufhdr; next *runtime.stackObjectBuf}",
      "type" : "Struct",
      "underlying" : 207
    }, {
      "elem" : 209,
      "name" : "[63]runtime.stackObject",
      "type" : "Array",
      "underlying" : 208
    }, {
      "local-name" : "stackObject",
      "name" : "runtime.stackObject",
      "package" : 0,
      "type" : "Named",
      "underlying" : 210
    }, {
      "fields" : [ {
        "name" : "off",
        "type" : 29
      }, {
        "name" : "size",
        "type" : 29
      }, {
        "name" : "typ",
        "type" : 98
      }, {
        "name" : "left",
        "type" : 211
      }, {
        "name" : "right",
        "type" : 211
      } ],
      "name" : "struct{off uint32; size uint32; typ *runtime._type; left *runtime.stackObject; right *runtime.stackObject}",
      "type" : "Struct",
      "underlying" : 210
    }, {
      "elem" : 209,
      "name" : "*runtime.stackObject",
      "type" : "Pointer",
      "underlying" : 211
    }, {
      "name" : "func(string, int64)",
      "params" : 213,
      "recv" : -1,
      "results" : 36,
      "type" : "Signature",
      "underlying" : 212,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 39
      }, {
        "name" : "",
        "type" : 38
      } ],
      "name" : "(string, int64)",
      "type" : "Tuple",
      "underlying" : 213
    }, {
      "name" : "func(string, int64, string, runtime.hex, string, runtime.hex, string)",
      "params" : 215,
      "recv" : -1,
      "results" : 36,
      "type" : "Signature",
      "underlying" : 214,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 39
      }, {
        "name" : "",
        "type" : 38
      }, {
        "name" : "",
        "type" : 39
      }, {
        "name" : "",
        "type" : 180
      }, {
        "name" : "",
        "type" : 39
      }, {
        "name" : "",
        "type" : 180
      }, {
        "name" : "",
        "type" : 39
      } ],
      "name" : "(string, int64, string, runtime.hex, string, runtime.hex, string)",
      "type" : "Tuple",
      "underlying" : 215
    }, {
      "name" : "func(b0 uintptr, n0 uintptr, ptrmask *uint8, gcw *runtime.gcWork, stk *runtime.stackScanState)",
      "params" : 217,
      "recv" : -1,
      "results" : 36,
      "type" : "Signature",
      "underlying" : 216,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "b0",
        "type" : 7
      }, {
        "name" : "n0",
        "type" : 7
      }, {
        "name" : "ptrmask",
        "type" : 170
      }, {
        "name" : "gcw",
        "type" : 114
      }, {
        "name" : "stk",
        "type" : 218
      } ],
      "name" : "(b0 uintptr, n0 uintptr, ptrmask *uint8, gcw *runtime.gcWork, stk *runtime.stackScanState)",
      "type" : "Tuple",
      "underlying" : 217
    }, {
      "elem" : 189,
      "name" : "*runtime.stackScanState",
      "type" : "Pointer",
      "underlying" : 218
    }, {
      "elem" : 11,
      "name" : "*unsafe.Pointer",
      "type" : "Pointer",
      "underlying" : 219
    }, {
      "name" : "func(frame *runtime.stkframe, unused unsafe.Pointer) bool",
      "params" : 221,
      "recv" : -1,
      "results" : 77,
      "type" : "Signature",
      "underlying" : 220,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "frame",
        "type" : 126
      }, {
        "name" : "unused",
        "type" : 11
      } ],
      "name" : "(frame *runtime.stkframe, unused unsafe.Pointer)",
      "type" : "Tuple",
      "underlying" : 221
    }, {
      "name" : "func(frame *runtime.stkframe, state *runtime.stackScanState, gcw *runtime.gcWork)",
      "params" : 223,
      "recv" : -1,
      "results" : 36,
      "type" : "Signature",
      "underlying" : 222,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "frame",
        "type" : 126
      }, {
        "name" : "state",
        "type" : 218
      }, {
        "name" : "gcw",
        "type" : 114
      } ],
      "name" : "(frame *runtime.stkframe, state *runtime.stackScanState, gcw *runtime.gcWork)",
      "type" : "Tuple",
      "underlying" : 223
    }, {
      "name" : "func(pc0 uintptr, sp0 uintptr, lr0 uintptr, gp *runtime.g, skip int, pcbuf *uintptr, max int, callback func(*runtime.stkframe, unsafe.Pointer) bool, v unsafe.Pointer, flags uint) int",
      "params" : 225,
      "recv" : -1,
      "results" : 229,
      "type" : "Signature",
      "underlying" : 224,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "pc0",
        "type" : 7
      }, {
        "name" : "sp0",
        "type" : 7
      }, {
        "name" : "lr0",
        "type" : 7
      }, {
        "name" : "gp",
        "type" : 2
      }, {
        "name" : "skip",
        "type" : 78
      }, {
        "name" : "pcbuf",
        "type" : 226
      }, {
        "name" : "max",
        "type" : 78
      }, {
        "name" : "callback",
        "type" : 227
      }, {
        "name" : "v",
        "type" : 11
      }, {
        "name" : "flags",
        "type" : 97
      } ],
      "name" : "(pc0 uintptr, sp0 uintptr, lr0 uintptr, gp *runtime.g, skip int, pcbuf *uintptr, max int, callback func(*runtime.stkframe, unsafe.Pointer) bool, v unsafe.Pointer, flags uint)",
      "type" : "Tuple",
      "underlying" : 225
    }, {
      "elem" : 7,
      "name" : "*uintptr",
      "type" : "Pointer",
      "underlying" : 226
    }, {
      "name" : "func(*runtime.stkframe, unsafe.Pointer) bool",
      "params" : 228,
      "recv" : -1,
      "results" : 77,
      "type" : "Signature",
      "underlying" : 227,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 126
      }, {
        "name" : "",
        "type" : 11
      } ],
      "name" : "(*runtime.stkframe, unsafe.Pointer)",
      "type" : "Tuple",
      "underlying" : 228
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 78
      } ],
      "name" : "(int)",
      "type" : "Tuple",
      "underlying" : 229
    }, {
      "name" : "untyped nil",
      "type" : "Basic",
      "underlying" : 230
    }, {
      "name" : "func(gp *runtime.g, callback func(*runtime.stkframe, unsafe.Pointer) bool, v unsafe.Pointer)",
      "params" : 232,
      "recv" : -1,
      "results" : 36,
      "type" : "Signature",
      "underlying" : 231,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "gp",
        "type" : 2
      }, {
        "name" : "callback",
        "type" : 227
      }, {
        "name" : "v",
        "type" : 11
      } ],
      "name" : "(gp *runtime.g, callback func(*runtime.stkframe, unsafe.Pointer) bool, v unsafe.Pointer)",
      "type" : "Tuple",
      "underlying" : 232
    }, {
      "elem" : 18,
      "name" : "**runtime.funcval",
      "type" : "Pointer",
      "underlying" : 233
    }, {
      "elem" : 14,
      "name" : "**runtime._defer",
      "type" : "Pointer",
      "underlying" : 234
    }, {
      "name" : "func(p uintptr, conservative bool)",
      "params" : 236,
      "recv" : -1,
      "results" : 36,
      "type" : "Signature",
      "underlying" : 235,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "p",
        "type" : 7
      }, {
        "name" : "conservative",
        "type" : 13
      } ],
      "name" : "(p uintptr, conservative bool)",
      "type" : "Tuple",
      "underlying" : 236
    }, {
      "name" : "func() (p uintptr, conservative bool)",
      "params" : 36,
      "recv" : -1,
      "results" : 236,
      "type" : "Signature",
      "underlying" : 237,
      "variadic" : false
    }, {
      "name" : "func(a uintptr) *runtime.stackObject",
      "params" : 239,
      "recv" : -1,
      "results" : 240,
      "type" : "Signature",
      "underlying" : 238,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "a",
        "type" : 7
      } ],
      "name" : "(a uintptr)",
      "type" : "Tuple",
      "underlying" : 239
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 211
      } ],
      "name" : "(*runtime.stackObject)",
      "type" : "Tuple",
      "underlying" : 240
    }, {
      "name" : "func(typ *runtime._type)",
      "params" : 242,
      "recv" : -1,
      "results" : 36,
      "type" : "Signature",
      "underlying" : 241,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "typ",
        "type" : 98
      } ],
      "name" : "(typ *runtime._type)",
      "type" : "Tuple",
      "underlying" : 242
    }, {
      "name" : "func(string, runtime.hex, string, string)",
      "params" : 244,
      "recv" : -1,
      "results" : 36,
      "type" : "Signature",
      "underlying" : 243,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 39
      }, {
        "name" : "",
        "type" : 180
      }, {
        "name" : "",
        "type" : 39
      }, {
        "name" : "",
        "type" : 39
      } ],
      "name" : "(string, runtime.hex, string, string)",
      "type" : "Tuple",
      "underlying" : 244
    }, {
      "name" : "func() string",
      "params" : 36,
      "recv" : -1,
      "results" : 246,
      "type" : "Signature",
      "underlying" : 245,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 39
      } ],
      "name" : "(string)",
      "type" : "Tuple",
      "underlying" : 246
    }, {
      "name" : "func(string)",
      "params" : 246,
      "recv" : -1,
      "results" : 36,
      "type" : "Signature",
      "underlying" : 247,
      "variadic" : false
    }, {
      "name" : "func(ptrdata uintptr, prog *byte) *runtime.mspan",
      "params" : 249,
      "recv" : -1,
      "results" : 250,
      "type" : "Signature",
      "underlying" : 248,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "ptrdata",
        "type" : 7
      }, {
        "name" : "prog",
        "type" : 104
      } ],
      "name" : "(ptrdata uintptr, prog *byte)",
      "type" : "Tuple",
      "underlying" : 249
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 52
      } ],
      "name" : "(*runtime.mspan)",
      "type" : "Tuple",
      "underlying" : 250
    }, {
      "name" : "func(b uintptr, n uintptr, ptrmask *uint8, gcw *runtime.gcWork, state *runtime.stackScanState)",
      "params" : 252,
      "recv" : -1,
      "results" : 36,
      "type" : "Signature",
      "underlying" : 251,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "b",
        "type" : 7
      }, {
        "name" : "n",
        "type" : 7
      }, {
        "name" : "ptrmask",
        "type" : 170
      }, {
        "name" : "gcw",
        "type" : 114
      }, {
        "name" : "state",
        "type" : 218
      } ],
      "name" : "(b uintptr, n uintptr, ptrmask *uint8, gcw *runtime.gcWork, state *runtime.stackScanState)",
      "type" : "Tuple",
      "underlying" : 252
    }, {
      "name" : "func(s *runtime.mspan)",
      "params" : 254,
      "recv" : -1,
      "results" : 36,
      "type" : "Signature",
      "underlying" : 253,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "s",
        "type" : 52
      } ],
      "name" : "(s *runtime.mspan)",
      "type" : "Tuple",
      "underlying" : 254
    }, {
      "elem" : 209,
      "name" : "[]runtime.stackObject",
      "type" : "Slice",
      "underlying" : 255
    }, {
      "name" : "func(b *runtime.workbuf)",
      "params" : 257,
      "recv" : -1,
      "results" : 36,
      "type" : "Signature",
      "underlying" : 256,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "b",
        "type" : 117
      } ],
      "name" : "(b *runtime.workbuf)",
      "type" : "Tuple",
      "underlying" : 257
    } ],
    "variables" : [ {
      "name" : "gp",
      "package" : 0,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "gcw",
      "package" : 0,
      "type" : 114,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "frame",
      "package" : 0,
      "type" : 126,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "unused",
      "package" : 0,
      "type" : 11,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "oneptrmask",
      "package" : 0,
      "type" : 173,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "goid",
      "package" : 0,
      "type" : 38,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "preemptShrink",
      "package" : 0,
      "type" : 13,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "state",
      "package" : 0,
      "type" : 189,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "stack",
      "package" : 0,
      "type" : 5,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "stack",
      "package" : 0,
      "type" : 5,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "asyncSafePoint",
      "package" : 0,
      "type" : 13,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "lo",
      "package" : 0,
      "type" : 7,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "hi",
      "package" : 0,
      "type" : 7,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "sched",
      "package" : 0,
      "type" : 24,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "ctxt",
      "package" : 0,
      "type" : 11,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "scanframe",
      "package" : 0,
      "type" : 220,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "_defer",
      "package" : 0,
      "type" : 14,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "d",
      "package" : 0,
      "type" : 14,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "link",
      "package" : 0,
      "type" : 14,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "fn",
      "package" : 0,
      "type" : 18,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "heap",
      "package" : 0,
      "type" : 13,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "_panic",
      "package" : 0,
      "type" : 8,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "p",
      "package" : 0,
      "type" : 7,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "obj",
      "package" : 0,
      "type" : 211,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "typ",
      "package" : 0,
      "type" : 98,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "t",
      "package" : 0,
      "type" : 98,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "off",
      "package" : 0,
      "type" : 29,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "conservative",
      "package" : 0,
      "type" : 13,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "gcdata",
      "package" : 0,
      "type" : 104,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "kind",
      "package" : 0,
      "type" : 41,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "s",
      "package" : 0,
      "type" : 52,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "ptrdata",
      "package" : 0,
      "type" : 7,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "gcdata",
      "package" : 0,
      "type" : 104,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "startAddr",
      "package" : 0,
      "type" : 7,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "b",
      "package" : 0,
      "type" : 7,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "head",
      "package" : 0,
      "type" : 203,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "x",
      "package" : 0,
      "type" : 203,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "next",
      "package" : 0,
      "type" : 203,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "obj",
      "package" : 0,
      "type" : 208,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "nobj",
      "package" : 0,
      "type" : 78,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "obj",
      "package" : 0,
      "type" : 209,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "_",
      "package" : 0,
      "type" : 78,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "buf",
      "package" : 0,
      "type" : 197,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "cbuf",
      "package" : 0,
      "type" : 197,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "freeBuf",
      "package" : 0,
      "type" : 197,
      "exported" : false,
      "embedded" : false,
      "field" : true
    } ]
  },
  "go-version" : "1.14.3"
}