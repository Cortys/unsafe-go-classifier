{
  "usage" : {
    "file" : "value.go",
    "label1" : "delegate",
    "label2" : "types",
    "line" : "1164",
    "module" : "std",
    "pkg" : "reflect",
    "project" : "kubernetes/kubernetes",
    "snippet" : "k = unsafe.Pointer(&key.ptr)",
    "version" : "std"
  },
  "cfg" : {
    "blocks" : [ {
      "update-vars" : [ ],
      "successors" : [ 2 ],
      "in-vars" : [ 1, 0 ],
      "exit" : false,
      "out-vars" : [ 0, 1 ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[entry]",
      "entry" : true,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ ],
      "in-vars" : [ ],
      "exit" : true,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[exit]",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 3 ],
      "in-vars" : [ 1, 0 ],
      "exit" : false,
      "out-vars" : [ 1, 0 ],
      "decl-vars" : [ ],
      "line-start" : 1148,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 26,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "21"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "function" : 1,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "mustBe"
            },
            "go-type" : 24,
            "kind" : "expression",
            "target" : {
              "go-type" : 2,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "v",
                "variable" : 0
              }
            },
            "type" : "selector"
          },
          "go-type" : 23,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 1148,
      "code" : "v.mustBe(Map)",
      "entry" : false,
      "use-vars" : [ 0 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 4 ],
      "in-vars" : [ 1, 0 ],
      "exit" : false,
      "out-vars" : [ 0, 1, 5 ],
      "decl-vars" : [ 5 ],
      "line-start" : 1149,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "tt"
          }
        } ],
        "right" : [ {
          "coerced-to" : {
            "contained" : {
              "go-type" : 30,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 30,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "mapType"
              }
            },
            "go-type" : 29,
            "kind" : "type",
            "type" : "pointer"
          },
          "go-type" : 29,
          "kind" : "expression",
          "target" : {
            "coerced-to" : {
              "go-type" : 13,
              "kind" : "type",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 1,
                "value" : "unsafe"
              },
              "type" : "identifier",
              "value" : {
                "go-type" : 13,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "Pointer"
              }
            },
            "go-type" : 13,
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "typ",
                "variable" : 4
              },
              "go-type" : 4,
              "kind" : "expression",
              "target" : {
                "go-type" : 2,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "v",
                  "variable" : 0
                }
              },
              "type" : "selector"
            },
            "type" : "cast"
          },
          "type" : "cast"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 1149,
      "code" : "tt := (*mapType)(unsafe.Pointer(v.typ))",
      "entry" : false,
      "use-vars" : [ 0 ]
    }, {
      "update-vars" : [ 1 ],
      "successors" : [ 5 ],
      "in-vars" : [ 5, 0, 1 ],
      "exit" : false,
      "out-vars" : [ 1, 5, 0 ],
      "decl-vars" : [ ],
      "line-start" : 1158,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 2,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "key",
            "variable" : 1
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 38,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "reflect.Value.MapIndex"
            }
          }, {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "key",
              "variable" : 7
            },
            "go-type" : 4,
            "kind" : "expression",
            "target" : {
              "go-type" : 29,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "tt",
                "variable" : 5
              }
            },
            "type" : "selector"
          }, {
            "go-type" : 13,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Nil",
              "kind" : "ident",
              "value" : "nil"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "function" : 2,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "assignTo"
            },
            "go-type" : 36,
            "kind" : "expression",
            "target" : {
              "go-type" : 2,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "key",
                "variable" : 1
              }
            },
            "type" : "selector"
          },
          "go-type" : 2,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 1 ],
      "line-end" : 1158,
      "code" : "key = key.assignTo(\"reflect.Value.MapIndex\", tt.key, nil)",
      "entry" : false,
      "use-vars" : [ 5, 1 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 6 ],
      "in-vars" : [ 1, 5, 0 ],
      "exit" : false,
      "out-vars" : [ 1, 5, 0 ],
      "decl-vars" : [ 8 ],
      "line-start" : 1160,
      "ast" : {
        "kind" : "statement",
        "target" : {
          "kind" : "decl",
          "specs" : [ {
            "comments" : [ ],
            "declared-type" : {
              "go-type" : 13,
              "kind" : "type",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 1,
                "value" : "unsafe"
              },
              "type" : "identifier",
              "value" : {
                "go-type" : 13,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "Pointer"
              }
            },
            "kind" : "spec",
            "names" : [ {
              "ident-kind" : "NoKind",
              "kind" : "ident",
              "value" : "k"
            } ],
            "type" : "var",
            "values" : [ ]
          } ],
          "type" : "var"
        },
        "type" : "declaration"
      },
      "assign-vars" : [ ],
      "line-end" : 1160,
      "code" : "var k unsafe.Pointer",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 7, 8 ],
      "in-vars" : [ 0, 1, 5 ],
      "exit" : false,
      "out-vars" : [ 1, 5, 0 ],
      "decl-vars" : [ ],
      "line-start" : 1161,
      "ast" : {
        "condition" : {
          "go-type" : 40,
          "kind" : "expression",
          "left" : {
            "go-type" : 21,
            "kind" : "expression",
            "left" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "flag",
                "variable" : 9
              },
              "go-type" : 21,
              "kind" : "expression",
              "target" : {
                "go-type" : 2,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "key",
                  "variable" : 1
                }
              },
              "type" : "selector"
            },
            "operator" : "&",
            "right" : {
              "go-type" : 21,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "128"
              }
            },
            "type" : "binary"
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 21,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 1165,
      "code" : "if key.flag&flagIndir != 0 {\n\tk = key.ptr\n} else {\n\tk = unsafe.Pointer(&key.ptr)\n}",
      "entry" : false,
      "use-vars" : [ 1 ]
    }, {
      "update-vars" : [ 8 ],
      "successors" : [ 9 ],
      "in-vars" : [ 1, 5, 0 ],
      "exit" : false,
      "out-vars" : [ 1, 5, 8, 0 ],
      "decl-vars" : [ ],
      "line-start" : 1162,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 13,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "k",
            "variable" : 8
          }
        } ],
        "right" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "ptr",
            "variable" : 10
          },
          "go-type" : 13,
          "kind" : "expression",
          "target" : {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "key",
              "variable" : 1
            }
          },
          "type" : "selector"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 8 ],
      "line-end" : 1162,
      "code" : "k = key.ptr",
      "entry" : false,
      "use-vars" : [ 1 ]
    }, {
      "update-vars" : [ 8 ],
      "successors" : [ 9 ],
      "in-vars" : [ 1, 5, 0 ],
      "exit" : false,
      "out-vars" : [ 1, 5, 8, 0 ],
      "decl-vars" : [ ],
      "line-start" : 1164,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 13,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "k",
            "variable" : 8
          }
        } ],
        "right" : [ {
          "coerced-to" : {
            "go-type" : 13,
            "kind" : "type",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 1,
              "value" : "unsafe"
            },
            "type" : "identifier",
            "value" : {
              "go-type" : 13,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "Pointer"
            }
          },
          "go-type" : 13,
          "kind" : "expression",
          "target" : {
            "go-type" : 41,
            "kind" : "expression",
            "operator" : "&",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "ptr",
                "variable" : 10
              },
              "go-type" : 13,
              "kind" : "expression",
              "target" : {
                "go-type" : 2,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "key",
                  "variable" : 1
                }
              },
              "type" : "selector"
            },
            "type" : "unary"
          },
          "type" : "cast"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 8 ],
      "line-end" : 1164,
      "code" : "k = unsafe.Pointer(&key.ptr)",
      "entry" : false,
      "use-vars" : [ 1 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 10 ],
      "in-vars" : [ 1, 5, 8, 0 ],
      "exit" : false,
      "out-vars" : [ 0, 1, 5, 12 ],
      "decl-vars" : [ 12 ],
      "line-start" : 1166,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "e"
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "typ",
              "variable" : 4
            },
            "go-type" : 4,
            "kind" : "expression",
            "target" : {
              "go-type" : 2,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "v",
                "variable" : 0
              }
            },
            "type" : "selector"
          }, {
            "arguments" : [ ],
            "ellipsis" : false,
            "function" : {
              "field" : {
                "function" : 4,
                "ident-kind" : "Func",
                "kind" : "ident",
                "value" : "pointer"
              },
              "go-type" : 45,
              "kind" : "expression",
              "target" : {
                "go-type" : 2,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "v",
                  "variable" : 0
                }
              },
              "type" : "selector"
            },
            "go-type" : 13,
            "kind" : "expression",
            "type" : "call"
          }, {
            "go-type" : 13,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "k",
              "variable" : 8
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 42,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 3,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "mapaccess"
            }
          },
          "go-type" : 13,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 1166,
      "code" : "e := mapaccess(v.typ, v.pointer(), k)",
      "entry" : false,
      "use-vars" : [ 0, 8 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 11, 12 ],
      "in-vars" : [ 1, 5, 12, 0 ],
      "exit" : false,
      "out-vars" : [ 5, 12, 0, 1 ],
      "decl-vars" : [ ],
      "line-start" : 1167,
      "ast" : {
        "condition" : {
          "go-type" : 40,
          "kind" : "expression",
          "left" : {
            "go-type" : 13,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "e",
              "variable" : 12
            }
          },
          "operator" : "==",
          "right" : {
            "go-type" : 13,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Nil",
              "kind" : "ident",
              "value" : "nil"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 1169,
      "code" : "if e == nil {\n\treturn Value{}\n}",
      "entry" : false,
      "use-vars" : [ 12 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 1168,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "declared" : {
            "go-type" : 2,
            "kind" : "type",
            "type" : "identifier",
            "value" : {
              "go-type" : 2,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "Value"
            }
          },
          "go-type" : 2,
          "kind" : "literal",
          "type" : "composite",
          "values" : [ ]
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 1168,
      "code" : "return Value{}",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 13 ],
      "in-vars" : [ 5, 12, 0, 1 ],
      "exit" : false,
      "out-vars" : [ 1, 14, 12, 0 ],
      "decl-vars" : [ 14 ],
      "line-start" : 1170,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "typ"
          }
        } ],
        "right" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "elem",
            "variable" : 13
          },
          "go-type" : 4,
          "kind" : "expression",
          "target" : {
            "go-type" : 29,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "tt",
              "variable" : 5
            }
          },
          "type" : "selector"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 1170,
      "code" : "typ := tt.elem",
      "entry" : false,
      "use-vars" : [ 5 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 14 ],
      "in-vars" : [ 1, 14, 12, 0 ],
      "exit" : false,
      "out-vars" : [ 14, 16, 12 ],
      "decl-vars" : [ 16 ],
      "line-start" : 1171,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "fl"
          }
        } ],
        "right" : [ {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "function" : 5,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "ro"
            },
            "go-type" : 48,
            "kind" : "expression",
            "target" : {
              "go-type" : 21,
              "kind" : "expression",
              "target" : {
                "go-type" : 21,
                "kind" : "expression",
                "left" : {
                  "field" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "flag",
                    "variable" : 9
                  },
                  "go-type" : 21,
                  "kind" : "expression",
                  "target" : {
                    "go-type" : 2,
                    "kind" : "expression",
                    "type" : "identifier",
                    "value" : {
                      "ident-kind" : "Var",
                      "kind" : "ident",
                      "value" : "v",
                      "variable" : 0
                    }
                  },
                  "type" : "selector"
                },
                "operator" : "|",
                "right" : {
                  "field" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "flag",
                    "variable" : 9
                  },
                  "go-type" : 21,
                  "kind" : "expression",
                  "target" : {
                    "go-type" : 2,
                    "kind" : "expression",
                    "type" : "identifier",
                    "value" : {
                      "ident-kind" : "Var",
                      "kind" : "ident",
                      "value" : "key",
                      "variable" : 1
                    }
                  },
                  "type" : "selector"
                },
                "type" : "binary"
              },
              "type" : "paren"
            },
            "type" : "selector"
          },
          "go-type" : 21,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 1171,
      "code" : "fl := (v.flag | key.flag).ro()",
      "entry" : false,
      "use-vars" : [ 0, 1 ]
    }, {
      "update-vars" : [ 16 ],
      "successors" : [ 15 ],
      "in-vars" : [ 14, 16, 12 ],
      "exit" : false,
      "out-vars" : [ 14, 16, 12 ],
      "decl-vars" : [ ],
      "line-start" : 1172,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 21,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "fl",
            "variable" : 16
          }
        } ],
        "operator" : "|",
        "right" : [ {
          "coerced-to" : {
            "go-type" : 21,
            "kind" : "type",
            "type" : "identifier",
            "value" : {
              "go-type" : 21,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "flag"
            }
          },
          "go-type" : 21,
          "kind" : "expression",
          "target" : {
            "arguments" : [ ],
            "ellipsis" : false,
            "function" : {
              "field" : {
                "function" : 6,
                "ident-kind" : "Func",
                "kind" : "ident",
                "value" : "Kind"
              },
              "go-type" : 51,
              "kind" : "expression",
              "target" : {
                "go-type" : 4,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "typ",
                  "variable" : 14
                }
              },
              "type" : "selector"
            },
            "go-type" : 26,
            "kind" : "expression",
            "type" : "call"
          },
          "type" : "cast"
        } ],
        "type" : "assign-operator"
      },
      "assign-vars" : [ 16 ],
      "line-end" : 1172,
      "code" : "fl |= flag(typ.Kind())",
      "entry" : false,
      "use-vars" : [ 14, 16 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 14, 16, 12 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 1173,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "arguments" : [ {
            "go-type" : 4,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "typ",
              "variable" : 14
            }
          }, {
            "go-type" : 21,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "fl",
              "variable" : 16
            }
          }, {
            "go-type" : 13,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "e",
              "variable" : 12
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 54,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 7,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "copyVal"
            }
          },
          "go-type" : 2,
          "kind" : "expression",
          "type" : "call"
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 1173,
      "code" : "return copyVal(typ, fl, e)",
      "entry" : false,
      "use-vars" : [ 16, 12, 14 ]
    } ],
    "code" : "// MapIndex returns the value associated with key in the map v.\n// It panics if v's Kind is not Map.\n// It returns the zero Value if key is not found in the map or if v represents a nil map.\n// As in Go, the key's value must be assignable to the map's key type.\nfunc (v Value) MapIndex(key Value) Value {\n\tv.mustBe(Map)\n\ttt := (*mapType)(unsafe.Pointer(v.typ))\n\n\tkey = key.assignTo(\"reflect.Value.MapIndex\", tt.key, nil)\n\n\tvar k unsafe.Pointer\n\tif key.flag&flagIndir != 0 {\n\t\tk = key.ptr\n\t} else {\n\t\tk = unsafe.Pointer(&key.ptr)\n\t}\n\te := mapaccess(v.typ, v.pointer(), k)\n\tif e == nil {\n\t\treturn Value{}\n\t}\n\ttyp := tt.elem\n\tfl := (v.flag | key.flag).ro()\n\tfl |= flag(typ.Kind())\n\treturn copyVal(typ, fl, e)\n}",
    "defines" : [ 0 ],
    "functions" : [ {
      "name" : "MapIndex",
      "package" : 0,
      "type" : 0,
      "exported" : true
    }, {
      "name" : "mustBe",
      "package" : 0,
      "type" : 28,
      "exported" : false
    }, {
      "name" : "assignTo",
      "package" : 0,
      "type" : 39,
      "exported" : false
    }, {
      "name" : "mapaccess",
      "package" : 0,
      "type" : 42,
      "exported" : false
    }, {
      "name" : "pointer",
      "package" : 0,
      "type" : 47,
      "exported" : false
    }, {
      "name" : "ro",
      "package" : 0,
      "type" : 50,
      "exported" : false
    }, {
      "name" : "Kind",
      "package" : 0,
      "type" : 53,
      "exported" : true
    }, {
      "name" : "copyVal",
      "package" : 0,
      "type" : 54,
      "exported" : false
    } ],
    "line-end" : 1174,
    "line-start" : 1147,
    "names" : [ "MapIndex" ],
    "package" : 0,
    "packages" : [ {
      "name" : "reflect",
      "path" : "reflect"
    }, {
      "name" : "unsafe",
      "path" : "unsafe"
    } ],
    "params" : [ 1 ],
    "receivers" : [ 0 ],
    "results" : [ 2 ],
    "type" : "function",
    "types" : [ {
      "name" : "(reflect.Value) func(key reflect.Value) reflect.Value",
      "params" : 1,
      "recv" : 0,
      "results" : 22,
      "type" : "Signature",
      "underlying" : 0,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "key",
        "type" : 2
      } ],
      "name" : "(key reflect.Value)",
      "type" : "Tuple",
      "underlying" : 1
    }, {
      "local-name" : "Value",
      "name" : "reflect.Value",
      "package" : 0,
      "type" : "Named",
      "underlying" : 3
    }, {
      "fields" : [ {
        "name" : "typ",
        "type" : 4
      }, {
        "name" : "ptr",
        "type" : 13
      }, {
        "name" : "flag",
        "type" : 21
      } ],
      "name" : "struct{typ *reflect.rtype; ptr unsafe.Pointer; reflect.flag}",
      "type" : "Struct",
      "underlying" : 3
    }, {
      "elem" : 5,
      "name" : "*reflect.rtype",
      "type" : "Pointer",
      "underlying" : 4
    }, {
      "local-name" : "rtype",
      "name" : "reflect.rtype",
      "package" : 0,
      "type" : "Named",
      "underlying" : 6
    }, {
      "fields" : [ {
        "name" : "size",
        "type" : 7
      }, {
        "name" : "ptrdata",
        "type" : 7
      }, {
        "name" : "hash",
        "type" : 8
      }, {
        "name" : "tflag",
        "type" : 9
      }, {
        "name" : "align",
        "type" : 10
      }, {
        "name" : "fieldAlign",
        "type" : 10
      }, {
        "name" : "kind",
        "type" : 10
      }, {
        "name" : "equal",
        "type" : 11
      }, {
        "name" : "gcdata",
        "type" : 16
      }, {
        "name" : "str",
        "type" : 18
      }, {
        "name" : "ptrToThis",
        "type" : 20
      } ],
      "name" : "struct{size uintptr; ptrdata uintptr; hash uint32; tflag reflect.tflag; align uint8; fieldAlign uint8; kind uint8; equal func(unsafe.Pointer, unsafe.Pointer) bool; gcdata *byte; str reflect.nameOff; ptrToThis reflect.typeOff}",
      "type" : "Struct",
      "underlying" : 6
    }, {
      "name" : "uintptr",
      "type" : "Basic",
      "underlying" : 7
    }, {
      "name" : "uint32",
      "type" : "Basic",
      "underlying" : 8
    }, {
      "local-name" : "tflag",
      "name" : "reflect.tflag",
      "package" : 0,
      "type" : "Named",
      "underlying" : 10
    }, {
      "name" : "uint8",
      "type" : "Basic",
      "underlying" : 10
    }, {
      "name" : "func(unsafe.Pointer, unsafe.Pointer) bool",
      "params" : 12,
      "recv" : -1,
      "results" : 14,
      "type" : "Signature",
      "underlying" : 11,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 13
      }, {
        "name" : "",
        "type" : 13
      } ],
      "name" : "(unsafe.Pointer, unsafe.Pointer)",
      "type" : "Tuple",
      "underlying" : 12
    }, {
      "local-name" : "Pointer",
      "name" : "unsafe.Pointer",
      "package" : 1,
      "type" : "Basic",
      "underlying" : 13
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 15
      } ],
      "name" : "(bool)",
      "type" : "Tuple",
      "underlying" : 14
    }, {
      "name" : "bool",
      "type" : "Basic",
      "underlying" : 15
    }, {
      "elem" : 17,
      "name" : "*byte",
      "type" : "Pointer",
      "underlying" : 16
    }, {
      "name" : "byte",
      "type" : "Basic",
      "underlying" : 17
    }, {
      "local-name" : "nameOff",
      "name" : "reflect.nameOff",
      "package" : 0,
      "type" : "Named",
      "underlying" : 19
    }, {
      "name" : "int32",
      "type" : "Basic",
      "underlying" : 19
    }, {
      "local-name" : "typeOff",
      "name" : "reflect.typeOff",
      "package" : 0,
      "type" : "Named",
      "underlying" : 19
    }, {
      "local-name" : "flag",
      "name" : "reflect.flag",
      "package" : 0,
      "type" : "Named",
      "underlying" : 7
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 2
      } ],
      "name" : "(reflect.Value)",
      "type" : "Tuple",
      "underlying" : 22
    }, {
      "fields" : [ ],
      "name" : "()",
      "type" : "Tuple",
      "underlying" : 23
    }, {
      "name" : "func(expected reflect.Kind)",
      "params" : 25,
      "recv" : -1,
      "results" : 23,
      "type" : "Signature",
      "underlying" : 24,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "expected",
        "type" : 26
      } ],
      "name" : "(expected reflect.Kind)",
      "type" : "Tuple",
      "underlying" : 25
    }, {
      "local-name" : "Kind",
      "name" : "reflect.Kind",
      "package" : 0,
      "type" : "Named",
      "underlying" : 27
    }, {
      "name" : "uint",
      "type" : "Basic",
      "underlying" : 27
    }, {
      "name" : "(reflect.flag) func(expected reflect.Kind)",
      "params" : 25,
      "recv" : 3,
      "results" : 23,
      "type" : "Signature",
      "underlying" : 28,
      "variadic" : false
    }, {
      "elem" : 30,
      "name" : "*reflect.mapType",
      "type" : "Pointer",
      "underlying" : 29
    }, {
      "local-name" : "mapType",
      "name" : "reflect.mapType",
      "package" : 0,
      "type" : "Named",
      "underlying" : 31
    }, {
      "fields" : [ {
        "name" : "rtype",
        "type" : 5
      }, {
        "name" : "key",
        "type" : 4
      }, {
        "name" : "elem",
        "type" : 4
      }, {
        "name" : "bucket",
        "type" : 4
      }, {
        "name" : "hasher",
        "type" : 32
      }, {
        "name" : "keysize",
        "type" : 10
      }, {
        "name" : "valuesize",
        "type" : 10
      }, {
        "name" : "bucketsize",
        "type" : 35
      }, {
        "name" : "flags",
        "type" : 8
      } ],
      "name" : "struct{reflect.rtype; key *reflect.rtype; elem *reflect.rtype; bucket *reflect.rtype; hasher func(unsafe.Pointer, uintptr) uintptr; keysize uint8; valuesize uint8; bucketsize uint16; flags uint32}",
      "type" : "Struct",
      "underlying" : 31
    }, {
      "name" : "func(unsafe.Pointer, uintptr) uintptr",
      "params" : 33,
      "recv" : -1,
      "results" : 34,
      "type" : "Signature",
      "underlying" : 32,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 13
      }, {
        "name" : "",
        "type" : 7
      } ],
      "name" : "(unsafe.Pointer, uintptr)",
      "type" : "Tuple",
      "underlying" : 33
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 7
      } ],
      "name" : "(uintptr)",
      "type" : "Tuple",
      "underlying" : 34
    }, {
      "name" : "uint16",
      "type" : "Basic",
      "underlying" : 35
    }, {
      "name" : "func(context string, dst *reflect.rtype, target unsafe.Pointer) reflect.Value",
      "params" : 37,
      "recv" : -1,
      "results" : 22,
      "type" : "Signature",
      "underlying" : 36,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "context",
        "type" : 38
      }, {
        "name" : "dst",
        "type" : 4
      }, {
        "name" : "target",
        "type" : 13
      } ],
      "name" : "(context string, dst *reflect.rtype, target unsafe.Pointer)",
      "type" : "Tuple",
      "underlying" : 37
    }, {
      "name" : "string",
      "type" : "Basic",
      "underlying" : 38
    }, {
      "name" : "(reflect.Value) func(context string, dst *reflect.rtype, target unsafe.Pointer) reflect.Value",
      "params" : 37,
      "recv" : 6,
      "results" : 22,
      "type" : "Signature",
      "underlying" : 39,
      "variadic" : false
    }, {
      "name" : "untyped bool",
      "type" : "Basic",
      "underlying" : 40
    }, {
      "elem" : 13,
      "name" : "*unsafe.Pointer",
      "type" : "Pointer",
      "underlying" : 41
    }, {
      "name" : "func(t *reflect.rtype, m unsafe.Pointer, key unsafe.Pointer) (val unsafe.Pointer)",
      "params" : 43,
      "recv" : -1,
      "results" : 44,
      "type" : "Signature",
      "underlying" : 42,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "t",
        "type" : 4
      }, {
        "name" : "m",
        "type" : 13
      }, {
        "name" : "key",
        "type" : 13
      } ],
      "name" : "(t *reflect.rtype, m unsafe.Pointer, key unsafe.Pointer)",
      "type" : "Tuple",
      "underlying" : 43
    }, {
      "fields" : [ {
        "name" : "val",
        "type" : 13
      } ],
      "name" : "(val unsafe.Pointer)",
      "type" : "Tuple",
      "underlying" : 44
    }, {
      "name" : "func() unsafe.Pointer",
      "params" : 23,
      "recv" : -1,
      "results" : 46,
      "type" : "Signature",
      "underlying" : 45,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 13
      } ],
      "name" : "(unsafe.Pointer)",
      "type" : "Tuple",
      "underlying" : 46
    }, {
      "name" : "(reflect.Value) func() unsafe.Pointer",
      "params" : 23,
      "recv" : 11,
      "results" : 46,
      "type" : "Signature",
      "underlying" : 47,
      "variadic" : false
    }, {
      "name" : "func() reflect.flag",
      "params" : 23,
      "recv" : -1,
      "results" : 49,
      "type" : "Signature",
      "underlying" : 48,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 21
      } ],
      "name" : "(reflect.flag)",
      "type" : "Tuple",
      "underlying" : 49
    }, {
      "name" : "(reflect.flag) func() reflect.flag",
      "params" : 23,
      "recv" : 15,
      "results" : 49,
      "type" : "Signature",
      "underlying" : 50,
      "variadic" : false
    }, {
      "name" : "func() reflect.Kind",
      "params" : 23,
      "recv" : -1,
      "results" : 52,
      "type" : "Signature",
      "underlying" : 51,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 26
      } ],
      "name" : "(reflect.Kind)",
      "type" : "Tuple",
      "underlying" : 52
    }, {
      "name" : "(*reflect.rtype) func() reflect.Kind",
      "params" : 23,
      "recv" : 17,
      "results" : 52,
      "type" : "Signature",
      "underlying" : 53,
      "variadic" : false
    }, {
      "name" : "func(typ *reflect.rtype, fl reflect.flag, ptr unsafe.Pointer) reflect.Value",
      "params" : 55,
      "recv" : -1,
      "results" : 22,
      "type" : "Signature",
      "underlying" : 54,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "typ",
        "type" : 4
      }, {
        "name" : "fl",
        "type" : 21
      }, {
        "name" : "ptr",
        "type" : 13
      } ],
      "name" : "(typ *reflect.rtype, fl reflect.flag, ptr unsafe.Pointer)",
      "type" : "Tuple",
      "underlying" : 55
    } ],
    "variables" : [ {
      "name" : "v",
      "package" : 0,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "key",
      "package" : 0,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "[res0]",
      "package" : 0,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "f",
      "package" : 0,
      "type" : 21,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "typ",
      "package" : 0,
      "type" : 4,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "tt",
      "package" : 0,
      "type" : 29,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "v",
      "package" : 0,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "key",
      "package" : 0,
      "type" : 4,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "k",
      "package" : 0,
      "type" : 13,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "flag",
      "package" : 0,
      "type" : 21,
      "exported" : false,
      "embedded" : true,
      "field" : true
    }, {
      "name" : "ptr",
      "package" : 0,
      "type" : 13,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "v",
      "package" : 0,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "e",
      "package" : 0,
      "type" : 13,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "elem",
      "package" : 0,
      "type" : 4,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "typ",
      "package" : 0,
      "type" : 4,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "f",
      "package" : 0,
      "type" : 21,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "fl",
      "package" : 0,
      "type" : 21,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "t",
      "package" : 0,
      "type" : 4,
      "exported" : false,
      "embedded" : false,
      "field" : false
    } ]
  },
  "go-version" : "1.14.3"
}