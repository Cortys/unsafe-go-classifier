{
  "usage" : {
    "file" : "type.go",
    "label1" : "delegate",
    "label2" : "types",
    "line" : "668",
    "module" : "std",
    "pkg" : "reflect",
    "project" : "kubernetes/kubernetes",
    "snippet" : "return typeOff(addReflectOff(unsafe.Pointer(t)))",
    "version" : "std"
  },
  "cfg" : {
    "blocks" : [ {
      "update-vars" : [ ],
      "successors" : [ 2 ],
      "in-vars" : [ 0 ],
      "exit" : false,
      "out-vars" : [ 0 ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[entry]",
      "entry" : true,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ ],
      "in-vars" : [ ],
      "exit" : true,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[exit]",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 0 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 668,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "coerced-to" : {
            "go-type" : 18,
            "kind" : "type",
            "type" : "identifier",
            "value" : {
              "go-type" : 18,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "typeOff"
            }
          },
          "go-type" : 18,
          "kind" : "expression",
          "target" : {
            "arguments" : [ {
              "coerced-to" : {
                "go-type" : 11,
                "kind" : "type",
                "qualifier" : {
                  "ident-kind" : "PkgName",
                  "kind" : "ident",
                  "package" : 1,
                  "value" : "unsafe"
                },
                "type" : "identifier",
                "value" : {
                  "go-type" : 11,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "Pointer"
                }
              },
              "go-type" : 11,
              "kind" : "expression",
              "target" : {
                "go-type" : 2,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "t",
                  "variable" : 0
                }
              },
              "type" : "cast"
            } ],
            "ellipsis" : false,
            "function" : {
              "go-type" : 20,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Func",
                "kind" : "ident",
                "value" : "addReflectOff"
              }
            },
            "go-type" : 17,
            "kind" : "expression",
            "type" : "call"
          },
          "type" : "cast"
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 668,
      "code" : "return typeOff(addReflectOff(unsafe.Pointer(t)))",
      "entry" : false,
      "use-vars" : [ 0 ]
    } ],
    "code" : "// resolveReflectType adds a *rtype to the reflection lookup map in the runtime.\n// It returns a new typeOff that can be used to refer to the pointer.\nfunc resolveReflectType(t *rtype) typeOff {\n\treturn typeOff(addReflectOff(unsafe.Pointer(t)))\n}",
    "defines" : [ 0 ],
    "functions" : [ {
      "name" : "resolveReflectType",
      "package" : 0,
      "type" : 0,
      "exported" : false
    }, {
      "name" : "addReflectOff",
      "package" : 0,
      "type" : 20,
      "exported" : false
    } ],
    "line-end" : 669,
    "line-start" : 667,
    "names" : [ "resolveReflectType" ],
    "package" : 0,
    "packages" : [ {
      "name" : "reflect",
      "path" : "reflect"
    }, {
      "name" : "unsafe",
      "path" : "unsafe"
    } ],
    "params" : [ 0 ],
    "receivers" : [ ],
    "results" : [ 1 ],
    "type" : "function",
    "types" : [ {
      "name" : "func(t *reflect.rtype) reflect.typeOff",
      "params" : 1,
      "recv" : -1,
      "results" : 19,
      "type" : "Signature",
      "underlying" : 0,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "t",
        "type" : 2
      } ],
      "name" : "(t *reflect.rtype)",
      "type" : "Tuple",
      "underlying" : 1
    }, {
      "elem" : 3,
      "name" : "*reflect.rtype",
      "type" : "Pointer",
      "underlying" : 2
    }, {
      "local-name" : "rtype",
      "name" : "reflect.rtype",
      "package" : 0,
      "type" : "Named",
      "underlying" : 4
    }, {
      "fields" : [ {
        "name" : "size",
        "type" : 5
      }, {
        "name" : "ptrdata",
        "type" : 5
      }, {
        "name" : "hash",
        "type" : 6
      }, {
        "name" : "tflag",
        "type" : 7
      }, {
        "name" : "align",
        "type" : 8
      }, {
        "name" : "fieldAlign",
        "type" : 8
      }, {
        "name" : "kind",
        "type" : 8
      }, {
        "name" : "equal",
        "type" : 9
      }, {
        "name" : "gcdata",
        "type" : 14
      }, {
        "name" : "str",
        "type" : 16
      }, {
        "name" : "ptrToThis",
        "type" : 18
      } ],
      "name" : "struct{size uintptr; ptrdata uintptr; hash uint32; tflag reflect.tflag; align uint8; fieldAlign uint8; kind uint8; equal func(unsafe.Pointer, unsafe.Pointer) bool; gcdata *byte; str reflect.nameOff; ptrToThis reflect.typeOff}",
      "type" : "Struct",
      "underlying" : 4
    }, {
      "name" : "uintptr",
      "type" : "Basic",
      "underlying" : 5
    }, {
      "name" : "uint32",
      "type" : "Basic",
      "underlying" : 6
    }, {
      "local-name" : "tflag",
      "name" : "reflect.tflag",
      "package" : 0,
      "type" : "Named",
      "underlying" : 8
    }, {
      "name" : "uint8",
      "type" : "Basic",
      "underlying" : 8
    }, {
      "name" : "func(unsafe.Pointer, unsafe.Pointer) bool",
      "params" : 10,
      "recv" : -1,
      "results" : 12,
      "type" : "Signature",
      "underlying" : 9,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 11
      }, {
        "name" : "",
        "type" : 11
      } ],
      "name" : "(unsafe.Pointer, unsafe.Pointer)",
      "type" : "Tuple",
      "underlying" : 10
    }, {
      "local-name" : "Pointer",
      "name" : "unsafe.Pointer",
      "package" : 1,
      "type" : "Basic",
      "underlying" : 11
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 13
      } ],
      "name" : "(bool)",
      "type" : "Tuple",
      "underlying" : 12
    }, {
      "name" : "bool",
      "type" : "Basic",
      "underlying" : 13
    }, {
      "elem" : 15,
      "name" : "*byte",
      "type" : "Pointer",
      "underlying" : 14
    }, {
      "name" : "byte",
      "type" : "Basic",
      "underlying" : 15
    }, {
      "local-name" : "nameOff",
      "name" : "reflect.nameOff",
      "package" : 0,
      "type" : "Named",
      "underlying" : 17
    }, {
      "name" : "int32",
      "type" : "Basic",
      "underlying" : 17
    }, {
      "local-name" : "typeOff",
      "name" : "reflect.typeOff",
      "package" : 0,
      "type" : "Named",
      "underlying" : 17
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 18
      } ],
      "name" : "(reflect.typeOff)",
      "type" : "Tuple",
      "underlying" : 19
    }, {
      "name" : "func(ptr unsafe.Pointer) int32",
      "params" : 21,
      "recv" : -1,
      "results" : 22,
      "type" : "Signature",
      "underlying" : 20,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "ptr",
        "type" : 11
      } ],
      "name" : "(ptr unsafe.Pointer)",
      "type" : "Tuple",
      "underlying" : 21
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 17
      } ],
      "name" : "(int32)",
      "type" : "Tuple",
      "underlying" : 22
    } ],
    "variables" : [ {
      "name" : "t",
      "package" : 0,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "[res0]",
      "package" : 0,
      "type" : 18,
      "exported" : false,
      "embedded" : false,
      "field" : false
    } ]
  },
  "go-version" : "1.14.3"
}