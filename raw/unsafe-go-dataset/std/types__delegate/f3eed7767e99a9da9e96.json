{
  "usage" : {
    "file" : "alg.go",
    "label1" : "delegate",
    "label2" : "types",
    "line" : "163",
    "module" : "std",
    "pkg" : "runtime",
    "project" : "kubernetes/kubernetes",
    "snippet" : "func typehash(t *_type, p unsafe.Pointer, h uintptr) uintptr {",
    "version" : "std"
  },
  "cfg" : {
    "blocks" : [ {
      "update-vars" : [ ],
      "successors" : [ 2 ],
      "in-vars" : [ 0, 2, 1 ],
      "exit" : false,
      "out-vars" : [ 1, 0, 2 ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[entry]",
      "entry" : true,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ ],
      "in-vars" : [ ],
      "exit" : true,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[exit]",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 3, 10 ],
      "in-vars" : [ 0, 2, 1 ],
      "exit" : false,
      "out-vars" : [ 0, 2, 1 ],
      "decl-vars" : [ ],
      "line-start" : 164,
      "ast" : {
        "condition" : {
          "go-type" : 20,
          "kind" : "expression",
          "left" : {
            "go-type" : 7,
            "kind" : "expression",
            "left" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "tflag",
                "variable" : 4
              },
              "go-type" : 7,
              "kind" : "expression",
              "target" : {
                "go-type" : 2,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "t",
                  "variable" : 0
                }
              },
              "type" : "selector"
            },
            "operator" : "&",
            "right" : {
              "go-type" : 7,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "8"
              }
            },
            "type" : "binary"
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 7,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 174,
      "code" : "if t.tflag&tflagRegularMemory != 0 {\n\n\tswitch t.size {\n\tcase 4:\n\t\treturn memhash32(p, h)\n\tcase 8:\n\t\treturn memhash64(p, h)\n\tdefault:\n\t\treturn memhash(p, h, t.size)\n\t}\n}",
      "entry" : false,
      "use-vars" : [ 0 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 4, 6, 8 ],
      "in-vars" : [ 0, 2, 1 ],
      "exit" : false,
      "out-vars" : [ 0, 2, 1 ],
      "decl-vars" : [ ],
      "line-start" : 166,
      "ast" : {
        "condition" : {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "size",
            "variable" : 5
          },
          "go-type" : 5,
          "kind" : "expression",
          "target" : {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "t",
              "variable" : 0
            }
          },
          "type" : "selector"
        },
        "kind" : "statement",
        "type" : "switch"
      },
      "assign-vars" : [ ],
      "line-end" : 173,
      "code" : "switch t.size {\ncase 4:\n\treturn memhash32(p, h)\ncase 8:\n\treturn memhash64(p, h)\ndefault:\n\treturn memhash(p, h, t.size)\n}",
      "entry" : false,
      "use-vars" : [ 0 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 5 ],
      "in-vars" : [ 1, 2 ],
      "exit" : false,
      "out-vars" : [ 2, 1 ],
      "decl-vars" : [ ],
      "line-start" : 167,
      "ast" : {
        "expressions" : [ {
          "go-type" : 5,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "4"
          }
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 168,
      "code" : "case 4:\n\treturn memhash32(p, h)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 2, 1 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 168,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "arguments" : [ {
            "go-type" : 11,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "p",
              "variable" : 1
            }
          }, {
            "go-type" : 5,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "h",
              "variable" : 2
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 21,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "memhash32"
            }
          },
          "go-type" : 5,
          "kind" : "expression",
          "type" : "call"
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 168,
      "code" : "return memhash32(p, h)",
      "entry" : false,
      "use-vars" : [ 1, 2 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 7 ],
      "in-vars" : [ 2, 1 ],
      "exit" : false,
      "out-vars" : [ 2, 1 ],
      "decl-vars" : [ ],
      "line-start" : 169,
      "ast" : {
        "expressions" : [ {
          "go-type" : 5,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "8"
          }
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 170,
      "code" : "case 8:\n\treturn memhash64(p, h)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 2, 1 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 170,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "arguments" : [ {
            "go-type" : 11,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "p",
              "variable" : 1
            }
          }, {
            "go-type" : 5,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "h",
              "variable" : 2
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 21,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "memhash64"
            }
          },
          "go-type" : 5,
          "kind" : "expression",
          "type" : "call"
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 170,
      "code" : "return memhash64(p, h)",
      "entry" : false,
      "use-vars" : [ 1, 2 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 9 ],
      "in-vars" : [ 2, 1, 0 ],
      "exit" : false,
      "out-vars" : [ 1, 0, 2 ],
      "decl-vars" : [ ],
      "line-start" : 171,
      "ast" : {
        "expressions" : [ ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 172,
      "code" : "default:\n\treturn memhash(p, h, t.size)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 1, 0, 2 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 172,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "arguments" : [ {
            "go-type" : 11,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "p",
              "variable" : 1
            }
          }, {
            "go-type" : 5,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "h",
              "variable" : 2
            }
          }, {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "size",
              "variable" : 5
            },
            "go-type" : 5,
            "kind" : "expression",
            "target" : {
              "go-type" : 2,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "t",
                "variable" : 0
              }
            },
            "type" : "selector"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 23,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "memhash"
            }
          },
          "go-type" : 5,
          "kind" : "expression",
          "type" : "call"
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 172,
      "code" : "return memhash(p, h, t.size)",
      "entry" : false,
      "use-vars" : [ 0, 1, 2 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 11, 13, 15, 17, 19, 21, 26, 33, 52 ],
      "in-vars" : [ 0, 2, 1 ],
      "exit" : false,
      "out-vars" : [ 2, 1, 0 ],
      "decl-vars" : [ ],
      "line-start" : 175,
      "ast" : {
        "condition" : {
          "go-type" : 8,
          "kind" : "expression",
          "left" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "kind",
              "variable" : 6
            },
            "go-type" : 8,
            "kind" : "expression",
            "target" : {
              "go-type" : 2,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "t",
                "variable" : 0
              }
            },
            "type" : "selector"
          },
          "operator" : "&",
          "right" : {
            "go-type" : 8,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "31"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "switch"
      },
      "assign-vars" : [ ],
      "line-end" : 228,
      "code" : "switch t.kind & kindMask {\ncase kindFloat32:\n\treturn f32hash(p, h)\ncase kindFloat64:\n\treturn f64hash(p, h)\ncase kindComplex64:\n\treturn c64hash(p, h)\ncase kindComplex128:\n\treturn c128hash(p, h)\ncase kindString:\n\treturn strhash(p, h)\ncase kindInterface:\n\ti := (*interfacetype)(unsafe.Pointer(t))\n\tif len(i.mhdr) == 0 {\n\t\treturn nilinterhash(p, h)\n\t}\n\treturn interhash(p, h)\ncase kindArray:\n\ta := (*arraytype)(unsafe.Pointer(t))\n\tfor i := uintptr(0); i < a.len; i++ {\n\t\th = typehash(a.elem, add(p, i*a.elem.size), h)\n\t}\n\treturn h\ncase kindStruct:\n\ts := (*structtype)(unsafe.Pointer(t))\n\tmemStart := uintptr(0)\n\tmemEnd := uintptr(0)\n\tfor _, f := range s.fields {\n\t\tif memEnd > memStart && (f.name.isBlank() || f.offset() != memEnd || f.typ.tflag&tflagRegularMemory == 0) {\n\n\t\t\th = memhash(add(p, memStart), h, memEnd-memStart)\n\t\t\tmemStart = memEnd\n\t\t}\n\t\tif f.name.isBlank() {\n\t\t\tcontinue\n\t\t}\n\t\tif f.typ.tflag&tflagRegularMemory == 0 {\n\t\t\th = typehash(f.typ, add(p, f.offset()), h)\n\t\t\tcontinue\n\t\t}\n\t\tif memStart == memEnd {\n\t\t\tmemStart = f.offset()\n\t\t}\n\t\tmemEnd = f.offset() + f.typ.size\n\t}\n\tif memEnd > memStart {\n\t\th = memhash(add(p, memStart), h, memEnd-memStart)\n\t}\n\treturn h\ndefault:\n\n\tpanic(errorString(\"hash of unhashable type \" + t.string()))\n}",
      "entry" : false,
      "use-vars" : [ 0 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 12 ],
      "in-vars" : [ 2, 1 ],
      "exit" : false,
      "out-vars" : [ 2, 1 ],
      "decl-vars" : [ ],
      "line-start" : 176,
      "ast" : {
        "expressions" : [ {
          "go-type" : 8,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "13"
          }
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 177,
      "code" : "case kindFloat32:\n\treturn f32hash(p, h)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 2, 1 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 177,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "arguments" : [ {
            "go-type" : 11,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "p",
              "variable" : 1
            }
          }, {
            "go-type" : 5,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "h",
              "variable" : 2
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 21,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "f32hash"
            }
          },
          "go-type" : 5,
          "kind" : "expression",
          "type" : "call"
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 177,
      "code" : "return f32hash(p, h)",
      "entry" : false,
      "use-vars" : [ 1, 2 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 14 ],
      "in-vars" : [ 2, 1 ],
      "exit" : false,
      "out-vars" : [ 2, 1 ],
      "decl-vars" : [ ],
      "line-start" : 178,
      "ast" : {
        "expressions" : [ {
          "go-type" : 8,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "14"
          }
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 179,
      "code" : "case kindFloat64:\n\treturn f64hash(p, h)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 2, 1 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 179,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "arguments" : [ {
            "go-type" : 11,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "p",
              "variable" : 1
            }
          }, {
            "go-type" : 5,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "h",
              "variable" : 2
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 21,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "f64hash"
            }
          },
          "go-type" : 5,
          "kind" : "expression",
          "type" : "call"
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 179,
      "code" : "return f64hash(p, h)",
      "entry" : false,
      "use-vars" : [ 2, 1 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 16 ],
      "in-vars" : [ 1, 2 ],
      "exit" : false,
      "out-vars" : [ 2, 1 ],
      "decl-vars" : [ ],
      "line-start" : 180,
      "ast" : {
        "expressions" : [ {
          "go-type" : 8,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "15"
          }
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 181,
      "code" : "case kindComplex64:\n\treturn c64hash(p, h)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 2, 1 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 181,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "arguments" : [ {
            "go-type" : 11,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "p",
              "variable" : 1
            }
          }, {
            "go-type" : 5,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "h",
              "variable" : 2
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 21,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "c64hash"
            }
          },
          "go-type" : 5,
          "kind" : "expression",
          "type" : "call"
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 181,
      "code" : "return c64hash(p, h)",
      "entry" : false,
      "use-vars" : [ 2, 1 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 18 ],
      "in-vars" : [ 2, 1 ],
      "exit" : false,
      "out-vars" : [ 2, 1 ],
      "decl-vars" : [ ],
      "line-start" : 182,
      "ast" : {
        "expressions" : [ {
          "go-type" : 8,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "16"
          }
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 183,
      "code" : "case kindComplex128:\n\treturn c128hash(p, h)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 2, 1 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 183,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "arguments" : [ {
            "go-type" : 11,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "p",
              "variable" : 1
            }
          }, {
            "go-type" : 5,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "h",
              "variable" : 2
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 21,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "c128hash"
            }
          },
          "go-type" : 5,
          "kind" : "expression",
          "type" : "call"
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 183,
      "code" : "return c128hash(p, h)",
      "entry" : false,
      "use-vars" : [ 1, 2 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 20 ],
      "in-vars" : [ 2, 1 ],
      "exit" : false,
      "out-vars" : [ 2, 1 ],
      "decl-vars" : [ ],
      "line-start" : 184,
      "ast" : {
        "expressions" : [ {
          "go-type" : 8,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "24"
          }
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 185,
      "code" : "case kindString:\n\treturn strhash(p, h)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 2, 1 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 185,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "arguments" : [ {
            "go-type" : 11,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "p",
              "variable" : 1
            }
          }, {
            "go-type" : 5,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "h",
              "variable" : 2
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 21,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "strhash"
            }
          },
          "go-type" : 5,
          "kind" : "expression",
          "type" : "call"
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 185,
      "code" : "return strhash(p, h)",
      "entry" : false,
      "use-vars" : [ 2, 1 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 22 ],
      "in-vars" : [ 0, 2, 1 ],
      "exit" : false,
      "out-vars" : [ 0, 2, 1 ],
      "decl-vars" : [ ],
      "line-start" : 186,
      "ast" : {
        "expressions" : [ {
          "go-type" : 8,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "20"
          }
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 191,
      "code" : "case kindInterface:\n\ti := (*interfacetype)(unsafe.Pointer(t))\n\tif len(i.mhdr) == 0 {\n\t\treturn nilinterhash(p, h)\n\t}\n\treturn interhash(p, h)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 23 ],
      "in-vars" : [ 2, 1, 0 ],
      "exit" : false,
      "out-vars" : [ 2, 1, 7 ],
      "decl-vars" : [ 7 ],
      "line-start" : 187,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "i"
          }
        } ],
        "right" : [ {
          "coerced-to" : {
            "contained" : {
              "go-type" : 26,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 26,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "interfacetype"
              }
            },
            "go-type" : 25,
            "kind" : "type",
            "type" : "pointer"
          },
          "go-type" : 25,
          "kind" : "expression",
          "target" : {
            "coerced-to" : {
              "go-type" : 11,
              "kind" : "type",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 1,
                "value" : "unsafe"
              },
              "type" : "identifier",
              "value" : {
                "go-type" : 11,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "Pointer"
              }
            },
            "go-type" : 11,
            "kind" : "expression",
            "target" : {
              "go-type" : 2,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "t",
                "variable" : 0
              }
            },
            "type" : "cast"
          },
          "type" : "cast"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 187,
      "code" : "i := (*interfacetype)(unsafe.Pointer(t))",
      "entry" : false,
      "use-vars" : [ 0 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 24, 25 ],
      "in-vars" : [ 2, 1, 7 ],
      "exit" : false,
      "out-vars" : [ 2, 1 ],
      "decl-vars" : [ ],
      "line-start" : 188,
      "ast" : {
        "condition" : {
          "go-type" : 20,
          "kind" : "expression",
          "left" : {
            "arguments" : [ {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "mhdr",
                "variable" : 8
              },
              "go-type" : 30,
              "kind" : "expression",
              "target" : {
                "go-type" : 25,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "i",
                  "variable" : 7
                }
              },
              "type" : "selector"
            } ],
            "ellipsis" : false,
            "function" : {
              "go-type" : 34,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Builtin",
                "kind" : "ident",
                "value" : "len"
              }
            },
            "go-type" : 33,
            "kind" : "expression",
            "type" : "call"
          },
          "operator" : "==",
          "right" : {
            "go-type" : 33,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 190,
      "code" : "if len(i.mhdr) == 0 {\n\treturn nilinterhash(p, h)\n}",
      "entry" : false,
      "use-vars" : [ 7 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 2, 1 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 189,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "arguments" : [ {
            "go-type" : 11,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "p",
              "variable" : 1
            }
          }, {
            "go-type" : 5,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "h",
              "variable" : 2
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 21,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "nilinterhash"
            }
          },
          "go-type" : 5,
          "kind" : "expression",
          "type" : "call"
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 189,
      "code" : "return nilinterhash(p, h)",
      "entry" : false,
      "use-vars" : [ 1, 2 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 2, 1 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 191,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "arguments" : [ {
            "go-type" : 11,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "p",
              "variable" : 1
            }
          }, {
            "go-type" : 5,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "h",
              "variable" : 2
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 21,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "interhash"
            }
          },
          "go-type" : 5,
          "kind" : "expression",
          "type" : "call"
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 191,
      "code" : "return interhash(p, h)",
      "entry" : false,
      "use-vars" : [ 1, 2 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 27 ],
      "in-vars" : [ 1, 0, 2 ],
      "exit" : false,
      "out-vars" : [ 1, 0, 2 ],
      "decl-vars" : [ ],
      "line-start" : 192,
      "ast" : {
        "expressions" : [ {
          "go-type" : 8,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "17"
          }
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 197,
      "code" : "case kindArray:\n\ta := (*arraytype)(unsafe.Pointer(t))\n\tfor i := uintptr(0); i < a.len; i++ {\n\t\th = typehash(a.elem, add(p, i*a.elem.size), h)\n\t}\n\treturn h",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 29 ],
      "in-vars" : [ 0, 2, 1 ],
      "exit" : false,
      "out-vars" : [ 2, 10, 1 ],
      "decl-vars" : [ 10 ],
      "line-start" : 193,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "a"
          }
        } ],
        "right" : [ {
          "coerced-to" : {
            "contained" : {
              "go-type" : 38,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 38,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "arraytype"
              }
            },
            "go-type" : 37,
            "kind" : "type",
            "type" : "pointer"
          },
          "go-type" : 37,
          "kind" : "expression",
          "target" : {
            "coerced-to" : {
              "go-type" : 11,
              "kind" : "type",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 1,
                "value" : "unsafe"
              },
              "type" : "identifier",
              "value" : {
                "go-type" : 11,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "Pointer"
              }
            },
            "go-type" : 11,
            "kind" : "expression",
            "target" : {
              "go-type" : 2,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "t",
                "variable" : 0
              }
            },
            "type" : "cast"
          },
          "type" : "cast"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 193,
      "code" : "a := (*arraytype)(unsafe.Pointer(t))",
      "entry" : false,
      "use-vars" : [ 0 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 31, 32 ],
      "in-vars" : [ 1, 9, 2, 10 ],
      "exit" : false,
      "out-vars" : [ 2, 10, 1, 9 ],
      "decl-vars" : [ ],
      "line-start" : 194,
      "ast" : {
        "condition" : {
          "go-type" : 20,
          "kind" : "expression",
          "left" : {
            "go-type" : 5,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "i",
              "variable" : 9
            }
          },
          "operator" : "<",
          "right" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "len",
              "variable" : 11
            },
            "go-type" : 5,
            "kind" : "expression",
            "target" : {
              "go-type" : 37,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "a",
                "variable" : 10
              }
            },
            "type" : "selector"
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "for"
      },
      "assign-vars" : [ ],
      "line-end" : 196,
      "code" : "for i := uintptr(0); i < a.len; i++ {\n\th = typehash(a.elem, add(p, i*a.elem.size), h)\n}",
      "entry" : false,
      "use-vars" : [ 10, 9 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 28 ],
      "in-vars" : [ 2, 10, 1 ],
      "exit" : false,
      "out-vars" : [ 2, 10, 1, 9 ],
      "decl-vars" : [ 9 ],
      "line-start" : 194,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "i"
          }
        } ],
        "right" : [ {
          "go-type" : 5,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "0"
          }
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 194,
      "code" : "i := uintptr(0)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ 9 ],
      "successors" : [ 28 ],
      "in-vars" : [ 9, 2, 10, 1 ],
      "exit" : false,
      "out-vars" : [ 2, 10, 1, 9 ],
      "decl-vars" : [ ],
      "line-start" : 194,
      "ast" : {
        "kind" : "statement",
        "operation" : "++",
        "target" : {
          "go-type" : 5,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "i",
            "variable" : 9
          }
        },
        "type" : "crement"
      },
      "assign-vars" : [ 9 ],
      "line-end" : 194,
      "code" : "i++",
      "entry" : false,
      "use-vars" : [ 9 ]
    }, {
      "update-vars" : [ 2 ],
      "successors" : [ 30 ],
      "in-vars" : [ 2, 10, 1, 9 ],
      "exit" : false,
      "out-vars" : [ 10, 1, 9, 2 ],
      "decl-vars" : [ ],
      "line-start" : 195,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 5,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "h",
            "variable" : 2
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "elem",
              "variable" : 12
            },
            "go-type" : 2,
            "kind" : "expression",
            "target" : {
              "go-type" : 37,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "a",
                "variable" : 10
              }
            },
            "type" : "selector"
          }, {
            "arguments" : [ {
              "go-type" : 11,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "p",
                "variable" : 1
              }
            }, {
              "go-type" : 5,
              "kind" : "expression",
              "left" : {
                "go-type" : 5,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "i",
                  "variable" : 9
                }
              },
              "operator" : "*",
              "right" : {
                "field" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "size",
                  "variable" : 5
                },
                "go-type" : 5,
                "kind" : "expression",
                "target" : {
                  "field" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "elem",
                    "variable" : 12
                  },
                  "go-type" : 2,
                  "kind" : "expression",
                  "target" : {
                    "go-type" : 37,
                    "kind" : "expression",
                    "type" : "identifier",
                    "value" : {
                      "ident-kind" : "Var",
                      "kind" : "ident",
                      "value" : "a",
                      "variable" : 10
                    }
                  },
                  "type" : "selector"
                },
                "type" : "selector"
              },
              "type" : "binary"
            } ],
            "ellipsis" : false,
            "function" : {
              "go-type" : 40,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Func",
                "kind" : "ident",
                "value" : "add"
              }
            },
            "go-type" : 11,
            "kind" : "expression",
            "type" : "call"
          }, {
            "go-type" : 5,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "h",
              "variable" : 2
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 0,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "typehash"
            }
          },
          "go-type" : 5,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 2 ],
      "line-end" : 195,
      "code" : "h = typehash(a.elem, add(p, i*a.elem.size), h)",
      "entry" : false,
      "use-vars" : [ 10, 2, 1, 9 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 2 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 197,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 5,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "h",
            "variable" : 2
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 197,
      "code" : "return h",
      "entry" : false,
      "use-vars" : [ 2 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 34 ],
      "in-vars" : [ 0, 2, 1 ],
      "exit" : false,
      "out-vars" : [ 0, 2, 1 ],
      "decl-vars" : [ ],
      "line-start" : 198,
      "ast" : {
        "expressions" : [ {
          "go-type" : 8,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "25"
          }
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 223,
      "code" : "case kindStruct:\n\ts := (*structtype)(unsafe.Pointer(t))\n\tmemStart := uintptr(0)\n\tmemEnd := uintptr(0)\n\tfor _, f := range s.fields {\n\t\tif memEnd > memStart && (f.name.isBlank() || f.offset() != memEnd || f.typ.tflag&tflagRegularMemory == 0) {\n\n\t\t\th = memhash(add(p, memStart), h, memEnd-memStart)\n\t\t\tmemStart = memEnd\n\t\t}\n\t\tif f.name.isBlank() {\n\t\t\tcontinue\n\t\t}\n\t\tif f.typ.tflag&tflagRegularMemory == 0 {\n\t\t\th = typehash(f.typ, add(p, f.offset()), h)\n\t\t\tcontinue\n\t\t}\n\t\tif memStart == memEnd {\n\t\t\tmemStart = f.offset()\n\t\t}\n\t\tmemEnd = f.offset() + f.typ.size\n\t}\n\tif memEnd > memStart {\n\t\th = memhash(add(p, memStart), h, memEnd-memStart)\n\t}\n\treturn h",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 35 ],
      "in-vars" : [ 0, 2, 1 ],
      "exit" : false,
      "out-vars" : [ 2, 1, 13 ],
      "decl-vars" : [ 13 ],
      "line-start" : 199,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "s"
          }
        } ],
        "right" : [ {
          "coerced-to" : {
            "contained" : {
              "go-type" : 44,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 44,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "structtype"
              }
            },
            "go-type" : 43,
            "kind" : "type",
            "type" : "pointer"
          },
          "go-type" : 43,
          "kind" : "expression",
          "target" : {
            "coerced-to" : {
              "go-type" : 11,
              "kind" : "type",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 1,
                "value" : "unsafe"
              },
              "type" : "identifier",
              "value" : {
                "go-type" : 11,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "Pointer"
              }
            },
            "go-type" : 11,
            "kind" : "expression",
            "target" : {
              "go-type" : 2,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "t",
                "variable" : 0
              }
            },
            "type" : "cast"
          },
          "type" : "cast"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 199,
      "code" : "s := (*structtype)(unsafe.Pointer(t))",
      "entry" : false,
      "use-vars" : [ 0 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 36 ],
      "in-vars" : [ 2, 1, 13 ],
      "exit" : false,
      "out-vars" : [ 16, 2, 1, 13 ],
      "decl-vars" : [ 16 ],
      "line-start" : 200,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "memStart"
          }
        } ],
        "right" : [ {
          "go-type" : 5,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "0"
          }
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 200,
      "code" : "memStart := uintptr(0)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 37 ],
      "in-vars" : [ 16, 2, 1, 13 ],
      "exit" : false,
      "out-vars" : [ 16, 2, 1, 15, 13 ],
      "decl-vars" : [ 15 ],
      "line-start" : 201,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "memEnd"
          }
        } ],
        "right" : [ {
          "go-type" : 5,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "0"
          }
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 201,
      "code" : "memEnd := uintptr(0)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 38, 49 ],
      "in-vars" : [ 13, 16, 2, 1, 15 ],
      "exit" : false,
      "out-vars" : [ 16, 17, 2, 1, 15, 13 ],
      "decl-vars" : [ 17, 20 ],
      "line-start" : 202,
      "ast" : {
        "is-assign" : false,
        "key" : {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "_"
          }
        },
        "kind" : "statement",
        "target" : {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "fields",
            "variable" : 14
          },
          "go-type" : 46,
          "kind" : "expression",
          "target" : {
            "go-type" : 43,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "s",
              "variable" : 13
            }
          },
          "type" : "selector"
        },
        "type" : "range",
        "value" : {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "f"
          }
        }
      },
      "assign-vars" : [ ],
      "line-end" : 219,
      "code" : "for _, f := range s.fields {\n\tif memEnd > memStart && (f.name.isBlank() || f.offset() != memEnd || f.typ.tflag&tflagRegularMemory == 0) {\n\n\t\th = memhash(add(p, memStart), h, memEnd-memStart)\n\t\tmemStart = memEnd\n\t}\n\tif f.name.isBlank() {\n\t\tcontinue\n\t}\n\tif f.typ.tflag&tflagRegularMemory == 0 {\n\t\th = typehash(f.typ, add(p, f.offset()), h)\n\t\tcontinue\n\t}\n\tif memStart == memEnd {\n\t\tmemStart = f.offset()\n\t}\n\tmemEnd = f.offset() + f.typ.size\n}",
      "entry" : false,
      "use-vars" : [ 13 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 39, 41 ],
      "in-vars" : [ 17, 2, 1, 15, 13, 16 ],
      "exit" : false,
      "out-vars" : [ 1, 15, 13, 16, 17, 2 ],
      "decl-vars" : [ ],
      "line-start" : 203,
      "ast" : {
        "condition" : {
          "go-type" : 13,
          "kind" : "expression",
          "left" : {
            "go-type" : 13,
            "kind" : "expression",
            "left" : {
              "go-type" : 5,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "memEnd",
                "variable" : 15
              }
            },
            "operator" : ">",
            "right" : {
              "go-type" : 5,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "memStart",
                "variable" : 16
              }
            },
            "type" : "binary"
          },
          "operator" : "&&",
          "right" : {
            "go-type" : 13,
            "kind" : "expression",
            "target" : {
              "go-type" : 13,
              "kind" : "expression",
              "left" : {
                "go-type" : 13,
                "kind" : "expression",
                "left" : {
                  "arguments" : [ ],
                  "ellipsis" : false,
                  "function" : {
                    "field" : {
                      "ident-kind" : "Func",
                      "kind" : "ident",
                      "value" : "isBlank"
                    },
                    "go-type" : 49,
                    "kind" : "expression",
                    "target" : {
                      "field" : {
                        "ident-kind" : "Var",
                        "kind" : "ident",
                        "value" : "name",
                        "variable" : 18
                      },
                      "go-type" : 28,
                      "kind" : "expression",
                      "target" : {
                        "go-type" : 47,
                        "kind" : "expression",
                        "type" : "identifier",
                        "value" : {
                          "ident-kind" : "Var",
                          "kind" : "ident",
                          "value" : "f",
                          "variable" : 17
                        }
                      },
                      "type" : "selector"
                    },
                    "type" : "selector"
                  },
                  "go-type" : 13,
                  "kind" : "expression",
                  "type" : "call"
                },
                "operator" : "||",
                "right" : {
                  "go-type" : 13,
                  "kind" : "expression",
                  "left" : {
                    "arguments" : [ ],
                    "ellipsis" : false,
                    "function" : {
                      "field" : {
                        "ident-kind" : "Func",
                        "kind" : "ident",
                        "value" : "offset"
                      },
                      "go-type" : 51,
                      "kind" : "expression",
                      "target" : {
                        "go-type" : 47,
                        "kind" : "expression",
                        "type" : "identifier",
                        "value" : {
                          "ident-kind" : "Var",
                          "kind" : "ident",
                          "value" : "f",
                          "variable" : 17
                        }
                      },
                      "type" : "selector"
                    },
                    "go-type" : 5,
                    "kind" : "expression",
                    "type" : "call"
                  },
                  "operator" : "!=",
                  "right" : {
                    "go-type" : 5,
                    "kind" : "expression",
                    "type" : "identifier",
                    "value" : {
                      "ident-kind" : "Var",
                      "kind" : "ident",
                      "value" : "memEnd",
                      "variable" : 15
                    }
                  },
                  "type" : "binary"
                },
                "type" : "binary"
              },
              "operator" : "||",
              "right" : {
                "go-type" : 13,
                "kind" : "expression",
                "left" : {
                  "go-type" : 7,
                  "kind" : "expression",
                  "left" : {
                    "field" : {
                      "ident-kind" : "Var",
                      "kind" : "ident",
                      "value" : "tflag",
                      "variable" : 4
                    },
                    "go-type" : 7,
                    "kind" : "expression",
                    "target" : {
                      "field" : {
                        "ident-kind" : "Var",
                        "kind" : "ident",
                        "value" : "typ",
                        "variable" : 19
                      },
                      "go-type" : 2,
                      "kind" : "expression",
                      "target" : {
                        "go-type" : 47,
                        "kind" : "expression",
                        "type" : "identifier",
                        "value" : {
                          "ident-kind" : "Var",
                          "kind" : "ident",
                          "value" : "f",
                          "variable" : 17
                        }
                      },
                      "type" : "selector"
                    },
                    "type" : "selector"
                  },
                  "operator" : "&",
                  "right" : {
                    "go-type" : 7,
                    "kind" : "constant",
                    "value" : {
                      "type" : "INT",
                      "value" : "8"
                    }
                  },
                  "type" : "binary"
                },
                "operator" : "==",
                "right" : {
                  "go-type" : 7,
                  "kind" : "constant",
                  "value" : {
                    "type" : "INT",
                    "value" : "0"
                  }
                },
                "type" : "binary"
              },
              "type" : "binary"
            },
            "type" : "paren"
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 207,
      "code" : "if memEnd > memStart && (f.name.isBlank() || f.offset() != memEnd || f.typ.tflag&tflagRegularMemory == 0) {\n\n\th = memhash(add(p, memStart), h, memEnd-memStart)\n\tmemStart = memEnd\n}",
      "entry" : false,
      "use-vars" : [ 15, 16, 17 ]
    }, {
      "update-vars" : [ 2 ],
      "successors" : [ 40 ],
      "in-vars" : [ 1, 15, 13, 16, 17, 2 ],
      "exit" : false,
      "out-vars" : [ 17, 2, 1, 15, 13 ],
      "decl-vars" : [ ],
      "line-start" : 205,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 5,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "h",
            "variable" : 2
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "arguments" : [ {
              "go-type" : 11,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "p",
                "variable" : 1
              }
            }, {
              "go-type" : 5,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "memStart",
                "variable" : 16
              }
            } ],
            "ellipsis" : false,
            "function" : {
              "go-type" : 40,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Func",
                "kind" : "ident",
                "value" : "add"
              }
            },
            "go-type" : 11,
            "kind" : "expression",
            "type" : "call"
          }, {
            "go-type" : 5,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "h",
              "variable" : 2
            }
          }, {
            "go-type" : 5,
            "kind" : "expression",
            "left" : {
              "go-type" : 5,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "memEnd",
                "variable" : 15
              }
            },
            "operator" : "-",
            "right" : {
              "go-type" : 5,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "memStart",
                "variable" : 16
              }
            },
            "type" : "binary"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 23,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "memhash"
            }
          },
          "go-type" : 5,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 2 ],
      "line-end" : 205,
      "code" : "h = memhash(add(p, memStart), h, memEnd-memStart)",
      "entry" : false,
      "use-vars" : [ 1, 16, 2, 15 ]
    }, {
      "update-vars" : [ 16 ],
      "successors" : [ 41 ],
      "in-vars" : [ 17, 2, 1, 15, 13 ],
      "exit" : false,
      "out-vars" : [ 13, 16, 17, 2, 1, 15 ],
      "decl-vars" : [ ],
      "line-start" : 206,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 5,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "memStart",
            "variable" : 16
          }
        } ],
        "right" : [ {
          "go-type" : 5,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "memEnd",
            "variable" : 15
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 16 ],
      "line-end" : 206,
      "code" : "memStart = memEnd",
      "entry" : false,
      "use-vars" : [ 15 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 42, 43 ],
      "in-vars" : [ 13, 16, 17, 2, 1, 15 ],
      "exit" : false,
      "out-vars" : [ 15, 13, 16, 17, 2, 1 ],
      "decl-vars" : [ ],
      "line-start" : 208,
      "ast" : {
        "condition" : {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "isBlank"
            },
            "go-type" : 49,
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "name",
                "variable" : 18
              },
              "go-type" : 28,
              "kind" : "expression",
              "target" : {
                "go-type" : 47,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "f",
                  "variable" : 17
                }
              },
              "type" : "selector"
            },
            "type" : "selector"
          },
          "go-type" : 13,
          "kind" : "expression",
          "type" : "call"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 210,
      "code" : "if f.name.isBlank() {\n\tcontinue\n}",
      "entry" : false,
      "use-vars" : [ 17 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 37 ],
      "in-vars" : [ 16, 2, 1, 15, 13 ],
      "exit" : false,
      "out-vars" : [ 16, 2, 1, 15, 13 ],
      "decl-vars" : [ ],
      "line-start" : 209,
      "ast" : {
        "kind" : "statement",
        "label" : null,
        "type" : "continue"
      },
      "assign-vars" : [ ],
      "line-end" : 209,
      "code" : "continue",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 44, 46 ],
      "in-vars" : [ 15, 13, 16, 17, 2, 1 ],
      "exit" : false,
      "out-vars" : [ 16, 17, 2, 1, 15, 13 ],
      "decl-vars" : [ ],
      "line-start" : 211,
      "ast" : {
        "condition" : {
          "go-type" : 20,
          "kind" : "expression",
          "left" : {
            "go-type" : 7,
            "kind" : "expression",
            "left" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "tflag",
                "variable" : 4
              },
              "go-type" : 7,
              "kind" : "expression",
              "target" : {
                "field" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "typ",
                  "variable" : 19
                },
                "go-type" : 2,
                "kind" : "expression",
                "target" : {
                  "go-type" : 47,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "f",
                    "variable" : 17
                  }
                },
                "type" : "selector"
              },
              "type" : "selector"
            },
            "operator" : "&",
            "right" : {
              "go-type" : 7,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "8"
              }
            },
            "type" : "binary"
          },
          "operator" : "==",
          "right" : {
            "go-type" : 7,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 214,
      "code" : "if f.typ.tflag&tflagRegularMemory == 0 {\n\th = typehash(f.typ, add(p, f.offset()), h)\n\tcontinue\n}",
      "entry" : false,
      "use-vars" : [ 17 ]
    }, {
      "update-vars" : [ 2 ],
      "successors" : [ 45 ],
      "in-vars" : [ 16, 17, 2, 1, 15, 13 ],
      "exit" : false,
      "out-vars" : [ 15, 13, 16, 2, 1 ],
      "decl-vars" : [ ],
      "line-start" : 212,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 5,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "h",
            "variable" : 2
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "typ",
              "variable" : 19
            },
            "go-type" : 2,
            "kind" : "expression",
            "target" : {
              "go-type" : 47,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "f",
                "variable" : 17
              }
            },
            "type" : "selector"
          }, {
            "arguments" : [ {
              "go-type" : 11,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "p",
                "variable" : 1
              }
            }, {
              "arguments" : [ ],
              "ellipsis" : false,
              "function" : {
                "field" : {
                  "ident-kind" : "Func",
                  "kind" : "ident",
                  "value" : "offset"
                },
                "go-type" : 51,
                "kind" : "expression",
                "target" : {
                  "go-type" : 47,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "f",
                    "variable" : 17
                  }
                },
                "type" : "selector"
              },
              "go-type" : 5,
              "kind" : "expression",
              "type" : "call"
            } ],
            "ellipsis" : false,
            "function" : {
              "go-type" : 40,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Func",
                "kind" : "ident",
                "value" : "add"
              }
            },
            "go-type" : 11,
            "kind" : "expression",
            "type" : "call"
          }, {
            "go-type" : 5,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "h",
              "variable" : 2
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 0,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "typehash"
            }
          },
          "go-type" : 5,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 2 ],
      "line-end" : 212,
      "code" : "h = typehash(f.typ, add(p, f.offset()), h)",
      "entry" : false,
      "use-vars" : [ 1, 17, 2 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 37 ],
      "in-vars" : [ 15, 13, 16, 2, 1 ],
      "exit" : false,
      "out-vars" : [ 13, 16, 2, 1, 15 ],
      "decl-vars" : [ ],
      "line-start" : 213,
      "ast" : {
        "kind" : "statement",
        "label" : null,
        "type" : "continue"
      },
      "assign-vars" : [ ],
      "line-end" : 213,
      "code" : "continue",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 47, 48 ],
      "in-vars" : [ 13, 16, 17, 2, 1, 15 ],
      "exit" : false,
      "out-vars" : [ 1, 13, 16, 17, 2 ],
      "decl-vars" : [ ],
      "line-start" : 215,
      "ast" : {
        "condition" : {
          "go-type" : 20,
          "kind" : "expression",
          "left" : {
            "go-type" : 5,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "memStart",
              "variable" : 16
            }
          },
          "operator" : "==",
          "right" : {
            "go-type" : 5,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "memEnd",
              "variable" : 15
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 217,
      "code" : "if memStart == memEnd {\n\tmemStart = f.offset()\n}",
      "entry" : false,
      "use-vars" : [ 15, 16 ]
    }, {
      "update-vars" : [ 16 ],
      "successors" : [ 48 ],
      "in-vars" : [ 17, 2, 1, 13 ],
      "exit" : false,
      "out-vars" : [ 16, 17, 2, 1, 13 ],
      "decl-vars" : [ ],
      "line-start" : 216,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 5,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "memStart",
            "variable" : 16
          }
        } ],
        "right" : [ {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "offset"
            },
            "go-type" : 51,
            "kind" : "expression",
            "target" : {
              "go-type" : 47,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "f",
                "variable" : 17
              }
            },
            "type" : "selector"
          },
          "go-type" : 5,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 16 ],
      "line-end" : 216,
      "code" : "memStart = f.offset()",
      "entry" : false,
      "use-vars" : [ 17 ]
    }, {
      "update-vars" : [ 15 ],
      "successors" : [ 37 ],
      "in-vars" : [ 17, 2, 1, 13, 16 ],
      "exit" : false,
      "out-vars" : [ 16, 2, 1, 15, 13 ],
      "decl-vars" : [ ],
      "line-start" : 218,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 5,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "memEnd",
            "variable" : 15
          }
        } ],
        "right" : [ {
          "go-type" : 5,
          "kind" : "expression",
          "left" : {
            "arguments" : [ ],
            "ellipsis" : false,
            "function" : {
              "field" : {
                "ident-kind" : "Func",
                "kind" : "ident",
                "value" : "offset"
              },
              "go-type" : 51,
              "kind" : "expression",
              "target" : {
                "go-type" : 47,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "f",
                  "variable" : 17
                }
              },
              "type" : "selector"
            },
            "go-type" : 5,
            "kind" : "expression",
            "type" : "call"
          },
          "operator" : "+",
          "right" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "size",
              "variable" : 5
            },
            "go-type" : 5,
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "typ",
                "variable" : 19
              },
              "go-type" : 2,
              "kind" : "expression",
              "target" : {
                "go-type" : 47,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "f",
                  "variable" : 17
                }
              },
              "type" : "selector"
            },
            "type" : "selector"
          },
          "type" : "binary"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 15 ],
      "line-end" : 218,
      "code" : "memEnd = f.offset() + f.typ.size",
      "entry" : false,
      "use-vars" : [ 17 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 50, 51 ],
      "in-vars" : [ 16, 2, 1, 15 ],
      "exit" : false,
      "out-vars" : [ 16, 2, 1, 15 ],
      "decl-vars" : [ ],
      "line-start" : 220,
      "ast" : {
        "condition" : {
          "go-type" : 20,
          "kind" : "expression",
          "left" : {
            "go-type" : 5,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "memEnd",
              "variable" : 15
            }
          },
          "operator" : ">",
          "right" : {
            "go-type" : 5,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "memStart",
              "variable" : 16
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 222,
      "code" : "if memEnd > memStart {\n\th = memhash(add(p, memStart), h, memEnd-memStart)\n}",
      "entry" : false,
      "use-vars" : [ 15, 16 ]
    }, {
      "update-vars" : [ 2 ],
      "successors" : [ 51 ],
      "in-vars" : [ 15, 16, 2, 1 ],
      "exit" : false,
      "out-vars" : [ 2 ],
      "decl-vars" : [ ],
      "line-start" : 221,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 5,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "h",
            "variable" : 2
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "arguments" : [ {
              "go-type" : 11,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "p",
                "variable" : 1
              }
            }, {
              "go-type" : 5,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "memStart",
                "variable" : 16
              }
            } ],
            "ellipsis" : false,
            "function" : {
              "go-type" : 40,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Func",
                "kind" : "ident",
                "value" : "add"
              }
            },
            "go-type" : 11,
            "kind" : "expression",
            "type" : "call"
          }, {
            "go-type" : 5,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "h",
              "variable" : 2
            }
          }, {
            "go-type" : 5,
            "kind" : "expression",
            "left" : {
              "go-type" : 5,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "memEnd",
                "variable" : 15
              }
            },
            "operator" : "-",
            "right" : {
              "go-type" : 5,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "memStart",
                "variable" : 16
              }
            },
            "type" : "binary"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 23,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "memhash"
            }
          },
          "go-type" : 5,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 2 ],
      "line-end" : 221,
      "code" : "h = memhash(add(p, memStart), h, memEnd-memStart)",
      "entry" : false,
      "use-vars" : [ 15, 1, 16, 2 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 2 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 223,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 5,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "h",
            "variable" : 2
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 223,
      "code" : "return h",
      "entry" : false,
      "use-vars" : [ 2 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 53 ],
      "in-vars" : [ 0 ],
      "exit" : false,
      "out-vars" : [ 0 ],
      "decl-vars" : [ ],
      "line-start" : 224,
      "ast" : {
        "expressions" : [ ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 227,
      "code" : "default:\n\n\tpanic(errorString(\"hash of unhashable type \" + t.string()))",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 0 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 227,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "coerced-to" : {
              "go-type" : 55,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 55,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "errorString"
              }
            },
            "go-type" : 55,
            "kind" : "expression",
            "target" : {
              "go-type" : 56,
              "kind" : "expression",
              "left" : {
                "go-type" : 56,
                "kind" : "constant",
                "value" : {
                  "type" : "STRING",
                  "value" : "hash of unhashable type "
                }
              },
              "operator" : "+",
              "right" : {
                "arguments" : [ ],
                "ellipsis" : false,
                "function" : {
                  "field" : {
                    "ident-kind" : "Func",
                    "kind" : "ident",
                    "value" : "string"
                  },
                  "go-type" : 57,
                  "kind" : "expression",
                  "target" : {
                    "go-type" : 2,
                    "kind" : "expression",
                    "type" : "identifier",
                    "value" : {
                      "ident-kind" : "Var",
                      "kind" : "ident",
                      "value" : "t",
                      "variable" : 0
                    }
                  },
                  "type" : "selector"
                },
                "go-type" : 56,
                "kind" : "expression",
                "type" : "call"
              },
              "type" : "binary"
            },
            "type" : "cast"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 52,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Builtin",
              "kind" : "ident",
              "value" : "panic"
            }
          },
          "go-type" : 50,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 227,
      "code" : "panic(errorString(\"hash of unhashable type \" + t.string()))",
      "entry" : false,
      "use-vars" : [ 0 ]
    } ],
    "code" : "// typehash computes the hash of the object of type t at address p.\n// h is the seed.\n// This function is seldom used. Most maps use for hashing either\n// fixed functions (e.g. f32hash) or compiler-generated functions\n// (e.g. for a type like struct { x, y string }). This implementation\n// is slower but more general and is used for hashing interface types\n// (called from interhash or nilinterhash, above) or for hashing in\n// maps generated by reflect.MapOf (reflect_typehash, below).\n// Note: this function must match the compiler generated\n// functions exactly. See issue 37716.\nfunc typehash(t *_type, p unsafe.Pointer, h uintptr) uintptr {\n\tif t.tflag&tflagRegularMemory != 0 {\n\n\t\tswitch t.size {\n\t\tcase 4:\n\t\t\treturn memhash32(p, h)\n\t\tcase 8:\n\t\t\treturn memhash64(p, h)\n\t\tdefault:\n\t\t\treturn memhash(p, h, t.size)\n\t\t}\n\t}\n\tswitch t.kind & kindMask {\n\tcase kindFloat32:\n\t\treturn f32hash(p, h)\n\tcase kindFloat64:\n\t\treturn f64hash(p, h)\n\tcase kindComplex64:\n\t\treturn c64hash(p, h)\n\tcase kindComplex128:\n\t\treturn c128hash(p, h)\n\tcase kindString:\n\t\treturn strhash(p, h)\n\tcase kindInterface:\n\t\ti := (*interfacetype)(unsafe.Pointer(t))\n\t\tif len(i.mhdr) == 0 {\n\t\t\treturn nilinterhash(p, h)\n\t\t}\n\t\treturn interhash(p, h)\n\tcase kindArray:\n\t\ta := (*arraytype)(unsafe.Pointer(t))\n\t\tfor i := uintptr(0); i < a.len; i++ {\n\t\t\th = typehash(a.elem, add(p, i*a.elem.size), h)\n\t\t}\n\t\treturn h\n\tcase kindStruct:\n\t\ts := (*structtype)(unsafe.Pointer(t))\n\t\tmemStart := uintptr(0)\n\t\tmemEnd := uintptr(0)\n\t\tfor _, f := range s.fields {\n\t\t\tif memEnd > memStart && (f.name.isBlank() || f.offset() != memEnd || f.typ.tflag&tflagRegularMemory == 0) {\n\n\t\t\t\th = memhash(add(p, memStart), h, memEnd-memStart)\n\t\t\t\tmemStart = memEnd\n\t\t\t}\n\t\t\tif f.name.isBlank() {\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tif f.typ.tflag&tflagRegularMemory == 0 {\n\t\t\t\th = typehash(f.typ, add(p, f.offset()), h)\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tif memStart == memEnd {\n\t\t\t\tmemStart = f.offset()\n\t\t\t}\n\t\t\tmemEnd = f.offset() + f.typ.size\n\t\t}\n\t\tif memEnd > memStart {\n\t\t\th = memhash(add(p, memStart), h, memEnd-memStart)\n\t\t}\n\t\treturn h\n\tdefault:\n\n\t\tpanic(errorString(\"hash of unhashable type \" + t.string()))\n\t}\n}",
    "defines" : [ 0 ],
    "functions" : [ {
      "name" : "typehash",
      "package" : 0,
      "type" : 0,
      "exported" : false
    }, {
      "name" : "memhash32",
      "package" : 0,
      "type" : 21,
      "exported" : false
    }, {
      "name" : "memhash64",
      "package" : 0,
      "type" : 21,
      "exported" : false
    }, {
      "name" : "memhash",
      "package" : 0,
      "type" : 23,
      "exported" : false
    }, {
      "name" : "f32hash",
      "package" : 0,
      "type" : 21,
      "exported" : false
    }, {
      "name" : "f64hash",
      "package" : 0,
      "type" : 21,
      "exported" : false
    }, {
      "name" : "c64hash",
      "package" : 0,
      "type" : 21,
      "exported" : false
    }, {
      "name" : "c128hash",
      "package" : 0,
      "type" : 21,
      "exported" : false
    }, {
      "name" : "strhash",
      "package" : 0,
      "type" : 21,
      "exported" : false
    }, {
      "name" : "nilinterhash",
      "package" : 0,
      "type" : 21,
      "exported" : false
    }, {
      "name" : "interhash",
      "package" : 0,
      "type" : 21,
      "exported" : false
    }, {
      "name" : "add",
      "package" : 0,
      "type" : 40,
      "exported" : false
    }, {
      "name" : "isBlank",
      "package" : 0,
      "type" : 49,
      "exported" : false
    }, {
      "name" : "offset",
      "package" : 0,
      "type" : 51,
      "exported" : false
    }, {
      "name" : "string",
      "package" : 0,
      "type" : 57,
      "exported" : false
    } ],
    "line-end" : 229,
    "line-start" : 163,
    "names" : [ "typehash" ],
    "package" : 0,
    "packages" : [ {
      "name" : "runtime",
      "path" : "runtime"
    }, {
      "name" : "unsafe",
      "path" : "unsafe"
    } ],
    "params" : [ 0, 1, 2 ],
    "receivers" : [ ],
    "results" : [ 3 ],
    "type" : "function",
    "types" : [ {
      "name" : "func(t *runtime._type, p unsafe.Pointer, h uintptr) uintptr",
      "params" : 1,
      "recv" : -1,
      "results" : 19,
      "type" : "Signature",
      "underlying" : 0,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "t",
        "type" : 2
      }, {
        "name" : "p",
        "type" : 11
      }, {
        "name" : "h",
        "type" : 5
      } ],
      "name" : "(t *runtime._type, p unsafe.Pointer, h uintptr)",
      "type" : "Tuple",
      "underlying" : 1
    }, {
      "elem" : 3,
      "name" : "*runtime._type",
      "type" : "Pointer",
      "underlying" : 2
    }, {
      "local-name" : "_type",
      "name" : "runtime._type",
      "package" : 0,
      "type" : "Named",
      "underlying" : 4
    }, {
      "fields" : [ {
        "name" : "size",
        "type" : 5
      }, {
        "name" : "ptrdata",
        "type" : 5
      }, {
        "name" : "hash",
        "type" : 6
      }, {
        "name" : "tflag",
        "type" : 7
      }, {
        "name" : "align",
        "type" : 8
      }, {
        "name" : "fieldAlign",
        "type" : 8
      }, {
        "name" : "kind",
        "type" : 8
      }, {
        "name" : "equal",
        "type" : 9
      }, {
        "name" : "gcdata",
        "type" : 14
      }, {
        "name" : "str",
        "type" : 16
      }, {
        "name" : "ptrToThis",
        "type" : 18
      } ],
      "name" : "struct{size uintptr; ptrdata uintptr; hash uint32; tflag runtime.tflag; align uint8; fieldAlign uint8; kind uint8; equal func(unsafe.Pointer, unsafe.Pointer) bool; gcdata *byte; str runtime.nameOff; ptrToThis runtime.typeOff}",
      "type" : "Struct",
      "underlying" : 4
    }, {
      "name" : "uintptr",
      "type" : "Basic",
      "underlying" : 5
    }, {
      "name" : "uint32",
      "type" : "Basic",
      "underlying" : 6
    }, {
      "local-name" : "tflag",
      "name" : "runtime.tflag",
      "package" : 0,
      "type" : "Named",
      "underlying" : 8
    }, {
      "name" : "uint8",
      "type" : "Basic",
      "underlying" : 8
    }, {
      "name" : "func(unsafe.Pointer, unsafe.Pointer) bool",
      "params" : 10,
      "recv" : -1,
      "results" : 12,
      "type" : "Signature",
      "underlying" : 9,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 11
      }, {
        "name" : "",
        "type" : 11
      } ],
      "name" : "(unsafe.Pointer, unsafe.Pointer)",
      "type" : "Tuple",
      "underlying" : 10
    }, {
      "local-name" : "Pointer",
      "name" : "unsafe.Pointer",
      "package" : 1,
      "type" : "Basic",
      "underlying" : 11
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 13
      } ],
      "name" : "(bool)",
      "type" : "Tuple",
      "underlying" : 12
    }, {
      "name" : "bool",
      "type" : "Basic",
      "underlying" : 13
    }, {
      "elem" : 15,
      "name" : "*byte",
      "type" : "Pointer",
      "underlying" : 14
    }, {
      "name" : "byte",
      "type" : "Basic",
      "underlying" : 15
    }, {
      "local-name" : "nameOff",
      "name" : "runtime.nameOff",
      "package" : 0,
      "type" : "Named",
      "underlying" : 17
    }, {
      "name" : "int32",
      "type" : "Basic",
      "underlying" : 17
    }, {
      "local-name" : "typeOff",
      "name" : "runtime.typeOff",
      "package" : 0,
      "type" : "Named",
      "underlying" : 17
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 5
      } ],
      "name" : "(uintptr)",
      "type" : "Tuple",
      "underlying" : 19
    }, {
      "name" : "untyped bool",
      "type" : "Basic",
      "underlying" : 20
    }, {
      "name" : "func(p unsafe.Pointer, h uintptr) uintptr",
      "params" : 22,
      "recv" : -1,
      "results" : 19,
      "type" : "Signature",
      "underlying" : 21,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "p",
        "type" : 11
      }, {
        "name" : "h",
        "type" : 5
      } ],
      "name" : "(p unsafe.Pointer, h uintptr)",
      "type" : "Tuple",
      "underlying" : 22
    }, {
      "name" : "func(p unsafe.Pointer, h uintptr, s uintptr) uintptr",
      "params" : 24,
      "recv" : -1,
      "results" : 19,
      "type" : "Signature",
      "underlying" : 23,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "p",
        "type" : 11
      }, {
        "name" : "h",
        "type" : 5
      }, {
        "name" : "s",
        "type" : 5
      } ],
      "name" : "(p unsafe.Pointer, h uintptr, s uintptr)",
      "type" : "Tuple",
      "underlying" : 24
    }, {
      "elem" : 26,
      "name" : "*runtime.interfacetype",
      "type" : "Pointer",
      "underlying" : 25
    }, {
      "local-name" : "interfacetype",
      "name" : "runtime.interfacetype",
      "package" : 0,
      "type" : "Named",
      "underlying" : 27
    }, {
      "fields" : [ {
        "name" : "typ",
        "type" : 3
      }, {
        "name" : "pkgpath",
        "type" : 28
      }, {
        "name" : "mhdr",
        "type" : 30
      } ],
      "name" : "struct{typ runtime._type; pkgpath runtime.name; mhdr []runtime.imethod}",
      "type" : "Struct",
      "underlying" : 27
    }, {
      "local-name" : "name",
      "name" : "runtime.name",
      "package" : 0,
      "type" : "Named",
      "underlying" : 29
    }, {
      "fields" : [ {
        "name" : "bytes",
        "type" : 14
      } ],
      "name" : "struct{bytes *byte}",
      "type" : "Struct",
      "underlying" : 29
    }, {
      "elem" : 31,
      "name" : "[]runtime.imethod",
      "type" : "Slice",
      "underlying" : 30
    }, {
      "local-name" : "imethod",
      "name" : "runtime.imethod",
      "package" : 0,
      "type" : "Named",
      "underlying" : 32
    }, {
      "fields" : [ {
        "name" : "name",
        "type" : 16
      }, {
        "name" : "ityp",
        "type" : 18
      } ],
      "name" : "struct{name runtime.nameOff; ityp runtime.typeOff}",
      "type" : "Struct",
      "underlying" : 32
    }, {
      "name" : "int",
      "type" : "Basic",
      "underlying" : 33
    }, {
      "name" : "func([]runtime.imethod) int",
      "params" : 35,
      "recv" : -1,
      "results" : 36,
      "type" : "Signature",
      "underlying" : 34,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 30
      } ],
      "name" : "([]runtime.imethod)",
      "type" : "Tuple",
      "underlying" : 35
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 33
      } ],
      "name" : "(int)",
      "type" : "Tuple",
      "underlying" : 36
    }, {
      "elem" : 38,
      "name" : "*runtime.arraytype",
      "type" : "Pointer",
      "underlying" : 37
    }, {
      "local-name" : "arraytype",
      "name" : "runtime.arraytype",
      "package" : 0,
      "type" : "Named",
      "underlying" : 39
    }, {
      "fields" : [ {
        "name" : "typ",
        "type" : 3
      }, {
        "name" : "elem",
        "type" : 2
      }, {
        "name" : "slice",
        "type" : 2
      }, {
        "name" : "len",
        "type" : 5
      } ],
      "name" : "struct{typ runtime._type; elem *runtime._type; slice *runtime._type; len uintptr}",
      "type" : "Struct",
      "underlying" : 39
    }, {
      "name" : "func(p unsafe.Pointer, x uintptr) unsafe.Pointer",
      "params" : 41,
      "recv" : -1,
      "results" : 42,
      "type" : "Signature",
      "underlying" : 40,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "p",
        "type" : 11
      }, {
        "name" : "x",
        "type" : 5
      } ],
      "name" : "(p unsafe.Pointer, x uintptr)",
      "type" : "Tuple",
      "underlying" : 41
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 11
      } ],
      "name" : "(unsafe.Pointer)",
      "type" : "Tuple",
      "underlying" : 42
    }, {
      "elem" : 44,
      "name" : "*runtime.structtype",
      "type" : "Pointer",
      "underlying" : 43
    }, {
      "local-name" : "structtype",
      "name" : "runtime.structtype",
      "package" : 0,
      "type" : "Named",
      "underlying" : 45
    }, {
      "fields" : [ {
        "name" : "typ",
        "type" : 3
      }, {
        "name" : "pkgPath",
        "type" : 28
      }, {
        "name" : "fields",
        "type" : 46
      } ],
      "name" : "struct{typ runtime._type; pkgPath runtime.name; fields []runtime.structfield}",
      "type" : "Struct",
      "underlying" : 45
    }, {
      "elem" : 47,
      "name" : "[]runtime.structfield",
      "type" : "Slice",
      "underlying" : 46
    }, {
      "local-name" : "structfield",
      "name" : "runtime.structfield",
      "package" : 0,
      "type" : "Named",
      "underlying" : 48
    }, {
      "fields" : [ {
        "name" : "name",
        "type" : 28
      }, {
        "name" : "typ",
        "type" : 2
      }, {
        "name" : "offsetAnon",
        "type" : 5
      } ],
      "name" : "struct{name runtime.name; typ *runtime._type; offsetAnon uintptr}",
      "type" : "Struct",
      "underlying" : 48
    }, {
      "name" : "func() bool",
      "params" : 50,
      "recv" : -1,
      "results" : 12,
      "type" : "Signature",
      "underlying" : 49,
      "variadic" : false
    }, {
      "fields" : [ ],
      "name" : "()",
      "type" : "Tuple",
      "underlying" : 50
    }, {
      "name" : "func() uintptr",
      "params" : 50,
      "recv" : -1,
      "results" : 19,
      "type" : "Signature",
      "underlying" : 51,
      "variadic" : false
    }, {
      "name" : "func(interface{})",
      "params" : 53,
      "recv" : -1,
      "results" : 50,
      "type" : "Signature",
      "underlying" : 52,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 54
      } ],
      "name" : "(interface{})",
      "type" : "Tuple",
      "underlying" : 53
    }, {
      "methods" : [ ],
      "name" : "interface{}",
      "type" : "Interface",
      "underlying" : 54
    }, {
      "local-name" : "errorString",
      "name" : "runtime.errorString",
      "package" : 0,
      "type" : "Named",
      "underlying" : 56
    }, {
      "name" : "string",
      "type" : "Basic",
      "underlying" : 56
    }, {
      "name" : "func() string",
      "params" : 50,
      "recv" : -1,
      "results" : 58,
      "type" : "Signature",
      "underlying" : 57,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 56
      } ],
      "name" : "(string)",
      "type" : "Tuple",
      "underlying" : 58
    } ],
    "variables" : [ {
      "name" : "t",
      "package" : 0,
      "type" : 2,
      "exported" : false
    }, {
      "name" : "p",
      "package" : 0,
      "type" : 11,
      "exported" : false
    }, {
      "name" : "h",
      "package" : 0,
      "type" : 5,
      "exported" : false
    }, {
      "name" : "[res0]",
      "package" : 0,
      "type" : 5,
      "exported" : false
    }, {
      "name" : "tflag",
      "package" : 0,
      "type" : 7,
      "exported" : false
    }, {
      "name" : "size",
      "package" : 0,
      "type" : 5,
      "exported" : false
    }, {
      "name" : "kind",
      "package" : 0,
      "type" : 8,
      "exported" : false
    }, {
      "name" : "i",
      "package" : 0,
      "type" : 25,
      "exported" : false
    }, {
      "name" : "mhdr",
      "package" : 0,
      "type" : 30,
      "exported" : false
    }, {
      "name" : "i",
      "package" : 0,
      "type" : 5,
      "exported" : false
    }, {
      "name" : "a",
      "package" : 0,
      "type" : 37,
      "exported" : false
    }, {
      "name" : "len",
      "package" : 0,
      "type" : 5,
      "exported" : false
    }, {
      "name" : "elem",
      "package" : 0,
      "type" : 2,
      "exported" : false
    }, {
      "name" : "s",
      "package" : 0,
      "type" : 43,
      "exported" : false
    }, {
      "name" : "fields",
      "package" : 0,
      "type" : 46,
      "exported" : false
    }, {
      "name" : "memEnd",
      "package" : 0,
      "type" : 5,
      "exported" : false
    }, {
      "name" : "memStart",
      "package" : 0,
      "type" : 5,
      "exported" : false
    }, {
      "name" : "f",
      "package" : 0,
      "type" : 47,
      "exported" : false
    }, {
      "name" : "name",
      "package" : 0,
      "type" : 28,
      "exported" : false
    }, {
      "name" : "typ",
      "package" : 0,
      "type" : 2,
      "exported" : false
    }, {
      "name" : "_",
      "package" : 0,
      "type" : 33,
      "exported" : false
    } ]
  },
  "go-version" : "1.14.3"
}