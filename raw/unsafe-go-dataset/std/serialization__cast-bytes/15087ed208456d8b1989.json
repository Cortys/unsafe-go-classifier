{
  "usage" : {
    "file" : "syscall_linux.go",
    "label1" : "cast-bytes",
    "label2" : "serialization",
    "line" : "487",
    "module" : "std",
    "pkg" : "syscall",
    "project" : "kubernetes/kubernetes",
    "snippet" : "bytes := (*[len(pp.Path)]byte)(unsafe.Pointer(&pp.Path[0]))[0:n]",
    "version" : "std"
  },
  "cfg" : {
    "blocks" : [ {
      "update-vars" : [ ],
      "successors" : [ 2 ],
      "in-vars" : [ 2 ],
      "exit" : false,
      "out-vars" : [ 2 ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[entry]",
      "entry" : true,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ ],
      "in-vars" : [ ],
      "exit" : true,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[exit]",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 3, 11, 24, 35, 45, 56 ],
      "in-vars" : [ 2 ],
      "exit" : false,
      "out-vars" : [ 2 ],
      "decl-vars" : [ ],
      "line-start" : 443,
      "ast" : {
        "condition" : {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "Family",
            "variable" : 6
          },
          "go-type" : 7,
          "kind" : "expression",
          "target" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "Addr",
              "variable" : 5
            },
            "go-type" : 5,
            "kind" : "expression",
            "target" : {
              "go-type" : 2,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "rsa",
                "variable" : 2
              }
            },
            "type" : "selector"
          },
          "type" : "selector"
        },
        "kind" : "statement",
        "type" : "switch"
      },
      "assign-vars" : [ ],
      "line-end" : 511,
      "code" : "switch rsa.Addr.Family {\ncase AF_NETLINK:\n\tpp := (*RawSockaddrNetlink)(unsafe.Pointer(rsa))\n\tsa := new(SockaddrNetlink)\n\tsa.Family = pp.Family\n\tsa.Pad = pp.Pad\n\tsa.Pid = pp.Pid\n\tsa.Groups = pp.Groups\n\treturn sa, nil\n\ncase AF_PACKET:\n\tpp := (*RawSockaddrLinklayer)(unsafe.Pointer(rsa))\n\tsa := new(SockaddrLinklayer)\n\tsa.Protocol = pp.Protocol\n\tsa.Ifindex = int(pp.Ifindex)\n\tsa.Hatype = pp.Hatype\n\tsa.Pkttype = pp.Pkttype\n\tsa.Halen = pp.Halen\n\tfor i := 0; i < len(sa.Addr); i++ {\n\t\tsa.Addr[i] = pp.Addr[i]\n\t}\n\treturn sa, nil\n\ncase AF_UNIX:\n\tpp := (*RawSockaddrUnix)(unsafe.Pointer(rsa))\n\tsa := new(SockaddrUnix)\n\tif pp.Path[0] == 0 {\n\n\t\tpp.Path[0] = '@'\n\t}\n\n\tn := 0\n\tfor n < len(pp.Path) && pp.Path[n] != 0 {\n\t\tn++\n\t}\n\tbytes := (*[len(pp.Path)]byte)(unsafe.Pointer(&pp.Path[0]))[0:n]\n\tsa.Name = string(bytes)\n\treturn sa, nil\n\ncase AF_INET:\n\tpp := (*RawSockaddrInet4)(unsafe.Pointer(rsa))\n\tsa := new(SockaddrInet4)\n\tp := (*[2]byte)(unsafe.Pointer(&pp.Port))\n\tsa.Port = int(p[0])<<8 + int(p[1])\n\tfor i := 0; i < len(sa.Addr); i++ {\n\t\tsa.Addr[i] = pp.Addr[i]\n\t}\n\treturn sa, nil\n\ncase AF_INET6:\n\tpp := (*RawSockaddrInet6)(unsafe.Pointer(rsa))\n\tsa := new(SockaddrInet6)\n\tp := (*[2]byte)(unsafe.Pointer(&pp.Port))\n\tsa.Port = int(p[0])<<8 + int(p[1])\n\tsa.ZoneId = pp.Scope_id\n\tfor i := 0; i < len(sa.Addr); i++ {\n\t\tsa.Addr[i] = pp.Addr[i]\n\t}\n\treturn sa, nil\n}",
      "entry" : false,
      "use-vars" : [ 2 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 4 ],
      "in-vars" : [ 2 ],
      "exit" : false,
      "out-vars" : [ 2 ],
      "decl-vars" : [ ],
      "line-start" : 444,
      "ast" : {
        "expressions" : [ {
          "go-type" : 7,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "16"
          }
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 451,
      "code" : "case AF_NETLINK:\n\tpp := (*RawSockaddrNetlink)(unsafe.Pointer(rsa))\n\tsa := new(SockaddrNetlink)\n\tsa.Family = pp.Family\n\tsa.Pad = pp.Pad\n\tsa.Pid = pp.Pid\n\tsa.Groups = pp.Groups\n\treturn sa, nil",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 5 ],
      "in-vars" : [ 2 ],
      "exit" : false,
      "out-vars" : [ 9 ],
      "decl-vars" : [ 9 ],
      "line-start" : 445,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "pp"
          }
        } ],
        "right" : [ {
          "coerced-to" : {
            "contained" : {
              "go-type" : 26,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 26,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "RawSockaddrNetlink"
              }
            },
            "go-type" : 25,
            "kind" : "type",
            "type" : "pointer"
          },
          "go-type" : 25,
          "kind" : "expression",
          "target" : {
            "coerced-to" : {
              "go-type" : 17,
              "kind" : "type",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 1,
                "value" : "unsafe"
              },
              "type" : "identifier",
              "value" : {
                "go-type" : 17,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "Pointer"
              }
            },
            "go-type" : 17,
            "kind" : "expression",
            "target" : {
              "go-type" : 2,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "rsa",
                "variable" : 2
              }
            },
            "type" : "cast"
          },
          "type" : "cast"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 445,
      "code" : "pp := (*RawSockaddrNetlink)(unsafe.Pointer(rsa))",
      "entry" : false,
      "use-vars" : [ 2 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 6 ],
      "in-vars" : [ 9 ],
      "exit" : false,
      "out-vars" : [ 7, 9 ],
      "decl-vars" : [ 7 ],
      "line-start" : 446,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "sa"
          }
        } ],
        "right" : [ {
          "argument" : {
            "go-type" : 29,
            "kind" : "type",
            "type" : "identifier",
            "value" : {
              "go-type" : 29,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "SockaddrNetlink"
            }
          },
          "go-type" : 28,
          "kind" : "expression",
          "type" : "new"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 446,
      "code" : "sa := new(SockaddrNetlink)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ 7 ],
      "successors" : [ 7 ],
      "in-vars" : [ 9, 7 ],
      "exit" : false,
      "out-vars" : [ 7, 9 ],
      "decl-vars" : [ ],
      "line-start" : 447,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "Family",
            "variable" : 8
          },
          "go-type" : 7,
          "kind" : "expression",
          "target" : {
            "go-type" : 28,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "sa",
              "variable" : 7
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "Family",
            "variable" : 10
          },
          "go-type" : 7,
          "kind" : "expression",
          "target" : {
            "go-type" : 25,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "pp",
              "variable" : 9
            }
          },
          "type" : "selector"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 447,
      "code" : "sa.Family = pp.Family",
      "entry" : false,
      "use-vars" : [ 7, 9 ]
    }, {
      "update-vars" : [ 7 ],
      "successors" : [ 8 ],
      "in-vars" : [ 7, 9 ],
      "exit" : false,
      "out-vars" : [ 7, 9 ],
      "decl-vars" : [ ],
      "line-start" : 448,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "Pad",
            "variable" : 11
          },
          "go-type" : 7,
          "kind" : "expression",
          "target" : {
            "go-type" : 28,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "sa",
              "variable" : 7
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "Pad",
            "variable" : 12
          },
          "go-type" : 7,
          "kind" : "expression",
          "target" : {
            "go-type" : 25,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "pp",
              "variable" : 9
            }
          },
          "type" : "selector"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 448,
      "code" : "sa.Pad = pp.Pad",
      "entry" : false,
      "use-vars" : [ 9, 7 ]
    }, {
      "update-vars" : [ 7 ],
      "successors" : [ 9 ],
      "in-vars" : [ 7, 9 ],
      "exit" : false,
      "out-vars" : [ 9, 7 ],
      "decl-vars" : [ ],
      "line-start" : 449,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "Pid",
            "variable" : 13
          },
          "go-type" : 19,
          "kind" : "expression",
          "target" : {
            "go-type" : 28,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "sa",
              "variable" : 7
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "Pid",
            "variable" : 14
          },
          "go-type" : 19,
          "kind" : "expression",
          "target" : {
            "go-type" : 25,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "pp",
              "variable" : 9
            }
          },
          "type" : "selector"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 449,
      "code" : "sa.Pid = pp.Pid",
      "entry" : false,
      "use-vars" : [ 7, 9 ]
    }, {
      "update-vars" : [ 7 ],
      "successors" : [ 10 ],
      "in-vars" : [ 7, 9 ],
      "exit" : false,
      "out-vars" : [ 7 ],
      "decl-vars" : [ ],
      "line-start" : 450,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "Groups",
            "variable" : 15
          },
          "go-type" : 19,
          "kind" : "expression",
          "target" : {
            "go-type" : 28,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "sa",
              "variable" : 7
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "Groups",
            "variable" : 16
          },
          "go-type" : 19,
          "kind" : "expression",
          "target" : {
            "go-type" : 25,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "pp",
              "variable" : 9
            }
          },
          "type" : "selector"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 450,
      "code" : "sa.Groups = pp.Groups",
      "entry" : false,
      "use-vars" : [ 9, 7 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 7 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 451,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 28,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "sa",
            "variable" : 7
          }
        }, {
          "go-type" : 31,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Nil",
            "kind" : "ident",
            "value" : "nil"
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 451,
      "code" : "return sa, nil",
      "entry" : false,
      "use-vars" : [ 7 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 12 ],
      "in-vars" : [ 2 ],
      "exit" : false,
      "out-vars" : [ 2 ],
      "decl-vars" : [ ],
      "line-start" : 453,
      "ast" : {
        "expressions" : [ {
          "go-type" : 7,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "17"
          }
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 464,
      "code" : "case AF_PACKET:\n\tpp := (*RawSockaddrLinklayer)(unsafe.Pointer(rsa))\n\tsa := new(SockaddrLinklayer)\n\tsa.Protocol = pp.Protocol\n\tsa.Ifindex = int(pp.Ifindex)\n\tsa.Hatype = pp.Hatype\n\tsa.Pkttype = pp.Pkttype\n\tsa.Halen = pp.Halen\n\tfor i := 0; i < len(sa.Addr); i++ {\n\t\tsa.Addr[i] = pp.Addr[i]\n\t}\n\treturn sa, nil",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 13 ],
      "in-vars" : [ 2 ],
      "exit" : false,
      "out-vars" : [ 19 ],
      "decl-vars" : [ 19 ],
      "line-start" : 454,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "pp"
          }
        } ],
        "right" : [ {
          "coerced-to" : {
            "contained" : {
              "go-type" : 33,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 33,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "RawSockaddrLinklayer"
              }
            },
            "go-type" : 32,
            "kind" : "type",
            "type" : "pointer"
          },
          "go-type" : 32,
          "kind" : "expression",
          "target" : {
            "coerced-to" : {
              "go-type" : 17,
              "kind" : "type",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 1,
                "value" : "unsafe"
              },
              "type" : "identifier",
              "value" : {
                "go-type" : 17,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "Pointer"
              }
            },
            "go-type" : 17,
            "kind" : "expression",
            "target" : {
              "go-type" : 2,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "rsa",
                "variable" : 2
              }
            },
            "type" : "cast"
          },
          "type" : "cast"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 454,
      "code" : "pp := (*RawSockaddrLinklayer)(unsafe.Pointer(rsa))",
      "entry" : false,
      "use-vars" : [ 2 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 14 ],
      "in-vars" : [ 19 ],
      "exit" : false,
      "out-vars" : [ 19, 17 ],
      "decl-vars" : [ 17 ],
      "line-start" : 455,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "sa"
          }
        } ],
        "right" : [ {
          "argument" : {
            "go-type" : 39,
            "kind" : "type",
            "type" : "identifier",
            "value" : {
              "go-type" : 39,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "SockaddrLinklayer"
            }
          },
          "go-type" : 38,
          "kind" : "expression",
          "type" : "new"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 455,
      "code" : "sa := new(SockaddrLinklayer)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ 17 ],
      "successors" : [ 15 ],
      "in-vars" : [ 19, 17 ],
      "exit" : false,
      "out-vars" : [ 17, 19 ],
      "decl-vars" : [ ],
      "line-start" : 456,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "Protocol",
            "variable" : 18
          },
          "go-type" : 7,
          "kind" : "expression",
          "target" : {
            "go-type" : 38,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "sa",
              "variable" : 17
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "Protocol",
            "variable" : 20
          },
          "go-type" : 7,
          "kind" : "expression",
          "target" : {
            "go-type" : 32,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "pp",
              "variable" : 19
            }
          },
          "type" : "selector"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 456,
      "code" : "sa.Protocol = pp.Protocol",
      "entry" : false,
      "use-vars" : [ 19, 17 ]
    }, {
      "update-vars" : [ 17 ],
      "successors" : [ 16 ],
      "in-vars" : [ 19, 17 ],
      "exit" : false,
      "out-vars" : [ 19, 17 ],
      "decl-vars" : [ ],
      "line-start" : 457,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "Ifindex",
            "variable" : 21
          },
          "go-type" : 41,
          "kind" : "expression",
          "target" : {
            "go-type" : 38,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "sa",
              "variable" : 17
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "coerced-to" : {
            "go-type" : 41,
            "kind" : "type",
            "type" : "identifier",
            "value" : {
              "go-type" : 41,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "int"
            }
          },
          "go-type" : 41,
          "kind" : "expression",
          "target" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "Ifindex",
              "variable" : 22
            },
            "go-type" : 35,
            "kind" : "expression",
            "target" : {
              "go-type" : 32,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "pp",
                "variable" : 19
              }
            },
            "type" : "selector"
          },
          "type" : "cast"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 457,
      "code" : "sa.Ifindex = int(pp.Ifindex)",
      "entry" : false,
      "use-vars" : [ 17, 19 ]
    }, {
      "update-vars" : [ 17 ],
      "successors" : [ 17 ],
      "in-vars" : [ 19, 17 ],
      "exit" : false,
      "out-vars" : [ 19, 17 ],
      "decl-vars" : [ ],
      "line-start" : 458,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "Hatype",
            "variable" : 23
          },
          "go-type" : 7,
          "kind" : "expression",
          "target" : {
            "go-type" : 38,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "sa",
              "variable" : 17
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "Hatype",
            "variable" : 24
          },
          "go-type" : 7,
          "kind" : "expression",
          "target" : {
            "go-type" : 32,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "pp",
              "variable" : 19
            }
          },
          "type" : "selector"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 458,
      "code" : "sa.Hatype = pp.Hatype",
      "entry" : false,
      "use-vars" : [ 19, 17 ]
    }, {
      "update-vars" : [ 17 ],
      "successors" : [ 18 ],
      "in-vars" : [ 19, 17 ],
      "exit" : false,
      "out-vars" : [ 19, 17 ],
      "decl-vars" : [ ],
      "line-start" : 459,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "Pkttype",
            "variable" : 25
          },
          "go-type" : 36,
          "kind" : "expression",
          "target" : {
            "go-type" : 38,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "sa",
              "variable" : 17
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "Pkttype",
            "variable" : 26
          },
          "go-type" : 36,
          "kind" : "expression",
          "target" : {
            "go-type" : 32,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "pp",
              "variable" : 19
            }
          },
          "type" : "selector"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 459,
      "code" : "sa.Pkttype = pp.Pkttype",
      "entry" : false,
      "use-vars" : [ 19, 17 ]
    }, {
      "update-vars" : [ 17 ],
      "successors" : [ 20 ],
      "in-vars" : [ 19, 17 ],
      "exit" : false,
      "out-vars" : [ 19, 17 ],
      "decl-vars" : [ ],
      "line-start" : 460,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "Halen",
            "variable" : 27
          },
          "go-type" : 36,
          "kind" : "expression",
          "target" : {
            "go-type" : 38,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "sa",
              "variable" : 17
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "Halen",
            "variable" : 28
          },
          "go-type" : 36,
          "kind" : "expression",
          "target" : {
            "go-type" : 32,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "pp",
              "variable" : 19
            }
          },
          "type" : "selector"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 460,
      "code" : "sa.Halen = pp.Halen",
      "entry" : false,
      "use-vars" : [ 19, 17 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 22, 23 ],
      "in-vars" : [ 19, 17, 29 ],
      "exit" : false,
      "out-vars" : [ 19, 17, 29 ],
      "decl-vars" : [ ],
      "line-start" : 461,
      "ast" : {
        "condition" : {
          "go-type" : 44,
          "kind" : "expression",
          "left" : {
            "go-type" : 41,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "i",
              "variable" : 29
            }
          },
          "operator" : "<",
          "right" : {
            "go-type" : 41,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "8"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "for"
      },
      "assign-vars" : [ ],
      "line-end" : 463,
      "code" : "for i := 0; i < len(sa.Addr); i++ {\n\tsa.Addr[i] = pp.Addr[i]\n}",
      "entry" : false,
      "use-vars" : [ 29, 17 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 19 ],
      "in-vars" : [ 19, 17 ],
      "exit" : false,
      "out-vars" : [ 19, 17, 29 ],
      "decl-vars" : [ 29 ],
      "line-start" : 461,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "i"
          }
        } ],
        "right" : [ {
          "go-type" : 41,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "0"
          }
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 461,
      "code" : "i := 0",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ 29 ],
      "successors" : [ 19 ],
      "in-vars" : [ 29, 19, 17 ],
      "exit" : false,
      "out-vars" : [ 19, 17, 29 ],
      "decl-vars" : [ ],
      "line-start" : 461,
      "ast" : {
        "kind" : "statement",
        "operation" : "++",
        "target" : {
          "go-type" : 41,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "i",
            "variable" : 29
          }
        },
        "type" : "crement"
      },
      "assign-vars" : [ 29 ],
      "line-end" : 461,
      "code" : "i++",
      "entry" : false,
      "use-vars" : [ 29 ]
    }, {
      "update-vars" : [ 17 ],
      "successors" : [ 21 ],
      "in-vars" : [ 19, 17, 29 ],
      "exit" : false,
      "out-vars" : [ 19, 17, 29 ],
      "decl-vars" : [ ],
      "line-start" : 462,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 43,
          "index" : {
            "go-type" : 41,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "i",
              "variable" : 29
            }
          },
          "kind" : "expression",
          "target" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "Addr",
              "variable" : 30
            },
            "go-type" : 42,
            "kind" : "expression",
            "target" : {
              "go-type" : 38,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "sa",
                "variable" : 17
              }
            },
            "type" : "selector"
          },
          "type" : "index"
        } ],
        "right" : [ {
          "go-type" : 36,
          "index" : {
            "go-type" : 41,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "i",
              "variable" : 29
            }
          },
          "kind" : "expression",
          "target" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "Addr",
              "variable" : 31
            },
            "go-type" : 37,
            "kind" : "expression",
            "target" : {
              "go-type" : 32,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "pp",
                "variable" : 19
              }
            },
            "type" : "selector"
          },
          "type" : "index"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 462,
      "code" : "sa.Addr[i] = pp.Addr[i]",
      "entry" : false,
      "use-vars" : [ 29, 19, 17 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 17 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 464,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 38,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "sa",
            "variable" : 17
          }
        }, {
          "go-type" : 31,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Nil",
            "kind" : "ident",
            "value" : "nil"
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 464,
      "code" : "return sa, nil",
      "entry" : false,
      "use-vars" : [ 17 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 25 ],
      "in-vars" : [ 2 ],
      "exit" : false,
      "out-vars" : [ 2 ],
      "decl-vars" : [ ],
      "line-start" : 466,
      "ast" : {
        "expressions" : [ {
          "go-type" : 7,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "1"
          }
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 489,
      "code" : "case AF_UNIX:\n\tpp := (*RawSockaddrUnix)(unsafe.Pointer(rsa))\n\tsa := new(SockaddrUnix)\n\tif pp.Path[0] == 0 {\n\n\t\tpp.Path[0] = '@'\n\t}\n\n\tn := 0\n\tfor n < len(pp.Path) && pp.Path[n] != 0 {\n\t\tn++\n\t}\n\tbytes := (*[len(pp.Path)]byte)(unsafe.Pointer(&pp.Path[0]))[0:n]\n\tsa.Name = string(bytes)\n\treturn sa, nil",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 26 ],
      "in-vars" : [ 2 ],
      "exit" : false,
      "out-vars" : [ 32 ],
      "decl-vars" : [ 32 ],
      "line-start" : 467,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "pp"
          }
        } ],
        "right" : [ {
          "coerced-to" : {
            "contained" : {
              "go-type" : 46,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 46,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "RawSockaddrUnix"
              }
            },
            "go-type" : 45,
            "kind" : "type",
            "type" : "pointer"
          },
          "go-type" : 45,
          "kind" : "expression",
          "target" : {
            "coerced-to" : {
              "go-type" : 17,
              "kind" : "type",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 1,
                "value" : "unsafe"
              },
              "type" : "identifier",
              "value" : {
                "go-type" : 17,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "Pointer"
              }
            },
            "go-type" : 17,
            "kind" : "expression",
            "target" : {
              "go-type" : 2,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "rsa",
                "variable" : 2
              }
            },
            "type" : "cast"
          },
          "type" : "cast"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 467,
      "code" : "pp := (*RawSockaddrUnix)(unsafe.Pointer(rsa))",
      "entry" : false,
      "use-vars" : [ 2 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 27 ],
      "in-vars" : [ 32 ],
      "exit" : false,
      "out-vars" : [ 35, 32 ],
      "decl-vars" : [ 35 ],
      "line-start" : 468,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "sa"
          }
        } ],
        "right" : [ {
          "argument" : {
            "go-type" : 50,
            "kind" : "type",
            "type" : "identifier",
            "value" : {
              "go-type" : 50,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "SockaddrUnix"
            }
          },
          "go-type" : 49,
          "kind" : "expression",
          "type" : "new"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 468,
      "code" : "sa := new(SockaddrUnix)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 28, 29 ],
      "in-vars" : [ 35, 32 ],
      "exit" : false,
      "out-vars" : [ 35, 32 ],
      "decl-vars" : [ ],
      "line-start" : 469,
      "ast" : {
        "condition" : {
          "go-type" : 44,
          "kind" : "expression",
          "left" : {
            "go-type" : 9,
            "index" : {
              "go-type" : 41,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "0"
              }
            },
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "Path",
                "variable" : 33
              },
              "go-type" : 48,
              "kind" : "expression",
              "target" : {
                "go-type" : 45,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "pp",
                  "variable" : 32
                }
              },
              "type" : "selector"
            },
            "type" : "index"
          },
          "operator" : "==",
          "right" : {
            "go-type" : 9,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 476,
      "code" : "if pp.Path[0] == 0 {\n\n\tpp.Path[0] = '@'\n}",
      "entry" : false,
      "use-vars" : [ 32 ]
    }, {
      "update-vars" : [ 32 ],
      "successors" : [ 29 ],
      "in-vars" : [ 35, 32 ],
      "exit" : false,
      "out-vars" : [ 35, 32 ],
      "decl-vars" : [ ],
      "line-start" : 475,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 9,
          "index" : {
            "go-type" : 41,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "kind" : "expression",
          "target" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "Path",
              "variable" : 33
            },
            "go-type" : 48,
            "kind" : "expression",
            "target" : {
              "go-type" : 45,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "pp",
                "variable" : 32
              }
            },
            "type" : "selector"
          },
          "type" : "index"
        } ],
        "right" : [ {
          "go-type" : 9,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "64"
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 475,
      "code" : "pp.Path[0] = '@'",
      "entry" : false,
      "use-vars" : [ 32 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 30 ],
      "in-vars" : [ 35, 32 ],
      "exit" : false,
      "out-vars" : [ 35, 34, 32 ],
      "decl-vars" : [ 34 ],
      "line-start" : 483,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "n"
          }
        } ],
        "right" : [ {
          "go-type" : 41,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "0"
          }
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 483,
      "code" : "n := 0",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 31, 32 ],
      "in-vars" : [ 32, 35, 34 ],
      "exit" : false,
      "out-vars" : [ 34, 32, 35 ],
      "decl-vars" : [ ],
      "line-start" : 484,
      "ast" : {
        "condition" : {
          "go-type" : 44,
          "kind" : "expression",
          "left" : {
            "go-type" : 44,
            "kind" : "expression",
            "left" : {
              "go-type" : 41,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "n",
                "variable" : 34
              }
            },
            "operator" : "<",
            "right" : {
              "go-type" : 41,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "108"
              }
            },
            "type" : "binary"
          },
          "operator" : "&&",
          "right" : {
            "go-type" : 44,
            "kind" : "expression",
            "left" : {
              "go-type" : 9,
              "index" : {
                "go-type" : 41,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "n",
                  "variable" : 34
                }
              },
              "kind" : "expression",
              "target" : {
                "field" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "Path",
                  "variable" : 33
                },
                "go-type" : 48,
                "kind" : "expression",
                "target" : {
                  "go-type" : 45,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "pp",
                    "variable" : 32
                  }
                },
                "type" : "selector"
              },
              "type" : "index"
            },
            "operator" : "!=",
            "right" : {
              "go-type" : 9,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "0"
              }
            },
            "type" : "binary"
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "for"
      },
      "assign-vars" : [ ],
      "line-end" : 486,
      "code" : "for n < len(pp.Path) && pp.Path[n] != 0 {\n\tn++\n}",
      "entry" : false,
      "use-vars" : [ 34, 32 ]
    }, {
      "update-vars" : [ 34 ],
      "successors" : [ 30 ],
      "in-vars" : [ 34, 32, 35 ],
      "exit" : false,
      "out-vars" : [ 35, 34, 32 ],
      "decl-vars" : [ ],
      "line-start" : 485,
      "ast" : {
        "kind" : "statement",
        "operation" : "++",
        "target" : {
          "go-type" : 41,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "n",
            "variable" : 34
          }
        },
        "type" : "crement"
      },
      "assign-vars" : [ 34 ],
      "line-end" : 485,
      "code" : "n++",
      "entry" : false,
      "use-vars" : [ 34 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 33 ],
      "in-vars" : [ 35, 34, 32 ],
      "exit" : false,
      "out-vars" : [ 35, 37 ],
      "decl-vars" : [ 37 ],
      "line-start" : 487,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "bytes"
          }
        } ],
        "right" : [ {
          "go-type" : 52,
          "type" : "slice",
          "three" : false,
          "high" : {
            "go-type" : 41,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "n",
              "variable" : 34
            }
          },
          "max" : null,
          "kind" : "expression",
          "low" : {
            "go-type" : 41,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "target" : {
            "coerced-to" : {
              "contained" : {
                "element" : {
                  "go-type" : 43,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 43,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "byte"
                  }
                },
                "go-type" : 54,
                "kind" : "type",
                "length" : {
                  "go-type" : 41,
                  "kind" : "constant",
                  "value" : {
                    "type" : "INT",
                    "value" : "108"
                  }
                },
                "type" : "array"
              },
              "go-type" : 53,
              "kind" : "type",
              "type" : "pointer"
            },
            "go-type" : 53,
            "kind" : "expression",
            "target" : {
              "coerced-to" : {
                "go-type" : 17,
                "kind" : "type",
                "qualifier" : {
                  "ident-kind" : "PkgName",
                  "kind" : "ident",
                  "package" : 1,
                  "value" : "unsafe"
                },
                "type" : "identifier",
                "value" : {
                  "go-type" : 17,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "Pointer"
                }
              },
              "go-type" : 17,
              "kind" : "expression",
              "target" : {
                "go-type" : 55,
                "kind" : "expression",
                "operator" : "&",
                "target" : {
                  "go-type" : 9,
                  "index" : {
                    "go-type" : 41,
                    "kind" : "constant",
                    "value" : {
                      "type" : "INT",
                      "value" : "0"
                    }
                  },
                  "kind" : "expression",
                  "target" : {
                    "field" : {
                      "ident-kind" : "Var",
                      "kind" : "ident",
                      "value" : "Path",
                      "variable" : 33
                    },
                    "go-type" : 48,
                    "kind" : "expression",
                    "target" : {
                      "go-type" : 45,
                      "kind" : "expression",
                      "type" : "identifier",
                      "value" : {
                        "ident-kind" : "Var",
                        "kind" : "ident",
                        "value" : "pp",
                        "variable" : 32
                      }
                    },
                    "type" : "selector"
                  },
                  "type" : "index"
                },
                "type" : "unary"
              },
              "type" : "cast"
            },
            "type" : "cast"
          }
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 487,
      "code" : "bytes := (*[len(pp.Path)]byte)(unsafe.Pointer(&pp.Path[0]))[0:n]",
      "entry" : false,
      "use-vars" : [ 32, 34 ]
    }, {
      "update-vars" : [ 35 ],
      "successors" : [ 34 ],
      "in-vars" : [ 35, 37 ],
      "exit" : false,
      "out-vars" : [ 35 ],
      "decl-vars" : [ ],
      "line-start" : 488,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "Name",
            "variable" : 36
          },
          "go-type" : 24,
          "kind" : "expression",
          "target" : {
            "go-type" : 49,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "sa",
              "variable" : 35
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "coerced-to" : {
            "go-type" : 24,
            "kind" : "type",
            "type" : "identifier",
            "value" : {
              "go-type" : 24,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "string"
            }
          },
          "go-type" : 24,
          "kind" : "expression",
          "target" : {
            "go-type" : 52,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "bytes",
              "variable" : 37
            }
          },
          "type" : "cast"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 488,
      "code" : "sa.Name = string(bytes)",
      "entry" : false,
      "use-vars" : [ 37, 35 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 35 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 489,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 49,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "sa",
            "variable" : 35
          }
        }, {
          "go-type" : 31,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Nil",
            "kind" : "ident",
            "value" : "nil"
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 489,
      "code" : "return sa, nil",
      "entry" : false,
      "use-vars" : [ 35 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 36 ],
      "in-vars" : [ 2 ],
      "exit" : false,
      "out-vars" : [ 2 ],
      "decl-vars" : [ ],
      "line-start" : 491,
      "ast" : {
        "expressions" : [ {
          "go-type" : 7,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "2"
          }
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 499,
      "code" : "case AF_INET:\n\tpp := (*RawSockaddrInet4)(unsafe.Pointer(rsa))\n\tsa := new(SockaddrInet4)\n\tp := (*[2]byte)(unsafe.Pointer(&pp.Port))\n\tsa.Port = int(p[0])<<8 + int(p[1])\n\tfor i := 0; i < len(sa.Addr); i++ {\n\t\tsa.Addr[i] = pp.Addr[i]\n\t}\n\treturn sa, nil",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 37 ],
      "in-vars" : [ 2 ],
      "exit" : false,
      "out-vars" : [ 38 ],
      "decl-vars" : [ 38 ],
      "line-start" : 492,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "pp"
          }
        } ],
        "right" : [ {
          "coerced-to" : {
            "contained" : {
              "go-type" : 57,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 57,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "RawSockaddrInet4"
              }
            },
            "go-type" : 56,
            "kind" : "type",
            "type" : "pointer"
          },
          "go-type" : 56,
          "kind" : "expression",
          "target" : {
            "coerced-to" : {
              "go-type" : 17,
              "kind" : "type",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 1,
                "value" : "unsafe"
              },
              "type" : "identifier",
              "value" : {
                "go-type" : 17,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "Pointer"
              }
            },
            "go-type" : 17,
            "kind" : "expression",
            "target" : {
              "go-type" : 2,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "rsa",
                "variable" : 2
              }
            },
            "type" : "cast"
          },
          "type" : "cast"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 492,
      "code" : "pp := (*RawSockaddrInet4)(unsafe.Pointer(rsa))",
      "entry" : false,
      "use-vars" : [ 2 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 38 ],
      "in-vars" : [ 38 ],
      "exit" : false,
      "out-vars" : [ 40, 38 ],
      "decl-vars" : [ 40 ],
      "line-start" : 493,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "sa"
          }
        } ],
        "right" : [ {
          "argument" : {
            "go-type" : 61,
            "kind" : "type",
            "type" : "identifier",
            "value" : {
              "go-type" : 61,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "SockaddrInet4"
            }
          },
          "go-type" : 60,
          "kind" : "expression",
          "type" : "new"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 493,
      "code" : "sa := new(SockaddrInet4)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 39 ],
      "in-vars" : [ 40, 38 ],
      "exit" : false,
      "out-vars" : [ 38, 42, 40 ],
      "decl-vars" : [ 42 ],
      "line-start" : 494,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "p"
          }
        } ],
        "right" : [ {
          "coerced-to" : {
            "contained" : {
              "element" : {
                "go-type" : 43,
                "kind" : "type",
                "type" : "identifier",
                "value" : {
                  "go-type" : 43,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "byte"
                }
              },
              "go-type" : 64,
              "kind" : "type",
              "length" : {
                "go-type" : 65,
                "kind" : "constant",
                "value" : {
                  "type" : "INT",
                  "value" : "2"
                }
              },
              "type" : "array"
            },
            "go-type" : 63,
            "kind" : "type",
            "type" : "pointer"
          },
          "go-type" : 63,
          "kind" : "expression",
          "target" : {
            "coerced-to" : {
              "go-type" : 17,
              "kind" : "type",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 1,
                "value" : "unsafe"
              },
              "type" : "identifier",
              "value" : {
                "go-type" : 17,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "Pointer"
              }
            },
            "go-type" : 17,
            "kind" : "expression",
            "target" : {
              "go-type" : 66,
              "kind" : "expression",
              "operator" : "&",
              "target" : {
                "field" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "Port",
                  "variable" : 39
                },
                "go-type" : 7,
                "kind" : "expression",
                "target" : {
                  "go-type" : 56,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "pp",
                    "variable" : 38
                  }
                },
                "type" : "selector"
              },
              "type" : "unary"
            },
            "type" : "cast"
          },
          "type" : "cast"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 494,
      "code" : "p := (*[2]byte)(unsafe.Pointer(&pp.Port))",
      "entry" : false,
      "use-vars" : [ 38 ]
    }, {
      "update-vars" : [ 40 ],
      "successors" : [ 41 ],
      "in-vars" : [ 42, 40, 38 ],
      "exit" : false,
      "out-vars" : [ 40, 38 ],
      "decl-vars" : [ ],
      "line-start" : 495,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "Port",
            "variable" : 41
          },
          "go-type" : 41,
          "kind" : "expression",
          "target" : {
            "go-type" : 60,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "sa",
              "variable" : 40
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "go-type" : 41,
          "kind" : "expression",
          "left" : {
            "go-type" : 41,
            "kind" : "expression",
            "left" : {
              "coerced-to" : {
                "go-type" : 41,
                "kind" : "type",
                "type" : "identifier",
                "value" : {
                  "go-type" : 41,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "int"
                }
              },
              "go-type" : 41,
              "kind" : "expression",
              "target" : {
                "go-type" : 43,
                "index" : {
                  "go-type" : 41,
                  "kind" : "constant",
                  "value" : {
                    "type" : "INT",
                    "value" : "0"
                  }
                },
                "kind" : "expression",
                "target" : {
                  "go-type" : 63,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "p",
                    "variable" : 42
                  }
                },
                "type" : "index"
              },
              "type" : "cast"
            },
            "operator" : "<<",
            "right" : {
              "go-type" : 65,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "8"
              }
            },
            "type" : "binary"
          },
          "operator" : "+",
          "right" : {
            "coerced-to" : {
              "go-type" : 41,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 41,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "int"
              }
            },
            "go-type" : 41,
            "kind" : "expression",
            "target" : {
              "go-type" : 43,
              "index" : {
                "go-type" : 41,
                "kind" : "constant",
                "value" : {
                  "type" : "INT",
                  "value" : "1"
                }
              },
              "kind" : "expression",
              "target" : {
                "go-type" : 63,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "p",
                  "variable" : 42
                }
              },
              "type" : "index"
            },
            "type" : "cast"
          },
          "type" : "binary"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 495,
      "code" : "sa.Port = int(p[0])<<8 + int(p[1])",
      "entry" : false,
      "use-vars" : [ 42, 40 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 43, 44 ],
      "in-vars" : [ 43, 40, 38 ],
      "exit" : false,
      "out-vars" : [ 40, 38, 43 ],
      "decl-vars" : [ ],
      "line-start" : 496,
      "ast" : {
        "condition" : {
          "go-type" : 44,
          "kind" : "expression",
          "left" : {
            "go-type" : 41,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "i",
              "variable" : 43
            }
          },
          "operator" : "<",
          "right" : {
            "go-type" : 41,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "4"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "for"
      },
      "assign-vars" : [ ],
      "line-end" : 498,
      "code" : "for i := 0; i < len(sa.Addr); i++ {\n\tsa.Addr[i] = pp.Addr[i]\n}",
      "entry" : false,
      "use-vars" : [ 40, 43 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 40 ],
      "in-vars" : [ 40, 38 ],
      "exit" : false,
      "out-vars" : [ 40, 38, 43 ],
      "decl-vars" : [ 43 ],
      "line-start" : 496,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "i"
          }
        } ],
        "right" : [ {
          "go-type" : 41,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "0"
          }
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 496,
      "code" : "i := 0",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ 43 ],
      "successors" : [ 40 ],
      "in-vars" : [ 43, 40, 38 ],
      "exit" : false,
      "out-vars" : [ 38, 43, 40 ],
      "decl-vars" : [ ],
      "line-start" : 496,
      "ast" : {
        "kind" : "statement",
        "operation" : "++",
        "target" : {
          "go-type" : 41,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "i",
            "variable" : 43
          }
        },
        "type" : "crement"
      },
      "assign-vars" : [ 43 ],
      "line-end" : 496,
      "code" : "i++",
      "entry" : false,
      "use-vars" : [ 43 ]
    }, {
      "update-vars" : [ 40 ],
      "successors" : [ 42 ],
      "in-vars" : [ 43, 40, 38 ],
      "exit" : false,
      "out-vars" : [ 43, 40, 38 ],
      "decl-vars" : [ ],
      "line-start" : 497,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 43,
          "index" : {
            "go-type" : 41,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "i",
              "variable" : 43
            }
          },
          "kind" : "expression",
          "target" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "Addr",
              "variable" : 44
            },
            "go-type" : 59,
            "kind" : "expression",
            "target" : {
              "go-type" : 60,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "sa",
                "variable" : 40
              }
            },
            "type" : "selector"
          },
          "type" : "index"
        } ],
        "right" : [ {
          "go-type" : 43,
          "index" : {
            "go-type" : 41,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "i",
              "variable" : 43
            }
          },
          "kind" : "expression",
          "target" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "Addr",
              "variable" : 45
            },
            "go-type" : 59,
            "kind" : "expression",
            "target" : {
              "go-type" : 56,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "pp",
                "variable" : 38
              }
            },
            "type" : "selector"
          },
          "type" : "index"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 497,
      "code" : "sa.Addr[i] = pp.Addr[i]",
      "entry" : false,
      "use-vars" : [ 38, 43, 40 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 40 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 499,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 60,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "sa",
            "variable" : 40
          }
        }, {
          "go-type" : 31,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Nil",
            "kind" : "ident",
            "value" : "nil"
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 499,
      "code" : "return sa, nil",
      "entry" : false,
      "use-vars" : [ 40 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 46 ],
      "in-vars" : [ 2 ],
      "exit" : false,
      "out-vars" : [ 2 ],
      "decl-vars" : [ ],
      "line-start" : 501,
      "ast" : {
        "expressions" : [ {
          "go-type" : 7,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "10"
          }
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 510,
      "code" : "case AF_INET6:\n\tpp := (*RawSockaddrInet6)(unsafe.Pointer(rsa))\n\tsa := new(SockaddrInet6)\n\tp := (*[2]byte)(unsafe.Pointer(&pp.Port))\n\tsa.Port = int(p[0])<<8 + int(p[1])\n\tsa.ZoneId = pp.Scope_id\n\tfor i := 0; i < len(sa.Addr); i++ {\n\t\tsa.Addr[i] = pp.Addr[i]\n\t}\n\treturn sa, nil",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 47 ],
      "in-vars" : [ 2 ],
      "exit" : false,
      "out-vars" : [ 46 ],
      "decl-vars" : [ 46 ],
      "line-start" : 502,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "pp"
          }
        } ],
        "right" : [ {
          "coerced-to" : {
            "contained" : {
              "go-type" : 68,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 68,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "RawSockaddrInet6"
              }
            },
            "go-type" : 67,
            "kind" : "type",
            "type" : "pointer"
          },
          "go-type" : 67,
          "kind" : "expression",
          "target" : {
            "coerced-to" : {
              "go-type" : 17,
              "kind" : "type",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 1,
                "value" : "unsafe"
              },
              "type" : "identifier",
              "value" : {
                "go-type" : 17,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "Pointer"
              }
            },
            "go-type" : 17,
            "kind" : "expression",
            "target" : {
              "go-type" : 2,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "rsa",
                "variable" : 2
              }
            },
            "type" : "cast"
          },
          "type" : "cast"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 502,
      "code" : "pp := (*RawSockaddrInet6)(unsafe.Pointer(rsa))",
      "entry" : false,
      "use-vars" : [ 2 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 48 ],
      "in-vars" : [ 46 ],
      "exit" : false,
      "out-vars" : [ 48, 46 ],
      "decl-vars" : [ 48 ],
      "line-start" : 503,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "sa"
          }
        } ],
        "right" : [ {
          "argument" : {
            "go-type" : 72,
            "kind" : "type",
            "type" : "identifier",
            "value" : {
              "go-type" : 72,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "SockaddrInet6"
            }
          },
          "go-type" : 71,
          "kind" : "expression",
          "type" : "new"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 503,
      "code" : "sa := new(SockaddrInet6)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 49 ],
      "in-vars" : [ 48, 46 ],
      "exit" : false,
      "out-vars" : [ 48, 50, 46 ],
      "decl-vars" : [ 50 ],
      "line-start" : 504,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "p"
          }
        } ],
        "right" : [ {
          "coerced-to" : {
            "contained" : {
              "element" : {
                "go-type" : 43,
                "kind" : "type",
                "type" : "identifier",
                "value" : {
                  "go-type" : 43,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "byte"
                }
              },
              "go-type" : 64,
              "kind" : "type",
              "length" : {
                "go-type" : 65,
                "kind" : "constant",
                "value" : {
                  "type" : "INT",
                  "value" : "2"
                }
              },
              "type" : "array"
            },
            "go-type" : 63,
            "kind" : "type",
            "type" : "pointer"
          },
          "go-type" : 63,
          "kind" : "expression",
          "target" : {
            "coerced-to" : {
              "go-type" : 17,
              "kind" : "type",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 1,
                "value" : "unsafe"
              },
              "type" : "identifier",
              "value" : {
                "go-type" : 17,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "Pointer"
              }
            },
            "go-type" : 17,
            "kind" : "expression",
            "target" : {
              "go-type" : 66,
              "kind" : "expression",
              "operator" : "&",
              "target" : {
                "field" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "Port",
                  "variable" : 47
                },
                "go-type" : 7,
                "kind" : "expression",
                "target" : {
                  "go-type" : 67,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "pp",
                    "variable" : 46
                  }
                },
                "type" : "selector"
              },
              "type" : "unary"
            },
            "type" : "cast"
          },
          "type" : "cast"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 504,
      "code" : "p := (*[2]byte)(unsafe.Pointer(&pp.Port))",
      "entry" : false,
      "use-vars" : [ 46 ]
    }, {
      "update-vars" : [ 48 ],
      "successors" : [ 50 ],
      "in-vars" : [ 46, 48, 50 ],
      "exit" : false,
      "out-vars" : [ 48, 46 ],
      "decl-vars" : [ ],
      "line-start" : 505,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "Port",
            "variable" : 49
          },
          "go-type" : 41,
          "kind" : "expression",
          "target" : {
            "go-type" : 71,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "sa",
              "variable" : 48
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "go-type" : 41,
          "kind" : "expression",
          "left" : {
            "go-type" : 41,
            "kind" : "expression",
            "left" : {
              "coerced-to" : {
                "go-type" : 41,
                "kind" : "type",
                "type" : "identifier",
                "value" : {
                  "go-type" : 41,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "int"
                }
              },
              "go-type" : 41,
              "kind" : "expression",
              "target" : {
                "go-type" : 43,
                "index" : {
                  "go-type" : 41,
                  "kind" : "constant",
                  "value" : {
                    "type" : "INT",
                    "value" : "0"
                  }
                },
                "kind" : "expression",
                "target" : {
                  "go-type" : 63,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "p",
                    "variable" : 50
                  }
                },
                "type" : "index"
              },
              "type" : "cast"
            },
            "operator" : "<<",
            "right" : {
              "go-type" : 65,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "8"
              }
            },
            "type" : "binary"
          },
          "operator" : "+",
          "right" : {
            "coerced-to" : {
              "go-type" : 41,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 41,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "int"
              }
            },
            "go-type" : 41,
            "kind" : "expression",
            "target" : {
              "go-type" : 43,
              "index" : {
                "go-type" : 41,
                "kind" : "constant",
                "value" : {
                  "type" : "INT",
                  "value" : "1"
                }
              },
              "kind" : "expression",
              "target" : {
                "go-type" : 63,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "p",
                  "variable" : 50
                }
              },
              "type" : "index"
            },
            "type" : "cast"
          },
          "type" : "binary"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 505,
      "code" : "sa.Port = int(p[0])<<8 + int(p[1])",
      "entry" : false,
      "use-vars" : [ 50, 48 ]
    }, {
      "update-vars" : [ 48 ],
      "successors" : [ 52 ],
      "in-vars" : [ 48, 46 ],
      "exit" : false,
      "out-vars" : [ 46, 48 ],
      "decl-vars" : [ ],
      "line-start" : 506,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "ZoneId",
            "variable" : 51
          },
          "go-type" : 19,
          "kind" : "expression",
          "target" : {
            "go-type" : 71,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "sa",
              "variable" : 48
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "Scope_id",
            "variable" : 52
          },
          "go-type" : 19,
          "kind" : "expression",
          "target" : {
            "go-type" : 67,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "pp",
              "variable" : 46
            }
          },
          "type" : "selector"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 506,
      "code" : "sa.ZoneId = pp.Scope_id",
      "entry" : false,
      "use-vars" : [ 46, 48 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 54, 55 ],
      "in-vars" : [ 53, 46, 48 ],
      "exit" : false,
      "out-vars" : [ 48, 53, 46 ],
      "decl-vars" : [ ],
      "line-start" : 507,
      "ast" : {
        "condition" : {
          "go-type" : 44,
          "kind" : "expression",
          "left" : {
            "go-type" : 41,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "i",
              "variable" : 53
            }
          },
          "operator" : "<",
          "right" : {
            "go-type" : 41,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "16"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "for"
      },
      "assign-vars" : [ ],
      "line-end" : 509,
      "code" : "for i := 0; i < len(sa.Addr); i++ {\n\tsa.Addr[i] = pp.Addr[i]\n}",
      "entry" : false,
      "use-vars" : [ 53, 48 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 51 ],
      "in-vars" : [ 48, 46 ],
      "exit" : false,
      "out-vars" : [ 48, 53, 46 ],
      "decl-vars" : [ 53 ],
      "line-start" : 507,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "i"
          }
        } ],
        "right" : [ {
          "go-type" : 41,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "0"
          }
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 507,
      "code" : "i := 0",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ 53 ],
      "successors" : [ 51 ],
      "in-vars" : [ 48, 53, 46 ],
      "exit" : false,
      "out-vars" : [ 48, 53, 46 ],
      "decl-vars" : [ ],
      "line-start" : 507,
      "ast" : {
        "kind" : "statement",
        "operation" : "++",
        "target" : {
          "go-type" : 41,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "i",
            "variable" : 53
          }
        },
        "type" : "crement"
      },
      "assign-vars" : [ 53 ],
      "line-end" : 507,
      "code" : "i++",
      "entry" : false,
      "use-vars" : [ 53 ]
    }, {
      "update-vars" : [ 48 ],
      "successors" : [ 53 ],
      "in-vars" : [ 48, 53, 46 ],
      "exit" : false,
      "out-vars" : [ 48, 53, 46 ],
      "decl-vars" : [ ],
      "line-start" : 508,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 43,
          "index" : {
            "go-type" : 41,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "i",
              "variable" : 53
            }
          },
          "kind" : "expression",
          "target" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "Addr",
              "variable" : 54
            },
            "go-type" : 70,
            "kind" : "expression",
            "target" : {
              "go-type" : 71,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "sa",
                "variable" : 48
              }
            },
            "type" : "selector"
          },
          "type" : "index"
        } ],
        "right" : [ {
          "go-type" : 43,
          "index" : {
            "go-type" : 41,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "i",
              "variable" : 53
            }
          },
          "kind" : "expression",
          "target" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "Addr",
              "variable" : 55
            },
            "go-type" : 70,
            "kind" : "expression",
            "target" : {
              "go-type" : 67,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "pp",
                "variable" : 46
              }
            },
            "type" : "selector"
          },
          "type" : "index"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 508,
      "code" : "sa.Addr[i] = pp.Addr[i]",
      "entry" : false,
      "use-vars" : [ 48, 46, 53 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 48 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 510,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 71,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "sa",
            "variable" : 48
          }
        }, {
          "go-type" : 31,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Nil",
            "kind" : "ident",
            "value" : "nil"
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 510,
      "code" : "return sa, nil",
      "entry" : false,
      "use-vars" : [ 48 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 512,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 31,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Nil",
            "kind" : "ident",
            "value" : "nil"
          }
        }, {
          "go-type" : 74,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "97"
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 512,
      "code" : "return nil, EAFNOSUPPORT",
      "entry" : false,
      "use-vars" : [ ]
    } ],
    "code" : "func anyToSockaddr(rsa *RawSockaddrAny) (Sockaddr, error) {\n\tswitch rsa.Addr.Family {\n\tcase AF_NETLINK:\n\t\tpp := (*RawSockaddrNetlink)(unsafe.Pointer(rsa))\n\t\tsa := new(SockaddrNetlink)\n\t\tsa.Family = pp.Family\n\t\tsa.Pad = pp.Pad\n\t\tsa.Pid = pp.Pid\n\t\tsa.Groups = pp.Groups\n\t\treturn sa, nil\n\n\tcase AF_PACKET:\n\t\tpp := (*RawSockaddrLinklayer)(unsafe.Pointer(rsa))\n\t\tsa := new(SockaddrLinklayer)\n\t\tsa.Protocol = pp.Protocol\n\t\tsa.Ifindex = int(pp.Ifindex)\n\t\tsa.Hatype = pp.Hatype\n\t\tsa.Pkttype = pp.Pkttype\n\t\tsa.Halen = pp.Halen\n\t\tfor i := 0; i < len(sa.Addr); i++ {\n\t\t\tsa.Addr[i] = pp.Addr[i]\n\t\t}\n\t\treturn sa, nil\n\n\tcase AF_UNIX:\n\t\tpp := (*RawSockaddrUnix)(unsafe.Pointer(rsa))\n\t\tsa := new(SockaddrUnix)\n\t\tif pp.Path[0] == 0 {\n\n\t\t\tpp.Path[0] = '@'\n\t\t}\n\n\t\tn := 0\n\t\tfor n < len(pp.Path) && pp.Path[n] != 0 {\n\t\t\tn++\n\t\t}\n\t\tbytes := (*[len(pp.Path)]byte)(unsafe.Pointer(&pp.Path[0]))[0:n]\n\t\tsa.Name = string(bytes)\n\t\treturn sa, nil\n\n\tcase AF_INET:\n\t\tpp := (*RawSockaddrInet4)(unsafe.Pointer(rsa))\n\t\tsa := new(SockaddrInet4)\n\t\tp := (*[2]byte)(unsafe.Pointer(&pp.Port))\n\t\tsa.Port = int(p[0])<<8 + int(p[1])\n\t\tfor i := 0; i < len(sa.Addr); i++ {\n\t\t\tsa.Addr[i] = pp.Addr[i]\n\t\t}\n\t\treturn sa, nil\n\n\tcase AF_INET6:\n\t\tpp := (*RawSockaddrInet6)(unsafe.Pointer(rsa))\n\t\tsa := new(SockaddrInet6)\n\t\tp := (*[2]byte)(unsafe.Pointer(&pp.Port))\n\t\tsa.Port = int(p[0])<<8 + int(p[1])\n\t\tsa.ZoneId = pp.Scope_id\n\t\tfor i := 0; i < len(sa.Addr); i++ {\n\t\t\tsa.Addr[i] = pp.Addr[i]\n\t\t}\n\t\treturn sa, nil\n\t}\n\treturn nil, EAFNOSUPPORT\n}",
    "defines" : [ 0 ],
    "functions" : [ {
      "name" : "anyToSockaddr",
      "package" : 0,
      "type" : 0,
      "exported" : false
    } ],
    "line-end" : 513,
    "line-start" : 442,
    "names" : [ "anyToSockaddr" ],
    "package" : 0,
    "packages" : [ {
      "name" : "syscall",
      "path" : "syscall"
    }, {
      "name" : "unsafe",
      "path" : "unsafe"
    } ],
    "params" : [ 2 ],
    "receivers" : [ ],
    "results" : [ 3, 4 ],
    "type" : "function",
    "types" : [ {
      "name" : "func(rsa *syscall.RawSockaddrAny) (syscall.Sockaddr, error)",
      "params" : 1,
      "recv" : -1,
      "results" : 11,
      "type" : "Signature",
      "underlying" : 0,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "rsa",
        "type" : 2
      } ],
      "name" : "(rsa *syscall.RawSockaddrAny)",
      "type" : "Tuple",
      "underlying" : 1
    }, {
      "elem" : 3,
      "name" : "*syscall.RawSockaddrAny",
      "type" : "Pointer",
      "underlying" : 2
    }, {
      "local-name" : "RawSockaddrAny",
      "name" : "syscall.RawSockaddrAny",
      "package" : 0,
      "type" : "Named",
      "underlying" : 4
    }, {
      "fields" : [ {
        "name" : "Addr",
        "type" : 5
      }, {
        "name" : "Pad",
        "type" : 10
      } ],
      "name" : "struct{Addr syscall.RawSockaddr; Pad [96]int8}",
      "type" : "Struct",
      "underlying" : 4
    }, {
      "local-name" : "RawSockaddr",
      "name" : "syscall.RawSockaddr",
      "package" : 0,
      "type" : "Named",
      "underlying" : 6
    }, {
      "fields" : [ {
        "name" : "Family",
        "type" : 7
      }, {
        "name" : "Data",
        "type" : 8
      } ],
      "name" : "struct{Family uint16; Data [14]int8}",
      "type" : "Struct",
      "underlying" : 6
    }, {
      "name" : "uint16",
      "type" : "Basic",
      "underlying" : 7
    }, {
      "elem" : 9,
      "name" : "[14]int8",
      "type" : "Array",
      "underlying" : 8
    }, {
      "name" : "int8",
      "type" : "Basic",
      "underlying" : 9
    }, {
      "elem" : 9,
      "name" : "[96]int8",
      "type" : "Array",
      "underlying" : 10
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 12
      }, {
        "name" : "",
        "type" : 20
      } ],
      "name" : "(syscall.Sockaddr, error)",
      "type" : "Tuple",
      "underlying" : 11
    }, {
      "local-name" : "Sockaddr",
      "name" : "syscall.Sockaddr",
      "package" : 0,
      "type" : "Named",
      "underlying" : 13
    }, {
      "methods" : [ {
        "name" : "sockaddr",
        "type" : 14
      } ],
      "name" : "interface{sockaddr() (ptr unsafe.Pointer, len syscall._Socklen, err error)}",
      "type" : "Interface",
      "underlying" : 13
    }, {
      "name" : "func() (ptr unsafe.Pointer, len syscall._Socklen, err error)",
      "params" : 15,
      "recv" : 1,
      "results" : 16,
      "type" : "Signature",
      "underlying" : 14,
      "variadic" : false
    }, {
      "fields" : [ ],
      "name" : "()",
      "type" : "Tuple",
      "underlying" : 15
    }, {
      "fields" : [ {
        "name" : "ptr",
        "type" : 17
      }, {
        "name" : "len",
        "type" : 18
      }, {
        "name" : "err",
        "type" : 20
      } ],
      "name" : "(ptr unsafe.Pointer, len syscall._Socklen, err error)",
      "type" : "Tuple",
      "underlying" : 16
    }, {
      "local-name" : "Pointer",
      "name" : "unsafe.Pointer",
      "package" : 1,
      "type" : "Basic",
      "underlying" : 17
    }, {
      "local-name" : "_Socklen",
      "name" : "syscall._Socklen",
      "package" : 0,
      "type" : "Named",
      "underlying" : 19
    }, {
      "name" : "uint32",
      "type" : "Basic",
      "underlying" : 19
    }, {
      "local-name" : "error",
      "name" : "error",
      "package" : -1,
      "type" : "Named",
      "underlying" : 21
    }, {
      "methods" : [ {
        "name" : "Error",
        "type" : 22
      } ],
      "name" : "interface{Error() string}",
      "type" : "Interface",
      "underlying" : 21
    }, {
      "name" : "func() string",
      "params" : 15,
      "recv" : 0,
      "results" : 23,
      "type" : "Signature",
      "underlying" : 22,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 24
      } ],
      "name" : "(string)",
      "type" : "Tuple",
      "underlying" : 23
    }, {
      "name" : "string",
      "type" : "Basic",
      "underlying" : 24
    }, {
      "elem" : 26,
      "name" : "*syscall.RawSockaddrNetlink",
      "type" : "Pointer",
      "underlying" : 25
    }, {
      "local-name" : "RawSockaddrNetlink",
      "name" : "syscall.RawSockaddrNetlink",
      "package" : 0,
      "type" : "Named",
      "underlying" : 27
    }, {
      "fields" : [ {
        "name" : "Family",
        "type" : 7
      }, {
        "name" : "Pad",
        "type" : 7
      }, {
        "name" : "Pid",
        "type" : 19
      }, {
        "name" : "Groups",
        "type" : 19
      } ],
      "name" : "struct{Family uint16; Pad uint16; Pid uint32; Groups uint32}",
      "type" : "Struct",
      "underlying" : 27
    }, {
      "elem" : 29,
      "name" : "*syscall.SockaddrNetlink",
      "type" : "Pointer",
      "underlying" : 28
    }, {
      "local-name" : "SockaddrNetlink",
      "name" : "syscall.SockaddrNetlink",
      "package" : 0,
      "type" : "Named",
      "underlying" : 30
    }, {
      "fields" : [ {
        "name" : "Family",
        "type" : 7
      }, {
        "name" : "Pad",
        "type" : 7
      }, {
        "name" : "Pid",
        "type" : 19
      }, {
        "name" : "Groups",
        "type" : 19
      }, {
        "name" : "raw",
        "type" : 26
      } ],
      "name" : "struct{Family uint16; Pad uint16; Pid uint32; Groups uint32; raw syscall.RawSockaddrNetlink}",
      "type" : "Struct",
      "underlying" : 30
    }, {
      "name" : "untyped nil",
      "type" : "Basic",
      "underlying" : 31
    }, {
      "elem" : 33,
      "name" : "*syscall.RawSockaddrLinklayer",
      "type" : "Pointer",
      "underlying" : 32
    }, {
      "local-name" : "RawSockaddrLinklayer",
      "name" : "syscall.RawSockaddrLinklayer",
      "package" : 0,
      "type" : "Named",
      "underlying" : 34
    }, {
      "fields" : [ {
        "name" : "Family",
        "type" : 7
      }, {
        "name" : "Protocol",
        "type" : 7
      }, {
        "name" : "Ifindex",
        "type" : 35
      }, {
        "name" : "Hatype",
        "type" : 7
      }, {
        "name" : "Pkttype",
        "type" : 36
      }, {
        "name" : "Halen",
        "type" : 36
      }, {
        "name" : "Addr",
        "type" : 37
      } ],
      "name" : "struct{Family uint16; Protocol uint16; Ifindex int32; Hatype uint16; Pkttype uint8; Halen uint8; Addr [8]uint8}",
      "type" : "Struct",
      "underlying" : 34
    }, {
      "name" : "int32",
      "type" : "Basic",
      "underlying" : 35
    }, {
      "name" : "uint8",
      "type" : "Basic",
      "underlying" : 36
    }, {
      "elem" : 36,
      "name" : "[8]uint8",
      "type" : "Array",
      "underlying" : 37
    }, {
      "elem" : 39,
      "name" : "*syscall.SockaddrLinklayer",
      "type" : "Pointer",
      "underlying" : 38
    }, {
      "local-name" : "SockaddrLinklayer",
      "name" : "syscall.SockaddrLinklayer",
      "package" : 0,
      "type" : "Named",
      "underlying" : 40
    }, {
      "fields" : [ {
        "name" : "Protocol",
        "type" : 7
      }, {
        "name" : "Ifindex",
        "type" : 41
      }, {
        "name" : "Hatype",
        "type" : 7
      }, {
        "name" : "Pkttype",
        "type" : 36
      }, {
        "name" : "Halen",
        "type" : 36
      }, {
        "name" : "Addr",
        "type" : 42
      }, {
        "name" : "raw",
        "type" : 33
      } ],
      "name" : "struct{Protocol uint16; Ifindex int; Hatype uint16; Pkttype uint8; Halen uint8; Addr [8]byte; raw syscall.RawSockaddrLinklayer}",
      "type" : "Struct",
      "underlying" : 40
    }, {
      "name" : "int",
      "type" : "Basic",
      "underlying" : 41
    }, {
      "elem" : 43,
      "name" : "[8]byte",
      "type" : "Array",
      "underlying" : 42
    }, {
      "name" : "byte",
      "type" : "Basic",
      "underlying" : 43
    }, {
      "name" : "untyped bool",
      "type" : "Basic",
      "underlying" : 44
    }, {
      "elem" : 46,
      "name" : "*syscall.RawSockaddrUnix",
      "type" : "Pointer",
      "underlying" : 45
    }, {
      "local-name" : "RawSockaddrUnix",
      "name" : "syscall.RawSockaddrUnix",
      "package" : 0,
      "type" : "Named",
      "underlying" : 47
    }, {
      "fields" : [ {
        "name" : "Family",
        "type" : 7
      }, {
        "name" : "Path",
        "type" : 48
      } ],
      "name" : "struct{Family uint16; Path [108]int8}",
      "type" : "Struct",
      "underlying" : 47
    }, {
      "elem" : 9,
      "name" : "[108]int8",
      "type" : "Array",
      "underlying" : 48
    }, {
      "elem" : 50,
      "name" : "*syscall.SockaddrUnix",
      "type" : "Pointer",
      "underlying" : 49
    }, {
      "local-name" : "SockaddrUnix",
      "name" : "syscall.SockaddrUnix",
      "package" : 0,
      "type" : "Named",
      "underlying" : 51
    }, {
      "fields" : [ {
        "name" : "Name",
        "type" : 24
      }, {
        "name" : "raw",
        "type" : 46
      } ],
      "name" : "struct{Name string; raw syscall.RawSockaddrUnix}",
      "type" : "Struct",
      "underlying" : 51
    }, {
      "elem" : 43,
      "name" : "[]byte",
      "type" : "Slice",
      "underlying" : 52
    }, {
      "elem" : 54,
      "name" : "*[108]byte",
      "type" : "Pointer",
      "underlying" : 53
    }, {
      "elem" : 43,
      "name" : "[108]byte",
      "type" : "Array",
      "underlying" : 54
    }, {
      "elem" : 9,
      "name" : "*int8",
      "type" : "Pointer",
      "underlying" : 55
    }, {
      "elem" : 57,
      "name" : "*syscall.RawSockaddrInet4",
      "type" : "Pointer",
      "underlying" : 56
    }, {
      "local-name" : "RawSockaddrInet4",
      "name" : "syscall.RawSockaddrInet4",
      "package" : 0,
      "type" : "Named",
      "underlying" : 58
    }, {
      "fields" : [ {
        "name" : "Family",
        "type" : 7
      }, {
        "name" : "Port",
        "type" : 7
      }, {
        "name" : "Addr",
        "type" : 59
      }, {
        "name" : "Zero",
        "type" : 37
      } ],
      "name" : "struct{Family uint16; Port uint16; Addr [4]byte; Zero [8]uint8}",
      "type" : "Struct",
      "underlying" : 58
    }, {
      "elem" : 43,
      "name" : "[4]byte",
      "type" : "Array",
      "underlying" : 59
    }, {
      "elem" : 61,
      "name" : "*syscall.SockaddrInet4",
      "type" : "Pointer",
      "underlying" : 60
    }, {
      "local-name" : "SockaddrInet4",
      "name" : "syscall.SockaddrInet4",
      "package" : 0,
      "type" : "Named",
      "underlying" : 62
    }, {
      "fields" : [ {
        "name" : "Port",
        "type" : 41
      }, {
        "name" : "Addr",
        "type" : 59
      }, {
        "name" : "raw",
        "type" : 57
      } ],
      "name" : "struct{Port int; Addr [4]byte; raw syscall.RawSockaddrInet4}",
      "type" : "Struct",
      "underlying" : 62
    }, {
      "elem" : 64,
      "name" : "*[2]byte",
      "type" : "Pointer",
      "underlying" : 63
    }, {
      "elem" : 43,
      "name" : "[2]byte",
      "type" : "Array",
      "underlying" : 64
    }, {
      "name" : "untyped int",
      "type" : "Basic",
      "underlying" : 65
    }, {
      "elem" : 7,
      "name" : "*uint16",
      "type" : "Pointer",
      "underlying" : 66
    }, {
      "elem" : 68,
      "name" : "*syscall.RawSockaddrInet6",
      "type" : "Pointer",
      "underlying" : 67
    }, {
      "local-name" : "RawSockaddrInet6",
      "name" : "syscall.RawSockaddrInet6",
      "package" : 0,
      "type" : "Named",
      "underlying" : 69
    }, {
      "fields" : [ {
        "name" : "Family",
        "type" : 7
      }, {
        "name" : "Port",
        "type" : 7
      }, {
        "name" : "Flowinfo",
        "type" : 19
      }, {
        "name" : "Addr",
        "type" : 70
      }, {
        "name" : "Scope_id",
        "type" : 19
      } ],
      "name" : "struct{Family uint16; Port uint16; Flowinfo uint32; Addr [16]byte; Scope_id uint32}",
      "type" : "Struct",
      "underlying" : 69
    }, {
      "elem" : 43,
      "name" : "[16]byte",
      "type" : "Array",
      "underlying" : 70
    }, {
      "elem" : 72,
      "name" : "*syscall.SockaddrInet6",
      "type" : "Pointer",
      "underlying" : 71
    }, {
      "local-name" : "SockaddrInet6",
      "name" : "syscall.SockaddrInet6",
      "package" : 0,
      "type" : "Named",
      "underlying" : 73
    }, {
      "fields" : [ {
        "name" : "Port",
        "type" : 41
      }, {
        "name" : "ZoneId",
        "type" : 19
      }, {
        "name" : "Addr",
        "type" : 70
      }, {
        "name" : "raw",
        "type" : 68
      } ],
      "name" : "struct{Port int; ZoneId uint32; Addr [16]byte; raw syscall.RawSockaddrInet6}",
      "type" : "Struct",
      "underlying" : 73
    }, {
      "local-name" : "Errno",
      "name" : "syscall.Errno",
      "package" : 0,
      "type" : "Named",
      "underlying" : 75
    }, {
      "name" : "uintptr",
      "type" : "Basic",
      "underlying" : 75
    } ],
    "variables" : [ {
      "name" : "",
      "package" : -1,
      "type" : 20,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 0,
      "type" : 12,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "rsa",
      "package" : 0,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "[res0]",
      "package" : 0,
      "type" : 12,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "[res1]",
      "package" : 0,
      "type" : 20,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "Addr",
      "package" : 0,
      "type" : 5,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "Family",
      "package" : 0,
      "type" : 7,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "sa",
      "package" : 0,
      "type" : 28,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "Family",
      "package" : 0,
      "type" : 7,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "pp",
      "package" : 0,
      "type" : 25,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "Family",
      "package" : 0,
      "type" : 7,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "Pad",
      "package" : 0,
      "type" : 7,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "Pad",
      "package" : 0,
      "type" : 7,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "Pid",
      "package" : 0,
      "type" : 19,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "Pid",
      "package" : 0,
      "type" : 19,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "Groups",
      "package" : 0,
      "type" : 19,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "Groups",
      "package" : 0,
      "type" : 19,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "sa",
      "package" : 0,
      "type" : 38,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "Protocol",
      "package" : 0,
      "type" : 7,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "pp",
      "package" : 0,
      "type" : 32,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "Protocol",
      "package" : 0,
      "type" : 7,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "Ifindex",
      "package" : 0,
      "type" : 41,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "Ifindex",
      "package" : 0,
      "type" : 35,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "Hatype",
      "package" : 0,
      "type" : 7,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "Hatype",
      "package" : 0,
      "type" : 7,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "Pkttype",
      "package" : 0,
      "type" : 36,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "Pkttype",
      "package" : 0,
      "type" : 36,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "Halen",
      "package" : 0,
      "type" : 36,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "Halen",
      "package" : 0,
      "type" : 36,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "i",
      "package" : 0,
      "type" : 41,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "Addr",
      "package" : 0,
      "type" : 42,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "Addr",
      "package" : 0,
      "type" : 37,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "pp",
      "package" : 0,
      "type" : 45,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "Path",
      "package" : 0,
      "type" : 48,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "n",
      "package" : 0,
      "type" : 41,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "sa",
      "package" : 0,
      "type" : 49,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "Name",
      "package" : 0,
      "type" : 24,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "bytes",
      "package" : 0,
      "type" : 52,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "pp",
      "package" : 0,
      "type" : 56,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "Port",
      "package" : 0,
      "type" : 7,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "sa",
      "package" : 0,
      "type" : 60,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "Port",
      "package" : 0,
      "type" : 41,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "p",
      "package" : 0,
      "type" : 63,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "i",
      "package" : 0,
      "type" : 41,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "Addr",
      "package" : 0,
      "type" : 59,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "Addr",
      "package" : 0,
      "type" : 59,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "pp",
      "package" : 0,
      "type" : 67,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "Port",
      "package" : 0,
      "type" : 7,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "sa",
      "package" : 0,
      "type" : 71,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "Port",
      "package" : 0,
      "type" : 41,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "p",
      "package" : 0,
      "type" : 63,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "ZoneId",
      "package" : 0,
      "type" : 19,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "Scope_id",
      "package" : 0,
      "type" : 19,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "i",
      "package" : 0,
      "type" : 41,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "Addr",
      "package" : 0,
      "type" : 70,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "Addr",
      "package" : 0,
      "type" : 70,
      "exported" : true,
      "embedded" : false,
      "field" : true
    } ]
  },
  "go-version" : "1.14.3"
}