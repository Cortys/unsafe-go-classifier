{
  "usage" : {
    "file" : "syscall_linux.go",
    "label1" : "cast-bytes",
    "label2" : "serialization",
    "line" : "1833",
    "module" : "golang.org/x/sys",
    "pkg" : "golang.org/x/sys/unix",
    "project" : "rook/rook",
    "snippet" : "fh := (*fileHandle)(unsafe.Pointer(&buf[0]))",
    "version" : "v0.0.0-20191120155948-bd437916bb0e"
  },
  "cfg" : {
    "blocks" : [ {
      "update-vars" : [ ],
      "successors" : [ 2 ],
      "in-vars" : [ 2, 3, 1 ],
      "exit" : false,
      "out-vars" : [ 2, 3, 1 ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[entry]",
      "entry" : true,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ ],
      "in-vars" : [ ],
      "exit" : true,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[exit]",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 3 ],
      "in-vars" : [ 2, 3, 1 ],
      "exit" : false,
      "out-vars" : [ 7, 2, 3, 1 ],
      "decl-vars" : [ 7 ],
      "line-start" : 1826,
      "ast" : {
        "kind" : "statement",
        "target" : {
          "kind" : "decl",
          "specs" : [ {
            "comments" : [ ],
            "declared-type" : {
              "go-type" : 17,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 17,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "_C_int"
              }
            },
            "kind" : "spec",
            "names" : [ {
              "ident-kind" : "NoKind",
              "kind" : "ident",
              "value" : "mid"
            } ],
            "type" : "var",
            "values" : [ ]
          } ],
          "type" : "var"
        },
        "type" : "declaration"
      },
      "assign-vars" : [ ],
      "line-end" : 1826,
      "code" : "var mid _C_int",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 4 ],
      "in-vars" : [ 7, 2, 3, 1 ],
      "exit" : false,
      "out-vars" : [ 7, 8, 2, 3, 1 ],
      "decl-vars" : [ 8 ],
      "line-start" : 1829,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "size"
          }
        } ],
        "right" : [ {
          "go-type" : 10,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "40"
          }
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 1829,
      "code" : "size := uint32(32 + unsafe.Sizeof(fileHandle{}))",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 5 ],
      "in-vars" : [ 2, 3, 1, 7, 8 ],
      "exit" : false,
      "out-vars" : [ 8, 9, 2, 3, 1, 7 ],
      "decl-vars" : [ 9 ],
      "line-start" : 1830,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "didResize"
          }
        } ],
        "right" : [ {
          "go-type" : 18,
          "kind" : "constant",
          "value" : {
            "type" : "BOOL",
            "value" : "false"
          }
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 1830,
      "code" : "didResize := false",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1, 6 ],
      "in-vars" : [ 3, 1, 7, 8, 9, 2 ],
      "exit" : false,
      "out-vars" : [ 8, 9, 2, 3, 1, 7 ],
      "decl-vars" : [ ],
      "line-start" : 1831,
      "ast" : {
        "condition" : null,
        "kind" : "statement",
        "type" : "for"
      },
      "assign-vars" : [ ],
      "line-end" : 1849,
      "code" : "for {\n\tbuf := make([]byte, size)\n\tfh := (*fileHandle)(unsafe.Pointer(&buf[0]))\n\tfh.Bytes = size - uint32(unsafe.Sizeof(fileHandle{}))\n\terr = nameToHandleAt(dirfd, path, fh, &mid, flags)\n\tif err == EOVERFLOW {\n\t\tif didResize {\n\n\t\t\treturn\n\t\t}\n\t\tdidResize = true\n\t\tsize = fh.Bytes + uint32(unsafe.Sizeof(fileHandle{}))\n\t\tcontinue\n\t}\n\tif err != nil {\n\t\treturn\n\t}\n\treturn FileHandle{fh}, int(mid), nil\n}",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 7 ],
      "in-vars" : [ 9, 2, 3, 1, 7, 8 ],
      "exit" : false,
      "out-vars" : [ 10, 8, 9, 2, 3, 1, 7 ],
      "decl-vars" : [ 10 ],
      "line-start" : 1832,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "buf"
          }
        } ],
        "right" : [ {
          "argument" : {
            "element" : {
              "go-type" : 20,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 20,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "byte"
              }
            },
            "go-type" : 19,
            "kind" : "type",
            "type" : "slice"
          },
          "go-type" : 19,
          "kind" : "expression",
          "rest" : [ {
            "go-type" : 10,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "size",
              "variable" : 8
            }
          } ],
          "type" : "make"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 1832,
      "code" : "buf := make([]byte, size)",
      "entry" : false,
      "use-vars" : [ 8 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 8 ],
      "in-vars" : [ 2, 3, 1, 7, 10, 8, 9 ],
      "exit" : false,
      "out-vars" : [ 9, 11, 2, 3, 1, 7, 8 ],
      "decl-vars" : [ 11 ],
      "line-start" : 1833,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "fh"
          }
        } ],
        "right" : [ {
          "coerced-to" : {
            "contained" : {
              "go-type" : 8,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 8,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "fileHandle"
              }
            },
            "go-type" : 7,
            "kind" : "type",
            "type" : "pointer"
          },
          "go-type" : 7,
          "kind" : "expression",
          "target" : {
            "coerced-to" : {
              "go-type" : 21,
              "kind" : "type",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 1,
                "value" : "unsafe"
              },
              "type" : "identifier",
              "value" : {
                "go-type" : 21,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "Pointer"
              }
            },
            "go-type" : 21,
            "kind" : "expression",
            "target" : {
              "go-type" : 22,
              "kind" : "expression",
              "operator" : "&",
              "target" : {
                "go-type" : 20,
                "index" : {
                  "go-type" : 2,
                  "kind" : "constant",
                  "value" : {
                    "type" : "INT",
                    "value" : "0"
                  }
                },
                "kind" : "expression",
                "target" : {
                  "go-type" : 19,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "buf",
                    "variable" : 10
                  }
                },
                "type" : "index"
              },
              "type" : "unary"
            },
            "type" : "cast"
          },
          "type" : "cast"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 1833,
      "code" : "fh := (*fileHandle)(unsafe.Pointer(&buf[0]))",
      "entry" : false,
      "use-vars" : [ 10 ]
    }, {
      "update-vars" : [ 11 ],
      "successors" : [ 9 ],
      "in-vars" : [ 8, 9, 11, 2, 3, 1, 7 ],
      "exit" : false,
      "out-vars" : [ 2, 3, 1, 7, 9, 11 ],
      "decl-vars" : [ ],
      "line-start" : 1834,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "Bytes",
            "variable" : 12
          },
          "go-type" : 10,
          "kind" : "expression",
          "target" : {
            "go-type" : 7,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "fh",
              "variable" : 11
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "go-type" : 10,
          "kind" : "expression",
          "left" : {
            "go-type" : 10,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "size",
              "variable" : 8
            }
          },
          "operator" : "-",
          "right" : {
            "go-type" : 10,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "8"
            }
          },
          "type" : "binary"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 1834,
      "code" : "fh.Bytes = size - uint32(unsafe.Sizeof(fileHandle{}))",
      "entry" : false,
      "use-vars" : [ 11, 8 ]
    }, {
      "update-vars" : [ 6 ],
      "successors" : [ 10 ],
      "in-vars" : [ 7, 9, 11, 2, 3, 1 ],
      "exit" : false,
      "out-vars" : [ 3, 1, 7, 9, 11, 6, 2 ],
      "decl-vars" : [ ],
      "line-start" : 1835,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 12,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "err",
            "variable" : 6
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "dirfd",
              "variable" : 1
            }
          }, {
            "go-type" : 3,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "path",
              "variable" : 2
            }
          }, {
            "go-type" : 7,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "fh",
              "variable" : 11
            }
          }, {
            "go-type" : 25,
            "kind" : "expression",
            "operator" : "&",
            "target" : {
              "go-type" : 17,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "mid",
                "variable" : 7
              }
            },
            "type" : "unary"
          }, {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "flags",
              "variable" : 3
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 23,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "nameToHandleAt"
            }
          },
          "go-type" : 12,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 6 ],
      "line-end" : 1835,
      "code" : "err = nameToHandleAt(dirfd, path, fh, &mid, flags)",
      "entry" : false,
      "use-vars" : [ 11, 7, 3, 1, 2 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 11, 16 ],
      "in-vars" : [ 7, 9, 11, 6, 2, 3, 1 ],
      "exit" : false,
      "out-vars" : [ 7, 9, 11, 6, 2, 3, 1 ],
      "decl-vars" : [ ],
      "line-start" : 1836,
      "ast" : {
        "condition" : {
          "go-type" : 27,
          "kind" : "expression",
          "left" : {
            "go-type" : 12,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "err",
              "variable" : 6
            }
          },
          "operator" : "==",
          "right" : {
            "go-type" : 28,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "75"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 1844,
      "code" : "if err == EOVERFLOW {\n\tif didResize {\n\n\t\treturn\n\t}\n\tdidResize = true\n\tsize = fh.Bytes + uint32(unsafe.Sizeof(fileHandle{}))\n\tcontinue\n}",
      "entry" : false,
      "use-vars" : [ 6 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 12, 13 ],
      "in-vars" : [ 1, 7, 9, 11, 2, 3 ],
      "exit" : false,
      "out-vars" : [ 3, 1, 7, 11, 2 ],
      "decl-vars" : [ ],
      "line-start" : 1837,
      "ast" : {
        "condition" : {
          "go-type" : 18,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "didResize",
            "variable" : 9
          }
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 1840,
      "code" : "if didResize {\n\n\treturn\n}",
      "entry" : false,
      "use-vars" : [ 9 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 1839,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ ]
      },
      "assign-vars" : [ ],
      "line-end" : 1839,
      "code" : "return",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ 9 ],
      "successors" : [ 14 ],
      "in-vars" : [ 7, 11, 2, 3, 1 ],
      "exit" : false,
      "out-vars" : [ 7, 9, 11, 2, 3, 1 ],
      "decl-vars" : [ ],
      "line-start" : 1841,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 18,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "didResize",
            "variable" : 9
          }
        } ],
        "right" : [ {
          "go-type" : 18,
          "kind" : "constant",
          "value" : {
            "type" : "BOOL",
            "value" : "true"
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 9 ],
      "line-end" : 1841,
      "code" : "didResize = true",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ 8 ],
      "successors" : [ 15 ],
      "in-vars" : [ 3, 1, 7, 9, 11, 2 ],
      "exit" : false,
      "out-vars" : [ 7, 8, 9, 2, 3, 1 ],
      "decl-vars" : [ ],
      "line-start" : 1842,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 10,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "size",
            "variable" : 8
          }
        } ],
        "right" : [ {
          "go-type" : 10,
          "kind" : "expression",
          "left" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "Bytes",
              "variable" : 12
            },
            "go-type" : 10,
            "kind" : "expression",
            "target" : {
              "go-type" : 7,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "fh",
                "variable" : 11
              }
            },
            "type" : "selector"
          },
          "operator" : "+",
          "right" : {
            "go-type" : 10,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "8"
            }
          },
          "type" : "binary"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 8 ],
      "line-end" : 1842,
      "code" : "size = fh.Bytes + uint32(unsafe.Sizeof(fileHandle{}))",
      "entry" : false,
      "use-vars" : [ 11 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 5 ],
      "in-vars" : [ 7, 8, 9, 2, 3, 1 ],
      "exit" : false,
      "out-vars" : [ 8, 9, 2, 3, 1, 7 ],
      "decl-vars" : [ ],
      "line-start" : 1843,
      "ast" : {
        "kind" : "statement",
        "label" : null,
        "type" : "continue"
      },
      "assign-vars" : [ ],
      "line-end" : 1843,
      "code" : "continue",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 17, 18 ],
      "in-vars" : [ 7, 11, 6 ],
      "exit" : false,
      "out-vars" : [ 11, 7 ],
      "decl-vars" : [ ],
      "line-start" : 1845,
      "ast" : {
        "condition" : {
          "go-type" : 27,
          "kind" : "expression",
          "left" : {
            "go-type" : 12,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "err",
              "variable" : 6
            }
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 30,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Nil",
              "kind" : "ident",
              "value" : "nil"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 1847,
      "code" : "if err != nil {\n\treturn\n}",
      "entry" : false,
      "use-vars" : [ 6 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 1846,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ ]
      },
      "assign-vars" : [ ],
      "line-end" : 1846,
      "code" : "return",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 7, 11 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 1848,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "declared" : {
            "go-type" : 5,
            "kind" : "type",
            "type" : "identifier",
            "value" : {
              "go-type" : 5,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "FileHandle"
            }
          },
          "go-type" : 5,
          "kind" : "literal",
          "type" : "composite",
          "values" : [ {
            "go-type" : 7,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "fh",
              "variable" : 11
            }
          } ]
        }, {
          "coerced-to" : {
            "go-type" : 2,
            "kind" : "type",
            "type" : "identifier",
            "value" : {
              "go-type" : 2,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "int"
            }
          },
          "go-type" : 2,
          "kind" : "expression",
          "target" : {
            "go-type" : 17,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "mid",
              "variable" : 7
            }
          },
          "type" : "cast"
        }, {
          "go-type" : 30,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Nil",
            "kind" : "ident",
            "value" : "nil"
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 1848,
      "code" : "return FileHandle{fh}, int(mid), nil",
      "entry" : false,
      "use-vars" : [ 11, 7 ]
    } ],
    "code" : "// NameToHandleAt wraps the name_to_handle_at system call; it obtains\n// a handle for a path name.\nfunc NameToHandleAt(dirfd int, path string, flags int) (handle FileHandle, mountID int, err error) {\n\tvar mid _C_int\n\n\tsize := uint32(32 + unsafe.Sizeof(fileHandle{}))\n\tdidResize := false\n\tfor {\n\t\tbuf := make([]byte, size)\n\t\tfh := (*fileHandle)(unsafe.Pointer(&buf[0]))\n\t\tfh.Bytes = size - uint32(unsafe.Sizeof(fileHandle{}))\n\t\terr = nameToHandleAt(dirfd, path, fh, &mid, flags)\n\t\tif err == EOVERFLOW {\n\t\t\tif didResize {\n\n\t\t\t\treturn\n\t\t\t}\n\t\t\tdidResize = true\n\t\t\tsize = fh.Bytes + uint32(unsafe.Sizeof(fileHandle{}))\n\t\t\tcontinue\n\t\t}\n\t\tif err != nil {\n\t\t\treturn\n\t\t}\n\t\treturn FileHandle{fh}, int(mid), nil\n\t}\n}",
    "defines" : [ 0 ],
    "functions" : [ {
      "name" : "NameToHandleAt",
      "package" : 0,
      "type" : 0,
      "exported" : true
    }, {
      "name" : "nameToHandleAt",
      "package" : 0,
      "type" : 23,
      "exported" : false
    } ],
    "line-end" : 1850,
    "line-start" : 1825,
    "names" : [ "NameToHandleAt" ],
    "package" : 0,
    "packages" : [ {
      "name" : "unix",
      "path" : "golang.org/x/sys/unix"
    }, {
      "name" : "unsafe",
      "path" : "unsafe"
    }, {
      "name" : "syscall",
      "path" : "syscall"
    } ],
    "params" : [ 1, 2, 3 ],
    "receivers" : [ ],
    "results" : [ 4, 5, 6 ],
    "type" : "function",
    "types" : [ {
      "name" : "func(dirfd int, path string, flags int) (handle golang.org/x/sys/unix.FileHandle, mountID int, err error)",
      "params" : 1,
      "recv" : -1,
      "results" : 4,
      "type" : "Signature",
      "underlying" : 0,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "dirfd",
        "type" : 2
      }, {
        "name" : "path",
        "type" : 3
      }, {
        "name" : "flags",
        "type" : 2
      } ],
      "name" : "(dirfd int, path string, flags int)",
      "type" : "Tuple",
      "underlying" : 1
    }, {
      "name" : "int",
      "type" : "Basic",
      "underlying" : 2
    }, {
      "name" : "string",
      "type" : "Basic",
      "underlying" : 3
    }, {
      "fields" : [ {
        "name" : "handle",
        "type" : 5
      }, {
        "name" : "mountID",
        "type" : 2
      }, {
        "name" : "err",
        "type" : 12
      } ],
      "name" : "(handle golang.org/x/sys/unix.FileHandle, mountID int, err error)",
      "type" : "Tuple",
      "underlying" : 4
    }, {
      "local-name" : "FileHandle",
      "name" : "golang.org/x/sys/unix.FileHandle",
      "package" : 0,
      "type" : "Named",
      "underlying" : 6
    }, {
      "fields" : [ {
        "name" : "fileHandle",
        "type" : 7
      } ],
      "name" : "struct{*golang.org/x/sys/unix.fileHandle}",
      "type" : "Struct",
      "underlying" : 6
    }, {
      "elem" : 8,
      "name" : "*golang.org/x/sys/unix.fileHandle",
      "type" : "Pointer",
      "underlying" : 7
    }, {
      "local-name" : "fileHandle",
      "name" : "golang.org/x/sys/unix.fileHandle",
      "package" : 0,
      "type" : "Named",
      "underlying" : 9
    }, {
      "fields" : [ {
        "name" : "Bytes",
        "type" : 10
      }, {
        "name" : "Type",
        "type" : 11
      } ],
      "name" : "struct{Bytes uint32; Type int32}",
      "type" : "Struct",
      "underlying" : 9
    }, {
      "name" : "uint32",
      "type" : "Basic",
      "underlying" : 10
    }, {
      "name" : "int32",
      "type" : "Basic",
      "underlying" : 11
    }, {
      "local-name" : "error",
      "name" : "error",
      "package" : -1,
      "type" : "Named",
      "underlying" : 13
    }, {
      "methods" : [ {
        "name" : "Error",
        "type" : 14
      } ],
      "name" : "interface{Error() string}",
      "type" : "Interface",
      "underlying" : 13
    }, {
      "name" : "func() string",
      "params" : 15,
      "recv" : 0,
      "results" : 16,
      "type" : "Signature",
      "underlying" : 14,
      "variadic" : false
    }, {
      "fields" : [ ],
      "name" : "()",
      "type" : "Tuple",
      "underlying" : 15
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 3
      } ],
      "name" : "(string)",
      "type" : "Tuple",
      "underlying" : 16
    }, {
      "local-name" : "_C_int",
      "name" : "golang.org/x/sys/unix._C_int",
      "package" : 0,
      "type" : "Named",
      "underlying" : 11
    }, {
      "name" : "bool",
      "type" : "Basic",
      "underlying" : 18
    }, {
      "elem" : 20,
      "name" : "[]byte",
      "type" : "Slice",
      "underlying" : 19
    }, {
      "name" : "byte",
      "type" : "Basic",
      "underlying" : 20
    }, {
      "local-name" : "Pointer",
      "name" : "unsafe.Pointer",
      "package" : 1,
      "type" : "Basic",
      "underlying" : 21
    }, {
      "elem" : 20,
      "name" : "*byte",
      "type" : "Pointer",
      "underlying" : 22
    }, {
      "name" : "func(dirFD int, pathname string, fh *golang.org/x/sys/unix.fileHandle, mountID *golang.org/x/sys/unix._C_int, flags int) (err error)",
      "params" : 24,
      "recv" : -1,
      "results" : 26,
      "type" : "Signature",
      "underlying" : 23,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "dirFD",
        "type" : 2
      }, {
        "name" : "pathname",
        "type" : 3
      }, {
        "name" : "fh",
        "type" : 7
      }, {
        "name" : "mountID",
        "type" : 25
      }, {
        "name" : "flags",
        "type" : 2
      } ],
      "name" : "(dirFD int, pathname string, fh *golang.org/x/sys/unix.fileHandle, mountID *golang.org/x/sys/unix._C_int, flags int)",
      "type" : "Tuple",
      "underlying" : 24
    }, {
      "elem" : 17,
      "name" : "*golang.org/x/sys/unix._C_int",
      "type" : "Pointer",
      "underlying" : 25
    }, {
      "fields" : [ {
        "name" : "err",
        "type" : 12
      } ],
      "name" : "(err error)",
      "type" : "Tuple",
      "underlying" : 26
    }, {
      "name" : "untyped bool",
      "type" : "Basic",
      "underlying" : 27
    }, {
      "local-name" : "Errno",
      "name" : "syscall.Errno",
      "package" : 2,
      "type" : "Named",
      "underlying" : 29
    }, {
      "name" : "uintptr",
      "type" : "Basic",
      "underlying" : 29
    }, {
      "name" : "untyped nil",
      "type" : "Basic",
      "underlying" : 30
    } ],
    "variables" : [ {
      "name" : "",
      "package" : -1,
      "type" : 12,
      "exported" : false
    }, {
      "name" : "dirfd",
      "package" : 0,
      "type" : 2,
      "exported" : false
    }, {
      "name" : "path",
      "package" : 0,
      "type" : 3,
      "exported" : false
    }, {
      "name" : "flags",
      "package" : 0,
      "type" : 2,
      "exported" : false
    }, {
      "name" : "handle",
      "package" : 0,
      "type" : 5,
      "exported" : false
    }, {
      "name" : "mountID",
      "package" : 0,
      "type" : 2,
      "exported" : false
    }, {
      "name" : "err",
      "package" : 0,
      "type" : 12,
      "exported" : false
    }, {
      "name" : "mid",
      "package" : 0,
      "type" : 17,
      "exported" : false
    }, {
      "name" : "size",
      "package" : 0,
      "type" : 10,
      "exported" : false
    }, {
      "name" : "didResize",
      "package" : 0,
      "type" : 18,
      "exported" : false
    }, {
      "name" : "buf",
      "package" : 0,
      "type" : 19,
      "exported" : false
    }, {
      "name" : "fh",
      "package" : 0,
      "type" : 7,
      "exported" : false
    }, {
      "name" : "Bytes",
      "package" : 0,
      "type" : 10,
      "exported" : true
    } ]
  },
  "go-version" : "1.14.3"
}