{
  "usage" : {
    "file" : "syscall_linux.go",
    "label1" : "cast-bytes",
    "label2" : "serialization",
    "line" : "583",
    "module" : "golang.org/x/sys",
    "pkg" : "golang.org/x/sys/unix",
    "project" : "mattermost/mattermost-server",
    "snippet" : "rx := (*[4]byte)(unsafe.Pointer(&sa.RxID))",
    "version" : "v0.0.0-20200515095857-1151b9dac4a9"
  },
  "cfg" : {
    "blocks" : [ {
      "update-vars" : [ ],
      "successors" : [ 2 ],
      "in-vars" : [ 1 ],
      "exit" : false,
      "out-vars" : [ 1 ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[entry]",
      "entry" : true,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ ],
      "in-vars" : [ ],
      "exit" : true,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[exit]",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 3, 4 ],
      "in-vars" : [ 1 ],
      "exit" : false,
      "out-vars" : [ 1 ],
      "decl-vars" : [ ],
      "line-start" : 578,
      "ast" : {
        "condition" : {
          "go-type" : 21,
          "kind" : "expression",
          "left" : {
            "go-type" : 21,
            "kind" : "expression",
            "left" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "Ifindex",
                "variable" : 5
              },
              "go-type" : 14,
              "kind" : "expression",
              "target" : {
                "go-type" : 11,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "sa",
                  "variable" : 1
                }
              },
              "type" : "selector"
            },
            "operator" : "<",
            "right" : {
              "go-type" : 14,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "0"
              }
            },
            "type" : "binary"
          },
          "operator" : "||",
          "right" : {
            "go-type" : 21,
            "kind" : "expression",
            "left" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "Ifindex",
                "variable" : 5
              },
              "go-type" : 14,
              "kind" : "expression",
              "target" : {
                "go-type" : 11,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "sa",
                  "variable" : 1
                }
              },
              "type" : "selector"
            },
            "operator" : ">",
            "right" : {
              "go-type" : 14,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "2147483647"
              }
            },
            "type" : "binary"
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 580,
      "code" : "if sa.Ifindex < 0 || sa.Ifindex > 0x7fffffff {\n\treturn nil, 0, EINVAL\n}",
      "entry" : false,
      "use-vars" : [ 1 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 579,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 3,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Nil",
            "kind" : "ident",
            "value" : "nil"
          }
        }, {
          "go-type" : 4,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "0"
          }
        }, {
          "go-type" : 22,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "22"
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 579,
      "code" : "return nil, 0, EINVAL",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ 1 ],
      "successors" : [ 5 ],
      "in-vars" : [ 1 ],
      "exit" : false,
      "out-vars" : [ 1 ],
      "decl-vars" : [ ],
      "line-start" : 581,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "Family",
            "variable" : 7
          },
          "go-type" : 17,
          "kind" : "expression",
          "target" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "raw",
              "variable" : 6
            },
            "go-type" : 15,
            "kind" : "expression",
            "target" : {
              "go-type" : 11,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "sa",
                "variable" : 1
              }
            },
            "type" : "selector"
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "go-type" : 17,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "29"
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 581,
      "code" : "sa.raw.Family = AF_CAN",
      "entry" : false,
      "use-vars" : [ 1 ]
    }, {
      "update-vars" : [ 1 ],
      "successors" : [ 6 ],
      "in-vars" : [ 1 ],
      "exit" : false,
      "out-vars" : [ 1 ],
      "decl-vars" : [ ],
      "line-start" : 582,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "Ifindex",
            "variable" : 8
          },
          "go-type" : 18,
          "kind" : "expression",
          "target" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "raw",
              "variable" : 6
            },
            "go-type" : 15,
            "kind" : "expression",
            "target" : {
              "go-type" : 11,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "sa",
                "variable" : 1
              }
            },
            "type" : "selector"
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "coerced-to" : {
            "go-type" : 18,
            "kind" : "type",
            "type" : "identifier",
            "value" : {
              "go-type" : 18,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "int32"
            }
          },
          "go-type" : 18,
          "kind" : "expression",
          "target" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "Ifindex",
              "variable" : 5
            },
            "go-type" : 14,
            "kind" : "expression",
            "target" : {
              "go-type" : 11,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "sa",
                "variable" : 1
              }
            },
            "type" : "selector"
          },
          "type" : "cast"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 582,
      "code" : "sa.raw.Ifindex = int32(sa.Ifindex)",
      "entry" : false,
      "use-vars" : [ 1 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 8 ],
      "in-vars" : [ 1 ],
      "exit" : false,
      "out-vars" : [ 1, 10 ],
      "decl-vars" : [ 10 ],
      "line-start" : 583,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "rx"
          }
        } ],
        "right" : [ {
          "coerced-to" : {
            "contained" : {
              "element" : {
                "go-type" : 20,
                "kind" : "type",
                "type" : "identifier",
                "value" : {
                  "go-type" : 20,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "byte"
                }
              },
              "go-type" : 25,
              "kind" : "type",
              "length" : {
                "go-type" : 26,
                "kind" : "constant",
                "value" : {
                  "type" : "INT",
                  "value" : "4"
                }
              },
              "type" : "array"
            },
            "go-type" : 24,
            "kind" : "type",
            "type" : "pointer"
          },
          "go-type" : 24,
          "kind" : "expression",
          "target" : {
            "coerced-to" : {
              "go-type" : 3,
              "kind" : "type",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 1,
                "value" : "unsafe"
              },
              "type" : "identifier",
              "value" : {
                "go-type" : 3,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "Pointer"
              }
            },
            "go-type" : 3,
            "kind" : "expression",
            "target" : {
              "go-type" : 27,
              "kind" : "expression",
              "operator" : "&",
              "target" : {
                "field" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "RxID",
                  "variable" : 9
                },
                "go-type" : 5,
                "kind" : "expression",
                "target" : {
                  "go-type" : 11,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "sa",
                    "variable" : 1
                  }
                },
                "type" : "selector"
              },
              "type" : "unary"
            },
            "type" : "cast"
          },
          "type" : "cast"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 583,
      "code" : "rx := (*[4]byte)(unsafe.Pointer(&sa.RxID))",
      "entry" : false,
      "use-vars" : [ 1 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 10, 11 ],
      "in-vars" : [ 1, 10, 11 ],
      "exit" : false,
      "out-vars" : [ 1, 10, 11 ],
      "decl-vars" : [ ],
      "line-start" : 584,
      "ast" : {
        "condition" : {
          "go-type" : 21,
          "kind" : "expression",
          "left" : {
            "go-type" : 14,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "i",
              "variable" : 11
            }
          },
          "operator" : "<",
          "right" : {
            "go-type" : 14,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "4"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "for"
      },
      "assign-vars" : [ ],
      "line-end" : 586,
      "code" : "for i := 0; i < 4; i++ {\n\tsa.raw.Addr[i] = rx[i]\n}",
      "entry" : false,
      "use-vars" : [ 11 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 7 ],
      "in-vars" : [ 1, 10 ],
      "exit" : false,
      "out-vars" : [ 1, 10, 11 ],
      "decl-vars" : [ 11 ],
      "line-start" : 584,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "i"
          }
        } ],
        "right" : [ {
          "go-type" : 14,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "0"
          }
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 584,
      "code" : "i := 0",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ 11 ],
      "successors" : [ 7 ],
      "in-vars" : [ 1, 10, 11 ],
      "exit" : false,
      "out-vars" : [ 1, 10, 11 ],
      "decl-vars" : [ ],
      "line-start" : 584,
      "ast" : {
        "kind" : "statement",
        "operation" : "++",
        "target" : {
          "go-type" : 14,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "i",
            "variable" : 11
          }
        },
        "type" : "crement"
      },
      "assign-vars" : [ 11 ],
      "line-end" : 584,
      "code" : "i++",
      "entry" : false,
      "use-vars" : [ 11 ]
    }, {
      "update-vars" : [ 1 ],
      "successors" : [ 9 ],
      "in-vars" : [ 1, 10, 11 ],
      "exit" : false,
      "out-vars" : [ 10, 11, 1 ],
      "decl-vars" : [ ],
      "line-start" : 585,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 20,
          "index" : {
            "go-type" : 14,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "i",
              "variable" : 11
            }
          },
          "kind" : "expression",
          "target" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "Addr",
              "variable" : 12
            },
            "go-type" : 19,
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "raw",
                "variable" : 6
              },
              "go-type" : 15,
              "kind" : "expression",
              "target" : {
                "go-type" : 11,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "sa",
                  "variable" : 1
                }
              },
              "type" : "selector"
            },
            "type" : "selector"
          },
          "type" : "index"
        } ],
        "right" : [ {
          "go-type" : 20,
          "index" : {
            "go-type" : 14,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "i",
              "variable" : 11
            }
          },
          "kind" : "expression",
          "target" : {
            "go-type" : 24,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "rx",
              "variable" : 10
            }
          },
          "type" : "index"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 585,
      "code" : "sa.raw.Addr[i] = rx[i]",
      "entry" : false,
      "use-vars" : [ 10, 11, 1 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 13 ],
      "in-vars" : [ 1 ],
      "exit" : false,
      "out-vars" : [ 1, 14 ],
      "decl-vars" : [ 14 ],
      "line-start" : 587,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "tx"
          }
        } ],
        "right" : [ {
          "coerced-to" : {
            "contained" : {
              "element" : {
                "go-type" : 20,
                "kind" : "type",
                "type" : "identifier",
                "value" : {
                  "go-type" : 20,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "byte"
                }
              },
              "go-type" : 25,
              "kind" : "type",
              "length" : {
                "go-type" : 26,
                "kind" : "constant",
                "value" : {
                  "type" : "INT",
                  "value" : "4"
                }
              },
              "type" : "array"
            },
            "go-type" : 24,
            "kind" : "type",
            "type" : "pointer"
          },
          "go-type" : 24,
          "kind" : "expression",
          "target" : {
            "coerced-to" : {
              "go-type" : 3,
              "kind" : "type",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 1,
                "value" : "unsafe"
              },
              "type" : "identifier",
              "value" : {
                "go-type" : 3,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "Pointer"
              }
            },
            "go-type" : 3,
            "kind" : "expression",
            "target" : {
              "go-type" : 27,
              "kind" : "expression",
              "operator" : "&",
              "target" : {
                "field" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "TxID",
                  "variable" : 13
                },
                "go-type" : 5,
                "kind" : "expression",
                "target" : {
                  "go-type" : 11,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "sa",
                    "variable" : 1
                  }
                },
                "type" : "selector"
              },
              "type" : "unary"
            },
            "type" : "cast"
          },
          "type" : "cast"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 587,
      "code" : "tx := (*[4]byte)(unsafe.Pointer(&sa.TxID))",
      "entry" : false,
      "use-vars" : [ 1 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 15, 16 ],
      "in-vars" : [ 1, 15, 14 ],
      "exit" : false,
      "out-vars" : [ 14, 1, 15 ],
      "decl-vars" : [ ],
      "line-start" : 588,
      "ast" : {
        "condition" : {
          "go-type" : 21,
          "kind" : "expression",
          "left" : {
            "go-type" : 14,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "i",
              "variable" : 15
            }
          },
          "operator" : "<",
          "right" : {
            "go-type" : 14,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "4"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "for"
      },
      "assign-vars" : [ ],
      "line-end" : 590,
      "code" : "for i := 0; i < 4; i++ {\n\tsa.raw.Addr[i+4] = tx[i]\n}",
      "entry" : false,
      "use-vars" : [ 15 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 12 ],
      "in-vars" : [ 1, 14 ],
      "exit" : false,
      "out-vars" : [ 1, 15, 14 ],
      "decl-vars" : [ 15 ],
      "line-start" : 588,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "i"
          }
        } ],
        "right" : [ {
          "go-type" : 14,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "0"
          }
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 588,
      "code" : "i := 0",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ 15 ],
      "successors" : [ 12 ],
      "in-vars" : [ 1, 15, 14 ],
      "exit" : false,
      "out-vars" : [ 1, 15, 14 ],
      "decl-vars" : [ ],
      "line-start" : 588,
      "ast" : {
        "kind" : "statement",
        "operation" : "++",
        "target" : {
          "go-type" : 14,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "i",
            "variable" : 15
          }
        },
        "type" : "crement"
      },
      "assign-vars" : [ 15 ],
      "line-end" : 588,
      "code" : "i++",
      "entry" : false,
      "use-vars" : [ 15 ]
    }, {
      "update-vars" : [ 1 ],
      "successors" : [ 14 ],
      "in-vars" : [ 1, 15, 14 ],
      "exit" : false,
      "out-vars" : [ 1, 15, 14 ],
      "decl-vars" : [ ],
      "line-start" : 589,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 20,
          "index" : {
            "go-type" : 14,
            "kind" : "expression",
            "left" : {
              "go-type" : 14,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "i",
                "variable" : 15
              }
            },
            "operator" : "+",
            "right" : {
              "go-type" : 14,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "4"
              }
            },
            "type" : "binary"
          },
          "kind" : "expression",
          "target" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "Addr",
              "variable" : 12
            },
            "go-type" : 19,
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "raw",
                "variable" : 6
              },
              "go-type" : 15,
              "kind" : "expression",
              "target" : {
                "go-type" : 11,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "sa",
                  "variable" : 1
                }
              },
              "type" : "selector"
            },
            "type" : "selector"
          },
          "type" : "index"
        } ],
        "right" : [ {
          "go-type" : 20,
          "index" : {
            "go-type" : 14,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "i",
              "variable" : 15
            }
          },
          "kind" : "expression",
          "target" : {
            "go-type" : 24,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "tx",
              "variable" : 14
            }
          },
          "type" : "index"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 589,
      "code" : "sa.raw.Addr[i+4] = tx[i]",
      "entry" : false,
      "use-vars" : [ 14, 1, 15 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 1 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 591,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "coerced-to" : {
            "go-type" : 3,
            "kind" : "type",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 1,
              "value" : "unsafe"
            },
            "type" : "identifier",
            "value" : {
              "go-type" : 3,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "Pointer"
            }
          },
          "go-type" : 3,
          "kind" : "expression",
          "target" : {
            "go-type" : 28,
            "kind" : "expression",
            "operator" : "&",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "raw",
                "variable" : 6
              },
              "go-type" : 15,
              "kind" : "expression",
              "target" : {
                "go-type" : 11,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "sa",
                  "variable" : 1
                }
              },
              "type" : "selector"
            },
            "type" : "unary"
          },
          "type" : "cast"
        }, {
          "go-type" : 4,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "24"
          }
        }, {
          "go-type" : 29,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Nil",
            "kind" : "ident",
            "value" : "nil"
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 591,
      "code" : "return unsafe.Pointer(&sa.raw), SizeofSockaddrCAN, nil",
      "entry" : false,
      "use-vars" : [ 1 ]
    } ],
    "code" : "func (sa *SockaddrCAN) sockaddr() (unsafe.Pointer, _Socklen, error) {\n\tif sa.Ifindex < 0 || sa.Ifindex > 0x7fffffff {\n\t\treturn nil, 0, EINVAL\n\t}\n\tsa.raw.Family = AF_CAN\n\tsa.raw.Ifindex = int32(sa.Ifindex)\n\trx := (*[4]byte)(unsafe.Pointer(&sa.RxID))\n\tfor i := 0; i < 4; i++ {\n\t\tsa.raw.Addr[i] = rx[i]\n\t}\n\ttx := (*[4]byte)(unsafe.Pointer(&sa.TxID))\n\tfor i := 0; i < 4; i++ {\n\t\tsa.raw.Addr[i+4] = tx[i]\n\t}\n\treturn unsafe.Pointer(&sa.raw), SizeofSockaddrCAN, nil\n}",
    "defines" : [ 0 ],
    "functions" : [ {
      "name" : "sockaddr",
      "package" : 0,
      "type" : 0,
      "exported" : false
    } ],
    "line-end" : 592,
    "line-start" : 577,
    "names" : [ "sockaddr" ],
    "package" : 0,
    "packages" : [ {
      "name" : "unix",
      "path" : "golang.org/x/sys/unix"
    }, {
      "name" : "unsafe",
      "path" : "unsafe"
    }, {
      "name" : "syscall",
      "path" : "syscall"
    } ],
    "params" : [ ],
    "receivers" : [ 1 ],
    "results" : [ 2, 3, 4 ],
    "type" : "function",
    "types" : [ {
      "name" : "func() (unsafe.Pointer, golang.org/x/sys/unix._Socklen, error)",
      "params" : 1,
      "recv" : 1,
      "results" : 2,
      "type" : "Signature",
      "underlying" : 0,
      "variadic" : false
    }, {
      "fields" : [ ],
      "name" : "()",
      "type" : "Tuple",
      "underlying" : 1
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 3
      }, {
        "name" : "",
        "type" : 4
      }, {
        "name" : "",
        "type" : 6
      } ],
      "name" : "(unsafe.Pointer, golang.org/x/sys/unix._Socklen, error)",
      "type" : "Tuple",
      "underlying" : 2
    }, {
      "local-name" : "Pointer",
      "name" : "unsafe.Pointer",
      "package" : 1,
      "type" : "Basic",
      "underlying" : 3
    }, {
      "local-name" : "_Socklen",
      "name" : "golang.org/x/sys/unix._Socklen",
      "package" : 0,
      "type" : "Named",
      "underlying" : 5
    }, {
      "name" : "uint32",
      "type" : "Basic",
      "underlying" : 5
    }, {
      "local-name" : "error",
      "name" : "error",
      "package" : -1,
      "type" : "Named",
      "underlying" : 7
    }, {
      "methods" : [ {
        "name" : "Error",
        "type" : 8
      } ],
      "name" : "interface{Error() string}",
      "type" : "Interface",
      "underlying" : 7
    }, {
      "name" : "func() string",
      "params" : 1,
      "recv" : 0,
      "results" : 9,
      "type" : "Signature",
      "underlying" : 8,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 10
      } ],
      "name" : "(string)",
      "type" : "Tuple",
      "underlying" : 9
    }, {
      "name" : "string",
      "type" : "Basic",
      "underlying" : 10
    }, {
      "elem" : 12,
      "name" : "*golang.org/x/sys/unix.SockaddrCAN",
      "type" : "Pointer",
      "underlying" : 11
    }, {
      "local-name" : "SockaddrCAN",
      "name" : "golang.org/x/sys/unix.SockaddrCAN",
      "package" : 0,
      "type" : "Named",
      "underlying" : 13
    }, {
      "fields" : [ {
        "name" : "Ifindex",
        "type" : 14
      }, {
        "name" : "RxID",
        "type" : 5
      }, {
        "name" : "TxID",
        "type" : 5
      }, {
        "name" : "raw",
        "type" : 15
      } ],
      "name" : "struct{Ifindex int; RxID uint32; TxID uint32; raw golang.org/x/sys/unix.RawSockaddrCAN}",
      "type" : "Struct",
      "underlying" : 13
    }, {
      "name" : "int",
      "type" : "Basic",
      "underlying" : 14
    }, {
      "local-name" : "RawSockaddrCAN",
      "name" : "golang.org/x/sys/unix.RawSockaddrCAN",
      "package" : 0,
      "type" : "Named",
      "underlying" : 16
    }, {
      "fields" : [ {
        "name" : "Family",
        "type" : 17
      }, {
        "name" : "Ifindex",
        "type" : 18
      }, {
        "name" : "Addr",
        "type" : 19
      } ],
      "name" : "struct{Family uint16; Ifindex int32; Addr [16]byte}",
      "type" : "Struct",
      "underlying" : 16
    }, {
      "name" : "uint16",
      "type" : "Basic",
      "underlying" : 17
    }, {
      "name" : "int32",
      "type" : "Basic",
      "underlying" : 18
    }, {
      "elem" : 20,
      "name" : "[16]byte",
      "type" : "Array",
      "underlying" : 19
    }, {
      "name" : "byte",
      "type" : "Basic",
      "underlying" : 20
    }, {
      "name" : "untyped bool",
      "type" : "Basic",
      "underlying" : 21
    }, {
      "local-name" : "Errno",
      "name" : "syscall.Errno",
      "package" : 2,
      "type" : "Named",
      "underlying" : 23
    }, {
      "name" : "uintptr",
      "type" : "Basic",
      "underlying" : 23
    }, {
      "elem" : 25,
      "name" : "*[4]byte",
      "type" : "Pointer",
      "underlying" : 24
    }, {
      "elem" : 20,
      "name" : "[4]byte",
      "type" : "Array",
      "underlying" : 25
    }, {
      "name" : "untyped int",
      "type" : "Basic",
      "underlying" : 26
    }, {
      "elem" : 5,
      "name" : "*uint32",
      "type" : "Pointer",
      "underlying" : 27
    }, {
      "elem" : 15,
      "name" : "*golang.org/x/sys/unix.RawSockaddrCAN",
      "type" : "Pointer",
      "underlying" : 28
    }, {
      "name" : "untyped nil",
      "type" : "Basic",
      "underlying" : 29
    } ],
    "variables" : [ {
      "name" : "",
      "package" : -1,
      "type" : 6,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "sa",
      "package" : 0,
      "type" : 11,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "[res0]",
      "package" : 0,
      "type" : 3,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "[res1]",
      "package" : 0,
      "type" : 4,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "[res2]",
      "package" : 0,
      "type" : 6,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "Ifindex",
      "package" : 0,
      "type" : 14,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "raw",
      "package" : 0,
      "type" : 15,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "Family",
      "package" : 0,
      "type" : 17,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "Ifindex",
      "package" : 0,
      "type" : 18,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "RxID",
      "package" : 0,
      "type" : 5,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "rx",
      "package" : 0,
      "type" : 24,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "i",
      "package" : 0,
      "type" : 14,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "Addr",
      "package" : 0,
      "type" : 19,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "TxID",
      "package" : 0,
      "type" : 5,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "tx",
      "package" : 0,
      "type" : 24,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "i",
      "package" : 0,
      "type" : 14,
      "exported" : false,
      "embedded" : false,
      "field" : false
    } ]
  },
  "go-version" : "1.14.3"
}