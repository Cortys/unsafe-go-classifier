{
  "usage" : {
    "file" : "debuglog.go",
    "label1" : "cast-struct",
    "label2" : "efficiency",
    "line" : "63",
    "module" : "std",
    "pkg" : "runtime",
    "project" : "kubernetes/kubernetes",
    "snippet" : "allp := (*uintptr)(unsafe.Pointer(&allDloggers))",
    "version" : "std"
  },
  "cfg" : {
    "blocks" : [ {
      "update-vars" : [ ],
      "successors" : [ 2 ],
      "in-vars" : [ 1 ],
      "exit" : false,
      "out-vars" : [ 1 ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[entry]",
      "entry" : true,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ ],
      "in-vars" : [ ],
      "exit" : true,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[exit]",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 3, 4 ],
      "in-vars" : [ 1 ],
      "exit" : false,
      "out-vars" : [ 1 ],
      "decl-vars" : [ ],
      "line-start" : 50,
      "ast" : {
        "condition" : {
          "go-type" : 17,
          "kind" : "constant",
          "value" : {
            "type" : "BOOL",
            "value" : "true"
          }
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 52,
      "code" : "if !dlogEnabled {\n\treturn nil\n}",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 51,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 18,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Nil",
            "kind" : "ident",
            "value" : "nil"
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 51,
      "code" : "return nil",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 5 ],
      "in-vars" : [ 1 ],
      "exit" : false,
      "out-vars" : [ 1, 2, 3 ],
      "decl-vars" : [ 2, 3 ],
      "line-start" : 55,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "tick"
          }
        }, {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "nano"
          }
        } ],
        "right" : [ {
          "coerced-to" : {
            "go-type" : 8,
            "kind" : "type",
            "type" : "identifier",
            "value" : {
              "go-type" : 8,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "uint64"
            }
          },
          "go-type" : 8,
          "kind" : "expression",
          "target" : {
            "arguments" : [ ],
            "ellipsis" : false,
            "function" : {
              "go-type" : 20,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "function" : 1,
                "ident-kind" : "Func",
                "kind" : "ident",
                "value" : "cputicks"
              }
            },
            "go-type" : 19,
            "kind" : "expression",
            "type" : "call"
          },
          "type" : "cast"
        }, {
          "coerced-to" : {
            "go-type" : 8,
            "kind" : "type",
            "type" : "identifier",
            "value" : {
              "go-type" : 8,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "uint64"
            }
          },
          "go-type" : 8,
          "kind" : "expression",
          "target" : {
            "arguments" : [ ],
            "ellipsis" : false,
            "function" : {
              "go-type" : 20,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "function" : 2,
                "ident-kind" : "Func",
                "kind" : "ident",
                "value" : "nanotime"
              }
            },
            "go-type" : 19,
            "kind" : "expression",
            "type" : "call"
          },
          "type" : "cast"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 55,
      "code" : "tick, nano := uint64(cputicks()), uint64(nanotime())",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 6 ],
      "in-vars" : [ 1, 2, 3 ],
      "exit" : false,
      "out-vars" : [ 1, 2, 4, 3 ],
      "decl-vars" : [ 4 ],
      "line-start" : 58,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "l"
          }
        } ],
        "right" : [ {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 0,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 3,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "getCachedDlogger"
            }
          },
          "go-type" : 3,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 58,
      "code" : "l := getCachedDlogger()",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 7, 15 ],
      "in-vars" : [ 1, 2, 4, 3 ],
      "exit" : false,
      "out-vars" : [ 1, 2, 4, 3 ],
      "decl-vars" : [ ],
      "line-start" : 62,
      "ast" : {
        "condition" : {
          "go-type" : 17,
          "kind" : "expression",
          "left" : {
            "go-type" : 3,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "l",
              "variable" : 4
            }
          },
          "operator" : "==",
          "right" : {
            "go-type" : 18,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Nil",
              "kind" : "ident",
              "value" : "nil"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 71,
      "code" : "if l == nil {\n\tallp := (*uintptr)(unsafe.Pointer(&allDloggers))\n\tall := (*dlogger)(unsafe.Pointer(atomic.Loaduintptr(allp)))\n\tfor l1 := all; l1 != nil; l1 = l1.allLink {\n\t\tif atomic.Load(&l1.owned) == 0 && atomic.Cas(&l1.owned, 0, 1) {\n\t\t\tl = l1\n\t\t\tbreak\n\t\t}\n\t}\n}",
      "entry" : false,
      "use-vars" : [ 4 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 8 ],
      "in-vars" : [ 1, 2, 4, 3 ],
      "exit" : false,
      "out-vars" : [ 2, 4, 3, 5, 1 ],
      "decl-vars" : [ 5 ],
      "line-start" : 63,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "allp"
          }
        } ],
        "right" : [ {
          "coerced-to" : {
            "contained" : {
              "go-type" : 23,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 23,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "uintptr"
              }
            },
            "go-type" : 22,
            "kind" : "type",
            "type" : "pointer"
          },
          "go-type" : 22,
          "kind" : "expression",
          "target" : {
            "coerced-to" : {
              "go-type" : 24,
              "kind" : "type",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 1,
                "value" : "unsafe"
              },
              "type" : "identifier",
              "value" : {
                "go-type" : 24,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "Pointer"
              }
            },
            "go-type" : 24,
            "kind" : "expression",
            "target" : {
              "go-type" : 25,
              "kind" : "expression",
              "operator" : "&",
              "target" : {
                "go-type" : 3,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "allDloggers",
                  "variable" : 1
                }
              },
              "type" : "unary"
            },
            "type" : "cast"
          },
          "type" : "cast"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 63,
      "code" : "allp := (*uintptr)(unsafe.Pointer(&allDloggers))",
      "entry" : false,
      "use-vars" : [ 1 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 10 ],
      "in-vars" : [ 5, 1, 2, 4, 3 ],
      "exit" : false,
      "out-vars" : [ 1, 2, 4, 3, 6 ],
      "decl-vars" : [ 6 ],
      "line-start" : 64,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "all"
          }
        } ],
        "right" : [ {
          "coerced-to" : {
            "contained" : {
              "go-type" : 4,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 4,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "dlogger"
              }
            },
            "go-type" : 3,
            "kind" : "type",
            "type" : "pointer"
          },
          "go-type" : 3,
          "kind" : "expression",
          "target" : {
            "coerced-to" : {
              "go-type" : 24,
              "kind" : "type",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 1,
                "value" : "unsafe"
              },
              "type" : "identifier",
              "value" : {
                "go-type" : 24,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "Pointer"
              }
            },
            "go-type" : 24,
            "kind" : "expression",
            "target" : {
              "arguments" : [ {
                "go-type" : 22,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "allp",
                  "variable" : 5
                }
              } ],
              "ellipsis" : false,
              "function" : {
                "go-type" : 26,
                "kind" : "expression",
                "qualifier" : {
                  "ident-kind" : "PkgName",
                  "kind" : "ident",
                  "package" : 2,
                  "value" : "atomic"
                },
                "type" : "identifier",
                "value" : {
                  "function" : 4,
                  "ident-kind" : "Func",
                  "kind" : "ident",
                  "value" : "Loaduintptr"
                }
              },
              "go-type" : 23,
              "kind" : "expression",
              "type" : "call"
            },
            "type" : "cast"
          },
          "type" : "cast"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 64,
      "code" : "all := (*dlogger)(unsafe.Pointer(atomic.Loaduintptr(allp)))",
      "entry" : false,
      "use-vars" : [ 5 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 12, 15 ],
      "in-vars" : [ 1, 2, 4, 3, 7 ],
      "exit" : false,
      "out-vars" : [ 4, 3, 7, 1, 2 ],
      "decl-vars" : [ ],
      "line-start" : 65,
      "ast" : {
        "condition" : {
          "go-type" : 17,
          "kind" : "expression",
          "left" : {
            "go-type" : 3,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "l1",
              "variable" : 7
            }
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 18,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Nil",
              "kind" : "ident",
              "value" : "nil"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "for"
      },
      "assign-vars" : [ ],
      "line-end" : 70,
      "code" : "for l1 := all; l1 != nil; l1 = l1.allLink {\n\tif atomic.Load(&l1.owned) == 0 && atomic.Cas(&l1.owned, 0, 1) {\n\t\tl = l1\n\t\tbreak\n\t}\n}",
      "entry" : false,
      "use-vars" : [ 7 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 9 ],
      "in-vars" : [ 3, 6, 1, 2, 4 ],
      "exit" : false,
      "out-vars" : [ 7, 1, 2, 4, 3 ],
      "decl-vars" : [ 7 ],
      "line-start" : 65,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "l1"
          }
        } ],
        "right" : [ {
          "go-type" : 3,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "all",
            "variable" : 6
          }
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 65,
      "code" : "l1 := all",
      "entry" : false,
      "use-vars" : [ 6 ]
    }, {
      "update-vars" : [ 7 ],
      "successors" : [ 9 ],
      "in-vars" : [ 4, 3, 7, 1, 2 ],
      "exit" : false,
      "out-vars" : [ 1, 2, 4, 3, 7 ],
      "decl-vars" : [ ],
      "line-start" : 65,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 3,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "l1",
            "variable" : 7
          }
        } ],
        "right" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "allLink",
            "variable" : 8
          },
          "go-type" : 3,
          "kind" : "expression",
          "target" : {
            "go-type" : 3,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "l1",
              "variable" : 7
            }
          },
          "type" : "selector"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 7 ],
      "line-end" : 65,
      "code" : "l1 = l1.allLink",
      "entry" : false,
      "use-vars" : [ 7 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 13, 11 ],
      "in-vars" : [ 1, 2, 4, 3, 7 ],
      "exit" : false,
      "out-vars" : [ 1, 2, 4, 3, 7 ],
      "decl-vars" : [ ],
      "line-start" : 66,
      "ast" : {
        "condition" : {
          "go-type" : 29,
          "kind" : "expression",
          "left" : {
            "go-type" : 29,
            "kind" : "expression",
            "left" : {
              "arguments" : [ {
                "go-type" : 32,
                "kind" : "expression",
                "operator" : "&",
                "target" : {
                  "field" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "owned",
                    "variable" : 9
                  },
                  "go-type" : 16,
                  "kind" : "expression",
                  "target" : {
                    "go-type" : 3,
                    "kind" : "expression",
                    "type" : "identifier",
                    "value" : {
                      "ident-kind" : "Var",
                      "kind" : "ident",
                      "value" : "l1",
                      "variable" : 7
                    }
                  },
                  "type" : "selector"
                },
                "type" : "unary"
              } ],
              "ellipsis" : false,
              "function" : {
                "go-type" : 30,
                "kind" : "expression",
                "qualifier" : {
                  "ident-kind" : "PkgName",
                  "kind" : "ident",
                  "package" : 2,
                  "value" : "atomic"
                },
                "type" : "identifier",
                "value" : {
                  "function" : 5,
                  "ident-kind" : "Func",
                  "kind" : "ident",
                  "value" : "Load"
                }
              },
              "go-type" : 16,
              "kind" : "expression",
              "type" : "call"
            },
            "operator" : "==",
            "right" : {
              "go-type" : 16,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "0"
              }
            },
            "type" : "binary"
          },
          "operator" : "&&",
          "right" : {
            "arguments" : [ {
              "go-type" : 32,
              "kind" : "expression",
              "operator" : "&",
              "target" : {
                "field" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "owned",
                  "variable" : 9
                },
                "go-type" : 16,
                "kind" : "expression",
                "target" : {
                  "go-type" : 3,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "l1",
                    "variable" : 7
                  }
                },
                "type" : "selector"
              },
              "type" : "unary"
            }, {
              "go-type" : 16,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "0"
              }
            }, {
              "go-type" : 16,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "1"
              }
            } ],
            "ellipsis" : false,
            "function" : {
              "go-type" : 34,
              "kind" : "expression",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 2,
                "value" : "atomic"
              },
              "type" : "identifier",
              "value" : {
                "function" : 6,
                "ident-kind" : "Func",
                "kind" : "ident",
                "value" : "Cas"
              }
            },
            "go-type" : 29,
            "kind" : "expression",
            "type" : "call"
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 69,
      "code" : "if atomic.Load(&l1.owned) == 0 && atomic.Cas(&l1.owned, 0, 1) {\n\tl = l1\n\tbreak\n}",
      "entry" : false,
      "use-vars" : [ 7 ]
    }, {
      "update-vars" : [ 4 ],
      "successors" : [ 14 ],
      "in-vars" : [ 1, 2, 3, 7 ],
      "exit" : false,
      "out-vars" : [ 3, 1, 2, 4 ],
      "decl-vars" : [ ],
      "line-start" : 67,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 3,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "l",
            "variable" : 4
          }
        } ],
        "right" : [ {
          "go-type" : 3,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "l1",
            "variable" : 7
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 4 ],
      "line-end" : 67,
      "code" : "l = l1",
      "entry" : false,
      "use-vars" : [ 7 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 15 ],
      "in-vars" : [ 4, 3, 1, 2 ],
      "exit" : false,
      "out-vars" : [ 4, 3, 1, 2 ],
      "decl-vars" : [ ],
      "line-start" : 68,
      "ast" : {
        "kind" : "statement",
        "label" : null,
        "type" : "break"
      },
      "assign-vars" : [ ],
      "line-end" : 68,
      "code" : "break",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 16, 27 ],
      "in-vars" : [ 1, 2, 4, 3 ],
      "exit" : false,
      "out-vars" : [ 3, 1, 2, 4 ],
      "decl-vars" : [ ],
      "line-start" : 74,
      "ast" : {
        "condition" : {
          "go-type" : 17,
          "kind" : "expression",
          "left" : {
            "go-type" : 3,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "l",
              "variable" : 4
            }
          },
          "operator" : "==",
          "right" : {
            "go-type" : 18,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Nil",
              "kind" : "ident",
              "value" : "nil"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 91,
      "code" : "if l == nil {\n\tl = (*dlogger)(sysAlloc(unsafe.Sizeof(dlogger{}), nil))\n\tif l == nil {\n\t\tthrow(\"failed to allocate debug log\")\n\t}\n\tl.w.r.data = &l.w.data\n\tl.owned = 1\n\n\theadp := (*uintptr)(unsafe.Pointer(&allDloggers))\n\tfor {\n\t\thead := atomic.Loaduintptr(headp)\n\t\tl.allLink = (*dlogger)(unsafe.Pointer(head))\n\t\tif atomic.Casuintptr(headp, head, uintptr(unsafe.Pointer(l))) {\n\t\t\tbreak\n\t\t}\n\t}\n}",
      "entry" : false,
      "use-vars" : [ 4 ]
    }, {
      "update-vars" : [ 4 ],
      "successors" : [ 17 ],
      "in-vars" : [ 1, 2, 3 ],
      "exit" : false,
      "out-vars" : [ 1, 2, 4, 3 ],
      "decl-vars" : [ ],
      "line-start" : 75,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 3,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "l",
            "variable" : 4
          }
        } ],
        "right" : [ {
          "coerced-to" : {
            "contained" : {
              "go-type" : 4,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 4,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "dlogger"
              }
            },
            "go-type" : 3,
            "kind" : "type",
            "type" : "pointer"
          },
          "go-type" : 3,
          "kind" : "expression",
          "target" : {
            "arguments" : [ {
              "go-type" : 23,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "16476"
              }
            }, {
              "go-type" : 18,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Nil",
                "kind" : "ident",
                "value" : "nil"
              }
            } ],
            "ellipsis" : false,
            "function" : {
              "go-type" : 37,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "function" : 7,
                "ident-kind" : "Func",
                "kind" : "ident",
                "value" : "sysAlloc"
              }
            },
            "go-type" : 24,
            "kind" : "expression",
            "type" : "call"
          },
          "type" : "cast"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 4 ],
      "line-end" : 75,
      "code" : "l = (*dlogger)(sysAlloc(unsafe.Sizeof(dlogger{}), nil))",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 18, 19 ],
      "in-vars" : [ 1, 2, 4, 3 ],
      "exit" : false,
      "out-vars" : [ 1, 2, 4, 3 ],
      "decl-vars" : [ ],
      "line-start" : 76,
      "ast" : {
        "condition" : {
          "go-type" : 17,
          "kind" : "expression",
          "left" : {
            "go-type" : 3,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "l",
              "variable" : 4
            }
          },
          "operator" : "==",
          "right" : {
            "go-type" : 18,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Nil",
              "kind" : "ident",
              "value" : "nil"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 78,
      "code" : "if l == nil {\n\tthrow(\"failed to allocate debug log\")\n}",
      "entry" : false,
      "use-vars" : [ 4 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 19 ],
      "in-vars" : [ 1, 2, 4, 3 ],
      "exit" : false,
      "out-vars" : [ 1, 2, 4, 3 ],
      "decl-vars" : [ ],
      "line-start" : 77,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 43,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "failed to allocate debug log"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 41,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 8,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "throw"
            }
          },
          "go-type" : 1,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 77,
      "code" : "throw(\"failed to allocate debug log\")",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ 4 ],
      "successors" : [ 20 ],
      "in-vars" : [ 2, 4, 3, 1 ],
      "exit" : false,
      "out-vars" : [ 3, 1, 2, 4 ],
      "decl-vars" : [ ],
      "line-start" : 79,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "data",
            "variable" : 12
          },
          "go-type" : 14,
          "kind" : "expression",
          "target" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "r",
              "variable" : 11
            },
            "go-type" : 12,
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "w",
                "variable" : 10
              },
              "go-type" : 6,
              "kind" : "expression",
              "target" : {
                "go-type" : 3,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "l",
                  "variable" : 4
                }
              },
              "type" : "selector"
            },
            "type" : "selector"
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "go-type" : 14,
          "kind" : "expression",
          "operator" : "&",
          "target" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "data",
              "variable" : 13
            },
            "go-type" : 9,
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "w",
                "variable" : 10
              },
              "go-type" : 6,
              "kind" : "expression",
              "target" : {
                "go-type" : 3,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "l",
                  "variable" : 4
                }
              },
              "type" : "selector"
            },
            "type" : "selector"
          },
          "type" : "unary"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 79,
      "code" : "l.w.r.data = &l.w.data",
      "entry" : false,
      "use-vars" : [ 4 ]
    }, {
      "update-vars" : [ 4 ],
      "successors" : [ 21 ],
      "in-vars" : [ 4, 3, 1, 2 ],
      "exit" : false,
      "out-vars" : [ 1, 2, 4, 3 ],
      "decl-vars" : [ ],
      "line-start" : 80,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "owned",
            "variable" : 9
          },
          "go-type" : 16,
          "kind" : "expression",
          "target" : {
            "go-type" : 3,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "l",
              "variable" : 4
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "go-type" : 16,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "1"
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 80,
      "code" : "l.owned = 1",
      "entry" : false,
      "use-vars" : [ 4 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 22 ],
      "in-vars" : [ 1, 2, 4, 3 ],
      "exit" : false,
      "out-vars" : [ 3, 14, 2, 4 ],
      "decl-vars" : [ 14 ],
      "line-start" : 83,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "headp"
          }
        } ],
        "right" : [ {
          "coerced-to" : {
            "contained" : {
              "go-type" : 23,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 23,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "uintptr"
              }
            },
            "go-type" : 22,
            "kind" : "type",
            "type" : "pointer"
          },
          "go-type" : 22,
          "kind" : "expression",
          "target" : {
            "coerced-to" : {
              "go-type" : 24,
              "kind" : "type",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 1,
                "value" : "unsafe"
              },
              "type" : "identifier",
              "value" : {
                "go-type" : 24,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "Pointer"
              }
            },
            "go-type" : 24,
            "kind" : "expression",
            "target" : {
              "go-type" : 25,
              "kind" : "expression",
              "operator" : "&",
              "target" : {
                "go-type" : 3,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "allDloggers",
                  "variable" : 1
                }
              },
              "type" : "unary"
            },
            "type" : "cast"
          },
          "type" : "cast"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 83,
      "code" : "headp := (*uintptr)(unsafe.Pointer(&allDloggers))",
      "entry" : false,
      "use-vars" : [ 1 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 23, 27 ],
      "in-vars" : [ 3, 14, 2, 4 ],
      "exit" : false,
      "out-vars" : [ 14, 2, 4, 3 ],
      "decl-vars" : [ ],
      "line-start" : 84,
      "ast" : {
        "condition" : null,
        "kind" : "statement",
        "type" : "for"
      },
      "assign-vars" : [ ],
      "line-end" : 90,
      "code" : "for {\n\thead := atomic.Loaduintptr(headp)\n\tl.allLink = (*dlogger)(unsafe.Pointer(head))\n\tif atomic.Casuintptr(headp, head, uintptr(unsafe.Pointer(l))) {\n\t\tbreak\n\t}\n}",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 24 ],
      "in-vars" : [ 14, 2, 4, 3 ],
      "exit" : false,
      "out-vars" : [ 14, 2, 4, 3, 15 ],
      "decl-vars" : [ 15 ],
      "line-start" : 85,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "head"
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 22,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "headp",
              "variable" : 14
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 26,
            "kind" : "expression",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 2,
              "value" : "atomic"
            },
            "type" : "identifier",
            "value" : {
              "function" : 4,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "Loaduintptr"
            }
          },
          "go-type" : 23,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 85,
      "code" : "head := atomic.Loaduintptr(headp)",
      "entry" : false,
      "use-vars" : [ 14 ]
    }, {
      "update-vars" : [ 4 ],
      "successors" : [ 25 ],
      "in-vars" : [ 14, 2, 4, 3, 15 ],
      "exit" : false,
      "out-vars" : [ 4, 3, 15, 14, 2 ],
      "decl-vars" : [ ],
      "line-start" : 86,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "allLink",
            "variable" : 8
          },
          "go-type" : 3,
          "kind" : "expression",
          "target" : {
            "go-type" : 3,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "l",
              "variable" : 4
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "coerced-to" : {
            "contained" : {
              "go-type" : 4,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 4,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "dlogger"
              }
            },
            "go-type" : 3,
            "kind" : "type",
            "type" : "pointer"
          },
          "go-type" : 3,
          "kind" : "expression",
          "target" : {
            "coerced-to" : {
              "go-type" : 24,
              "kind" : "type",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 1,
                "value" : "unsafe"
              },
              "type" : "identifier",
              "value" : {
                "go-type" : 24,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "Pointer"
              }
            },
            "go-type" : 24,
            "kind" : "expression",
            "target" : {
              "go-type" : 23,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "head",
                "variable" : 15
              }
            },
            "type" : "cast"
          },
          "type" : "cast"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 86,
      "code" : "l.allLink = (*dlogger)(unsafe.Pointer(head))",
      "entry" : false,
      "use-vars" : [ 15, 4 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 26, 22 ],
      "in-vars" : [ 15, 14, 2, 4, 3 ],
      "exit" : false,
      "out-vars" : [ 4, 3, 14, 2 ],
      "decl-vars" : [ ],
      "line-start" : 87,
      "ast" : {
        "condition" : {
          "arguments" : [ {
            "go-type" : 22,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "headp",
              "variable" : 14
            }
          }, {
            "go-type" : 23,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "head",
              "variable" : 15
            }
          }, {
            "coerced-to" : {
              "go-type" : 23,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 23,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "uintptr"
              }
            },
            "go-type" : 23,
            "kind" : "expression",
            "target" : {
              "coerced-to" : {
                "go-type" : 24,
                "kind" : "type",
                "qualifier" : {
                  "ident-kind" : "PkgName",
                  "kind" : "ident",
                  "package" : 1,
                  "value" : "unsafe"
                },
                "type" : "identifier",
                "value" : {
                  "go-type" : 24,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "Pointer"
                }
              },
              "go-type" : 24,
              "kind" : "expression",
              "target" : {
                "go-type" : 3,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "l",
                  "variable" : 4
                }
              },
              "type" : "cast"
            },
            "type" : "cast"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 44,
            "kind" : "expression",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 2,
              "value" : "atomic"
            },
            "type" : "identifier",
            "value" : {
              "function" : 9,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "Casuintptr"
            }
          },
          "go-type" : 29,
          "kind" : "expression",
          "type" : "call"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 89,
      "code" : "if atomic.Casuintptr(headp, head, uintptr(unsafe.Pointer(l))) {\n\tbreak\n}",
      "entry" : false,
      "use-vars" : [ 14, 15, 4 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 27 ],
      "in-vars" : [ 2, 4, 3 ],
      "exit" : false,
      "out-vars" : [ 2, 4, 3 ],
      "decl-vars" : [ ],
      "line-start" : 88,
      "ast" : {
        "kind" : "statement",
        "label" : null,
        "type" : "break"
      },
      "assign-vars" : [ ],
      "line-end" : 88,
      "code" : "break",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 28 ],
      "in-vars" : [ 2, 4, 3 ],
      "exit" : false,
      "out-vars" : [ 2, 4, 3 ],
      "decl-vars" : [ ],
      "line-start" : 96,
      "ast" : {
        "kind" : "statement",
        "target" : {
          "kind" : "decl",
          "specs" : [ {
            "comments" : [ "// ~2ms between sync packets" ],
            "declared-type" : null,
            "kind" : "spec",
            "names" : [ {
              "ident-kind" : "NoKind",
              "kind" : "ident",
              "value" : "deltaLimit"
            } ],
            "type" : "const",
            "values" : [ {
              "go-type" : 46,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "2097151"
              }
            } ]
          } ],
          "type" : "const"
        },
        "type" : "declaration"
      },
      "assign-vars" : [ ],
      "line-end" : 96,
      "code" : "// If the time delta is getting too high, write a new sync\n// packet. We set the limit so we don't write more than 6\n// bytes of delta in the record header.\nconst deltaLimit = 1<<(3*7) - 1 // ~2ms between sync packets\n",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 29, 30 ],
      "in-vars" : [ 4, 3, 2 ],
      "exit" : false,
      "out-vars" : [ 2, 4, 3 ],
      "decl-vars" : [ ],
      "line-start" : 97,
      "ast" : {
        "condition" : {
          "go-type" : 17,
          "kind" : "expression",
          "left" : {
            "go-type" : 17,
            "kind" : "expression",
            "left" : {
              "go-type" : 8,
              "kind" : "expression",
              "left" : {
                "go-type" : 8,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "tick",
                  "variable" : 2
                }
              },
              "operator" : "-",
              "right" : {
                "field" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "tick",
                  "variable" : 16
                },
                "go-type" : 8,
                "kind" : "expression",
                "target" : {
                  "field" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "w",
                    "variable" : 10
                  },
                  "go-type" : 6,
                  "kind" : "expression",
                  "target" : {
                    "go-type" : 3,
                    "kind" : "expression",
                    "type" : "identifier",
                    "value" : {
                      "ident-kind" : "Var",
                      "kind" : "ident",
                      "value" : "l",
                      "variable" : 4
                    }
                  },
                  "type" : "selector"
                },
                "type" : "selector"
              },
              "type" : "binary"
            },
            "operator" : ">",
            "right" : {
              "go-type" : 8,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "2097151"
              }
            },
            "type" : "binary"
          },
          "operator" : "||",
          "right" : {
            "go-type" : 17,
            "kind" : "expression",
            "left" : {
              "go-type" : 8,
              "kind" : "expression",
              "left" : {
                "go-type" : 8,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "nano",
                  "variable" : 3
                }
              },
              "operator" : "-",
              "right" : {
                "field" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "nano",
                  "variable" : 17
                },
                "go-type" : 8,
                "kind" : "expression",
                "target" : {
                  "field" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "w",
                    "variable" : 10
                  },
                  "go-type" : 6,
                  "kind" : "expression",
                  "target" : {
                    "go-type" : 3,
                    "kind" : "expression",
                    "type" : "identifier",
                    "value" : {
                      "ident-kind" : "Var",
                      "kind" : "ident",
                      "value" : "l",
                      "variable" : 4
                    }
                  },
                  "type" : "selector"
                },
                "type" : "selector"
              },
              "type" : "binary"
            },
            "operator" : ">",
            "right" : {
              "go-type" : 8,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "2097151"
              }
            },
            "type" : "binary"
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 99,
      "code" : "if tick-l.w.tick > deltaLimit || nano-l.w.nano > deltaLimit {\n\tl.w.writeSync(tick, nano)\n}",
      "entry" : false,
      "use-vars" : [ 3, 4, 2 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 30 ],
      "in-vars" : [ 2, 4, 3 ],
      "exit" : false,
      "out-vars" : [ 2, 4, 3 ],
      "decl-vars" : [ ],
      "line-start" : 98,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 8,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "tick",
              "variable" : 2
            }
          }, {
            "go-type" : 8,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "nano",
              "variable" : 3
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "function" : 10,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "writeSync"
            },
            "go-type" : 47,
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "w",
                "variable" : 10
              },
              "go-type" : 6,
              "kind" : "expression",
              "target" : {
                "go-type" : 3,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "l",
                  "variable" : 4
                }
              },
              "type" : "selector"
            },
            "type" : "selector"
          },
          "go-type" : 1,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 98,
      "code" : "l.w.writeSync(tick, nano)",
      "entry" : false,
      "use-vars" : [ 3, 4, 2 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 31 ],
      "in-vars" : [ 2, 4, 3 ],
      "exit" : false,
      "out-vars" : [ 4, 3, 2 ],
      "decl-vars" : [ ],
      "line-start" : 102,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 8,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "2"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "function" : 11,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "ensure"
            },
            "go-type" : 51,
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "w",
                "variable" : 10
              },
              "go-type" : 6,
              "kind" : "expression",
              "target" : {
                "go-type" : 3,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "l",
                  "variable" : 4
                }
              },
              "type" : "selector"
            },
            "type" : "selector"
          },
          "go-type" : 1,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 102,
      "code" : "l.w.ensure(debugLogHeaderSize)",
      "entry" : false,
      "use-vars" : [ 4 ]
    }, {
      "update-vars" : [ 4 ],
      "successors" : [ 32 ],
      "in-vars" : [ 2, 4, 3 ],
      "exit" : false,
      "out-vars" : [ 3, 2, 4 ],
      "decl-vars" : [ ],
      "line-start" : 103,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "write",
            "variable" : 20
          },
          "go-type" : 8,
          "kind" : "expression",
          "target" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "w",
              "variable" : 10
            },
            "go-type" : 6,
            "kind" : "expression",
            "target" : {
              "go-type" : 3,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "l",
                "variable" : 4
              }
            },
            "type" : "selector"
          },
          "type" : "selector"
        } ],
        "operator" : "+",
        "right" : [ {
          "go-type" : 8,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "2"
          }
        } ],
        "type" : "assign-operator"
      },
      "assign-vars" : [ ],
      "line-end" : 103,
      "code" : "l.w.write += debugLogHeaderSize",
      "entry" : false,
      "use-vars" : [ 4 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 33 ],
      "in-vars" : [ 2, 4, 3 ],
      "exit" : false,
      "out-vars" : [ 3, 4 ],
      "decl-vars" : [ ],
      "line-start" : 106,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 8,
            "kind" : "expression",
            "left" : {
              "go-type" : 8,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "tick",
                "variable" : 2
              }
            },
            "operator" : "-",
            "right" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "tick",
                "variable" : 16
              },
              "go-type" : 8,
              "kind" : "expression",
              "target" : {
                "field" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "w",
                  "variable" : 10
                },
                "go-type" : 6,
                "kind" : "expression",
                "target" : {
                  "go-type" : 3,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "l",
                    "variable" : 4
                  }
                },
                "type" : "selector"
              },
              "type" : "selector"
            },
            "type" : "binary"
          } ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "function" : 12,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "uvarint"
            },
            "go-type" : 54,
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "w",
                "variable" : 10
              },
              "go-type" : 6,
              "kind" : "expression",
              "target" : {
                "go-type" : 3,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "l",
                  "variable" : 4
                }
              },
              "type" : "selector"
            },
            "type" : "selector"
          },
          "go-type" : 1,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 106,
      "code" : "l.w.uvarint(tick - l.w.tick)",
      "entry" : false,
      "use-vars" : [ 4, 2 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 34 ],
      "in-vars" : [ 4, 3 ],
      "exit" : false,
      "out-vars" : [ 4 ],
      "decl-vars" : [ ],
      "line-start" : 107,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 8,
            "kind" : "expression",
            "left" : {
              "go-type" : 8,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "nano",
                "variable" : 3
              }
            },
            "operator" : "-",
            "right" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "nano",
                "variable" : 17
              },
              "go-type" : 8,
              "kind" : "expression",
              "target" : {
                "field" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "w",
                  "variable" : 10
                },
                "go-type" : 6,
                "kind" : "expression",
                "target" : {
                  "go-type" : 3,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "l",
                    "variable" : 4
                  }
                },
                "type" : "selector"
              },
              "type" : "selector"
            },
            "type" : "binary"
          } ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "function" : 12,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "uvarint"
            },
            "go-type" : 54,
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "w",
                "variable" : 10
              },
              "go-type" : 6,
              "kind" : "expression",
              "target" : {
                "go-type" : 3,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "l",
                  "variable" : 4
                }
              },
              "type" : "selector"
            },
            "type" : "selector"
          },
          "go-type" : 1,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 107,
      "code" : "l.w.uvarint(nano - l.w.nano)",
      "entry" : false,
      "use-vars" : [ 3, 4 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 35 ],
      "in-vars" : [ 4 ],
      "exit" : false,
      "out-vars" : [ 4, 22 ],
      "decl-vars" : [ 22 ],
      "line-start" : 108,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "gp"
          }
        } ],
        "right" : [ {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 159,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 13,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "getg"
            }
          },
          "go-type" : 57,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 108,
      "code" : "gp := getg()",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 36, 37 ],
      "in-vars" : [ 4, 22 ],
      "exit" : false,
      "out-vars" : [ 4, 22 ],
      "decl-vars" : [ ],
      "line-start" : 109,
      "ast" : {
        "condition" : {
          "go-type" : 17,
          "kind" : "expression",
          "left" : {
            "go-type" : 17,
            "kind" : "expression",
            "left" : {
              "go-type" : 17,
              "kind" : "expression",
              "left" : {
                "go-type" : 57,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "gp",
                  "variable" : 22
                }
              },
              "operator" : "!=",
              "right" : {
                "go-type" : 18,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Nil",
                  "kind" : "ident",
                  "value" : "nil"
                }
              },
              "type" : "binary"
            },
            "operator" : "&&",
            "right" : {
              "go-type" : 17,
              "kind" : "expression",
              "left" : {
                "field" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "m",
                  "variable" : 23
                },
                "go-type" : 73,
                "kind" : "expression",
                "target" : {
                  "go-type" : 57,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "gp",
                    "variable" : 22
                  }
                },
                "type" : "selector"
              },
              "operator" : "!=",
              "right" : {
                "go-type" : 18,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Nil",
                  "kind" : "ident",
                  "value" : "nil"
                }
              },
              "type" : "binary"
            },
            "type" : "binary"
          },
          "operator" : "&&",
          "right" : {
            "go-type" : 17,
            "kind" : "expression",
            "left" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "p",
                "variable" : 24
              },
              "go-type" : 86,
              "kind" : "expression",
              "target" : {
                "field" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "m",
                  "variable" : 23
                },
                "go-type" : 73,
                "kind" : "expression",
                "target" : {
                  "go-type" : 57,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "gp",
                    "variable" : 22
                  }
                },
                "type" : "selector"
              },
              "type" : "selector"
            },
            "operator" : "!=",
            "right" : {
              "go-type" : 86,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "0"
              }
            },
            "type" : "binary"
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 113,
      "code" : "if gp != nil && gp.m != nil && gp.m.p != 0 {\n\tl.w.varint(int64(gp.m.p.ptr().id))\n} else {\n\tl.w.varint(-1)\n}",
      "entry" : false,
      "use-vars" : [ 22 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 38 ],
      "in-vars" : [ 4, 22 ],
      "exit" : false,
      "out-vars" : [ 4 ],
      "decl-vars" : [ ],
      "line-start" : 110,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "coerced-to" : {
              "go-type" : 19,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 19,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "int64"
              }
            },
            "go-type" : 19,
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "id",
                "variable" : 27
              },
              "go-type" : 69,
              "kind" : "expression",
              "target" : {
                "arguments" : [ ],
                "ellipsis" : false,
                "function" : {
                  "field" : {
                    "function" : 15,
                    "ident-kind" : "Func",
                    "kind" : "ident",
                    "value" : "ptr"
                  },
                  "go-type" : 207,
                  "kind" : "expression",
                  "target" : {
                    "field" : {
                      "ident-kind" : "Var",
                      "kind" : "ident",
                      "value" : "p",
                      "variable" : 24
                    },
                    "go-type" : 86,
                    "kind" : "expression",
                    "target" : {
                      "field" : {
                        "ident-kind" : "Var",
                        "kind" : "ident",
                        "value" : "m",
                        "variable" : 23
                      },
                      "go-type" : 73,
                      "kind" : "expression",
                      "target" : {
                        "go-type" : 57,
                        "kind" : "expression",
                        "type" : "identifier",
                        "value" : {
                          "ident-kind" : "Var",
                          "kind" : "ident",
                          "value" : "gp",
                          "variable" : 22
                        }
                      },
                      "type" : "selector"
                    },
                    "type" : "selector"
                  },
                  "type" : "selector"
                },
                "go-type" : 164,
                "kind" : "expression",
                "type" : "call"
              },
              "type" : "selector"
            },
            "type" : "cast"
          } ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "function" : 14,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "varint"
            },
            "go-type" : 161,
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "w",
                "variable" : 10
              },
              "go-type" : 6,
              "kind" : "expression",
              "target" : {
                "go-type" : 3,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "l",
                  "variable" : 4
                }
              },
              "type" : "selector"
            },
            "type" : "selector"
          },
          "go-type" : 1,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 110,
      "code" : "l.w.varint(int64(gp.m.p.ptr().id))",
      "entry" : false,
      "use-vars" : [ 4, 22 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 38 ],
      "in-vars" : [ 4 ],
      "exit" : false,
      "out-vars" : [ 4 ],
      "decl-vars" : [ ],
      "line-start" : 112,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 19,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "-1"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "function" : 14,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "varint"
            },
            "go-type" : 161,
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "w",
                "variable" : 10
              },
              "go-type" : 6,
              "kind" : "expression",
              "target" : {
                "go-type" : 3,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "l",
                  "variable" : 4
                }
              },
              "type" : "selector"
            },
            "type" : "selector"
          },
          "go-type" : 1,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 112,
      "code" : "l.w.varint(-1)",
      "entry" : false,
      "use-vars" : [ 4 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 4 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 115,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 3,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "l",
            "variable" : 4
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 115,
      "code" : "return l",
      "entry" : false,
      "use-vars" : [ 4 ]
    } ],
    "code" : "// dlog returns a debug logger. The caller can use methods on the\n// returned logger to add values, which will be space-separated in the\n// final output, much like println. The caller must call end() to\n// finish the message.\n//\n// dlog can be used from highly-constrained corners of the runtime: it\n// is safe to use in the signal handler, from within the write\n// barrier, from within the stack implementation, and in places that\n// must be recursively nosplit.\n//\n// This will be compiled away if built without the debuglog build tag.\n// However, argument construction may not be. If any of the arguments\n// are not literals or trivial expressions, consider protecting the\n// call with \"if dlogEnabled\".\n//\n//go:nosplit\n//go:nowritebarrierrec\nfunc dlog() *dlogger {\n\tif !dlogEnabled {\n\t\treturn nil\n\t}\n\n\ttick, nano := uint64(cputicks()), uint64(nanotime())\n\n\tl := getCachedDlogger()\n\n\tif l == nil {\n\t\tallp := (*uintptr)(unsafe.Pointer(&allDloggers))\n\t\tall := (*dlogger)(unsafe.Pointer(atomic.Loaduintptr(allp)))\n\t\tfor l1 := all; l1 != nil; l1 = l1.allLink {\n\t\t\tif atomic.Load(&l1.owned) == 0 && atomic.Cas(&l1.owned, 0, 1) {\n\t\t\t\tl = l1\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\t}\n\n\tif l == nil {\n\t\tl = (*dlogger)(sysAlloc(unsafe.Sizeof(dlogger{}), nil))\n\t\tif l == nil {\n\t\t\tthrow(\"failed to allocate debug log\")\n\t\t}\n\t\tl.w.r.data = &l.w.data\n\t\tl.owned = 1\n\n\t\theadp := (*uintptr)(unsafe.Pointer(&allDloggers))\n\t\tfor {\n\t\t\thead := atomic.Loaduintptr(headp)\n\t\t\tl.allLink = (*dlogger)(unsafe.Pointer(head))\n\t\t\tif atomic.Casuintptr(headp, head, uintptr(unsafe.Pointer(l))) {\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\t}\n\n\t// If the time delta is getting too high, write a new sync\n\t// packet. We set the limit so we don't write more than 6\n\t// bytes of delta in the record header.\n\tconst deltaLimit = 1<<(3*7) - 1 // ~2ms between sync packets\n\tif tick-l.w.tick > deltaLimit || nano-l.w.nano > deltaLimit {\n\t\tl.w.writeSync(tick, nano)\n\t}\n\n\tl.w.ensure(debugLogHeaderSize)\n\tl.w.write += debugLogHeaderSize\n\n\tl.w.uvarint(tick - l.w.tick)\n\tl.w.uvarint(nano - l.w.nano)\n\tgp := getg()\n\tif gp != nil && gp.m != nil && gp.m.p != 0 {\n\t\tl.w.varint(int64(gp.m.p.ptr().id))\n\t} else {\n\t\tl.w.varint(-1)\n\t}\n\n\treturn l\n}",
    "defines" : [ 0 ],
    "functions" : [ {
      "name" : "dlog",
      "package" : 0,
      "type" : 0,
      "exported" : false
    }, {
      "name" : "cputicks",
      "package" : 0,
      "type" : 20,
      "exported" : false
    }, {
      "name" : "nanotime",
      "package" : 0,
      "type" : 20,
      "exported" : false
    }, {
      "name" : "getCachedDlogger",
      "package" : 0,
      "type" : 0,
      "exported" : false
    }, {
      "name" : "Loaduintptr",
      "package" : 2,
      "type" : 26,
      "exported" : true
    }, {
      "name" : "Load",
      "package" : 2,
      "type" : 30,
      "exported" : true
    }, {
      "name" : "Cas",
      "package" : 2,
      "type" : 34,
      "exported" : true
    }, {
      "name" : "sysAlloc",
      "package" : 0,
      "type" : 37,
      "exported" : false
    }, {
      "name" : "throw",
      "package" : 0,
      "type" : 41,
      "exported" : false
    }, {
      "name" : "Casuintptr",
      "package" : 2,
      "type" : 44,
      "exported" : true
    }, {
      "name" : "writeSync",
      "package" : 0,
      "type" : 49,
      "exported" : false
    }, {
      "name" : "ensure",
      "package" : 0,
      "type" : 53,
      "exported" : false
    }, {
      "name" : "uvarint",
      "package" : 0,
      "type" : 56,
      "exported" : false
    }, {
      "name" : "getg",
      "package" : 0,
      "type" : 159,
      "exported" : false
    }, {
      "name" : "varint",
      "package" : 0,
      "type" : 163,
      "exported" : false
    }, {
      "name" : "ptr",
      "package" : 0,
      "type" : 209,
      "exported" : false
    } ],
    "line-end" : 116,
    "line-start" : 49,
    "names" : [ "dlog" ],
    "package" : 0,
    "packages" : [ {
      "name" : "runtime",
      "path" : "runtime"
    }, {
      "name" : "unsafe",
      "path" : "unsafe"
    }, {
      "name" : "atomic",
      "path" : "runtime/internal/atomic"
    }, {
      "name" : "sys",
      "path" : "runtime/internal/sys"
    }, {
      "name" : "cpu",
      "path" : "internal/cpu"
    } ],
    "params" : [ ],
    "receivers" : [ ],
    "results" : [ 0 ],
    "type" : "function",
    "types" : [ {
      "name" : "func() *runtime.dlogger",
      "params" : 1,
      "recv" : -1,
      "results" : 2,
      "type" : "Signature",
      "underlying" : 0,
      "variadic" : false
    }, {
      "fields" : [ ],
      "name" : "()",
      "type" : "Tuple",
      "underlying" : 1
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 3
      } ],
      "name" : "(*runtime.dlogger)",
      "type" : "Tuple",
      "underlying" : 2
    }, {
      "elem" : 4,
      "name" : "*runtime.dlogger",
      "type" : "Pointer",
      "underlying" : 3
    }, {
      "local-name" : "dlogger",
      "name" : "runtime.dlogger",
      "package" : 0,
      "type" : "Named",
      "underlying" : 5
    }, {
      "fields" : [ {
        "name" : "w",
        "type" : 6
      }, {
        "name" : "allLink",
        "type" : 3
      }, {
        "name" : "owned",
        "type" : 16
      } ],
      "name" : "struct{w runtime.debugLogWriter; allLink *runtime.dlogger; owned uint32}",
      "type" : "Struct",
      "underlying" : 5
    }, {
      "local-name" : "debugLogWriter",
      "name" : "runtime.debugLogWriter",
      "package" : 0,
      "type" : "Named",
      "underlying" : 7
    }, {
      "fields" : [ {
        "name" : "write",
        "type" : 8
      }, {
        "name" : "data",
        "type" : 9
      }, {
        "name" : "tick",
        "type" : 8
      }, {
        "name" : "nano",
        "type" : 8
      }, {
        "name" : "r",
        "type" : 12
      }, {
        "name" : "buf",
        "type" : 15
      } ],
      "name" : "struct{write uint64; data runtime.debugLogBuf; tick uint64; nano uint64; r runtime.debugLogReader; buf [10]byte}",
      "type" : "Struct",
      "underlying" : 7
    }, {
      "name" : "uint64",
      "type" : "Basic",
      "underlying" : 8
    }, {
      "local-name" : "debugLogBuf",
      "name" : "runtime.debugLogBuf",
      "package" : 0,
      "type" : "Named",
      "underlying" : 10
    }, {
      "elem" : 11,
      "name" : "[16384]byte",
      "type" : "Array",
      "underlying" : 10
    }, {
      "name" : "byte",
      "type" : "Basic",
      "underlying" : 11
    }, {
      "local-name" : "debugLogReader",
      "name" : "runtime.debugLogReader",
      "package" : 0,
      "type" : "Named",
      "underlying" : 13
    }, {
      "fields" : [ {
        "name" : "data",
        "type" : 14
      }, {
        "name" : "begin",
        "type" : 8
      }, {
        "name" : "end",
        "type" : 8
      }, {
        "name" : "tick",
        "type" : 8
      }, {
        "name" : "nano",
        "type" : 8
      } ],
      "name" : "struct{data *runtime.debugLogBuf; begin uint64; end uint64; tick uint64; nano uint64}",
      "type" : "Struct",
      "underlying" : 13
    }, {
      "elem" : 9,
      "name" : "*runtime.debugLogBuf",
      "type" : "Pointer",
      "underlying" : 14
    }, {
      "elem" : 11,
      "name" : "[10]byte",
      "type" : "Array",
      "underlying" : 15
    }, {
      "name" : "uint32",
      "type" : "Basic",
      "underlying" : 16
    }, {
      "name" : "untyped bool",
      "type" : "Basic",
      "underlying" : 17
    }, {
      "name" : "untyped nil",
      "type" : "Basic",
      "underlying" : 18
    }, {
      "name" : "int64",
      "type" : "Basic",
      "underlying" : 19
    }, {
      "name" : "func() int64",
      "params" : 1,
      "recv" : -1,
      "results" : 21,
      "type" : "Signature",
      "underlying" : 20,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 19
      } ],
      "name" : "(int64)",
      "type" : "Tuple",
      "underlying" : 21
    }, {
      "elem" : 23,
      "name" : "*uintptr",
      "type" : "Pointer",
      "underlying" : 22
    }, {
      "name" : "uintptr",
      "type" : "Basic",
      "underlying" : 23
    }, {
      "local-name" : "Pointer",
      "name" : "unsafe.Pointer",
      "package" : 1,
      "type" : "Basic",
      "underlying" : 24
    }, {
      "elem" : 3,
      "name" : "**runtime.dlogger",
      "type" : "Pointer",
      "underlying" : 25
    }, {
      "name" : "func(ptr *uintptr) uintptr",
      "params" : 27,
      "recv" : -1,
      "results" : 28,
      "type" : "Signature",
      "underlying" : 26,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "ptr",
        "type" : 22
      } ],
      "name" : "(ptr *uintptr)",
      "type" : "Tuple",
      "underlying" : 27
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 23
      } ],
      "name" : "(uintptr)",
      "type" : "Tuple",
      "underlying" : 28
    }, {
      "name" : "bool",
      "type" : "Basic",
      "underlying" : 29
    }, {
      "name" : "func(ptr *uint32) uint32",
      "params" : 31,
      "recv" : -1,
      "results" : 33,
      "type" : "Signature",
      "underlying" : 30,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "ptr",
        "type" : 32
      } ],
      "name" : "(ptr *uint32)",
      "type" : "Tuple",
      "underlying" : 31
    }, {
      "elem" : 16,
      "name" : "*uint32",
      "type" : "Pointer",
      "underlying" : 32
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 16
      } ],
      "name" : "(uint32)",
      "type" : "Tuple",
      "underlying" : 33
    }, {
      "name" : "func(ptr *uint32, old uint32, new uint32) bool",
      "params" : 35,
      "recv" : -1,
      "results" : 36,
      "type" : "Signature",
      "underlying" : 34,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "ptr",
        "type" : 32
      }, {
        "name" : "old",
        "type" : 16
      }, {
        "name" : "new",
        "type" : 16
      } ],
      "name" : "(ptr *uint32, old uint32, new uint32)",
      "type" : "Tuple",
      "underlying" : 35
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 29
      } ],
      "name" : "(bool)",
      "type" : "Tuple",
      "underlying" : 36
    }, {
      "name" : "func(n uintptr, sysStat *uint64) unsafe.Pointer",
      "params" : 38,
      "recv" : -1,
      "results" : 40,
      "type" : "Signature",
      "underlying" : 37,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "n",
        "type" : 23
      }, {
        "name" : "sysStat",
        "type" : 39
      } ],
      "name" : "(n uintptr, sysStat *uint64)",
      "type" : "Tuple",
      "underlying" : 38
    }, {
      "elem" : 8,
      "name" : "*uint64",
      "type" : "Pointer",
      "underlying" : 39
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 24
      } ],
      "name" : "(unsafe.Pointer)",
      "type" : "Tuple",
      "underlying" : 40
    }, {
      "name" : "func(s string)",
      "params" : 42,
      "recv" : -1,
      "results" : 1,
      "type" : "Signature",
      "underlying" : 41,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "s",
        "type" : 43
      } ],
      "name" : "(s string)",
      "type" : "Tuple",
      "underlying" : 42
    }, {
      "name" : "string",
      "type" : "Basic",
      "underlying" : 43
    }, {
      "name" : "func(ptr *uintptr, old uintptr, new uintptr) bool",
      "params" : 45,
      "recv" : -1,
      "results" : 36,
      "type" : "Signature",
      "underlying" : 44,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "ptr",
        "type" : 22
      }, {
        "name" : "old",
        "type" : 23
      }, {
        "name" : "new",
        "type" : 23
      } ],
      "name" : "(ptr *uintptr, old uintptr, new uintptr)",
      "type" : "Tuple",
      "underlying" : 45
    }, {
      "name" : "untyped int",
      "type" : "Basic",
      "underlying" : 46
    }, {
      "name" : "func(tick uint64, nano uint64)",
      "params" : 48,
      "recv" : -1,
      "results" : 1,
      "type" : "Signature",
      "underlying" : 47,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "tick",
        "type" : 8
      }, {
        "name" : "nano",
        "type" : 8
      } ],
      "name" : "(tick uint64, nano uint64)",
      "type" : "Tuple",
      "underlying" : 48
    }, {
      "name" : "(*runtime.debugLogWriter) func(tick uint64, nano uint64)",
      "params" : 48,
      "recv" : 18,
      "results" : 1,
      "type" : "Signature",
      "underlying" : 49,
      "variadic" : false
    }, {
      "elem" : 6,
      "name" : "*runtime.debugLogWriter",
      "type" : "Pointer",
      "underlying" : 50
    }, {
      "name" : "func(n uint64)",
      "params" : 52,
      "recv" : -1,
      "results" : 1,
      "type" : "Signature",
      "underlying" : 51,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "n",
        "type" : 8
      } ],
      "name" : "(n uint64)",
      "type" : "Tuple",
      "underlying" : 52
    }, {
      "name" : "(*runtime.debugLogWriter) func(n uint64)",
      "params" : 52,
      "recv" : 19,
      "results" : 1,
      "type" : "Signature",
      "underlying" : 53,
      "variadic" : false
    }, {
      "name" : "func(u uint64)",
      "params" : 55,
      "recv" : -1,
      "results" : 1,
      "type" : "Signature",
      "underlying" : 54,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "u",
        "type" : 8
      } ],
      "name" : "(u uint64)",
      "type" : "Tuple",
      "underlying" : 55
    }, {
      "name" : "(*runtime.debugLogWriter) func(u uint64)",
      "params" : 55,
      "recv" : 21,
      "results" : 1,
      "type" : "Signature",
      "underlying" : 56,
      "variadic" : false
    }, {
      "elem" : 58,
      "name" : "*runtime.g",
      "type" : "Pointer",
      "underlying" : 57
    }, {
      "local-name" : "g",
      "name" : "runtime.g",
      "package" : 0,
      "type" : "Named",
      "underlying" : 59
    }, {
      "fields" : [ {
        "name" : "stack",
        "type" : 60
      }, {
        "name" : "stackguard0",
        "type" : 23
      }, {
        "name" : "stackguard1",
        "type" : 23
      }, {
        "name" : "_panic",
        "type" : 62
      }, {
        "name" : "_defer",
        "type" : 66
      }, {
        "name" : "m",
        "type" : 73
      }, {
        "name" : "sched",
        "type" : 76
      }, {
        "name" : "syscallsp",
        "type" : 23
      }, {
        "name" : "syscallpc",
        "type" : 23
      }, {
        "name" : "stktopsp",
        "type" : 23
      }, {
        "name" : "param",
        "type" : 24
      }, {
        "name" : "atomicstatus",
        "type" : 16
      }, {
        "name" : "stackLock",
        "type" : 16
      }, {
        "name" : "goid",
        "type" : 19
      }, {
        "name" : "schedlink",
        "type" : 78
      }, {
        "name" : "waitsince",
        "type" : 19
      }, {
        "name" : "waitreason",
        "type" : 129
      }, {
        "name" : "preempt",
        "type" : 29
      }, {
        "name" : "preemptStop",
        "type" : 29
      }, {
        "name" : "preemptShrink",
        "type" : 29
      }, {
        "name" : "asyncSafePoint",
        "type" : 29
      }, {
        "name" : "paniconfault",
        "type" : 29
      }, {
        "name" : "gcscandone",
        "type" : 29
      }, {
        "name" : "throwsplit",
        "type" : 29
      }, {
        "name" : "activeStackChans",
        "type" : 29
      }, {
        "name" : "raceignore",
        "type" : 87
      }, {
        "name" : "sysblocktraced",
        "type" : 29
      }, {
        "name" : "sysexitticks",
        "type" : 19
      }, {
        "name" : "traceseq",
        "type" : 8
      }, {
        "name" : "tracelastp",
        "type" : 86
      }, {
        "name" : "lockedm",
        "type" : 94
      }, {
        "name" : "sig",
        "type" : 16
      }, {
        "name" : "writebuf",
        "type" : 130
      }, {
        "name" : "sigcode0",
        "type" : 23
      }, {
        "name" : "sigcode1",
        "type" : 23
      }, {
        "name" : "sigpc",
        "type" : 23
      }, {
        "name" : "gopc",
        "type" : 23
      }, {
        "name" : "ancestors",
        "type" : 131
      }, {
        "name" : "startpc",
        "type" : 23
      }, {
        "name" : "racectx",
        "type" : 23
      }, {
        "name" : "waiting",
        "type" : 136
      }, {
        "name" : "cgoCtxt",
        "type" : 135
      }, {
        "name" : "labels",
        "type" : 24
      }, {
        "name" : "timer",
        "type" : 154
      }, {
        "name" : "selectDone",
        "type" : 16
      }, {
        "name" : "gcAssistBytes",
        "type" : 19
      } ],
      "name" : "struct{stack runtime.stack; stackguard0 uintptr; stackguard1 uintptr; _panic *runtime._panic; _defer *runtime._defer; m *runtime.m; sched runtime.gobuf; syscallsp uintptr; syscallpc uintptr; stktopsp uintptr; param unsafe.Pointer; atomicstatus uint32; stackLock uint32; goid int64; schedlink runtime.guintptr; waitsince int64; waitreason runtime.waitReason; preempt bool; preemptStop bool; preemptShrink bool; asyncSafePoint bool; paniconfault bool; gcscandone bool; throwsplit bool; activeStackChans bool; raceignore int8; sysblocktraced bool; sysexitticks int64; traceseq uint64; tracelastp runtime.puintptr; lockedm runtime.muintptr; sig uint32; writebuf []byte; sigcode0 uintptr; sigcode1 uintptr; sigpc uintptr; gopc uintptr; ancestors *[]runtime.ancestorInfo; startpc uintptr; racectx uintptr; waiting *runtime.sudog; cgoCtxt []uintptr; labels unsafe.Pointer; timer *runtime.timer; selectDone uint32; gcAssistBytes int64}",
      "type" : "Struct",
      "underlying" : 59
    }, {
      "local-name" : "stack",
      "name" : "runtime.stack",
      "package" : 0,
      "type" : "Named",
      "underlying" : 61
    }, {
      "fields" : [ {
        "name" : "lo",
        "type" : 23
      }, {
        "name" : "hi",
        "type" : 23
      } ],
      "name" : "struct{lo uintptr; hi uintptr}",
      "type" : "Struct",
      "underlying" : 61
    }, {
      "elem" : 63,
      "name" : "*runtime._panic",
      "type" : "Pointer",
      "underlying" : 62
    }, {
      "local-name" : "_panic",
      "name" : "runtime._panic",
      "package" : 0,
      "type" : "Named",
      "underlying" : 64
    }, {
      "fields" : [ {
        "name" : "argp",
        "type" : 24
      }, {
        "name" : "arg",
        "type" : 65
      }, {
        "name" : "link",
        "type" : 62
      }, {
        "name" : "pc",
        "type" : 23
      }, {
        "name" : "sp",
        "type" : 24
      }, {
        "name" : "recovered",
        "type" : 29
      }, {
        "name" : "aborted",
        "type" : 29
      }, {
        "name" : "goexit",
        "type" : 29
      } ],
      "name" : "struct{argp unsafe.Pointer; arg interface{}; link *runtime._panic; pc uintptr; sp unsafe.Pointer; recovered bool; aborted bool; goexit bool}",
      "type" : "Struct",
      "underlying" : 64
    }, {
      "methods" : [ ],
      "name" : "interface{}",
      "type" : "Interface",
      "underlying" : 65
    }, {
      "elem" : 67,
      "name" : "*runtime._defer",
      "type" : "Pointer",
      "underlying" : 66
    }, {
      "local-name" : "_defer",
      "name" : "runtime._defer",
      "package" : 0,
      "type" : "Named",
      "underlying" : 68
    }, {
      "fields" : [ {
        "name" : "siz",
        "type" : 69
      }, {
        "name" : "started",
        "type" : 29
      }, {
        "name" : "heap",
        "type" : 29
      }, {
        "name" : "openDefer",
        "type" : 29
      }, {
        "name" : "sp",
        "type" : 23
      }, {
        "name" : "pc",
        "type" : 23
      }, {
        "name" : "fn",
        "type" : 70
      }, {
        "name" : "_panic",
        "type" : 62
      }, {
        "name" : "link",
        "type" : 66
      }, {
        "name" : "fd",
        "type" : 24
      }, {
        "name" : "varp",
        "type" : 23
      }, {
        "name" : "framepc",
        "type" : 23
      } ],
      "name" : "struct{siz int32; started bool; heap bool; openDefer bool; sp uintptr; pc uintptr; fn *runtime.funcval; _panic *runtime._panic; link *runtime._defer; fd unsafe.Pointer; varp uintptr; framepc uintptr}",
      "type" : "Struct",
      "underlying" : 68
    }, {
      "name" : "int32",
      "type" : "Basic",
      "underlying" : 69
    }, {
      "elem" : 71,
      "name" : "*runtime.funcval",
      "type" : "Pointer",
      "underlying" : 70
    }, {
      "local-name" : "funcval",
      "name" : "runtime.funcval",
      "package" : 0,
      "type" : "Named",
      "underlying" : 72
    }, {
      "fields" : [ {
        "name" : "fn",
        "type" : 23
      } ],
      "name" : "struct{fn uintptr}",
      "type" : "Struct",
      "underlying" : 72
    }, {
      "elem" : 74,
      "name" : "*runtime.m",
      "type" : "Pointer",
      "underlying" : 73
    }, {
      "local-name" : "m",
      "name" : "runtime.m",
      "package" : 0,
      "type" : "Named",
      "underlying" : 75
    }, {
      "fields" : [ {
        "name" : "g0",
        "type" : 57
      }, {
        "name" : "morebuf",
        "type" : 76
      }, {
        "name" : "divmod",
        "type" : 16
      }, {
        "name" : "procid",
        "type" : 8
      }, {
        "name" : "gsignal",
        "type" : 57
      }, {
        "name" : "goSigStack",
        "type" : 80
      }, {
        "name" : "sigmask",
        "type" : 82
      }, {
        "name" : "tls",
        "type" : 84
      }, {
        "name" : "mstartfn",
        "type" : 85
      }, {
        "name" : "curg",
        "type" : 57
      }, {
        "name" : "caughtsig",
        "type" : 78
      }, {
        "name" : "p",
        "type" : 86
      }, {
        "name" : "nextp",
        "type" : 86
      }, {
        "name" : "oldp",
        "type" : 86
      }, {
        "name" : "id",
        "type" : 19
      }, {
        "name" : "mallocing",
        "type" : 69
      }, {
        "name" : "throwing",
        "type" : 69
      }, {
        "name" : "preemptoff",
        "type" : 43
      }, {
        "name" : "locks",
        "type" : 69
      }, {
        "name" : "dying",
        "type" : 69
      }, {
        "name" : "profilehz",
        "type" : 69
      }, {
        "name" : "spinning",
        "type" : 29
      }, {
        "name" : "blocked",
        "type" : 29
      }, {
        "name" : "newSigstack",
        "type" : 29
      }, {
        "name" : "printlock",
        "type" : 87
      }, {
        "name" : "incgo",
        "type" : 29
      }, {
        "name" : "freeWait",
        "type" : 16
      }, {
        "name" : "fastrand",
        "type" : 83
      }, {
        "name" : "needextram",
        "type" : 29
      }, {
        "name" : "traceback",
        "type" : 88
      }, {
        "name" : "ncgocall",
        "type" : 8
      }, {
        "name" : "ncgo",
        "type" : 69
      }, {
        "name" : "cgoCallersUse",
        "type" : 16
      }, {
        "name" : "cgoCallers",
        "type" : 89
      }, {
        "name" : "park",
        "type" : 92
      }, {
        "name" : "alllink",
        "type" : 73
      }, {
        "name" : "schedlink",
        "type" : 94
      }, {
        "name" : "mcache",
        "type" : 95
      }, {
        "name" : "lockedg",
        "type" : 78
      }, {
        "name" : "createstack",
        "type" : 91
      }, {
        "name" : "lockedExt",
        "type" : 16
      }, {
        "name" : "lockedInt",
        "type" : 16
      }, {
        "name" : "nextwaitm",
        "type" : 94
      }, {
        "name" : "waitunlockf",
        "type" : 121
      }, {
        "name" : "waitlock",
        "type" : 24
      }, {
        "name" : "waittraceev",
        "type" : 11
      }, {
        "name" : "waittraceskip",
        "type" : 123
      }, {
        "name" : "startingtrace",
        "type" : 29
      }, {
        "name" : "syscalltick",
        "type" : 16
      }, {
        "name" : "freelink",
        "type" : 73
      }, {
        "name" : "libcall",
        "type" : 124
      }, {
        "name" : "libcallpc",
        "type" : 23
      }, {
        "name" : "libcallsp",
        "type" : 23
      }, {
        "name" : "libcallg",
        "type" : 78
      }, {
        "name" : "syscall",
        "type" : 124
      }, {
        "name" : "vdsoSP",
        "type" : 23
      }, {
        "name" : "vdsoPC",
        "type" : 23
      }, {
        "name" : "preemptGen",
        "type" : 16
      }, {
        "name" : "signalPending",
        "type" : 16
      }, {
        "name" : "dlogPerM",
        "type" : 126
      }, {
        "name" : "mOS",
        "type" : 128
      } ],
      "name" : "struct{g0 *runtime.g; morebuf runtime.gobuf; divmod uint32; procid uint64; gsignal *runtime.g; goSigStack runtime.gsignalStack; sigmask runtime.sigset; tls [6]uintptr; mstartfn func(); curg *runtime.g; caughtsig runtime.guintptr; p runtime.puintptr; nextp runtime.puintptr; oldp runtime.puintptr; id int64; mallocing int32; throwing int32; preemptoff string; locks int32; dying int32; profilehz int32; spinning bool; blocked bool; newSigstack bool; printlock int8; incgo bool; freeWait uint32; fastrand [2]uint32; needextram bool; traceback uint8; ncgocall uint64; ncgo int32; cgoCallersUse uint32; cgoCallers *runtime.cgoCallers; park runtime.note; alllink *runtime.m; schedlink runtime.muintptr; mcache *runtime.mcache; lockedg runtime.guintptr; createstack [32]uintptr; lockedExt uint32; lockedInt uint32; nextwaitm runtime.muintptr; waitunlockf func(*runtime.g, unsafe.Pointer) bool; waitlock unsafe.Pointer; waittraceev byte; waittraceskip int; startingtrace bool; syscalltick uint32; freelink *runtime.m; libcall runtime.libcall; libcallpc uintptr; libcallsp uintptr; libcallg runtime.guintptr; syscall runtime.libcall; vdsoSP uintptr; vdsoPC uintptr; preemptGen uint32; signalPending uint32; runtime.dlogPerM; runtime.mOS}",
      "type" : "Struct",
      "underlying" : 75
    }, {
      "local-name" : "gobuf",
      "name" : "runtime.gobuf",
      "package" : 0,
      "type" : "Named",
      "underlying" : 77
    }, {
      "fields" : [ {
        "name" : "sp",
        "type" : 23
      }, {
        "name" : "pc",
        "type" : 23
      }, {
        "name" : "g",
        "type" : 78
      }, {
        "name" : "ctxt",
        "type" : 24
      }, {
        "name" : "ret",
        "type" : 79
      }, {
        "name" : "lr",
        "type" : 23
      }, {
        "name" : "bp",
        "type" : 23
      } ],
      "name" : "struct{sp uintptr; pc uintptr; g runtime.guintptr; ctxt unsafe.Pointer; ret runtime/internal/sys.Uintreg; lr uintptr; bp uintptr}",
      "type" : "Struct",
      "underlying" : 77
    }, {
      "local-name" : "guintptr",
      "name" : "runtime.guintptr",
      "package" : 0,
      "type" : "Named",
      "underlying" : 23
    }, {
      "local-name" : "Uintreg",
      "name" : "runtime/internal/sys.Uintreg",
      "package" : 3,
      "type" : "Named",
      "underlying" : 8
    }, {
      "local-name" : "gsignalStack",
      "name" : "runtime.gsignalStack",
      "package" : 0,
      "type" : "Named",
      "underlying" : 81
    }, {
      "fields" : [ {
        "name" : "stack",
        "type" : 60
      }, {
        "name" : "stackguard0",
        "type" : 23
      }, {
        "name" : "stackguard1",
        "type" : 23
      }, {
        "name" : "stktopsp",
        "type" : 23
      } ],
      "name" : "struct{stack runtime.stack; stackguard0 uintptr; stackguard1 uintptr; stktopsp uintptr}",
      "type" : "Struct",
      "underlying" : 81
    }, {
      "local-name" : "sigset",
      "name" : "runtime.sigset",
      "package" : 0,
      "type" : "Named",
      "underlying" : 83
    }, {
      "elem" : 16,
      "name" : "[2]uint32",
      "type" : "Array",
      "underlying" : 83
    }, {
      "elem" : 23,
      "name" : "[6]uintptr",
      "type" : "Array",
      "underlying" : 84
    }, {
      "name" : "func()",
      "params" : 1,
      "recv" : -1,
      "results" : 1,
      "type" : "Signature",
      "underlying" : 85,
      "variadic" : false
    }, {
      "local-name" : "puintptr",
      "name" : "runtime.puintptr",
      "package" : 0,
      "type" : "Named",
      "underlying" : 23
    }, {
      "name" : "int8",
      "type" : "Basic",
      "underlying" : 87
    }, {
      "name" : "uint8",
      "type" : "Basic",
      "underlying" : 88
    }, {
      "elem" : 90,
      "name" : "*runtime.cgoCallers",
      "type" : "Pointer",
      "underlying" : 89
    }, {
      "local-name" : "cgoCallers",
      "name" : "runtime.cgoCallers",
      "package" : 0,
      "type" : "Named",
      "underlying" : 91
    }, {
      "elem" : 23,
      "name" : "[32]uintptr",
      "type" : "Array",
      "underlying" : 91
    }, {
      "local-name" : "note",
      "name" : "runtime.note",
      "package" : 0,
      "type" : "Named",
      "underlying" : 93
    }, {
      "fields" : [ {
        "name" : "key",
        "type" : 23
      } ],
      "name" : "struct{key uintptr}",
      "type" : "Struct",
      "underlying" : 93
    }, {
      "local-name" : "muintptr",
      "name" : "runtime.muintptr",
      "package" : 0,
      "type" : "Named",
      "underlying" : 23
    }, {
      "elem" : 96,
      "name" : "*runtime.mcache",
      "type" : "Pointer",
      "underlying" : 95
    }, {
      "local-name" : "mcache",
      "name" : "runtime.mcache",
      "package" : 0,
      "type" : "Named",
      "underlying" : 97
    }, {
      "fields" : [ {
        "name" : "next_sample",
        "type" : 23
      }, {
        "name" : "local_scan",
        "type" : 23
      }, {
        "name" : "tiny",
        "type" : 23
      }, {
        "name" : "tinyoffset",
        "type" : 23
      }, {
        "name" : "local_tinyallocs",
        "type" : 23
      }, {
        "name" : "alloc",
        "type" : 98
      }, {
        "name" : "stackcache",
        "type" : 117
      }, {
        "name" : "local_largefree",
        "type" : 23
      }, {
        "name" : "local_nlargefree",
        "type" : 23
      }, {
        "name" : "local_nsmallfree",
        "type" : 120
      }, {
        "name" : "flushGen",
        "type" : 16
      } ],
      "name" : "struct{next_sample uintptr; local_scan uintptr; tiny uintptr; tinyoffset uintptr; local_tinyallocs uintptr; alloc [134]*runtime.mspan; stackcache [4]runtime.stackfreelist; local_largefree uintptr; local_nlargefree uintptr; local_nsmallfree [67]uintptr; flushGen uint32}",
      "type" : "Struct",
      "underlying" : 97
    }, {
      "elem" : 99,
      "name" : "[134]*runtime.mspan",
      "type" : "Array",
      "underlying" : 98
    }, {
      "elem" : 100,
      "name" : "*runtime.mspan",
      "type" : "Pointer",
      "underlying" : 99
    }, {
      "local-name" : "mspan",
      "name" : "runtime.mspan",
      "package" : 0,
      "type" : "Named",
      "underlying" : 101
    }, {
      "fields" : [ {
        "name" : "next",
        "type" : 99
      }, {
        "name" : "prev",
        "type" : 99
      }, {
        "name" : "list",
        "type" : 102
      }, {
        "name" : "startAddr",
        "type" : 23
      }, {
        "name" : "npages",
        "type" : 23
      }, {
        "name" : "manualFreeList",
        "type" : 105
      }, {
        "name" : "freeindex",
        "type" : 23
      }, {
        "name" : "nelems",
        "type" : 23
      }, {
        "name" : "allocCache",
        "type" : 8
      }, {
        "name" : "allocBits",
        "type" : 106
      }, {
        "name" : "gcmarkBits",
        "type" : 106
      }, {
        "name" : "sweepgen",
        "type" : 16
      }, {
        "name" : "divMul",
        "type" : 108
      }, {
        "name" : "baseMask",
        "type" : 108
      }, {
        "name" : "allocCount",
        "type" : 108
      }, {
        "name" : "spanclass",
        "type" : 109
      }, {
        "name" : "state",
        "type" : 110
      }, {
        "name" : "needzero",
        "type" : 88
      }, {
        "name" : "divShift",
        "type" : 88
      }, {
        "name" : "divShift2",
        "type" : 88
      }, {
        "name" : "elemsize",
        "type" : 23
      }, {
        "name" : "limit",
        "type" : 23
      }, {
        "name" : "speciallock",
        "type" : 113
      }, {
        "name" : "specials",
        "type" : 114
      } ],
      "name" : "struct{next *runtime.mspan; prev *runtime.mspan; list *runtime.mSpanList; startAddr uintptr; npages uintptr; manualFreeList runtime.gclinkptr; freeindex uintptr; nelems uintptr; allocCache uint64; allocBits *runtime.gcBits; gcmarkBits *runtime.gcBits; sweepgen uint32; divMul uint16; baseMask uint16; allocCount uint16; spanclass runtime.spanClass; state runtime.mSpanStateBox; needzero uint8; divShift uint8; divShift2 uint8; elemsize uintptr; limit uintptr; speciallock runtime.mutex; specials *runtime.special}",
      "type" : "Struct",
      "underlying" : 101
    }, {
      "elem" : 103,
      "name" : "*runtime.mSpanList",
      "type" : "Pointer",
      "underlying" : 102
    }, {
      "local-name" : "mSpanList",
      "name" : "runtime.mSpanList",
      "package" : 0,
      "type" : "Named",
      "underlying" : 104
    }, {
      "fields" : [ {
        "name" : "first",
        "type" : 99
      }, {
        "name" : "last",
        "type" : 99
      } ],
      "name" : "struct{first *runtime.mspan; last *runtime.mspan}",
      "type" : "Struct",
      "underlying" : 104
    }, {
      "local-name" : "gclinkptr",
      "name" : "runtime.gclinkptr",
      "package" : 0,
      "type" : "Named",
      "underlying" : 23
    }, {
      "elem" : 107,
      "name" : "*runtime.gcBits",
      "type" : "Pointer",
      "underlying" : 106
    }, {
      "local-name" : "gcBits",
      "name" : "runtime.gcBits",
      "package" : 0,
      "type" : "Named",
      "underlying" : 88
    }, {
      "name" : "uint16",
      "type" : "Basic",
      "underlying" : 108
    }, {
      "local-name" : "spanClass",
      "name" : "runtime.spanClass",
      "package" : 0,
      "type" : "Named",
      "underlying" : 88
    }, {
      "local-name" : "mSpanStateBox",
      "name" : "runtime.mSpanStateBox",
      "package" : 0,
      "type" : "Named",
      "underlying" : 111
    }, {
      "fields" : [ {
        "name" : "s",
        "type" : 112
      } ],
      "name" : "struct{s runtime.mSpanState}",
      "type" : "Struct",
      "underlying" : 111
    }, {
      "local-name" : "mSpanState",
      "name" : "runtime.mSpanState",
      "package" : 0,
      "type" : "Named",
      "underlying" : 88
    }, {
      "local-name" : "mutex",
      "name" : "runtime.mutex",
      "package" : 0,
      "type" : "Named",
      "underlying" : 93
    }, {
      "elem" : 115,
      "name" : "*runtime.special",
      "type" : "Pointer",
      "underlying" : 114
    }, {
      "local-name" : "special",
      "name" : "runtime.special",
      "package" : 0,
      "type" : "Named",
      "underlying" : 116
    }, {
      "fields" : [ {
        "name" : "next",
        "type" : 114
      }, {
        "name" : "offset",
        "type" : 108
      }, {
        "name" : "kind",
        "type" : 11
      } ],
      "name" : "struct{next *runtime.special; offset uint16; kind byte}",
      "type" : "Struct",
      "underlying" : 116
    }, {
      "elem" : 118,
      "name" : "[4]runtime.stackfreelist",
      "type" : "Array",
      "underlying" : 117
    }, {
      "local-name" : "stackfreelist",
      "name" : "runtime.stackfreelist",
      "package" : 0,
      "type" : "Named",
      "underlying" : 119
    }, {
      "fields" : [ {
        "name" : "list",
        "type" : 105
      }, {
        "name" : "size",
        "type" : 23
      } ],
      "name" : "struct{list runtime.gclinkptr; size uintptr}",
      "type" : "Struct",
      "underlying" : 119
    }, {
      "elem" : 23,
      "name" : "[67]uintptr",
      "type" : "Array",
      "underlying" : 120
    }, {
      "name" : "func(*runtime.g, unsafe.Pointer) bool",
      "params" : 122,
      "recv" : -1,
      "results" : 36,
      "type" : "Signature",
      "underlying" : 121,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 57
      }, {
        "name" : "",
        "type" : 24
      } ],
      "name" : "(*runtime.g, unsafe.Pointer)",
      "type" : "Tuple",
      "underlying" : 122
    }, {
      "name" : "int",
      "type" : "Basic",
      "underlying" : 123
    }, {
      "local-name" : "libcall",
      "name" : "runtime.libcall",
      "package" : 0,
      "type" : "Named",
      "underlying" : 125
    }, {
      "fields" : [ {
        "name" : "fn",
        "type" : 23
      }, {
        "name" : "n",
        "type" : 23
      }, {
        "name" : "args",
        "type" : 23
      }, {
        "name" : "r1",
        "type" : 23
      }, {
        "name" : "r2",
        "type" : 23
      }, {
        "name" : "err",
        "type" : 23
      } ],
      "name" : "struct{fn uintptr; n uintptr; args uintptr; r1 uintptr; r2 uintptr; err uintptr}",
      "type" : "Struct",
      "underlying" : 125
    }, {
      "local-name" : "dlogPerM",
      "name" : "runtime.dlogPerM",
      "package" : 0,
      "type" : "Named",
      "underlying" : 127
    }, {
      "fields" : [ ],
      "name" : "struct{}",
      "type" : "Struct",
      "underlying" : 127
    }, {
      "local-name" : "mOS",
      "name" : "runtime.mOS",
      "package" : 0,
      "type" : "Named",
      "underlying" : 127
    }, {
      "local-name" : "waitReason",
      "name" : "runtime.waitReason",
      "package" : 0,
      "type" : "Named",
      "underlying" : 88
    }, {
      "elem" : 11,
      "name" : "[]byte",
      "type" : "Slice",
      "underlying" : 130
    }, {
      "elem" : 132,
      "name" : "*[]runtime.ancestorInfo",
      "type" : "Pointer",
      "underlying" : 131
    }, {
      "elem" : 133,
      "name" : "[]runtime.ancestorInfo",
      "type" : "Slice",
      "underlying" : 132
    }, {
      "local-name" : "ancestorInfo",
      "name" : "runtime.ancestorInfo",
      "package" : 0,
      "type" : "Named",
      "underlying" : 134
    }, {
      "fields" : [ {
        "name" : "pcs",
        "type" : 135
      }, {
        "name" : "goid",
        "type" : 19
      }, {
        "name" : "gopc",
        "type" : 23
      } ],
      "name" : "struct{pcs []uintptr; goid int64; gopc uintptr}",
      "type" : "Struct",
      "underlying" : 134
    }, {
      "elem" : 23,
      "name" : "[]uintptr",
      "type" : "Slice",
      "underlying" : 135
    }, {
      "elem" : 137,
      "name" : "*runtime.sudog",
      "type" : "Pointer",
      "underlying" : 136
    }, {
      "local-name" : "sudog",
      "name" : "runtime.sudog",
      "package" : 0,
      "type" : "Named",
      "underlying" : 138
    }, {
      "fields" : [ {
        "name" : "g",
        "type" : 57
      }, {
        "name" : "isSelect",
        "type" : 29
      }, {
        "name" : "next",
        "type" : 136
      }, {
        "name" : "prev",
        "type" : 136
      }, {
        "name" : "elem",
        "type" : 24
      }, {
        "name" : "acquiretime",
        "type" : 19
      }, {
        "name" : "releasetime",
        "type" : 19
      }, {
        "name" : "ticket",
        "type" : 16
      }, {
        "name" : "parent",
        "type" : 136
      }, {
        "name" : "waitlink",
        "type" : 136
      }, {
        "name" : "waittail",
        "type" : 136
      }, {
        "name" : "c",
        "type" : 139
      } ],
      "name" : "struct{g *runtime.g; isSelect bool; next *runtime.sudog; prev *runtime.sudog; elem unsafe.Pointer; acquiretime int64; releasetime int64; ticket uint32; parent *runtime.sudog; waitlink *runtime.sudog; waittail *runtime.sudog; c *runtime.hchan}",
      "type" : "Struct",
      "underlying" : 138
    }, {
      "elem" : 140,
      "name" : "*runtime.hchan",
      "type" : "Pointer",
      "underlying" : 139
    }, {
      "local-name" : "hchan",
      "name" : "runtime.hchan",
      "package" : 0,
      "type" : "Named",
      "underlying" : 141
    }, {
      "fields" : [ {
        "name" : "qcount",
        "type" : 142
      }, {
        "name" : "dataqsiz",
        "type" : 142
      }, {
        "name" : "buf",
        "type" : 24
      }, {
        "name" : "elemsize",
        "type" : 108
      }, {
        "name" : "closed",
        "type" : 16
      }, {
        "name" : "elemtype",
        "type" : 143
      }, {
        "name" : "sendx",
        "type" : 142
      }, {
        "name" : "recvx",
        "type" : 142
      }, {
        "name" : "recvq",
        "type" : 152
      }, {
        "name" : "sendq",
        "type" : 152
      }, {
        "name" : "lock",
        "type" : 113
      } ],
      "name" : "struct{qcount uint; dataqsiz uint; buf unsafe.Pointer; elemsize uint16; closed uint32; elemtype *runtime._type; sendx uint; recvx uint; recvq runtime.waitq; sendq runtime.waitq; lock runtime.mutex}",
      "type" : "Struct",
      "underlying" : 141
    }, {
      "name" : "uint",
      "type" : "Basic",
      "underlying" : 142
    }, {
      "elem" : 144,
      "name" : "*runtime._type",
      "type" : "Pointer",
      "underlying" : 143
    }, {
      "local-name" : "_type",
      "name" : "runtime._type",
      "package" : 0,
      "type" : "Named",
      "underlying" : 145
    }, {
      "fields" : [ {
        "name" : "size",
        "type" : 23
      }, {
        "name" : "ptrdata",
        "type" : 23
      }, {
        "name" : "hash",
        "type" : 16
      }, {
        "name" : "tflag",
        "type" : 146
      }, {
        "name" : "align",
        "type" : 88
      }, {
        "name" : "fieldAlign",
        "type" : 88
      }, {
        "name" : "kind",
        "type" : 88
      }, {
        "name" : "equal",
        "type" : 147
      }, {
        "name" : "gcdata",
        "type" : 149
      }, {
        "name" : "str",
        "type" : 150
      }, {
        "name" : "ptrToThis",
        "type" : 151
      } ],
      "name" : "struct{size uintptr; ptrdata uintptr; hash uint32; tflag runtime.tflag; align uint8; fieldAlign uint8; kind uint8; equal func(unsafe.Pointer, unsafe.Pointer) bool; gcdata *byte; str runtime.nameOff; ptrToThis runtime.typeOff}",
      "type" : "Struct",
      "underlying" : 145
    }, {
      "local-name" : "tflag",
      "name" : "runtime.tflag",
      "package" : 0,
      "type" : "Named",
      "underlying" : 88
    }, {
      "name" : "func(unsafe.Pointer, unsafe.Pointer) bool",
      "params" : 148,
      "recv" : -1,
      "results" : 36,
      "type" : "Signature",
      "underlying" : 147,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 24
      }, {
        "name" : "",
        "type" : 24
      } ],
      "name" : "(unsafe.Pointer, unsafe.Pointer)",
      "type" : "Tuple",
      "underlying" : 148
    }, {
      "elem" : 11,
      "name" : "*byte",
      "type" : "Pointer",
      "underlying" : 149
    }, {
      "local-name" : "nameOff",
      "name" : "runtime.nameOff",
      "package" : 0,
      "type" : "Named",
      "underlying" : 69
    }, {
      "local-name" : "typeOff",
      "name" : "runtime.typeOff",
      "package" : 0,
      "type" : "Named",
      "underlying" : 69
    }, {
      "local-name" : "waitq",
      "name" : "runtime.waitq",
      "package" : 0,
      "type" : "Named",
      "underlying" : 153
    }, {
      "fields" : [ {
        "name" : "first",
        "type" : 136
      }, {
        "name" : "last",
        "type" : 136
      } ],
      "name" : "struct{first *runtime.sudog; last *runtime.sudog}",
      "type" : "Struct",
      "underlying" : 153
    }, {
      "elem" : 155,
      "name" : "*runtime.timer",
      "type" : "Pointer",
      "underlying" : 154
    }, {
      "local-name" : "timer",
      "name" : "runtime.timer",
      "package" : 0,
      "type" : "Named",
      "underlying" : 156
    }, {
      "fields" : [ {
        "name" : "pp",
        "type" : 86
      }, {
        "name" : "when",
        "type" : 19
      }, {
        "name" : "period",
        "type" : 19
      }, {
        "name" : "f",
        "type" : 157
      }, {
        "name" : "arg",
        "type" : 65
      }, {
        "name" : "seq",
        "type" : 23
      }, {
        "name" : "nextwhen",
        "type" : 19
      }, {
        "name" : "status",
        "type" : 16
      } ],
      "name" : "struct{pp runtime.puintptr; when int64; period int64; f func(interface{}, uintptr); arg interface{}; seq uintptr; nextwhen int64; status uint32}",
      "type" : "Struct",
      "underlying" : 156
    }, {
      "name" : "func(interface{}, uintptr)",
      "params" : 158,
      "recv" : -1,
      "results" : 1,
      "type" : "Signature",
      "underlying" : 157,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 65
      }, {
        "name" : "",
        "type" : 23
      } ],
      "name" : "(interface{}, uintptr)",
      "type" : "Tuple",
      "underlying" : 158
    }, {
      "name" : "func() *runtime.g",
      "params" : 1,
      "recv" : -1,
      "results" : 160,
      "type" : "Signature",
      "underlying" : 159,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 57
      } ],
      "name" : "(*runtime.g)",
      "type" : "Tuple",
      "underlying" : 160
    }, {
      "name" : "func(x int64)",
      "params" : 162,
      "recv" : -1,
      "results" : 1,
      "type" : "Signature",
      "underlying" : 161,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "x",
        "type" : 19
      } ],
      "name" : "(x int64)",
      "type" : "Tuple",
      "underlying" : 162
    }, {
      "name" : "(*runtime.debugLogWriter) func(x int64)",
      "params" : 162,
      "recv" : 25,
      "results" : 1,
      "type" : "Signature",
      "underlying" : 163,
      "variadic" : false
    }, {
      "elem" : 165,
      "name" : "*runtime.p",
      "type" : "Pointer",
      "underlying" : 164
    }, {
      "local-name" : "p",
      "name" : "runtime.p",
      "package" : 0,
      "type" : "Named",
      "underlying" : 166
    }, {
      "fields" : [ {
        "name" : "id",
        "type" : 69
      }, {
        "name" : "status",
        "type" : 16
      }, {
        "name" : "link",
        "type" : 86
      }, {
        "name" : "schedtick",
        "type" : 16
      }, {
        "name" : "syscalltick",
        "type" : 16
      }, {
        "name" : "sysmontick",
        "type" : 167
      }, {
        "name" : "m",
        "type" : 94
      }, {
        "name" : "mcache",
        "type" : 95
      }, {
        "name" : "pcache",
        "type" : 169
      }, {
        "name" : "raceprocctx",
        "type" : 23
      }, {
        "name" : "deferpool",
        "type" : 171
      }, {
        "name" : "deferpoolbuf",
        "type" : 173
      }, {
        "name" : "goidcache",
        "type" : 8
      }, {
        "name" : "goidcacheend",
        "type" : 8
      }, {
        "name" : "runqhead",
        "type" : 16
      }, {
        "name" : "runqtail",
        "type" : 16
      }, {
        "name" : "runq",
        "type" : 175
      }, {
        "name" : "runnext",
        "type" : 78
      }, {
        "name" : "gFree",
        "type" : 176
      }, {
        "name" : "sudogcache",
        "type" : 179
      }, {
        "name" : "sudogbuf",
        "type" : 180
      }, {
        "name" : "mspancache",
        "type" : 181
      }, {
        "name" : "tracebuf",
        "type" : 183
      }, {
        "name" : "traceSweep",
        "type" : 29
      }, {
        "name" : "traceSwept",
        "type" : 23
      }, {
        "name" : "traceReclaimed",
        "type" : 23
      }, {
        "name" : "palloc",
        "type" : 184
      }, {
        "name" : "_",
        "type" : 16
      }, {
        "name" : "timer0When",
        "type" : 8
      }, {
        "name" : "gcAssistTime",
        "type" : 19
      }, {
        "name" : "gcFractionalMarkTime",
        "type" : 19
      }, {
        "name" : "gcBgMarkWorker",
        "type" : 78
      }, {
        "name" : "gcMarkWorkerMode",
        "type" : 188
      }, {
        "name" : "gcMarkWorkerStartTime",
        "type" : 19
      }, {
        "name" : "gcw",
        "type" : 189
      }, {
        "name" : "wbBuf",
        "type" : 200
      }, {
        "name" : "runSafePointFn",
        "type" : 16
      }, {
        "name" : "timersLock",
        "type" : 113
      }, {
        "name" : "timers",
        "type" : 203
      }, {
        "name" : "numTimers",
        "type" : 16
      }, {
        "name" : "adjustTimers",
        "type" : 16
      }, {
        "name" : "deletedTimers",
        "type" : 16
      }, {
        "name" : "timerRaceCtx",
        "type" : 23
      }, {
        "name" : "preempt",
        "type" : 29
      }, {
        "name" : "pad",
        "type" : 204
      } ],
      "name" : "struct{id int32; status uint32; link runtime.puintptr; schedtick uint32; syscalltick uint32; sysmontick runtime.sysmontick; m runtime.muintptr; mcache *runtime.mcache; pcache runtime.pageCache; raceprocctx uintptr; deferpool [5][]*runtime._defer; deferpoolbuf [5][32]*runtime._defer; goidcache uint64; goidcacheend uint64; runqhead uint32; runqtail uint32; runq [256]runtime.guintptr; runnext runtime.guintptr; gFree struct{runtime.gList; n int32}; sudogcache []*runtime.sudog; sudogbuf [128]*runtime.sudog; mspancache struct{len int; buf [128]*runtime.mspan}; tracebuf runtime.traceBufPtr; traceSweep bool; traceSwept uintptr; traceReclaimed uintptr; palloc runtime.persistentAlloc; _ uint32; timer0When uint64; gcAssistTime int64; gcFractionalMarkTime int64; gcBgMarkWorker runtime.guintptr; gcMarkWorkerMode runtime.gcMarkWorkerMode; gcMarkWorkerStartTime int64; gcw runtime.gcWork; wbBuf runtime.wbBuf; runSafePointFn uint32; timersLock runtime.mutex; timers []*runtime.timer; numTimers uint32; adjustTimers uint32; deletedTimers uint32; timerRaceCtx uintptr; preempt bool; pad internal/cpu.CacheLinePad}",
      "type" : "Struct",
      "underlying" : 166
    }, {
      "local-name" : "sysmontick",
      "name" : "runtime.sysmontick",
      "package" : 0,
      "type" : "Named",
      "underlying" : 168
    }, {
      "fields" : [ {
        "name" : "schedtick",
        "type" : 16
      }, {
        "name" : "schedwhen",
        "type" : 19
      }, {
        "name" : "syscalltick",
        "type" : 16
      }, {
        "name" : "syscallwhen",
        "type" : 19
      } ],
      "name" : "struct{schedtick uint32; schedwhen int64; syscalltick uint32; syscallwhen int64}",
      "type" : "Struct",
      "underlying" : 168
    }, {
      "local-name" : "pageCache",
      "name" : "runtime.pageCache",
      "package" : 0,
      "type" : "Named",
      "underlying" : 170
    }, {
      "fields" : [ {
        "name" : "base",
        "type" : 23
      }, {
        "name" : "cache",
        "type" : 8
      }, {
        "name" : "scav",
        "type" : 8
      } ],
      "name" : "struct{base uintptr; cache uint64; scav uint64}",
      "type" : "Struct",
      "underlying" : 170
    }, {
      "elem" : 172,
      "name" : "[5][]*runtime._defer",
      "type" : "Array",
      "underlying" : 171
    }, {
      "elem" : 66,
      "name" : "[]*runtime._defer",
      "type" : "Slice",
      "underlying" : 172
    }, {
      "elem" : 174,
      "name" : "[5][32]*runtime._defer",
      "type" : "Array",
      "underlying" : 173
    }, {
      "elem" : 66,
      "name" : "[32]*runtime._defer",
      "type" : "Array",
      "underlying" : 174
    }, {
      "elem" : 78,
      "name" : "[256]runtime.guintptr",
      "type" : "Array",
      "underlying" : 175
    }, {
      "fields" : [ {
        "name" : "gList",
        "type" : 177
      }, {
        "name" : "n",
        "type" : 69
      } ],
      "name" : "struct{runtime.gList; n int32}",
      "type" : "Struct",
      "underlying" : 176
    }, {
      "local-name" : "gList",
      "name" : "runtime.gList",
      "package" : 0,
      "type" : "Named",
      "underlying" : 178
    }, {
      "fields" : [ {
        "name" : "head",
        "type" : 78
      } ],
      "name" : "struct{head runtime.guintptr}",
      "type" : "Struct",
      "underlying" : 178
    }, {
      "elem" : 136,
      "name" : "[]*runtime.sudog",
      "type" : "Slice",
      "underlying" : 179
    }, {
      "elem" : 136,
      "name" : "[128]*runtime.sudog",
      "type" : "Array",
      "underlying" : 180
    }, {
      "fields" : [ {
        "name" : "len",
        "type" : 123
      }, {
        "name" : "buf",
        "type" : 182
      } ],
      "name" : "struct{len int; buf [128]*runtime.mspan}",
      "type" : "Struct",
      "underlying" : 181
    }, {
      "elem" : 99,
      "name" : "[128]*runtime.mspan",
      "type" : "Array",
      "underlying" : 182
    }, {
      "local-name" : "traceBufPtr",
      "name" : "runtime.traceBufPtr",
      "package" : 0,
      "type" : "Named",
      "underlying" : 23
    }, {
      "local-name" : "persistentAlloc",
      "name" : "runtime.persistentAlloc",
      "package" : 0,
      "type" : "Named",
      "underlying" : 185
    }, {
      "fields" : [ {
        "name" : "base",
        "type" : 186
      }, {
        "name" : "off",
        "type" : 23
      } ],
      "name" : "struct{base *runtime.notInHeap; off uintptr}",
      "type" : "Struct",
      "underlying" : 185
    }, {
      "elem" : 187,
      "name" : "*runtime.notInHeap",
      "type" : "Pointer",
      "underlying" : 186
    }, {
      "local-name" : "notInHeap",
      "name" : "runtime.notInHeap",
      "package" : 0,
      "type" : "Named",
      "underlying" : 127
    }, {
      "local-name" : "gcMarkWorkerMode",
      "name" : "runtime.gcMarkWorkerMode",
      "package" : 0,
      "type" : "Named",
      "underlying" : 123
    }, {
      "local-name" : "gcWork",
      "name" : "runtime.gcWork",
      "package" : 0,
      "type" : "Named",
      "underlying" : 190
    }, {
      "fields" : [ {
        "name" : "wbuf1",
        "type" : 191
      }, {
        "name" : "wbuf2",
        "type" : 191
      }, {
        "name" : "bytesMarked",
        "type" : 8
      }, {
        "name" : "scanWork",
        "type" : 19
      }, {
        "name" : "flushedWork",
        "type" : 29
      }, {
        "name" : "pauseGen",
        "type" : 16
      }, {
        "name" : "putGen",
        "type" : 16
      }, {
        "name" : "pauseStack",
        "type" : 199
      } ],
      "name" : "struct{wbuf1 *runtime.workbuf; wbuf2 *runtime.workbuf; bytesMarked uint64; scanWork int64; flushedWork bool; pauseGen uint32; putGen uint32; pauseStack [16]uintptr}",
      "type" : "Struct",
      "underlying" : 190
    }, {
      "elem" : 192,
      "name" : "*runtime.workbuf",
      "type" : "Pointer",
      "underlying" : 191
    }, {
      "local-name" : "workbuf",
      "name" : "runtime.workbuf",
      "package" : 0,
      "type" : "Named",
      "underlying" : 193
    }, {
      "fields" : [ {
        "name" : "workbufhdr",
        "type" : 194
      }, {
        "name" : "obj",
        "type" : 198
      } ],
      "name" : "struct{runtime.workbufhdr; obj [253]uintptr}",
      "type" : "Struct",
      "underlying" : 193
    }, {
      "local-name" : "workbufhdr",
      "name" : "runtime.workbufhdr",
      "package" : 0,
      "type" : "Named",
      "underlying" : 195
    }, {
      "fields" : [ {
        "name" : "node",
        "type" : 196
      }, {
        "name" : "nobj",
        "type" : 123
      } ],
      "name" : "struct{node runtime.lfnode; nobj int}",
      "type" : "Struct",
      "underlying" : 195
    }, {
      "local-name" : "lfnode",
      "name" : "runtime.lfnode",
      "package" : 0,
      "type" : "Named",
      "underlying" : 197
    }, {
      "fields" : [ {
        "name" : "next",
        "type" : 8
      }, {
        "name" : "pushcnt",
        "type" : 23
      } ],
      "name" : "struct{next uint64; pushcnt uintptr}",
      "type" : "Struct",
      "underlying" : 197
    }, {
      "elem" : 23,
      "name" : "[253]uintptr",
      "type" : "Array",
      "underlying" : 198
    }, {
      "elem" : 23,
      "name" : "[16]uintptr",
      "type" : "Array",
      "underlying" : 199
    }, {
      "local-name" : "wbBuf",
      "name" : "runtime.wbBuf",
      "package" : 0,
      "type" : "Named",
      "underlying" : 201
    }, {
      "fields" : [ {
        "name" : "next",
        "type" : 23
      }, {
        "name" : "end",
        "type" : 23
      }, {
        "name" : "buf",
        "type" : 202
      }, {
        "name" : "debugGen",
        "type" : 16
      } ],
      "name" : "struct{next uintptr; end uintptr; buf [512]uintptr; debugGen uint32}",
      "type" : "Struct",
      "underlying" : 201
    }, {
      "elem" : 23,
      "name" : "[512]uintptr",
      "type" : "Array",
      "underlying" : 202
    }, {
      "elem" : 154,
      "name" : "[]*runtime.timer",
      "type" : "Slice",
      "underlying" : 203
    }, {
      "local-name" : "CacheLinePad",
      "name" : "internal/cpu.CacheLinePad",
      "package" : 4,
      "type" : "Named",
      "underlying" : 205
    }, {
      "fields" : [ {
        "name" : "_",
        "type" : 206
      } ],
      "name" : "struct{_ [64]byte}",
      "type" : "Struct",
      "underlying" : 205
    }, {
      "elem" : 11,
      "name" : "[64]byte",
      "type" : "Array",
      "underlying" : 206
    }, {
      "name" : "func() *runtime.p",
      "params" : 1,
      "recv" : -1,
      "results" : 208,
      "type" : "Signature",
      "underlying" : 207,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 164
      } ],
      "name" : "(*runtime.p)",
      "type" : "Tuple",
      "underlying" : 208
    }, {
      "name" : "(runtime.puintptr) func() *runtime.p",
      "params" : 1,
      "recv" : 26,
      "results" : 208,
      "type" : "Signature",
      "underlying" : 209,
      "variadic" : false
    } ],
    "variables" : [ {
      "name" : "[res0]",
      "package" : 0,
      "type" : 3,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "allDloggers",
      "package" : 0,
      "type" : 3,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "tick",
      "package" : 0,
      "type" : 8,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "nano",
      "package" : 0,
      "type" : 8,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "l",
      "package" : 0,
      "type" : 3,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "allp",
      "package" : 0,
      "type" : 22,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "all",
      "package" : 0,
      "type" : 3,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "l1",
      "package" : 0,
      "type" : 3,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "allLink",
      "package" : 0,
      "type" : 3,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "owned",
      "package" : 0,
      "type" : 16,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "w",
      "package" : 0,
      "type" : 6,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "r",
      "package" : 0,
      "type" : 12,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "data",
      "package" : 0,
      "type" : 14,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "data",
      "package" : 0,
      "type" : 9,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "headp",
      "package" : 0,
      "type" : 22,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "head",
      "package" : 0,
      "type" : 23,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "tick",
      "package" : 0,
      "type" : 8,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "nano",
      "package" : 0,
      "type" : 8,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "l",
      "package" : 0,
      "type" : 50,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "l",
      "package" : 0,
      "type" : 50,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "write",
      "package" : 0,
      "type" : 8,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "l",
      "package" : 0,
      "type" : 50,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "gp",
      "package" : 0,
      "type" : 57,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "m",
      "package" : 0,
      "type" : 73,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "p",
      "package" : 0,
      "type" : 86,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "l",
      "package" : 0,
      "type" : 50,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "pp",
      "package" : 0,
      "type" : 86,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "id",
      "package" : 0,
      "type" : 69,
      "exported" : false,
      "embedded" : false,
      "field" : true
    } ]
  },
  "go-version" : "1.14.3"
}