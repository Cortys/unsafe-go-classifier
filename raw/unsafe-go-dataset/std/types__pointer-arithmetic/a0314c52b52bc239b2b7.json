{
  "usage" : {
    "file" : "type.go",
    "label1" : "pointer-arithmetic",
    "label2" : "types",
    "line" : "185",
    "module" : "std",
    "pkg" : "runtime",
    "project" : "kubernetes/kubernetes",
    "snippet" : "func resolveNameOff(ptrInModule unsafe.Pointer, off nameOff) name {",
    "version" : "std"
  },
  "cfg" : {
    "blocks" : [ {
      "update-vars" : [ ],
      "successors" : [ 2 ],
      "in-vars" : [ 3, 1, 0, 4 ],
      "exit" : false,
      "out-vars" : [ 3, 1, 0, 4 ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[entry]",
      "entry" : true,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ ],
      "in-vars" : [ ],
      "exit" : true,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[exit]",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 3, 4 ],
      "in-vars" : [ 3, 1, 0, 4 ],
      "exit" : false,
      "out-vars" : [ 3, 1, 0, 4 ],
      "decl-vars" : [ ],
      "line-start" : 186,
      "ast" : {
        "condition" : {
          "go-type" : 63,
          "kind" : "expression",
          "left" : {
            "go-type" : 3,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "off",
              "variable" : 1
            }
          },
          "operator" : "==",
          "right" : {
            "go-type" : 3,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 188,
      "code" : "if off == 0 {\n\treturn name{}\n}",
      "entry" : false,
      "use-vars" : [ 1 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 187,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "declared" : {
            "go-type" : 6,
            "kind" : "type",
            "type" : "identifier",
            "value" : {
              "go-type" : 6,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "name"
            }
          },
          "go-type" : 6,
          "kind" : "literal",
          "type" : "composite",
          "values" : [ ]
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 187,
      "code" : "return name{}",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 6 ],
      "in-vars" : [ 1, 0, 4, 3 ],
      "exit" : false,
      "out-vars" : [ 4, 3, 1, 5 ],
      "decl-vars" : [ 5 ],
      "line-start" : 189,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "base"
          }
        } ],
        "right" : [ {
          "coerced-to" : {
            "go-type" : 13,
            "kind" : "type",
            "type" : "identifier",
            "value" : {
              "go-type" : 13,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "uintptr"
            }
          },
          "go-type" : 13,
          "kind" : "expression",
          "target" : {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "ptrInModule",
              "variable" : 0
            }
          },
          "type" : "cast"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 189,
      "code" : "base := uintptr(ptrInModule)",
      "entry" : false,
      "use-vars" : [ 0 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 8, 14 ],
      "in-vars" : [ 3, 1, 5, 6, 4 ],
      "exit" : false,
      "out-vars" : [ 3, 1, 5, 6, 4 ],
      "decl-vars" : [ ],
      "line-start" : 190,
      "ast" : {
        "condition" : {
          "go-type" : 63,
          "kind" : "expression",
          "left" : {
            "go-type" : 62,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "md",
              "variable" : 6
            }
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 64,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Nil",
              "kind" : "ident",
              "value" : "nil"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "for"
      },
      "assign-vars" : [ ],
      "line-end" : 199,
      "code" : "for md := &firstmoduledata; md != nil; md = md.next {\n\tif base >= md.types && base < md.etypes {\n\t\tres := md.types + uintptr(off)\n\t\tif res > md.etypes {\n\t\t\tprintln(\"runtime: nameOff\", hex(off), \"out of range\", hex(md.types), \"-\", hex(md.etypes))\n\t\t\tthrow(\"runtime: name offset out of range\")\n\t\t}\n\t\treturn name{(*byte)(unsafe.Pointer(res))}\n\t}\n}",
      "entry" : false,
      "use-vars" : [ 6 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 5 ],
      "in-vars" : [ 3, 1, 5, 4 ],
      "exit" : false,
      "out-vars" : [ 6, 4, 3, 1, 5 ],
      "decl-vars" : [ 6 ],
      "line-start" : 190,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "md"
          }
        } ],
        "right" : [ {
          "go-type" : 62,
          "kind" : "expression",
          "operator" : "&",
          "target" : {
            "go-type" : 16,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "firstmoduledata",
              "variable" : 4
            }
          },
          "type" : "unary"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 190,
      "code" : "md := &firstmoduledata",
      "entry" : false,
      "use-vars" : [ 4 ]
    }, {
      "update-vars" : [ 6 ],
      "successors" : [ 5 ],
      "in-vars" : [ 6, 4, 3, 1, 5 ],
      "exit" : false,
      "out-vars" : [ 3, 1, 5, 6, 4 ],
      "decl-vars" : [ ],
      "line-start" : 190,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 62,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "md",
            "variable" : 6
          }
        } ],
        "right" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "next",
            "variable" : 7
          },
          "go-type" : 62,
          "kind" : "expression",
          "target" : {
            "go-type" : 62,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "md",
              "variable" : 6
            }
          },
          "type" : "selector"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 6 ],
      "line-end" : 190,
      "code" : "md = md.next",
      "entry" : false,
      "use-vars" : [ 6 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 7, 9 ],
      "in-vars" : [ 3, 1, 5, 6, 4 ],
      "exit" : false,
      "out-vars" : [ 3, 1, 5, 6, 4 ],
      "decl-vars" : [ ],
      "line-start" : 191,
      "ast" : {
        "condition" : {
          "go-type" : 63,
          "kind" : "expression",
          "left" : {
            "go-type" : 63,
            "kind" : "expression",
            "left" : {
              "go-type" : 13,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "base",
                "variable" : 5
              }
            },
            "operator" : ">=",
            "right" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "types",
                "variable" : 8
              },
              "go-type" : 13,
              "kind" : "expression",
              "target" : {
                "go-type" : 62,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "md",
                  "variable" : 6
                }
              },
              "type" : "selector"
            },
            "type" : "binary"
          },
          "operator" : "&&",
          "right" : {
            "go-type" : 63,
            "kind" : "expression",
            "left" : {
              "go-type" : 13,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "base",
                "variable" : 5
              }
            },
            "operator" : "<",
            "right" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "etypes",
                "variable" : 9
              },
              "go-type" : 13,
              "kind" : "expression",
              "target" : {
                "go-type" : 62,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "md",
                  "variable" : 6
                }
              },
              "type" : "selector"
            },
            "type" : "binary"
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 198,
      "code" : "if base >= md.types && base < md.etypes {\n\tres := md.types + uintptr(off)\n\tif res > md.etypes {\n\t\tprintln(\"runtime: nameOff\", hex(off), \"out of range\", hex(md.types), \"-\", hex(md.etypes))\n\t\tthrow(\"runtime: name offset out of range\")\n\t}\n\treturn name{(*byte)(unsafe.Pointer(res))}\n}",
      "entry" : false,
      "use-vars" : [ 5, 6 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 10 ],
      "in-vars" : [ 1, 6 ],
      "exit" : false,
      "out-vars" : [ 10, 1, 6 ],
      "decl-vars" : [ 10 ],
      "line-start" : 192,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "res"
          }
        } ],
        "right" : [ {
          "go-type" : 13,
          "kind" : "expression",
          "left" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "types",
              "variable" : 8
            },
            "go-type" : 13,
            "kind" : "expression",
            "target" : {
              "go-type" : 62,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "md",
                "variable" : 6
              }
            },
            "type" : "selector"
          },
          "operator" : "+",
          "right" : {
            "coerced-to" : {
              "go-type" : 13,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 13,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "uintptr"
              }
            },
            "go-type" : 13,
            "kind" : "expression",
            "target" : {
              "go-type" : 3,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "off",
                "variable" : 1
              }
            },
            "type" : "cast"
          },
          "type" : "binary"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 192,
      "code" : "res := md.types + uintptr(off)",
      "entry" : false,
      "use-vars" : [ 1, 6 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 11, 13 ],
      "in-vars" : [ 6, 10, 1 ],
      "exit" : false,
      "out-vars" : [ 1, 6, 10 ],
      "decl-vars" : [ ],
      "line-start" : 193,
      "ast" : {
        "condition" : {
          "go-type" : 63,
          "kind" : "expression",
          "left" : {
            "go-type" : 13,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "res",
              "variable" : 10
            }
          },
          "operator" : ">",
          "right" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "etypes",
              "variable" : 9
            },
            "go-type" : 13,
            "kind" : "expression",
            "target" : {
              "go-type" : 62,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "md",
                "variable" : 6
              }
            },
            "type" : "selector"
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 196,
      "code" : "if res > md.etypes {\n\tprintln(\"runtime: nameOff\", hex(off), \"out of range\", hex(md.types), \"-\", hex(md.etypes))\n\tthrow(\"runtime: name offset out of range\")\n}",
      "entry" : false,
      "use-vars" : [ 10, 6 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 12 ],
      "in-vars" : [ 1, 6, 10 ],
      "exit" : false,
      "out-vars" : [ 10 ],
      "decl-vars" : [ ],
      "line-start" : 194,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 53,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "runtime: nameOff"
            }
          }, {
            "coerced-to" : {
              "go-type" : 68,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 68,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "hex"
              }
            },
            "go-type" : 68,
            "kind" : "expression",
            "target" : {
              "go-type" : 3,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "off",
                "variable" : 1
              }
            },
            "type" : "cast"
          }, {
            "go-type" : 53,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "out of range"
            }
          }, {
            "coerced-to" : {
              "go-type" : 68,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 68,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "hex"
              }
            },
            "go-type" : 68,
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "types",
                "variable" : 8
              },
              "go-type" : 13,
              "kind" : "expression",
              "target" : {
                "go-type" : 62,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "md",
                  "variable" : 6
                }
              },
              "type" : "selector"
            },
            "type" : "cast"
          }, {
            "go-type" : 53,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "-"
            }
          }, {
            "coerced-to" : {
              "go-type" : 68,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 68,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "hex"
              }
            },
            "go-type" : 68,
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "etypes",
                "variable" : 9
              },
              "go-type" : 13,
              "kind" : "expression",
              "target" : {
                "go-type" : 62,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "md",
                  "variable" : 6
                }
              },
              "type" : "selector"
            },
            "type" : "cast"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 66,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Builtin",
              "kind" : "ident",
              "value" : "println"
            }
          },
          "go-type" : 65,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 194,
      "code" : "println(\"runtime: nameOff\", hex(off), \"out of range\", hex(md.types), \"-\", hex(md.etypes))",
      "entry" : false,
      "use-vars" : [ 1, 6 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 13 ],
      "in-vars" : [ 10 ],
      "exit" : false,
      "out-vars" : [ 10 ],
      "decl-vars" : [ ],
      "line-start" : 195,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 53,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "runtime: name offset out of range"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 70,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "throw"
            }
          },
          "go-type" : 65,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 195,
      "code" : "throw(\"runtime: name offset out of range\")",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 10 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 197,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "declared" : {
            "go-type" : 6,
            "kind" : "type",
            "type" : "identifier",
            "value" : {
              "go-type" : 6,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "name"
            }
          },
          "go-type" : 6,
          "kind" : "literal",
          "type" : "composite",
          "values" : [ {
            "coerced-to" : {
              "contained" : {
                "go-type" : 9,
                "kind" : "type",
                "type" : "identifier",
                "value" : {
                  "go-type" : 9,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "byte"
                }
              },
              "go-type" : 8,
              "kind" : "type",
              "type" : "pointer"
            },
            "go-type" : 8,
            "kind" : "expression",
            "target" : {
              "coerced-to" : {
                "go-type" : 2,
                "kind" : "type",
                "qualifier" : {
                  "ident-kind" : "PkgName",
                  "kind" : "ident",
                  "package" : 1,
                  "value" : "unsafe"
                },
                "type" : "identifier",
                "value" : {
                  "go-type" : 2,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "Pointer"
                }
              },
              "go-type" : 2,
              "kind" : "expression",
              "target" : {
                "go-type" : 13,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "res",
                  "variable" : 10
                }
              },
              "type" : "cast"
            },
            "type" : "cast"
          } ]
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 197,
      "code" : "return name{(*byte)(unsafe.Pointer(res))}",
      "entry" : false,
      "use-vars" : [ 10 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 15 ],
      "in-vars" : [ 5, 4, 3, 1 ],
      "exit" : false,
      "out-vars" : [ 4, 3, 1, 5 ],
      "decl-vars" : [ ],
      "line-start" : 202,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 72,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "reflectOffsLock"
            }
          },
          "go-type" : 65,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 202,
      "code" : "reflectOffsLock()",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 16 ],
      "in-vars" : [ 3, 1, 5, 4 ],
      "exit" : false,
      "out-vars" : [ 12, 1, 5, 4, 13 ],
      "decl-vars" : [ 13, 12 ],
      "line-start" : 203,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "res"
          }
        }, {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "found"
          }
        } ],
        "right" : [ {
          "go-type" : 73,
          "index" : {
            "coerced-to" : {
              "go-type" : 4,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 4,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "int32"
              }
            },
            "go-type" : 4,
            "kind" : "expression",
            "target" : {
              "go-type" : 3,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "off",
                "variable" : 1
              }
            },
            "type" : "cast"
          },
          "kind" : "expression",
          "target" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "m",
              "variable" : 11
            },
            "go-type" : 14,
            "kind" : "expression",
            "target" : {
              "go-type" : 10,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "reflectOffs",
                "variable" : 3
              }
            },
            "type" : "selector"
          },
          "type" : "index"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 203,
      "code" : "res, found := reflectOffs.m[int32(off)]",
      "entry" : false,
      "use-vars" : [ 3, 1 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 17 ],
      "in-vars" : [ 13, 12, 1, 5, 4 ],
      "exit" : false,
      "out-vars" : [ 4, 13, 12, 1, 5 ],
      "decl-vars" : [ ],
      "line-start" : 204,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 72,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "reflectOffsUnlock"
            }
          },
          "go-type" : 65,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 204,
      "code" : "reflectOffsUnlock()",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 18, 24 ],
      "in-vars" : [ 5, 4, 13, 12, 1 ],
      "exit" : false,
      "out-vars" : [ 12, 1, 5, 4 ],
      "decl-vars" : [ ],
      "line-start" : 205,
      "ast" : {
        "condition" : {
          "go-type" : 42,
          "kind" : "expression",
          "operator" : "!",
          "target" : {
            "go-type" : 42,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "found",
              "variable" : 13
            }
          },
          "type" : "unary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 211,
      "code" : "if !found {\n\tprintln(\"runtime: nameOff\", hex(off), \"base\", hex(base), \"not in ranges:\")\n\tfor next := &firstmoduledata; next != nil; next = next.next {\n\t\tprintln(\"\\ttypes\", hex(next.types), \"etypes\", hex(next.etypes))\n\t}\n\tthrow(\"runtime: name offset base pointer out of range\")\n}",
      "entry" : false,
      "use-vars" : [ 13 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 20 ],
      "in-vars" : [ 1, 5, 4, 12 ],
      "exit" : false,
      "out-vars" : [ 12, 4 ],
      "decl-vars" : [ ],
      "line-start" : 206,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 53,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "runtime: nameOff"
            }
          }, {
            "coerced-to" : {
              "go-type" : 68,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 68,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "hex"
              }
            },
            "go-type" : 68,
            "kind" : "expression",
            "target" : {
              "go-type" : 3,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "off",
                "variable" : 1
              }
            },
            "type" : "cast"
          }, {
            "go-type" : 53,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "base"
            }
          }, {
            "coerced-to" : {
              "go-type" : 68,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 68,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "hex"
              }
            },
            "go-type" : 68,
            "kind" : "expression",
            "target" : {
              "go-type" : 13,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "base",
                "variable" : 5
              }
            },
            "type" : "cast"
          }, {
            "go-type" : 53,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "not in ranges:"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 74,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Builtin",
              "kind" : "ident",
              "value" : "println"
            }
          },
          "go-type" : 65,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 206,
      "code" : "println(\"runtime: nameOff\", hex(off), \"base\", hex(base), \"not in ranges:\")",
      "entry" : false,
      "use-vars" : [ 5, 1 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 22, 23 ],
      "in-vars" : [ 14, 12 ],
      "exit" : false,
      "out-vars" : [ 12, 14 ],
      "decl-vars" : [ ],
      "line-start" : 207,
      "ast" : {
        "condition" : {
          "go-type" : 63,
          "kind" : "expression",
          "left" : {
            "go-type" : 62,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "next",
              "variable" : 14
            }
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 64,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Nil",
              "kind" : "ident",
              "value" : "nil"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "for"
      },
      "assign-vars" : [ ],
      "line-end" : 209,
      "code" : "for next := &firstmoduledata; next != nil; next = next.next {\n\tprintln(\"\\ttypes\", hex(next.types), \"etypes\", hex(next.etypes))\n}",
      "entry" : false,
      "use-vars" : [ 14 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 19 ],
      "in-vars" : [ 4, 12 ],
      "exit" : false,
      "out-vars" : [ 12, 14 ],
      "decl-vars" : [ 14 ],
      "line-start" : 207,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "next"
          }
        } ],
        "right" : [ {
          "go-type" : 62,
          "kind" : "expression",
          "operator" : "&",
          "target" : {
            "go-type" : 16,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "firstmoduledata",
              "variable" : 4
            }
          },
          "type" : "unary"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 207,
      "code" : "next := &firstmoduledata",
      "entry" : false,
      "use-vars" : [ 4 ]
    }, {
      "update-vars" : [ 14 ],
      "successors" : [ 19 ],
      "in-vars" : [ 12, 14 ],
      "exit" : false,
      "out-vars" : [ 12, 14 ],
      "decl-vars" : [ ],
      "line-start" : 207,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 62,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "next",
            "variable" : 14
          }
        } ],
        "right" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "next",
            "variable" : 7
          },
          "go-type" : 62,
          "kind" : "expression",
          "target" : {
            "go-type" : 62,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "next",
              "variable" : 14
            }
          },
          "type" : "selector"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 14 ],
      "line-end" : 207,
      "code" : "next = next.next",
      "entry" : false,
      "use-vars" : [ 14 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 21 ],
      "in-vars" : [ 12, 14 ],
      "exit" : false,
      "out-vars" : [ 12, 14 ],
      "decl-vars" : [ ],
      "line-start" : 208,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 53,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "\ttypes"
            }
          }, {
            "coerced-to" : {
              "go-type" : 68,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 68,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "hex"
              }
            },
            "go-type" : 68,
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "types",
                "variable" : 8
              },
              "go-type" : 13,
              "kind" : "expression",
              "target" : {
                "go-type" : 62,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "next",
                  "variable" : 14
                }
              },
              "type" : "selector"
            },
            "type" : "cast"
          }, {
            "go-type" : 53,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "etypes"
            }
          }, {
            "coerced-to" : {
              "go-type" : 68,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 68,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "hex"
              }
            },
            "go-type" : 68,
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "etypes",
                "variable" : 9
              },
              "go-type" : 13,
              "kind" : "expression",
              "target" : {
                "go-type" : 62,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "next",
                  "variable" : 14
                }
              },
              "type" : "selector"
            },
            "type" : "cast"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 76,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Builtin",
              "kind" : "ident",
              "value" : "println"
            }
          },
          "go-type" : 65,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 208,
      "code" : "println(\"\\ttypes\", hex(next.types), \"etypes\", hex(next.etypes))",
      "entry" : false,
      "use-vars" : [ 14 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 24 ],
      "in-vars" : [ 12 ],
      "exit" : false,
      "out-vars" : [ 12 ],
      "decl-vars" : [ ],
      "line-start" : 210,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 53,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "runtime: name offset base pointer out of range"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 70,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "throw"
            }
          },
          "go-type" : 65,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 210,
      "code" : "throw(\"runtime: name offset base pointer out of range\")",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 12 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 212,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "declared" : {
            "go-type" : 6,
            "kind" : "type",
            "type" : "identifier",
            "value" : {
              "go-type" : 6,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "name"
            }
          },
          "go-type" : 6,
          "kind" : "literal",
          "type" : "composite",
          "values" : [ {
            "coerced-to" : {
              "contained" : {
                "go-type" : 9,
                "kind" : "type",
                "type" : "identifier",
                "value" : {
                  "go-type" : 9,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "byte"
                }
              },
              "go-type" : 8,
              "kind" : "type",
              "type" : "pointer"
            },
            "go-type" : 8,
            "kind" : "expression",
            "target" : {
              "go-type" : 2,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "res",
                "variable" : 12
              }
            },
            "type" : "cast"
          } ]
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 212,
      "code" : "return name{(*byte)(res)}",
      "entry" : false,
      "use-vars" : [ 12 ]
    } ],
    "code" : "func resolveNameOff(ptrInModule unsafe.Pointer, off nameOff) name {\n\tif off == 0 {\n\t\treturn name{}\n\t}\n\tbase := uintptr(ptrInModule)\n\tfor md := &firstmoduledata; md != nil; md = md.next {\n\t\tif base >= md.types && base < md.etypes {\n\t\t\tres := md.types + uintptr(off)\n\t\t\tif res > md.etypes {\n\t\t\t\tprintln(\"runtime: nameOff\", hex(off), \"out of range\", hex(md.types), \"-\", hex(md.etypes))\n\t\t\t\tthrow(\"runtime: name offset out of range\")\n\t\t\t}\n\t\t\treturn name{(*byte)(unsafe.Pointer(res))}\n\t\t}\n\t}\n\n\treflectOffsLock()\n\tres, found := reflectOffs.m[int32(off)]\n\treflectOffsUnlock()\n\tif !found {\n\t\tprintln(\"runtime: nameOff\", hex(off), \"base\", hex(base), \"not in ranges:\")\n\t\tfor next := &firstmoduledata; next != nil; next = next.next {\n\t\t\tprintln(\"\\ttypes\", hex(next.types), \"etypes\", hex(next.etypes))\n\t\t}\n\t\tthrow(\"runtime: name offset base pointer out of range\")\n\t}\n\treturn name{(*byte)(res)}\n}",
    "defines" : [ 0 ],
    "functions" : [ {
      "name" : "resolveNameOff",
      "package" : 0,
      "type" : 0,
      "exported" : false
    }, {
      "name" : "throw",
      "package" : 0,
      "type" : 70,
      "exported" : false
    }, {
      "name" : "reflectOffsLock",
      "package" : 0,
      "type" : 72,
      "exported" : false
    }, {
      "name" : "reflectOffsUnlock",
      "package" : 0,
      "type" : 72,
      "exported" : false
    } ],
    "line-end" : 213,
    "line-start" : 185,
    "names" : [ "resolveNameOff" ],
    "package" : 0,
    "packages" : [ {
      "name" : "runtime",
      "path" : "runtime"
    }, {
      "name" : "unsafe",
      "path" : "unsafe"
    } ],
    "params" : [ 0, 1 ],
    "receivers" : [ ],
    "results" : [ 2 ],
    "type" : "function",
    "types" : [ {
      "name" : "func(ptrInModule unsafe.Pointer, off runtime.nameOff) runtime.name",
      "params" : 1,
      "recv" : -1,
      "results" : 5,
      "type" : "Signature",
      "underlying" : 0,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "ptrInModule",
        "type" : 2
      }, {
        "name" : "off",
        "type" : 3
      } ],
      "name" : "(ptrInModule unsafe.Pointer, off runtime.nameOff)",
      "type" : "Tuple",
      "underlying" : 1
    }, {
      "local-name" : "Pointer",
      "name" : "unsafe.Pointer",
      "package" : 1,
      "type" : "Basic",
      "underlying" : 2
    }, {
      "local-name" : "nameOff",
      "name" : "runtime.nameOff",
      "package" : 0,
      "type" : "Named",
      "underlying" : 4
    }, {
      "name" : "int32",
      "type" : "Basic",
      "underlying" : 4
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 6
      } ],
      "name" : "(runtime.name)",
      "type" : "Tuple",
      "underlying" : 5
    }, {
      "local-name" : "name",
      "name" : "runtime.name",
      "package" : 0,
      "type" : "Named",
      "underlying" : 7
    }, {
      "fields" : [ {
        "name" : "bytes",
        "type" : 8
      } ],
      "name" : "struct{bytes *byte}",
      "type" : "Struct",
      "underlying" : 7
    }, {
      "elem" : 9,
      "name" : "*byte",
      "type" : "Pointer",
      "underlying" : 8
    }, {
      "name" : "byte",
      "type" : "Basic",
      "underlying" : 9
    }, {
      "fields" : [ {
        "name" : "lock",
        "type" : 11
      }, {
        "name" : "next",
        "type" : 4
      }, {
        "name" : "m",
        "type" : 14
      }, {
        "name" : "minv",
        "type" : 15
      } ],
      "name" : "struct{lock runtime.mutex; next int32; m map[int32]unsafe.Pointer; minv map[unsafe.Pointer]int32}",
      "type" : "Struct",
      "underlying" : 10
    }, {
      "local-name" : "mutex",
      "name" : "runtime.mutex",
      "package" : 0,
      "type" : "Named",
      "underlying" : 12
    }, {
      "fields" : [ {
        "name" : "key",
        "type" : 13
      } ],
      "name" : "struct{key uintptr}",
      "type" : "Struct",
      "underlying" : 12
    }, {
      "name" : "uintptr",
      "type" : "Basic",
      "underlying" : 13
    }, {
      "elem" : 2,
      "key" : 4,
      "name" : "map[int32]unsafe.Pointer",
      "type" : "Map",
      "underlying" : 14
    }, {
      "elem" : 4,
      "key" : 2,
      "name" : "map[unsafe.Pointer]int32",
      "type" : "Map",
      "underlying" : 15
    }, {
      "local-name" : "moduledata",
      "name" : "runtime.moduledata",
      "package" : 0,
      "type" : "Named",
      "underlying" : 17
    }, {
      "fields" : [ {
        "name" : "pclntable",
        "type" : 18
      }, {
        "name" : "ftab",
        "type" : 19
      }, {
        "name" : "filetab",
        "type" : 22
      }, {
        "name" : "findfunctab",
        "type" : 13
      }, {
        "name" : "minpc",
        "type" : 13
      }, {
        "name" : "maxpc",
        "type" : 13
      }, {
        "name" : "text",
        "type" : 13
      }, {
        "name" : "etext",
        "type" : 13
      }, {
        "name" : "noptrdata",
        "type" : 13
      }, {
        "name" : "enoptrdata",
        "type" : 13
      }, {
        "name" : "data",
        "type" : 13
      }, {
        "name" : "edata",
        "type" : 13
      }, {
        "name" : "bss",
        "type" : 13
      }, {
        "name" : "ebss",
        "type" : 13
      }, {
        "name" : "noptrbss",
        "type" : 13
      }, {
        "name" : "enoptrbss",
        "type" : 13
      }, {
        "name" : "end",
        "type" : 13
      }, {
        "name" : "gcdata",
        "type" : 13
      }, {
        "name" : "gcbss",
        "type" : 13
      }, {
        "name" : "types",
        "type" : 13
      }, {
        "name" : "etypes",
        "type" : 13
      }, {
        "name" : "textsectmap",
        "type" : 24
      }, {
        "name" : "typelinks",
        "type" : 27
      }, {
        "name" : "itablinks",
        "type" : 28
      }, {
        "name" : "ptab",
        "type" : 50
      }, {
        "name" : "pluginpath",
        "type" : 53
      }, {
        "name" : "pkghashes",
        "type" : 54
      }, {
        "name" : "modulename",
        "type" : 53
      }, {
        "name" : "modulehashes",
        "type" : 54
      }, {
        "name" : "hasmain",
        "type" : 38
      }, {
        "name" : "gcdatamask",
        "type" : 58
      }, {
        "name" : "gcbssmask",
        "type" : 58
      }, {
        "name" : "typemap",
        "type" : 61
      }, {
        "name" : "bad",
        "type" : 42
      }, {
        "name" : "next",
        "type" : 62
      } ],
      "name" : "struct{pclntable []byte; ftab []runtime.functab; filetab []uint32; findfunctab uintptr; minpc uintptr; maxpc uintptr; text uintptr; etext uintptr; noptrdata uintptr; enoptrdata uintptr; data uintptr; edata uintptr; bss uintptr; ebss uintptr; noptrbss uintptr; enoptrbss uintptr; end uintptr; gcdata uintptr; gcbss uintptr; types uintptr; etypes uintptr; textsectmap []runtime.textsect; typelinks []int32; itablinks []*runtime.itab; ptab []runtime.ptabEntry; pluginpath string; pkghashes []runtime.modulehash; modulename string; modulehashes []runtime.modulehash; hasmain uint8; gcdatamask runtime.bitvector; gcbssmask runtime.bitvector; typemap map[runtime.typeOff]*runtime._type; bad bool; next *runtime.moduledata}",
      "type" : "Struct",
      "underlying" : 17
    }, {
      "elem" : 9,
      "name" : "[]byte",
      "type" : "Slice",
      "underlying" : 18
    }, {
      "elem" : 20,
      "name" : "[]runtime.functab",
      "type" : "Slice",
      "underlying" : 19
    }, {
      "local-name" : "functab",
      "name" : "runtime.functab",
      "package" : 0,
      "type" : "Named",
      "underlying" : 21
    }, {
      "fields" : [ {
        "name" : "entry",
        "type" : 13
      }, {
        "name" : "funcoff",
        "type" : 13
      } ],
      "name" : "struct{entry uintptr; funcoff uintptr}",
      "type" : "Struct",
      "underlying" : 21
    }, {
      "elem" : 23,
      "name" : "[]uint32",
      "type" : "Slice",
      "underlying" : 22
    }, {
      "name" : "uint32",
      "type" : "Basic",
      "underlying" : 23
    }, {
      "elem" : 25,
      "name" : "[]runtime.textsect",
      "type" : "Slice",
      "underlying" : 24
    }, {
      "local-name" : "textsect",
      "name" : "runtime.textsect",
      "package" : 0,
      "type" : "Named",
      "underlying" : 26
    }, {
      "fields" : [ {
        "name" : "vaddr",
        "type" : 13
      }, {
        "name" : "length",
        "type" : 13
      }, {
        "name" : "baseaddr",
        "type" : 13
      } ],
      "name" : "struct{vaddr uintptr; length uintptr; baseaddr uintptr}",
      "type" : "Struct",
      "underlying" : 26
    }, {
      "elem" : 4,
      "name" : "[]int32",
      "type" : "Slice",
      "underlying" : 27
    }, {
      "elem" : 29,
      "name" : "[]*runtime.itab",
      "type" : "Slice",
      "underlying" : 28
    }, {
      "elem" : 30,
      "name" : "*runtime.itab",
      "type" : "Pointer",
      "underlying" : 29
    }, {
      "local-name" : "itab",
      "name" : "runtime.itab",
      "package" : 0,
      "type" : "Named",
      "underlying" : 31
    }, {
      "fields" : [ {
        "name" : "inter",
        "type" : 32
      }, {
        "name" : "_type",
        "type" : 47
      }, {
        "name" : "hash",
        "type" : 23
      }, {
        "name" : "_",
        "type" : 48
      }, {
        "name" : "fun",
        "type" : 49
      } ],
      "name" : "struct{inter *runtime.interfacetype; _type *runtime._type; hash uint32; _ [4]byte; fun [1]uintptr}",
      "type" : "Struct",
      "underlying" : 31
    }, {
      "elem" : 33,
      "name" : "*runtime.interfacetype",
      "type" : "Pointer",
      "underlying" : 32
    }, {
      "local-name" : "interfacetype",
      "name" : "runtime.interfacetype",
      "package" : 0,
      "type" : "Named",
      "underlying" : 34
    }, {
      "fields" : [ {
        "name" : "typ",
        "type" : 35
      }, {
        "name" : "pkgpath",
        "type" : 6
      }, {
        "name" : "mhdr",
        "type" : 44
      } ],
      "name" : "struct{typ runtime._type; pkgpath runtime.name; mhdr []runtime.imethod}",
      "type" : "Struct",
      "underlying" : 34
    }, {
      "local-name" : "_type",
      "name" : "runtime._type",
      "package" : 0,
      "type" : "Named",
      "underlying" : 36
    }, {
      "fields" : [ {
        "name" : "size",
        "type" : 13
      }, {
        "name" : "ptrdata",
        "type" : 13
      }, {
        "name" : "hash",
        "type" : 23
      }, {
        "name" : "tflag",
        "type" : 37
      }, {
        "name" : "align",
        "type" : 38
      }, {
        "name" : "fieldAlign",
        "type" : 38
      }, {
        "name" : "kind",
        "type" : 38
      }, {
        "name" : "equal",
        "type" : 39
      }, {
        "name" : "gcdata",
        "type" : 8
      }, {
        "name" : "str",
        "type" : 3
      }, {
        "name" : "ptrToThis",
        "type" : 43
      } ],
      "name" : "struct{size uintptr; ptrdata uintptr; hash uint32; tflag runtime.tflag; align uint8; fieldAlign uint8; kind uint8; equal func(unsafe.Pointer, unsafe.Pointer) bool; gcdata *byte; str runtime.nameOff; ptrToThis runtime.typeOff}",
      "type" : "Struct",
      "underlying" : 36
    }, {
      "local-name" : "tflag",
      "name" : "runtime.tflag",
      "package" : 0,
      "type" : "Named",
      "underlying" : 38
    }, {
      "name" : "uint8",
      "type" : "Basic",
      "underlying" : 38
    }, {
      "name" : "func(unsafe.Pointer, unsafe.Pointer) bool",
      "params" : 40,
      "recv" : -1,
      "results" : 41,
      "type" : "Signature",
      "underlying" : 39,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 2
      }, {
        "name" : "",
        "type" : 2
      } ],
      "name" : "(unsafe.Pointer, unsafe.Pointer)",
      "type" : "Tuple",
      "underlying" : 40
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 42
      } ],
      "name" : "(bool)",
      "type" : "Tuple",
      "underlying" : 41
    }, {
      "name" : "bool",
      "type" : "Basic",
      "underlying" : 42
    }, {
      "local-name" : "typeOff",
      "name" : "runtime.typeOff",
      "package" : 0,
      "type" : "Named",
      "underlying" : 4
    }, {
      "elem" : 45,
      "name" : "[]runtime.imethod",
      "type" : "Slice",
      "underlying" : 44
    }, {
      "local-name" : "imethod",
      "name" : "runtime.imethod",
      "package" : 0,
      "type" : "Named",
      "underlying" : 46
    }, {
      "fields" : [ {
        "name" : "name",
        "type" : 3
      }, {
        "name" : "ityp",
        "type" : 43
      } ],
      "name" : "struct{name runtime.nameOff; ityp runtime.typeOff}",
      "type" : "Struct",
      "underlying" : 46
    }, {
      "elem" : 35,
      "name" : "*runtime._type",
      "type" : "Pointer",
      "underlying" : 47
    }, {
      "elem" : 9,
      "name" : "[4]byte",
      "type" : "Array",
      "underlying" : 48
    }, {
      "elem" : 13,
      "name" : "[1]uintptr",
      "type" : "Array",
      "underlying" : 49
    }, {
      "elem" : 51,
      "name" : "[]runtime.ptabEntry",
      "type" : "Slice",
      "underlying" : 50
    }, {
      "local-name" : "ptabEntry",
      "name" : "runtime.ptabEntry",
      "package" : 0,
      "type" : "Named",
      "underlying" : 52
    }, {
      "fields" : [ {
        "name" : "name",
        "type" : 3
      }, {
        "name" : "typ",
        "type" : 43
      } ],
      "name" : "struct{name runtime.nameOff; typ runtime.typeOff}",
      "type" : "Struct",
      "underlying" : 52
    }, {
      "name" : "string",
      "type" : "Basic",
      "underlying" : 53
    }, {
      "elem" : 55,
      "name" : "[]runtime.modulehash",
      "type" : "Slice",
      "underlying" : 54
    }, {
      "local-name" : "modulehash",
      "name" : "runtime.modulehash",
      "package" : 0,
      "type" : "Named",
      "underlying" : 56
    }, {
      "fields" : [ {
        "name" : "modulename",
        "type" : 53
      }, {
        "name" : "linktimehash",
        "type" : 53
      }, {
        "name" : "runtimehash",
        "type" : 57
      } ],
      "name" : "struct{modulename string; linktimehash string; runtimehash *string}",
      "type" : "Struct",
      "underlying" : 56
    }, {
      "elem" : 53,
      "name" : "*string",
      "type" : "Pointer",
      "underlying" : 57
    }, {
      "local-name" : "bitvector",
      "name" : "runtime.bitvector",
      "package" : 0,
      "type" : "Named",
      "underlying" : 59
    }, {
      "fields" : [ {
        "name" : "n",
        "type" : 4
      }, {
        "name" : "bytedata",
        "type" : 60
      } ],
      "name" : "struct{n int32; bytedata *uint8}",
      "type" : "Struct",
      "underlying" : 59
    }, {
      "elem" : 38,
      "name" : "*uint8",
      "type" : "Pointer",
      "underlying" : 60
    }, {
      "elem" : 47,
      "key" : 43,
      "name" : "map[runtime.typeOff]*runtime._type",
      "type" : "Map",
      "underlying" : 61
    }, {
      "elem" : 16,
      "name" : "*runtime.moduledata",
      "type" : "Pointer",
      "underlying" : 62
    }, {
      "name" : "untyped bool",
      "type" : "Basic",
      "underlying" : 63
    }, {
      "name" : "untyped nil",
      "type" : "Basic",
      "underlying" : 64
    }, {
      "fields" : [ ],
      "name" : "()",
      "type" : "Tuple",
      "underlying" : 65
    }, {
      "name" : "func(string, runtime.hex, string, runtime.hex, string, runtime.hex)",
      "params" : 67,
      "recv" : -1,
      "results" : 65,
      "type" : "Signature",
      "underlying" : 66,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 53
      }, {
        "name" : "",
        "type" : 68
      }, {
        "name" : "",
        "type" : 53
      }, {
        "name" : "",
        "type" : 68
      }, {
        "name" : "",
        "type" : 53
      }, {
        "name" : "",
        "type" : 68
      } ],
      "name" : "(string, runtime.hex, string, runtime.hex, string, runtime.hex)",
      "type" : "Tuple",
      "underlying" : 67
    }, {
      "local-name" : "hex",
      "name" : "runtime.hex",
      "package" : 0,
      "type" : "Named",
      "underlying" : 69
    }, {
      "name" : "uint64",
      "type" : "Basic",
      "underlying" : 69
    }, {
      "name" : "func(s string)",
      "params" : 71,
      "recv" : -1,
      "results" : 65,
      "type" : "Signature",
      "underlying" : 70,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "s",
        "type" : 53
      } ],
      "name" : "(s string)",
      "type" : "Tuple",
      "underlying" : 71
    }, {
      "name" : "func()",
      "params" : 65,
      "recv" : -1,
      "results" : 65,
      "type" : "Signature",
      "underlying" : 72,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 2
      }, {
        "name" : "",
        "type" : 42
      } ],
      "name" : "(unsafe.Pointer, bool)",
      "type" : "Tuple",
      "underlying" : 73
    }, {
      "name" : "func(string, runtime.hex, string, runtime.hex, string)",
      "params" : 75,
      "recv" : -1,
      "results" : 65,
      "type" : "Signature",
      "underlying" : 74,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 53
      }, {
        "name" : "",
        "type" : 68
      }, {
        "name" : "",
        "type" : 53
      }, {
        "name" : "",
        "type" : 68
      }, {
        "name" : "",
        "type" : 53
      } ],
      "name" : "(string, runtime.hex, string, runtime.hex, string)",
      "type" : "Tuple",
      "underlying" : 75
    }, {
      "name" : "func(string, runtime.hex, string, runtime.hex)",
      "params" : 77,
      "recv" : -1,
      "results" : 65,
      "type" : "Signature",
      "underlying" : 76,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 53
      }, {
        "name" : "",
        "type" : 68
      }, {
        "name" : "",
        "type" : 53
      }, {
        "name" : "",
        "type" : 68
      } ],
      "name" : "(string, runtime.hex, string, runtime.hex)",
      "type" : "Tuple",
      "underlying" : 77
    } ],
    "variables" : [ {
      "name" : "ptrInModule",
      "package" : 0,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "off",
      "package" : 0,
      "type" : 3,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "[res0]",
      "package" : 0,
      "type" : 6,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "reflectOffs",
      "package" : 0,
      "type" : 10,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "firstmoduledata",
      "package" : 0,
      "type" : 16,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "base",
      "package" : 0,
      "type" : 13,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "md",
      "package" : 0,
      "type" : 62,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "next",
      "package" : 0,
      "type" : 62,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "types",
      "package" : 0,
      "type" : 13,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "etypes",
      "package" : 0,
      "type" : 13,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "res",
      "package" : 0,
      "type" : 13,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "m",
      "package" : 0,
      "type" : 14,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "res",
      "package" : 0,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "found",
      "package" : 0,
      "type" : 42,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "next",
      "package" : 0,
      "type" : 62,
      "exported" : false,
      "embedded" : false,
      "field" : false
    } ]
  },
  "go-version" : "1.14.3"
}