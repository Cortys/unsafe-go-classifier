{
  "usage" : {
    "file" : "print.go",
    "label1" : "pointer-arithmetic",
    "label2" : "types",
    "line" : "297",
    "module" : "std",
    "pkg" : "runtime",
    "project" : "kubernetes/kubernetes",
    "snippet" : "val := *(*uintptr)(unsafe.Pointer(p + i))",
    "version" : "std"
  },
  "cfg" : {
    "blocks" : [ {
      "update-vars" : [ ],
      "successors" : [ 2 ],
      "in-vars" : [ 3, 4, 5, 2, 1, 0 ],
      "exit" : false,
      "out-vars" : [ 0, 3, 4, 5, 2, 1 ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[entry]",
      "entry" : true,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ ],
      "in-vars" : [ ],
      "exit" : true,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[exit]",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 3 ],
      "in-vars" : [ 3, 4, 5, 2, 1, 0 ],
      "exit" : false,
      "out-vars" : [ 1, 0, 6, 2 ],
      "decl-vars" : [ 6 ],
      "line-start" : 265,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "p1"
          }
        } ],
        "right" : [ {
          "body" : [ {
            "kind" : "statement",
            "target" : {
              "kind" : "decl",
              "specs" : [ {
                "comments" : [ ],
                "declared-type" : {
                  "element" : {
                    "go-type" : 6,
                    "kind" : "type",
                    "type" : "identifier",
                    "value" : {
                      "go-type" : 6,
                      "ident-kind" : "TypeName",
                      "kind" : "ident",
                      "value" : "byte"
                    }
                  },
                  "go-type" : 8,
                  "kind" : "type",
                  "length" : {
                    "go-type" : 12,
                    "kind" : "constant",
                    "value" : {
                      "type" : "INT",
                      "value" : "16"
                    }
                  },
                  "type" : "array"
                },
                "kind" : "spec",
                "names" : [ {
                  "ident-kind" : "NoKind",
                  "kind" : "ident",
                  "value" : "buf"
                } ],
                "type" : "var",
                "values" : [ ]
              } ],
              "type" : "var"
            },
            "type" : "declaration"
          }, {
            "body" : [ {
              "body" : [ {
                "kind" : "statement",
                "left" : [ {
                  "go-type" : 6,
                  "index" : {
                    "go-type" : 9,
                    "kind" : "expression",
                    "type" : "identifier",
                    "value" : {
                      "ident-kind" : "Var",
                      "kind" : "ident",
                      "value" : "i",
                      "variable" : 4
                    }
                  },
                  "kind" : "expression",
                  "target" : {
                    "go-type" : 8,
                    "kind" : "expression",
                    "type" : "identifier",
                    "value" : {
                      "ident-kind" : "Var",
                      "kind" : "ident",
                      "value" : "buf",
                      "variable" : 3
                    }
                  },
                  "type" : "index"
                } ],
                "right" : [ {
                  "go-type" : 6,
                  "kind" : "expression",
                  "left" : {
                    "coerced-to" : {
                      "go-type" : 6,
                      "kind" : "type",
                      "type" : "identifier",
                      "value" : {
                        "go-type" : 6,
                        "ident-kind" : "TypeName",
                        "kind" : "ident",
                        "value" : "byte"
                      }
                    },
                    "go-type" : 6,
                    "kind" : "expression",
                    "target" : {
                      "go-type" : 2,
                      "kind" : "expression",
                      "left" : {
                        "go-type" : 2,
                        "kind" : "expression",
                        "type" : "identifier",
                        "value" : {
                          "ident-kind" : "Var",
                          "kind" : "ident",
                          "value" : "x",
                          "variable" : 5
                        }
                      },
                      "operator" : "&",
                      "right" : {
                        "go-type" : 2,
                        "kind" : "constant",
                        "value" : {
                          "type" : "INT",
                          "value" : "15"
                        }
                      },
                      "type" : "binary"
                    },
                    "type" : "cast"
                  },
                  "operator" : "+",
                  "right" : {
                    "go-type" : 6,
                    "kind" : "constant",
                    "value" : {
                      "type" : "INT",
                      "value" : "48"
                    }
                  },
                  "type" : "binary"
                } ],
                "type" : "assign"
              } ],
              "condition" : {
                "go-type" : 13,
                "kind" : "expression",
                "left" : {
                  "go-type" : 2,
                  "kind" : "expression",
                  "left" : {
                    "go-type" : 2,
                    "kind" : "expression",
                    "type" : "identifier",
                    "value" : {
                      "ident-kind" : "Var",
                      "kind" : "ident",
                      "value" : "x",
                      "variable" : 5
                    }
                  },
                  "operator" : "&",
                  "right" : {
                    "go-type" : 2,
                    "kind" : "constant",
                    "value" : {
                      "type" : "INT",
                      "value" : "15"
                    }
                  },
                  "type" : "binary"
                },
                "operator" : "<",
                "right" : {
                  "go-type" : 2,
                  "kind" : "constant",
                  "value" : {
                    "type" : "INT",
                    "value" : "10"
                  }
                },
                "type" : "binary"
              },
              "else" : {
                "body" : [ {
                  "kind" : "statement",
                  "left" : [ {
                    "go-type" : 6,
                    "index" : {
                      "go-type" : 9,
                      "kind" : "expression",
                      "type" : "identifier",
                      "value" : {
                        "ident-kind" : "Var",
                        "kind" : "ident",
                        "value" : "i",
                        "variable" : 4
                      }
                    },
                    "kind" : "expression",
                    "target" : {
                      "go-type" : 8,
                      "kind" : "expression",
                      "type" : "identifier",
                      "value" : {
                        "ident-kind" : "Var",
                        "kind" : "ident",
                        "value" : "buf",
                        "variable" : 3
                      }
                    },
                    "type" : "index"
                  } ],
                  "right" : [ {
                    "go-type" : 6,
                    "kind" : "expression",
                    "left" : {
                      "go-type" : 6,
                      "kind" : "expression",
                      "left" : {
                        "coerced-to" : {
                          "go-type" : 6,
                          "kind" : "type",
                          "type" : "identifier",
                          "value" : {
                            "go-type" : 6,
                            "ident-kind" : "TypeName",
                            "kind" : "ident",
                            "value" : "byte"
                          }
                        },
                        "go-type" : 6,
                        "kind" : "expression",
                        "target" : {
                          "go-type" : 2,
                          "kind" : "expression",
                          "left" : {
                            "go-type" : 2,
                            "kind" : "expression",
                            "type" : "identifier",
                            "value" : {
                              "ident-kind" : "Var",
                              "kind" : "ident",
                              "value" : "x",
                              "variable" : 5
                            }
                          },
                          "operator" : "&",
                          "right" : {
                            "go-type" : 2,
                            "kind" : "constant",
                            "value" : {
                              "type" : "INT",
                              "value" : "15"
                            }
                          },
                          "type" : "binary"
                        },
                        "type" : "cast"
                      },
                      "operator" : "-",
                      "right" : {
                        "go-type" : 6,
                        "kind" : "constant",
                        "value" : {
                          "type" : "INT",
                          "value" : "10"
                        }
                      },
                      "type" : "binary"
                    },
                    "operator" : "+",
                    "right" : {
                      "go-type" : 6,
                      "kind" : "constant",
                      "value" : {
                        "type" : "INT",
                        "value" : "97"
                      }
                    },
                    "type" : "binary"
                  } ],
                  "type" : "assign"
                } ],
                "kind" : "statement",
                "type" : "block"
              },
              "init" : null,
              "kind" : "statement",
              "type" : "if"
            }, {
              "kind" : "statement",
              "left" : [ {
                "go-type" : 2,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "x",
                  "variable" : 5
                }
              } ],
              "operator" : ">>",
              "right" : [ {
                "go-type" : 12,
                "kind" : "constant",
                "value" : {
                  "type" : "INT",
                  "value" : "4"
                }
              } ],
              "type" : "assign-operator"
            } ],
            "condition" : {
              "go-type" : 13,
              "kind" : "expression",
              "left" : {
                "go-type" : 9,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "i",
                  "variable" : 4
                }
              },
              "operator" : ">=",
              "right" : {
                "go-type" : 9,
                "kind" : "constant",
                "value" : {
                  "type" : "INT",
                  "value" : "0"
                }
              },
              "type" : "binary"
            },
            "init" : {
              "kind" : "statement",
              "left" : [ {
                "go-type" : -1,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "NoKind",
                  "kind" : "ident",
                  "value" : "i"
                }
              } ],
              "right" : [ {
                "go-type" : 9,
                "kind" : "constant",
                "value" : {
                  "type" : "INT",
                  "value" : "15"
                }
              } ],
              "type" : "define"
            },
            "kind" : "statement",
            "post" : {
              "kind" : "statement",
              "operation" : "--",
              "target" : {
                "go-type" : 9,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "i",
                  "variable" : 4
                }
              },
              "type" : "crement"
            },
            "type" : "for"
          }, {
            "kind" : "statement",
            "type" : "expression",
            "value" : {
              "arguments" : [ {
                "go-type" : 16,
                "type" : "slice",
                "three" : false,
                "high" : null,
                "max" : null,
                "kind" : "expression",
                "low" : null,
                "target" : {
                  "go-type" : 8,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "buf",
                    "variable" : 3
                  }
                }
              } ],
              "ellipsis" : false,
              "function" : {
                "go-type" : 14,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "function" : 1,
                  "ident-kind" : "Func",
                  "kind" : "ident",
                  "value" : "gwrite"
                }
              },
              "go-type" : 7,
              "kind" : "expression",
              "type" : "call"
            }
          } ],
          "go-type" : 10,
          "kind" : "literal",
          "params" : [ {
            "declared-type" : {
              "go-type" : 2,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 2,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "uintptr"
              }
            },
            "kind" : "field",
            "names" : [ {
              "ident-kind" : "NoKind",
              "kind" : "ident",
              "value" : "x"
            } ],
            "tag" : null
          } ],
          "results" : null,
          "type" : "function",
          "variadic" : null
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 276,
      "code" : "p1 := func(x uintptr) {\n\tvar buf [2 * sys.PtrSize]byte\n\tfor i := len(buf) - 1; i >= 0; i-- {\n\t\tif x&0xF < 10 {\n\t\t\tbuf[i] = byte(x&0xF) + '0'\n\t\t} else {\n\t\t\tbuf[i] = byte(x&0xF) - 10 + 'a'\n\t\t}\n\t\tx >>= 4\n\t}\n\tgwrite(buf[:])\n}",
      "entry" : false,
      "use-vars" : [ 4, 5, 3 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 4 ],
      "in-vars" : [ 2, 1, 0, 6 ],
      "exit" : false,
      "out-vars" : [ 0, 6, 2, 1 ],
      "decl-vars" : [ ],
      "line-start" : 278,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 17,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 2,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "printlock"
            }
          },
          "go-type" : 7,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 278,
      "code" : "printlock()",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 5 ],
      "in-vars" : [ 2, 1, 0, 6 ],
      "exit" : false,
      "out-vars" : [ 0, 6, 2, 7, 1 ],
      "decl-vars" : [ 7 ],
      "line-start" : 279,
      "ast" : {
        "kind" : "statement",
        "target" : {
          "kind" : "decl",
          "specs" : [ {
            "comments" : [ ],
            "declared-type" : {
              "element" : {
                "go-type" : 6,
                "kind" : "type",
                "type" : "identifier",
                "value" : {
                  "go-type" : 6,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "byte"
                }
              },
              "go-type" : 18,
              "kind" : "type",
              "length" : {
                "go-type" : 12,
                "kind" : "constant",
                "value" : {
                  "type" : "INT",
                  "value" : "1"
                }
              },
              "type" : "array"
            },
            "kind" : "spec",
            "names" : [ {
              "ident-kind" : "NoKind",
              "kind" : "ident",
              "value" : "markbuf"
            } ],
            "type" : "var",
            "values" : [ ]
          } ],
          "type" : "var"
        },
        "type" : "declaration"
      },
      "assign-vars" : [ ],
      "line-end" : 279,
      "code" : "var markbuf [1]byte",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ 7 ],
      "successors" : [ 7 ],
      "in-vars" : [ 7, 1, 0, 6, 2 ],
      "exit" : false,
      "out-vars" : [ 1, 0, 6, 2, 7 ],
      "decl-vars" : [ ],
      "line-start" : 280,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 6,
          "index" : {
            "go-type" : 9,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "kind" : "expression",
          "target" : {
            "go-type" : 18,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "markbuf",
              "variable" : 7
            }
          },
          "type" : "index"
        } ],
        "right" : [ {
          "go-type" : 6,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "32"
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 280,
      "code" : "markbuf[0] = ' '",
      "entry" : false,
      "use-vars" : [ 7 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 9, 25 ],
      "in-vars" : [ 6, 2, 7, 1, 0, 8 ],
      "exit" : false,
      "out-vars" : [ 1, 0, 8, 6, 2, 7 ],
      "decl-vars" : [ ],
      "line-start" : 281,
      "ast" : {
        "condition" : {
          "go-type" : 13,
          "kind" : "expression",
          "left" : {
            "go-type" : 2,
            "kind" : "expression",
            "left" : {
              "go-type" : 2,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "p",
                "variable" : 0
              }
            },
            "operator" : "+",
            "right" : {
              "go-type" : 2,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "i",
                "variable" : 8
              }
            },
            "type" : "binary"
          },
          "operator" : "<",
          "right" : {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "end",
              "variable" : 1
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "for"
      },
      "assign-vars" : [ ],
      "line-end" : 306,
      "code" : "for i := uintptr(0); p+i < end; i += sys.PtrSize {\n\tif i%16 == 0 {\n\t\tif i != 0 {\n\t\t\tprintln()\n\t\t}\n\t\tp1(p + i)\n\t\tprint(\": \")\n\t}\n\n\tif mark != nil {\n\t\tmarkbuf[0] = mark(p + i)\n\t\tif markbuf[0] == 0 {\n\t\t\tmarkbuf[0] = ' '\n\t\t}\n\t}\n\tgwrite(markbuf[:])\n\tval := *(*uintptr)(unsafe.Pointer(p + i))\n\tp1(val)\n\tprint(\" \")\n\n\tfn := findfunc(val)\n\tif fn.valid() {\n\t\tprint(\"<\", funcname(fn), \"+\", val-fn.entry, \"> \")\n\t}\n}",
      "entry" : false,
      "use-vars" : [ 1, 0, 8 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 6 ],
      "in-vars" : [ 7, 1, 0, 6, 2 ],
      "exit" : false,
      "out-vars" : [ 0, 8, 6, 2, 7, 1 ],
      "decl-vars" : [ 8 ],
      "line-start" : 281,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "i"
          }
        } ],
        "right" : [ {
          "go-type" : 2,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "0"
          }
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 281,
      "code" : "i := uintptr(0)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ 8 ],
      "successors" : [ 6 ],
      "in-vars" : [ 7, 1, 0, 8, 6, 2 ],
      "exit" : false,
      "out-vars" : [ 7, 1, 0, 8, 6, 2 ],
      "decl-vars" : [ ],
      "line-start" : 281,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 2,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "i",
            "variable" : 8
          }
        } ],
        "operator" : "+",
        "right" : [ {
          "go-type" : 2,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "8"
          }
        } ],
        "type" : "assign-operator"
      },
      "assign-vars" : [ 8 ],
      "line-end" : 281,
      "code" : "i += sys.PtrSize",
      "entry" : false,
      "use-vars" : [ 8 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 10, 14 ],
      "in-vars" : [ 6, 2, 7, 1, 0, 8 ],
      "exit" : false,
      "out-vars" : [ 0, 8, 6, 2, 7, 1 ],
      "decl-vars" : [ ],
      "line-start" : 282,
      "ast" : {
        "condition" : {
          "go-type" : 13,
          "kind" : "expression",
          "left" : {
            "go-type" : 2,
            "kind" : "expression",
            "left" : {
              "go-type" : 2,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "i",
                "variable" : 8
              }
            },
            "operator" : "%",
            "right" : {
              "go-type" : 2,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "16"
              }
            },
            "type" : "binary"
          },
          "operator" : "==",
          "right" : {
            "go-type" : 2,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 288,
      "code" : "if i%16 == 0 {\n\tif i != 0 {\n\t\tprintln()\n\t}\n\tp1(p + i)\n\tprint(\": \")\n}",
      "entry" : false,
      "use-vars" : [ 8 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 11, 12 ],
      "in-vars" : [ 6, 2, 7, 1, 0, 8 ],
      "exit" : false,
      "out-vars" : [ 8, 6, 2, 7, 1, 0 ],
      "decl-vars" : [ ],
      "line-start" : 283,
      "ast" : {
        "condition" : {
          "go-type" : 13,
          "kind" : "expression",
          "left" : {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "i",
              "variable" : 8
            }
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 2,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 285,
      "code" : "if i != 0 {\n\tprintln()\n}",
      "entry" : false,
      "use-vars" : [ 8 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 12 ],
      "in-vars" : [ 8, 6, 2, 7, 1, 0 ],
      "exit" : false,
      "out-vars" : [ 7, 1, 0, 8, 6, 2 ],
      "decl-vars" : [ ],
      "line-start" : 284,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 17,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Builtin",
              "kind" : "ident",
              "value" : "println"
            }
          },
          "go-type" : 7,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 284,
      "code" : "println()",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 13 ],
      "in-vars" : [ 2, 7, 1, 0, 8, 6 ],
      "exit" : false,
      "out-vars" : [ 1, 0, 8, 6, 2, 7 ],
      "decl-vars" : [ ],
      "line-start" : 286,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 2,
            "kind" : "expression",
            "left" : {
              "go-type" : 2,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "p",
                "variable" : 0
              }
            },
            "operator" : "+",
            "right" : {
              "go-type" : 2,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "i",
                "variable" : 8
              }
            },
            "type" : "binary"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 10,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "p1",
              "variable" : 6
            }
          },
          "go-type" : 7,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 286,
      "code" : "p1(p + i)",
      "entry" : false,
      "use-vars" : [ 6, 0, 8 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 14 ],
      "in-vars" : [ 6, 2, 7, 1, 0, 8 ],
      "exit" : false,
      "out-vars" : [ 8, 6, 2, 7, 1, 0 ],
      "decl-vars" : [ ],
      "line-start" : 287,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 21,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : ": "
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 19,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Builtin",
              "kind" : "ident",
              "value" : "print"
            }
          },
          "go-type" : 7,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 287,
      "code" : "print(\": \")",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 15, 18 ],
      "in-vars" : [ 1, 0, 8, 6, 2, 7 ],
      "exit" : false,
      "out-vars" : [ 2, 7, 1, 0, 8, 6 ],
      "decl-vars" : [ ],
      "line-start" : 290,
      "ast" : {
        "condition" : {
          "go-type" : 13,
          "kind" : "expression",
          "left" : {
            "go-type" : 3,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "mark",
              "variable" : 2
            }
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 22,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Nil",
              "kind" : "ident",
              "value" : "nil"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 295,
      "code" : "if mark != nil {\n\tmarkbuf[0] = mark(p + i)\n\tif markbuf[0] == 0 {\n\t\tmarkbuf[0] = ' '\n\t}\n}",
      "entry" : false,
      "use-vars" : [ 2 ]
    }, {
      "update-vars" : [ 7 ],
      "successors" : [ 16 ],
      "in-vars" : [ 7, 1, 0, 8, 6, 2 ],
      "exit" : false,
      "out-vars" : [ 8, 6, 2, 7, 1, 0 ],
      "decl-vars" : [ ],
      "line-start" : 291,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 6,
          "index" : {
            "go-type" : 9,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "kind" : "expression",
          "target" : {
            "go-type" : 18,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "markbuf",
              "variable" : 7
            }
          },
          "type" : "index"
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 2,
            "kind" : "expression",
            "left" : {
              "go-type" : 2,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "p",
                "variable" : 0
              }
            },
            "operator" : "+",
            "right" : {
              "go-type" : 2,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "i",
                "variable" : 8
              }
            },
            "type" : "binary"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 3,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "mark",
              "variable" : 2
            }
          },
          "go-type" : 6,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 291,
      "code" : "markbuf[0] = mark(p + i)",
      "entry" : false,
      "use-vars" : [ 0, 8, 7, 2 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 17, 18 ],
      "in-vars" : [ 7, 1, 0, 8, 6, 2 ],
      "exit" : false,
      "out-vars" : [ 7, 1, 0, 8, 6, 2 ],
      "decl-vars" : [ ],
      "line-start" : 292,
      "ast" : {
        "condition" : {
          "go-type" : 13,
          "kind" : "expression",
          "left" : {
            "go-type" : 6,
            "index" : {
              "go-type" : 9,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "0"
              }
            },
            "kind" : "expression",
            "target" : {
              "go-type" : 18,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "markbuf",
                "variable" : 7
              }
            },
            "type" : "index"
          },
          "operator" : "==",
          "right" : {
            "go-type" : 6,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 294,
      "code" : "if markbuf[0] == 0 {\n\tmarkbuf[0] = ' '\n}",
      "entry" : false,
      "use-vars" : [ 7 ]
    }, {
      "update-vars" : [ 7 ],
      "successors" : [ 18 ],
      "in-vars" : [ 1, 0, 8, 6, 2, 7 ],
      "exit" : false,
      "out-vars" : [ 2, 7, 1, 0, 8, 6 ],
      "decl-vars" : [ ],
      "line-start" : 293,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 6,
          "index" : {
            "go-type" : 9,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "kind" : "expression",
          "target" : {
            "go-type" : 18,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "markbuf",
              "variable" : 7
            }
          },
          "type" : "index"
        } ],
        "right" : [ {
          "go-type" : 6,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "32"
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 293,
      "code" : "markbuf[0] = ' '",
      "entry" : false,
      "use-vars" : [ 7 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 19 ],
      "in-vars" : [ 1, 0, 8, 6, 2, 7 ],
      "exit" : false,
      "out-vars" : [ 6, 2, 7, 1, 0, 8 ],
      "decl-vars" : [ ],
      "line-start" : 296,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 16,
            "type" : "slice",
            "three" : false,
            "high" : null,
            "max" : null,
            "kind" : "expression",
            "low" : null,
            "target" : {
              "go-type" : 18,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "markbuf",
                "variable" : 7
              }
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 14,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 1,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "gwrite"
            }
          },
          "go-type" : 7,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 296,
      "code" : "gwrite(markbuf[:])",
      "entry" : false,
      "use-vars" : [ 7 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 20 ],
      "in-vars" : [ 0, 8, 6, 2, 7, 1 ],
      "exit" : false,
      "out-vars" : [ 0, 8, 6, 2, 7, 9, 1 ],
      "decl-vars" : [ 9 ],
      "line-start" : 297,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "val"
          }
        } ],
        "right" : [ {
          "go-type" : 2,
          "kind" : "expression",
          "target" : {
            "coerced-to" : {
              "contained" : {
                "go-type" : 2,
                "kind" : "type",
                "type" : "identifier",
                "value" : {
                  "go-type" : 2,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "uintptr"
                }
              },
              "go-type" : 23,
              "kind" : "type",
              "type" : "pointer"
            },
            "go-type" : 23,
            "kind" : "expression",
            "target" : {
              "coerced-to" : {
                "go-type" : 24,
                "kind" : "type",
                "qualifier" : {
                  "ident-kind" : "PkgName",
                  "kind" : "ident",
                  "package" : 1,
                  "value" : "unsafe"
                },
                "type" : "identifier",
                "value" : {
                  "go-type" : 24,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "Pointer"
                }
              },
              "go-type" : 24,
              "kind" : "expression",
              "target" : {
                "go-type" : 2,
                "kind" : "expression",
                "left" : {
                  "go-type" : 2,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "p",
                    "variable" : 0
                  }
                },
                "operator" : "+",
                "right" : {
                  "go-type" : 2,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "i",
                    "variable" : 8
                  }
                },
                "type" : "binary"
              },
              "type" : "cast"
            },
            "type" : "cast"
          },
          "type" : "star"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 297,
      "code" : "val := *(*uintptr)(unsafe.Pointer(p + i))",
      "entry" : false,
      "use-vars" : [ 0, 8 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 21 ],
      "in-vars" : [ 9, 1, 0, 8, 6, 2, 7 ],
      "exit" : false,
      "out-vars" : [ 6, 2, 7, 9, 1, 0, 8 ],
      "decl-vars" : [ ],
      "line-start" : 298,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "val",
              "variable" : 9
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 10,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "p1",
              "variable" : 6
            }
          },
          "go-type" : 7,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 298,
      "code" : "p1(val)",
      "entry" : false,
      "use-vars" : [ 6, 9 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 22 ],
      "in-vars" : [ 1, 0, 8, 6, 2, 7, 9 ],
      "exit" : false,
      "out-vars" : [ 1, 0, 8, 6, 2, 7, 9 ],
      "decl-vars" : [ ],
      "line-start" : 299,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 21,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : " "
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 19,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Builtin",
              "kind" : "ident",
              "value" : "print"
            }
          },
          "go-type" : 7,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 299,
      "code" : "print(\" \")",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 23 ],
      "in-vars" : [ 0, 8, 6, 2, 7, 9, 1 ],
      "exit" : false,
      "out-vars" : [ 7, 10, 9, 1, 0, 8, 6, 2 ],
      "decl-vars" : [ 10 ],
      "line-start" : 302,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "fn"
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "val",
              "variable" : 9
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 83,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 3,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "findfunc"
            }
          },
          "go-type" : 25,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 302,
      "code" : "fn := findfunc(val)",
      "entry" : false,
      "use-vars" : [ 9 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 24, 8 ],
      "in-vars" : [ 7, 10, 9, 1, 0, 8, 6, 2 ],
      "exit" : false,
      "out-vars" : [ 7, 10, 9, 1, 0, 8, 6, 2 ],
      "decl-vars" : [ ],
      "line-start" : 303,
      "ast" : {
        "condition" : {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "function" : 4,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "valid"
            },
            "go-type" : 86,
            "kind" : "expression",
            "target" : {
              "go-type" : 25,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "fn",
                "variable" : 10
              }
            },
            "type" : "selector"
          },
          "go-type" : 60,
          "kind" : "expression",
          "type" : "call"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 305,
      "code" : "if fn.valid() {\n\tprint(\"<\", funcname(fn), \"+\", val-fn.entry, \"> \")\n}",
      "entry" : false,
      "use-vars" : [ 10 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 8 ],
      "in-vars" : [ 6, 2, 7, 10, 9, 1, 0, 8 ],
      "exit" : false,
      "out-vars" : [ 6, 2, 7, 1, 0, 8 ],
      "decl-vars" : [ ],
      "line-start" : 304,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 21,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "<"
            }
          }, {
            "arguments" : [ {
              "go-type" : 25,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "fn",
                "variable" : 10
              }
            } ],
            "ellipsis" : false,
            "function" : {
              "go-type" : 90,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "function" : 5,
                "ident-kind" : "Func",
                "kind" : "ident",
                "value" : "funcname"
              }
            },
            "go-type" : 21,
            "kind" : "expression",
            "type" : "call"
          }, {
            "go-type" : 21,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "+"
            }
          }, {
            "go-type" : 2,
            "kind" : "expression",
            "left" : {
              "go-type" : 2,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "val",
                "variable" : 9
              }
            },
            "operator" : "-",
            "right" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "entry",
                "variable" : 12
              },
              "go-type" : 2,
              "kind" : "expression",
              "target" : {
                "go-type" : 25,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "fn",
                  "variable" : 10
                }
              },
              "type" : "selector"
            },
            "type" : "binary"
          }, {
            "go-type" : 21,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "> "
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 88,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Builtin",
              "kind" : "ident",
              "value" : "print"
            }
          },
          "go-type" : 7,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 304,
      "code" : "print(\"<\", funcname(fn), \"+\", val-fn.entry, \"> \")",
      "entry" : false,
      "use-vars" : [ 10, 9 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 26 ],
      "in-vars" : [ ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 307,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 17,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Builtin",
              "kind" : "ident",
              "value" : "println"
            }
          },
          "go-type" : 7,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 307,
      "code" : "println()",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 308,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 17,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 6,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "printunlock"
            }
          },
          "go-type" : 7,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 308,
      "code" : "printunlock()",
      "entry" : false,
      "use-vars" : [ ]
    } ],
    "code" : "// hexdumpWords prints a word-oriented hex dump of [p, end).\n//\n// If mark != nil, it will be called with each printed word's address\n// and should return a character mark to appear just before that\n// word's value. It can return 0 to indicate no mark.\nfunc hexdumpWords(p, end uintptr, mark func(uintptr) byte) {\n\tp1 := func(x uintptr) {\n\t\tvar buf [2 * sys.PtrSize]byte\n\t\tfor i := len(buf) - 1; i >= 0; i-- {\n\t\t\tif x&0xF < 10 {\n\t\t\t\tbuf[i] = byte(x&0xF) + '0'\n\t\t\t} else {\n\t\t\t\tbuf[i] = byte(x&0xF) - 10 + 'a'\n\t\t\t}\n\t\t\tx >>= 4\n\t\t}\n\t\tgwrite(buf[:])\n\t}\n\n\tprintlock()\n\tvar markbuf [1]byte\n\tmarkbuf[0] = ' '\n\tfor i := uintptr(0); p+i < end; i += sys.PtrSize {\n\t\tif i%16 == 0 {\n\t\t\tif i != 0 {\n\t\t\t\tprintln()\n\t\t\t}\n\t\t\tp1(p + i)\n\t\t\tprint(\": \")\n\t\t}\n\n\t\tif mark != nil {\n\t\t\tmarkbuf[0] = mark(p + i)\n\t\t\tif markbuf[0] == 0 {\n\t\t\t\tmarkbuf[0] = ' '\n\t\t\t}\n\t\t}\n\t\tgwrite(markbuf[:])\n\t\tval := *(*uintptr)(unsafe.Pointer(p + i))\n\t\tp1(val)\n\t\tprint(\" \")\n\n\t\tfn := findfunc(val)\n\t\tif fn.valid() {\n\t\t\tprint(\"<\", funcname(fn), \"+\", val-fn.entry, \"> \")\n\t\t}\n\t}\n\tprintln()\n\tprintunlock()\n}",
    "defines" : [ 0 ],
    "functions" : [ {
      "name" : "hexdumpWords",
      "package" : 0,
      "type" : 0,
      "exported" : false
    }, {
      "name" : "gwrite",
      "package" : 0,
      "type" : 14,
      "exported" : false
    }, {
      "name" : "printlock",
      "package" : 0,
      "type" : 17,
      "exported" : false
    }, {
      "name" : "findfunc",
      "package" : 0,
      "type" : 83,
      "exported" : false
    }, {
      "name" : "valid",
      "package" : 0,
      "type" : 87,
      "exported" : false
    }, {
      "name" : "funcname",
      "package" : 0,
      "type" : 90,
      "exported" : false
    }, {
      "name" : "printunlock",
      "package" : 0,
      "type" : 17,
      "exported" : false
    } ],
    "line-end" : 309,
    "line-start" : 264,
    "names" : [ "hexdumpWords" ],
    "package" : 0,
    "packages" : [ {
      "name" : "runtime",
      "path" : "runtime"
    }, {
      "name" : "unsafe",
      "path" : "unsafe"
    } ],
    "params" : [ 0, 1, 2 ],
    "receivers" : [ ],
    "results" : [ ],
    "type" : "function",
    "types" : [ {
      "name" : "func(p uintptr, end uintptr, mark func(uintptr) byte)",
      "params" : 1,
      "recv" : -1,
      "results" : 7,
      "type" : "Signature",
      "underlying" : 0,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "p",
        "type" : 2
      }, {
        "name" : "end",
        "type" : 2
      }, {
        "name" : "mark",
        "type" : 3
      } ],
      "name" : "(p uintptr, end uintptr, mark func(uintptr) byte)",
      "type" : "Tuple",
      "underlying" : 1
    }, {
      "name" : "uintptr",
      "type" : "Basic",
      "underlying" : 2
    }, {
      "name" : "func(uintptr) byte",
      "params" : 4,
      "recv" : -1,
      "results" : 5,
      "type" : "Signature",
      "underlying" : 3,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 2
      } ],
      "name" : "(uintptr)",
      "type" : "Tuple",
      "underlying" : 4
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 6
      } ],
      "name" : "(byte)",
      "type" : "Tuple",
      "underlying" : 5
    }, {
      "name" : "byte",
      "type" : "Basic",
      "underlying" : 6
    }, {
      "fields" : [ ],
      "name" : "()",
      "type" : "Tuple",
      "underlying" : 7
    }, {
      "elem" : 6,
      "name" : "[16]byte",
      "type" : "Array",
      "underlying" : 8
    }, {
      "name" : "int",
      "type" : "Basic",
      "underlying" : 9
    }, {
      "name" : "func(x uintptr)",
      "params" : 11,
      "recv" : -1,
      "results" : 7,
      "type" : "Signature",
      "underlying" : 10,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "x",
        "type" : 2
      } ],
      "name" : "(x uintptr)",
      "type" : "Tuple",
      "underlying" : 11
    }, {
      "name" : "untyped int",
      "type" : "Basic",
      "underlying" : 12
    }, {
      "name" : "untyped bool",
      "type" : "Basic",
      "underlying" : 13
    }, {
      "name" : "func(b []byte)",
      "params" : 15,
      "recv" : -1,
      "results" : 7,
      "type" : "Signature",
      "underlying" : 14,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "b",
        "type" : 16
      } ],
      "name" : "(b []byte)",
      "type" : "Tuple",
      "underlying" : 15
    }, {
      "elem" : 6,
      "name" : "[]byte",
      "type" : "Slice",
      "underlying" : 16
    }, {
      "name" : "func()",
      "params" : 7,
      "recv" : -1,
      "results" : 7,
      "type" : "Signature",
      "underlying" : 17,
      "variadic" : false
    }, {
      "elem" : 6,
      "name" : "[1]byte",
      "type" : "Array",
      "underlying" : 18
    }, {
      "name" : "func(string)",
      "params" : 20,
      "recv" : -1,
      "results" : 7,
      "type" : "Signature",
      "underlying" : 19,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 21
      } ],
      "name" : "(string)",
      "type" : "Tuple",
      "underlying" : 20
    }, {
      "name" : "string",
      "type" : "Basic",
      "underlying" : 21
    }, {
      "name" : "untyped nil",
      "type" : "Basic",
      "underlying" : 22
    }, {
      "elem" : 2,
      "name" : "*uintptr",
      "type" : "Pointer",
      "underlying" : 23
    }, {
      "local-name" : "Pointer",
      "name" : "unsafe.Pointer",
      "package" : 1,
      "type" : "Basic",
      "underlying" : 24
    }, {
      "local-name" : "funcInfo",
      "name" : "runtime.funcInfo",
      "package" : 0,
      "type" : "Named",
      "underlying" : 26
    }, {
      "fields" : [ {
        "name" : "_func",
        "type" : 27
      }, {
        "name" : "datap",
        "type" : 36
      } ],
      "name" : "struct{*runtime._func; datap *runtime.moduledata}",
      "type" : "Struct",
      "underlying" : 26
    }, {
      "elem" : 28,
      "name" : "*runtime._func",
      "type" : "Pointer",
      "underlying" : 27
    }, {
      "local-name" : "_func",
      "name" : "runtime._func",
      "package" : 0,
      "type" : "Named",
      "underlying" : 29
    }, {
      "fields" : [ {
        "name" : "entry",
        "type" : 2
      }, {
        "name" : "nameoff",
        "type" : 30
      }, {
        "name" : "args",
        "type" : 30
      }, {
        "name" : "deferreturn",
        "type" : 31
      }, {
        "name" : "pcsp",
        "type" : 30
      }, {
        "name" : "pcfile",
        "type" : 30
      }, {
        "name" : "pcln",
        "type" : 30
      }, {
        "name" : "npcdata",
        "type" : 30
      }, {
        "name" : "funcID",
        "type" : 32
      }, {
        "name" : "_",
        "type" : 34
      }, {
        "name" : "nfuncdata",
        "type" : 33
      } ],
      "name" : "struct{entry uintptr; nameoff int32; args int32; deferreturn uint32; pcsp int32; pcfile int32; pcln int32; npcdata int32; funcID runtime.funcID; _ [2]int8; nfuncdata uint8}",
      "type" : "Struct",
      "underlying" : 29
    }, {
      "name" : "int32",
      "type" : "Basic",
      "underlying" : 30
    }, {
      "name" : "uint32",
      "type" : "Basic",
      "underlying" : 31
    }, {
      "local-name" : "funcID",
      "name" : "runtime.funcID",
      "package" : 0,
      "type" : "Named",
      "underlying" : 33
    }, {
      "name" : "uint8",
      "type" : "Basic",
      "underlying" : 33
    }, {
      "elem" : 35,
      "name" : "[2]int8",
      "type" : "Array",
      "underlying" : 34
    }, {
      "name" : "int8",
      "type" : "Basic",
      "underlying" : 35
    }, {
      "elem" : 37,
      "name" : "*runtime.moduledata",
      "type" : "Pointer",
      "underlying" : 36
    }, {
      "local-name" : "moduledata",
      "name" : "runtime.moduledata",
      "package" : 0,
      "type" : "Named",
      "underlying" : 38
    }, {
      "fields" : [ {
        "name" : "pclntable",
        "type" : 16
      }, {
        "name" : "ftab",
        "type" : 39
      }, {
        "name" : "filetab",
        "type" : 42
      }, {
        "name" : "findfunctab",
        "type" : 2
      }, {
        "name" : "minpc",
        "type" : 2
      }, {
        "name" : "maxpc",
        "type" : 2
      }, {
        "name" : "text",
        "type" : 2
      }, {
        "name" : "etext",
        "type" : 2
      }, {
        "name" : "noptrdata",
        "type" : 2
      }, {
        "name" : "enoptrdata",
        "type" : 2
      }, {
        "name" : "data",
        "type" : 2
      }, {
        "name" : "edata",
        "type" : 2
      }, {
        "name" : "bss",
        "type" : 2
      }, {
        "name" : "ebss",
        "type" : 2
      }, {
        "name" : "noptrbss",
        "type" : 2
      }, {
        "name" : "enoptrbss",
        "type" : 2
      }, {
        "name" : "end",
        "type" : 2
      }, {
        "name" : "gcdata",
        "type" : 2
      }, {
        "name" : "gcbss",
        "type" : 2
      }, {
        "name" : "types",
        "type" : 2
      }, {
        "name" : "etypes",
        "type" : 2
      }, {
        "name" : "textsectmap",
        "type" : 43
      }, {
        "name" : "typelinks",
        "type" : 46
      }, {
        "name" : "itablinks",
        "type" : 47
      }, {
        "name" : "ptab",
        "type" : 72
      }, {
        "name" : "pluginpath",
        "type" : 21
      }, {
        "name" : "pkghashes",
        "type" : 75
      }, {
        "name" : "modulename",
        "type" : 21
      }, {
        "name" : "modulehashes",
        "type" : 75
      }, {
        "name" : "hasmain",
        "type" : 33
      }, {
        "name" : "gcdatamask",
        "type" : 79
      }, {
        "name" : "gcbssmask",
        "type" : 79
      }, {
        "name" : "typemap",
        "type" : 82
      }, {
        "name" : "bad",
        "type" : 60
      }, {
        "name" : "next",
        "type" : 36
      } ],
      "name" : "struct{pclntable []byte; ftab []runtime.functab; filetab []uint32; findfunctab uintptr; minpc uintptr; maxpc uintptr; text uintptr; etext uintptr; noptrdata uintptr; enoptrdata uintptr; data uintptr; edata uintptr; bss uintptr; ebss uintptr; noptrbss uintptr; enoptrbss uintptr; end uintptr; gcdata uintptr; gcbss uintptr; types uintptr; etypes uintptr; textsectmap []runtime.textsect; typelinks []int32; itablinks []*runtime.itab; ptab []runtime.ptabEntry; pluginpath string; pkghashes []runtime.modulehash; modulename string; modulehashes []runtime.modulehash; hasmain uint8; gcdatamask runtime.bitvector; gcbssmask runtime.bitvector; typemap map[runtime.typeOff]*runtime._type; bad bool; next *runtime.moduledata}",
      "type" : "Struct",
      "underlying" : 38
    }, {
      "elem" : 40,
      "name" : "[]runtime.functab",
      "type" : "Slice",
      "underlying" : 39
    }, {
      "local-name" : "functab",
      "name" : "runtime.functab",
      "package" : 0,
      "type" : "Named",
      "underlying" : 41
    }, {
      "fields" : [ {
        "name" : "entry",
        "type" : 2
      }, {
        "name" : "funcoff",
        "type" : 2
      } ],
      "name" : "struct{entry uintptr; funcoff uintptr}",
      "type" : "Struct",
      "underlying" : 41
    }, {
      "elem" : 31,
      "name" : "[]uint32",
      "type" : "Slice",
      "underlying" : 42
    }, {
      "elem" : 44,
      "name" : "[]runtime.textsect",
      "type" : "Slice",
      "underlying" : 43
    }, {
      "local-name" : "textsect",
      "name" : "runtime.textsect",
      "package" : 0,
      "type" : "Named",
      "underlying" : 45
    }, {
      "fields" : [ {
        "name" : "vaddr",
        "type" : 2
      }, {
        "name" : "length",
        "type" : 2
      }, {
        "name" : "baseaddr",
        "type" : 2
      } ],
      "name" : "struct{vaddr uintptr; length uintptr; baseaddr uintptr}",
      "type" : "Struct",
      "underlying" : 45
    }, {
      "elem" : 30,
      "name" : "[]int32",
      "type" : "Slice",
      "underlying" : 46
    }, {
      "elem" : 48,
      "name" : "[]*runtime.itab",
      "type" : "Slice",
      "underlying" : 47
    }, {
      "elem" : 49,
      "name" : "*runtime.itab",
      "type" : "Pointer",
      "underlying" : 48
    }, {
      "local-name" : "itab",
      "name" : "runtime.itab",
      "package" : 0,
      "type" : "Named",
      "underlying" : 50
    }, {
      "fields" : [ {
        "name" : "inter",
        "type" : 51
      }, {
        "name" : "_type",
        "type" : 69
      }, {
        "name" : "hash",
        "type" : 31
      }, {
        "name" : "_",
        "type" : 70
      }, {
        "name" : "fun",
        "type" : 71
      } ],
      "name" : "struct{inter *runtime.interfacetype; _type *runtime._type; hash uint32; _ [4]byte; fun [1]uintptr}",
      "type" : "Struct",
      "underlying" : 50
    }, {
      "elem" : 52,
      "name" : "*runtime.interfacetype",
      "type" : "Pointer",
      "underlying" : 51
    }, {
      "local-name" : "interfacetype",
      "name" : "runtime.interfacetype",
      "package" : 0,
      "type" : "Named",
      "underlying" : 53
    }, {
      "fields" : [ {
        "name" : "typ",
        "type" : 54
      }, {
        "name" : "pkgpath",
        "type" : 64
      }, {
        "name" : "mhdr",
        "type" : 66
      } ],
      "name" : "struct{typ runtime._type; pkgpath runtime.name; mhdr []runtime.imethod}",
      "type" : "Struct",
      "underlying" : 53
    }, {
      "local-name" : "_type",
      "name" : "runtime._type",
      "package" : 0,
      "type" : "Named",
      "underlying" : 55
    }, {
      "fields" : [ {
        "name" : "size",
        "type" : 2
      }, {
        "name" : "ptrdata",
        "type" : 2
      }, {
        "name" : "hash",
        "type" : 31
      }, {
        "name" : "tflag",
        "type" : 56
      }, {
        "name" : "align",
        "type" : 33
      }, {
        "name" : "fieldAlign",
        "type" : 33
      }, {
        "name" : "kind",
        "type" : 33
      }, {
        "name" : "equal",
        "type" : 57
      }, {
        "name" : "gcdata",
        "type" : 61
      }, {
        "name" : "str",
        "type" : 62
      }, {
        "name" : "ptrToThis",
        "type" : 63
      } ],
      "name" : "struct{size uintptr; ptrdata uintptr; hash uint32; tflag runtime.tflag; align uint8; fieldAlign uint8; kind uint8; equal func(unsafe.Pointer, unsafe.Pointer) bool; gcdata *byte; str runtime.nameOff; ptrToThis runtime.typeOff}",
      "type" : "Struct",
      "underlying" : 55
    }, {
      "local-name" : "tflag",
      "name" : "runtime.tflag",
      "package" : 0,
      "type" : "Named",
      "underlying" : 33
    }, {
      "name" : "func(unsafe.Pointer, unsafe.Pointer) bool",
      "params" : 58,
      "recv" : -1,
      "results" : 59,
      "type" : "Signature",
      "underlying" : 57,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 24
      }, {
        "name" : "",
        "type" : 24
      } ],
      "name" : "(unsafe.Pointer, unsafe.Pointer)",
      "type" : "Tuple",
      "underlying" : 58
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 60
      } ],
      "name" : "(bool)",
      "type" : "Tuple",
      "underlying" : 59
    }, {
      "name" : "bool",
      "type" : "Basic",
      "underlying" : 60
    }, {
      "elem" : 6,
      "name" : "*byte",
      "type" : "Pointer",
      "underlying" : 61
    }, {
      "local-name" : "nameOff",
      "name" : "runtime.nameOff",
      "package" : 0,
      "type" : "Named",
      "underlying" : 30
    }, {
      "local-name" : "typeOff",
      "name" : "runtime.typeOff",
      "package" : 0,
      "type" : "Named",
      "underlying" : 30
    }, {
      "local-name" : "name",
      "name" : "runtime.name",
      "package" : 0,
      "type" : "Named",
      "underlying" : 65
    }, {
      "fields" : [ {
        "name" : "bytes",
        "type" : 61
      } ],
      "name" : "struct{bytes *byte}",
      "type" : "Struct",
      "underlying" : 65
    }, {
      "elem" : 67,
      "name" : "[]runtime.imethod",
      "type" : "Slice",
      "underlying" : 66
    }, {
      "local-name" : "imethod",
      "name" : "runtime.imethod",
      "package" : 0,
      "type" : "Named",
      "underlying" : 68
    }, {
      "fields" : [ {
        "name" : "name",
        "type" : 62
      }, {
        "name" : "ityp",
        "type" : 63
      } ],
      "name" : "struct{name runtime.nameOff; ityp runtime.typeOff}",
      "type" : "Struct",
      "underlying" : 68
    }, {
      "elem" : 54,
      "name" : "*runtime._type",
      "type" : "Pointer",
      "underlying" : 69
    }, {
      "elem" : 6,
      "name" : "[4]byte",
      "type" : "Array",
      "underlying" : 70
    }, {
      "elem" : 2,
      "name" : "[1]uintptr",
      "type" : "Array",
      "underlying" : 71
    }, {
      "elem" : 73,
      "name" : "[]runtime.ptabEntry",
      "type" : "Slice",
      "underlying" : 72
    }, {
      "local-name" : "ptabEntry",
      "name" : "runtime.ptabEntry",
      "package" : 0,
      "type" : "Named",
      "underlying" : 74
    }, {
      "fields" : [ {
        "name" : "name",
        "type" : 62
      }, {
        "name" : "typ",
        "type" : 63
      } ],
      "name" : "struct{name runtime.nameOff; typ runtime.typeOff}",
      "type" : "Struct",
      "underlying" : 74
    }, {
      "elem" : 76,
      "name" : "[]runtime.modulehash",
      "type" : "Slice",
      "underlying" : 75
    }, {
      "local-name" : "modulehash",
      "name" : "runtime.modulehash",
      "package" : 0,
      "type" : "Named",
      "underlying" : 77
    }, {
      "fields" : [ {
        "name" : "modulename",
        "type" : 21
      }, {
        "name" : "linktimehash",
        "type" : 21
      }, {
        "name" : "runtimehash",
        "type" : 78
      } ],
      "name" : "struct{modulename string; linktimehash string; runtimehash *string}",
      "type" : "Struct",
      "underlying" : 77
    }, {
      "elem" : 21,
      "name" : "*string",
      "type" : "Pointer",
      "underlying" : 78
    }, {
      "local-name" : "bitvector",
      "name" : "runtime.bitvector",
      "package" : 0,
      "type" : "Named",
      "underlying" : 80
    }, {
      "fields" : [ {
        "name" : "n",
        "type" : 30
      }, {
        "name" : "bytedata",
        "type" : 81
      } ],
      "name" : "struct{n int32; bytedata *uint8}",
      "type" : "Struct",
      "underlying" : 80
    }, {
      "elem" : 33,
      "name" : "*uint8",
      "type" : "Pointer",
      "underlying" : 81
    }, {
      "elem" : 69,
      "key" : 63,
      "name" : "map[runtime.typeOff]*runtime._type",
      "type" : "Map",
      "underlying" : 82
    }, {
      "name" : "func(pc uintptr) runtime.funcInfo",
      "params" : 84,
      "recv" : -1,
      "results" : 85,
      "type" : "Signature",
      "underlying" : 83,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "pc",
        "type" : 2
      } ],
      "name" : "(pc uintptr)",
      "type" : "Tuple",
      "underlying" : 84
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 25
      } ],
      "name" : "(runtime.funcInfo)",
      "type" : "Tuple",
      "underlying" : 85
    }, {
      "name" : "func() bool",
      "params" : 7,
      "recv" : -1,
      "results" : 59,
      "type" : "Signature",
      "underlying" : 86,
      "variadic" : false
    }, {
      "name" : "(runtime.funcInfo) func() bool",
      "params" : 7,
      "recv" : 11,
      "results" : 59,
      "type" : "Signature",
      "underlying" : 87,
      "variadic" : false
    }, {
      "name" : "func(string, string, string, uintptr, string)",
      "params" : 89,
      "recv" : -1,
      "results" : 7,
      "type" : "Signature",
      "underlying" : 88,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 21
      }, {
        "name" : "",
        "type" : 21
      }, {
        "name" : "",
        "type" : 21
      }, {
        "name" : "",
        "type" : 2
      }, {
        "name" : "",
        "type" : 21
      } ],
      "name" : "(string, string, string, uintptr, string)",
      "type" : "Tuple",
      "underlying" : 89
    }, {
      "name" : "func(f runtime.funcInfo) string",
      "params" : 91,
      "recv" : -1,
      "results" : 20,
      "type" : "Signature",
      "underlying" : 90,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "f",
        "type" : 25
      } ],
      "name" : "(f runtime.funcInfo)",
      "type" : "Tuple",
      "underlying" : 91
    } ],
    "variables" : [ {
      "name" : "p",
      "package" : 0,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "end",
      "package" : 0,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "mark",
      "package" : 0,
      "type" : 3,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "buf",
      "package" : 0,
      "type" : 8,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "i",
      "package" : 0,
      "type" : 9,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "x",
      "package" : 0,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "p1",
      "package" : 0,
      "type" : 10,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "markbuf",
      "package" : 0,
      "type" : 18,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "i",
      "package" : 0,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "val",
      "package" : 0,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "fn",
      "package" : 0,
      "type" : 25,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "f",
      "package" : 0,
      "type" : 25,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "entry",
      "package" : 0,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : true
    } ]
  },
  "go-version" : "1.14.3"
}