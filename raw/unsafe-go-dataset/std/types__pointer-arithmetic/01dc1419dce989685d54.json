{
  "usage" : {
    "file" : "value.go",
    "label1" : "pointer-arithmetic",
    "label2" : "types",
    "line" : "542",
    "module" : "std",
    "pkg" : "reflect",
    "project" : "kubernetes/kubernetes",
    "snippet" : "v.ptr = *(*unsafe.Pointer)(add(ptr, off, \"1-ptr\"))",
    "version" : "std"
  },
  "cfg" : {
    "blocks" : [ {
      "update-vars" : [ ],
      "successors" : [ 2 ],
      "in-vars" : [ 1, 0 ],
      "exit" : false,
      "out-vars" : [ 1, 0 ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[entry]",
      "entry" : true,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ ],
      "in-vars" : [ ],
      "exit" : true,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[exit]",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 3 ],
      "in-vars" : [ 0, 1 ],
      "exit" : false,
      "out-vars" : [ 1, 4, 0 ],
      "decl-vars" : [ 4 ],
      "line-start" : 521,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "ftyp"
          }
        } ],
        "right" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "ftyp",
            "variable" : 3
          },
          "go-type" : 12,
          "kind" : "expression",
          "target" : {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "ctxt",
              "variable" : 0
            }
          },
          "type" : "selector"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 521,
      "code" : "ftyp := ctxt.ftyp",
      "entry" : false,
      "use-vars" : [ 0 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 4 ],
      "in-vars" : [ 1, 4, 0 ],
      "exit" : false,
      "out-vars" : [ 6, 0, 1, 4 ],
      "decl-vars" : [ 6 ],
      "line-start" : 522,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "f"
          }
        } ],
        "right" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "fn",
            "variable" : 5
          },
          "go-type" : 29,
          "kind" : "expression",
          "target" : {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "ctxt",
              "variable" : 0
            }
          },
          "type" : "selector"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 522,
      "code" : "f := ctxt.fn",
      "entry" : false,
      "use-vars" : [ 0 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 5 ],
      "in-vars" : [ 1, 4, 6, 0 ],
      "exit" : false,
      "out-vars" : [ 4, 6, 0, 7 ],
      "decl-vars" : [ 7 ],
      "line-start" : 525,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "ptr"
          }
        } ],
        "right" : [ {
          "go-type" : 21,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "frame",
            "variable" : 1
          }
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 525,
      "code" : "ptr := frame",
      "entry" : false,
      "use-vars" : [ 1 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 6 ],
      "in-vars" : [ 4, 6, 0, 7 ],
      "exit" : false,
      "out-vars" : [ 6, 0, 7, 8, 4 ],
      "decl-vars" : [ 8 ],
      "line-start" : 526,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "off"
          }
        } ],
        "right" : [ {
          "go-type" : 5,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "0"
          }
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 526,
      "code" : "off := uintptr(0)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 7 ],
      "in-vars" : [ 7, 8, 4, 6, 0 ],
      "exit" : false,
      "out-vars" : [ 7, 8, 4, 10, 6, 0 ],
      "decl-vars" : [ 10 ],
      "line-start" : 527,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "in"
          }
        } ],
        "right" : [ {
          "argument" : {
            "element" : {
              "go-type" : 32,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 32,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "Value"
              }
            },
            "go-type" : 31,
            "kind" : "type",
            "type" : "slice"
          },
          "go-type" : 31,
          "kind" : "expression",
          "rest" : [ {
            "go-type" : 38,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          }, {
            "coerced-to" : {
              "go-type" : 38,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 38,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "int"
              }
            },
            "go-type" : 38,
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "inCount",
                "variable" : 9
              },
              "go-type" : 28,
              "kind" : "expression",
              "target" : {
                "go-type" : 12,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "ftyp",
                  "variable" : 4
                }
              },
              "type" : "selector"
            },
            "type" : "cast"
          } ],
          "type" : "make"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 527,
      "code" : "in := make([]Value, 0, int(ftyp.inCount))",
      "entry" : false,
      "use-vars" : [ 4 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 8, 18 ],
      "in-vars" : [ 7, 8, 4, 10, 6, 0 ],
      "exit" : false,
      "out-vars" : [ 8, 11, 4, 10, 6, 0, 7 ],
      "decl-vars" : [ 11, 17 ],
      "line-start" : 528,
      "ast" : {
        "is-assign" : false,
        "key" : {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "_"
          }
        },
        "kind" : "statement",
        "target" : {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "function" : 1,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "in"
            },
            "go-type" : 40,
            "kind" : "expression",
            "target" : {
              "go-type" : 12,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "ftyp",
                "variable" : 4
              }
            },
            "type" : "selector"
          },
          "go-type" : 39,
          "kind" : "expression",
          "type" : "call"
        },
        "type" : "range",
        "value" : {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "typ"
          }
        }
      },
      "assign-vars" : [ ],
      "line-end" : 546,
      "code" : "for _, typ := range ftyp.in() {\n\toff += -off & uintptr(typ.align-1)\n\tv := Value{typ, nil, flag(typ.Kind())}\n\tif ifaceIndir(typ) {\n\n\t\tv.ptr = unsafe_New(typ)\n\t\tif typ.size > 0 {\n\t\t\ttypedmemmove(typ, v.ptr, add(ptr, off, \"typ.size > 0\"))\n\t\t}\n\t\tv.flag |= flagIndir\n\t} else {\n\t\tv.ptr = *(*unsafe.Pointer)(add(ptr, off, \"1-ptr\"))\n\t}\n\tin = append(in, v)\n\toff += typ.size\n}",
      "entry" : false,
      "use-vars" : [ 4 ]
    }, {
      "update-vars" : [ 8 ],
      "successors" : [ 9 ],
      "in-vars" : [ 6, 0, 7, 8, 11, 4, 10 ],
      "exit" : false,
      "out-vars" : [ 11, 4, 10, 6, 0, 7, 8 ],
      "decl-vars" : [ ],
      "line-start" : 529,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 5,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "off",
            "variable" : 8
          }
        } ],
        "operator" : "+",
        "right" : [ {
          "go-type" : 5,
          "kind" : "expression",
          "left" : {
            "go-type" : 5,
            "kind" : "expression",
            "operator" : "-",
            "target" : {
              "go-type" : 5,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "off",
                "variable" : 8
              }
            },
            "type" : "unary"
          },
          "operator" : "&",
          "right" : {
            "coerced-to" : {
              "go-type" : 5,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 5,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "uintptr"
              }
            },
            "go-type" : 5,
            "kind" : "expression",
            "target" : {
              "go-type" : 18,
              "kind" : "expression",
              "left" : {
                "field" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "align",
                  "variable" : 12
                },
                "go-type" : 18,
                "kind" : "expression",
                "target" : {
                  "go-type" : 34,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "typ",
                    "variable" : 11
                  }
                },
                "type" : "selector"
              },
              "operator" : "-",
              "right" : {
                "go-type" : 18,
                "kind" : "constant",
                "value" : {
                  "type" : "INT",
                  "value" : "1"
                }
              },
              "type" : "binary"
            },
            "type" : "cast"
          },
          "type" : "binary"
        } ],
        "type" : "assign-operator"
      },
      "assign-vars" : [ 8 ],
      "line-end" : 529,
      "code" : "off += -off & uintptr(typ.align-1)",
      "entry" : false,
      "use-vars" : [ 8, 11 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 10 ],
      "in-vars" : [ 4, 10, 6, 0, 7, 8, 11 ],
      "exit" : false,
      "out-vars" : [ 6, 0, 7, 8, 11, 13, 4, 10 ],
      "decl-vars" : [ 13 ],
      "line-start" : 530,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "v"
          }
        } ],
        "right" : [ {
          "declared" : {
            "go-type" : 32,
            "kind" : "type",
            "type" : "identifier",
            "value" : {
              "go-type" : 32,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "Value"
            }
          },
          "go-type" : 32,
          "kind" : "literal",
          "type" : "composite",
          "values" : [ {
            "go-type" : 34,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "typ",
              "variable" : 11
            }
          }, {
            "go-type" : 21,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Nil",
              "kind" : "ident",
              "value" : "nil"
            }
          }, {
            "coerced-to" : {
              "go-type" : 35,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 35,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "flag"
              }
            },
            "go-type" : 35,
            "kind" : "expression",
            "target" : {
              "arguments" : [ ],
              "ellipsis" : false,
              "function" : {
                "field" : {
                  "function" : 2,
                  "ident-kind" : "Func",
                  "kind" : "ident",
                  "value" : "Kind"
                },
                "go-type" : 44,
                "kind" : "expression",
                "target" : {
                  "go-type" : 34,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "typ",
                    "variable" : 11
                  }
                },
                "type" : "selector"
              },
              "go-type" : 42,
              "kind" : "expression",
              "type" : "call"
            },
            "type" : "cast"
          } ]
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 530,
      "code" : "v := Value{typ, nil, flag(typ.Kind())}",
      "entry" : false,
      "use-vars" : [ 11 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 11, 15 ],
      "in-vars" : [ 11, 13, 4, 10, 6, 0, 7, 8 ],
      "exit" : false,
      "out-vars" : [ 8, 11, 13, 4, 10, 6, 0, 7 ],
      "decl-vars" : [ ],
      "line-start" : 531,
      "ast" : {
        "condition" : {
          "arguments" : [ {
            "go-type" : 34,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "typ",
              "variable" : 11
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 46,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 3,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "ifaceIndir"
            }
          },
          "go-type" : 23,
          "kind" : "expression",
          "type" : "call"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 543,
      "code" : "if ifaceIndir(typ) {\n\n\tv.ptr = unsafe_New(typ)\n\tif typ.size > 0 {\n\t\ttypedmemmove(typ, v.ptr, add(ptr, off, \"typ.size > 0\"))\n\t}\n\tv.flag |= flagIndir\n} else {\n\tv.ptr = *(*unsafe.Pointer)(add(ptr, off, \"1-ptr\"))\n}",
      "entry" : false,
      "use-vars" : [ 11 ]
    }, {
      "update-vars" : [ 13 ],
      "successors" : [ 12 ],
      "in-vars" : [ 11, 13, 4, 10, 6, 0, 7, 8 ],
      "exit" : false,
      "out-vars" : [ 13, 4, 10, 6, 0, 7, 8, 11 ],
      "decl-vars" : [ ],
      "line-start" : 536,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "ptr",
            "variable" : 14
          },
          "go-type" : 21,
          "kind" : "expression",
          "target" : {
            "go-type" : 32,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "v",
              "variable" : 13
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 34,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "typ",
              "variable" : 11
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 48,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 4,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "unsafe_New"
            }
          },
          "go-type" : 21,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 536,
      "code" : "v.ptr = unsafe_New(typ)",
      "entry" : false,
      "use-vars" : [ 13, 11 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 13, 14 ],
      "in-vars" : [ 7, 8, 11, 13, 4, 10, 6, 0 ],
      "exit" : false,
      "out-vars" : [ 8, 11, 13, 4, 10, 6, 0, 7 ],
      "decl-vars" : [ ],
      "line-start" : 537,
      "ast" : {
        "condition" : {
          "go-type" : 51,
          "kind" : "expression",
          "left" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "size",
              "variable" : 15
            },
            "go-type" : 5,
            "kind" : "expression",
            "target" : {
              "go-type" : 34,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "typ",
                "variable" : 11
              }
            },
            "type" : "selector"
          },
          "operator" : ">",
          "right" : {
            "go-type" : 5,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 539,
      "code" : "if typ.size > 0 {\n\ttypedmemmove(typ, v.ptr, add(ptr, off, \"typ.size > 0\"))\n}",
      "entry" : false,
      "use-vars" : [ 11 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 14 ],
      "in-vars" : [ 0, 7, 8, 11, 13, 4, 10, 6 ],
      "exit" : false,
      "out-vars" : [ 8, 11, 13, 4, 10, 6, 0, 7 ],
      "decl-vars" : [ ],
      "line-start" : 538,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 34,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "typ",
              "variable" : 11
            }
          }, {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "ptr",
              "variable" : 14
            },
            "go-type" : 21,
            "kind" : "expression",
            "target" : {
              "go-type" : 32,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "v",
                "variable" : 13
              }
            },
            "type" : "selector"
          }, {
            "arguments" : [ {
              "go-type" : 21,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "ptr",
                "variable" : 7
              }
            }, {
              "go-type" : 5,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "off",
                "variable" : 8
              }
            }, {
              "go-type" : 56,
              "kind" : "constant",
              "value" : {
                "type" : "STRING",
                "value" : "typ.size > 0"
              }
            } ],
            "ellipsis" : false,
            "function" : {
              "go-type" : 54,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "function" : 6,
                "ident-kind" : "Func",
                "kind" : "ident",
                "value" : "add"
              }
            },
            "go-type" : 21,
            "kind" : "expression",
            "type" : "call"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 52,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 5,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "typedmemmove"
            }
          },
          "go-type" : 37,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 538,
      "code" : "typedmemmove(typ, v.ptr, add(ptr, off, \"typ.size > 0\"))",
      "entry" : false,
      "use-vars" : [ 13, 7, 8, 11 ]
    }, {
      "update-vars" : [ 13 ],
      "successors" : [ 16 ],
      "in-vars" : [ 11, 13, 4, 10, 6, 0, 7, 8 ],
      "exit" : false,
      "out-vars" : [ 7, 8, 11, 13, 4, 10, 6, 0 ],
      "decl-vars" : [ ],
      "line-start" : 540,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "flag",
            "variable" : 16
          },
          "go-type" : 35,
          "kind" : "expression",
          "target" : {
            "go-type" : 32,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "v",
              "variable" : 13
            }
          },
          "type" : "selector"
        } ],
        "operator" : "|",
        "right" : [ {
          "go-type" : 35,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "128"
          }
        } ],
        "type" : "assign-operator"
      },
      "assign-vars" : [ ],
      "line-end" : 540,
      "code" : "v.flag |= flagIndir",
      "entry" : false,
      "use-vars" : [ 13 ]
    }, {
      "update-vars" : [ 13 ],
      "successors" : [ 16 ],
      "in-vars" : [ 0, 7, 8, 11, 13, 4, 10, 6 ],
      "exit" : false,
      "out-vars" : [ 6, 0, 7, 8, 11, 13, 4, 10 ],
      "decl-vars" : [ ],
      "line-start" : 542,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "ptr",
            "variable" : 14
          },
          "go-type" : 21,
          "kind" : "expression",
          "target" : {
            "go-type" : 32,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "v",
              "variable" : 13
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "go-type" : 21,
          "kind" : "expression",
          "target" : {
            "coerced-to" : {
              "contained" : {
                "go-type" : 21,
                "kind" : "type",
                "qualifier" : {
                  "ident-kind" : "PkgName",
                  "kind" : "ident",
                  "package" : 1,
                  "value" : "unsafe"
                },
                "type" : "identifier",
                "value" : {
                  "go-type" : 21,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "Pointer"
                }
              },
              "go-type" : 57,
              "kind" : "type",
              "type" : "pointer"
            },
            "go-type" : 57,
            "kind" : "expression",
            "target" : {
              "arguments" : [ {
                "go-type" : 21,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "ptr",
                  "variable" : 7
                }
              }, {
                "go-type" : 5,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "off",
                  "variable" : 8
                }
              }, {
                "go-type" : 56,
                "kind" : "constant",
                "value" : {
                  "type" : "STRING",
                  "value" : "1-ptr"
                }
              } ],
              "ellipsis" : false,
              "function" : {
                "go-type" : 54,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "function" : 6,
                  "ident-kind" : "Func",
                  "kind" : "ident",
                  "value" : "add"
                }
              },
              "go-type" : 21,
              "kind" : "expression",
              "type" : "call"
            },
            "type" : "cast"
          },
          "type" : "star"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 542,
      "code" : "v.ptr = *(*unsafe.Pointer)(add(ptr, off, \"1-ptr\"))",
      "entry" : false,
      "use-vars" : [ 7, 8, 13 ]
    }, {
      "update-vars" : [ 10 ],
      "successors" : [ 17 ],
      "in-vars" : [ 0, 7, 8, 11, 13, 4, 10, 6 ],
      "exit" : false,
      "out-vars" : [ 11, 4, 10, 6, 0, 7, 8 ],
      "decl-vars" : [ ],
      "line-start" : 544,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 31,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "in",
            "variable" : 10
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 31,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "in",
              "variable" : 10
            }
          }, {
            "go-type" : 32,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "v",
              "variable" : 13
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 58,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Builtin",
              "kind" : "ident",
              "value" : "append"
            }
          },
          "go-type" : 31,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 10 ],
      "line-end" : 544,
      "code" : "in = append(in, v)",
      "entry" : false,
      "use-vars" : [ 10, 13 ]
    }, {
      "update-vars" : [ 8 ],
      "successors" : [ 7 ],
      "in-vars" : [ 10, 6, 0, 7, 8, 11, 4 ],
      "exit" : false,
      "out-vars" : [ 10, 6, 0, 7, 8, 4 ],
      "decl-vars" : [ ],
      "line-start" : 545,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 5,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "off",
            "variable" : 8
          }
        } ],
        "operator" : "+",
        "right" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "size",
            "variable" : 15
          },
          "go-type" : 5,
          "kind" : "expression",
          "target" : {
            "go-type" : 34,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "typ",
              "variable" : 11
            }
          },
          "type" : "selector"
        } ],
        "type" : "assign-operator"
      },
      "assign-vars" : [ 8 ],
      "line-end" : 545,
      "code" : "off += typ.size",
      "entry" : false,
      "use-vars" : [ 11, 8 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 19 ],
      "in-vars" : [ 10, 6, 0, 7, 8, 4 ],
      "exit" : false,
      "out-vars" : [ 7, 8, 4, 6, 0, 18 ],
      "decl-vars" : [ 18 ],
      "line-start" : 549,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "out"
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 31,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "in",
              "variable" : 10
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 29,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "f",
              "variable" : 6
            }
          },
          "go-type" : 31,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 549,
      "code" : "out := f(in)",
      "entry" : false,
      "use-vars" : [ 6, 10 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 20 ],
      "in-vars" : [ 8, 4, 6, 0, 18, 7 ],
      "exit" : false,
      "out-vars" : [ 19, 7, 8, 4, 6, 0, 18 ],
      "decl-vars" : [ 19 ],
      "line-start" : 550,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "numOut"
          }
        } ],
        "right" : [ {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "function" : 7,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "NumOut"
            },
            "go-type" : 60,
            "kind" : "expression",
            "target" : {
              "go-type" : 12,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "ftyp",
                "variable" : 4
              }
            },
            "type" : "selector"
          },
          "go-type" : 38,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 550,
      "code" : "numOut := ftyp.NumOut()",
      "entry" : false,
      "use-vars" : [ 4 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 21, 22 ],
      "in-vars" : [ 6, 0, 18, 19, 7, 8, 4 ],
      "exit" : false,
      "out-vars" : [ 8, 4, 6, 0, 18, 19, 7 ],
      "decl-vars" : [ ],
      "line-start" : 551,
      "ast" : {
        "condition" : {
          "go-type" : 51,
          "kind" : "expression",
          "left" : {
            "arguments" : [ {
              "go-type" : 31,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "out",
                "variable" : 18
              }
            } ],
            "ellipsis" : false,
            "function" : {
              "go-type" : 62,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Builtin",
                "kind" : "ident",
                "value" : "len"
              }
            },
            "go-type" : 38,
            "kind" : "expression",
            "type" : "call"
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 38,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "numOut",
              "variable" : 19
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 553,
      "code" : "if len(out) != numOut {\n\tpanic(\"reflect: wrong return count from function created by MakeFunc\")\n}",
      "entry" : false,
      "use-vars" : [ 19, 18 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 22 ],
      "in-vars" : [ 8, 4, 6, 0, 18, 19, 7 ],
      "exit" : false,
      "out-vars" : [ 8, 4, 6, 0, 18, 19, 7 ],
      "decl-vars" : [ ],
      "line-start" : 552,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 56,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "reflect: wrong return count from function created by MakeFunc"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 63,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Builtin",
              "kind" : "ident",
              "value" : "panic"
            }
          },
          "go-type" : 37,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 552,
      "code" : "panic(\"reflect: wrong return count from function created by MakeFunc\")",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 23, 39 ],
      "in-vars" : [ 6, 0, 18, 19, 7, 8, 4 ],
      "exit" : false,
      "out-vars" : [ 0, 18, 7, 8, 4, 6 ],
      "decl-vars" : [ ],
      "line-start" : 556,
      "ast" : {
        "condition" : {
          "go-type" : 51,
          "kind" : "expression",
          "left" : {
            "go-type" : 38,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "numOut",
              "variable" : 19
            }
          },
          "operator" : ">",
          "right" : {
            "go-type" : 38,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 587,
      "code" : "if numOut > 0 {\n\toff += -off & (ptrSize - 1)\n\tfor i, typ := range ftyp.out() {\n\t\tv := out[i]\n\t\tif v.typ == nil {\n\t\t\tpanic(\"reflect: function created by MakeFunc using \" + funcName(f) +\n\t\t\t\t\" returned zero Value\")\n\t\t}\n\t\tif v.flag&flagRO != 0 {\n\t\t\tpanic(\"reflect: function created by MakeFunc using \" + funcName(f) +\n\t\t\t\t\" returned value obtained from unexported field\")\n\t\t}\n\t\toff += -off & uintptr(typ.align-1)\n\t\tif typ.size == 0 {\n\t\t\tcontinue\n\t\t}\n\t\taddr := add(ptr, off, \"typ.size > 0\")\n\n\t\tv = v.assignTo(\"reflect.MakeFunc\", typ, addr)\n\n\t\tif v.flag&flagIndir != 0 {\n\t\t\tmemmove(addr, v.ptr, typ.size)\n\t\t} else {\n\t\t\t*(*uintptr)(addr) = uintptr(v.ptr)\n\t\t}\n\t\toff += typ.size\n\t}\n}",
      "entry" : false,
      "use-vars" : [ 19 ]
    }, {
      "update-vars" : [ 8 ],
      "successors" : [ 24 ],
      "in-vars" : [ 8, 4, 6, 0, 18, 7 ],
      "exit" : false,
      "out-vars" : [ 18, 7, 8, 4, 6, 0 ],
      "decl-vars" : [ ],
      "line-start" : 557,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 5,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "off",
            "variable" : 8
          }
        } ],
        "operator" : "+",
        "right" : [ {
          "go-type" : 5,
          "kind" : "expression",
          "left" : {
            "go-type" : 5,
            "kind" : "expression",
            "operator" : "-",
            "target" : {
              "go-type" : 5,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "off",
                "variable" : 8
              }
            },
            "type" : "unary"
          },
          "operator" : "&",
          "right" : {
            "go-type" : 5,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "7"
            }
          },
          "type" : "binary"
        } ],
        "type" : "assign-operator"
      },
      "assign-vars" : [ 8 ],
      "line-end" : 557,
      "code" : "off += -off & (ptrSize - 1)",
      "entry" : false,
      "use-vars" : [ 8 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 25, 39 ],
      "in-vars" : [ 0, 18, 7, 8, 4, 6 ],
      "exit" : false,
      "out-vars" : [ 7, 8, 4, 20, 6, 0, 23, 18 ],
      "decl-vars" : [ 23, 20 ],
      "line-start" : 558,
      "ast" : {
        "is-assign" : false,
        "key" : {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "i"
          }
        },
        "kind" : "statement",
        "target" : {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "function" : 8,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "out"
            },
            "go-type" : 40,
            "kind" : "expression",
            "target" : {
              "go-type" : 12,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "ftyp",
                "variable" : 4
              }
            },
            "type" : "selector"
          },
          "go-type" : 39,
          "kind" : "expression",
          "type" : "call"
        },
        "type" : "range",
        "value" : {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "typ"
          }
        }
      },
      "assign-vars" : [ ],
      "line-end" : 586,
      "code" : "for i, typ := range ftyp.out() {\n\tv := out[i]\n\tif v.typ == nil {\n\t\tpanic(\"reflect: function created by MakeFunc using \" + funcName(f) +\n\t\t\t\" returned zero Value\")\n\t}\n\tif v.flag&flagRO != 0 {\n\t\tpanic(\"reflect: function created by MakeFunc using \" + funcName(f) +\n\t\t\t\" returned value obtained from unexported field\")\n\t}\n\toff += -off & uintptr(typ.align-1)\n\tif typ.size == 0 {\n\t\tcontinue\n\t}\n\taddr := add(ptr, off, \"typ.size > 0\")\n\n\tv = v.assignTo(\"reflect.MakeFunc\", typ, addr)\n\n\tif v.flag&flagIndir != 0 {\n\t\tmemmove(addr, v.ptr, typ.size)\n\t} else {\n\t\t*(*uintptr)(addr) = uintptr(v.ptr)\n\t}\n\toff += typ.size\n}",
      "entry" : false,
      "use-vars" : [ 4 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 26 ],
      "in-vars" : [ 23, 18, 7, 8, 4, 20, 6, 0 ],
      "exit" : false,
      "out-vars" : [ 7, 8, 4, 6, 0, 21, 23, 18 ],
      "decl-vars" : [ 21 ],
      "line-start" : 559,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "v"
          }
        } ],
        "right" : [ {
          "go-type" : 32,
          "index" : {
            "go-type" : 38,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "i",
              "variable" : 20
            }
          },
          "kind" : "expression",
          "target" : {
            "go-type" : 31,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "out",
              "variable" : 18
            }
          },
          "type" : "index"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 559,
      "code" : "v := out[i]",
      "entry" : false,
      "use-vars" : [ 18, 20 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 27, 28 ],
      "in-vars" : [ 0, 21, 23, 18, 7, 8, 4, 6 ],
      "exit" : false,
      "out-vars" : [ 8, 4, 6, 0, 21, 23, 18, 7 ],
      "decl-vars" : [ ],
      "line-start" : 560,
      "ast" : {
        "condition" : {
          "go-type" : 51,
          "kind" : "expression",
          "left" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "typ",
              "variable" : 22
            },
            "go-type" : 34,
            "kind" : "expression",
            "target" : {
              "go-type" : 32,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "v",
                "variable" : 21
              }
            },
            "type" : "selector"
          },
          "operator" : "==",
          "right" : {
            "go-type" : 66,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Nil",
              "kind" : "ident",
              "value" : "nil"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 563,
      "code" : "if v.typ == nil {\n\tpanic(\"reflect: function created by MakeFunc using \" + funcName(f) +\n\t\t\" returned zero Value\")\n}",
      "entry" : false,
      "use-vars" : [ 21 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 28 ],
      "in-vars" : [ 21, 23, 18, 7, 8, 4, 6, 0 ],
      "exit" : false,
      "out-vars" : [ 6, 0, 21, 23, 18, 7, 8, 4 ],
      "decl-vars" : [ ],
      "line-start" : 561,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 56,
            "kind" : "expression",
            "left" : {
              "go-type" : 56,
              "kind" : "expression",
              "left" : {
                "go-type" : 56,
                "kind" : "constant",
                "value" : {
                  "type" : "STRING",
                  "value" : "reflect: function created by MakeFunc using "
                }
              },
              "operator" : "+",
              "right" : {
                "arguments" : [ {
                  "go-type" : 29,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "f",
                    "variable" : 6
                  }
                } ],
                "ellipsis" : false,
                "function" : {
                  "go-type" : 67,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "function" : 9,
                    "ident-kind" : "Func",
                    "kind" : "ident",
                    "value" : "funcName"
                  }
                },
                "go-type" : 56,
                "kind" : "expression",
                "type" : "call"
              },
              "type" : "binary"
            },
            "operator" : "+",
            "right" : {
              "go-type" : 56,
              "kind" : "constant",
              "value" : {
                "type" : "STRING",
                "value" : " returned zero Value"
              }
            },
            "type" : "binary"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 63,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Builtin",
              "kind" : "ident",
              "value" : "panic"
            }
          },
          "go-type" : 37,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 562,
      "code" : "panic(\"reflect: function created by MakeFunc using \" + funcName(f) +\n\t\" returned zero Value\")",
      "entry" : false,
      "use-vars" : [ 6 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 29, 30 ],
      "in-vars" : [ 6, 0, 21, 23, 18, 7, 8, 4 ],
      "exit" : false,
      "out-vars" : [ 8, 4, 6, 0, 21, 23, 18, 7 ],
      "decl-vars" : [ ],
      "line-start" : 564,
      "ast" : {
        "condition" : {
          "go-type" : 51,
          "kind" : "expression",
          "left" : {
            "go-type" : 35,
            "kind" : "expression",
            "left" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "flag",
                "variable" : 16
              },
              "go-type" : 35,
              "kind" : "expression",
              "target" : {
                "go-type" : 32,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "v",
                  "variable" : 21
                }
              },
              "type" : "selector"
            },
            "operator" : "&",
            "right" : {
              "go-type" : 35,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "96"
              }
            },
            "type" : "binary"
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 35,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 567,
      "code" : "if v.flag&flagRO != 0 {\n\tpanic(\"reflect: function created by MakeFunc using \" + funcName(f) +\n\t\t\" returned value obtained from unexported field\")\n}",
      "entry" : false,
      "use-vars" : [ 21 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 30 ],
      "in-vars" : [ 18, 7, 8, 4, 6, 0, 21, 23 ],
      "exit" : false,
      "out-vars" : [ 6, 0, 21, 23, 18, 7, 8, 4 ],
      "decl-vars" : [ ],
      "line-start" : 565,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 56,
            "kind" : "expression",
            "left" : {
              "go-type" : 56,
              "kind" : "expression",
              "left" : {
                "go-type" : 56,
                "kind" : "constant",
                "value" : {
                  "type" : "STRING",
                  "value" : "reflect: function created by MakeFunc using "
                }
              },
              "operator" : "+",
              "right" : {
                "arguments" : [ {
                  "go-type" : 29,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "f",
                    "variable" : 6
                  }
                } ],
                "ellipsis" : false,
                "function" : {
                  "go-type" : 67,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "function" : 9,
                    "ident-kind" : "Func",
                    "kind" : "ident",
                    "value" : "funcName"
                  }
                },
                "go-type" : 56,
                "kind" : "expression",
                "type" : "call"
              },
              "type" : "binary"
            },
            "operator" : "+",
            "right" : {
              "go-type" : 56,
              "kind" : "constant",
              "value" : {
                "type" : "STRING",
                "value" : " returned value obtained from unexported field"
              }
            },
            "type" : "binary"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 63,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Builtin",
              "kind" : "ident",
              "value" : "panic"
            }
          },
          "go-type" : 37,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 566,
      "code" : "panic(\"reflect: function created by MakeFunc using \" + funcName(f) +\n\t\" returned value obtained from unexported field\")",
      "entry" : false,
      "use-vars" : [ 6 ]
    }, {
      "update-vars" : [ 8 ],
      "successors" : [ 31 ],
      "in-vars" : [ 18, 7, 8, 4, 6, 0, 21, 23 ],
      "exit" : false,
      "out-vars" : [ 4, 6, 0, 21, 23, 18, 7, 8 ],
      "decl-vars" : [ ],
      "line-start" : 568,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 5,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "off",
            "variable" : 8
          }
        } ],
        "operator" : "+",
        "right" : [ {
          "go-type" : 5,
          "kind" : "expression",
          "left" : {
            "go-type" : 5,
            "kind" : "expression",
            "operator" : "-",
            "target" : {
              "go-type" : 5,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "off",
                "variable" : 8
              }
            },
            "type" : "unary"
          },
          "operator" : "&",
          "right" : {
            "coerced-to" : {
              "go-type" : 5,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 5,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "uintptr"
              }
            },
            "go-type" : 5,
            "kind" : "expression",
            "target" : {
              "go-type" : 18,
              "kind" : "expression",
              "left" : {
                "field" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "align",
                  "variable" : 12
                },
                "go-type" : 18,
                "kind" : "expression",
                "target" : {
                  "go-type" : 34,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "typ",
                    "variable" : 23
                  }
                },
                "type" : "selector"
              },
              "operator" : "-",
              "right" : {
                "go-type" : 18,
                "kind" : "constant",
                "value" : {
                  "type" : "INT",
                  "value" : "1"
                }
              },
              "type" : "binary"
            },
            "type" : "cast"
          },
          "type" : "binary"
        } ],
        "type" : "assign-operator"
      },
      "assign-vars" : [ 8 ],
      "line-end" : 568,
      "code" : "off += -off & uintptr(typ.align-1)",
      "entry" : false,
      "use-vars" : [ 8, 23 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 32, 33 ],
      "in-vars" : [ 4, 6, 0, 21, 23, 18, 7, 8 ],
      "exit" : false,
      "out-vars" : [ 8, 4, 6, 0, 21, 23, 18, 7 ],
      "decl-vars" : [ ],
      "line-start" : 569,
      "ast" : {
        "condition" : {
          "go-type" : 51,
          "kind" : "expression",
          "left" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "size",
              "variable" : 15
            },
            "go-type" : 5,
            "kind" : "expression",
            "target" : {
              "go-type" : 34,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "typ",
                "variable" : 23
              }
            },
            "type" : "selector"
          },
          "operator" : "==",
          "right" : {
            "go-type" : 5,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 571,
      "code" : "if typ.size == 0 {\n\tcontinue\n}",
      "entry" : false,
      "use-vars" : [ 23 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 24 ],
      "in-vars" : [ 6, 0, 18, 7, 8, 4 ],
      "exit" : false,
      "out-vars" : [ 7, 8, 4, 6, 0, 18 ],
      "decl-vars" : [ ],
      "line-start" : 570,
      "ast" : {
        "kind" : "statement",
        "label" : null,
        "type" : "continue"
      },
      "assign-vars" : [ ],
      "line-end" : 570,
      "code" : "continue",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 34 ],
      "in-vars" : [ 6, 0, 21, 23, 18, 7, 8, 4 ],
      "exit" : false,
      "out-vars" : [ 18, 7, 8, 4, 6, 21, 23, 24, 0 ],
      "decl-vars" : [ 24 ],
      "line-start" : 572,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "addr"
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 21,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "ptr",
              "variable" : 7
            }
          }, {
            "go-type" : 5,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "off",
              "variable" : 8
            }
          }, {
            "go-type" : 56,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "typ.size > 0"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 54,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 6,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "add"
            }
          },
          "go-type" : 21,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 572,
      "code" : "addr := add(ptr, off, \"typ.size > 0\")",
      "entry" : false,
      "use-vars" : [ 8, 7 ]
    }, {
      "update-vars" : [ 21 ],
      "successors" : [ 35 ],
      "in-vars" : [ 8, 18, 7, 4, 6, 0, 21, 23, 24 ],
      "exit" : false,
      "out-vars" : [ 7, 8, 6, 0, 21, 23, 24, 18, 4 ],
      "decl-vars" : [ ],
      "line-start" : 577,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 32,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "v",
            "variable" : 21
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 56,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "reflect.MakeFunc"
            }
          }, {
            "go-type" : 34,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "typ",
              "variable" : 23
            }
          }, {
            "go-type" : 21,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "addr",
              "variable" : 24
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "function" : 10,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "assignTo"
            },
            "go-type" : 70,
            "kind" : "expression",
            "target" : {
              "go-type" : 32,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "v",
                "variable" : 21
              }
            },
            "type" : "selector"
          },
          "go-type" : 32,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 21 ],
      "line-end" : 577,
      "code" : "v = v.assignTo(\"reflect.MakeFunc\", typ, addr)",
      "entry" : false,
      "use-vars" : [ 21, 23, 24 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 36, 37 ],
      "in-vars" : [ 4, 6, 18, 23, 24, 7, 8, 0, 21 ],
      "exit" : false,
      "out-vars" : [ 21, 6, 23, 24, 18, 7, 8, 4, 0 ],
      "decl-vars" : [ ],
      "line-start" : 580,
      "ast" : {
        "condition" : {
          "go-type" : 51,
          "kind" : "expression",
          "left" : {
            "go-type" : 35,
            "kind" : "expression",
            "left" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "flag",
                "variable" : 16
              },
              "go-type" : 35,
              "kind" : "expression",
              "target" : {
                "go-type" : 32,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "v",
                  "variable" : 21
                }
              },
              "type" : "selector"
            },
            "operator" : "&",
            "right" : {
              "go-type" : 35,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "128"
              }
            },
            "type" : "binary"
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 35,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 584,
      "code" : "if v.flag&flagIndir != 0 {\n\tmemmove(addr, v.ptr, typ.size)\n} else {\n\t*(*uintptr)(addr) = uintptr(v.ptr)\n}",
      "entry" : false,
      "use-vars" : [ 21 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 38 ],
      "in-vars" : [ 0, 21, 7, 4, 6, 23, 24, 18, 8 ],
      "exit" : false,
      "out-vars" : [ 18, 7, 8, 4, 6, 0, 23 ],
      "decl-vars" : [ ],
      "line-start" : 581,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 21,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "addr",
              "variable" : 24
            }
          }, {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "ptr",
              "variable" : 14
            },
            "go-type" : 21,
            "kind" : "expression",
            "target" : {
              "go-type" : 32,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "v",
                "variable" : 21
              }
            },
            "type" : "selector"
          }, {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "size",
              "variable" : 15
            },
            "go-type" : 5,
            "kind" : "expression",
            "target" : {
              "go-type" : 34,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "typ",
                "variable" : 23
              }
            },
            "type" : "selector"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 73,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 11,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "memmove"
            }
          },
          "go-type" : 37,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 581,
      "code" : "memmove(addr, v.ptr, typ.size)",
      "entry" : false,
      "use-vars" : [ 24, 21, 23 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 38 ],
      "in-vars" : [ 23, 18, 7, 8, 4, 6, 0, 21 ],
      "exit" : false,
      "out-vars" : [ 0, 23, 18, 7, 8, 4, 6 ],
      "decl-vars" : [ ],
      "line-start" : 583,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 5,
          "kind" : "expression",
          "target" : {
            "coerced-to" : {
              "contained" : {
                "go-type" : 5,
                "kind" : "type",
                "type" : "identifier",
                "value" : {
                  "go-type" : 5,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "uintptr"
                }
              },
              "go-type" : 75,
              "kind" : "type",
              "type" : "pointer"
            },
            "go-type" : 75,
            "kind" : "expression",
            "target" : {
              "go-type" : 21,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "addr",
                "variable" : 24
              }
            },
            "type" : "cast"
          },
          "type" : "star"
        } ],
        "right" : [ {
          "coerced-to" : {
            "go-type" : 5,
            "kind" : "type",
            "type" : "identifier",
            "value" : {
              "go-type" : 5,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "uintptr"
            }
          },
          "go-type" : 5,
          "kind" : "expression",
          "target" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "ptr",
              "variable" : 14
            },
            "go-type" : 21,
            "kind" : "expression",
            "target" : {
              "go-type" : 32,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "v",
                "variable" : 21
              }
            },
            "type" : "selector"
          },
          "type" : "cast"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 583,
      "code" : "*(*uintptr)(addr) = uintptr(v.ptr)",
      "entry" : false,
      "use-vars" : [ 21 ]
    }, {
      "update-vars" : [ 8 ],
      "successors" : [ 24 ],
      "in-vars" : [ 7, 8, 4, 6, 0, 23, 18 ],
      "exit" : false,
      "out-vars" : [ 18, 7, 8, 4, 6, 0 ],
      "decl-vars" : [ ],
      "line-start" : 585,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 5,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "off",
            "variable" : 8
          }
        } ],
        "operator" : "+",
        "right" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "size",
            "variable" : 15
          },
          "go-type" : 5,
          "kind" : "expression",
          "target" : {
            "go-type" : 34,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "typ",
              "variable" : 23
            }
          },
          "type" : "selector"
        } ],
        "type" : "assign-operator"
      },
      "assign-vars" : [ 8 ],
      "line-end" : 585,
      "code" : "off += typ.size",
      "entry" : false,
      "use-vars" : [ 23, 8 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 40 ],
      "in-vars" : [ 18, 0 ],
      "exit" : false,
      "out-vars" : [ 18, 0 ],
      "decl-vars" : [ ],
      "line-start" : 591,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 23,
          "kind" : "expression",
          "target" : {
            "go-type" : 36,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "retValid",
              "variable" : 2
            }
          },
          "type" : "star"
        } ],
        "right" : [ {
          "go-type" : 23,
          "kind" : "constant",
          "value" : {
            "type" : "BOOL",
            "value" : "true"
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 591,
      "code" : "*retValid = true",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 41 ],
      "in-vars" : [ 18, 0 ],
      "exit" : false,
      "out-vars" : [ 0 ],
      "decl-vars" : [ ],
      "line-start" : 597,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 31,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "out",
              "variable" : 18
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 76,
            "kind" : "expression",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 2,
              "value" : "runtime"
            },
            "type" : "identifier",
            "value" : {
              "function" : 12,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "KeepAlive"
            }
          },
          "go-type" : 37,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 597,
      "code" : "runtime.KeepAlive(out)",
      "entry" : false,
      "use-vars" : [ 18 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 0 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 602,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "ctxt",
              "variable" : 0
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 76,
            "kind" : "expression",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 2,
              "value" : "runtime"
            },
            "type" : "identifier",
            "value" : {
              "function" : 12,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "KeepAlive"
            }
          },
          "go-type" : 37,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 602,
      "code" : "runtime.KeepAlive(ctxt)",
      "entry" : false,
      "use-vars" : [ 0 ]
    } ],
    "code" : "// callReflect is the call implementation used by a function\n// returned by MakeFunc. In many ways it is the opposite of the\n// method Value.call above. The method above converts a call using Values\n// into a call of a function with a concrete argument frame, while\n// callReflect converts a call of a function with a concrete argument\n// frame into a call using Values.\n// It is in this file so that it can be next to the call method above.\n// The remainder of the MakeFunc implementation is in makefunc.go.\n//\n// NOTE: This function must be marked as a \"wrapper\" in the generated code,\n// so that the linker can make it work correctly for panic and recover.\n// The gc compilers know to do that for the name \"reflect.callReflect\".\n//\n// ctxt is the \"closure\" generated by MakeFunc.\n// frame is a pointer to the arguments to that closure on the stack.\n// retValid points to a boolean which should be set when the results\n// section of frame is set.\nfunc callReflect(ctxt *makeFuncImpl, frame unsafe.Pointer, retValid *bool) {\n\tftyp := ctxt.ftyp\n\tf := ctxt.fn\n\n\tptr := frame\n\toff := uintptr(0)\n\tin := make([]Value, 0, int(ftyp.inCount))\n\tfor _, typ := range ftyp.in() {\n\t\toff += -off & uintptr(typ.align-1)\n\t\tv := Value{typ, nil, flag(typ.Kind())}\n\t\tif ifaceIndir(typ) {\n\n\t\t\tv.ptr = unsafe_New(typ)\n\t\t\tif typ.size > 0 {\n\t\t\t\ttypedmemmove(typ, v.ptr, add(ptr, off, \"typ.size > 0\"))\n\t\t\t}\n\t\t\tv.flag |= flagIndir\n\t\t} else {\n\t\t\tv.ptr = *(*unsafe.Pointer)(add(ptr, off, \"1-ptr\"))\n\t\t}\n\t\tin = append(in, v)\n\t\toff += typ.size\n\t}\n\n\tout := f(in)\n\tnumOut := ftyp.NumOut()\n\tif len(out) != numOut {\n\t\tpanic(\"reflect: wrong return count from function created by MakeFunc\")\n\t}\n\n\tif numOut > 0 {\n\t\toff += -off & (ptrSize - 1)\n\t\tfor i, typ := range ftyp.out() {\n\t\t\tv := out[i]\n\t\t\tif v.typ == nil {\n\t\t\t\tpanic(\"reflect: function created by MakeFunc using \" + funcName(f) +\n\t\t\t\t\t\" returned zero Value\")\n\t\t\t}\n\t\t\tif v.flag&flagRO != 0 {\n\t\t\t\tpanic(\"reflect: function created by MakeFunc using \" + funcName(f) +\n\t\t\t\t\t\" returned value obtained from unexported field\")\n\t\t\t}\n\t\t\toff += -off & uintptr(typ.align-1)\n\t\t\tif typ.size == 0 {\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\taddr := add(ptr, off, \"typ.size > 0\")\n\n\t\t\tv = v.assignTo(\"reflect.MakeFunc\", typ, addr)\n\n\t\t\tif v.flag&flagIndir != 0 {\n\t\t\t\tmemmove(addr, v.ptr, typ.size)\n\t\t\t} else {\n\t\t\t\t*(*uintptr)(addr) = uintptr(v.ptr)\n\t\t\t}\n\t\t\toff += typ.size\n\t\t}\n\t}\n\n\t*retValid = true\n\n\truntime.KeepAlive(out)\n\n\truntime.KeepAlive(ctxt)\n}",
    "defines" : [ 0 ],
    "functions" : [ {
      "name" : "callReflect",
      "package" : 0,
      "type" : 0,
      "exported" : false
    }, {
      "name" : "in",
      "package" : 0,
      "type" : 40,
      "exported" : false
    }, {
      "name" : "Kind",
      "package" : 0,
      "type" : 44,
      "exported" : true
    }, {
      "name" : "ifaceIndir",
      "package" : 0,
      "type" : 46,
      "exported" : false
    }, {
      "name" : "unsafe_New",
      "package" : 0,
      "type" : 48,
      "exported" : false
    }, {
      "name" : "typedmemmove",
      "package" : 0,
      "type" : 52,
      "exported" : false
    }, {
      "name" : "add",
      "package" : 0,
      "type" : 54,
      "exported" : false
    }, {
      "name" : "NumOut",
      "package" : 0,
      "type" : 60,
      "exported" : true
    }, {
      "name" : "out",
      "package" : 0,
      "type" : 40,
      "exported" : false
    }, {
      "name" : "funcName",
      "package" : 0,
      "type" : 67,
      "exported" : false
    }, {
      "name" : "assignTo",
      "package" : 0,
      "type" : 70,
      "exported" : false
    }, {
      "name" : "memmove",
      "package" : 0,
      "type" : 73,
      "exported" : false
    }, {
      "name" : "KeepAlive",
      "package" : 2,
      "type" : 76,
      "exported" : true
    } ],
    "line-end" : 603,
    "line-start" : 520,
    "names" : [ "callReflect" ],
    "package" : 0,
    "packages" : [ {
      "name" : "reflect",
      "path" : "reflect"
    }, {
      "name" : "unsafe",
      "path" : "unsafe"
    }, {
      "name" : "runtime",
      "path" : "runtime"
    } ],
    "params" : [ 0, 1, 2 ],
    "receivers" : [ ],
    "results" : [ ],
    "type" : "function",
    "types" : [ {
      "name" : "func(ctxt *reflect.makeFuncImpl, frame unsafe.Pointer, retValid *bool)",
      "params" : 1,
      "recv" : -1,
      "results" : 37,
      "type" : "Signature",
      "underlying" : 0,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "ctxt",
        "type" : 2
      }, {
        "name" : "frame",
        "type" : 21
      }, {
        "name" : "retValid",
        "type" : 36
      } ],
      "name" : "(ctxt *reflect.makeFuncImpl, frame unsafe.Pointer, retValid *bool)",
      "type" : "Tuple",
      "underlying" : 1
    }, {
      "elem" : 3,
      "name" : "*reflect.makeFuncImpl",
      "type" : "Pointer",
      "underlying" : 2
    }, {
      "local-name" : "makeFuncImpl",
      "name" : "reflect.makeFuncImpl",
      "package" : 0,
      "type" : "Named",
      "underlying" : 4
    }, {
      "fields" : [ {
        "name" : "code",
        "type" : 5
      }, {
        "name" : "stack",
        "type" : 6
      }, {
        "name" : "argLen",
        "type" : 5
      }, {
        "name" : "ftyp",
        "type" : 12
      }, {
        "name" : "fn",
        "type" : 29
      } ],
      "name" : "struct{code uintptr; stack *reflect.bitVector; argLen uintptr; ftyp *reflect.funcType; fn func([]reflect.Value) []reflect.Value}",
      "type" : "Struct",
      "underlying" : 4
    }, {
      "name" : "uintptr",
      "type" : "Basic",
      "underlying" : 5
    }, {
      "elem" : 7,
      "name" : "*reflect.bitVector",
      "type" : "Pointer",
      "underlying" : 6
    }, {
      "local-name" : "bitVector",
      "name" : "reflect.bitVector",
      "package" : 0,
      "type" : "Named",
      "underlying" : 8
    }, {
      "fields" : [ {
        "name" : "n",
        "type" : 9
      }, {
        "name" : "data",
        "type" : 10
      } ],
      "name" : "struct{n uint32; data []byte}",
      "type" : "Struct",
      "underlying" : 8
    }, {
      "name" : "uint32",
      "type" : "Basic",
      "underlying" : 9
    }, {
      "elem" : 11,
      "name" : "[]byte",
      "type" : "Slice",
      "underlying" : 10
    }, {
      "name" : "byte",
      "type" : "Basic",
      "underlying" : 11
    }, {
      "elem" : 13,
      "name" : "*reflect.funcType",
      "type" : "Pointer",
      "underlying" : 12
    }, {
      "local-name" : "funcType",
      "name" : "reflect.funcType",
      "package" : 0,
      "type" : "Named",
      "underlying" : 14
    }, {
      "fields" : [ {
        "name" : "rtype",
        "type" : 15
      }, {
        "name" : "inCount",
        "type" : 28
      }, {
        "name" : "outCount",
        "type" : 28
      } ],
      "name" : "struct{reflect.rtype; inCount uint16; outCount uint16}",
      "type" : "Struct",
      "underlying" : 14
    }, {
      "local-name" : "rtype",
      "name" : "reflect.rtype",
      "package" : 0,
      "type" : "Named",
      "underlying" : 16
    }, {
      "fields" : [ {
        "name" : "size",
        "type" : 5
      }, {
        "name" : "ptrdata",
        "type" : 5
      }, {
        "name" : "hash",
        "type" : 9
      }, {
        "name" : "tflag",
        "type" : 17
      }, {
        "name" : "align",
        "type" : 18
      }, {
        "name" : "fieldAlign",
        "type" : 18
      }, {
        "name" : "kind",
        "type" : 18
      }, {
        "name" : "equal",
        "type" : 19
      }, {
        "name" : "gcdata",
        "type" : 24
      }, {
        "name" : "str",
        "type" : 25
      }, {
        "name" : "ptrToThis",
        "type" : 27
      } ],
      "name" : "struct{size uintptr; ptrdata uintptr; hash uint32; tflag reflect.tflag; align uint8; fieldAlign uint8; kind uint8; equal func(unsafe.Pointer, unsafe.Pointer) bool; gcdata *byte; str reflect.nameOff; ptrToThis reflect.typeOff}",
      "type" : "Struct",
      "underlying" : 16
    }, {
      "local-name" : "tflag",
      "name" : "reflect.tflag",
      "package" : 0,
      "type" : "Named",
      "underlying" : 18
    }, {
      "name" : "uint8",
      "type" : "Basic",
      "underlying" : 18
    }, {
      "name" : "func(unsafe.Pointer, unsafe.Pointer) bool",
      "params" : 20,
      "recv" : -1,
      "results" : 22,
      "type" : "Signature",
      "underlying" : 19,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 21
      }, {
        "name" : "",
        "type" : 21
      } ],
      "name" : "(unsafe.Pointer, unsafe.Pointer)",
      "type" : "Tuple",
      "underlying" : 20
    }, {
      "local-name" : "Pointer",
      "name" : "unsafe.Pointer",
      "package" : 1,
      "type" : "Basic",
      "underlying" : 21
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 23
      } ],
      "name" : "(bool)",
      "type" : "Tuple",
      "underlying" : 22
    }, {
      "name" : "bool",
      "type" : "Basic",
      "underlying" : 23
    }, {
      "elem" : 11,
      "name" : "*byte",
      "type" : "Pointer",
      "underlying" : 24
    }, {
      "local-name" : "nameOff",
      "name" : "reflect.nameOff",
      "package" : 0,
      "type" : "Named",
      "underlying" : 26
    }, {
      "name" : "int32",
      "type" : "Basic",
      "underlying" : 26
    }, {
      "local-name" : "typeOff",
      "name" : "reflect.typeOff",
      "package" : 0,
      "type" : "Named",
      "underlying" : 26
    }, {
      "name" : "uint16",
      "type" : "Basic",
      "underlying" : 28
    }, {
      "name" : "func([]reflect.Value) []reflect.Value",
      "params" : 30,
      "recv" : -1,
      "results" : 30,
      "type" : "Signature",
      "underlying" : 29,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 31
      } ],
      "name" : "([]reflect.Value)",
      "type" : "Tuple",
      "underlying" : 30
    }, {
      "elem" : 32,
      "name" : "[]reflect.Value",
      "type" : "Slice",
      "underlying" : 31
    }, {
      "local-name" : "Value",
      "name" : "reflect.Value",
      "package" : 0,
      "type" : "Named",
      "underlying" : 33
    }, {
      "fields" : [ {
        "name" : "typ",
        "type" : 34
      }, {
        "name" : "ptr",
        "type" : 21
      }, {
        "name" : "flag",
        "type" : 35
      } ],
      "name" : "struct{typ *reflect.rtype; ptr unsafe.Pointer; reflect.flag}",
      "type" : "Struct",
      "underlying" : 33
    }, {
      "elem" : 15,
      "name" : "*reflect.rtype",
      "type" : "Pointer",
      "underlying" : 34
    }, {
      "local-name" : "flag",
      "name" : "reflect.flag",
      "package" : 0,
      "type" : "Named",
      "underlying" : 5
    }, {
      "elem" : 23,
      "name" : "*bool",
      "type" : "Pointer",
      "underlying" : 36
    }, {
      "fields" : [ ],
      "name" : "()",
      "type" : "Tuple",
      "underlying" : 37
    }, {
      "name" : "int",
      "type" : "Basic",
      "underlying" : 38
    }, {
      "elem" : 34,
      "name" : "[]*reflect.rtype",
      "type" : "Slice",
      "underlying" : 39
    }, {
      "name" : "func() []*reflect.rtype",
      "params" : 37,
      "recv" : -1,
      "results" : 41,
      "type" : "Signature",
      "underlying" : 40,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 39
      } ],
      "name" : "([]*reflect.rtype)",
      "type" : "Tuple",
      "underlying" : 41
    }, {
      "local-name" : "Kind",
      "name" : "reflect.Kind",
      "package" : 0,
      "type" : "Named",
      "underlying" : 43
    }, {
      "name" : "uint",
      "type" : "Basic",
      "underlying" : 43
    }, {
      "name" : "func() reflect.Kind",
      "params" : 37,
      "recv" : -1,
      "results" : 45,
      "type" : "Signature",
      "underlying" : 44,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 42
      } ],
      "name" : "(reflect.Kind)",
      "type" : "Tuple",
      "underlying" : 45
    }, {
      "name" : "func(t *reflect.rtype) bool",
      "params" : 47,
      "recv" : -1,
      "results" : 22,
      "type" : "Signature",
      "underlying" : 46,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "t",
        "type" : 34
      } ],
      "name" : "(t *reflect.rtype)",
      "type" : "Tuple",
      "underlying" : 47
    }, {
      "name" : "func(*reflect.rtype) unsafe.Pointer",
      "params" : 49,
      "recv" : -1,
      "results" : 50,
      "type" : "Signature",
      "underlying" : 48,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 34
      } ],
      "name" : "(*reflect.rtype)",
      "type" : "Tuple",
      "underlying" : 49
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 21
      } ],
      "name" : "(unsafe.Pointer)",
      "type" : "Tuple",
      "underlying" : 50
    }, {
      "name" : "untyped bool",
      "type" : "Basic",
      "underlying" : 51
    }, {
      "name" : "func(t *reflect.rtype, dst unsafe.Pointer, src unsafe.Pointer)",
      "params" : 53,
      "recv" : -1,
      "results" : 37,
      "type" : "Signature",
      "underlying" : 52,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "t",
        "type" : 34
      }, {
        "name" : "dst",
        "type" : 21
      }, {
        "name" : "src",
        "type" : 21
      } ],
      "name" : "(t *reflect.rtype, dst unsafe.Pointer, src unsafe.Pointer)",
      "type" : "Tuple",
      "underlying" : 53
    }, {
      "name" : "func(p unsafe.Pointer, x uintptr, whySafe string) unsafe.Pointer",
      "params" : 55,
      "recv" : -1,
      "results" : 50,
      "type" : "Signature",
      "underlying" : 54,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "p",
        "type" : 21
      }, {
        "name" : "x",
        "type" : 5
      }, {
        "name" : "whySafe",
        "type" : 56
      } ],
      "name" : "(p unsafe.Pointer, x uintptr, whySafe string)",
      "type" : "Tuple",
      "underlying" : 55
    }, {
      "name" : "string",
      "type" : "Basic",
      "underlying" : 56
    }, {
      "elem" : 21,
      "name" : "*unsafe.Pointer",
      "type" : "Pointer",
      "underlying" : 57
    }, {
      "name" : "func([]reflect.Value, ...reflect.Value) []reflect.Value",
      "params" : 59,
      "recv" : -1,
      "results" : 30,
      "type" : "Signature",
      "underlying" : 58,
      "variadic" : true
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 31
      }, {
        "name" : "",
        "type" : 31
      } ],
      "name" : "([]reflect.Value, []reflect.Value)",
      "type" : "Tuple",
      "underlying" : 59
    }, {
      "name" : "func() int",
      "params" : 37,
      "recv" : -1,
      "results" : 61,
      "type" : "Signature",
      "underlying" : 60,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 38
      } ],
      "name" : "(int)",
      "type" : "Tuple",
      "underlying" : 61
    }, {
      "name" : "func([]reflect.Value) int",
      "params" : 30,
      "recv" : -1,
      "results" : 61,
      "type" : "Signature",
      "underlying" : 62,
      "variadic" : false
    }, {
      "name" : "func(interface{})",
      "params" : 64,
      "recv" : -1,
      "results" : 37,
      "type" : "Signature",
      "underlying" : 63,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 65
      } ],
      "name" : "(interface{})",
      "type" : "Tuple",
      "underlying" : 64
    }, {
      "methods" : [ ],
      "name" : "interface{}",
      "type" : "Interface",
      "underlying" : 65
    }, {
      "name" : "untyped nil",
      "type" : "Basic",
      "underlying" : 66
    }, {
      "name" : "func(f func([]reflect.Value) []reflect.Value) string",
      "params" : 68,
      "recv" : -1,
      "results" : 69,
      "type" : "Signature",
      "underlying" : 67,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "f",
        "type" : 29
      } ],
      "name" : "(f func([]reflect.Value) []reflect.Value)",
      "type" : "Tuple",
      "underlying" : 68
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 56
      } ],
      "name" : "(string)",
      "type" : "Tuple",
      "underlying" : 69
    }, {
      "name" : "func(context string, dst *reflect.rtype, target unsafe.Pointer) reflect.Value",
      "params" : 71,
      "recv" : -1,
      "results" : 72,
      "type" : "Signature",
      "underlying" : 70,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "context",
        "type" : 56
      }, {
        "name" : "dst",
        "type" : 34
      }, {
        "name" : "target",
        "type" : 21
      } ],
      "name" : "(context string, dst *reflect.rtype, target unsafe.Pointer)",
      "type" : "Tuple",
      "underlying" : 71
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 32
      } ],
      "name" : "(reflect.Value)",
      "type" : "Tuple",
      "underlying" : 72
    }, {
      "name" : "func(dst unsafe.Pointer, src unsafe.Pointer, size uintptr)",
      "params" : 74,
      "recv" : -1,
      "results" : 37,
      "type" : "Signature",
      "underlying" : 73,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "dst",
        "type" : 21
      }, {
        "name" : "src",
        "type" : 21
      }, {
        "name" : "size",
        "type" : 5
      } ],
      "name" : "(dst unsafe.Pointer, src unsafe.Pointer, size uintptr)",
      "type" : "Tuple",
      "underlying" : 74
    }, {
      "elem" : 5,
      "name" : "*uintptr",
      "type" : "Pointer",
      "underlying" : 75
    }, {
      "name" : "func(x interface{})",
      "params" : 77,
      "recv" : -1,
      "results" : 37,
      "type" : "Signature",
      "underlying" : 76,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "x",
        "type" : 65
      } ],
      "name" : "(x interface{})",
      "type" : "Tuple",
      "underlying" : 77
    } ],
    "variables" : [ {
      "name" : "ctxt",
      "package" : 0,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "frame",
      "package" : 0,
      "type" : 21,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "retValid",
      "package" : 0,
      "type" : 36,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "ftyp",
      "package" : 0,
      "type" : 12,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "ftyp",
      "package" : 0,
      "type" : 12,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "fn",
      "package" : 0,
      "type" : 29,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "f",
      "package" : 0,
      "type" : 29,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "ptr",
      "package" : 0,
      "type" : 21,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "off",
      "package" : 0,
      "type" : 5,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "inCount",
      "package" : 0,
      "type" : 28,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "in",
      "package" : 0,
      "type" : 31,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "typ",
      "package" : 0,
      "type" : 34,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "align",
      "package" : 0,
      "type" : 18,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "v",
      "package" : 0,
      "type" : 32,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "ptr",
      "package" : 0,
      "type" : 21,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "size",
      "package" : 0,
      "type" : 5,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "flag",
      "package" : 0,
      "type" : 35,
      "exported" : false,
      "embedded" : true,
      "field" : true
    }, {
      "name" : "_",
      "package" : 0,
      "type" : 38,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "out",
      "package" : 0,
      "type" : 31,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "numOut",
      "package" : 0,
      "type" : 38,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "i",
      "package" : 0,
      "type" : 38,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "v",
      "package" : 0,
      "type" : 32,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "typ",
      "package" : 0,
      "type" : 34,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "typ",
      "package" : 0,
      "type" : 34,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "addr",
      "package" : 0,
      "type" : 21,
      "exported" : false,
      "embedded" : false,
      "field" : false
    } ]
  },
  "go-version" : "1.14.3"
}