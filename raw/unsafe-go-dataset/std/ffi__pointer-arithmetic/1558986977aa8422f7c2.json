{
  "usage" : {
    "file" : "syscall_linux.go",
    "label1" : "pointer-arithmetic",
    "label2" : "ffi",
    "line" : "1506",
    "module" : "golang.org/x/sys",
    "pkg" : "golang.org/x/sys/unix",
    "project" : "cilium/cilium",
    "snippet" : "err = ptrace(peekReq, pid, addr+uintptr(n), uintptr(unsafe.Pointer(&buf[0])))",
    "version" : "v0.0.0-20200420163511-1957bb5e6d1f"
  },
  "cfg" : {
    "blocks" : [ {
      "update-vars" : [ ],
      "successors" : [ 2 ],
      "in-vars" : [ 4, 5, 1, 3, 2 ],
      "exit" : false,
      "out-vars" : [ 4, 5, 1, 3, 2 ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[entry]",
      "entry" : true,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ ],
      "in-vars" : [ ],
      "exit" : true,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[exit]",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 3 ],
      "in-vars" : [ 4, 5, 1, 3, 2 ],
      "exit" : false,
      "out-vars" : [ 8, 4, 5, 1, 3, 2 ],
      "decl-vars" : [ 8 ],
      "line-start" : 1476,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "n"
          }
        } ],
        "right" : [ {
          "go-type" : 2,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "0"
          }
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 1476,
      "code" : "n := 0",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 4, 14 ],
      "in-vars" : [ 1, 3, 2, 8, 4, 5 ],
      "exit" : false,
      "out-vars" : [ 8, 4, 5, 1, 3, 2 ],
      "decl-vars" : [ ],
      "line-start" : 1477,
      "ast" : {
        "condition" : {
          "go-type" : 13,
          "kind" : "expression",
          "left" : {
            "go-type" : 3,
            "kind" : "expression",
            "left" : {
              "go-type" : 3,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "addr",
                "variable" : 4
              }
            },
            "operator" : "%",
            "right" : {
              "go-type" : 3,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "8"
              }
            },
            "type" : "binary"
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 3,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 1490,
      "code" : "if addr%SizeofPtr != 0 {\n\tvar buf [SizeofPtr]byte\n\terr = ptrace(peekReq, pid, addr-addr%SizeofPtr, uintptr(unsafe.Pointer(&buf[0])))\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tn += copy(buf[addr%SizeofPtr:], data)\n\tword := *((*uintptr)(unsafe.Pointer(&buf[0])))\n\terr = ptrace(pokeReq, pid, addr-addr%SizeofPtr, word)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\tdata = data[n:]\n}",
      "entry" : false,
      "use-vars" : [ 4 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 5 ],
      "in-vars" : [ 8, 4, 5, 1, 3, 2 ],
      "exit" : false,
      "out-vars" : [ 9, 8, 4, 5, 1, 3, 2 ],
      "decl-vars" : [ 9 ],
      "line-start" : 1478,
      "ast" : {
        "kind" : "statement",
        "target" : {
          "kind" : "decl",
          "specs" : [ {
            "comments" : [ ],
            "declared-type" : {
              "element" : {
                "go-type" : 5,
                "kind" : "type",
                "type" : "identifier",
                "value" : {
                  "go-type" : 5,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "byte"
                }
              },
              "go-type" : 14,
              "kind" : "type",
              "length" : {
                "go-type" : 15,
                "kind" : "constant",
                "value" : {
                  "type" : "INT",
                  "value" : "8"
                }
              },
              "type" : "array"
            },
            "kind" : "spec",
            "names" : [ {
              "ident-kind" : "NoKind",
              "kind" : "ident",
              "value" : "buf"
            } ],
            "type" : "var",
            "values" : [ ]
          } ],
          "type" : "var"
        },
        "type" : "declaration"
      },
      "assign-vars" : [ ],
      "line-end" : 1478,
      "code" : "var buf [SizeofPtr]byte",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ 7 ],
      "successors" : [ 6 ],
      "in-vars" : [ 9, 8, 4, 5, 1, 3, 2 ],
      "exit" : false,
      "out-vars" : [ 1, 3, 2, 9, 7, 8, 4, 5 ],
      "decl-vars" : [ ],
      "line-start" : 1479,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 7,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "err",
            "variable" : 7
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "peekReq",
              "variable" : 2
            }
          }, {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "pid",
              "variable" : 3
            }
          }, {
            "go-type" : 3,
            "kind" : "expression",
            "left" : {
              "go-type" : 3,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "addr",
                "variable" : 4
              }
            },
            "operator" : "-",
            "right" : {
              "go-type" : 3,
              "kind" : "expression",
              "left" : {
                "go-type" : 3,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "addr",
                  "variable" : 4
                }
              },
              "operator" : "%",
              "right" : {
                "go-type" : 3,
                "kind" : "constant",
                "value" : {
                  "type" : "INT",
                  "value" : "8"
                }
              },
              "type" : "binary"
            },
            "type" : "binary"
          }, {
            "coerced-to" : {
              "go-type" : 3,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 3,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "uintptr"
              }
            },
            "go-type" : 3,
            "kind" : "expression",
            "target" : {
              "coerced-to" : {
                "go-type" : 19,
                "kind" : "type",
                "qualifier" : {
                  "ident-kind" : "PkgName",
                  "kind" : "ident",
                  "package" : 1,
                  "value" : "unsafe"
                },
                "type" : "identifier",
                "value" : {
                  "go-type" : 19,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "Pointer"
                }
              },
              "go-type" : 19,
              "kind" : "expression",
              "target" : {
                "go-type" : 20,
                "kind" : "expression",
                "operator" : "&",
                "target" : {
                  "go-type" : 5,
                  "index" : {
                    "go-type" : 2,
                    "kind" : "constant",
                    "value" : {
                      "type" : "INT",
                      "value" : "0"
                    }
                  },
                  "kind" : "expression",
                  "target" : {
                    "go-type" : 14,
                    "kind" : "expression",
                    "type" : "identifier",
                    "value" : {
                      "ident-kind" : "Var",
                      "kind" : "ident",
                      "value" : "buf",
                      "variable" : 9
                    }
                  },
                  "type" : "index"
                },
                "type" : "unary"
              },
              "type" : "cast"
            },
            "type" : "cast"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 16,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "ptrace"
            }
          },
          "go-type" : 7,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 7 ],
      "line-end" : 1479,
      "code" : "err = ptrace(peekReq, pid, addr-addr%SizeofPtr, uintptr(unsafe.Pointer(&buf[0])))",
      "entry" : false,
      "use-vars" : [ 3, 4, 9, 2 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 7, 8 ],
      "in-vars" : [ 2, 9, 7, 8, 4, 5, 1, 3 ],
      "exit" : false,
      "out-vars" : [ 9, 7, 8, 4, 5, 1, 3, 2 ],
      "decl-vars" : [ ],
      "line-start" : 1480,
      "ast" : {
        "condition" : {
          "go-type" : 13,
          "kind" : "expression",
          "left" : {
            "go-type" : 7,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "err",
              "variable" : 7
            }
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 21,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Nil",
              "kind" : "ident",
              "value" : "nil"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 1482,
      "code" : "if err != nil {\n\treturn 0, err\n}",
      "entry" : false,
      "use-vars" : [ 7 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 7 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 1481,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 2,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "0"
          }
        }, {
          "go-type" : 7,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "err",
            "variable" : 7
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 1481,
      "code" : "return 0, err",
      "entry" : false,
      "use-vars" : [ 7 ]
    }, {
      "update-vars" : [ 8 ],
      "successors" : [ 9 ],
      "in-vars" : [ 2, 9, 8, 4, 5, 1, 3 ],
      "exit" : false,
      "out-vars" : [ 5, 1, 3, 2, 9, 8, 4 ],
      "decl-vars" : [ ],
      "line-start" : 1483,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 2,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "n",
            "variable" : 8
          }
        } ],
        "operator" : "+",
        "right" : [ {
          "arguments" : [ {
            "go-type" : 4,
            "type" : "slice",
            "three" : false,
            "high" : null,
            "max" : null,
            "kind" : "expression",
            "low" : {
              "go-type" : 3,
              "kind" : "expression",
              "left" : {
                "go-type" : 3,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "addr",
                  "variable" : 4
                }
              },
              "operator" : "%",
              "right" : {
                "go-type" : 3,
                "kind" : "constant",
                "value" : {
                  "type" : "INT",
                  "value" : "8"
                }
              },
              "type" : "binary"
            },
            "target" : {
              "go-type" : 14,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "buf",
                "variable" : 9
              }
            }
          }, {
            "go-type" : 4,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "data",
              "variable" : 5
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 22,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Builtin",
              "kind" : "ident",
              "value" : "copy"
            }
          },
          "go-type" : 2,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign-operator"
      },
      "assign-vars" : [ 8 ],
      "line-end" : 1483,
      "code" : "n += copy(buf[addr%SizeofPtr:], data)",
      "entry" : false,
      "use-vars" : [ 9, 4, 5, 8 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 10 ],
      "in-vars" : [ 3, 2, 9, 8, 4, 5, 1 ],
      "exit" : false,
      "out-vars" : [ 3, 10, 2, 8, 4, 5, 1 ],
      "decl-vars" : [ 10 ],
      "line-start" : 1484,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "word"
          }
        } ],
        "right" : [ {
          "go-type" : 3,
          "kind" : "expression",
          "target" : {
            "go-type" : 25,
            "kind" : "expression",
            "target" : {
              "coerced-to" : {
                "contained" : {
                  "go-type" : 3,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 3,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "uintptr"
                  }
                },
                "go-type" : 25,
                "kind" : "type",
                "type" : "pointer"
              },
              "go-type" : 25,
              "kind" : "expression",
              "target" : {
                "coerced-to" : {
                  "go-type" : 19,
                  "kind" : "type",
                  "qualifier" : {
                    "ident-kind" : "PkgName",
                    "kind" : "ident",
                    "package" : 1,
                    "value" : "unsafe"
                  },
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 19,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "Pointer"
                  }
                },
                "go-type" : 19,
                "kind" : "expression",
                "target" : {
                  "go-type" : 20,
                  "kind" : "expression",
                  "operator" : "&",
                  "target" : {
                    "go-type" : 5,
                    "index" : {
                      "go-type" : 2,
                      "kind" : "constant",
                      "value" : {
                        "type" : "INT",
                        "value" : "0"
                      }
                    },
                    "kind" : "expression",
                    "target" : {
                      "go-type" : 14,
                      "kind" : "expression",
                      "type" : "identifier",
                      "value" : {
                        "ident-kind" : "Var",
                        "kind" : "ident",
                        "value" : "buf",
                        "variable" : 9
                      }
                    },
                    "type" : "index"
                  },
                  "type" : "unary"
                },
                "type" : "cast"
              },
              "type" : "cast"
            },
            "type" : "paren"
          },
          "type" : "star"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 1484,
      "code" : "word := *((*uintptr)(unsafe.Pointer(&buf[0])))",
      "entry" : false,
      "use-vars" : [ 9 ]
    }, {
      "update-vars" : [ 7 ],
      "successors" : [ 11 ],
      "in-vars" : [ 2, 8, 4, 5, 1, 3, 10 ],
      "exit" : false,
      "out-vars" : [ 3, 2, 7, 8, 4, 5, 1 ],
      "decl-vars" : [ ],
      "line-start" : 1485,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 7,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "err",
            "variable" : 7
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "pokeReq",
              "variable" : 1
            }
          }, {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "pid",
              "variable" : 3
            }
          }, {
            "go-type" : 3,
            "kind" : "expression",
            "left" : {
              "go-type" : 3,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "addr",
                "variable" : 4
              }
            },
            "operator" : "-",
            "right" : {
              "go-type" : 3,
              "kind" : "expression",
              "left" : {
                "go-type" : 3,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "addr",
                  "variable" : 4
                }
              },
              "operator" : "%",
              "right" : {
                "go-type" : 3,
                "kind" : "constant",
                "value" : {
                  "type" : "INT",
                  "value" : "8"
                }
              },
              "type" : "binary"
            },
            "type" : "binary"
          }, {
            "go-type" : 3,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "word",
              "variable" : 10
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 16,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "ptrace"
            }
          },
          "go-type" : 7,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 7 ],
      "line-end" : 1485,
      "code" : "err = ptrace(pokeReq, pid, addr-addr%SizeofPtr, word)",
      "entry" : false,
      "use-vars" : [ 1, 3, 4, 10 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 12, 13 ],
      "in-vars" : [ 1, 3, 2, 7, 8, 4, 5 ],
      "exit" : false,
      "out-vars" : [ 7, 8, 4, 5, 1, 3, 2 ],
      "decl-vars" : [ ],
      "line-start" : 1486,
      "ast" : {
        "condition" : {
          "go-type" : 13,
          "kind" : "expression",
          "left" : {
            "go-type" : 7,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "err",
              "variable" : 7
            }
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 21,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Nil",
              "kind" : "ident",
              "value" : "nil"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 1488,
      "code" : "if err != nil {\n\treturn 0, err\n}",
      "entry" : false,
      "use-vars" : [ 7 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 7 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 1487,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 2,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "0"
          }
        }, {
          "go-type" : 7,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "err",
            "variable" : 7
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 1487,
      "code" : "return 0, err",
      "entry" : false,
      "use-vars" : [ 7 ]
    }, {
      "update-vars" : [ 5 ],
      "successors" : [ 14 ],
      "in-vars" : [ 1, 3, 2, 8, 4, 5 ],
      "exit" : false,
      "out-vars" : [ 8, 4, 5, 1, 3, 2 ],
      "decl-vars" : [ ],
      "line-start" : 1489,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 4,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "data",
            "variable" : 5
          }
        } ],
        "right" : [ {
          "go-type" : 4,
          "type" : "slice",
          "three" : false,
          "high" : null,
          "max" : null,
          "kind" : "expression",
          "low" : {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "n",
              "variable" : 8
            }
          },
          "target" : {
            "go-type" : 4,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "data",
              "variable" : 5
            }
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 5 ],
      "line-end" : 1489,
      "code" : "data = data[n:]",
      "entry" : false,
      "use-vars" : [ 5, 8 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 15, 21 ],
      "in-vars" : [ 3, 2, 8, 4, 5, 1 ],
      "exit" : false,
      "out-vars" : [ 3, 2, 8, 4, 5, 1 ],
      "decl-vars" : [ ],
      "line-start" : 1493,
      "ast" : {
        "condition" : {
          "go-type" : 13,
          "kind" : "expression",
          "left" : {
            "arguments" : [ {
              "go-type" : 4,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "data",
                "variable" : 5
              }
            } ],
            "ellipsis" : false,
            "function" : {
              "go-type" : 26,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Builtin",
                "kind" : "ident",
                "value" : "len"
              }
            },
            "go-type" : 2,
            "kind" : "expression",
            "type" : "call"
          },
          "operator" : ">",
          "right" : {
            "go-type" : 2,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "8"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "for"
      },
      "assign-vars" : [ ],
      "line-end" : 1501,
      "code" : "for len(data) > SizeofPtr {\n\tword := *((*uintptr)(unsafe.Pointer(&data[0])))\n\terr = ptrace(pokeReq, pid, addr+uintptr(n), word)\n\tif err != nil {\n\t\treturn n, err\n\t}\n\tn += SizeofPtr\n\tdata = data[SizeofPtr:]\n}",
      "entry" : false,
      "use-vars" : [ 5 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 16 ],
      "in-vars" : [ 4, 5, 1, 3, 2, 8 ],
      "exit" : false,
      "out-vars" : [ 8, 4, 5, 11, 1, 3, 2 ],
      "decl-vars" : [ 11 ],
      "line-start" : 1494,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "word"
          }
        } ],
        "right" : [ {
          "go-type" : 3,
          "kind" : "expression",
          "target" : {
            "go-type" : 25,
            "kind" : "expression",
            "target" : {
              "coerced-to" : {
                "contained" : {
                  "go-type" : 3,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 3,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "uintptr"
                  }
                },
                "go-type" : 25,
                "kind" : "type",
                "type" : "pointer"
              },
              "go-type" : 25,
              "kind" : "expression",
              "target" : {
                "coerced-to" : {
                  "go-type" : 19,
                  "kind" : "type",
                  "qualifier" : {
                    "ident-kind" : "PkgName",
                    "kind" : "ident",
                    "package" : 1,
                    "value" : "unsafe"
                  },
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 19,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "Pointer"
                  }
                },
                "go-type" : 19,
                "kind" : "expression",
                "target" : {
                  "go-type" : 20,
                  "kind" : "expression",
                  "operator" : "&",
                  "target" : {
                    "go-type" : 5,
                    "index" : {
                      "go-type" : 2,
                      "kind" : "constant",
                      "value" : {
                        "type" : "INT",
                        "value" : "0"
                      }
                    },
                    "kind" : "expression",
                    "target" : {
                      "go-type" : 4,
                      "kind" : "expression",
                      "type" : "identifier",
                      "value" : {
                        "ident-kind" : "Var",
                        "kind" : "ident",
                        "value" : "data",
                        "variable" : 5
                      }
                    },
                    "type" : "index"
                  },
                  "type" : "unary"
                },
                "type" : "cast"
              },
              "type" : "cast"
            },
            "type" : "paren"
          },
          "type" : "star"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 1494,
      "code" : "word := *((*uintptr)(unsafe.Pointer(&data[0])))",
      "entry" : false,
      "use-vars" : [ 5 ]
    }, {
      "update-vars" : [ 7 ],
      "successors" : [ 17 ],
      "in-vars" : [ 11, 1, 3, 2, 8, 4, 5 ],
      "exit" : false,
      "out-vars" : [ 4, 5, 1, 3, 2, 7, 8 ],
      "decl-vars" : [ ],
      "line-start" : 1495,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 7,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "err",
            "variable" : 7
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "pokeReq",
              "variable" : 1
            }
          }, {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "pid",
              "variable" : 3
            }
          }, {
            "go-type" : 3,
            "kind" : "expression",
            "left" : {
              "go-type" : 3,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "addr",
                "variable" : 4
              }
            },
            "operator" : "+",
            "right" : {
              "coerced-to" : {
                "go-type" : 3,
                "kind" : "type",
                "type" : "identifier",
                "value" : {
                  "go-type" : 3,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "uintptr"
                }
              },
              "go-type" : 3,
              "kind" : "expression",
              "target" : {
                "go-type" : 2,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "n",
                  "variable" : 8
                }
              },
              "type" : "cast"
            },
            "type" : "binary"
          }, {
            "go-type" : 3,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "word",
              "variable" : 11
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 16,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "ptrace"
            }
          },
          "go-type" : 7,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 7 ],
      "line-end" : 1495,
      "code" : "err = ptrace(pokeReq, pid, addr+uintptr(n), word)",
      "entry" : false,
      "use-vars" : [ 8, 11, 1, 3, 4 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 18, 19 ],
      "in-vars" : [ 2, 7, 8, 4, 5, 1, 3 ],
      "exit" : false,
      "out-vars" : [ 2, 7, 8, 4, 5, 1, 3 ],
      "decl-vars" : [ ],
      "line-start" : 1496,
      "ast" : {
        "condition" : {
          "go-type" : 13,
          "kind" : "expression",
          "left" : {
            "go-type" : 7,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "err",
              "variable" : 7
            }
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 21,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Nil",
              "kind" : "ident",
              "value" : "nil"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 1498,
      "code" : "if err != nil {\n\treturn n, err\n}",
      "entry" : false,
      "use-vars" : [ 7 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 8, 7 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 1497,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 2,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "n",
            "variable" : 8
          }
        }, {
          "go-type" : 7,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "err",
            "variable" : 7
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 1497,
      "code" : "return n, err",
      "entry" : false,
      "use-vars" : [ 8, 7 ]
    }, {
      "update-vars" : [ 8 ],
      "successors" : [ 20 ],
      "in-vars" : [ 1, 3, 2, 8, 4, 5 ],
      "exit" : false,
      "out-vars" : [ 4, 5, 1, 3, 2, 8 ],
      "decl-vars" : [ ],
      "line-start" : 1499,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 2,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "n",
            "variable" : 8
          }
        } ],
        "operator" : "+",
        "right" : [ {
          "go-type" : 2,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "8"
          }
        } ],
        "type" : "assign-operator"
      },
      "assign-vars" : [ 8 ],
      "line-end" : 1499,
      "code" : "n += SizeofPtr",
      "entry" : false,
      "use-vars" : [ 8 ]
    }, {
      "update-vars" : [ 5 ],
      "successors" : [ 14 ],
      "in-vars" : [ 8, 4, 5, 1, 3, 2 ],
      "exit" : false,
      "out-vars" : [ 4, 5, 1, 3, 2, 8 ],
      "decl-vars" : [ ],
      "line-start" : 1500,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 4,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "data",
            "variable" : 5
          }
        } ],
        "right" : [ {
          "go-type" : 4,
          "type" : "slice",
          "three" : false,
          "high" : null,
          "max" : null,
          "kind" : "expression",
          "low" : {
            "go-type" : 2,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "8"
            }
          },
          "target" : {
            "go-type" : 4,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "data",
              "variable" : 5
            }
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 5 ],
      "line-end" : 1500,
      "code" : "data = data[SizeofPtr:]",
      "entry" : false,
      "use-vars" : [ 5 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 22, 32 ],
      "in-vars" : [ 3, 2, 8, 4, 5, 1 ],
      "exit" : false,
      "out-vars" : [ 8, 4, 5, 1, 3, 2 ],
      "decl-vars" : [ ],
      "line-start" : 1504,
      "ast" : {
        "condition" : {
          "go-type" : 13,
          "kind" : "expression",
          "left" : {
            "arguments" : [ {
              "go-type" : 4,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "data",
                "variable" : 5
              }
            } ],
            "ellipsis" : false,
            "function" : {
              "go-type" : 26,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Builtin",
                "kind" : "ident",
                "value" : "len"
              }
            },
            "go-type" : 2,
            "kind" : "expression",
            "type" : "call"
          },
          "operator" : ">",
          "right" : {
            "go-type" : 2,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 1517,
      "code" : "if len(data) > 0 {\n\tvar buf [SizeofPtr]byte\n\terr = ptrace(peekReq, pid, addr+uintptr(n), uintptr(unsafe.Pointer(&buf[0])))\n\tif err != nil {\n\t\treturn n, err\n\t}\n\tcopy(buf[0:], data)\n\tword := *((*uintptr)(unsafe.Pointer(&buf[0])))\n\terr = ptrace(pokeReq, pid, addr+uintptr(n), word)\n\tif err != nil {\n\t\treturn n, err\n\t}\n\tn += len(data)\n}",
      "entry" : false,
      "use-vars" : [ 5 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 23 ],
      "in-vars" : [ 5, 1, 3, 2, 8, 4 ],
      "exit" : false,
      "out-vars" : [ 4, 5, 1, 3, 12, 2, 8 ],
      "decl-vars" : [ 12 ],
      "line-start" : 1505,
      "ast" : {
        "kind" : "statement",
        "target" : {
          "kind" : "decl",
          "specs" : [ {
            "comments" : [ ],
            "declared-type" : {
              "element" : {
                "go-type" : 5,
                "kind" : "type",
                "type" : "identifier",
                "value" : {
                  "go-type" : 5,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "byte"
                }
              },
              "go-type" : 14,
              "kind" : "type",
              "length" : {
                "go-type" : 15,
                "kind" : "constant",
                "value" : {
                  "type" : "INT",
                  "value" : "8"
                }
              },
              "type" : "array"
            },
            "kind" : "spec",
            "names" : [ {
              "ident-kind" : "NoKind",
              "kind" : "ident",
              "value" : "buf"
            } ],
            "type" : "var",
            "values" : [ ]
          } ],
          "type" : "var"
        },
        "type" : "declaration"
      },
      "assign-vars" : [ ],
      "line-end" : 1505,
      "code" : "var buf [SizeofPtr]byte",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ 7 ],
      "successors" : [ 24 ],
      "in-vars" : [ 2, 8, 4, 5, 1, 3, 12 ],
      "exit" : false,
      "out-vars" : [ 4, 5, 1, 3, 12, 7, 8 ],
      "decl-vars" : [ ],
      "line-start" : 1506,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 7,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "err",
            "variable" : 7
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "peekReq",
              "variable" : 2
            }
          }, {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "pid",
              "variable" : 3
            }
          }, {
            "go-type" : 3,
            "kind" : "expression",
            "left" : {
              "go-type" : 3,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "addr",
                "variable" : 4
              }
            },
            "operator" : "+",
            "right" : {
              "coerced-to" : {
                "go-type" : 3,
                "kind" : "type",
                "type" : "identifier",
                "value" : {
                  "go-type" : 3,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "uintptr"
                }
              },
              "go-type" : 3,
              "kind" : "expression",
              "target" : {
                "go-type" : 2,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "n",
                  "variable" : 8
                }
              },
              "type" : "cast"
            },
            "type" : "binary"
          }, {
            "coerced-to" : {
              "go-type" : 3,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 3,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "uintptr"
              }
            },
            "go-type" : 3,
            "kind" : "expression",
            "target" : {
              "coerced-to" : {
                "go-type" : 19,
                "kind" : "type",
                "qualifier" : {
                  "ident-kind" : "PkgName",
                  "kind" : "ident",
                  "package" : 1,
                  "value" : "unsafe"
                },
                "type" : "identifier",
                "value" : {
                  "go-type" : 19,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "Pointer"
                }
              },
              "go-type" : 19,
              "kind" : "expression",
              "target" : {
                "go-type" : 20,
                "kind" : "expression",
                "operator" : "&",
                "target" : {
                  "go-type" : 5,
                  "index" : {
                    "go-type" : 2,
                    "kind" : "constant",
                    "value" : {
                      "type" : "INT",
                      "value" : "0"
                    }
                  },
                  "kind" : "expression",
                  "target" : {
                    "go-type" : 14,
                    "kind" : "expression",
                    "type" : "identifier",
                    "value" : {
                      "ident-kind" : "Var",
                      "kind" : "ident",
                      "value" : "buf",
                      "variable" : 12
                    }
                  },
                  "type" : "index"
                },
                "type" : "unary"
              },
              "type" : "cast"
            },
            "type" : "cast"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 16,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "ptrace"
            }
          },
          "go-type" : 7,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 7 ],
      "line-end" : 1506,
      "code" : "err = ptrace(peekReq, pid, addr+uintptr(n), uintptr(unsafe.Pointer(&buf[0])))",
      "entry" : false,
      "use-vars" : [ 8, 12, 3, 2, 4 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 25, 26 ],
      "in-vars" : [ 7, 8, 4, 5, 1, 3, 12 ],
      "exit" : false,
      "out-vars" : [ 7, 8, 4, 5, 1, 3, 12 ],
      "decl-vars" : [ ],
      "line-start" : 1507,
      "ast" : {
        "condition" : {
          "go-type" : 13,
          "kind" : "expression",
          "left" : {
            "go-type" : 7,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "err",
              "variable" : 7
            }
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 21,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Nil",
              "kind" : "ident",
              "value" : "nil"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 1509,
      "code" : "if err != nil {\n\treturn n, err\n}",
      "entry" : false,
      "use-vars" : [ 7 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 7, 8 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 1508,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 2,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "n",
            "variable" : 8
          }
        }, {
          "go-type" : 7,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "err",
            "variable" : 7
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 1508,
      "code" : "return n, err",
      "entry" : false,
      "use-vars" : [ 7, 8 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 27 ],
      "in-vars" : [ 4, 5, 1, 3, 12, 8 ],
      "exit" : false,
      "out-vars" : [ 8, 4, 5, 1, 3, 12 ],
      "decl-vars" : [ ],
      "line-start" : 1510,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 4,
            "type" : "slice",
            "three" : false,
            "high" : null,
            "max" : null,
            "kind" : "expression",
            "low" : {
              "go-type" : 2,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "0"
              }
            },
            "target" : {
              "go-type" : 14,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "buf",
                "variable" : 12
              }
            }
          }, {
            "go-type" : 4,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "data",
              "variable" : 5
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 22,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Builtin",
              "kind" : "ident",
              "value" : "copy"
            }
          },
          "go-type" : 2,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 1510,
      "code" : "copy(buf[0:], data)",
      "entry" : false,
      "use-vars" : [ 12, 5 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 28 ],
      "in-vars" : [ 4, 5, 1, 3, 12, 8 ],
      "exit" : false,
      "out-vars" : [ 8, 4, 5, 1, 3, 13 ],
      "decl-vars" : [ 13 ],
      "line-start" : 1511,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "word"
          }
        } ],
        "right" : [ {
          "go-type" : 3,
          "kind" : "expression",
          "target" : {
            "go-type" : 25,
            "kind" : "expression",
            "target" : {
              "coerced-to" : {
                "contained" : {
                  "go-type" : 3,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 3,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "uintptr"
                  }
                },
                "go-type" : 25,
                "kind" : "type",
                "type" : "pointer"
              },
              "go-type" : 25,
              "kind" : "expression",
              "target" : {
                "coerced-to" : {
                  "go-type" : 19,
                  "kind" : "type",
                  "qualifier" : {
                    "ident-kind" : "PkgName",
                    "kind" : "ident",
                    "package" : 1,
                    "value" : "unsafe"
                  },
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 19,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "Pointer"
                  }
                },
                "go-type" : 19,
                "kind" : "expression",
                "target" : {
                  "go-type" : 20,
                  "kind" : "expression",
                  "operator" : "&",
                  "target" : {
                    "go-type" : 5,
                    "index" : {
                      "go-type" : 2,
                      "kind" : "constant",
                      "value" : {
                        "type" : "INT",
                        "value" : "0"
                      }
                    },
                    "kind" : "expression",
                    "target" : {
                      "go-type" : 14,
                      "kind" : "expression",
                      "type" : "identifier",
                      "value" : {
                        "ident-kind" : "Var",
                        "kind" : "ident",
                        "value" : "buf",
                        "variable" : 12
                      }
                    },
                    "type" : "index"
                  },
                  "type" : "unary"
                },
                "type" : "cast"
              },
              "type" : "cast"
            },
            "type" : "paren"
          },
          "type" : "star"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 1511,
      "code" : "word := *((*uintptr)(unsafe.Pointer(&buf[0])))",
      "entry" : false,
      "use-vars" : [ 12 ]
    }, {
      "update-vars" : [ 7 ],
      "successors" : [ 29 ],
      "in-vars" : [ 8, 4, 5, 1, 3, 13 ],
      "exit" : false,
      "out-vars" : [ 7, 8, 5 ],
      "decl-vars" : [ ],
      "line-start" : 1512,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 7,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "err",
            "variable" : 7
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "pokeReq",
              "variable" : 1
            }
          }, {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "pid",
              "variable" : 3
            }
          }, {
            "go-type" : 3,
            "kind" : "expression",
            "left" : {
              "go-type" : 3,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "addr",
                "variable" : 4
              }
            },
            "operator" : "+",
            "right" : {
              "coerced-to" : {
                "go-type" : 3,
                "kind" : "type",
                "type" : "identifier",
                "value" : {
                  "go-type" : 3,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "uintptr"
                }
              },
              "go-type" : 3,
              "kind" : "expression",
              "target" : {
                "go-type" : 2,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "n",
                  "variable" : 8
                }
              },
              "type" : "cast"
            },
            "type" : "binary"
          }, {
            "go-type" : 3,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "word",
              "variable" : 13
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 16,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "ptrace"
            }
          },
          "go-type" : 7,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 7 ],
      "line-end" : 1512,
      "code" : "err = ptrace(pokeReq, pid, addr+uintptr(n), word)",
      "entry" : false,
      "use-vars" : [ 13, 1, 3, 4, 8 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 30, 31 ],
      "in-vars" : [ 7, 8, 5 ],
      "exit" : false,
      "out-vars" : [ 5, 7, 8 ],
      "decl-vars" : [ ],
      "line-start" : 1513,
      "ast" : {
        "condition" : {
          "go-type" : 13,
          "kind" : "expression",
          "left" : {
            "go-type" : 7,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "err",
              "variable" : 7
            }
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 21,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Nil",
              "kind" : "ident",
              "value" : "nil"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 1515,
      "code" : "if err != nil {\n\treturn n, err\n}",
      "entry" : false,
      "use-vars" : [ 7 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 7, 8 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 1514,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 2,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "n",
            "variable" : 8
          }
        }, {
          "go-type" : 7,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "err",
            "variable" : 7
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 1514,
      "code" : "return n, err",
      "entry" : false,
      "use-vars" : [ 8, 7 ]
    }, {
      "update-vars" : [ 8 ],
      "successors" : [ 32 ],
      "in-vars" : [ 8, 5 ],
      "exit" : false,
      "out-vars" : [ 8 ],
      "decl-vars" : [ ],
      "line-start" : 1516,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 2,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "n",
            "variable" : 8
          }
        } ],
        "operator" : "+",
        "right" : [ {
          "arguments" : [ {
            "go-type" : 4,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "data",
              "variable" : 5
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 26,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Builtin",
              "kind" : "ident",
              "value" : "len"
            }
          },
          "go-type" : 2,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign-operator"
      },
      "assign-vars" : [ 8 ],
      "line-end" : 1516,
      "code" : "n += len(data)",
      "entry" : false,
      "use-vars" : [ 8, 5 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 8 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 1519,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 2,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "n",
            "variable" : 8
          }
        }, {
          "go-type" : 21,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Nil",
            "kind" : "ident",
            "value" : "nil"
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 1519,
      "code" : "return n, nil",
      "entry" : false,
      "use-vars" : [ 8 ]
    } ],
    "code" : "func ptracePoke(pokeReq int, peekReq int, pid int, addr uintptr, data []byte) (count int, err error) {\n\n\tn := 0\n\tif addr%SizeofPtr != 0 {\n\t\tvar buf [SizeofPtr]byte\n\t\terr = ptrace(peekReq, pid, addr-addr%SizeofPtr, uintptr(unsafe.Pointer(&buf[0])))\n\t\tif err != nil {\n\t\t\treturn 0, err\n\t\t}\n\t\tn += copy(buf[addr%SizeofPtr:], data)\n\t\tword := *((*uintptr)(unsafe.Pointer(&buf[0])))\n\t\terr = ptrace(pokeReq, pid, addr-addr%SizeofPtr, word)\n\t\tif err != nil {\n\t\t\treturn 0, err\n\t\t}\n\t\tdata = data[n:]\n\t}\n\n\tfor len(data) > SizeofPtr {\n\t\tword := *((*uintptr)(unsafe.Pointer(&data[0])))\n\t\terr = ptrace(pokeReq, pid, addr+uintptr(n), word)\n\t\tif err != nil {\n\t\t\treturn n, err\n\t\t}\n\t\tn += SizeofPtr\n\t\tdata = data[SizeofPtr:]\n\t}\n\n\tif len(data) > 0 {\n\t\tvar buf [SizeofPtr]byte\n\t\terr = ptrace(peekReq, pid, addr+uintptr(n), uintptr(unsafe.Pointer(&buf[0])))\n\t\tif err != nil {\n\t\t\treturn n, err\n\t\t}\n\t\tcopy(buf[0:], data)\n\t\tword := *((*uintptr)(unsafe.Pointer(&buf[0])))\n\t\terr = ptrace(pokeReq, pid, addr+uintptr(n), word)\n\t\tif err != nil {\n\t\t\treturn n, err\n\t\t}\n\t\tn += len(data)\n\t}\n\n\treturn n, nil\n}",
    "defines" : [ 0 ],
    "functions" : [ {
      "name" : "ptracePoke",
      "package" : 0,
      "type" : 0,
      "exported" : false
    }, {
      "name" : "ptrace",
      "package" : 0,
      "type" : 16,
      "exported" : false
    } ],
    "line-end" : 1520,
    "line-start" : 1471,
    "names" : [ "ptracePoke" ],
    "package" : 0,
    "packages" : [ {
      "name" : "unix",
      "path" : "golang.org/x/sys/unix"
    }, {
      "name" : "unsafe",
      "path" : "unsafe"
    } ],
    "params" : [ 1, 2, 3, 4, 5 ],
    "receivers" : [ ],
    "results" : [ 6, 7 ],
    "type" : "function",
    "types" : [ {
      "name" : "func(pokeReq int, peekReq int, pid int, addr uintptr, data []byte) (count int, err error)",
      "params" : 1,
      "recv" : -1,
      "results" : 6,
      "type" : "Signature",
      "underlying" : 0,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "pokeReq",
        "type" : 2
      }, {
        "name" : "peekReq",
        "type" : 2
      }, {
        "name" : "pid",
        "type" : 2
      }, {
        "name" : "addr",
        "type" : 3
      }, {
        "name" : "data",
        "type" : 4
      } ],
      "name" : "(pokeReq int, peekReq int, pid int, addr uintptr, data []byte)",
      "type" : "Tuple",
      "underlying" : 1
    }, {
      "name" : "int",
      "type" : "Basic",
      "underlying" : 2
    }, {
      "name" : "uintptr",
      "type" : "Basic",
      "underlying" : 3
    }, {
      "elem" : 5,
      "name" : "[]byte",
      "type" : "Slice",
      "underlying" : 4
    }, {
      "name" : "byte",
      "type" : "Basic",
      "underlying" : 5
    }, {
      "fields" : [ {
        "name" : "count",
        "type" : 2
      }, {
        "name" : "err",
        "type" : 7
      } ],
      "name" : "(count int, err error)",
      "type" : "Tuple",
      "underlying" : 6
    }, {
      "local-name" : "error",
      "name" : "error",
      "package" : -1,
      "type" : "Named",
      "underlying" : 8
    }, {
      "methods" : [ {
        "name" : "Error",
        "type" : 9
      } ],
      "name" : "interface{Error() string}",
      "type" : "Interface",
      "underlying" : 8
    }, {
      "name" : "func() string",
      "params" : 10,
      "recv" : 0,
      "results" : 11,
      "type" : "Signature",
      "underlying" : 9,
      "variadic" : false
    }, {
      "fields" : [ ],
      "name" : "()",
      "type" : "Tuple",
      "underlying" : 10
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 12
      } ],
      "name" : "(string)",
      "type" : "Tuple",
      "underlying" : 11
    }, {
      "name" : "string",
      "type" : "Basic",
      "underlying" : 12
    }, {
      "name" : "untyped bool",
      "type" : "Basic",
      "underlying" : 13
    }, {
      "elem" : 5,
      "name" : "[8]byte",
      "type" : "Array",
      "underlying" : 14
    }, {
      "name" : "untyped int",
      "type" : "Basic",
      "underlying" : 15
    }, {
      "name" : "func(request int, pid int, addr uintptr, data uintptr) (err error)",
      "params" : 17,
      "recv" : -1,
      "results" : 18,
      "type" : "Signature",
      "underlying" : 16,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "request",
        "type" : 2
      }, {
        "name" : "pid",
        "type" : 2
      }, {
        "name" : "addr",
        "type" : 3
      }, {
        "name" : "data",
        "type" : 3
      } ],
      "name" : "(request int, pid int, addr uintptr, data uintptr)",
      "type" : "Tuple",
      "underlying" : 17
    }, {
      "fields" : [ {
        "name" : "err",
        "type" : 7
      } ],
      "name" : "(err error)",
      "type" : "Tuple",
      "underlying" : 18
    }, {
      "local-name" : "Pointer",
      "name" : "unsafe.Pointer",
      "package" : 1,
      "type" : "Basic",
      "underlying" : 19
    }, {
      "elem" : 5,
      "name" : "*byte",
      "type" : "Pointer",
      "underlying" : 20
    }, {
      "name" : "untyped nil",
      "type" : "Basic",
      "underlying" : 21
    }, {
      "name" : "func([]byte, []byte) int",
      "params" : 23,
      "recv" : -1,
      "results" : 24,
      "type" : "Signature",
      "underlying" : 22,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 4
      }, {
        "name" : "",
        "type" : 4
      } ],
      "name" : "([]byte, []byte)",
      "type" : "Tuple",
      "underlying" : 23
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 2
      } ],
      "name" : "(int)",
      "type" : "Tuple",
      "underlying" : 24
    }, {
      "elem" : 3,
      "name" : "*uintptr",
      "type" : "Pointer",
      "underlying" : 25
    }, {
      "name" : "func([]byte) int",
      "params" : 27,
      "recv" : -1,
      "results" : 24,
      "type" : "Signature",
      "underlying" : 26,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 4
      } ],
      "name" : "([]byte)",
      "type" : "Tuple",
      "underlying" : 27
    } ],
    "variables" : [ {
      "name" : "",
      "package" : -1,
      "type" : 7,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "pokeReq",
      "package" : 0,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "peekReq",
      "package" : 0,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "pid",
      "package" : 0,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "addr",
      "package" : 0,
      "type" : 3,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "data",
      "package" : 0,
      "type" : 4,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "count",
      "package" : 0,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "err",
      "package" : 0,
      "type" : 7,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "n",
      "package" : 0,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "buf",
      "package" : 0,
      "type" : 14,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "word",
      "package" : 0,
      "type" : 3,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "word",
      "package" : 0,
      "type" : 3,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "buf",
      "package" : 0,
      "type" : 14,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "word",
      "package" : 0,
      "type" : 3,
      "exported" : false,
      "embedded" : false,
      "field" : false
    } ]
  },
  "go-version" : "1.14.3"
}