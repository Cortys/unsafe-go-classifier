{
  "usage" : {
    "file" : "value.go",
    "label1" : "cast-struct",
    "label2" : "types",
    "line" : "1182",
    "module" : "std",
    "pkg" : "reflect",
    "project" : "kubernetes/kubernetes",
    "snippet" : "tt := (*mapType)(unsafe.Pointer(v.typ))",
    "version" : "std"
  },
  "cfg" : {
    "blocks" : [ {
      "update-vars" : [ ],
      "successors" : [ 2 ],
      "in-vars" : [ 0 ],
      "exit" : false,
      "out-vars" : [ 0 ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[entry]",
      "entry" : true,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ ],
      "in-vars" : [ ],
      "exit" : true,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[exit]",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 3 ],
      "in-vars" : [ 0 ],
      "exit" : false,
      "out-vars" : [ 0 ],
      "decl-vars" : [ ],
      "line-start" : 1181,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 26,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "21"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "mustBe"
            },
            "go-type" : 24,
            "kind" : "expression",
            "target" : {
              "go-type" : 4,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "v",
                "variable" : 0
              }
            },
            "type" : "selector"
          },
          "go-type" : 1,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 1181,
      "code" : "v.mustBe(Map)",
      "entry" : false,
      "use-vars" : [ 0 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 4 ],
      "in-vars" : [ 0 ],
      "exit" : false,
      "out-vars" : [ 3, 0 ],
      "decl-vars" : [ 3 ],
      "line-start" : 1182,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "tt"
          }
        } ],
        "right" : [ {
          "coerced-to" : {
            "contained" : {
              "go-type" : 29,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 29,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "mapType"
              }
            },
            "go-type" : 28,
            "kind" : "type",
            "type" : "pointer"
          },
          "go-type" : 28,
          "kind" : "expression",
          "target" : {
            "coerced-to" : {
              "go-type" : 15,
              "kind" : "type",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 1,
                "value" : "unsafe"
              },
              "type" : "identifier",
              "value" : {
                "go-type" : 15,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "Pointer"
              }
            },
            "go-type" : 15,
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "typ",
                "variable" : 2
              },
              "go-type" : 6,
              "kind" : "expression",
              "target" : {
                "go-type" : 4,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "v",
                  "variable" : 0
                }
              },
              "type" : "selector"
            },
            "type" : "cast"
          },
          "type" : "cast"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 1182,
      "code" : "tt := (*mapType)(unsafe.Pointer(v.typ))",
      "entry" : false,
      "use-vars" : [ 0 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 5 ],
      "in-vars" : [ 0, 3 ],
      "exit" : false,
      "out-vars" : [ 5, 0 ],
      "decl-vars" : [ 5 ],
      "line-start" : 1183,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "keyType"
          }
        } ],
        "right" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "key",
            "variable" : 4
          },
          "go-type" : 6,
          "kind" : "expression",
          "target" : {
            "go-type" : 28,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "tt",
              "variable" : 3
            }
          },
          "type" : "selector"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 1183,
      "code" : "keyType := tt.key",
      "entry" : false,
      "use-vars" : [ 3 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 6 ],
      "in-vars" : [ 5, 0 ],
      "exit" : false,
      "out-vars" : [ 5, 7, 0 ],
      "decl-vars" : [ 7 ],
      "line-start" : 1185,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "fl"
          }
        } ],
        "right" : [ {
          "go-type" : 23,
          "kind" : "expression",
          "left" : {
            "arguments" : [ ],
            "ellipsis" : false,
            "function" : {
              "field" : {
                "ident-kind" : "Func",
                "kind" : "ident",
                "value" : "ro"
              },
              "go-type" : 35,
              "kind" : "expression",
              "target" : {
                "field" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "flag",
                  "variable" : 6
                },
                "go-type" : 23,
                "kind" : "expression",
                "target" : {
                  "go-type" : 4,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "v",
                    "variable" : 0
                  }
                },
                "type" : "selector"
              },
              "type" : "selector"
            },
            "go-type" : 23,
            "kind" : "expression",
            "type" : "call"
          },
          "operator" : "|",
          "right" : {
            "coerced-to" : {
              "go-type" : 23,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 23,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "flag"
              }
            },
            "go-type" : 23,
            "kind" : "expression",
            "target" : {
              "arguments" : [ ],
              "ellipsis" : false,
              "function" : {
                "field" : {
                  "ident-kind" : "Func",
                  "kind" : "ident",
                  "value" : "Kind"
                },
                "go-type" : 37,
                "kind" : "expression",
                "target" : {
                  "go-type" : 6,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "keyType",
                    "variable" : 5
                  }
                },
                "type" : "selector"
              },
              "go-type" : 26,
              "kind" : "expression",
              "type" : "call"
            },
            "type" : "cast"
          },
          "type" : "binary"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 1185,
      "code" : "fl := v.flag.ro() | flag(keyType.Kind())",
      "entry" : false,
      "use-vars" : [ 5, 0 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 7 ],
      "in-vars" : [ 5, 7, 0 ],
      "exit" : false,
      "out-vars" : [ 5, 7, 8, 0 ],
      "decl-vars" : [ 8 ],
      "line-start" : 1187,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "m"
          }
        } ],
        "right" : [ {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "pointer"
            },
            "go-type" : 39,
            "kind" : "expression",
            "target" : {
              "go-type" : 4,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "v",
                "variable" : 0
              }
            },
            "type" : "selector"
          },
          "go-type" : 15,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 1187,
      "code" : "m := v.pointer()",
      "entry" : false,
      "use-vars" : [ 0 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 8 ],
      "in-vars" : [ 8, 0, 5, 7 ],
      "exit" : false,
      "out-vars" : [ 7, 8, 0, 9, 5 ],
      "decl-vars" : [ 9 ],
      "line-start" : 1188,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "mlen"
          }
        } ],
        "right" : [ {
          "go-type" : 41,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "0"
          }
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 1188,
      "code" : "mlen := int(0)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 9, 10 ],
      "in-vars" : [ 5, 7, 8, 0, 9 ],
      "exit" : false,
      "out-vars" : [ 5, 7, 8, 0, 9 ],
      "decl-vars" : [ ],
      "line-start" : 1189,
      "ast" : {
        "condition" : {
          "go-type" : 42,
          "kind" : "expression",
          "left" : {
            "go-type" : 15,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "m",
              "variable" : 8
            }
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 15,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Nil",
              "kind" : "ident",
              "value" : "nil"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 1191,
      "code" : "if m != nil {\n\tmlen = maplen(m)\n}",
      "entry" : false,
      "use-vars" : [ 8 ]
    }, {
      "update-vars" : [ 9 ],
      "successors" : [ 10 ],
      "in-vars" : [ 5, 7, 8, 0 ],
      "exit" : false,
      "out-vars" : [ 5, 7, 8, 0, 9 ],
      "decl-vars" : [ ],
      "line-start" : 1190,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 41,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "mlen",
            "variable" : 9
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 15,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "m",
              "variable" : 8
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 43,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "maplen"
            }
          },
          "go-type" : 41,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 9 ],
      "line-end" : 1190,
      "code" : "mlen = maplen(m)",
      "entry" : false,
      "use-vars" : [ 8 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 11 ],
      "in-vars" : [ 7, 8, 0, 9, 5 ],
      "exit" : false,
      "out-vars" : [ 5, 7, 10, 9 ],
      "decl-vars" : [ 10 ],
      "line-start" : 1192,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "it"
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "typ",
              "variable" : 2
            },
            "go-type" : 6,
            "kind" : "expression",
            "target" : {
              "go-type" : 4,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "v",
                "variable" : 0
              }
            },
            "type" : "selector"
          }, {
            "go-type" : 15,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "m",
              "variable" : 8
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 46,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "mapiterinit"
            }
          },
          "go-type" : 15,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 1192,
      "code" : "it := mapiterinit(v.typ, m)",
      "entry" : false,
      "use-vars" : [ 8, 0 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 12 ],
      "in-vars" : [ 5, 7, 10, 9 ],
      "exit" : false,
      "out-vars" : [ 11, 5, 7, 10 ],
      "decl-vars" : [ 11 ],
      "line-start" : 1193,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "a"
          }
        } ],
        "right" : [ {
          "argument" : {
            "element" : {
              "go-type" : 4,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 4,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "Value"
              }
            },
            "go-type" : 3,
            "kind" : "type",
            "type" : "slice"
          },
          "go-type" : 3,
          "kind" : "expression",
          "rest" : [ {
            "go-type" : 41,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "mlen",
              "variable" : 9
            }
          } ],
          "type" : "make"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 1193,
      "code" : "a := make([]Value, mlen)",
      "entry" : false,
      "use-vars" : [ 9 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 14 ],
      "in-vars" : [ 7, 10, 11, 5 ],
      "exit" : false,
      "out-vars" : [ 11, 5, 7, 10 ],
      "decl-vars" : [ 12 ],
      "line-start" : 1194,
      "ast" : {
        "kind" : "statement",
        "target" : {
          "kind" : "decl",
          "specs" : [ {
            "comments" : [ ],
            "declared-type" : {
              "go-type" : 41,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 41,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "int"
              }
            },
            "kind" : "spec",
            "names" : [ {
              "ident-kind" : "NoKind",
              "kind" : "ident",
              "value" : "i"
            } ],
            "type" : "var",
            "values" : [ ]
          } ],
          "type" : "var"
        },
        "type" : "declaration"
      },
      "assign-vars" : [ ],
      "line-end" : 1194,
      "code" : "var i int",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 16, 21 ],
      "in-vars" : [ 7, 10, 12, 11, 5 ],
      "exit" : false,
      "out-vars" : [ 5, 7, 10, 12, 11 ],
      "decl-vars" : [ ],
      "line-start" : 1195,
      "ast" : {
        "condition" : {
          "go-type" : 42,
          "kind" : "expression",
          "left" : {
            "go-type" : 41,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "i",
              "variable" : 12
            }
          },
          "operator" : "<",
          "right" : {
            "arguments" : [ {
              "go-type" : 3,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "a",
                "variable" : 11
              }
            } ],
            "ellipsis" : false,
            "function" : {
              "go-type" : 48,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Builtin",
                "kind" : "ident",
                "value" : "len"
              }
            },
            "go-type" : 41,
            "kind" : "expression",
            "type" : "call"
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "for"
      },
      "assign-vars" : [ ],
      "line-end" : 1205,
      "code" : "for i = 0; i < len(a); i++ {\n\tkey := mapiterkey(it)\n\tif key == nil {\n\n\t\tbreak\n\t}\n\ta[i] = copyVal(keyType, fl, key)\n\tmapiternext(it)\n}",
      "entry" : false,
      "use-vars" : [ 11, 12 ]
    }, {
      "update-vars" : [ 12 ],
      "successors" : [ 13 ],
      "in-vars" : [ 11, 5, 7, 10 ],
      "exit" : false,
      "out-vars" : [ 12, 11, 5, 7, 10 ],
      "decl-vars" : [ ],
      "line-start" : 1195,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 41,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "i",
            "variable" : 12
          }
        } ],
        "right" : [ {
          "go-type" : 41,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "0"
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 12 ],
      "line-end" : 1195,
      "code" : "i = 0",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ 12 ],
      "successors" : [ 13 ],
      "in-vars" : [ 12, 11, 5, 7, 10 ],
      "exit" : false,
      "out-vars" : [ 10, 12, 11, 5, 7 ],
      "decl-vars" : [ ],
      "line-start" : 1195,
      "ast" : {
        "kind" : "statement",
        "operation" : "++",
        "target" : {
          "go-type" : 41,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "i",
            "variable" : 12
          }
        },
        "type" : "crement"
      },
      "assign-vars" : [ 12 ],
      "line-end" : 1195,
      "code" : "i++",
      "entry" : false,
      "use-vars" : [ 12 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 17 ],
      "in-vars" : [ 7, 10, 12, 11, 5 ],
      "exit" : false,
      "out-vars" : [ 5, 7, 13, 10, 12, 11 ],
      "decl-vars" : [ 13 ],
      "line-start" : 1196,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "key"
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 15,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "it",
              "variable" : 10
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 49,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "mapiterkey"
            }
          },
          "go-type" : 15,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 1196,
      "code" : "key := mapiterkey(it)",
      "entry" : false,
      "use-vars" : [ 10 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 18, 19 ],
      "in-vars" : [ 13, 10, 12, 11, 5, 7 ],
      "exit" : false,
      "out-vars" : [ 11, 5, 7, 13, 10, 12 ],
      "decl-vars" : [ ],
      "line-start" : 1197,
      "ast" : {
        "condition" : {
          "go-type" : 42,
          "kind" : "expression",
          "left" : {
            "go-type" : 15,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "key",
              "variable" : 13
            }
          },
          "operator" : "==",
          "right" : {
            "go-type" : 15,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Nil",
              "kind" : "ident",
              "value" : "nil"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 1202,
      "code" : "if key == nil {\n\n\tbreak\n}",
      "entry" : false,
      "use-vars" : [ 13 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 21 ],
      "in-vars" : [ 11, 12 ],
      "exit" : false,
      "out-vars" : [ 12, 11 ],
      "decl-vars" : [ ],
      "line-start" : 1201,
      "ast" : {
        "kind" : "statement",
        "label" : null,
        "type" : "break"
      },
      "assign-vars" : [ ],
      "line-end" : 1201,
      "code" : "break",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ 11 ],
      "successors" : [ 20 ],
      "in-vars" : [ 13, 10, 12, 11, 5, 7 ],
      "exit" : false,
      "out-vars" : [ 10, 12, 11, 5, 7 ],
      "decl-vars" : [ ],
      "line-start" : 1203,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 4,
          "index" : {
            "go-type" : 41,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "i",
              "variable" : 12
            }
          },
          "kind" : "expression",
          "target" : {
            "go-type" : 3,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "a",
              "variable" : 11
            }
          },
          "type" : "index"
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 6,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "keyType",
              "variable" : 5
            }
          }, {
            "go-type" : 23,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "fl",
              "variable" : 7
            }
          }, {
            "go-type" : 15,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "key",
              "variable" : 13
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 52,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "copyVal"
            }
          },
          "go-type" : 4,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 1203,
      "code" : "a[i] = copyVal(keyType, fl, key)",
      "entry" : false,
      "use-vars" : [ 12, 5, 7, 13, 11 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 15 ],
      "in-vars" : [ 12, 11, 5, 7, 10 ],
      "exit" : false,
      "out-vars" : [ 12, 11, 5, 7, 10 ],
      "decl-vars" : [ ],
      "line-start" : 1204,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 15,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "it",
              "variable" : 10
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 55,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "mapiternext"
            }
          },
          "go-type" : 1,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 1204,
      "code" : "mapiternext(it)",
      "entry" : false,
      "use-vars" : [ 10 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 12, 11 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 1206,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 3,
          "type" : "slice",
          "three" : false,
          "high" : {
            "go-type" : 41,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "i",
              "variable" : 12
            }
          },
          "max" : null,
          "kind" : "expression",
          "low" : null,
          "target" : {
            "go-type" : 3,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "a",
              "variable" : 11
            }
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 1206,
      "code" : "return a[:i]",
      "entry" : false,
      "use-vars" : [ 11, 12 ]
    } ],
    "code" : "// MapKeys returns a slice containing all the keys present in the map,\n// in unspecified order.\n// It panics if v's Kind is not Map.\n// It returns an empty slice if v represents a nil map.\nfunc (v Value) MapKeys() []Value {\n\tv.mustBe(Map)\n\ttt := (*mapType)(unsafe.Pointer(v.typ))\n\tkeyType := tt.key\n\n\tfl := v.flag.ro() | flag(keyType.Kind())\n\n\tm := v.pointer()\n\tmlen := int(0)\n\tif m != nil {\n\t\tmlen = maplen(m)\n\t}\n\tit := mapiterinit(v.typ, m)\n\ta := make([]Value, mlen)\n\tvar i int\n\tfor i = 0; i < len(a); i++ {\n\t\tkey := mapiterkey(it)\n\t\tif key == nil {\n\n\t\t\tbreak\n\t\t}\n\t\ta[i] = copyVal(keyType, fl, key)\n\t\tmapiternext(it)\n\t}\n\treturn a[:i]\n}",
    "defines" : [ 0 ],
    "functions" : [ {
      "name" : "MapKeys",
      "package" : 0,
      "type" : 0,
      "exported" : true
    }, {
      "name" : "mustBe",
      "package" : 0,
      "type" : 24,
      "exported" : false
    }, {
      "name" : "ro",
      "package" : 0,
      "type" : 35,
      "exported" : false
    }, {
      "name" : "Kind",
      "package" : 0,
      "type" : 37,
      "exported" : true
    }, {
      "name" : "pointer",
      "package" : 0,
      "type" : 39,
      "exported" : false
    }, {
      "name" : "maplen",
      "package" : 0,
      "type" : 43,
      "exported" : false
    }, {
      "name" : "mapiterinit",
      "package" : 0,
      "type" : 46,
      "exported" : false
    }, {
      "name" : "mapiterkey",
      "package" : 0,
      "type" : 49,
      "exported" : false
    }, {
      "name" : "copyVal",
      "package" : 0,
      "type" : 52,
      "exported" : false
    }, {
      "name" : "mapiternext",
      "package" : 0,
      "type" : 55,
      "exported" : false
    } ],
    "line-end" : 1207,
    "line-start" : 1180,
    "names" : [ "MapKeys" ],
    "package" : 0,
    "packages" : [ {
      "name" : "reflect",
      "path" : "reflect"
    }, {
      "name" : "unsafe",
      "path" : "unsafe"
    } ],
    "params" : [ ],
    "receivers" : [ 0 ],
    "results" : [ 1 ],
    "type" : "function",
    "types" : [ {
      "name" : "func() []reflect.Value",
      "params" : 1,
      "recv" : 0,
      "results" : 2,
      "type" : "Signature",
      "underlying" : 0,
      "variadic" : false
    }, {
      "fields" : [ ],
      "name" : "()",
      "type" : "Tuple",
      "underlying" : 1
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 3
      } ],
      "name" : "([]reflect.Value)",
      "type" : "Tuple",
      "underlying" : 2
    }, {
      "elem" : 4,
      "name" : "[]reflect.Value",
      "type" : "Slice",
      "underlying" : 3
    }, {
      "local-name" : "Value",
      "name" : "reflect.Value",
      "package" : 0,
      "type" : "Named",
      "underlying" : 5
    }, {
      "fields" : [ {
        "name" : "typ",
        "type" : 6
      }, {
        "name" : "ptr",
        "type" : 15
      }, {
        "name" : "flag",
        "type" : 23
      } ],
      "name" : "struct{typ *reflect.rtype; ptr unsafe.Pointer; reflect.flag}",
      "type" : "Struct",
      "underlying" : 5
    }, {
      "elem" : 7,
      "name" : "*reflect.rtype",
      "type" : "Pointer",
      "underlying" : 6
    }, {
      "local-name" : "rtype",
      "name" : "reflect.rtype",
      "package" : 0,
      "type" : "Named",
      "underlying" : 8
    }, {
      "fields" : [ {
        "name" : "size",
        "type" : 9
      }, {
        "name" : "ptrdata",
        "type" : 9
      }, {
        "name" : "hash",
        "type" : 10
      }, {
        "name" : "tflag",
        "type" : 11
      }, {
        "name" : "align",
        "type" : 12
      }, {
        "name" : "fieldAlign",
        "type" : 12
      }, {
        "name" : "kind",
        "type" : 12
      }, {
        "name" : "equal",
        "type" : 13
      }, {
        "name" : "gcdata",
        "type" : 18
      }, {
        "name" : "str",
        "type" : 20
      }, {
        "name" : "ptrToThis",
        "type" : 22
      } ],
      "name" : "struct{size uintptr; ptrdata uintptr; hash uint32; tflag reflect.tflag; align uint8; fieldAlign uint8; kind uint8; equal func(unsafe.Pointer, unsafe.Pointer) bool; gcdata *byte; str reflect.nameOff; ptrToThis reflect.typeOff}",
      "type" : "Struct",
      "underlying" : 8
    }, {
      "name" : "uintptr",
      "type" : "Basic",
      "underlying" : 9
    }, {
      "name" : "uint32",
      "type" : "Basic",
      "underlying" : 10
    }, {
      "local-name" : "tflag",
      "name" : "reflect.tflag",
      "package" : 0,
      "type" : "Named",
      "underlying" : 12
    }, {
      "name" : "uint8",
      "type" : "Basic",
      "underlying" : 12
    }, {
      "name" : "func(unsafe.Pointer, unsafe.Pointer) bool",
      "params" : 14,
      "recv" : -1,
      "results" : 16,
      "type" : "Signature",
      "underlying" : 13,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 15
      }, {
        "name" : "",
        "type" : 15
      } ],
      "name" : "(unsafe.Pointer, unsafe.Pointer)",
      "type" : "Tuple",
      "underlying" : 14
    }, {
      "local-name" : "Pointer",
      "name" : "unsafe.Pointer",
      "package" : 1,
      "type" : "Basic",
      "underlying" : 15
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 17
      } ],
      "name" : "(bool)",
      "type" : "Tuple",
      "underlying" : 16
    }, {
      "name" : "bool",
      "type" : "Basic",
      "underlying" : 17
    }, {
      "elem" : 19,
      "name" : "*byte",
      "type" : "Pointer",
      "underlying" : 18
    }, {
      "name" : "byte",
      "type" : "Basic",
      "underlying" : 19
    }, {
      "local-name" : "nameOff",
      "name" : "reflect.nameOff",
      "package" : 0,
      "type" : "Named",
      "underlying" : 21
    }, {
      "name" : "int32",
      "type" : "Basic",
      "underlying" : 21
    }, {
      "local-name" : "typeOff",
      "name" : "reflect.typeOff",
      "package" : 0,
      "type" : "Named",
      "underlying" : 21
    }, {
      "local-name" : "flag",
      "name" : "reflect.flag",
      "package" : 0,
      "type" : "Named",
      "underlying" : 9
    }, {
      "name" : "func(expected reflect.Kind)",
      "params" : 25,
      "recv" : -1,
      "results" : 1,
      "type" : "Signature",
      "underlying" : 24,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "expected",
        "type" : 26
      } ],
      "name" : "(expected reflect.Kind)",
      "type" : "Tuple",
      "underlying" : 25
    }, {
      "local-name" : "Kind",
      "name" : "reflect.Kind",
      "package" : 0,
      "type" : "Named",
      "underlying" : 27
    }, {
      "name" : "uint",
      "type" : "Basic",
      "underlying" : 27
    }, {
      "elem" : 29,
      "name" : "*reflect.mapType",
      "type" : "Pointer",
      "underlying" : 28
    }, {
      "local-name" : "mapType",
      "name" : "reflect.mapType",
      "package" : 0,
      "type" : "Named",
      "underlying" : 30
    }, {
      "fields" : [ {
        "name" : "rtype",
        "type" : 7
      }, {
        "name" : "key",
        "type" : 6
      }, {
        "name" : "elem",
        "type" : 6
      }, {
        "name" : "bucket",
        "type" : 6
      }, {
        "name" : "hasher",
        "type" : 31
      }, {
        "name" : "keysize",
        "type" : 12
      }, {
        "name" : "valuesize",
        "type" : 12
      }, {
        "name" : "bucketsize",
        "type" : 34
      }, {
        "name" : "flags",
        "type" : 10
      } ],
      "name" : "struct{reflect.rtype; key *reflect.rtype; elem *reflect.rtype; bucket *reflect.rtype; hasher func(unsafe.Pointer, uintptr) uintptr; keysize uint8; valuesize uint8; bucketsize uint16; flags uint32}",
      "type" : "Struct",
      "underlying" : 30
    }, {
      "name" : "func(unsafe.Pointer, uintptr) uintptr",
      "params" : 32,
      "recv" : -1,
      "results" : 33,
      "type" : "Signature",
      "underlying" : 31,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 15
      }, {
        "name" : "",
        "type" : 9
      } ],
      "name" : "(unsafe.Pointer, uintptr)",
      "type" : "Tuple",
      "underlying" : 32
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 9
      } ],
      "name" : "(uintptr)",
      "type" : "Tuple",
      "underlying" : 33
    }, {
      "name" : "uint16",
      "type" : "Basic",
      "underlying" : 34
    }, {
      "name" : "func() reflect.flag",
      "params" : 1,
      "recv" : -1,
      "results" : 36,
      "type" : "Signature",
      "underlying" : 35,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 23
      } ],
      "name" : "(reflect.flag)",
      "type" : "Tuple",
      "underlying" : 36
    }, {
      "name" : "func() reflect.Kind",
      "params" : 1,
      "recv" : -1,
      "results" : 38,
      "type" : "Signature",
      "underlying" : 37,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 26
      } ],
      "name" : "(reflect.Kind)",
      "type" : "Tuple",
      "underlying" : 38
    }, {
      "name" : "func() unsafe.Pointer",
      "params" : 1,
      "recv" : -1,
      "results" : 40,
      "type" : "Signature",
      "underlying" : 39,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 15
      } ],
      "name" : "(unsafe.Pointer)",
      "type" : "Tuple",
      "underlying" : 40
    }, {
      "name" : "int",
      "type" : "Basic",
      "underlying" : 41
    }, {
      "name" : "untyped bool",
      "type" : "Basic",
      "underlying" : 42
    }, {
      "name" : "func(m unsafe.Pointer) int",
      "params" : 44,
      "recv" : -1,
      "results" : 45,
      "type" : "Signature",
      "underlying" : 43,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "m",
        "type" : 15
      } ],
      "name" : "(m unsafe.Pointer)",
      "type" : "Tuple",
      "underlying" : 44
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 41
      } ],
      "name" : "(int)",
      "type" : "Tuple",
      "underlying" : 45
    }, {
      "name" : "func(t *reflect.rtype, m unsafe.Pointer) unsafe.Pointer",
      "params" : 47,
      "recv" : -1,
      "results" : 40,
      "type" : "Signature",
      "underlying" : 46,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "t",
        "type" : 6
      }, {
        "name" : "m",
        "type" : 15
      } ],
      "name" : "(t *reflect.rtype, m unsafe.Pointer)",
      "type" : "Tuple",
      "underlying" : 47
    }, {
      "name" : "func([]reflect.Value) int",
      "params" : 2,
      "recv" : -1,
      "results" : 45,
      "type" : "Signature",
      "underlying" : 48,
      "variadic" : false
    }, {
      "name" : "func(it unsafe.Pointer) (key unsafe.Pointer)",
      "params" : 50,
      "recv" : -1,
      "results" : 51,
      "type" : "Signature",
      "underlying" : 49,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "it",
        "type" : 15
      } ],
      "name" : "(it unsafe.Pointer)",
      "type" : "Tuple",
      "underlying" : 50
    }, {
      "fields" : [ {
        "name" : "key",
        "type" : 15
      } ],
      "name" : "(key unsafe.Pointer)",
      "type" : "Tuple",
      "underlying" : 51
    }, {
      "name" : "func(typ *reflect.rtype, fl reflect.flag, ptr unsafe.Pointer) reflect.Value",
      "params" : 53,
      "recv" : -1,
      "results" : 54,
      "type" : "Signature",
      "underlying" : 52,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "typ",
        "type" : 6
      }, {
        "name" : "fl",
        "type" : 23
      }, {
        "name" : "ptr",
        "type" : 15
      } ],
      "name" : "(typ *reflect.rtype, fl reflect.flag, ptr unsafe.Pointer)",
      "type" : "Tuple",
      "underlying" : 53
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 4
      } ],
      "name" : "(reflect.Value)",
      "type" : "Tuple",
      "underlying" : 54
    }, {
      "name" : "func(it unsafe.Pointer)",
      "params" : 50,
      "recv" : -1,
      "results" : 1,
      "type" : "Signature",
      "underlying" : 55,
      "variadic" : false
    } ],
    "variables" : [ {
      "name" : "v",
      "package" : 0,
      "type" : 4,
      "exported" : false
    }, {
      "name" : "[res0]",
      "package" : 0,
      "type" : 3,
      "exported" : false
    }, {
      "name" : "typ",
      "package" : 0,
      "type" : 6,
      "exported" : false
    }, {
      "name" : "tt",
      "package" : 0,
      "type" : 28,
      "exported" : false
    }, {
      "name" : "key",
      "package" : 0,
      "type" : 6,
      "exported" : false
    }, {
      "name" : "keyType",
      "package" : 0,
      "type" : 6,
      "exported" : false
    }, {
      "name" : "flag",
      "package" : 0,
      "type" : 23,
      "exported" : false
    }, {
      "name" : "fl",
      "package" : 0,
      "type" : 23,
      "exported" : false
    }, {
      "name" : "m",
      "package" : 0,
      "type" : 15,
      "exported" : false
    }, {
      "name" : "mlen",
      "package" : 0,
      "type" : 41,
      "exported" : false
    }, {
      "name" : "it",
      "package" : 0,
      "type" : 15,
      "exported" : false
    }, {
      "name" : "a",
      "package" : 0,
      "type" : 3,
      "exported" : false
    }, {
      "name" : "i",
      "package" : 0,
      "type" : 41,
      "exported" : false
    }, {
      "name" : "key",
      "package" : 0,
      "type" : 15,
      "exported" : false
    } ]
  },
  "go-version" : "1.14.3"
}