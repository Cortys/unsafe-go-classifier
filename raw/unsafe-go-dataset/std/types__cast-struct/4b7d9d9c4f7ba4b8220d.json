{
  "usage" : {
    "file" : "type.go",
    "label1" : "cast-struct",
    "label2" : "types",
    "line" : "629",
    "module" : "std",
    "pkg" : "reflect",
    "project" : "kubernetes/kubernetes",
    "snippet" : "return (*[1 << 16]method)(add(unsafe.Pointer(t), uintptr(t.moff), \"t.mcount > 0\"))[:t.mcount:t.mcount]",
    "version" : "std"
  },
  "cfg" : {
    "blocks" : [ {
      "update-vars" : [ ],
      "successors" : [ 2 ],
      "in-vars" : [ 0 ],
      "exit" : false,
      "out-vars" : [ 0 ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[entry]",
      "entry" : true,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ ],
      "in-vars" : [ ],
      "exit" : true,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[exit]",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 3, 4 ],
      "in-vars" : [ 0 ],
      "exit" : false,
      "out-vars" : [ 0 ],
      "decl-vars" : [ ],
      "line-start" : 626,
      "ast" : {
        "condition" : {
          "go-type" : 15,
          "kind" : "expression",
          "left" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "mcount",
              "variable" : 2
            },
            "go-type" : 13,
            "kind" : "expression",
            "target" : {
              "go-type" : 10,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "t",
                "variable" : 0
              }
            },
            "type" : "selector"
          },
          "operator" : "==",
          "right" : {
            "go-type" : 13,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 628,
      "code" : "if t.mcount == 0 {\n\treturn nil\n}",
      "entry" : false,
      "use-vars" : [ 0 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 627,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 16,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Nil",
            "kind" : "ident",
            "value" : "nil"
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 627,
      "code" : "return nil",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 0 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 629,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 3,
          "type" : "slice",
          "three" : true,
          "high" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "mcount",
              "variable" : 2
            },
            "go-type" : 13,
            "kind" : "expression",
            "target" : {
              "go-type" : 10,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "t",
                "variable" : 0
              }
            },
            "type" : "selector"
          },
          "max" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "mcount",
              "variable" : 2
            },
            "go-type" : 13,
            "kind" : "expression",
            "target" : {
              "go-type" : 10,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "t",
                "variable" : 0
              }
            },
            "type" : "selector"
          },
          "kind" : "expression",
          "low" : null,
          "target" : {
            "coerced-to" : {
              "contained" : {
                "element" : {
                  "go-type" : 4,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 4,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "method"
                  }
                },
                "go-type" : 18,
                "kind" : "type",
                "length" : {
                  "go-type" : 19,
                  "kind" : "constant",
                  "value" : {
                    "type" : "INT",
                    "value" : "65536"
                  }
                },
                "type" : "array"
              },
              "go-type" : 17,
              "kind" : "type",
              "type" : "pointer"
            },
            "go-type" : 17,
            "kind" : "expression",
            "target" : {
              "arguments" : [ {
                "coerced-to" : {
                  "go-type" : 20,
                  "kind" : "type",
                  "qualifier" : {
                    "ident-kind" : "PkgName",
                    "kind" : "ident",
                    "package" : 1,
                    "value" : "unsafe"
                  },
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 20,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "Pointer"
                  }
                },
                "go-type" : 20,
                "kind" : "expression",
                "target" : {
                  "go-type" : 10,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "t",
                    "variable" : 0
                  }
                },
                "type" : "cast"
              }, {
                "coerced-to" : {
                  "go-type" : 23,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 23,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "uintptr"
                  }
                },
                "go-type" : 23,
                "kind" : "expression",
                "target" : {
                  "field" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "moff",
                    "variable" : 3
                  },
                  "go-type" : 14,
                  "kind" : "expression",
                  "target" : {
                    "go-type" : 10,
                    "kind" : "expression",
                    "type" : "identifier",
                    "value" : {
                      "ident-kind" : "Var",
                      "kind" : "ident",
                      "value" : "t",
                      "variable" : 0
                    }
                  },
                  "type" : "selector"
                },
                "type" : "cast"
              }, {
                "go-type" : 24,
                "kind" : "constant",
                "value" : {
                  "type" : "STRING",
                  "value" : "t.mcount > 0"
                }
              } ],
              "ellipsis" : false,
              "function" : {
                "go-type" : 21,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "function" : 1,
                  "ident-kind" : "Func",
                  "kind" : "ident",
                  "value" : "add"
                }
              },
              "go-type" : 20,
              "kind" : "expression",
              "type" : "call"
            },
            "type" : "cast"
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 629,
      "code" : "return (*[1 << 16]method)(add(unsafe.Pointer(t), uintptr(t.moff), \"t.mcount > 0\"))[:t.mcount:t.mcount]",
      "entry" : false,
      "use-vars" : [ 0 ]
    } ],
    "code" : "func (t *uncommonType) methods() []method {\n\tif t.mcount == 0 {\n\t\treturn nil\n\t}\n\treturn (*[1 << 16]method)(add(unsafe.Pointer(t), uintptr(t.moff), \"t.mcount > 0\"))[:t.mcount:t.mcount]\n}",
    "defines" : [ 0 ],
    "functions" : [ {
      "name" : "methods",
      "package" : 0,
      "type" : 0,
      "exported" : false
    }, {
      "name" : "add",
      "package" : 0,
      "type" : 21,
      "exported" : false
    } ],
    "line-end" : 630,
    "line-start" : 625,
    "names" : [ "methods" ],
    "package" : 0,
    "packages" : [ {
      "name" : "reflect",
      "path" : "reflect"
    }, {
      "name" : "unsafe",
      "path" : "unsafe"
    } ],
    "params" : [ ],
    "receivers" : [ 0 ],
    "results" : [ 1 ],
    "type" : "function",
    "types" : [ {
      "name" : "(*reflect.uncommonType) func() []reflect.method",
      "params" : 1,
      "recv" : 0,
      "results" : 2,
      "type" : "Signature",
      "underlying" : 0,
      "variadic" : false
    }, {
      "fields" : [ ],
      "name" : "()",
      "type" : "Tuple",
      "underlying" : 1
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 3
      } ],
      "name" : "([]reflect.method)",
      "type" : "Tuple",
      "underlying" : 2
    }, {
      "elem" : 4,
      "name" : "[]reflect.method",
      "type" : "Slice",
      "underlying" : 3
    }, {
      "local-name" : "method",
      "name" : "reflect.method",
      "package" : 0,
      "type" : "Named",
      "underlying" : 5
    }, {
      "fields" : [ {
        "name" : "name",
        "type" : 6
      }, {
        "name" : "mtyp",
        "type" : 8
      }, {
        "name" : "ifn",
        "type" : 9
      }, {
        "name" : "tfn",
        "type" : 9
      } ],
      "name" : "struct{name reflect.nameOff; mtyp reflect.typeOff; ifn reflect.textOff; tfn reflect.textOff}",
      "type" : "Struct",
      "underlying" : 5
    }, {
      "local-name" : "nameOff",
      "name" : "reflect.nameOff",
      "package" : 0,
      "type" : "Named",
      "underlying" : 7
    }, {
      "name" : "int32",
      "type" : "Basic",
      "underlying" : 7
    }, {
      "local-name" : "typeOff",
      "name" : "reflect.typeOff",
      "package" : 0,
      "type" : "Named",
      "underlying" : 7
    }, {
      "local-name" : "textOff",
      "name" : "reflect.textOff",
      "package" : 0,
      "type" : "Named",
      "underlying" : 7
    }, {
      "elem" : 11,
      "name" : "*reflect.uncommonType",
      "type" : "Pointer",
      "underlying" : 10
    }, {
      "local-name" : "uncommonType",
      "name" : "reflect.uncommonType",
      "package" : 0,
      "type" : "Named",
      "underlying" : 12
    }, {
      "fields" : [ {
        "name" : "pkgPath",
        "type" : 6
      }, {
        "name" : "mcount",
        "type" : 13
      }, {
        "name" : "xcount",
        "type" : 13
      }, {
        "name" : "moff",
        "type" : 14
      }, {
        "name" : "_",
        "type" : 14
      } ],
      "name" : "struct{pkgPath reflect.nameOff; mcount uint16; xcount uint16; moff uint32; _ uint32}",
      "type" : "Struct",
      "underlying" : 12
    }, {
      "name" : "uint16",
      "type" : "Basic",
      "underlying" : 13
    }, {
      "name" : "uint32",
      "type" : "Basic",
      "underlying" : 14
    }, {
      "name" : "untyped bool",
      "type" : "Basic",
      "underlying" : 15
    }, {
      "name" : "untyped nil",
      "type" : "Basic",
      "underlying" : 16
    }, {
      "elem" : 18,
      "name" : "*[65536]reflect.method",
      "type" : "Pointer",
      "underlying" : 17
    }, {
      "elem" : 4,
      "name" : "[65536]reflect.method",
      "type" : "Array",
      "underlying" : 18
    }, {
      "name" : "untyped int",
      "type" : "Basic",
      "underlying" : 19
    }, {
      "local-name" : "Pointer",
      "name" : "unsafe.Pointer",
      "package" : 1,
      "type" : "Basic",
      "underlying" : 20
    }, {
      "name" : "func(p unsafe.Pointer, x uintptr, whySafe string) unsafe.Pointer",
      "params" : 22,
      "recv" : -1,
      "results" : 25,
      "type" : "Signature",
      "underlying" : 21,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "p",
        "type" : 20
      }, {
        "name" : "x",
        "type" : 23
      }, {
        "name" : "whySafe",
        "type" : 24
      } ],
      "name" : "(p unsafe.Pointer, x uintptr, whySafe string)",
      "type" : "Tuple",
      "underlying" : 22
    }, {
      "name" : "uintptr",
      "type" : "Basic",
      "underlying" : 23
    }, {
      "name" : "string",
      "type" : "Basic",
      "underlying" : 24
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 20
      } ],
      "name" : "(unsafe.Pointer)",
      "type" : "Tuple",
      "underlying" : 25
    } ],
    "variables" : [ {
      "name" : "t",
      "package" : 0,
      "type" : 10,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "[res0]",
      "package" : 0,
      "type" : 3,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "mcount",
      "package" : 0,
      "type" : 13,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "moff",
      "package" : 0,
      "type" : 14,
      "exported" : false,
      "embedded" : false,
      "field" : true
    } ]
  },
  "go-version" : "1.14.3"
}