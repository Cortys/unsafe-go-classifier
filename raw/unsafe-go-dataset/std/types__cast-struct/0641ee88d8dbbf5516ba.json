{
  "usage" : {
    "file" : "type.go",
    "label1" : "cast-struct",
    "label2" : "types",
    "line" : "2297",
    "module" : "std",
    "pkg" : "reflect",
    "project" : "kubernetes/kubernetes",
    "snippet" : "prototype := *(**sliceType)(unsafe.Pointer(&islice))",
    "version" : "std"
  },
  "cfg" : {
    "blocks" : [ {
      "update-vars" : [ ],
      "successors" : [ 2 ],
      "in-vars" : [ 19, 17 ],
      "exit" : false,
      "out-vars" : [ 19, 17 ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[entry]",
      "entry" : true,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ ],
      "in-vars" : [ ],
      "exit" : true,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[exit]",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 3 ],
      "in-vars" : [ 19, 17 ],
      "exit" : false,
      "out-vars" : [ 20, 19 ],
      "decl-vars" : [ 20 ],
      "line-start" : 2277,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "typ"
          }
        } ],
        "right" : [ {
          "asserted" : {
            "contained" : {
              "go-type" : 48,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 48,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "rtype"
              }
            },
            "go-type" : 47,
            "kind" : "type",
            "type" : "pointer"
          },
          "go-type" : 47,
          "kind" : "expression",
          "target" : {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "t",
              "variable" : 17
            }
          },
          "type" : "type-assert"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 2277,
      "code" : "typ := t.(*rtype)",
      "entry" : false,
      "use-vars" : [ 17 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 5 ],
      "in-vars" : [ 20, 19 ],
      "exit" : false,
      "out-vars" : [ 20, 21, 19 ],
      "decl-vars" : [ 21 ],
      "line-start" : 2280,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "ckey"
          }
        } ],
        "right" : [ {
          "declared" : {
            "go-type" : 86,
            "kind" : "type",
            "type" : "identifier",
            "value" : {
              "go-type" : 86,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "cacheKey"
            }
          },
          "go-type" : 86,
          "kind" : "literal",
          "type" : "composite",
          "values" : [ {
            "go-type" : 39,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "23"
            }
          }, {
            "go-type" : 47,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "typ",
              "variable" : 20
            }
          }, {
            "go-type" : 88,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Nil",
              "kind" : "ident",
              "value" : "nil"
            }
          }, {
            "go-type" : 25,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          } ]
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 2280,
      "code" : "ckey := cacheKey{Slice, typ, nil, 0}",
      "entry" : false,
      "use-vars" : [ 20 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 6, 7 ],
      "in-vars" : [ 20, 21, 19, 22, 23 ],
      "exit" : false,
      "out-vars" : [ 20, 21, 19, 23 ],
      "decl-vars" : [ ],
      "line-start" : 2281,
      "ast" : {
        "condition" : {
          "go-type" : 11,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "ok",
            "variable" : 22
          }
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 2283,
      "code" : "if slice, ok := lookupCache.Load(ckey); ok {\n\treturn slice.(Type)\n}",
      "entry" : false,
      "use-vars" : [ 22 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 4 ],
      "in-vars" : [ 20, 21, 19 ],
      "exit" : false,
      "out-vars" : [ 20, 21, 19, 22, 23 ],
      "decl-vars" : [ 22, 23 ],
      "line-start" : 2281,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "slice"
          }
        }, {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "ok"
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 86,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "ckey",
              "variable" : 21
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "Load"
            },
            "go-type" : 90,
            "kind" : "expression",
            "target" : {
              "go-type" : 75,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "lookupCache",
                "variable" : 19
              }
            },
            "type" : "selector"
          },
          "go-type" : 89,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 2281,
      "code" : "slice, ok := lookupCache.Load(ckey)",
      "entry" : false,
      "use-vars" : [ 19, 21 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 23 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 2282,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "asserted" : {
            "go-type" : 2,
            "kind" : "type",
            "type" : "identifier",
            "value" : {
              "go-type" : 2,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "Type"
            }
          },
          "go-type" : 2,
          "kind" : "expression",
          "target" : {
            "go-type" : 81,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "slice",
              "variable" : 23
            }
          },
          "type" : "type-assert"
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 2282,
      "code" : "return slice.(Type)",
      "entry" : false,
      "use-vars" : [ 23 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 8 ],
      "in-vars" : [ 20, 21, 19 ],
      "exit" : false,
      "out-vars" : [ 24, 20, 21, 19 ],
      "decl-vars" : [ 24 ],
      "line-start" : 2286,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "s"
          }
        } ],
        "right" : [ {
          "go-type" : 23,
          "kind" : "expression",
          "left" : {
            "go-type" : 23,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "[]"
            }
          },
          "operator" : "+",
          "right" : {
            "arguments" : [ ],
            "ellipsis" : false,
            "function" : {
              "field" : {
                "ident-kind" : "Func",
                "kind" : "ident",
                "value" : "String"
              },
              "go-type" : 64,
              "kind" : "expression",
              "target" : {
                "go-type" : 47,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "typ",
                  "variable" : 20
                }
              },
              "type" : "selector"
            },
            "go-type" : 23,
            "kind" : "expression",
            "type" : "call"
          },
          "type" : "binary"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 2286,
      "code" : "s := \"[]\" + typ.String()",
      "entry" : false,
      "use-vars" : [ 20 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 9, 13 ],
      "in-vars" : [ 24, 20, 21, 19 ],
      "exit" : false,
      "out-vars" : [ 20, 21, 25, 19, 24 ],
      "decl-vars" : [ 25, 29 ],
      "line-start" : 2287,
      "ast" : {
        "is-assign" : false,
        "key" : {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "_"
          }
        },
        "kind" : "statement",
        "target" : {
          "arguments" : [ {
            "go-type" : 23,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "s",
              "variable" : 24
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 93,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "typesByString"
            }
          },
          "go-type" : 92,
          "kind" : "expression",
          "type" : "call"
        },
        "type" : "range",
        "value" : {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "tt"
          }
        }
      },
      "assign-vars" : [ ],
      "line-end" : 2293,
      "code" : "for _, tt := range typesByString(s) {\n\tslice := (*sliceType)(unsafe.Pointer(tt))\n\tif slice.elem == typ {\n\t\tti, _ := lookupCache.LoadOrStore(ckey, tt)\n\t\treturn ti.(Type)\n\t}\n}",
      "entry" : false,
      "use-vars" : [ 24 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 10 ],
      "in-vars" : [ 19, 24, 20, 21, 25 ],
      "exit" : false,
      "out-vars" : [ 25, 19, 24, 26, 20, 21 ],
      "decl-vars" : [ 26 ],
      "line-start" : 2288,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "slice"
          }
        } ],
        "right" : [ {
          "coerced-to" : {
            "contained" : {
              "go-type" : 97,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 97,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "sliceType"
              }
            },
            "go-type" : 96,
            "kind" : "type",
            "type" : "pointer"
          },
          "go-type" : 96,
          "kind" : "expression",
          "target" : {
            "coerced-to" : {
              "go-type" : 55,
              "kind" : "type",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 1,
                "value" : "unsafe"
              },
              "type" : "identifier",
              "value" : {
                "go-type" : 55,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "Pointer"
              }
            },
            "go-type" : 55,
            "kind" : "expression",
            "target" : {
              "go-type" : 47,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "tt",
                "variable" : 25
              }
            },
            "type" : "cast"
          },
          "type" : "cast"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 2288,
      "code" : "slice := (*sliceType)(unsafe.Pointer(tt))",
      "entry" : false,
      "use-vars" : [ 25 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 8, 11 ],
      "in-vars" : [ 25, 19, 24, 26, 20, 21 ],
      "exit" : false,
      "out-vars" : [ 20, 21, 25, 19, 24 ],
      "decl-vars" : [ ],
      "line-start" : 2289,
      "ast" : {
        "condition" : {
          "go-type" : 99,
          "kind" : "expression",
          "left" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "elem",
              "variable" : 27
            },
            "go-type" : 47,
            "kind" : "expression",
            "target" : {
              "go-type" : 96,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "slice",
                "variable" : 26
              }
            },
            "type" : "selector"
          },
          "operator" : "==",
          "right" : {
            "go-type" : 47,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "typ",
              "variable" : 20
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 2292,
      "code" : "if slice.elem == typ {\n\tti, _ := lookupCache.LoadOrStore(ckey, tt)\n\treturn ti.(Type)\n}",
      "entry" : false,
      "use-vars" : [ 26, 20 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 12 ],
      "in-vars" : [ 21, 25, 19 ],
      "exit" : false,
      "out-vars" : [ 28 ],
      "decl-vars" : [ 30, 28 ],
      "line-start" : 2290,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "ti"
          }
        }, {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "_"
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 86,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "ckey",
              "variable" : 21
            }
          }, {
            "go-type" : 47,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "tt",
              "variable" : 25
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "LoadOrStore"
            },
            "go-type" : 101,
            "kind" : "expression",
            "target" : {
              "go-type" : 75,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "lookupCache",
                "variable" : 19
              }
            },
            "type" : "selector"
          },
          "go-type" : 100,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 2290,
      "code" : "ti, _ := lookupCache.LoadOrStore(ckey, tt)",
      "entry" : false,
      "use-vars" : [ 25, 19, 21 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 28 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 2291,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "asserted" : {
            "go-type" : 2,
            "kind" : "type",
            "type" : "identifier",
            "value" : {
              "go-type" : 2,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "Type"
            }
          },
          "go-type" : 2,
          "kind" : "expression",
          "target" : {
            "go-type" : 81,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "ti",
              "variable" : 28
            }
          },
          "type" : "type-assert"
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 2291,
      "code" : "return ti.(Type)",
      "entry" : false,
      "use-vars" : [ 28 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 14 ],
      "in-vars" : [ 21, 19, 24, 20 ],
      "exit" : false,
      "out-vars" : [ 20, 21, 19, 24, 31 ],
      "decl-vars" : [ 31 ],
      "line-start" : 2296,
      "ast" : {
        "kind" : "statement",
        "target" : {
          "kind" : "decl",
          "specs" : [ {
            "comments" : [ ],
            "declared-type" : {
              "go-type" : 81,
              "incomplete" : false,
              "kind" : "type",
              "methods" : [ ],
              "type" : "interface"
            },
            "kind" : "spec",
            "names" : [ {
              "ident-kind" : "NoKind",
              "kind" : "ident",
              "value" : "islice"
            } ],
            "type" : "var",
            "values" : [ {
              "coerced-to" : {
                "element" : {
                  "go-type" : 55,
                  "kind" : "type",
                  "qualifier" : {
                    "ident-kind" : "PkgName",
                    "kind" : "ident",
                    "package" : 1,
                    "value" : "unsafe"
                  },
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 55,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "Pointer"
                  }
                },
                "go-type" : 103,
                "kind" : "type",
                "type" : "slice"
              },
              "go-type" : 103,
              "kind" : "expression",
              "target" : {
                "go-type" : 103,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Nil",
                  "kind" : "ident",
                  "value" : "nil"
                }
              },
              "type" : "cast"
            } ]
          } ],
          "type" : "var"
        },
        "type" : "declaration"
      },
      "assign-vars" : [ ],
      "line-end" : 2296,
      "code" : "// Make a slice type.\nvar islice interface{} = ([]unsafe.Pointer)(nil)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 15 ],
      "in-vars" : [ 20, 21, 19, 24, 31 ],
      "exit" : false,
      "out-vars" : [ 20, 21, 19, 24, 32 ],
      "decl-vars" : [ 32 ],
      "line-start" : 2297,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "prototype"
          }
        } ],
        "right" : [ {
          "go-type" : 96,
          "kind" : "expression",
          "target" : {
            "coerced-to" : {
              "contained" : {
                "contained" : {
                  "go-type" : 97,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 97,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "sliceType"
                  }
                },
                "go-type" : 96,
                "kind" : "type",
                "type" : "pointer"
              },
              "go-type" : 104,
              "kind" : "type",
              "type" : "pointer"
            },
            "go-type" : 104,
            "kind" : "expression",
            "target" : {
              "coerced-to" : {
                "go-type" : 55,
                "kind" : "type",
                "qualifier" : {
                  "ident-kind" : "PkgName",
                  "kind" : "ident",
                  "package" : 1,
                  "value" : "unsafe"
                },
                "type" : "identifier",
                "value" : {
                  "go-type" : 55,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "Pointer"
                }
              },
              "go-type" : 55,
              "kind" : "expression",
              "target" : {
                "go-type" : 105,
                "kind" : "expression",
                "operator" : "&",
                "target" : {
                  "go-type" : 81,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "islice",
                    "variable" : 31
                  }
                },
                "type" : "unary"
              },
              "type" : "cast"
            },
            "type" : "cast"
          },
          "type" : "star"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 2297,
      "code" : "prototype := *(**sliceType)(unsafe.Pointer(&islice))",
      "entry" : false,
      "use-vars" : [ 31 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 16 ],
      "in-vars" : [ 20, 21, 19, 24, 32 ],
      "exit" : false,
      "out-vars" : [ 20, 21, 19, 33, 24 ],
      "decl-vars" : [ 33 ],
      "line-start" : 2298,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "slice"
          }
        } ],
        "right" : [ {
          "go-type" : 97,
          "kind" : "expression",
          "target" : {
            "go-type" : 96,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "prototype",
              "variable" : 32
            }
          },
          "type" : "star"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 2298,
      "code" : "slice := *prototype",
      "entry" : false,
      "use-vars" : [ 32 ]
    }, {
      "update-vars" : [ 33 ],
      "successors" : [ 17 ],
      "in-vars" : [ 33, 24, 20, 21, 19 ],
      "exit" : false,
      "out-vars" : [ 21, 19, 33, 24, 20 ],
      "decl-vars" : [ ],
      "line-start" : 2299,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "tflag",
            "variable" : 34
          },
          "go-type" : 51,
          "kind" : "expression",
          "target" : {
            "go-type" : 97,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "slice",
              "variable" : 33
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "go-type" : 51,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "0"
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 2299,
      "code" : "slice.tflag = 0",
      "entry" : false,
      "use-vars" : [ 33 ]
    }, {
      "update-vars" : [ 33 ],
      "successors" : [ 18 ],
      "in-vars" : [ 20, 21, 19, 33, 24 ],
      "exit" : false,
      "out-vars" : [ 21, 19, 33, 20 ],
      "decl-vars" : [ ],
      "line-start" : 2300,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "str",
            "variable" : 35
          },
          "go-type" : 58,
          "kind" : "expression",
          "target" : {
            "go-type" : 97,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "slice",
              "variable" : 33
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "arguments" : [ {
            "arguments" : [ {
              "go-type" : 23,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "s",
                "variable" : 24
              }
            }, {
              "go-type" : 23,
              "kind" : "constant",
              "value" : {
                "type" : "STRING",
                "value" : ""
              }
            }, {
              "go-type" : 11,
              "kind" : "constant",
              "value" : {
                "type" : "BOOL",
                "value" : "false"
              }
            } ],
            "ellipsis" : false,
            "function" : {
              "go-type" : 111,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Func",
                "kind" : "ident",
                "value" : "newName"
              }
            },
            "go-type" : 108,
            "kind" : "expression",
            "type" : "call"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 106,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "resolveReflectName"
            }
          },
          "go-type" : 58,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 2300,
      "code" : "slice.str = resolveReflectName(newName(s, \"\", false))",
      "entry" : false,
      "use-vars" : [ 24, 33 ]
    }, {
      "update-vars" : [ 33 ],
      "successors" : [ 19 ],
      "in-vars" : [ 19, 33, 20, 21 ],
      "exit" : false,
      "out-vars" : [ 21, 19, 33, 20 ],
      "decl-vars" : [ ],
      "line-start" : 2301,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "hash",
            "variable" : 36
          },
          "go-type" : 50,
          "kind" : "expression",
          "target" : {
            "go-type" : 97,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "slice",
              "variable" : 33
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "arguments" : [ {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "hash",
              "variable" : 36
            },
            "go-type" : 50,
            "kind" : "expression",
            "target" : {
              "go-type" : 47,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "typ",
                "variable" : 20
              }
            },
            "type" : "selector"
          }, {
            "go-type" : 57,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "91"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 114,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "fnv1"
            }
          },
          "go-type" : 50,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 2301,
      "code" : "slice.hash = fnv1(typ.hash, '[')",
      "entry" : false,
      "use-vars" : [ 33, 20 ]
    }, {
      "update-vars" : [ 33 ],
      "successors" : [ 20 ],
      "in-vars" : [ 33, 20, 21, 19 ],
      "exit" : false,
      "out-vars" : [ 21, 19, 33 ],
      "decl-vars" : [ ],
      "line-start" : 2302,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "elem",
            "variable" : 27
          },
          "go-type" : 47,
          "kind" : "expression",
          "target" : {
            "go-type" : 97,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "slice",
              "variable" : 33
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "go-type" : 47,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "typ",
            "variable" : 20
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 2302,
      "code" : "slice.elem = typ",
      "entry" : false,
      "use-vars" : [ 20, 33 ]
    }, {
      "update-vars" : [ 33 ],
      "successors" : [ 21 ],
      "in-vars" : [ 21, 19, 33 ],
      "exit" : false,
      "out-vars" : [ 33, 21, 19 ],
      "decl-vars" : [ ],
      "line-start" : 2303,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "ptrToThis",
            "variable" : 37
          },
          "go-type" : 60,
          "kind" : "expression",
          "target" : {
            "go-type" : 97,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "slice",
              "variable" : 33
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "go-type" : 60,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "0"
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 2303,
      "code" : "slice.ptrToThis = 0",
      "entry" : false,
      "use-vars" : [ 33 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 22 ],
      "in-vars" : [ 21, 19, 33 ],
      "exit" : false,
      "out-vars" : [ 39 ],
      "decl-vars" : [ 39, 40 ],
      "line-start" : 2305,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "ti"
          }
        }, {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "_"
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 86,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "ckey",
              "variable" : 21
            }
          }, {
            "go-type" : 47,
            "kind" : "expression",
            "operator" : "&",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "rtype",
                "variable" : 38
              },
              "go-type" : 48,
              "kind" : "expression",
              "target" : {
                "go-type" : 97,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "slice",
                  "variable" : 33
                }
              },
              "type" : "selector"
            },
            "type" : "unary"
          } ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "LoadOrStore"
            },
            "go-type" : 101,
            "kind" : "expression",
            "target" : {
              "go-type" : 75,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "lookupCache",
                "variable" : 19
              }
            },
            "type" : "selector"
          },
          "go-type" : 100,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 2305,
      "code" : "ti, _ := lookupCache.LoadOrStore(ckey, &slice.rtype)",
      "entry" : false,
      "use-vars" : [ 19, 21, 33 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 39 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 2306,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "asserted" : {
            "go-type" : 2,
            "kind" : "type",
            "type" : "identifier",
            "value" : {
              "go-type" : 2,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "Type"
            }
          },
          "go-type" : 2,
          "kind" : "expression",
          "target" : {
            "go-type" : 81,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "ti",
              "variable" : 39
            }
          },
          "type" : "type-assert"
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 2306,
      "code" : "return ti.(Type)",
      "entry" : false,
      "use-vars" : [ 39 ]
    } ],
    "code" : "// SliceOf returns the slice type with element type t.\n// For example, if t represents int, SliceOf(t) represents []int.\nfunc SliceOf(t Type) Type {\n\ttyp := t.(*rtype)\n\n\tckey := cacheKey{Slice, typ, nil, 0}\n\tif slice, ok := lookupCache.Load(ckey); ok {\n\t\treturn slice.(Type)\n\t}\n\n\ts := \"[]\" + typ.String()\n\tfor _, tt := range typesByString(s) {\n\t\tslice := (*sliceType)(unsafe.Pointer(tt))\n\t\tif slice.elem == typ {\n\t\t\tti, _ := lookupCache.LoadOrStore(ckey, tt)\n\t\t\treturn ti.(Type)\n\t\t}\n\t}\n\n\t// Make a slice type.\n\tvar islice interface{} = ([]unsafe.Pointer)(nil)\n\tprototype := *(**sliceType)(unsafe.Pointer(&islice))\n\tslice := *prototype\n\tslice.tflag = 0\n\tslice.str = resolveReflectName(newName(s, \"\", false))\n\tslice.hash = fnv1(typ.hash, '[')\n\tslice.elem = typ\n\tslice.ptrToThis = 0\n\n\tti, _ := lookupCache.LoadOrStore(ckey, &slice.rtype)\n\treturn ti.(Type)\n}",
    "defines" : [ 0 ],
    "functions" : [ {
      "name" : "SliceOf",
      "package" : 0,
      "type" : 0,
      "exported" : true
    }, {
      "name" : "Load",
      "package" : 2,
      "type" : 90,
      "exported" : true
    }, {
      "name" : "String",
      "package" : 0,
      "type" : 64,
      "exported" : true
    }, {
      "name" : "typesByString",
      "package" : 0,
      "type" : 93,
      "exported" : false
    }, {
      "name" : "LoadOrStore",
      "package" : 2,
      "type" : 101,
      "exported" : true
    }, {
      "name" : "resolveReflectName",
      "package" : 0,
      "type" : 106,
      "exported" : false
    }, {
      "name" : "newName",
      "package" : 0,
      "type" : 111,
      "exported" : false
    }, {
      "name" : "fnv1",
      "package" : 0,
      "type" : 114,
      "exported" : false
    } ],
    "line-end" : 2307,
    "line-start" : 2276,
    "names" : [ "SliceOf" ],
    "package" : 0,
    "packages" : [ {
      "name" : "reflect",
      "path" : "reflect"
    }, {
      "name" : "unsafe",
      "path" : "unsafe"
    }, {
      "name" : "sync",
      "path" : "sync"
    }, {
      "name" : "atomic",
      "path" : "sync/atomic"
    } ],
    "params" : [ 17 ],
    "receivers" : [ ],
    "results" : [ 18 ],
    "type" : "function",
    "types" : [ {
      "name" : "func(t reflect.Type) reflect.Type",
      "params" : 1,
      "recv" : -1,
      "results" : 17,
      "type" : "Signature",
      "underlying" : 0,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "t",
        "type" : 2
      } ],
      "name" : "(t reflect.Type)",
      "type" : "Tuple",
      "underlying" : 1
    }, {
      "local-name" : "Type",
      "name" : "reflect.Type",
      "package" : 0,
      "type" : "Named",
      "underlying" : 3
    }, {
      "methods" : [ {
        "name" : "Align",
        "type" : 4
      }, {
        "name" : "AssignableTo",
        "type" : 8
      }, {
        "name" : "Bits",
        "type" : 4
      }, {
        "name" : "ChanDir",
        "type" : 12
      }, {
        "name" : "Comparable",
        "type" : 15
      }, {
        "name" : "ConvertibleTo",
        "type" : 8
      }, {
        "name" : "Elem",
        "type" : 16
      }, {
        "name" : "Field",
        "type" : 18
      }, {
        "name" : "FieldAlign",
        "type" : 4
      }, {
        "name" : "FieldByIndex",
        "type" : 27
      }, {
        "name" : "FieldByName",
        "type" : 29
      }, {
        "name" : "FieldByNameFunc",
        "type" : 32
      }, {
        "name" : "Implements",
        "type" : 8
      }, {
        "name" : "In",
        "type" : 36
      }, {
        "name" : "IsVariadic",
        "type" : 15
      }, {
        "name" : "Key",
        "type" : 16
      }, {
        "name" : "Kind",
        "type" : 37
      }, {
        "name" : "Len",
        "type" : 4
      }, {
        "name" : "Method",
        "type" : 41
      }, {
        "name" : "MethodByName",
        "type" : 62
      }, {
        "name" : "Name",
        "type" : 64
      }, {
        "name" : "NumField",
        "type" : 4
      }, {
        "name" : "NumIn",
        "type" : 4
      }, {
        "name" : "NumMethod",
        "type" : 4
      }, {
        "name" : "NumOut",
        "type" : 4
      }, {
        "name" : "Out",
        "type" : 36
      }, {
        "name" : "PkgPath",
        "type" : 64
      }, {
        "name" : "Size",
        "type" : 65
      }, {
        "name" : "String",
        "type" : 64
      }, {
        "name" : "common",
        "type" : 67
      }, {
        "name" : "uncommon",
        "type" : 69
      } ],
      "name" : "interface{Align() int; AssignableTo(u reflect.Type) bool; Bits() int; ChanDir() reflect.ChanDir; Comparable() bool; ConvertibleTo(u reflect.Type) bool; Elem() reflect.Type; Field(i int) reflect.StructField; FieldAlign() int; FieldByIndex(index []int) reflect.StructField; FieldByName(name string) (reflect.StructField, bool); FieldByNameFunc(match func(string) bool) (reflect.StructField, bool); Implements(u reflect.Type) bool; In(i int) reflect.Type; IsVariadic() bool; Key() reflect.Type; Kind() reflect.Kind; Len() int; Method(int) reflect.Method; MethodByName(string) (reflect.Method, bool); Name() string; NumField() int; NumIn() int; NumMethod() int; NumOut() int; Out(i int) reflect.Type; PkgPath() string; Size() uintptr; String() string; common() *reflect.rtype; uncommon() *reflect.uncommonType}",
      "type" : "Interface",
      "underlying" : 3
    }, {
      "name" : "func() int",
      "params" : 5,
      "recv" : 0,
      "results" : 6,
      "type" : "Signature",
      "underlying" : 4,
      "variadic" : false
    }, {
      "fields" : [ ],
      "name" : "()",
      "type" : "Tuple",
      "underlying" : 5
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 7
      } ],
      "name" : "(int)",
      "type" : "Tuple",
      "underlying" : 6
    }, {
      "name" : "int",
      "type" : "Basic",
      "underlying" : 7
    }, {
      "name" : "func(u reflect.Type) bool",
      "params" : 9,
      "recv" : 1,
      "results" : 10,
      "type" : "Signature",
      "underlying" : 8,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "u",
        "type" : 2
      } ],
      "name" : "(u reflect.Type)",
      "type" : "Tuple",
      "underlying" : 9
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 11
      } ],
      "name" : "(bool)",
      "type" : "Tuple",
      "underlying" : 10
    }, {
      "name" : "bool",
      "type" : "Basic",
      "underlying" : 11
    }, {
      "name" : "func() reflect.ChanDir",
      "params" : 5,
      "recv" : 2,
      "results" : 13,
      "type" : "Signature",
      "underlying" : 12,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 14
      } ],
      "name" : "(reflect.ChanDir)",
      "type" : "Tuple",
      "underlying" : 13
    }, {
      "local-name" : "ChanDir",
      "name" : "reflect.ChanDir",
      "package" : 0,
      "type" : "Named",
      "underlying" : 7
    }, {
      "name" : "func() bool",
      "params" : 5,
      "recv" : 3,
      "results" : 10,
      "type" : "Signature",
      "underlying" : 15,
      "variadic" : false
    }, {
      "name" : "func() reflect.Type",
      "params" : 5,
      "recv" : 4,
      "results" : 17,
      "type" : "Signature",
      "underlying" : 16,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 2
      } ],
      "name" : "(reflect.Type)",
      "type" : "Tuple",
      "underlying" : 17
    }, {
      "name" : "func(i int) reflect.StructField",
      "params" : 19,
      "recv" : 5,
      "results" : 20,
      "type" : "Signature",
      "underlying" : 18,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "i",
        "type" : 7
      } ],
      "name" : "(i int)",
      "type" : "Tuple",
      "underlying" : 19
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 21
      } ],
      "name" : "(reflect.StructField)",
      "type" : "Tuple",
      "underlying" : 20
    }, {
      "local-name" : "StructField",
      "name" : "reflect.StructField",
      "package" : 0,
      "type" : "Named",
      "underlying" : 22
    }, {
      "fields" : [ {
        "name" : "Name",
        "type" : 23
      }, {
        "name" : "PkgPath",
        "type" : 23
      }, {
        "name" : "Type",
        "type" : 2
      }, {
        "name" : "Tag",
        "type" : 24
      }, {
        "name" : "Offset",
        "type" : 25
      }, {
        "name" : "Index",
        "type" : 26
      }, {
        "name" : "Anonymous",
        "type" : 11
      } ],
      "name" : "struct{Name string; PkgPath string; Type reflect.Type; Tag reflect.StructTag; Offset uintptr; Index []int; Anonymous bool}",
      "type" : "Struct",
      "underlying" : 22
    }, {
      "name" : "string",
      "type" : "Basic",
      "underlying" : 23
    }, {
      "local-name" : "StructTag",
      "name" : "reflect.StructTag",
      "package" : 0,
      "type" : "Named",
      "underlying" : 23
    }, {
      "name" : "uintptr",
      "type" : "Basic",
      "underlying" : 25
    }, {
      "elem" : 7,
      "name" : "[]int",
      "type" : "Slice",
      "underlying" : 26
    }, {
      "name" : "func(index []int) reflect.StructField",
      "params" : 28,
      "recv" : 6,
      "results" : 20,
      "type" : "Signature",
      "underlying" : 27,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "index",
        "type" : 26
      } ],
      "name" : "(index []int)",
      "type" : "Tuple",
      "underlying" : 28
    }, {
      "name" : "func(name string) (reflect.StructField, bool)",
      "params" : 30,
      "recv" : 7,
      "results" : 31,
      "type" : "Signature",
      "underlying" : 29,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "name",
        "type" : 23
      } ],
      "name" : "(name string)",
      "type" : "Tuple",
      "underlying" : 30
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 21
      }, {
        "name" : "",
        "type" : 11
      } ],
      "name" : "(reflect.StructField, bool)",
      "type" : "Tuple",
      "underlying" : 31
    }, {
      "name" : "func(match func(string) bool) (reflect.StructField, bool)",
      "params" : 33,
      "recv" : 8,
      "results" : 31,
      "type" : "Signature",
      "underlying" : 32,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "match",
        "type" : 34
      } ],
      "name" : "(match func(string) bool)",
      "type" : "Tuple",
      "underlying" : 33
    }, {
      "name" : "func(string) bool",
      "params" : 35,
      "recv" : -1,
      "results" : 10,
      "type" : "Signature",
      "underlying" : 34,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 23
      } ],
      "name" : "(string)",
      "type" : "Tuple",
      "underlying" : 35
    }, {
      "name" : "func(i int) reflect.Type",
      "params" : 19,
      "recv" : 9,
      "results" : 17,
      "type" : "Signature",
      "underlying" : 36,
      "variadic" : false
    }, {
      "name" : "func() reflect.Kind",
      "params" : 5,
      "recv" : 10,
      "results" : 38,
      "type" : "Signature",
      "underlying" : 37,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 39
      } ],
      "name" : "(reflect.Kind)",
      "type" : "Tuple",
      "underlying" : 38
    }, {
      "local-name" : "Kind",
      "name" : "reflect.Kind",
      "package" : 0,
      "type" : "Named",
      "underlying" : 40
    }, {
      "name" : "uint",
      "type" : "Basic",
      "underlying" : 40
    }, {
      "name" : "func(int) reflect.Method",
      "params" : 6,
      "recv" : 11,
      "results" : 42,
      "type" : "Signature",
      "underlying" : 41,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 43
      } ],
      "name" : "(reflect.Method)",
      "type" : "Tuple",
      "underlying" : 42
    }, {
      "local-name" : "Method",
      "name" : "reflect.Method",
      "package" : 0,
      "type" : "Named",
      "underlying" : 44
    }, {
      "fields" : [ {
        "name" : "Name",
        "type" : 23
      }, {
        "name" : "PkgPath",
        "type" : 23
      }, {
        "name" : "Type",
        "type" : 2
      }, {
        "name" : "Func",
        "type" : 45
      }, {
        "name" : "Index",
        "type" : 7
      } ],
      "name" : "struct{Name string; PkgPath string; Type reflect.Type; Func reflect.Value; Index int}",
      "type" : "Struct",
      "underlying" : 44
    }, {
      "local-name" : "Value",
      "name" : "reflect.Value",
      "package" : 0,
      "type" : "Named",
      "underlying" : 46
    }, {
      "fields" : [ {
        "name" : "typ",
        "type" : 47
      }, {
        "name" : "ptr",
        "type" : 55
      }, {
        "name" : "flag",
        "type" : 61
      } ],
      "name" : "struct{typ *reflect.rtype; ptr unsafe.Pointer; reflect.flag}",
      "type" : "Struct",
      "underlying" : 46
    }, {
      "elem" : 48,
      "name" : "*reflect.rtype",
      "type" : "Pointer",
      "underlying" : 47
    }, {
      "local-name" : "rtype",
      "name" : "reflect.rtype",
      "package" : 0,
      "type" : "Named",
      "underlying" : 49
    }, {
      "fields" : [ {
        "name" : "size",
        "type" : 25
      }, {
        "name" : "ptrdata",
        "type" : 25
      }, {
        "name" : "hash",
        "type" : 50
      }, {
        "name" : "tflag",
        "type" : 51
      }, {
        "name" : "align",
        "type" : 52
      }, {
        "name" : "fieldAlign",
        "type" : 52
      }, {
        "name" : "kind",
        "type" : 52
      }, {
        "name" : "equal",
        "type" : 53
      }, {
        "name" : "gcdata",
        "type" : 56
      }, {
        "name" : "str",
        "type" : 58
      }, {
        "name" : "ptrToThis",
        "type" : 60
      } ],
      "name" : "struct{size uintptr; ptrdata uintptr; hash uint32; tflag reflect.tflag; align uint8; fieldAlign uint8; kind uint8; equal func(unsafe.Pointer, unsafe.Pointer) bool; gcdata *byte; str reflect.nameOff; ptrToThis reflect.typeOff}",
      "type" : "Struct",
      "underlying" : 49
    }, {
      "name" : "uint32",
      "type" : "Basic",
      "underlying" : 50
    }, {
      "local-name" : "tflag",
      "name" : "reflect.tflag",
      "package" : 0,
      "type" : "Named",
      "underlying" : 52
    }, {
      "name" : "uint8",
      "type" : "Basic",
      "underlying" : 52
    }, {
      "name" : "func(unsafe.Pointer, unsafe.Pointer) bool",
      "params" : 54,
      "recv" : -1,
      "results" : 10,
      "type" : "Signature",
      "underlying" : 53,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 55
      }, {
        "name" : "",
        "type" : 55
      } ],
      "name" : "(unsafe.Pointer, unsafe.Pointer)",
      "type" : "Tuple",
      "underlying" : 54
    }, {
      "local-name" : "Pointer",
      "name" : "unsafe.Pointer",
      "package" : 1,
      "type" : "Basic",
      "underlying" : 55
    }, {
      "elem" : 57,
      "name" : "*byte",
      "type" : "Pointer",
      "underlying" : 56
    }, {
      "name" : "byte",
      "type" : "Basic",
      "underlying" : 57
    }, {
      "local-name" : "nameOff",
      "name" : "reflect.nameOff",
      "package" : 0,
      "type" : "Named",
      "underlying" : 59
    }, {
      "name" : "int32",
      "type" : "Basic",
      "underlying" : 59
    }, {
      "local-name" : "typeOff",
      "name" : "reflect.typeOff",
      "package" : 0,
      "type" : "Named",
      "underlying" : 59
    }, {
      "local-name" : "flag",
      "name" : "reflect.flag",
      "package" : 0,
      "type" : "Named",
      "underlying" : 25
    }, {
      "name" : "func(string) (reflect.Method, bool)",
      "params" : 35,
      "recv" : 12,
      "results" : 63,
      "type" : "Signature",
      "underlying" : 62,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 43
      }, {
        "name" : "",
        "type" : 11
      } ],
      "name" : "(reflect.Method, bool)",
      "type" : "Tuple",
      "underlying" : 63
    }, {
      "name" : "func() string",
      "params" : 5,
      "recv" : 13,
      "results" : 35,
      "type" : "Signature",
      "underlying" : 64,
      "variadic" : false
    }, {
      "name" : "func() uintptr",
      "params" : 5,
      "recv" : 14,
      "results" : 66,
      "type" : "Signature",
      "underlying" : 65,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 25
      } ],
      "name" : "(uintptr)",
      "type" : "Tuple",
      "underlying" : 66
    }, {
      "name" : "func() *reflect.rtype",
      "params" : 5,
      "recv" : 15,
      "results" : 68,
      "type" : "Signature",
      "underlying" : 67,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 47
      } ],
      "name" : "(*reflect.rtype)",
      "type" : "Tuple",
      "underlying" : 68
    }, {
      "name" : "func() *reflect.uncommonType",
      "params" : 5,
      "recv" : 16,
      "results" : 70,
      "type" : "Signature",
      "underlying" : 69,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 71
      } ],
      "name" : "(*reflect.uncommonType)",
      "type" : "Tuple",
      "underlying" : 70
    }, {
      "elem" : 72,
      "name" : "*reflect.uncommonType",
      "type" : "Pointer",
      "underlying" : 71
    }, {
      "local-name" : "uncommonType",
      "name" : "reflect.uncommonType",
      "package" : 0,
      "type" : "Named",
      "underlying" : 73
    }, {
      "fields" : [ {
        "name" : "pkgPath",
        "type" : 58
      }, {
        "name" : "mcount",
        "type" : 74
      }, {
        "name" : "xcount",
        "type" : 74
      }, {
        "name" : "moff",
        "type" : 50
      }, {
        "name" : "_",
        "type" : 50
      } ],
      "name" : "struct{pkgPath reflect.nameOff; mcount uint16; xcount uint16; moff uint32; _ uint32}",
      "type" : "Struct",
      "underlying" : 73
    }, {
      "name" : "uint16",
      "type" : "Basic",
      "underlying" : 74
    }, {
      "local-name" : "Map",
      "name" : "sync.Map",
      "package" : 2,
      "type" : "Named",
      "underlying" : 76
    }, {
      "fields" : [ {
        "name" : "mu",
        "type" : 77
      }, {
        "name" : "read",
        "type" : 79
      }, {
        "name" : "dirty",
        "type" : 82
      }, {
        "name" : "misses",
        "type" : 7
      } ],
      "name" : "struct{mu sync.Mutex; read sync/atomic.Value; dirty map[interface{}]*sync.entry; misses int}",
      "type" : "Struct",
      "underlying" : 76
    }, {
      "local-name" : "Mutex",
      "name" : "sync.Mutex",
      "package" : 2,
      "type" : "Named",
      "underlying" : 78
    }, {
      "fields" : [ {
        "name" : "state",
        "type" : 59
      }, {
        "name" : "sema",
        "type" : 50
      } ],
      "name" : "struct{state int32; sema uint32}",
      "type" : "Struct",
      "underlying" : 78
    }, {
      "local-name" : "Value",
      "name" : "sync/atomic.Value",
      "package" : 3,
      "type" : "Named",
      "underlying" : 80
    }, {
      "fields" : [ {
        "name" : "v",
        "type" : 81
      } ],
      "name" : "struct{v interface{}}",
      "type" : "Struct",
      "underlying" : 80
    }, {
      "methods" : [ ],
      "name" : "interface{}",
      "type" : "Interface",
      "underlying" : 81
    }, {
      "elem" : 83,
      "key" : 81,
      "name" : "map[interface{}]*sync.entry",
      "type" : "Map",
      "underlying" : 82
    }, {
      "elem" : 84,
      "name" : "*sync.entry",
      "type" : "Pointer",
      "underlying" : 83
    }, {
      "local-name" : "entry",
      "name" : "sync.entry",
      "package" : 2,
      "type" : "Named",
      "underlying" : 85
    }, {
      "fields" : [ {
        "name" : "p",
        "type" : 55
      } ],
      "name" : "struct{p unsafe.Pointer}",
      "type" : "Struct",
      "underlying" : 85
    }, {
      "local-name" : "cacheKey",
      "name" : "reflect.cacheKey",
      "package" : 0,
      "type" : "Named",
      "underlying" : 87
    }, {
      "fields" : [ {
        "name" : "kind",
        "type" : 39
      }, {
        "name" : "t1",
        "type" : 47
      }, {
        "name" : "t2",
        "type" : 47
      }, {
        "name" : "extra",
        "type" : 25
      } ],
      "name" : "struct{kind reflect.Kind; t1 *reflect.rtype; t2 *reflect.rtype; extra uintptr}",
      "type" : "Struct",
      "underlying" : 87
    }, {
      "name" : "untyped nil",
      "type" : "Basic",
      "underlying" : 88
    }, {
      "fields" : [ {
        "name" : "value",
        "type" : 81
      }, {
        "name" : "ok",
        "type" : 11
      } ],
      "name" : "(value interface{}, ok bool)",
      "type" : "Tuple",
      "underlying" : 89
    }, {
      "name" : "func(key interface{}) (value interface{}, ok bool)",
      "params" : 91,
      "recv" : -1,
      "results" : 89,
      "type" : "Signature",
      "underlying" : 90,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "key",
        "type" : 81
      } ],
      "name" : "(key interface{})",
      "type" : "Tuple",
      "underlying" : 91
    }, {
      "elem" : 47,
      "name" : "[]*reflect.rtype",
      "type" : "Slice",
      "underlying" : 92
    }, {
      "name" : "func(s string) []*reflect.rtype",
      "params" : 94,
      "recv" : -1,
      "results" : 95,
      "type" : "Signature",
      "underlying" : 93,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "s",
        "type" : 23
      } ],
      "name" : "(s string)",
      "type" : "Tuple",
      "underlying" : 94
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 92
      } ],
      "name" : "([]*reflect.rtype)",
      "type" : "Tuple",
      "underlying" : 95
    }, {
      "elem" : 97,
      "name" : "*reflect.sliceType",
      "type" : "Pointer",
      "underlying" : 96
    }, {
      "local-name" : "sliceType",
      "name" : "reflect.sliceType",
      "package" : 0,
      "type" : "Named",
      "underlying" : 98
    }, {
      "fields" : [ {
        "name" : "rtype",
        "type" : 48
      }, {
        "name" : "elem",
        "type" : 47
      } ],
      "name" : "struct{reflect.rtype; elem *reflect.rtype}",
      "type" : "Struct",
      "underlying" : 98
    }, {
      "name" : "untyped bool",
      "type" : "Basic",
      "underlying" : 99
    }, {
      "fields" : [ {
        "name" : "actual",
        "type" : 81
      }, {
        "name" : "loaded",
        "type" : 11
      } ],
      "name" : "(actual interface{}, loaded bool)",
      "type" : "Tuple",
      "underlying" : 100
    }, {
      "name" : "func(key interface{}, value interface{}) (actual interface{}, loaded bool)",
      "params" : 102,
      "recv" : -1,
      "results" : 100,
      "type" : "Signature",
      "underlying" : 101,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "key",
        "type" : 81
      }, {
        "name" : "value",
        "type" : 81
      } ],
      "name" : "(key interface{}, value interface{})",
      "type" : "Tuple",
      "underlying" : 102
    }, {
      "elem" : 55,
      "name" : "[]unsafe.Pointer",
      "type" : "Slice",
      "underlying" : 103
    }, {
      "elem" : 96,
      "name" : "**reflect.sliceType",
      "type" : "Pointer",
      "underlying" : 104
    }, {
      "elem" : 81,
      "name" : "*interface{}",
      "type" : "Pointer",
      "underlying" : 105
    }, {
      "name" : "func(n reflect.name) reflect.nameOff",
      "params" : 107,
      "recv" : -1,
      "results" : 110,
      "type" : "Signature",
      "underlying" : 106,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "n",
        "type" : 108
      } ],
      "name" : "(n reflect.name)",
      "type" : "Tuple",
      "underlying" : 107
    }, {
      "local-name" : "name",
      "name" : "reflect.name",
      "package" : 0,
      "type" : "Named",
      "underlying" : 109
    }, {
      "fields" : [ {
        "name" : "bytes",
        "type" : 56
      } ],
      "name" : "struct{bytes *byte}",
      "type" : "Struct",
      "underlying" : 109
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 58
      } ],
      "name" : "(reflect.nameOff)",
      "type" : "Tuple",
      "underlying" : 110
    }, {
      "name" : "func(n string, tag string, exported bool) reflect.name",
      "params" : 112,
      "recv" : -1,
      "results" : 113,
      "type" : "Signature",
      "underlying" : 111,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "n",
        "type" : 23
      }, {
        "name" : "tag",
        "type" : 23
      }, {
        "name" : "exported",
        "type" : 11
      } ],
      "name" : "(n string, tag string, exported bool)",
      "type" : "Tuple",
      "underlying" : 112
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 108
      } ],
      "name" : "(reflect.name)",
      "type" : "Tuple",
      "underlying" : 113
    }, {
      "name" : "func(x uint32, list ...byte) uint32",
      "params" : 115,
      "recv" : -1,
      "results" : 117,
      "type" : "Signature",
      "underlying" : 114,
      "variadic" : true
    }, {
      "fields" : [ {
        "name" : "x",
        "type" : 50
      }, {
        "name" : "list",
        "type" : 116
      } ],
      "name" : "(x uint32, list []byte)",
      "type" : "Tuple",
      "underlying" : 115
    }, {
      "elem" : 57,
      "name" : "[]byte",
      "type" : "Slice",
      "underlying" : 116
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 50
      } ],
      "name" : "(uint32)",
      "type" : "Tuple",
      "underlying" : 117
    } ],
    "variables" : [ {
      "name" : "",
      "package" : 0,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 0,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 0,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 0,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 0,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 0,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 0,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 0,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 0,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 0,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 0,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 0,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 0,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 0,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 0,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 0,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 0,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "t",
      "package" : 0,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "[res0]",
      "package" : 0,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "lookupCache",
      "package" : 0,
      "type" : 75,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "typ",
      "package" : 0,
      "type" : 47,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "ckey",
      "package" : 0,
      "type" : 86,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "ok",
      "package" : 0,
      "type" : 11,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "slice",
      "package" : 0,
      "type" : 81,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "s",
      "package" : 0,
      "type" : 23,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "tt",
      "package" : 0,
      "type" : 47,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "slice",
      "package" : 0,
      "type" : 96,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "elem",
      "package" : 0,
      "type" : 47,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "ti",
      "package" : 0,
      "type" : 81,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "_",
      "package" : 0,
      "type" : 7,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "_",
      "package" : 0,
      "type" : 11,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "islice",
      "package" : 0,
      "type" : 81,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "prototype",
      "package" : 0,
      "type" : 96,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "slice",
      "package" : 0,
      "type" : 97,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "tflag",
      "package" : 0,
      "type" : 51,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "str",
      "package" : 0,
      "type" : 58,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "hash",
      "package" : 0,
      "type" : 50,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "ptrToThis",
      "package" : 0,
      "type" : 60,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "rtype",
      "package" : 0,
      "type" : 48,
      "exported" : false,
      "embedded" : true,
      "field" : true
    }, {
      "name" : "ti",
      "package" : 0,
      "type" : 81,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "_",
      "package" : 0,
      "type" : 11,
      "exported" : false,
      "embedded" : false,
      "field" : false
    } ]
  },
  "go-version" : "1.14.3"
}