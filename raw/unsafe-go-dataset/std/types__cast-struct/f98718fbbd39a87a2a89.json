{
  "usage" : {
    "file" : "type.go",
    "label1" : "cast-struct",
    "label2" : "types",
    "line" : "2054",
    "module" : "std",
    "pkg" : "reflect",
    "project" : "kubernetes/kubernetes",
    "snippet" : "repr = append(repr, (*sliceType)(unsafe.Pointer(t)).elem.String()...)",
    "version" : "std"
  },
  "cfg" : {
    "blocks" : [ {
      "update-vars" : [ ],
      "successors" : [ 2 ],
      "in-vars" : [ 0 ],
      "exit" : false,
      "out-vars" : [ 0 ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[entry]",
      "entry" : true,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ ],
      "in-vars" : [ ],
      "exit" : true,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[exit]",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 3 ],
      "in-vars" : [ 0 ],
      "exit" : false,
      "out-vars" : [ 2, 0 ],
      "decl-vars" : [ 2 ],
      "line-start" : 2046,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "repr"
          }
        } ],
        "right" : [ {
          "argument" : {
            "element" : {
              "go-type" : 17,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 17,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "byte"
              }
            },
            "go-type" : 24,
            "kind" : "type",
            "type" : "slice"
          },
          "go-type" : 24,
          "kind" : "expression",
          "rest" : [ {
            "go-type" : 25,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          }, {
            "go-type" : 25,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "64"
            }
          } ],
          "type" : "make"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 2046,
      "code" : "repr := make([]byte, 0, 64)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ 2 ],
      "successors" : [ 4 ],
      "in-vars" : [ 2, 0 ],
      "exit" : false,
      "out-vars" : [ 2, 0 ],
      "decl-vars" : [ ],
      "line-start" : 2047,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 24,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "repr",
            "variable" : 2
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 24,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "repr",
              "variable" : 2
            }
          }, {
            "go-type" : 29,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "func("
            }
          } ],
          "ellipsis" : true,
          "function" : {
            "go-type" : 26,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Builtin",
              "kind" : "ident",
              "value" : "append"
            }
          },
          "go-type" : 24,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 2 ],
      "line-end" : 2047,
      "code" : "repr = append(repr, \"func(\"...)",
      "entry" : false,
      "use-vars" : [ 2 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 5, 11 ],
      "in-vars" : [ 2, 0 ],
      "exit" : false,
      "out-vars" : [ 0, 5, 3, 2 ],
      "decl-vars" : [ 5, 3 ],
      "line-start" : 2048,
      "ast" : {
        "is-assign" : false,
        "key" : {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "i"
          }
        },
        "kind" : "statement",
        "target" : {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "function" : 1,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "in"
            },
            "go-type" : 32,
            "kind" : "expression",
            "target" : {
              "go-type" : 2,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "ft",
                "variable" : 0
              }
            },
            "type" : "selector"
          },
          "go-type" : 30,
          "kind" : "expression",
          "type" : "call"
        },
        "type" : "range",
        "value" : {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "t"
          }
        }
      },
      "assign-vars" : [ ],
      "line-end" : 2058,
      "code" : "for i, t := range ft.in() {\n\tif i > 0 {\n\t\trepr = append(repr, \", \"...)\n\t}\n\tif ft.IsVariadic() && i == int(ft.inCount)-1 {\n\t\trepr = append(repr, \"...\"...)\n\t\trepr = append(repr, (*sliceType)(unsafe.Pointer(t)).elem.String()...)\n\t} else {\n\t\trepr = append(repr, t.String()...)\n\t}\n}",
      "entry" : false,
      "use-vars" : [ 0 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 6, 7 ],
      "in-vars" : [ 2, 0, 5, 3 ],
      "exit" : false,
      "out-vars" : [ 3, 2, 0, 5 ],
      "decl-vars" : [ ],
      "line-start" : 2049,
      "ast" : {
        "condition" : {
          "go-type" : 35,
          "kind" : "expression",
          "left" : {
            "go-type" : 25,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "i",
              "variable" : 3
            }
          },
          "operator" : ">",
          "right" : {
            "go-type" : 25,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 2051,
      "code" : "if i > 0 {\n\trepr = append(repr, \", \"...)\n}",
      "entry" : false,
      "use-vars" : [ 3 ]
    }, {
      "update-vars" : [ 2 ],
      "successors" : [ 7 ],
      "in-vars" : [ 2, 0, 5, 3 ],
      "exit" : false,
      "out-vars" : [ 5, 3, 2, 0 ],
      "decl-vars" : [ ],
      "line-start" : 2050,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 24,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "repr",
            "variable" : 2
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 24,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "repr",
              "variable" : 2
            }
          }, {
            "go-type" : 29,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : ", "
            }
          } ],
          "ellipsis" : true,
          "function" : {
            "go-type" : 26,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Builtin",
              "kind" : "ident",
              "value" : "append"
            }
          },
          "go-type" : 24,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 2 ],
      "line-end" : 2050,
      "code" : "repr = append(repr, \", \"...)",
      "entry" : false,
      "use-vars" : [ 2 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 8, 10 ],
      "in-vars" : [ 2, 0, 5, 3 ],
      "exit" : false,
      "out-vars" : [ 2, 0, 5 ],
      "decl-vars" : [ ],
      "line-start" : 2052,
      "ast" : {
        "condition" : {
          "go-type" : 15,
          "kind" : "expression",
          "left" : {
            "arguments" : [ ],
            "ellipsis" : false,
            "function" : {
              "field" : {
                "function" : 2,
                "ident-kind" : "Func",
                "kind" : "ident",
                "value" : "IsVariadic"
              },
              "go-type" : 36,
              "kind" : "expression",
              "target" : {
                "go-type" : 2,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "ft",
                  "variable" : 0
                }
              },
              "type" : "selector"
            },
            "go-type" : 15,
            "kind" : "expression",
            "type" : "call"
          },
          "operator" : "&&",
          "right" : {
            "go-type" : 15,
            "kind" : "expression",
            "left" : {
              "go-type" : 25,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "i",
                "variable" : 3
              }
            },
            "operator" : "==",
            "right" : {
              "go-type" : 25,
              "kind" : "expression",
              "left" : {
                "coerced-to" : {
                  "go-type" : 25,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 25,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "int"
                  }
                },
                "go-type" : 25,
                "kind" : "expression",
                "target" : {
                  "field" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "inCount",
                    "variable" : 4
                  },
                  "go-type" : 21,
                  "kind" : "expression",
                  "target" : {
                    "go-type" : 2,
                    "kind" : "expression",
                    "type" : "identifier",
                    "value" : {
                      "ident-kind" : "Var",
                      "kind" : "ident",
                      "value" : "ft",
                      "variable" : 0
                    }
                  },
                  "type" : "selector"
                },
                "type" : "cast"
              },
              "operator" : "-",
              "right" : {
                "go-type" : 25,
                "kind" : "constant",
                "value" : {
                  "type" : "INT",
                  "value" : "1"
                }
              },
              "type" : "binary"
            },
            "type" : "binary"
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 2057,
      "code" : "if ft.IsVariadic() && i == int(ft.inCount)-1 {\n\trepr = append(repr, \"...\"...)\n\trepr = append(repr, (*sliceType)(unsafe.Pointer(t)).elem.String()...)\n} else {\n\trepr = append(repr, t.String()...)\n}",
      "entry" : false,
      "use-vars" : [ 0, 3 ]
    }, {
      "update-vars" : [ 2 ],
      "successors" : [ 9 ],
      "in-vars" : [ 2, 0, 5 ],
      "exit" : false,
      "out-vars" : [ 2, 0, 5 ],
      "decl-vars" : [ ],
      "line-start" : 2053,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 24,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "repr",
            "variable" : 2
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 24,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "repr",
              "variable" : 2
            }
          }, {
            "go-type" : 29,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "..."
            }
          } ],
          "ellipsis" : true,
          "function" : {
            "go-type" : 26,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Builtin",
              "kind" : "ident",
              "value" : "append"
            }
          },
          "go-type" : 24,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 2 ],
      "line-end" : 2053,
      "code" : "repr = append(repr, \"...\"...)",
      "entry" : false,
      "use-vars" : [ 2 ]
    }, {
      "update-vars" : [ 2 ],
      "successors" : [ 4 ],
      "in-vars" : [ 2, 0, 5 ],
      "exit" : false,
      "out-vars" : [ 2, 0 ],
      "decl-vars" : [ ],
      "line-start" : 2054,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 24,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "repr",
            "variable" : 2
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 24,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "repr",
              "variable" : 2
            }
          }, {
            "arguments" : [ ],
            "ellipsis" : false,
            "function" : {
              "field" : {
                "function" : 3,
                "ident-kind" : "Func",
                "kind" : "ident",
                "value" : "String"
              },
              "go-type" : 37,
              "kind" : "expression",
              "target" : {
                "field" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "elem",
                  "variable" : 6
                },
                "go-type" : 31,
                "kind" : "expression",
                "target" : {
                  "coerced-to" : {
                    "contained" : {
                      "go-type" : 39,
                      "kind" : "type",
                      "type" : "identifier",
                      "value" : {
                        "go-type" : 39,
                        "ident-kind" : "TypeName",
                        "kind" : "ident",
                        "value" : "sliceType"
                      }
                    },
                    "go-type" : 38,
                    "kind" : "type",
                    "type" : "pointer"
                  },
                  "go-type" : 38,
                  "kind" : "expression",
                  "target" : {
                    "coerced-to" : {
                      "go-type" : 13,
                      "kind" : "type",
                      "qualifier" : {
                        "ident-kind" : "PkgName",
                        "kind" : "ident",
                        "package" : 1,
                        "value" : "unsafe"
                      },
                      "type" : "identifier",
                      "value" : {
                        "go-type" : 13,
                        "ident-kind" : "TypeName",
                        "kind" : "ident",
                        "value" : "Pointer"
                      }
                    },
                    "go-type" : 13,
                    "kind" : "expression",
                    "target" : {
                      "go-type" : 31,
                      "kind" : "expression",
                      "type" : "identifier",
                      "value" : {
                        "ident-kind" : "Var",
                        "kind" : "ident",
                        "value" : "t",
                        "variable" : 5
                      }
                    },
                    "type" : "cast"
                  },
                  "type" : "cast"
                },
                "type" : "selector"
              },
              "type" : "selector"
            },
            "go-type" : 23,
            "kind" : "expression",
            "type" : "call"
          } ],
          "ellipsis" : true,
          "function" : {
            "go-type" : 26,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Builtin",
              "kind" : "ident",
              "value" : "append"
            }
          },
          "go-type" : 24,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 2 ],
      "line-end" : 2054,
      "code" : "repr = append(repr, (*sliceType)(unsafe.Pointer(t)).elem.String()...)",
      "entry" : false,
      "use-vars" : [ 5, 2 ]
    }, {
      "update-vars" : [ 2 ],
      "successors" : [ 4 ],
      "in-vars" : [ 5, 2, 0 ],
      "exit" : false,
      "out-vars" : [ 2, 0 ],
      "decl-vars" : [ ],
      "line-start" : 2056,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 24,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "repr",
            "variable" : 2
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 24,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "repr",
              "variable" : 2
            }
          }, {
            "arguments" : [ ],
            "ellipsis" : false,
            "function" : {
              "field" : {
                "function" : 3,
                "ident-kind" : "Func",
                "kind" : "ident",
                "value" : "String"
              },
              "go-type" : 37,
              "kind" : "expression",
              "target" : {
                "go-type" : 31,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "t",
                  "variable" : 5
                }
              },
              "type" : "selector"
            },
            "go-type" : 23,
            "kind" : "expression",
            "type" : "call"
          } ],
          "ellipsis" : true,
          "function" : {
            "go-type" : 26,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Builtin",
              "kind" : "ident",
              "value" : "append"
            }
          },
          "go-type" : 24,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 2 ],
      "line-end" : 2056,
      "code" : "repr = append(repr, t.String()...)",
      "entry" : false,
      "use-vars" : [ 2, 5 ]
    }, {
      "update-vars" : [ 2 ],
      "successors" : [ 12 ],
      "in-vars" : [ 2, 0 ],
      "exit" : false,
      "out-vars" : [ 2, 0 ],
      "decl-vars" : [ ],
      "line-start" : 2059,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 24,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "repr",
            "variable" : 2
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 24,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "repr",
              "variable" : 2
            }
          }, {
            "go-type" : 17,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "41"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 41,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Builtin",
              "kind" : "ident",
              "value" : "append"
            }
          },
          "go-type" : 24,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 2 ],
      "line-end" : 2059,
      "code" : "repr = append(repr, ')')",
      "entry" : false,
      "use-vars" : [ 2 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 13 ],
      "in-vars" : [ 2, 0 ],
      "exit" : false,
      "out-vars" : [ 2, 7 ],
      "decl-vars" : [ 7 ],
      "line-start" : 2060,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "out"
          }
        } ],
        "right" : [ {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "function" : 4,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "out"
            },
            "go-type" : 32,
            "kind" : "expression",
            "target" : {
              "go-type" : 2,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "ft",
                "variable" : 0
              }
            },
            "type" : "selector"
          },
          "go-type" : 30,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 2060,
      "code" : "out := ft.out()",
      "entry" : false,
      "use-vars" : [ 0 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 14, 15 ],
      "in-vars" : [ 2, 7 ],
      "exit" : false,
      "out-vars" : [ 2, 7 ],
      "decl-vars" : [ ],
      "line-start" : 2061,
      "ast" : {
        "condition" : {
          "go-type" : 35,
          "kind" : "expression",
          "left" : {
            "arguments" : [ {
              "go-type" : 30,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "out",
                "variable" : 7
              }
            } ],
            "ellipsis" : false,
            "function" : {
              "go-type" : 43,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Builtin",
                "kind" : "ident",
                "value" : "len"
              }
            },
            "go-type" : 25,
            "kind" : "expression",
            "type" : "call"
          },
          "operator" : "==",
          "right" : {
            "go-type" : 25,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "1"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 2065,
      "code" : "if len(out) == 1 {\n\trepr = append(repr, ' ')\n} else if len(out) > 1 {\n\trepr = append(repr, \" (\"...)\n}",
      "entry" : false,
      "use-vars" : [ 7 ]
    }, {
      "update-vars" : [ 2 ],
      "successors" : [ 17 ],
      "in-vars" : [ 2, 7 ],
      "exit" : false,
      "out-vars" : [ 2, 7 ],
      "decl-vars" : [ ],
      "line-start" : 2062,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 24,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "repr",
            "variable" : 2
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 24,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "repr",
              "variable" : 2
            }
          }, {
            "go-type" : 17,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "32"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 41,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Builtin",
              "kind" : "ident",
              "value" : "append"
            }
          },
          "go-type" : 24,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 2 ],
      "line-end" : 2062,
      "code" : "repr = append(repr, ' ')",
      "entry" : false,
      "use-vars" : [ 2 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 16, 17 ],
      "in-vars" : [ 2, 7 ],
      "exit" : false,
      "out-vars" : [ 2, 7 ],
      "decl-vars" : [ ],
      "line-start" : 2063,
      "ast" : {
        "condition" : {
          "go-type" : 35,
          "kind" : "expression",
          "left" : {
            "arguments" : [ {
              "go-type" : 30,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "out",
                "variable" : 7
              }
            } ],
            "ellipsis" : false,
            "function" : {
              "go-type" : 43,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Builtin",
                "kind" : "ident",
                "value" : "len"
              }
            },
            "go-type" : 25,
            "kind" : "expression",
            "type" : "call"
          },
          "operator" : ">",
          "right" : {
            "go-type" : 25,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "1"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 2065,
      "code" : "if len(out) > 1 {\n\trepr = append(repr, \" (\"...)\n}",
      "entry" : false,
      "use-vars" : [ 7 ]
    }, {
      "update-vars" : [ 2 ],
      "successors" : [ 17 ],
      "in-vars" : [ 2, 7 ],
      "exit" : false,
      "out-vars" : [ 7, 2 ],
      "decl-vars" : [ ],
      "line-start" : 2064,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 24,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "repr",
            "variable" : 2
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 24,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "repr",
              "variable" : 2
            }
          }, {
            "go-type" : 29,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : " ("
            }
          } ],
          "ellipsis" : true,
          "function" : {
            "go-type" : 26,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Builtin",
              "kind" : "ident",
              "value" : "append"
            }
          },
          "go-type" : 24,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 2 ],
      "line-end" : 2064,
      "code" : "repr = append(repr, \" (\"...)",
      "entry" : false,
      "use-vars" : [ 2 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 18, 21 ],
      "in-vars" : [ 2, 7 ],
      "exit" : false,
      "out-vars" : [ 2, 7, 9, 8 ],
      "decl-vars" : [ 9, 8 ],
      "line-start" : 2066,
      "ast" : {
        "is-assign" : false,
        "key" : {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "i"
          }
        },
        "kind" : "statement",
        "target" : {
          "go-type" : 30,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "out",
            "variable" : 7
          }
        },
        "type" : "range",
        "value" : {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "t"
          }
        }
      },
      "assign-vars" : [ ],
      "line-end" : 2071,
      "code" : "for i, t := range out {\n\tif i > 0 {\n\t\trepr = append(repr, \", \"...)\n\t}\n\trepr = append(repr, t.String()...)\n}",
      "entry" : false,
      "use-vars" : [ 7 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 19, 20 ],
      "in-vars" : [ 8, 2, 7, 9 ],
      "exit" : false,
      "out-vars" : [ 2, 7, 9 ],
      "decl-vars" : [ ],
      "line-start" : 2067,
      "ast" : {
        "condition" : {
          "go-type" : 35,
          "kind" : "expression",
          "left" : {
            "go-type" : 25,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "i",
              "variable" : 8
            }
          },
          "operator" : ">",
          "right" : {
            "go-type" : 25,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 2069,
      "code" : "if i > 0 {\n\trepr = append(repr, \", \"...)\n}",
      "entry" : false,
      "use-vars" : [ 8 ]
    }, {
      "update-vars" : [ 2 ],
      "successors" : [ 20 ],
      "in-vars" : [ 2, 7, 9 ],
      "exit" : false,
      "out-vars" : [ 2, 7, 9 ],
      "decl-vars" : [ ],
      "line-start" : 2068,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 24,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "repr",
            "variable" : 2
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 24,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "repr",
              "variable" : 2
            }
          }, {
            "go-type" : 29,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : ", "
            }
          } ],
          "ellipsis" : true,
          "function" : {
            "go-type" : 26,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Builtin",
              "kind" : "ident",
              "value" : "append"
            }
          },
          "go-type" : 24,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 2 ],
      "line-end" : 2068,
      "code" : "repr = append(repr, \", \"...)",
      "entry" : false,
      "use-vars" : [ 2 ]
    }, {
      "update-vars" : [ 2 ],
      "successors" : [ 17 ],
      "in-vars" : [ 7, 9, 2 ],
      "exit" : false,
      "out-vars" : [ 2, 7 ],
      "decl-vars" : [ ],
      "line-start" : 2070,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 24,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "repr",
            "variable" : 2
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 24,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "repr",
              "variable" : 2
            }
          }, {
            "arguments" : [ ],
            "ellipsis" : false,
            "function" : {
              "field" : {
                "function" : 3,
                "ident-kind" : "Func",
                "kind" : "ident",
                "value" : "String"
              },
              "go-type" : 37,
              "kind" : "expression",
              "target" : {
                "go-type" : 31,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "t",
                  "variable" : 9
                }
              },
              "type" : "selector"
            },
            "go-type" : 23,
            "kind" : "expression",
            "type" : "call"
          } ],
          "ellipsis" : true,
          "function" : {
            "go-type" : 26,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Builtin",
              "kind" : "ident",
              "value" : "append"
            }
          },
          "go-type" : 24,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 2 ],
      "line-end" : 2070,
      "code" : "repr = append(repr, t.String()...)",
      "entry" : false,
      "use-vars" : [ 2, 9 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 22, 23 ],
      "in-vars" : [ 2, 7 ],
      "exit" : false,
      "out-vars" : [ 2 ],
      "decl-vars" : [ ],
      "line-start" : 2072,
      "ast" : {
        "condition" : {
          "go-type" : 35,
          "kind" : "expression",
          "left" : {
            "arguments" : [ {
              "go-type" : 30,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "out",
                "variable" : 7
              }
            } ],
            "ellipsis" : false,
            "function" : {
              "go-type" : 43,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Builtin",
                "kind" : "ident",
                "value" : "len"
              }
            },
            "go-type" : 25,
            "kind" : "expression",
            "type" : "call"
          },
          "operator" : ">",
          "right" : {
            "go-type" : 25,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "1"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 2074,
      "code" : "if len(out) > 1 {\n\trepr = append(repr, ')')\n}",
      "entry" : false,
      "use-vars" : [ 7 ]
    }, {
      "update-vars" : [ 2 ],
      "successors" : [ 23 ],
      "in-vars" : [ 2 ],
      "exit" : false,
      "out-vars" : [ 2 ],
      "decl-vars" : [ ],
      "line-start" : 2073,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 24,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "repr",
            "variable" : 2
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 24,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "repr",
              "variable" : 2
            }
          }, {
            "go-type" : 17,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "41"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 41,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Builtin",
              "kind" : "ident",
              "value" : "append"
            }
          },
          "go-type" : 24,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 2 ],
      "line-end" : 2073,
      "code" : "repr = append(repr, ')')",
      "entry" : false,
      "use-vars" : [ 2 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 2 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 2075,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "coerced-to" : {
            "go-type" : 23,
            "kind" : "type",
            "type" : "identifier",
            "value" : {
              "go-type" : 23,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "string"
            }
          },
          "go-type" : 23,
          "kind" : "expression",
          "target" : {
            "go-type" : 24,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "repr",
              "variable" : 2
            }
          },
          "type" : "cast"
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 2075,
      "code" : "return string(repr)",
      "entry" : false,
      "use-vars" : [ 2 ]
    } ],
    "code" : "// funcStr builds a string representation of a funcType.\nfunc funcStr(ft *funcType) string {\n\trepr := make([]byte, 0, 64)\n\trepr = append(repr, \"func(\"...)\n\tfor i, t := range ft.in() {\n\t\tif i > 0 {\n\t\t\trepr = append(repr, \", \"...)\n\t\t}\n\t\tif ft.IsVariadic() && i == int(ft.inCount)-1 {\n\t\t\trepr = append(repr, \"...\"...)\n\t\t\trepr = append(repr, (*sliceType)(unsafe.Pointer(t)).elem.String()...)\n\t\t} else {\n\t\t\trepr = append(repr, t.String()...)\n\t\t}\n\t}\n\trepr = append(repr, ')')\n\tout := ft.out()\n\tif len(out) == 1 {\n\t\trepr = append(repr, ' ')\n\t} else if len(out) > 1 {\n\t\trepr = append(repr, \" (\"...)\n\t}\n\tfor i, t := range out {\n\t\tif i > 0 {\n\t\t\trepr = append(repr, \", \"...)\n\t\t}\n\t\trepr = append(repr, t.String()...)\n\t}\n\tif len(out) > 1 {\n\t\trepr = append(repr, ')')\n\t}\n\treturn string(repr)\n}",
    "defines" : [ 0 ],
    "functions" : [ {
      "name" : "funcStr",
      "package" : 0,
      "type" : 0,
      "exported" : false
    }, {
      "name" : "in",
      "package" : 0,
      "type" : 32,
      "exported" : false
    }, {
      "name" : "IsVariadic",
      "package" : 0,
      "type" : 36,
      "exported" : true
    }, {
      "name" : "String",
      "package" : 0,
      "type" : 37,
      "exported" : true
    }, {
      "name" : "out",
      "package" : 0,
      "type" : 32,
      "exported" : false
    } ],
    "line-end" : 2076,
    "line-start" : 2045,
    "names" : [ "funcStr" ],
    "package" : 0,
    "packages" : [ {
      "name" : "reflect",
      "path" : "reflect"
    }, {
      "name" : "unsafe",
      "path" : "unsafe"
    } ],
    "params" : [ 0 ],
    "receivers" : [ ],
    "results" : [ 1 ],
    "type" : "function",
    "types" : [ {
      "name" : "func(ft *reflect.funcType) string",
      "params" : 1,
      "recv" : -1,
      "results" : 22,
      "type" : "Signature",
      "underlying" : 0,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "ft",
        "type" : 2
      } ],
      "name" : "(ft *reflect.funcType)",
      "type" : "Tuple",
      "underlying" : 1
    }, {
      "elem" : 3,
      "name" : "*reflect.funcType",
      "type" : "Pointer",
      "underlying" : 2
    }, {
      "local-name" : "funcType",
      "name" : "reflect.funcType",
      "package" : 0,
      "type" : "Named",
      "underlying" : 4
    }, {
      "fields" : [ {
        "name" : "rtype",
        "type" : 5
      }, {
        "name" : "inCount",
        "type" : 21
      }, {
        "name" : "outCount",
        "type" : 21
      } ],
      "name" : "struct{reflect.rtype; inCount uint16; outCount uint16}",
      "type" : "Struct",
      "underlying" : 4
    }, {
      "local-name" : "rtype",
      "name" : "reflect.rtype",
      "package" : 0,
      "type" : "Named",
      "underlying" : 6
    }, {
      "fields" : [ {
        "name" : "size",
        "type" : 7
      }, {
        "name" : "ptrdata",
        "type" : 7
      }, {
        "name" : "hash",
        "type" : 8
      }, {
        "name" : "tflag",
        "type" : 9
      }, {
        "name" : "align",
        "type" : 10
      }, {
        "name" : "fieldAlign",
        "type" : 10
      }, {
        "name" : "kind",
        "type" : 10
      }, {
        "name" : "equal",
        "type" : 11
      }, {
        "name" : "gcdata",
        "type" : 16
      }, {
        "name" : "str",
        "type" : 18
      }, {
        "name" : "ptrToThis",
        "type" : 20
      } ],
      "name" : "struct{size uintptr; ptrdata uintptr; hash uint32; tflag reflect.tflag; align uint8; fieldAlign uint8; kind uint8; equal func(unsafe.Pointer, unsafe.Pointer) bool; gcdata *byte; str reflect.nameOff; ptrToThis reflect.typeOff}",
      "type" : "Struct",
      "underlying" : 6
    }, {
      "name" : "uintptr",
      "type" : "Basic",
      "underlying" : 7
    }, {
      "name" : "uint32",
      "type" : "Basic",
      "underlying" : 8
    }, {
      "local-name" : "tflag",
      "name" : "reflect.tflag",
      "package" : 0,
      "type" : "Named",
      "underlying" : 10
    }, {
      "name" : "uint8",
      "type" : "Basic",
      "underlying" : 10
    }, {
      "name" : "func(unsafe.Pointer, unsafe.Pointer) bool",
      "params" : 12,
      "recv" : -1,
      "results" : 14,
      "type" : "Signature",
      "underlying" : 11,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 13
      }, {
        "name" : "",
        "type" : 13
      } ],
      "name" : "(unsafe.Pointer, unsafe.Pointer)",
      "type" : "Tuple",
      "underlying" : 12
    }, {
      "local-name" : "Pointer",
      "name" : "unsafe.Pointer",
      "package" : 1,
      "type" : "Basic",
      "underlying" : 13
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 15
      } ],
      "name" : "(bool)",
      "type" : "Tuple",
      "underlying" : 14
    }, {
      "name" : "bool",
      "type" : "Basic",
      "underlying" : 15
    }, {
      "elem" : 17,
      "name" : "*byte",
      "type" : "Pointer",
      "underlying" : 16
    }, {
      "name" : "byte",
      "type" : "Basic",
      "underlying" : 17
    }, {
      "local-name" : "nameOff",
      "name" : "reflect.nameOff",
      "package" : 0,
      "type" : "Named",
      "underlying" : 19
    }, {
      "name" : "int32",
      "type" : "Basic",
      "underlying" : 19
    }, {
      "local-name" : "typeOff",
      "name" : "reflect.typeOff",
      "package" : 0,
      "type" : "Named",
      "underlying" : 19
    }, {
      "name" : "uint16",
      "type" : "Basic",
      "underlying" : 21
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 23
      } ],
      "name" : "(string)",
      "type" : "Tuple",
      "underlying" : 22
    }, {
      "name" : "string",
      "type" : "Basic",
      "underlying" : 23
    }, {
      "elem" : 17,
      "name" : "[]byte",
      "type" : "Slice",
      "underlying" : 24
    }, {
      "name" : "int",
      "type" : "Basic",
      "underlying" : 25
    }, {
      "name" : "func([]byte, string...) []byte",
      "params" : 27,
      "recv" : -1,
      "results" : 28,
      "type" : "Signature",
      "underlying" : 26,
      "variadic" : true
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 24
      }, {
        "name" : "",
        "type" : 23
      } ],
      "name" : "([]byte, string)",
      "type" : "Tuple",
      "underlying" : 27
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 24
      } ],
      "name" : "([]byte)",
      "type" : "Tuple",
      "underlying" : 28
    }, {
      "name" : "untyped string",
      "type" : "Basic",
      "underlying" : 29
    }, {
      "elem" : 31,
      "name" : "[]*reflect.rtype",
      "type" : "Slice",
      "underlying" : 30
    }, {
      "elem" : 5,
      "name" : "*reflect.rtype",
      "type" : "Pointer",
      "underlying" : 31
    }, {
      "name" : "func() []*reflect.rtype",
      "params" : 33,
      "recv" : -1,
      "results" : 34,
      "type" : "Signature",
      "underlying" : 32,
      "variadic" : false
    }, {
      "fields" : [ ],
      "name" : "()",
      "type" : "Tuple",
      "underlying" : 33
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 30
      } ],
      "name" : "([]*reflect.rtype)",
      "type" : "Tuple",
      "underlying" : 34
    }, {
      "name" : "untyped bool",
      "type" : "Basic",
      "underlying" : 35
    }, {
      "name" : "func() bool",
      "params" : 33,
      "recv" : -1,
      "results" : 14,
      "type" : "Signature",
      "underlying" : 36,
      "variadic" : false
    }, {
      "name" : "func() string",
      "params" : 33,
      "recv" : -1,
      "results" : 22,
      "type" : "Signature",
      "underlying" : 37,
      "variadic" : false
    }, {
      "elem" : 39,
      "name" : "*reflect.sliceType",
      "type" : "Pointer",
      "underlying" : 38
    }, {
      "local-name" : "sliceType",
      "name" : "reflect.sliceType",
      "package" : 0,
      "type" : "Named",
      "underlying" : 40
    }, {
      "fields" : [ {
        "name" : "rtype",
        "type" : 5
      }, {
        "name" : "elem",
        "type" : 31
      } ],
      "name" : "struct{reflect.rtype; elem *reflect.rtype}",
      "type" : "Struct",
      "underlying" : 40
    }, {
      "name" : "func([]byte, ...byte) []byte",
      "params" : 42,
      "recv" : -1,
      "results" : 28,
      "type" : "Signature",
      "underlying" : 41,
      "variadic" : true
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 24
      }, {
        "name" : "",
        "type" : 24
      } ],
      "name" : "([]byte, []byte)",
      "type" : "Tuple",
      "underlying" : 42
    }, {
      "name" : "func([]*reflect.rtype) int",
      "params" : 34,
      "recv" : -1,
      "results" : 44,
      "type" : "Signature",
      "underlying" : 43,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 25
      } ],
      "name" : "(int)",
      "type" : "Tuple",
      "underlying" : 44
    } ],
    "variables" : [ {
      "name" : "ft",
      "package" : 0,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "[res0]",
      "package" : 0,
      "type" : 23,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "repr",
      "package" : 0,
      "type" : 24,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "i",
      "package" : 0,
      "type" : 25,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "inCount",
      "package" : 0,
      "type" : 21,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "t",
      "package" : 0,
      "type" : 31,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "elem",
      "package" : 0,
      "type" : 31,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "out",
      "package" : 0,
      "type" : 30,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "i",
      "package" : 0,
      "type" : 25,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "t",
      "package" : 0,
      "type" : 31,
      "exported" : false,
      "embedded" : false,
      "field" : false
    } ]
  },
  "go-version" : "1.14.3"
}