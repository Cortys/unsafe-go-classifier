{
  "usage" : {
    "file" : "iface.go",
    "label1" : "cast-struct",
    "label2" : "types",
    "line" : "204",
    "module" : "std",
    "pkg" : "runtime",
    "project" : "kubernetes/kubernetes",
    "snippet" : "methods := (*[1 << 16]unsafe.Pointer)(unsafe.Pointer(&m.fun[0]))[:ni:ni]",
    "version" : "std"
  },
  "cfg" : {
    "blocks" : [ {
      "update-vars" : [ ],
      "successors" : [ 2 ],
      "in-vars" : [ 0 ],
      "exit" : false,
      "out-vars" : [ 0 ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[entry]",
      "entry" : true,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ ],
      "in-vars" : [ ],
      "exit" : true,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[exit]",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 3 ],
      "in-vars" : [ 0 ],
      "exit" : false,
      "out-vars" : [ 3, 0 ],
      "decl-vars" : [ 3 ],
      "line-start" : 192,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "inter"
          }
        } ],
        "right" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "inter",
            "variable" : 2
          },
          "go-type" : 3,
          "kind" : "expression",
          "target" : {
            "go-type" : 0,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "m",
              "variable" : 0
            }
          },
          "type" : "selector"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 192,
      "code" : "inter := m.inter",
      "entry" : false,
      "use-vars" : [ 0 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 4 ],
      "in-vars" : [ 3, 0 ],
      "exit" : false,
      "out-vars" : [ 3, 0, 5 ],
      "decl-vars" : [ 5 ],
      "line-start" : 193,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "typ"
          }
        } ],
        "right" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "_type",
            "variable" : 4
          },
          "go-type" : 27,
          "kind" : "expression",
          "target" : {
            "go-type" : 0,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "m",
              "variable" : 0
            }
          },
          "type" : "selector"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 193,
      "code" : "typ := m._type",
      "entry" : false,
      "use-vars" : [ 0 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 5 ],
      "in-vars" : [ 3, 0, 5 ],
      "exit" : false,
      "out-vars" : [ 0, 6, 5, 3 ],
      "decl-vars" : [ 6 ],
      "line-start" : 194,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "x"
          }
        } ],
        "right" : [ {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "uncommon"
            },
            "go-type" : 8,
            "kind" : "expression",
            "target" : {
              "go-type" : 27,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "typ",
                "variable" : 5
              }
            },
            "type" : "selector"
          },
          "go-type" : 4,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 194,
      "code" : "x := typ.uncommon()",
      "entry" : false,
      "use-vars" : [ 5 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 6 ],
      "in-vars" : [ 5, 3, 0, 6 ],
      "exit" : false,
      "out-vars" : [ 0, 6, 5, 3, 8 ],
      "decl-vars" : [ 8 ],
      "line-start" : 200,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "ni"
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "mhdr",
              "variable" : 7
            },
            "go-type" : 24,
            "kind" : "expression",
            "target" : {
              "go-type" : 3,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "inter",
                "variable" : 3
              }
            },
            "type" : "selector"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 11,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Builtin",
              "kind" : "ident",
              "value" : "len"
            }
          },
          "go-type" : 10,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 200,
      "code" : "ni := len(inter.mhdr)",
      "entry" : false,
      "use-vars" : [ 3 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 7 ],
      "in-vars" : [ 3, 8, 0, 6, 5 ],
      "exit" : false,
      "out-vars" : [ 8, 0, 10, 6, 5, 3 ],
      "decl-vars" : [ 10 ],
      "line-start" : 201,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "nt"
          }
        } ],
        "right" : [ {
          "coerced-to" : {
            "go-type" : 10,
            "kind" : "type",
            "type" : "identifier",
            "value" : {
              "go-type" : 10,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "int"
            }
          },
          "go-type" : 10,
          "kind" : "expression",
          "target" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "mcount",
              "variable" : 9
            },
            "go-type" : 7,
            "kind" : "expression",
            "target" : {
              "go-type" : 4,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "x",
                "variable" : 6
              }
            },
            "type" : "selector"
          },
          "type" : "cast"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 201,
      "code" : "nt := int(x.mcount)",
      "entry" : false,
      "use-vars" : [ 6 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 8 ],
      "in-vars" : [ 3, 8, 0, 10, 6, 5 ],
      "exit" : false,
      "out-vars" : [ 6, 5, 12, 3, 8, 0, 10 ],
      "decl-vars" : [ 12 ],
      "line-start" : 202,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "xmhdr"
          }
        } ],
        "right" : [ {
          "go-type" : 14,
          "type" : "slice",
          "three" : true,
          "high" : {
            "go-type" : 10,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "nt",
              "variable" : 10
            }
          },
          "max" : {
            "go-type" : 10,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "nt",
              "variable" : 10
            }
          },
          "kind" : "expression",
          "low" : null,
          "target" : {
            "coerced-to" : {
              "contained" : {
                "element" : {
                  "go-type" : 15,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 15,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "method"
                  }
                },
                "go-type" : 19,
                "kind" : "type",
                "length" : {
                  "go-type" : 20,
                  "kind" : "constant",
                  "value" : {
                    "type" : "INT",
                    "value" : "65536"
                  }
                },
                "type" : "array"
              },
              "go-type" : 18,
              "kind" : "type",
              "type" : "pointer"
            },
            "go-type" : 18,
            "kind" : "expression",
            "target" : {
              "arguments" : [ {
                "coerced-to" : {
                  "go-type" : 14,
                  "kind" : "type",
                  "qualifier" : {
                    "ident-kind" : "PkgName",
                    "kind" : "ident",
                    "package" : 1,
                    "value" : "unsafe"
                  },
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 14,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "Pointer"
                  }
                },
                "go-type" : 14,
                "kind" : "expression",
                "target" : {
                  "go-type" : 4,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "x",
                    "variable" : 6
                  }
                },
                "type" : "cast"
              }, {
                "coerced-to" : {
                  "go-type" : 8,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 8,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "uintptr"
                  }
                },
                "go-type" : 8,
                "kind" : "expression",
                "target" : {
                  "field" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "moff",
                    "variable" : 11
                  },
                  "go-type" : 9,
                  "kind" : "expression",
                  "target" : {
                    "go-type" : 4,
                    "kind" : "expression",
                    "type" : "identifier",
                    "value" : {
                      "ident-kind" : "Var",
                      "kind" : "ident",
                      "value" : "x",
                      "variable" : 6
                    }
                  },
                  "type" : "selector"
                },
                "type" : "cast"
              } ],
              "ellipsis" : false,
              "function" : {
                "go-type" : 21,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Func",
                  "kind" : "ident",
                  "value" : "add"
                }
              },
              "go-type" : 14,
              "kind" : "expression",
              "type" : "call"
            },
            "type" : "cast"
          }
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 202,
      "code" : "xmhdr := (*[1 << 16]method)(add(unsafe.Pointer(x), uintptr(x.moff)))[:nt:nt]",
      "entry" : false,
      "use-vars" : [ 10, 6 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 9 ],
      "in-vars" : [ 0, 10, 6, 5, 12, 3, 8 ],
      "exit" : false,
      "out-vars" : [ 13, 8, 0, 10, 6, 5, 12, 3 ],
      "decl-vars" : [ 13 ],
      "line-start" : 203,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "j"
          }
        } ],
        "right" : [ {
          "go-type" : 10,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "0"
          }
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 203,
      "code" : "j := 0",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 10 ],
      "in-vars" : [ 10, 6, 5, 12, 3, 13, 8, 0 ],
      "exit" : false,
      "out-vars" : [ 15, 6, 5, 12, 13, 8, 0, 10, 3 ],
      "decl-vars" : [ 15 ],
      "line-start" : 204,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "methods"
          }
        } ],
        "right" : [ {
          "go-type" : 24,
          "type" : "slice",
          "three" : true,
          "high" : {
            "go-type" : 10,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "ni",
              "variable" : 8
            }
          },
          "max" : {
            "go-type" : 10,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "ni",
              "variable" : 8
            }
          },
          "kind" : "expression",
          "low" : null,
          "target" : {
            "coerced-to" : {
              "contained" : {
                "element" : {
                  "go-type" : 14,
                  "kind" : "type",
                  "qualifier" : {
                    "ident-kind" : "PkgName",
                    "kind" : "ident",
                    "package" : 1,
                    "value" : "unsafe"
                  },
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 14,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "Pointer"
                  }
                },
                "go-type" : 26,
                "kind" : "type",
                "length" : {
                  "go-type" : 20,
                  "kind" : "constant",
                  "value" : {
                    "type" : "INT",
                    "value" : "65536"
                  }
                },
                "type" : "array"
              },
              "go-type" : 25,
              "kind" : "type",
              "type" : "pointer"
            },
            "go-type" : 25,
            "kind" : "expression",
            "target" : {
              "coerced-to" : {
                "go-type" : 14,
                "kind" : "type",
                "qualifier" : {
                  "ident-kind" : "PkgName",
                  "kind" : "ident",
                  "package" : 1,
                  "value" : "unsafe"
                },
                "type" : "identifier",
                "value" : {
                  "go-type" : 14,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "Pointer"
                }
              },
              "go-type" : 14,
              "kind" : "expression",
              "target" : {
                "go-type" : 27,
                "kind" : "expression",
                "operator" : "&",
                "target" : {
                  "go-type" : 8,
                  "index" : {
                    "go-type" : 10,
                    "kind" : "constant",
                    "value" : {
                      "type" : "INT",
                      "value" : "0"
                    }
                  },
                  "kind" : "expression",
                  "target" : {
                    "field" : {
                      "ident-kind" : "Var",
                      "kind" : "ident",
                      "value" : "fun",
                      "variable" : 14
                    },
                    "go-type" : 29,
                    "kind" : "expression",
                    "target" : {
                      "go-type" : 0,
                      "kind" : "expression",
                      "type" : "identifier",
                      "value" : {
                        "ident-kind" : "Var",
                        "kind" : "ident",
                        "value" : "m",
                        "variable" : 0
                      }
                    },
                    "type" : "selector"
                  },
                  "type" : "index"
                },
                "type" : "unary"
              },
              "type" : "cast"
            },
            "type" : "cast"
          }
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 204,
      "code" : "methods := (*[1 << 16]unsafe.Pointer)(unsafe.Pointer(&m.fun[0]))[:ni:ni]",
      "entry" : false,
      "use-vars" : [ 0, 8 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 11 ],
      "in-vars" : [ 8, 10, 5, 3, 15, 0, 6, 12, 13 ],
      "exit" : false,
      "out-vars" : [ 15, 10, 5, 13, 8, 0, 6, 12, 3, 16 ],
      "decl-vars" : [ 16 ],
      "line-start" : 205,
      "ast" : {
        "kind" : "statement",
        "target" : {
          "kind" : "decl",
          "specs" : [ {
            "comments" : [ ],
            "declared-type" : {
              "go-type" : 14,
              "kind" : "type",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 1,
                "value" : "unsafe"
              },
              "type" : "identifier",
              "value" : {
                "go-type" : 14,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "Pointer"
              }
            },
            "kind" : "spec",
            "names" : [ {
              "ident-kind" : "NoKind",
              "kind" : "ident",
              "value" : "fun0"
            } ],
            "type" : "var",
            "values" : [ ]
          } ],
          "type" : "var"
        },
        "type" : "declaration"
      },
      "assign-vars" : [ ],
      "line-end" : 205,
      "code" : "var fun0 unsafe.Pointer",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 13 ],
      "in-vars" : [ 15, 3, 13, 8, 6, 5, 12, 16, 0, 10 ],
      "exit" : false,
      "out-vars" : [ 13, 8, 16, 0, 12, 3, 15, 10, 6, 5 ],
      "decl-vars" : [ ],
      "line-start" : 206,
      "ast" : {
        "body" : [ {
          "kind" : "statement",
          "left" : [ {
            "go-type" : -1,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "NoKind",
              "kind" : "ident",
              "value" : "i"
            }
          } ],
          "right" : [ {
            "go-type" : 29,
            "kind" : "expression",
            "operator" : "&",
            "target" : {
              "go-type" : 25,
              "index" : {
                "go-type" : 10,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "k",
                  "variable" : 17
                }
              },
              "kind" : "expression",
              "target" : {
                "field" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "mhdr",
                  "variable" : 7
                },
                "go-type" : 24,
                "kind" : "expression",
                "target" : {
                  "go-type" : 3,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "inter",
                    "variable" : 3
                  }
                },
                "type" : "selector"
              },
              "type" : "index"
            },
            "type" : "unary"
          } ],
          "type" : "define"
        }, {
          "kind" : "statement",
          "left" : [ {
            "go-type" : -1,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "NoKind",
              "kind" : "ident",
              "value" : "itype"
            }
          } ],
          "right" : [ {
            "arguments" : [ {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "ityp",
                "variable" : 20
              },
              "go-type" : 21,
              "kind" : "expression",
              "target" : {
                "go-type" : 29,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "i",
                  "variable" : 19
                }
              },
              "type" : "selector"
            } ],
            "ellipsis" : false,
            "function" : {
              "field" : {
                "ident-kind" : "Func",
                "kind" : "ident",
                "value" : "typeOff"
              },
              "go-type" : 30,
              "kind" : "expression",
              "target" : {
                "field" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "typ",
                  "variable" : 18
                },
                "go-type" : 6,
                "kind" : "expression",
                "target" : {
                  "go-type" : 3,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "inter",
                    "variable" : 3
                  }
                },
                "type" : "selector"
              },
              "type" : "selector"
            },
            "go-type" : 27,
            "kind" : "expression",
            "type" : "call"
          } ],
          "type" : "define"
        }, {
          "kind" : "statement",
          "left" : [ {
            "go-type" : -1,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "NoKind",
              "kind" : "ident",
              "value" : "name"
            }
          } ],
          "right" : [ {
            "arguments" : [ {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "name",
                "variable" : 21
              },
              "go-type" : 19,
              "kind" : "expression",
              "target" : {
                "go-type" : 29,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "i",
                  "variable" : 19
                }
              },
              "type" : "selector"
            } ],
            "ellipsis" : false,
            "function" : {
              "field" : {
                "ident-kind" : "Func",
                "kind" : "ident",
                "value" : "nameOff"
              },
              "go-type" : 33,
              "kind" : "expression",
              "target" : {
                "field" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "typ",
                  "variable" : 18
                },
                "go-type" : 6,
                "kind" : "expression",
                "target" : {
                  "go-type" : 3,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "inter",
                    "variable" : 3
                  }
                },
                "type" : "selector"
              },
              "type" : "selector"
            },
            "go-type" : 22,
            "kind" : "expression",
            "type" : "call"
          } ],
          "type" : "define"
        }, {
          "kind" : "statement",
          "left" : [ {
            "go-type" : -1,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "NoKind",
              "kind" : "ident",
              "value" : "iname"
            }
          } ],
          "right" : [ {
            "arguments" : [ ],
            "ellipsis" : false,
            "function" : {
              "field" : {
                "ident-kind" : "Func",
                "kind" : "ident",
                "value" : "name"
              },
              "go-type" : 36,
              "kind" : "expression",
              "target" : {
                "go-type" : 22,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "name",
                  "variable" : 22
                }
              },
              "type" : "selector"
            },
            "go-type" : 3,
            "kind" : "expression",
            "type" : "call"
          } ],
          "type" : "define"
        }, {
          "kind" : "statement",
          "left" : [ {
            "go-type" : -1,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "NoKind",
              "kind" : "ident",
              "value" : "ipkg"
            }
          } ],
          "right" : [ {
            "arguments" : [ ],
            "ellipsis" : false,
            "function" : {
              "field" : {
                "ident-kind" : "Func",
                "kind" : "ident",
                "value" : "pkgPath"
              },
              "go-type" : 0,
              "kind" : "expression",
              "target" : {
                "go-type" : 22,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "name",
                  "variable" : 22
                }
              },
              "type" : "selector"
            },
            "go-type" : 3,
            "kind" : "expression",
            "type" : "call"
          } ],
          "type" : "define"
        }, {
          "body" : [ {
            "kind" : "statement",
            "left" : [ {
              "go-type" : 3,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "ipkg",
                "variable" : 23
              }
            } ],
            "right" : [ {
              "arguments" : [ ],
              "ellipsis" : false,
              "function" : {
                "field" : {
                  "ident-kind" : "Func",
                  "kind" : "ident",
                  "value" : "name"
                },
                "go-type" : 36,
                "kind" : "expression",
                "target" : {
                  "field" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "pkgpath",
                    "variable" : 24
                  },
                  "go-type" : 22,
                  "kind" : "expression",
                  "target" : {
                    "go-type" : 3,
                    "kind" : "expression",
                    "type" : "identifier",
                    "value" : {
                      "ident-kind" : "Var",
                      "kind" : "ident",
                      "value" : "inter",
                      "variable" : 3
                    }
                  },
                  "type" : "selector"
                },
                "type" : "selector"
              },
              "go-type" : 3,
              "kind" : "expression",
              "type" : "call"
            } ],
            "type" : "assign"
          } ],
          "condition" : {
            "go-type" : 28,
            "kind" : "expression",
            "left" : {
              "go-type" : 3,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "ipkg",
                "variable" : 23
              }
            },
            "operator" : "==",
            "right" : {
              "go-type" : 3,
              "kind" : "constant",
              "value" : {
                "type" : "STRING",
                "value" : ""
              }
            },
            "type" : "binary"
          },
          "else" : null,
          "init" : null,
          "kind" : "statement",
          "type" : "if"
        }, {
          "body" : [ {
            "kind" : "statement",
            "left" : [ {
              "go-type" : -1,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "NoKind",
                "kind" : "ident",
                "value" : "t"
              }
            } ],
            "right" : [ {
              "go-type" : 38,
              "kind" : "expression",
              "operator" : "&",
              "target" : {
                "go-type" : 15,
                "index" : {
                  "go-type" : 10,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "j",
                    "variable" : 13
                  }
                },
                "kind" : "expression",
                "target" : {
                  "go-type" : 14,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "xmhdr",
                    "variable" : 12
                  }
                },
                "type" : "index"
              },
              "type" : "unary"
            } ],
            "type" : "define"
          }, {
            "kind" : "statement",
            "left" : [ {
              "go-type" : -1,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "NoKind",
                "kind" : "ident",
                "value" : "tname"
              }
            } ],
            "right" : [ {
              "arguments" : [ {
                "field" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "name",
                  "variable" : 26
                },
                "go-type" : 19,
                "kind" : "expression",
                "target" : {
                  "go-type" : 38,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "t",
                    "variable" : 25
                  }
                },
                "type" : "selector"
              } ],
              "ellipsis" : false,
              "function" : {
                "field" : {
                  "ident-kind" : "Func",
                  "kind" : "ident",
                  "value" : "nameOff"
                },
                "go-type" : 33,
                "kind" : "expression",
                "target" : {
                  "go-type" : 27,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "typ",
                    "variable" : 5
                  }
                },
                "type" : "selector"
              },
              "go-type" : 22,
              "kind" : "expression",
              "type" : "call"
            } ],
            "type" : "define"
          }, {
            "body" : [ {
              "kind" : "statement",
              "left" : [ {
                "go-type" : -1,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "NoKind",
                  "kind" : "ident",
                  "value" : "pkgPath"
                }
              } ],
              "right" : [ {
                "arguments" : [ ],
                "ellipsis" : false,
                "function" : {
                  "field" : {
                    "ident-kind" : "Func",
                    "kind" : "ident",
                    "value" : "pkgPath"
                  },
                  "go-type" : 0,
                  "kind" : "expression",
                  "target" : {
                    "go-type" : 22,
                    "kind" : "expression",
                    "type" : "identifier",
                    "value" : {
                      "ident-kind" : "Var",
                      "kind" : "ident",
                      "value" : "tname",
                      "variable" : 29
                    }
                  },
                  "type" : "selector"
                },
                "go-type" : 3,
                "kind" : "expression",
                "type" : "call"
              } ],
              "type" : "define"
            }, {
              "body" : [ {
                "kind" : "statement",
                "left" : [ {
                  "go-type" : 3,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "pkgPath",
                    "variable" : 31
                  }
                } ],
                "right" : [ {
                  "arguments" : [ ],
                  "ellipsis" : false,
                  "function" : {
                    "field" : {
                      "ident-kind" : "Func",
                      "kind" : "ident",
                      "value" : "name"
                    },
                    "go-type" : 36,
                    "kind" : "expression",
                    "target" : {
                      "arguments" : [ {
                        "field" : {
                          "ident-kind" : "Var",
                          "kind" : "ident",
                          "value" : "pkgpath",
                          "variable" : 32
                        },
                        "go-type" : 19,
                        "kind" : "expression",
                        "target" : {
                          "go-type" : 4,
                          "kind" : "expression",
                          "type" : "identifier",
                          "value" : {
                            "ident-kind" : "Var",
                            "kind" : "ident",
                            "value" : "x",
                            "variable" : 6
                          }
                        },
                        "type" : "selector"
                      } ],
                      "ellipsis" : false,
                      "function" : {
                        "field" : {
                          "ident-kind" : "Func",
                          "kind" : "ident",
                          "value" : "nameOff"
                        },
                        "go-type" : 33,
                        "kind" : "expression",
                        "target" : {
                          "go-type" : 27,
                          "kind" : "expression",
                          "type" : "identifier",
                          "value" : {
                            "ident-kind" : "Var",
                            "kind" : "ident",
                            "value" : "typ",
                            "variable" : 5
                          }
                        },
                        "type" : "selector"
                      },
                      "go-type" : 22,
                      "kind" : "expression",
                      "type" : "call"
                    },
                    "type" : "selector"
                  },
                  "go-type" : 3,
                  "kind" : "expression",
                  "type" : "call"
                } ],
                "type" : "assign"
              } ],
              "condition" : {
                "go-type" : 28,
                "kind" : "expression",
                "left" : {
                  "go-type" : 3,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "pkgPath",
                    "variable" : 31
                  }
                },
                "operator" : "==",
                "right" : {
                  "go-type" : 3,
                  "kind" : "constant",
                  "value" : {
                    "type" : "STRING",
                    "value" : ""
                  }
                },
                "type" : "binary"
              },
              "else" : null,
              "init" : null,
              "kind" : "statement",
              "type" : "if"
            }, {
              "body" : [ {
                "body" : [ {
                  "kind" : "statement",
                  "left" : [ {
                    "go-type" : -1,
                    "kind" : "expression",
                    "type" : "identifier",
                    "value" : {
                      "ident-kind" : "NoKind",
                      "kind" : "ident",
                      "value" : "ifn"
                    }
                  } ],
                  "right" : [ {
                    "arguments" : [ {
                      "field" : {
                        "ident-kind" : "Var",
                        "kind" : "ident",
                        "value" : "ifn",
                        "variable" : 33
                      },
                      "go-type" : 17,
                      "kind" : "expression",
                      "target" : {
                        "go-type" : 38,
                        "kind" : "expression",
                        "type" : "identifier",
                        "value" : {
                          "ident-kind" : "Var",
                          "kind" : "ident",
                          "value" : "t",
                          "variable" : 25
                        }
                      },
                      "type" : "selector"
                    } ],
                    "ellipsis" : false,
                    "function" : {
                      "field" : {
                        "ident-kind" : "Func",
                        "kind" : "ident",
                        "value" : "textOff"
                      },
                      "go-type" : 41,
                      "kind" : "expression",
                      "target" : {
                        "go-type" : 27,
                        "kind" : "expression",
                        "type" : "identifier",
                        "value" : {
                          "ident-kind" : "Var",
                          "kind" : "ident",
                          "value" : "typ",
                          "variable" : 5
                        }
                      },
                      "type" : "selector"
                    },
                    "go-type" : 14,
                    "kind" : "expression",
                    "type" : "call"
                  } ],
                  "type" : "define"
                }, {
                  "body" : [ {
                    "kind" : "statement",
                    "left" : [ {
                      "go-type" : 14,
                      "kind" : "expression",
                      "type" : "identifier",
                      "value" : {
                        "ident-kind" : "Var",
                        "kind" : "ident",
                        "value" : "fun0",
                        "variable" : 16
                      }
                    } ],
                    "right" : [ {
                      "go-type" : 14,
                      "kind" : "expression",
                      "type" : "identifier",
                      "value" : {
                        "ident-kind" : "Var",
                        "kind" : "ident",
                        "value" : "ifn",
                        "variable" : 34
                      }
                    } ],
                    "type" : "assign"
                  } ],
                  "condition" : {
                    "go-type" : 28,
                    "kind" : "expression",
                    "left" : {
                      "go-type" : 10,
                      "kind" : "expression",
                      "type" : "identifier",
                      "value" : {
                        "ident-kind" : "Var",
                        "kind" : "ident",
                        "value" : "k",
                        "variable" : 17
                      }
                    },
                    "operator" : "==",
                    "right" : {
                      "go-type" : 10,
                      "kind" : "constant",
                      "value" : {
                        "type" : "INT",
                        "value" : "0"
                      }
                    },
                    "type" : "binary"
                  },
                  "else" : {
                    "body" : [ {
                      "kind" : "statement",
                      "left" : [ {
                        "go-type" : 14,
                        "index" : {
                          "go-type" : 10,
                          "kind" : "expression",
                          "type" : "identifier",
                          "value" : {
                            "ident-kind" : "Var",
                            "kind" : "ident",
                            "value" : "k",
                            "variable" : 17
                          }
                        },
                        "kind" : "expression",
                        "target" : {
                          "go-type" : 24,
                          "kind" : "expression",
                          "type" : "identifier",
                          "value" : {
                            "ident-kind" : "Var",
                            "kind" : "ident",
                            "value" : "methods",
                            "variable" : 15
                          }
                        },
                        "type" : "index"
                      } ],
                      "right" : [ {
                        "go-type" : 14,
                        "kind" : "expression",
                        "type" : "identifier",
                        "value" : {
                          "ident-kind" : "Var",
                          "kind" : "ident",
                          "value" : "ifn",
                          "variable" : 34
                        }
                      } ],
                      "type" : "assign"
                    } ],
                    "kind" : "statement",
                    "type" : "block"
                  },
                  "init" : null,
                  "kind" : "statement",
                  "type" : "if"
                } ],
                "condition" : {
                  "go-type" : 28,
                  "kind" : "expression",
                  "left" : {
                    "go-type" : 0,
                    "kind" : "expression",
                    "type" : "identifier",
                    "value" : {
                      "ident-kind" : "Var",
                      "kind" : "ident",
                      "value" : "m",
                      "variable" : 0
                    }
                  },
                  "operator" : "!=",
                  "right" : {
                    "go-type" : 40,
                    "kind" : "expression",
                    "type" : "identifier",
                    "value" : {
                      "ident-kind" : "Nil",
                      "kind" : "ident",
                      "value" : "nil"
                    }
                  },
                  "type" : "binary"
                },
                "else" : null,
                "init" : null,
                "kind" : "statement",
                "type" : "if"
              }, {
                "kind" : "statement",
                "label" : {
                  "ident-kind" : "Label",
                  "kind" : "ident",
                  "value" : "imethods"
                },
                "type" : "continue"
              } ],
              "condition" : {
                "go-type" : 16,
                "kind" : "expression",
                "left" : {
                  "arguments" : [ ],
                  "ellipsis" : false,
                  "function" : {
                    "field" : {
                      "ident-kind" : "Func",
                      "kind" : "ident",
                      "value" : "isExported"
                    },
                    "go-type" : 39,
                    "kind" : "expression",
                    "target" : {
                      "go-type" : 22,
                      "kind" : "expression",
                      "type" : "identifier",
                      "value" : {
                        "ident-kind" : "Var",
                        "kind" : "ident",
                        "value" : "tname",
                        "variable" : 29
                      }
                    },
                    "type" : "selector"
                  },
                  "go-type" : 16,
                  "kind" : "expression",
                  "type" : "call"
                },
                "operator" : "||",
                "right" : {
                  "go-type" : 16,
                  "kind" : "expression",
                  "left" : {
                    "go-type" : 3,
                    "kind" : "expression",
                    "type" : "identifier",
                    "value" : {
                      "ident-kind" : "Var",
                      "kind" : "ident",
                      "value" : "pkgPath",
                      "variable" : 31
                    }
                  },
                  "operator" : "==",
                  "right" : {
                    "go-type" : 3,
                    "kind" : "expression",
                    "type" : "identifier",
                    "value" : {
                      "ident-kind" : "Var",
                      "kind" : "ident",
                      "value" : "ipkg",
                      "variable" : 23
                    }
                  },
                  "type" : "binary"
                },
                "type" : "binary"
              },
              "else" : null,
              "init" : null,
              "kind" : "statement",
              "type" : "if"
            } ],
            "condition" : {
              "go-type" : 28,
              "kind" : "expression",
              "left" : {
                "go-type" : 28,
                "kind" : "expression",
                "left" : {
                  "arguments" : [ {
                    "field" : {
                      "ident-kind" : "Var",
                      "kind" : "ident",
                      "value" : "mtyp",
                      "variable" : 27
                    },
                    "go-type" : 21,
                    "kind" : "expression",
                    "target" : {
                      "go-type" : 38,
                      "kind" : "expression",
                      "type" : "identifier",
                      "value" : {
                        "ident-kind" : "Var",
                        "kind" : "ident",
                        "value" : "t",
                        "variable" : 25
                      }
                    },
                    "type" : "selector"
                  } ],
                  "ellipsis" : false,
                  "function" : {
                    "field" : {
                      "ident-kind" : "Func",
                      "kind" : "ident",
                      "value" : "typeOff"
                    },
                    "go-type" : 30,
                    "kind" : "expression",
                    "target" : {
                      "go-type" : 27,
                      "kind" : "expression",
                      "type" : "identifier",
                      "value" : {
                        "ident-kind" : "Var",
                        "kind" : "ident",
                        "value" : "typ",
                        "variable" : 5
                      }
                    },
                    "type" : "selector"
                  },
                  "go-type" : 27,
                  "kind" : "expression",
                  "type" : "call"
                },
                "operator" : "==",
                "right" : {
                  "go-type" : 27,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "itype",
                    "variable" : 28
                  }
                },
                "type" : "binary"
              },
              "operator" : "&&",
              "right" : {
                "go-type" : 28,
                "kind" : "expression",
                "left" : {
                  "arguments" : [ ],
                  "ellipsis" : false,
                  "function" : {
                    "field" : {
                      "ident-kind" : "Func",
                      "kind" : "ident",
                      "value" : "name"
                    },
                    "go-type" : 36,
                    "kind" : "expression",
                    "target" : {
                      "go-type" : 22,
                      "kind" : "expression",
                      "type" : "identifier",
                      "value" : {
                        "ident-kind" : "Var",
                        "kind" : "ident",
                        "value" : "tname",
                        "variable" : 29
                      }
                    },
                    "type" : "selector"
                  },
                  "go-type" : 3,
                  "kind" : "expression",
                  "type" : "call"
                },
                "operator" : "==",
                "right" : {
                  "go-type" : 3,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "iname",
                    "variable" : 30
                  }
                },
                "type" : "binary"
              },
              "type" : "binary"
            },
            "else" : null,
            "init" : null,
            "kind" : "statement",
            "type" : "if"
          } ],
          "condition" : {
            "go-type" : 28,
            "kind" : "expression",
            "left" : {
              "go-type" : 10,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "j",
                "variable" : 13
              }
            },
            "operator" : "<",
            "right" : {
              "go-type" : 10,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "nt",
                "variable" : 10
              }
            },
            "type" : "binary"
          },
          "init" : null,
          "kind" : "statement",
          "post" : {
            "kind" : "statement",
            "operation" : "++",
            "target" : {
              "go-type" : 10,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "j",
                "variable" : 13
              }
            },
            "type" : "crement"
          },
          "type" : "for"
        }, {
          "kind" : "statement",
          "left" : [ {
            "go-type" : 8,
            "index" : {
              "go-type" : 10,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "0"
              }
            },
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "fun",
                "variable" : 14
              },
              "go-type" : 29,
              "kind" : "expression",
              "target" : {
                "go-type" : 0,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "m",
                  "variable" : 0
                }
              },
              "type" : "selector"
            },
            "type" : "index"
          } ],
          "right" : [ {
            "go-type" : 8,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          } ],
          "type" : "assign"
        }, {
          "kind" : "statement",
          "type" : "return",
          "values" : [ {
            "go-type" : 3,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "iname",
              "variable" : 30
            }
          } ]
        } ],
        "condition" : {
          "go-type" : 28,
          "kind" : "expression",
          "left" : {
            "go-type" : 10,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "k",
              "variable" : 17
            }
          },
          "operator" : "<",
          "right" : {
            "go-type" : 10,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "ni",
              "variable" : 8
            }
          },
          "type" : "binary"
        },
        "init" : {
          "kind" : "statement",
          "left" : [ {
            "go-type" : -1,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "NoKind",
              "kind" : "ident",
              "value" : "k"
            }
          } ],
          "right" : [ {
            "go-type" : 10,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          } ],
          "type" : "define"
        },
        "kind" : "statement",
        "post" : {
          "kind" : "statement",
          "operation" : "++",
          "target" : {
            "go-type" : 10,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "k",
              "variable" : 17
            }
          },
          "type" : "crement"
        },
        "type" : "for"
      },
      "assign-vars" : [ ],
      "line-end" : 240,
      "code" : "imethods:\n\tfor k := 0; k < ni; k++ {\n\t\ti := &inter.mhdr[k]\n\t\titype := inter.typ.typeOff(i.ityp)\n\t\tname := inter.typ.nameOff(i.name)\n\t\tiname := name.name()\n\t\tipkg := name.pkgPath()\n\t\tif ipkg == \"\" {\n\t\t\tipkg = inter.pkgpath.name()\n\t\t}\n\t\tfor ; j < nt; j++ {\n\t\t\tt := &xmhdr[j]\n\t\t\ttname := typ.nameOff(t.name)\n\t\t\tif typ.typeOff(t.mtyp) == itype && tname.name() == iname {\n\t\t\t\tpkgPath := tname.pkgPath()\n\t\t\t\tif pkgPath == \"\" {\n\t\t\t\t\tpkgPath = typ.nameOff(x.pkgpath).name()\n\t\t\t\t}\n\t\t\t\tif tname.isExported() || pkgPath == ipkg {\n\t\t\t\t\tif m != nil {\n\t\t\t\t\t\tifn := typ.textOff(t.ifn)\n\t\t\t\t\t\tif k == 0 {\n\t\t\t\t\t\t\tfun0 = ifn\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tmethods[k] = ifn\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcontinue imethods\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tm.fun[0] = 0\n\t\treturn iname\n\t}",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 15, 39 ],
      "in-vars" : [ 3, 15, 0, 10, 6, 17, 13, 8, 16, 5, 12 ],
      "exit" : false,
      "out-vars" : [ 17, 8, 15, 0, 12, 3, 13, 16, 10, 6, 5 ],
      "decl-vars" : [ ],
      "line-start" : 207,
      "ast" : {
        "condition" : {
          "go-type" : 28,
          "kind" : "expression",
          "left" : {
            "go-type" : 10,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "k",
              "variable" : 17
            }
          },
          "operator" : "<",
          "right" : {
            "go-type" : 10,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "ni",
              "variable" : 8
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "for"
      },
      "assign-vars" : [ ],
      "line-end" : 240,
      "code" : "for k := 0; k < ni; k++ {\n\ti := &inter.mhdr[k]\n\titype := inter.typ.typeOff(i.ityp)\n\tname := inter.typ.nameOff(i.name)\n\tiname := name.name()\n\tipkg := name.pkgPath()\n\tif ipkg == \"\" {\n\t\tipkg = inter.pkgpath.name()\n\t}\n\tfor ; j < nt; j++ {\n\t\tt := &xmhdr[j]\n\t\ttname := typ.nameOff(t.name)\n\t\tif typ.typeOff(t.mtyp) == itype && tname.name() == iname {\n\t\t\tpkgPath := tname.pkgPath()\n\t\t\tif pkgPath == \"\" {\n\t\t\t\tpkgPath = typ.nameOff(x.pkgpath).name()\n\t\t\t}\n\t\t\tif tname.isExported() || pkgPath == ipkg {\n\t\t\t\tif m != nil {\n\t\t\t\t\tifn := typ.textOff(t.ifn)\n\t\t\t\t\tif k == 0 {\n\t\t\t\t\t\tfun0 = ifn\n\t\t\t\t\t} else {\n\t\t\t\t\t\tmethods[k] = ifn\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tcontinue imethods\n\t\t\t}\n\t\t}\n\t}\n\n\tm.fun[0] = 0\n\treturn iname\n}",
      "entry" : false,
      "use-vars" : [ 8, 17 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 12 ],
      "in-vars" : [ 5, 12, 3, 0, 6, 15, 10, 13, 8, 16 ],
      "exit" : false,
      "out-vars" : [ 17, 8, 10, 6, 3, 13, 16, 15, 0, 5, 12 ],
      "decl-vars" : [ 17 ],
      "line-start" : 207,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "k"
          }
        } ],
        "right" : [ {
          "go-type" : 10,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "0"
          }
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 207,
      "code" : "k := 0",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ 17 ],
      "successors" : [ 12 ],
      "in-vars" : [ 8, 12, 15, 0, 10, 6, 3, 17, 13, 16, 5 ],
      "exit" : false,
      "out-vars" : [ 6, 12, 16, 15, 10, 8, 0, 5, 3, 17, 13 ],
      "decl-vars" : [ ],
      "line-start" : 207,
      "ast" : {
        "kind" : "statement",
        "operation" : "++",
        "target" : {
          "go-type" : 10,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "k",
            "variable" : 17
          }
        },
        "type" : "crement"
      },
      "assign-vars" : [ 17 ],
      "line-end" : 207,
      "code" : "k++",
      "entry" : false,
      "use-vars" : [ 17 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 16 ],
      "in-vars" : [ 10, 6, 5, 17, 16, 8, 15, 0, 12, 3, 13 ],
      "exit" : false,
      "out-vars" : [ 3, 13, 16, 5, 12, 19, 17, 8, 15, 0, 10, 6 ],
      "decl-vars" : [ 19 ],
      "line-start" : 208,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "i"
          }
        } ],
        "right" : [ {
          "go-type" : 29,
          "kind" : "expression",
          "operator" : "&",
          "target" : {
            "go-type" : 25,
            "index" : {
              "go-type" : 10,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "k",
                "variable" : 17
              }
            },
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "mhdr",
                "variable" : 7
              },
              "go-type" : 24,
              "kind" : "expression",
              "target" : {
                "go-type" : 3,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "inter",
                  "variable" : 3
                }
              },
              "type" : "selector"
            },
            "type" : "index"
          },
          "type" : "unary"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 208,
      "code" : "i := &inter.mhdr[k]",
      "entry" : false,
      "use-vars" : [ 17, 3 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 17 ],
      "in-vars" : [ 19, 17, 16, 15, 10, 6, 5, 3, 13, 8, 0, 12 ],
      "exit" : false,
      "out-vars" : [ 28, 12, 3, 13, 0, 5, 15, 10, 6, 19, 17, 8, 16 ],
      "decl-vars" : [ 28 ],
      "line-start" : 209,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "itype"
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "ityp",
              "variable" : 20
            },
            "go-type" : 21,
            "kind" : "expression",
            "target" : {
              "go-type" : 29,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "i",
                "variable" : 19
              }
            },
            "type" : "selector"
          } ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "typeOff"
            },
            "go-type" : 30,
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "typ",
                "variable" : 18
              },
              "go-type" : 6,
              "kind" : "expression",
              "target" : {
                "go-type" : 3,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "inter",
                  "variable" : 3
                }
              },
              "type" : "selector"
            },
            "type" : "selector"
          },
          "go-type" : 27,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 209,
      "code" : "itype := inter.typ.typeOff(i.ityp)",
      "entry" : false,
      "use-vars" : [ 3, 19 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 18 ],
      "in-vars" : [ 3, 17, 13, 16, 6, 28, 19, 15, 0, 10, 5, 12, 8 ],
      "exit" : false,
      "out-vars" : [ 8, 0, 10, 5, 28, 3, 17, 13, 12, 22, 16, 15, 6 ],
      "decl-vars" : [ 22 ],
      "line-start" : 210,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "name"
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "name",
              "variable" : 21
            },
            "go-type" : 19,
            "kind" : "expression",
            "target" : {
              "go-type" : 29,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "i",
                "variable" : 19
              }
            },
            "type" : "selector"
          } ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "nameOff"
            },
            "go-type" : 33,
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "typ",
                "variable" : 18
              },
              "go-type" : 6,
              "kind" : "expression",
              "target" : {
                "go-type" : 3,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "inter",
                  "variable" : 3
                }
              },
              "type" : "selector"
            },
            "type" : "selector"
          },
          "go-type" : 22,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 210,
      "code" : "name := inter.typ.nameOff(i.name)",
      "entry" : false,
      "use-vars" : [ 19, 3 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 19 ],
      "in-vars" : [ 6, 22, 3, 13, 10, 15, 0, 5, 28, 12, 17, 8, 16 ],
      "exit" : false,
      "out-vars" : [ 8, 12, 17, 13, 16, 22, 3, 5, 28, 30, 15, 0, 10, 6 ],
      "decl-vars" : [ 30 ],
      "line-start" : 211,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "iname"
          }
        } ],
        "right" : [ {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "name"
            },
            "go-type" : 36,
            "kind" : "expression",
            "target" : {
              "go-type" : 22,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "name",
                "variable" : 22
              }
            },
            "type" : "selector"
          },
          "go-type" : 3,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 211,
      "code" : "iname := name.name()",
      "entry" : false,
      "use-vars" : [ 22 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 20 ],
      "in-vars" : [ 16, 3, 6, 8, 15, 0, 10, 17, 13, 30, 5, 28, 12, 22 ],
      "exit" : false,
      "out-vars" : [ 15, 6, 5, 10, 13, 8, 16, 12, 23, 28, 3, 17, 30, 0 ],
      "decl-vars" : [ 23 ],
      "line-start" : 212,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "ipkg"
          }
        } ],
        "right" : [ {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "pkgPath"
            },
            "go-type" : 0,
            "kind" : "expression",
            "target" : {
              "go-type" : 22,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "name",
                "variable" : 22
              }
            },
            "type" : "selector"
          },
          "go-type" : 3,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 212,
      "code" : "ipkg := name.pkgPath()",
      "entry" : false,
      "use-vars" : [ 22 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 21, 22 ],
      "in-vars" : [ 3, 5, 30, 16, 10, 17, 13, 8, 15, 0, 23, 6, 28, 12 ],
      "exit" : false,
      "out-vars" : [ 17, 13, 15, 23, 28, 0, 10, 5, 12, 3, 16, 6, 30, 8 ],
      "decl-vars" : [ ],
      "line-start" : 213,
      "ast" : {
        "condition" : {
          "go-type" : 28,
          "kind" : "expression",
          "left" : {
            "go-type" : 3,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "ipkg",
              "variable" : 23
            }
          },
          "operator" : "==",
          "right" : {
            "go-type" : 3,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : ""
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 215,
      "code" : "if ipkg == \"\" {\n\tipkg = inter.pkgpath.name()\n}",
      "entry" : false,
      "use-vars" : [ 23 ]
    }, {
      "update-vars" : [ 23 ],
      "successors" : [ 22 ],
      "in-vars" : [ 3, 17, 30, 8, 16, 0, 10, 6, 13, 15, 5, 28, 12 ],
      "exit" : false,
      "out-vars" : [ 3, 13, 5, 8, 10, 12, 28, 17, 30, 0, 23, 16, 15, 6 ],
      "decl-vars" : [ ],
      "line-start" : 214,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 3,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "ipkg",
            "variable" : 23
          }
        } ],
        "right" : [ {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "name"
            },
            "go-type" : 36,
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "pkgpath",
                "variable" : 24
              },
              "go-type" : 22,
              "kind" : "expression",
              "target" : {
                "go-type" : 3,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "inter",
                  "variable" : 3
                }
              },
              "type" : "selector"
            },
            "type" : "selector"
          },
          "go-type" : 3,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 23 ],
      "line-end" : 214,
      "code" : "ipkg = inter.pkgpath.name()",
      "entry" : false,
      "use-vars" : [ 3 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 24, 37 ],
      "in-vars" : [ 17, 10, 15, 13, 30, 8, 16, 0, 28, 12, 3, 23, 6, 5 ],
      "exit" : false,
      "out-vars" : [ 12, 17, 13, 16, 23, 5, 3, 30, 0, 8, 15, 10, 6, 28 ],
      "decl-vars" : [ ],
      "line-start" : 216,
      "ast" : {
        "condition" : {
          "go-type" : 28,
          "kind" : "expression",
          "left" : {
            "go-type" : 10,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "j",
              "variable" : 13
            }
          },
          "operator" : "<",
          "right" : {
            "go-type" : 10,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "nt",
              "variable" : 10
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "for"
      },
      "assign-vars" : [ ],
      "line-end" : 236,
      "code" : "for ; j < nt; j++ {\n\tt := &xmhdr[j]\n\ttname := typ.nameOff(t.name)\n\tif typ.typeOff(t.mtyp) == itype && tname.name() == iname {\n\t\tpkgPath := tname.pkgPath()\n\t\tif pkgPath == \"\" {\n\t\t\tpkgPath = typ.nameOff(x.pkgpath).name()\n\t\t}\n\t\tif tname.isExported() || pkgPath == ipkg {\n\t\t\tif m != nil {\n\t\t\t\tifn := typ.textOff(t.ifn)\n\t\t\t\tif k == 0 {\n\t\t\t\t\tfun0 = ifn\n\t\t\t\t} else {\n\t\t\t\t\tmethods[k] = ifn\n\t\t\t\t}\n\t\t\t}\n\t\t\tcontinue imethods\n\t\t}\n\t}\n}",
      "entry" : false,
      "use-vars" : [ 13, 10 ]
    }, {
      "update-vars" : [ 13 ],
      "successors" : [ 22 ],
      "in-vars" : [ 23, 10, 6, 30, 16, 3, 17, 15, 0, 28, 12, 13, 8, 5 ],
      "exit" : false,
      "out-vars" : [ 30, 10, 13, 6, 3, 16, 12, 17, 8, 15, 0, 23, 5, 28 ],
      "decl-vars" : [ ],
      "line-start" : 216,
      "ast" : {
        "kind" : "statement",
        "operation" : "++",
        "target" : {
          "go-type" : 10,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "j",
            "variable" : 13
          }
        },
        "type" : "crement"
      },
      "assign-vars" : [ 13 ],
      "line-end" : 216,
      "code" : "j++",
      "entry" : false,
      "use-vars" : [ 13 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 25 ],
      "in-vars" : [ 12, 16, 6, 5, 23, 3, 8, 15, 13, 0, 28, 17, 30, 10 ],
      "exit" : false,
      "out-vars" : [ 6, 5, 16, 15, 10, 25, 28, 3, 17, 8, 30, 0, 23, 13, 12 ],
      "decl-vars" : [ 25 ],
      "line-start" : 217,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "t"
          }
        } ],
        "right" : [ {
          "go-type" : 38,
          "kind" : "expression",
          "operator" : "&",
          "target" : {
            "go-type" : 15,
            "index" : {
              "go-type" : 10,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "j",
                "variable" : 13
              }
            },
            "kind" : "expression",
            "target" : {
              "go-type" : 14,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "xmhdr",
                "variable" : 12
              }
            },
            "type" : "index"
          },
          "type" : "unary"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 217,
      "code" : "t := &xmhdr[j]",
      "entry" : false,
      "use-vars" : [ 12, 13 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 26 ],
      "in-vars" : [ 30, 25, 12, 13, 8, 16, 15, 0, 5, 3, 23, 28, 17, 10, 6 ],
      "exit" : false,
      "out-vars" : [ 23, 6, 5, 28, 17, 0, 30, 10, 29, 25, 12, 16, 13, 8, 15, 3 ],
      "decl-vars" : [ 29 ],
      "line-start" : 218,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "tname"
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "name",
              "variable" : 26
            },
            "go-type" : 19,
            "kind" : "expression",
            "target" : {
              "go-type" : 38,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "t",
                "variable" : 25
              }
            },
            "type" : "selector"
          } ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "nameOff"
            },
            "go-type" : 33,
            "kind" : "expression",
            "target" : {
              "go-type" : 27,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "typ",
                "variable" : 5
              }
            },
            "type" : "selector"
          },
          "go-type" : 22,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 218,
      "code" : "tname := typ.nameOff(t.name)",
      "entry" : false,
      "use-vars" : [ 25, 5 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 23, 27 ],
      "in-vars" : [ 3, 16, 25, 30, 23, 29, 17, 15, 5, 10, 6, 28, 12, 13, 8, 0 ],
      "exit" : false,
      "out-vars" : [ 16, 28, 12, 17, 30, 23, 10, 6, 5, 13, 8, 0, 25, 3, 15, 29 ],
      "decl-vars" : [ ],
      "line-start" : 219,
      "ast" : {
        "condition" : {
          "go-type" : 28,
          "kind" : "expression",
          "left" : {
            "go-type" : 28,
            "kind" : "expression",
            "left" : {
              "arguments" : [ {
                "field" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "mtyp",
                  "variable" : 27
                },
                "go-type" : 21,
                "kind" : "expression",
                "target" : {
                  "go-type" : 38,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "t",
                    "variable" : 25
                  }
                },
                "type" : "selector"
              } ],
              "ellipsis" : false,
              "function" : {
                "field" : {
                  "ident-kind" : "Func",
                  "kind" : "ident",
                  "value" : "typeOff"
                },
                "go-type" : 30,
                "kind" : "expression",
                "target" : {
                  "go-type" : 27,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "typ",
                    "variable" : 5
                  }
                },
                "type" : "selector"
              },
              "go-type" : 27,
              "kind" : "expression",
              "type" : "call"
            },
            "operator" : "==",
            "right" : {
              "go-type" : 27,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "itype",
                "variable" : 28
              }
            },
            "type" : "binary"
          },
          "operator" : "&&",
          "right" : {
            "go-type" : 28,
            "kind" : "expression",
            "left" : {
              "arguments" : [ ],
              "ellipsis" : false,
              "function" : {
                "field" : {
                  "ident-kind" : "Func",
                  "kind" : "ident",
                  "value" : "name"
                },
                "go-type" : 36,
                "kind" : "expression",
                "target" : {
                  "go-type" : 22,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "tname",
                    "variable" : 29
                  }
                },
                "type" : "selector"
              },
              "go-type" : 3,
              "kind" : "expression",
              "type" : "call"
            },
            "operator" : "==",
            "right" : {
              "go-type" : 3,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "iname",
                "variable" : 30
              }
            },
            "type" : "binary"
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 235,
      "code" : "if typ.typeOff(t.mtyp) == itype && tname.name() == iname {\n\tpkgPath := tname.pkgPath()\n\tif pkgPath == \"\" {\n\t\tpkgPath = typ.nameOff(x.pkgpath).name()\n\t}\n\tif tname.isExported() || pkgPath == ipkg {\n\t\tif m != nil {\n\t\t\tifn := typ.textOff(t.ifn)\n\t\t\tif k == 0 {\n\t\t\t\tfun0 = ifn\n\t\t\t} else {\n\t\t\t\tmethods[k] = ifn\n\t\t\t}\n\t\t}\n\t\tcontinue imethods\n\t}\n}",
      "entry" : false,
      "use-vars" : [ 28, 29, 30, 5, 25 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 28 ],
      "in-vars" : [ 5, 28, 16, 10, 23, 6, 12, 17, 8, 3, 29, 15, 0, 25, 13, 30 ],
      "exit" : false,
      "out-vars" : [ 6, 3, 30, 16, 10, 17, 15, 5, 12, 0, 28, 29, 25, 13, 8, 23, 31 ],
      "decl-vars" : [ 31 ],
      "line-start" : 220,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "pkgPath"
          }
        } ],
        "right" : [ {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "pkgPath"
            },
            "go-type" : 0,
            "kind" : "expression",
            "target" : {
              "go-type" : 22,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "tname",
                "variable" : 29
              }
            },
            "type" : "selector"
          },
          "go-type" : 3,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 220,
      "code" : "pkgPath := tname.pkgPath()",
      "entry" : false,
      "use-vars" : [ 29 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 29, 30 ],
      "in-vars" : [ 3, 30, 8, 15, 10, 13, 0, 29, 25, 28, 12, 17, 23, 6, 16, 5, 31 ],
      "exit" : false,
      "out-vars" : [ 23, 6, 29, 3, 30, 8, 16, 15, 28, 12, 17, 0, 10, 31, 25, 13, 5 ],
      "decl-vars" : [ ],
      "line-start" : 221,
      "ast" : {
        "condition" : {
          "go-type" : 28,
          "kind" : "expression",
          "left" : {
            "go-type" : 3,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "pkgPath",
              "variable" : 31
            }
          },
          "operator" : "==",
          "right" : {
            "go-type" : 3,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : ""
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 223,
      "code" : "if pkgPath == \"\" {\n\tpkgPath = typ.nameOff(x.pkgpath).name()\n}",
      "entry" : false,
      "use-vars" : [ 31 ]
    }, {
      "update-vars" : [ 31 ],
      "successors" : [ 30 ],
      "in-vars" : [ 17, 8, 16, 10, 13, 23, 3, 15, 6, 28, 12, 30, 0, 5, 29, 25 ],
      "exit" : false,
      "out-vars" : [ 16, 31, 15, 0, 23, 6, 29, 25, 12, 10, 5, 28, 3, 17, 13, 30, 8 ],
      "decl-vars" : [ ],
      "line-start" : 222,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 3,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "pkgPath",
            "variable" : 31
          }
        } ],
        "right" : [ {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "name"
            },
            "go-type" : 36,
            "kind" : "expression",
            "target" : {
              "arguments" : [ {
                "field" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "pkgpath",
                  "variable" : 32
                },
                "go-type" : 19,
                "kind" : "expression",
                "target" : {
                  "go-type" : 4,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "x",
                    "variable" : 6
                  }
                },
                "type" : "selector"
              } ],
              "ellipsis" : false,
              "function" : {
                "field" : {
                  "ident-kind" : "Func",
                  "kind" : "ident",
                  "value" : "nameOff"
                },
                "go-type" : 33,
                "kind" : "expression",
                "target" : {
                  "go-type" : 27,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "typ",
                    "variable" : 5
                  }
                },
                "type" : "selector"
              },
              "go-type" : 22,
              "kind" : "expression",
              "type" : "call"
            },
            "type" : "selector"
          },
          "go-type" : 3,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 31 ],
      "line-end" : 222,
      "code" : "pkgPath = typ.nameOff(x.pkgpath).name()",
      "entry" : false,
      "use-vars" : [ 5, 6 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 23, 31 ],
      "in-vars" : [ 16, 17, 8, 23, 10, 31, 29, 25, 28, 6, 5, 12, 3, 13, 30, 15, 0 ],
      "exit" : false,
      "out-vars" : [ 3, 13, 6, 5, 25, 8, 15, 0, 10, 17, 30, 16, 12, 23, 28 ],
      "decl-vars" : [ ],
      "line-start" : 224,
      "ast" : {
        "condition" : {
          "go-type" : 16,
          "kind" : "expression",
          "left" : {
            "arguments" : [ ],
            "ellipsis" : false,
            "function" : {
              "field" : {
                "ident-kind" : "Func",
                "kind" : "ident",
                "value" : "isExported"
              },
              "go-type" : 39,
              "kind" : "expression",
              "target" : {
                "go-type" : 22,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "tname",
                  "variable" : 29
                }
              },
              "type" : "selector"
            },
            "go-type" : 16,
            "kind" : "expression",
            "type" : "call"
          },
          "operator" : "||",
          "right" : {
            "go-type" : 16,
            "kind" : "expression",
            "left" : {
              "go-type" : 3,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "pkgPath",
                "variable" : 31
              }
            },
            "operator" : "==",
            "right" : {
              "go-type" : 3,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "ipkg",
                "variable" : 23
              }
            },
            "type" : "binary"
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 234,
      "code" : "if tname.isExported() || pkgPath == ipkg {\n\tif m != nil {\n\t\tifn := typ.textOff(t.ifn)\n\t\tif k == 0 {\n\t\t\tfun0 = ifn\n\t\t} else {\n\t\t\tmethods[k] = ifn\n\t\t}\n\t}\n\tcontinue imethods\n}",
      "entry" : false,
      "use-vars" : [ 29, 31, 23 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 32, 36 ],
      "in-vars" : [ 8, 16, 10, 25, 12, 3, 17, 13, 5, 15, 0, 6 ],
      "exit" : false,
      "out-vars" : [ 13, 0, 6, 5, 25, 10, 12, 3, 17, 8, 16, 15 ],
      "decl-vars" : [ ],
      "line-start" : 225,
      "ast" : {
        "condition" : {
          "go-type" : 28,
          "kind" : "expression",
          "left" : {
            "go-type" : 0,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "m",
              "variable" : 0
            }
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 40,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Nil",
              "kind" : "ident",
              "value" : "nil"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 232,
      "code" : "if m != nil {\n\tifn := typ.textOff(t.ifn)\n\tif k == 0 {\n\t\tfun0 = ifn\n\t} else {\n\t\tmethods[k] = ifn\n\t}\n}",
      "entry" : false,
      "use-vars" : [ 0 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 33 ],
      "in-vars" : [ 13, 8, 10, 6, 12, 3, 17, 0, 5, 25, 16, 15 ],
      "exit" : false,
      "out-vars" : [ 15, 0, 6, 12, 8, 16, 34, 10, 5, 3, 17, 13 ],
      "decl-vars" : [ 34 ],
      "line-start" : 226,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "ifn"
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "ifn",
              "variable" : 33
            },
            "go-type" : 17,
            "kind" : "expression",
            "target" : {
              "go-type" : 38,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "t",
                "variable" : 25
              }
            },
            "type" : "selector"
          } ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "textOff"
            },
            "go-type" : 41,
            "kind" : "expression",
            "target" : {
              "go-type" : 27,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "typ",
                "variable" : 5
              }
            },
            "type" : "selector"
          },
          "go-type" : 14,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 226,
      "code" : "ifn := typ.textOff(t.ifn)",
      "entry" : false,
      "use-vars" : [ 25, 5 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 34, 35 ],
      "in-vars" : [ 17, 16, 34, 0, 12, 3, 13, 8, 15, 10, 6, 5 ],
      "exit" : false,
      "out-vars" : [ 10, 12, 3, 17, 34, 15, 6, 5, 13, 8, 16, 0 ],
      "decl-vars" : [ ],
      "line-start" : 227,
      "ast" : {
        "condition" : {
          "go-type" : 28,
          "kind" : "expression",
          "left" : {
            "go-type" : 10,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "k",
              "variable" : 17
            }
          },
          "operator" : "==",
          "right" : {
            "go-type" : 10,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 231,
      "code" : "if k == 0 {\n\tfun0 = ifn\n} else {\n\tmethods[k] = ifn\n}",
      "entry" : false,
      "use-vars" : [ 17 ]
    }, {
      "update-vars" : [ 16 ],
      "successors" : [ 36 ],
      "in-vars" : [ 3, 13, 15, 10, 12, 17, 8, 34, 0, 6, 5 ],
      "exit" : false,
      "out-vars" : [ 15, 0, 10, 6, 3, 13, 8, 16, 5, 12, 17 ],
      "decl-vars" : [ ],
      "line-start" : 228,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 14,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "fun0",
            "variable" : 16
          }
        } ],
        "right" : [ {
          "go-type" : 14,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "ifn",
            "variable" : 34
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 16 ],
      "line-end" : 228,
      "code" : "fun0 = ifn",
      "entry" : false,
      "use-vars" : [ 34 ]
    }, {
      "update-vars" : [ 15 ],
      "successors" : [ 36 ],
      "in-vars" : [ 10, 6, 5, 12, 17, 34, 0, 16, 15, 3, 13, 8 ],
      "exit" : false,
      "out-vars" : [ 13, 8, 16, 15, 12, 3, 17, 0, 10, 6, 5 ],
      "decl-vars" : [ ],
      "line-start" : 230,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 14,
          "index" : {
            "go-type" : 10,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "k",
              "variable" : 17
            }
          },
          "kind" : "expression",
          "target" : {
            "go-type" : 24,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "methods",
              "variable" : 15
            }
          },
          "type" : "index"
        } ],
        "right" : [ {
          "go-type" : 14,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "ifn",
            "variable" : 34
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 230,
      "code" : "methods[k] = ifn",
      "entry" : false,
      "use-vars" : [ 34, 15, 17 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 14 ],
      "in-vars" : [ 0, 12, 3, 17, 13, 8, 16, 15, 10, 6, 5 ],
      "exit" : false,
      "out-vars" : [ 12, 8, 16, 0, 5, 10, 6, 3, 17, 13, 15 ],
      "decl-vars" : [ ],
      "line-start" : 233,
      "ast" : {
        "kind" : "statement",
        "label" : {
          "ident-kind" : "Label",
          "kind" : "ident",
          "value" : "imethods"
        },
        "type" : "continue"
      },
      "assign-vars" : [ ],
      "line-end" : 233,
      "code" : "continue imethods",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ 0 ],
      "successors" : [ 38 ],
      "in-vars" : [ 30, 0 ],
      "exit" : false,
      "out-vars" : [ 30 ],
      "decl-vars" : [ ],
      "line-start" : 238,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 8,
          "index" : {
            "go-type" : 10,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "kind" : "expression",
          "target" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "fun",
              "variable" : 14
            },
            "go-type" : 29,
            "kind" : "expression",
            "target" : {
              "go-type" : 0,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "m",
                "variable" : 0
              }
            },
            "type" : "selector"
          },
          "type" : "index"
        } ],
        "right" : [ {
          "go-type" : 8,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "0"
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 238,
      "code" : "m.fun[0] = 0",
      "entry" : false,
      "use-vars" : [ 0 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 30 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 239,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 3,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "iname",
            "variable" : 30
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 239,
      "code" : "return iname",
      "entry" : false,
      "use-vars" : [ 30 ]
    }, {
      "update-vars" : [ 0 ],
      "successors" : [ 40 ],
      "in-vars" : [ 16, 0 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 241,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 8,
          "index" : {
            "go-type" : 10,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "kind" : "expression",
          "target" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "fun",
              "variable" : 14
            },
            "go-type" : 29,
            "kind" : "expression",
            "target" : {
              "go-type" : 0,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "m",
                "variable" : 0
              }
            },
            "type" : "selector"
          },
          "type" : "index"
        } ],
        "right" : [ {
          "coerced-to" : {
            "go-type" : 8,
            "kind" : "type",
            "type" : "identifier",
            "value" : {
              "go-type" : 8,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "uintptr"
            }
          },
          "go-type" : 8,
          "kind" : "expression",
          "target" : {
            "go-type" : 14,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "fun0",
              "variable" : 16
            }
          },
          "type" : "cast"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 241,
      "code" : "m.fun[0] = uintptr(fun0)",
      "entry" : false,
      "use-vars" : [ 0, 16 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 242,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 3,
          "kind" : "constant",
          "value" : {
            "type" : "STRING",
            "value" : ""
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 242,
      "code" : "return \"\"",
      "entry" : false,
      "use-vars" : [ ]
    } ],
    "code" : "// init fills in the m.fun array with all the code pointers for\n// the m.inter/m._type pair. If the type does not implement the interface,\n// it sets m.fun[0] to 0 and returns the name of an interface function that is missing.\n// It is ok to call this multiple times on the same m, even concurrently.\nfunc (m *itab) init() string {\n\tinter := m.inter\n\ttyp := m._type\n\tx := typ.uncommon()\n\n\tni := len(inter.mhdr)\n\tnt := int(x.mcount)\n\txmhdr := (*[1 << 16]method)(add(unsafe.Pointer(x), uintptr(x.moff)))[:nt:nt]\n\tj := 0\n\tmethods := (*[1 << 16]unsafe.Pointer)(unsafe.Pointer(&m.fun[0]))[:ni:ni]\n\tvar fun0 unsafe.Pointer\nimethods:\n\tfor k := 0; k < ni; k++ {\n\t\ti := &inter.mhdr[k]\n\t\titype := inter.typ.typeOff(i.ityp)\n\t\tname := inter.typ.nameOff(i.name)\n\t\tiname := name.name()\n\t\tipkg := name.pkgPath()\n\t\tif ipkg == \"\" {\n\t\t\tipkg = inter.pkgpath.name()\n\t\t}\n\t\tfor ; j < nt; j++ {\n\t\t\tt := &xmhdr[j]\n\t\t\ttname := typ.nameOff(t.name)\n\t\t\tif typ.typeOff(t.mtyp) == itype && tname.name() == iname {\n\t\t\t\tpkgPath := tname.pkgPath()\n\t\t\t\tif pkgPath == \"\" {\n\t\t\t\t\tpkgPath = typ.nameOff(x.pkgpath).name()\n\t\t\t\t}\n\t\t\t\tif tname.isExported() || pkgPath == ipkg {\n\t\t\t\t\tif m != nil {\n\t\t\t\t\t\tifn := typ.textOff(t.ifn)\n\t\t\t\t\t\tif k == 0 {\n\t\t\t\t\t\t\tfun0 = ifn\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tmethods[k] = ifn\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcontinue imethods\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tm.fun[0] = 0\n\t\treturn iname\n\t}\n\tm.fun[0] = uintptr(fun0)\n\treturn \"\"\n}",
    "defines" : [ 0 ],
    "functions" : [ {
      "name" : "init",
      "package" : 0,
      "type" : 0,
      "exported" : false
    }, {
      "name" : "uncommon",
      "package" : 0,
      "type" : 8,
      "exported" : false
    }, {
      "name" : "add",
      "package" : 0,
      "type" : 21,
      "exported" : false
    }, {
      "name" : "typeOff",
      "package" : 0,
      "type" : 30,
      "exported" : false
    }, {
      "name" : "nameOff",
      "package" : 0,
      "type" : 33,
      "exported" : false
    }, {
      "name" : "name",
      "package" : 0,
      "type" : 36,
      "exported" : false
    }, {
      "name" : "pkgPath",
      "package" : 0,
      "type" : 0,
      "exported" : false
    }, {
      "name" : "isExported",
      "package" : 0,
      "type" : 39,
      "exported" : false
    }, {
      "name" : "textOff",
      "package" : 0,
      "type" : 41,
      "exported" : false
    } ],
    "line-end" : 243,
    "line-start" : 191,
    "names" : [ "init" ],
    "package" : 0,
    "packages" : [ {
      "name" : "runtime",
      "path" : "runtime"
    }, {
      "name" : "unsafe",
      "path" : "unsafe"
    } ],
    "params" : [ ],
    "receivers" : [ 0 ],
    "results" : [ 1 ],
    "type" : "function",
    "types" : [ {
      "name" : "func() string",
      "params" : 1,
      "recv" : 0,
      "results" : 2,
      "type" : "Signature",
      "underlying" : 0,
      "variadic" : false
    }, {
      "fields" : [ ],
      "name" : "()",
      "type" : "Tuple",
      "underlying" : 1
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 3
      } ],
      "name" : "(string)",
      "type" : "Tuple",
      "underlying" : 2
    }, {
      "name" : "string",
      "type" : "Basic",
      "underlying" : 3
    }, {
      "elem" : 5,
      "name" : "*runtime.uncommontype",
      "type" : "Pointer",
      "underlying" : 4
    }, {
      "local-name" : "uncommontype",
      "name" : "runtime.uncommontype",
      "package" : 0,
      "type" : "Named",
      "underlying" : 6
    }, {
      "fields" : [ {
        "name" : "pkgpath",
        "type" : 19
      }, {
        "name" : "mcount",
        "type" : 7
      }, {
        "name" : "xcount",
        "type" : 7
      }, {
        "name" : "moff",
        "type" : 9
      }, {
        "name" : "_",
        "type" : 9
      } ],
      "name" : "struct{pkgpath runtime.nameOff; mcount uint16; xcount uint16; moff uint32; _ uint32}",
      "type" : "Struct",
      "underlying" : 6
    }, {
      "name" : "uint16",
      "type" : "Basic",
      "underlying" : 7
    }, {
      "name" : "func() *runtime.uncommontype",
      "params" : 1,
      "recv" : -1,
      "results" : 9,
      "type" : "Signature",
      "underlying" : 8,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 4
      } ],
      "name" : "(*runtime.uncommontype)",
      "type" : "Tuple",
      "underlying" : 9
    }, {
      "name" : "int",
      "type" : "Basic",
      "underlying" : 10
    }, {
      "name" : "func([]runtime.imethod) int",
      "params" : 12,
      "recv" : -1,
      "results" : 13,
      "type" : "Signature",
      "underlying" : 11,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 24
      } ],
      "name" : "([]runtime.imethod)",
      "type" : "Tuple",
      "underlying" : 12
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 10
      } ],
      "name" : "(int)",
      "type" : "Tuple",
      "underlying" : 13
    }, {
      "elem" : 15,
      "name" : "[]runtime.method",
      "type" : "Slice",
      "underlying" : 14
    }, {
      "local-name" : "method",
      "name" : "runtime.method",
      "package" : 0,
      "type" : "Named",
      "underlying" : 16
    }, {
      "fields" : [ {
        "name" : "name",
        "type" : 19
      }, {
        "name" : "mtyp",
        "type" : 21
      }, {
        "name" : "ifn",
        "type" : 17
      }, {
        "name" : "tfn",
        "type" : 17
      } ],
      "name" : "struct{name runtime.nameOff; mtyp runtime.typeOff; ifn runtime.textOff; tfn runtime.textOff}",
      "type" : "Struct",
      "underlying" : 16
    }, {
      "local-name" : "textOff",
      "name" : "runtime.textOff",
      "package" : 0,
      "type" : "Named",
      "underlying" : 20
    }, {
      "elem" : 19,
      "name" : "*[65536]runtime.method",
      "type" : "Pointer",
      "underlying" : 18
    }, {
      "elem" : 15,
      "name" : "[65536]runtime.method",
      "type" : "Array",
      "underlying" : 19
    }, {
      "name" : "untyped int",
      "type" : "Basic",
      "underlying" : 20
    }, {
      "name" : "func(p unsafe.Pointer, x uintptr) unsafe.Pointer",
      "params" : 22,
      "recv" : -1,
      "results" : 23,
      "type" : "Signature",
      "underlying" : 21,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "p",
        "type" : 14
      }, {
        "name" : "x",
        "type" : 8
      } ],
      "name" : "(p unsafe.Pointer, x uintptr)",
      "type" : "Tuple",
      "underlying" : 22
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 14
      } ],
      "name" : "(unsafe.Pointer)",
      "type" : "Tuple",
      "underlying" : 23
    }, {
      "elem" : 14,
      "name" : "[]unsafe.Pointer",
      "type" : "Slice",
      "underlying" : 24
    }, {
      "elem" : 26,
      "name" : "*[65536]unsafe.Pointer",
      "type" : "Pointer",
      "underlying" : 25
    }, {
      "elem" : 14,
      "name" : "[65536]unsafe.Pointer",
      "type" : "Array",
      "underlying" : 26
    }, {
      "elem" : 8,
      "name" : "*uintptr",
      "type" : "Pointer",
      "underlying" : 27
    }, {
      "name" : "untyped bool",
      "type" : "Basic",
      "underlying" : 28
    }, {
      "elem" : 25,
      "name" : "*runtime.imethod",
      "type" : "Pointer",
      "underlying" : 29
    }, {
      "name" : "func(off runtime.typeOff) *runtime._type",
      "params" : 31,
      "recv" : -1,
      "results" : 32,
      "type" : "Signature",
      "underlying" : 30,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "off",
        "type" : 21
      } ],
      "name" : "(off runtime.typeOff)",
      "type" : "Tuple",
      "underlying" : 31
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 27
      } ],
      "name" : "(*runtime._type)",
      "type" : "Tuple",
      "underlying" : 32
    }, {
      "name" : "func(off runtime.nameOff) runtime.name",
      "params" : 34,
      "recv" : -1,
      "results" : 35,
      "type" : "Signature",
      "underlying" : 33,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "off",
        "type" : 19
      } ],
      "name" : "(off runtime.nameOff)",
      "type" : "Tuple",
      "underlying" : 34
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 22
      } ],
      "name" : "(runtime.name)",
      "type" : "Tuple",
      "underlying" : 35
    }, {
      "name" : "func() (s string)",
      "params" : 1,
      "recv" : -1,
      "results" : 37,
      "type" : "Signature",
      "underlying" : 36,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "s",
        "type" : 3
      } ],
      "name" : "(s string)",
      "type" : "Tuple",
      "underlying" : 37
    }, {
      "elem" : 15,
      "name" : "*runtime.method",
      "type" : "Pointer",
      "underlying" : 38
    }, {
      "name" : "func() bool",
      "params" : 1,
      "recv" : -1,
      "results" : 15,
      "type" : "Signature",
      "underlying" : 39,
      "variadic" : false
    }, {
      "name" : "untyped nil",
      "type" : "Basic",
      "underlying" : 40
    }, {
      "name" : "func(off runtime.textOff) unsafe.Pointer",
      "params" : 42,
      "recv" : -1,
      "results" : 23,
      "type" : "Signature",
      "underlying" : 41,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "off",
        "type" : 17
      } ],
      "name" : "(off runtime.textOff)",
      "type" : "Tuple",
      "underlying" : 42
    } ],
    "variables" : [ {
      "name" : "m",
      "package" : 0,
      "type" : 0,
      "exported" : false
    }, {
      "name" : "[res0]",
      "package" : 0,
      "type" : 3,
      "exported" : false
    }, {
      "name" : "inter",
      "package" : 0,
      "type" : 3,
      "exported" : false
    }, {
      "name" : "inter",
      "package" : 0,
      "type" : 3,
      "exported" : false
    }, {
      "name" : "_type",
      "package" : 0,
      "type" : 27,
      "exported" : false
    }, {
      "name" : "typ",
      "package" : 0,
      "type" : 27,
      "exported" : false
    }, {
      "name" : "x",
      "package" : 0,
      "type" : 4,
      "exported" : false
    }, {
      "name" : "mhdr",
      "package" : 0,
      "type" : 24,
      "exported" : false
    }, {
      "name" : "ni",
      "package" : 0,
      "type" : 10,
      "exported" : false
    }, {
      "name" : "mcount",
      "package" : 0,
      "type" : 7,
      "exported" : false
    }, {
      "name" : "nt",
      "package" : 0,
      "type" : 10,
      "exported" : false
    }, {
      "name" : "moff",
      "package" : 0,
      "type" : 9,
      "exported" : false
    }, {
      "name" : "xmhdr",
      "package" : 0,
      "type" : 14,
      "exported" : false
    }, {
      "name" : "j",
      "package" : 0,
      "type" : 10,
      "exported" : false
    }, {
      "name" : "fun",
      "package" : 0,
      "type" : 29,
      "exported" : false
    }, {
      "name" : "methods",
      "package" : 0,
      "type" : 24,
      "exported" : false
    }, {
      "name" : "fun0",
      "package" : 0,
      "type" : 14,
      "exported" : false
    }, {
      "name" : "k",
      "package" : 0,
      "type" : 10,
      "exported" : false
    }, {
      "name" : "typ",
      "package" : 0,
      "type" : 6,
      "exported" : false
    }, {
      "name" : "i",
      "package" : 0,
      "type" : 29,
      "exported" : false
    }, {
      "name" : "ityp",
      "package" : 0,
      "type" : 21,
      "exported" : false
    }, {
      "name" : "name",
      "package" : 0,
      "type" : 19,
      "exported" : false
    }, {
      "name" : "name",
      "package" : 0,
      "type" : 22,
      "exported" : false
    }, {
      "name" : "ipkg",
      "package" : 0,
      "type" : 3,
      "exported" : false
    }, {
      "name" : "pkgpath",
      "package" : 0,
      "type" : 22,
      "exported" : false
    }, {
      "name" : "t",
      "package" : 0,
      "type" : 38,
      "exported" : false
    }, {
      "name" : "name",
      "package" : 0,
      "type" : 19,
      "exported" : false
    }, {
      "name" : "mtyp",
      "package" : 0,
      "type" : 21,
      "exported" : false
    }, {
      "name" : "itype",
      "package" : 0,
      "type" : 27,
      "exported" : false
    }, {
      "name" : "tname",
      "package" : 0,
      "type" : 22,
      "exported" : false
    }, {
      "name" : "iname",
      "package" : 0,
      "type" : 3,
      "exported" : false
    }, {
      "name" : "pkgPath",
      "package" : 0,
      "type" : 3,
      "exported" : false
    }, {
      "name" : "pkgpath",
      "package" : 0,
      "type" : 19,
      "exported" : false
    }, {
      "name" : "ifn",
      "package" : 0,
      "type" : 17,
      "exported" : false
    }, {
      "name" : "ifn",
      "package" : 0,
      "type" : 14,
      "exported" : false
    } ]
  },
  "go-version" : "1.14.3"
}