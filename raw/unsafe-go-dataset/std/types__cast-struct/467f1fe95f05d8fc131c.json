{
  "usage" : {
    "file" : "mfinal.go",
    "label1" : "cast-struct",
    "label2" : "types",
    "line" : "209",
    "module" : "std",
    "pkg" : "runtime",
    "project" : "kubernetes/kubernetes",
    "snippet" : "ityp := (*interfacetype)(unsafe.Pointer(f.fint))",
    "version" : "std"
  },
  "cfg" : {
    "blocks" : [ {
      "update-vars" : [ ],
      "successors" : [ 2 ],
      "in-vars" : [ 0, 1, 2, 3 ],
      "exit" : false,
      "out-vars" : [ 0, 1, 2, 3 ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[entry]",
      "entry" : true,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ ],
      "in-vars" : [ ],
      "exit" : true,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[exit]",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 3 ],
      "in-vars" : [ 2, 3, 0, 1 ],
      "exit" : false,
      "out-vars" : [ 4, 5, 0, 1, 2, 3 ],
      "decl-vars" : [ 4, 5 ],
      "line-start" : 162,
      "ast" : {
        "kind" : "statement",
        "target" : {
          "kind" : "decl",
          "specs" : [ {
            "comments" : [ ],
            "declared-type" : {
              "go-type" : 16,
              "kind" : "type",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 1,
                "value" : "unsafe"
              },
              "type" : "identifier",
              "value" : {
                "go-type" : 16,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "Pointer"
              }
            },
            "kind" : "spec",
            "names" : [ {
              "ident-kind" : "NoKind",
              "kind" : "ident",
              "value" : "frame"
            } ],
            "type" : "var",
            "values" : [ ]
          }, {
            "comments" : [ ],
            "declared-type" : {
              "go-type" : 4,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 4,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "uintptr"
              }
            },
            "kind" : "spec",
            "names" : [ {
              "ident-kind" : "NoKind",
              "kind" : "ident",
              "value" : "framecap"
            } ],
            "type" : "var",
            "values" : [ ]
          } ],
          "type" : "var"
        },
        "type" : "declaration"
      },
      "assign-vars" : [ ],
      "line-end" : 165,
      "code" : "var (\n\tframe    unsafe.Pointer\n\tframecap uintptr\n)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 4, 1 ],
      "in-vars" : [ 4, 5, 0, 1, 2, 3 ],
      "exit" : false,
      "out-vars" : [ 5, 0, 1, 2, 3, 4 ],
      "decl-vars" : [ ],
      "line-start" : 167,
      "ast" : {
        "condition" : null,
        "kind" : "statement",
        "type" : "for"
      },
      "assign-vars" : [ ],
      "line-end" : 241,
      "code" : "for {\n\tlock(&finlock)\n\tfb := finq\n\tfinq = nil\n\tif fb == nil {\n\t\tgp := getg()\n\t\tfing = gp\n\t\tfingwait = true\n\t\tgoparkunlock(&finlock, waitReasonFinalizerWait, traceEvGoBlock, 1)\n\t\tcontinue\n\t}\n\tunlock(&finlock)\n\tif raceenabled {\n\t\tracefingo()\n\t}\n\tfor fb != nil {\n\t\tfor i := fb.cnt; i > 0; i-- {\n\t\t\tf := &fb.fin[i-1]\n\n\t\t\tframesz := unsafe.Sizeof((interface{})(nil)) + f.nret\n\t\t\tif framecap < framesz {\n\n\t\t\t\tframe = mallocgc(framesz, nil, true)\n\t\t\t\tframecap = framesz\n\t\t\t}\n\n\t\t\tif f.fint == nil {\n\t\t\t\tthrow(\"missing type in runfinq\")\n\t\t\t}\n\n\t\t\t*(*[2]uintptr)(frame) = [2]uintptr{}\n\t\t\tswitch f.fint.kind & kindMask {\n\t\t\tcase kindPtr:\n\n\t\t\t\t*(*unsafe.Pointer)(frame) = f.arg\n\t\t\tcase kindInterface:\n\t\t\t\tityp := (*interfacetype)(unsafe.Pointer(f.fint))\n\n\t\t\t\t(*eface)(frame)._type = &f.ot.typ\n\t\t\t\t(*eface)(frame).data = f.arg\n\t\t\t\tif len(ityp.mhdr) != 0 {\n\n\t\t\t\t\t*(*iface)(frame) = assertE2I(ityp, *(*eface)(frame))\n\t\t\t\t}\n\t\t\tdefault:\n\t\t\t\tthrow(\"bad kind in runfinq\")\n\t\t\t}\n\t\t\tfingRunning = true\n\t\t\treflectcall(nil, unsafe.Pointer(f.fn), frame, uint32(framesz), uint32(framesz))\n\t\t\tfingRunning = false\n\n\t\t\tf.fn = nil\n\t\t\tf.arg = nil\n\t\t\tf.ot = nil\n\t\t\tatomic.Store(&fb.cnt, i-1)\n\t\t}\n\t\tnext := fb.next\n\t\tlock(&finlock)\n\t\tfb.next = finc\n\t\tfinc = fb\n\t\tunlock(&finlock)\n\t\tfb = next\n\t}\n}",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 5 ],
      "in-vars" : [ 5, 0, 1, 2, 3, 4 ],
      "exit" : false,
      "out-vars" : [ 4, 5, 0, 1, 2, 3 ],
      "decl-vars" : [ ],
      "line-start" : 168,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 35,
            "kind" : "expression",
            "operator" : "&",
            "target" : {
              "go-type" : 2,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "finlock",
                "variable" : 0
              }
            },
            "type" : "unary"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 33,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 1,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "lock"
            }
          },
          "go-type" : 1,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 168,
      "code" : "lock(&finlock)",
      "entry" : false,
      "use-vars" : [ 0 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 6 ],
      "in-vars" : [ 3, 4, 5, 0, 1, 2 ],
      "exit" : false,
      "out-vars" : [ 1, 6, 3, 4, 5, 0 ],
      "decl-vars" : [ 6 ],
      "line-start" : 169,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "fb"
          }
        } ],
        "right" : [ {
          "go-type" : 6,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "finq",
            "variable" : 2
          }
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 169,
      "code" : "fb := finq",
      "entry" : false,
      "use-vars" : [ 2 ]
    }, {
      "update-vars" : [ 2 ],
      "successors" : [ 7 ],
      "in-vars" : [ 6, 3, 4, 5, 0, 1 ],
      "exit" : false,
      "out-vars" : [ 0, 1, 6, 2, 3, 4, 5 ],
      "decl-vars" : [ ],
      "line-start" : 170,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 6,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "finq",
            "variable" : 2
          }
        } ],
        "right" : [ {
          "go-type" : 36,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Nil",
            "kind" : "ident",
            "value" : "nil"
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 2 ],
      "line-end" : 170,
      "code" : "finq = nil",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 8, 13 ],
      "in-vars" : [ 0, 1, 6, 2, 3, 4, 5 ],
      "exit" : false,
      "out-vars" : [ 5, 0, 1, 6, 2, 3, 4 ],
      "decl-vars" : [ ],
      "line-start" : 171,
      "ast" : {
        "condition" : {
          "go-type" : 37,
          "kind" : "expression",
          "left" : {
            "go-type" : 6,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "fb",
              "variable" : 6
            }
          },
          "operator" : "==",
          "right" : {
            "go-type" : 36,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Nil",
              "kind" : "ident",
              "value" : "nil"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 177,
      "code" : "if fb == nil {\n\tgp := getg()\n\tfing = gp\n\tfingwait = true\n\tgoparkunlock(&finlock, waitReasonFinalizerWait, traceEvGoBlock, 1)\n\tcontinue\n}",
      "entry" : false,
      "use-vars" : [ 6 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 9 ],
      "in-vars" : [ 5, 0, 1, 6, 2, 3, 4 ],
      "exit" : false,
      "out-vars" : [ 2, 3, 8, 4, 5, 0, 1, 6 ],
      "decl-vars" : [ 8 ],
      "line-start" : 172,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "gp"
          }
        } ],
        "right" : [ {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 126,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 2,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "getg"
            }
          },
          "go-type" : 38,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 172,
      "code" : "gp := getg()",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ 7 ],
      "successors" : [ 10 ],
      "in-vars" : [ 0, 1, 6, 2, 3, 8, 4, 5 ],
      "exit" : false,
      "out-vars" : [ 4, 5, 0, 1, 6, 2, 3 ],
      "decl-vars" : [ ],
      "line-start" : 173,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 38,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "fing",
            "variable" : 7
          }
        } ],
        "right" : [ {
          "go-type" : 38,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "gp",
            "variable" : 8
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 7 ],
      "line-end" : 173,
      "code" : "fing = gp",
      "entry" : false,
      "use-vars" : [ 8 ]
    }, {
      "update-vars" : [ 9 ],
      "successors" : [ 11 ],
      "in-vars" : [ 2, 3, 4, 5, 0, 1, 6 ],
      "exit" : false,
      "out-vars" : [ 0, 1, 6, 2, 3, 4, 5 ],
      "decl-vars" : [ ],
      "line-start" : 174,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 25,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "fingwait",
            "variable" : 9
          }
        } ],
        "right" : [ {
          "go-type" : 25,
          "kind" : "constant",
          "value" : {
            "type" : "BOOL",
            "value" : "true"
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 9 ],
      "line-end" : 174,
      "code" : "fingwait = true",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 12 ],
      "in-vars" : [ 4, 5, 0, 1, 6, 2, 3 ],
      "exit" : false,
      "out-vars" : [ 3, 4, 5, 0, 1, 6, 2 ],
      "decl-vars" : [ ],
      "line-start" : 175,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 35,
            "kind" : "expression",
            "operator" : "&",
            "target" : {
              "go-type" : 2,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "finlock",
                "variable" : 0
              }
            },
            "type" : "unary"
          }, {
            "go-type" : 105,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "16"
            }
          }, {
            "go-type" : 27,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "20"
            }
          }, {
            "go-type" : 99,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "1"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 128,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 3,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "goparkunlock"
            }
          },
          "go-type" : 1,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 175,
      "code" : "goparkunlock(&finlock, waitReasonFinalizerWait, traceEvGoBlock, 1)",
      "entry" : false,
      "use-vars" : [ 0 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 19 ],
      "in-vars" : [ 4, 5, 0, 1, 6, 2, 3 ],
      "exit" : false,
      "out-vars" : [ 4, 5, 0, 1, 6, 2, 3 ],
      "decl-vars" : [ ],
      "line-start" : 176,
      "ast" : {
        "kind" : "statement",
        "label" : null,
        "type" : "continue"
      },
      "assign-vars" : [ ],
      "line-end" : 176,
      "code" : "continue",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 14 ],
      "in-vars" : [ 5, 0, 1, 6, 2, 3, 4 ],
      "exit" : false,
      "out-vars" : [ 3, 4, 5, 0, 1, 6, 2 ],
      "decl-vars" : [ ],
      "line-start" : 178,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 35,
            "kind" : "expression",
            "operator" : "&",
            "target" : {
              "go-type" : 2,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "finlock",
                "variable" : 0
              }
            },
            "type" : "unary"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 33,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 4,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "unlock"
            }
          },
          "go-type" : 1,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 178,
      "code" : "unlock(&finlock)",
      "entry" : false,
      "use-vars" : [ 0 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 15, 16 ],
      "in-vars" : [ 6, 2, 3, 4, 5, 0, 1 ],
      "exit" : false,
      "out-vars" : [ 3, 4, 5, 0, 1, 6, 2 ],
      "decl-vars" : [ ],
      "line-start" : 179,
      "ast" : {
        "condition" : {
          "go-type" : 37,
          "kind" : "constant",
          "value" : {
            "type" : "BOOL",
            "value" : "false"
          }
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 181,
      "code" : "if raceenabled {\n\tracefingo()\n}",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 16 ],
      "in-vars" : [ 0, 1, 6, 2, 3, 4, 5 ],
      "exit" : false,
      "out-vars" : [ 4, 5, 0, 1, 6, 2, 3 ],
      "decl-vars" : [ ],
      "line-start" : 180,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 0,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 5,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "racefingo"
            }
          },
          "go-type" : 1,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 180,
      "code" : "racefingo()",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 18, 3 ],
      "in-vars" : [ 1, 6, 2, 3, 4, 5, 0 ],
      "exit" : false,
      "out-vars" : [ 2, 3, 4, 5, 0, 1, 6 ],
      "decl-vars" : [ ],
      "line-start" : 182,
      "ast" : {
        "condition" : {
          "go-type" : 37,
          "kind" : "expression",
          "left" : {
            "go-type" : 6,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "fb",
              "variable" : 6
            }
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 36,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Nil",
              "kind" : "ident",
              "value" : "nil"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "for"
      },
      "assign-vars" : [ ],
      "line-end" : 240,
      "code" : "for fb != nil {\n\tfor i := fb.cnt; i > 0; i-- {\n\t\tf := &fb.fin[i-1]\n\n\t\tframesz := unsafe.Sizeof((interface{})(nil)) + f.nret\n\t\tif framecap < framesz {\n\n\t\t\tframe = mallocgc(framesz, nil, true)\n\t\t\tframecap = framesz\n\t\t}\n\n\t\tif f.fint == nil {\n\t\t\tthrow(\"missing type in runfinq\")\n\t\t}\n\n\t\t*(*[2]uintptr)(frame) = [2]uintptr{}\n\t\tswitch f.fint.kind & kindMask {\n\t\tcase kindPtr:\n\n\t\t\t*(*unsafe.Pointer)(frame) = f.arg\n\t\tcase kindInterface:\n\t\t\tityp := (*interfacetype)(unsafe.Pointer(f.fint))\n\n\t\t\t(*eface)(frame)._type = &f.ot.typ\n\t\t\t(*eface)(frame).data = f.arg\n\t\t\tif len(ityp.mhdr) != 0 {\n\n\t\t\t\t*(*iface)(frame) = assertE2I(ityp, *(*eface)(frame))\n\t\t\t}\n\t\tdefault:\n\t\t\tthrow(\"bad kind in runfinq\")\n\t\t}\n\t\tfingRunning = true\n\t\treflectcall(nil, unsafe.Pointer(f.fn), frame, uint32(framesz), uint32(framesz))\n\t\tfingRunning = false\n\n\t\tf.fn = nil\n\t\tf.arg = nil\n\t\tf.ot = nil\n\t\tatomic.Store(&fb.cnt, i-1)\n\t}\n\tnext := fb.next\n\tlock(&finlock)\n\tfb.next = finc\n\tfinc = fb\n\tunlock(&finlock)\n\tfb = next\n}",
      "entry" : false,
      "use-vars" : [ 6 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 20, 46 ],
      "in-vars" : [ 4, 5, 0, 1, 6, 2, 3 ],
      "exit" : false,
      "out-vars" : [ 1, 6, 2, 3, 4, 5, 0 ],
      "decl-vars" : [ ],
      "line-start" : 183,
      "ast" : {
        "condition" : {
          "go-type" : 37,
          "kind" : "expression",
          "left" : {
            "go-type" : 5,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "i",
              "variable" : 1
            }
          },
          "operator" : ">",
          "right" : {
            "go-type" : 5,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "for"
      },
      "assign-vars" : [ ],
      "line-end" : 233,
      "code" : "for i := fb.cnt; i > 0; i-- {\n\tf := &fb.fin[i-1]\n\n\tframesz := unsafe.Sizeof((interface{})(nil)) + f.nret\n\tif framecap < framesz {\n\n\t\tframe = mallocgc(framesz, nil, true)\n\t\tframecap = framesz\n\t}\n\n\tif f.fint == nil {\n\t\tthrow(\"missing type in runfinq\")\n\t}\n\n\t*(*[2]uintptr)(frame) = [2]uintptr{}\n\tswitch f.fint.kind & kindMask {\n\tcase kindPtr:\n\n\t\t*(*unsafe.Pointer)(frame) = f.arg\n\tcase kindInterface:\n\t\tityp := (*interfacetype)(unsafe.Pointer(f.fint))\n\n\t\t(*eface)(frame)._type = &f.ot.typ\n\t\t(*eface)(frame).data = f.arg\n\t\tif len(ityp.mhdr) != 0 {\n\n\t\t\t*(*iface)(frame) = assertE2I(ityp, *(*eface)(frame))\n\t\t}\n\tdefault:\n\t\tthrow(\"bad kind in runfinq\")\n\t}\n\tfingRunning = true\n\treflectcall(nil, unsafe.Pointer(f.fn), frame, uint32(framesz), uint32(framesz))\n\tfingRunning = false\n\n\tf.fn = nil\n\tf.arg = nil\n\tf.ot = nil\n\tatomic.Store(&fb.cnt, i-1)\n}",
      "entry" : false,
      "use-vars" : [ 1 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 17 ],
      "in-vars" : [ 5, 0, 6, 2, 3, 4 ],
      "exit" : false,
      "out-vars" : [ 4, 5, 0, 1, 6, 2, 3 ],
      "decl-vars" : [ 1 ],
      "line-start" : 183,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "i"
          }
        } ],
        "right" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "cnt",
            "variable" : 10
          },
          "go-type" : 5,
          "kind" : "expression",
          "target" : {
            "go-type" : 6,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "fb",
              "variable" : 6
            }
          },
          "type" : "selector"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 183,
      "code" : "i := fb.cnt",
      "entry" : false,
      "use-vars" : [ 6 ]
    }, {
      "update-vars" : [ 1 ],
      "successors" : [ 17 ],
      "in-vars" : [ 0, 1, 6, 2, 3, 4, 5 ],
      "exit" : false,
      "out-vars" : [ 4, 5, 0, 1, 6, 2, 3 ],
      "decl-vars" : [ ],
      "line-start" : 183,
      "ast" : {
        "kind" : "statement",
        "operation" : "--",
        "target" : {
          "go-type" : 5,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "i",
            "variable" : 1
          }
        },
        "type" : "crement"
      },
      "assign-vars" : [ 1 ],
      "line-end" : 183,
      "code" : "i--",
      "entry" : false,
      "use-vars" : [ 1 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 21 ],
      "in-vars" : [ 2, 3, 4, 5, 0, 1, 6 ],
      "exit" : false,
      "out-vars" : [ 2, 3, 4, 5, 12, 0, 1, 6 ],
      "decl-vars" : [ 12 ],
      "line-start" : 184,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "f"
          }
        } ],
        "right" : [ {
          "go-type" : 130,
          "kind" : "expression",
          "operator" : "&",
          "target" : {
            "go-type" : 11,
            "index" : {
              "go-type" : 5,
              "kind" : "expression",
              "left" : {
                "go-type" : 5,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "i",
                  "variable" : 1
                }
              },
              "operator" : "-",
              "right" : {
                "go-type" : 5,
                "kind" : "constant",
                "value" : {
                  "type" : "INT",
                  "value" : "1"
                }
              },
              "type" : "binary"
            },
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "fin",
                "variable" : 11
              },
              "go-type" : 10,
              "kind" : "expression",
              "target" : {
                "go-type" : 6,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "fb",
                  "variable" : 6
                }
              },
              "type" : "selector"
            },
            "type" : "index"
          },
          "type" : "unary"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 184,
      "code" : "f := &fb.fin[i-1]",
      "entry" : false,
      "use-vars" : [ 6, 1 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 22 ],
      "in-vars" : [ 3, 4, 5, 12, 0, 1, 6, 2 ],
      "exit" : false,
      "out-vars" : [ 2, 3, 6, 5, 14, 12, 0, 1, 4 ],
      "decl-vars" : [ 14 ],
      "line-start" : 186,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "framesz"
          }
        } ],
        "right" : [ {
          "go-type" : 4,
          "kind" : "expression",
          "left" : {
            "go-type" : 4,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "16"
            }
          },
          "operator" : "+",
          "right" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "nret",
              "variable" : 13
            },
            "go-type" : 4,
            "kind" : "expression",
            "target" : {
              "go-type" : 130,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "f",
                "variable" : 12
              }
            },
            "type" : "selector"
          },
          "type" : "binary"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 186,
      "code" : "framesz := unsafe.Sizeof((interface{})(nil)) + f.nret",
      "entry" : false,
      "use-vars" : [ 12 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 23, 25 ],
      "in-vars" : [ 4, 5, 12, 0, 3, 14, 1, 6, 2 ],
      "exit" : false,
      "out-vars" : [ 5, 6, 2, 4, 12, 0, 1, 3, 14 ],
      "decl-vars" : [ ],
      "line-start" : 187,
      "ast" : {
        "condition" : {
          "go-type" : 37,
          "kind" : "expression",
          "left" : {
            "go-type" : 4,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "framecap",
              "variable" : 5
            }
          },
          "operator" : "<",
          "right" : {
            "go-type" : 4,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "framesz",
              "variable" : 14
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 194,
      "code" : "if framecap < framesz {\n\n\tframe = mallocgc(framesz, nil, true)\n\tframecap = framesz\n}",
      "entry" : false,
      "use-vars" : [ 5, 14 ]
    }, {
      "update-vars" : [ 4 ],
      "successors" : [ 24 ],
      "in-vars" : [ 2, 3, 14, 12, 0, 1, 6 ],
      "exit" : false,
      "out-vars" : [ 1, 6, 2, 3, 4, 14, 12, 0 ],
      "decl-vars" : [ ],
      "line-start" : 192,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 16,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "frame",
            "variable" : 4
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 4,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "framesz",
              "variable" : 14
            }
          }, {
            "go-type" : 36,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Nil",
              "kind" : "ident",
              "value" : "nil"
            }
          }, {
            "go-type" : 25,
            "kind" : "constant",
            "value" : {
              "type" : "BOOL",
              "value" : "true"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 131,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 6,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "mallocgc"
            }
          },
          "go-type" : 16,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 4 ],
      "line-end" : 192,
      "code" : "frame = mallocgc(framesz, nil, true)",
      "entry" : false,
      "use-vars" : [ 14 ]
    }, {
      "update-vars" : [ 5 ],
      "successors" : [ 25 ],
      "in-vars" : [ 14, 12, 0, 1, 6, 2, 3, 4 ],
      "exit" : false,
      "out-vars" : [ 3, 5, 12, 0, 6, 2, 4, 14, 1 ],
      "decl-vars" : [ ],
      "line-start" : 193,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 4,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "framecap",
            "variable" : 5
          }
        } ],
        "right" : [ {
          "go-type" : 4,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "framesz",
            "variable" : 14
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 5 ],
      "line-end" : 193,
      "code" : "framecap = framesz",
      "entry" : false,
      "use-vars" : [ 14 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 26, 27 ],
      "in-vars" : [ 5, 14, 12, 1, 2, 4, 0, 6, 3 ],
      "exit" : false,
      "out-vars" : [ 4, 5, 14, 12, 0, 1, 2, 3, 6 ],
      "decl-vars" : [ ],
      "line-start" : 196,
      "ast" : {
        "condition" : {
          "go-type" : 37,
          "kind" : "expression",
          "left" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "fint",
              "variable" : 15
            },
            "go-type" : 17,
            "kind" : "expression",
            "target" : {
              "go-type" : 130,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "f",
                "variable" : 12
              }
            },
            "type" : "selector"
          },
          "operator" : "==",
          "right" : {
            "go-type" : 36,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Nil",
              "kind" : "ident",
              "value" : "nil"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 198,
      "code" : "if f.fint == nil {\n\tthrow(\"missing type in runfinq\")\n}",
      "entry" : false,
      "use-vars" : [ 12 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 27 ],
      "in-vars" : [ 12, 1, 2, 5, 14, 0, 6, 3, 4 ],
      "exit" : false,
      "out-vars" : [ 4, 14, 12, 3, 5, 0, 1, 6, 2 ],
      "decl-vars" : [ ],
      "line-start" : 197,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 65,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "missing type in runfinq"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 134,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 7,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "throw"
            }
          },
          "go-type" : 1,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 197,
      "code" : "throw(\"missing type in runfinq\")",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 28 ],
      "in-vars" : [ 14, 2, 0, 1, 6, 3, 4, 5, 12 ],
      "exit" : false,
      "out-vars" : [ 4, 5, 14, 12, 0, 1, 6, 2, 3 ],
      "decl-vars" : [ ],
      "line-start" : 203,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 136,
          "kind" : "expression",
          "target" : {
            "coerced-to" : {
              "contained" : {
                "element" : {
                  "go-type" : 4,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 4,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "uintptr"
                  }
                },
                "go-type" : 136,
                "kind" : "type",
                "length" : {
                  "go-type" : 138,
                  "kind" : "constant",
                  "value" : {
                    "type" : "INT",
                    "value" : "2"
                  }
                },
                "type" : "array"
              },
              "go-type" : 137,
              "kind" : "type",
              "type" : "pointer"
            },
            "go-type" : 137,
            "kind" : "expression",
            "target" : {
              "go-type" : 16,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "frame",
                "variable" : 4
              }
            },
            "type" : "cast"
          },
          "type" : "star"
        } ],
        "right" : [ {
          "declared" : {
            "element" : {
              "go-type" : 4,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 4,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "uintptr"
              }
            },
            "go-type" : 136,
            "kind" : "type",
            "length" : {
              "go-type" : 138,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "2"
              }
            },
            "type" : "array"
          },
          "go-type" : 136,
          "kind" : "literal",
          "type" : "composite",
          "values" : [ ]
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 203,
      "code" : "*(*[2]uintptr)(frame) = [2]uintptr{}",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 29, 31, 37 ],
      "in-vars" : [ 1, 2, 3, 4, 14, 12, 0, 5, 6 ],
      "exit" : false,
      "out-vars" : [ 2, 14, 12, 6, 1, 3, 4, 5, 0 ],
      "decl-vars" : [ ],
      "line-start" : 204,
      "ast" : {
        "condition" : {
          "go-type" : 21,
          "kind" : "expression",
          "left" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "kind",
              "variable" : 16
            },
            "go-type" : 21,
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "fint",
                "variable" : 15
              },
              "go-type" : 17,
              "kind" : "expression",
              "target" : {
                "go-type" : 130,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "f",
                  "variable" : 12
                }
              },
              "type" : "selector"
            },
            "type" : "selector"
          },
          "operator" : "&",
          "right" : {
            "go-type" : 21,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "31"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "switch"
      },
      "assign-vars" : [ ],
      "line-end" : 220,
      "code" : "switch f.fint.kind & kindMask {\ncase kindPtr:\n\n\t*(*unsafe.Pointer)(frame) = f.arg\ncase kindInterface:\n\tityp := (*interfacetype)(unsafe.Pointer(f.fint))\n\n\t(*eface)(frame)._type = &f.ot.typ\n\t(*eface)(frame).data = f.arg\n\tif len(ityp.mhdr) != 0 {\n\n\t\t*(*iface)(frame) = assertE2I(ityp, *(*eface)(frame))\n\t}\ndefault:\n\tthrow(\"bad kind in runfinq\")\n}",
      "entry" : false,
      "use-vars" : [ 12 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 30 ],
      "in-vars" : [ 3, 4, 14, 0, 1, 6, 5, 12, 2 ],
      "exit" : false,
      "out-vars" : [ 2, 3, 4, 14, 12, 0, 5, 1, 6 ],
      "decl-vars" : [ ],
      "line-start" : 205,
      "ast" : {
        "expressions" : [ {
          "go-type" : 21,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "22"
          }
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 207,
      "code" : "case kindPtr:\n\n\t*(*unsafe.Pointer)(frame) = f.arg",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 39 ],
      "in-vars" : [ 2, 3, 1, 6, 14, 12, 0, 4, 5 ],
      "exit" : false,
      "out-vars" : [ 14, 12, 0, 1, 6, 4, 5, 2, 3 ],
      "decl-vars" : [ ],
      "line-start" : 207,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 16,
          "kind" : "expression",
          "target" : {
            "coerced-to" : {
              "contained" : {
                "go-type" : 16,
                "kind" : "type",
                "qualifier" : {
                  "ident-kind" : "PkgName",
                  "kind" : "ident",
                  "package" : 1,
                  "value" : "unsafe"
                },
                "type" : "identifier",
                "value" : {
                  "go-type" : 16,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "Pointer"
                }
              },
              "go-type" : 139,
              "kind" : "type",
              "type" : "pointer"
            },
            "go-type" : 139,
            "kind" : "expression",
            "target" : {
              "go-type" : 16,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "frame",
                "variable" : 4
              }
            },
            "type" : "cast"
          },
          "type" : "star"
        } ],
        "right" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "arg",
            "variable" : 17
          },
          "go-type" : 16,
          "kind" : "expression",
          "target" : {
            "go-type" : 130,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "f",
              "variable" : 12
            }
          },
          "type" : "selector"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 207,
      "code" : "*(*unsafe.Pointer)(frame) = f.arg",
      "entry" : false,
      "use-vars" : [ 12 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 32 ],
      "in-vars" : [ 5, 14, 0, 6, 2, 3, 4, 12, 1 ],
      "exit" : false,
      "out-vars" : [ 5, 12, 6, 2, 3, 4, 14, 0, 1 ],
      "decl-vars" : [ ],
      "line-start" : 208,
      "ast" : {
        "expressions" : [ {
          "go-type" : 21,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "20"
          }
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 217,
      "code" : "case kindInterface:\n\tityp := (*interfacetype)(unsafe.Pointer(f.fint))\n\n\t(*eface)(frame)._type = &f.ot.typ\n\t(*eface)(frame).data = f.arg\n\tif len(ityp.mhdr) != 0 {\n\n\t\t*(*iface)(frame) = assertE2I(ityp, *(*eface)(frame))\n\t}",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 33 ],
      "in-vars" : [ 6, 2, 4, 5, 14, 12, 0, 1, 3 ],
      "exit" : false,
      "out-vars" : [ 22, 4, 14, 12, 3, 5, 0, 1, 6, 2 ],
      "decl-vars" : [ 22 ],
      "line-start" : 209,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "ityp"
          }
        } ],
        "right" : [ {
          "coerced-to" : {
            "contained" : {
              "go-type" : 141,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 141,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "interfacetype"
              }
            },
            "go-type" : 140,
            "kind" : "type",
            "type" : "pointer"
          },
          "go-type" : 140,
          "kind" : "expression",
          "target" : {
            "coerced-to" : {
              "go-type" : 16,
              "kind" : "type",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 1,
                "value" : "unsafe"
              },
              "type" : "identifier",
              "value" : {
                "go-type" : 16,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "Pointer"
              }
            },
            "go-type" : 16,
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "fint",
                "variable" : 15
              },
              "go-type" : 17,
              "kind" : "expression",
              "target" : {
                "go-type" : 130,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "f",
                  "variable" : 12
                }
              },
              "type" : "selector"
            },
            "type" : "cast"
          },
          "type" : "cast"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 209,
      "code" : "ityp := (*interfacetype)(unsafe.Pointer(f.fint))",
      "entry" : false,
      "use-vars" : [ 12 ]
    }, {
      "update-vars" : [ 4 ],
      "successors" : [ 34 ],
      "in-vars" : [ 22, 4, 5, 14, 1, 2, 12, 0, 6, 3 ],
      "exit" : false,
      "out-vars" : [ 1, 3, 22, 5, 14, 12, 4, 0, 6, 2 ],
      "decl-vars" : [ ],
      "line-start" : 211,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "_type",
            "variable" : 18
          },
          "go-type" : 17,
          "kind" : "expression",
          "target" : {
            "coerced-to" : {
              "contained" : {
                "go-type" : 149,
                "kind" : "type",
                "type" : "identifier",
                "value" : {
                  "go-type" : 149,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "eface"
                }
              },
              "go-type" : 148,
              "kind" : "type",
              "type" : "pointer"
            },
            "go-type" : 148,
            "kind" : "expression",
            "target" : {
              "go-type" : 16,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "frame",
                "variable" : 4
              }
            },
            "type" : "cast"
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "go-type" : 17,
          "kind" : "expression",
          "operator" : "&",
          "target" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "typ",
              "variable" : 20
            },
            "go-type" : 18,
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "ot",
                "variable" : 19
              },
              "go-type" : 30,
              "kind" : "expression",
              "target" : {
                "go-type" : 130,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "f",
                  "variable" : 12
                }
              },
              "type" : "selector"
            },
            "type" : "selector"
          },
          "type" : "unary"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 211,
      "code" : "(*eface)(frame)._type = &f.ot.typ",
      "entry" : false,
      "use-vars" : [ 4, 12 ]
    }, {
      "update-vars" : [ 4 ],
      "successors" : [ 35 ],
      "in-vars" : [ 12, 0, 6, 3, 22, 4, 5, 14, 1, 2 ],
      "exit" : false,
      "out-vars" : [ 22, 12, 1, 6, 2, 3, 4, 5, 14, 0 ],
      "decl-vars" : [ ],
      "line-start" : 212,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "data",
            "variable" : 21
          },
          "go-type" : 16,
          "kind" : "expression",
          "target" : {
            "coerced-to" : {
              "contained" : {
                "go-type" : 149,
                "kind" : "type",
                "type" : "identifier",
                "value" : {
                  "go-type" : 149,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "eface"
                }
              },
              "go-type" : 148,
              "kind" : "type",
              "type" : "pointer"
            },
            "go-type" : 148,
            "kind" : "expression",
            "target" : {
              "go-type" : 16,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "frame",
                "variable" : 4
              }
            },
            "type" : "cast"
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "arg",
            "variable" : 17
          },
          "go-type" : 16,
          "kind" : "expression",
          "target" : {
            "go-type" : 130,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "f",
              "variable" : 12
            }
          },
          "type" : "selector"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 212,
      "code" : "(*eface)(frame).data = f.arg",
      "entry" : false,
      "use-vars" : [ 12, 4 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 36, 39 ],
      "in-vars" : [ 14, 12, 2, 3, 22, 5, 1, 6, 4, 0 ],
      "exit" : false,
      "out-vars" : [ 14, 6, 2, 22, 4, 5, 12, 0, 1, 3 ],
      "decl-vars" : [ ],
      "line-start" : 213,
      "ast" : {
        "condition" : {
          "go-type" : 37,
          "kind" : "expression",
          "left" : {
            "arguments" : [ {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "mhdr",
                "variable" : 23
              },
              "go-type" : 145,
              "kind" : "expression",
              "target" : {
                "go-type" : 140,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "ityp",
                  "variable" : 22
                }
              },
              "type" : "selector"
            } ],
            "ellipsis" : false,
            "function" : {
              "go-type" : 151,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Builtin",
                "kind" : "ident",
                "value" : "len"
              }
            },
            "go-type" : 99,
            "kind" : "expression",
            "type" : "call"
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 99,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 217,
      "code" : "if len(ityp.mhdr) != 0 {\n\n\t*(*iface)(frame) = assertE2I(ityp, *(*eface)(frame))\n}",
      "entry" : false,
      "use-vars" : [ 22 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 39 ],
      "in-vars" : [ 6, 3, 22, 4, 5, 14, 1, 12, 0, 2 ],
      "exit" : false,
      "out-vars" : [ 4, 5, 0, 2, 3, 14, 12, 1, 6 ],
      "decl-vars" : [ ],
      "line-start" : 216,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 154,
          "kind" : "expression",
          "target" : {
            "coerced-to" : {
              "contained" : {
                "go-type" : 154,
                "kind" : "type",
                "type" : "identifier",
                "value" : {
                  "go-type" : 154,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "iface"
                }
              },
              "go-type" : 161,
              "kind" : "type",
              "type" : "pointer"
            },
            "go-type" : 161,
            "kind" : "expression",
            "target" : {
              "go-type" : 16,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "frame",
                "variable" : 4
              }
            },
            "type" : "cast"
          },
          "type" : "star"
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 140,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "ityp",
              "variable" : 22
            }
          }, {
            "go-type" : 149,
            "kind" : "expression",
            "target" : {
              "coerced-to" : {
                "contained" : {
                  "go-type" : 149,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 149,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "eface"
                  }
                },
                "go-type" : 148,
                "kind" : "type",
                "type" : "pointer"
              },
              "go-type" : 148,
              "kind" : "expression",
              "target" : {
                "go-type" : 16,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "frame",
                  "variable" : 4
                }
              },
              "type" : "cast"
            },
            "type" : "star"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 162,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 8,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "assertE2I"
            }
          },
          "go-type" : 154,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 216,
      "code" : "*(*iface)(frame) = assertE2I(ityp, *(*eface)(frame))",
      "entry" : false,
      "use-vars" : [ 22, 4 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 38 ],
      "in-vars" : [ 0, 1, 2, 4, 5, 6, 3, 14, 12 ],
      "exit" : false,
      "out-vars" : [ 5, 0, 6, 2, 3, 4, 14, 12, 1 ],
      "decl-vars" : [ ],
      "line-start" : 218,
      "ast" : {
        "expressions" : [ ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 219,
      "code" : "default:\n\tthrow(\"bad kind in runfinq\")",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 39 ],
      "in-vars" : [ 14, 12, 6, 2, 3, 4, 5, 0, 1 ],
      "exit" : false,
      "out-vars" : [ 5, 14, 0, 4, 12, 1, 6, 2, 3 ],
      "decl-vars" : [ ],
      "line-start" : 219,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 65,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "bad kind in runfinq"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 134,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 7,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "throw"
            }
          },
          "go-type" : 1,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 219,
      "code" : "throw(\"bad kind in runfinq\")",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ 24 ],
      "successors" : [ 40 ],
      "in-vars" : [ 1, 3, 0, 5, 14, 12, 6, 2, 4 ],
      "exit" : false,
      "out-vars" : [ 12, 6, 4, 14, 1, 2, 3, 5, 0 ],
      "decl-vars" : [ ],
      "line-start" : 221,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 25,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "fingRunning",
            "variable" : 24
          }
        } ],
        "right" : [ {
          "go-type" : 25,
          "kind" : "constant",
          "value" : {
            "type" : "BOOL",
            "value" : "true"
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 24 ],
      "line-end" : 221,
      "code" : "fingRunning = true",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 41 ],
      "in-vars" : [ 4, 12, 6, 3, 2, 5, 14, 0, 1 ],
      "exit" : false,
      "out-vars" : [ 1, 6, 2, 3, 4, 5, 12, 0 ],
      "decl-vars" : [ ],
      "line-start" : 222,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 36,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Nil",
              "kind" : "ident",
              "value" : "nil"
            }
          }, {
            "coerced-to" : {
              "go-type" : 16,
              "kind" : "type",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 1,
                "value" : "unsafe"
              },
              "type" : "identifier",
              "value" : {
                "go-type" : 16,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "Pointer"
              }
            },
            "go-type" : 16,
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "fn",
                "variable" : 25
              },
              "go-type" : 13,
              "kind" : "expression",
              "target" : {
                "go-type" : 130,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "f",
                  "variable" : 12
                }
              },
              "type" : "selector"
            },
            "type" : "cast"
          }, {
            "go-type" : 16,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "frame",
              "variable" : 4
            }
          }, {
            "coerced-to" : {
              "go-type" : 5,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 5,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "uint32"
              }
            },
            "go-type" : 5,
            "kind" : "expression",
            "target" : {
              "go-type" : 4,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "framesz",
                "variable" : 14
              }
            },
            "type" : "cast"
          }, {
            "coerced-to" : {
              "go-type" : 5,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 5,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "uint32"
              }
            },
            "go-type" : 5,
            "kind" : "expression",
            "target" : {
              "go-type" : 4,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "framesz",
                "variable" : 14
              }
            },
            "type" : "cast"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 165,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 9,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "reflectcall"
            }
          },
          "go-type" : 1,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 222,
      "code" : "reflectcall(nil, unsafe.Pointer(f.fn), frame, uint32(framesz), uint32(framesz))",
      "entry" : false,
      "use-vars" : [ 14, 12, 4 ]
    }, {
      "update-vars" : [ 24 ],
      "successors" : [ 42 ],
      "in-vars" : [ 6, 2, 3, 4, 5, 12, 0, 1 ],
      "exit" : false,
      "out-vars" : [ 5, 12, 0, 1, 6, 2, 3, 4 ],
      "decl-vars" : [ ],
      "line-start" : 223,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 25,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "fingRunning",
            "variable" : 24
          }
        } ],
        "right" : [ {
          "go-type" : 25,
          "kind" : "constant",
          "value" : {
            "type" : "BOOL",
            "value" : "false"
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 24 ],
      "line-end" : 223,
      "code" : "fingRunning = false",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ 12 ],
      "successors" : [ 43 ],
      "in-vars" : [ 4, 5, 12, 0, 1, 6, 2, 3 ],
      "exit" : false,
      "out-vars" : [ 1, 6, 2, 3, 4, 5, 12, 0 ],
      "decl-vars" : [ ],
      "line-start" : 229,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "fn",
            "variable" : 25
          },
          "go-type" : 13,
          "kind" : "expression",
          "target" : {
            "go-type" : 130,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "f",
              "variable" : 12
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "go-type" : 36,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Nil",
            "kind" : "ident",
            "value" : "nil"
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 229,
      "code" : "f.fn = nil",
      "entry" : false,
      "use-vars" : [ 12 ]
    }, {
      "update-vars" : [ 12 ],
      "successors" : [ 44 ],
      "in-vars" : [ 6, 2, 3, 4, 5, 12, 0, 1 ],
      "exit" : false,
      "out-vars" : [ 12, 0, 1, 6, 2, 3, 4, 5 ],
      "decl-vars" : [ ],
      "line-start" : 230,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "arg",
            "variable" : 17
          },
          "go-type" : 16,
          "kind" : "expression",
          "target" : {
            "go-type" : 130,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "f",
              "variable" : 12
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "go-type" : 16,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Nil",
            "kind" : "ident",
            "value" : "nil"
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 230,
      "code" : "f.arg = nil",
      "entry" : false,
      "use-vars" : [ 12 ]
    }, {
      "update-vars" : [ 12 ],
      "successors" : [ 45 ],
      "in-vars" : [ 5, 12, 0, 1, 6, 2, 3, 4 ],
      "exit" : false,
      "out-vars" : [ 3, 4, 5, 0, 1, 6, 2 ],
      "decl-vars" : [ ],
      "line-start" : 231,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "ot",
            "variable" : 19
          },
          "go-type" : 30,
          "kind" : "expression",
          "target" : {
            "go-type" : 130,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "f",
              "variable" : 12
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "go-type" : 36,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Nil",
            "kind" : "ident",
            "value" : "nil"
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 231,
      "code" : "f.ot = nil",
      "entry" : false,
      "use-vars" : [ 12 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 19 ],
      "in-vars" : [ 4, 5, 0, 1, 6, 2, 3 ],
      "exit" : false,
      "out-vars" : [ 2, 3, 4, 5, 0, 1, 6 ],
      "decl-vars" : [ ],
      "line-start" : 232,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 169,
            "kind" : "expression",
            "operator" : "&",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "cnt",
                "variable" : 10
              },
              "go-type" : 5,
              "kind" : "expression",
              "target" : {
                "go-type" : 6,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "fb",
                  "variable" : 6
                }
              },
              "type" : "selector"
            },
            "type" : "unary"
          }, {
            "go-type" : 5,
            "kind" : "expression",
            "left" : {
              "go-type" : 5,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "i",
                "variable" : 1
              }
            },
            "operator" : "-",
            "right" : {
              "go-type" : 5,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "1"
              }
            },
            "type" : "binary"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 167,
            "kind" : "expression",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 3,
              "value" : "atomic"
            },
            "type" : "identifier",
            "value" : {
              "function" : 10,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "Store"
            }
          },
          "go-type" : 1,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 232,
      "code" : "atomic.Store(&fb.cnt, i-1)",
      "entry" : false,
      "use-vars" : [ 6, 1 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 47 ],
      "in-vars" : [ 3, 4, 5, 0, 1, 6, 2 ],
      "exit" : false,
      "out-vars" : [ 2, 3, 27, 4, 5, 0, 1, 6 ],
      "decl-vars" : [ 27 ],
      "line-start" : 234,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "next"
          }
        } ],
        "right" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "next",
            "variable" : 26
          },
          "go-type" : 6,
          "kind" : "expression",
          "target" : {
            "go-type" : 6,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "fb",
              "variable" : 6
            }
          },
          "type" : "selector"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 234,
      "code" : "next := fb.next",
      "entry" : false,
      "use-vars" : [ 6 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 48 ],
      "in-vars" : [ 1, 6, 2, 3, 27, 4, 5, 0 ],
      "exit" : false,
      "out-vars" : [ 6, 2, 3, 27, 4, 5, 0, 1 ],
      "decl-vars" : [ ],
      "line-start" : 235,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 35,
            "kind" : "expression",
            "operator" : "&",
            "target" : {
              "go-type" : 2,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "finlock",
                "variable" : 0
              }
            },
            "type" : "unary"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 33,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 1,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "lock"
            }
          },
          "go-type" : 1,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 235,
      "code" : "lock(&finlock)",
      "entry" : false,
      "use-vars" : [ 0 ]
    }, {
      "update-vars" : [ 6 ],
      "successors" : [ 49 ],
      "in-vars" : [ 0, 1, 6, 2, 3, 27, 4, 5 ],
      "exit" : false,
      "out-vars" : [ 27, 4, 5, 0, 1, 6, 2 ],
      "decl-vars" : [ ],
      "line-start" : 236,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "next",
            "variable" : 26
          },
          "go-type" : 6,
          "kind" : "expression",
          "target" : {
            "go-type" : 6,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "fb",
              "variable" : 6
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "go-type" : 6,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "finc",
            "variable" : 3
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 236,
      "code" : "fb.next = finc",
      "entry" : false,
      "use-vars" : [ 6, 3 ]
    }, {
      "update-vars" : [ 3 ],
      "successors" : [ 50 ],
      "in-vars" : [ 1, 6, 2, 27, 4, 5, 0 ],
      "exit" : false,
      "out-vars" : [ 4, 5, 0, 1, 2, 3, 27 ],
      "decl-vars" : [ ],
      "line-start" : 237,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 6,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "finc",
            "variable" : 3
          }
        } ],
        "right" : [ {
          "go-type" : 6,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "fb",
            "variable" : 6
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 3 ],
      "line-end" : 237,
      "code" : "finc = fb",
      "entry" : false,
      "use-vars" : [ 6 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 51 ],
      "in-vars" : [ 3, 27, 4, 5, 0, 1, 2 ],
      "exit" : false,
      "out-vars" : [ 1, 2, 3, 27, 4, 5, 0 ],
      "decl-vars" : [ ],
      "line-start" : 238,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 35,
            "kind" : "expression",
            "operator" : "&",
            "target" : {
              "go-type" : 2,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "finlock",
                "variable" : 0
              }
            },
            "type" : "unary"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 33,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 4,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "unlock"
            }
          },
          "go-type" : 1,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 238,
      "code" : "unlock(&finlock)",
      "entry" : false,
      "use-vars" : [ 0 ]
    }, {
      "update-vars" : [ 6 ],
      "successors" : [ 16 ],
      "in-vars" : [ 4, 5, 0, 1, 2, 3, 27 ],
      "exit" : false,
      "out-vars" : [ 5, 0, 1, 6, 2, 3, 4 ],
      "decl-vars" : [ ],
      "line-start" : 239,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 6,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "fb",
            "variable" : 6
          }
        } ],
        "right" : [ {
          "go-type" : 6,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "next",
            "variable" : 27
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 6 ],
      "line-end" : 239,
      "code" : "fb = next",
      "entry" : false,
      "use-vars" : [ 27 ]
    } ],
    "code" : "// This is the goroutine that runs all of the finalizers\nfunc runfinq() {\n\tvar (\n\t\tframe    unsafe.Pointer\n\t\tframecap uintptr\n\t)\n\n\tfor {\n\t\tlock(&finlock)\n\t\tfb := finq\n\t\tfinq = nil\n\t\tif fb == nil {\n\t\t\tgp := getg()\n\t\t\tfing = gp\n\t\t\tfingwait = true\n\t\t\tgoparkunlock(&finlock, waitReasonFinalizerWait, traceEvGoBlock, 1)\n\t\t\tcontinue\n\t\t}\n\t\tunlock(&finlock)\n\t\tif raceenabled {\n\t\t\tracefingo()\n\t\t}\n\t\tfor fb != nil {\n\t\t\tfor i := fb.cnt; i > 0; i-- {\n\t\t\t\tf := &fb.fin[i-1]\n\n\t\t\t\tframesz := unsafe.Sizeof((interface{})(nil)) + f.nret\n\t\t\t\tif framecap < framesz {\n\n\t\t\t\t\tframe = mallocgc(framesz, nil, true)\n\t\t\t\t\tframecap = framesz\n\t\t\t\t}\n\n\t\t\t\tif f.fint == nil {\n\t\t\t\t\tthrow(\"missing type in runfinq\")\n\t\t\t\t}\n\n\t\t\t\t*(*[2]uintptr)(frame) = [2]uintptr{}\n\t\t\t\tswitch f.fint.kind & kindMask {\n\t\t\t\tcase kindPtr:\n\n\t\t\t\t\t*(*unsafe.Pointer)(frame) = f.arg\n\t\t\t\tcase kindInterface:\n\t\t\t\t\tityp := (*interfacetype)(unsafe.Pointer(f.fint))\n\n\t\t\t\t\t(*eface)(frame)._type = &f.ot.typ\n\t\t\t\t\t(*eface)(frame).data = f.arg\n\t\t\t\t\tif len(ityp.mhdr) != 0 {\n\n\t\t\t\t\t\t*(*iface)(frame) = assertE2I(ityp, *(*eface)(frame))\n\t\t\t\t\t}\n\t\t\t\tdefault:\n\t\t\t\t\tthrow(\"bad kind in runfinq\")\n\t\t\t\t}\n\t\t\t\tfingRunning = true\n\t\t\t\treflectcall(nil, unsafe.Pointer(f.fn), frame, uint32(framesz), uint32(framesz))\n\t\t\t\tfingRunning = false\n\n\t\t\t\tf.fn = nil\n\t\t\t\tf.arg = nil\n\t\t\t\tf.ot = nil\n\t\t\t\tatomic.Store(&fb.cnt, i-1)\n\t\t\t}\n\t\t\tnext := fb.next\n\t\t\tlock(&finlock)\n\t\t\tfb.next = finc\n\t\t\tfinc = fb\n\t\t\tunlock(&finlock)\n\t\t\tfb = next\n\t\t}\n\t}\n}",
    "defines" : [ 0 ],
    "functions" : [ {
      "name" : "runfinq",
      "package" : 0,
      "type" : 0,
      "exported" : false
    }, {
      "name" : "lock",
      "package" : 0,
      "type" : 33,
      "exported" : false
    }, {
      "name" : "getg",
      "package" : 0,
      "type" : 126,
      "exported" : false
    }, {
      "name" : "goparkunlock",
      "package" : 0,
      "type" : 128,
      "exported" : false
    }, {
      "name" : "unlock",
      "package" : 0,
      "type" : 33,
      "exported" : false
    }, {
      "name" : "racefingo",
      "package" : 0,
      "type" : 0,
      "exported" : false
    }, {
      "name" : "mallocgc",
      "package" : 0,
      "type" : 131,
      "exported" : false
    }, {
      "name" : "throw",
      "package" : 0,
      "type" : 134,
      "exported" : false
    }, {
      "name" : "assertE2I",
      "package" : 0,
      "type" : 162,
      "exported" : false
    }, {
      "name" : "reflectcall",
      "package" : 0,
      "type" : 165,
      "exported" : false
    }, {
      "name" : "Store",
      "package" : 3,
      "type" : 167,
      "exported" : true
    } ],
    "line-end" : 242,
    "line-start" : 161,
    "names" : [ "runfinq" ],
    "package" : 0,
    "packages" : [ {
      "name" : "runtime",
      "path" : "runtime"
    }, {
      "name" : "unsafe",
      "path" : "unsafe"
    }, {
      "name" : "sys",
      "path" : "runtime/internal/sys"
    }, {
      "name" : "atomic",
      "path" : "runtime/internal/atomic"
    } ],
    "params" : [ ],
    "receivers" : [ ],
    "results" : [ ],
    "type" : "function",
    "types" : [ {
      "name" : "func()",
      "params" : 1,
      "recv" : -1,
      "results" : 1,
      "type" : "Signature",
      "underlying" : 0,
      "variadic" : false
    }, {
      "fields" : [ ],
      "name" : "()",
      "type" : "Tuple",
      "underlying" : 1
    }, {
      "local-name" : "mutex",
      "name" : "runtime.mutex",
      "package" : 0,
      "type" : "Named",
      "underlying" : 3
    }, {
      "fields" : [ {
        "name" : "key",
        "type" : 4
      } ],
      "name" : "struct{key uintptr}",
      "type" : "Struct",
      "underlying" : 3
    }, {
      "name" : "uintptr",
      "type" : "Basic",
      "underlying" : 4
    }, {
      "name" : "uint32",
      "type" : "Basic",
      "underlying" : 5
    }, {
      "elem" : 7,
      "name" : "*runtime.finblock",
      "type" : "Pointer",
      "underlying" : 6
    }, {
      "local-name" : "finblock",
      "name" : "runtime.finblock",
      "package" : 0,
      "type" : "Named",
      "underlying" : 8
    }, {
      "fields" : [ {
        "name" : "alllink",
        "type" : 6
      }, {
        "name" : "next",
        "type" : 6
      }, {
        "name" : "cnt",
        "type" : 5
      }, {
        "name" : "_",
        "type" : 9
      }, {
        "name" : "fin",
        "type" : 10
      } ],
      "name" : "struct{alllink *runtime.finblock; next *runtime.finblock; cnt uint32; _ int32; fin [101]runtime.finalizer}",
      "type" : "Struct",
      "underlying" : 8
    }, {
      "name" : "int32",
      "type" : "Basic",
      "underlying" : 9
    }, {
      "elem" : 11,
      "name" : "[101]runtime.finalizer",
      "type" : "Array",
      "underlying" : 10
    }, {
      "local-name" : "finalizer",
      "name" : "runtime.finalizer",
      "package" : 0,
      "type" : "Named",
      "underlying" : 12
    }, {
      "fields" : [ {
        "name" : "fn",
        "type" : 13
      }, {
        "name" : "arg",
        "type" : 16
      }, {
        "name" : "nret",
        "type" : 4
      }, {
        "name" : "fint",
        "type" : 17
      }, {
        "name" : "ot",
        "type" : 30
      } ],
      "name" : "struct{fn *runtime.funcval; arg unsafe.Pointer; nret uintptr; fint *runtime._type; ot *runtime.ptrtype}",
      "type" : "Struct",
      "underlying" : 12
    }, {
      "elem" : 14,
      "name" : "*runtime.funcval",
      "type" : "Pointer",
      "underlying" : 13
    }, {
      "local-name" : "funcval",
      "name" : "runtime.funcval",
      "package" : 0,
      "type" : "Named",
      "underlying" : 15
    }, {
      "fields" : [ {
        "name" : "fn",
        "type" : 4
      } ],
      "name" : "struct{fn uintptr}",
      "type" : "Struct",
      "underlying" : 15
    }, {
      "local-name" : "Pointer",
      "name" : "unsafe.Pointer",
      "package" : 1,
      "type" : "Basic",
      "underlying" : 16
    }, {
      "elem" : 18,
      "name" : "*runtime._type",
      "type" : "Pointer",
      "underlying" : 17
    }, {
      "local-name" : "_type",
      "name" : "runtime._type",
      "package" : 0,
      "type" : "Named",
      "underlying" : 19
    }, {
      "fields" : [ {
        "name" : "size",
        "type" : 4
      }, {
        "name" : "ptrdata",
        "type" : 4
      }, {
        "name" : "hash",
        "type" : 5
      }, {
        "name" : "tflag",
        "type" : 20
      }, {
        "name" : "align",
        "type" : 21
      }, {
        "name" : "fieldAlign",
        "type" : 21
      }, {
        "name" : "kind",
        "type" : 21
      }, {
        "name" : "equal",
        "type" : 22
      }, {
        "name" : "gcdata",
        "type" : 26
      }, {
        "name" : "str",
        "type" : 28
      }, {
        "name" : "ptrToThis",
        "type" : 29
      } ],
      "name" : "struct{size uintptr; ptrdata uintptr; hash uint32; tflag runtime.tflag; align uint8; fieldAlign uint8; kind uint8; equal func(unsafe.Pointer, unsafe.Pointer) bool; gcdata *byte; str runtime.nameOff; ptrToThis runtime.typeOff}",
      "type" : "Struct",
      "underlying" : 19
    }, {
      "local-name" : "tflag",
      "name" : "runtime.tflag",
      "package" : 0,
      "type" : "Named",
      "underlying" : 21
    }, {
      "name" : "uint8",
      "type" : "Basic",
      "underlying" : 21
    }, {
      "name" : "func(unsafe.Pointer, unsafe.Pointer) bool",
      "params" : 23,
      "recv" : -1,
      "results" : 24,
      "type" : "Signature",
      "underlying" : 22,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 16
      }, {
        "name" : "",
        "type" : 16
      } ],
      "name" : "(unsafe.Pointer, unsafe.Pointer)",
      "type" : "Tuple",
      "underlying" : 23
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 25
      } ],
      "name" : "(bool)",
      "type" : "Tuple",
      "underlying" : 24
    }, {
      "name" : "bool",
      "type" : "Basic",
      "underlying" : 25
    }, {
      "elem" : 27,
      "name" : "*byte",
      "type" : "Pointer",
      "underlying" : 26
    }, {
      "name" : "byte",
      "type" : "Basic",
      "underlying" : 27
    }, {
      "local-name" : "nameOff",
      "name" : "runtime.nameOff",
      "package" : 0,
      "type" : "Named",
      "underlying" : 9
    }, {
      "local-name" : "typeOff",
      "name" : "runtime.typeOff",
      "package" : 0,
      "type" : "Named",
      "underlying" : 9
    }, {
      "elem" : 31,
      "name" : "*runtime.ptrtype",
      "type" : "Pointer",
      "underlying" : 30
    }, {
      "local-name" : "ptrtype",
      "name" : "runtime.ptrtype",
      "package" : 0,
      "type" : "Named",
      "underlying" : 32
    }, {
      "fields" : [ {
        "name" : "typ",
        "type" : 18
      }, {
        "name" : "elem",
        "type" : 17
      } ],
      "name" : "struct{typ runtime._type; elem *runtime._type}",
      "type" : "Struct",
      "underlying" : 32
    }, {
      "name" : "func(l *runtime.mutex)",
      "params" : 34,
      "recv" : -1,
      "results" : 1,
      "type" : "Signature",
      "underlying" : 33,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "l",
        "type" : 35
      } ],
      "name" : "(l *runtime.mutex)",
      "type" : "Tuple",
      "underlying" : 34
    }, {
      "elem" : 2,
      "name" : "*runtime.mutex",
      "type" : "Pointer",
      "underlying" : 35
    }, {
      "name" : "untyped nil",
      "type" : "Basic",
      "underlying" : 36
    }, {
      "name" : "untyped bool",
      "type" : "Basic",
      "underlying" : 37
    }, {
      "elem" : 39,
      "name" : "*runtime.g",
      "type" : "Pointer",
      "underlying" : 38
    }, {
      "local-name" : "g",
      "name" : "runtime.g",
      "package" : 0,
      "type" : "Named",
      "underlying" : 40
    }, {
      "fields" : [ {
        "name" : "stack",
        "type" : 41
      }, {
        "name" : "stackguard0",
        "type" : 4
      }, {
        "name" : "stackguard1",
        "type" : 4
      }, {
        "name" : "_panic",
        "type" : 43
      }, {
        "name" : "_defer",
        "type" : 47
      }, {
        "name" : "m",
        "type" : 50
      }, {
        "name" : "sched",
        "type" : 53
      }, {
        "name" : "syscallsp",
        "type" : 4
      }, {
        "name" : "syscallpc",
        "type" : 4
      }, {
        "name" : "stktopsp",
        "type" : 4
      }, {
        "name" : "param",
        "type" : 16
      }, {
        "name" : "atomicstatus",
        "type" : 5
      }, {
        "name" : "stackLock",
        "type" : 5
      }, {
        "name" : "goid",
        "type" : 64
      }, {
        "name" : "schedlink",
        "type" : 55
      }, {
        "name" : "waitsince",
        "type" : 64
      }, {
        "name" : "waitreason",
        "type" : 105
      }, {
        "name" : "preempt",
        "type" : 25
      }, {
        "name" : "preemptStop",
        "type" : 25
      }, {
        "name" : "preemptShrink",
        "type" : 25
      }, {
        "name" : "asyncSafePoint",
        "type" : 25
      }, {
        "name" : "paniconfault",
        "type" : 25
      }, {
        "name" : "gcscandone",
        "type" : 25
      }, {
        "name" : "throwsplit",
        "type" : 25
      }, {
        "name" : "activeStackChans",
        "type" : 25
      }, {
        "name" : "raceignore",
        "type" : 66
      }, {
        "name" : "sysblocktraced",
        "type" : 25
      }, {
        "name" : "sysexitticks",
        "type" : 64
      }, {
        "name" : "traceseq",
        "type" : 57
      }, {
        "name" : "tracelastp",
        "type" : 63
      }, {
        "name" : "lockedm",
        "type" : 71
      }, {
        "name" : "sig",
        "type" : 5
      }, {
        "name" : "writebuf",
        "type" : 106
      }, {
        "name" : "sigcode0",
        "type" : 4
      }, {
        "name" : "sigcode1",
        "type" : 4
      }, {
        "name" : "sigpc",
        "type" : 4
      }, {
        "name" : "gopc",
        "type" : 4
      }, {
        "name" : "ancestors",
        "type" : 107
      }, {
        "name" : "startpc",
        "type" : 4
      }, {
        "name" : "racectx",
        "type" : 4
      }, {
        "name" : "waiting",
        "type" : 112
      }, {
        "name" : "cgoCtxt",
        "type" : 111
      }, {
        "name" : "labels",
        "type" : 16
      }, {
        "name" : "timer",
        "type" : 121
      }, {
        "name" : "selectDone",
        "type" : 5
      }, {
        "name" : "gcAssistBytes",
        "type" : 64
      } ],
      "name" : "struct{stack runtime.stack; stackguard0 uintptr; stackguard1 uintptr; _panic *runtime._panic; _defer *runtime._defer; m *runtime.m; sched runtime.gobuf; syscallsp uintptr; syscallpc uintptr; stktopsp uintptr; param unsafe.Pointer; atomicstatus uint32; stackLock uint32; goid int64; schedlink runtime.guintptr; waitsince int64; waitreason runtime.waitReason; preempt bool; preemptStop bool; preemptShrink bool; asyncSafePoint bool; paniconfault bool; gcscandone bool; throwsplit bool; activeStackChans bool; raceignore int8; sysblocktraced bool; sysexitticks int64; traceseq uint64; tracelastp runtime.puintptr; lockedm runtime.muintptr; sig uint32; writebuf []byte; sigcode0 uintptr; sigcode1 uintptr; sigpc uintptr; gopc uintptr; ancestors *[]runtime.ancestorInfo; startpc uintptr; racectx uintptr; waiting *runtime.sudog; cgoCtxt []uintptr; labels unsafe.Pointer; timer *runtime.timer; selectDone uint32; gcAssistBytes int64}",
      "type" : "Struct",
      "underlying" : 40
    }, {
      "local-name" : "stack",
      "name" : "runtime.stack",
      "package" : 0,
      "type" : "Named",
      "underlying" : 42
    }, {
      "fields" : [ {
        "name" : "lo",
        "type" : 4
      }, {
        "name" : "hi",
        "type" : 4
      } ],
      "name" : "struct{lo uintptr; hi uintptr}",
      "type" : "Struct",
      "underlying" : 42
    }, {
      "elem" : 44,
      "name" : "*runtime._panic",
      "type" : "Pointer",
      "underlying" : 43
    }, {
      "local-name" : "_panic",
      "name" : "runtime._panic",
      "package" : 0,
      "type" : "Named",
      "underlying" : 45
    }, {
      "fields" : [ {
        "name" : "argp",
        "type" : 16
      }, {
        "name" : "arg",
        "type" : 46
      }, {
        "name" : "link",
        "type" : 43
      }, {
        "name" : "pc",
        "type" : 4
      }, {
        "name" : "sp",
        "type" : 16
      }, {
        "name" : "recovered",
        "type" : 25
      }, {
        "name" : "aborted",
        "type" : 25
      }, {
        "name" : "goexit",
        "type" : 25
      } ],
      "name" : "struct{argp unsafe.Pointer; arg interface{}; link *runtime._panic; pc uintptr; sp unsafe.Pointer; recovered bool; aborted bool; goexit bool}",
      "type" : "Struct",
      "underlying" : 45
    }, {
      "methods" : [ ],
      "name" : "interface{}",
      "type" : "Interface",
      "underlying" : 46
    }, {
      "elem" : 48,
      "name" : "*runtime._defer",
      "type" : "Pointer",
      "underlying" : 47
    }, {
      "local-name" : "_defer",
      "name" : "runtime._defer",
      "package" : 0,
      "type" : "Named",
      "underlying" : 49
    }, {
      "fields" : [ {
        "name" : "siz",
        "type" : 9
      }, {
        "name" : "started",
        "type" : 25
      }, {
        "name" : "heap",
        "type" : 25
      }, {
        "name" : "openDefer",
        "type" : 25
      }, {
        "name" : "sp",
        "type" : 4
      }, {
        "name" : "pc",
        "type" : 4
      }, {
        "name" : "fn",
        "type" : 13
      }, {
        "name" : "_panic",
        "type" : 43
      }, {
        "name" : "link",
        "type" : 47
      }, {
        "name" : "fd",
        "type" : 16
      }, {
        "name" : "varp",
        "type" : 4
      }, {
        "name" : "framepc",
        "type" : 4
      } ],
      "name" : "struct{siz int32; started bool; heap bool; openDefer bool; sp uintptr; pc uintptr; fn *runtime.funcval; _panic *runtime._panic; link *runtime._defer; fd unsafe.Pointer; varp uintptr; framepc uintptr}",
      "type" : "Struct",
      "underlying" : 49
    }, {
      "elem" : 51,
      "name" : "*runtime.m",
      "type" : "Pointer",
      "underlying" : 50
    }, {
      "local-name" : "m",
      "name" : "runtime.m",
      "package" : 0,
      "type" : "Named",
      "underlying" : 52
    }, {
      "fields" : [ {
        "name" : "g0",
        "type" : 38
      }, {
        "name" : "morebuf",
        "type" : 53
      }, {
        "name" : "divmod",
        "type" : 5
      }, {
        "name" : "procid",
        "type" : 57
      }, {
        "name" : "gsignal",
        "type" : 38
      }, {
        "name" : "goSigStack",
        "type" : 58
      }, {
        "name" : "sigmask",
        "type" : 60
      }, {
        "name" : "tls",
        "type" : 62
      }, {
        "name" : "mstartfn",
        "type" : 0
      }, {
        "name" : "curg",
        "type" : 38
      }, {
        "name" : "caughtsig",
        "type" : 55
      }, {
        "name" : "p",
        "type" : 63
      }, {
        "name" : "nextp",
        "type" : 63
      }, {
        "name" : "oldp",
        "type" : 63
      }, {
        "name" : "id",
        "type" : 64
      }, {
        "name" : "mallocing",
        "type" : 9
      }, {
        "name" : "throwing",
        "type" : 9
      }, {
        "name" : "preemptoff",
        "type" : 65
      }, {
        "name" : "locks",
        "type" : 9
      }, {
        "name" : "dying",
        "type" : 9
      }, {
        "name" : "profilehz",
        "type" : 9
      }, {
        "name" : "spinning",
        "type" : 25
      }, {
        "name" : "blocked",
        "type" : 25
      }, {
        "name" : "newSigstack",
        "type" : 25
      }, {
        "name" : "printlock",
        "type" : 66
      }, {
        "name" : "incgo",
        "type" : 25
      }, {
        "name" : "freeWait",
        "type" : 5
      }, {
        "name" : "fastrand",
        "type" : 61
      }, {
        "name" : "needextram",
        "type" : 25
      }, {
        "name" : "traceback",
        "type" : 21
      }, {
        "name" : "ncgocall",
        "type" : 57
      }, {
        "name" : "ncgo",
        "type" : 9
      }, {
        "name" : "cgoCallersUse",
        "type" : 5
      }, {
        "name" : "cgoCallers",
        "type" : 67
      }, {
        "name" : "park",
        "type" : 70
      }, {
        "name" : "alllink",
        "type" : 50
      }, {
        "name" : "schedlink",
        "type" : 71
      }, {
        "name" : "mcache",
        "type" : 72
      }, {
        "name" : "lockedg",
        "type" : 55
      }, {
        "name" : "createstack",
        "type" : 69
      }, {
        "name" : "lockedExt",
        "type" : 5
      }, {
        "name" : "lockedInt",
        "type" : 5
      }, {
        "name" : "nextwaitm",
        "type" : 71
      }, {
        "name" : "waitunlockf",
        "type" : 97
      }, {
        "name" : "waitlock",
        "type" : 16
      }, {
        "name" : "waittraceev",
        "type" : 27
      }, {
        "name" : "waittraceskip",
        "type" : 99
      }, {
        "name" : "startingtrace",
        "type" : 25
      }, {
        "name" : "syscalltick",
        "type" : 5
      }, {
        "name" : "freelink",
        "type" : 50
      }, {
        "name" : "libcall",
        "type" : 100
      }, {
        "name" : "libcallpc",
        "type" : 4
      }, {
        "name" : "libcallsp",
        "type" : 4
      }, {
        "name" : "libcallg",
        "type" : 55
      }, {
        "name" : "syscall",
        "type" : 100
      }, {
        "name" : "vdsoSP",
        "type" : 4
      }, {
        "name" : "vdsoPC",
        "type" : 4
      }, {
        "name" : "preemptGen",
        "type" : 5
      }, {
        "name" : "signalPending",
        "type" : 5
      }, {
        "name" : "dlogPerM",
        "type" : 102
      }, {
        "name" : "mOS",
        "type" : 104
      } ],
      "name" : "struct{g0 *runtime.g; morebuf runtime.gobuf; divmod uint32; procid uint64; gsignal *runtime.g; goSigStack runtime.gsignalStack; sigmask runtime.sigset; tls [6]uintptr; mstartfn func(); curg *runtime.g; caughtsig runtime.guintptr; p runtime.puintptr; nextp runtime.puintptr; oldp runtime.puintptr; id int64; mallocing int32; throwing int32; preemptoff string; locks int32; dying int32; profilehz int32; spinning bool; blocked bool; newSigstack bool; printlock int8; incgo bool; freeWait uint32; fastrand [2]uint32; needextram bool; traceback uint8; ncgocall uint64; ncgo int32; cgoCallersUse uint32; cgoCallers *runtime.cgoCallers; park runtime.note; alllink *runtime.m; schedlink runtime.muintptr; mcache *runtime.mcache; lockedg runtime.guintptr; createstack [32]uintptr; lockedExt uint32; lockedInt uint32; nextwaitm runtime.muintptr; waitunlockf func(*runtime.g, unsafe.Pointer) bool; waitlock unsafe.Pointer; waittraceev byte; waittraceskip int; startingtrace bool; syscalltick uint32; freelink *runtime.m; libcall runtime.libcall; libcallpc uintptr; libcallsp uintptr; libcallg runtime.guintptr; syscall runtime.libcall; vdsoSP uintptr; vdsoPC uintptr; preemptGen uint32; signalPending uint32; runtime.dlogPerM; runtime.mOS}",
      "type" : "Struct",
      "underlying" : 52
    }, {
      "local-name" : "gobuf",
      "name" : "runtime.gobuf",
      "package" : 0,
      "type" : "Named",
      "underlying" : 54
    }, {
      "fields" : [ {
        "name" : "sp",
        "type" : 4
      }, {
        "name" : "pc",
        "type" : 4
      }, {
        "name" : "g",
        "type" : 55
      }, {
        "name" : "ctxt",
        "type" : 16
      }, {
        "name" : "ret",
        "type" : 56
      }, {
        "name" : "lr",
        "type" : 4
      }, {
        "name" : "bp",
        "type" : 4
      } ],
      "name" : "struct{sp uintptr; pc uintptr; g runtime.guintptr; ctxt unsafe.Pointer; ret runtime/internal/sys.Uintreg; lr uintptr; bp uintptr}",
      "type" : "Struct",
      "underlying" : 54
    }, {
      "local-name" : "guintptr",
      "name" : "runtime.guintptr",
      "package" : 0,
      "type" : "Named",
      "underlying" : 4
    }, {
      "local-name" : "Uintreg",
      "name" : "runtime/internal/sys.Uintreg",
      "package" : 2,
      "type" : "Named",
      "underlying" : 57
    }, {
      "name" : "uint64",
      "type" : "Basic",
      "underlying" : 57
    }, {
      "local-name" : "gsignalStack",
      "name" : "runtime.gsignalStack",
      "package" : 0,
      "type" : "Named",
      "underlying" : 59
    }, {
      "fields" : [ {
        "name" : "stack",
        "type" : 41
      }, {
        "name" : "stackguard0",
        "type" : 4
      }, {
        "name" : "stackguard1",
        "type" : 4
      }, {
        "name" : "stktopsp",
        "type" : 4
      } ],
      "name" : "struct{stack runtime.stack; stackguard0 uintptr; stackguard1 uintptr; stktopsp uintptr}",
      "type" : "Struct",
      "underlying" : 59
    }, {
      "local-name" : "sigset",
      "name" : "runtime.sigset",
      "package" : 0,
      "type" : "Named",
      "underlying" : 61
    }, {
      "elem" : 5,
      "name" : "[2]uint32",
      "type" : "Array",
      "underlying" : 61
    }, {
      "elem" : 4,
      "name" : "[6]uintptr",
      "type" : "Array",
      "underlying" : 62
    }, {
      "local-name" : "puintptr",
      "name" : "runtime.puintptr",
      "package" : 0,
      "type" : "Named",
      "underlying" : 4
    }, {
      "name" : "int64",
      "type" : "Basic",
      "underlying" : 64
    }, {
      "name" : "string",
      "type" : "Basic",
      "underlying" : 65
    }, {
      "name" : "int8",
      "type" : "Basic",
      "underlying" : 66
    }, {
      "elem" : 68,
      "name" : "*runtime.cgoCallers",
      "type" : "Pointer",
      "underlying" : 67
    }, {
      "local-name" : "cgoCallers",
      "name" : "runtime.cgoCallers",
      "package" : 0,
      "type" : "Named",
      "underlying" : 69
    }, {
      "elem" : 4,
      "name" : "[32]uintptr",
      "type" : "Array",
      "underlying" : 69
    }, {
      "local-name" : "note",
      "name" : "runtime.note",
      "package" : 0,
      "type" : "Named",
      "underlying" : 3
    }, {
      "local-name" : "muintptr",
      "name" : "runtime.muintptr",
      "package" : 0,
      "type" : "Named",
      "underlying" : 4
    }, {
      "elem" : 73,
      "name" : "*runtime.mcache",
      "type" : "Pointer",
      "underlying" : 72
    }, {
      "local-name" : "mcache",
      "name" : "runtime.mcache",
      "package" : 0,
      "type" : "Named",
      "underlying" : 74
    }, {
      "fields" : [ {
        "name" : "next_sample",
        "type" : 4
      }, {
        "name" : "local_scan",
        "type" : 4
      }, {
        "name" : "tiny",
        "type" : 4
      }, {
        "name" : "tinyoffset",
        "type" : 4
      }, {
        "name" : "local_tinyallocs",
        "type" : 4
      }, {
        "name" : "alloc",
        "type" : 75
      }, {
        "name" : "stackcache",
        "type" : 93
      }, {
        "name" : "local_largefree",
        "type" : 4
      }, {
        "name" : "local_nlargefree",
        "type" : 4
      }, {
        "name" : "local_nsmallfree",
        "type" : 96
      }, {
        "name" : "flushGen",
        "type" : 5
      } ],
      "name" : "struct{next_sample uintptr; local_scan uintptr; tiny uintptr; tinyoffset uintptr; local_tinyallocs uintptr; alloc [134]*runtime.mspan; stackcache [4]runtime.stackfreelist; local_largefree uintptr; local_nlargefree uintptr; local_nsmallfree [67]uintptr; flushGen uint32}",
      "type" : "Struct",
      "underlying" : 74
    }, {
      "elem" : 76,
      "name" : "[134]*runtime.mspan",
      "type" : "Array",
      "underlying" : 75
    }, {
      "elem" : 77,
      "name" : "*runtime.mspan",
      "type" : "Pointer",
      "underlying" : 76
    }, {
      "local-name" : "mspan",
      "name" : "runtime.mspan",
      "package" : 0,
      "type" : "Named",
      "underlying" : 78
    }, {
      "fields" : [ {
        "name" : "next",
        "type" : 76
      }, {
        "name" : "prev",
        "type" : 76
      }, {
        "name" : "list",
        "type" : 79
      }, {
        "name" : "startAddr",
        "type" : 4
      }, {
        "name" : "npages",
        "type" : 4
      }, {
        "name" : "manualFreeList",
        "type" : 82
      }, {
        "name" : "freeindex",
        "type" : 4
      }, {
        "name" : "nelems",
        "type" : 4
      }, {
        "name" : "allocCache",
        "type" : 57
      }, {
        "name" : "allocBits",
        "type" : 83
      }, {
        "name" : "gcmarkBits",
        "type" : 83
      }, {
        "name" : "sweepgen",
        "type" : 5
      }, {
        "name" : "divMul",
        "type" : 85
      }, {
        "name" : "baseMask",
        "type" : 85
      }, {
        "name" : "allocCount",
        "type" : 85
      }, {
        "name" : "spanclass",
        "type" : 86
      }, {
        "name" : "state",
        "type" : 87
      }, {
        "name" : "needzero",
        "type" : 21
      }, {
        "name" : "divShift",
        "type" : 21
      }, {
        "name" : "divShift2",
        "type" : 21
      }, {
        "name" : "elemsize",
        "type" : 4
      }, {
        "name" : "limit",
        "type" : 4
      }, {
        "name" : "speciallock",
        "type" : 2
      }, {
        "name" : "specials",
        "type" : 90
      } ],
      "name" : "struct{next *runtime.mspan; prev *runtime.mspan; list *runtime.mSpanList; startAddr uintptr; npages uintptr; manualFreeList runtime.gclinkptr; freeindex uintptr; nelems uintptr; allocCache uint64; allocBits *runtime.gcBits; gcmarkBits *runtime.gcBits; sweepgen uint32; divMul uint16; baseMask uint16; allocCount uint16; spanclass runtime.spanClass; state runtime.mSpanStateBox; needzero uint8; divShift uint8; divShift2 uint8; elemsize uintptr; limit uintptr; speciallock runtime.mutex; specials *runtime.special}",
      "type" : "Struct",
      "underlying" : 78
    }, {
      "elem" : 80,
      "name" : "*runtime.mSpanList",
      "type" : "Pointer",
      "underlying" : 79
    }, {
      "local-name" : "mSpanList",
      "name" : "runtime.mSpanList",
      "package" : 0,
      "type" : "Named",
      "underlying" : 81
    }, {
      "fields" : [ {
        "name" : "first",
        "type" : 76
      }, {
        "name" : "last",
        "type" : 76
      } ],
      "name" : "struct{first *runtime.mspan; last *runtime.mspan}",
      "type" : "Struct",
      "underlying" : 81
    }, {
      "local-name" : "gclinkptr",
      "name" : "runtime.gclinkptr",
      "package" : 0,
      "type" : "Named",
      "underlying" : 4
    }, {
      "elem" : 84,
      "name" : "*runtime.gcBits",
      "type" : "Pointer",
      "underlying" : 83
    }, {
      "local-name" : "gcBits",
      "name" : "runtime.gcBits",
      "package" : 0,
      "type" : "Named",
      "underlying" : 21
    }, {
      "name" : "uint16",
      "type" : "Basic",
      "underlying" : 85
    }, {
      "local-name" : "spanClass",
      "name" : "runtime.spanClass",
      "package" : 0,
      "type" : "Named",
      "underlying" : 21
    }, {
      "local-name" : "mSpanStateBox",
      "name" : "runtime.mSpanStateBox",
      "package" : 0,
      "type" : "Named",
      "underlying" : 88
    }, {
      "fields" : [ {
        "name" : "s",
        "type" : 89
      } ],
      "name" : "struct{s runtime.mSpanState}",
      "type" : "Struct",
      "underlying" : 88
    }, {
      "local-name" : "mSpanState",
      "name" : "runtime.mSpanState",
      "package" : 0,
      "type" : "Named",
      "underlying" : 21
    }, {
      "elem" : 91,
      "name" : "*runtime.special",
      "type" : "Pointer",
      "underlying" : 90
    }, {
      "local-name" : "special",
      "name" : "runtime.special",
      "package" : 0,
      "type" : "Named",
      "underlying" : 92
    }, {
      "fields" : [ {
        "name" : "next",
        "type" : 90
      }, {
        "name" : "offset",
        "type" : 85
      }, {
        "name" : "kind",
        "type" : 27
      } ],
      "name" : "struct{next *runtime.special; offset uint16; kind byte}",
      "type" : "Struct",
      "underlying" : 92
    }, {
      "elem" : 94,
      "name" : "[4]runtime.stackfreelist",
      "type" : "Array",
      "underlying" : 93
    }, {
      "local-name" : "stackfreelist",
      "name" : "runtime.stackfreelist",
      "package" : 0,
      "type" : "Named",
      "underlying" : 95
    }, {
      "fields" : [ {
        "name" : "list",
        "type" : 82
      }, {
        "name" : "size",
        "type" : 4
      } ],
      "name" : "struct{list runtime.gclinkptr; size uintptr}",
      "type" : "Struct",
      "underlying" : 95
    }, {
      "elem" : 4,
      "name" : "[67]uintptr",
      "type" : "Array",
      "underlying" : 96
    }, {
      "name" : "func(*runtime.g, unsafe.Pointer) bool",
      "params" : 98,
      "recv" : -1,
      "results" : 24,
      "type" : "Signature",
      "underlying" : 97,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 38
      }, {
        "name" : "",
        "type" : 16
      } ],
      "name" : "(*runtime.g, unsafe.Pointer)",
      "type" : "Tuple",
      "underlying" : 98
    }, {
      "name" : "int",
      "type" : "Basic",
      "underlying" : 99
    }, {
      "local-name" : "libcall",
      "name" : "runtime.libcall",
      "package" : 0,
      "type" : "Named",
      "underlying" : 101
    }, {
      "fields" : [ {
        "name" : "fn",
        "type" : 4
      }, {
        "name" : "n",
        "type" : 4
      }, {
        "name" : "args",
        "type" : 4
      }, {
        "name" : "r1",
        "type" : 4
      }, {
        "name" : "r2",
        "type" : 4
      }, {
        "name" : "err",
        "type" : 4
      } ],
      "name" : "struct{fn uintptr; n uintptr; args uintptr; r1 uintptr; r2 uintptr; err uintptr}",
      "type" : "Struct",
      "underlying" : 101
    }, {
      "local-name" : "dlogPerM",
      "name" : "runtime.dlogPerM",
      "package" : 0,
      "type" : "Named",
      "underlying" : 103
    }, {
      "fields" : [ ],
      "name" : "struct{}",
      "type" : "Struct",
      "underlying" : 103
    }, {
      "local-name" : "mOS",
      "name" : "runtime.mOS",
      "package" : 0,
      "type" : "Named",
      "underlying" : 103
    }, {
      "local-name" : "waitReason",
      "name" : "runtime.waitReason",
      "package" : 0,
      "type" : "Named",
      "underlying" : 21
    }, {
      "elem" : 27,
      "name" : "[]byte",
      "type" : "Slice",
      "underlying" : 106
    }, {
      "elem" : 108,
      "name" : "*[]runtime.ancestorInfo",
      "type" : "Pointer",
      "underlying" : 107
    }, {
      "elem" : 109,
      "name" : "[]runtime.ancestorInfo",
      "type" : "Slice",
      "underlying" : 108
    }, {
      "local-name" : "ancestorInfo",
      "name" : "runtime.ancestorInfo",
      "package" : 0,
      "type" : "Named",
      "underlying" : 110
    }, {
      "fields" : [ {
        "name" : "pcs",
        "type" : 111
      }, {
        "name" : "goid",
        "type" : 64
      }, {
        "name" : "gopc",
        "type" : 4
      } ],
      "name" : "struct{pcs []uintptr; goid int64; gopc uintptr}",
      "type" : "Struct",
      "underlying" : 110
    }, {
      "elem" : 4,
      "name" : "[]uintptr",
      "type" : "Slice",
      "underlying" : 111
    }, {
      "elem" : 113,
      "name" : "*runtime.sudog",
      "type" : "Pointer",
      "underlying" : 112
    }, {
      "local-name" : "sudog",
      "name" : "runtime.sudog",
      "package" : 0,
      "type" : "Named",
      "underlying" : 114
    }, {
      "fields" : [ {
        "name" : "g",
        "type" : 38
      }, {
        "name" : "isSelect",
        "type" : 25
      }, {
        "name" : "next",
        "type" : 112
      }, {
        "name" : "prev",
        "type" : 112
      }, {
        "name" : "elem",
        "type" : 16
      }, {
        "name" : "acquiretime",
        "type" : 64
      }, {
        "name" : "releasetime",
        "type" : 64
      }, {
        "name" : "ticket",
        "type" : 5
      }, {
        "name" : "parent",
        "type" : 112
      }, {
        "name" : "waitlink",
        "type" : 112
      }, {
        "name" : "waittail",
        "type" : 112
      }, {
        "name" : "c",
        "type" : 115
      } ],
      "name" : "struct{g *runtime.g; isSelect bool; next *runtime.sudog; prev *runtime.sudog; elem unsafe.Pointer; acquiretime int64; releasetime int64; ticket uint32; parent *runtime.sudog; waitlink *runtime.sudog; waittail *runtime.sudog; c *runtime.hchan}",
      "type" : "Struct",
      "underlying" : 114
    }, {
      "elem" : 116,
      "name" : "*runtime.hchan",
      "type" : "Pointer",
      "underlying" : 115
    }, {
      "local-name" : "hchan",
      "name" : "runtime.hchan",
      "package" : 0,
      "type" : "Named",
      "underlying" : 117
    }, {
      "fields" : [ {
        "name" : "qcount",
        "type" : 118
      }, {
        "name" : "dataqsiz",
        "type" : 118
      }, {
        "name" : "buf",
        "type" : 16
      }, {
        "name" : "elemsize",
        "type" : 85
      }, {
        "name" : "closed",
        "type" : 5
      }, {
        "name" : "elemtype",
        "type" : 17
      }, {
        "name" : "sendx",
        "type" : 118
      }, {
        "name" : "recvx",
        "type" : 118
      }, {
        "name" : "recvq",
        "type" : 119
      }, {
        "name" : "sendq",
        "type" : 119
      }, {
        "name" : "lock",
        "type" : 2
      } ],
      "name" : "struct{qcount uint; dataqsiz uint; buf unsafe.Pointer; elemsize uint16; closed uint32; elemtype *runtime._type; sendx uint; recvx uint; recvq runtime.waitq; sendq runtime.waitq; lock runtime.mutex}",
      "type" : "Struct",
      "underlying" : 117
    }, {
      "name" : "uint",
      "type" : "Basic",
      "underlying" : 118
    }, {
      "local-name" : "waitq",
      "name" : "runtime.waitq",
      "package" : 0,
      "type" : "Named",
      "underlying" : 120
    }, {
      "fields" : [ {
        "name" : "first",
        "type" : 112
      }, {
        "name" : "last",
        "type" : 112
      } ],
      "name" : "struct{first *runtime.sudog; last *runtime.sudog}",
      "type" : "Struct",
      "underlying" : 120
    }, {
      "elem" : 122,
      "name" : "*runtime.timer",
      "type" : "Pointer",
      "underlying" : 121
    }, {
      "local-name" : "timer",
      "name" : "runtime.timer",
      "package" : 0,
      "type" : "Named",
      "underlying" : 123
    }, {
      "fields" : [ {
        "name" : "pp",
        "type" : 63
      }, {
        "name" : "when",
        "type" : 64
      }, {
        "name" : "period",
        "type" : 64
      }, {
        "name" : "f",
        "type" : 124
      }, {
        "name" : "arg",
        "type" : 46
      }, {
        "name" : "seq",
        "type" : 4
      }, {
        "name" : "nextwhen",
        "type" : 64
      }, {
        "name" : "status",
        "type" : 5
      } ],
      "name" : "struct{pp runtime.puintptr; when int64; period int64; f func(interface{}, uintptr); arg interface{}; seq uintptr; nextwhen int64; status uint32}",
      "type" : "Struct",
      "underlying" : 123
    }, {
      "name" : "func(interface{}, uintptr)",
      "params" : 125,
      "recv" : -1,
      "results" : 1,
      "type" : "Signature",
      "underlying" : 124,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 46
      }, {
        "name" : "",
        "type" : 4
      } ],
      "name" : "(interface{}, uintptr)",
      "type" : "Tuple",
      "underlying" : 125
    }, {
      "name" : "func() *runtime.g",
      "params" : 1,
      "recv" : -1,
      "results" : 127,
      "type" : "Signature",
      "underlying" : 126,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 38
      } ],
      "name" : "(*runtime.g)",
      "type" : "Tuple",
      "underlying" : 127
    }, {
      "name" : "func(lock *runtime.mutex, reason runtime.waitReason, traceEv byte, traceskip int)",
      "params" : 129,
      "recv" : -1,
      "results" : 1,
      "type" : "Signature",
      "underlying" : 128,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "lock",
        "type" : 35
      }, {
        "name" : "reason",
        "type" : 105
      }, {
        "name" : "traceEv",
        "type" : 27
      }, {
        "name" : "traceskip",
        "type" : 99
      } ],
      "name" : "(lock *runtime.mutex, reason runtime.waitReason, traceEv byte, traceskip int)",
      "type" : "Tuple",
      "underlying" : 129
    }, {
      "elem" : 11,
      "name" : "*runtime.finalizer",
      "type" : "Pointer",
      "underlying" : 130
    }, {
      "name" : "func(size uintptr, typ *runtime._type, needzero bool) unsafe.Pointer",
      "params" : 132,
      "recv" : -1,
      "results" : 133,
      "type" : "Signature",
      "underlying" : 131,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "size",
        "type" : 4
      }, {
        "name" : "typ",
        "type" : 17
      }, {
        "name" : "needzero",
        "type" : 25
      } ],
      "name" : "(size uintptr, typ *runtime._type, needzero bool)",
      "type" : "Tuple",
      "underlying" : 132
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 16
      } ],
      "name" : "(unsafe.Pointer)",
      "type" : "Tuple",
      "underlying" : 133
    }, {
      "name" : "func(s string)",
      "params" : 135,
      "recv" : -1,
      "results" : 1,
      "type" : "Signature",
      "underlying" : 134,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "s",
        "type" : 65
      } ],
      "name" : "(s string)",
      "type" : "Tuple",
      "underlying" : 135
    }, {
      "elem" : 4,
      "name" : "[2]uintptr",
      "type" : "Array",
      "underlying" : 136
    }, {
      "elem" : 136,
      "name" : "*[2]uintptr",
      "type" : "Pointer",
      "underlying" : 137
    }, {
      "name" : "untyped int",
      "type" : "Basic",
      "underlying" : 138
    }, {
      "elem" : 16,
      "name" : "*unsafe.Pointer",
      "type" : "Pointer",
      "underlying" : 139
    }, {
      "elem" : 141,
      "name" : "*runtime.interfacetype",
      "type" : "Pointer",
      "underlying" : 140
    }, {
      "local-name" : "interfacetype",
      "name" : "runtime.interfacetype",
      "package" : 0,
      "type" : "Named",
      "underlying" : 142
    }, {
      "fields" : [ {
        "name" : "typ",
        "type" : 18
      }, {
        "name" : "pkgpath",
        "type" : 143
      }, {
        "name" : "mhdr",
        "type" : 145
      } ],
      "name" : "struct{typ runtime._type; pkgpath runtime.name; mhdr []runtime.imethod}",
      "type" : "Struct",
      "underlying" : 142
    }, {
      "local-name" : "name",
      "name" : "runtime.name",
      "package" : 0,
      "type" : "Named",
      "underlying" : 144
    }, {
      "fields" : [ {
        "name" : "bytes",
        "type" : 26
      } ],
      "name" : "struct{bytes *byte}",
      "type" : "Struct",
      "underlying" : 144
    }, {
      "elem" : 146,
      "name" : "[]runtime.imethod",
      "type" : "Slice",
      "underlying" : 145
    }, {
      "local-name" : "imethod",
      "name" : "runtime.imethod",
      "package" : 0,
      "type" : "Named",
      "underlying" : 147
    }, {
      "fields" : [ {
        "name" : "name",
        "type" : 28
      }, {
        "name" : "ityp",
        "type" : 29
      } ],
      "name" : "struct{name runtime.nameOff; ityp runtime.typeOff}",
      "type" : "Struct",
      "underlying" : 147
    }, {
      "elem" : 149,
      "name" : "*runtime.eface",
      "type" : "Pointer",
      "underlying" : 148
    }, {
      "local-name" : "eface",
      "name" : "runtime.eface",
      "package" : 0,
      "type" : "Named",
      "underlying" : 150
    }, {
      "fields" : [ {
        "name" : "_type",
        "type" : 17
      }, {
        "name" : "data",
        "type" : 16
      } ],
      "name" : "struct{_type *runtime._type; data unsafe.Pointer}",
      "type" : "Struct",
      "underlying" : 150
    }, {
      "name" : "func([]runtime.imethod) int",
      "params" : 152,
      "recv" : -1,
      "results" : 153,
      "type" : "Signature",
      "underlying" : 151,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 145
      } ],
      "name" : "([]runtime.imethod)",
      "type" : "Tuple",
      "underlying" : 152
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 99
      } ],
      "name" : "(int)",
      "type" : "Tuple",
      "underlying" : 153
    }, {
      "local-name" : "iface",
      "name" : "runtime.iface",
      "package" : 0,
      "type" : "Named",
      "underlying" : 155
    }, {
      "fields" : [ {
        "name" : "tab",
        "type" : 156
      }, {
        "name" : "data",
        "type" : 16
      } ],
      "name" : "struct{tab *runtime.itab; data unsafe.Pointer}",
      "type" : "Struct",
      "underlying" : 155
    }, {
      "elem" : 157,
      "name" : "*runtime.itab",
      "type" : "Pointer",
      "underlying" : 156
    }, {
      "local-name" : "itab",
      "name" : "runtime.itab",
      "package" : 0,
      "type" : "Named",
      "underlying" : 158
    }, {
      "fields" : [ {
        "name" : "inter",
        "type" : 140
      }, {
        "name" : "_type",
        "type" : 17
      }, {
        "name" : "hash",
        "type" : 5
      }, {
        "name" : "_",
        "type" : 159
      }, {
        "name" : "fun",
        "type" : 160
      } ],
      "name" : "struct{inter *runtime.interfacetype; _type *runtime._type; hash uint32; _ [4]byte; fun [1]uintptr}",
      "type" : "Struct",
      "underlying" : 158
    }, {
      "elem" : 27,
      "name" : "[4]byte",
      "type" : "Array",
      "underlying" : 159
    }, {
      "elem" : 4,
      "name" : "[1]uintptr",
      "type" : "Array",
      "underlying" : 160
    }, {
      "elem" : 154,
      "name" : "*runtime.iface",
      "type" : "Pointer",
      "underlying" : 161
    }, {
      "name" : "func(inter *runtime.interfacetype, e runtime.eface) (r runtime.iface)",
      "params" : 163,
      "recv" : -1,
      "results" : 164,
      "type" : "Signature",
      "underlying" : 162,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "inter",
        "type" : 140
      }, {
        "name" : "e",
        "type" : 149
      } ],
      "name" : "(inter *runtime.interfacetype, e runtime.eface)",
      "type" : "Tuple",
      "underlying" : 163
    }, {
      "fields" : [ {
        "name" : "r",
        "type" : 154
      } ],
      "name" : "(r runtime.iface)",
      "type" : "Tuple",
      "underlying" : 164
    }, {
      "name" : "func(argtype *runtime._type, fn unsafe.Pointer, arg unsafe.Pointer, argsize uint32, retoffset uint32)",
      "params" : 166,
      "recv" : -1,
      "results" : 1,
      "type" : "Signature",
      "underlying" : 165,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "argtype",
        "type" : 17
      }, {
        "name" : "fn",
        "type" : 16
      }, {
        "name" : "arg",
        "type" : 16
      }, {
        "name" : "argsize",
        "type" : 5
      }, {
        "name" : "retoffset",
        "type" : 5
      } ],
      "name" : "(argtype *runtime._type, fn unsafe.Pointer, arg unsafe.Pointer, argsize uint32, retoffset uint32)",
      "type" : "Tuple",
      "underlying" : 166
    }, {
      "name" : "func(ptr *uint32, val uint32)",
      "params" : 168,
      "recv" : -1,
      "results" : 1,
      "type" : "Signature",
      "underlying" : 167,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "ptr",
        "type" : 169
      }, {
        "name" : "val",
        "type" : 5
      } ],
      "name" : "(ptr *uint32, val uint32)",
      "type" : "Tuple",
      "underlying" : 168
    }, {
      "elem" : 5,
      "name" : "*uint32",
      "type" : "Pointer",
      "underlying" : 169
    } ],
    "variables" : [ {
      "name" : "finlock",
      "package" : 0,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "i",
      "package" : 0,
      "type" : 5,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "finq",
      "package" : 0,
      "type" : 6,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "finc",
      "package" : 0,
      "type" : 6,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "frame",
      "package" : 0,
      "type" : 16,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "framecap",
      "package" : 0,
      "type" : 4,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "fb",
      "package" : 0,
      "type" : 6,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "fing",
      "package" : 0,
      "type" : 38,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "gp",
      "package" : 0,
      "type" : 38,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "fingwait",
      "package" : 0,
      "type" : 25,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "cnt",
      "package" : 0,
      "type" : 5,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "fin",
      "package" : 0,
      "type" : 10,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "f",
      "package" : 0,
      "type" : 130,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "nret",
      "package" : 0,
      "type" : 4,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "framesz",
      "package" : 0,
      "type" : 4,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "fint",
      "package" : 0,
      "type" : 17,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "kind",
      "package" : 0,
      "type" : 21,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "arg",
      "package" : 0,
      "type" : 16,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "_type",
      "package" : 0,
      "type" : 17,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "ot",
      "package" : 0,
      "type" : 30,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "typ",
      "package" : 0,
      "type" : 18,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "data",
      "package" : 0,
      "type" : 16,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "ityp",
      "package" : 0,
      "type" : 140,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "mhdr",
      "package" : 0,
      "type" : 145,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "fingRunning",
      "package" : 0,
      "type" : 25,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "fn",
      "package" : 0,
      "type" : 13,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "next",
      "package" : 0,
      "type" : 6,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "next",
      "package" : 0,
      "type" : 6,
      "exported" : false,
      "embedded" : false,
      "field" : false
    } ]
  },
  "go-version" : "1.14.3"
}