{
  "usage" : {
    "file" : "type.go",
    "label1" : "cast-struct",
    "label2" : "types",
    "line" : "68",
    "module" : "std",
    "pkg" : "runtime",
    "project" : "kubernetes/kubernetes",
    "snippet" : "return &(*u)(unsafe.Pointer(t)).u",
    "version" : "std"
  },
  "cfg" : {
    "blocks" : [ {
      "update-vars" : [ ],
      "successors" : [ 2 ],
      "in-vars" : [ 0 ],
      "exit" : false,
      "out-vars" : [ 0 ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[entry]",
      "entry" : true,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ ],
      "in-vars" : [ ],
      "exit" : true,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[exit]",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 3, 4 ],
      "in-vars" : [ 0 ],
      "exit" : false,
      "out-vars" : [ 0 ],
      "decl-vars" : [ ],
      "line-start" : 59,
      "ast" : {
        "condition" : {
          "go-type" : 24,
          "kind" : "expression",
          "left" : {
            "go-type" : 14,
            "kind" : "expression",
            "left" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "tflag",
                "variable" : 2
              },
              "go-type" : 14,
              "kind" : "expression",
              "target" : {
                "go-type" : 10,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "t",
                  "variable" : 0
                }
              },
              "type" : "selector"
            },
            "operator" : "&",
            "right" : {
              "go-type" : 14,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "1"
              }
            },
            "type" : "binary"
          },
          "operator" : "==",
          "right" : {
            "go-type" : 14,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 61,
      "code" : "if t.tflag&tflagUncommon == 0 {\n\treturn nil\n}",
      "entry" : false,
      "use-vars" : [ 0 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 60,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 25,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Nil",
            "kind" : "ident",
            "value" : "nil"
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 60,
      "code" : "return nil",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 5, 8, 11, 14, 17, 20, 23, 26, 29 ],
      "in-vars" : [ 0 ],
      "exit" : false,
      "out-vars" : [ 0 ],
      "decl-vars" : [ ],
      "line-start" : 62,
      "ast" : {
        "condition" : {
          "go-type" : 15,
          "kind" : "expression",
          "left" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "kind",
              "variable" : 3
            },
            "go-type" : 15,
            "kind" : "expression",
            "target" : {
              "go-type" : 10,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "t",
                "variable" : 0
              }
            },
            "type" : "selector"
          },
          "operator" : "&",
          "right" : {
            "go-type" : 15,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "31"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "switch"
      },
      "assign-vars" : [ ],
      "line-end" : 117,
      "code" : "switch t.kind & kindMask {\ncase kindStruct:\n\ttype u struct {\n\t\tstructtype\n\t\tu uncommontype\n\t}\n\treturn &(*u)(unsafe.Pointer(t)).u\ncase kindPtr:\n\ttype u struct {\n\t\tptrtype\n\t\tu uncommontype\n\t}\n\treturn &(*u)(unsafe.Pointer(t)).u\ncase kindFunc:\n\ttype u struct {\n\t\tfunctype\n\t\tu uncommontype\n\t}\n\treturn &(*u)(unsafe.Pointer(t)).u\ncase kindSlice:\n\ttype u struct {\n\t\tslicetype\n\t\tu uncommontype\n\t}\n\treturn &(*u)(unsafe.Pointer(t)).u\ncase kindArray:\n\ttype u struct {\n\t\tarraytype\n\t\tu uncommontype\n\t}\n\treturn &(*u)(unsafe.Pointer(t)).u\ncase kindChan:\n\ttype u struct {\n\t\tchantype\n\t\tu uncommontype\n\t}\n\treturn &(*u)(unsafe.Pointer(t)).u\ncase kindMap:\n\ttype u struct {\n\t\tmaptype\n\t\tu uncommontype\n\t}\n\treturn &(*u)(unsafe.Pointer(t)).u\ncase kindInterface:\n\ttype u struct {\n\t\tinterfacetype\n\t\tu uncommontype\n\t}\n\treturn &(*u)(unsafe.Pointer(t)).u\ndefault:\n\ttype u struct {\n\t\t_type\n\t\tu uncommontype\n\t}\n\treturn &(*u)(unsafe.Pointer(t)).u\n}",
      "entry" : false,
      "use-vars" : [ 0 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 6 ],
      "in-vars" : [ 0 ],
      "exit" : false,
      "out-vars" : [ 0 ],
      "decl-vars" : [ ],
      "line-start" : 63,
      "ast" : {
        "expressions" : [ {
          "go-type" : 15,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "25"
          }
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 68,
      "code" : "case kindStruct:\n\ttype u struct {\n\t\tstructtype\n\t\tu uncommontype\n\t}\n\treturn &(*u)(unsafe.Pointer(t)).u",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 7 ],
      "in-vars" : [ 0 ],
      "exit" : false,
      "out-vars" : [ 0 ],
      "decl-vars" : [ ],
      "line-start" : 64,
      "ast" : {
        "kind" : "statement",
        "target" : {
          "binds" : [ {
            "name" : {
              "ident-kind" : "NoKind",
              "kind" : "ident",
              "value" : "u"
            },
            "value" : {
              "fields" : [ {
                "declared-type" : {
                  "go-type" : 27,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 27,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "structtype"
                  }
                },
                "kind" : "field",
                "names" : [ ],
                "tag" : null
              }, {
                "declared-type" : {
                  "go-type" : 4,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 4,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "uncommontype"
                  }
                },
                "kind" : "field",
                "names" : [ {
                  "ident-kind" : "NoKind",
                  "kind" : "ident",
                  "value" : "u"
                } ],
                "tag" : null
              } ],
              "go-type" : 26,
              "kind" : "type",
              "type" : "struct"
            }
          } ],
          "kind" : "decl",
          "type" : "type-alias"
        },
        "type" : "declaration"
      },
      "assign-vars" : [ ],
      "line-end" : 67,
      "code" : "type u struct {\n\tstructtype\n\tu uncommontype\n}",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 0 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 68,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 3,
          "kind" : "expression",
          "operator" : "&",
          "target" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "u",
              "variable" : 4
            },
            "go-type" : 4,
            "kind" : "expression",
            "target" : {
              "coerced-to" : {
                "contained" : {
                  "go-type" : 35,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 35,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "u"
                  }
                },
                "go-type" : 34,
                "kind" : "type",
                "type" : "pointer"
              },
              "go-type" : 34,
              "kind" : "expression",
              "target" : {
                "coerced-to" : {
                  "go-type" : 18,
                  "kind" : "type",
                  "qualifier" : {
                    "ident-kind" : "PkgName",
                    "kind" : "ident",
                    "package" : 1,
                    "value" : "unsafe"
                  },
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 18,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "Pointer"
                  }
                },
                "go-type" : 18,
                "kind" : "expression",
                "target" : {
                  "go-type" : 10,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "t",
                    "variable" : 0
                  }
                },
                "type" : "cast"
              },
              "type" : "cast"
            },
            "type" : "selector"
          },
          "type" : "unary"
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 68,
      "code" : "return &(*u)(unsafe.Pointer(t)).u",
      "entry" : false,
      "use-vars" : [ 0 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 9 ],
      "in-vars" : [ 0 ],
      "exit" : false,
      "out-vars" : [ 0 ],
      "decl-vars" : [ ],
      "line-start" : 69,
      "ast" : {
        "expressions" : [ {
          "go-type" : 15,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "22"
          }
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 74,
      "code" : "case kindPtr:\n\ttype u struct {\n\t\tptrtype\n\t\tu uncommontype\n\t}\n\treturn &(*u)(unsafe.Pointer(t)).u",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 10 ],
      "in-vars" : [ 0 ],
      "exit" : false,
      "out-vars" : [ 0 ],
      "decl-vars" : [ ],
      "line-start" : 70,
      "ast" : {
        "kind" : "statement",
        "target" : {
          "binds" : [ {
            "name" : {
              "ident-kind" : "NoKind",
              "kind" : "ident",
              "value" : "u"
            },
            "value" : {
              "fields" : [ {
                "declared-type" : {
                  "go-type" : 37,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 37,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "ptrtype"
                  }
                },
                "kind" : "field",
                "names" : [ ],
                "tag" : null
              }, {
                "declared-type" : {
                  "go-type" : 4,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 4,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "uncommontype"
                  }
                },
                "kind" : "field",
                "names" : [ {
                  "ident-kind" : "NoKind",
                  "kind" : "ident",
                  "value" : "u"
                } ],
                "tag" : null
              } ],
              "go-type" : 36,
              "kind" : "type",
              "type" : "struct"
            }
          } ],
          "kind" : "decl",
          "type" : "type-alias"
        },
        "type" : "declaration"
      },
      "assign-vars" : [ ],
      "line-end" : 73,
      "code" : "type u struct {\n\tptrtype\n\tu uncommontype\n}",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 0 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 74,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 3,
          "kind" : "expression",
          "operator" : "&",
          "target" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "u",
              "variable" : 5
            },
            "go-type" : 4,
            "kind" : "expression",
            "target" : {
              "coerced-to" : {
                "contained" : {
                  "go-type" : 35,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 35,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "u"
                  }
                },
                "go-type" : 34,
                "kind" : "type",
                "type" : "pointer"
              },
              "go-type" : 34,
              "kind" : "expression",
              "target" : {
                "coerced-to" : {
                  "go-type" : 18,
                  "kind" : "type",
                  "qualifier" : {
                    "ident-kind" : "PkgName",
                    "kind" : "ident",
                    "package" : 1,
                    "value" : "unsafe"
                  },
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 18,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "Pointer"
                  }
                },
                "go-type" : 18,
                "kind" : "expression",
                "target" : {
                  "go-type" : 10,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "t",
                    "variable" : 0
                  }
                },
                "type" : "cast"
              },
              "type" : "cast"
            },
            "type" : "selector"
          },
          "type" : "unary"
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 74,
      "code" : "return &(*u)(unsafe.Pointer(t)).u",
      "entry" : false,
      "use-vars" : [ 0 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 12 ],
      "in-vars" : [ 0 ],
      "exit" : false,
      "out-vars" : [ 0 ],
      "decl-vars" : [ ],
      "line-start" : 75,
      "ast" : {
        "expressions" : [ {
          "go-type" : 15,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "19"
          }
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 80,
      "code" : "case kindFunc:\n\ttype u struct {\n\t\tfunctype\n\t\tu uncommontype\n\t}\n\treturn &(*u)(unsafe.Pointer(t)).u",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 13 ],
      "in-vars" : [ 0 ],
      "exit" : false,
      "out-vars" : [ 0 ],
      "decl-vars" : [ ],
      "line-start" : 76,
      "ast" : {
        "kind" : "statement",
        "target" : {
          "binds" : [ {
            "name" : {
              "ident-kind" : "NoKind",
              "kind" : "ident",
              "value" : "u"
            },
            "value" : {
              "fields" : [ {
                "declared-type" : {
                  "go-type" : 40,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 40,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "functype"
                  }
                },
                "kind" : "field",
                "names" : [ ],
                "tag" : null
              }, {
                "declared-type" : {
                  "go-type" : 4,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 4,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "uncommontype"
                  }
                },
                "kind" : "field",
                "names" : [ {
                  "ident-kind" : "NoKind",
                  "kind" : "ident",
                  "value" : "u"
                } ],
                "tag" : null
              } ],
              "go-type" : 39,
              "kind" : "type",
              "type" : "struct"
            }
          } ],
          "kind" : "decl",
          "type" : "type-alias"
        },
        "type" : "declaration"
      },
      "assign-vars" : [ ],
      "line-end" : 79,
      "code" : "type u struct {\n\tfunctype\n\tu uncommontype\n}",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 0 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 80,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 3,
          "kind" : "expression",
          "operator" : "&",
          "target" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "u",
              "variable" : 6
            },
            "go-type" : 4,
            "kind" : "expression",
            "target" : {
              "coerced-to" : {
                "contained" : {
                  "go-type" : 35,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 35,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "u"
                  }
                },
                "go-type" : 34,
                "kind" : "type",
                "type" : "pointer"
              },
              "go-type" : 34,
              "kind" : "expression",
              "target" : {
                "coerced-to" : {
                  "go-type" : 18,
                  "kind" : "type",
                  "qualifier" : {
                    "ident-kind" : "PkgName",
                    "kind" : "ident",
                    "package" : 1,
                    "value" : "unsafe"
                  },
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 18,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "Pointer"
                  }
                },
                "go-type" : 18,
                "kind" : "expression",
                "target" : {
                  "go-type" : 10,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "t",
                    "variable" : 0
                  }
                },
                "type" : "cast"
              },
              "type" : "cast"
            },
            "type" : "selector"
          },
          "type" : "unary"
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 80,
      "code" : "return &(*u)(unsafe.Pointer(t)).u",
      "entry" : false,
      "use-vars" : [ 0 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 15 ],
      "in-vars" : [ 0 ],
      "exit" : false,
      "out-vars" : [ 0 ],
      "decl-vars" : [ ],
      "line-start" : 81,
      "ast" : {
        "expressions" : [ {
          "go-type" : 15,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "23"
          }
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 86,
      "code" : "case kindSlice:\n\ttype u struct {\n\t\tslicetype\n\t\tu uncommontype\n\t}\n\treturn &(*u)(unsafe.Pointer(t)).u",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 16 ],
      "in-vars" : [ 0 ],
      "exit" : false,
      "out-vars" : [ 0 ],
      "decl-vars" : [ ],
      "line-start" : 82,
      "ast" : {
        "kind" : "statement",
        "target" : {
          "binds" : [ {
            "name" : {
              "ident-kind" : "NoKind",
              "kind" : "ident",
              "value" : "u"
            },
            "value" : {
              "fields" : [ {
                "declared-type" : {
                  "go-type" : 43,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 43,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "slicetype"
                  }
                },
                "kind" : "field",
                "names" : [ ],
                "tag" : null
              }, {
                "declared-type" : {
                  "go-type" : 4,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 4,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "uncommontype"
                  }
                },
                "kind" : "field",
                "names" : [ {
                  "ident-kind" : "NoKind",
                  "kind" : "ident",
                  "value" : "u"
                } ],
                "tag" : null
              } ],
              "go-type" : 42,
              "kind" : "type",
              "type" : "struct"
            }
          } ],
          "kind" : "decl",
          "type" : "type-alias"
        },
        "type" : "declaration"
      },
      "assign-vars" : [ ],
      "line-end" : 85,
      "code" : "type u struct {\n\tslicetype\n\tu uncommontype\n}",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 0 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 86,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 3,
          "kind" : "expression",
          "operator" : "&",
          "target" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "u",
              "variable" : 7
            },
            "go-type" : 4,
            "kind" : "expression",
            "target" : {
              "coerced-to" : {
                "contained" : {
                  "go-type" : 35,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 35,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "u"
                  }
                },
                "go-type" : 34,
                "kind" : "type",
                "type" : "pointer"
              },
              "go-type" : 34,
              "kind" : "expression",
              "target" : {
                "coerced-to" : {
                  "go-type" : 18,
                  "kind" : "type",
                  "qualifier" : {
                    "ident-kind" : "PkgName",
                    "kind" : "ident",
                    "package" : 1,
                    "value" : "unsafe"
                  },
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 18,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "Pointer"
                  }
                },
                "go-type" : 18,
                "kind" : "expression",
                "target" : {
                  "go-type" : 10,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "t",
                    "variable" : 0
                  }
                },
                "type" : "cast"
              },
              "type" : "cast"
            },
            "type" : "selector"
          },
          "type" : "unary"
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 86,
      "code" : "return &(*u)(unsafe.Pointer(t)).u",
      "entry" : false,
      "use-vars" : [ 0 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 18 ],
      "in-vars" : [ 0 ],
      "exit" : false,
      "out-vars" : [ 0 ],
      "decl-vars" : [ ],
      "line-start" : 87,
      "ast" : {
        "expressions" : [ {
          "go-type" : 15,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "17"
          }
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 92,
      "code" : "case kindArray:\n\ttype u struct {\n\t\tarraytype\n\t\tu uncommontype\n\t}\n\treturn &(*u)(unsafe.Pointer(t)).u",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 19 ],
      "in-vars" : [ 0 ],
      "exit" : false,
      "out-vars" : [ 0 ],
      "decl-vars" : [ ],
      "line-start" : 88,
      "ast" : {
        "kind" : "statement",
        "target" : {
          "binds" : [ {
            "name" : {
              "ident-kind" : "NoKind",
              "kind" : "ident",
              "value" : "u"
            },
            "value" : {
              "fields" : [ {
                "declared-type" : {
                  "go-type" : 45,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 45,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "arraytype"
                  }
                },
                "kind" : "field",
                "names" : [ ],
                "tag" : null
              }, {
                "declared-type" : {
                  "go-type" : 4,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 4,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "uncommontype"
                  }
                },
                "kind" : "field",
                "names" : [ {
                  "ident-kind" : "NoKind",
                  "kind" : "ident",
                  "value" : "u"
                } ],
                "tag" : null
              } ],
              "go-type" : 44,
              "kind" : "type",
              "type" : "struct"
            }
          } ],
          "kind" : "decl",
          "type" : "type-alias"
        },
        "type" : "declaration"
      },
      "assign-vars" : [ ],
      "line-end" : 91,
      "code" : "type u struct {\n\tarraytype\n\tu uncommontype\n}",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 0 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 92,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 3,
          "kind" : "expression",
          "operator" : "&",
          "target" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "u",
              "variable" : 8
            },
            "go-type" : 4,
            "kind" : "expression",
            "target" : {
              "coerced-to" : {
                "contained" : {
                  "go-type" : 35,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 35,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "u"
                  }
                },
                "go-type" : 34,
                "kind" : "type",
                "type" : "pointer"
              },
              "go-type" : 34,
              "kind" : "expression",
              "target" : {
                "coerced-to" : {
                  "go-type" : 18,
                  "kind" : "type",
                  "qualifier" : {
                    "ident-kind" : "PkgName",
                    "kind" : "ident",
                    "package" : 1,
                    "value" : "unsafe"
                  },
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 18,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "Pointer"
                  }
                },
                "go-type" : 18,
                "kind" : "expression",
                "target" : {
                  "go-type" : 10,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "t",
                    "variable" : 0
                  }
                },
                "type" : "cast"
              },
              "type" : "cast"
            },
            "type" : "selector"
          },
          "type" : "unary"
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 92,
      "code" : "return &(*u)(unsafe.Pointer(t)).u",
      "entry" : false,
      "use-vars" : [ 0 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 21 ],
      "in-vars" : [ 0 ],
      "exit" : false,
      "out-vars" : [ 0 ],
      "decl-vars" : [ ],
      "line-start" : 93,
      "ast" : {
        "expressions" : [ {
          "go-type" : 15,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "18"
          }
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 98,
      "code" : "case kindChan:\n\ttype u struct {\n\t\tchantype\n\t\tu uncommontype\n\t}\n\treturn &(*u)(unsafe.Pointer(t)).u",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 22 ],
      "in-vars" : [ 0 ],
      "exit" : false,
      "out-vars" : [ 0 ],
      "decl-vars" : [ ],
      "line-start" : 94,
      "ast" : {
        "kind" : "statement",
        "target" : {
          "binds" : [ {
            "name" : {
              "ident-kind" : "NoKind",
              "kind" : "ident",
              "value" : "u"
            },
            "value" : {
              "fields" : [ {
                "declared-type" : {
                  "go-type" : 48,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 48,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "chantype"
                  }
                },
                "kind" : "field",
                "names" : [ ],
                "tag" : null
              }, {
                "declared-type" : {
                  "go-type" : 4,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 4,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "uncommontype"
                  }
                },
                "kind" : "field",
                "names" : [ {
                  "ident-kind" : "NoKind",
                  "kind" : "ident",
                  "value" : "u"
                } ],
                "tag" : null
              } ],
              "go-type" : 47,
              "kind" : "type",
              "type" : "struct"
            }
          } ],
          "kind" : "decl",
          "type" : "type-alias"
        },
        "type" : "declaration"
      },
      "assign-vars" : [ ],
      "line-end" : 97,
      "code" : "type u struct {\n\tchantype\n\tu uncommontype\n}",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 0 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 98,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 3,
          "kind" : "expression",
          "operator" : "&",
          "target" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "u",
              "variable" : 9
            },
            "go-type" : 4,
            "kind" : "expression",
            "target" : {
              "coerced-to" : {
                "contained" : {
                  "go-type" : 35,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 35,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "u"
                  }
                },
                "go-type" : 34,
                "kind" : "type",
                "type" : "pointer"
              },
              "go-type" : 34,
              "kind" : "expression",
              "target" : {
                "coerced-to" : {
                  "go-type" : 18,
                  "kind" : "type",
                  "qualifier" : {
                    "ident-kind" : "PkgName",
                    "kind" : "ident",
                    "package" : 1,
                    "value" : "unsafe"
                  },
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 18,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "Pointer"
                  }
                },
                "go-type" : 18,
                "kind" : "expression",
                "target" : {
                  "go-type" : 10,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "t",
                    "variable" : 0
                  }
                },
                "type" : "cast"
              },
              "type" : "cast"
            },
            "type" : "selector"
          },
          "type" : "unary"
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 98,
      "code" : "return &(*u)(unsafe.Pointer(t)).u",
      "entry" : false,
      "use-vars" : [ 0 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 24 ],
      "in-vars" : [ 0 ],
      "exit" : false,
      "out-vars" : [ 0 ],
      "decl-vars" : [ ],
      "line-start" : 99,
      "ast" : {
        "expressions" : [ {
          "go-type" : 15,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "21"
          }
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 104,
      "code" : "case kindMap:\n\ttype u struct {\n\t\tmaptype\n\t\tu uncommontype\n\t}\n\treturn &(*u)(unsafe.Pointer(t)).u",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 25 ],
      "in-vars" : [ 0 ],
      "exit" : false,
      "out-vars" : [ 0 ],
      "decl-vars" : [ ],
      "line-start" : 100,
      "ast" : {
        "kind" : "statement",
        "target" : {
          "binds" : [ {
            "name" : {
              "ident-kind" : "NoKind",
              "kind" : "ident",
              "value" : "u"
            },
            "value" : {
              "fields" : [ {
                "declared-type" : {
                  "go-type" : 51,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 51,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "maptype"
                  }
                },
                "kind" : "field",
                "names" : [ ],
                "tag" : null
              }, {
                "declared-type" : {
                  "go-type" : 4,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 4,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "uncommontype"
                  }
                },
                "kind" : "field",
                "names" : [ {
                  "ident-kind" : "NoKind",
                  "kind" : "ident",
                  "value" : "u"
                } ],
                "tag" : null
              } ],
              "go-type" : 50,
              "kind" : "type",
              "type" : "struct"
            }
          } ],
          "kind" : "decl",
          "type" : "type-alias"
        },
        "type" : "declaration"
      },
      "assign-vars" : [ ],
      "line-end" : 103,
      "code" : "type u struct {\n\tmaptype\n\tu uncommontype\n}",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 0 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 104,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 3,
          "kind" : "expression",
          "operator" : "&",
          "target" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "u",
              "variable" : 10
            },
            "go-type" : 4,
            "kind" : "expression",
            "target" : {
              "coerced-to" : {
                "contained" : {
                  "go-type" : 35,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 35,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "u"
                  }
                },
                "go-type" : 34,
                "kind" : "type",
                "type" : "pointer"
              },
              "go-type" : 34,
              "kind" : "expression",
              "target" : {
                "coerced-to" : {
                  "go-type" : 18,
                  "kind" : "type",
                  "qualifier" : {
                    "ident-kind" : "PkgName",
                    "kind" : "ident",
                    "package" : 1,
                    "value" : "unsafe"
                  },
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 18,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "Pointer"
                  }
                },
                "go-type" : 18,
                "kind" : "expression",
                "target" : {
                  "go-type" : 10,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "t",
                    "variable" : 0
                  }
                },
                "type" : "cast"
              },
              "type" : "cast"
            },
            "type" : "selector"
          },
          "type" : "unary"
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 104,
      "code" : "return &(*u)(unsafe.Pointer(t)).u",
      "entry" : false,
      "use-vars" : [ 0 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 27 ],
      "in-vars" : [ 0 ],
      "exit" : false,
      "out-vars" : [ 0 ],
      "decl-vars" : [ ],
      "line-start" : 105,
      "ast" : {
        "expressions" : [ {
          "go-type" : 15,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "20"
          }
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 110,
      "code" : "case kindInterface:\n\ttype u struct {\n\t\tinterfacetype\n\t\tu uncommontype\n\t}\n\treturn &(*u)(unsafe.Pointer(t)).u",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 28 ],
      "in-vars" : [ 0 ],
      "exit" : false,
      "out-vars" : [ 0 ],
      "decl-vars" : [ ],
      "line-start" : 106,
      "ast" : {
        "kind" : "statement",
        "target" : {
          "binds" : [ {
            "name" : {
              "ident-kind" : "NoKind",
              "kind" : "ident",
              "value" : "u"
            },
            "value" : {
              "fields" : [ {
                "declared-type" : {
                  "go-type" : 57,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 57,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "interfacetype"
                  }
                },
                "kind" : "field",
                "names" : [ ],
                "tag" : null
              }, {
                "declared-type" : {
                  "go-type" : 4,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 4,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "uncommontype"
                  }
                },
                "kind" : "field",
                "names" : [ {
                  "ident-kind" : "NoKind",
                  "kind" : "ident",
                  "value" : "u"
                } ],
                "tag" : null
              } ],
              "go-type" : 56,
              "kind" : "type",
              "type" : "struct"
            }
          } ],
          "kind" : "decl",
          "type" : "type-alias"
        },
        "type" : "declaration"
      },
      "assign-vars" : [ ],
      "line-end" : 109,
      "code" : "type u struct {\n\tinterfacetype\n\tu uncommontype\n}",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 0 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 110,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 3,
          "kind" : "expression",
          "operator" : "&",
          "target" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "u",
              "variable" : 11
            },
            "go-type" : 4,
            "kind" : "expression",
            "target" : {
              "coerced-to" : {
                "contained" : {
                  "go-type" : 35,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 35,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "u"
                  }
                },
                "go-type" : 34,
                "kind" : "type",
                "type" : "pointer"
              },
              "go-type" : 34,
              "kind" : "expression",
              "target" : {
                "coerced-to" : {
                  "go-type" : 18,
                  "kind" : "type",
                  "qualifier" : {
                    "ident-kind" : "PkgName",
                    "kind" : "ident",
                    "package" : 1,
                    "value" : "unsafe"
                  },
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 18,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "Pointer"
                  }
                },
                "go-type" : 18,
                "kind" : "expression",
                "target" : {
                  "go-type" : 10,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "t",
                    "variable" : 0
                  }
                },
                "type" : "cast"
              },
              "type" : "cast"
            },
            "type" : "selector"
          },
          "type" : "unary"
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 110,
      "code" : "return &(*u)(unsafe.Pointer(t)).u",
      "entry" : false,
      "use-vars" : [ 0 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 30 ],
      "in-vars" : [ 0 ],
      "exit" : false,
      "out-vars" : [ 0 ],
      "decl-vars" : [ ],
      "line-start" : 111,
      "ast" : {
        "expressions" : [ ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 116,
      "code" : "default:\n\ttype u struct {\n\t\t_type\n\t\tu uncommontype\n\t}\n\treturn &(*u)(unsafe.Pointer(t)).u",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 31 ],
      "in-vars" : [ 0 ],
      "exit" : false,
      "out-vars" : [ 0 ],
      "decl-vars" : [ ],
      "line-start" : 112,
      "ast" : {
        "kind" : "statement",
        "target" : {
          "binds" : [ {
            "name" : {
              "ident-kind" : "NoKind",
              "kind" : "ident",
              "value" : "u"
            },
            "value" : {
              "fields" : [ {
                "declared-type" : {
                  "go-type" : 11,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 11,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "_type"
                  }
                },
                "kind" : "field",
                "names" : [ ],
                "tag" : null
              }, {
                "declared-type" : {
                  "go-type" : 4,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 4,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "uncommontype"
                  }
                },
                "kind" : "field",
                "names" : [ {
                  "ident-kind" : "NoKind",
                  "kind" : "ident",
                  "value" : "u"
                } ],
                "tag" : null
              } ],
              "go-type" : 62,
              "kind" : "type",
              "type" : "struct"
            }
          } ],
          "kind" : "decl",
          "type" : "type-alias"
        },
        "type" : "declaration"
      },
      "assign-vars" : [ ],
      "line-end" : 115,
      "code" : "type u struct {\n\t_type\n\tu uncommontype\n}",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 0 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 116,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 3,
          "kind" : "expression",
          "operator" : "&",
          "target" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "u",
              "variable" : 12
            },
            "go-type" : 4,
            "kind" : "expression",
            "target" : {
              "coerced-to" : {
                "contained" : {
                  "go-type" : 35,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 35,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "u"
                  }
                },
                "go-type" : 34,
                "kind" : "type",
                "type" : "pointer"
              },
              "go-type" : 34,
              "kind" : "expression",
              "target" : {
                "coerced-to" : {
                  "go-type" : 18,
                  "kind" : "type",
                  "qualifier" : {
                    "ident-kind" : "PkgName",
                    "kind" : "ident",
                    "package" : 1,
                    "value" : "unsafe"
                  },
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 18,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "Pointer"
                  }
                },
                "go-type" : 18,
                "kind" : "expression",
                "target" : {
                  "go-type" : 10,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "t",
                    "variable" : 0
                  }
                },
                "type" : "cast"
              },
              "type" : "cast"
            },
            "type" : "selector"
          },
          "type" : "unary"
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 116,
      "code" : "return &(*u)(unsafe.Pointer(t)).u",
      "entry" : false,
      "use-vars" : [ 0 ]
    } ],
    "code" : "func (t *_type) uncommon() *uncommontype {\n\tif t.tflag&tflagUncommon == 0 {\n\t\treturn nil\n\t}\n\tswitch t.kind & kindMask {\n\tcase kindStruct:\n\t\ttype u struct {\n\t\t\tstructtype\n\t\t\tu uncommontype\n\t\t}\n\t\treturn &(*u)(unsafe.Pointer(t)).u\n\tcase kindPtr:\n\t\ttype u struct {\n\t\t\tptrtype\n\t\t\tu uncommontype\n\t\t}\n\t\treturn &(*u)(unsafe.Pointer(t)).u\n\tcase kindFunc:\n\t\ttype u struct {\n\t\t\tfunctype\n\t\t\tu uncommontype\n\t\t}\n\t\treturn &(*u)(unsafe.Pointer(t)).u\n\tcase kindSlice:\n\t\ttype u struct {\n\t\t\tslicetype\n\t\t\tu uncommontype\n\t\t}\n\t\treturn &(*u)(unsafe.Pointer(t)).u\n\tcase kindArray:\n\t\ttype u struct {\n\t\t\tarraytype\n\t\t\tu uncommontype\n\t\t}\n\t\treturn &(*u)(unsafe.Pointer(t)).u\n\tcase kindChan:\n\t\ttype u struct {\n\t\t\tchantype\n\t\t\tu uncommontype\n\t\t}\n\t\treturn &(*u)(unsafe.Pointer(t)).u\n\tcase kindMap:\n\t\ttype u struct {\n\t\t\tmaptype\n\t\t\tu uncommontype\n\t\t}\n\t\treturn &(*u)(unsafe.Pointer(t)).u\n\tcase kindInterface:\n\t\ttype u struct {\n\t\t\tinterfacetype\n\t\t\tu uncommontype\n\t\t}\n\t\treturn &(*u)(unsafe.Pointer(t)).u\n\tdefault:\n\t\ttype u struct {\n\t\t\t_type\n\t\t\tu uncommontype\n\t\t}\n\t\treturn &(*u)(unsafe.Pointer(t)).u\n\t}\n}",
    "defines" : [ 0 ],
    "functions" : [ {
      "name" : "uncommon",
      "package" : 0,
      "type" : 0,
      "exported" : false
    } ],
    "line-end" : 118,
    "line-start" : 58,
    "names" : [ "uncommon" ],
    "package" : 0,
    "packages" : [ {
      "name" : "runtime",
      "path" : "runtime"
    }, {
      "name" : "unsafe",
      "path" : "unsafe"
    } ],
    "params" : [ ],
    "receivers" : [ 0 ],
    "results" : [ 1 ],
    "type" : "function",
    "types" : [ {
      "name" : "(*runtime._type) func() *runtime.uncommontype",
      "params" : 1,
      "recv" : 0,
      "results" : 2,
      "type" : "Signature",
      "underlying" : 0,
      "variadic" : false
    }, {
      "fields" : [ ],
      "name" : "()",
      "type" : "Tuple",
      "underlying" : 1
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 3
      } ],
      "name" : "(*runtime.uncommontype)",
      "type" : "Tuple",
      "underlying" : 2
    }, {
      "elem" : 4,
      "name" : "*runtime.uncommontype",
      "type" : "Pointer",
      "underlying" : 3
    }, {
      "local-name" : "uncommontype",
      "name" : "runtime.uncommontype",
      "package" : 0,
      "type" : "Named",
      "underlying" : 5
    }, {
      "fields" : [ {
        "name" : "pkgpath",
        "type" : 6
      }, {
        "name" : "mcount",
        "type" : 8
      }, {
        "name" : "xcount",
        "type" : 8
      }, {
        "name" : "moff",
        "type" : 9
      }, {
        "name" : "_",
        "type" : 9
      } ],
      "name" : "struct{pkgpath runtime.nameOff; mcount uint16; xcount uint16; moff uint32; _ uint32}",
      "type" : "Struct",
      "underlying" : 5
    }, {
      "local-name" : "nameOff",
      "name" : "runtime.nameOff",
      "package" : 0,
      "type" : "Named",
      "underlying" : 7
    }, {
      "name" : "int32",
      "type" : "Basic",
      "underlying" : 7
    }, {
      "name" : "uint16",
      "type" : "Basic",
      "underlying" : 8
    }, {
      "name" : "uint32",
      "type" : "Basic",
      "underlying" : 9
    }, {
      "elem" : 11,
      "name" : "*runtime._type",
      "type" : "Pointer",
      "underlying" : 10
    }, {
      "local-name" : "_type",
      "name" : "runtime._type",
      "package" : 0,
      "type" : "Named",
      "underlying" : 12
    }, {
      "fields" : [ {
        "name" : "size",
        "type" : 13
      }, {
        "name" : "ptrdata",
        "type" : 13
      }, {
        "name" : "hash",
        "type" : 9
      }, {
        "name" : "tflag",
        "type" : 14
      }, {
        "name" : "align",
        "type" : 15
      }, {
        "name" : "fieldAlign",
        "type" : 15
      }, {
        "name" : "kind",
        "type" : 15
      }, {
        "name" : "equal",
        "type" : 16
      }, {
        "name" : "gcdata",
        "type" : 21
      }, {
        "name" : "str",
        "type" : 6
      }, {
        "name" : "ptrToThis",
        "type" : 23
      } ],
      "name" : "struct{size uintptr; ptrdata uintptr; hash uint32; tflag runtime.tflag; align uint8; fieldAlign uint8; kind uint8; equal func(unsafe.Pointer, unsafe.Pointer) bool; gcdata *byte; str runtime.nameOff; ptrToThis runtime.typeOff}",
      "type" : "Struct",
      "underlying" : 12
    }, {
      "name" : "uintptr",
      "type" : "Basic",
      "underlying" : 13
    }, {
      "local-name" : "tflag",
      "name" : "runtime.tflag",
      "package" : 0,
      "type" : "Named",
      "underlying" : 15
    }, {
      "name" : "uint8",
      "type" : "Basic",
      "underlying" : 15
    }, {
      "name" : "func(unsafe.Pointer, unsafe.Pointer) bool",
      "params" : 17,
      "recv" : -1,
      "results" : 19,
      "type" : "Signature",
      "underlying" : 16,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 18
      }, {
        "name" : "",
        "type" : 18
      } ],
      "name" : "(unsafe.Pointer, unsafe.Pointer)",
      "type" : "Tuple",
      "underlying" : 17
    }, {
      "local-name" : "Pointer",
      "name" : "unsafe.Pointer",
      "package" : 1,
      "type" : "Basic",
      "underlying" : 18
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 20
      } ],
      "name" : "(bool)",
      "type" : "Tuple",
      "underlying" : 19
    }, {
      "name" : "bool",
      "type" : "Basic",
      "underlying" : 20
    }, {
      "elem" : 22,
      "name" : "*byte",
      "type" : "Pointer",
      "underlying" : 21
    }, {
      "name" : "byte",
      "type" : "Basic",
      "underlying" : 22
    }, {
      "local-name" : "typeOff",
      "name" : "runtime.typeOff",
      "package" : 0,
      "type" : "Named",
      "underlying" : 7
    }, {
      "name" : "untyped bool",
      "type" : "Basic",
      "underlying" : 24
    }, {
      "name" : "untyped nil",
      "type" : "Basic",
      "underlying" : 25
    }, {
      "fields" : [ {
        "name" : "structtype",
        "type" : 27
      }, {
        "name" : "u",
        "type" : 4
      } ],
      "name" : "struct{runtime.structtype; u runtime.uncommontype}",
      "type" : "Struct",
      "underlying" : 26
    }, {
      "local-name" : "structtype",
      "name" : "runtime.structtype",
      "package" : 0,
      "type" : "Named",
      "underlying" : 28
    }, {
      "fields" : [ {
        "name" : "typ",
        "type" : 11
      }, {
        "name" : "pkgPath",
        "type" : 29
      }, {
        "name" : "fields",
        "type" : 31
      } ],
      "name" : "struct{typ runtime._type; pkgPath runtime.name; fields []runtime.structfield}",
      "type" : "Struct",
      "underlying" : 28
    }, {
      "local-name" : "name",
      "name" : "runtime.name",
      "package" : 0,
      "type" : "Named",
      "underlying" : 30
    }, {
      "fields" : [ {
        "name" : "bytes",
        "type" : 21
      } ],
      "name" : "struct{bytes *byte}",
      "type" : "Struct",
      "underlying" : 30
    }, {
      "elem" : 32,
      "name" : "[]runtime.structfield",
      "type" : "Slice",
      "underlying" : 31
    }, {
      "local-name" : "structfield",
      "name" : "runtime.structfield",
      "package" : 0,
      "type" : "Named",
      "underlying" : 33
    }, {
      "fields" : [ {
        "name" : "name",
        "type" : 29
      }, {
        "name" : "typ",
        "type" : 10
      }, {
        "name" : "offsetAnon",
        "type" : 13
      } ],
      "name" : "struct{name runtime.name; typ *runtime._type; offsetAnon uintptr}",
      "type" : "Struct",
      "underlying" : 33
    }, {
      "elem" : 35,
      "name" : "*runtime.u",
      "type" : "Pointer",
      "underlying" : 34
    }, {
      "local-name" : "u",
      "name" : "runtime.u",
      "package" : 0,
      "type" : "Named",
      "underlying" : 26
    }, {
      "fields" : [ {
        "name" : "ptrtype",
        "type" : 37
      }, {
        "name" : "u",
        "type" : 4
      } ],
      "name" : "struct{runtime.ptrtype; u runtime.uncommontype}",
      "type" : "Struct",
      "underlying" : 36
    }, {
      "local-name" : "ptrtype",
      "name" : "runtime.ptrtype",
      "package" : 0,
      "type" : "Named",
      "underlying" : 38
    }, {
      "fields" : [ {
        "name" : "typ",
        "type" : 11
      }, {
        "name" : "elem",
        "type" : 10
      } ],
      "name" : "struct{typ runtime._type; elem *runtime._type}",
      "type" : "Struct",
      "underlying" : 38
    }, {
      "fields" : [ {
        "name" : "functype",
        "type" : 40
      }, {
        "name" : "u",
        "type" : 4
      } ],
      "name" : "struct{runtime.functype; u runtime.uncommontype}",
      "type" : "Struct",
      "underlying" : 39
    }, {
      "local-name" : "functype",
      "name" : "runtime.functype",
      "package" : 0,
      "type" : "Named",
      "underlying" : 41
    }, {
      "fields" : [ {
        "name" : "typ",
        "type" : 11
      }, {
        "name" : "inCount",
        "type" : 8
      }, {
        "name" : "outCount",
        "type" : 8
      } ],
      "name" : "struct{typ runtime._type; inCount uint16; outCount uint16}",
      "type" : "Struct",
      "underlying" : 41
    }, {
      "fields" : [ {
        "name" : "slicetype",
        "type" : 43
      }, {
        "name" : "u",
        "type" : 4
      } ],
      "name" : "struct{runtime.slicetype; u runtime.uncommontype}",
      "type" : "Struct",
      "underlying" : 42
    }, {
      "local-name" : "slicetype",
      "name" : "runtime.slicetype",
      "package" : 0,
      "type" : "Named",
      "underlying" : 38
    }, {
      "fields" : [ {
        "name" : "arraytype",
        "type" : 45
      }, {
        "name" : "u",
        "type" : 4
      } ],
      "name" : "struct{runtime.arraytype; u runtime.uncommontype}",
      "type" : "Struct",
      "underlying" : 44
    }, {
      "local-name" : "arraytype",
      "name" : "runtime.arraytype",
      "package" : 0,
      "type" : "Named",
      "underlying" : 46
    }, {
      "fields" : [ {
        "name" : "typ",
        "type" : 11
      }, {
        "name" : "elem",
        "type" : 10
      }, {
        "name" : "slice",
        "type" : 10
      }, {
        "name" : "len",
        "type" : 13
      } ],
      "name" : "struct{typ runtime._type; elem *runtime._type; slice *runtime._type; len uintptr}",
      "type" : "Struct",
      "underlying" : 46
    }, {
      "fields" : [ {
        "name" : "chantype",
        "type" : 48
      }, {
        "name" : "u",
        "type" : 4
      } ],
      "name" : "struct{runtime.chantype; u runtime.uncommontype}",
      "type" : "Struct",
      "underlying" : 47
    }, {
      "local-name" : "chantype",
      "name" : "runtime.chantype",
      "package" : 0,
      "type" : "Named",
      "underlying" : 49
    }, {
      "fields" : [ {
        "name" : "typ",
        "type" : 11
      }, {
        "name" : "elem",
        "type" : 10
      }, {
        "name" : "dir",
        "type" : 13
      } ],
      "name" : "struct{typ runtime._type; elem *runtime._type; dir uintptr}",
      "type" : "Struct",
      "underlying" : 49
    }, {
      "fields" : [ {
        "name" : "maptype",
        "type" : 51
      }, {
        "name" : "u",
        "type" : 4
      } ],
      "name" : "struct{runtime.maptype; u runtime.uncommontype}",
      "type" : "Struct",
      "underlying" : 50
    }, {
      "local-name" : "maptype",
      "name" : "runtime.maptype",
      "package" : 0,
      "type" : "Named",
      "underlying" : 52
    }, {
      "fields" : [ {
        "name" : "typ",
        "type" : 11
      }, {
        "name" : "key",
        "type" : 10
      }, {
        "name" : "elem",
        "type" : 10
      }, {
        "name" : "bucket",
        "type" : 10
      }, {
        "name" : "hasher",
        "type" : 53
      }, {
        "name" : "keysize",
        "type" : 15
      }, {
        "name" : "elemsize",
        "type" : 15
      }, {
        "name" : "bucketsize",
        "type" : 8
      }, {
        "name" : "flags",
        "type" : 9
      } ],
      "name" : "struct{typ runtime._type; key *runtime._type; elem *runtime._type; bucket *runtime._type; hasher func(unsafe.Pointer, uintptr) uintptr; keysize uint8; elemsize uint8; bucketsize uint16; flags uint32}",
      "type" : "Struct",
      "underlying" : 52
    }, {
      "name" : "func(unsafe.Pointer, uintptr) uintptr",
      "params" : 54,
      "recv" : -1,
      "results" : 55,
      "type" : "Signature",
      "underlying" : 53,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 18
      }, {
        "name" : "",
        "type" : 13
      } ],
      "name" : "(unsafe.Pointer, uintptr)",
      "type" : "Tuple",
      "underlying" : 54
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 13
      } ],
      "name" : "(uintptr)",
      "type" : "Tuple",
      "underlying" : 55
    }, {
      "fields" : [ {
        "name" : "interfacetype",
        "type" : 57
      }, {
        "name" : "u",
        "type" : 4
      } ],
      "name" : "struct{runtime.interfacetype; u runtime.uncommontype}",
      "type" : "Struct",
      "underlying" : 56
    }, {
      "local-name" : "interfacetype",
      "name" : "runtime.interfacetype",
      "package" : 0,
      "type" : "Named",
      "underlying" : 58
    }, {
      "fields" : [ {
        "name" : "typ",
        "type" : 11
      }, {
        "name" : "pkgpath",
        "type" : 29
      }, {
        "name" : "mhdr",
        "type" : 59
      } ],
      "name" : "struct{typ runtime._type; pkgpath runtime.name; mhdr []runtime.imethod}",
      "type" : "Struct",
      "underlying" : 58
    }, {
      "elem" : 60,
      "name" : "[]runtime.imethod",
      "type" : "Slice",
      "underlying" : 59
    }, {
      "local-name" : "imethod",
      "name" : "runtime.imethod",
      "package" : 0,
      "type" : "Named",
      "underlying" : 61
    }, {
      "fields" : [ {
        "name" : "name",
        "type" : 6
      }, {
        "name" : "ityp",
        "type" : 23
      } ],
      "name" : "struct{name runtime.nameOff; ityp runtime.typeOff}",
      "type" : "Struct",
      "underlying" : 61
    }, {
      "fields" : [ {
        "name" : "_type",
        "type" : 11
      }, {
        "name" : "u",
        "type" : 4
      } ],
      "name" : "struct{runtime._type; u runtime.uncommontype}",
      "type" : "Struct",
      "underlying" : 62
    } ],
    "variables" : [ {
      "name" : "t",
      "package" : 0,
      "type" : 10,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "[res0]",
      "package" : 0,
      "type" : 3,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "tflag",
      "package" : 0,
      "type" : 14,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "kind",
      "package" : 0,
      "type" : 15,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "u",
      "package" : 0,
      "type" : 4,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "u",
      "package" : 0,
      "type" : 4,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "u",
      "package" : 0,
      "type" : 4,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "u",
      "package" : 0,
      "type" : 4,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "u",
      "package" : 0,
      "type" : 4,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "u",
      "package" : 0,
      "type" : 4,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "u",
      "package" : 0,
      "type" : 4,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "u",
      "package" : 0,
      "type" : 4,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "u",
      "package" : 0,
      "type" : 4,
      "exported" : false,
      "embedded" : false,
      "field" : true
    } ]
  },
  "go-version" : "1.14.3"
}