{
  "usage" : {
    "file" : "mbitmap.go",
    "label1" : "cast-struct",
    "label2" : "types",
    "line" : "2029",
    "module" : "std",
    "pkg" : "runtime",
    "project" : "kubernetes/kubernetes",
    "snippet" : "n := (*ptrtype)(unsafe.Pointer(t)).elem.size",
    "version" : "std"
  },
  "cfg" : {
    "blocks" : [ {
      "update-vars" : [ ],
      "successors" : [ 2 ],
      "in-vars" : [ 0 ],
      "exit" : false,
      "out-vars" : [ 0 ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[entry]",
      "entry" : true,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ ],
      "in-vars" : [ ],
      "exit" : true,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[exit]",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 3 ],
      "in-vars" : [ 0 ],
      "exit" : false,
      "out-vars" : [ 2 ],
      "decl-vars" : [ 2 ],
      "line-start" : 2009,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "e"
          }
        } ],
        "right" : [ {
          "go-type" : 6,
          "kind" : "expression",
          "target" : {
            "arguments" : [ {
              "go-type" : 27,
              "kind" : "expression",
              "operator" : "&",
              "target" : {
                "go-type" : 2,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "ep",
                  "variable" : 0
                }
              },
              "type" : "unary"
            } ],
            "ellipsis" : false,
            "function" : {
              "go-type" : 25,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "function" : 1,
                "ident-kind" : "Func",
                "kind" : "ident",
                "value" : "efaceOf"
              }
            },
            "go-type" : 24,
            "kind" : "expression",
            "type" : "call"
          },
          "type" : "star"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 2009,
      "code" : "e := *efaceOf(&ep)",
      "entry" : false,
      "use-vars" : [ 0 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 4 ],
      "in-vars" : [ 2 ],
      "exit" : false,
      "out-vars" : [ 4, 2 ],
      "decl-vars" : [ 4 ],
      "line-start" : 2010,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "p"
          }
        } ],
        "right" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "data",
            "variable" : 3
          },
          "go-type" : 17,
          "kind" : "expression",
          "target" : {
            "go-type" : 6,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "e",
              "variable" : 2
            }
          },
          "type" : "selector"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 2010,
      "code" : "p := e.data",
      "entry" : false,
      "use-vars" : [ 2 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 5 ],
      "in-vars" : [ 4, 2 ],
      "exit" : false,
      "out-vars" : [ 6, 4 ],
      "decl-vars" : [ 6 ],
      "line-start" : 2011,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "t"
          }
        } ],
        "right" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "_type",
            "variable" : 5
          },
          "go-type" : 8,
          "kind" : "expression",
          "target" : {
            "go-type" : 6,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "e",
              "variable" : 2
            }
          },
          "type" : "selector"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 2011,
      "code" : "t := e._type",
      "entry" : false,
      "use-vars" : [ 2 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 6, 27 ],
      "in-vars" : [ 6, 4 ],
      "exit" : false,
      "out-vars" : [ 6, 7, 4 ],
      "decl-vars" : [ 25, 7 ],
      "line-start" : 2013,
      "ast" : {
        "is-assign" : false,
        "key" : {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "_"
          }
        },
        "kind" : "statement",
        "target" : {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 67,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 2,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "activeModules"
            }
          },
          "go-type" : 29,
          "kind" : "expression",
          "type" : "call"
        },
        "type" : "range",
        "value" : {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "datap"
          }
        }
      },
      "assign-vars" : [ ],
      "line-end" : 2037,
      "code" : "for _, datap := range activeModules() {\n\n\tif datap.data <= uintptr(p) && uintptr(p) < datap.edata {\n\t\tbitmap := datap.gcdatamask.bytedata\n\t\tn := (*ptrtype)(unsafe.Pointer(t)).elem.size\n\t\tmask = make([]byte, n/sys.PtrSize)\n\t\tfor i := uintptr(0); i < n; i += sys.PtrSize {\n\t\t\toff := (uintptr(p) + i - datap.data) / sys.PtrSize\n\t\t\tmask[i/sys.PtrSize] = (*addb(bitmap, off/8) >> (off % 8)) & 1\n\t\t}\n\t\treturn\n\t}\n\n\tif datap.bss <= uintptr(p) && uintptr(p) < datap.ebss {\n\t\tbitmap := datap.gcbssmask.bytedata\n\t\tn := (*ptrtype)(unsafe.Pointer(t)).elem.size\n\t\tmask = make([]byte, n/sys.PtrSize)\n\t\tfor i := uintptr(0); i < n; i += sys.PtrSize {\n\t\t\toff := (uintptr(p) + i - datap.bss) / sys.PtrSize\n\t\t\tmask[i/sys.PtrSize] = (*addb(bitmap, off/8) >> (off % 8)) & 1\n\t\t}\n\t\treturn\n\t}\n}",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 7, 16 ],
      "in-vars" : [ 6, 7, 4 ],
      "exit" : false,
      "out-vars" : [ 7, 4, 6 ],
      "decl-vars" : [ ],
      "line-start" : 2015,
      "ast" : {
        "condition" : {
          "go-type" : 70,
          "kind" : "expression",
          "left" : {
            "go-type" : 70,
            "kind" : "expression",
            "left" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "data",
                "variable" : 8
              },
              "go-type" : 11,
              "kind" : "expression",
              "target" : {
                "go-type" : 30,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "datap",
                  "variable" : 7
                }
              },
              "type" : "selector"
            },
            "operator" : "<=",
            "right" : {
              "coerced-to" : {
                "go-type" : 11,
                "kind" : "type",
                "type" : "identifier",
                "value" : {
                  "go-type" : 11,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "uintptr"
                }
              },
              "go-type" : 11,
              "kind" : "expression",
              "target" : {
                "go-type" : 17,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "p",
                  "variable" : 4
                }
              },
              "type" : "cast"
            },
            "type" : "binary"
          },
          "operator" : "&&",
          "right" : {
            "go-type" : 70,
            "kind" : "expression",
            "left" : {
              "coerced-to" : {
                "go-type" : 11,
                "kind" : "type",
                "type" : "identifier",
                "value" : {
                  "go-type" : 11,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "uintptr"
                }
              },
              "go-type" : 11,
              "kind" : "expression",
              "target" : {
                "go-type" : 17,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "p",
                  "variable" : 4
                }
              },
              "type" : "cast"
            },
            "operator" : "<",
            "right" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "edata",
                "variable" : 9
              },
              "go-type" : 11,
              "kind" : "expression",
              "target" : {
                "go-type" : 30,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "datap",
                  "variable" : 7
                }
              },
              "type" : "selector"
            },
            "type" : "binary"
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 2024,
      "code" : "if datap.data <= uintptr(p) && uintptr(p) < datap.edata {\n\tbitmap := datap.gcdatamask.bytedata\n\tn := (*ptrtype)(unsafe.Pointer(t)).elem.size\n\tmask = make([]byte, n/sys.PtrSize)\n\tfor i := uintptr(0); i < n; i += sys.PtrSize {\n\t\toff := (uintptr(p) + i - datap.data) / sys.PtrSize\n\t\tmask[i/sys.PtrSize] = (*addb(bitmap, off/8) >> (off % 8)) & 1\n\t}\n\treturn\n}",
      "entry" : false,
      "use-vars" : [ 7, 4 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 8 ],
      "in-vars" : [ 4, 6, 7 ],
      "exit" : false,
      "out-vars" : [ 6, 7, 4, 16 ],
      "decl-vars" : [ 16 ],
      "line-start" : 2016,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "bitmap"
          }
        } ],
        "right" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "bytedata",
            "variable" : 11
          },
          "go-type" : 65,
          "kind" : "expression",
          "target" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "gcdatamask",
              "variable" : 10
            },
            "go-type" : 63,
            "kind" : "expression",
            "target" : {
              "go-type" : 30,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "datap",
                "variable" : 7
              }
            },
            "type" : "selector"
          },
          "type" : "selector"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 2016,
      "code" : "bitmap := datap.gcdatamask.bytedata",
      "entry" : false,
      "use-vars" : [ 7 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 9 ],
      "in-vars" : [ 16, 6, 7, 4 ],
      "exit" : false,
      "out-vars" : [ 7, 4, 16, 14 ],
      "decl-vars" : [ 14 ],
      "line-start" : 2017,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "n"
          }
        } ],
        "right" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "size",
            "variable" : 13
          },
          "go-type" : 11,
          "kind" : "expression",
          "target" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "elem",
              "variable" : 12
            },
            "go-type" : 8,
            "kind" : "expression",
            "target" : {
              "coerced-to" : {
                "contained" : {
                  "go-type" : 72,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 72,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "ptrtype"
                  }
                },
                "go-type" : 71,
                "kind" : "type",
                "type" : "pointer"
              },
              "go-type" : 71,
              "kind" : "expression",
              "target" : {
                "coerced-to" : {
                  "go-type" : 17,
                  "kind" : "type",
                  "qualifier" : {
                    "ident-kind" : "PkgName",
                    "kind" : "ident",
                    "package" : 1,
                    "value" : "unsafe"
                  },
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 17,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "Pointer"
                  }
                },
                "go-type" : 17,
                "kind" : "expression",
                "target" : {
                  "go-type" : 8,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "t",
                    "variable" : 6
                  }
                },
                "type" : "cast"
              },
              "type" : "cast"
            },
            "type" : "selector"
          },
          "type" : "selector"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 2017,
      "code" : "n := (*ptrtype)(unsafe.Pointer(t)).elem.size",
      "entry" : false,
      "use-vars" : [ 6 ]
    }, {
      "update-vars" : [ 1 ],
      "successors" : [ 11 ],
      "in-vars" : [ 14, 7, 4, 16 ],
      "exit" : false,
      "out-vars" : [ 14, 7, 4, 1, 16 ],
      "decl-vars" : [ ],
      "line-start" : 2018,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 4,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "mask",
            "variable" : 1
          }
        } ],
        "right" : [ {
          "argument" : {
            "element" : {
              "go-type" : 5,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 5,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "byte"
              }
            },
            "go-type" : 4,
            "kind" : "type",
            "type" : "slice"
          },
          "go-type" : 4,
          "kind" : "expression",
          "rest" : [ {
            "go-type" : 11,
            "kind" : "expression",
            "left" : {
              "go-type" : 11,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "n",
                "variable" : 14
              }
            },
            "operator" : "/",
            "right" : {
              "go-type" : 11,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "8"
              }
            },
            "type" : "binary"
          } ],
          "type" : "make"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 1 ],
      "line-end" : 2018,
      "code" : "mask = make([]byte, n/sys.PtrSize)",
      "entry" : false,
      "use-vars" : [ 14 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 13, 15 ],
      "in-vars" : [ 1, 16, 14, 7, 4, 15 ],
      "exit" : false,
      "out-vars" : [ 14, 7, 4, 15, 1, 16 ],
      "decl-vars" : [ ],
      "line-start" : 2019,
      "ast" : {
        "condition" : {
          "go-type" : 70,
          "kind" : "expression",
          "left" : {
            "go-type" : 11,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "i",
              "variable" : 15
            }
          },
          "operator" : "<",
          "right" : {
            "go-type" : 11,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "n",
              "variable" : 14
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "for"
      },
      "assign-vars" : [ ],
      "line-end" : 2022,
      "code" : "for i := uintptr(0); i < n; i += sys.PtrSize {\n\toff := (uintptr(p) + i - datap.data) / sys.PtrSize\n\tmask[i/sys.PtrSize] = (*addb(bitmap, off/8) >> (off % 8)) & 1\n}",
      "entry" : false,
      "use-vars" : [ 15, 14 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 10 ],
      "in-vars" : [ 16, 14, 7, 4, 1 ],
      "exit" : false,
      "out-vars" : [ 16, 14, 7, 4, 15, 1 ],
      "decl-vars" : [ 15 ],
      "line-start" : 2019,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "i"
          }
        } ],
        "right" : [ {
          "go-type" : 11,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "0"
          }
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 2019,
      "code" : "i := uintptr(0)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ 15 ],
      "successors" : [ 10 ],
      "in-vars" : [ 1, 16, 14, 7, 4, 15 ],
      "exit" : false,
      "out-vars" : [ 14, 7, 4, 15, 1, 16 ],
      "decl-vars" : [ ],
      "line-start" : 2019,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 11,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "i",
            "variable" : 15
          }
        } ],
        "operator" : "+",
        "right" : [ {
          "go-type" : 11,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "8"
          }
        } ],
        "type" : "assign-operator"
      },
      "assign-vars" : [ 15 ],
      "line-end" : 2019,
      "code" : "i += sys.PtrSize",
      "entry" : false,
      "use-vars" : [ 15 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 14 ],
      "in-vars" : [ 4, 15, 1, 16, 14, 7 ],
      "exit" : false,
      "out-vars" : [ 15, 17, 1, 16, 14, 7, 4 ],
      "decl-vars" : [ 17 ],
      "line-start" : 2020,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "off"
          }
        } ],
        "right" : [ {
          "go-type" : 11,
          "kind" : "expression",
          "left" : {
            "go-type" : 11,
            "kind" : "expression",
            "target" : {
              "go-type" : 11,
              "kind" : "expression",
              "left" : {
                "go-type" : 11,
                "kind" : "expression",
                "left" : {
                  "coerced-to" : {
                    "go-type" : 11,
                    "kind" : "type",
                    "type" : "identifier",
                    "value" : {
                      "go-type" : 11,
                      "ident-kind" : "TypeName",
                      "kind" : "ident",
                      "value" : "uintptr"
                    }
                  },
                  "go-type" : 11,
                  "kind" : "expression",
                  "target" : {
                    "go-type" : 17,
                    "kind" : "expression",
                    "type" : "identifier",
                    "value" : {
                      "ident-kind" : "Var",
                      "kind" : "ident",
                      "value" : "p",
                      "variable" : 4
                    }
                  },
                  "type" : "cast"
                },
                "operator" : "+",
                "right" : {
                  "go-type" : 11,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "i",
                    "variable" : 15
                  }
                },
                "type" : "binary"
              },
              "operator" : "-",
              "right" : {
                "field" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "data",
                  "variable" : 8
                },
                "go-type" : 11,
                "kind" : "expression",
                "target" : {
                  "go-type" : 30,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "datap",
                    "variable" : 7
                  }
                },
                "type" : "selector"
              },
              "type" : "binary"
            },
            "type" : "paren"
          },
          "operator" : "/",
          "right" : {
            "go-type" : 11,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "8"
            }
          },
          "type" : "binary"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 2020,
      "code" : "off := (uintptr(p) + i - datap.data) / sys.PtrSize",
      "entry" : false,
      "use-vars" : [ 7, 4, 15 ]
    }, {
      "update-vars" : [ 1 ],
      "successors" : [ 12 ],
      "in-vars" : [ 14, 7, 4, 15, 17, 1, 16 ],
      "exit" : false,
      "out-vars" : [ 14, 7, 4, 15, 1, 16 ],
      "decl-vars" : [ ],
      "line-start" : 2021,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 5,
          "index" : {
            "go-type" : 11,
            "kind" : "expression",
            "left" : {
              "go-type" : 11,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "i",
                "variable" : 15
              }
            },
            "operator" : "/",
            "right" : {
              "go-type" : 11,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "8"
              }
            },
            "type" : "binary"
          },
          "kind" : "expression",
          "target" : {
            "go-type" : 4,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "mask",
              "variable" : 1
            }
          },
          "type" : "index"
        } ],
        "right" : [ {
          "go-type" : 5,
          "kind" : "expression",
          "left" : {
            "go-type" : 5,
            "kind" : "expression",
            "target" : {
              "go-type" : 5,
              "kind" : "expression",
              "left" : {
                "go-type" : 5,
                "kind" : "expression",
                "target" : {
                  "arguments" : [ {
                    "go-type" : 65,
                    "kind" : "expression",
                    "type" : "identifier",
                    "value" : {
                      "ident-kind" : "Var",
                      "kind" : "ident",
                      "value" : "bitmap",
                      "variable" : 16
                    }
                  }, {
                    "go-type" : 11,
                    "kind" : "expression",
                    "left" : {
                      "go-type" : 11,
                      "kind" : "expression",
                      "type" : "identifier",
                      "value" : {
                        "ident-kind" : "Var",
                        "kind" : "ident",
                        "value" : "off",
                        "variable" : 17
                      }
                    },
                    "operator" : "/",
                    "right" : {
                      "go-type" : 11,
                      "kind" : "constant",
                      "value" : {
                        "type" : "INT",
                        "value" : "8"
                      }
                    },
                    "type" : "binary"
                  } ],
                  "ellipsis" : false,
                  "function" : {
                    "go-type" : 74,
                    "kind" : "expression",
                    "type" : "identifier",
                    "value" : {
                      "function" : 3,
                      "ident-kind" : "Func",
                      "kind" : "ident",
                      "value" : "addb"
                    }
                  },
                  "go-type" : 20,
                  "kind" : "expression",
                  "type" : "call"
                },
                "type" : "star"
              },
              "operator" : ">>",
              "right" : {
                "go-type" : 11,
                "kind" : "expression",
                "target" : {
                  "go-type" : 11,
                  "kind" : "expression",
                  "left" : {
                    "go-type" : 11,
                    "kind" : "expression",
                    "type" : "identifier",
                    "value" : {
                      "ident-kind" : "Var",
                      "kind" : "ident",
                      "value" : "off",
                      "variable" : 17
                    }
                  },
                  "operator" : "%",
                  "right" : {
                    "go-type" : 11,
                    "kind" : "constant",
                    "value" : {
                      "type" : "INT",
                      "value" : "8"
                    }
                  },
                  "type" : "binary"
                },
                "type" : "paren"
              },
              "type" : "binary"
            },
            "type" : "paren"
          },
          "operator" : "&",
          "right" : {
            "go-type" : 5,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "1"
            }
          },
          "type" : "binary"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 2021,
      "code" : "mask[i/sys.PtrSize] = (*addb(bitmap, off/8) >> (off % 8)) & 1",
      "entry" : false,
      "use-vars" : [ 17, 1, 15, 16 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 2023,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ ]
      },
      "assign-vars" : [ ],
      "line-end" : 2023,
      "code" : "return",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 17, 5 ],
      "in-vars" : [ 6, 7, 4 ],
      "exit" : false,
      "out-vars" : [ 6, 7, 4 ],
      "decl-vars" : [ ],
      "line-start" : 2027,
      "ast" : {
        "condition" : {
          "go-type" : 70,
          "kind" : "expression",
          "left" : {
            "go-type" : 70,
            "kind" : "expression",
            "left" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "bss",
                "variable" : 18
              },
              "go-type" : 11,
              "kind" : "expression",
              "target" : {
                "go-type" : 30,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "datap",
                  "variable" : 7
                }
              },
              "type" : "selector"
            },
            "operator" : "<=",
            "right" : {
              "coerced-to" : {
                "go-type" : 11,
                "kind" : "type",
                "type" : "identifier",
                "value" : {
                  "go-type" : 11,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "uintptr"
                }
              },
              "go-type" : 11,
              "kind" : "expression",
              "target" : {
                "go-type" : 17,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "p",
                  "variable" : 4
                }
              },
              "type" : "cast"
            },
            "type" : "binary"
          },
          "operator" : "&&",
          "right" : {
            "go-type" : 70,
            "kind" : "expression",
            "left" : {
              "coerced-to" : {
                "go-type" : 11,
                "kind" : "type",
                "type" : "identifier",
                "value" : {
                  "go-type" : 11,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "uintptr"
                }
              },
              "go-type" : 11,
              "kind" : "expression",
              "target" : {
                "go-type" : 17,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "p",
                  "variable" : 4
                }
              },
              "type" : "cast"
            },
            "operator" : "<",
            "right" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "ebss",
                "variable" : 19
              },
              "go-type" : 11,
              "kind" : "expression",
              "target" : {
                "go-type" : 30,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "datap",
                  "variable" : 7
                }
              },
              "type" : "selector"
            },
            "type" : "binary"
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 2036,
      "code" : "if datap.bss <= uintptr(p) && uintptr(p) < datap.ebss {\n\tbitmap := datap.gcbssmask.bytedata\n\tn := (*ptrtype)(unsafe.Pointer(t)).elem.size\n\tmask = make([]byte, n/sys.PtrSize)\n\tfor i := uintptr(0); i < n; i += sys.PtrSize {\n\t\toff := (uintptr(p) + i - datap.bss) / sys.PtrSize\n\t\tmask[i/sys.PtrSize] = (*addb(bitmap, off/8) >> (off % 8)) & 1\n\t}\n\treturn\n}",
      "entry" : false,
      "use-vars" : [ 4, 7 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 18 ],
      "in-vars" : [ 6, 7, 4 ],
      "exit" : false,
      "out-vars" : [ 6, 23, 7, 4 ],
      "decl-vars" : [ 23 ],
      "line-start" : 2028,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "bitmap"
          }
        } ],
        "right" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "bytedata",
            "variable" : 11
          },
          "go-type" : 65,
          "kind" : "expression",
          "target" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "gcbssmask",
              "variable" : 20
            },
            "go-type" : 63,
            "kind" : "expression",
            "target" : {
              "go-type" : 30,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "datap",
                "variable" : 7
              }
            },
            "type" : "selector"
          },
          "type" : "selector"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 2028,
      "code" : "bitmap := datap.gcbssmask.bytedata",
      "entry" : false,
      "use-vars" : [ 7 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 19 ],
      "in-vars" : [ 6, 23, 7, 4 ],
      "exit" : false,
      "out-vars" : [ 23, 7, 4, 21 ],
      "decl-vars" : [ 21 ],
      "line-start" : 2029,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "n"
          }
        } ],
        "right" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "size",
            "variable" : 13
          },
          "go-type" : 11,
          "kind" : "expression",
          "target" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "elem",
              "variable" : 12
            },
            "go-type" : 8,
            "kind" : "expression",
            "target" : {
              "coerced-to" : {
                "contained" : {
                  "go-type" : 72,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 72,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "ptrtype"
                  }
                },
                "go-type" : 71,
                "kind" : "type",
                "type" : "pointer"
              },
              "go-type" : 71,
              "kind" : "expression",
              "target" : {
                "coerced-to" : {
                  "go-type" : 17,
                  "kind" : "type",
                  "qualifier" : {
                    "ident-kind" : "PkgName",
                    "kind" : "ident",
                    "package" : 1,
                    "value" : "unsafe"
                  },
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 17,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "Pointer"
                  }
                },
                "go-type" : 17,
                "kind" : "expression",
                "target" : {
                  "go-type" : 8,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "t",
                    "variable" : 6
                  }
                },
                "type" : "cast"
              },
              "type" : "cast"
            },
            "type" : "selector"
          },
          "type" : "selector"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 2029,
      "code" : "n := (*ptrtype)(unsafe.Pointer(t)).elem.size",
      "entry" : false,
      "use-vars" : [ 6 ]
    }, {
      "update-vars" : [ 1 ],
      "successors" : [ 21 ],
      "in-vars" : [ 23, 7, 4, 21 ],
      "exit" : false,
      "out-vars" : [ 7, 4, 21, 1, 23 ],
      "decl-vars" : [ ],
      "line-start" : 2030,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 4,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "mask",
            "variable" : 1
          }
        } ],
        "right" : [ {
          "argument" : {
            "element" : {
              "go-type" : 5,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 5,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "byte"
              }
            },
            "go-type" : 4,
            "kind" : "type",
            "type" : "slice"
          },
          "go-type" : 4,
          "kind" : "expression",
          "rest" : [ {
            "go-type" : 11,
            "kind" : "expression",
            "left" : {
              "go-type" : 11,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "n",
                "variable" : 21
              }
            },
            "operator" : "/",
            "right" : {
              "go-type" : 11,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "8"
              }
            },
            "type" : "binary"
          } ],
          "type" : "make"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 1 ],
      "line-end" : 2030,
      "code" : "mask = make([]byte, n/sys.PtrSize)",
      "entry" : false,
      "use-vars" : [ 21 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 23, 25 ],
      "in-vars" : [ 21, 1, 23, 7, 4, 22 ],
      "exit" : false,
      "out-vars" : [ 4, 22, 21, 1, 23, 7 ],
      "decl-vars" : [ ],
      "line-start" : 2031,
      "ast" : {
        "condition" : {
          "go-type" : 70,
          "kind" : "expression",
          "left" : {
            "go-type" : 11,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "i",
              "variable" : 22
            }
          },
          "operator" : "<",
          "right" : {
            "go-type" : 11,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "n",
              "variable" : 21
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "for"
      },
      "assign-vars" : [ ],
      "line-end" : 2034,
      "code" : "for i := uintptr(0); i < n; i += sys.PtrSize {\n\toff := (uintptr(p) + i - datap.bss) / sys.PtrSize\n\tmask[i/sys.PtrSize] = (*addb(bitmap, off/8) >> (off % 8)) & 1\n}",
      "entry" : false,
      "use-vars" : [ 22, 21 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 20 ],
      "in-vars" : [ 7, 4, 21, 1, 23 ],
      "exit" : false,
      "out-vars" : [ 21, 1, 23, 7, 4, 22 ],
      "decl-vars" : [ 22 ],
      "line-start" : 2031,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "i"
          }
        } ],
        "right" : [ {
          "go-type" : 11,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "0"
          }
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 2031,
      "code" : "i := uintptr(0)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ 22 ],
      "successors" : [ 20 ],
      "in-vars" : [ 22, 21, 1, 23, 7, 4 ],
      "exit" : false,
      "out-vars" : [ 23, 7, 4, 22, 21, 1 ],
      "decl-vars" : [ ],
      "line-start" : 2031,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 11,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "i",
            "variable" : 22
          }
        } ],
        "operator" : "+",
        "right" : [ {
          "go-type" : 11,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "8"
          }
        } ],
        "type" : "assign-operator"
      },
      "assign-vars" : [ 22 ],
      "line-end" : 2031,
      "code" : "i += sys.PtrSize",
      "entry" : false,
      "use-vars" : [ 22 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 24 ],
      "in-vars" : [ 21, 1, 23, 7, 4, 22 ],
      "exit" : false,
      "out-vars" : [ 7, 24, 4, 22, 21, 1, 23 ],
      "decl-vars" : [ 24 ],
      "line-start" : 2032,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "off"
          }
        } ],
        "right" : [ {
          "go-type" : 11,
          "kind" : "expression",
          "left" : {
            "go-type" : 11,
            "kind" : "expression",
            "target" : {
              "go-type" : 11,
              "kind" : "expression",
              "left" : {
                "go-type" : 11,
                "kind" : "expression",
                "left" : {
                  "coerced-to" : {
                    "go-type" : 11,
                    "kind" : "type",
                    "type" : "identifier",
                    "value" : {
                      "go-type" : 11,
                      "ident-kind" : "TypeName",
                      "kind" : "ident",
                      "value" : "uintptr"
                    }
                  },
                  "go-type" : 11,
                  "kind" : "expression",
                  "target" : {
                    "go-type" : 17,
                    "kind" : "expression",
                    "type" : "identifier",
                    "value" : {
                      "ident-kind" : "Var",
                      "kind" : "ident",
                      "value" : "p",
                      "variable" : 4
                    }
                  },
                  "type" : "cast"
                },
                "operator" : "+",
                "right" : {
                  "go-type" : 11,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "i",
                    "variable" : 22
                  }
                },
                "type" : "binary"
              },
              "operator" : "-",
              "right" : {
                "field" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "bss",
                  "variable" : 18
                },
                "go-type" : 11,
                "kind" : "expression",
                "target" : {
                  "go-type" : 30,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "datap",
                    "variable" : 7
                  }
                },
                "type" : "selector"
              },
              "type" : "binary"
            },
            "type" : "paren"
          },
          "operator" : "/",
          "right" : {
            "go-type" : 11,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "8"
            }
          },
          "type" : "binary"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 2032,
      "code" : "off := (uintptr(p) + i - datap.bss) / sys.PtrSize",
      "entry" : false,
      "use-vars" : [ 4, 22, 7 ]
    }, {
      "update-vars" : [ 1 ],
      "successors" : [ 22 ],
      "in-vars" : [ 23, 7, 24, 4, 22, 21, 1 ],
      "exit" : false,
      "out-vars" : [ 4, 22, 21, 1, 23, 7 ],
      "decl-vars" : [ ],
      "line-start" : 2033,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 5,
          "index" : {
            "go-type" : 11,
            "kind" : "expression",
            "left" : {
              "go-type" : 11,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "i",
                "variable" : 22
              }
            },
            "operator" : "/",
            "right" : {
              "go-type" : 11,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "8"
              }
            },
            "type" : "binary"
          },
          "kind" : "expression",
          "target" : {
            "go-type" : 4,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "mask",
              "variable" : 1
            }
          },
          "type" : "index"
        } ],
        "right" : [ {
          "go-type" : 5,
          "kind" : "expression",
          "left" : {
            "go-type" : 5,
            "kind" : "expression",
            "target" : {
              "go-type" : 5,
              "kind" : "expression",
              "left" : {
                "go-type" : 5,
                "kind" : "expression",
                "target" : {
                  "arguments" : [ {
                    "go-type" : 65,
                    "kind" : "expression",
                    "type" : "identifier",
                    "value" : {
                      "ident-kind" : "Var",
                      "kind" : "ident",
                      "value" : "bitmap",
                      "variable" : 23
                    }
                  }, {
                    "go-type" : 11,
                    "kind" : "expression",
                    "left" : {
                      "go-type" : 11,
                      "kind" : "expression",
                      "type" : "identifier",
                      "value" : {
                        "ident-kind" : "Var",
                        "kind" : "ident",
                        "value" : "off",
                        "variable" : 24
                      }
                    },
                    "operator" : "/",
                    "right" : {
                      "go-type" : 11,
                      "kind" : "constant",
                      "value" : {
                        "type" : "INT",
                        "value" : "8"
                      }
                    },
                    "type" : "binary"
                  } ],
                  "ellipsis" : false,
                  "function" : {
                    "go-type" : 74,
                    "kind" : "expression",
                    "type" : "identifier",
                    "value" : {
                      "function" : 3,
                      "ident-kind" : "Func",
                      "kind" : "ident",
                      "value" : "addb"
                    }
                  },
                  "go-type" : 20,
                  "kind" : "expression",
                  "type" : "call"
                },
                "type" : "star"
              },
              "operator" : ">>",
              "right" : {
                "go-type" : 11,
                "kind" : "expression",
                "target" : {
                  "go-type" : 11,
                  "kind" : "expression",
                  "left" : {
                    "go-type" : 11,
                    "kind" : "expression",
                    "type" : "identifier",
                    "value" : {
                      "ident-kind" : "Var",
                      "kind" : "ident",
                      "value" : "off",
                      "variable" : 24
                    }
                  },
                  "operator" : "%",
                  "right" : {
                    "go-type" : 11,
                    "kind" : "constant",
                    "value" : {
                      "type" : "INT",
                      "value" : "8"
                    }
                  },
                  "type" : "binary"
                },
                "type" : "paren"
              },
              "type" : "binary"
            },
            "type" : "paren"
          },
          "operator" : "&",
          "right" : {
            "go-type" : 5,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "1"
            }
          },
          "type" : "binary"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 2033,
      "code" : "mask[i/sys.PtrSize] = (*addb(bitmap, off/8) >> (off % 8)) & 1",
      "entry" : false,
      "use-vars" : [ 24, 1, 22, 23 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 2035,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ ]
      },
      "assign-vars" : [ ],
      "line-end" : 2035,
      "code" : "return",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 28, 42 ],
      "in-vars" : [ 27, 6, 4, 26 ],
      "exit" : false,
      "out-vars" : [ 6, 4, 26, 27 ],
      "decl-vars" : [ ],
      "line-start" : 2040,
      "ast" : {
        "condition" : {
          "go-type" : 70,
          "kind" : "expression",
          "left" : {
            "go-type" : 11,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "base",
              "variable" : 26
            }
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 11,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 2055,
      "code" : "if base, s, _ := findObject(uintptr(p), 0, 0); base != 0 {\n\thbits := heapBitsForAddr(base)\n\tn := s.elemsize\n\tmask = make([]byte, n/sys.PtrSize)\n\tfor i := uintptr(0); i < n; i += sys.PtrSize {\n\t\tif hbits.isPointer() {\n\t\t\tmask[i/sys.PtrSize] = 1\n\t\t}\n\t\tif i != 1*sys.PtrSize && !hbits.morePointers() {\n\t\t\tmask = mask[:i/sys.PtrSize]\n\t\t\tbreak\n\t\t}\n\t\thbits = hbits.next()\n\t}\n\treturn\n}",
      "entry" : false,
      "use-vars" : [ 26 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 26 ],
      "in-vars" : [ 6, 4 ],
      "exit" : false,
      "out-vars" : [ 26, 27, 6, 4 ],
      "decl-vars" : [ 26, 32, 27 ],
      "line-start" : 2040,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "base"
          }
        }, {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "s"
          }
        }, {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "_"
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "coerced-to" : {
              "go-type" : 11,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 11,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "uintptr"
              }
            },
            "go-type" : 11,
            "kind" : "expression",
            "target" : {
              "go-type" : 17,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "p",
                "variable" : 4
              }
            },
            "type" : "cast"
          }, {
            "go-type" : 11,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          }, {
            "go-type" : 11,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 99,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 4,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "findObject"
            }
          },
          "go-type" : 78,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 2040,
      "code" : "base, s, _ := findObject(uintptr(p), 0, 0)",
      "entry" : false,
      "use-vars" : [ 4 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 29 ],
      "in-vars" : [ 26, 27 ],
      "exit" : false,
      "out-vars" : [ 27, 31 ],
      "decl-vars" : [ 31 ],
      "line-start" : 2041,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "hbits"
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 11,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "base",
              "variable" : 26
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 103,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 5,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "heapBitsForAddr"
            }
          },
          "go-type" : 101,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 2041,
      "code" : "hbits := heapBitsForAddr(base)",
      "entry" : false,
      "use-vars" : [ 26 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 30 ],
      "in-vars" : [ 27, 31 ],
      "exit" : false,
      "out-vars" : [ 31, 29 ],
      "decl-vars" : [ 29 ],
      "line-start" : 2042,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "n"
          }
        } ],
        "right" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "elemsize",
            "variable" : 28
          },
          "go-type" : 11,
          "kind" : "expression",
          "target" : {
            "go-type" : 79,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "s",
              "variable" : 27
            }
          },
          "type" : "selector"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 2042,
      "code" : "n := s.elemsize",
      "entry" : false,
      "use-vars" : [ 27 ]
    }, {
      "update-vars" : [ 1 ],
      "successors" : [ 32 ],
      "in-vars" : [ 31, 29 ],
      "exit" : false,
      "out-vars" : [ 31, 29, 1 ],
      "decl-vars" : [ ],
      "line-start" : 2043,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 4,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "mask",
            "variable" : 1
          }
        } ],
        "right" : [ {
          "argument" : {
            "element" : {
              "go-type" : 5,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 5,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "byte"
              }
            },
            "go-type" : 4,
            "kind" : "type",
            "type" : "slice"
          },
          "go-type" : 4,
          "kind" : "expression",
          "rest" : [ {
            "go-type" : 11,
            "kind" : "expression",
            "left" : {
              "go-type" : 11,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "n",
                "variable" : 29
              }
            },
            "operator" : "/",
            "right" : {
              "go-type" : 11,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "8"
              }
            },
            "type" : "binary"
          } ],
          "type" : "make"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 1 ],
      "line-end" : 2043,
      "code" : "mask = make([]byte, n/sys.PtrSize)",
      "entry" : false,
      "use-vars" : [ 29 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 34, 40 ],
      "in-vars" : [ 31, 29, 30, 1 ],
      "exit" : false,
      "out-vars" : [ 31, 29, 30, 1 ],
      "decl-vars" : [ ],
      "line-start" : 2044,
      "ast" : {
        "condition" : {
          "go-type" : 70,
          "kind" : "expression",
          "left" : {
            "go-type" : 11,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "i",
              "variable" : 30
            }
          },
          "operator" : "<",
          "right" : {
            "go-type" : 11,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "n",
              "variable" : 29
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "for"
      },
      "assign-vars" : [ ],
      "line-end" : 2053,
      "code" : "for i := uintptr(0); i < n; i += sys.PtrSize {\n\tif hbits.isPointer() {\n\t\tmask[i/sys.PtrSize] = 1\n\t}\n\tif i != 1*sys.PtrSize && !hbits.morePointers() {\n\t\tmask = mask[:i/sys.PtrSize]\n\t\tbreak\n\t}\n\thbits = hbits.next()\n}",
      "entry" : false,
      "use-vars" : [ 30, 29 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 31 ],
      "in-vars" : [ 31, 29, 1 ],
      "exit" : false,
      "out-vars" : [ 31, 29, 30, 1 ],
      "decl-vars" : [ 30 ],
      "line-start" : 2044,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "i"
          }
        } ],
        "right" : [ {
          "go-type" : 11,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "0"
          }
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 2044,
      "code" : "i := uintptr(0)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ 30 ],
      "successors" : [ 31 ],
      "in-vars" : [ 1, 31, 29, 30 ],
      "exit" : false,
      "out-vars" : [ 31, 29, 30, 1 ],
      "decl-vars" : [ ],
      "line-start" : 2044,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 11,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "i",
            "variable" : 30
          }
        } ],
        "operator" : "+",
        "right" : [ {
          "go-type" : 11,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "8"
          }
        } ],
        "type" : "assign-operator"
      },
      "assign-vars" : [ 30 ],
      "line-end" : 2044,
      "code" : "i += sys.PtrSize",
      "entry" : false,
      "use-vars" : [ 30 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 35, 36 ],
      "in-vars" : [ 31, 29, 30, 1 ],
      "exit" : false,
      "out-vars" : [ 31, 29, 30, 1 ],
      "decl-vars" : [ ],
      "line-start" : 2045,
      "ast" : {
        "condition" : {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "function" : 6,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "isPointer"
            },
            "go-type" : 106,
            "kind" : "expression",
            "target" : {
              "go-type" : 101,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "hbits",
                "variable" : 31
              }
            },
            "type" : "selector"
          },
          "go-type" : 19,
          "kind" : "expression",
          "type" : "call"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 2047,
      "code" : "if hbits.isPointer() {\n\tmask[i/sys.PtrSize] = 1\n}",
      "entry" : false,
      "use-vars" : [ 31 ]
    }, {
      "update-vars" : [ 1 ],
      "successors" : [ 36 ],
      "in-vars" : [ 31, 29, 30, 1 ],
      "exit" : false,
      "out-vars" : [ 31, 29, 30, 1 ],
      "decl-vars" : [ ],
      "line-start" : 2046,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 5,
          "index" : {
            "go-type" : 11,
            "kind" : "expression",
            "left" : {
              "go-type" : 11,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "i",
                "variable" : 30
              }
            },
            "operator" : "/",
            "right" : {
              "go-type" : 11,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "8"
              }
            },
            "type" : "binary"
          },
          "kind" : "expression",
          "target" : {
            "go-type" : 4,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "mask",
              "variable" : 1
            }
          },
          "type" : "index"
        } ],
        "right" : [ {
          "go-type" : 5,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "1"
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 2046,
      "code" : "mask[i/sys.PtrSize] = 1",
      "entry" : false,
      "use-vars" : [ 30, 1 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 37, 39 ],
      "in-vars" : [ 31, 29, 30, 1 ],
      "exit" : false,
      "out-vars" : [ 31, 29, 30, 1 ],
      "decl-vars" : [ ],
      "line-start" : 2048,
      "ast" : {
        "condition" : {
          "go-type" : 19,
          "kind" : "expression",
          "left" : {
            "go-type" : 19,
            "kind" : "expression",
            "left" : {
              "go-type" : 11,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "i",
                "variable" : 30
              }
            },
            "operator" : "!=",
            "right" : {
              "go-type" : 11,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "8"
              }
            },
            "type" : "binary"
          },
          "operator" : "&&",
          "right" : {
            "go-type" : 19,
            "kind" : "expression",
            "operator" : "!",
            "target" : {
              "arguments" : [ ],
              "ellipsis" : false,
              "function" : {
                "field" : {
                  "function" : 7,
                  "ident-kind" : "Func",
                  "kind" : "ident",
                  "value" : "morePointers"
                },
                "go-type" : 106,
                "kind" : "expression",
                "target" : {
                  "go-type" : 101,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "hbits",
                    "variable" : 31
                  }
                },
                "type" : "selector"
              },
              "go-type" : 19,
              "kind" : "expression",
              "type" : "call"
            },
            "type" : "unary"
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 2051,
      "code" : "if i != 1*sys.PtrSize && !hbits.morePointers() {\n\tmask = mask[:i/sys.PtrSize]\n\tbreak\n}",
      "entry" : false,
      "use-vars" : [ 30, 31 ]
    }, {
      "update-vars" : [ 1 ],
      "successors" : [ 38 ],
      "in-vars" : [ 30, 1 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 2049,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 4,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "mask",
            "variable" : 1
          }
        } ],
        "right" : [ {
          "go-type" : 4,
          "type" : "slice",
          "three" : false,
          "high" : {
            "go-type" : 11,
            "kind" : "expression",
            "left" : {
              "go-type" : 11,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "i",
                "variable" : 30
              }
            },
            "operator" : "/",
            "right" : {
              "go-type" : 11,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "8"
              }
            },
            "type" : "binary"
          },
          "max" : null,
          "kind" : "expression",
          "low" : null,
          "target" : {
            "go-type" : 4,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "mask",
              "variable" : 1
            }
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 1 ],
      "line-end" : 2049,
      "code" : "mask = mask[:i/sys.PtrSize]",
      "entry" : false,
      "use-vars" : [ 1, 30 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 40 ],
      "in-vars" : [ ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 2050,
      "ast" : {
        "kind" : "statement",
        "label" : null,
        "type" : "break"
      },
      "assign-vars" : [ ],
      "line-end" : 2050,
      "code" : "break",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ 31 ],
      "successors" : [ 33 ],
      "in-vars" : [ 31, 29, 30, 1 ],
      "exit" : false,
      "out-vars" : [ 31, 29, 30, 1 ],
      "decl-vars" : [ ],
      "line-start" : 2052,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 101,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "hbits",
            "variable" : 31
          }
        } ],
        "right" : [ {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "function" : 8,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "next"
            },
            "go-type" : 107,
            "kind" : "expression",
            "target" : {
              "go-type" : 101,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "hbits",
                "variable" : 31
              }
            },
            "type" : "selector"
          },
          "go-type" : 101,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 31 ],
      "line-end" : 2052,
      "code" : "hbits = hbits.next()",
      "entry" : false,
      "use-vars" : [ 31 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 2054,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ ]
      },
      "assign-vars" : [ ],
      "line-end" : 2054,
      "code" : "return",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 43, 60 ],
      "in-vars" : [ 4, 33, 6 ],
      "exit" : false,
      "out-vars" : [ 6, 4 ],
      "decl-vars" : [ ],
      "line-start" : 2058,
      "ast" : {
        "condition" : {
          "go-type" : 70,
          "kind" : "expression",
          "left" : {
            "go-type" : 70,
            "kind" : "expression",
            "left" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "lo",
                "variable" : 37
              },
              "go-type" : 11,
              "kind" : "expression",
              "target" : {
                "field" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "stack",
                  "variable" : 36
                },
                "go-type" : 112,
                "kind" : "expression",
                "target" : {
                  "field" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "curg",
                    "variable" : 35
                  },
                  "go-type" : 109,
                  "kind" : "expression",
                  "target" : {
                    "field" : {
                      "ident-kind" : "Var",
                      "kind" : "ident",
                      "value" : "m",
                      "variable" : 34
                    },
                    "go-type" : 123,
                    "kind" : "expression",
                    "target" : {
                      "go-type" : 109,
                      "kind" : "expression",
                      "type" : "identifier",
                      "value" : {
                        "ident-kind" : "Var",
                        "kind" : "ident",
                        "value" : "_g_",
                        "variable" : 33
                      }
                    },
                    "type" : "selector"
                  },
                  "type" : "selector"
                },
                "type" : "selector"
              },
              "type" : "selector"
            },
            "operator" : "<=",
            "right" : {
              "coerced-to" : {
                "go-type" : 11,
                "kind" : "type",
                "type" : "identifier",
                "value" : {
                  "go-type" : 11,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "uintptr"
                }
              },
              "go-type" : 11,
              "kind" : "expression",
              "target" : {
                "go-type" : 17,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "p",
                  "variable" : 4
                }
              },
              "type" : "cast"
            },
            "type" : "binary"
          },
          "operator" : "&&",
          "right" : {
            "go-type" : 70,
            "kind" : "expression",
            "left" : {
              "coerced-to" : {
                "go-type" : 11,
                "kind" : "type",
                "type" : "identifier",
                "value" : {
                  "go-type" : 11,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "uintptr"
                }
              },
              "go-type" : 11,
              "kind" : "expression",
              "target" : {
                "go-type" : 17,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "p",
                  "variable" : 4
                }
              },
              "type" : "cast"
            },
            "operator" : "<",
            "right" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "hi",
                "variable" : 38
              },
              "go-type" : 11,
              "kind" : "expression",
              "target" : {
                "field" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "stack",
                  "variable" : 36
                },
                "go-type" : 112,
                "kind" : "expression",
                "target" : {
                  "field" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "curg",
                    "variable" : 35
                  },
                  "go-type" : 109,
                  "kind" : "expression",
                  "target" : {
                    "field" : {
                      "ident-kind" : "Var",
                      "kind" : "ident",
                      "value" : "m",
                      "variable" : 34
                    },
                    "go-type" : 123,
                    "kind" : "expression",
                    "target" : {
                      "go-type" : 109,
                      "kind" : "expression",
                      "type" : "identifier",
                      "value" : {
                        "ident-kind" : "Var",
                        "kind" : "ident",
                        "value" : "_g_",
                        "variable" : 33
                      }
                    },
                    "type" : "selector"
                  },
                  "type" : "selector"
                },
                "type" : "selector"
              },
              "type" : "selector"
            },
            "type" : "binary"
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 2077,
      "code" : "if _g_ := getg(); _g_.m.curg.stack.lo <= uintptr(p) && uintptr(p) < _g_.m.curg.stack.hi {\n\tvar frame stkframe\n\tframe.sp = uintptr(p)\n\t_g_ := getg()\n\tgentraceback(_g_.m.curg.sched.pc, _g_.m.curg.sched.sp, 0, _g_.m.curg, 0, nil, 1000, getgcmaskcb, noescape(unsafe.Pointer(&frame)), 0)\n\tif frame.fn.valid() {\n\t\tlocals, _, _ := getStackMap(&frame, nil, false)\n\t\tif locals.n == 0 {\n\t\t\treturn\n\t\t}\n\t\tsize := uintptr(locals.n) * sys.PtrSize\n\t\tn := (*ptrtype)(unsafe.Pointer(t)).elem.size\n\t\tmask = make([]byte, n/sys.PtrSize)\n\t\tfor i := uintptr(0); i < n; i += sys.PtrSize {\n\t\t\toff := (uintptr(p) + i - frame.varp + size) / sys.PtrSize\n\t\t\tmask[i/sys.PtrSize] = locals.ptrbit(off)\n\t\t}\n\t}\n\treturn\n}",
      "entry" : false,
      "use-vars" : [ 4, 33 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 41 ],
      "in-vars" : [ 6, 4 ],
      "exit" : false,
      "out-vars" : [ 6, 4, 33 ],
      "decl-vars" : [ 33 ],
      "line-start" : 2058,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "_g_"
          }
        } ],
        "right" : [ {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 179,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 9,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "getg"
            }
          },
          "go-type" : 109,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 2058,
      "code" : "_g_ := getg()",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 44 ],
      "in-vars" : [ 4, 6 ],
      "exit" : false,
      "out-vars" : [ 6, 4, 39 ],
      "decl-vars" : [ 39 ],
      "line-start" : 2059,
      "ast" : {
        "kind" : "statement",
        "target" : {
          "kind" : "decl",
          "specs" : [ {
            "comments" : [ ],
            "declared-type" : {
              "go-type" : 181,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 181,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "stkframe"
              }
            },
            "kind" : "spec",
            "names" : [ {
              "ident-kind" : "NoKind",
              "kind" : "ident",
              "value" : "frame"
            } ],
            "type" : "var",
            "values" : [ ]
          } ],
          "type" : "var"
        },
        "type" : "declaration"
      },
      "assign-vars" : [ ],
      "line-end" : 2059,
      "code" : "var frame stkframe",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ 39 ],
      "successors" : [ 45 ],
      "in-vars" : [ 6, 4, 39 ],
      "exit" : false,
      "out-vars" : [ 4, 39, 6 ],
      "decl-vars" : [ ],
      "line-start" : 2060,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "sp",
            "variable" : 40
          },
          "go-type" : 11,
          "kind" : "expression",
          "target" : {
            "go-type" : 181,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "frame",
              "variable" : 39
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "coerced-to" : {
            "go-type" : 11,
            "kind" : "type",
            "type" : "identifier",
            "value" : {
              "go-type" : 11,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "uintptr"
            }
          },
          "go-type" : 11,
          "kind" : "expression",
          "target" : {
            "go-type" : 17,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "p",
              "variable" : 4
            }
          },
          "type" : "cast"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 2060,
      "code" : "frame.sp = uintptr(p)",
      "entry" : false,
      "use-vars" : [ 4, 39 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 46 ],
      "in-vars" : [ 6, 4, 39 ],
      "exit" : false,
      "out-vars" : [ 6, 4, 39, 41 ],
      "decl-vars" : [ 41 ],
      "line-start" : 2061,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "_g_"
          }
        } ],
        "right" : [ {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 179,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 9,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "getg"
            }
          },
          "go-type" : 109,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 2061,
      "code" : "_g_ := getg()",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 47 ],
      "in-vars" : [ 6, 4, 39, 41 ],
      "exit" : false,
      "out-vars" : [ 6, 4, 39 ],
      "decl-vars" : [ ],
      "line-start" : 2062,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "pc",
              "variable" : 43
            },
            "go-type" : 11,
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "sched",
                "variable" : 42
              },
              "go-type" : 126,
              "kind" : "expression",
              "target" : {
                "field" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "curg",
                  "variable" : 35
                },
                "go-type" : 109,
                "kind" : "expression",
                "target" : {
                  "field" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "m",
                    "variable" : 34
                  },
                  "go-type" : 123,
                  "kind" : "expression",
                  "target" : {
                    "go-type" : 109,
                    "kind" : "expression",
                    "type" : "identifier",
                    "value" : {
                      "ident-kind" : "Var",
                      "kind" : "ident",
                      "value" : "_g_",
                      "variable" : 41
                    }
                  },
                  "type" : "selector"
                },
                "type" : "selector"
              },
              "type" : "selector"
            },
            "type" : "selector"
          }, {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "sp",
              "variable" : 44
            },
            "go-type" : 11,
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "sched",
                "variable" : 42
              },
              "go-type" : 126,
              "kind" : "expression",
              "target" : {
                "field" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "curg",
                  "variable" : 35
                },
                "go-type" : 109,
                "kind" : "expression",
                "target" : {
                  "field" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "m",
                    "variable" : 34
                  },
                  "go-type" : 123,
                  "kind" : "expression",
                  "target" : {
                    "go-type" : 109,
                    "kind" : "expression",
                    "type" : "identifier",
                    "value" : {
                      "ident-kind" : "Var",
                      "kind" : "ident",
                      "value" : "_g_",
                      "variable" : 41
                    }
                  },
                  "type" : "selector"
                },
                "type" : "selector"
              },
              "type" : "selector"
            },
            "type" : "selector"
          }, {
            "go-type" : 11,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          }, {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "curg",
              "variable" : 35
            },
            "go-type" : 109,
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "m",
                "variable" : 34
              },
              "go-type" : 123,
              "kind" : "expression",
              "target" : {
                "go-type" : 109,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "_g_",
                  "variable" : 41
                }
              },
              "type" : "selector"
            },
            "type" : "selector"
          }, {
            "go-type" : 77,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          }, {
            "go-type" : 198,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Nil",
              "kind" : "ident",
              "value" : "nil"
            }
          }, {
            "go-type" : 77,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "1000"
            }
          }, {
            "go-type" : 199,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 11,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "getgcmaskcb"
            }
          }, {
            "arguments" : [ {
              "coerced-to" : {
                "go-type" : 17,
                "kind" : "type",
                "qualifier" : {
                  "ident-kind" : "PkgName",
                  "kind" : "ident",
                  "package" : 1,
                  "value" : "unsafe"
                },
                "type" : "identifier",
                "value" : {
                  "go-type" : 17,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "Pointer"
                }
              },
              "go-type" : 17,
              "kind" : "expression",
              "target" : {
                "go-type" : 196,
                "kind" : "expression",
                "operator" : "&",
                "target" : {
                  "go-type" : 181,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "frame",
                    "variable" : 39
                  }
                },
                "type" : "unary"
              },
              "type" : "cast"
            } ],
            "ellipsis" : false,
            "function" : {
              "go-type" : 201,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "function" : 12,
                "ident-kind" : "Func",
                "kind" : "ident",
                "value" : "noescape"
              }
            },
            "go-type" : 17,
            "kind" : "expression",
            "type" : "call"
          }, {
            "go-type" : 171,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 191,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 10,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "gentraceback"
            }
          },
          "go-type" : 77,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 2062,
      "code" : "gentraceback(_g_.m.curg.sched.pc, _g_.m.curg.sched.sp, 0, _g_.m.curg, 0, nil, 1000, getgcmaskcb, noescape(unsafe.Pointer(&frame)), 0)",
      "entry" : false,
      "use-vars" : [ 41, 39 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 48, 59 ],
      "in-vars" : [ 6, 4, 39 ],
      "exit" : false,
      "out-vars" : [ 6, 4, 39 ],
      "decl-vars" : [ ],
      "line-start" : 2063,
      "ast" : {
        "condition" : {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "function" : 13,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "valid"
            },
            "go-type" : 106,
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "fn",
                "variable" : 45
              },
              "go-type" : 183,
              "kind" : "expression",
              "target" : {
                "go-type" : 181,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "frame",
                  "variable" : 39
                }
              },
              "type" : "selector"
            },
            "type" : "selector"
          },
          "go-type" : 19,
          "kind" : "expression",
          "type" : "call"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 2075,
      "code" : "if frame.fn.valid() {\n\tlocals, _, _ := getStackMap(&frame, nil, false)\n\tif locals.n == 0 {\n\t\treturn\n\t}\n\tsize := uintptr(locals.n) * sys.PtrSize\n\tn := (*ptrtype)(unsafe.Pointer(t)).elem.size\n\tmask = make([]byte, n/sys.PtrSize)\n\tfor i := uintptr(0); i < n; i += sys.PtrSize {\n\t\toff := (uintptr(p) + i - frame.varp + size) / sys.PtrSize\n\t\tmask[i/sys.PtrSize] = locals.ptrbit(off)\n\t}\n}",
      "entry" : false,
      "use-vars" : [ 39 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 49 ],
      "in-vars" : [ 6, 4, 39 ],
      "exit" : false,
      "out-vars" : [ 39, 46, 6, 4 ],
      "decl-vars" : [ 53, 54, 46 ],
      "line-start" : 2064,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "locals"
          }
        }, {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "_"
          }
        }, {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "_"
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 196,
            "kind" : "expression",
            "operator" : "&",
            "target" : {
              "go-type" : 181,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "frame",
                "variable" : 39
              }
            },
            "type" : "unary"
          }, {
            "go-type" : 198,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Nil",
              "kind" : "ident",
              "value" : "nil"
            }
          }, {
            "go-type" : 19,
            "kind" : "constant",
            "value" : {
              "type" : "BOOL",
              "value" : "false"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 208,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 14,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "getStackMap"
            }
          },
          "go-type" : 204,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 2064,
      "code" : "locals, _, _ := getStackMap(&frame, nil, false)",
      "entry" : false,
      "use-vars" : [ 39 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 50, 51 ],
      "in-vars" : [ 6, 4, 39, 46 ],
      "exit" : false,
      "out-vars" : [ 6, 4, 39, 46 ],
      "decl-vars" : [ ],
      "line-start" : 2065,
      "ast" : {
        "condition" : {
          "go-type" : 70,
          "kind" : "expression",
          "left" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "n",
              "variable" : 47
            },
            "go-type" : 22,
            "kind" : "expression",
            "target" : {
              "go-type" : 63,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "locals",
                "variable" : 46
              }
            },
            "type" : "selector"
          },
          "operator" : "==",
          "right" : {
            "go-type" : 22,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 2067,
      "code" : "if locals.n == 0 {\n\treturn\n}",
      "entry" : false,
      "use-vars" : [ 46 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 2066,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ ]
      },
      "assign-vars" : [ ],
      "line-end" : 2066,
      "code" : "return",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 52 ],
      "in-vars" : [ 4, 39, 46, 6 ],
      "exit" : false,
      "out-vars" : [ 4, 39, 46, 51, 6 ],
      "decl-vars" : [ 51 ],
      "line-start" : 2068,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "size"
          }
        } ],
        "right" : [ {
          "go-type" : 11,
          "kind" : "expression",
          "left" : {
            "coerced-to" : {
              "go-type" : 11,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 11,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "uintptr"
              }
            },
            "go-type" : 11,
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "n",
                "variable" : 47
              },
              "go-type" : 22,
              "kind" : "expression",
              "target" : {
                "go-type" : 63,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "locals",
                  "variable" : 46
                }
              },
              "type" : "selector"
            },
            "type" : "cast"
          },
          "operator" : "*",
          "right" : {
            "go-type" : 11,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "8"
            }
          },
          "type" : "binary"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 2068,
      "code" : "size := uintptr(locals.n) * sys.PtrSize",
      "entry" : false,
      "use-vars" : [ 46 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 53 ],
      "in-vars" : [ 51, 6, 4, 39, 46 ],
      "exit" : false,
      "out-vars" : [ 51, 48, 4, 39, 46 ],
      "decl-vars" : [ 48 ],
      "line-start" : 2069,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "n"
          }
        } ],
        "right" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "size",
            "variable" : 13
          },
          "go-type" : 11,
          "kind" : "expression",
          "target" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "elem",
              "variable" : 12
            },
            "go-type" : 8,
            "kind" : "expression",
            "target" : {
              "coerced-to" : {
                "contained" : {
                  "go-type" : 72,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 72,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "ptrtype"
                  }
                },
                "go-type" : 71,
                "kind" : "type",
                "type" : "pointer"
              },
              "go-type" : 71,
              "kind" : "expression",
              "target" : {
                "coerced-to" : {
                  "go-type" : 17,
                  "kind" : "type",
                  "qualifier" : {
                    "ident-kind" : "PkgName",
                    "kind" : "ident",
                    "package" : 1,
                    "value" : "unsafe"
                  },
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 17,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "Pointer"
                  }
                },
                "go-type" : 17,
                "kind" : "expression",
                "target" : {
                  "go-type" : 8,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "t",
                    "variable" : 6
                  }
                },
                "type" : "cast"
              },
              "type" : "cast"
            },
            "type" : "selector"
          },
          "type" : "selector"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 2069,
      "code" : "n := (*ptrtype)(unsafe.Pointer(t)).elem.size",
      "entry" : false,
      "use-vars" : [ 6 ]
    }, {
      "update-vars" : [ 1 ],
      "successors" : [ 55 ],
      "in-vars" : [ 46, 51, 48, 4, 39 ],
      "exit" : false,
      "out-vars" : [ 51, 1, 48, 4, 39, 46 ],
      "decl-vars" : [ ],
      "line-start" : 2070,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 4,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "mask",
            "variable" : 1
          }
        } ],
        "right" : [ {
          "argument" : {
            "element" : {
              "go-type" : 5,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 5,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "byte"
              }
            },
            "go-type" : 4,
            "kind" : "type",
            "type" : "slice"
          },
          "go-type" : 4,
          "kind" : "expression",
          "rest" : [ {
            "go-type" : 11,
            "kind" : "expression",
            "left" : {
              "go-type" : 11,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "n",
                "variable" : 48
              }
            },
            "operator" : "/",
            "right" : {
              "go-type" : 11,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "8"
              }
            },
            "type" : "binary"
          } ],
          "type" : "make"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 1 ],
      "line-end" : 2070,
      "code" : "mask = make([]byte, n/sys.PtrSize)",
      "entry" : false,
      "use-vars" : [ 48 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 57, 59 ],
      "in-vars" : [ 39, 49, 46, 51, 1, 48, 4 ],
      "exit" : false,
      "out-vars" : [ 49, 46, 51, 1, 48, 4, 39 ],
      "decl-vars" : [ ],
      "line-start" : 2071,
      "ast" : {
        "condition" : {
          "go-type" : 70,
          "kind" : "expression",
          "left" : {
            "go-type" : 11,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "i",
              "variable" : 49
            }
          },
          "operator" : "<",
          "right" : {
            "go-type" : 11,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "n",
              "variable" : 48
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "for"
      },
      "assign-vars" : [ ],
      "line-end" : 2074,
      "code" : "for i := uintptr(0); i < n; i += sys.PtrSize {\n\toff := (uintptr(p) + i - frame.varp + size) / sys.PtrSize\n\tmask[i/sys.PtrSize] = locals.ptrbit(off)\n}",
      "entry" : false,
      "use-vars" : [ 48, 49 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 54 ],
      "in-vars" : [ 46, 51, 1, 48, 4, 39 ],
      "exit" : false,
      "out-vars" : [ 39, 49, 46, 51, 1, 48, 4 ],
      "decl-vars" : [ 49 ],
      "line-start" : 2071,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "i"
          }
        } ],
        "right" : [ {
          "go-type" : 11,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "0"
          }
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 2071,
      "code" : "i := uintptr(0)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ 49 ],
      "successors" : [ 54 ],
      "in-vars" : [ 4, 39, 49, 46, 51, 1, 48 ],
      "exit" : false,
      "out-vars" : [ 48, 4, 39, 49, 46, 51, 1 ],
      "decl-vars" : [ ],
      "line-start" : 2071,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 11,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "i",
            "variable" : 49
          }
        } ],
        "operator" : "+",
        "right" : [ {
          "go-type" : 11,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "8"
          }
        } ],
        "type" : "assign-operator"
      },
      "assign-vars" : [ 49 ],
      "line-end" : 2071,
      "code" : "i += sys.PtrSize",
      "entry" : false,
      "use-vars" : [ 49 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 58 ],
      "in-vars" : [ 4, 39, 49, 46, 51, 1, 48 ],
      "exit" : false,
      "out-vars" : [ 39, 49, 46, 51, 1, 48, 52, 4 ],
      "decl-vars" : [ 52 ],
      "line-start" : 2072,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "off"
          }
        } ],
        "right" : [ {
          "go-type" : 11,
          "kind" : "expression",
          "left" : {
            "go-type" : 11,
            "kind" : "expression",
            "target" : {
              "go-type" : 11,
              "kind" : "expression",
              "left" : {
                "go-type" : 11,
                "kind" : "expression",
                "left" : {
                  "go-type" : 11,
                  "kind" : "expression",
                  "left" : {
                    "coerced-to" : {
                      "go-type" : 11,
                      "kind" : "type",
                      "type" : "identifier",
                      "value" : {
                        "go-type" : 11,
                        "ident-kind" : "TypeName",
                        "kind" : "ident",
                        "value" : "uintptr"
                      }
                    },
                    "go-type" : 11,
                    "kind" : "expression",
                    "target" : {
                      "go-type" : 17,
                      "kind" : "expression",
                      "type" : "identifier",
                      "value" : {
                        "ident-kind" : "Var",
                        "kind" : "ident",
                        "value" : "p",
                        "variable" : 4
                      }
                    },
                    "type" : "cast"
                  },
                  "operator" : "+",
                  "right" : {
                    "go-type" : 11,
                    "kind" : "expression",
                    "type" : "identifier",
                    "value" : {
                      "ident-kind" : "Var",
                      "kind" : "ident",
                      "value" : "i",
                      "variable" : 49
                    }
                  },
                  "type" : "binary"
                },
                "operator" : "-",
                "right" : {
                  "field" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "varp",
                    "variable" : 50
                  },
                  "go-type" : 11,
                  "kind" : "expression",
                  "target" : {
                    "go-type" : 181,
                    "kind" : "expression",
                    "type" : "identifier",
                    "value" : {
                      "ident-kind" : "Var",
                      "kind" : "ident",
                      "value" : "frame",
                      "variable" : 39
                    }
                  },
                  "type" : "selector"
                },
                "type" : "binary"
              },
              "operator" : "+",
              "right" : {
                "go-type" : 11,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "size",
                  "variable" : 51
                }
              },
              "type" : "binary"
            },
            "type" : "paren"
          },
          "operator" : "/",
          "right" : {
            "go-type" : 11,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "8"
            }
          },
          "type" : "binary"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 2072,
      "code" : "off := (uintptr(p) + i - frame.varp + size) / sys.PtrSize",
      "entry" : false,
      "use-vars" : [ 39, 51, 4, 49 ]
    }, {
      "update-vars" : [ 1 ],
      "successors" : [ 56 ],
      "in-vars" : [ 52, 4, 39, 49, 46, 51, 1, 48 ],
      "exit" : false,
      "out-vars" : [ 48, 4, 39, 49, 46, 51, 1 ],
      "decl-vars" : [ ],
      "line-start" : 2073,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 5,
          "index" : {
            "go-type" : 11,
            "kind" : "expression",
            "left" : {
              "go-type" : 11,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "i",
                "variable" : 49
              }
            },
            "operator" : "/",
            "right" : {
              "go-type" : 11,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "8"
              }
            },
            "type" : "binary"
          },
          "kind" : "expression",
          "target" : {
            "go-type" : 4,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "mask",
              "variable" : 1
            }
          },
          "type" : "index"
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 11,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "off",
              "variable" : 52
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "function" : 15,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "ptrbit"
            },
            "go-type" : 217,
            "kind" : "expression",
            "target" : {
              "go-type" : 63,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "locals",
                "variable" : 46
              }
            },
            "type" : "selector"
          },
          "go-type" : 14,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 2073,
      "code" : "mask[i/sys.PtrSize] = locals.ptrbit(off)",
      "entry" : false,
      "use-vars" : [ 1, 49, 46, 52 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 2076,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ ]
      },
      "assign-vars" : [ ],
      "line-end" : 2076,
      "code" : "return",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 2082,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ ]
      },
      "assign-vars" : [ ],
      "line-end" : 2082,
      "code" : "return",
      "entry" : false,
      "use-vars" : [ ]
    } ],
    "code" : "// Returns GC type info for the pointer stored in ep for testing.\n// If ep points to the stack, only static live information will be returned\n// (i.e. not for objects which are only dynamically live stack objects).\nfunc getgcmask(ep interface{}) (mask []byte) {\n\te := *efaceOf(&ep)\n\tp := e.data\n\tt := e._type\n\n\tfor _, datap := range activeModules() {\n\n\t\tif datap.data <= uintptr(p) && uintptr(p) < datap.edata {\n\t\t\tbitmap := datap.gcdatamask.bytedata\n\t\t\tn := (*ptrtype)(unsafe.Pointer(t)).elem.size\n\t\t\tmask = make([]byte, n/sys.PtrSize)\n\t\t\tfor i := uintptr(0); i < n; i += sys.PtrSize {\n\t\t\t\toff := (uintptr(p) + i - datap.data) / sys.PtrSize\n\t\t\t\tmask[i/sys.PtrSize] = (*addb(bitmap, off/8) >> (off % 8)) & 1\n\t\t\t}\n\t\t\treturn\n\t\t}\n\n\t\tif datap.bss <= uintptr(p) && uintptr(p) < datap.ebss {\n\t\t\tbitmap := datap.gcbssmask.bytedata\n\t\t\tn := (*ptrtype)(unsafe.Pointer(t)).elem.size\n\t\t\tmask = make([]byte, n/sys.PtrSize)\n\t\t\tfor i := uintptr(0); i < n; i += sys.PtrSize {\n\t\t\t\toff := (uintptr(p) + i - datap.bss) / sys.PtrSize\n\t\t\t\tmask[i/sys.PtrSize] = (*addb(bitmap, off/8) >> (off % 8)) & 1\n\t\t\t}\n\t\t\treturn\n\t\t}\n\t}\n\n\tif base, s, _ := findObject(uintptr(p), 0, 0); base != 0 {\n\t\thbits := heapBitsForAddr(base)\n\t\tn := s.elemsize\n\t\tmask = make([]byte, n/sys.PtrSize)\n\t\tfor i := uintptr(0); i < n; i += sys.PtrSize {\n\t\t\tif hbits.isPointer() {\n\t\t\t\tmask[i/sys.PtrSize] = 1\n\t\t\t}\n\t\t\tif i != 1*sys.PtrSize && !hbits.morePointers() {\n\t\t\t\tmask = mask[:i/sys.PtrSize]\n\t\t\t\tbreak\n\t\t\t}\n\t\t\thbits = hbits.next()\n\t\t}\n\t\treturn\n\t}\n\n\tif _g_ := getg(); _g_.m.curg.stack.lo <= uintptr(p) && uintptr(p) < _g_.m.curg.stack.hi {\n\t\tvar frame stkframe\n\t\tframe.sp = uintptr(p)\n\t\t_g_ := getg()\n\t\tgentraceback(_g_.m.curg.sched.pc, _g_.m.curg.sched.sp, 0, _g_.m.curg, 0, nil, 1000, getgcmaskcb, noescape(unsafe.Pointer(&frame)), 0)\n\t\tif frame.fn.valid() {\n\t\t\tlocals, _, _ := getStackMap(&frame, nil, false)\n\t\t\tif locals.n == 0 {\n\t\t\t\treturn\n\t\t\t}\n\t\t\tsize := uintptr(locals.n) * sys.PtrSize\n\t\t\tn := (*ptrtype)(unsafe.Pointer(t)).elem.size\n\t\t\tmask = make([]byte, n/sys.PtrSize)\n\t\t\tfor i := uintptr(0); i < n; i += sys.PtrSize {\n\t\t\t\toff := (uintptr(p) + i - frame.varp + size) / sys.PtrSize\n\t\t\t\tmask[i/sys.PtrSize] = locals.ptrbit(off)\n\t\t\t}\n\t\t}\n\t\treturn\n\t}\n\n\treturn\n}",
    "defines" : [ 0 ],
    "functions" : [ {
      "name" : "getgcmask",
      "package" : 0,
      "type" : 0,
      "exported" : false
    }, {
      "name" : "efaceOf",
      "package" : 0,
      "type" : 25,
      "exported" : false
    }, {
      "name" : "activeModules",
      "package" : 0,
      "type" : 67,
      "exported" : false
    }, {
      "name" : "addb",
      "package" : 0,
      "type" : 74,
      "exported" : false
    }, {
      "name" : "findObject",
      "package" : 0,
      "type" : 99,
      "exported" : false
    }, {
      "name" : "heapBitsForAddr",
      "package" : 0,
      "type" : 103,
      "exported" : false
    }, {
      "name" : "isPointer",
      "package" : 0,
      "type" : 106,
      "exported" : false
    }, {
      "name" : "morePointers",
      "package" : 0,
      "type" : 106,
      "exported" : false
    }, {
      "name" : "next",
      "package" : 0,
      "type" : 107,
      "exported" : false
    }, {
      "name" : "getg",
      "package" : 0,
      "type" : 179,
      "exported" : false
    }, {
      "name" : "gentraceback",
      "package" : 0,
      "type" : 191,
      "exported" : false
    }, {
      "name" : "getgcmaskcb",
      "package" : 0,
      "type" : 199,
      "exported" : false
    }, {
      "name" : "noescape",
      "package" : 0,
      "type" : 201,
      "exported" : false
    }, {
      "name" : "valid",
      "package" : 0,
      "type" : 106,
      "exported" : false
    }, {
      "name" : "getStackMap",
      "package" : 0,
      "type" : 208,
      "exported" : false
    }, {
      "name" : "ptrbit",
      "package" : 0,
      "type" : 217,
      "exported" : false
    } ],
    "line-end" : 2083,
    "line-start" : 2008,
    "names" : [ "getgcmask" ],
    "package" : 0,
    "packages" : [ {
      "name" : "runtime",
      "path" : "runtime"
    }, {
      "name" : "unsafe",
      "path" : "unsafe"
    }, {
      "name" : "sys",
      "path" : "runtime/internal/sys"
    } ],
    "params" : [ 0 ],
    "receivers" : [ ],
    "results" : [ 1 ],
    "type" : "function",
    "types" : [ {
      "name" : "func(ep interface{}) (mask []byte)",
      "params" : 1,
      "recv" : -1,
      "results" : 3,
      "type" : "Signature",
      "underlying" : 0,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "ep",
        "type" : 2
      } ],
      "name" : "(ep interface{})",
      "type" : "Tuple",
      "underlying" : 1
    }, {
      "methods" : [ ],
      "name" : "interface{}",
      "type" : "Interface",
      "underlying" : 2
    }, {
      "fields" : [ {
        "name" : "mask",
        "type" : 4
      } ],
      "name" : "(mask []byte)",
      "type" : "Tuple",
      "underlying" : 3
    }, {
      "elem" : 5,
      "name" : "[]byte",
      "type" : "Slice",
      "underlying" : 4
    }, {
      "name" : "byte",
      "type" : "Basic",
      "underlying" : 5
    }, {
      "local-name" : "eface",
      "name" : "runtime.eface",
      "package" : 0,
      "type" : "Named",
      "underlying" : 7
    }, {
      "fields" : [ {
        "name" : "_type",
        "type" : 8
      }, {
        "name" : "data",
        "type" : 17
      } ],
      "name" : "struct{_type *runtime._type; data unsafe.Pointer}",
      "type" : "Struct",
      "underlying" : 7
    }, {
      "elem" : 9,
      "name" : "*runtime._type",
      "type" : "Pointer",
      "underlying" : 8
    }, {
      "local-name" : "_type",
      "name" : "runtime._type",
      "package" : 0,
      "type" : "Named",
      "underlying" : 10
    }, {
      "fields" : [ {
        "name" : "size",
        "type" : 11
      }, {
        "name" : "ptrdata",
        "type" : 11
      }, {
        "name" : "hash",
        "type" : 12
      }, {
        "name" : "tflag",
        "type" : 13
      }, {
        "name" : "align",
        "type" : 14
      }, {
        "name" : "fieldAlign",
        "type" : 14
      }, {
        "name" : "kind",
        "type" : 14
      }, {
        "name" : "equal",
        "type" : 15
      }, {
        "name" : "gcdata",
        "type" : 20
      }, {
        "name" : "str",
        "type" : 21
      }, {
        "name" : "ptrToThis",
        "type" : 23
      } ],
      "name" : "struct{size uintptr; ptrdata uintptr; hash uint32; tflag runtime.tflag; align uint8; fieldAlign uint8; kind uint8; equal func(unsafe.Pointer, unsafe.Pointer) bool; gcdata *byte; str runtime.nameOff; ptrToThis runtime.typeOff}",
      "type" : "Struct",
      "underlying" : 10
    }, {
      "name" : "uintptr",
      "type" : "Basic",
      "underlying" : 11
    }, {
      "name" : "uint32",
      "type" : "Basic",
      "underlying" : 12
    }, {
      "local-name" : "tflag",
      "name" : "runtime.tflag",
      "package" : 0,
      "type" : "Named",
      "underlying" : 14
    }, {
      "name" : "uint8",
      "type" : "Basic",
      "underlying" : 14
    }, {
      "name" : "func(unsafe.Pointer, unsafe.Pointer) bool",
      "params" : 16,
      "recv" : -1,
      "results" : 18,
      "type" : "Signature",
      "underlying" : 15,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 17
      }, {
        "name" : "",
        "type" : 17
      } ],
      "name" : "(unsafe.Pointer, unsafe.Pointer)",
      "type" : "Tuple",
      "underlying" : 16
    }, {
      "local-name" : "Pointer",
      "name" : "unsafe.Pointer",
      "package" : 1,
      "type" : "Basic",
      "underlying" : 17
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 19
      } ],
      "name" : "(bool)",
      "type" : "Tuple",
      "underlying" : 18
    }, {
      "name" : "bool",
      "type" : "Basic",
      "underlying" : 19
    }, {
      "elem" : 5,
      "name" : "*byte",
      "type" : "Pointer",
      "underlying" : 20
    }, {
      "local-name" : "nameOff",
      "name" : "runtime.nameOff",
      "package" : 0,
      "type" : "Named",
      "underlying" : 22
    }, {
      "name" : "int32",
      "type" : "Basic",
      "underlying" : 22
    }, {
      "local-name" : "typeOff",
      "name" : "runtime.typeOff",
      "package" : 0,
      "type" : "Named",
      "underlying" : 22
    }, {
      "elem" : 6,
      "name" : "*runtime.eface",
      "type" : "Pointer",
      "underlying" : 24
    }, {
      "name" : "func(ep *interface{}) *runtime.eface",
      "params" : 26,
      "recv" : -1,
      "results" : 28,
      "type" : "Signature",
      "underlying" : 25,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "ep",
        "type" : 27
      } ],
      "name" : "(ep *interface{})",
      "type" : "Tuple",
      "underlying" : 26
    }, {
      "elem" : 2,
      "name" : "*interface{}",
      "type" : "Pointer",
      "underlying" : 27
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 24
      } ],
      "name" : "(*runtime.eface)",
      "type" : "Tuple",
      "underlying" : 28
    }, {
      "elem" : 30,
      "name" : "[]*runtime.moduledata",
      "type" : "Slice",
      "underlying" : 29
    }, {
      "elem" : 31,
      "name" : "*runtime.moduledata",
      "type" : "Pointer",
      "underlying" : 30
    }, {
      "local-name" : "moduledata",
      "name" : "runtime.moduledata",
      "package" : 0,
      "type" : "Named",
      "underlying" : 32
    }, {
      "fields" : [ {
        "name" : "pclntable",
        "type" : 4
      }, {
        "name" : "ftab",
        "type" : 33
      }, {
        "name" : "filetab",
        "type" : 36
      }, {
        "name" : "findfunctab",
        "type" : 11
      }, {
        "name" : "minpc",
        "type" : 11
      }, {
        "name" : "maxpc",
        "type" : 11
      }, {
        "name" : "text",
        "type" : 11
      }, {
        "name" : "etext",
        "type" : 11
      }, {
        "name" : "noptrdata",
        "type" : 11
      }, {
        "name" : "enoptrdata",
        "type" : 11
      }, {
        "name" : "data",
        "type" : 11
      }, {
        "name" : "edata",
        "type" : 11
      }, {
        "name" : "bss",
        "type" : 11
      }, {
        "name" : "ebss",
        "type" : 11
      }, {
        "name" : "noptrbss",
        "type" : 11
      }, {
        "name" : "enoptrbss",
        "type" : 11
      }, {
        "name" : "end",
        "type" : 11
      }, {
        "name" : "gcdata",
        "type" : 11
      }, {
        "name" : "gcbss",
        "type" : 11
      }, {
        "name" : "types",
        "type" : 11
      }, {
        "name" : "etypes",
        "type" : 11
      }, {
        "name" : "textsectmap",
        "type" : 37
      }, {
        "name" : "typelinks",
        "type" : 40
      }, {
        "name" : "itablinks",
        "type" : 41
      }, {
        "name" : "ptab",
        "type" : 55
      }, {
        "name" : "pluginpath",
        "type" : 58
      }, {
        "name" : "pkghashes",
        "type" : 59
      }, {
        "name" : "modulename",
        "type" : 58
      }, {
        "name" : "modulehashes",
        "type" : 59
      }, {
        "name" : "hasmain",
        "type" : 14
      }, {
        "name" : "gcdatamask",
        "type" : 63
      }, {
        "name" : "gcbssmask",
        "type" : 63
      }, {
        "name" : "typemap",
        "type" : 66
      }, {
        "name" : "bad",
        "type" : 19
      }, {
        "name" : "next",
        "type" : 30
      } ],
      "name" : "struct{pclntable []byte; ftab []runtime.functab; filetab []uint32; findfunctab uintptr; minpc uintptr; maxpc uintptr; text uintptr; etext uintptr; noptrdata uintptr; enoptrdata uintptr; data uintptr; edata uintptr; bss uintptr; ebss uintptr; noptrbss uintptr; enoptrbss uintptr; end uintptr; gcdata uintptr; gcbss uintptr; types uintptr; etypes uintptr; textsectmap []runtime.textsect; typelinks []int32; itablinks []*runtime.itab; ptab []runtime.ptabEntry; pluginpath string; pkghashes []runtime.modulehash; modulename string; modulehashes []runtime.modulehash; hasmain uint8; gcdatamask runtime.bitvector; gcbssmask runtime.bitvector; typemap map[runtime.typeOff]*runtime._type; bad bool; next *runtime.moduledata}",
      "type" : "Struct",
      "underlying" : 32
    }, {
      "elem" : 34,
      "name" : "[]runtime.functab",
      "type" : "Slice",
      "underlying" : 33
    }, {
      "local-name" : "functab",
      "name" : "runtime.functab",
      "package" : 0,
      "type" : "Named",
      "underlying" : 35
    }, {
      "fields" : [ {
        "name" : "entry",
        "type" : 11
      }, {
        "name" : "funcoff",
        "type" : 11
      } ],
      "name" : "struct{entry uintptr; funcoff uintptr}",
      "type" : "Struct",
      "underlying" : 35
    }, {
      "elem" : 12,
      "name" : "[]uint32",
      "type" : "Slice",
      "underlying" : 36
    }, {
      "elem" : 38,
      "name" : "[]runtime.textsect",
      "type" : "Slice",
      "underlying" : 37
    }, {
      "local-name" : "textsect",
      "name" : "runtime.textsect",
      "package" : 0,
      "type" : "Named",
      "underlying" : 39
    }, {
      "fields" : [ {
        "name" : "vaddr",
        "type" : 11
      }, {
        "name" : "length",
        "type" : 11
      }, {
        "name" : "baseaddr",
        "type" : 11
      } ],
      "name" : "struct{vaddr uintptr; length uintptr; baseaddr uintptr}",
      "type" : "Struct",
      "underlying" : 39
    }, {
      "elem" : 22,
      "name" : "[]int32",
      "type" : "Slice",
      "underlying" : 40
    }, {
      "elem" : 42,
      "name" : "[]*runtime.itab",
      "type" : "Slice",
      "underlying" : 41
    }, {
      "elem" : 43,
      "name" : "*runtime.itab",
      "type" : "Pointer",
      "underlying" : 42
    }, {
      "local-name" : "itab",
      "name" : "runtime.itab",
      "package" : 0,
      "type" : "Named",
      "underlying" : 44
    }, {
      "fields" : [ {
        "name" : "inter",
        "type" : 45
      }, {
        "name" : "_type",
        "type" : 8
      }, {
        "name" : "hash",
        "type" : 12
      }, {
        "name" : "_",
        "type" : 53
      }, {
        "name" : "fun",
        "type" : 54
      } ],
      "name" : "struct{inter *runtime.interfacetype; _type *runtime._type; hash uint32; _ [4]byte; fun [1]uintptr}",
      "type" : "Struct",
      "underlying" : 44
    }, {
      "elem" : 46,
      "name" : "*runtime.interfacetype",
      "type" : "Pointer",
      "underlying" : 45
    }, {
      "local-name" : "interfacetype",
      "name" : "runtime.interfacetype",
      "package" : 0,
      "type" : "Named",
      "underlying" : 47
    }, {
      "fields" : [ {
        "name" : "typ",
        "type" : 9
      }, {
        "name" : "pkgpath",
        "type" : 48
      }, {
        "name" : "mhdr",
        "type" : 50
      } ],
      "name" : "struct{typ runtime._type; pkgpath runtime.name; mhdr []runtime.imethod}",
      "type" : "Struct",
      "underlying" : 47
    }, {
      "local-name" : "name",
      "name" : "runtime.name",
      "package" : 0,
      "type" : "Named",
      "underlying" : 49
    }, {
      "fields" : [ {
        "name" : "bytes",
        "type" : 20
      } ],
      "name" : "struct{bytes *byte}",
      "type" : "Struct",
      "underlying" : 49
    }, {
      "elem" : 51,
      "name" : "[]runtime.imethod",
      "type" : "Slice",
      "underlying" : 50
    }, {
      "local-name" : "imethod",
      "name" : "runtime.imethod",
      "package" : 0,
      "type" : "Named",
      "underlying" : 52
    }, {
      "fields" : [ {
        "name" : "name",
        "type" : 21
      }, {
        "name" : "ityp",
        "type" : 23
      } ],
      "name" : "struct{name runtime.nameOff; ityp runtime.typeOff}",
      "type" : "Struct",
      "underlying" : 52
    }, {
      "elem" : 5,
      "name" : "[4]byte",
      "type" : "Array",
      "underlying" : 53
    }, {
      "elem" : 11,
      "name" : "[1]uintptr",
      "type" : "Array",
      "underlying" : 54
    }, {
      "elem" : 56,
      "name" : "[]runtime.ptabEntry",
      "type" : "Slice",
      "underlying" : 55
    }, {
      "local-name" : "ptabEntry",
      "name" : "runtime.ptabEntry",
      "package" : 0,
      "type" : "Named",
      "underlying" : 57
    }, {
      "fields" : [ {
        "name" : "name",
        "type" : 21
      }, {
        "name" : "typ",
        "type" : 23
      } ],
      "name" : "struct{name runtime.nameOff; typ runtime.typeOff}",
      "type" : "Struct",
      "underlying" : 57
    }, {
      "name" : "string",
      "type" : "Basic",
      "underlying" : 58
    }, {
      "elem" : 60,
      "name" : "[]runtime.modulehash",
      "type" : "Slice",
      "underlying" : 59
    }, {
      "local-name" : "modulehash",
      "name" : "runtime.modulehash",
      "package" : 0,
      "type" : "Named",
      "underlying" : 61
    }, {
      "fields" : [ {
        "name" : "modulename",
        "type" : 58
      }, {
        "name" : "linktimehash",
        "type" : 58
      }, {
        "name" : "runtimehash",
        "type" : 62
      } ],
      "name" : "struct{modulename string; linktimehash string; runtimehash *string}",
      "type" : "Struct",
      "underlying" : 61
    }, {
      "elem" : 58,
      "name" : "*string",
      "type" : "Pointer",
      "underlying" : 62
    }, {
      "local-name" : "bitvector",
      "name" : "runtime.bitvector",
      "package" : 0,
      "type" : "Named",
      "underlying" : 64
    }, {
      "fields" : [ {
        "name" : "n",
        "type" : 22
      }, {
        "name" : "bytedata",
        "type" : 65
      } ],
      "name" : "struct{n int32; bytedata *uint8}",
      "type" : "Struct",
      "underlying" : 64
    }, {
      "elem" : 14,
      "name" : "*uint8",
      "type" : "Pointer",
      "underlying" : 65
    }, {
      "elem" : 8,
      "key" : 23,
      "name" : "map[runtime.typeOff]*runtime._type",
      "type" : "Map",
      "underlying" : 66
    }, {
      "name" : "func() []*runtime.moduledata",
      "params" : 68,
      "recv" : -1,
      "results" : 69,
      "type" : "Signature",
      "underlying" : 67,
      "variadic" : false
    }, {
      "fields" : [ ],
      "name" : "()",
      "type" : "Tuple",
      "underlying" : 68
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 29
      } ],
      "name" : "([]*runtime.moduledata)",
      "type" : "Tuple",
      "underlying" : 69
    }, {
      "name" : "untyped bool",
      "type" : "Basic",
      "underlying" : 70
    }, {
      "elem" : 72,
      "name" : "*runtime.ptrtype",
      "type" : "Pointer",
      "underlying" : 71
    }, {
      "local-name" : "ptrtype",
      "name" : "runtime.ptrtype",
      "package" : 0,
      "type" : "Named",
      "underlying" : 73
    }, {
      "fields" : [ {
        "name" : "typ",
        "type" : 9
      }, {
        "name" : "elem",
        "type" : 8
      } ],
      "name" : "struct{typ runtime._type; elem *runtime._type}",
      "type" : "Struct",
      "underlying" : 73
    }, {
      "name" : "func(p *byte, n uintptr) *byte",
      "params" : 75,
      "recv" : -1,
      "results" : 76,
      "type" : "Signature",
      "underlying" : 74,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "p",
        "type" : 20
      }, {
        "name" : "n",
        "type" : 11
      } ],
      "name" : "(p *byte, n uintptr)",
      "type" : "Tuple",
      "underlying" : 75
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 20
      } ],
      "name" : "(*byte)",
      "type" : "Tuple",
      "underlying" : 76
    }, {
      "name" : "int",
      "type" : "Basic",
      "underlying" : 77
    }, {
      "fields" : [ {
        "name" : "base",
        "type" : 11
      }, {
        "name" : "s",
        "type" : 79
      }, {
        "name" : "objIndex",
        "type" : 11
      } ],
      "name" : "(base uintptr, s *runtime.mspan, objIndex uintptr)",
      "type" : "Tuple",
      "underlying" : 78
    }, {
      "elem" : 80,
      "name" : "*runtime.mspan",
      "type" : "Pointer",
      "underlying" : 79
    }, {
      "local-name" : "mspan",
      "name" : "runtime.mspan",
      "package" : 0,
      "type" : "Named",
      "underlying" : 81
    }, {
      "fields" : [ {
        "name" : "next",
        "type" : 79
      }, {
        "name" : "prev",
        "type" : 79
      }, {
        "name" : "list",
        "type" : 82
      }, {
        "name" : "startAddr",
        "type" : 11
      }, {
        "name" : "npages",
        "type" : 11
      }, {
        "name" : "manualFreeList",
        "type" : 85
      }, {
        "name" : "freeindex",
        "type" : 11
      }, {
        "name" : "nelems",
        "type" : 11
      }, {
        "name" : "allocCache",
        "type" : 86
      }, {
        "name" : "allocBits",
        "type" : 87
      }, {
        "name" : "gcmarkBits",
        "type" : 87
      }, {
        "name" : "sweepgen",
        "type" : 12
      }, {
        "name" : "divMul",
        "type" : 89
      }, {
        "name" : "baseMask",
        "type" : 89
      }, {
        "name" : "allocCount",
        "type" : 89
      }, {
        "name" : "spanclass",
        "type" : 90
      }, {
        "name" : "state",
        "type" : 91
      }, {
        "name" : "needzero",
        "type" : 14
      }, {
        "name" : "divShift",
        "type" : 14
      }, {
        "name" : "divShift2",
        "type" : 14
      }, {
        "name" : "elemsize",
        "type" : 11
      }, {
        "name" : "limit",
        "type" : 11
      }, {
        "name" : "speciallock",
        "type" : 94
      }, {
        "name" : "specials",
        "type" : 96
      } ],
      "name" : "struct{next *runtime.mspan; prev *runtime.mspan; list *runtime.mSpanList; startAddr uintptr; npages uintptr; manualFreeList runtime.gclinkptr; freeindex uintptr; nelems uintptr; allocCache uint64; allocBits *runtime.gcBits; gcmarkBits *runtime.gcBits; sweepgen uint32; divMul uint16; baseMask uint16; allocCount uint16; spanclass runtime.spanClass; state runtime.mSpanStateBox; needzero uint8; divShift uint8; divShift2 uint8; elemsize uintptr; limit uintptr; speciallock runtime.mutex; specials *runtime.special}",
      "type" : "Struct",
      "underlying" : 81
    }, {
      "elem" : 83,
      "name" : "*runtime.mSpanList",
      "type" : "Pointer",
      "underlying" : 82
    }, {
      "local-name" : "mSpanList",
      "name" : "runtime.mSpanList",
      "package" : 0,
      "type" : "Named",
      "underlying" : 84
    }, {
      "fields" : [ {
        "name" : "first",
        "type" : 79
      }, {
        "name" : "last",
        "type" : 79
      } ],
      "name" : "struct{first *runtime.mspan; last *runtime.mspan}",
      "type" : "Struct",
      "underlying" : 84
    }, {
      "local-name" : "gclinkptr",
      "name" : "runtime.gclinkptr",
      "package" : 0,
      "type" : "Named",
      "underlying" : 11
    }, {
      "name" : "uint64",
      "type" : "Basic",
      "underlying" : 86
    }, {
      "elem" : 88,
      "name" : "*runtime.gcBits",
      "type" : "Pointer",
      "underlying" : 87
    }, {
      "local-name" : "gcBits",
      "name" : "runtime.gcBits",
      "package" : 0,
      "type" : "Named",
      "underlying" : 14
    }, {
      "name" : "uint16",
      "type" : "Basic",
      "underlying" : 89
    }, {
      "local-name" : "spanClass",
      "name" : "runtime.spanClass",
      "package" : 0,
      "type" : "Named",
      "underlying" : 14
    }, {
      "local-name" : "mSpanStateBox",
      "name" : "runtime.mSpanStateBox",
      "package" : 0,
      "type" : "Named",
      "underlying" : 92
    }, {
      "fields" : [ {
        "name" : "s",
        "type" : 93
      } ],
      "name" : "struct{s runtime.mSpanState}",
      "type" : "Struct",
      "underlying" : 92
    }, {
      "local-name" : "mSpanState",
      "name" : "runtime.mSpanState",
      "package" : 0,
      "type" : "Named",
      "underlying" : 14
    }, {
      "local-name" : "mutex",
      "name" : "runtime.mutex",
      "package" : 0,
      "type" : "Named",
      "underlying" : 95
    }, {
      "fields" : [ {
        "name" : "key",
        "type" : 11
      } ],
      "name" : "struct{key uintptr}",
      "type" : "Struct",
      "underlying" : 95
    }, {
      "elem" : 97,
      "name" : "*runtime.special",
      "type" : "Pointer",
      "underlying" : 96
    }, {
      "local-name" : "special",
      "name" : "runtime.special",
      "package" : 0,
      "type" : "Named",
      "underlying" : 98
    }, {
      "fields" : [ {
        "name" : "next",
        "type" : 96
      }, {
        "name" : "offset",
        "type" : 89
      }, {
        "name" : "kind",
        "type" : 5
      } ],
      "name" : "struct{next *runtime.special; offset uint16; kind byte}",
      "type" : "Struct",
      "underlying" : 98
    }, {
      "name" : "func(p uintptr, refBase uintptr, refOff uintptr) (base uintptr, s *runtime.mspan, objIndex uintptr)",
      "params" : 100,
      "recv" : -1,
      "results" : 78,
      "type" : "Signature",
      "underlying" : 99,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "p",
        "type" : 11
      }, {
        "name" : "refBase",
        "type" : 11
      }, {
        "name" : "refOff",
        "type" : 11
      } ],
      "name" : "(p uintptr, refBase uintptr, refOff uintptr)",
      "type" : "Tuple",
      "underlying" : 100
    }, {
      "local-name" : "heapBits",
      "name" : "runtime.heapBits",
      "package" : 0,
      "type" : "Named",
      "underlying" : 102
    }, {
      "fields" : [ {
        "name" : "bitp",
        "type" : 65
      }, {
        "name" : "shift",
        "type" : 12
      }, {
        "name" : "arena",
        "type" : 12
      }, {
        "name" : "last",
        "type" : 65
      } ],
      "name" : "struct{bitp *uint8; shift uint32; arena uint32; last *uint8}",
      "type" : "Struct",
      "underlying" : 102
    }, {
      "name" : "func(addr uintptr) (h runtime.heapBits)",
      "params" : 104,
      "recv" : -1,
      "results" : 105,
      "type" : "Signature",
      "underlying" : 103,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "addr",
        "type" : 11
      } ],
      "name" : "(addr uintptr)",
      "type" : "Tuple",
      "underlying" : 104
    }, {
      "fields" : [ {
        "name" : "h",
        "type" : 101
      } ],
      "name" : "(h runtime.heapBits)",
      "type" : "Tuple",
      "underlying" : 105
    }, {
      "name" : "func() bool",
      "params" : 68,
      "recv" : -1,
      "results" : 18,
      "type" : "Signature",
      "underlying" : 106,
      "variadic" : false
    }, {
      "name" : "func() runtime.heapBits",
      "params" : 68,
      "recv" : -1,
      "results" : 108,
      "type" : "Signature",
      "underlying" : 107,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 101
      } ],
      "name" : "(runtime.heapBits)",
      "type" : "Tuple",
      "underlying" : 108
    }, {
      "elem" : 110,
      "name" : "*runtime.g",
      "type" : "Pointer",
      "underlying" : 109
    }, {
      "local-name" : "g",
      "name" : "runtime.g",
      "package" : 0,
      "type" : "Named",
      "underlying" : 111
    }, {
      "fields" : [ {
        "name" : "stack",
        "type" : 112
      }, {
        "name" : "stackguard0",
        "type" : 11
      }, {
        "name" : "stackguard1",
        "type" : 11
      }, {
        "name" : "_panic",
        "type" : 114
      }, {
        "name" : "_defer",
        "type" : 117
      }, {
        "name" : "m",
        "type" : 123
      }, {
        "name" : "sched",
        "type" : 126
      }, {
        "name" : "syscallsp",
        "type" : 11
      }, {
        "name" : "syscallpc",
        "type" : 11
      }, {
        "name" : "stktopsp",
        "type" : 11
      }, {
        "name" : "param",
        "type" : 17
      }, {
        "name" : "atomicstatus",
        "type" : 12
      }, {
        "name" : "stackLock",
        "type" : 12
      }, {
        "name" : "goid",
        "type" : 137
      }, {
        "name" : "schedlink",
        "type" : 128
      }, {
        "name" : "waitsince",
        "type" : 137
      }, {
        "name" : "waitreason",
        "type" : 159
      }, {
        "name" : "preempt",
        "type" : 19
      }, {
        "name" : "preemptStop",
        "type" : 19
      }, {
        "name" : "preemptShrink",
        "type" : 19
      }, {
        "name" : "asyncSafePoint",
        "type" : 19
      }, {
        "name" : "paniconfault",
        "type" : 19
      }, {
        "name" : "gcscandone",
        "type" : 19
      }, {
        "name" : "throwsplit",
        "type" : 19
      }, {
        "name" : "activeStackChans",
        "type" : 19
      }, {
        "name" : "raceignore",
        "type" : 138
      }, {
        "name" : "sysblocktraced",
        "type" : 19
      }, {
        "name" : "sysexitticks",
        "type" : 137
      }, {
        "name" : "traceseq",
        "type" : 86
      }, {
        "name" : "tracelastp",
        "type" : 136
      }, {
        "name" : "lockedm",
        "type" : 143
      }, {
        "name" : "sig",
        "type" : 12
      }, {
        "name" : "writebuf",
        "type" : 4
      }, {
        "name" : "sigcode0",
        "type" : 11
      }, {
        "name" : "sigcode1",
        "type" : 11
      }, {
        "name" : "sigpc",
        "type" : 11
      }, {
        "name" : "gopc",
        "type" : 11
      }, {
        "name" : "ancestors",
        "type" : 160
      }, {
        "name" : "startpc",
        "type" : 11
      }, {
        "name" : "racectx",
        "type" : 11
      }, {
        "name" : "waiting",
        "type" : 165
      }, {
        "name" : "cgoCtxt",
        "type" : 164
      }, {
        "name" : "labels",
        "type" : 17
      }, {
        "name" : "timer",
        "type" : 174
      }, {
        "name" : "selectDone",
        "type" : 12
      }, {
        "name" : "gcAssistBytes",
        "type" : 137
      } ],
      "name" : "struct{stack runtime.stack; stackguard0 uintptr; stackguard1 uintptr; _panic *runtime._panic; _defer *runtime._defer; m *runtime.m; sched runtime.gobuf; syscallsp uintptr; syscallpc uintptr; stktopsp uintptr; param unsafe.Pointer; atomicstatus uint32; stackLock uint32; goid int64; schedlink runtime.guintptr; waitsince int64; waitreason runtime.waitReason; preempt bool; preemptStop bool; preemptShrink bool; asyncSafePoint bool; paniconfault bool; gcscandone bool; throwsplit bool; activeStackChans bool; raceignore int8; sysblocktraced bool; sysexitticks int64; traceseq uint64; tracelastp runtime.puintptr; lockedm runtime.muintptr; sig uint32; writebuf []byte; sigcode0 uintptr; sigcode1 uintptr; sigpc uintptr; gopc uintptr; ancestors *[]runtime.ancestorInfo; startpc uintptr; racectx uintptr; waiting *runtime.sudog; cgoCtxt []uintptr; labels unsafe.Pointer; timer *runtime.timer; selectDone uint32; gcAssistBytes int64}",
      "type" : "Struct",
      "underlying" : 111
    }, {
      "local-name" : "stack",
      "name" : "runtime.stack",
      "package" : 0,
      "type" : "Named",
      "underlying" : 113
    }, {
      "fields" : [ {
        "name" : "lo",
        "type" : 11
      }, {
        "name" : "hi",
        "type" : 11
      } ],
      "name" : "struct{lo uintptr; hi uintptr}",
      "type" : "Struct",
      "underlying" : 113
    }, {
      "elem" : 115,
      "name" : "*runtime._panic",
      "type" : "Pointer",
      "underlying" : 114
    }, {
      "local-name" : "_panic",
      "name" : "runtime._panic",
      "package" : 0,
      "type" : "Named",
      "underlying" : 116
    }, {
      "fields" : [ {
        "name" : "argp",
        "type" : 17
      }, {
        "name" : "arg",
        "type" : 2
      }, {
        "name" : "link",
        "type" : 114
      }, {
        "name" : "pc",
        "type" : 11
      }, {
        "name" : "sp",
        "type" : 17
      }, {
        "name" : "recovered",
        "type" : 19
      }, {
        "name" : "aborted",
        "type" : 19
      }, {
        "name" : "goexit",
        "type" : 19
      } ],
      "name" : "struct{argp unsafe.Pointer; arg interface{}; link *runtime._panic; pc uintptr; sp unsafe.Pointer; recovered bool; aborted bool; goexit bool}",
      "type" : "Struct",
      "underlying" : 116
    }, {
      "elem" : 118,
      "name" : "*runtime._defer",
      "type" : "Pointer",
      "underlying" : 117
    }, {
      "local-name" : "_defer",
      "name" : "runtime._defer",
      "package" : 0,
      "type" : "Named",
      "underlying" : 119
    }, {
      "fields" : [ {
        "name" : "siz",
        "type" : 22
      }, {
        "name" : "started",
        "type" : 19
      }, {
        "name" : "heap",
        "type" : 19
      }, {
        "name" : "openDefer",
        "type" : 19
      }, {
        "name" : "sp",
        "type" : 11
      }, {
        "name" : "pc",
        "type" : 11
      }, {
        "name" : "fn",
        "type" : 120
      }, {
        "name" : "_panic",
        "type" : 114
      }, {
        "name" : "link",
        "type" : 117
      }, {
        "name" : "fd",
        "type" : 17
      }, {
        "name" : "varp",
        "type" : 11
      }, {
        "name" : "framepc",
        "type" : 11
      } ],
      "name" : "struct{siz int32; started bool; heap bool; openDefer bool; sp uintptr; pc uintptr; fn *runtime.funcval; _panic *runtime._panic; link *runtime._defer; fd unsafe.Pointer; varp uintptr; framepc uintptr}",
      "type" : "Struct",
      "underlying" : 119
    }, {
      "elem" : 121,
      "name" : "*runtime.funcval",
      "type" : "Pointer",
      "underlying" : 120
    }, {
      "local-name" : "funcval",
      "name" : "runtime.funcval",
      "package" : 0,
      "type" : "Named",
      "underlying" : 122
    }, {
      "fields" : [ {
        "name" : "fn",
        "type" : 11
      } ],
      "name" : "struct{fn uintptr}",
      "type" : "Struct",
      "underlying" : 122
    }, {
      "elem" : 124,
      "name" : "*runtime.m",
      "type" : "Pointer",
      "underlying" : 123
    }, {
      "local-name" : "m",
      "name" : "runtime.m",
      "package" : 0,
      "type" : "Named",
      "underlying" : 125
    }, {
      "fields" : [ {
        "name" : "g0",
        "type" : 109
      }, {
        "name" : "morebuf",
        "type" : 126
      }, {
        "name" : "divmod",
        "type" : 12
      }, {
        "name" : "procid",
        "type" : 86
      }, {
        "name" : "gsignal",
        "type" : 109
      }, {
        "name" : "goSigStack",
        "type" : 130
      }, {
        "name" : "sigmask",
        "type" : 132
      }, {
        "name" : "tls",
        "type" : 134
      }, {
        "name" : "mstartfn",
        "type" : 135
      }, {
        "name" : "curg",
        "type" : 109
      }, {
        "name" : "caughtsig",
        "type" : 128
      }, {
        "name" : "p",
        "type" : 136
      }, {
        "name" : "nextp",
        "type" : 136
      }, {
        "name" : "oldp",
        "type" : 136
      }, {
        "name" : "id",
        "type" : 137
      }, {
        "name" : "mallocing",
        "type" : 22
      }, {
        "name" : "throwing",
        "type" : 22
      }, {
        "name" : "preemptoff",
        "type" : 58
      }, {
        "name" : "locks",
        "type" : 22
      }, {
        "name" : "dying",
        "type" : 22
      }, {
        "name" : "profilehz",
        "type" : 22
      }, {
        "name" : "spinning",
        "type" : 19
      }, {
        "name" : "blocked",
        "type" : 19
      }, {
        "name" : "newSigstack",
        "type" : 19
      }, {
        "name" : "printlock",
        "type" : 138
      }, {
        "name" : "incgo",
        "type" : 19
      }, {
        "name" : "freeWait",
        "type" : 12
      }, {
        "name" : "fastrand",
        "type" : 133
      }, {
        "name" : "needextram",
        "type" : 19
      }, {
        "name" : "traceback",
        "type" : 14
      }, {
        "name" : "ncgocall",
        "type" : 86
      }, {
        "name" : "ncgo",
        "type" : 22
      }, {
        "name" : "cgoCallersUse",
        "type" : 12
      }, {
        "name" : "cgoCallers",
        "type" : 139
      }, {
        "name" : "park",
        "type" : 142
      }, {
        "name" : "alllink",
        "type" : 123
      }, {
        "name" : "schedlink",
        "type" : 143
      }, {
        "name" : "mcache",
        "type" : 144
      }, {
        "name" : "lockedg",
        "type" : 128
      }, {
        "name" : "createstack",
        "type" : 141
      }, {
        "name" : "lockedExt",
        "type" : 12
      }, {
        "name" : "lockedInt",
        "type" : 12
      }, {
        "name" : "nextwaitm",
        "type" : 143
      }, {
        "name" : "waitunlockf",
        "type" : 152
      }, {
        "name" : "waitlock",
        "type" : 17
      }, {
        "name" : "waittraceev",
        "type" : 5
      }, {
        "name" : "waittraceskip",
        "type" : 77
      }, {
        "name" : "startingtrace",
        "type" : 19
      }, {
        "name" : "syscalltick",
        "type" : 12
      }, {
        "name" : "freelink",
        "type" : 123
      }, {
        "name" : "libcall",
        "type" : 154
      }, {
        "name" : "libcallpc",
        "type" : 11
      }, {
        "name" : "libcallsp",
        "type" : 11
      }, {
        "name" : "libcallg",
        "type" : 128
      }, {
        "name" : "syscall",
        "type" : 154
      }, {
        "name" : "vdsoSP",
        "type" : 11
      }, {
        "name" : "vdsoPC",
        "type" : 11
      }, {
        "name" : "preemptGen",
        "type" : 12
      }, {
        "name" : "signalPending",
        "type" : 12
      }, {
        "name" : "dlogPerM",
        "type" : 156
      }, {
        "name" : "mOS",
        "type" : 158
      } ],
      "name" : "struct{g0 *runtime.g; morebuf runtime.gobuf; divmod uint32; procid uint64; gsignal *runtime.g; goSigStack runtime.gsignalStack; sigmask runtime.sigset; tls [6]uintptr; mstartfn func(); curg *runtime.g; caughtsig runtime.guintptr; p runtime.puintptr; nextp runtime.puintptr; oldp runtime.puintptr; id int64; mallocing int32; throwing int32; preemptoff string; locks int32; dying int32; profilehz int32; spinning bool; blocked bool; newSigstack bool; printlock int8; incgo bool; freeWait uint32; fastrand [2]uint32; needextram bool; traceback uint8; ncgocall uint64; ncgo int32; cgoCallersUse uint32; cgoCallers *runtime.cgoCallers; park runtime.note; alllink *runtime.m; schedlink runtime.muintptr; mcache *runtime.mcache; lockedg runtime.guintptr; createstack [32]uintptr; lockedExt uint32; lockedInt uint32; nextwaitm runtime.muintptr; waitunlockf func(*runtime.g, unsafe.Pointer) bool; waitlock unsafe.Pointer; waittraceev byte; waittraceskip int; startingtrace bool; syscalltick uint32; freelink *runtime.m; libcall runtime.libcall; libcallpc uintptr; libcallsp uintptr; libcallg runtime.guintptr; syscall runtime.libcall; vdsoSP uintptr; vdsoPC uintptr; preemptGen uint32; signalPending uint32; runtime.dlogPerM; runtime.mOS}",
      "type" : "Struct",
      "underlying" : 125
    }, {
      "local-name" : "gobuf",
      "name" : "runtime.gobuf",
      "package" : 0,
      "type" : "Named",
      "underlying" : 127
    }, {
      "fields" : [ {
        "name" : "sp",
        "type" : 11
      }, {
        "name" : "pc",
        "type" : 11
      }, {
        "name" : "g",
        "type" : 128
      }, {
        "name" : "ctxt",
        "type" : 17
      }, {
        "name" : "ret",
        "type" : 129
      }, {
        "name" : "lr",
        "type" : 11
      }, {
        "name" : "bp",
        "type" : 11
      } ],
      "name" : "struct{sp uintptr; pc uintptr; g runtime.guintptr; ctxt unsafe.Pointer; ret runtime/internal/sys.Uintreg; lr uintptr; bp uintptr}",
      "type" : "Struct",
      "underlying" : 127
    }, {
      "local-name" : "guintptr",
      "name" : "runtime.guintptr",
      "package" : 0,
      "type" : "Named",
      "underlying" : 11
    }, {
      "local-name" : "Uintreg",
      "name" : "runtime/internal/sys.Uintreg",
      "package" : 2,
      "type" : "Named",
      "underlying" : 86
    }, {
      "local-name" : "gsignalStack",
      "name" : "runtime.gsignalStack",
      "package" : 0,
      "type" : "Named",
      "underlying" : 131
    }, {
      "fields" : [ {
        "name" : "stack",
        "type" : 112
      }, {
        "name" : "stackguard0",
        "type" : 11
      }, {
        "name" : "stackguard1",
        "type" : 11
      }, {
        "name" : "stktopsp",
        "type" : 11
      } ],
      "name" : "struct{stack runtime.stack; stackguard0 uintptr; stackguard1 uintptr; stktopsp uintptr}",
      "type" : "Struct",
      "underlying" : 131
    }, {
      "local-name" : "sigset",
      "name" : "runtime.sigset",
      "package" : 0,
      "type" : "Named",
      "underlying" : 133
    }, {
      "elem" : 12,
      "name" : "[2]uint32",
      "type" : "Array",
      "underlying" : 133
    }, {
      "elem" : 11,
      "name" : "[6]uintptr",
      "type" : "Array",
      "underlying" : 134
    }, {
      "name" : "func()",
      "params" : 68,
      "recv" : -1,
      "results" : 68,
      "type" : "Signature",
      "underlying" : 135,
      "variadic" : false
    }, {
      "local-name" : "puintptr",
      "name" : "runtime.puintptr",
      "package" : 0,
      "type" : "Named",
      "underlying" : 11
    }, {
      "name" : "int64",
      "type" : "Basic",
      "underlying" : 137
    }, {
      "name" : "int8",
      "type" : "Basic",
      "underlying" : 138
    }, {
      "elem" : 140,
      "name" : "*runtime.cgoCallers",
      "type" : "Pointer",
      "underlying" : 139
    }, {
      "local-name" : "cgoCallers",
      "name" : "runtime.cgoCallers",
      "package" : 0,
      "type" : "Named",
      "underlying" : 141
    }, {
      "elem" : 11,
      "name" : "[32]uintptr",
      "type" : "Array",
      "underlying" : 141
    }, {
      "local-name" : "note",
      "name" : "runtime.note",
      "package" : 0,
      "type" : "Named",
      "underlying" : 95
    }, {
      "local-name" : "muintptr",
      "name" : "runtime.muintptr",
      "package" : 0,
      "type" : "Named",
      "underlying" : 11
    }, {
      "elem" : 145,
      "name" : "*runtime.mcache",
      "type" : "Pointer",
      "underlying" : 144
    }, {
      "local-name" : "mcache",
      "name" : "runtime.mcache",
      "package" : 0,
      "type" : "Named",
      "underlying" : 146
    }, {
      "fields" : [ {
        "name" : "next_sample",
        "type" : 11
      }, {
        "name" : "local_scan",
        "type" : 11
      }, {
        "name" : "tiny",
        "type" : 11
      }, {
        "name" : "tinyoffset",
        "type" : 11
      }, {
        "name" : "local_tinyallocs",
        "type" : 11
      }, {
        "name" : "alloc",
        "type" : 147
      }, {
        "name" : "stackcache",
        "type" : 148
      }, {
        "name" : "local_largefree",
        "type" : 11
      }, {
        "name" : "local_nlargefree",
        "type" : 11
      }, {
        "name" : "local_nsmallfree",
        "type" : 151
      }, {
        "name" : "flushGen",
        "type" : 12
      } ],
      "name" : "struct{next_sample uintptr; local_scan uintptr; tiny uintptr; tinyoffset uintptr; local_tinyallocs uintptr; alloc [134]*runtime.mspan; stackcache [4]runtime.stackfreelist; local_largefree uintptr; local_nlargefree uintptr; local_nsmallfree [67]uintptr; flushGen uint32}",
      "type" : "Struct",
      "underlying" : 146
    }, {
      "elem" : 79,
      "name" : "[134]*runtime.mspan",
      "type" : "Array",
      "underlying" : 147
    }, {
      "elem" : 149,
      "name" : "[4]runtime.stackfreelist",
      "type" : "Array",
      "underlying" : 148
    }, {
      "local-name" : "stackfreelist",
      "name" : "runtime.stackfreelist",
      "package" : 0,
      "type" : "Named",
      "underlying" : 150
    }, {
      "fields" : [ {
        "name" : "list",
        "type" : 85
      }, {
        "name" : "size",
        "type" : 11
      } ],
      "name" : "struct{list runtime.gclinkptr; size uintptr}",
      "type" : "Struct",
      "underlying" : 150
    }, {
      "elem" : 11,
      "name" : "[67]uintptr",
      "type" : "Array",
      "underlying" : 151
    }, {
      "name" : "func(*runtime.g, unsafe.Pointer) bool",
      "params" : 153,
      "recv" : -1,
      "results" : 18,
      "type" : "Signature",
      "underlying" : 152,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 109
      }, {
        "name" : "",
        "type" : 17
      } ],
      "name" : "(*runtime.g, unsafe.Pointer)",
      "type" : "Tuple",
      "underlying" : 153
    }, {
      "local-name" : "libcall",
      "name" : "runtime.libcall",
      "package" : 0,
      "type" : "Named",
      "underlying" : 155
    }, {
      "fields" : [ {
        "name" : "fn",
        "type" : 11
      }, {
        "name" : "n",
        "type" : 11
      }, {
        "name" : "args",
        "type" : 11
      }, {
        "name" : "r1",
        "type" : 11
      }, {
        "name" : "r2",
        "type" : 11
      }, {
        "name" : "err",
        "type" : 11
      } ],
      "name" : "struct{fn uintptr; n uintptr; args uintptr; r1 uintptr; r2 uintptr; err uintptr}",
      "type" : "Struct",
      "underlying" : 155
    }, {
      "local-name" : "dlogPerM",
      "name" : "runtime.dlogPerM",
      "package" : 0,
      "type" : "Named",
      "underlying" : 157
    }, {
      "fields" : [ ],
      "name" : "struct{}",
      "type" : "Struct",
      "underlying" : 157
    }, {
      "local-name" : "mOS",
      "name" : "runtime.mOS",
      "package" : 0,
      "type" : "Named",
      "underlying" : 157
    }, {
      "local-name" : "waitReason",
      "name" : "runtime.waitReason",
      "package" : 0,
      "type" : "Named",
      "underlying" : 14
    }, {
      "elem" : 161,
      "name" : "*[]runtime.ancestorInfo",
      "type" : "Pointer",
      "underlying" : 160
    }, {
      "elem" : 162,
      "name" : "[]runtime.ancestorInfo",
      "type" : "Slice",
      "underlying" : 161
    }, {
      "local-name" : "ancestorInfo",
      "name" : "runtime.ancestorInfo",
      "package" : 0,
      "type" : "Named",
      "underlying" : 163
    }, {
      "fields" : [ {
        "name" : "pcs",
        "type" : 164
      }, {
        "name" : "goid",
        "type" : 137
      }, {
        "name" : "gopc",
        "type" : 11
      } ],
      "name" : "struct{pcs []uintptr; goid int64; gopc uintptr}",
      "type" : "Struct",
      "underlying" : 163
    }, {
      "elem" : 11,
      "name" : "[]uintptr",
      "type" : "Slice",
      "underlying" : 164
    }, {
      "elem" : 166,
      "name" : "*runtime.sudog",
      "type" : "Pointer",
      "underlying" : 165
    }, {
      "local-name" : "sudog",
      "name" : "runtime.sudog",
      "package" : 0,
      "type" : "Named",
      "underlying" : 167
    }, {
      "fields" : [ {
        "name" : "g",
        "type" : 109
      }, {
        "name" : "isSelect",
        "type" : 19
      }, {
        "name" : "next",
        "type" : 165
      }, {
        "name" : "prev",
        "type" : 165
      }, {
        "name" : "elem",
        "type" : 17
      }, {
        "name" : "acquiretime",
        "type" : 137
      }, {
        "name" : "releasetime",
        "type" : 137
      }, {
        "name" : "ticket",
        "type" : 12
      }, {
        "name" : "parent",
        "type" : 165
      }, {
        "name" : "waitlink",
        "type" : 165
      }, {
        "name" : "waittail",
        "type" : 165
      }, {
        "name" : "c",
        "type" : 168
      } ],
      "name" : "struct{g *runtime.g; isSelect bool; next *runtime.sudog; prev *runtime.sudog; elem unsafe.Pointer; acquiretime int64; releasetime int64; ticket uint32; parent *runtime.sudog; waitlink *runtime.sudog; waittail *runtime.sudog; c *runtime.hchan}",
      "type" : "Struct",
      "underlying" : 167
    }, {
      "elem" : 169,
      "name" : "*runtime.hchan",
      "type" : "Pointer",
      "underlying" : 168
    }, {
      "local-name" : "hchan",
      "name" : "runtime.hchan",
      "package" : 0,
      "type" : "Named",
      "underlying" : 170
    }, {
      "fields" : [ {
        "name" : "qcount",
        "type" : 171
      }, {
        "name" : "dataqsiz",
        "type" : 171
      }, {
        "name" : "buf",
        "type" : 17
      }, {
        "name" : "elemsize",
        "type" : 89
      }, {
        "name" : "closed",
        "type" : 12
      }, {
        "name" : "elemtype",
        "type" : 8
      }, {
        "name" : "sendx",
        "type" : 171
      }, {
        "name" : "recvx",
        "type" : 171
      }, {
        "name" : "recvq",
        "type" : 172
      }, {
        "name" : "sendq",
        "type" : 172
      }, {
        "name" : "lock",
        "type" : 94
      } ],
      "name" : "struct{qcount uint; dataqsiz uint; buf unsafe.Pointer; elemsize uint16; closed uint32; elemtype *runtime._type; sendx uint; recvx uint; recvq runtime.waitq; sendq runtime.waitq; lock runtime.mutex}",
      "type" : "Struct",
      "underlying" : 170
    }, {
      "name" : "uint",
      "type" : "Basic",
      "underlying" : 171
    }, {
      "local-name" : "waitq",
      "name" : "runtime.waitq",
      "package" : 0,
      "type" : "Named",
      "underlying" : 173
    }, {
      "fields" : [ {
        "name" : "first",
        "type" : 165
      }, {
        "name" : "last",
        "type" : 165
      } ],
      "name" : "struct{first *runtime.sudog; last *runtime.sudog}",
      "type" : "Struct",
      "underlying" : 173
    }, {
      "elem" : 175,
      "name" : "*runtime.timer",
      "type" : "Pointer",
      "underlying" : 174
    }, {
      "local-name" : "timer",
      "name" : "runtime.timer",
      "package" : 0,
      "type" : "Named",
      "underlying" : 176
    }, {
      "fields" : [ {
        "name" : "pp",
        "type" : 136
      }, {
        "name" : "when",
        "type" : 137
      }, {
        "name" : "period",
        "type" : 137
      }, {
        "name" : "f",
        "type" : 177
      }, {
        "name" : "arg",
        "type" : 2
      }, {
        "name" : "seq",
        "type" : 11
      }, {
        "name" : "nextwhen",
        "type" : 137
      }, {
        "name" : "status",
        "type" : 12
      } ],
      "name" : "struct{pp runtime.puintptr; when int64; period int64; f func(interface{}, uintptr); arg interface{}; seq uintptr; nextwhen int64; status uint32}",
      "type" : "Struct",
      "underlying" : 176
    }, {
      "name" : "func(interface{}, uintptr)",
      "params" : 178,
      "recv" : -1,
      "results" : 68,
      "type" : "Signature",
      "underlying" : 177,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 2
      }, {
        "name" : "",
        "type" : 11
      } ],
      "name" : "(interface{}, uintptr)",
      "type" : "Tuple",
      "underlying" : 178
    }, {
      "name" : "func() *runtime.g",
      "params" : 68,
      "recv" : -1,
      "results" : 180,
      "type" : "Signature",
      "underlying" : 179,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 109
      } ],
      "name" : "(*runtime.g)",
      "type" : "Tuple",
      "underlying" : 180
    }, {
      "local-name" : "stkframe",
      "name" : "runtime.stkframe",
      "package" : 0,
      "type" : "Named",
      "underlying" : 182
    }, {
      "fields" : [ {
        "name" : "fn",
        "type" : 183
      }, {
        "name" : "pc",
        "type" : 11
      }, {
        "name" : "continpc",
        "type" : 11
      }, {
        "name" : "lr",
        "type" : 11
      }, {
        "name" : "sp",
        "type" : 11
      }, {
        "name" : "fp",
        "type" : 11
      }, {
        "name" : "varp",
        "type" : 11
      }, {
        "name" : "argp",
        "type" : 11
      }, {
        "name" : "arglen",
        "type" : 11
      }, {
        "name" : "argmap",
        "type" : 190
      } ],
      "name" : "struct{fn runtime.funcInfo; pc uintptr; continpc uintptr; lr uintptr; sp uintptr; fp uintptr; varp uintptr; argp uintptr; arglen uintptr; argmap *runtime.bitvector}",
      "type" : "Struct",
      "underlying" : 182
    }, {
      "local-name" : "funcInfo",
      "name" : "runtime.funcInfo",
      "package" : 0,
      "type" : "Named",
      "underlying" : 184
    }, {
      "fields" : [ {
        "name" : "_func",
        "type" : 185
      }, {
        "name" : "datap",
        "type" : 30
      } ],
      "name" : "struct{*runtime._func; datap *runtime.moduledata}",
      "type" : "Struct",
      "underlying" : 184
    }, {
      "elem" : 186,
      "name" : "*runtime._func",
      "type" : "Pointer",
      "underlying" : 185
    }, {
      "local-name" : "_func",
      "name" : "runtime._func",
      "package" : 0,
      "type" : "Named",
      "underlying" : 187
    }, {
      "fields" : [ {
        "name" : "entry",
        "type" : 11
      }, {
        "name" : "nameoff",
        "type" : 22
      }, {
        "name" : "args",
        "type" : 22
      }, {
        "name" : "deferreturn",
        "type" : 12
      }, {
        "name" : "pcsp",
        "type" : 22
      }, {
        "name" : "pcfile",
        "type" : 22
      }, {
        "name" : "pcln",
        "type" : 22
      }, {
        "name" : "npcdata",
        "type" : 22
      }, {
        "name" : "funcID",
        "type" : 188
      }, {
        "name" : "_",
        "type" : 189
      }, {
        "name" : "nfuncdata",
        "type" : 14
      } ],
      "name" : "struct{entry uintptr; nameoff int32; args int32; deferreturn uint32; pcsp int32; pcfile int32; pcln int32; npcdata int32; funcID runtime.funcID; _ [2]int8; nfuncdata uint8}",
      "type" : "Struct",
      "underlying" : 187
    }, {
      "local-name" : "funcID",
      "name" : "runtime.funcID",
      "package" : 0,
      "type" : "Named",
      "underlying" : 14
    }, {
      "elem" : 138,
      "name" : "[2]int8",
      "type" : "Array",
      "underlying" : 189
    }, {
      "elem" : 63,
      "name" : "*runtime.bitvector",
      "type" : "Pointer",
      "underlying" : 190
    }, {
      "name" : "func(pc0 uintptr, sp0 uintptr, lr0 uintptr, gp *runtime.g, skip int, pcbuf *uintptr, max int, callback func(*runtime.stkframe, unsafe.Pointer) bool, v unsafe.Pointer, flags uint) int",
      "params" : 192,
      "recv" : -1,
      "results" : 197,
      "type" : "Signature",
      "underlying" : 191,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "pc0",
        "type" : 11
      }, {
        "name" : "sp0",
        "type" : 11
      }, {
        "name" : "lr0",
        "type" : 11
      }, {
        "name" : "gp",
        "type" : 109
      }, {
        "name" : "skip",
        "type" : 77
      }, {
        "name" : "pcbuf",
        "type" : 193
      }, {
        "name" : "max",
        "type" : 77
      }, {
        "name" : "callback",
        "type" : 194
      }, {
        "name" : "v",
        "type" : 17
      }, {
        "name" : "flags",
        "type" : 171
      } ],
      "name" : "(pc0 uintptr, sp0 uintptr, lr0 uintptr, gp *runtime.g, skip int, pcbuf *uintptr, max int, callback func(*runtime.stkframe, unsafe.Pointer) bool, v unsafe.Pointer, flags uint)",
      "type" : "Tuple",
      "underlying" : 192
    }, {
      "elem" : 11,
      "name" : "*uintptr",
      "type" : "Pointer",
      "underlying" : 193
    }, {
      "name" : "func(*runtime.stkframe, unsafe.Pointer) bool",
      "params" : 195,
      "recv" : -1,
      "results" : 18,
      "type" : "Signature",
      "underlying" : 194,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 196
      }, {
        "name" : "",
        "type" : 17
      } ],
      "name" : "(*runtime.stkframe, unsafe.Pointer)",
      "type" : "Tuple",
      "underlying" : 195
    }, {
      "elem" : 181,
      "name" : "*runtime.stkframe",
      "type" : "Pointer",
      "underlying" : 196
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 77
      } ],
      "name" : "(int)",
      "type" : "Tuple",
      "underlying" : 197
    }, {
      "name" : "untyped nil",
      "type" : "Basic",
      "underlying" : 198
    }, {
      "name" : "func(frame *runtime.stkframe, ctxt unsafe.Pointer) bool",
      "params" : 200,
      "recv" : -1,
      "results" : 18,
      "type" : "Signature",
      "underlying" : 199,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "frame",
        "type" : 196
      }, {
        "name" : "ctxt",
        "type" : 17
      } ],
      "name" : "(frame *runtime.stkframe, ctxt unsafe.Pointer)",
      "type" : "Tuple",
      "underlying" : 200
    }, {
      "name" : "func(p unsafe.Pointer) unsafe.Pointer",
      "params" : 202,
      "recv" : -1,
      "results" : 203,
      "type" : "Signature",
      "underlying" : 201,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "p",
        "type" : 17
      } ],
      "name" : "(p unsafe.Pointer)",
      "type" : "Tuple",
      "underlying" : 202
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 17
      } ],
      "name" : "(unsafe.Pointer)",
      "type" : "Tuple",
      "underlying" : 203
    }, {
      "fields" : [ {
        "name" : "locals",
        "type" : 63
      }, {
        "name" : "args",
        "type" : 63
      }, {
        "name" : "objs",
        "type" : 205
      } ],
      "name" : "(locals runtime.bitvector, args runtime.bitvector, objs []runtime.stackObjectRecord)",
      "type" : "Tuple",
      "underlying" : 204
    }, {
      "elem" : 206,
      "name" : "[]runtime.stackObjectRecord",
      "type" : "Slice",
      "underlying" : 205
    }, {
      "local-name" : "stackObjectRecord",
      "name" : "runtime.stackObjectRecord",
      "package" : 0,
      "type" : "Named",
      "underlying" : 207
    }, {
      "fields" : [ {
        "name" : "off",
        "type" : 77
      }, {
        "name" : "typ",
        "type" : 8
      } ],
      "name" : "struct{off int; typ *runtime._type}",
      "type" : "Struct",
      "underlying" : 207
    }, {
      "name" : "func(frame *runtime.stkframe, cache *runtime.pcvalueCache, debug bool) (locals runtime.bitvector, args runtime.bitvector, objs []runtime.stackObjectRecord)",
      "params" : 209,
      "recv" : -1,
      "results" : 204,
      "type" : "Signature",
      "underlying" : 208,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "frame",
        "type" : 196
      }, {
        "name" : "cache",
        "type" : 210
      }, {
        "name" : "debug",
        "type" : 19
      } ],
      "name" : "(frame *runtime.stkframe, cache *runtime.pcvalueCache, debug bool)",
      "type" : "Tuple",
      "underlying" : 209
    }, {
      "elem" : 211,
      "name" : "*runtime.pcvalueCache",
      "type" : "Pointer",
      "underlying" : 210
    }, {
      "local-name" : "pcvalueCache",
      "name" : "runtime.pcvalueCache",
      "package" : 0,
      "type" : "Named",
      "underlying" : 212
    }, {
      "fields" : [ {
        "name" : "entries",
        "type" : 213
      } ],
      "name" : "struct{entries [2][8]runtime.pcvalueCacheEnt}",
      "type" : "Struct",
      "underlying" : 212
    }, {
      "elem" : 214,
      "name" : "[2][8]runtime.pcvalueCacheEnt",
      "type" : "Array",
      "underlying" : 213
    }, {
      "elem" : 215,
      "name" : "[8]runtime.pcvalueCacheEnt",
      "type" : "Array",
      "underlying" : 214
    }, {
      "local-name" : "pcvalueCacheEnt",
      "name" : "runtime.pcvalueCacheEnt",
      "package" : 0,
      "type" : "Named",
      "underlying" : 216
    }, {
      "fields" : [ {
        "name" : "targetpc",
        "type" : 11
      }, {
        "name" : "off",
        "type" : 22
      }, {
        "name" : "val",
        "type" : 22
      } ],
      "name" : "struct{targetpc uintptr; off int32; val int32}",
      "type" : "Struct",
      "underlying" : 216
    }, {
      "name" : "func(i uintptr) uint8",
      "params" : 218,
      "recv" : -1,
      "results" : 219,
      "type" : "Signature",
      "underlying" : 217,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "i",
        "type" : 11
      } ],
      "name" : "(i uintptr)",
      "type" : "Tuple",
      "underlying" : 218
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 14
      } ],
      "name" : "(uint8)",
      "type" : "Tuple",
      "underlying" : 219
    } ],
    "variables" : [ {
      "name" : "ep",
      "package" : 0,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "mask",
      "package" : 0,
      "type" : 4,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "e",
      "package" : 0,
      "type" : 6,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "data",
      "package" : 0,
      "type" : 17,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "p",
      "package" : 0,
      "type" : 17,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "_type",
      "package" : 0,
      "type" : 8,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "t",
      "package" : 0,
      "type" : 8,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "datap",
      "package" : 0,
      "type" : 30,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "data",
      "package" : 0,
      "type" : 11,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "edata",
      "package" : 0,
      "type" : 11,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "gcdatamask",
      "package" : 0,
      "type" : 63,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "bytedata",
      "package" : 0,
      "type" : 65,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "elem",
      "package" : 0,
      "type" : 8,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "size",
      "package" : 0,
      "type" : 11,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "n",
      "package" : 0,
      "type" : 11,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "i",
      "package" : 0,
      "type" : 11,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "bitmap",
      "package" : 0,
      "type" : 65,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "off",
      "package" : 0,
      "type" : 11,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "bss",
      "package" : 0,
      "type" : 11,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "ebss",
      "package" : 0,
      "type" : 11,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "gcbssmask",
      "package" : 0,
      "type" : 63,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "n",
      "package" : 0,
      "type" : 11,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "i",
      "package" : 0,
      "type" : 11,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "bitmap",
      "package" : 0,
      "type" : 65,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "off",
      "package" : 0,
      "type" : 11,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "_",
      "package" : 0,
      "type" : 77,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "base",
      "package" : 0,
      "type" : 11,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "s",
      "package" : 0,
      "type" : 79,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "elemsize",
      "package" : 0,
      "type" : 11,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "n",
      "package" : 0,
      "type" : 11,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "i",
      "package" : 0,
      "type" : 11,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "hbits",
      "package" : 0,
      "type" : 101,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "_",
      "package" : 0,
      "type" : 11,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "_g_",
      "package" : 0,
      "type" : 109,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "m",
      "package" : 0,
      "type" : 123,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "curg",
      "package" : 0,
      "type" : 109,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "stack",
      "package" : 0,
      "type" : 112,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "lo",
      "package" : 0,
      "type" : 11,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "hi",
      "package" : 0,
      "type" : 11,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "frame",
      "package" : 0,
      "type" : 181,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "sp",
      "package" : 0,
      "type" : 11,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "_g_",
      "package" : 0,
      "type" : 109,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "sched",
      "package" : 0,
      "type" : 126,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "pc",
      "package" : 0,
      "type" : 11,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "sp",
      "package" : 0,
      "type" : 11,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "fn",
      "package" : 0,
      "type" : 183,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "locals",
      "package" : 0,
      "type" : 63,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "n",
      "package" : 0,
      "type" : 22,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "n",
      "package" : 0,
      "type" : 11,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "i",
      "package" : 0,
      "type" : 11,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "varp",
      "package" : 0,
      "type" : 11,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "size",
      "package" : 0,
      "type" : 11,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "off",
      "package" : 0,
      "type" : 11,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "_",
      "package" : 0,
      "type" : 205,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "_",
      "package" : 0,
      "type" : 63,
      "exported" : false,
      "embedded" : false,
      "field" : false
    } ]
  },
  "go-version" : "1.14.3"
}