{
  "usage" : {
    "file" : "type.go",
    "label1" : "cast-struct",
    "label2" : "types",
    "line" : "842",
    "module" : "std",
    "pkg" : "internal/reflectlite",
    "project" : "kubernetes/kubernetes",
    "snippet" : "v := (*funcType)(unsafe.Pointer(V))",
    "version" : "std"
  },
  "cfg" : {
    "blocks" : [ {
      "update-vars" : [ ],
      "successors" : [ 2 ],
      "in-vars" : [ 2, 1, 0 ],
      "exit" : false,
      "out-vars" : [ 0, 2, 1 ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[entry]",
      "entry" : true,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ ],
      "in-vars" : [ ],
      "exit" : true,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[exit]",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 3, 4 ],
      "in-vars" : [ 2, 1, 0 ],
      "exit" : false,
      "out-vars" : [ 2, 1, 0 ],
      "decl-vars" : [ ],
      "line-start" : 809,
      "ast" : {
        "condition" : {
          "go-type" : 19,
          "kind" : "expression",
          "left" : {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "T",
              "variable" : 0
            }
          },
          "operator" : "==",
          "right" : {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "V",
              "variable" : 1
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 811,
      "code" : "if T == V {\n\treturn true\n}",
      "entry" : false,
      "use-vars" : [ 1, 0 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 810,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 13,
          "kind" : "constant",
          "value" : {
            "type" : "BOOL",
            "value" : "true"
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 810,
      "code" : "return true",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 5 ],
      "in-vars" : [ 2, 1, 0 ],
      "exit" : false,
      "out-vars" : [ 4, 2, 1, 0 ],
      "decl-vars" : [ 4 ],
      "line-start" : 813,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "kind"
          }
        } ],
        "right" : [ {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "function" : 1,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "Kind"
            },
            "go-type" : 22,
            "kind" : "expression",
            "target" : {
              "go-type" : 2,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "T",
                "variable" : 0
              }
            },
            "type" : "selector"
          },
          "go-type" : 20,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 813,
      "code" : "kind := T.Kind()",
      "entry" : false,
      "use-vars" : [ 0 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 6, 7 ],
      "in-vars" : [ 2, 1, 0, 4 ],
      "exit" : false,
      "out-vars" : [ 4, 2, 1, 0 ],
      "decl-vars" : [ ],
      "line-start" : 814,
      "ast" : {
        "condition" : {
          "go-type" : 19,
          "kind" : "expression",
          "left" : {
            "go-type" : 20,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "kind",
              "variable" : 4
            }
          },
          "operator" : "!=",
          "right" : {
            "arguments" : [ ],
            "ellipsis" : false,
            "function" : {
              "field" : {
                "function" : 1,
                "ident-kind" : "Func",
                "kind" : "ident",
                "value" : "Kind"
              },
              "go-type" : 22,
              "kind" : "expression",
              "target" : {
                "go-type" : 2,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "V",
                  "variable" : 1
                }
              },
              "type" : "selector"
            },
            "go-type" : 20,
            "kind" : "expression",
            "type" : "call"
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 816,
      "code" : "if kind != V.Kind() {\n\treturn false\n}",
      "entry" : false,
      "use-vars" : [ 4, 1 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 815,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 13,
          "kind" : "constant",
          "value" : {
            "type" : "BOOL",
            "value" : "false"
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 815,
      "code" : "return false",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 8, 9 ],
      "in-vars" : [ 4, 2, 1, 0 ],
      "exit" : false,
      "out-vars" : [ 1, 0, 4, 2 ],
      "decl-vars" : [ ],
      "line-start" : 820,
      "ast" : {
        "condition" : {
          "go-type" : 19,
          "kind" : "expression",
          "left" : {
            "go-type" : 19,
            "kind" : "expression",
            "left" : {
              "go-type" : 19,
              "kind" : "expression",
              "left" : {
                "go-type" : 19,
                "kind" : "expression",
                "left" : {
                  "go-type" : 20,
                  "kind" : "constant",
                  "value" : {
                    "type" : "INT",
                    "value" : "1"
                  }
                },
                "operator" : "<=",
                "right" : {
                  "go-type" : 20,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "kind",
                    "variable" : 4
                  }
                },
                "type" : "binary"
              },
              "operator" : "&&",
              "right" : {
                "go-type" : 19,
                "kind" : "expression",
                "left" : {
                  "go-type" : 20,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "kind",
                    "variable" : 4
                  }
                },
                "operator" : "<=",
                "right" : {
                  "go-type" : 20,
                  "kind" : "constant",
                  "value" : {
                    "type" : "INT",
                    "value" : "16"
                  }
                },
                "type" : "binary"
              },
              "type" : "binary"
            },
            "operator" : "||",
            "right" : {
              "go-type" : 19,
              "kind" : "expression",
              "left" : {
                "go-type" : 20,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "kind",
                  "variable" : 4
                }
              },
              "operator" : "==",
              "right" : {
                "go-type" : 20,
                "kind" : "constant",
                "value" : {
                  "type" : "INT",
                  "value" : "24"
                }
              },
              "type" : "binary"
            },
            "type" : "binary"
          },
          "operator" : "||",
          "right" : {
            "go-type" : 19,
            "kind" : "expression",
            "left" : {
              "go-type" : 20,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "kind",
                "variable" : 4
              }
            },
            "operator" : "==",
            "right" : {
              "go-type" : 20,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "26"
              }
            },
            "type" : "binary"
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 822,
      "code" : "if Bool <= kind && kind <= Complex128 || kind == String || kind == UnsafePointer {\n\treturn true\n}",
      "entry" : false,
      "use-vars" : [ 4 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 821,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 13,
          "kind" : "constant",
          "value" : {
            "type" : "BOOL",
            "value" : "true"
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 821,
      "code" : "return true",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 10, 12, 16, 32, 38, 40, 42, 61 ],
      "in-vars" : [ 0, 4, 2, 1 ],
      "exit" : false,
      "out-vars" : [ 2, 1, 0 ],
      "decl-vars" : [ ],
      "line-start" : 825,
      "ast" : {
        "condition" : {
          "go-type" : 20,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "kind",
            "variable" : 4
          }
        },
        "kind" : "statement",
        "type" : "switch"
      },
      "assign-vars" : [ ],
      "line-end" : 900,
      "code" : "switch kind {\ncase Array:\n\treturn T.Len() == V.Len() && haveIdenticalType(T.Elem(), V.Elem(), cmpTags)\n\ncase Chan:\n\n\tif V.chanDir() == bothDir && haveIdenticalType(T.Elem(), V.Elem(), cmpTags) {\n\t\treturn true\n\t}\n\n\treturn V.chanDir() == T.chanDir() && haveIdenticalType(T.Elem(), V.Elem(), cmpTags)\n\ncase Func:\n\tt := (*funcType)(unsafe.Pointer(T))\n\tv := (*funcType)(unsafe.Pointer(V))\n\tif t.outCount != v.outCount || t.inCount != v.inCount {\n\t\treturn false\n\t}\n\tfor i := 0; i < t.NumIn(); i++ {\n\t\tif !haveIdenticalType(t.In(i), v.In(i), cmpTags) {\n\t\t\treturn false\n\t\t}\n\t}\n\tfor i := 0; i < t.NumOut(); i++ {\n\t\tif !haveIdenticalType(t.Out(i), v.Out(i), cmpTags) {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn true\n\ncase Interface:\n\tt := (*interfaceType)(unsafe.Pointer(T))\n\tv := (*interfaceType)(unsafe.Pointer(V))\n\tif len(t.methods) == 0 && len(v.methods) == 0 {\n\t\treturn true\n\t}\n\n\treturn false\n\ncase Map:\n\treturn haveIdenticalType(T.Key(), V.Key(), cmpTags) && haveIdenticalType(T.Elem(), V.Elem(), cmpTags)\n\ncase Ptr, Slice:\n\treturn haveIdenticalType(T.Elem(), V.Elem(), cmpTags)\n\ncase Struct:\n\tt := (*structType)(unsafe.Pointer(T))\n\tv := (*structType)(unsafe.Pointer(V))\n\tif len(t.fields) != len(v.fields) {\n\t\treturn false\n\t}\n\tif t.pkgPath.name() != v.pkgPath.name() {\n\t\treturn false\n\t}\n\tfor i := range t.fields {\n\t\ttf := &t.fields[i]\n\t\tvf := &v.fields[i]\n\t\tif tf.name.name() != vf.name.name() {\n\t\t\treturn false\n\t\t}\n\t\tif !haveIdenticalType(tf.typ, vf.typ, cmpTags) {\n\t\t\treturn false\n\t\t}\n\t\tif cmpTags && tf.name.tag() != vf.name.tag() {\n\t\t\treturn false\n\t\t}\n\t\tif tf.offsetEmbed != vf.offsetEmbed {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn true\n}",
      "entry" : false,
      "use-vars" : [ 4 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 11 ],
      "in-vars" : [ 2, 1, 0 ],
      "exit" : false,
      "out-vars" : [ 2, 1, 0 ],
      "decl-vars" : [ ],
      "line-start" : 826,
      "ast" : {
        "expressions" : [ {
          "go-type" : 20,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "17"
          }
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 827,
      "code" : "case Array:\n\treturn T.Len() == V.Len() && haveIdenticalType(T.Elem(), V.Elem(), cmpTags)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 0, 2, 1 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 827,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 13,
          "kind" : "expression",
          "left" : {
            "go-type" : 13,
            "kind" : "expression",
            "left" : {
              "arguments" : [ ],
              "ellipsis" : false,
              "function" : {
                "field" : {
                  "function" : 2,
                  "ident-kind" : "Func",
                  "kind" : "ident",
                  "value" : "Len"
                },
                "go-type" : 26,
                "kind" : "expression",
                "target" : {
                  "go-type" : 2,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "T",
                    "variable" : 0
                  }
                },
                "type" : "selector"
              },
              "go-type" : 25,
              "kind" : "expression",
              "type" : "call"
            },
            "operator" : "==",
            "right" : {
              "arguments" : [ ],
              "ellipsis" : false,
              "function" : {
                "field" : {
                  "function" : 2,
                  "ident-kind" : "Func",
                  "kind" : "ident",
                  "value" : "Len"
                },
                "go-type" : 26,
                "kind" : "expression",
                "target" : {
                  "go-type" : 2,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "V",
                    "variable" : 1
                  }
                },
                "type" : "selector"
              },
              "go-type" : 25,
              "kind" : "expression",
              "type" : "call"
            },
            "type" : "binary"
          },
          "operator" : "&&",
          "right" : {
            "arguments" : [ {
              "arguments" : [ ],
              "ellipsis" : false,
              "function" : {
                "field" : {
                  "function" : 4,
                  "ident-kind" : "Func",
                  "kind" : "ident",
                  "value" : "Elem"
                },
                "go-type" : 35,
                "kind" : "expression",
                "target" : {
                  "go-type" : 2,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "T",
                    "variable" : 0
                  }
                },
                "type" : "selector"
              },
              "go-type" : 30,
              "kind" : "expression",
              "type" : "call"
            }, {
              "arguments" : [ ],
              "ellipsis" : false,
              "function" : {
                "field" : {
                  "function" : 4,
                  "ident-kind" : "Func",
                  "kind" : "ident",
                  "value" : "Elem"
                },
                "go-type" : 35,
                "kind" : "expression",
                "target" : {
                  "go-type" : 2,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "V",
                    "variable" : 1
                  }
                },
                "type" : "selector"
              },
              "go-type" : 30,
              "kind" : "expression",
              "type" : "call"
            }, {
              "go-type" : 13,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "cmpTags",
                "variable" : 2
              }
            } ],
            "ellipsis" : false,
            "function" : {
              "go-type" : 28,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "function" : 3,
                "ident-kind" : "Func",
                "kind" : "ident",
                "value" : "haveIdenticalType"
              }
            },
            "go-type" : 13,
            "kind" : "expression",
            "type" : "call"
          },
          "type" : "binary"
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 827,
      "code" : "return T.Len() == V.Len() && haveIdenticalType(T.Elem(), V.Elem(), cmpTags)",
      "entry" : false,
      "use-vars" : [ 0, 2, 1 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 13 ],
      "in-vars" : [ 0, 2, 1 ],
      "exit" : false,
      "out-vars" : [ 2, 1, 0 ],
      "decl-vars" : [ ],
      "line-start" : 829,
      "ast" : {
        "expressions" : [ {
          "go-type" : 20,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "18"
          }
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 838,
      "code" : "case Chan:\n\n\tif V.chanDir() == bothDir && haveIdenticalType(T.Elem(), V.Elem(), cmpTags) {\n\t\treturn true\n\t}\n\n\treturn V.chanDir() == T.chanDir() && haveIdenticalType(T.Elem(), V.Elem(), cmpTags)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 14, 15 ],
      "in-vars" : [ 2, 1, 0 ],
      "exit" : false,
      "out-vars" : [ 0, 2, 1 ],
      "decl-vars" : [ ],
      "line-start" : 833,
      "ast" : {
        "condition" : {
          "go-type" : 13,
          "kind" : "expression",
          "left" : {
            "go-type" : 13,
            "kind" : "expression",
            "left" : {
              "arguments" : [ ],
              "ellipsis" : false,
              "function" : {
                "field" : {
                  "function" : 5,
                  "ident-kind" : "Func",
                  "kind" : "ident",
                  "value" : "chanDir"
                },
                "go-type" : 51,
                "kind" : "expression",
                "target" : {
                  "go-type" : 2,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "V",
                    "variable" : 1
                  }
                },
                "type" : "selector"
              },
              "go-type" : 50,
              "kind" : "expression",
              "type" : "call"
            },
            "operator" : "==",
            "right" : {
              "go-type" : 50,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "3"
              }
            },
            "type" : "binary"
          },
          "operator" : "&&",
          "right" : {
            "arguments" : [ {
              "arguments" : [ ],
              "ellipsis" : false,
              "function" : {
                "field" : {
                  "function" : 4,
                  "ident-kind" : "Func",
                  "kind" : "ident",
                  "value" : "Elem"
                },
                "go-type" : 35,
                "kind" : "expression",
                "target" : {
                  "go-type" : 2,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "T",
                    "variable" : 0
                  }
                },
                "type" : "selector"
              },
              "go-type" : 30,
              "kind" : "expression",
              "type" : "call"
            }, {
              "arguments" : [ ],
              "ellipsis" : false,
              "function" : {
                "field" : {
                  "function" : 4,
                  "ident-kind" : "Func",
                  "kind" : "ident",
                  "value" : "Elem"
                },
                "go-type" : 35,
                "kind" : "expression",
                "target" : {
                  "go-type" : 2,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "V",
                    "variable" : 1
                  }
                },
                "type" : "selector"
              },
              "go-type" : 30,
              "kind" : "expression",
              "type" : "call"
            }, {
              "go-type" : 13,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "cmpTags",
                "variable" : 2
              }
            } ],
            "ellipsis" : false,
            "function" : {
              "go-type" : 28,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "function" : 3,
                "ident-kind" : "Func",
                "kind" : "ident",
                "value" : "haveIdenticalType"
              }
            },
            "go-type" : 13,
            "kind" : "expression",
            "type" : "call"
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 835,
      "code" : "if V.chanDir() == bothDir && haveIdenticalType(T.Elem(), V.Elem(), cmpTags) {\n\treturn true\n}",
      "entry" : false,
      "use-vars" : [ 2, 0, 1 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 834,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 13,
          "kind" : "constant",
          "value" : {
            "type" : "BOOL",
            "value" : "true"
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 834,
      "code" : "return true",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 0, 2, 1 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 838,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 13,
          "kind" : "expression",
          "left" : {
            "go-type" : 13,
            "kind" : "expression",
            "left" : {
              "arguments" : [ ],
              "ellipsis" : false,
              "function" : {
                "field" : {
                  "function" : 5,
                  "ident-kind" : "Func",
                  "kind" : "ident",
                  "value" : "chanDir"
                },
                "go-type" : 51,
                "kind" : "expression",
                "target" : {
                  "go-type" : 2,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "V",
                    "variable" : 1
                  }
                },
                "type" : "selector"
              },
              "go-type" : 50,
              "kind" : "expression",
              "type" : "call"
            },
            "operator" : "==",
            "right" : {
              "arguments" : [ ],
              "ellipsis" : false,
              "function" : {
                "field" : {
                  "function" : 5,
                  "ident-kind" : "Func",
                  "kind" : "ident",
                  "value" : "chanDir"
                },
                "go-type" : 51,
                "kind" : "expression",
                "target" : {
                  "go-type" : 2,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "T",
                    "variable" : 0
                  }
                },
                "type" : "selector"
              },
              "go-type" : 50,
              "kind" : "expression",
              "type" : "call"
            },
            "type" : "binary"
          },
          "operator" : "&&",
          "right" : {
            "arguments" : [ {
              "arguments" : [ ],
              "ellipsis" : false,
              "function" : {
                "field" : {
                  "function" : 4,
                  "ident-kind" : "Func",
                  "kind" : "ident",
                  "value" : "Elem"
                },
                "go-type" : 35,
                "kind" : "expression",
                "target" : {
                  "go-type" : 2,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "T",
                    "variable" : 0
                  }
                },
                "type" : "selector"
              },
              "go-type" : 30,
              "kind" : "expression",
              "type" : "call"
            }, {
              "arguments" : [ ],
              "ellipsis" : false,
              "function" : {
                "field" : {
                  "function" : 4,
                  "ident-kind" : "Func",
                  "kind" : "ident",
                  "value" : "Elem"
                },
                "go-type" : 35,
                "kind" : "expression",
                "target" : {
                  "go-type" : 2,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "V",
                    "variable" : 1
                  }
                },
                "type" : "selector"
              },
              "go-type" : 30,
              "kind" : "expression",
              "type" : "call"
            }, {
              "go-type" : 13,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "cmpTags",
                "variable" : 2
              }
            } ],
            "ellipsis" : false,
            "function" : {
              "go-type" : 28,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "function" : 3,
                "ident-kind" : "Func",
                "kind" : "ident",
                "value" : "haveIdenticalType"
              }
            },
            "go-type" : 13,
            "kind" : "expression",
            "type" : "call"
          },
          "type" : "binary"
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 838,
      "code" : "return V.chanDir() == T.chanDir() && haveIdenticalType(T.Elem(), V.Elem(), cmpTags)",
      "entry" : false,
      "use-vars" : [ 1, 0, 2 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 17 ],
      "in-vars" : [ 2, 1, 0 ],
      "exit" : false,
      "out-vars" : [ 2, 1, 0 ],
      "decl-vars" : [ ],
      "line-start" : 840,
      "ast" : {
        "expressions" : [ {
          "go-type" : 20,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "19"
          }
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 856,
      "code" : "case Func:\n\tt := (*funcType)(unsafe.Pointer(T))\n\tv := (*funcType)(unsafe.Pointer(V))\n\tif t.outCount != v.outCount || t.inCount != v.inCount {\n\t\treturn false\n\t}\n\tfor i := 0; i < t.NumIn(); i++ {\n\t\tif !haveIdenticalType(t.In(i), v.In(i), cmpTags) {\n\t\t\treturn false\n\t\t}\n\t}\n\tfor i := 0; i < t.NumOut(); i++ {\n\t\tif !haveIdenticalType(t.Out(i), v.Out(i), cmpTags) {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn true",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 18 ],
      "in-vars" : [ 1, 0, 2 ],
      "exit" : false,
      "out-vars" : [ 2, 1, 12 ],
      "decl-vars" : [ 12 ],
      "line-start" : 841,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "t"
          }
        } ],
        "right" : [ {
          "coerced-to" : {
            "contained" : {
              "go-type" : 54,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 54,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "funcType"
              }
            },
            "go-type" : 53,
            "kind" : "type",
            "type" : "pointer"
          },
          "go-type" : 53,
          "kind" : "expression",
          "target" : {
            "coerced-to" : {
              "go-type" : 11,
              "kind" : "type",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 1,
                "value" : "unsafe"
              },
              "type" : "identifier",
              "value" : {
                "go-type" : 11,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "Pointer"
              }
            },
            "go-type" : 11,
            "kind" : "expression",
            "target" : {
              "go-type" : 2,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "T",
                "variable" : 0
              }
            },
            "type" : "cast"
          },
          "type" : "cast"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 841,
      "code" : "t := (*funcType)(unsafe.Pointer(T))",
      "entry" : false,
      "use-vars" : [ 0 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 19 ],
      "in-vars" : [ 2, 1, 12 ],
      "exit" : false,
      "out-vars" : [ 2, 12, 14 ],
      "decl-vars" : [ 14 ],
      "line-start" : 842,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "v"
          }
        } ],
        "right" : [ {
          "coerced-to" : {
            "contained" : {
              "go-type" : 54,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 54,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "funcType"
              }
            },
            "go-type" : 53,
            "kind" : "type",
            "type" : "pointer"
          },
          "go-type" : 53,
          "kind" : "expression",
          "target" : {
            "coerced-to" : {
              "go-type" : 11,
              "kind" : "type",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 1,
                "value" : "unsafe"
              },
              "type" : "identifier",
              "value" : {
                "go-type" : 11,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "Pointer"
              }
            },
            "go-type" : 11,
            "kind" : "expression",
            "target" : {
              "go-type" : 2,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "V",
                "variable" : 1
              }
            },
            "type" : "cast"
          },
          "type" : "cast"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 842,
      "code" : "v := (*funcType)(unsafe.Pointer(V))",
      "entry" : false,
      "use-vars" : [ 1 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 20, 22 ],
      "in-vars" : [ 14, 2, 12 ],
      "exit" : false,
      "out-vars" : [ 2, 12, 14 ],
      "decl-vars" : [ ],
      "line-start" : 843,
      "ast" : {
        "condition" : {
          "go-type" : 19,
          "kind" : "expression",
          "left" : {
            "go-type" : 19,
            "kind" : "expression",
            "left" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "outCount",
                "variable" : 13
              },
              "go-type" : 49,
              "kind" : "expression",
              "target" : {
                "go-type" : 53,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "t",
                  "variable" : 12
                }
              },
              "type" : "selector"
            },
            "operator" : "!=",
            "right" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "outCount",
                "variable" : 13
              },
              "go-type" : 49,
              "kind" : "expression",
              "target" : {
                "go-type" : 53,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "v",
                  "variable" : 14
                }
              },
              "type" : "selector"
            },
            "type" : "binary"
          },
          "operator" : "||",
          "right" : {
            "go-type" : 19,
            "kind" : "expression",
            "left" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "inCount",
                "variable" : 15
              },
              "go-type" : 49,
              "kind" : "expression",
              "target" : {
                "go-type" : 53,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "t",
                  "variable" : 12
                }
              },
              "type" : "selector"
            },
            "operator" : "!=",
            "right" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "inCount",
                "variable" : 15
              },
              "go-type" : 49,
              "kind" : "expression",
              "target" : {
                "go-type" : 53,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "v",
                  "variable" : 14
                }
              },
              "type" : "selector"
            },
            "type" : "binary"
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 845,
      "code" : "if t.outCount != v.outCount || t.inCount != v.inCount {\n\treturn false\n}",
      "entry" : false,
      "use-vars" : [ 12, 14 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 844,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 13,
          "kind" : "constant",
          "value" : {
            "type" : "BOOL",
            "value" : "false"
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 844,
      "code" : "return false",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 24, 27 ],
      "in-vars" : [ 14, 2, 12, 16 ],
      "exit" : false,
      "out-vars" : [ 2, 12, 16, 14 ],
      "decl-vars" : [ ],
      "line-start" : 846,
      "ast" : {
        "condition" : {
          "go-type" : 19,
          "kind" : "expression",
          "left" : {
            "go-type" : 25,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "i",
              "variable" : 16
            }
          },
          "operator" : "<",
          "right" : {
            "arguments" : [ ],
            "ellipsis" : false,
            "function" : {
              "field" : {
                "function" : 6,
                "ident-kind" : "Func",
                "kind" : "ident",
                "value" : "NumIn"
              },
              "go-type" : 26,
              "kind" : "expression",
              "target" : {
                "go-type" : 53,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "t",
                  "variable" : 12
                }
              },
              "type" : "selector"
            },
            "go-type" : 25,
            "kind" : "expression",
            "type" : "call"
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "for"
      },
      "assign-vars" : [ ],
      "line-end" : 850,
      "code" : "for i := 0; i < t.NumIn(); i++ {\n\tif !haveIdenticalType(t.In(i), v.In(i), cmpTags) {\n\t\treturn false\n\t}\n}",
      "entry" : false,
      "use-vars" : [ 16, 12 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 21 ],
      "in-vars" : [ 2, 12, 14 ],
      "exit" : false,
      "out-vars" : [ 2, 12, 16, 14 ],
      "decl-vars" : [ 16 ],
      "line-start" : 846,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "i"
          }
        } ],
        "right" : [ {
          "go-type" : 25,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "0"
          }
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 846,
      "code" : "i := 0",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ 16 ],
      "successors" : [ 21 ],
      "in-vars" : [ 12, 16, 14, 2 ],
      "exit" : false,
      "out-vars" : [ 14, 2, 12, 16 ],
      "decl-vars" : [ ],
      "line-start" : 846,
      "ast" : {
        "kind" : "statement",
        "operation" : "++",
        "target" : {
          "go-type" : 25,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "i",
            "variable" : 16
          }
        },
        "type" : "crement"
      },
      "assign-vars" : [ 16 ],
      "line-end" : 846,
      "code" : "i++",
      "entry" : false,
      "use-vars" : [ 16 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 25, 23 ],
      "in-vars" : [ 2, 12, 16, 14 ],
      "exit" : false,
      "out-vars" : [ 12, 16, 14, 2 ],
      "decl-vars" : [ ],
      "line-start" : 847,
      "ast" : {
        "condition" : {
          "go-type" : 13,
          "kind" : "expression",
          "operator" : "!",
          "target" : {
            "arguments" : [ {
              "arguments" : [ {
                "go-type" : 25,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "i",
                  "variable" : 16
                }
              } ],
              "ellipsis" : false,
              "function" : {
                "field" : {
                  "function" : 7,
                  "ident-kind" : "Func",
                  "kind" : "ident",
                  "value" : "In"
                },
                "go-type" : 56,
                "kind" : "expression",
                "target" : {
                  "go-type" : 53,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "t",
                    "variable" : 12
                  }
                },
                "type" : "selector"
              },
              "go-type" : 30,
              "kind" : "expression",
              "type" : "call"
            }, {
              "arguments" : [ {
                "go-type" : 25,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "i",
                  "variable" : 16
                }
              } ],
              "ellipsis" : false,
              "function" : {
                "field" : {
                  "function" : 7,
                  "ident-kind" : "Func",
                  "kind" : "ident",
                  "value" : "In"
                },
                "go-type" : 56,
                "kind" : "expression",
                "target" : {
                  "go-type" : 53,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "v",
                    "variable" : 14
                  }
                },
                "type" : "selector"
              },
              "go-type" : 30,
              "kind" : "expression",
              "type" : "call"
            }, {
              "go-type" : 13,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "cmpTags",
                "variable" : 2
              }
            } ],
            "ellipsis" : false,
            "function" : {
              "go-type" : 28,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "function" : 3,
                "ident-kind" : "Func",
                "kind" : "ident",
                "value" : "haveIdenticalType"
              }
            },
            "go-type" : 13,
            "kind" : "expression",
            "type" : "call"
          },
          "type" : "unary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 849,
      "code" : "if !haveIdenticalType(t.In(i), v.In(i), cmpTags) {\n\treturn false\n}",
      "entry" : false,
      "use-vars" : [ 14, 2, 12, 16 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 848,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 13,
          "kind" : "constant",
          "value" : {
            "type" : "BOOL",
            "value" : "false"
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 848,
      "code" : "return false",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 29, 31 ],
      "in-vars" : [ 2, 17, 12, 14 ],
      "exit" : false,
      "out-vars" : [ 2, 17, 12, 14 ],
      "decl-vars" : [ ],
      "line-start" : 851,
      "ast" : {
        "condition" : {
          "go-type" : 19,
          "kind" : "expression",
          "left" : {
            "go-type" : 25,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "i",
              "variable" : 17
            }
          },
          "operator" : "<",
          "right" : {
            "arguments" : [ ],
            "ellipsis" : false,
            "function" : {
              "field" : {
                "function" : 8,
                "ident-kind" : "Func",
                "kind" : "ident",
                "value" : "NumOut"
              },
              "go-type" : 26,
              "kind" : "expression",
              "target" : {
                "go-type" : 53,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "t",
                  "variable" : 12
                }
              },
              "type" : "selector"
            },
            "go-type" : 25,
            "kind" : "expression",
            "type" : "call"
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "for"
      },
      "assign-vars" : [ ],
      "line-end" : 855,
      "code" : "for i := 0; i < t.NumOut(); i++ {\n\tif !haveIdenticalType(t.Out(i), v.Out(i), cmpTags) {\n\t\treturn false\n\t}\n}",
      "entry" : false,
      "use-vars" : [ 17, 12 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 26 ],
      "in-vars" : [ 2, 12, 14 ],
      "exit" : false,
      "out-vars" : [ 12, 14, 2, 17 ],
      "decl-vars" : [ 17 ],
      "line-start" : 851,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "i"
          }
        } ],
        "right" : [ {
          "go-type" : 25,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "0"
          }
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 851,
      "code" : "i := 0",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ 17 ],
      "successors" : [ 26 ],
      "in-vars" : [ 2, 17, 12, 14 ],
      "exit" : false,
      "out-vars" : [ 14, 2, 17, 12 ],
      "decl-vars" : [ ],
      "line-start" : 851,
      "ast" : {
        "kind" : "statement",
        "operation" : "++",
        "target" : {
          "go-type" : 25,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "i",
            "variable" : 17
          }
        },
        "type" : "crement"
      },
      "assign-vars" : [ 17 ],
      "line-end" : 851,
      "code" : "i++",
      "entry" : false,
      "use-vars" : [ 17 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 30, 28 ],
      "in-vars" : [ 2, 17, 12, 14 ],
      "exit" : false,
      "out-vars" : [ 17, 12, 14, 2 ],
      "decl-vars" : [ ],
      "line-start" : 852,
      "ast" : {
        "condition" : {
          "go-type" : 13,
          "kind" : "expression",
          "operator" : "!",
          "target" : {
            "arguments" : [ {
              "arguments" : [ {
                "go-type" : 25,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "i",
                  "variable" : 17
                }
              } ],
              "ellipsis" : false,
              "function" : {
                "field" : {
                  "function" : 9,
                  "ident-kind" : "Func",
                  "kind" : "ident",
                  "value" : "Out"
                },
                "go-type" : 56,
                "kind" : "expression",
                "target" : {
                  "go-type" : 53,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "t",
                    "variable" : 12
                  }
                },
                "type" : "selector"
              },
              "go-type" : 30,
              "kind" : "expression",
              "type" : "call"
            }, {
              "arguments" : [ {
                "go-type" : 25,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "i",
                  "variable" : 17
                }
              } ],
              "ellipsis" : false,
              "function" : {
                "field" : {
                  "function" : 9,
                  "ident-kind" : "Func",
                  "kind" : "ident",
                  "value" : "Out"
                },
                "go-type" : 56,
                "kind" : "expression",
                "target" : {
                  "go-type" : 53,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "v",
                    "variable" : 14
                  }
                },
                "type" : "selector"
              },
              "go-type" : 30,
              "kind" : "expression",
              "type" : "call"
            }, {
              "go-type" : 13,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "cmpTags",
                "variable" : 2
              }
            } ],
            "ellipsis" : false,
            "function" : {
              "go-type" : 28,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "function" : 3,
                "ident-kind" : "Func",
                "kind" : "ident",
                "value" : "haveIdenticalType"
              }
            },
            "go-type" : 13,
            "kind" : "expression",
            "type" : "call"
          },
          "type" : "unary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 854,
      "code" : "if !haveIdenticalType(t.Out(i), v.Out(i), cmpTags) {\n\treturn false\n}",
      "entry" : false,
      "use-vars" : [ 17, 14, 2, 12 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 853,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 13,
          "kind" : "constant",
          "value" : {
            "type" : "BOOL",
            "value" : "false"
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 853,
      "code" : "return false",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 856,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 13,
          "kind" : "constant",
          "value" : {
            "type" : "BOOL",
            "value" : "true"
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 856,
      "code" : "return true",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 33 ],
      "in-vars" : [ 1, 0 ],
      "exit" : false,
      "out-vars" : [ 1, 0 ],
      "decl-vars" : [ ],
      "line-start" : 858,
      "ast" : {
        "expressions" : [ {
          "go-type" : 20,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "20"
          }
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 866,
      "code" : "case Interface:\n\tt := (*interfaceType)(unsafe.Pointer(T))\n\tv := (*interfaceType)(unsafe.Pointer(V))\n\tif len(t.methods) == 0 && len(v.methods) == 0 {\n\t\treturn true\n\t}\n\n\treturn false",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 34 ],
      "in-vars" : [ 1, 0 ],
      "exit" : false,
      "out-vars" : [ 18, 1 ],
      "decl-vars" : [ 18 ],
      "line-start" : 859,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "t"
          }
        } ],
        "right" : [ {
          "coerced-to" : {
            "contained" : {
              "go-type" : 59,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 59,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "interfaceType"
              }
            },
            "go-type" : 58,
            "kind" : "type",
            "type" : "pointer"
          },
          "go-type" : 58,
          "kind" : "expression",
          "target" : {
            "coerced-to" : {
              "go-type" : 11,
              "kind" : "type",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 1,
                "value" : "unsafe"
              },
              "type" : "identifier",
              "value" : {
                "go-type" : 11,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "Pointer"
              }
            },
            "go-type" : 11,
            "kind" : "expression",
            "target" : {
              "go-type" : 2,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "T",
                "variable" : 0
              }
            },
            "type" : "cast"
          },
          "type" : "cast"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 859,
      "code" : "t := (*interfaceType)(unsafe.Pointer(T))",
      "entry" : false,
      "use-vars" : [ 0 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 35 ],
      "in-vars" : [ 1, 18 ],
      "exit" : false,
      "out-vars" : [ 20, 18 ],
      "decl-vars" : [ 20 ],
      "line-start" : 860,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "v"
          }
        } ],
        "right" : [ {
          "coerced-to" : {
            "contained" : {
              "go-type" : 59,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 59,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "interfaceType"
              }
            },
            "go-type" : 58,
            "kind" : "type",
            "type" : "pointer"
          },
          "go-type" : 58,
          "kind" : "expression",
          "target" : {
            "coerced-to" : {
              "go-type" : 11,
              "kind" : "type",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 1,
                "value" : "unsafe"
              },
              "type" : "identifier",
              "value" : {
                "go-type" : 11,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "Pointer"
              }
            },
            "go-type" : 11,
            "kind" : "expression",
            "target" : {
              "go-type" : 2,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "V",
                "variable" : 1
              }
            },
            "type" : "cast"
          },
          "type" : "cast"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 860,
      "code" : "v := (*interfaceType)(unsafe.Pointer(V))",
      "entry" : false,
      "use-vars" : [ 1 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 36, 37 ],
      "in-vars" : [ 20, 18 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 861,
      "ast" : {
        "condition" : {
          "go-type" : 19,
          "kind" : "expression",
          "left" : {
            "go-type" : 19,
            "kind" : "expression",
            "left" : {
              "arguments" : [ {
                "field" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "methods",
                  "variable" : 19
                },
                "go-type" : 63,
                "kind" : "expression",
                "target" : {
                  "go-type" : 58,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "t",
                    "variable" : 18
                  }
                },
                "type" : "selector"
              } ],
              "ellipsis" : false,
              "function" : {
                "go-type" : 66,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Builtin",
                  "kind" : "ident",
                  "value" : "len"
                }
              },
              "go-type" : 25,
              "kind" : "expression",
              "type" : "call"
            },
            "operator" : "==",
            "right" : {
              "go-type" : 25,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "0"
              }
            },
            "type" : "binary"
          },
          "operator" : "&&",
          "right" : {
            "go-type" : 19,
            "kind" : "expression",
            "left" : {
              "arguments" : [ {
                "field" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "methods",
                  "variable" : 19
                },
                "go-type" : 63,
                "kind" : "expression",
                "target" : {
                  "go-type" : 58,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "v",
                    "variable" : 20
                  }
                },
                "type" : "selector"
              } ],
              "ellipsis" : false,
              "function" : {
                "go-type" : 66,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Builtin",
                  "kind" : "ident",
                  "value" : "len"
                }
              },
              "go-type" : 25,
              "kind" : "expression",
              "type" : "call"
            },
            "operator" : "==",
            "right" : {
              "go-type" : 25,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "0"
              }
            },
            "type" : "binary"
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 863,
      "code" : "if len(t.methods) == 0 && len(v.methods) == 0 {\n\treturn true\n}",
      "entry" : false,
      "use-vars" : [ 18, 20 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 862,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 13,
          "kind" : "constant",
          "value" : {
            "type" : "BOOL",
            "value" : "true"
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 862,
      "code" : "return true",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 866,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 13,
          "kind" : "constant",
          "value" : {
            "type" : "BOOL",
            "value" : "false"
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 866,
      "code" : "return false",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 39 ],
      "in-vars" : [ 0, 2, 1 ],
      "exit" : false,
      "out-vars" : [ 0, 2, 1 ],
      "decl-vars" : [ ],
      "line-start" : 868,
      "ast" : {
        "expressions" : [ {
          "go-type" : 20,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "21"
          }
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 869,
      "code" : "case Map:\n\treturn haveIdenticalType(T.Key(), V.Key(), cmpTags) && haveIdenticalType(T.Elem(), V.Elem(), cmpTags)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 2, 1, 0 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 869,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 13,
          "kind" : "expression",
          "left" : {
            "arguments" : [ {
              "arguments" : [ ],
              "ellipsis" : false,
              "function" : {
                "field" : {
                  "function" : 10,
                  "ident-kind" : "Func",
                  "kind" : "ident",
                  "value" : "Key"
                },
                "go-type" : 35,
                "kind" : "expression",
                "target" : {
                  "go-type" : 2,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "T",
                    "variable" : 0
                  }
                },
                "type" : "selector"
              },
              "go-type" : 30,
              "kind" : "expression",
              "type" : "call"
            }, {
              "arguments" : [ ],
              "ellipsis" : false,
              "function" : {
                "field" : {
                  "function" : 10,
                  "ident-kind" : "Func",
                  "kind" : "ident",
                  "value" : "Key"
                },
                "go-type" : 35,
                "kind" : "expression",
                "target" : {
                  "go-type" : 2,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "V",
                    "variable" : 1
                  }
                },
                "type" : "selector"
              },
              "go-type" : 30,
              "kind" : "expression",
              "type" : "call"
            }, {
              "go-type" : 13,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "cmpTags",
                "variable" : 2
              }
            } ],
            "ellipsis" : false,
            "function" : {
              "go-type" : 28,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "function" : 3,
                "ident-kind" : "Func",
                "kind" : "ident",
                "value" : "haveIdenticalType"
              }
            },
            "go-type" : 13,
            "kind" : "expression",
            "type" : "call"
          },
          "operator" : "&&",
          "right" : {
            "arguments" : [ {
              "arguments" : [ ],
              "ellipsis" : false,
              "function" : {
                "field" : {
                  "function" : 4,
                  "ident-kind" : "Func",
                  "kind" : "ident",
                  "value" : "Elem"
                },
                "go-type" : 35,
                "kind" : "expression",
                "target" : {
                  "go-type" : 2,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "T",
                    "variable" : 0
                  }
                },
                "type" : "selector"
              },
              "go-type" : 30,
              "kind" : "expression",
              "type" : "call"
            }, {
              "arguments" : [ ],
              "ellipsis" : false,
              "function" : {
                "field" : {
                  "function" : 4,
                  "ident-kind" : "Func",
                  "kind" : "ident",
                  "value" : "Elem"
                },
                "go-type" : 35,
                "kind" : "expression",
                "target" : {
                  "go-type" : 2,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "V",
                    "variable" : 1
                  }
                },
                "type" : "selector"
              },
              "go-type" : 30,
              "kind" : "expression",
              "type" : "call"
            }, {
              "go-type" : 13,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "cmpTags",
                "variable" : 2
              }
            } ],
            "ellipsis" : false,
            "function" : {
              "go-type" : 28,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "function" : 3,
                "ident-kind" : "Func",
                "kind" : "ident",
                "value" : "haveIdenticalType"
              }
            },
            "go-type" : 13,
            "kind" : "expression",
            "type" : "call"
          },
          "type" : "binary"
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 869,
      "code" : "return haveIdenticalType(T.Key(), V.Key(), cmpTags) && haveIdenticalType(T.Elem(), V.Elem(), cmpTags)",
      "entry" : false,
      "use-vars" : [ 0, 1, 2 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 41 ],
      "in-vars" : [ 2, 1, 0 ],
      "exit" : false,
      "out-vars" : [ 2, 1, 0 ],
      "decl-vars" : [ ],
      "line-start" : 871,
      "ast" : {
        "expressions" : [ {
          "go-type" : 20,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "22"
          }
        }, {
          "go-type" : 20,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "23"
          }
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 872,
      "code" : "case Ptr, Slice:\n\treturn haveIdenticalType(T.Elem(), V.Elem(), cmpTags)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 0, 2, 1 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 872,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "arguments" : [ {
            "arguments" : [ ],
            "ellipsis" : false,
            "function" : {
              "field" : {
                "function" : 4,
                "ident-kind" : "Func",
                "kind" : "ident",
                "value" : "Elem"
              },
              "go-type" : 35,
              "kind" : "expression",
              "target" : {
                "go-type" : 2,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "T",
                  "variable" : 0
                }
              },
              "type" : "selector"
            },
            "go-type" : 30,
            "kind" : "expression",
            "type" : "call"
          }, {
            "arguments" : [ ],
            "ellipsis" : false,
            "function" : {
              "field" : {
                "function" : 4,
                "ident-kind" : "Func",
                "kind" : "ident",
                "value" : "Elem"
              },
              "go-type" : 35,
              "kind" : "expression",
              "target" : {
                "go-type" : 2,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "V",
                  "variable" : 1
                }
              },
              "type" : "selector"
            },
            "go-type" : 30,
            "kind" : "expression",
            "type" : "call"
          }, {
            "go-type" : 13,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "cmpTags",
              "variable" : 2
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 28,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 3,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "haveIdenticalType"
            }
          },
          "go-type" : 13,
          "kind" : "expression",
          "type" : "call"
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 872,
      "code" : "return haveIdenticalType(T.Elem(), V.Elem(), cmpTags)",
      "entry" : false,
      "use-vars" : [ 0, 1, 2 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 43 ],
      "in-vars" : [ 2, 1, 0 ],
      "exit" : false,
      "out-vars" : [ 2, 1, 0 ],
      "decl-vars" : [ ],
      "line-start" : 874,
      "ast" : {
        "expressions" : [ {
          "go-type" : 20,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "25"
          }
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 899,
      "code" : "case Struct:\n\tt := (*structType)(unsafe.Pointer(T))\n\tv := (*structType)(unsafe.Pointer(V))\n\tif len(t.fields) != len(v.fields) {\n\t\treturn false\n\t}\n\tif t.pkgPath.name() != v.pkgPath.name() {\n\t\treturn false\n\t}\n\tfor i := range t.fields {\n\t\ttf := &t.fields[i]\n\t\tvf := &v.fields[i]\n\t\tif tf.name.name() != vf.name.name() {\n\t\t\treturn false\n\t\t}\n\t\tif !haveIdenticalType(tf.typ, vf.typ, cmpTags) {\n\t\t\treturn false\n\t\t}\n\t\tif cmpTags && tf.name.tag() != vf.name.tag() {\n\t\t\treturn false\n\t\t}\n\t\tif tf.offsetEmbed != vf.offsetEmbed {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn true",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 44 ],
      "in-vars" : [ 0, 2, 1 ],
      "exit" : false,
      "out-vars" : [ 2, 1, 21 ],
      "decl-vars" : [ 21 ],
      "line-start" : 875,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "t"
          }
        } ],
        "right" : [ {
          "coerced-to" : {
            "contained" : {
              "go-type" : 69,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 69,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "structType"
              }
            },
            "go-type" : 68,
            "kind" : "type",
            "type" : "pointer"
          },
          "go-type" : 68,
          "kind" : "expression",
          "target" : {
            "coerced-to" : {
              "go-type" : 11,
              "kind" : "type",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 1,
                "value" : "unsafe"
              },
              "type" : "identifier",
              "value" : {
                "go-type" : 11,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "Pointer"
              }
            },
            "go-type" : 11,
            "kind" : "expression",
            "target" : {
              "go-type" : 2,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "T",
                "variable" : 0
              }
            },
            "type" : "cast"
          },
          "type" : "cast"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 875,
      "code" : "t := (*structType)(unsafe.Pointer(T))",
      "entry" : false,
      "use-vars" : [ 0 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 45 ],
      "in-vars" : [ 21, 2, 1 ],
      "exit" : false,
      "out-vars" : [ 2, 21, 23 ],
      "decl-vars" : [ 23 ],
      "line-start" : 876,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "v"
          }
        } ],
        "right" : [ {
          "coerced-to" : {
            "contained" : {
              "go-type" : 69,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 69,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "structType"
              }
            },
            "go-type" : 68,
            "kind" : "type",
            "type" : "pointer"
          },
          "go-type" : 68,
          "kind" : "expression",
          "target" : {
            "coerced-to" : {
              "go-type" : 11,
              "kind" : "type",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 1,
                "value" : "unsafe"
              },
              "type" : "identifier",
              "value" : {
                "go-type" : 11,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "Pointer"
              }
            },
            "go-type" : 11,
            "kind" : "expression",
            "target" : {
              "go-type" : 2,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "V",
                "variable" : 1
              }
            },
            "type" : "cast"
          },
          "type" : "cast"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 876,
      "code" : "v := (*structType)(unsafe.Pointer(V))",
      "entry" : false,
      "use-vars" : [ 1 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 46, 47 ],
      "in-vars" : [ 2, 21, 23 ],
      "exit" : false,
      "out-vars" : [ 2, 21, 23 ],
      "decl-vars" : [ ],
      "line-start" : 877,
      "ast" : {
        "condition" : {
          "go-type" : 19,
          "kind" : "expression",
          "left" : {
            "arguments" : [ {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "fields",
                "variable" : 22
              },
              "go-type" : 71,
              "kind" : "expression",
              "target" : {
                "go-type" : 68,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "t",
                  "variable" : 21
                }
              },
              "type" : "selector"
            } ],
            "ellipsis" : false,
            "function" : {
              "go-type" : 74,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Builtin",
                "kind" : "ident",
                "value" : "len"
              }
            },
            "go-type" : 25,
            "kind" : "expression",
            "type" : "call"
          },
          "operator" : "!=",
          "right" : {
            "arguments" : [ {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "fields",
                "variable" : 22
              },
              "go-type" : 71,
              "kind" : "expression",
              "target" : {
                "go-type" : 68,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "v",
                  "variable" : 23
                }
              },
              "type" : "selector"
            } ],
            "ellipsis" : false,
            "function" : {
              "go-type" : 74,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Builtin",
                "kind" : "ident",
                "value" : "len"
              }
            },
            "go-type" : 25,
            "kind" : "expression",
            "type" : "call"
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 879,
      "code" : "if len(t.fields) != len(v.fields) {\n\treturn false\n}",
      "entry" : false,
      "use-vars" : [ 21, 23 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 878,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 13,
          "kind" : "constant",
          "value" : {
            "type" : "BOOL",
            "value" : "false"
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 878,
      "code" : "return false",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 48, 49 ],
      "in-vars" : [ 2, 21, 23 ],
      "exit" : false,
      "out-vars" : [ 2, 21, 23 ],
      "decl-vars" : [ ],
      "line-start" : 880,
      "ast" : {
        "condition" : {
          "go-type" : 19,
          "kind" : "expression",
          "left" : {
            "arguments" : [ ],
            "ellipsis" : false,
            "function" : {
              "field" : {
                "function" : 11,
                "ident-kind" : "Func",
                "kind" : "ident",
                "value" : "name"
              },
              "go-type" : 76,
              "kind" : "expression",
              "target" : {
                "field" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "pkgPath",
                  "variable" : 24
                },
                "go-type" : 61,
                "kind" : "expression",
                "target" : {
                  "go-type" : 68,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "t",
                    "variable" : 21
                  }
                },
                "type" : "selector"
              },
              "type" : "selector"
            },
            "go-type" : 39,
            "kind" : "expression",
            "type" : "call"
          },
          "operator" : "!=",
          "right" : {
            "arguments" : [ ],
            "ellipsis" : false,
            "function" : {
              "field" : {
                "function" : 11,
                "ident-kind" : "Func",
                "kind" : "ident",
                "value" : "name"
              },
              "go-type" : 76,
              "kind" : "expression",
              "target" : {
                "field" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "pkgPath",
                  "variable" : 24
                },
                "go-type" : 61,
                "kind" : "expression",
                "target" : {
                  "go-type" : 68,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "v",
                    "variable" : 23
                  }
                },
                "type" : "selector"
              },
              "type" : "selector"
            },
            "go-type" : 39,
            "kind" : "expression",
            "type" : "call"
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 882,
      "code" : "if t.pkgPath.name() != v.pkgPath.name() {\n\treturn false\n}",
      "entry" : false,
      "use-vars" : [ 21, 23 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 881,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 13,
          "kind" : "constant",
          "value" : {
            "type" : "BOOL",
            "value" : "false"
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 881,
      "code" : "return false",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 50, 60 ],
      "in-vars" : [ 21, 23, 2 ],
      "exit" : false,
      "out-vars" : [ 2, 21, 23, 25 ],
      "decl-vars" : [ 25 ],
      "line-start" : 883,
      "ast" : {
        "is-assign" : false,
        "key" : {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "i"
          }
        },
        "kind" : "statement",
        "target" : {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "fields",
            "variable" : 22
          },
          "go-type" : 71,
          "kind" : "expression",
          "target" : {
            "go-type" : 68,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "t",
              "variable" : 21
            }
          },
          "type" : "selector"
        },
        "type" : "range",
        "value" : null
      },
      "assign-vars" : [ ],
      "line-end" : 898,
      "code" : "for i := range t.fields {\n\ttf := &t.fields[i]\n\tvf := &v.fields[i]\n\tif tf.name.name() != vf.name.name() {\n\t\treturn false\n\t}\n\tif !haveIdenticalType(tf.typ, vf.typ, cmpTags) {\n\t\treturn false\n\t}\n\tif cmpTags && tf.name.tag() != vf.name.tag() {\n\t\treturn false\n\t}\n\tif tf.offsetEmbed != vf.offsetEmbed {\n\t\treturn false\n\t}\n}",
      "entry" : false,
      "use-vars" : [ 21 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 51 ],
      "in-vars" : [ 2, 21, 23, 25 ],
      "exit" : false,
      "out-vars" : [ 21, 23, 25, 2, 26 ],
      "decl-vars" : [ 26 ],
      "line-start" : 884,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "tf"
          }
        } ],
        "right" : [ {
          "go-type" : 78,
          "kind" : "expression",
          "operator" : "&",
          "target" : {
            "go-type" : 72,
            "index" : {
              "go-type" : 25,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "i",
                "variable" : 25
              }
            },
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "fields",
                "variable" : 22
              },
              "go-type" : 71,
              "kind" : "expression",
              "target" : {
                "go-type" : 68,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "t",
                  "variable" : 21
                }
              },
              "type" : "selector"
            },
            "type" : "index"
          },
          "type" : "unary"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 884,
      "code" : "tf := &t.fields[i]",
      "entry" : false,
      "use-vars" : [ 21, 25 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 52 ],
      "in-vars" : [ 2, 26, 21, 23, 25 ],
      "exit" : false,
      "out-vars" : [ 2, 26, 28, 21, 23 ],
      "decl-vars" : [ 28 ],
      "line-start" : 885,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "vf"
          }
        } ],
        "right" : [ {
          "go-type" : 78,
          "kind" : "expression",
          "operator" : "&",
          "target" : {
            "go-type" : 72,
            "index" : {
              "go-type" : 25,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "i",
                "variable" : 25
              }
            },
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "fields",
                "variable" : 22
              },
              "go-type" : 71,
              "kind" : "expression",
              "target" : {
                "go-type" : 68,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "v",
                  "variable" : 23
                }
              },
              "type" : "selector"
            },
            "type" : "index"
          },
          "type" : "unary"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 885,
      "code" : "vf := &v.fields[i]",
      "entry" : false,
      "use-vars" : [ 23, 25 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 53, 54 ],
      "in-vars" : [ 2, 26, 28, 21, 23 ],
      "exit" : false,
      "out-vars" : [ 28, 21, 23, 2, 26 ],
      "decl-vars" : [ ],
      "line-start" : 886,
      "ast" : {
        "condition" : {
          "go-type" : 19,
          "kind" : "expression",
          "left" : {
            "arguments" : [ ],
            "ellipsis" : false,
            "function" : {
              "field" : {
                "function" : 11,
                "ident-kind" : "Func",
                "kind" : "ident",
                "value" : "name"
              },
              "go-type" : 76,
              "kind" : "expression",
              "target" : {
                "field" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "name",
                  "variable" : 27
                },
                "go-type" : 61,
                "kind" : "expression",
                "target" : {
                  "go-type" : 78,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "tf",
                    "variable" : 26
                  }
                },
                "type" : "selector"
              },
              "type" : "selector"
            },
            "go-type" : 39,
            "kind" : "expression",
            "type" : "call"
          },
          "operator" : "!=",
          "right" : {
            "arguments" : [ ],
            "ellipsis" : false,
            "function" : {
              "field" : {
                "function" : 11,
                "ident-kind" : "Func",
                "kind" : "ident",
                "value" : "name"
              },
              "go-type" : 76,
              "kind" : "expression",
              "target" : {
                "field" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "name",
                  "variable" : 27
                },
                "go-type" : 61,
                "kind" : "expression",
                "target" : {
                  "go-type" : 78,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "vf",
                    "variable" : 28
                  }
                },
                "type" : "selector"
              },
              "type" : "selector"
            },
            "go-type" : 39,
            "kind" : "expression",
            "type" : "call"
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 888,
      "code" : "if tf.name.name() != vf.name.name() {\n\treturn false\n}",
      "entry" : false,
      "use-vars" : [ 28, 26 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 887,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 13,
          "kind" : "constant",
          "value" : {
            "type" : "BOOL",
            "value" : "false"
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 887,
      "code" : "return false",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 55, 56 ],
      "in-vars" : [ 23, 2, 26, 28, 21 ],
      "exit" : false,
      "out-vars" : [ 23, 2, 26, 28, 21 ],
      "decl-vars" : [ ],
      "line-start" : 889,
      "ast" : {
        "condition" : {
          "go-type" : 13,
          "kind" : "expression",
          "operator" : "!",
          "target" : {
            "arguments" : [ {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "typ",
                "variable" : 29
              },
              "go-type" : 2,
              "kind" : "expression",
              "target" : {
                "go-type" : 78,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "tf",
                  "variable" : 26
                }
              },
              "type" : "selector"
            }, {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "typ",
                "variable" : 29
              },
              "go-type" : 2,
              "kind" : "expression",
              "target" : {
                "go-type" : 78,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "vf",
                  "variable" : 28
                }
              },
              "type" : "selector"
            }, {
              "go-type" : 13,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "cmpTags",
                "variable" : 2
              }
            } ],
            "ellipsis" : false,
            "function" : {
              "go-type" : 28,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "function" : 3,
                "ident-kind" : "Func",
                "kind" : "ident",
                "value" : "haveIdenticalType"
              }
            },
            "go-type" : 13,
            "kind" : "expression",
            "type" : "call"
          },
          "type" : "unary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 891,
      "code" : "if !haveIdenticalType(tf.typ, vf.typ, cmpTags) {\n\treturn false\n}",
      "entry" : false,
      "use-vars" : [ 28, 2, 26 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 890,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 13,
          "kind" : "constant",
          "value" : {
            "type" : "BOOL",
            "value" : "false"
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 890,
      "code" : "return false",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 57, 58 ],
      "in-vars" : [ 26, 28, 21, 23, 2 ],
      "exit" : false,
      "out-vars" : [ 28, 21, 23, 2, 26 ],
      "decl-vars" : [ ],
      "line-start" : 892,
      "ast" : {
        "condition" : {
          "go-type" : 13,
          "kind" : "expression",
          "left" : {
            "go-type" : 13,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "cmpTags",
              "variable" : 2
            }
          },
          "operator" : "&&",
          "right" : {
            "go-type" : 13,
            "kind" : "expression",
            "left" : {
              "arguments" : [ ],
              "ellipsis" : false,
              "function" : {
                "field" : {
                  "function" : 12,
                  "ident-kind" : "Func",
                  "kind" : "ident",
                  "value" : "tag"
                },
                "go-type" : 76,
                "kind" : "expression",
                "target" : {
                  "field" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "name",
                    "variable" : 27
                  },
                  "go-type" : 61,
                  "kind" : "expression",
                  "target" : {
                    "go-type" : 78,
                    "kind" : "expression",
                    "type" : "identifier",
                    "value" : {
                      "ident-kind" : "Var",
                      "kind" : "ident",
                      "value" : "tf",
                      "variable" : 26
                    }
                  },
                  "type" : "selector"
                },
                "type" : "selector"
              },
              "go-type" : 39,
              "kind" : "expression",
              "type" : "call"
            },
            "operator" : "!=",
            "right" : {
              "arguments" : [ ],
              "ellipsis" : false,
              "function" : {
                "field" : {
                  "function" : 12,
                  "ident-kind" : "Func",
                  "kind" : "ident",
                  "value" : "tag"
                },
                "go-type" : 76,
                "kind" : "expression",
                "target" : {
                  "field" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "name",
                    "variable" : 27
                  },
                  "go-type" : 61,
                  "kind" : "expression",
                  "target" : {
                    "go-type" : 78,
                    "kind" : "expression",
                    "type" : "identifier",
                    "value" : {
                      "ident-kind" : "Var",
                      "kind" : "ident",
                      "value" : "vf",
                      "variable" : 28
                    }
                  },
                  "type" : "selector"
                },
                "type" : "selector"
              },
              "go-type" : 39,
              "kind" : "expression",
              "type" : "call"
            },
            "type" : "binary"
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 894,
      "code" : "if cmpTags && tf.name.tag() != vf.name.tag() {\n\treturn false\n}",
      "entry" : false,
      "use-vars" : [ 2, 26, 28 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 893,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 13,
          "kind" : "constant",
          "value" : {
            "type" : "BOOL",
            "value" : "false"
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 893,
      "code" : "return false",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 59, 49 ],
      "in-vars" : [ 21, 23, 2, 26, 28 ],
      "exit" : false,
      "out-vars" : [ 2, 21, 23 ],
      "decl-vars" : [ ],
      "line-start" : 895,
      "ast" : {
        "condition" : {
          "go-type" : 19,
          "kind" : "expression",
          "left" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "offsetEmbed",
              "variable" : 30
            },
            "go-type" : 5,
            "kind" : "expression",
            "target" : {
              "go-type" : 78,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "tf",
                "variable" : 26
              }
            },
            "type" : "selector"
          },
          "operator" : "!=",
          "right" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "offsetEmbed",
              "variable" : 30
            },
            "go-type" : 5,
            "kind" : "expression",
            "target" : {
              "go-type" : 78,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "vf",
                "variable" : 28
              }
            },
            "type" : "selector"
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 897,
      "code" : "if tf.offsetEmbed != vf.offsetEmbed {\n\treturn false\n}",
      "entry" : false,
      "use-vars" : [ 26, 28 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 896,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 13,
          "kind" : "constant",
          "value" : {
            "type" : "BOOL",
            "value" : "false"
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 896,
      "code" : "return false",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 899,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 13,
          "kind" : "constant",
          "value" : {
            "type" : "BOOL",
            "value" : "true"
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 899,
      "code" : "return true",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 902,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 13,
          "kind" : "constant",
          "value" : {
            "type" : "BOOL",
            "value" : "false"
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 902,
      "code" : "return false",
      "entry" : false,
      "use-vars" : [ ]
    } ],
    "code" : "func haveIdenticalUnderlyingType(T, V *rtype, cmpTags bool) bool {\n\tif T == V {\n\t\treturn true\n\t}\n\n\tkind := T.Kind()\n\tif kind != V.Kind() {\n\t\treturn false\n\t}\n\n\tif Bool <= kind && kind <= Complex128 || kind == String || kind == UnsafePointer {\n\t\treturn true\n\t}\n\n\tswitch kind {\n\tcase Array:\n\t\treturn T.Len() == V.Len() && haveIdenticalType(T.Elem(), V.Elem(), cmpTags)\n\n\tcase Chan:\n\n\t\tif V.chanDir() == bothDir && haveIdenticalType(T.Elem(), V.Elem(), cmpTags) {\n\t\t\treturn true\n\t\t}\n\n\t\treturn V.chanDir() == T.chanDir() && haveIdenticalType(T.Elem(), V.Elem(), cmpTags)\n\n\tcase Func:\n\t\tt := (*funcType)(unsafe.Pointer(T))\n\t\tv := (*funcType)(unsafe.Pointer(V))\n\t\tif t.outCount != v.outCount || t.inCount != v.inCount {\n\t\t\treturn false\n\t\t}\n\t\tfor i := 0; i < t.NumIn(); i++ {\n\t\t\tif !haveIdenticalType(t.In(i), v.In(i), cmpTags) {\n\t\t\t\treturn false\n\t\t\t}\n\t\t}\n\t\tfor i := 0; i < t.NumOut(); i++ {\n\t\t\tif !haveIdenticalType(t.Out(i), v.Out(i), cmpTags) {\n\t\t\t\treturn false\n\t\t\t}\n\t\t}\n\t\treturn true\n\n\tcase Interface:\n\t\tt := (*interfaceType)(unsafe.Pointer(T))\n\t\tv := (*interfaceType)(unsafe.Pointer(V))\n\t\tif len(t.methods) == 0 && len(v.methods) == 0 {\n\t\t\treturn true\n\t\t}\n\n\t\treturn false\n\n\tcase Map:\n\t\treturn haveIdenticalType(T.Key(), V.Key(), cmpTags) && haveIdenticalType(T.Elem(), V.Elem(), cmpTags)\n\n\tcase Ptr, Slice:\n\t\treturn haveIdenticalType(T.Elem(), V.Elem(), cmpTags)\n\n\tcase Struct:\n\t\tt := (*structType)(unsafe.Pointer(T))\n\t\tv := (*structType)(unsafe.Pointer(V))\n\t\tif len(t.fields) != len(v.fields) {\n\t\t\treturn false\n\t\t}\n\t\tif t.pkgPath.name() != v.pkgPath.name() {\n\t\t\treturn false\n\t\t}\n\t\tfor i := range t.fields {\n\t\t\ttf := &t.fields[i]\n\t\t\tvf := &v.fields[i]\n\t\t\tif tf.name.name() != vf.name.name() {\n\t\t\t\treturn false\n\t\t\t}\n\t\t\tif !haveIdenticalType(tf.typ, vf.typ, cmpTags) {\n\t\t\t\treturn false\n\t\t\t}\n\t\t\tif cmpTags && tf.name.tag() != vf.name.tag() {\n\t\t\t\treturn false\n\t\t\t}\n\t\t\tif tf.offsetEmbed != vf.offsetEmbed {\n\t\t\t\treturn false\n\t\t\t}\n\t\t}\n\t\treturn true\n\t}\n\n\treturn false\n}",
    "defines" : [ 0 ],
    "functions" : [ {
      "name" : "haveIdenticalUnderlyingType",
      "package" : 0,
      "type" : 0,
      "exported" : false
    }, {
      "name" : "Kind",
      "package" : 0,
      "type" : 22,
      "exported" : true
    }, {
      "name" : "Len",
      "package" : 0,
      "type" : 26,
      "exported" : true
    }, {
      "name" : "haveIdenticalType",
      "package" : 0,
      "type" : 28,
      "exported" : false
    }, {
      "name" : "Elem",
      "package" : 0,
      "type" : 35,
      "exported" : true
    }, {
      "name" : "chanDir",
      "package" : 0,
      "type" : 51,
      "exported" : false
    }, {
      "name" : "NumIn",
      "package" : 0,
      "type" : 26,
      "exported" : true
    }, {
      "name" : "In",
      "package" : 0,
      "type" : 56,
      "exported" : true
    }, {
      "name" : "NumOut",
      "package" : 0,
      "type" : 26,
      "exported" : true
    }, {
      "name" : "Out",
      "package" : 0,
      "type" : 56,
      "exported" : true
    }, {
      "name" : "Key",
      "package" : 0,
      "type" : 35,
      "exported" : true
    }, {
      "name" : "name",
      "package" : 0,
      "type" : 76,
      "exported" : false
    }, {
      "name" : "tag",
      "package" : 0,
      "type" : 76,
      "exported" : false
    } ],
    "line-end" : 903,
    "line-start" : 808,
    "names" : [ "haveIdenticalUnderlyingType" ],
    "package" : 0,
    "packages" : [ {
      "name" : "reflectlite",
      "path" : "internal/reflectlite"
    }, {
      "name" : "unsafe",
      "path" : "unsafe"
    } ],
    "params" : [ 0, 1, 2 ],
    "receivers" : [ ],
    "results" : [ 3 ],
    "type" : "function",
    "types" : [ {
      "name" : "func(T *internal/reflectlite.rtype, V *internal/reflectlite.rtype, cmpTags bool) bool",
      "params" : 1,
      "recv" : -1,
      "results" : 12,
      "type" : "Signature",
      "underlying" : 0,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "T",
        "type" : 2
      }, {
        "name" : "V",
        "type" : 2
      }, {
        "name" : "cmpTags",
        "type" : 13
      } ],
      "name" : "(T *internal/reflectlite.rtype, V *internal/reflectlite.rtype, cmpTags bool)",
      "type" : "Tuple",
      "underlying" : 1
    }, {
      "elem" : 3,
      "name" : "*internal/reflectlite.rtype",
      "type" : "Pointer",
      "underlying" : 2
    }, {
      "local-name" : "rtype",
      "name" : "internal/reflectlite.rtype",
      "package" : 0,
      "type" : "Named",
      "underlying" : 4
    }, {
      "fields" : [ {
        "name" : "size",
        "type" : 5
      }, {
        "name" : "ptrdata",
        "type" : 5
      }, {
        "name" : "hash",
        "type" : 6
      }, {
        "name" : "tflag",
        "type" : 7
      }, {
        "name" : "align",
        "type" : 8
      }, {
        "name" : "fieldAlign",
        "type" : 8
      }, {
        "name" : "kind",
        "type" : 8
      }, {
        "name" : "equal",
        "type" : 9
      }, {
        "name" : "gcdata",
        "type" : 14
      }, {
        "name" : "str",
        "type" : 16
      }, {
        "name" : "ptrToThis",
        "type" : 18
      } ],
      "name" : "struct{size uintptr; ptrdata uintptr; hash uint32; tflag internal/reflectlite.tflag; align uint8; fieldAlign uint8; kind uint8; equal func(unsafe.Pointer, unsafe.Pointer) bool; gcdata *byte; str internal/reflectlite.nameOff; ptrToThis internal/reflectlite.typeOff}",
      "type" : "Struct",
      "underlying" : 4
    }, {
      "name" : "uintptr",
      "type" : "Basic",
      "underlying" : 5
    }, {
      "name" : "uint32",
      "type" : "Basic",
      "underlying" : 6
    }, {
      "local-name" : "tflag",
      "name" : "internal/reflectlite.tflag",
      "package" : 0,
      "type" : "Named",
      "underlying" : 8
    }, {
      "name" : "uint8",
      "type" : "Basic",
      "underlying" : 8
    }, {
      "name" : "func(unsafe.Pointer, unsafe.Pointer) bool",
      "params" : 10,
      "recv" : -1,
      "results" : 12,
      "type" : "Signature",
      "underlying" : 9,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 11
      }, {
        "name" : "",
        "type" : 11
      } ],
      "name" : "(unsafe.Pointer, unsafe.Pointer)",
      "type" : "Tuple",
      "underlying" : 10
    }, {
      "local-name" : "Pointer",
      "name" : "unsafe.Pointer",
      "package" : 1,
      "type" : "Basic",
      "underlying" : 11
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 13
      } ],
      "name" : "(bool)",
      "type" : "Tuple",
      "underlying" : 12
    }, {
      "name" : "bool",
      "type" : "Basic",
      "underlying" : 13
    }, {
      "elem" : 15,
      "name" : "*byte",
      "type" : "Pointer",
      "underlying" : 14
    }, {
      "name" : "byte",
      "type" : "Basic",
      "underlying" : 15
    }, {
      "local-name" : "nameOff",
      "name" : "internal/reflectlite.nameOff",
      "package" : 0,
      "type" : "Named",
      "underlying" : 17
    }, {
      "name" : "int32",
      "type" : "Basic",
      "underlying" : 17
    }, {
      "local-name" : "typeOff",
      "name" : "internal/reflectlite.typeOff",
      "package" : 0,
      "type" : "Named",
      "underlying" : 17
    }, {
      "name" : "untyped bool",
      "type" : "Basic",
      "underlying" : 19
    }, {
      "local-name" : "Kind",
      "name" : "internal/reflectlite.Kind",
      "package" : 0,
      "type" : "Named",
      "underlying" : 21
    }, {
      "name" : "uint",
      "type" : "Basic",
      "underlying" : 21
    }, {
      "name" : "func() internal/reflectlite.Kind",
      "params" : 23,
      "recv" : -1,
      "results" : 24,
      "type" : "Signature",
      "underlying" : 22,
      "variadic" : false
    }, {
      "fields" : [ ],
      "name" : "()",
      "type" : "Tuple",
      "underlying" : 23
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 20
      } ],
      "name" : "(internal/reflectlite.Kind)",
      "type" : "Tuple",
      "underlying" : 24
    }, {
      "name" : "int",
      "type" : "Basic",
      "underlying" : 25
    }, {
      "name" : "func() int",
      "params" : 23,
      "recv" : -1,
      "results" : 27,
      "type" : "Signature",
      "underlying" : 26,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 25
      } ],
      "name" : "(int)",
      "type" : "Tuple",
      "underlying" : 27
    }, {
      "name" : "func(T internal/reflectlite.Type, V internal/reflectlite.Type, cmpTags bool) bool",
      "params" : 29,
      "recv" : -1,
      "results" : 12,
      "type" : "Signature",
      "underlying" : 28,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "T",
        "type" : 30
      }, {
        "name" : "V",
        "type" : 30
      }, {
        "name" : "cmpTags",
        "type" : 13
      } ],
      "name" : "(T internal/reflectlite.Type, V internal/reflectlite.Type, cmpTags bool)",
      "type" : "Tuple",
      "underlying" : 29
    }, {
      "local-name" : "Type",
      "name" : "internal/reflectlite.Type",
      "package" : 0,
      "type" : "Named",
      "underlying" : 31
    }, {
      "methods" : [ {
        "name" : "AssignableTo",
        "type" : 32
      }, {
        "name" : "Comparable",
        "type" : 34
      }, {
        "name" : "Elem",
        "type" : 35
      }, {
        "name" : "Implements",
        "type" : 32
      }, {
        "name" : "Kind",
        "type" : 22
      }, {
        "name" : "Name",
        "type" : 37
      }, {
        "name" : "PkgPath",
        "type" : 37
      }, {
        "name" : "Size",
        "type" : 40
      }, {
        "name" : "String",
        "type" : 37
      }, {
        "name" : "common",
        "type" : 42
      }, {
        "name" : "uncommon",
        "type" : 44
      } ],
      "name" : "interface{AssignableTo(u internal/reflectlite.Type) bool; Comparable() bool; Elem() internal/reflectlite.Type; Implements(u internal/reflectlite.Type) bool; Kind() internal/reflectlite.Kind; Name() string; PkgPath() string; Size() uintptr; String() string; common() *internal/reflectlite.rtype; uncommon() *internal/reflectlite.uncommonType}",
      "type" : "Interface",
      "underlying" : 31
    }, {
      "name" : "func(u internal/reflectlite.Type) bool",
      "params" : 33,
      "recv" : 5,
      "results" : 12,
      "type" : "Signature",
      "underlying" : 32,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "u",
        "type" : 30
      } ],
      "name" : "(u internal/reflectlite.Type)",
      "type" : "Tuple",
      "underlying" : 33
    }, {
      "name" : "func() bool",
      "params" : 23,
      "recv" : 6,
      "results" : 12,
      "type" : "Signature",
      "underlying" : 34,
      "variadic" : false
    }, {
      "name" : "func() internal/reflectlite.Type",
      "params" : 23,
      "recv" : 7,
      "results" : 36,
      "type" : "Signature",
      "underlying" : 35,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 30
      } ],
      "name" : "(internal/reflectlite.Type)",
      "type" : "Tuple",
      "underlying" : 36
    }, {
      "name" : "func() string",
      "params" : 23,
      "recv" : 8,
      "results" : 38,
      "type" : "Signature",
      "underlying" : 37,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 39
      } ],
      "name" : "(string)",
      "type" : "Tuple",
      "underlying" : 38
    }, {
      "name" : "string",
      "type" : "Basic",
      "underlying" : 39
    }, {
      "name" : "func() uintptr",
      "params" : 23,
      "recv" : 9,
      "results" : 41,
      "type" : "Signature",
      "underlying" : 40,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 5
      } ],
      "name" : "(uintptr)",
      "type" : "Tuple",
      "underlying" : 41
    }, {
      "name" : "func() *internal/reflectlite.rtype",
      "params" : 23,
      "recv" : 10,
      "results" : 43,
      "type" : "Signature",
      "underlying" : 42,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 2
      } ],
      "name" : "(*internal/reflectlite.rtype)",
      "type" : "Tuple",
      "underlying" : 43
    }, {
      "name" : "func() *internal/reflectlite.uncommonType",
      "params" : 23,
      "recv" : 11,
      "results" : 45,
      "type" : "Signature",
      "underlying" : 44,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 46
      } ],
      "name" : "(*internal/reflectlite.uncommonType)",
      "type" : "Tuple",
      "underlying" : 45
    }, {
      "elem" : 47,
      "name" : "*internal/reflectlite.uncommonType",
      "type" : "Pointer",
      "underlying" : 46
    }, {
      "local-name" : "uncommonType",
      "name" : "internal/reflectlite.uncommonType",
      "package" : 0,
      "type" : "Named",
      "underlying" : 48
    }, {
      "fields" : [ {
        "name" : "pkgPath",
        "type" : 16
      }, {
        "name" : "mcount",
        "type" : 49
      }, {
        "name" : "xcount",
        "type" : 49
      }, {
        "name" : "moff",
        "type" : 6
      }, {
        "name" : "_",
        "type" : 6
      } ],
      "name" : "struct{pkgPath internal/reflectlite.nameOff; mcount uint16; xcount uint16; moff uint32; _ uint32}",
      "type" : "Struct",
      "underlying" : 48
    }, {
      "name" : "uint16",
      "type" : "Basic",
      "underlying" : 49
    }, {
      "local-name" : "chanDir",
      "name" : "internal/reflectlite.chanDir",
      "package" : 0,
      "type" : "Named",
      "underlying" : 25
    }, {
      "name" : "func() internal/reflectlite.chanDir",
      "params" : 23,
      "recv" : -1,
      "results" : 52,
      "type" : "Signature",
      "underlying" : 51,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 50
      } ],
      "name" : "(internal/reflectlite.chanDir)",
      "type" : "Tuple",
      "underlying" : 52
    }, {
      "elem" : 54,
      "name" : "*internal/reflectlite.funcType",
      "type" : "Pointer",
      "underlying" : 53
    }, {
      "local-name" : "funcType",
      "name" : "internal/reflectlite.funcType",
      "package" : 0,
      "type" : "Named",
      "underlying" : 55
    }, {
      "fields" : [ {
        "name" : "rtype",
        "type" : 3
      }, {
        "name" : "inCount",
        "type" : 49
      }, {
        "name" : "outCount",
        "type" : 49
      } ],
      "name" : "struct{internal/reflectlite.rtype; inCount uint16; outCount uint16}",
      "type" : "Struct",
      "underlying" : 55
    }, {
      "name" : "func(i int) internal/reflectlite.Type",
      "params" : 57,
      "recv" : -1,
      "results" : 36,
      "type" : "Signature",
      "underlying" : 56,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "i",
        "type" : 25
      } ],
      "name" : "(i int)",
      "type" : "Tuple",
      "underlying" : 57
    }, {
      "elem" : 59,
      "name" : "*internal/reflectlite.interfaceType",
      "type" : "Pointer",
      "underlying" : 58
    }, {
      "local-name" : "interfaceType",
      "name" : "internal/reflectlite.interfaceType",
      "package" : 0,
      "type" : "Named",
      "underlying" : 60
    }, {
      "fields" : [ {
        "name" : "rtype",
        "type" : 3
      }, {
        "name" : "pkgPath",
        "type" : 61
      }, {
        "name" : "methods",
        "type" : 63
      } ],
      "name" : "struct{internal/reflectlite.rtype; pkgPath internal/reflectlite.name; methods []internal/reflectlite.imethod}",
      "type" : "Struct",
      "underlying" : 60
    }, {
      "local-name" : "name",
      "name" : "internal/reflectlite.name",
      "package" : 0,
      "type" : "Named",
      "underlying" : 62
    }, {
      "fields" : [ {
        "name" : "bytes",
        "type" : 14
      } ],
      "name" : "struct{bytes *byte}",
      "type" : "Struct",
      "underlying" : 62
    }, {
      "elem" : 64,
      "name" : "[]internal/reflectlite.imethod",
      "type" : "Slice",
      "underlying" : 63
    }, {
      "local-name" : "imethod",
      "name" : "internal/reflectlite.imethod",
      "package" : 0,
      "type" : "Named",
      "underlying" : 65
    }, {
      "fields" : [ {
        "name" : "name",
        "type" : 16
      }, {
        "name" : "typ",
        "type" : 18
      } ],
      "name" : "struct{name internal/reflectlite.nameOff; typ internal/reflectlite.typeOff}",
      "type" : "Struct",
      "underlying" : 65
    }, {
      "name" : "func([]internal/reflectlite.imethod) int",
      "params" : 67,
      "recv" : -1,
      "results" : 27,
      "type" : "Signature",
      "underlying" : 66,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 63
      } ],
      "name" : "([]internal/reflectlite.imethod)",
      "type" : "Tuple",
      "underlying" : 67
    }, {
      "elem" : 69,
      "name" : "*internal/reflectlite.structType",
      "type" : "Pointer",
      "underlying" : 68
    }, {
      "local-name" : "structType",
      "name" : "internal/reflectlite.structType",
      "package" : 0,
      "type" : "Named",
      "underlying" : 70
    }, {
      "fields" : [ {
        "name" : "rtype",
        "type" : 3
      }, {
        "name" : "pkgPath",
        "type" : 61
      }, {
        "name" : "fields",
        "type" : 71
      } ],
      "name" : "struct{internal/reflectlite.rtype; pkgPath internal/reflectlite.name; fields []internal/reflectlite.structField}",
      "type" : "Struct",
      "underlying" : 70
    }, {
      "elem" : 72,
      "name" : "[]internal/reflectlite.structField",
      "type" : "Slice",
      "underlying" : 71
    }, {
      "local-name" : "structField",
      "name" : "internal/reflectlite.structField",
      "package" : 0,
      "type" : "Named",
      "underlying" : 73
    }, {
      "fields" : [ {
        "name" : "name",
        "type" : 61
      }, {
        "name" : "typ",
        "type" : 2
      }, {
        "name" : "offsetEmbed",
        "type" : 5
      } ],
      "name" : "struct{name internal/reflectlite.name; typ *internal/reflectlite.rtype; offsetEmbed uintptr}",
      "type" : "Struct",
      "underlying" : 73
    }, {
      "name" : "func([]internal/reflectlite.structField) int",
      "params" : 75,
      "recv" : -1,
      "results" : 27,
      "type" : "Signature",
      "underlying" : 74,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 71
      } ],
      "name" : "([]internal/reflectlite.structField)",
      "type" : "Tuple",
      "underlying" : 75
    }, {
      "name" : "func() (s string)",
      "params" : 23,
      "recv" : -1,
      "results" : 77,
      "type" : "Signature",
      "underlying" : 76,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "s",
        "type" : 39
      } ],
      "name" : "(s string)",
      "type" : "Tuple",
      "underlying" : 77
    }, {
      "elem" : 72,
      "name" : "*internal/reflectlite.structField",
      "type" : "Pointer",
      "underlying" : 78
    } ],
    "variables" : [ {
      "name" : "T",
      "package" : 0,
      "type" : 2,
      "exported" : true,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "V",
      "package" : 0,
      "type" : 2,
      "exported" : true,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "cmpTags",
      "package" : 0,
      "type" : 13,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "[res0]",
      "package" : 0,
      "type" : 13,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "kind",
      "package" : 0,
      "type" : 20,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 0,
      "type" : 30,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 0,
      "type" : 30,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 0,
      "type" : 30,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 0,
      "type" : 30,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 0,
      "type" : 30,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 0,
      "type" : 30,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 0,
      "type" : 30,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "t",
      "package" : 0,
      "type" : 53,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "outCount",
      "package" : 0,
      "type" : 49,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "v",
      "package" : 0,
      "type" : 53,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "inCount",
      "package" : 0,
      "type" : 49,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "i",
      "package" : 0,
      "type" : 25,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "i",
      "package" : 0,
      "type" : 25,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "t",
      "package" : 0,
      "type" : 58,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "methods",
      "package" : 0,
      "type" : 63,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "v",
      "package" : 0,
      "type" : 58,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "t",
      "package" : 0,
      "type" : 68,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "fields",
      "package" : 0,
      "type" : 71,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "v",
      "package" : 0,
      "type" : 68,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "pkgPath",
      "package" : 0,
      "type" : 61,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "i",
      "package" : 0,
      "type" : 25,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "tf",
      "package" : 0,
      "type" : 78,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "name",
      "package" : 0,
      "type" : 61,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "vf",
      "package" : 0,
      "type" : 78,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "typ",
      "package" : 0,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "offsetEmbed",
      "package" : 0,
      "type" : 5,
      "exported" : false,
      "embedded" : false,
      "field" : true
    } ]
  },
  "go-version" : "1.14.3"
}