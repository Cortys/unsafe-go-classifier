{
  "usage" : {
    "file" : "value.go",
    "label1" : "cast-struct",
    "label2" : "types",
    "line" : "814",
    "module" : "std",
    "pkg" : "reflect",
    "project" : "kubernetes/kubernetes",
    "snippet" : "tt := (*ptrType)(unsafe.Pointer(v.typ))",
    "version" : "std"
  },
  "cfg" : {
    "blocks" : [ {
      "update-vars" : [ ],
      "successors" : [ 2 ],
      "in-vars" : [ 0 ],
      "exit" : false,
      "out-vars" : [ 0 ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[entry]",
      "entry" : true,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ ],
      "in-vars" : [ ],
      "exit" : true,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[exit]",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 3 ],
      "in-vars" : [ 0 ],
      "exit" : false,
      "out-vars" : [ 0, 3 ],
      "decl-vars" : [ 3 ],
      "line-start" : 789,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "k"
          }
        } ],
        "right" : [ {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "function" : 1,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "kind"
            },
            "go-type" : 25,
            "kind" : "expression",
            "target" : {
              "go-type" : 3,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "v",
                "variable" : 0
              }
            },
            "type" : "selector"
          },
          "go-type" : 23,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 789,
      "code" : "k := v.kind()",
      "entry" : false,
      "use-vars" : [ 0 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 4, 13, 24 ],
      "in-vars" : [ 0, 3 ],
      "exit" : false,
      "out-vars" : [ 0 ],
      "decl-vars" : [ ],
      "line-start" : 790,
      "ast" : {
        "condition" : {
          "go-type" : 23,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "k",
            "variable" : 3
          }
        },
        "kind" : "statement",
        "type" : "switch"
      },
      "assign-vars" : [ ],
      "line-end" : 819,
      "code" : "switch k {\ncase Interface:\n\tvar eface interface{}\n\tif v.typ.NumMethod() == 0 {\n\t\teface = *(*interface{})(v.ptr)\n\t} else {\n\t\teface = (interface{})(*(*interface {\n\t\t\tM()\n\t\t})(v.ptr))\n\t}\n\tx := unpackEface(eface)\n\tif x.flag != 0 {\n\t\tx.flag |= v.flag.ro()\n\t}\n\treturn x\ncase Ptr:\n\tptr := v.ptr\n\tif v.flag&flagIndir != 0 {\n\t\tptr = *(*unsafe.Pointer)(ptr)\n\t}\n\n\tif ptr == nil {\n\t\treturn Value{}\n\t}\n\ttt := (*ptrType)(unsafe.Pointer(v.typ))\n\ttyp := tt.elem\n\tfl := v.flag&flagRO | flagIndir | flagAddr\n\tfl |= flag(typ.Kind())\n\treturn Value{typ, ptr, fl}\n}",
      "entry" : false,
      "use-vars" : [ 3 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 5 ],
      "in-vars" : [ 0 ],
      "exit" : false,
      "out-vars" : [ 0 ],
      "decl-vars" : [ ],
      "line-start" : 791,
      "ast" : {
        "expressions" : [ {
          "go-type" : 23,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "20"
          }
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 804,
      "code" : "case Interface:\n\tvar eface interface{}\n\tif v.typ.NumMethod() == 0 {\n\t\teface = *(*interface{})(v.ptr)\n\t} else {\n\t\teface = (interface{})(*(*interface {\n\t\t\tM()\n\t\t})(v.ptr))\n\t}\n\tx := unpackEface(eface)\n\tif x.flag != 0 {\n\t\tx.flag |= v.flag.ro()\n\t}\n\treturn x",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 6 ],
      "in-vars" : [ 0 ],
      "exit" : false,
      "out-vars" : [ 0 ],
      "decl-vars" : [ 6 ],
      "line-start" : 792,
      "ast" : {
        "kind" : "statement",
        "target" : {
          "kind" : "decl",
          "specs" : [ {
            "comments" : [ ],
            "declared-type" : {
              "go-type" : 28,
              "incomplete" : false,
              "kind" : "type",
              "methods" : [ ],
              "type" : "interface"
            },
            "kind" : "spec",
            "names" : [ {
              "ident-kind" : "NoKind",
              "kind" : "ident",
              "value" : "eface"
            } ],
            "type" : "var",
            "values" : [ ]
          } ],
          "type" : "var"
        },
        "type" : "declaration"
      },
      "assign-vars" : [ ],
      "line-end" : 792,
      "code" : "var eface interface{}",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 7, 8 ],
      "in-vars" : [ 0 ],
      "exit" : false,
      "out-vars" : [ 0 ],
      "decl-vars" : [ ],
      "line-start" : 793,
      "ast" : {
        "condition" : {
          "go-type" : 29,
          "kind" : "expression",
          "left" : {
            "arguments" : [ ],
            "ellipsis" : false,
            "function" : {
              "field" : {
                "function" : 2,
                "ident-kind" : "Func",
                "kind" : "ident",
                "value" : "NumMethod"
              },
              "go-type" : 31,
              "kind" : "expression",
              "target" : {
                "field" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "typ",
                  "variable" : 4
                },
                "go-type" : 5,
                "kind" : "expression",
                "target" : {
                  "go-type" : 3,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "v",
                    "variable" : 0
                  }
                },
                "type" : "selector"
              },
              "type" : "selector"
            },
            "go-type" : 30,
            "kind" : "expression",
            "type" : "call"
          },
          "operator" : "==",
          "right" : {
            "go-type" : 30,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 799,
      "code" : "if v.typ.NumMethod() == 0 {\n\teface = *(*interface{})(v.ptr)\n} else {\n\teface = (interface{})(*(*interface {\n\t\tM()\n\t})(v.ptr))\n}",
      "entry" : false,
      "use-vars" : [ 0 ]
    }, {
      "update-vars" : [ 6 ],
      "successors" : [ 9 ],
      "in-vars" : [ 0 ],
      "exit" : false,
      "out-vars" : [ 0, 6 ],
      "decl-vars" : [ ],
      "line-start" : 794,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 28,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "eface",
            "variable" : 6
          }
        } ],
        "right" : [ {
          "go-type" : 28,
          "kind" : "expression",
          "target" : {
            "coerced-to" : {
              "contained" : {
                "go-type" : 28,
                "incomplete" : false,
                "kind" : "type",
                "methods" : [ ],
                "type" : "interface"
              },
              "go-type" : 34,
              "kind" : "type",
              "type" : "pointer"
            },
            "go-type" : 34,
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "ptr",
                "variable" : 7
              },
              "go-type" : 14,
              "kind" : "expression",
              "target" : {
                "go-type" : 3,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "v",
                  "variable" : 0
                }
              },
              "type" : "selector"
            },
            "type" : "cast"
          },
          "type" : "star"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 6 ],
      "line-end" : 794,
      "code" : "eface = *(*interface{})(v.ptr)",
      "entry" : false,
      "use-vars" : [ 0 ]
    }, {
      "update-vars" : [ 6 ],
      "successors" : [ 9 ],
      "in-vars" : [ 0 ],
      "exit" : false,
      "out-vars" : [ 0, 6 ],
      "decl-vars" : [ ],
      "line-start" : 796,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 28,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "eface",
            "variable" : 6
          }
        } ],
        "right" : [ {
          "coerced-to" : {
            "go-type" : 28,
            "incomplete" : false,
            "kind" : "type",
            "methods" : [ ],
            "type" : "interface"
          },
          "go-type" : 28,
          "kind" : "expression",
          "target" : {
            "go-type" : 35,
            "kind" : "expression",
            "target" : {
              "coerced-to" : {
                "contained" : {
                  "go-type" : 35,
                  "incomplete" : false,
                  "kind" : "type",
                  "methods" : [ {
                    "declared-type" : {
                      "go-type" : 36,
                      "kind" : "type",
                      "params" : [ ],
                      "results" : null,
                      "type" : "function",
                      "variadic" : null
                    },
                    "kind" : "field",
                    "names" : [ {
                      "ident-kind" : "NoKind",
                      "kind" : "ident",
                      "value" : "M"
                    } ],
                    "tag" : null
                  } ],
                  "type" : "interface"
                },
                "go-type" : 37,
                "kind" : "type",
                "type" : "pointer"
              },
              "go-type" : 37,
              "kind" : "expression",
              "target" : {
                "field" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "ptr",
                  "variable" : 7
                },
                "go-type" : 14,
                "kind" : "expression",
                "target" : {
                  "go-type" : 3,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "v",
                    "variable" : 0
                  }
                },
                "type" : "selector"
              },
              "type" : "cast"
            },
            "type" : "star"
          },
          "type" : "cast"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 6 ],
      "line-end" : 798,
      "code" : "eface = (interface{})(*(*interface {\n\tM()\n})(v.ptr))",
      "entry" : false,
      "use-vars" : [ 0 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 10 ],
      "in-vars" : [ 0, 6 ],
      "exit" : false,
      "out-vars" : [ 9, 0 ],
      "decl-vars" : [ 9 ],
      "line-start" : 800,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "x"
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 28,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "eface",
              "variable" : 6
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 38,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 3,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "unpackEface"
            }
          },
          "go-type" : 3,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 800,
      "code" : "x := unpackEface(eface)",
      "entry" : false,
      "use-vars" : [ 6 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 11, 12 ],
      "in-vars" : [ 0, 9 ],
      "exit" : false,
      "out-vars" : [ 9, 0 ],
      "decl-vars" : [ ],
      "line-start" : 801,
      "ast" : {
        "condition" : {
          "go-type" : 29,
          "kind" : "expression",
          "left" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "flag",
              "variable" : 10
            },
            "go-type" : 22,
            "kind" : "expression",
            "target" : {
              "go-type" : 3,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "x",
                "variable" : 9
              }
            },
            "type" : "selector"
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 22,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 803,
      "code" : "if x.flag != 0 {\n\tx.flag |= v.flag.ro()\n}",
      "entry" : false,
      "use-vars" : [ 9 ]
    }, {
      "update-vars" : [ 9 ],
      "successors" : [ 12 ],
      "in-vars" : [ 9, 0 ],
      "exit" : false,
      "out-vars" : [ 9 ],
      "decl-vars" : [ ],
      "line-start" : 802,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "flag",
            "variable" : 10
          },
          "go-type" : 22,
          "kind" : "expression",
          "target" : {
            "go-type" : 3,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "x",
              "variable" : 9
            }
          },
          "type" : "selector"
        } ],
        "operator" : "|",
        "right" : [ {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "function" : 4,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "ro"
            },
            "go-type" : 40,
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "flag",
                "variable" : 10
              },
              "go-type" : 22,
              "kind" : "expression",
              "target" : {
                "go-type" : 3,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "v",
                  "variable" : 0
                }
              },
              "type" : "selector"
            },
            "type" : "selector"
          },
          "go-type" : 22,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign-operator"
      },
      "assign-vars" : [ ],
      "line-end" : 802,
      "code" : "x.flag |= v.flag.ro()",
      "entry" : false,
      "use-vars" : [ 0, 9 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 9 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 804,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 3,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "x",
            "variable" : 9
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 804,
      "code" : "return x",
      "entry" : false,
      "use-vars" : [ 9 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 14 ],
      "in-vars" : [ 0 ],
      "exit" : false,
      "out-vars" : [ 0 ],
      "decl-vars" : [ ],
      "line-start" : 805,
      "ast" : {
        "expressions" : [ {
          "go-type" : 23,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "22"
          }
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 818,
      "code" : "case Ptr:\n\tptr := v.ptr\n\tif v.flag&flagIndir != 0 {\n\t\tptr = *(*unsafe.Pointer)(ptr)\n\t}\n\n\tif ptr == nil {\n\t\treturn Value{}\n\t}\n\ttt := (*ptrType)(unsafe.Pointer(v.typ))\n\ttyp := tt.elem\n\tfl := v.flag&flagRO | flagIndir | flagAddr\n\tfl |= flag(typ.Kind())\n\treturn Value{typ, ptr, fl}",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 15 ],
      "in-vars" : [ 0 ],
      "exit" : false,
      "out-vars" : [ 12, 0 ],
      "decl-vars" : [ 12 ],
      "line-start" : 806,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "ptr"
          }
        } ],
        "right" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "ptr",
            "variable" : 7
          },
          "go-type" : 14,
          "kind" : "expression",
          "target" : {
            "go-type" : 3,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "v",
              "variable" : 0
            }
          },
          "type" : "selector"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 806,
      "code" : "ptr := v.ptr",
      "entry" : false,
      "use-vars" : [ 0 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 16, 17 ],
      "in-vars" : [ 12, 0 ],
      "exit" : false,
      "out-vars" : [ 12, 0 ],
      "decl-vars" : [ ],
      "line-start" : 807,
      "ast" : {
        "condition" : {
          "go-type" : 29,
          "kind" : "expression",
          "left" : {
            "go-type" : 22,
            "kind" : "expression",
            "left" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "flag",
                "variable" : 10
              },
              "go-type" : 22,
              "kind" : "expression",
              "target" : {
                "go-type" : 3,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "v",
                  "variable" : 0
                }
              },
              "type" : "selector"
            },
            "operator" : "&",
            "right" : {
              "go-type" : 22,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "128"
              }
            },
            "type" : "binary"
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 22,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 809,
      "code" : "if v.flag&flagIndir != 0 {\n\tptr = *(*unsafe.Pointer)(ptr)\n}",
      "entry" : false,
      "use-vars" : [ 0 ]
    }, {
      "update-vars" : [ 12 ],
      "successors" : [ 17 ],
      "in-vars" : [ 12, 0 ],
      "exit" : false,
      "out-vars" : [ 12, 0 ],
      "decl-vars" : [ ],
      "line-start" : 808,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 14,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "ptr",
            "variable" : 12
          }
        } ],
        "right" : [ {
          "go-type" : 14,
          "kind" : "expression",
          "target" : {
            "coerced-to" : {
              "contained" : {
                "go-type" : 14,
                "kind" : "type",
                "qualifier" : {
                  "ident-kind" : "PkgName",
                  "kind" : "ident",
                  "package" : 1,
                  "value" : "unsafe"
                },
                "type" : "identifier",
                "value" : {
                  "go-type" : 14,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "Pointer"
                }
              },
              "go-type" : 43,
              "kind" : "type",
              "type" : "pointer"
            },
            "go-type" : 43,
            "kind" : "expression",
            "target" : {
              "go-type" : 14,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "ptr",
                "variable" : 12
              }
            },
            "type" : "cast"
          },
          "type" : "star"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 12 ],
      "line-end" : 808,
      "code" : "ptr = *(*unsafe.Pointer)(ptr)",
      "entry" : false,
      "use-vars" : [ 12 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 18, 19 ],
      "in-vars" : [ 12, 0 ],
      "exit" : false,
      "out-vars" : [ 0, 12 ],
      "decl-vars" : [ ],
      "line-start" : 811,
      "ast" : {
        "condition" : {
          "go-type" : 29,
          "kind" : "expression",
          "left" : {
            "go-type" : 14,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "ptr",
              "variable" : 12
            }
          },
          "operator" : "==",
          "right" : {
            "go-type" : 14,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Nil",
              "kind" : "ident",
              "value" : "nil"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 813,
      "code" : "if ptr == nil {\n\treturn Value{}\n}",
      "entry" : false,
      "use-vars" : [ 12 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 812,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "declared" : {
            "go-type" : 3,
            "kind" : "type",
            "type" : "identifier",
            "value" : {
              "go-type" : 3,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "Value"
            }
          },
          "go-type" : 3,
          "kind" : "literal",
          "type" : "composite",
          "values" : [ ]
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 812,
      "code" : "return Value{}",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 20 ],
      "in-vars" : [ 12, 0 ],
      "exit" : false,
      "out-vars" : [ 13, 12, 0 ],
      "decl-vars" : [ 13 ],
      "line-start" : 814,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "tt"
          }
        } ],
        "right" : [ {
          "coerced-to" : {
            "contained" : {
              "go-type" : 45,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 45,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "ptrType"
              }
            },
            "go-type" : 44,
            "kind" : "type",
            "type" : "pointer"
          },
          "go-type" : 44,
          "kind" : "expression",
          "target" : {
            "coerced-to" : {
              "go-type" : 14,
              "kind" : "type",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 1,
                "value" : "unsafe"
              },
              "type" : "identifier",
              "value" : {
                "go-type" : 14,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "Pointer"
              }
            },
            "go-type" : 14,
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "typ",
                "variable" : 4
              },
              "go-type" : 5,
              "kind" : "expression",
              "target" : {
                "go-type" : 3,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "v",
                  "variable" : 0
                }
              },
              "type" : "selector"
            },
            "type" : "cast"
          },
          "type" : "cast"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 814,
      "code" : "tt := (*ptrType)(unsafe.Pointer(v.typ))",
      "entry" : false,
      "use-vars" : [ 0 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 21 ],
      "in-vars" : [ 12, 0, 13 ],
      "exit" : false,
      "out-vars" : [ 12, 0, 16 ],
      "decl-vars" : [ 16 ],
      "line-start" : 815,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "typ"
          }
        } ],
        "right" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "elem",
            "variable" : 14
          },
          "go-type" : 5,
          "kind" : "expression",
          "target" : {
            "go-type" : 44,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "tt",
              "variable" : 13
            }
          },
          "type" : "selector"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 815,
      "code" : "typ := tt.elem",
      "entry" : false,
      "use-vars" : [ 13 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 22 ],
      "in-vars" : [ 16, 12, 0 ],
      "exit" : false,
      "out-vars" : [ 12, 16, 15 ],
      "decl-vars" : [ 15 ],
      "line-start" : 816,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "fl"
          }
        } ],
        "right" : [ {
          "go-type" : 22,
          "kind" : "expression",
          "left" : {
            "go-type" : 22,
            "kind" : "expression",
            "left" : {
              "go-type" : 22,
              "kind" : "expression",
              "left" : {
                "field" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "flag",
                  "variable" : 10
                },
                "go-type" : 22,
                "kind" : "expression",
                "target" : {
                  "go-type" : 3,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "v",
                    "variable" : 0
                  }
                },
                "type" : "selector"
              },
              "operator" : "&",
              "right" : {
                "go-type" : 22,
                "kind" : "constant",
                "value" : {
                  "type" : "INT",
                  "value" : "96"
                }
              },
              "type" : "binary"
            },
            "operator" : "|",
            "right" : {
              "go-type" : 22,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "128"
              }
            },
            "type" : "binary"
          },
          "operator" : "|",
          "right" : {
            "go-type" : 22,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "256"
            }
          },
          "type" : "binary"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 816,
      "code" : "fl := v.flag&flagRO | flagIndir | flagAddr",
      "entry" : false,
      "use-vars" : [ 0 ]
    }, {
      "update-vars" : [ 15 ],
      "successors" : [ 23 ],
      "in-vars" : [ 12, 16, 15 ],
      "exit" : false,
      "out-vars" : [ 15, 12, 16 ],
      "decl-vars" : [ ],
      "line-start" : 817,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 22,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "fl",
            "variable" : 15
          }
        } ],
        "operator" : "|",
        "right" : [ {
          "coerced-to" : {
            "go-type" : 22,
            "kind" : "type",
            "type" : "identifier",
            "value" : {
              "go-type" : 22,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "flag"
            }
          },
          "go-type" : 22,
          "kind" : "expression",
          "target" : {
            "arguments" : [ ],
            "ellipsis" : false,
            "function" : {
              "field" : {
                "function" : 5,
                "ident-kind" : "Func",
                "kind" : "ident",
                "value" : "Kind"
              },
              "go-type" : 25,
              "kind" : "expression",
              "target" : {
                "go-type" : 5,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "typ",
                  "variable" : 16
                }
              },
              "type" : "selector"
            },
            "go-type" : 23,
            "kind" : "expression",
            "type" : "call"
          },
          "type" : "cast"
        } ],
        "type" : "assign-operator"
      },
      "assign-vars" : [ 15 ],
      "line-end" : 817,
      "code" : "fl |= flag(typ.Kind())",
      "entry" : false,
      "use-vars" : [ 16, 15 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 12, 16, 15 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 818,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "declared" : {
            "go-type" : 3,
            "kind" : "type",
            "type" : "identifier",
            "value" : {
              "go-type" : 3,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "Value"
            }
          },
          "go-type" : 3,
          "kind" : "literal",
          "type" : "composite",
          "values" : [ {
            "go-type" : 5,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "typ",
              "variable" : 16
            }
          }, {
            "go-type" : 14,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "ptr",
              "variable" : 12
            }
          }, {
            "go-type" : 22,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "fl",
              "variable" : 15
            }
          } ]
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 818,
      "code" : "return Value{typ, ptr, fl}",
      "entry" : false,
      "use-vars" : [ 15, 16, 12 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 0 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 820,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 50,
            "kind" : "expression",
            "operator" : "&",
            "target" : {
              "declared" : {
                "go-type" : 51,
                "kind" : "type",
                "type" : "identifier",
                "value" : {
                  "go-type" : 51,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "ValueError"
                }
              },
              "go-type" : 51,
              "kind" : "literal",
              "type" : "composite",
              "values" : [ {
                "go-type" : 53,
                "kind" : "constant",
                "value" : {
                  "type" : "STRING",
                  "value" : "reflect.Value.Elem"
                }
              }, {
                "arguments" : [ ],
                "ellipsis" : false,
                "function" : {
                  "field" : {
                    "function" : 1,
                    "ident-kind" : "Func",
                    "kind" : "ident",
                    "value" : "kind"
                  },
                  "go-type" : 25,
                  "kind" : "expression",
                  "target" : {
                    "go-type" : 3,
                    "kind" : "expression",
                    "type" : "identifier",
                    "value" : {
                      "ident-kind" : "Var",
                      "kind" : "ident",
                      "value" : "v",
                      "variable" : 0
                    }
                  },
                  "type" : "selector"
                },
                "go-type" : 23,
                "kind" : "expression",
                "type" : "call"
              } ]
            },
            "type" : "unary"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 48,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Builtin",
              "kind" : "ident",
              "value" : "panic"
            }
          },
          "go-type" : 1,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 820,
      "code" : "panic(&ValueError{\"reflect.Value.Elem\", v.kind()})",
      "entry" : false,
      "use-vars" : [ 0 ]
    } ],
    "code" : "// Elem returns the value that the interface v contains\n// or that the pointer v points to.\n// It panics if v's Kind is not Interface or Ptr.\n// It returns the zero Value if v is nil.\nfunc (v Value) Elem() Value {\n\tk := v.kind()\n\tswitch k {\n\tcase Interface:\n\t\tvar eface interface{}\n\t\tif v.typ.NumMethod() == 0 {\n\t\t\teface = *(*interface{})(v.ptr)\n\t\t} else {\n\t\t\teface = (interface{})(*(*interface {\n\t\t\t\tM()\n\t\t\t})(v.ptr))\n\t\t}\n\t\tx := unpackEface(eface)\n\t\tif x.flag != 0 {\n\t\t\tx.flag |= v.flag.ro()\n\t\t}\n\t\treturn x\n\tcase Ptr:\n\t\tptr := v.ptr\n\t\tif v.flag&flagIndir != 0 {\n\t\t\tptr = *(*unsafe.Pointer)(ptr)\n\t\t}\n\n\t\tif ptr == nil {\n\t\t\treturn Value{}\n\t\t}\n\t\ttt := (*ptrType)(unsafe.Pointer(v.typ))\n\t\ttyp := tt.elem\n\t\tfl := v.flag&flagRO | flagIndir | flagAddr\n\t\tfl |= flag(typ.Kind())\n\t\treturn Value{typ, ptr, fl}\n\t}\n\tpanic(&ValueError{\"reflect.Value.Elem\", v.kind()})\n}",
    "defines" : [ 0 ],
    "functions" : [ {
      "name" : "Elem",
      "package" : 0,
      "type" : 0,
      "exported" : true
    }, {
      "name" : "kind",
      "package" : 0,
      "type" : 27,
      "exported" : false
    }, {
      "name" : "NumMethod",
      "package" : 0,
      "type" : 33,
      "exported" : true
    }, {
      "name" : "unpackEface",
      "package" : 0,
      "type" : 38,
      "exported" : false
    }, {
      "name" : "ro",
      "package" : 0,
      "type" : 42,
      "exported" : false
    }, {
      "name" : "Kind",
      "package" : 0,
      "type" : 47,
      "exported" : true
    } ],
    "line-end" : 821,
    "line-start" : 788,
    "names" : [ "Elem" ],
    "package" : 0,
    "packages" : [ {
      "name" : "reflect",
      "path" : "reflect"
    }, {
      "name" : "unsafe",
      "path" : "unsafe"
    } ],
    "params" : [ ],
    "receivers" : [ 0 ],
    "results" : [ 1 ],
    "type" : "function",
    "types" : [ {
      "name" : "(reflect.Value) func() reflect.Value",
      "params" : 1,
      "recv" : 0,
      "results" : 2,
      "type" : "Signature",
      "underlying" : 0,
      "variadic" : false
    }, {
      "fields" : [ ],
      "name" : "()",
      "type" : "Tuple",
      "underlying" : 1
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 3
      } ],
      "name" : "(reflect.Value)",
      "type" : "Tuple",
      "underlying" : 2
    }, {
      "local-name" : "Value",
      "name" : "reflect.Value",
      "package" : 0,
      "type" : "Named",
      "underlying" : 4
    }, {
      "fields" : [ {
        "name" : "typ",
        "type" : 5
      }, {
        "name" : "ptr",
        "type" : 14
      }, {
        "name" : "flag",
        "type" : 22
      } ],
      "name" : "struct{typ *reflect.rtype; ptr unsafe.Pointer; reflect.flag}",
      "type" : "Struct",
      "underlying" : 4
    }, {
      "elem" : 6,
      "name" : "*reflect.rtype",
      "type" : "Pointer",
      "underlying" : 5
    }, {
      "local-name" : "rtype",
      "name" : "reflect.rtype",
      "package" : 0,
      "type" : "Named",
      "underlying" : 7
    }, {
      "fields" : [ {
        "name" : "size",
        "type" : 8
      }, {
        "name" : "ptrdata",
        "type" : 8
      }, {
        "name" : "hash",
        "type" : 9
      }, {
        "name" : "tflag",
        "type" : 10
      }, {
        "name" : "align",
        "type" : 11
      }, {
        "name" : "fieldAlign",
        "type" : 11
      }, {
        "name" : "kind",
        "type" : 11
      }, {
        "name" : "equal",
        "type" : 12
      }, {
        "name" : "gcdata",
        "type" : 17
      }, {
        "name" : "str",
        "type" : 19
      }, {
        "name" : "ptrToThis",
        "type" : 21
      } ],
      "name" : "struct{size uintptr; ptrdata uintptr; hash uint32; tflag reflect.tflag; align uint8; fieldAlign uint8; kind uint8; equal func(unsafe.Pointer, unsafe.Pointer) bool; gcdata *byte; str reflect.nameOff; ptrToThis reflect.typeOff}",
      "type" : "Struct",
      "underlying" : 7
    }, {
      "name" : "uintptr",
      "type" : "Basic",
      "underlying" : 8
    }, {
      "name" : "uint32",
      "type" : "Basic",
      "underlying" : 9
    }, {
      "local-name" : "tflag",
      "name" : "reflect.tflag",
      "package" : 0,
      "type" : "Named",
      "underlying" : 11
    }, {
      "name" : "uint8",
      "type" : "Basic",
      "underlying" : 11
    }, {
      "name" : "func(unsafe.Pointer, unsafe.Pointer) bool",
      "params" : 13,
      "recv" : -1,
      "results" : 15,
      "type" : "Signature",
      "underlying" : 12,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 14
      }, {
        "name" : "",
        "type" : 14
      } ],
      "name" : "(unsafe.Pointer, unsafe.Pointer)",
      "type" : "Tuple",
      "underlying" : 13
    }, {
      "local-name" : "Pointer",
      "name" : "unsafe.Pointer",
      "package" : 1,
      "type" : "Basic",
      "underlying" : 14
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 16
      } ],
      "name" : "(bool)",
      "type" : "Tuple",
      "underlying" : 15
    }, {
      "name" : "bool",
      "type" : "Basic",
      "underlying" : 16
    }, {
      "elem" : 18,
      "name" : "*byte",
      "type" : "Pointer",
      "underlying" : 17
    }, {
      "name" : "byte",
      "type" : "Basic",
      "underlying" : 18
    }, {
      "local-name" : "nameOff",
      "name" : "reflect.nameOff",
      "package" : 0,
      "type" : "Named",
      "underlying" : 20
    }, {
      "name" : "int32",
      "type" : "Basic",
      "underlying" : 20
    }, {
      "local-name" : "typeOff",
      "name" : "reflect.typeOff",
      "package" : 0,
      "type" : "Named",
      "underlying" : 20
    }, {
      "local-name" : "flag",
      "name" : "reflect.flag",
      "package" : 0,
      "type" : "Named",
      "underlying" : 8
    }, {
      "local-name" : "Kind",
      "name" : "reflect.Kind",
      "package" : 0,
      "type" : "Named",
      "underlying" : 24
    }, {
      "name" : "uint",
      "type" : "Basic",
      "underlying" : 24
    }, {
      "name" : "func() reflect.Kind",
      "params" : 1,
      "recv" : -1,
      "results" : 26,
      "type" : "Signature",
      "underlying" : 25,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 23
      } ],
      "name" : "(reflect.Kind)",
      "type" : "Tuple",
      "underlying" : 26
    }, {
      "name" : "(reflect.flag) func() reflect.Kind",
      "params" : 1,
      "recv" : 2,
      "results" : 26,
      "type" : "Signature",
      "underlying" : 27,
      "variadic" : false
    }, {
      "methods" : [ ],
      "name" : "interface{}",
      "type" : "Interface",
      "underlying" : 28
    }, {
      "name" : "untyped bool",
      "type" : "Basic",
      "underlying" : 29
    }, {
      "name" : "int",
      "type" : "Basic",
      "underlying" : 30
    }, {
      "name" : "func() int",
      "params" : 1,
      "recv" : -1,
      "results" : 32,
      "type" : "Signature",
      "underlying" : 31,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 30
      } ],
      "name" : "(int)",
      "type" : "Tuple",
      "underlying" : 32
    }, {
      "name" : "(*reflect.rtype) func() int",
      "params" : 1,
      "recv" : 5,
      "results" : 32,
      "type" : "Signature",
      "underlying" : 33,
      "variadic" : false
    }, {
      "elem" : 28,
      "name" : "*interface{}",
      "type" : "Pointer",
      "underlying" : 34
    }, {
      "methods" : [ {
        "name" : "M",
        "type" : 36
      } ],
      "name" : "interface{M()}",
      "type" : "Interface",
      "underlying" : 35
    }, {
      "name" : "(interface{M()}) func()",
      "params" : 1,
      "recv" : 8,
      "results" : 1,
      "type" : "Signature",
      "underlying" : 36,
      "variadic" : false
    }, {
      "elem" : 35,
      "name" : "*interface{M()}",
      "type" : "Pointer",
      "underlying" : 37
    }, {
      "name" : "func(i interface{}) reflect.Value",
      "params" : 39,
      "recv" : -1,
      "results" : 2,
      "type" : "Signature",
      "underlying" : 38,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "i",
        "type" : 28
      } ],
      "name" : "(i interface{})",
      "type" : "Tuple",
      "underlying" : 39
    }, {
      "name" : "func() reflect.flag",
      "params" : 1,
      "recv" : -1,
      "results" : 41,
      "type" : "Signature",
      "underlying" : 40,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 22
      } ],
      "name" : "(reflect.flag)",
      "type" : "Tuple",
      "underlying" : 41
    }, {
      "name" : "(reflect.flag) func() reflect.flag",
      "params" : 1,
      "recv" : 11,
      "results" : 41,
      "type" : "Signature",
      "underlying" : 42,
      "variadic" : false
    }, {
      "elem" : 14,
      "name" : "*unsafe.Pointer",
      "type" : "Pointer",
      "underlying" : 43
    }, {
      "elem" : 45,
      "name" : "*reflect.ptrType",
      "type" : "Pointer",
      "underlying" : 44
    }, {
      "local-name" : "ptrType",
      "name" : "reflect.ptrType",
      "package" : 0,
      "type" : "Named",
      "underlying" : 46
    }, {
      "fields" : [ {
        "name" : "rtype",
        "type" : 6
      }, {
        "name" : "elem",
        "type" : 5
      } ],
      "name" : "struct{reflect.rtype; elem *reflect.rtype}",
      "type" : "Struct",
      "underlying" : 46
    }, {
      "name" : "(*reflect.rtype) func() reflect.Kind",
      "params" : 1,
      "recv" : 17,
      "results" : 26,
      "type" : "Signature",
      "underlying" : 47,
      "variadic" : false
    }, {
      "name" : "func(interface{})",
      "params" : 49,
      "recv" : -1,
      "results" : 1,
      "type" : "Signature",
      "underlying" : 48,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 28
      } ],
      "name" : "(interface{})",
      "type" : "Tuple",
      "underlying" : 49
    }, {
      "elem" : 51,
      "name" : "*reflect.ValueError",
      "type" : "Pointer",
      "underlying" : 50
    }, {
      "local-name" : "ValueError",
      "name" : "reflect.ValueError",
      "package" : 0,
      "type" : "Named",
      "underlying" : 52
    }, {
      "fields" : [ {
        "name" : "Method",
        "type" : 53
      }, {
        "name" : "Kind",
        "type" : 23
      } ],
      "name" : "struct{Method string; Kind reflect.Kind}",
      "type" : "Struct",
      "underlying" : 52
    }, {
      "name" : "string",
      "type" : "Basic",
      "underlying" : 53
    } ],
    "variables" : [ {
      "name" : "v",
      "package" : 0,
      "type" : 3,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "[res0]",
      "package" : 0,
      "type" : 3,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "f",
      "package" : 0,
      "type" : 22,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "k",
      "package" : 0,
      "type" : 23,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "typ",
      "package" : 0,
      "type" : 5,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "t",
      "package" : 0,
      "type" : 5,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "eface",
      "package" : 0,
      "type" : 28,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "ptr",
      "package" : 0,
      "type" : 14,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "",
      "package" : 0,
      "type" : 35,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "x",
      "package" : 0,
      "type" : 3,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "flag",
      "package" : 0,
      "type" : 22,
      "exported" : false,
      "embedded" : true,
      "field" : true
    }, {
      "name" : "f",
      "package" : 0,
      "type" : 22,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "ptr",
      "package" : 0,
      "type" : 14,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "tt",
      "package" : 0,
      "type" : 44,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "elem",
      "package" : 0,
      "type" : 5,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "fl",
      "package" : 0,
      "type" : 22,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "typ",
      "package" : 0,
      "type" : 5,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "t",
      "package" : 0,
      "type" : 5,
      "exported" : false,
      "embedded" : false,
      "field" : false
    } ]
  },
  "go-version" : "1.14.3"
}