{
  "usage" : {
    "file" : "type.go",
    "label1" : "cast-struct",
    "label2" : "types",
    "line" : "1939",
    "module" : "std",
    "pkg" : "reflect",
    "project" : "kubernetes/kubernetes",
    "snippet" : "prototype := *(**funcType)(unsafe.Pointer(&ifunc))",
    "version" : "std"
  },
  "cfg" : {
    "blocks" : [ {
      "update-vars" : [ ],
      "successors" : [ 2 ],
      "in-vars" : [ 18, 21, 19, 17, 22, 23, 24, 25 ],
      "exit" : false,
      "out-vars" : [ 18, 21, 19, 17, 22, 23, 24, 25 ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[entry]",
      "entry" : true,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ ],
      "in-vars" : [ 21 ],
      "exit" : true,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[exit]",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 3, 4 ],
      "in-vars" : [ 23, 24, 25, 18, 21, 19, 17, 22 ],
      "exit" : false,
      "out-vars" : [ 25, 18, 21, 19, 17, 22, 23, 24 ],
      "decl-vars" : [ ],
      "line-start" : 1933,
      "ast" : {
        "condition" : {
          "go-type" : 12,
          "kind" : "expression",
          "left" : {
            "go-type" : 12,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "variadic",
              "variable" : 19
            }
          },
          "operator" : "&&",
          "right" : {
            "go-type" : 12,
            "kind" : "expression",
            "target" : {
              "go-type" : 12,
              "kind" : "expression",
              "left" : {
                "go-type" : 12,
                "kind" : "expression",
                "left" : {
                  "arguments" : [ {
                    "go-type" : 2,
                    "kind" : "expression",
                    "type" : "identifier",
                    "value" : {
                      "ident-kind" : "Var",
                      "kind" : "ident",
                      "value" : "in",
                      "variable" : 17
                    }
                  } ],
                  "ellipsis" : false,
                  "function" : {
                    "go-type" : 89,
                    "kind" : "expression",
                    "type" : "identifier",
                    "value" : {
                      "ident-kind" : "Builtin",
                      "kind" : "ident",
                      "value" : "len"
                    }
                  },
                  "go-type" : 8,
                  "kind" : "expression",
                  "type" : "call"
                },
                "operator" : "==",
                "right" : {
                  "go-type" : 8,
                  "kind" : "constant",
                  "value" : {
                    "type" : "INT",
                    "value" : "0"
                  }
                },
                "type" : "binary"
              },
              "operator" : "||",
              "right" : {
                "go-type" : 12,
                "kind" : "expression",
                "left" : {
                  "arguments" : [ ],
                  "ellipsis" : false,
                  "function" : {
                    "field" : {
                      "ident-kind" : "Func",
                      "kind" : "ident",
                      "value" : "Kind"
                    },
                    "go-type" : 38,
                    "kind" : "expression",
                    "target" : {
                      "go-type" : 3,
                      "index" : {
                        "go-type" : 8,
                        "kind" : "expression",
                        "left" : {
                          "arguments" : [ {
                            "go-type" : 2,
                            "kind" : "expression",
                            "type" : "identifier",
                            "value" : {
                              "ident-kind" : "Var",
                              "kind" : "ident",
                              "value" : "in",
                              "variable" : 17
                            }
                          } ],
                          "ellipsis" : false,
                          "function" : {
                            "go-type" : 89,
                            "kind" : "expression",
                            "type" : "identifier",
                            "value" : {
                              "ident-kind" : "Builtin",
                              "kind" : "ident",
                              "value" : "len"
                            }
                          },
                          "go-type" : 8,
                          "kind" : "expression",
                          "type" : "call"
                        },
                        "operator" : "-",
                        "right" : {
                          "go-type" : 8,
                          "kind" : "constant",
                          "value" : {
                            "type" : "INT",
                            "value" : "1"
                          }
                        },
                        "type" : "binary"
                      },
                      "kind" : "expression",
                      "target" : {
                        "go-type" : 2,
                        "kind" : "expression",
                        "type" : "identifier",
                        "value" : {
                          "ident-kind" : "Var",
                          "kind" : "ident",
                          "value" : "in",
                          "variable" : 17
                        }
                      },
                      "type" : "index"
                    },
                    "type" : "selector"
                  },
                  "go-type" : 40,
                  "kind" : "expression",
                  "type" : "call"
                },
                "operator" : "!=",
                "right" : {
                  "go-type" : 40,
                  "kind" : "constant",
                  "value" : {
                    "type" : "INT",
                    "value" : "23"
                  }
                },
                "type" : "binary"
              },
              "type" : "binary"
            },
            "type" : "paren"
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 1935,
      "code" : "if variadic && (len(in) == 0 || in[len(in)-1].Kind() != Slice) {\n\tpanic(\"reflect.FuncOf: last arg of variadic func must be slice\")\n}",
      "entry" : false,
      "use-vars" : [ 17, 19 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 4 ],
      "in-vars" : [ 23, 24, 25, 18, 21, 19, 17, 22 ],
      "exit" : false,
      "out-vars" : [ 23, 24, 25, 18, 21, 19, 17, 22 ],
      "decl-vars" : [ ],
      "line-start" : 1934,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 24,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "reflect.FuncOf: last arg of variadic func must be slice"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 91,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Builtin",
              "kind" : "ident",
              "value" : "panic"
            }
          },
          "go-type" : 6,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 1934,
      "code" : "panic(\"reflect.FuncOf: last arg of variadic func must be slice\")",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 5 ],
      "in-vars" : [ 17, 22, 23, 24, 25, 18, 21, 19 ],
      "exit" : false,
      "out-vars" : [ 18, 21, 19, 17, 22, 23, 26, 24, 25 ],
      "decl-vars" : [ 26 ],
      "line-start" : 1938,
      "ast" : {
        "kind" : "statement",
        "target" : {
          "kind" : "decl",
          "specs" : [ {
            "comments" : [ ],
            "declared-type" : {
              "go-type" : 83,
              "incomplete" : false,
              "kind" : "type",
              "methods" : [ ],
              "type" : "interface"
            },
            "kind" : "spec",
            "names" : [ {
              "ident-kind" : "NoKind",
              "kind" : "ident",
              "value" : "ifunc"
            } ],
            "type" : "var",
            "values" : [ {
              "coerced-to" : {
                "go-type" : 93,
                "kind" : "type",
                "params" : [ ],
                "results" : null,
                "type" : "function",
                "variadic" : null
              },
              "go-type" : 93,
              "kind" : "expression",
              "target" : {
                "go-type" : 93,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Nil",
                  "kind" : "ident",
                  "value" : "nil"
                }
              },
              "type" : "cast"
            } ]
          } ],
          "type" : "var"
        },
        "type" : "declaration"
      },
      "assign-vars" : [ ],
      "line-end" : 1938,
      "code" : "// Make a func type.\nvar ifunc interface{} = (func())(nil)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 6 ],
      "in-vars" : [ 19, 23, 25, 18, 21, 22, 24, 26, 17 ],
      "exit" : false,
      "out-vars" : [ 25, 18, 21, 27, 19, 17, 22, 24, 23 ],
      "decl-vars" : [ 27 ],
      "line-start" : 1939,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "prototype"
          }
        } ],
        "right" : [ {
          "go-type" : 94,
          "kind" : "expression",
          "target" : {
            "coerced-to" : {
              "contained" : {
                "contained" : {
                  "go-type" : 95,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 95,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "funcType"
                  }
                },
                "go-type" : 94,
                "kind" : "type",
                "type" : "pointer"
              },
              "go-type" : 97,
              "kind" : "type",
              "type" : "pointer"
            },
            "go-type" : 97,
            "kind" : "expression",
            "target" : {
              "coerced-to" : {
                "go-type" : 56,
                "kind" : "type",
                "qualifier" : {
                  "ident-kind" : "PkgName",
                  "kind" : "ident",
                  "package" : 1,
                  "value" : "unsafe"
                },
                "type" : "identifier",
                "value" : {
                  "go-type" : 56,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "Pointer"
                }
              },
              "go-type" : 56,
              "kind" : "expression",
              "target" : {
                "go-type" : 98,
                "kind" : "expression",
                "operator" : "&",
                "target" : {
                  "go-type" : 83,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "ifunc",
                    "variable" : 26
                  }
                },
                "type" : "unary"
              },
              "type" : "cast"
            },
            "type" : "cast"
          },
          "type" : "star"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 1939,
      "code" : "prototype := *(**funcType)(unsafe.Pointer(&ifunc))",
      "entry" : false,
      "use-vars" : [ 26 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 7 ],
      "in-vars" : [ 21, 17, 23, 24, 25, 18, 27, 19, 22 ],
      "exit" : false,
      "out-vars" : [ 18, 27, 19, 17, 23, 24, 25, 28, 21, 22 ],
      "decl-vars" : [ 28 ],
      "line-start" : 1940,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "n"
          }
        } ],
        "right" : [ {
          "go-type" : 8,
          "kind" : "expression",
          "left" : {
            "arguments" : [ {
              "go-type" : 2,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "in",
                "variable" : 17
              }
            } ],
            "ellipsis" : false,
            "function" : {
              "go-type" : 89,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Builtin",
                "kind" : "ident",
                "value" : "len"
              }
            },
            "go-type" : 8,
            "kind" : "expression",
            "type" : "call"
          },
          "operator" : "+",
          "right" : {
            "arguments" : [ {
              "go-type" : 2,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "out",
                "variable" : 18
              }
            } ],
            "ellipsis" : false,
            "function" : {
              "go-type" : 89,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Builtin",
                "kind" : "ident",
                "value" : "len"
              }
            },
            "go-type" : 8,
            "kind" : "expression",
            "type" : "call"
          },
          "type" : "binary"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 1940,
      "code" : "n := len(in) + len(out)",
      "entry" : false,
      "use-vars" : [ 18, 17 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 8 ],
      "in-vars" : [ 21, 19, 17, 22, 24, 25, 28, 27, 23, 18 ],
      "exit" : false,
      "out-vars" : [ 18, 28, 21, 19, 17, 22, 25, 29, 27, 23, 24 ],
      "decl-vars" : [ 29 ],
      "line-start" : 1942,
      "ast" : {
        "kind" : "statement",
        "target" : {
          "kind" : "decl",
          "specs" : [ {
            "comments" : [ ],
            "declared-type" : {
              "contained" : {
                "go-type" : 95,
                "kind" : "type",
                "type" : "identifier",
                "value" : {
                  "go-type" : 95,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "funcType"
                }
              },
              "go-type" : 94,
              "kind" : "type",
              "type" : "pointer"
            },
            "kind" : "spec",
            "names" : [ {
              "ident-kind" : "NoKind",
              "kind" : "ident",
              "value" : "ft"
            } ],
            "type" : "var",
            "values" : [ ]
          } ],
          "type" : "var"
        },
        "type" : "declaration"
      },
      "assign-vars" : [ ],
      "line-end" : 1942,
      "code" : "var ft *funcType",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 9 ],
      "in-vars" : [ 28, 21, 19, 22, 24, 25, 29, 18, 27, 17, 23 ],
      "exit" : false,
      "out-vars" : [ 30, 28, 21, 27, 19, 17, 23, 29, 18, 22, 24, 25 ],
      "decl-vars" : [ 30 ],
      "line-start" : 1943,
      "ast" : {
        "kind" : "statement",
        "target" : {
          "kind" : "decl",
          "specs" : [ {
            "comments" : [ ],
            "declared-type" : {
              "element" : {
                "contained" : {
                  "go-type" : 49,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 49,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "rtype"
                  }
                },
                "go-type" : 48,
                "kind" : "type",
                "type" : "pointer"
              },
              "go-type" : 88,
              "kind" : "type",
              "type" : "slice"
            },
            "kind" : "spec",
            "names" : [ {
              "ident-kind" : "NoKind",
              "kind" : "ident",
              "value" : "args"
            } ],
            "type" : "var",
            "values" : [ ]
          } ],
          "type" : "var"
        },
        "type" : "declaration"
      },
      "assign-vars" : [ ],
      "line-end" : 1943,
      "code" : "var args []*rtype",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 10, 14, 18, 22, 26, 30, 34 ],
      "in-vars" : [ 17, 22, 29, 21, 28, 27, 19, 23, 24, 25, 18, 30 ],
      "exit" : false,
      "out-vars" : [ 19, 17, 22, 29, 18, 30, 21, 27, 28, 23, 24, 25 ],
      "decl-vars" : [ ],
      "line-start" : 1944,
      "ast" : {
        "condition" : null,
        "kind" : "statement",
        "type" : "switch"
      },
      "assign-vars" : [ ],
      "line-end" : 1971,
      "code" : "switch {\ncase n <= 4:\n\tfixed := new(funcTypeFixed4)\n\targs = fixed.args[:0:len(fixed.args)]\n\tft = &fixed.funcType\ncase n <= 8:\n\tfixed := new(funcTypeFixed8)\n\targs = fixed.args[:0:len(fixed.args)]\n\tft = &fixed.funcType\ncase n <= 16:\n\tfixed := new(funcTypeFixed16)\n\targs = fixed.args[:0:len(fixed.args)]\n\tft = &fixed.funcType\ncase n <= 32:\n\tfixed := new(funcTypeFixed32)\n\targs = fixed.args[:0:len(fixed.args)]\n\tft = &fixed.funcType\ncase n <= 64:\n\tfixed := new(funcTypeFixed64)\n\targs = fixed.args[:0:len(fixed.args)]\n\tft = &fixed.funcType\ncase n <= 128:\n\tfixed := new(funcTypeFixed128)\n\targs = fixed.args[:0:len(fixed.args)]\n\tft = &fixed.funcType\ndefault:\n\tpanic(\"reflect.FuncOf: too many arguments\")\n}",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 11 ],
      "in-vars" : [ 18, 28, 21, 19, 17, 23, 27, 22, 24, 25 ],
      "exit" : false,
      "out-vars" : [ 24, 25, 18, 21, 19, 17, 22, 23, 27 ],
      "decl-vars" : [ ],
      "line-start" : 1945,
      "ast" : {
        "expressions" : [ {
          "go-type" : 12,
          "kind" : "expression",
          "left" : {
            "go-type" : 8,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "n",
              "variable" : 28
            }
          },
          "operator" : "<=",
          "right" : {
            "go-type" : 8,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "4"
            }
          },
          "type" : "binary"
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 1948,
      "code" : "case n <= 4:\n\tfixed := new(funcTypeFixed4)\n\targs = fixed.args[:0:len(fixed.args)]\n\tft = &fixed.funcType",
      "entry" : false,
      "use-vars" : [ 28 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 12 ],
      "in-vars" : [ 23, 25, 18, 27, 17, 22, 24, 21, 19 ],
      "exit" : false,
      "out-vars" : [ 18, 27, 22, 23, 24, 31, 21, 19, 17, 25 ],
      "decl-vars" : [ 31 ],
      "line-start" : 1946,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "fixed"
          }
        } ],
        "right" : [ {
          "argument" : {
            "go-type" : 100,
            "kind" : "type",
            "type" : "identifier",
            "value" : {
              "go-type" : 100,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "funcTypeFixed4"
            }
          },
          "go-type" : 99,
          "kind" : "expression",
          "type" : "new"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 1946,
      "code" : "fixed := new(funcTypeFixed4)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ 30 ],
      "successors" : [ 13 ],
      "in-vars" : [ 27, 19, 17, 18, 31, 21, 22, 23, 24, 25 ],
      "exit" : false,
      "out-vars" : [ 30, 22, 23, 24, 25, 18, 31, 21, 27, 19, 17 ],
      "decl-vars" : [ ],
      "line-start" : 1947,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 88,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "args",
            "variable" : 30
          }
        } ],
        "right" : [ {
          "go-type" : 88,
          "type" : "slice",
          "three" : true,
          "high" : {
            "go-type" : 8,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "max" : {
            "go-type" : 8,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "4"
            }
          },
          "kind" : "expression",
          "low" : null,
          "target" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "args",
              "variable" : 32
            },
            "go-type" : 102,
            "kind" : "expression",
            "target" : {
              "go-type" : 99,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "fixed",
                "variable" : 31
              }
            },
            "type" : "selector"
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 30 ],
      "line-end" : 1947,
      "code" : "args = fixed.args[:0:len(fixed.args)]",
      "entry" : false,
      "use-vars" : [ 31 ]
    }, {
      "update-vars" : [ 29 ],
      "successors" : [ 36 ],
      "in-vars" : [ 18, 30, 22, 23, 24, 25, 31, 21, 27, 19, 17 ],
      "exit" : false,
      "out-vars" : [ 21, 27, 19, 17, 23, 18, 30, 22, 24, 25, 29 ],
      "decl-vars" : [ ],
      "line-start" : 1948,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 94,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "ft",
            "variable" : 29
          }
        } ],
        "right" : [ {
          "go-type" : 94,
          "kind" : "expression",
          "operator" : "&",
          "target" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "funcType",
              "variable" : 33
            },
            "go-type" : 95,
            "kind" : "expression",
            "target" : {
              "go-type" : 99,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "fixed",
                "variable" : 31
              }
            },
            "type" : "selector"
          },
          "type" : "unary"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 29 ],
      "line-end" : 1948,
      "code" : "ft = &fixed.funcType",
      "entry" : false,
      "use-vars" : [ 31 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 15 ],
      "in-vars" : [ 18, 28, 21, 22, 23, 25, 27, 19, 17, 24 ],
      "exit" : false,
      "out-vars" : [ 18, 27, 17, 21, 19, 22, 23, 24, 25 ],
      "decl-vars" : [ ],
      "line-start" : 1949,
      "ast" : {
        "expressions" : [ {
          "go-type" : 12,
          "kind" : "expression",
          "left" : {
            "go-type" : 8,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "n",
              "variable" : 28
            }
          },
          "operator" : "<=",
          "right" : {
            "go-type" : 8,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "8"
            }
          },
          "type" : "binary"
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 1952,
      "code" : "case n <= 8:\n\tfixed := new(funcTypeFixed8)\n\targs = fixed.args[:0:len(fixed.args)]\n\tft = &fixed.funcType",
      "entry" : false,
      "use-vars" : [ 28 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 16 ],
      "in-vars" : [ 18, 21, 23, 24, 25, 27, 19, 17, 22 ],
      "exit" : false,
      "out-vars" : [ 24, 18, 21, 23, 34, 22, 25, 27, 19, 17 ],
      "decl-vars" : [ 34 ],
      "line-start" : 1950,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "fixed"
          }
        } ],
        "right" : [ {
          "argument" : {
            "go-type" : 104,
            "kind" : "type",
            "type" : "identifier",
            "value" : {
              "go-type" : 104,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "funcTypeFixed8"
            }
          },
          "go-type" : 103,
          "kind" : "expression",
          "type" : "new"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 1950,
      "code" : "fixed := new(funcTypeFixed8)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ 30 ],
      "successors" : [ 17 ],
      "in-vars" : [ 34, 23, 24, 25, 18, 21, 27, 17, 19, 22 ],
      "exit" : false,
      "out-vars" : [ 23, 24, 18, 30, 21, 27, 17, 34, 19, 22, 25 ],
      "decl-vars" : [ ],
      "line-start" : 1951,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 88,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "args",
            "variable" : 30
          }
        } ],
        "right" : [ {
          "go-type" : 88,
          "type" : "slice",
          "three" : true,
          "high" : {
            "go-type" : 8,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "max" : {
            "go-type" : 8,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "8"
            }
          },
          "kind" : "expression",
          "low" : null,
          "target" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "args",
              "variable" : 35
            },
            "go-type" : 106,
            "kind" : "expression",
            "target" : {
              "go-type" : 103,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "fixed",
                "variable" : 34
              }
            },
            "type" : "selector"
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 30 ],
      "line-end" : 1951,
      "code" : "args = fixed.args[:0:len(fixed.args)]",
      "entry" : false,
      "use-vars" : [ 34 ]
    }, {
      "update-vars" : [ 29 ],
      "successors" : [ 36 ],
      "in-vars" : [ 17, 34, 25, 18, 30, 21, 27, 19, 22, 23, 24 ],
      "exit" : false,
      "out-vars" : [ 18, 30, 21, 27, 22, 25, 29, 19, 17, 23, 24 ],
      "decl-vars" : [ ],
      "line-start" : 1952,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 94,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "ft",
            "variable" : 29
          }
        } ],
        "right" : [ {
          "go-type" : 94,
          "kind" : "expression",
          "operator" : "&",
          "target" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "funcType",
              "variable" : 36
            },
            "go-type" : 95,
            "kind" : "expression",
            "target" : {
              "go-type" : 103,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "fixed",
                "variable" : 34
              }
            },
            "type" : "selector"
          },
          "type" : "unary"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 29 ],
      "line-end" : 1952,
      "code" : "ft = &fixed.funcType",
      "entry" : false,
      "use-vars" : [ 34 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 19 ],
      "in-vars" : [ 21, 19, 17, 25, 28, 27, 22, 23, 24, 18 ],
      "exit" : false,
      "out-vars" : [ 27, 17, 22, 24, 21, 19, 23, 25, 18 ],
      "decl-vars" : [ ],
      "line-start" : 1953,
      "ast" : {
        "expressions" : [ {
          "go-type" : 12,
          "kind" : "expression",
          "left" : {
            "go-type" : 8,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "n",
              "variable" : 28
            }
          },
          "operator" : "<=",
          "right" : {
            "go-type" : 8,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "16"
            }
          },
          "type" : "binary"
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 1956,
      "code" : "case n <= 16:\n\tfixed := new(funcTypeFixed16)\n\targs = fixed.args[:0:len(fixed.args)]\n\tft = &fixed.funcType",
      "entry" : false,
      "use-vars" : [ 28 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 20 ],
      "in-vars" : [ 23, 24, 18, 27, 17, 22, 21, 19, 25 ],
      "exit" : false,
      "out-vars" : [ 37, 27, 19, 17, 22, 23, 18, 21, 24, 25 ],
      "decl-vars" : [ 37 ],
      "line-start" : 1954,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "fixed"
          }
        } ],
        "right" : [ {
          "argument" : {
            "go-type" : 108,
            "kind" : "type",
            "type" : "identifier",
            "value" : {
              "go-type" : 108,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "funcTypeFixed16"
            }
          },
          "go-type" : 107,
          "kind" : "expression",
          "type" : "new"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 1954,
      "code" : "fixed := new(funcTypeFixed16)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ 30 ],
      "successors" : [ 21 ],
      "in-vars" : [ 17, 22, 23, 24, 25, 18, 37, 21, 27, 19 ],
      "exit" : false,
      "out-vars" : [ 21, 27, 17, 22, 18, 37, 30, 25, 19, 23, 24 ],
      "decl-vars" : [ ],
      "line-start" : 1955,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 88,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "args",
            "variable" : 30
          }
        } ],
        "right" : [ {
          "go-type" : 88,
          "type" : "slice",
          "three" : true,
          "high" : {
            "go-type" : 8,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "max" : {
            "go-type" : 8,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "16"
            }
          },
          "kind" : "expression",
          "low" : null,
          "target" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "args",
              "variable" : 38
            },
            "go-type" : 110,
            "kind" : "expression",
            "target" : {
              "go-type" : 107,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "fixed",
                "variable" : 37
              }
            },
            "type" : "selector"
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 30 ],
      "line-end" : 1955,
      "code" : "args = fixed.args[:0:len(fixed.args)]",
      "entry" : false,
      "use-vars" : [ 37 ]
    }, {
      "update-vars" : [ 29 ],
      "successors" : [ 36 ],
      "in-vars" : [ 27, 19, 22, 23, 24, 25, 30, 37, 21, 17, 18 ],
      "exit" : false,
      "out-vars" : [ 17, 23, 24, 29, 30, 27, 22, 25, 18, 21, 19 ],
      "decl-vars" : [ ],
      "line-start" : 1956,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 94,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "ft",
            "variable" : 29
          }
        } ],
        "right" : [ {
          "go-type" : 94,
          "kind" : "expression",
          "operator" : "&",
          "target" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "funcType",
              "variable" : 39
            },
            "go-type" : 95,
            "kind" : "expression",
            "target" : {
              "go-type" : 107,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "fixed",
                "variable" : 37
              }
            },
            "type" : "selector"
          },
          "type" : "unary"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 29 ],
      "line-end" : 1956,
      "code" : "ft = &fixed.funcType",
      "entry" : false,
      "use-vars" : [ 37 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 23 ],
      "in-vars" : [ 24, 25, 17, 28, 21, 27, 19, 22, 23, 18 ],
      "exit" : false,
      "out-vars" : [ 18, 23, 21, 27, 19, 17, 22, 24, 25 ],
      "decl-vars" : [ ],
      "line-start" : 1957,
      "ast" : {
        "expressions" : [ {
          "go-type" : 12,
          "kind" : "expression",
          "left" : {
            "go-type" : 8,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "n",
              "variable" : 28
            }
          },
          "operator" : "<=",
          "right" : {
            "go-type" : 8,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "32"
            }
          },
          "type" : "binary"
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 1960,
      "code" : "case n <= 32:\n\tfixed := new(funcTypeFixed32)\n\targs = fixed.args[:0:len(fixed.args)]\n\tft = &fixed.funcType",
      "entry" : false,
      "use-vars" : [ 28 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 24 ],
      "in-vars" : [ 22, 18, 19, 17, 24, 25, 21, 27, 23 ],
      "exit" : false,
      "out-vars" : [ 21, 27, 19, 23, 24, 25, 40, 18, 17, 22 ],
      "decl-vars" : [ 40 ],
      "line-start" : 1958,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "fixed"
          }
        } ],
        "right" : [ {
          "argument" : {
            "go-type" : 112,
            "kind" : "type",
            "type" : "identifier",
            "value" : {
              "go-type" : 112,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "funcTypeFixed32"
            }
          },
          "go-type" : 111,
          "kind" : "expression",
          "type" : "new"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 1958,
      "code" : "fixed := new(funcTypeFixed32)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ 30 ],
      "successors" : [ 25 ],
      "in-vars" : [ 40, 18, 27, 19, 17, 22, 24, 25, 21, 23 ],
      "exit" : false,
      "out-vars" : [ 25, 19, 22, 21, 27, 17, 23, 24, 40, 18, 30 ],
      "decl-vars" : [ ],
      "line-start" : 1959,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 88,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "args",
            "variable" : 30
          }
        } ],
        "right" : [ {
          "go-type" : 88,
          "type" : "slice",
          "three" : true,
          "high" : {
            "go-type" : 8,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "max" : {
            "go-type" : 8,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "32"
            }
          },
          "kind" : "expression",
          "low" : null,
          "target" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "args",
              "variable" : 41
            },
            "go-type" : 114,
            "kind" : "expression",
            "target" : {
              "go-type" : 111,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "fixed",
                "variable" : 40
              }
            },
            "type" : "selector"
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 30 ],
      "line-end" : 1959,
      "code" : "args = fixed.args[:0:len(fixed.args)]",
      "entry" : false,
      "use-vars" : [ 40 ]
    }, {
      "update-vars" : [ 29 ],
      "successors" : [ 36 ],
      "in-vars" : [ 40, 18, 30, 27, 19, 24, 25, 21, 17, 22, 23 ],
      "exit" : false,
      "out-vars" : [ 18, 30, 27, 17, 24, 25, 29, 21, 19, 22, 23 ],
      "decl-vars" : [ ],
      "line-start" : 1960,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 94,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "ft",
            "variable" : 29
          }
        } ],
        "right" : [ {
          "go-type" : 94,
          "kind" : "expression",
          "operator" : "&",
          "target" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "funcType",
              "variable" : 42
            },
            "go-type" : 95,
            "kind" : "expression",
            "target" : {
              "go-type" : 111,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "fixed",
                "variable" : 40
              }
            },
            "type" : "selector"
          },
          "type" : "unary"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 29 ],
      "line-end" : 1960,
      "code" : "ft = &fixed.funcType",
      "entry" : false,
      "use-vars" : [ 40 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 27 ],
      "in-vars" : [ 23, 28, 17, 22, 19, 24, 25, 18, 21, 27 ],
      "exit" : false,
      "out-vars" : [ 23, 24, 17, 22, 27, 19, 25, 18, 21 ],
      "decl-vars" : [ ],
      "line-start" : 1961,
      "ast" : {
        "expressions" : [ {
          "go-type" : 12,
          "kind" : "expression",
          "left" : {
            "go-type" : 8,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "n",
              "variable" : 28
            }
          },
          "operator" : "<=",
          "right" : {
            "go-type" : 8,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "64"
            }
          },
          "type" : "binary"
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 1964,
      "code" : "case n <= 64:\n\tfixed := new(funcTypeFixed64)\n\targs = fixed.args[:0:len(fixed.args)]\n\tft = &fixed.funcType",
      "entry" : false,
      "use-vars" : [ 28 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 28 ],
      "in-vars" : [ 24, 27, 23, 19, 17, 22, 25, 18, 21 ],
      "exit" : false,
      "out-vars" : [ 23, 24, 25, 18, 27, 19, 17, 43, 21, 22 ],
      "decl-vars" : [ 43 ],
      "line-start" : 1962,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "fixed"
          }
        } ],
        "right" : [ {
          "argument" : {
            "go-type" : 116,
            "kind" : "type",
            "type" : "identifier",
            "value" : {
              "go-type" : 116,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "funcTypeFixed64"
            }
          },
          "go-type" : 115,
          "kind" : "expression",
          "type" : "new"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 1962,
      "code" : "fixed := new(funcTypeFixed64)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ 30 ],
      "successors" : [ 29 ],
      "in-vars" : [ 18, 19, 17, 23, 43, 21, 27, 22, 24, 25 ],
      "exit" : false,
      "out-vars" : [ 18, 22, 23, 24, 25, 43, 30, 21, 27, 19, 17 ],
      "decl-vars" : [ ],
      "line-start" : 1963,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 88,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "args",
            "variable" : 30
          }
        } ],
        "right" : [ {
          "go-type" : 88,
          "type" : "slice",
          "three" : true,
          "high" : {
            "go-type" : 8,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "max" : {
            "go-type" : 8,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "64"
            }
          },
          "kind" : "expression",
          "low" : null,
          "target" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "args",
              "variable" : 44
            },
            "go-type" : 118,
            "kind" : "expression",
            "target" : {
              "go-type" : 115,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "fixed",
                "variable" : 43
              }
            },
            "type" : "selector"
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 30 ],
      "line-end" : 1963,
      "code" : "args = fixed.args[:0:len(fixed.args)]",
      "entry" : false,
      "use-vars" : [ 43 ]
    }, {
      "update-vars" : [ 29 ],
      "successors" : [ 36 ],
      "in-vars" : [ 18, 22, 24, 25, 43, 30, 21, 27, 19, 17, 23 ],
      "exit" : false,
      "out-vars" : [ 24, 25, 18, 30, 17, 22, 23, 29, 21, 27, 19 ],
      "decl-vars" : [ ],
      "line-start" : 1964,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 94,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "ft",
            "variable" : 29
          }
        } ],
        "right" : [ {
          "go-type" : 94,
          "kind" : "expression",
          "operator" : "&",
          "target" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "funcType",
              "variable" : 45
            },
            "go-type" : 95,
            "kind" : "expression",
            "target" : {
              "go-type" : 115,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "fixed",
                "variable" : 43
              }
            },
            "type" : "selector"
          },
          "type" : "unary"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 29 ],
      "line-end" : 1964,
      "code" : "ft = &fixed.funcType",
      "entry" : false,
      "use-vars" : [ 43 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 31 ],
      "in-vars" : [ 28, 21, 27, 19, 17, 22, 18, 23, 24, 25 ],
      "exit" : false,
      "out-vars" : [ 18, 27, 17, 22, 23, 24, 25, 21, 19 ],
      "decl-vars" : [ ],
      "line-start" : 1965,
      "ast" : {
        "expressions" : [ {
          "go-type" : 12,
          "kind" : "expression",
          "left" : {
            "go-type" : 8,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "n",
              "variable" : 28
            }
          },
          "operator" : "<=",
          "right" : {
            "go-type" : 8,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "128"
            }
          },
          "type" : "binary"
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 1968,
      "code" : "case n <= 128:\n\tfixed := new(funcTypeFixed128)\n\targs = fixed.args[:0:len(fixed.args)]\n\tft = &fixed.funcType",
      "entry" : false,
      "use-vars" : [ 28 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 32 ],
      "in-vars" : [ 19, 22, 24, 18, 21, 27, 17, 23, 25 ],
      "exit" : false,
      "out-vars" : [ 46, 19, 17, 23, 25, 18, 21, 27, 22, 24 ],
      "decl-vars" : [ 46 ],
      "line-start" : 1966,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "fixed"
          }
        } ],
        "right" : [ {
          "argument" : {
            "go-type" : 120,
            "kind" : "type",
            "type" : "identifier",
            "value" : {
              "go-type" : 120,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "funcTypeFixed128"
            }
          },
          "go-type" : 119,
          "kind" : "expression",
          "type" : "new"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 1966,
      "code" : "fixed := new(funcTypeFixed128)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ 30 ],
      "successors" : [ 33 ],
      "in-vars" : [ 22, 25, 18, 27, 17, 23, 24, 46, 21, 19 ],
      "exit" : false,
      "out-vars" : [ 24, 25, 27, 17, 22, 23, 19, 46, 18, 30, 21 ],
      "decl-vars" : [ ],
      "line-start" : 1967,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 88,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "args",
            "variable" : 30
          }
        } ],
        "right" : [ {
          "go-type" : 88,
          "type" : "slice",
          "three" : true,
          "high" : {
            "go-type" : 8,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "max" : {
            "go-type" : 8,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "128"
            }
          },
          "kind" : "expression",
          "low" : null,
          "target" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "args",
              "variable" : 47
            },
            "go-type" : 122,
            "kind" : "expression",
            "target" : {
              "go-type" : 119,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "fixed",
                "variable" : 46
              }
            },
            "type" : "selector"
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 30 ],
      "line-end" : 1967,
      "code" : "args = fixed.args[:0:len(fixed.args)]",
      "entry" : false,
      "use-vars" : [ 46 ]
    }, {
      "update-vars" : [ 29 ],
      "successors" : [ 36 ],
      "in-vars" : [ 23, 25, 18, 21, 27, 22, 24, 46, 30, 19, 17 ],
      "exit" : false,
      "out-vars" : [ 27, 19, 23, 29, 30, 21, 24, 25, 18, 17, 22 ],
      "decl-vars" : [ ],
      "line-start" : 1968,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 94,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "ft",
            "variable" : 29
          }
        } ],
        "right" : [ {
          "go-type" : 94,
          "kind" : "expression",
          "operator" : "&",
          "target" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "funcType",
              "variable" : 48
            },
            "go-type" : 95,
            "kind" : "expression",
            "target" : {
              "go-type" : 119,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "fixed",
                "variable" : 46
              }
            },
            "type" : "selector"
          },
          "type" : "unary"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 29 ],
      "line-end" : 1968,
      "code" : "ft = &fixed.funcType",
      "entry" : false,
      "use-vars" : [ 46 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 35 ],
      "in-vars" : [ 18, 21, 27, 19, 17, 25, 29, 22, 23, 24, 30 ],
      "exit" : false,
      "out-vars" : [ 27, 17, 24, 25, 19, 22, 23, 29, 18, 30, 21 ],
      "decl-vars" : [ ],
      "line-start" : 1969,
      "ast" : {
        "expressions" : [ ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 1970,
      "code" : "default:\n\tpanic(\"reflect.FuncOf: too many arguments\")",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 36 ],
      "in-vars" : [ 17, 19, 22, 23, 29, 18, 30, 21, 27, 24, 25 ],
      "exit" : false,
      "out-vars" : [ 21, 27, 19, 24, 23, 25, 29, 18, 30, 17, 22 ],
      "decl-vars" : [ ],
      "line-start" : 1970,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 24,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "reflect.FuncOf: too many arguments"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 91,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Builtin",
              "kind" : "ident",
              "value" : "panic"
            }
          },
          "go-type" : 6,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 1970,
      "code" : "panic(\"reflect.FuncOf: too many arguments\")",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 37 ],
      "in-vars" : [ 29, 18, 30, 27, 23, 21, 19, 17, 22, 24, 25 ],
      "exit" : false,
      "out-vars" : [ 29, 18, 21, 19, 23, 24, 30, 17, 22, 25 ],
      "decl-vars" : [ ],
      "line-start" : 1972,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 95,
          "kind" : "expression",
          "target" : {
            "go-type" : 94,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "ft",
              "variable" : 29
            }
          },
          "type" : "star"
        } ],
        "right" : [ {
          "go-type" : 95,
          "kind" : "expression",
          "target" : {
            "go-type" : 94,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "prototype",
              "variable" : 27
            }
          },
          "type" : "star"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 1972,
      "code" : "*ft = *prototype",
      "entry" : false,
      "use-vars" : [ 27 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 38 ],
      "in-vars" : [ 17, 25, 29, 19, 21, 22, 23, 24, 18, 30 ],
      "exit" : false,
      "out-vars" : [ 30, 21, 17, 22, 23, 24, 29, 18, 49, 19, 25 ],
      "decl-vars" : [ 49 ],
      "line-start" : 1975,
      "ast" : {
        "kind" : "statement",
        "target" : {
          "kind" : "decl",
          "specs" : [ {
            "comments" : [ ],
            "declared-type" : {
              "go-type" : 51,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 51,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "uint32"
              }
            },
            "kind" : "spec",
            "names" : [ {
              "ident-kind" : "NoKind",
              "kind" : "ident",
              "value" : "hash"
            } ],
            "type" : "var",
            "values" : [ ]
          } ],
          "type" : "var"
        },
        "type" : "declaration"
      },
      "assign-vars" : [ ],
      "line-end" : 1975,
      "code" : "// Build a hash and minimally populate ft.\nvar hash uint32",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 39, 42 ],
      "in-vars" : [ 29, 18, 49, 19, 17, 23, 30, 21, 22, 24, 25 ],
      "exit" : false,
      "out-vars" : [ 18, 19, 17, 23, 24, 25, 29, 30, 50, 49, 21, 22 ],
      "decl-vars" : [ 50, 53 ],
      "line-start" : 1976,
      "ast" : {
        "is-assign" : false,
        "key" : {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "_"
          }
        },
        "kind" : "statement",
        "target" : {
          "go-type" : 2,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "in",
            "variable" : 17
          }
        },
        "type" : "range",
        "value" : {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "in"
          }
        }
      },
      "assign-vars" : [ ],
      "line-end" : 1980,
      "code" : "for _, in := range in {\n\tt := in.(*rtype)\n\targs = append(args, t)\n\thash = fnv1(hash, byte(t.hash>>24), byte(t.hash>>16), byte(t.hash>>8), byte(t.hash))\n}",
      "entry" : false,
      "use-vars" : [ 17 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 40 ],
      "in-vars" : [ 50, 17, 22, 23, 25, 29, 18, 30, 49, 21, 19, 24 ],
      "exit" : false,
      "out-vars" : [ 18, 30, 51, 21, 19, 17, 22, 29, 25, 23, 24, 49 ],
      "decl-vars" : [ 51 ],
      "line-start" : 1977,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "t"
          }
        } ],
        "right" : [ {
          "asserted" : {
            "contained" : {
              "go-type" : 49,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 49,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "rtype"
              }
            },
            "go-type" : 48,
            "kind" : "type",
            "type" : "pointer"
          },
          "go-type" : 48,
          "kind" : "expression",
          "target" : {
            "go-type" : 3,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "in",
              "variable" : 50
            }
          },
          "type" : "type-assert"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 1977,
      "code" : "t := in.(*rtype)",
      "entry" : false,
      "use-vars" : [ 50 ]
    }, {
      "update-vars" : [ 30 ],
      "successors" : [ 41 ],
      "in-vars" : [ 23, 25, 29, 18, 21, 17, 22, 30, 51, 49, 19, 24 ],
      "exit" : false,
      "out-vars" : [ 29, 18, 30, 51, 19, 22, 23, 49, 21, 17, 24, 25 ],
      "decl-vars" : [ ],
      "line-start" : 1978,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 88,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "args",
            "variable" : 30
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 88,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "args",
              "variable" : 30
            }
          }, {
            "go-type" : 48,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "t",
              "variable" : 51
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 123,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Builtin",
              "kind" : "ident",
              "value" : "append"
            }
          },
          "go-type" : 88,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 30 ],
      "line-end" : 1978,
      "code" : "args = append(args, t)",
      "entry" : false,
      "use-vars" : [ 51, 30 ]
    }, {
      "update-vars" : [ 49 ],
      "successors" : [ 38 ],
      "in-vars" : [ 19, 17, 22, 23, 25, 29, 30, 21, 24, 18, 51, 49 ],
      "exit" : false,
      "out-vars" : [ 18, 30, 49, 21, 19, 17, 22, 29, 25, 24, 23 ],
      "decl-vars" : [ ],
      "line-start" : 1979,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 51,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "hash",
            "variable" : 49
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 51,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "hash",
              "variable" : 49
            }
          }, {
            "coerced-to" : {
              "go-type" : 58,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 58,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "byte"
              }
            },
            "go-type" : 58,
            "kind" : "expression",
            "target" : {
              "go-type" : 51,
              "kind" : "expression",
              "left" : {
                "field" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "hash",
                  "variable" : 52
                },
                "go-type" : 51,
                "kind" : "expression",
                "target" : {
                  "go-type" : 48,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "t",
                    "variable" : 51
                  }
                },
                "type" : "selector"
              },
              "operator" : ">>",
              "right" : {
                "go-type" : 130,
                "kind" : "constant",
                "value" : {
                  "type" : "INT",
                  "value" : "24"
                }
              },
              "type" : "binary"
            },
            "type" : "cast"
          }, {
            "coerced-to" : {
              "go-type" : 58,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 58,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "byte"
              }
            },
            "go-type" : 58,
            "kind" : "expression",
            "target" : {
              "go-type" : 51,
              "kind" : "expression",
              "left" : {
                "field" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "hash",
                  "variable" : 52
                },
                "go-type" : 51,
                "kind" : "expression",
                "target" : {
                  "go-type" : 48,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "t",
                    "variable" : 51
                  }
                },
                "type" : "selector"
              },
              "operator" : ">>",
              "right" : {
                "go-type" : 130,
                "kind" : "constant",
                "value" : {
                  "type" : "INT",
                  "value" : "16"
                }
              },
              "type" : "binary"
            },
            "type" : "cast"
          }, {
            "coerced-to" : {
              "go-type" : 58,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 58,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "byte"
              }
            },
            "go-type" : 58,
            "kind" : "expression",
            "target" : {
              "go-type" : 51,
              "kind" : "expression",
              "left" : {
                "field" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "hash",
                  "variable" : 52
                },
                "go-type" : 51,
                "kind" : "expression",
                "target" : {
                  "go-type" : 48,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "t",
                    "variable" : 51
                  }
                },
                "type" : "selector"
              },
              "operator" : ">>",
              "right" : {
                "go-type" : 130,
                "kind" : "constant",
                "value" : {
                  "type" : "INT",
                  "value" : "8"
                }
              },
              "type" : "binary"
            },
            "type" : "cast"
          }, {
            "coerced-to" : {
              "go-type" : 58,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 58,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "byte"
              }
            },
            "go-type" : 58,
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "hash",
                "variable" : 52
              },
              "go-type" : 51,
              "kind" : "expression",
              "target" : {
                "go-type" : 48,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "t",
                  "variable" : 51
                }
              },
              "type" : "selector"
            },
            "type" : "cast"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 126,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "fnv1"
            }
          },
          "go-type" : 51,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 49 ],
      "line-end" : 1979,
      "code" : "hash = fnv1(hash, byte(t.hash>>24), byte(t.hash>>16), byte(t.hash>>8), byte(t.hash))",
      "entry" : false,
      "use-vars" : [ 51, 49 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 43, 44 ],
      "in-vars" : [ 23, 21, 18, 30, 49, 19, 17, 22, 24, 29, 25 ],
      "exit" : false,
      "out-vars" : [ 30, 49, 21, 17, 18, 19, 22, 23, 24, 25, 29 ],
      "decl-vars" : [ ],
      "line-start" : 1981,
      "ast" : {
        "condition" : {
          "go-type" : 12,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "variadic",
            "variable" : 19
          }
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 1983,
      "code" : "if variadic {\n\thash = fnv1(hash, 'v')\n}",
      "entry" : false,
      "use-vars" : [ 19 ]
    }, {
      "update-vars" : [ 49 ],
      "successors" : [ 44 ],
      "in-vars" : [ 29, 30, 49, 21, 22, 25, 18, 19, 17, 23, 24 ],
      "exit" : false,
      "out-vars" : [ 29, 49, 21, 19, 22, 25, 18, 30, 17, 23, 24 ],
      "decl-vars" : [ ],
      "line-start" : 1982,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 51,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "hash",
            "variable" : 49
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 51,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "hash",
              "variable" : 49
            }
          }, {
            "go-type" : 58,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "118"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 126,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "fnv1"
            }
          },
          "go-type" : 51,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 49 ],
      "line-end" : 1982,
      "code" : "hash = fnv1(hash, 'v')",
      "entry" : false,
      "use-vars" : [ 49 ]
    }, {
      "update-vars" : [ 49 ],
      "successors" : [ 45 ],
      "in-vars" : [ 21, 19, 22, 23, 30, 18, 49, 17, 24, 25, 29 ],
      "exit" : false,
      "out-vars" : [ 18, 30, 49, 21, 29, 17, 22, 23, 24, 25, 19 ],
      "decl-vars" : [ ],
      "line-start" : 1984,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 51,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "hash",
            "variable" : 49
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 51,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "hash",
              "variable" : 49
            }
          }, {
            "go-type" : 58,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "46"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 126,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "fnv1"
            }
          },
          "go-type" : 51,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 49 ],
      "line-end" : 1984,
      "code" : "hash = fnv1(hash, '.')",
      "entry" : false,
      "use-vars" : [ 49 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 46, 49 ],
      "in-vars" : [ 30, 19, 24, 23, 25, 29, 18, 49, 21, 17, 22 ],
      "exit" : false,
      "out-vars" : [ 23, 30, 49, 19, 17, 22, 24, 25, 29, 18, 54, 21 ],
      "decl-vars" : [ 54, 56 ],
      "line-start" : 1985,
      "ast" : {
        "is-assign" : false,
        "key" : {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "_"
          }
        },
        "kind" : "statement",
        "target" : {
          "go-type" : 2,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "out",
            "variable" : 18
          }
        },
        "type" : "range",
        "value" : {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "out"
          }
        }
      },
      "assign-vars" : [ ],
      "line-end" : 1989,
      "code" : "for _, out := range out {\n\tt := out.(*rtype)\n\targs = append(args, t)\n\thash = fnv1(hash, byte(t.hash>>24), byte(t.hash>>16), byte(t.hash>>8), byte(t.hash))\n}",
      "entry" : false,
      "use-vars" : [ 18 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 47 ],
      "in-vars" : [ 24, 29, 54, 49, 19, 17, 25, 18, 30, 21, 22, 23 ],
      "exit" : false,
      "out-vars" : [ 17, 55, 22, 24, 29, 30, 49, 21, 25, 18, 19, 23 ],
      "decl-vars" : [ 55 ],
      "line-start" : 1986,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "t"
          }
        } ],
        "right" : [ {
          "asserted" : {
            "contained" : {
              "go-type" : 49,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 49,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "rtype"
              }
            },
            "go-type" : 48,
            "kind" : "type",
            "type" : "pointer"
          },
          "go-type" : 48,
          "kind" : "expression",
          "target" : {
            "go-type" : 3,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "out",
              "variable" : 54
            }
          },
          "type" : "type-assert"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 1986,
      "code" : "t := out.(*rtype)",
      "entry" : false,
      "use-vars" : [ 54 ]
    }, {
      "update-vars" : [ 30 ],
      "successors" : [ 48 ],
      "in-vars" : [ 55, 22, 23, 25, 18, 21, 17, 19, 24, 29, 30, 49 ],
      "exit" : false,
      "out-vars" : [ 21, 55, 22, 23, 24, 29, 49, 19, 17, 25, 18, 30 ],
      "decl-vars" : [ ],
      "line-start" : 1987,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 88,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "args",
            "variable" : 30
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 88,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "args",
              "variable" : 30
            }
          }, {
            "go-type" : 48,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "t",
              "variable" : 55
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 123,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Builtin",
              "kind" : "ident",
              "value" : "append"
            }
          },
          "go-type" : 88,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 30 ],
      "line-end" : 1987,
      "code" : "args = append(args, t)",
      "entry" : false,
      "use-vars" : [ 30, 55 ]
    }, {
      "update-vars" : [ 49 ],
      "successors" : [ 45 ],
      "in-vars" : [ 30, 49, 19, 22, 23, 18, 21, 17, 55, 24, 25, 29 ],
      "exit" : false,
      "out-vars" : [ 22, 25, 21, 19, 17, 49, 23, 24, 29, 18, 30 ],
      "decl-vars" : [ ],
      "line-start" : 1988,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 51,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "hash",
            "variable" : 49
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 51,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "hash",
              "variable" : 49
            }
          }, {
            "coerced-to" : {
              "go-type" : 58,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 58,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "byte"
              }
            },
            "go-type" : 58,
            "kind" : "expression",
            "target" : {
              "go-type" : 51,
              "kind" : "expression",
              "left" : {
                "field" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "hash",
                  "variable" : 52
                },
                "go-type" : 51,
                "kind" : "expression",
                "target" : {
                  "go-type" : 48,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "t",
                    "variable" : 55
                  }
                },
                "type" : "selector"
              },
              "operator" : ">>",
              "right" : {
                "go-type" : 130,
                "kind" : "constant",
                "value" : {
                  "type" : "INT",
                  "value" : "24"
                }
              },
              "type" : "binary"
            },
            "type" : "cast"
          }, {
            "coerced-to" : {
              "go-type" : 58,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 58,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "byte"
              }
            },
            "go-type" : 58,
            "kind" : "expression",
            "target" : {
              "go-type" : 51,
              "kind" : "expression",
              "left" : {
                "field" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "hash",
                  "variable" : 52
                },
                "go-type" : 51,
                "kind" : "expression",
                "target" : {
                  "go-type" : 48,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "t",
                    "variable" : 55
                  }
                },
                "type" : "selector"
              },
              "operator" : ">>",
              "right" : {
                "go-type" : 130,
                "kind" : "constant",
                "value" : {
                  "type" : "INT",
                  "value" : "16"
                }
              },
              "type" : "binary"
            },
            "type" : "cast"
          }, {
            "coerced-to" : {
              "go-type" : 58,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 58,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "byte"
              }
            },
            "go-type" : 58,
            "kind" : "expression",
            "target" : {
              "go-type" : 51,
              "kind" : "expression",
              "left" : {
                "field" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "hash",
                  "variable" : 52
                },
                "go-type" : 51,
                "kind" : "expression",
                "target" : {
                  "go-type" : 48,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "t",
                    "variable" : 55
                  }
                },
                "type" : "selector"
              },
              "operator" : ">>",
              "right" : {
                "go-type" : 130,
                "kind" : "constant",
                "value" : {
                  "type" : "INT",
                  "value" : "8"
                }
              },
              "type" : "binary"
            },
            "type" : "cast"
          }, {
            "coerced-to" : {
              "go-type" : 58,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 58,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "byte"
              }
            },
            "go-type" : 58,
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "hash",
                "variable" : 52
              },
              "go-type" : 51,
              "kind" : "expression",
              "target" : {
                "go-type" : 48,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "t",
                  "variable" : 55
                }
              },
              "type" : "selector"
            },
            "type" : "cast"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 126,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "fnv1"
            }
          },
          "go-type" : 51,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 49 ],
      "line-end" : 1988,
      "code" : "hash = fnv1(hash, byte(t.hash>>24), byte(t.hash>>16), byte(t.hash>>8), byte(t.hash))",
      "entry" : false,
      "use-vars" : [ 55, 49 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 50, 51 ],
      "in-vars" : [ 21, 19, 23, 24, 25, 18, 30, 49, 17, 22, 29 ],
      "exit" : false,
      "out-vars" : [ 29, 18, 21, 19, 22, 23, 24, 49, 17, 25 ],
      "decl-vars" : [ ],
      "line-start" : 1990,
      "ast" : {
        "condition" : {
          "go-type" : 131,
          "kind" : "expression",
          "left" : {
            "arguments" : [ {
              "go-type" : 88,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "args",
                "variable" : 30
              }
            } ],
            "ellipsis" : false,
            "function" : {
              "go-type" : 132,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Builtin",
                "kind" : "ident",
                "value" : "len"
              }
            },
            "go-type" : 8,
            "kind" : "expression",
            "type" : "call"
          },
          "operator" : ">",
          "right" : {
            "go-type" : 8,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "50"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 1992,
      "code" : "if len(args) > 50 {\n\tpanic(\"reflect.FuncOf does not support more than 50 arguments\")\n}",
      "entry" : false,
      "use-vars" : [ 30 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 51 ],
      "in-vars" : [ 29, 18, 21, 22, 23, 25, 49, 19, 17, 24 ],
      "exit" : false,
      "out-vars" : [ 18, 17, 22, 23, 24, 25, 29, 49, 21, 19 ],
      "decl-vars" : [ ],
      "line-start" : 1991,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 24,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "reflect.FuncOf does not support more than 50 arguments"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 91,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Builtin",
              "kind" : "ident",
              "value" : "panic"
            }
          },
          "go-type" : 6,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 1991,
      "code" : "panic(\"reflect.FuncOf does not support more than 50 arguments\")",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ 29 ],
      "successors" : [ 52 ],
      "in-vars" : [ 49, 19, 22, 23, 25, 29, 18, 21, 17, 24 ],
      "exit" : false,
      "out-vars" : [ 18, 21, 19, 24, 25, 29, 49, 17, 22, 23 ],
      "decl-vars" : [ ],
      "line-start" : 1993,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "tflag",
            "variable" : 57
          },
          "go-type" : 52,
          "kind" : "expression",
          "target" : {
            "go-type" : 94,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "ft",
              "variable" : 29
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "go-type" : 52,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "0"
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 1993,
      "code" : "ft.tflag = 0",
      "entry" : false,
      "use-vars" : [ 29 ]
    }, {
      "update-vars" : [ 29 ],
      "successors" : [ 53 ],
      "in-vars" : [ 24, 25, 18, 21, 19, 17, 22, 23, 29, 49 ],
      "exit" : false,
      "out-vars" : [ 22, 23, 29, 18, 21, 19, 49, 17, 24, 25 ],
      "decl-vars" : [ ],
      "line-start" : 1994,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "hash",
            "variable" : 52
          },
          "go-type" : 51,
          "kind" : "expression",
          "target" : {
            "go-type" : 94,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "ft",
              "variable" : 29
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "go-type" : 51,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "hash",
            "variable" : 49
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 1994,
      "code" : "ft.hash = hash",
      "entry" : false,
      "use-vars" : [ 49, 29 ]
    }, {
      "update-vars" : [ 29 ],
      "successors" : [ 54 ],
      "in-vars" : [ 49, 21, 19, 23, 25, 29, 18, 17, 22, 24 ],
      "exit" : false,
      "out-vars" : [ 29, 49, 21, 19, 23, 18, 22, 24, 25 ],
      "decl-vars" : [ ],
      "line-start" : 1995,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "inCount",
            "variable" : 58
          },
          "go-type" : 75,
          "kind" : "expression",
          "target" : {
            "go-type" : 94,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "ft",
              "variable" : 29
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "coerced-to" : {
            "go-type" : 75,
            "kind" : "type",
            "type" : "identifier",
            "value" : {
              "go-type" : 75,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "uint16"
            }
          },
          "go-type" : 75,
          "kind" : "expression",
          "target" : {
            "arguments" : [ {
              "go-type" : 2,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "in",
                "variable" : 17
              }
            } ],
            "ellipsis" : false,
            "function" : {
              "go-type" : 89,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Builtin",
                "kind" : "ident",
                "value" : "len"
              }
            },
            "go-type" : 8,
            "kind" : "expression",
            "type" : "call"
          },
          "type" : "cast"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 1995,
      "code" : "ft.inCount = uint16(len(in))",
      "entry" : false,
      "use-vars" : [ 17, 29 ]
    }, {
      "update-vars" : [ 29 ],
      "successors" : [ 55 ],
      "in-vars" : [ 21, 24, 25, 29, 18, 49, 19, 22, 23 ],
      "exit" : false,
      "out-vars" : [ 22, 23, 24, 25, 29, 49, 21, 19 ],
      "decl-vars" : [ ],
      "line-start" : 1996,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "outCount",
            "variable" : 59
          },
          "go-type" : 75,
          "kind" : "expression",
          "target" : {
            "go-type" : 94,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "ft",
              "variable" : 29
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "coerced-to" : {
            "go-type" : 75,
            "kind" : "type",
            "type" : "identifier",
            "value" : {
              "go-type" : 75,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "uint16"
            }
          },
          "go-type" : 75,
          "kind" : "expression",
          "target" : {
            "arguments" : [ {
              "go-type" : 2,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "out",
                "variable" : 18
              }
            } ],
            "ellipsis" : false,
            "function" : {
              "go-type" : 89,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Builtin",
                "kind" : "ident",
                "value" : "len"
              }
            },
            "go-type" : 8,
            "kind" : "expression",
            "type" : "call"
          },
          "type" : "cast"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 1996,
      "code" : "ft.outCount = uint16(len(out))",
      "entry" : false,
      "use-vars" : [ 29, 18 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 56, 58 ],
      "in-vars" : [ 49, 21, 19, 22, 23, 24, 25, 29 ],
      "exit" : false,
      "out-vars" : [ 23, 24, 25, 29, 49, 21, 22 ],
      "decl-vars" : [ ],
      "line-start" : 1997,
      "ast" : {
        "condition" : {
          "go-type" : 12,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "variadic",
            "variable" : 19
          }
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 1999,
      "code" : "if variadic {\n\tft.outCount |= 1 << 15\n}",
      "entry" : false,
      "use-vars" : [ 19 ]
    }, {
      "update-vars" : [ 29 ],
      "successors" : [ 58 ],
      "in-vars" : [ 24, 25, 29, 49, 21, 22, 23 ],
      "exit" : false,
      "out-vars" : [ 29, 49, 21, 22, 23, 24, 25 ],
      "decl-vars" : [ ],
      "line-start" : 1998,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "outCount",
            "variable" : 59
          },
          "go-type" : 75,
          "kind" : "expression",
          "target" : {
            "go-type" : 94,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "ft",
              "variable" : 29
            }
          },
          "type" : "selector"
        } ],
        "operator" : "|",
        "right" : [ {
          "go-type" : 75,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "32768"
          }
        } ],
        "type" : "assign-operator"
      },
      "assign-vars" : [ ],
      "line-end" : 1998,
      "code" : "ft.outCount |= 1 << 15",
      "entry" : false,
      "use-vars" : [ 29 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 59, 62 ],
      "in-vars" : [ 22, 24, 25, 29, 62, 49, 61, 21, 23 ],
      "exit" : false,
      "out-vars" : [ 49, 21, 22, 23, 24, 25, 29, 62 ],
      "decl-vars" : [ ],
      "line-start" : 2002,
      "ast" : {
        "condition" : {
          "go-type" : 12,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "ok",
            "variable" : 61
          }
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 2008,
      "code" : "if ts, ok := funcLookupCache.m.Load(hash); ok {\n\tfor _, t := range ts.([]*rtype) {\n\t\tif haveIdenticalUnderlyingType(&ft.rtype, t, true) {\n\t\t\treturn t\n\t\t}\n\t}\n}",
      "entry" : false,
      "use-vars" : [ 61 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 57 ],
      "in-vars" : [ 23, 24, 25, 29, 49, 21, 22 ],
      "exit" : false,
      "out-vars" : [ 22, 23, 29, 49, 61, 21, 62, 24, 25 ],
      "decl-vars" : [ 61, 62 ],
      "line-start" : 2002,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "ts"
          }
        }, {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "ok"
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 51,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "hash",
              "variable" : 49
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "Load"
            },
            "go-type" : 134,
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "m",
                "variable" : 60
              },
              "go-type" : 79,
              "kind" : "expression",
              "target" : {
                "go-type" : 76,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "funcLookupCache",
                  "variable" : 21
                }
              },
              "type" : "selector"
            },
            "type" : "selector"
          },
          "go-type" : 133,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 2002,
      "code" : "ts, ok := funcLookupCache.m.Load(hash)",
      "entry" : false,
      "use-vars" : [ 49, 21 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 60, 62 ],
      "in-vars" : [ 23, 24, 25, 29, 62, 49, 21, 22 ],
      "exit" : false,
      "out-vars" : [ 23, 25, 29, 62, 49, 21, 22, 64, 24 ],
      "decl-vars" : [ 64, 65 ],
      "line-start" : 2003,
      "ast" : {
        "is-assign" : false,
        "key" : {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "_"
          }
        },
        "kind" : "statement",
        "target" : {
          "asserted" : {
            "element" : {
              "contained" : {
                "go-type" : 49,
                "kind" : "type",
                "type" : "identifier",
                "value" : {
                  "go-type" : 49,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "rtype"
                }
              },
              "go-type" : 48,
              "kind" : "type",
              "type" : "pointer"
            },
            "go-type" : 88,
            "kind" : "type",
            "type" : "slice"
          },
          "go-type" : 88,
          "kind" : "expression",
          "target" : {
            "go-type" : 83,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "ts",
              "variable" : 62
            }
          },
          "type" : "type-assert"
        },
        "type" : "range",
        "value" : {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "t"
          }
        }
      },
      "assign-vars" : [ ],
      "line-end" : 2007,
      "code" : "for _, t := range ts.([]*rtype) {\n\tif haveIdenticalUnderlyingType(&ft.rtype, t, true) {\n\t\treturn t\n\t}\n}",
      "entry" : false,
      "use-vars" : [ 62 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 59, 61 ],
      "in-vars" : [ 29, 62, 21, 22, 24, 64, 49, 23, 25 ],
      "exit" : false,
      "out-vars" : [ 29, 64, 22, 23, 25, 62, 49, 21, 24 ],
      "decl-vars" : [ ],
      "line-start" : 2004,
      "ast" : {
        "condition" : {
          "arguments" : [ {
            "go-type" : 48,
            "kind" : "expression",
            "operator" : "&",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "rtype",
                "variable" : 63
              },
              "go-type" : 49,
              "kind" : "expression",
              "target" : {
                "go-type" : 94,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "ft",
                  "variable" : 29
                }
              },
              "type" : "selector"
            },
            "type" : "unary"
          }, {
            "go-type" : 48,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "t",
              "variable" : 64
            }
          }, {
            "go-type" : 12,
            "kind" : "constant",
            "value" : {
              "type" : "BOOL",
              "value" : "true"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 136,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "haveIdenticalUnderlyingType"
            }
          },
          "go-type" : 12,
          "kind" : "expression",
          "type" : "call"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 2006,
      "code" : "if haveIdenticalUnderlyingType(&ft.rtype, t, true) {\n\treturn t\n}",
      "entry" : false,
      "use-vars" : [ 29, 64 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 64, 21 ],
      "exit" : false,
      "out-vars" : [ 21 ],
      "decl-vars" : [ ],
      "line-start" : 2005,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 48,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "t",
            "variable" : 64
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 2005,
      "code" : "return t",
      "entry" : false,
      "use-vars" : [ 64 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 64 ],
      "in-vars" : [ 29, 49, 21, 22, 23, 24, 25 ],
      "exit" : false,
      "out-vars" : [ 22, 23, 24, 25, 29, 49, 21 ],
      "decl-vars" : [ ],
      "line-start" : 2011,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "Lock"
            },
            "go-type" : 93,
            "kind" : "expression",
            "target" : {
              "go-type" : 76,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "funcLookupCache",
                "variable" : 21
              }
            },
            "type" : "selector"
          },
          "go-type" : 6,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 2011,
      "code" : "funcLookupCache.Lock()",
      "entry" : false,
      "use-vars" : [ 21 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 65, 68 ],
      "in-vars" : [ 49, 21, 67, 25, 24, 29, 66, 22, 23 ],
      "exit" : false,
      "out-vars" : [ 25, 29, 49, 21, 67, 22, 23, 24 ],
      "decl-vars" : [ ],
      "line-start" : 2013,
      "ast" : {
        "condition" : {
          "go-type" : 12,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "ok",
            "variable" : 66
          }
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 2019,
      "code" : "if ts, ok := funcLookupCache.m.Load(hash); ok {\n\tfor _, t := range ts.([]*rtype) {\n\t\tif haveIdenticalUnderlyingType(&ft.rtype, t, true) {\n\t\t\treturn t\n\t\t}\n\t}\n}",
      "entry" : false,
      "use-vars" : [ 66 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 63 ],
      "in-vars" : [ 25, 29, 49, 21, 22, 23, 24 ],
      "exit" : false,
      "out-vars" : [ 23, 25, 66, 49, 21, 24, 29, 67, 22 ],
      "decl-vars" : [ 66, 67 ],
      "line-start" : 2013,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "ts"
          }
        }, {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "ok"
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 51,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "hash",
              "variable" : 49
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "Load"
            },
            "go-type" : 134,
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "m",
                "variable" : 60
              },
              "go-type" : 79,
              "kind" : "expression",
              "target" : {
                "go-type" : 76,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "funcLookupCache",
                  "variable" : 21
                }
              },
              "type" : "selector"
            },
            "type" : "selector"
          },
          "go-type" : 133,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 2013,
      "code" : "ts, ok := funcLookupCache.m.Load(hash)",
      "entry" : false,
      "use-vars" : [ 49, 21 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 66, 68 ],
      "in-vars" : [ 22, 23, 24, 25, 29, 49, 21, 67 ],
      "exit" : false,
      "out-vars" : [ 22, 23, 24, 25, 68, 29, 21, 67, 49 ],
      "decl-vars" : [ 68, 69 ],
      "line-start" : 2014,
      "ast" : {
        "is-assign" : false,
        "key" : {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "_"
          }
        },
        "kind" : "statement",
        "target" : {
          "asserted" : {
            "element" : {
              "contained" : {
                "go-type" : 49,
                "kind" : "type",
                "type" : "identifier",
                "value" : {
                  "go-type" : 49,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "rtype"
                }
              },
              "go-type" : 48,
              "kind" : "type",
              "type" : "pointer"
            },
            "go-type" : 88,
            "kind" : "type",
            "type" : "slice"
          },
          "go-type" : 88,
          "kind" : "expression",
          "target" : {
            "go-type" : 83,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "ts",
              "variable" : 67
            }
          },
          "type" : "type-assert"
        },
        "type" : "range",
        "value" : {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "t"
          }
        }
      },
      "assign-vars" : [ ],
      "line-end" : 2018,
      "code" : "for _, t := range ts.([]*rtype) {\n\tif haveIdenticalUnderlyingType(&ft.rtype, t, true) {\n\t\treturn t\n\t}\n}",
      "entry" : false,
      "use-vars" : [ 67 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 65, 67 ],
      "in-vars" : [ 25, 29, 49, 21, 67, 23, 24, 22, 68 ],
      "exit" : false,
      "out-vars" : [ 68, 29, 49, 67, 23, 24, 21, 22, 25 ],
      "decl-vars" : [ ],
      "line-start" : 2015,
      "ast" : {
        "condition" : {
          "arguments" : [ {
            "go-type" : 48,
            "kind" : "expression",
            "operator" : "&",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "rtype",
                "variable" : 63
              },
              "go-type" : 49,
              "kind" : "expression",
              "target" : {
                "go-type" : 94,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "ft",
                  "variable" : 29
                }
              },
              "type" : "selector"
            },
            "type" : "unary"
          }, {
            "go-type" : 48,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "t",
              "variable" : 68
            }
          }, {
            "go-type" : 12,
            "kind" : "constant",
            "value" : {
              "type" : "BOOL",
              "value" : "true"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 136,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "haveIdenticalUnderlyingType"
            }
          },
          "go-type" : 12,
          "kind" : "expression",
          "type" : "call"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 2017,
      "code" : "if haveIdenticalUnderlyingType(&ft.rtype, t, true) {\n\treturn t\n}",
      "entry" : false,
      "use-vars" : [ 68, 29 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 21, 68 ],
      "exit" : false,
      "out-vars" : [ 21 ],
      "decl-vars" : [ ],
      "line-start" : 2016,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 48,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "t",
            "variable" : 68
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 2016,
      "code" : "return t",
      "entry" : false,
      "use-vars" : [ 68 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 69 ],
      "in-vars" : [ 24, 25, 29, 49, 21, 22, 23 ],
      "exit" : false,
      "out-vars" : [ 29, 70, 21 ],
      "decl-vars" : [ 70 ],
      "line-start" : 2021,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "addToCache"
          }
        } ],
        "right" : [ {
          "body" : [ {
            "kind" : "statement",
            "target" : {
              "kind" : "decl",
              "specs" : [ {
                "comments" : [ ],
                "declared-type" : {
                  "element" : {
                    "contained" : {
                      "go-type" : 49,
                      "kind" : "type",
                      "type" : "identifier",
                      "value" : {
                        "go-type" : 49,
                        "ident-kind" : "TypeName",
                        "kind" : "ident",
                        "value" : "rtype"
                      }
                    },
                    "go-type" : 48,
                    "kind" : "type",
                    "type" : "pointer"
                  },
                  "go-type" : 88,
                  "kind" : "type",
                  "type" : "slice"
                },
                "kind" : "spec",
                "names" : [ {
                  "ident-kind" : "NoKind",
                  "kind" : "ident",
                  "value" : "rts"
                } ],
                "type" : "var",
                "values" : [ ]
              } ],
              "type" : "var"
            },
            "type" : "declaration"
          }, {
            "body" : [ {
              "kind" : "statement",
              "left" : [ {
                "go-type" : 88,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "rts",
                  "variable" : 24
                }
              } ],
              "right" : [ {
                "asserted" : {
                  "element" : {
                    "contained" : {
                      "go-type" : 49,
                      "kind" : "type",
                      "type" : "identifier",
                      "value" : {
                        "go-type" : 49,
                        "ident-kind" : "TypeName",
                        "kind" : "ident",
                        "value" : "rtype"
                      }
                    },
                    "go-type" : 48,
                    "kind" : "type",
                    "type" : "pointer"
                  },
                  "go-type" : 88,
                  "kind" : "type",
                  "type" : "slice"
                },
                "go-type" : 88,
                "kind" : "expression",
                "target" : {
                  "go-type" : 83,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "rti",
                    "variable" : 25
                  }
                },
                "type" : "type-assert"
              } ],
              "type" : "assign"
            } ],
            "condition" : {
              "go-type" : 12,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "ok",
                "variable" : 22
              }
            },
            "else" : null,
            "init" : {
              "kind" : "statement",
              "left" : [ {
                "go-type" : -1,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "NoKind",
                  "kind" : "ident",
                  "value" : "rti"
                }
              }, {
                "go-type" : -1,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "NoKind",
                  "kind" : "ident",
                  "value" : "ok"
                }
              } ],
              "right" : [ {
                "arguments" : [ {
                  "go-type" : 51,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "hash",
                    "variable" : 49
                  }
                } ],
                "ellipsis" : false,
                "function" : {
                  "field" : {
                    "ident-kind" : "Func",
                    "kind" : "ident",
                    "value" : "Load"
                  },
                  "go-type" : 134,
                  "kind" : "expression",
                  "target" : {
                    "field" : {
                      "ident-kind" : "Var",
                      "kind" : "ident",
                      "value" : "m",
                      "variable" : 60
                    },
                    "go-type" : 79,
                    "kind" : "expression",
                    "target" : {
                      "go-type" : 76,
                      "kind" : "expression",
                      "type" : "identifier",
                      "value" : {
                        "ident-kind" : "Var",
                        "kind" : "ident",
                        "value" : "funcLookupCache",
                        "variable" : 21
                      }
                    },
                    "type" : "selector"
                  },
                  "type" : "selector"
                },
                "go-type" : 133,
                "kind" : "expression",
                "type" : "call"
              } ],
              "type" : "define"
            },
            "kind" : "statement",
            "type" : "if"
          }, {
            "kind" : "statement",
            "type" : "expression",
            "value" : {
              "arguments" : [ {
                "go-type" : 51,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "hash",
                  "variable" : 49
                }
              }, {
                "arguments" : [ {
                  "go-type" : 88,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "rts",
                    "variable" : 24
                  }
                }, {
                  "go-type" : 48,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "tt",
                    "variable" : 23
                  }
                } ],
                "ellipsis" : false,
                "function" : {
                  "go-type" : 123,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Builtin",
                    "kind" : "ident",
                    "value" : "append"
                  }
                },
                "go-type" : 88,
                "kind" : "expression",
                "type" : "call"
              } ],
              "ellipsis" : false,
              "function" : {
                "field" : {
                  "ident-kind" : "Func",
                  "kind" : "ident",
                  "value" : "Store"
                },
                "go-type" : 140,
                "kind" : "expression",
                "target" : {
                  "field" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "m",
                    "variable" : 60
                  },
                  "go-type" : 79,
                  "kind" : "expression",
                  "target" : {
                    "go-type" : 76,
                    "kind" : "expression",
                    "type" : "identifier",
                    "value" : {
                      "ident-kind" : "Var",
                      "kind" : "ident",
                      "value" : "funcLookupCache",
                      "variable" : 21
                    }
                  },
                  "type" : "selector"
                },
                "type" : "selector"
              },
              "go-type" : 6,
              "kind" : "expression",
              "type" : "call"
            }
          }, {
            "kind" : "statement",
            "type" : "return",
            "values" : [ {
              "go-type" : 48,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "tt",
                "variable" : 23
              }
            } ]
          } ],
          "go-type" : 138,
          "kind" : "literal",
          "params" : [ {
            "declared-type" : {
              "contained" : {
                "go-type" : 49,
                "kind" : "type",
                "type" : "identifier",
                "value" : {
                  "go-type" : 49,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "rtype"
                }
              },
              "go-type" : 48,
              "kind" : "type",
              "type" : "pointer"
            },
            "kind" : "field",
            "names" : [ {
              "ident-kind" : "NoKind",
              "kind" : "ident",
              "value" : "tt"
            } ],
            "tag" : null
          } ],
          "results" : [ {
            "declared-type" : {
              "go-type" : 3,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 3,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "Type"
              }
            },
            "kind" : "field",
            "names" : [ ],
            "tag" : null
          } ],
          "type" : "function",
          "variadic" : null
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 2028,
      "code" : "addToCache := func(tt *rtype) Type {\n\tvar rts []*rtype\n\tif rti, ok := funcLookupCache.m.Load(hash); ok {\n\t\trts = rti.([]*rtype)\n\t}\n\tfuncLookupCache.m.Store(hash, append(rts, tt))\n\treturn tt\n}",
      "entry" : false,
      "use-vars" : [ 21, 49, 23, 24, 22, 25 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 70 ],
      "in-vars" : [ 29, 70, 21 ],
      "exit" : false,
      "out-vars" : [ 29, 70, 21, 71 ],
      "decl-vars" : [ 71 ],
      "line-start" : 2031,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "str"
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 94,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "ft",
              "variable" : 29
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 142,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "funcStr"
            }
          },
          "go-type" : 24,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 2031,
      "code" : "str := funcStr(ft)",
      "entry" : false,
      "use-vars" : [ 29 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 71, 73 ],
      "in-vars" : [ 29, 70, 21, 71 ],
      "exit" : false,
      "out-vars" : [ 29, 70, 72, 21, 71 ],
      "decl-vars" : [ 72, 73 ],
      "line-start" : 2032,
      "ast" : {
        "is-assign" : false,
        "key" : {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "_"
          }
        },
        "kind" : "statement",
        "target" : {
          "arguments" : [ {
            "go-type" : 24,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "str",
              "variable" : 71
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 144,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "typesByString"
            }
          },
          "go-type" : 88,
          "kind" : "expression",
          "type" : "call"
        },
        "type" : "range",
        "value" : {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "tt"
          }
        }
      },
      "assign-vars" : [ ],
      "line-end" : 2036,
      "code" : "for _, tt := range typesByString(str) {\n\tif haveIdenticalUnderlyingType(&ft.rtype, tt, true) {\n\t\treturn addToCache(tt)\n\t}\n}",
      "entry" : false,
      "use-vars" : [ 71 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 70, 72 ],
      "in-vars" : [ 29, 70, 72, 21, 71 ],
      "exit" : false,
      "out-vars" : [ 29, 70, 72, 21, 71 ],
      "decl-vars" : [ ],
      "line-start" : 2033,
      "ast" : {
        "condition" : {
          "arguments" : [ {
            "go-type" : 48,
            "kind" : "expression",
            "operator" : "&",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "rtype",
                "variable" : 63
              },
              "go-type" : 49,
              "kind" : "expression",
              "target" : {
                "go-type" : 94,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "ft",
                  "variable" : 29
                }
              },
              "type" : "selector"
            },
            "type" : "unary"
          }, {
            "go-type" : 48,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "tt",
              "variable" : 72
            }
          }, {
            "go-type" : 12,
            "kind" : "constant",
            "value" : {
              "type" : "BOOL",
              "value" : "true"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 136,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "haveIdenticalUnderlyingType"
            }
          },
          "go-type" : 12,
          "kind" : "expression",
          "type" : "call"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 2035,
      "code" : "if haveIdenticalUnderlyingType(&ft.rtype, tt, true) {\n\treturn addToCache(tt)\n}",
      "entry" : false,
      "use-vars" : [ 29, 72 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 70, 72, 21 ],
      "exit" : false,
      "out-vars" : [ 21 ],
      "decl-vars" : [ ],
      "line-start" : 2034,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "arguments" : [ {
            "go-type" : 48,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "tt",
              "variable" : 72
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 138,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "addToCache",
              "variable" : 70
            }
          },
          "go-type" : 3,
          "kind" : "expression",
          "type" : "call"
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 2034,
      "code" : "return addToCache(tt)",
      "entry" : false,
      "use-vars" : [ 70, 72 ]
    }, {
      "update-vars" : [ 29 ],
      "successors" : [ 74 ],
      "in-vars" : [ 29, 70, 21, 71 ],
      "exit" : false,
      "out-vars" : [ 29, 70, 21 ],
      "decl-vars" : [ ],
      "line-start" : 2039,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "str",
            "variable" : 74
          },
          "go-type" : 59,
          "kind" : "expression",
          "target" : {
            "go-type" : 94,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "ft",
              "variable" : 29
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "arguments" : [ {
            "arguments" : [ {
              "go-type" : 24,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "str",
                "variable" : 71
              }
            }, {
              "go-type" : 24,
              "kind" : "constant",
              "value" : {
                "type" : "STRING",
                "value" : ""
              }
            }, {
              "go-type" : 12,
              "kind" : "constant",
              "value" : {
                "type" : "BOOL",
                "value" : "false"
              }
            } ],
            "ellipsis" : false,
            "function" : {
              "go-type" : 151,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Func",
                "kind" : "ident",
                "value" : "newName"
              }
            },
            "go-type" : 148,
            "kind" : "expression",
            "type" : "call"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 146,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "resolveReflectName"
            }
          },
          "go-type" : 59,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 2039,
      "code" : "ft.str = resolveReflectName(newName(str, \"\", false))",
      "entry" : false,
      "use-vars" : [ 71, 29 ]
    }, {
      "update-vars" : [ 29 ],
      "successors" : [ 75 ],
      "in-vars" : [ 29, 70, 21 ],
      "exit" : false,
      "out-vars" : [ 29, 70, 21 ],
      "decl-vars" : [ ],
      "line-start" : 2040,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "ptrToThis",
            "variable" : 75
          },
          "go-type" : 61,
          "kind" : "expression",
          "target" : {
            "go-type" : 94,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "ft",
              "variable" : 29
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "go-type" : 61,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "0"
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 2040,
      "code" : "ft.ptrToThis = 0",
      "entry" : false,
      "use-vars" : [ 29 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 29, 70, 21 ],
      "exit" : false,
      "out-vars" : [ 21 ],
      "decl-vars" : [ ],
      "line-start" : 2041,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "arguments" : [ {
            "go-type" : 48,
            "kind" : "expression",
            "operator" : "&",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "rtype",
                "variable" : 63
              },
              "go-type" : 49,
              "kind" : "expression",
              "target" : {
                "go-type" : 94,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "ft",
                  "variable" : 29
                }
              },
              "type" : "selector"
            },
            "type" : "unary"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 138,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "addToCache",
              "variable" : 70
            }
          },
          "go-type" : 3,
          "kind" : "expression",
          "type" : "call"
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 2041,
      "code" : "return addToCache(&ft.rtype)",
      "entry" : false,
      "use-vars" : [ 29, 70 ]
    } ],
    "code" : "// FuncOf returns the function type with the given argument and result types.\n// For example if k represents int and e represents string,\n// FuncOf([]Type{k}, []Type{e}, false) represents func(int) string.\n//\n// The variadic argument controls whether the function is variadic. FuncOf\n// panics if the in[len(in)-1] does not represent a slice and variadic is\n// true.\nfunc FuncOf(in, out []Type, variadic bool) Type {\n\tif variadic && (len(in) == 0 || in[len(in)-1].Kind() != Slice) {\n\t\tpanic(\"reflect.FuncOf: last arg of variadic func must be slice\")\n\t}\n\n\t// Make a func type.\n\tvar ifunc interface{} = (func())(nil)\n\tprototype := *(**funcType)(unsafe.Pointer(&ifunc))\n\tn := len(in) + len(out)\n\n\tvar ft *funcType\n\tvar args []*rtype\n\tswitch {\n\tcase n <= 4:\n\t\tfixed := new(funcTypeFixed4)\n\t\targs = fixed.args[:0:len(fixed.args)]\n\t\tft = &fixed.funcType\n\tcase n <= 8:\n\t\tfixed := new(funcTypeFixed8)\n\t\targs = fixed.args[:0:len(fixed.args)]\n\t\tft = &fixed.funcType\n\tcase n <= 16:\n\t\tfixed := new(funcTypeFixed16)\n\t\targs = fixed.args[:0:len(fixed.args)]\n\t\tft = &fixed.funcType\n\tcase n <= 32:\n\t\tfixed := new(funcTypeFixed32)\n\t\targs = fixed.args[:0:len(fixed.args)]\n\t\tft = &fixed.funcType\n\tcase n <= 64:\n\t\tfixed := new(funcTypeFixed64)\n\t\targs = fixed.args[:0:len(fixed.args)]\n\t\tft = &fixed.funcType\n\tcase n <= 128:\n\t\tfixed := new(funcTypeFixed128)\n\t\targs = fixed.args[:0:len(fixed.args)]\n\t\tft = &fixed.funcType\n\tdefault:\n\t\tpanic(\"reflect.FuncOf: too many arguments\")\n\t}\n\t*ft = *prototype\n\n\t// Build a hash and minimally populate ft.\n\tvar hash uint32\n\tfor _, in := range in {\n\t\tt := in.(*rtype)\n\t\targs = append(args, t)\n\t\thash = fnv1(hash, byte(t.hash>>24), byte(t.hash>>16), byte(t.hash>>8), byte(t.hash))\n\t}\n\tif variadic {\n\t\thash = fnv1(hash, 'v')\n\t}\n\thash = fnv1(hash, '.')\n\tfor _, out := range out {\n\t\tt := out.(*rtype)\n\t\targs = append(args, t)\n\t\thash = fnv1(hash, byte(t.hash>>24), byte(t.hash>>16), byte(t.hash>>8), byte(t.hash))\n\t}\n\tif len(args) > 50 {\n\t\tpanic(\"reflect.FuncOf does not support more than 50 arguments\")\n\t}\n\tft.tflag = 0\n\tft.hash = hash\n\tft.inCount = uint16(len(in))\n\tft.outCount = uint16(len(out))\n\tif variadic {\n\t\tft.outCount |= 1 << 15\n\t}\n\n\tif ts, ok := funcLookupCache.m.Load(hash); ok {\n\t\tfor _, t := range ts.([]*rtype) {\n\t\t\tif haveIdenticalUnderlyingType(&ft.rtype, t, true) {\n\t\t\t\treturn t\n\t\t\t}\n\t\t}\n\t}\n\n\tfuncLookupCache.Lock()\n\tdefer funcLookupCache.Unlock()\n\tif ts, ok := funcLookupCache.m.Load(hash); ok {\n\t\tfor _, t := range ts.([]*rtype) {\n\t\t\tif haveIdenticalUnderlyingType(&ft.rtype, t, true) {\n\t\t\t\treturn t\n\t\t\t}\n\t\t}\n\t}\n\n\taddToCache := func(tt *rtype) Type {\n\t\tvar rts []*rtype\n\t\tif rti, ok := funcLookupCache.m.Load(hash); ok {\n\t\t\trts = rti.([]*rtype)\n\t\t}\n\t\tfuncLookupCache.m.Store(hash, append(rts, tt))\n\t\treturn tt\n\t}\n\n\tstr := funcStr(ft)\n\tfor _, tt := range typesByString(str) {\n\t\tif haveIdenticalUnderlyingType(&ft.rtype, tt, true) {\n\t\t\treturn addToCache(tt)\n\t\t}\n\t}\n\n\tft.str = resolveReflectName(newName(str, \"\", false))\n\tft.ptrToThis = 0\n\treturn addToCache(&ft.rtype)\n}",
    "defines" : [ 0 ],
    "functions" : [ {
      "name" : "FuncOf",
      "package" : 0,
      "type" : 0,
      "exported" : true
    }, {
      "name" : "Kind",
      "package" : 0,
      "type" : 38,
      "exported" : true
    }, {
      "name" : "fnv1",
      "package" : 0,
      "type" : 126,
      "exported" : false
    }, {
      "name" : "Load",
      "package" : 2,
      "type" : 134,
      "exported" : true
    }, {
      "name" : "haveIdenticalUnderlyingType",
      "package" : 0,
      "type" : 136,
      "exported" : false
    }, {
      "name" : "Lock",
      "package" : 2,
      "type" : 93,
      "exported" : true
    }, {
      "name" : "Store",
      "package" : 2,
      "type" : 140,
      "exported" : true
    }, {
      "name" : "funcStr",
      "package" : 0,
      "type" : 142,
      "exported" : false
    }, {
      "name" : "typesByString",
      "package" : 0,
      "type" : 144,
      "exported" : false
    }, {
      "name" : "resolveReflectName",
      "package" : 0,
      "type" : 146,
      "exported" : false
    }, {
      "name" : "newName",
      "package" : 0,
      "type" : 151,
      "exported" : false
    } ],
    "line-end" : 2042,
    "line-start" : 1932,
    "names" : [ "FuncOf" ],
    "package" : 0,
    "packages" : [ {
      "name" : "reflect",
      "path" : "reflect"
    }, {
      "name" : "unsafe",
      "path" : "unsafe"
    }, {
      "name" : "sync",
      "path" : "sync"
    }, {
      "name" : "atomic",
      "path" : "sync/atomic"
    } ],
    "params" : [ 17, 18, 19 ],
    "receivers" : [ ],
    "results" : [ 20 ],
    "type" : "function",
    "types" : [ {
      "name" : "func(in []reflect.Type, out []reflect.Type, variadic bool) reflect.Type",
      "params" : 1,
      "recv" : -1,
      "results" : 18,
      "type" : "Signature",
      "underlying" : 0,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "in",
        "type" : 2
      }, {
        "name" : "out",
        "type" : 2
      }, {
        "name" : "variadic",
        "type" : 12
      } ],
      "name" : "(in []reflect.Type, out []reflect.Type, variadic bool)",
      "type" : "Tuple",
      "underlying" : 1
    }, {
      "elem" : 3,
      "name" : "[]reflect.Type",
      "type" : "Slice",
      "underlying" : 2
    }, {
      "local-name" : "Type",
      "name" : "reflect.Type",
      "package" : 0,
      "type" : "Named",
      "underlying" : 4
    }, {
      "methods" : [ {
        "name" : "Align",
        "type" : 5
      }, {
        "name" : "AssignableTo",
        "type" : 9
      }, {
        "name" : "Bits",
        "type" : 5
      }, {
        "name" : "ChanDir",
        "type" : 13
      }, {
        "name" : "Comparable",
        "type" : 16
      }, {
        "name" : "ConvertibleTo",
        "type" : 9
      }, {
        "name" : "Elem",
        "type" : 17
      }, {
        "name" : "Field",
        "type" : 19
      }, {
        "name" : "FieldAlign",
        "type" : 5
      }, {
        "name" : "FieldByIndex",
        "type" : 28
      }, {
        "name" : "FieldByName",
        "type" : 30
      }, {
        "name" : "FieldByNameFunc",
        "type" : 33
      }, {
        "name" : "Implements",
        "type" : 9
      }, {
        "name" : "In",
        "type" : 37
      }, {
        "name" : "IsVariadic",
        "type" : 16
      }, {
        "name" : "Key",
        "type" : 17
      }, {
        "name" : "Kind",
        "type" : 38
      }, {
        "name" : "Len",
        "type" : 5
      }, {
        "name" : "Method",
        "type" : 42
      }, {
        "name" : "MethodByName",
        "type" : 63
      }, {
        "name" : "Name",
        "type" : 65
      }, {
        "name" : "NumField",
        "type" : 5
      }, {
        "name" : "NumIn",
        "type" : 5
      }, {
        "name" : "NumMethod",
        "type" : 5
      }, {
        "name" : "NumOut",
        "type" : 5
      }, {
        "name" : "Out",
        "type" : 37
      }, {
        "name" : "PkgPath",
        "type" : 65
      }, {
        "name" : "Size",
        "type" : 66
      }, {
        "name" : "String",
        "type" : 65
      }, {
        "name" : "common",
        "type" : 68
      }, {
        "name" : "uncommon",
        "type" : 70
      } ],
      "name" : "interface{Align() int; AssignableTo(u reflect.Type) bool; Bits() int; ChanDir() reflect.ChanDir; Comparable() bool; ConvertibleTo(u reflect.Type) bool; Elem() reflect.Type; Field(i int) reflect.StructField; FieldAlign() int; FieldByIndex(index []int) reflect.StructField; FieldByName(name string) (reflect.StructField, bool); FieldByNameFunc(match func(string) bool) (reflect.StructField, bool); Implements(u reflect.Type) bool; In(i int) reflect.Type; IsVariadic() bool; Key() reflect.Type; Kind() reflect.Kind; Len() int; Method(int) reflect.Method; MethodByName(string) (reflect.Method, bool); Name() string; NumField() int; NumIn() int; NumMethod() int; NumOut() int; Out(i int) reflect.Type; PkgPath() string; Size() uintptr; String() string; common() *reflect.rtype; uncommon() *reflect.uncommonType}",
      "type" : "Interface",
      "underlying" : 4
    }, {
      "name" : "func() int",
      "params" : 6,
      "recv" : 0,
      "results" : 7,
      "type" : "Signature",
      "underlying" : 5,
      "variadic" : false
    }, {
      "fields" : [ ],
      "name" : "()",
      "type" : "Tuple",
      "underlying" : 6
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 8
      } ],
      "name" : "(int)",
      "type" : "Tuple",
      "underlying" : 7
    }, {
      "name" : "int",
      "type" : "Basic",
      "underlying" : 8
    }, {
      "name" : "func(u reflect.Type) bool",
      "params" : 10,
      "recv" : 1,
      "results" : 11,
      "type" : "Signature",
      "underlying" : 9,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "u",
        "type" : 3
      } ],
      "name" : "(u reflect.Type)",
      "type" : "Tuple",
      "underlying" : 10
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 12
      } ],
      "name" : "(bool)",
      "type" : "Tuple",
      "underlying" : 11
    }, {
      "name" : "bool",
      "type" : "Basic",
      "underlying" : 12
    }, {
      "name" : "func() reflect.ChanDir",
      "params" : 6,
      "recv" : 2,
      "results" : 14,
      "type" : "Signature",
      "underlying" : 13,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 15
      } ],
      "name" : "(reflect.ChanDir)",
      "type" : "Tuple",
      "underlying" : 14
    }, {
      "local-name" : "ChanDir",
      "name" : "reflect.ChanDir",
      "package" : 0,
      "type" : "Named",
      "underlying" : 8
    }, {
      "name" : "func() bool",
      "params" : 6,
      "recv" : 3,
      "results" : 11,
      "type" : "Signature",
      "underlying" : 16,
      "variadic" : false
    }, {
      "name" : "func() reflect.Type",
      "params" : 6,
      "recv" : 4,
      "results" : 18,
      "type" : "Signature",
      "underlying" : 17,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 3
      } ],
      "name" : "(reflect.Type)",
      "type" : "Tuple",
      "underlying" : 18
    }, {
      "name" : "func(i int) reflect.StructField",
      "params" : 20,
      "recv" : 5,
      "results" : 21,
      "type" : "Signature",
      "underlying" : 19,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "i",
        "type" : 8
      } ],
      "name" : "(i int)",
      "type" : "Tuple",
      "underlying" : 20
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 22
      } ],
      "name" : "(reflect.StructField)",
      "type" : "Tuple",
      "underlying" : 21
    }, {
      "local-name" : "StructField",
      "name" : "reflect.StructField",
      "package" : 0,
      "type" : "Named",
      "underlying" : 23
    }, {
      "fields" : [ {
        "name" : "Name",
        "type" : 24
      }, {
        "name" : "PkgPath",
        "type" : 24
      }, {
        "name" : "Type",
        "type" : 3
      }, {
        "name" : "Tag",
        "type" : 25
      }, {
        "name" : "Offset",
        "type" : 26
      }, {
        "name" : "Index",
        "type" : 27
      }, {
        "name" : "Anonymous",
        "type" : 12
      } ],
      "name" : "struct{Name string; PkgPath string; Type reflect.Type; Tag reflect.StructTag; Offset uintptr; Index []int; Anonymous bool}",
      "type" : "Struct",
      "underlying" : 23
    }, {
      "name" : "string",
      "type" : "Basic",
      "underlying" : 24
    }, {
      "local-name" : "StructTag",
      "name" : "reflect.StructTag",
      "package" : 0,
      "type" : "Named",
      "underlying" : 24
    }, {
      "name" : "uintptr",
      "type" : "Basic",
      "underlying" : 26
    }, {
      "elem" : 8,
      "name" : "[]int",
      "type" : "Slice",
      "underlying" : 27
    }, {
      "name" : "func(index []int) reflect.StructField",
      "params" : 29,
      "recv" : 6,
      "results" : 21,
      "type" : "Signature",
      "underlying" : 28,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "index",
        "type" : 27
      } ],
      "name" : "(index []int)",
      "type" : "Tuple",
      "underlying" : 29
    }, {
      "name" : "func(name string) (reflect.StructField, bool)",
      "params" : 31,
      "recv" : 7,
      "results" : 32,
      "type" : "Signature",
      "underlying" : 30,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "name",
        "type" : 24
      } ],
      "name" : "(name string)",
      "type" : "Tuple",
      "underlying" : 31
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 22
      }, {
        "name" : "",
        "type" : 12
      } ],
      "name" : "(reflect.StructField, bool)",
      "type" : "Tuple",
      "underlying" : 32
    }, {
      "name" : "func(match func(string) bool) (reflect.StructField, bool)",
      "params" : 34,
      "recv" : 8,
      "results" : 32,
      "type" : "Signature",
      "underlying" : 33,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "match",
        "type" : 35
      } ],
      "name" : "(match func(string) bool)",
      "type" : "Tuple",
      "underlying" : 34
    }, {
      "name" : "func(string) bool",
      "params" : 36,
      "recv" : -1,
      "results" : 11,
      "type" : "Signature",
      "underlying" : 35,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 24
      } ],
      "name" : "(string)",
      "type" : "Tuple",
      "underlying" : 36
    }, {
      "name" : "func(i int) reflect.Type",
      "params" : 20,
      "recv" : 9,
      "results" : 18,
      "type" : "Signature",
      "underlying" : 37,
      "variadic" : false
    }, {
      "name" : "func() reflect.Kind",
      "params" : 6,
      "recv" : 10,
      "results" : 39,
      "type" : "Signature",
      "underlying" : 38,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 40
      } ],
      "name" : "(reflect.Kind)",
      "type" : "Tuple",
      "underlying" : 39
    }, {
      "local-name" : "Kind",
      "name" : "reflect.Kind",
      "package" : 0,
      "type" : "Named",
      "underlying" : 41
    }, {
      "name" : "uint",
      "type" : "Basic",
      "underlying" : 41
    }, {
      "name" : "func(int) reflect.Method",
      "params" : 7,
      "recv" : 11,
      "results" : 43,
      "type" : "Signature",
      "underlying" : 42,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 44
      } ],
      "name" : "(reflect.Method)",
      "type" : "Tuple",
      "underlying" : 43
    }, {
      "local-name" : "Method",
      "name" : "reflect.Method",
      "package" : 0,
      "type" : "Named",
      "underlying" : 45
    }, {
      "fields" : [ {
        "name" : "Name",
        "type" : 24
      }, {
        "name" : "PkgPath",
        "type" : 24
      }, {
        "name" : "Type",
        "type" : 3
      }, {
        "name" : "Func",
        "type" : 46
      }, {
        "name" : "Index",
        "type" : 8
      } ],
      "name" : "struct{Name string; PkgPath string; Type reflect.Type; Func reflect.Value; Index int}",
      "type" : "Struct",
      "underlying" : 45
    }, {
      "local-name" : "Value",
      "name" : "reflect.Value",
      "package" : 0,
      "type" : "Named",
      "underlying" : 47
    }, {
      "fields" : [ {
        "name" : "typ",
        "type" : 48
      }, {
        "name" : "ptr",
        "type" : 56
      }, {
        "name" : "flag",
        "type" : 62
      } ],
      "name" : "struct{typ *reflect.rtype; ptr unsafe.Pointer; reflect.flag}",
      "type" : "Struct",
      "underlying" : 47
    }, {
      "elem" : 49,
      "name" : "*reflect.rtype",
      "type" : "Pointer",
      "underlying" : 48
    }, {
      "local-name" : "rtype",
      "name" : "reflect.rtype",
      "package" : 0,
      "type" : "Named",
      "underlying" : 50
    }, {
      "fields" : [ {
        "name" : "size",
        "type" : 26
      }, {
        "name" : "ptrdata",
        "type" : 26
      }, {
        "name" : "hash",
        "type" : 51
      }, {
        "name" : "tflag",
        "type" : 52
      }, {
        "name" : "align",
        "type" : 53
      }, {
        "name" : "fieldAlign",
        "type" : 53
      }, {
        "name" : "kind",
        "type" : 53
      }, {
        "name" : "equal",
        "type" : 54
      }, {
        "name" : "gcdata",
        "type" : 57
      }, {
        "name" : "str",
        "type" : 59
      }, {
        "name" : "ptrToThis",
        "type" : 61
      } ],
      "name" : "struct{size uintptr; ptrdata uintptr; hash uint32; tflag reflect.tflag; align uint8; fieldAlign uint8; kind uint8; equal func(unsafe.Pointer, unsafe.Pointer) bool; gcdata *byte; str reflect.nameOff; ptrToThis reflect.typeOff}",
      "type" : "Struct",
      "underlying" : 50
    }, {
      "name" : "uint32",
      "type" : "Basic",
      "underlying" : 51
    }, {
      "local-name" : "tflag",
      "name" : "reflect.tflag",
      "package" : 0,
      "type" : "Named",
      "underlying" : 53
    }, {
      "name" : "uint8",
      "type" : "Basic",
      "underlying" : 53
    }, {
      "name" : "func(unsafe.Pointer, unsafe.Pointer) bool",
      "params" : 55,
      "recv" : -1,
      "results" : 11,
      "type" : "Signature",
      "underlying" : 54,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 56
      }, {
        "name" : "",
        "type" : 56
      } ],
      "name" : "(unsafe.Pointer, unsafe.Pointer)",
      "type" : "Tuple",
      "underlying" : 55
    }, {
      "local-name" : "Pointer",
      "name" : "unsafe.Pointer",
      "package" : 1,
      "type" : "Basic",
      "underlying" : 56
    }, {
      "elem" : 58,
      "name" : "*byte",
      "type" : "Pointer",
      "underlying" : 57
    }, {
      "name" : "byte",
      "type" : "Basic",
      "underlying" : 58
    }, {
      "local-name" : "nameOff",
      "name" : "reflect.nameOff",
      "package" : 0,
      "type" : "Named",
      "underlying" : 60
    }, {
      "name" : "int32",
      "type" : "Basic",
      "underlying" : 60
    }, {
      "local-name" : "typeOff",
      "name" : "reflect.typeOff",
      "package" : 0,
      "type" : "Named",
      "underlying" : 60
    }, {
      "local-name" : "flag",
      "name" : "reflect.flag",
      "package" : 0,
      "type" : "Named",
      "underlying" : 26
    }, {
      "name" : "func(string) (reflect.Method, bool)",
      "params" : 36,
      "recv" : 12,
      "results" : 64,
      "type" : "Signature",
      "underlying" : 63,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 44
      }, {
        "name" : "",
        "type" : 12
      } ],
      "name" : "(reflect.Method, bool)",
      "type" : "Tuple",
      "underlying" : 64
    }, {
      "name" : "func() string",
      "params" : 6,
      "recv" : 13,
      "results" : 36,
      "type" : "Signature",
      "underlying" : 65,
      "variadic" : false
    }, {
      "name" : "func() uintptr",
      "params" : 6,
      "recv" : 14,
      "results" : 67,
      "type" : "Signature",
      "underlying" : 66,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 26
      } ],
      "name" : "(uintptr)",
      "type" : "Tuple",
      "underlying" : 67
    }, {
      "name" : "func() *reflect.rtype",
      "params" : 6,
      "recv" : 15,
      "results" : 69,
      "type" : "Signature",
      "underlying" : 68,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 48
      } ],
      "name" : "(*reflect.rtype)",
      "type" : "Tuple",
      "underlying" : 69
    }, {
      "name" : "func() *reflect.uncommonType",
      "params" : 6,
      "recv" : 16,
      "results" : 71,
      "type" : "Signature",
      "underlying" : 70,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 72
      } ],
      "name" : "(*reflect.uncommonType)",
      "type" : "Tuple",
      "underlying" : 71
    }, {
      "elem" : 73,
      "name" : "*reflect.uncommonType",
      "type" : "Pointer",
      "underlying" : 72
    }, {
      "local-name" : "uncommonType",
      "name" : "reflect.uncommonType",
      "package" : 0,
      "type" : "Named",
      "underlying" : 74
    }, {
      "fields" : [ {
        "name" : "pkgPath",
        "type" : 59
      }, {
        "name" : "mcount",
        "type" : 75
      }, {
        "name" : "xcount",
        "type" : 75
      }, {
        "name" : "moff",
        "type" : 51
      }, {
        "name" : "_",
        "type" : 51
      } ],
      "name" : "struct{pkgPath reflect.nameOff; mcount uint16; xcount uint16; moff uint32; _ uint32}",
      "type" : "Struct",
      "underlying" : 74
    }, {
      "name" : "uint16",
      "type" : "Basic",
      "underlying" : 75
    }, {
      "fields" : [ {
        "name" : "Mutex",
        "type" : 77
      }, {
        "name" : "m",
        "type" : 79
      } ],
      "name" : "struct{sync.Mutex; m sync.Map}",
      "type" : "Struct",
      "underlying" : 76
    }, {
      "local-name" : "Mutex",
      "name" : "sync.Mutex",
      "package" : 2,
      "type" : "Named",
      "underlying" : 78
    }, {
      "fields" : [ {
        "name" : "state",
        "type" : 60
      }, {
        "name" : "sema",
        "type" : 51
      } ],
      "name" : "struct{state int32; sema uint32}",
      "type" : "Struct",
      "underlying" : 78
    }, {
      "local-name" : "Map",
      "name" : "sync.Map",
      "package" : 2,
      "type" : "Named",
      "underlying" : 80
    }, {
      "fields" : [ {
        "name" : "mu",
        "type" : 77
      }, {
        "name" : "read",
        "type" : 81
      }, {
        "name" : "dirty",
        "type" : 84
      }, {
        "name" : "misses",
        "type" : 8
      } ],
      "name" : "struct{mu sync.Mutex; read sync/atomic.Value; dirty map[interface{}]*sync.entry; misses int}",
      "type" : "Struct",
      "underlying" : 80
    }, {
      "local-name" : "Value",
      "name" : "sync/atomic.Value",
      "package" : 3,
      "type" : "Named",
      "underlying" : 82
    }, {
      "fields" : [ {
        "name" : "v",
        "type" : 83
      } ],
      "name" : "struct{v interface{}}",
      "type" : "Struct",
      "underlying" : 82
    }, {
      "methods" : [ ],
      "name" : "interface{}",
      "type" : "Interface",
      "underlying" : 83
    }, {
      "elem" : 85,
      "key" : 83,
      "name" : "map[interface{}]*sync.entry",
      "type" : "Map",
      "underlying" : 84
    }, {
      "elem" : 86,
      "name" : "*sync.entry",
      "type" : "Pointer",
      "underlying" : 85
    }, {
      "local-name" : "entry",
      "name" : "sync.entry",
      "package" : 2,
      "type" : "Named",
      "underlying" : 87
    }, {
      "fields" : [ {
        "name" : "p",
        "type" : 56
      } ],
      "name" : "struct{p unsafe.Pointer}",
      "type" : "Struct",
      "underlying" : 87
    }, {
      "elem" : 48,
      "name" : "[]*reflect.rtype",
      "type" : "Slice",
      "underlying" : 88
    }, {
      "name" : "func([]reflect.Type) int",
      "params" : 90,
      "recv" : -1,
      "results" : 7,
      "type" : "Signature",
      "underlying" : 89,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 2
      } ],
      "name" : "([]reflect.Type)",
      "type" : "Tuple",
      "underlying" : 90
    }, {
      "name" : "func(interface{})",
      "params" : 92,
      "recv" : -1,
      "results" : 6,
      "type" : "Signature",
      "underlying" : 91,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 83
      } ],
      "name" : "(interface{})",
      "type" : "Tuple",
      "underlying" : 92
    }, {
      "name" : "func()",
      "params" : 6,
      "recv" : -1,
      "results" : 6,
      "type" : "Signature",
      "underlying" : 93,
      "variadic" : false
    }, {
      "elem" : 95,
      "name" : "*reflect.funcType",
      "type" : "Pointer",
      "underlying" : 94
    }, {
      "local-name" : "funcType",
      "name" : "reflect.funcType",
      "package" : 0,
      "type" : "Named",
      "underlying" : 96
    }, {
      "fields" : [ {
        "name" : "rtype",
        "type" : 49
      }, {
        "name" : "inCount",
        "type" : 75
      }, {
        "name" : "outCount",
        "type" : 75
      } ],
      "name" : "struct{reflect.rtype; inCount uint16; outCount uint16}",
      "type" : "Struct",
      "underlying" : 96
    }, {
      "elem" : 94,
      "name" : "**reflect.funcType",
      "type" : "Pointer",
      "underlying" : 97
    }, {
      "elem" : 83,
      "name" : "*interface{}",
      "type" : "Pointer",
      "underlying" : 98
    }, {
      "elem" : 100,
      "name" : "*reflect.funcTypeFixed4",
      "type" : "Pointer",
      "underlying" : 99
    }, {
      "local-name" : "funcTypeFixed4",
      "name" : "reflect.funcTypeFixed4",
      "package" : 0,
      "type" : "Named",
      "underlying" : 101
    }, {
      "fields" : [ {
        "name" : "funcType",
        "type" : 95
      }, {
        "name" : "args",
        "type" : 102
      } ],
      "name" : "struct{reflect.funcType; args [4]*reflect.rtype}",
      "type" : "Struct",
      "underlying" : 101
    }, {
      "elem" : 48,
      "name" : "[4]*reflect.rtype",
      "type" : "Array",
      "underlying" : 102
    }, {
      "elem" : 104,
      "name" : "*reflect.funcTypeFixed8",
      "type" : "Pointer",
      "underlying" : 103
    }, {
      "local-name" : "funcTypeFixed8",
      "name" : "reflect.funcTypeFixed8",
      "package" : 0,
      "type" : "Named",
      "underlying" : 105
    }, {
      "fields" : [ {
        "name" : "funcType",
        "type" : 95
      }, {
        "name" : "args",
        "type" : 106
      } ],
      "name" : "struct{reflect.funcType; args [8]*reflect.rtype}",
      "type" : "Struct",
      "underlying" : 105
    }, {
      "elem" : 48,
      "name" : "[8]*reflect.rtype",
      "type" : "Array",
      "underlying" : 106
    }, {
      "elem" : 108,
      "name" : "*reflect.funcTypeFixed16",
      "type" : "Pointer",
      "underlying" : 107
    }, {
      "local-name" : "funcTypeFixed16",
      "name" : "reflect.funcTypeFixed16",
      "package" : 0,
      "type" : "Named",
      "underlying" : 109
    }, {
      "fields" : [ {
        "name" : "funcType",
        "type" : 95
      }, {
        "name" : "args",
        "type" : 110
      } ],
      "name" : "struct{reflect.funcType; args [16]*reflect.rtype}",
      "type" : "Struct",
      "underlying" : 109
    }, {
      "elem" : 48,
      "name" : "[16]*reflect.rtype",
      "type" : "Array",
      "underlying" : 110
    }, {
      "elem" : 112,
      "name" : "*reflect.funcTypeFixed32",
      "type" : "Pointer",
      "underlying" : 111
    }, {
      "local-name" : "funcTypeFixed32",
      "name" : "reflect.funcTypeFixed32",
      "package" : 0,
      "type" : "Named",
      "underlying" : 113
    }, {
      "fields" : [ {
        "name" : "funcType",
        "type" : 95
      }, {
        "name" : "args",
        "type" : 114
      } ],
      "name" : "struct{reflect.funcType; args [32]*reflect.rtype}",
      "type" : "Struct",
      "underlying" : 113
    }, {
      "elem" : 48,
      "name" : "[32]*reflect.rtype",
      "type" : "Array",
      "underlying" : 114
    }, {
      "elem" : 116,
      "name" : "*reflect.funcTypeFixed64",
      "type" : "Pointer",
      "underlying" : 115
    }, {
      "local-name" : "funcTypeFixed64",
      "name" : "reflect.funcTypeFixed64",
      "package" : 0,
      "type" : "Named",
      "underlying" : 117
    }, {
      "fields" : [ {
        "name" : "funcType",
        "type" : 95
      }, {
        "name" : "args",
        "type" : 118
      } ],
      "name" : "struct{reflect.funcType; args [64]*reflect.rtype}",
      "type" : "Struct",
      "underlying" : 117
    }, {
      "elem" : 48,
      "name" : "[64]*reflect.rtype",
      "type" : "Array",
      "underlying" : 118
    }, {
      "elem" : 120,
      "name" : "*reflect.funcTypeFixed128",
      "type" : "Pointer",
      "underlying" : 119
    }, {
      "local-name" : "funcTypeFixed128",
      "name" : "reflect.funcTypeFixed128",
      "package" : 0,
      "type" : "Named",
      "underlying" : 121
    }, {
      "fields" : [ {
        "name" : "funcType",
        "type" : 95
      }, {
        "name" : "args",
        "type" : 122
      } ],
      "name" : "struct{reflect.funcType; args [128]*reflect.rtype}",
      "type" : "Struct",
      "underlying" : 121
    }, {
      "elem" : 48,
      "name" : "[128]*reflect.rtype",
      "type" : "Array",
      "underlying" : 122
    }, {
      "name" : "func([]*reflect.rtype, ...*reflect.rtype) []*reflect.rtype",
      "params" : 124,
      "recv" : -1,
      "results" : 125,
      "type" : "Signature",
      "underlying" : 123,
      "variadic" : true
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 88
      }, {
        "name" : "",
        "type" : 88
      } ],
      "name" : "([]*reflect.rtype, []*reflect.rtype)",
      "type" : "Tuple",
      "underlying" : 124
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 88
      } ],
      "name" : "([]*reflect.rtype)",
      "type" : "Tuple",
      "underlying" : 125
    }, {
      "name" : "func(x uint32, list ...byte) uint32",
      "params" : 127,
      "recv" : -1,
      "results" : 129,
      "type" : "Signature",
      "underlying" : 126,
      "variadic" : true
    }, {
      "fields" : [ {
        "name" : "x",
        "type" : 51
      }, {
        "name" : "list",
        "type" : 128
      } ],
      "name" : "(x uint32, list []byte)",
      "type" : "Tuple",
      "underlying" : 127
    }, {
      "elem" : 58,
      "name" : "[]byte",
      "type" : "Slice",
      "underlying" : 128
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 51
      } ],
      "name" : "(uint32)",
      "type" : "Tuple",
      "underlying" : 129
    }, {
      "name" : "untyped int",
      "type" : "Basic",
      "underlying" : 130
    }, {
      "name" : "untyped bool",
      "type" : "Basic",
      "underlying" : 131
    }, {
      "name" : "func([]*reflect.rtype) int",
      "params" : 125,
      "recv" : -1,
      "results" : 7,
      "type" : "Signature",
      "underlying" : 132,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "value",
        "type" : 83
      }, {
        "name" : "ok",
        "type" : 12
      } ],
      "name" : "(value interface{}, ok bool)",
      "type" : "Tuple",
      "underlying" : 133
    }, {
      "name" : "func(key interface{}) (value interface{}, ok bool)",
      "params" : 135,
      "recv" : -1,
      "results" : 133,
      "type" : "Signature",
      "underlying" : 134,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "key",
        "type" : 83
      } ],
      "name" : "(key interface{})",
      "type" : "Tuple",
      "underlying" : 135
    }, {
      "name" : "func(T *reflect.rtype, V *reflect.rtype, cmpTags bool) bool",
      "params" : 137,
      "recv" : -1,
      "results" : 11,
      "type" : "Signature",
      "underlying" : 136,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "T",
        "type" : 48
      }, {
        "name" : "V",
        "type" : 48
      }, {
        "name" : "cmpTags",
        "type" : 12
      } ],
      "name" : "(T *reflect.rtype, V *reflect.rtype, cmpTags bool)",
      "type" : "Tuple",
      "underlying" : 137
    }, {
      "name" : "func(tt *reflect.rtype) reflect.Type",
      "params" : 139,
      "recv" : -1,
      "results" : 18,
      "type" : "Signature",
      "underlying" : 138,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "tt",
        "type" : 48
      } ],
      "name" : "(tt *reflect.rtype)",
      "type" : "Tuple",
      "underlying" : 139
    }, {
      "name" : "func(key interface{}, value interface{})",
      "params" : 141,
      "recv" : -1,
      "results" : 6,
      "type" : "Signature",
      "underlying" : 140,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "key",
        "type" : 83
      }, {
        "name" : "value",
        "type" : 83
      } ],
      "name" : "(key interface{}, value interface{})",
      "type" : "Tuple",
      "underlying" : 141
    }, {
      "name" : "func(ft *reflect.funcType) string",
      "params" : 143,
      "recv" : -1,
      "results" : 36,
      "type" : "Signature",
      "underlying" : 142,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "ft",
        "type" : 94
      } ],
      "name" : "(ft *reflect.funcType)",
      "type" : "Tuple",
      "underlying" : 143
    }, {
      "name" : "func(s string) []*reflect.rtype",
      "params" : 145,
      "recv" : -1,
      "results" : 125,
      "type" : "Signature",
      "underlying" : 144,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "s",
        "type" : 24
      } ],
      "name" : "(s string)",
      "type" : "Tuple",
      "underlying" : 145
    }, {
      "name" : "func(n reflect.name) reflect.nameOff",
      "params" : 147,
      "recv" : -1,
      "results" : 150,
      "type" : "Signature",
      "underlying" : 146,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "n",
        "type" : 148
      } ],
      "name" : "(n reflect.name)",
      "type" : "Tuple",
      "underlying" : 147
    }, {
      "local-name" : "name",
      "name" : "reflect.name",
      "package" : 0,
      "type" : "Named",
      "underlying" : 149
    }, {
      "fields" : [ {
        "name" : "bytes",
        "type" : 57
      } ],
      "name" : "struct{bytes *byte}",
      "type" : "Struct",
      "underlying" : 149
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 59
      } ],
      "name" : "(reflect.nameOff)",
      "type" : "Tuple",
      "underlying" : 150
    }, {
      "name" : "func(n string, tag string, exported bool) reflect.name",
      "params" : 152,
      "recv" : -1,
      "results" : 153,
      "type" : "Signature",
      "underlying" : 151,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "n",
        "type" : 24
      }, {
        "name" : "tag",
        "type" : 24
      }, {
        "name" : "exported",
        "type" : 12
      } ],
      "name" : "(n string, tag string, exported bool)",
      "type" : "Tuple",
      "underlying" : 152
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 148
      } ],
      "name" : "(reflect.name)",
      "type" : "Tuple",
      "underlying" : 153
    } ],
    "variables" : [ {
      "name" : "",
      "package" : 0,
      "type" : 3,
      "exported" : false
    }, {
      "name" : "",
      "package" : 0,
      "type" : 3,
      "exported" : false
    }, {
      "name" : "",
      "package" : 0,
      "type" : 3,
      "exported" : false
    }, {
      "name" : "",
      "package" : 0,
      "type" : 3,
      "exported" : false
    }, {
      "name" : "",
      "package" : 0,
      "type" : 3,
      "exported" : false
    }, {
      "name" : "",
      "package" : 0,
      "type" : 3,
      "exported" : false
    }, {
      "name" : "",
      "package" : 0,
      "type" : 3,
      "exported" : false
    }, {
      "name" : "",
      "package" : 0,
      "type" : 3,
      "exported" : false
    }, {
      "name" : "",
      "package" : 0,
      "type" : 3,
      "exported" : false
    }, {
      "name" : "",
      "package" : 0,
      "type" : 3,
      "exported" : false
    }, {
      "name" : "",
      "package" : 0,
      "type" : 3,
      "exported" : false
    }, {
      "name" : "",
      "package" : 0,
      "type" : 3,
      "exported" : false
    }, {
      "name" : "",
      "package" : 0,
      "type" : 3,
      "exported" : false
    }, {
      "name" : "",
      "package" : 0,
      "type" : 3,
      "exported" : false
    }, {
      "name" : "",
      "package" : 0,
      "type" : 3,
      "exported" : false
    }, {
      "name" : "",
      "package" : 0,
      "type" : 3,
      "exported" : false
    }, {
      "name" : "",
      "package" : 0,
      "type" : 3,
      "exported" : false
    }, {
      "name" : "in",
      "package" : 0,
      "type" : 2,
      "exported" : false
    }, {
      "name" : "out",
      "package" : 0,
      "type" : 2,
      "exported" : false
    }, {
      "name" : "variadic",
      "package" : 0,
      "type" : 12,
      "exported" : false
    }, {
      "name" : "[res0]",
      "package" : 0,
      "type" : 3,
      "exported" : false
    }, {
      "name" : "funcLookupCache",
      "package" : 0,
      "type" : 76,
      "exported" : false
    }, {
      "name" : "ok",
      "package" : 0,
      "type" : 12,
      "exported" : false
    }, {
      "name" : "tt",
      "package" : 0,
      "type" : 48,
      "exported" : false
    }, {
      "name" : "rts",
      "package" : 0,
      "type" : 88,
      "exported" : false
    }, {
      "name" : "rti",
      "package" : 0,
      "type" : 83,
      "exported" : false
    }, {
      "name" : "ifunc",
      "package" : 0,
      "type" : 83,
      "exported" : false
    }, {
      "name" : "prototype",
      "package" : 0,
      "type" : 94,
      "exported" : false
    }, {
      "name" : "n",
      "package" : 0,
      "type" : 8,
      "exported" : false
    }, {
      "name" : "ft",
      "package" : 0,
      "type" : 94,
      "exported" : false
    }, {
      "name" : "args",
      "package" : 0,
      "type" : 88,
      "exported" : false
    }, {
      "name" : "fixed",
      "package" : 0,
      "type" : 99,
      "exported" : false
    }, {
      "name" : "args",
      "package" : 0,
      "type" : 102,
      "exported" : false
    }, {
      "name" : "funcType",
      "package" : 0,
      "type" : 95,
      "exported" : false
    }, {
      "name" : "fixed",
      "package" : 0,
      "type" : 103,
      "exported" : false
    }, {
      "name" : "args",
      "package" : 0,
      "type" : 106,
      "exported" : false
    }, {
      "name" : "funcType",
      "package" : 0,
      "type" : 95,
      "exported" : false
    }, {
      "name" : "fixed",
      "package" : 0,
      "type" : 107,
      "exported" : false
    }, {
      "name" : "args",
      "package" : 0,
      "type" : 110,
      "exported" : false
    }, {
      "name" : "funcType",
      "package" : 0,
      "type" : 95,
      "exported" : false
    }, {
      "name" : "fixed",
      "package" : 0,
      "type" : 111,
      "exported" : false
    }, {
      "name" : "args",
      "package" : 0,
      "type" : 114,
      "exported" : false
    }, {
      "name" : "funcType",
      "package" : 0,
      "type" : 95,
      "exported" : false
    }, {
      "name" : "fixed",
      "package" : 0,
      "type" : 115,
      "exported" : false
    }, {
      "name" : "args",
      "package" : 0,
      "type" : 118,
      "exported" : false
    }, {
      "name" : "funcType",
      "package" : 0,
      "type" : 95,
      "exported" : false
    }, {
      "name" : "fixed",
      "package" : 0,
      "type" : 119,
      "exported" : false
    }, {
      "name" : "args",
      "package" : 0,
      "type" : 122,
      "exported" : false
    }, {
      "name" : "funcType",
      "package" : 0,
      "type" : 95,
      "exported" : false
    }, {
      "name" : "hash",
      "package" : 0,
      "type" : 51,
      "exported" : false
    }, {
      "name" : "in",
      "package" : 0,
      "type" : 3,
      "exported" : false
    }, {
      "name" : "t",
      "package" : 0,
      "type" : 48,
      "exported" : false
    }, {
      "name" : "hash",
      "package" : 0,
      "type" : 51,
      "exported" : false
    }, {
      "name" : "_",
      "package" : 0,
      "type" : 8,
      "exported" : false
    }, {
      "name" : "out",
      "package" : 0,
      "type" : 3,
      "exported" : false
    }, {
      "name" : "t",
      "package" : 0,
      "type" : 48,
      "exported" : false
    }, {
      "name" : "_",
      "package" : 0,
      "type" : 8,
      "exported" : false
    }, {
      "name" : "tflag",
      "package" : 0,
      "type" : 52,
      "exported" : false
    }, {
      "name" : "inCount",
      "package" : 0,
      "type" : 75,
      "exported" : false
    }, {
      "name" : "outCount",
      "package" : 0,
      "type" : 75,
      "exported" : false
    }, {
      "name" : "m",
      "package" : 0,
      "type" : 79,
      "exported" : false
    }, {
      "name" : "ok",
      "package" : 0,
      "type" : 12,
      "exported" : false
    }, {
      "name" : "ts",
      "package" : 0,
      "type" : 83,
      "exported" : false
    }, {
      "name" : "rtype",
      "package" : 0,
      "type" : 49,
      "exported" : false
    }, {
      "name" : "t",
      "package" : 0,
      "type" : 48,
      "exported" : false
    }, {
      "name" : "_",
      "package" : 0,
      "type" : 8,
      "exported" : false
    }, {
      "name" : "ok",
      "package" : 0,
      "type" : 12,
      "exported" : false
    }, {
      "name" : "ts",
      "package" : 0,
      "type" : 83,
      "exported" : false
    }, {
      "name" : "t",
      "package" : 0,
      "type" : 48,
      "exported" : false
    }, {
      "name" : "_",
      "package" : 0,
      "type" : 8,
      "exported" : false
    }, {
      "name" : "addToCache",
      "package" : 0,
      "type" : 138,
      "exported" : false
    }, {
      "name" : "str",
      "package" : 0,
      "type" : 24,
      "exported" : false
    }, {
      "name" : "tt",
      "package" : 0,
      "type" : 48,
      "exported" : false
    }, {
      "name" : "_",
      "package" : 0,
      "type" : 8,
      "exported" : false
    }, {
      "name" : "str",
      "package" : 0,
      "type" : 59,
      "exported" : false
    }, {
      "name" : "ptrToThis",
      "package" : 0,
      "type" : 61,
      "exported" : false
    } ]
  },
  "go-version" : "1.14.3"
}