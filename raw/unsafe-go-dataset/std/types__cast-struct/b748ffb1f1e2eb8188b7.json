{
  "usage" : {
    "file" : "type.go",
    "label1" : "cast-struct",
    "label2" : "types",
    "line" : "685",
    "module" : "std",
    "pkg" : "runtime",
    "project" : "kubernetes/kubernetes",
    "snippet" : "mv := (*maptype)(unsafe.Pointer(v))",
    "version" : "std"
  },
  "cfg" : {
    "blocks" : [ {
      "update-vars" : [ ],
      "successors" : [ 2 ],
      "in-vars" : [ 1, 0, 2 ],
      "exit" : false,
      "out-vars" : [ 0, 2, 1 ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[entry]",
      "entry" : true,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ ],
      "in-vars" : [ ],
      "exit" : true,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[exit]",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 4 ],
      "in-vars" : [ 0, 2, 1 ],
      "exit" : false,
      "out-vars" : [ 4, 0, 2, 1 ],
      "decl-vars" : [ 4 ],
      "line-start" : 589,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "tp"
          }
        } ],
        "right" : [ {
          "declared" : {
            "go-type" : 21,
            "kind" : "type",
            "type" : "identifier",
            "value" : {
              "go-type" : 21,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "_typePair"
            }
          },
          "go-type" : 21,
          "kind" : "literal",
          "type" : "composite",
          "values" : [ {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "t",
              "variable" : 0
            }
          }, {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "v",
              "variable" : 1
            }
          } ]
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 589,
      "code" : "tp := _typePair{t, v}",
      "entry" : false,
      "use-vars" : [ 0, 1 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 5, 6 ],
      "in-vars" : [ 0, 2, 1, 5, 4 ],
      "exit" : false,
      "out-vars" : [ 1, 4, 0, 2 ],
      "decl-vars" : [ ],
      "line-start" : 590,
      "ast" : {
        "condition" : {
          "go-type" : 13,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "ok",
            "variable" : 5
          }
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 592,
      "code" : "if _, ok := seen[tp]; ok {\n\treturn true\n}",
      "entry" : false,
      "use-vars" : [ 5 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 3 ],
      "in-vars" : [ 1, 4, 0, 2 ],
      "exit" : false,
      "out-vars" : [ 1, 5, 4, 0, 2 ],
      "decl-vars" : [ 5, 6 ],
      "line-start" : 590,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "_"
          }
        }, {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "ok"
          }
        } ],
        "right" : [ {
          "go-type" : 23,
          "index" : {
            "go-type" : 21,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "tp",
              "variable" : 4
            }
          },
          "kind" : "expression",
          "target" : {
            "go-type" : 19,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "seen",
              "variable" : 2
            }
          },
          "type" : "index"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 590,
      "code" : "_, ok := seen[tp]",
      "entry" : false,
      "use-vars" : [ 2, 4 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 591,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 13,
          "kind" : "constant",
          "value" : {
            "type" : "BOOL",
            "value" : "true"
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 591,
      "code" : "return true",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ 2 ],
      "successors" : [ 7 ],
      "in-vars" : [ 0, 2, 1, 4 ],
      "exit" : false,
      "out-vars" : [ 0, 2, 1 ],
      "decl-vars" : [ ],
      "line-start" : 597,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 20,
          "index" : {
            "go-type" : 21,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "tp",
              "variable" : 4
            }
          },
          "kind" : "expression",
          "target" : {
            "go-type" : 19,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "seen",
              "variable" : 2
            }
          },
          "type" : "index"
        } ],
        "right" : [ {
          "declared" : {
            "fields" : [ ],
            "go-type" : 20,
            "kind" : "type",
            "type" : "struct"
          },
          "go-type" : 20,
          "kind" : "literal",
          "type" : "composite",
          "values" : [ ]
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 597,
      "code" : "seen[tp] = struct{}{}",
      "entry" : false,
      "use-vars" : [ 4, 2 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 8, 9 ],
      "in-vars" : [ 0, 2, 1 ],
      "exit" : false,
      "out-vars" : [ 0, 2, 1 ],
      "decl-vars" : [ ],
      "line-start" : 599,
      "ast" : {
        "condition" : {
          "go-type" : 24,
          "kind" : "expression",
          "left" : {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "t",
              "variable" : 0
            }
          },
          "operator" : "==",
          "right" : {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "v",
              "variable" : 1
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 601,
      "code" : "if t == v {\n\treturn true\n}",
      "entry" : false,
      "use-vars" : [ 0, 1 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 600,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 13,
          "kind" : "constant",
          "value" : {
            "type" : "BOOL",
            "value" : "true"
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 600,
      "code" : "return true",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 10 ],
      "in-vars" : [ 0, 2, 1 ],
      "exit" : false,
      "out-vars" : [ 8, 2, 1, 0 ],
      "decl-vars" : [ 8 ],
      "line-start" : 602,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "kind"
          }
        } ],
        "right" : [ {
          "go-type" : 8,
          "kind" : "expression",
          "left" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "kind",
              "variable" : 7
            },
            "go-type" : 8,
            "kind" : "expression",
            "target" : {
              "go-type" : 2,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "t",
                "variable" : 0
              }
            },
            "type" : "selector"
          },
          "operator" : "&",
          "right" : {
            "go-type" : 8,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "31"
            }
          },
          "type" : "binary"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 602,
      "code" : "kind := t.kind & kindMask",
      "entry" : false,
      "use-vars" : [ 0 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 11, 12 ],
      "in-vars" : [ 0, 8, 2, 1 ],
      "exit" : false,
      "out-vars" : [ 2, 1, 0, 8 ],
      "decl-vars" : [ ],
      "line-start" : 603,
      "ast" : {
        "condition" : {
          "go-type" : 24,
          "kind" : "expression",
          "left" : {
            "go-type" : 8,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "kind",
              "variable" : 8
            }
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 8,
            "kind" : "expression",
            "left" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "kind",
                "variable" : 7
              },
              "go-type" : 8,
              "kind" : "expression",
              "target" : {
                "go-type" : 2,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "v",
                  "variable" : 1
                }
              },
              "type" : "selector"
            },
            "operator" : "&",
            "right" : {
              "go-type" : 8,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "31"
              }
            },
            "type" : "binary"
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 605,
      "code" : "if kind != v.kind&kindMask {\n\treturn false\n}",
      "entry" : false,
      "use-vars" : [ 1, 8 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 604,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 13,
          "kind" : "constant",
          "value" : {
            "type" : "BOOL",
            "value" : "false"
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 604,
      "code" : "return false",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 13, 14 ],
      "in-vars" : [ 1, 0, 8, 2 ],
      "exit" : false,
      "out-vars" : [ 0, 8, 2, 1 ],
      "decl-vars" : [ ],
      "line-start" : 606,
      "ast" : {
        "condition" : {
          "go-type" : 24,
          "kind" : "expression",
          "left" : {
            "arguments" : [ ],
            "ellipsis" : false,
            "function" : {
              "field" : {
                "function" : 1,
                "ident-kind" : "Func",
                "kind" : "ident",
                "value" : "string"
              },
              "go-type" : 26,
              "kind" : "expression",
              "target" : {
                "go-type" : 2,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "t",
                  "variable" : 0
                }
              },
              "type" : "selector"
            },
            "go-type" : 25,
            "kind" : "expression",
            "type" : "call"
          },
          "operator" : "!=",
          "right" : {
            "arguments" : [ ],
            "ellipsis" : false,
            "function" : {
              "field" : {
                "function" : 1,
                "ident-kind" : "Func",
                "kind" : "ident",
                "value" : "string"
              },
              "go-type" : 26,
              "kind" : "expression",
              "target" : {
                "go-type" : 2,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "v",
                  "variable" : 1
                }
              },
              "type" : "selector"
            },
            "go-type" : 25,
            "kind" : "expression",
            "type" : "call"
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 608,
      "code" : "if t.string() != v.string() {\n\treturn false\n}",
      "entry" : false,
      "use-vars" : [ 0, 1 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 607,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 13,
          "kind" : "constant",
          "value" : {
            "type" : "BOOL",
            "value" : "false"
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 607,
      "code" : "return false",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 15 ],
      "in-vars" : [ 8, 2, 1, 0 ],
      "exit" : false,
      "out-vars" : [ 0, 9, 8, 2, 1 ],
      "decl-vars" : [ 9 ],
      "line-start" : 609,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "ut"
          }
        } ],
        "right" : [ {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "function" : 2,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "uncommon"
            },
            "go-type" : 33,
            "kind" : "expression",
            "target" : {
              "go-type" : 2,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "t",
                "variable" : 0
              }
            },
            "type" : "selector"
          },
          "go-type" : 29,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 609,
      "code" : "ut := t.uncommon()",
      "entry" : false,
      "use-vars" : [ 0 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 16 ],
      "in-vars" : [ 0, 9, 8, 2, 1 ],
      "exit" : false,
      "out-vars" : [ 10, 0, 9, 8, 2, 1 ],
      "decl-vars" : [ 10 ],
      "line-start" : 610,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "uv"
          }
        } ],
        "right" : [ {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "function" : 2,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "uncommon"
            },
            "go-type" : 33,
            "kind" : "expression",
            "target" : {
              "go-type" : 2,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "v",
                "variable" : 1
              }
            },
            "type" : "selector"
          },
          "go-type" : 29,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 610,
      "code" : "uv := v.uncommon()",
      "entry" : false,
      "use-vars" : [ 1 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 17, 23 ],
      "in-vars" : [ 10, 0, 9, 8, 2, 1 ],
      "exit" : false,
      "out-vars" : [ 0, 9, 8, 2, 1, 10 ],
      "decl-vars" : [ ],
      "line-start" : 611,
      "ast" : {
        "condition" : {
          "go-type" : 24,
          "kind" : "expression",
          "left" : {
            "go-type" : 24,
            "kind" : "expression",
            "left" : {
              "go-type" : 29,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "ut",
                "variable" : 9
              }
            },
            "operator" : "!=",
            "right" : {
              "go-type" : 35,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Nil",
                "kind" : "ident",
                "value" : "nil"
              }
            },
            "type" : "binary"
          },
          "operator" : "||",
          "right" : {
            "go-type" : 24,
            "kind" : "expression",
            "left" : {
              "go-type" : 29,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "uv",
                "variable" : 10
              }
            },
            "operator" : "!=",
            "right" : {
              "go-type" : 35,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Nil",
                "kind" : "ident",
                "value" : "nil"
              }
            },
            "type" : "binary"
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 620,
      "code" : "if ut != nil || uv != nil {\n\tif ut == nil || uv == nil {\n\t\treturn false\n\t}\n\tpkgpatht := t.nameOff(ut.pkgpath).name()\n\tpkgpathv := v.nameOff(uv.pkgpath).name()\n\tif pkgpatht != pkgpathv {\n\t\treturn false\n\t}\n}",
      "entry" : false,
      "use-vars" : [ 9, 10 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 18, 19 ],
      "in-vars" : [ 0, 9, 8, 2, 1, 10 ],
      "exit" : false,
      "out-vars" : [ 10, 0, 9, 8, 2, 1 ],
      "decl-vars" : [ ],
      "line-start" : 612,
      "ast" : {
        "condition" : {
          "go-type" : 24,
          "kind" : "expression",
          "left" : {
            "go-type" : 24,
            "kind" : "expression",
            "left" : {
              "go-type" : 29,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "ut",
                "variable" : 9
              }
            },
            "operator" : "==",
            "right" : {
              "go-type" : 35,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Nil",
                "kind" : "ident",
                "value" : "nil"
              }
            },
            "type" : "binary"
          },
          "operator" : "||",
          "right" : {
            "go-type" : 24,
            "kind" : "expression",
            "left" : {
              "go-type" : 29,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "uv",
                "variable" : 10
              }
            },
            "operator" : "==",
            "right" : {
              "go-type" : 35,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Nil",
                "kind" : "ident",
                "value" : "nil"
              }
            },
            "type" : "binary"
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 614,
      "code" : "if ut == nil || uv == nil {\n\treturn false\n}",
      "entry" : false,
      "use-vars" : [ 10, 9 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 613,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 13,
          "kind" : "constant",
          "value" : {
            "type" : "BOOL",
            "value" : "false"
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 613,
      "code" : "return false",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 20 ],
      "in-vars" : [ 0, 9, 8, 2, 1, 10 ],
      "exit" : false,
      "out-vars" : [ 12, 0, 8, 2, 1, 10 ],
      "decl-vars" : [ 12 ],
      "line-start" : 615,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "pkgpatht"
          }
        } ],
        "right" : [ {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "function" : 4,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "name"
            },
            "go-type" : 36,
            "kind" : "expression",
            "target" : {
              "arguments" : [ {
                "field" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "pkgpath",
                  "variable" : 11
                },
                "go-type" : 16,
                "kind" : "expression",
                "target" : {
                  "go-type" : 29,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "ut",
                    "variable" : 9
                  }
                },
                "type" : "selector"
              } ],
              "ellipsis" : false,
              "function" : {
                "field" : {
                  "function" : 3,
                  "ident-kind" : "Func",
                  "kind" : "ident",
                  "value" : "nameOff"
                },
                "go-type" : 40,
                "kind" : "expression",
                "target" : {
                  "go-type" : 2,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "t",
                    "variable" : 0
                  }
                },
                "type" : "selector"
              },
              "go-type" : 38,
              "kind" : "expression",
              "type" : "call"
            },
            "type" : "selector"
          },
          "go-type" : 25,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 615,
      "code" : "pkgpatht := t.nameOff(ut.pkgpath).name()",
      "entry" : false,
      "use-vars" : [ 9, 0 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 21 ],
      "in-vars" : [ 12, 0, 8, 2, 1, 10 ],
      "exit" : false,
      "out-vars" : [ 0, 8, 2, 1, 13, 12 ],
      "decl-vars" : [ 13 ],
      "line-start" : 616,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "pkgpathv"
          }
        } ],
        "right" : [ {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "function" : 4,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "name"
            },
            "go-type" : 36,
            "kind" : "expression",
            "target" : {
              "arguments" : [ {
                "field" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "pkgpath",
                  "variable" : 11
                },
                "go-type" : 16,
                "kind" : "expression",
                "target" : {
                  "go-type" : 29,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "uv",
                    "variable" : 10
                  }
                },
                "type" : "selector"
              } ],
              "ellipsis" : false,
              "function" : {
                "field" : {
                  "function" : 3,
                  "ident-kind" : "Func",
                  "kind" : "ident",
                  "value" : "nameOff"
                },
                "go-type" : 40,
                "kind" : "expression",
                "target" : {
                  "go-type" : 2,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "v",
                    "variable" : 1
                  }
                },
                "type" : "selector"
              },
              "go-type" : 38,
              "kind" : "expression",
              "type" : "call"
            },
            "type" : "selector"
          },
          "go-type" : 25,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 616,
      "code" : "pkgpathv := v.nameOff(uv.pkgpath).name()",
      "entry" : false,
      "use-vars" : [ 1, 10 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 22, 23 ],
      "in-vars" : [ 13, 12, 0, 8, 2, 1 ],
      "exit" : false,
      "out-vars" : [ 8, 2, 1, 0 ],
      "decl-vars" : [ ],
      "line-start" : 617,
      "ast" : {
        "condition" : {
          "go-type" : 24,
          "kind" : "expression",
          "left" : {
            "go-type" : 25,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "pkgpatht",
              "variable" : 12
            }
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 25,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "pkgpathv",
              "variable" : 13
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 619,
      "code" : "if pkgpatht != pkgpathv {\n\treturn false\n}",
      "entry" : false,
      "use-vars" : [ 13, 12 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 618,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 13,
          "kind" : "constant",
          "value" : {
            "type" : "BOOL",
            "value" : "false"
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 618,
      "code" : "return false",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 24, 25 ],
      "in-vars" : [ 0, 8, 2, 1 ],
      "exit" : false,
      "out-vars" : [ 0, 8, 2, 1 ],
      "decl-vars" : [ ],
      "line-start" : 621,
      "ast" : {
        "condition" : {
          "go-type" : 24,
          "kind" : "expression",
          "left" : {
            "go-type" : 24,
            "kind" : "expression",
            "left" : {
              "go-type" : 8,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "1"
              }
            },
            "operator" : "<=",
            "right" : {
              "go-type" : 8,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "kind",
                "variable" : 8
              }
            },
            "type" : "binary"
          },
          "operator" : "&&",
          "right" : {
            "go-type" : 24,
            "kind" : "expression",
            "left" : {
              "go-type" : 8,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "kind",
                "variable" : 8
              }
            },
            "operator" : "<=",
            "right" : {
              "go-type" : 8,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "16"
              }
            },
            "type" : "binary"
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 623,
      "code" : "if kindBool <= kind && kind <= kindComplex128 {\n\treturn true\n}",
      "entry" : false,
      "use-vars" : [ 8 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 622,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 13,
          "kind" : "constant",
          "value" : {
            "type" : "BOOL",
            "value" : "true"
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 622,
      "code" : "return true",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 26, 28, 32, 36, 54, 75, 79, 83, 87, 106 ],
      "in-vars" : [ 0, 8, 2, 1 ],
      "exit" : false,
      "out-vars" : [ 0, 8, 2, 1 ],
      "decl-vars" : [ ],
      "line-start" : 624,
      "ast" : {
        "condition" : {
          "go-type" : 8,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "kind",
            "variable" : 8
          }
        },
        "kind" : "statement",
        "type" : "switch"
      },
      "assign-vars" : [ ],
      "line-end" : 725,
      "code" : "switch kind {\ncase kindString, kindUnsafePointer:\n\treturn true\ncase kindArray:\n\tat := (*arraytype)(unsafe.Pointer(t))\n\tav := (*arraytype)(unsafe.Pointer(v))\n\treturn typesEqual(at.elem, av.elem, seen) && at.len == av.len\ncase kindChan:\n\tct := (*chantype)(unsafe.Pointer(t))\n\tcv := (*chantype)(unsafe.Pointer(v))\n\treturn ct.dir == cv.dir && typesEqual(ct.elem, cv.elem, seen)\ncase kindFunc:\n\tft := (*functype)(unsafe.Pointer(t))\n\tfv := (*functype)(unsafe.Pointer(v))\n\tif ft.outCount != fv.outCount || ft.inCount != fv.inCount {\n\t\treturn false\n\t}\n\ttin, vin := ft.in(), fv.in()\n\tfor i := 0; i < len(tin); i++ {\n\t\tif !typesEqual(tin[i], vin[i], seen) {\n\t\t\treturn false\n\t\t}\n\t}\n\ttout, vout := ft.out(), fv.out()\n\tfor i := 0; i < len(tout); i++ {\n\t\tif !typesEqual(tout[i], vout[i], seen) {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn true\ncase kindInterface:\n\tit := (*interfacetype)(unsafe.Pointer(t))\n\tiv := (*interfacetype)(unsafe.Pointer(v))\n\tif it.pkgpath.name() != iv.pkgpath.name() {\n\t\treturn false\n\t}\n\tif len(it.mhdr) != len(iv.mhdr) {\n\t\treturn false\n\t}\n\tfor i := range it.mhdr {\n\t\ttm := &it.mhdr[i]\n\t\tvm := &iv.mhdr[i]\n\n\t\ttname := resolveNameOff(unsafe.Pointer(tm), tm.name)\n\t\tvname := resolveNameOff(unsafe.Pointer(vm), vm.name)\n\t\tif tname.name() != vname.name() {\n\t\t\treturn false\n\t\t}\n\t\tif tname.pkgPath() != vname.pkgPath() {\n\t\t\treturn false\n\t\t}\n\t\ttityp := resolveTypeOff(unsafe.Pointer(tm), tm.ityp)\n\t\tvityp := resolveTypeOff(unsafe.Pointer(vm), vm.ityp)\n\t\tif !typesEqual(tityp, vityp, seen) {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn true\ncase kindMap:\n\tmt := (*maptype)(unsafe.Pointer(t))\n\tmv := (*maptype)(unsafe.Pointer(v))\n\treturn typesEqual(mt.key, mv.key, seen) && typesEqual(mt.elem, mv.elem, seen)\ncase kindPtr:\n\tpt := (*ptrtype)(unsafe.Pointer(t))\n\tpv := (*ptrtype)(unsafe.Pointer(v))\n\treturn typesEqual(pt.elem, pv.elem, seen)\ncase kindSlice:\n\tst := (*slicetype)(unsafe.Pointer(t))\n\tsv := (*slicetype)(unsafe.Pointer(v))\n\treturn typesEqual(st.elem, sv.elem, seen)\ncase kindStruct:\n\tst := (*structtype)(unsafe.Pointer(t))\n\tsv := (*structtype)(unsafe.Pointer(v))\n\tif len(st.fields) != len(sv.fields) {\n\t\treturn false\n\t}\n\tif st.pkgPath.name() != sv.pkgPath.name() {\n\t\treturn false\n\t}\n\tfor i := range st.fields {\n\t\ttf := &st.fields[i]\n\t\tvf := &sv.fields[i]\n\t\tif tf.name.name() != vf.name.name() {\n\t\t\treturn false\n\t\t}\n\t\tif !typesEqual(tf.typ, vf.typ, seen) {\n\t\t\treturn false\n\t\t}\n\t\tif tf.name.tag() != vf.name.tag() {\n\t\t\treturn false\n\t\t}\n\t\tif tf.offsetAnon != vf.offsetAnon {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn true\ndefault:\n\tprintln(\"runtime: impossible type kind\", kind)\n\tthrow(\"runtime: impossible type kind\")\n\treturn false\n}",
      "entry" : false,
      "use-vars" : [ 8 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 27 ],
      "in-vars" : [ ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 625,
      "ast" : {
        "expressions" : [ {
          "go-type" : 8,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "24"
          }
        }, {
          "go-type" : 8,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "26"
          }
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 626,
      "code" : "case kindString, kindUnsafePointer:\n\treturn true",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 626,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 13,
          "kind" : "constant",
          "value" : {
            "type" : "BOOL",
            "value" : "true"
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 626,
      "code" : "return true",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 29 ],
      "in-vars" : [ 1, 0, 2 ],
      "exit" : false,
      "out-vars" : [ 0, 2, 1 ],
      "decl-vars" : [ ],
      "line-start" : 627,
      "ast" : {
        "expressions" : [ {
          "go-type" : 8,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "17"
          }
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 630,
      "code" : "case kindArray:\n\tat := (*arraytype)(unsafe.Pointer(t))\n\tav := (*arraytype)(unsafe.Pointer(v))\n\treturn typesEqual(at.elem, av.elem, seen) && at.len == av.len",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 30 ],
      "in-vars" : [ 0, 2, 1 ],
      "exit" : false,
      "out-vars" : [ 14, 2, 1 ],
      "decl-vars" : [ 14 ],
      "line-start" : 628,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "at"
          }
        } ],
        "right" : [ {
          "coerced-to" : {
            "contained" : {
              "go-type" : 44,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 44,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "arraytype"
              }
            },
            "go-type" : 43,
            "kind" : "type",
            "type" : "pointer"
          },
          "go-type" : 43,
          "kind" : "expression",
          "target" : {
            "coerced-to" : {
              "go-type" : 11,
              "kind" : "type",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 1,
                "value" : "unsafe"
              },
              "type" : "identifier",
              "value" : {
                "go-type" : 11,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "Pointer"
              }
            },
            "go-type" : 11,
            "kind" : "expression",
            "target" : {
              "go-type" : 2,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "t",
                "variable" : 0
              }
            },
            "type" : "cast"
          },
          "type" : "cast"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 628,
      "code" : "at := (*arraytype)(unsafe.Pointer(t))",
      "entry" : false,
      "use-vars" : [ 0 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 31 ],
      "in-vars" : [ 1, 14, 2 ],
      "exit" : false,
      "out-vars" : [ 14, 2, 16 ],
      "decl-vars" : [ 16 ],
      "line-start" : 629,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "av"
          }
        } ],
        "right" : [ {
          "coerced-to" : {
            "contained" : {
              "go-type" : 44,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 44,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "arraytype"
              }
            },
            "go-type" : 43,
            "kind" : "type",
            "type" : "pointer"
          },
          "go-type" : 43,
          "kind" : "expression",
          "target" : {
            "coerced-to" : {
              "go-type" : 11,
              "kind" : "type",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 1,
                "value" : "unsafe"
              },
              "type" : "identifier",
              "value" : {
                "go-type" : 11,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "Pointer"
              }
            },
            "go-type" : 11,
            "kind" : "expression",
            "target" : {
              "go-type" : 2,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "v",
                "variable" : 1
              }
            },
            "type" : "cast"
          },
          "type" : "cast"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 629,
      "code" : "av := (*arraytype)(unsafe.Pointer(v))",
      "entry" : false,
      "use-vars" : [ 1 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 14, 2, 16 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 630,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 13,
          "kind" : "expression",
          "left" : {
            "arguments" : [ {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "elem",
                "variable" : 15
              },
              "go-type" : 2,
              "kind" : "expression",
              "target" : {
                "go-type" : 43,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "at",
                  "variable" : 14
                }
              },
              "type" : "selector"
            }, {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "elem",
                "variable" : 15
              },
              "go-type" : 2,
              "kind" : "expression",
              "target" : {
                "go-type" : 43,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "av",
                  "variable" : 16
                }
              },
              "type" : "selector"
            }, {
              "go-type" : 19,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "seen",
                "variable" : 2
              }
            } ],
            "ellipsis" : false,
            "function" : {
              "go-type" : 0,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "function" : 0,
                "ident-kind" : "Func",
                "kind" : "ident",
                "value" : "typesEqual"
              }
            },
            "go-type" : 13,
            "kind" : "expression",
            "type" : "call"
          },
          "operator" : "&&",
          "right" : {
            "go-type" : 13,
            "kind" : "expression",
            "left" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "len",
                "variable" : 17
              },
              "go-type" : 5,
              "kind" : "expression",
              "target" : {
                "go-type" : 43,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "at",
                  "variable" : 14
                }
              },
              "type" : "selector"
            },
            "operator" : "==",
            "right" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "len",
                "variable" : 17
              },
              "go-type" : 5,
              "kind" : "expression",
              "target" : {
                "go-type" : 43,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "av",
                  "variable" : 16
                }
              },
              "type" : "selector"
            },
            "type" : "binary"
          },
          "type" : "binary"
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 630,
      "code" : "return typesEqual(at.elem, av.elem, seen) && at.len == av.len",
      "entry" : false,
      "use-vars" : [ 14, 16, 2 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 33 ],
      "in-vars" : [ 2, 1, 0 ],
      "exit" : false,
      "out-vars" : [ 1, 0, 2 ],
      "decl-vars" : [ ],
      "line-start" : 631,
      "ast" : {
        "expressions" : [ {
          "go-type" : 8,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "18"
          }
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 634,
      "code" : "case kindChan:\n\tct := (*chantype)(unsafe.Pointer(t))\n\tcv := (*chantype)(unsafe.Pointer(v))\n\treturn ct.dir == cv.dir && typesEqual(ct.elem, cv.elem, seen)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 34 ],
      "in-vars" : [ 1, 0, 2 ],
      "exit" : false,
      "out-vars" : [ 18, 2, 1 ],
      "decl-vars" : [ 18 ],
      "line-start" : 632,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "ct"
          }
        } ],
        "right" : [ {
          "coerced-to" : {
            "contained" : {
              "go-type" : 47,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 47,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "chantype"
              }
            },
            "go-type" : 46,
            "kind" : "type",
            "type" : "pointer"
          },
          "go-type" : 46,
          "kind" : "expression",
          "target" : {
            "coerced-to" : {
              "go-type" : 11,
              "kind" : "type",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 1,
                "value" : "unsafe"
              },
              "type" : "identifier",
              "value" : {
                "go-type" : 11,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "Pointer"
              }
            },
            "go-type" : 11,
            "kind" : "expression",
            "target" : {
              "go-type" : 2,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "t",
                "variable" : 0
              }
            },
            "type" : "cast"
          },
          "type" : "cast"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 632,
      "code" : "ct := (*chantype)(unsafe.Pointer(t))",
      "entry" : false,
      "use-vars" : [ 0 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 35 ],
      "in-vars" : [ 1, 18, 2 ],
      "exit" : false,
      "out-vars" : [ 18, 20, 2 ],
      "decl-vars" : [ 20 ],
      "line-start" : 633,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "cv"
          }
        } ],
        "right" : [ {
          "coerced-to" : {
            "contained" : {
              "go-type" : 47,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 47,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "chantype"
              }
            },
            "go-type" : 46,
            "kind" : "type",
            "type" : "pointer"
          },
          "go-type" : 46,
          "kind" : "expression",
          "target" : {
            "coerced-to" : {
              "go-type" : 11,
              "kind" : "type",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 1,
                "value" : "unsafe"
              },
              "type" : "identifier",
              "value" : {
                "go-type" : 11,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "Pointer"
              }
            },
            "go-type" : 11,
            "kind" : "expression",
            "target" : {
              "go-type" : 2,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "v",
                "variable" : 1
              }
            },
            "type" : "cast"
          },
          "type" : "cast"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 633,
      "code" : "cv := (*chantype)(unsafe.Pointer(v))",
      "entry" : false,
      "use-vars" : [ 1 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 18, 20, 2 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 634,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 13,
          "kind" : "expression",
          "left" : {
            "go-type" : 13,
            "kind" : "expression",
            "left" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "dir",
                "variable" : 19
              },
              "go-type" : 5,
              "kind" : "expression",
              "target" : {
                "go-type" : 46,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "ct",
                  "variable" : 18
                }
              },
              "type" : "selector"
            },
            "operator" : "==",
            "right" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "dir",
                "variable" : 19
              },
              "go-type" : 5,
              "kind" : "expression",
              "target" : {
                "go-type" : 46,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "cv",
                  "variable" : 20
                }
              },
              "type" : "selector"
            },
            "type" : "binary"
          },
          "operator" : "&&",
          "right" : {
            "arguments" : [ {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "elem",
                "variable" : 21
              },
              "go-type" : 2,
              "kind" : "expression",
              "target" : {
                "go-type" : 46,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "ct",
                  "variable" : 18
                }
              },
              "type" : "selector"
            }, {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "elem",
                "variable" : 21
              },
              "go-type" : 2,
              "kind" : "expression",
              "target" : {
                "go-type" : 46,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "cv",
                  "variable" : 20
                }
              },
              "type" : "selector"
            }, {
              "go-type" : 19,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "seen",
                "variable" : 2
              }
            } ],
            "ellipsis" : false,
            "function" : {
              "go-type" : 0,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "function" : 0,
                "ident-kind" : "Func",
                "kind" : "ident",
                "value" : "typesEqual"
              }
            },
            "go-type" : 13,
            "kind" : "expression",
            "type" : "call"
          },
          "type" : "binary"
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 634,
      "code" : "return ct.dir == cv.dir && typesEqual(ct.elem, cv.elem, seen)",
      "entry" : false,
      "use-vars" : [ 2, 20, 18 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 37 ],
      "in-vars" : [ 0, 2, 1 ],
      "exit" : false,
      "out-vars" : [ 0, 2, 1 ],
      "decl-vars" : [ ],
      "line-start" : 635,
      "ast" : {
        "expressions" : [ {
          "go-type" : 8,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "19"
          }
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 653,
      "code" : "case kindFunc:\n\tft := (*functype)(unsafe.Pointer(t))\n\tfv := (*functype)(unsafe.Pointer(v))\n\tif ft.outCount != fv.outCount || ft.inCount != fv.inCount {\n\t\treturn false\n\t}\n\ttin, vin := ft.in(), fv.in()\n\tfor i := 0; i < len(tin); i++ {\n\t\tif !typesEqual(tin[i], vin[i], seen) {\n\t\t\treturn false\n\t\t}\n\t}\n\ttout, vout := ft.out(), fv.out()\n\tfor i := 0; i < len(tout); i++ {\n\t\tif !typesEqual(tout[i], vout[i], seen) {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn true",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 38 ],
      "in-vars" : [ 0, 2, 1 ],
      "exit" : false,
      "out-vars" : [ 22, 1, 2 ],
      "decl-vars" : [ 22 ],
      "line-start" : 636,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "ft"
          }
        } ],
        "right" : [ {
          "coerced-to" : {
            "contained" : {
              "go-type" : 50,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 50,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "functype"
              }
            },
            "go-type" : 49,
            "kind" : "type",
            "type" : "pointer"
          },
          "go-type" : 49,
          "kind" : "expression",
          "target" : {
            "coerced-to" : {
              "go-type" : 11,
              "kind" : "type",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 1,
                "value" : "unsafe"
              },
              "type" : "identifier",
              "value" : {
                "go-type" : 11,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "Pointer"
              }
            },
            "go-type" : 11,
            "kind" : "expression",
            "target" : {
              "go-type" : 2,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "t",
                "variable" : 0
              }
            },
            "type" : "cast"
          },
          "type" : "cast"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 636,
      "code" : "ft := (*functype)(unsafe.Pointer(t))",
      "entry" : false,
      "use-vars" : [ 0 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 39 ],
      "in-vars" : [ 2, 22, 1 ],
      "exit" : false,
      "out-vars" : [ 2, 22, 24 ],
      "decl-vars" : [ 24 ],
      "line-start" : 637,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "fv"
          }
        } ],
        "right" : [ {
          "coerced-to" : {
            "contained" : {
              "go-type" : 50,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 50,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "functype"
              }
            },
            "go-type" : 49,
            "kind" : "type",
            "type" : "pointer"
          },
          "go-type" : 49,
          "kind" : "expression",
          "target" : {
            "coerced-to" : {
              "go-type" : 11,
              "kind" : "type",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 1,
                "value" : "unsafe"
              },
              "type" : "identifier",
              "value" : {
                "go-type" : 11,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "Pointer"
              }
            },
            "go-type" : 11,
            "kind" : "expression",
            "target" : {
              "go-type" : 2,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "v",
                "variable" : 1
              }
            },
            "type" : "cast"
          },
          "type" : "cast"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 637,
      "code" : "fv := (*functype)(unsafe.Pointer(v))",
      "entry" : false,
      "use-vars" : [ 1 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 40, 41 ],
      "in-vars" : [ 2, 22, 24 ],
      "exit" : false,
      "out-vars" : [ 2, 22, 24 ],
      "decl-vars" : [ ],
      "line-start" : 638,
      "ast" : {
        "condition" : {
          "go-type" : 24,
          "kind" : "expression",
          "left" : {
            "go-type" : 24,
            "kind" : "expression",
            "left" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "outCount",
                "variable" : 23
              },
              "go-type" : 32,
              "kind" : "expression",
              "target" : {
                "go-type" : 49,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "ft",
                  "variable" : 22
                }
              },
              "type" : "selector"
            },
            "operator" : "!=",
            "right" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "outCount",
                "variable" : 23
              },
              "go-type" : 32,
              "kind" : "expression",
              "target" : {
                "go-type" : 49,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "fv",
                  "variable" : 24
                }
              },
              "type" : "selector"
            },
            "type" : "binary"
          },
          "operator" : "||",
          "right" : {
            "go-type" : 24,
            "kind" : "expression",
            "left" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "inCount",
                "variable" : 25
              },
              "go-type" : 32,
              "kind" : "expression",
              "target" : {
                "go-type" : 49,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "ft",
                  "variable" : 22
                }
              },
              "type" : "selector"
            },
            "operator" : "!=",
            "right" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "inCount",
                "variable" : 25
              },
              "go-type" : 32,
              "kind" : "expression",
              "target" : {
                "go-type" : 49,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "fv",
                  "variable" : 24
                }
              },
              "type" : "selector"
            },
            "type" : "binary"
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 640,
      "code" : "if ft.outCount != fv.outCount || ft.inCount != fv.inCount {\n\treturn false\n}",
      "entry" : false,
      "use-vars" : [ 24, 22 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 639,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 13,
          "kind" : "constant",
          "value" : {
            "type" : "BOOL",
            "value" : "false"
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 639,
      "code" : "return false",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 43 ],
      "in-vars" : [ 24, 2, 22 ],
      "exit" : false,
      "out-vars" : [ 2, 22, 27, 28, 24 ],
      "decl-vars" : [ 27, 28 ],
      "line-start" : 641,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "tin"
          }
        }, {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "vin"
          }
        } ],
        "right" : [ {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "function" : 5,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "in"
            },
            "go-type" : 53,
            "kind" : "expression",
            "target" : {
              "go-type" : 49,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "ft",
                "variable" : 22
              }
            },
            "type" : "selector"
          },
          "go-type" : 52,
          "kind" : "expression",
          "type" : "call"
        }, {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "function" : 5,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "in"
            },
            "go-type" : 53,
            "kind" : "expression",
            "target" : {
              "go-type" : 49,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "fv",
                "variable" : 24
              }
            },
            "type" : "selector"
          },
          "go-type" : 52,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 641,
      "code" : "tin, vin := ft.in(), fv.in()",
      "entry" : false,
      "use-vars" : [ 24, 22 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 45, 47 ],
      "in-vars" : [ 22, 27, 26, 28, 24, 2 ],
      "exit" : false,
      "out-vars" : [ 24, 2, 22, 27, 26, 28 ],
      "decl-vars" : [ ],
      "line-start" : 642,
      "ast" : {
        "condition" : {
          "go-type" : 24,
          "kind" : "expression",
          "left" : {
            "go-type" : 55,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "i",
              "variable" : 26
            }
          },
          "operator" : "<",
          "right" : {
            "arguments" : [ {
              "go-type" : 52,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "tin",
                "variable" : 27
              }
            } ],
            "ellipsis" : false,
            "function" : {
              "go-type" : 56,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Builtin",
                "kind" : "ident",
                "value" : "len"
              }
            },
            "go-type" : 55,
            "kind" : "expression",
            "type" : "call"
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "for"
      },
      "assign-vars" : [ ],
      "line-end" : 646,
      "code" : "for i := 0; i < len(tin); i++ {\n\tif !typesEqual(tin[i], vin[i], seen) {\n\t\treturn false\n\t}\n}",
      "entry" : false,
      "use-vars" : [ 26, 27 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 42 ],
      "in-vars" : [ 22, 27, 28, 24, 2 ],
      "exit" : false,
      "out-vars" : [ 2, 22, 27, 26, 28, 24 ],
      "decl-vars" : [ 26 ],
      "line-start" : 642,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "i"
          }
        } ],
        "right" : [ {
          "go-type" : 55,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "0"
          }
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 642,
      "code" : "i := 0",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ 26 ],
      "successors" : [ 42 ],
      "in-vars" : [ 22, 27, 26, 28, 24, 2 ],
      "exit" : false,
      "out-vars" : [ 27, 26, 28, 24, 2, 22 ],
      "decl-vars" : [ ],
      "line-start" : 642,
      "ast" : {
        "kind" : "statement",
        "operation" : "++",
        "target" : {
          "go-type" : 55,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "i",
            "variable" : 26
          }
        },
        "type" : "crement"
      },
      "assign-vars" : [ 26 ],
      "line-end" : 642,
      "code" : "i++",
      "entry" : false,
      "use-vars" : [ 26 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 44, 46 ],
      "in-vars" : [ 2, 22, 27, 26, 28, 24 ],
      "exit" : false,
      "out-vars" : [ 28, 24, 2, 22, 27, 26 ],
      "decl-vars" : [ ],
      "line-start" : 643,
      "ast" : {
        "condition" : {
          "go-type" : 13,
          "kind" : "expression",
          "operator" : "!",
          "target" : {
            "arguments" : [ {
              "go-type" : 2,
              "index" : {
                "go-type" : 55,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "i",
                  "variable" : 26
                }
              },
              "kind" : "expression",
              "target" : {
                "go-type" : 52,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "tin",
                  "variable" : 27
                }
              },
              "type" : "index"
            }, {
              "go-type" : 2,
              "index" : {
                "go-type" : 55,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "i",
                  "variable" : 26
                }
              },
              "kind" : "expression",
              "target" : {
                "go-type" : 52,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "vin",
                  "variable" : 28
                }
              },
              "type" : "index"
            }, {
              "go-type" : 19,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "seen",
                "variable" : 2
              }
            } ],
            "ellipsis" : false,
            "function" : {
              "go-type" : 0,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "function" : 0,
                "ident-kind" : "Func",
                "kind" : "ident",
                "value" : "typesEqual"
              }
            },
            "go-type" : 13,
            "kind" : "expression",
            "type" : "call"
          },
          "type" : "unary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 645,
      "code" : "if !typesEqual(tin[i], vin[i], seen) {\n\treturn false\n}",
      "entry" : false,
      "use-vars" : [ 28, 26, 2, 27 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 644,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 13,
          "kind" : "constant",
          "value" : {
            "type" : "BOOL",
            "value" : "false"
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 644,
      "code" : "return false",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 49 ],
      "in-vars" : [ 2, 22, 24 ],
      "exit" : false,
      "out-vars" : [ 2, 30, 31 ],
      "decl-vars" : [ 30, 31 ],
      "line-start" : 647,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "tout"
          }
        }, {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "vout"
          }
        } ],
        "right" : [ {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "function" : 6,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "out"
            },
            "go-type" : 53,
            "kind" : "expression",
            "target" : {
              "go-type" : 49,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "ft",
                "variable" : 22
              }
            },
            "type" : "selector"
          },
          "go-type" : 52,
          "kind" : "expression",
          "type" : "call"
        }, {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "function" : 6,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "out"
            },
            "go-type" : 53,
            "kind" : "expression",
            "target" : {
              "go-type" : 49,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "fv",
                "variable" : 24
              }
            },
            "type" : "selector"
          },
          "go-type" : 52,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 647,
      "code" : "tout, vout := ft.out(), fv.out()",
      "entry" : false,
      "use-vars" : [ 24, 22 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 51, 53 ],
      "in-vars" : [ 29, 2, 30, 31 ],
      "exit" : false,
      "out-vars" : [ 2, 30, 31, 29 ],
      "decl-vars" : [ ],
      "line-start" : 648,
      "ast" : {
        "condition" : {
          "go-type" : 24,
          "kind" : "expression",
          "left" : {
            "go-type" : 55,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "i",
              "variable" : 29
            }
          },
          "operator" : "<",
          "right" : {
            "arguments" : [ {
              "go-type" : 52,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "tout",
                "variable" : 30
              }
            } ],
            "ellipsis" : false,
            "function" : {
              "go-type" : 56,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Builtin",
                "kind" : "ident",
                "value" : "len"
              }
            },
            "go-type" : 55,
            "kind" : "expression",
            "type" : "call"
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "for"
      },
      "assign-vars" : [ ],
      "line-end" : 652,
      "code" : "for i := 0; i < len(tout); i++ {\n\tif !typesEqual(tout[i], vout[i], seen) {\n\t\treturn false\n\t}\n}",
      "entry" : false,
      "use-vars" : [ 30, 29 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 48 ],
      "in-vars" : [ 2, 30, 31 ],
      "exit" : false,
      "out-vars" : [ 29, 2, 30, 31 ],
      "decl-vars" : [ 29 ],
      "line-start" : 648,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "i"
          }
        } ],
        "right" : [ {
          "go-type" : 55,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "0"
          }
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 648,
      "code" : "i := 0",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ 29 ],
      "successors" : [ 48 ],
      "in-vars" : [ 29, 2, 30, 31 ],
      "exit" : false,
      "out-vars" : [ 30, 31, 29, 2 ],
      "decl-vars" : [ ],
      "line-start" : 648,
      "ast" : {
        "kind" : "statement",
        "operation" : "++",
        "target" : {
          "go-type" : 55,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "i",
            "variable" : 29
          }
        },
        "type" : "crement"
      },
      "assign-vars" : [ 29 ],
      "line-end" : 648,
      "code" : "i++",
      "entry" : false,
      "use-vars" : [ 29 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 50, 52 ],
      "in-vars" : [ 29, 2, 30, 31 ],
      "exit" : false,
      "out-vars" : [ 29, 2, 30, 31 ],
      "decl-vars" : [ ],
      "line-start" : 649,
      "ast" : {
        "condition" : {
          "go-type" : 13,
          "kind" : "expression",
          "operator" : "!",
          "target" : {
            "arguments" : [ {
              "go-type" : 2,
              "index" : {
                "go-type" : 55,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "i",
                  "variable" : 29
                }
              },
              "kind" : "expression",
              "target" : {
                "go-type" : 52,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "tout",
                  "variable" : 30
                }
              },
              "type" : "index"
            }, {
              "go-type" : 2,
              "index" : {
                "go-type" : 55,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "i",
                  "variable" : 29
                }
              },
              "kind" : "expression",
              "target" : {
                "go-type" : 52,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "vout",
                  "variable" : 31
                }
              },
              "type" : "index"
            }, {
              "go-type" : 19,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "seen",
                "variable" : 2
              }
            } ],
            "ellipsis" : false,
            "function" : {
              "go-type" : 0,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "function" : 0,
                "ident-kind" : "Func",
                "kind" : "ident",
                "value" : "typesEqual"
              }
            },
            "go-type" : 13,
            "kind" : "expression",
            "type" : "call"
          },
          "type" : "unary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 651,
      "code" : "if !typesEqual(tout[i], vout[i], seen) {\n\treturn false\n}",
      "entry" : false,
      "use-vars" : [ 29, 2, 30, 31 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 650,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 13,
          "kind" : "constant",
          "value" : {
            "type" : "BOOL",
            "value" : "false"
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 650,
      "code" : "return false",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 653,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 13,
          "kind" : "constant",
          "value" : {
            "type" : "BOOL",
            "value" : "true"
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 653,
      "code" : "return true",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 55 ],
      "in-vars" : [ 0, 2, 1 ],
      "exit" : false,
      "out-vars" : [ 0, 2, 1 ],
      "decl-vars" : [ ],
      "line-start" : 654,
      "ast" : {
        "expressions" : [ {
          "go-type" : 8,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "20"
          }
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 682,
      "code" : "case kindInterface:\n\tit := (*interfacetype)(unsafe.Pointer(t))\n\tiv := (*interfacetype)(unsafe.Pointer(v))\n\tif it.pkgpath.name() != iv.pkgpath.name() {\n\t\treturn false\n\t}\n\tif len(it.mhdr) != len(iv.mhdr) {\n\t\treturn false\n\t}\n\tfor i := range it.mhdr {\n\t\ttm := &it.mhdr[i]\n\t\tvm := &iv.mhdr[i]\n\n\t\ttname := resolveNameOff(unsafe.Pointer(tm), tm.name)\n\t\tvname := resolveNameOff(unsafe.Pointer(vm), vm.name)\n\t\tif tname.name() != vname.name() {\n\t\t\treturn false\n\t\t}\n\t\tif tname.pkgPath() != vname.pkgPath() {\n\t\t\treturn false\n\t\t}\n\t\ttityp := resolveTypeOff(unsafe.Pointer(tm), tm.ityp)\n\t\tvityp := resolveTypeOff(unsafe.Pointer(vm), vm.ityp)\n\t\tif !typesEqual(tityp, vityp, seen) {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn true",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 56 ],
      "in-vars" : [ 0, 2, 1 ],
      "exit" : false,
      "out-vars" : [ 2, 1, 32 ],
      "decl-vars" : [ 32 ],
      "line-start" : 655,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "it"
          }
        } ],
        "right" : [ {
          "coerced-to" : {
            "contained" : {
              "go-type" : 59,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 59,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "interfacetype"
              }
            },
            "go-type" : 58,
            "kind" : "type",
            "type" : "pointer"
          },
          "go-type" : 58,
          "kind" : "expression",
          "target" : {
            "coerced-to" : {
              "go-type" : 11,
              "kind" : "type",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 1,
                "value" : "unsafe"
              },
              "type" : "identifier",
              "value" : {
                "go-type" : 11,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "Pointer"
              }
            },
            "go-type" : 11,
            "kind" : "expression",
            "target" : {
              "go-type" : 2,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "t",
                "variable" : 0
              }
            },
            "type" : "cast"
          },
          "type" : "cast"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 655,
      "code" : "it := (*interfacetype)(unsafe.Pointer(t))",
      "entry" : false,
      "use-vars" : [ 0 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 57 ],
      "in-vars" : [ 2, 1, 32 ],
      "exit" : false,
      "out-vars" : [ 32, 2, 34 ],
      "decl-vars" : [ 34 ],
      "line-start" : 656,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "iv"
          }
        } ],
        "right" : [ {
          "coerced-to" : {
            "contained" : {
              "go-type" : 59,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 59,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "interfacetype"
              }
            },
            "go-type" : 58,
            "kind" : "type",
            "type" : "pointer"
          },
          "go-type" : 58,
          "kind" : "expression",
          "target" : {
            "coerced-to" : {
              "go-type" : 11,
              "kind" : "type",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 1,
                "value" : "unsafe"
              },
              "type" : "identifier",
              "value" : {
                "go-type" : 11,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "Pointer"
              }
            },
            "go-type" : 11,
            "kind" : "expression",
            "target" : {
              "go-type" : 2,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "v",
                "variable" : 1
              }
            },
            "type" : "cast"
          },
          "type" : "cast"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 656,
      "code" : "iv := (*interfacetype)(unsafe.Pointer(v))",
      "entry" : false,
      "use-vars" : [ 1 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 58, 59 ],
      "in-vars" : [ 2, 34, 32 ],
      "exit" : false,
      "out-vars" : [ 2, 34, 32 ],
      "decl-vars" : [ ],
      "line-start" : 657,
      "ast" : {
        "condition" : {
          "go-type" : 24,
          "kind" : "expression",
          "left" : {
            "arguments" : [ ],
            "ellipsis" : false,
            "function" : {
              "field" : {
                "function" : 4,
                "ident-kind" : "Func",
                "kind" : "ident",
                "value" : "name"
              },
              "go-type" : 36,
              "kind" : "expression",
              "target" : {
                "field" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "pkgpath",
                  "variable" : 33
                },
                "go-type" : 38,
                "kind" : "expression",
                "target" : {
                  "go-type" : 58,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "it",
                    "variable" : 32
                  }
                },
                "type" : "selector"
              },
              "type" : "selector"
            },
            "go-type" : 25,
            "kind" : "expression",
            "type" : "call"
          },
          "operator" : "!=",
          "right" : {
            "arguments" : [ ],
            "ellipsis" : false,
            "function" : {
              "field" : {
                "function" : 4,
                "ident-kind" : "Func",
                "kind" : "ident",
                "value" : "name"
              },
              "go-type" : 36,
              "kind" : "expression",
              "target" : {
                "field" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "pkgpath",
                  "variable" : 33
                },
                "go-type" : 38,
                "kind" : "expression",
                "target" : {
                  "go-type" : 58,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "iv",
                    "variable" : 34
                  }
                },
                "type" : "selector"
              },
              "type" : "selector"
            },
            "go-type" : 25,
            "kind" : "expression",
            "type" : "call"
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 659,
      "code" : "if it.pkgpath.name() != iv.pkgpath.name() {\n\treturn false\n}",
      "entry" : false,
      "use-vars" : [ 34, 32 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 658,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 13,
          "kind" : "constant",
          "value" : {
            "type" : "BOOL",
            "value" : "false"
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 658,
      "code" : "return false",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 60, 61 ],
      "in-vars" : [ 2, 34, 32 ],
      "exit" : false,
      "out-vars" : [ 34, 32, 2 ],
      "decl-vars" : [ ],
      "line-start" : 660,
      "ast" : {
        "condition" : {
          "go-type" : 24,
          "kind" : "expression",
          "left" : {
            "arguments" : [ {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "mhdr",
                "variable" : 35
              },
              "go-type" : 61,
              "kind" : "expression",
              "target" : {
                "go-type" : 58,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "it",
                  "variable" : 32
                }
              },
              "type" : "selector"
            } ],
            "ellipsis" : false,
            "function" : {
              "go-type" : 64,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Builtin",
                "kind" : "ident",
                "value" : "len"
              }
            },
            "go-type" : 55,
            "kind" : "expression",
            "type" : "call"
          },
          "operator" : "!=",
          "right" : {
            "arguments" : [ {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "mhdr",
                "variable" : 35
              },
              "go-type" : 61,
              "kind" : "expression",
              "target" : {
                "go-type" : 58,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "iv",
                  "variable" : 34
                }
              },
              "type" : "selector"
            } ],
            "ellipsis" : false,
            "function" : {
              "go-type" : 64,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Builtin",
                "kind" : "ident",
                "value" : "len"
              }
            },
            "go-type" : 55,
            "kind" : "expression",
            "type" : "call"
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 662,
      "code" : "if len(it.mhdr) != len(iv.mhdr) {\n\treturn false\n}",
      "entry" : false,
      "use-vars" : [ 34, 32 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 661,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 13,
          "kind" : "constant",
          "value" : {
            "type" : "BOOL",
            "value" : "false"
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 661,
      "code" : "return false",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 62, 74 ],
      "in-vars" : [ 2, 34, 32 ],
      "exit" : false,
      "out-vars" : [ 2, 34, 36, 32 ],
      "decl-vars" : [ 36 ],
      "line-start" : 663,
      "ast" : {
        "is-assign" : false,
        "key" : {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "i"
          }
        },
        "kind" : "statement",
        "target" : {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "mhdr",
            "variable" : 35
          },
          "go-type" : 61,
          "kind" : "expression",
          "target" : {
            "go-type" : 58,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "it",
              "variable" : 32
            }
          },
          "type" : "selector"
        },
        "type" : "range",
        "value" : null
      },
      "assign-vars" : [ ],
      "line-end" : 681,
      "code" : "for i := range it.mhdr {\n\ttm := &it.mhdr[i]\n\tvm := &iv.mhdr[i]\n\n\ttname := resolveNameOff(unsafe.Pointer(tm), tm.name)\n\tvname := resolveNameOff(unsafe.Pointer(vm), vm.name)\n\tif tname.name() != vname.name() {\n\t\treturn false\n\t}\n\tif tname.pkgPath() != vname.pkgPath() {\n\t\treturn false\n\t}\n\ttityp := resolveTypeOff(unsafe.Pointer(tm), tm.ityp)\n\tvityp := resolveTypeOff(unsafe.Pointer(vm), vm.ityp)\n\tif !typesEqual(tityp, vityp, seen) {\n\t\treturn false\n\t}\n}",
      "entry" : false,
      "use-vars" : [ 32 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 63 ],
      "in-vars" : [ 32, 2, 34, 36 ],
      "exit" : false,
      "out-vars" : [ 34, 36, 32, 37, 2 ],
      "decl-vars" : [ 37 ],
      "line-start" : 664,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "tm"
          }
        } ],
        "right" : [ {
          "go-type" : 66,
          "kind" : "expression",
          "operator" : "&",
          "target" : {
            "go-type" : 62,
            "index" : {
              "go-type" : 55,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "i",
                "variable" : 36
              }
            },
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "mhdr",
                "variable" : 35
              },
              "go-type" : 61,
              "kind" : "expression",
              "target" : {
                "go-type" : 58,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "it",
                  "variable" : 32
                }
              },
              "type" : "selector"
            },
            "type" : "index"
          },
          "type" : "unary"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 664,
      "code" : "tm := &it.mhdr[i]",
      "entry" : false,
      "use-vars" : [ 32, 36 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 64 ],
      "in-vars" : [ 37, 2, 34, 36, 32 ],
      "exit" : false,
      "out-vars" : [ 37, 2, 39, 34, 32 ],
      "decl-vars" : [ 39 ],
      "line-start" : 665,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "vm"
          }
        } ],
        "right" : [ {
          "go-type" : 66,
          "kind" : "expression",
          "operator" : "&",
          "target" : {
            "go-type" : 62,
            "index" : {
              "go-type" : 55,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "i",
                "variable" : 36
              }
            },
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "mhdr",
                "variable" : 35
              },
              "go-type" : 61,
              "kind" : "expression",
              "target" : {
                "go-type" : 58,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "iv",
                  "variable" : 34
                }
              },
              "type" : "selector"
            },
            "type" : "index"
          },
          "type" : "unary"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 665,
      "code" : "vm := &iv.mhdr[i]",
      "entry" : false,
      "use-vars" : [ 34, 36 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 65 ],
      "in-vars" : [ 39, 34, 32, 37, 2 ],
      "exit" : false,
      "out-vars" : [ 40, 2, 39, 34, 32, 37 ],
      "decl-vars" : [ 40 ],
      "line-start" : 668,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "tname"
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "coerced-to" : {
              "go-type" : 11,
              "kind" : "type",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 1,
                "value" : "unsafe"
              },
              "type" : "identifier",
              "value" : {
                "go-type" : 11,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "Pointer"
              }
            },
            "go-type" : 11,
            "kind" : "expression",
            "target" : {
              "go-type" : 66,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "tm",
                "variable" : 37
              }
            },
            "type" : "cast"
          }, {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "name",
              "variable" : 38
            },
            "go-type" : 16,
            "kind" : "expression",
            "target" : {
              "go-type" : 66,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "tm",
                "variable" : 37
              }
            },
            "type" : "selector"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 67,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 7,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "resolveNameOff"
            }
          },
          "go-type" : 38,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 668,
      "code" : "tname := resolveNameOff(unsafe.Pointer(tm), tm.name)",
      "entry" : false,
      "use-vars" : [ 37 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 66 ],
      "in-vars" : [ 34, 32, 37, 40, 2, 39 ],
      "exit" : false,
      "out-vars" : [ 41, 2, 39, 34, 32, 37, 40 ],
      "decl-vars" : [ 41 ],
      "line-start" : 669,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "vname"
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "coerced-to" : {
              "go-type" : 11,
              "kind" : "type",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 1,
                "value" : "unsafe"
              },
              "type" : "identifier",
              "value" : {
                "go-type" : 11,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "Pointer"
              }
            },
            "go-type" : 11,
            "kind" : "expression",
            "target" : {
              "go-type" : 66,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "vm",
                "variable" : 39
              }
            },
            "type" : "cast"
          }, {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "name",
              "variable" : 38
            },
            "go-type" : 16,
            "kind" : "expression",
            "target" : {
              "go-type" : 66,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "vm",
                "variable" : 39
              }
            },
            "type" : "selector"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 67,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 7,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "resolveNameOff"
            }
          },
          "go-type" : 38,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 669,
      "code" : "vname := resolveNameOff(unsafe.Pointer(vm), vm.name)",
      "entry" : false,
      "use-vars" : [ 39 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 67, 68 ],
      "in-vars" : [ 32, 37, 40, 41, 2, 39, 34 ],
      "exit" : false,
      "out-vars" : [ 37, 40, 41, 2, 39, 34, 32 ],
      "decl-vars" : [ ],
      "line-start" : 670,
      "ast" : {
        "condition" : {
          "go-type" : 24,
          "kind" : "expression",
          "left" : {
            "arguments" : [ ],
            "ellipsis" : false,
            "function" : {
              "field" : {
                "function" : 4,
                "ident-kind" : "Func",
                "kind" : "ident",
                "value" : "name"
              },
              "go-type" : 36,
              "kind" : "expression",
              "target" : {
                "go-type" : 38,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "tname",
                  "variable" : 40
                }
              },
              "type" : "selector"
            },
            "go-type" : 25,
            "kind" : "expression",
            "type" : "call"
          },
          "operator" : "!=",
          "right" : {
            "arguments" : [ ],
            "ellipsis" : false,
            "function" : {
              "field" : {
                "function" : 4,
                "ident-kind" : "Func",
                "kind" : "ident",
                "value" : "name"
              },
              "go-type" : 36,
              "kind" : "expression",
              "target" : {
                "go-type" : 38,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "vname",
                  "variable" : 41
                }
              },
              "type" : "selector"
            },
            "go-type" : 25,
            "kind" : "expression",
            "type" : "call"
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 672,
      "code" : "if tname.name() != vname.name() {\n\treturn false\n}",
      "entry" : false,
      "use-vars" : [ 40, 41 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 671,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 13,
          "kind" : "constant",
          "value" : {
            "type" : "BOOL",
            "value" : "false"
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 671,
      "code" : "return false",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 69, 70 ],
      "in-vars" : [ 39, 34, 32, 37, 40, 41, 2 ],
      "exit" : false,
      "out-vars" : [ 2, 39, 34, 32, 37 ],
      "decl-vars" : [ ],
      "line-start" : 673,
      "ast" : {
        "condition" : {
          "go-type" : 24,
          "kind" : "expression",
          "left" : {
            "arguments" : [ ],
            "ellipsis" : false,
            "function" : {
              "field" : {
                "function" : 8,
                "ident-kind" : "Func",
                "kind" : "ident",
                "value" : "pkgPath"
              },
              "go-type" : 26,
              "kind" : "expression",
              "target" : {
                "go-type" : 38,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "tname",
                  "variable" : 40
                }
              },
              "type" : "selector"
            },
            "go-type" : 25,
            "kind" : "expression",
            "type" : "call"
          },
          "operator" : "!=",
          "right" : {
            "arguments" : [ ],
            "ellipsis" : false,
            "function" : {
              "field" : {
                "function" : 8,
                "ident-kind" : "Func",
                "kind" : "ident",
                "value" : "pkgPath"
              },
              "go-type" : 26,
              "kind" : "expression",
              "target" : {
                "go-type" : 38,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "vname",
                  "variable" : 41
                }
              },
              "type" : "selector"
            },
            "go-type" : 25,
            "kind" : "expression",
            "type" : "call"
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 675,
      "code" : "if tname.pkgPath() != vname.pkgPath() {\n\treturn false\n}",
      "entry" : false,
      "use-vars" : [ 40, 41 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 674,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 13,
          "kind" : "constant",
          "value" : {
            "type" : "BOOL",
            "value" : "false"
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 674,
      "code" : "return false",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 71 ],
      "in-vars" : [ 2, 39, 34, 32, 37 ],
      "exit" : false,
      "out-vars" : [ 32, 43, 2, 39, 34 ],
      "decl-vars" : [ 43 ],
      "line-start" : 676,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "tityp"
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "coerced-to" : {
              "go-type" : 11,
              "kind" : "type",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 1,
                "value" : "unsafe"
              },
              "type" : "identifier",
              "value" : {
                "go-type" : 11,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "Pointer"
              }
            },
            "go-type" : 11,
            "kind" : "expression",
            "target" : {
              "go-type" : 66,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "tm",
                "variable" : 37
              }
            },
            "type" : "cast"
          }, {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "ityp",
              "variable" : 42
            },
            "go-type" : 18,
            "kind" : "expression",
            "target" : {
              "go-type" : 66,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "tm",
                "variable" : 37
              }
            },
            "type" : "selector"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 69,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 9,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "resolveTypeOff"
            }
          },
          "go-type" : 2,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 676,
      "code" : "tityp := resolveTypeOff(unsafe.Pointer(tm), tm.ityp)",
      "entry" : false,
      "use-vars" : [ 37 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 72 ],
      "in-vars" : [ 2, 39, 34, 32, 43 ],
      "exit" : false,
      "out-vars" : [ 2, 34, 32, 43, 44 ],
      "decl-vars" : [ 44 ],
      "line-start" : 677,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "vityp"
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "coerced-to" : {
              "go-type" : 11,
              "kind" : "type",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 1,
                "value" : "unsafe"
              },
              "type" : "identifier",
              "value" : {
                "go-type" : 11,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "Pointer"
              }
            },
            "go-type" : 11,
            "kind" : "expression",
            "target" : {
              "go-type" : 66,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "vm",
                "variable" : 39
              }
            },
            "type" : "cast"
          }, {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "ityp",
              "variable" : 42
            },
            "go-type" : 18,
            "kind" : "expression",
            "target" : {
              "go-type" : 66,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "vm",
                "variable" : 39
              }
            },
            "type" : "selector"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 69,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 9,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "resolveTypeOff"
            }
          },
          "go-type" : 2,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 677,
      "code" : "vityp := resolveTypeOff(unsafe.Pointer(vm), vm.ityp)",
      "entry" : false,
      "use-vars" : [ 39 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 61, 73 ],
      "in-vars" : [ 44, 2, 34, 32, 43 ],
      "exit" : false,
      "out-vars" : [ 34, 32, 2 ],
      "decl-vars" : [ ],
      "line-start" : 678,
      "ast" : {
        "condition" : {
          "go-type" : 13,
          "kind" : "expression",
          "operator" : "!",
          "target" : {
            "arguments" : [ {
              "go-type" : 2,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "tityp",
                "variable" : 43
              }
            }, {
              "go-type" : 2,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "vityp",
                "variable" : 44
              }
            }, {
              "go-type" : 19,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "seen",
                "variable" : 2
              }
            } ],
            "ellipsis" : false,
            "function" : {
              "go-type" : 0,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "function" : 0,
                "ident-kind" : "Func",
                "kind" : "ident",
                "value" : "typesEqual"
              }
            },
            "go-type" : 13,
            "kind" : "expression",
            "type" : "call"
          },
          "type" : "unary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 680,
      "code" : "if !typesEqual(tityp, vityp, seen) {\n\treturn false\n}",
      "entry" : false,
      "use-vars" : [ 2, 43, 44 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 679,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 13,
          "kind" : "constant",
          "value" : {
            "type" : "BOOL",
            "value" : "false"
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 679,
      "code" : "return false",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 682,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 13,
          "kind" : "constant",
          "value" : {
            "type" : "BOOL",
            "value" : "true"
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 682,
      "code" : "return true",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 76 ],
      "in-vars" : [ 1, 0, 2 ],
      "exit" : false,
      "out-vars" : [ 0, 2, 1 ],
      "decl-vars" : [ ],
      "line-start" : 683,
      "ast" : {
        "expressions" : [ {
          "go-type" : 8,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "21"
          }
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 686,
      "code" : "case kindMap:\n\tmt := (*maptype)(unsafe.Pointer(t))\n\tmv := (*maptype)(unsafe.Pointer(v))\n\treturn typesEqual(mt.key, mv.key, seen) && typesEqual(mt.elem, mv.elem, seen)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 77 ],
      "in-vars" : [ 2, 1, 0 ],
      "exit" : false,
      "out-vars" : [ 45, 2, 1 ],
      "decl-vars" : [ 45 ],
      "line-start" : 684,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "mt"
          }
        } ],
        "right" : [ {
          "coerced-to" : {
            "contained" : {
              "go-type" : 73,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 73,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "maptype"
              }
            },
            "go-type" : 72,
            "kind" : "type",
            "type" : "pointer"
          },
          "go-type" : 72,
          "kind" : "expression",
          "target" : {
            "coerced-to" : {
              "go-type" : 11,
              "kind" : "type",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 1,
                "value" : "unsafe"
              },
              "type" : "identifier",
              "value" : {
                "go-type" : 11,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "Pointer"
              }
            },
            "go-type" : 11,
            "kind" : "expression",
            "target" : {
              "go-type" : 2,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "t",
                "variable" : 0
              }
            },
            "type" : "cast"
          },
          "type" : "cast"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 684,
      "code" : "mt := (*maptype)(unsafe.Pointer(t))",
      "entry" : false,
      "use-vars" : [ 0 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 78 ],
      "in-vars" : [ 45, 2, 1 ],
      "exit" : false,
      "out-vars" : [ 45, 2, 47 ],
      "decl-vars" : [ 47 ],
      "line-start" : 685,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "mv"
          }
        } ],
        "right" : [ {
          "coerced-to" : {
            "contained" : {
              "go-type" : 73,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 73,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "maptype"
              }
            },
            "go-type" : 72,
            "kind" : "type",
            "type" : "pointer"
          },
          "go-type" : 72,
          "kind" : "expression",
          "target" : {
            "coerced-to" : {
              "go-type" : 11,
              "kind" : "type",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 1,
                "value" : "unsafe"
              },
              "type" : "identifier",
              "value" : {
                "go-type" : 11,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "Pointer"
              }
            },
            "go-type" : 11,
            "kind" : "expression",
            "target" : {
              "go-type" : 2,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "v",
                "variable" : 1
              }
            },
            "type" : "cast"
          },
          "type" : "cast"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 685,
      "code" : "mv := (*maptype)(unsafe.Pointer(v))",
      "entry" : false,
      "use-vars" : [ 1 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 45, 2, 47 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 686,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 13,
          "kind" : "expression",
          "left" : {
            "arguments" : [ {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "key",
                "variable" : 46
              },
              "go-type" : 2,
              "kind" : "expression",
              "target" : {
                "go-type" : 72,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "mt",
                  "variable" : 45
                }
              },
              "type" : "selector"
            }, {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "key",
                "variable" : 46
              },
              "go-type" : 2,
              "kind" : "expression",
              "target" : {
                "go-type" : 72,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "mv",
                  "variable" : 47
                }
              },
              "type" : "selector"
            }, {
              "go-type" : 19,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "seen",
                "variable" : 2
              }
            } ],
            "ellipsis" : false,
            "function" : {
              "go-type" : 0,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "function" : 0,
                "ident-kind" : "Func",
                "kind" : "ident",
                "value" : "typesEqual"
              }
            },
            "go-type" : 13,
            "kind" : "expression",
            "type" : "call"
          },
          "operator" : "&&",
          "right" : {
            "arguments" : [ {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "elem",
                "variable" : 48
              },
              "go-type" : 2,
              "kind" : "expression",
              "target" : {
                "go-type" : 72,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "mt",
                  "variable" : 45
                }
              },
              "type" : "selector"
            }, {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "elem",
                "variable" : 48
              },
              "go-type" : 2,
              "kind" : "expression",
              "target" : {
                "go-type" : 72,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "mv",
                  "variable" : 47
                }
              },
              "type" : "selector"
            }, {
              "go-type" : 19,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "seen",
                "variable" : 2
              }
            } ],
            "ellipsis" : false,
            "function" : {
              "go-type" : 0,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "function" : 0,
                "ident-kind" : "Func",
                "kind" : "ident",
                "value" : "typesEqual"
              }
            },
            "go-type" : 13,
            "kind" : "expression",
            "type" : "call"
          },
          "type" : "binary"
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 686,
      "code" : "return typesEqual(mt.key, mv.key, seen) && typesEqual(mt.elem, mv.elem, seen)",
      "entry" : false,
      "use-vars" : [ 47, 45, 2 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 80 ],
      "in-vars" : [ 1, 0, 2 ],
      "exit" : false,
      "out-vars" : [ 0, 2, 1 ],
      "decl-vars" : [ ],
      "line-start" : 687,
      "ast" : {
        "expressions" : [ {
          "go-type" : 8,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "22"
          }
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 690,
      "code" : "case kindPtr:\n\tpt := (*ptrtype)(unsafe.Pointer(t))\n\tpv := (*ptrtype)(unsafe.Pointer(v))\n\treturn typesEqual(pt.elem, pv.elem, seen)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 81 ],
      "in-vars" : [ 0, 2, 1 ],
      "exit" : false,
      "out-vars" : [ 2, 1, 49 ],
      "decl-vars" : [ 49 ],
      "line-start" : 688,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "pt"
          }
        } ],
        "right" : [ {
          "coerced-to" : {
            "contained" : {
              "go-type" : 79,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 79,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "ptrtype"
              }
            },
            "go-type" : 78,
            "kind" : "type",
            "type" : "pointer"
          },
          "go-type" : 78,
          "kind" : "expression",
          "target" : {
            "coerced-to" : {
              "go-type" : 11,
              "kind" : "type",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 1,
                "value" : "unsafe"
              },
              "type" : "identifier",
              "value" : {
                "go-type" : 11,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "Pointer"
              }
            },
            "go-type" : 11,
            "kind" : "expression",
            "target" : {
              "go-type" : 2,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "t",
                "variable" : 0
              }
            },
            "type" : "cast"
          },
          "type" : "cast"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 688,
      "code" : "pt := (*ptrtype)(unsafe.Pointer(t))",
      "entry" : false,
      "use-vars" : [ 0 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 82 ],
      "in-vars" : [ 2, 1, 49 ],
      "exit" : false,
      "out-vars" : [ 51, 2, 49 ],
      "decl-vars" : [ 51 ],
      "line-start" : 689,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "pv"
          }
        } ],
        "right" : [ {
          "coerced-to" : {
            "contained" : {
              "go-type" : 79,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 79,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "ptrtype"
              }
            },
            "go-type" : 78,
            "kind" : "type",
            "type" : "pointer"
          },
          "go-type" : 78,
          "kind" : "expression",
          "target" : {
            "coerced-to" : {
              "go-type" : 11,
              "kind" : "type",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 1,
                "value" : "unsafe"
              },
              "type" : "identifier",
              "value" : {
                "go-type" : 11,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "Pointer"
              }
            },
            "go-type" : 11,
            "kind" : "expression",
            "target" : {
              "go-type" : 2,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "v",
                "variable" : 1
              }
            },
            "type" : "cast"
          },
          "type" : "cast"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 689,
      "code" : "pv := (*ptrtype)(unsafe.Pointer(v))",
      "entry" : false,
      "use-vars" : [ 1 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 2, 49, 51 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 690,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "arguments" : [ {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "elem",
              "variable" : 50
            },
            "go-type" : 2,
            "kind" : "expression",
            "target" : {
              "go-type" : 78,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "pt",
                "variable" : 49
              }
            },
            "type" : "selector"
          }, {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "elem",
              "variable" : 50
            },
            "go-type" : 2,
            "kind" : "expression",
            "target" : {
              "go-type" : 78,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "pv",
                "variable" : 51
              }
            },
            "type" : "selector"
          }, {
            "go-type" : 19,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "seen",
              "variable" : 2
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 0,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 0,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "typesEqual"
            }
          },
          "go-type" : 13,
          "kind" : "expression",
          "type" : "call"
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 690,
      "code" : "return typesEqual(pt.elem, pv.elem, seen)",
      "entry" : false,
      "use-vars" : [ 49, 51, 2 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 84 ],
      "in-vars" : [ 0, 2, 1 ],
      "exit" : false,
      "out-vars" : [ 0, 2, 1 ],
      "decl-vars" : [ ],
      "line-start" : 691,
      "ast" : {
        "expressions" : [ {
          "go-type" : 8,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "23"
          }
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 694,
      "code" : "case kindSlice:\n\tst := (*slicetype)(unsafe.Pointer(t))\n\tsv := (*slicetype)(unsafe.Pointer(v))\n\treturn typesEqual(st.elem, sv.elem, seen)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 85 ],
      "in-vars" : [ 0, 2, 1 ],
      "exit" : false,
      "out-vars" : [ 2, 1, 52 ],
      "decl-vars" : [ 52 ],
      "line-start" : 692,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "st"
          }
        } ],
        "right" : [ {
          "coerced-to" : {
            "contained" : {
              "go-type" : 82,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 82,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "slicetype"
              }
            },
            "go-type" : 81,
            "kind" : "type",
            "type" : "pointer"
          },
          "go-type" : 81,
          "kind" : "expression",
          "target" : {
            "coerced-to" : {
              "go-type" : 11,
              "kind" : "type",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 1,
                "value" : "unsafe"
              },
              "type" : "identifier",
              "value" : {
                "go-type" : 11,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "Pointer"
              }
            },
            "go-type" : 11,
            "kind" : "expression",
            "target" : {
              "go-type" : 2,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "t",
                "variable" : 0
              }
            },
            "type" : "cast"
          },
          "type" : "cast"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 692,
      "code" : "st := (*slicetype)(unsafe.Pointer(t))",
      "entry" : false,
      "use-vars" : [ 0 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 86 ],
      "in-vars" : [ 2, 1, 52 ],
      "exit" : false,
      "out-vars" : [ 52, 54, 2 ],
      "decl-vars" : [ 54 ],
      "line-start" : 693,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "sv"
          }
        } ],
        "right" : [ {
          "coerced-to" : {
            "contained" : {
              "go-type" : 82,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 82,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "slicetype"
              }
            },
            "go-type" : 81,
            "kind" : "type",
            "type" : "pointer"
          },
          "go-type" : 81,
          "kind" : "expression",
          "target" : {
            "coerced-to" : {
              "go-type" : 11,
              "kind" : "type",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 1,
                "value" : "unsafe"
              },
              "type" : "identifier",
              "value" : {
                "go-type" : 11,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "Pointer"
              }
            },
            "go-type" : 11,
            "kind" : "expression",
            "target" : {
              "go-type" : 2,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "v",
                "variable" : 1
              }
            },
            "type" : "cast"
          },
          "type" : "cast"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 693,
      "code" : "sv := (*slicetype)(unsafe.Pointer(v))",
      "entry" : false,
      "use-vars" : [ 1 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 2, 52, 54 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 694,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "arguments" : [ {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "elem",
              "variable" : 53
            },
            "go-type" : 2,
            "kind" : "expression",
            "target" : {
              "go-type" : 81,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "st",
                "variable" : 52
              }
            },
            "type" : "selector"
          }, {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "elem",
              "variable" : 53
            },
            "go-type" : 2,
            "kind" : "expression",
            "target" : {
              "go-type" : 81,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "sv",
                "variable" : 54
              }
            },
            "type" : "selector"
          }, {
            "go-type" : 19,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "seen",
              "variable" : 2
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 0,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 0,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "typesEqual"
            }
          },
          "go-type" : 13,
          "kind" : "expression",
          "type" : "call"
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 694,
      "code" : "return typesEqual(st.elem, sv.elem, seen)",
      "entry" : false,
      "use-vars" : [ 54, 2, 52 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 88 ],
      "in-vars" : [ 0, 2, 1 ],
      "exit" : false,
      "out-vars" : [ 2, 1, 0 ],
      "decl-vars" : [ ],
      "line-start" : 695,
      "ast" : {
        "expressions" : [ {
          "go-type" : 8,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "25"
          }
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 720,
      "code" : "case kindStruct:\n\tst := (*structtype)(unsafe.Pointer(t))\n\tsv := (*structtype)(unsafe.Pointer(v))\n\tif len(st.fields) != len(sv.fields) {\n\t\treturn false\n\t}\n\tif st.pkgPath.name() != sv.pkgPath.name() {\n\t\treturn false\n\t}\n\tfor i := range st.fields {\n\t\ttf := &st.fields[i]\n\t\tvf := &sv.fields[i]\n\t\tif tf.name.name() != vf.name.name() {\n\t\t\treturn false\n\t\t}\n\t\tif !typesEqual(tf.typ, vf.typ, seen) {\n\t\t\treturn false\n\t\t}\n\t\tif tf.name.tag() != vf.name.tag() {\n\t\t\treturn false\n\t\t}\n\t\tif tf.offsetAnon != vf.offsetAnon {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn true",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 89 ],
      "in-vars" : [ 0, 2, 1 ],
      "exit" : false,
      "out-vars" : [ 2, 1, 55 ],
      "decl-vars" : [ 55 ],
      "line-start" : 696,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "st"
          }
        } ],
        "right" : [ {
          "coerced-to" : {
            "contained" : {
              "go-type" : 84,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 84,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "structtype"
              }
            },
            "go-type" : 83,
            "kind" : "type",
            "type" : "pointer"
          },
          "go-type" : 83,
          "kind" : "expression",
          "target" : {
            "coerced-to" : {
              "go-type" : 11,
              "kind" : "type",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 1,
                "value" : "unsafe"
              },
              "type" : "identifier",
              "value" : {
                "go-type" : 11,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "Pointer"
              }
            },
            "go-type" : 11,
            "kind" : "expression",
            "target" : {
              "go-type" : 2,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "t",
                "variable" : 0
              }
            },
            "type" : "cast"
          },
          "type" : "cast"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 696,
      "code" : "st := (*structtype)(unsafe.Pointer(t))",
      "entry" : false,
      "use-vars" : [ 0 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 90 ],
      "in-vars" : [ 55, 2, 1 ],
      "exit" : false,
      "out-vars" : [ 55, 2, 57 ],
      "decl-vars" : [ 57 ],
      "line-start" : 697,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "sv"
          }
        } ],
        "right" : [ {
          "coerced-to" : {
            "contained" : {
              "go-type" : 84,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 84,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "structtype"
              }
            },
            "go-type" : 83,
            "kind" : "type",
            "type" : "pointer"
          },
          "go-type" : 83,
          "kind" : "expression",
          "target" : {
            "coerced-to" : {
              "go-type" : 11,
              "kind" : "type",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 1,
                "value" : "unsafe"
              },
              "type" : "identifier",
              "value" : {
                "go-type" : 11,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "Pointer"
              }
            },
            "go-type" : 11,
            "kind" : "expression",
            "target" : {
              "go-type" : 2,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "v",
                "variable" : 1
              }
            },
            "type" : "cast"
          },
          "type" : "cast"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 697,
      "code" : "sv := (*structtype)(unsafe.Pointer(v))",
      "entry" : false,
      "use-vars" : [ 1 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 91, 92 ],
      "in-vars" : [ 55, 2, 57 ],
      "exit" : false,
      "out-vars" : [ 55, 2, 57 ],
      "decl-vars" : [ ],
      "line-start" : 698,
      "ast" : {
        "condition" : {
          "go-type" : 24,
          "kind" : "expression",
          "left" : {
            "arguments" : [ {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "fields",
                "variable" : 56
              },
              "go-type" : 86,
              "kind" : "expression",
              "target" : {
                "go-type" : 83,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "st",
                  "variable" : 55
                }
              },
              "type" : "selector"
            } ],
            "ellipsis" : false,
            "function" : {
              "go-type" : 89,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Builtin",
                "kind" : "ident",
                "value" : "len"
              }
            },
            "go-type" : 55,
            "kind" : "expression",
            "type" : "call"
          },
          "operator" : "!=",
          "right" : {
            "arguments" : [ {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "fields",
                "variable" : 56
              },
              "go-type" : 86,
              "kind" : "expression",
              "target" : {
                "go-type" : 83,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "sv",
                  "variable" : 57
                }
              },
              "type" : "selector"
            } ],
            "ellipsis" : false,
            "function" : {
              "go-type" : 89,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Builtin",
                "kind" : "ident",
                "value" : "len"
              }
            },
            "go-type" : 55,
            "kind" : "expression",
            "type" : "call"
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 700,
      "code" : "if len(st.fields) != len(sv.fields) {\n\treturn false\n}",
      "entry" : false,
      "use-vars" : [ 55, 57 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 699,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 13,
          "kind" : "constant",
          "value" : {
            "type" : "BOOL",
            "value" : "false"
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 699,
      "code" : "return false",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 93, 94 ],
      "in-vars" : [ 55, 2, 57 ],
      "exit" : false,
      "out-vars" : [ 55, 2, 57 ],
      "decl-vars" : [ ],
      "line-start" : 701,
      "ast" : {
        "condition" : {
          "go-type" : 24,
          "kind" : "expression",
          "left" : {
            "arguments" : [ ],
            "ellipsis" : false,
            "function" : {
              "field" : {
                "function" : 4,
                "ident-kind" : "Func",
                "kind" : "ident",
                "value" : "name"
              },
              "go-type" : 36,
              "kind" : "expression",
              "target" : {
                "field" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "pkgPath",
                  "variable" : 58
                },
                "go-type" : 38,
                "kind" : "expression",
                "target" : {
                  "go-type" : 83,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "st",
                    "variable" : 55
                  }
                },
                "type" : "selector"
              },
              "type" : "selector"
            },
            "go-type" : 25,
            "kind" : "expression",
            "type" : "call"
          },
          "operator" : "!=",
          "right" : {
            "arguments" : [ ],
            "ellipsis" : false,
            "function" : {
              "field" : {
                "function" : 4,
                "ident-kind" : "Func",
                "kind" : "ident",
                "value" : "name"
              },
              "go-type" : 36,
              "kind" : "expression",
              "target" : {
                "field" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "pkgPath",
                  "variable" : 58
                },
                "go-type" : 38,
                "kind" : "expression",
                "target" : {
                  "go-type" : 83,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "sv",
                    "variable" : 57
                  }
                },
                "type" : "selector"
              },
              "type" : "selector"
            },
            "go-type" : 25,
            "kind" : "expression",
            "type" : "call"
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 703,
      "code" : "if st.pkgPath.name() != sv.pkgPath.name() {\n\treturn false\n}",
      "entry" : false,
      "use-vars" : [ 57, 55 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 702,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 13,
          "kind" : "constant",
          "value" : {
            "type" : "BOOL",
            "value" : "false"
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 702,
      "code" : "return false",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 95, 105 ],
      "in-vars" : [ 55, 2, 57 ],
      "exit" : false,
      "out-vars" : [ 59, 55, 2, 57 ],
      "decl-vars" : [ 59 ],
      "line-start" : 704,
      "ast" : {
        "is-assign" : false,
        "key" : {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "i"
          }
        },
        "kind" : "statement",
        "target" : {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "fields",
            "variable" : 56
          },
          "go-type" : 86,
          "kind" : "expression",
          "target" : {
            "go-type" : 83,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "st",
              "variable" : 55
            }
          },
          "type" : "selector"
        },
        "type" : "range",
        "value" : null
      },
      "assign-vars" : [ ],
      "line-end" : 719,
      "code" : "for i := range st.fields {\n\ttf := &st.fields[i]\n\tvf := &sv.fields[i]\n\tif tf.name.name() != vf.name.name() {\n\t\treturn false\n\t}\n\tif !typesEqual(tf.typ, vf.typ, seen) {\n\t\treturn false\n\t}\n\tif tf.name.tag() != vf.name.tag() {\n\t\treturn false\n\t}\n\tif tf.offsetAnon != vf.offsetAnon {\n\t\treturn false\n\t}\n}",
      "entry" : false,
      "use-vars" : [ 55 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 96 ],
      "in-vars" : [ 59, 55, 2, 57 ],
      "exit" : false,
      "out-vars" : [ 59, 55, 2, 57, 60 ],
      "decl-vars" : [ 60 ],
      "line-start" : 705,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "tf"
          }
        } ],
        "right" : [ {
          "go-type" : 91,
          "kind" : "expression",
          "operator" : "&",
          "target" : {
            "go-type" : 87,
            "index" : {
              "go-type" : 55,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "i",
                "variable" : 59
              }
            },
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "fields",
                "variable" : 56
              },
              "go-type" : 86,
              "kind" : "expression",
              "target" : {
                "go-type" : 83,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "st",
                  "variable" : 55
                }
              },
              "type" : "selector"
            },
            "type" : "index"
          },
          "type" : "unary"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 705,
      "code" : "tf := &st.fields[i]",
      "entry" : false,
      "use-vars" : [ 55, 59 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 97 ],
      "in-vars" : [ 55, 2, 57, 60, 59 ],
      "exit" : false,
      "out-vars" : [ 62, 57, 60, 55, 2 ],
      "decl-vars" : [ 62 ],
      "line-start" : 706,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "vf"
          }
        } ],
        "right" : [ {
          "go-type" : 91,
          "kind" : "expression",
          "operator" : "&",
          "target" : {
            "go-type" : 87,
            "index" : {
              "go-type" : 55,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "i",
                "variable" : 59
              }
            },
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "fields",
                "variable" : 56
              },
              "go-type" : 86,
              "kind" : "expression",
              "target" : {
                "go-type" : 83,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "sv",
                  "variable" : 57
                }
              },
              "type" : "selector"
            },
            "type" : "index"
          },
          "type" : "unary"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 706,
      "code" : "vf := &sv.fields[i]",
      "entry" : false,
      "use-vars" : [ 57, 59 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 98, 99 ],
      "in-vars" : [ 55, 2, 62, 57, 60 ],
      "exit" : false,
      "out-vars" : [ 55, 2, 62, 57, 60 ],
      "decl-vars" : [ ],
      "line-start" : 707,
      "ast" : {
        "condition" : {
          "go-type" : 24,
          "kind" : "expression",
          "left" : {
            "arguments" : [ ],
            "ellipsis" : false,
            "function" : {
              "field" : {
                "function" : 4,
                "ident-kind" : "Func",
                "kind" : "ident",
                "value" : "name"
              },
              "go-type" : 36,
              "kind" : "expression",
              "target" : {
                "field" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "name",
                  "variable" : 61
                },
                "go-type" : 38,
                "kind" : "expression",
                "target" : {
                  "go-type" : 91,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "tf",
                    "variable" : 60
                  }
                },
                "type" : "selector"
              },
              "type" : "selector"
            },
            "go-type" : 25,
            "kind" : "expression",
            "type" : "call"
          },
          "operator" : "!=",
          "right" : {
            "arguments" : [ ],
            "ellipsis" : false,
            "function" : {
              "field" : {
                "function" : 4,
                "ident-kind" : "Func",
                "kind" : "ident",
                "value" : "name"
              },
              "go-type" : 36,
              "kind" : "expression",
              "target" : {
                "field" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "name",
                  "variable" : 61
                },
                "go-type" : 38,
                "kind" : "expression",
                "target" : {
                  "go-type" : 91,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "vf",
                    "variable" : 62
                  }
                },
                "type" : "selector"
              },
              "type" : "selector"
            },
            "go-type" : 25,
            "kind" : "expression",
            "type" : "call"
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 709,
      "code" : "if tf.name.name() != vf.name.name() {\n\treturn false\n}",
      "entry" : false,
      "use-vars" : [ 60, 62 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 708,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 13,
          "kind" : "constant",
          "value" : {
            "type" : "BOOL",
            "value" : "false"
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 708,
      "code" : "return false",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 100, 101 ],
      "in-vars" : [ 62, 57, 60, 55, 2 ],
      "exit" : false,
      "out-vars" : [ 57, 60, 55, 2, 62 ],
      "decl-vars" : [ ],
      "line-start" : 710,
      "ast" : {
        "condition" : {
          "go-type" : 13,
          "kind" : "expression",
          "operator" : "!",
          "target" : {
            "arguments" : [ {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "typ",
                "variable" : 63
              },
              "go-type" : 2,
              "kind" : "expression",
              "target" : {
                "go-type" : 91,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "tf",
                  "variable" : 60
                }
              },
              "type" : "selector"
            }, {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "typ",
                "variable" : 63
              },
              "go-type" : 2,
              "kind" : "expression",
              "target" : {
                "go-type" : 91,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "vf",
                  "variable" : 62
                }
              },
              "type" : "selector"
            }, {
              "go-type" : 19,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "seen",
                "variable" : 2
              }
            } ],
            "ellipsis" : false,
            "function" : {
              "go-type" : 0,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "function" : 0,
                "ident-kind" : "Func",
                "kind" : "ident",
                "value" : "typesEqual"
              }
            },
            "go-type" : 13,
            "kind" : "expression",
            "type" : "call"
          },
          "type" : "unary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 712,
      "code" : "if !typesEqual(tf.typ, vf.typ, seen) {\n\treturn false\n}",
      "entry" : false,
      "use-vars" : [ 62, 2, 60 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 711,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 13,
          "kind" : "constant",
          "value" : {
            "type" : "BOOL",
            "value" : "false"
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 711,
      "code" : "return false",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 102, 103 ],
      "in-vars" : [ 55, 2, 62, 57, 60 ],
      "exit" : false,
      "out-vars" : [ 55, 2, 62, 57, 60 ],
      "decl-vars" : [ ],
      "line-start" : 713,
      "ast" : {
        "condition" : {
          "go-type" : 24,
          "kind" : "expression",
          "left" : {
            "arguments" : [ ],
            "ellipsis" : false,
            "function" : {
              "field" : {
                "function" : 10,
                "ident-kind" : "Func",
                "kind" : "ident",
                "value" : "tag"
              },
              "go-type" : 36,
              "kind" : "expression",
              "target" : {
                "field" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "name",
                  "variable" : 61
                },
                "go-type" : 38,
                "kind" : "expression",
                "target" : {
                  "go-type" : 91,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "tf",
                    "variable" : 60
                  }
                },
                "type" : "selector"
              },
              "type" : "selector"
            },
            "go-type" : 25,
            "kind" : "expression",
            "type" : "call"
          },
          "operator" : "!=",
          "right" : {
            "arguments" : [ ],
            "ellipsis" : false,
            "function" : {
              "field" : {
                "function" : 10,
                "ident-kind" : "Func",
                "kind" : "ident",
                "value" : "tag"
              },
              "go-type" : 36,
              "kind" : "expression",
              "target" : {
                "field" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "name",
                  "variable" : 61
                },
                "go-type" : 38,
                "kind" : "expression",
                "target" : {
                  "go-type" : 91,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "vf",
                    "variable" : 62
                  }
                },
                "type" : "selector"
              },
              "type" : "selector"
            },
            "go-type" : 25,
            "kind" : "expression",
            "type" : "call"
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 715,
      "code" : "if tf.name.tag() != vf.name.tag() {\n\treturn false\n}",
      "entry" : false,
      "use-vars" : [ 60, 62 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 714,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 13,
          "kind" : "constant",
          "value" : {
            "type" : "BOOL",
            "value" : "false"
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 714,
      "code" : "return false",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 94, 104 ],
      "in-vars" : [ 55, 2, 62, 57, 60 ],
      "exit" : false,
      "out-vars" : [ 55, 2, 57 ],
      "decl-vars" : [ ],
      "line-start" : 716,
      "ast" : {
        "condition" : {
          "go-type" : 24,
          "kind" : "expression",
          "left" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "offsetAnon",
              "variable" : 64
            },
            "go-type" : 5,
            "kind" : "expression",
            "target" : {
              "go-type" : 91,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "tf",
                "variable" : 60
              }
            },
            "type" : "selector"
          },
          "operator" : "!=",
          "right" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "offsetAnon",
              "variable" : 64
            },
            "go-type" : 5,
            "kind" : "expression",
            "target" : {
              "go-type" : 91,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "vf",
                "variable" : 62
              }
            },
            "type" : "selector"
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 718,
      "code" : "if tf.offsetAnon != vf.offsetAnon {\n\treturn false\n}",
      "entry" : false,
      "use-vars" : [ 60, 62 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 717,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 13,
          "kind" : "constant",
          "value" : {
            "type" : "BOOL",
            "value" : "false"
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 717,
      "code" : "return false",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 720,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 13,
          "kind" : "constant",
          "value" : {
            "type" : "BOOL",
            "value" : "true"
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 720,
      "code" : "return true",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 107 ],
      "in-vars" : [ 8 ],
      "exit" : false,
      "out-vars" : [ 8 ],
      "decl-vars" : [ ],
      "line-start" : 721,
      "ast" : {
        "expressions" : [ ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 724,
      "code" : "default:\n\tprintln(\"runtime: impossible type kind\", kind)\n\tthrow(\"runtime: impossible type kind\")\n\treturn false",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 108 ],
      "in-vars" : [ 8 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 722,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 25,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "runtime: impossible type kind"
            }
          }, {
            "go-type" : 8,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "kind",
              "variable" : 8
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 92,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Builtin",
              "kind" : "ident",
              "value" : "println"
            }
          },
          "go-type" : 27,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 722,
      "code" : "println(\"runtime: impossible type kind\", kind)",
      "entry" : false,
      "use-vars" : [ 8 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 109 ],
      "in-vars" : [ ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 723,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 25,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "runtime: impossible type kind"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 94,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 11,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "throw"
            }
          },
          "go-type" : 27,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 723,
      "code" : "throw(\"runtime: impossible type kind\")",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 724,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 13,
          "kind" : "constant",
          "value" : {
            "type" : "BOOL",
            "value" : "false"
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 724,
      "code" : "return false",
      "entry" : false,
      "use-vars" : [ ]
    } ],
    "code" : "// typesEqual reports whether two types are equal.\n//\n// Everywhere in the runtime and reflect packages, it is assumed that\n// there is exactly one *_type per Go type, so that pointer equality\n// can be used to test if types are equal. There is one place that\n// breaks this assumption: buildmode=shared. In this case a type can\n// appear as two different pieces of memory. This is hidden from the\n// runtime and reflect package by the per-module typemap built in\n// typelinksinit. It uses typesEqual to map types from later modules\n// back into earlier ones.\n//\n// Only typelinksinit needs this function.\nfunc typesEqual(t, v *_type, seen map[_typePair]struct{}) bool {\n\ttp := _typePair{t, v}\n\tif _, ok := seen[tp]; ok {\n\t\treturn true\n\t}\n\n\tseen[tp] = struct{}{}\n\n\tif t == v {\n\t\treturn true\n\t}\n\tkind := t.kind & kindMask\n\tif kind != v.kind&kindMask {\n\t\treturn false\n\t}\n\tif t.string() != v.string() {\n\t\treturn false\n\t}\n\tut := t.uncommon()\n\tuv := v.uncommon()\n\tif ut != nil || uv != nil {\n\t\tif ut == nil || uv == nil {\n\t\t\treturn false\n\t\t}\n\t\tpkgpatht := t.nameOff(ut.pkgpath).name()\n\t\tpkgpathv := v.nameOff(uv.pkgpath).name()\n\t\tif pkgpatht != pkgpathv {\n\t\t\treturn false\n\t\t}\n\t}\n\tif kindBool <= kind && kind <= kindComplex128 {\n\t\treturn true\n\t}\n\tswitch kind {\n\tcase kindString, kindUnsafePointer:\n\t\treturn true\n\tcase kindArray:\n\t\tat := (*arraytype)(unsafe.Pointer(t))\n\t\tav := (*arraytype)(unsafe.Pointer(v))\n\t\treturn typesEqual(at.elem, av.elem, seen) && at.len == av.len\n\tcase kindChan:\n\t\tct := (*chantype)(unsafe.Pointer(t))\n\t\tcv := (*chantype)(unsafe.Pointer(v))\n\t\treturn ct.dir == cv.dir && typesEqual(ct.elem, cv.elem, seen)\n\tcase kindFunc:\n\t\tft := (*functype)(unsafe.Pointer(t))\n\t\tfv := (*functype)(unsafe.Pointer(v))\n\t\tif ft.outCount != fv.outCount || ft.inCount != fv.inCount {\n\t\t\treturn false\n\t\t}\n\t\ttin, vin := ft.in(), fv.in()\n\t\tfor i := 0; i < len(tin); i++ {\n\t\t\tif !typesEqual(tin[i], vin[i], seen) {\n\t\t\t\treturn false\n\t\t\t}\n\t\t}\n\t\ttout, vout := ft.out(), fv.out()\n\t\tfor i := 0; i < len(tout); i++ {\n\t\t\tif !typesEqual(tout[i], vout[i], seen) {\n\t\t\t\treturn false\n\t\t\t}\n\t\t}\n\t\treturn true\n\tcase kindInterface:\n\t\tit := (*interfacetype)(unsafe.Pointer(t))\n\t\tiv := (*interfacetype)(unsafe.Pointer(v))\n\t\tif it.pkgpath.name() != iv.pkgpath.name() {\n\t\t\treturn false\n\t\t}\n\t\tif len(it.mhdr) != len(iv.mhdr) {\n\t\t\treturn false\n\t\t}\n\t\tfor i := range it.mhdr {\n\t\t\ttm := &it.mhdr[i]\n\t\t\tvm := &iv.mhdr[i]\n\n\t\t\ttname := resolveNameOff(unsafe.Pointer(tm), tm.name)\n\t\t\tvname := resolveNameOff(unsafe.Pointer(vm), vm.name)\n\t\t\tif tname.name() != vname.name() {\n\t\t\t\treturn false\n\t\t\t}\n\t\t\tif tname.pkgPath() != vname.pkgPath() {\n\t\t\t\treturn false\n\t\t\t}\n\t\t\ttityp := resolveTypeOff(unsafe.Pointer(tm), tm.ityp)\n\t\t\tvityp := resolveTypeOff(unsafe.Pointer(vm), vm.ityp)\n\t\t\tif !typesEqual(tityp, vityp, seen) {\n\t\t\t\treturn false\n\t\t\t}\n\t\t}\n\t\treturn true\n\tcase kindMap:\n\t\tmt := (*maptype)(unsafe.Pointer(t))\n\t\tmv := (*maptype)(unsafe.Pointer(v))\n\t\treturn typesEqual(mt.key, mv.key, seen) && typesEqual(mt.elem, mv.elem, seen)\n\tcase kindPtr:\n\t\tpt := (*ptrtype)(unsafe.Pointer(t))\n\t\tpv := (*ptrtype)(unsafe.Pointer(v))\n\t\treturn typesEqual(pt.elem, pv.elem, seen)\n\tcase kindSlice:\n\t\tst := (*slicetype)(unsafe.Pointer(t))\n\t\tsv := (*slicetype)(unsafe.Pointer(v))\n\t\treturn typesEqual(st.elem, sv.elem, seen)\n\tcase kindStruct:\n\t\tst := (*structtype)(unsafe.Pointer(t))\n\t\tsv := (*structtype)(unsafe.Pointer(v))\n\t\tif len(st.fields) != len(sv.fields) {\n\t\t\treturn false\n\t\t}\n\t\tif st.pkgPath.name() != sv.pkgPath.name() {\n\t\t\treturn false\n\t\t}\n\t\tfor i := range st.fields {\n\t\t\ttf := &st.fields[i]\n\t\t\tvf := &sv.fields[i]\n\t\t\tif tf.name.name() != vf.name.name() {\n\t\t\t\treturn false\n\t\t\t}\n\t\t\tif !typesEqual(tf.typ, vf.typ, seen) {\n\t\t\t\treturn false\n\t\t\t}\n\t\t\tif tf.name.tag() != vf.name.tag() {\n\t\t\t\treturn false\n\t\t\t}\n\t\t\tif tf.offsetAnon != vf.offsetAnon {\n\t\t\t\treturn false\n\t\t\t}\n\t\t}\n\t\treturn true\n\tdefault:\n\t\tprintln(\"runtime: impossible type kind\", kind)\n\t\tthrow(\"runtime: impossible type kind\")\n\t\treturn false\n\t}\n}",
    "defines" : [ 0 ],
    "functions" : [ {
      "name" : "typesEqual",
      "package" : 0,
      "type" : 0,
      "exported" : false
    }, {
      "name" : "string",
      "package" : 0,
      "type" : 26,
      "exported" : false
    }, {
      "name" : "uncommon",
      "package" : 0,
      "type" : 33,
      "exported" : false
    }, {
      "name" : "nameOff",
      "package" : 0,
      "type" : 40,
      "exported" : false
    }, {
      "name" : "name",
      "package" : 0,
      "type" : 36,
      "exported" : false
    }, {
      "name" : "in",
      "package" : 0,
      "type" : 53,
      "exported" : false
    }, {
      "name" : "out",
      "package" : 0,
      "type" : 53,
      "exported" : false
    }, {
      "name" : "resolveNameOff",
      "package" : 0,
      "type" : 67,
      "exported" : false
    }, {
      "name" : "pkgPath",
      "package" : 0,
      "type" : 26,
      "exported" : false
    }, {
      "name" : "resolveTypeOff",
      "package" : 0,
      "type" : 69,
      "exported" : false
    }, {
      "name" : "tag",
      "package" : 0,
      "type" : 36,
      "exported" : false
    }, {
      "name" : "throw",
      "package" : 0,
      "type" : 94,
      "exported" : false
    } ],
    "line-end" : 726,
    "line-start" : 588,
    "names" : [ "typesEqual" ],
    "package" : 0,
    "packages" : [ {
      "name" : "runtime",
      "path" : "runtime"
    }, {
      "name" : "unsafe",
      "path" : "unsafe"
    } ],
    "params" : [ 0, 1, 2 ],
    "receivers" : [ ],
    "results" : [ 3 ],
    "type" : "function",
    "types" : [ {
      "name" : "func(t *runtime._type, v *runtime._type, seen map[runtime._typePair]struct{}) bool",
      "params" : 1,
      "recv" : -1,
      "results" : 12,
      "type" : "Signature",
      "underlying" : 0,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "t",
        "type" : 2
      }, {
        "name" : "v",
        "type" : 2
      }, {
        "name" : "seen",
        "type" : 19
      } ],
      "name" : "(t *runtime._type, v *runtime._type, seen map[runtime._typePair]struct{})",
      "type" : "Tuple",
      "underlying" : 1
    }, {
      "elem" : 3,
      "name" : "*runtime._type",
      "type" : "Pointer",
      "underlying" : 2
    }, {
      "local-name" : "_type",
      "name" : "runtime._type",
      "package" : 0,
      "type" : "Named",
      "underlying" : 4
    }, {
      "fields" : [ {
        "name" : "size",
        "type" : 5
      }, {
        "name" : "ptrdata",
        "type" : 5
      }, {
        "name" : "hash",
        "type" : 6
      }, {
        "name" : "tflag",
        "type" : 7
      }, {
        "name" : "align",
        "type" : 8
      }, {
        "name" : "fieldAlign",
        "type" : 8
      }, {
        "name" : "kind",
        "type" : 8
      }, {
        "name" : "equal",
        "type" : 9
      }, {
        "name" : "gcdata",
        "type" : 14
      }, {
        "name" : "str",
        "type" : 16
      }, {
        "name" : "ptrToThis",
        "type" : 18
      } ],
      "name" : "struct{size uintptr; ptrdata uintptr; hash uint32; tflag runtime.tflag; align uint8; fieldAlign uint8; kind uint8; equal func(unsafe.Pointer, unsafe.Pointer) bool; gcdata *byte; str runtime.nameOff; ptrToThis runtime.typeOff}",
      "type" : "Struct",
      "underlying" : 4
    }, {
      "name" : "uintptr",
      "type" : "Basic",
      "underlying" : 5
    }, {
      "name" : "uint32",
      "type" : "Basic",
      "underlying" : 6
    }, {
      "local-name" : "tflag",
      "name" : "runtime.tflag",
      "package" : 0,
      "type" : "Named",
      "underlying" : 8
    }, {
      "name" : "uint8",
      "type" : "Basic",
      "underlying" : 8
    }, {
      "name" : "func(unsafe.Pointer, unsafe.Pointer) bool",
      "params" : 10,
      "recv" : -1,
      "results" : 12,
      "type" : "Signature",
      "underlying" : 9,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 11
      }, {
        "name" : "",
        "type" : 11
      } ],
      "name" : "(unsafe.Pointer, unsafe.Pointer)",
      "type" : "Tuple",
      "underlying" : 10
    }, {
      "local-name" : "Pointer",
      "name" : "unsafe.Pointer",
      "package" : 1,
      "type" : "Basic",
      "underlying" : 11
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 13
      } ],
      "name" : "(bool)",
      "type" : "Tuple",
      "underlying" : 12
    }, {
      "name" : "bool",
      "type" : "Basic",
      "underlying" : 13
    }, {
      "elem" : 15,
      "name" : "*byte",
      "type" : "Pointer",
      "underlying" : 14
    }, {
      "name" : "byte",
      "type" : "Basic",
      "underlying" : 15
    }, {
      "local-name" : "nameOff",
      "name" : "runtime.nameOff",
      "package" : 0,
      "type" : "Named",
      "underlying" : 17
    }, {
      "name" : "int32",
      "type" : "Basic",
      "underlying" : 17
    }, {
      "local-name" : "typeOff",
      "name" : "runtime.typeOff",
      "package" : 0,
      "type" : "Named",
      "underlying" : 17
    }, {
      "elem" : 20,
      "key" : 21,
      "name" : "map[runtime._typePair]struct{}",
      "type" : "Map",
      "underlying" : 19
    }, {
      "fields" : [ ],
      "name" : "struct{}",
      "type" : "Struct",
      "underlying" : 20
    }, {
      "local-name" : "_typePair",
      "name" : "runtime._typePair",
      "package" : 0,
      "type" : "Named",
      "underlying" : 22
    }, {
      "fields" : [ {
        "name" : "t1",
        "type" : 2
      }, {
        "name" : "t2",
        "type" : 2
      } ],
      "name" : "struct{t1 *runtime._type; t2 *runtime._type}",
      "type" : "Struct",
      "underlying" : 22
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 20
      }, {
        "name" : "",
        "type" : 13
      } ],
      "name" : "(struct{}, bool)",
      "type" : "Tuple",
      "underlying" : 23
    }, {
      "name" : "untyped bool",
      "type" : "Basic",
      "underlying" : 24
    }, {
      "name" : "string",
      "type" : "Basic",
      "underlying" : 25
    }, {
      "name" : "func() string",
      "params" : 27,
      "recv" : -1,
      "results" : 28,
      "type" : "Signature",
      "underlying" : 26,
      "variadic" : false
    }, {
      "fields" : [ ],
      "name" : "()",
      "type" : "Tuple",
      "underlying" : 27
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 25
      } ],
      "name" : "(string)",
      "type" : "Tuple",
      "underlying" : 28
    }, {
      "elem" : 30,
      "name" : "*runtime.uncommontype",
      "type" : "Pointer",
      "underlying" : 29
    }, {
      "local-name" : "uncommontype",
      "name" : "runtime.uncommontype",
      "package" : 0,
      "type" : "Named",
      "underlying" : 31
    }, {
      "fields" : [ {
        "name" : "pkgpath",
        "type" : 16
      }, {
        "name" : "mcount",
        "type" : 32
      }, {
        "name" : "xcount",
        "type" : 32
      }, {
        "name" : "moff",
        "type" : 6
      }, {
        "name" : "_",
        "type" : 6
      } ],
      "name" : "struct{pkgpath runtime.nameOff; mcount uint16; xcount uint16; moff uint32; _ uint32}",
      "type" : "Struct",
      "underlying" : 31
    }, {
      "name" : "uint16",
      "type" : "Basic",
      "underlying" : 32
    }, {
      "name" : "func() *runtime.uncommontype",
      "params" : 27,
      "recv" : -1,
      "results" : 34,
      "type" : "Signature",
      "underlying" : 33,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 29
      } ],
      "name" : "(*runtime.uncommontype)",
      "type" : "Tuple",
      "underlying" : 34
    }, {
      "name" : "untyped nil",
      "type" : "Basic",
      "underlying" : 35
    }, {
      "name" : "func() (s string)",
      "params" : 27,
      "recv" : -1,
      "results" : 37,
      "type" : "Signature",
      "underlying" : 36,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "s",
        "type" : 25
      } ],
      "name" : "(s string)",
      "type" : "Tuple",
      "underlying" : 37
    }, {
      "local-name" : "name",
      "name" : "runtime.name",
      "package" : 0,
      "type" : "Named",
      "underlying" : 39
    }, {
      "fields" : [ {
        "name" : "bytes",
        "type" : 14
      } ],
      "name" : "struct{bytes *byte}",
      "type" : "Struct",
      "underlying" : 39
    }, {
      "name" : "func(off runtime.nameOff) runtime.name",
      "params" : 41,
      "recv" : -1,
      "results" : 42,
      "type" : "Signature",
      "underlying" : 40,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "off",
        "type" : 16
      } ],
      "name" : "(off runtime.nameOff)",
      "type" : "Tuple",
      "underlying" : 41
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 38
      } ],
      "name" : "(runtime.name)",
      "type" : "Tuple",
      "underlying" : 42
    }, {
      "elem" : 44,
      "name" : "*runtime.arraytype",
      "type" : "Pointer",
      "underlying" : 43
    }, {
      "local-name" : "arraytype",
      "name" : "runtime.arraytype",
      "package" : 0,
      "type" : "Named",
      "underlying" : 45
    }, {
      "fields" : [ {
        "name" : "typ",
        "type" : 3
      }, {
        "name" : "elem",
        "type" : 2
      }, {
        "name" : "slice",
        "type" : 2
      }, {
        "name" : "len",
        "type" : 5
      } ],
      "name" : "struct{typ runtime._type; elem *runtime._type; slice *runtime._type; len uintptr}",
      "type" : "Struct",
      "underlying" : 45
    }, {
      "elem" : 47,
      "name" : "*runtime.chantype",
      "type" : "Pointer",
      "underlying" : 46
    }, {
      "local-name" : "chantype",
      "name" : "runtime.chantype",
      "package" : 0,
      "type" : "Named",
      "underlying" : 48
    }, {
      "fields" : [ {
        "name" : "typ",
        "type" : 3
      }, {
        "name" : "elem",
        "type" : 2
      }, {
        "name" : "dir",
        "type" : 5
      } ],
      "name" : "struct{typ runtime._type; elem *runtime._type; dir uintptr}",
      "type" : "Struct",
      "underlying" : 48
    }, {
      "elem" : 50,
      "name" : "*runtime.functype",
      "type" : "Pointer",
      "underlying" : 49
    }, {
      "local-name" : "functype",
      "name" : "runtime.functype",
      "package" : 0,
      "type" : "Named",
      "underlying" : 51
    }, {
      "fields" : [ {
        "name" : "typ",
        "type" : 3
      }, {
        "name" : "inCount",
        "type" : 32
      }, {
        "name" : "outCount",
        "type" : 32
      } ],
      "name" : "struct{typ runtime._type; inCount uint16; outCount uint16}",
      "type" : "Struct",
      "underlying" : 51
    }, {
      "elem" : 2,
      "name" : "[]*runtime._type",
      "type" : "Slice",
      "underlying" : 52
    }, {
      "name" : "func() []*runtime._type",
      "params" : 27,
      "recv" : -1,
      "results" : 54,
      "type" : "Signature",
      "underlying" : 53,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 52
      } ],
      "name" : "([]*runtime._type)",
      "type" : "Tuple",
      "underlying" : 54
    }, {
      "name" : "int",
      "type" : "Basic",
      "underlying" : 55
    }, {
      "name" : "func([]*runtime._type) int",
      "params" : 54,
      "recv" : -1,
      "results" : 57,
      "type" : "Signature",
      "underlying" : 56,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 55
      } ],
      "name" : "(int)",
      "type" : "Tuple",
      "underlying" : 57
    }, {
      "elem" : 59,
      "name" : "*runtime.interfacetype",
      "type" : "Pointer",
      "underlying" : 58
    }, {
      "local-name" : "interfacetype",
      "name" : "runtime.interfacetype",
      "package" : 0,
      "type" : "Named",
      "underlying" : 60
    }, {
      "fields" : [ {
        "name" : "typ",
        "type" : 3
      }, {
        "name" : "pkgpath",
        "type" : 38
      }, {
        "name" : "mhdr",
        "type" : 61
      } ],
      "name" : "struct{typ runtime._type; pkgpath runtime.name; mhdr []runtime.imethod}",
      "type" : "Struct",
      "underlying" : 60
    }, {
      "elem" : 62,
      "name" : "[]runtime.imethod",
      "type" : "Slice",
      "underlying" : 61
    }, {
      "local-name" : "imethod",
      "name" : "runtime.imethod",
      "package" : 0,
      "type" : "Named",
      "underlying" : 63
    }, {
      "fields" : [ {
        "name" : "name",
        "type" : 16
      }, {
        "name" : "ityp",
        "type" : 18
      } ],
      "name" : "struct{name runtime.nameOff; ityp runtime.typeOff}",
      "type" : "Struct",
      "underlying" : 63
    }, {
      "name" : "func([]runtime.imethod) int",
      "params" : 65,
      "recv" : -1,
      "results" : 57,
      "type" : "Signature",
      "underlying" : 64,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 61
      } ],
      "name" : "([]runtime.imethod)",
      "type" : "Tuple",
      "underlying" : 65
    }, {
      "elem" : 62,
      "name" : "*runtime.imethod",
      "type" : "Pointer",
      "underlying" : 66
    }, {
      "name" : "func(ptrInModule unsafe.Pointer, off runtime.nameOff) runtime.name",
      "params" : 68,
      "recv" : -1,
      "results" : 42,
      "type" : "Signature",
      "underlying" : 67,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "ptrInModule",
        "type" : 11
      }, {
        "name" : "off",
        "type" : 16
      } ],
      "name" : "(ptrInModule unsafe.Pointer, off runtime.nameOff)",
      "type" : "Tuple",
      "underlying" : 68
    }, {
      "name" : "func(ptrInModule unsafe.Pointer, off runtime.typeOff) *runtime._type",
      "params" : 70,
      "recv" : -1,
      "results" : 71,
      "type" : "Signature",
      "underlying" : 69,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "ptrInModule",
        "type" : 11
      }, {
        "name" : "off",
        "type" : 18
      } ],
      "name" : "(ptrInModule unsafe.Pointer, off runtime.typeOff)",
      "type" : "Tuple",
      "underlying" : 70
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 2
      } ],
      "name" : "(*runtime._type)",
      "type" : "Tuple",
      "underlying" : 71
    }, {
      "elem" : 73,
      "name" : "*runtime.maptype",
      "type" : "Pointer",
      "underlying" : 72
    }, {
      "local-name" : "maptype",
      "name" : "runtime.maptype",
      "package" : 0,
      "type" : "Named",
      "underlying" : 74
    }, {
      "fields" : [ {
        "name" : "typ",
        "type" : 3
      }, {
        "name" : "key",
        "type" : 2
      }, {
        "name" : "elem",
        "type" : 2
      }, {
        "name" : "bucket",
        "type" : 2
      }, {
        "name" : "hasher",
        "type" : 75
      }, {
        "name" : "keysize",
        "type" : 8
      }, {
        "name" : "elemsize",
        "type" : 8
      }, {
        "name" : "bucketsize",
        "type" : 32
      }, {
        "name" : "flags",
        "type" : 6
      } ],
      "name" : "struct{typ runtime._type; key *runtime._type; elem *runtime._type; bucket *runtime._type; hasher func(unsafe.Pointer, uintptr) uintptr; keysize uint8; elemsize uint8; bucketsize uint16; flags uint32}",
      "type" : "Struct",
      "underlying" : 74
    }, {
      "name" : "func(unsafe.Pointer, uintptr) uintptr",
      "params" : 76,
      "recv" : -1,
      "results" : 77,
      "type" : "Signature",
      "underlying" : 75,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 11
      }, {
        "name" : "",
        "type" : 5
      } ],
      "name" : "(unsafe.Pointer, uintptr)",
      "type" : "Tuple",
      "underlying" : 76
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 5
      } ],
      "name" : "(uintptr)",
      "type" : "Tuple",
      "underlying" : 77
    }, {
      "elem" : 79,
      "name" : "*runtime.ptrtype",
      "type" : "Pointer",
      "underlying" : 78
    }, {
      "local-name" : "ptrtype",
      "name" : "runtime.ptrtype",
      "package" : 0,
      "type" : "Named",
      "underlying" : 80
    }, {
      "fields" : [ {
        "name" : "typ",
        "type" : 3
      }, {
        "name" : "elem",
        "type" : 2
      } ],
      "name" : "struct{typ runtime._type; elem *runtime._type}",
      "type" : "Struct",
      "underlying" : 80
    }, {
      "elem" : 82,
      "name" : "*runtime.slicetype",
      "type" : "Pointer",
      "underlying" : 81
    }, {
      "local-name" : "slicetype",
      "name" : "runtime.slicetype",
      "package" : 0,
      "type" : "Named",
      "underlying" : 80
    }, {
      "elem" : 84,
      "name" : "*runtime.structtype",
      "type" : "Pointer",
      "underlying" : 83
    }, {
      "local-name" : "structtype",
      "name" : "runtime.structtype",
      "package" : 0,
      "type" : "Named",
      "underlying" : 85
    }, {
      "fields" : [ {
        "name" : "typ",
        "type" : 3
      }, {
        "name" : "pkgPath",
        "type" : 38
      }, {
        "name" : "fields",
        "type" : 86
      } ],
      "name" : "struct{typ runtime._type; pkgPath runtime.name; fields []runtime.structfield}",
      "type" : "Struct",
      "underlying" : 85
    }, {
      "elem" : 87,
      "name" : "[]runtime.structfield",
      "type" : "Slice",
      "underlying" : 86
    }, {
      "local-name" : "structfield",
      "name" : "runtime.structfield",
      "package" : 0,
      "type" : "Named",
      "underlying" : 88
    }, {
      "fields" : [ {
        "name" : "name",
        "type" : 38
      }, {
        "name" : "typ",
        "type" : 2
      }, {
        "name" : "offsetAnon",
        "type" : 5
      } ],
      "name" : "struct{name runtime.name; typ *runtime._type; offsetAnon uintptr}",
      "type" : "Struct",
      "underlying" : 88
    }, {
      "name" : "func([]runtime.structfield) int",
      "params" : 90,
      "recv" : -1,
      "results" : 57,
      "type" : "Signature",
      "underlying" : 89,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 86
      } ],
      "name" : "([]runtime.structfield)",
      "type" : "Tuple",
      "underlying" : 90
    }, {
      "elem" : 87,
      "name" : "*runtime.structfield",
      "type" : "Pointer",
      "underlying" : 91
    }, {
      "name" : "func(string, uint8)",
      "params" : 93,
      "recv" : -1,
      "results" : 27,
      "type" : "Signature",
      "underlying" : 92,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 25
      }, {
        "name" : "",
        "type" : 8
      } ],
      "name" : "(string, uint8)",
      "type" : "Tuple",
      "underlying" : 93
    }, {
      "name" : "func(s string)",
      "params" : 37,
      "recv" : -1,
      "results" : 27,
      "type" : "Signature",
      "underlying" : 94,
      "variadic" : false
    } ],
    "variables" : [ {
      "name" : "t",
      "package" : 0,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "v",
      "package" : 0,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "seen",
      "package" : 0,
      "type" : 19,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "[res0]",
      "package" : 0,
      "type" : 13,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "tp",
      "package" : 0,
      "type" : 21,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "ok",
      "package" : 0,
      "type" : 13,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "_",
      "package" : 0,
      "type" : 20,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "kind",
      "package" : 0,
      "type" : 8,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "kind",
      "package" : 0,
      "type" : 8,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "ut",
      "package" : 0,
      "type" : 29,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "uv",
      "package" : 0,
      "type" : 29,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "pkgpath",
      "package" : 0,
      "type" : 16,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "pkgpatht",
      "package" : 0,
      "type" : 25,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "pkgpathv",
      "package" : 0,
      "type" : 25,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "at",
      "package" : 0,
      "type" : 43,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "elem",
      "package" : 0,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "av",
      "package" : 0,
      "type" : 43,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "len",
      "package" : 0,
      "type" : 5,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "ct",
      "package" : 0,
      "type" : 46,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "dir",
      "package" : 0,
      "type" : 5,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "cv",
      "package" : 0,
      "type" : 46,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "elem",
      "package" : 0,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "ft",
      "package" : 0,
      "type" : 49,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "outCount",
      "package" : 0,
      "type" : 32,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "fv",
      "package" : 0,
      "type" : 49,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "inCount",
      "package" : 0,
      "type" : 32,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "i",
      "package" : 0,
      "type" : 55,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "tin",
      "package" : 0,
      "type" : 52,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "vin",
      "package" : 0,
      "type" : 52,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "i",
      "package" : 0,
      "type" : 55,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "tout",
      "package" : 0,
      "type" : 52,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "vout",
      "package" : 0,
      "type" : 52,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "it",
      "package" : 0,
      "type" : 58,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "pkgpath",
      "package" : 0,
      "type" : 38,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "iv",
      "package" : 0,
      "type" : 58,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "mhdr",
      "package" : 0,
      "type" : 61,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "i",
      "package" : 0,
      "type" : 55,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "tm",
      "package" : 0,
      "type" : 66,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "name",
      "package" : 0,
      "type" : 16,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "vm",
      "package" : 0,
      "type" : 66,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "tname",
      "package" : 0,
      "type" : 38,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "vname",
      "package" : 0,
      "type" : 38,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "ityp",
      "package" : 0,
      "type" : 18,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "tityp",
      "package" : 0,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "vityp",
      "package" : 0,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "mt",
      "package" : 0,
      "type" : 72,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "key",
      "package" : 0,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "mv",
      "package" : 0,
      "type" : 72,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "elem",
      "package" : 0,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "pt",
      "package" : 0,
      "type" : 78,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "elem",
      "package" : 0,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "pv",
      "package" : 0,
      "type" : 78,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "st",
      "package" : 0,
      "type" : 81,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "elem",
      "package" : 0,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "sv",
      "package" : 0,
      "type" : 81,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "st",
      "package" : 0,
      "type" : 83,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "fields",
      "package" : 0,
      "type" : 86,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "sv",
      "package" : 0,
      "type" : 83,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "pkgPath",
      "package" : 0,
      "type" : 38,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "i",
      "package" : 0,
      "type" : 55,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "tf",
      "package" : 0,
      "type" : 91,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "name",
      "package" : 0,
      "type" : 38,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "vf",
      "package" : 0,
      "type" : 91,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "typ",
      "package" : 0,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "offsetAnon",
      "package" : 0,
      "type" : 5,
      "exported" : false,
      "embedded" : false,
      "field" : true
    } ]
  },
  "go-version" : "1.14.3"
}