{
  "usage" : {
    "file" : "makefunc.go",
    "label1" : "cast-struct",
    "label2" : "types",
    "line" : "106",
    "module" : "std",
    "pkg" : "reflect",
    "project" : "kubernetes/kubernetes",
    "snippet" : "ftyp := (*funcType)(unsafe.Pointer(v.Type().(*rtype)))",
    "version" : "std"
  },
  "cfg" : {
    "blocks" : [ {
      "update-vars" : [ ],
      "successors" : [ 2 ],
      "in-vars" : [ 0, 1 ],
      "exit" : false,
      "out-vars" : [ 1, 0 ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[entry]",
      "entry" : true,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ ],
      "in-vars" : [ ],
      "exit" : true,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[exit]",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 3, 4 ],
      "in-vars" : [ 1, 0 ],
      "exit" : false,
      "out-vars" : [ 1, 0 ],
      "decl-vars" : [ ],
      "line-start" : 96,
      "ast" : {
        "condition" : {
          "go-type" : 24,
          "kind" : "expression",
          "left" : {
            "go-type" : 22,
            "kind" : "expression",
            "left" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "flag",
                "variable" : 3
              },
              "go-type" : 22,
              "kind" : "expression",
              "target" : {
                "go-type" : 3,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "v",
                  "variable" : 1
                }
              },
              "type" : "selector"
            },
            "operator" : "&",
            "right" : {
              "go-type" : 22,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "512"
              }
            },
            "type" : "binary"
          },
          "operator" : "==",
          "right" : {
            "go-type" : 22,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 98,
      "code" : "if v.flag&flagMethod == 0 {\n\tpanic(\"reflect: internal error: invalid use of makeMethodValue\")\n}",
      "entry" : false,
      "use-vars" : [ 1 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 4 ],
      "in-vars" : [ 0, 1 ],
      "exit" : false,
      "out-vars" : [ 1, 0 ],
      "decl-vars" : [ ],
      "line-start" : 97,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 2,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "reflect: internal error: invalid use of makeMethodValue"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 26,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Builtin",
              "kind" : "ident",
              "value" : "panic"
            }
          },
          "go-type" : 25,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 97,
      "code" : "panic(\"reflect: internal error: invalid use of makeMethodValue\")",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 5 ],
      "in-vars" : [ 0, 1 ],
      "exit" : false,
      "out-vars" : [ 4, 1, 0 ],
      "decl-vars" : [ 4 ],
      "line-start" : 101,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "fl"
          }
        } ],
        "right" : [ {
          "go-type" : 22,
          "kind" : "expression",
          "left" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "flag",
              "variable" : 3
            },
            "go-type" : 22,
            "kind" : "expression",
            "target" : {
              "go-type" : 3,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "v",
                "variable" : 1
              }
            },
            "type" : "selector"
          },
          "operator" : "&",
          "right" : {
            "go-type" : 22,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "480"
            }
          },
          "type" : "binary"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 101,
      "code" : "fl := v.flag & (flagRO | flagAddr | flagIndir)",
      "entry" : false,
      "use-vars" : [ 1 ]
    }, {
      "update-vars" : [ 4 ],
      "successors" : [ 6 ],
      "in-vars" : [ 4, 1, 0 ],
      "exit" : false,
      "out-vars" : [ 4, 1, 0 ],
      "decl-vars" : [ ],
      "line-start" : 102,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 22,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "fl",
            "variable" : 4
          }
        } ],
        "operator" : "|",
        "right" : [ {
          "coerced-to" : {
            "go-type" : 22,
            "kind" : "type",
            "type" : "identifier",
            "value" : {
              "go-type" : 22,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "flag"
            }
          },
          "go-type" : 22,
          "kind" : "expression",
          "target" : {
            "arguments" : [ ],
            "ellipsis" : false,
            "function" : {
              "field" : {
                "function" : 1,
                "ident-kind" : "Func",
                "kind" : "ident",
                "value" : "Kind"
              },
              "go-type" : 31,
              "kind" : "expression",
              "target" : {
                "field" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "typ",
                  "variable" : 5
                },
                "go-type" : 5,
                "kind" : "expression",
                "target" : {
                  "go-type" : 3,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "v",
                    "variable" : 1
                  }
                },
                "type" : "selector"
              },
              "type" : "selector"
            },
            "go-type" : 29,
            "kind" : "expression",
            "type" : "call"
          },
          "type" : "cast"
        } ],
        "type" : "assign-operator"
      },
      "assign-vars" : [ 4 ],
      "line-end" : 102,
      "code" : "fl |= flag(v.typ.Kind())",
      "entry" : false,
      "use-vars" : [ 4, 1 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 7 ],
      "in-vars" : [ 1, 0, 4 ],
      "exit" : false,
      "out-vars" : [ 0, 8, 1 ],
      "decl-vars" : [ 8 ],
      "line-start" : 103,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "rcvr"
          }
        } ],
        "right" : [ {
          "declared" : {
            "go-type" : 3,
            "kind" : "type",
            "type" : "identifier",
            "value" : {
              "go-type" : 3,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "Value"
            }
          },
          "go-type" : 3,
          "kind" : "literal",
          "type" : "composite",
          "values" : [ {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "typ",
              "variable" : 5
            },
            "go-type" : 5,
            "kind" : "expression",
            "target" : {
              "go-type" : 3,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "v",
                "variable" : 1
              }
            },
            "type" : "selector"
          }, {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "ptr",
              "variable" : 7
            },
            "go-type" : 14,
            "kind" : "expression",
            "target" : {
              "go-type" : 3,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "v",
                "variable" : 1
              }
            },
            "type" : "selector"
          }, {
            "go-type" : 22,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "fl",
              "variable" : 4
            }
          } ]
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 103,
      "code" : "rcvr := Value{v.typ, v.ptr, fl}",
      "entry" : false,
      "use-vars" : [ 1, 4 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 8 ],
      "in-vars" : [ 1, 0, 8 ],
      "exit" : false,
      "out-vars" : [ 1, 27, 0, 8 ],
      "decl-vars" : [ 27 ],
      "line-start" : 106,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "ftyp"
          }
        } ],
        "right" : [ {
          "coerced-to" : {
            "contained" : {
              "go-type" : 35,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 35,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "funcType"
              }
            },
            "go-type" : 34,
            "kind" : "type",
            "type" : "pointer"
          },
          "go-type" : 34,
          "kind" : "expression",
          "target" : {
            "coerced-to" : {
              "go-type" : 14,
              "kind" : "type",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 1,
                "value" : "unsafe"
              },
              "type" : "identifier",
              "value" : {
                "go-type" : 14,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "Pointer"
              }
            },
            "go-type" : 14,
            "kind" : "expression",
            "target" : {
              "asserted" : {
                "contained" : {
                  "go-type" : 6,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 6,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "rtype"
                  }
                },
                "go-type" : 5,
                "kind" : "type",
                "type" : "pointer"
              },
              "go-type" : 5,
              "kind" : "expression",
              "target" : {
                "arguments" : [ ],
                "ellipsis" : false,
                "function" : {
                  "field" : {
                    "function" : 2,
                    "ident-kind" : "Func",
                    "kind" : "ident",
                    "value" : "Type"
                  },
                  "go-type" : 85,
                  "kind" : "expression",
                  "target" : {
                    "go-type" : 3,
                    "kind" : "expression",
                    "type" : "identifier",
                    "value" : {
                      "ident-kind" : "Var",
                      "kind" : "ident",
                      "value" : "v",
                      "variable" : 1
                    }
                  },
                  "type" : "selector"
                },
                "go-type" : 38,
                "kind" : "expression",
                "type" : "call"
              },
              "type" : "type-assert"
            },
            "type" : "cast"
          },
          "type" : "cast"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 106,
      "code" : "ftyp := (*funcType)(unsafe.Pointer(v.Type().(*rtype)))",
      "entry" : false,
      "use-vars" : [ 1 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 9 ],
      "in-vars" : [ 1, 27, 0, 8 ],
      "exit" : false,
      "out-vars" : [ 1, 28, 27, 0, 8 ],
      "decl-vars" : [ 28 ],
      "line-start" : 111,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "dummy"
          }
        } ],
        "right" : [ {
          "go-type" : 87,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "function" : 3,
            "ident-kind" : "Func",
            "kind" : "ident",
            "value" : "methodValueCall"
          }
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 111,
      "code" : "dummy := methodValueCall",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 10 ],
      "in-vars" : [ 28, 27, 0, 8, 1 ],
      "exit" : false,
      "out-vars" : [ 29, 1, 27, 0, 8 ],
      "decl-vars" : [ 29 ],
      "line-start" : 112,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "code"
          }
        } ],
        "right" : [ {
          "go-type" : 8,
          "kind" : "expression",
          "target" : {
            "go-type" : 88,
            "kind" : "expression",
            "target" : {
              "coerced-to" : {
                "contained" : {
                  "contained" : {
                    "go-type" : 8,
                    "kind" : "type",
                    "type" : "identifier",
                    "value" : {
                      "go-type" : 8,
                      "ident-kind" : "TypeName",
                      "kind" : "ident",
                      "value" : "uintptr"
                    }
                  },
                  "go-type" : 88,
                  "kind" : "type",
                  "type" : "pointer"
                },
                "go-type" : 89,
                "kind" : "type",
                "type" : "pointer"
              },
              "go-type" : 89,
              "kind" : "expression",
              "target" : {
                "coerced-to" : {
                  "go-type" : 14,
                  "kind" : "type",
                  "qualifier" : {
                    "ident-kind" : "PkgName",
                    "kind" : "ident",
                    "package" : 1,
                    "value" : "unsafe"
                  },
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 14,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "Pointer"
                  }
                },
                "go-type" : 14,
                "kind" : "expression",
                "target" : {
                  "go-type" : 90,
                  "kind" : "expression",
                  "operator" : "&",
                  "target" : {
                    "go-type" : 87,
                    "kind" : "expression",
                    "type" : "identifier",
                    "value" : {
                      "ident-kind" : "Var",
                      "kind" : "ident",
                      "value" : "dummy",
                      "variable" : 28
                    }
                  },
                  "type" : "unary"
                },
                "type" : "cast"
              },
              "type" : "cast"
            },
            "type" : "star"
          },
          "type" : "star"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 112,
      "code" : "code := **(**uintptr)(unsafe.Pointer(&dummy))",
      "entry" : false,
      "use-vars" : [ 28 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 11 ],
      "in-vars" : [ 8, 29, 1, 27, 0 ],
      "exit" : false,
      "out-vars" : [ 30, 31, 27, 0, 8, 29, 1 ],
      "decl-vars" : [ 30, 32, 31, 33, 34 ],
      "line-start" : 115,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "_"
          }
        }, {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "argLen"
          }
        }, {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "_"
          }
        }, {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "stack"
          }
        }, {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "_"
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 34,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "ftyp",
              "variable" : 27
            }
          }, {
            "go-type" : 104,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Nil",
              "kind" : "ident",
              "value" : "nil"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 102,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 4,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "funcLayout"
            }
          },
          "go-type" : 91,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 115,
      "code" : "_, argLen, _, stack, _ := funcLayout(ftyp, nil)",
      "entry" : false,
      "use-vars" : [ 27 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 12 ],
      "in-vars" : [ 1, 30, 31, 27, 0, 8, 29 ],
      "exit" : false,
      "out-vars" : [ 1, 27, 40, 0 ],
      "decl-vars" : [ 40 ],
      "line-start" : 117,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "fv"
          }
        } ],
        "right" : [ {
          "go-type" : 105,
          "kind" : "expression",
          "operator" : "&",
          "target" : {
            "declared" : {
              "go-type" : 106,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 106,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "methodValue"
              }
            },
            "go-type" : 106,
            "kind" : "literal",
            "type" : "composite",
            "values" : [ {
              "go-type" : -1,
              "key" : {
                "go-type" : -1,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "fn",
                  "variable" : 35
                }
              },
              "kind" : "expression",
              "type" : "key-value",
              "value" : {
                "go-type" : 8,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "code",
                  "variable" : 29
                }
              }
            }, {
              "go-type" : -1,
              "key" : {
                "go-type" : -1,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "stack",
                  "variable" : 36
                }
              },
              "kind" : "expression",
              "type" : "key-value",
              "value" : {
                "go-type" : 92,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "stack",
                  "variable" : 30
                }
              }
            }, {
              "go-type" : -1,
              "key" : {
                "go-type" : -1,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "argLen",
                  "variable" : 37
                }
              },
              "kind" : "expression",
              "type" : "key-value",
              "value" : {
                "go-type" : 8,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "argLen",
                  "variable" : 31
                }
              }
            }, {
              "go-type" : -1,
              "key" : {
                "go-type" : -1,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "method",
                  "variable" : 38
                }
              },
              "kind" : "expression",
              "type" : "key-value",
              "value" : {
                "go-type" : 42,
                "kind" : "expression",
                "left" : {
                  "coerced-to" : {
                    "go-type" : 42,
                    "kind" : "type",
                    "type" : "identifier",
                    "value" : {
                      "go-type" : 42,
                      "ident-kind" : "TypeName",
                      "kind" : "ident",
                      "value" : "int"
                    }
                  },
                  "go-type" : 42,
                  "kind" : "expression",
                  "target" : {
                    "field" : {
                      "ident-kind" : "Var",
                      "kind" : "ident",
                      "value" : "flag",
                      "variable" : 3
                    },
                    "go-type" : 22,
                    "kind" : "expression",
                    "target" : {
                      "go-type" : 3,
                      "kind" : "expression",
                      "type" : "identifier",
                      "value" : {
                        "ident-kind" : "Var",
                        "kind" : "ident",
                        "value" : "v",
                        "variable" : 1
                      }
                    },
                    "type" : "selector"
                  },
                  "type" : "cast"
                },
                "operator" : ">>",
                "right" : {
                  "go-type" : 108,
                  "kind" : "constant",
                  "value" : {
                    "type" : "INT",
                    "value" : "10"
                  }
                },
                "type" : "binary"
              }
            }, {
              "go-type" : -1,
              "key" : {
                "go-type" : -1,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "rcvr",
                  "variable" : 39
                }
              },
              "kind" : "expression",
              "type" : "key-value",
              "value" : {
                "go-type" : 3,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "rcvr",
                  "variable" : 8
                }
              }
            } ]
          },
          "type" : "unary"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 123,
      "code" : "fv := &methodValue{\n\tfn:     code,\n\tstack:  stack,\n\targLen: argLen,\n\tmethod: int(v.flag) >> flagMethodShift,\n\trcvr:   rcvr,\n}",
      "entry" : false,
      "use-vars" : [ 8, 29, 31, 30, 1 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 13 ],
      "in-vars" : [ 1, 27, 40, 0 ],
      "exit" : false,
      "out-vars" : [ 27, 40, 1 ],
      "decl-vars" : [ ],
      "line-start" : 128,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "op",
              "variable" : 0
            }
          }, {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "rcvr",
              "variable" : 39
            },
            "go-type" : 3,
            "kind" : "expression",
            "target" : {
              "go-type" : 105,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "fv",
                "variable" : 40
              }
            },
            "type" : "selector"
          }, {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "method",
              "variable" : 38
            },
            "go-type" : 42,
            "kind" : "expression",
            "target" : {
              "go-type" : 105,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "fv",
                "variable" : 40
              }
            },
            "type" : "selector"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 110,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 5,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "methodReceiver"
            }
          },
          "go-type" : 109,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 128,
      "code" : "methodReceiver(op, fv.rcvr, fv.method)",
      "entry" : false,
      "use-vars" : [ 0, 40 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 1, 27, 40 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 130,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "declared" : {
            "go-type" : 3,
            "kind" : "type",
            "type" : "identifier",
            "value" : {
              "go-type" : 3,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "Value"
            }
          },
          "go-type" : 3,
          "kind" : "literal",
          "type" : "composite",
          "values" : [ {
            "go-type" : 5,
            "kind" : "expression",
            "operator" : "&",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "rtype",
                "variable" : 41
              },
              "go-type" : 6,
              "kind" : "expression",
              "target" : {
                "go-type" : 34,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "ftyp",
                  "variable" : 27
                }
              },
              "type" : "selector"
            },
            "type" : "unary"
          }, {
            "coerced-to" : {
              "go-type" : 14,
              "kind" : "type",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 1,
                "value" : "unsafe"
              },
              "type" : "identifier",
              "value" : {
                "go-type" : 14,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "Pointer"
              }
            },
            "go-type" : 14,
            "kind" : "expression",
            "target" : {
              "go-type" : 105,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "fv",
                "variable" : 40
              }
            },
            "type" : "cast"
          }, {
            "go-type" : 22,
            "kind" : "expression",
            "left" : {
              "go-type" : 22,
              "kind" : "expression",
              "left" : {
                "field" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "flag",
                  "variable" : 3
                },
                "go-type" : 22,
                "kind" : "expression",
                "target" : {
                  "go-type" : 3,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "v",
                    "variable" : 1
                  }
                },
                "type" : "selector"
              },
              "operator" : "&",
              "right" : {
                "go-type" : 22,
                "kind" : "constant",
                "value" : {
                  "type" : "INT",
                  "value" : "96"
                }
              },
              "type" : "binary"
            },
            "operator" : "|",
            "right" : {
              "go-type" : 22,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "19"
              }
            },
            "type" : "binary"
          } ]
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 130,
      "code" : "return Value{&ftyp.rtype, unsafe.Pointer(fv), v.flag&flagRO | flag(Func)}",
      "entry" : false,
      "use-vars" : [ 40, 1, 27 ]
    } ],
    "code" : "// makeMethodValue converts v from the rcvr+method index representation\n// of a method value to an actual method func value, which is\n// basically the receiver value with a special bit set, into a true\n// func value - a value holding an actual func. The output is\n// semantically equivalent to the input as far as the user of package\n// reflect can tell, but the true func representation can be handled\n// by code like Convert and Interface and Assign.\nfunc makeMethodValue(op string, v Value) Value {\n\tif v.flag&flagMethod == 0 {\n\t\tpanic(\"reflect: internal error: invalid use of makeMethodValue\")\n\t}\n\n\tfl := v.flag & (flagRO | flagAddr | flagIndir)\n\tfl |= flag(v.typ.Kind())\n\trcvr := Value{v.typ, v.ptr, fl}\n\n\tftyp := (*funcType)(unsafe.Pointer(v.Type().(*rtype)))\n\n\tdummy := methodValueCall\n\tcode := **(**uintptr)(unsafe.Pointer(&dummy))\n\n\t_, argLen, _, stack, _ := funcLayout(ftyp, nil)\n\n\tfv := &methodValue{\n\t\tfn:     code,\n\t\tstack:  stack,\n\t\targLen: argLen,\n\t\tmethod: int(v.flag) >> flagMethodShift,\n\t\trcvr:   rcvr,\n\t}\n\n\tmethodReceiver(op, fv.rcvr, fv.method)\n\n\treturn Value{&ftyp.rtype, unsafe.Pointer(fv), v.flag&flagRO | flag(Func)}\n}",
    "defines" : [ 0 ],
    "functions" : [ {
      "name" : "makeMethodValue",
      "package" : 0,
      "type" : 0,
      "exported" : false
    }, {
      "name" : "Kind",
      "package" : 0,
      "type" : 33,
      "exported" : true
    }, {
      "name" : "Type",
      "package" : 0,
      "type" : 86,
      "exported" : true
    }, {
      "name" : "methodValueCall",
      "package" : 0,
      "type" : 87,
      "exported" : false
    }, {
      "name" : "funcLayout",
      "package" : 0,
      "type" : 102,
      "exported" : false
    }, {
      "name" : "methodReceiver",
      "package" : 0,
      "type" : 110,
      "exported" : false
    } ],
    "line-end" : 131,
    "line-start" : 95,
    "names" : [ "makeMethodValue" ],
    "package" : 0,
    "packages" : [ {
      "name" : "reflect",
      "path" : "reflect"
    }, {
      "name" : "unsafe",
      "path" : "unsafe"
    }, {
      "name" : "sync",
      "path" : "sync"
    } ],
    "params" : [ 0, 1 ],
    "receivers" : [ ],
    "results" : [ 2 ],
    "type" : "function",
    "types" : [ {
      "name" : "func(op string, v reflect.Value) reflect.Value",
      "params" : 1,
      "recv" : -1,
      "results" : 23,
      "type" : "Signature",
      "underlying" : 0,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "op",
        "type" : 2
      }, {
        "name" : "v",
        "type" : 3
      } ],
      "name" : "(op string, v reflect.Value)",
      "type" : "Tuple",
      "underlying" : 1
    }, {
      "name" : "string",
      "type" : "Basic",
      "underlying" : 2
    }, {
      "local-name" : "Value",
      "name" : "reflect.Value",
      "package" : 0,
      "type" : "Named",
      "underlying" : 4
    }, {
      "fields" : [ {
        "name" : "typ",
        "type" : 5
      }, {
        "name" : "ptr",
        "type" : 14
      }, {
        "name" : "flag",
        "type" : 22
      } ],
      "name" : "struct{typ *reflect.rtype; ptr unsafe.Pointer; reflect.flag}",
      "type" : "Struct",
      "underlying" : 4
    }, {
      "elem" : 6,
      "name" : "*reflect.rtype",
      "type" : "Pointer",
      "underlying" : 5
    }, {
      "local-name" : "rtype",
      "name" : "reflect.rtype",
      "package" : 0,
      "type" : "Named",
      "underlying" : 7
    }, {
      "fields" : [ {
        "name" : "size",
        "type" : 8
      }, {
        "name" : "ptrdata",
        "type" : 8
      }, {
        "name" : "hash",
        "type" : 9
      }, {
        "name" : "tflag",
        "type" : 10
      }, {
        "name" : "align",
        "type" : 11
      }, {
        "name" : "fieldAlign",
        "type" : 11
      }, {
        "name" : "kind",
        "type" : 11
      }, {
        "name" : "equal",
        "type" : 12
      }, {
        "name" : "gcdata",
        "type" : 17
      }, {
        "name" : "str",
        "type" : 19
      }, {
        "name" : "ptrToThis",
        "type" : 21
      } ],
      "name" : "struct{size uintptr; ptrdata uintptr; hash uint32; tflag reflect.tflag; align uint8; fieldAlign uint8; kind uint8; equal func(unsafe.Pointer, unsafe.Pointer) bool; gcdata *byte; str reflect.nameOff; ptrToThis reflect.typeOff}",
      "type" : "Struct",
      "underlying" : 7
    }, {
      "name" : "uintptr",
      "type" : "Basic",
      "underlying" : 8
    }, {
      "name" : "uint32",
      "type" : "Basic",
      "underlying" : 9
    }, {
      "local-name" : "tflag",
      "name" : "reflect.tflag",
      "package" : 0,
      "type" : "Named",
      "underlying" : 11
    }, {
      "name" : "uint8",
      "type" : "Basic",
      "underlying" : 11
    }, {
      "name" : "func(unsafe.Pointer, unsafe.Pointer) bool",
      "params" : 13,
      "recv" : -1,
      "results" : 15,
      "type" : "Signature",
      "underlying" : 12,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 14
      }, {
        "name" : "",
        "type" : 14
      } ],
      "name" : "(unsafe.Pointer, unsafe.Pointer)",
      "type" : "Tuple",
      "underlying" : 13
    }, {
      "local-name" : "Pointer",
      "name" : "unsafe.Pointer",
      "package" : 1,
      "type" : "Basic",
      "underlying" : 14
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 16
      } ],
      "name" : "(bool)",
      "type" : "Tuple",
      "underlying" : 15
    }, {
      "name" : "bool",
      "type" : "Basic",
      "underlying" : 16
    }, {
      "elem" : 18,
      "name" : "*byte",
      "type" : "Pointer",
      "underlying" : 17
    }, {
      "name" : "byte",
      "type" : "Basic",
      "underlying" : 18
    }, {
      "local-name" : "nameOff",
      "name" : "reflect.nameOff",
      "package" : 0,
      "type" : "Named",
      "underlying" : 20
    }, {
      "name" : "int32",
      "type" : "Basic",
      "underlying" : 20
    }, {
      "local-name" : "typeOff",
      "name" : "reflect.typeOff",
      "package" : 0,
      "type" : "Named",
      "underlying" : 20
    }, {
      "local-name" : "flag",
      "name" : "reflect.flag",
      "package" : 0,
      "type" : "Named",
      "underlying" : 8
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 3
      } ],
      "name" : "(reflect.Value)",
      "type" : "Tuple",
      "underlying" : 23
    }, {
      "name" : "untyped bool",
      "type" : "Basic",
      "underlying" : 24
    }, {
      "fields" : [ ],
      "name" : "()",
      "type" : "Tuple",
      "underlying" : 25
    }, {
      "name" : "func(interface{})",
      "params" : 27,
      "recv" : -1,
      "results" : 25,
      "type" : "Signature",
      "underlying" : 26,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 28
      } ],
      "name" : "(interface{})",
      "type" : "Tuple",
      "underlying" : 27
    }, {
      "methods" : [ ],
      "name" : "interface{}",
      "type" : "Interface",
      "underlying" : 28
    }, {
      "local-name" : "Kind",
      "name" : "reflect.Kind",
      "package" : 0,
      "type" : "Named",
      "underlying" : 30
    }, {
      "name" : "uint",
      "type" : "Basic",
      "underlying" : 30
    }, {
      "name" : "func() reflect.Kind",
      "params" : 25,
      "recv" : -1,
      "results" : 32,
      "type" : "Signature",
      "underlying" : 31,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 29
      } ],
      "name" : "(reflect.Kind)",
      "type" : "Tuple",
      "underlying" : 32
    }, {
      "name" : "(*reflect.rtype) func() reflect.Kind",
      "params" : 25,
      "recv" : 6,
      "results" : 32,
      "type" : "Signature",
      "underlying" : 33,
      "variadic" : false
    }, {
      "elem" : 35,
      "name" : "*reflect.funcType",
      "type" : "Pointer",
      "underlying" : 34
    }, {
      "local-name" : "funcType",
      "name" : "reflect.funcType",
      "package" : 0,
      "type" : "Named",
      "underlying" : 36
    }, {
      "fields" : [ {
        "name" : "rtype",
        "type" : 6
      }, {
        "name" : "inCount",
        "type" : 37
      }, {
        "name" : "outCount",
        "type" : 37
      } ],
      "name" : "struct{reflect.rtype; inCount uint16; outCount uint16}",
      "type" : "Struct",
      "underlying" : 36
    }, {
      "name" : "uint16",
      "type" : "Basic",
      "underlying" : 37
    }, {
      "local-name" : "Type",
      "name" : "reflect.Type",
      "package" : 0,
      "type" : "Named",
      "underlying" : 39
    }, {
      "methods" : [ {
        "name" : "Align",
        "type" : 40
      }, {
        "name" : "AssignableTo",
        "type" : 43
      }, {
        "name" : "Bits",
        "type" : 40
      }, {
        "name" : "ChanDir",
        "type" : 45
      }, {
        "name" : "Comparable",
        "type" : 48
      }, {
        "name" : "ConvertibleTo",
        "type" : 43
      }, {
        "name" : "Elem",
        "type" : 49
      }, {
        "name" : "Field",
        "type" : 51
      }, {
        "name" : "FieldAlign",
        "type" : 40
      }, {
        "name" : "FieldByIndex",
        "type" : 58
      }, {
        "name" : "FieldByName",
        "type" : 60
      }, {
        "name" : "FieldByNameFunc",
        "type" : 63
      }, {
        "name" : "Implements",
        "type" : 43
      }, {
        "name" : "In",
        "type" : 67
      }, {
        "name" : "IsVariadic",
        "type" : 48
      }, {
        "name" : "Key",
        "type" : 49
      }, {
        "name" : "Kind",
        "type" : 68
      }, {
        "name" : "Len",
        "type" : 40
      }, {
        "name" : "Method",
        "type" : 69
      }, {
        "name" : "MethodByName",
        "type" : 73
      }, {
        "name" : "Name",
        "type" : 75
      }, {
        "name" : "NumField",
        "type" : 40
      }, {
        "name" : "NumIn",
        "type" : 40
      }, {
        "name" : "NumMethod",
        "type" : 40
      }, {
        "name" : "NumOut",
        "type" : 40
      }, {
        "name" : "Out",
        "type" : 67
      }, {
        "name" : "PkgPath",
        "type" : 75
      }, {
        "name" : "Size",
        "type" : 76
      }, {
        "name" : "String",
        "type" : 75
      }, {
        "name" : "common",
        "type" : 78
      }, {
        "name" : "uncommon",
        "type" : 80
      } ],
      "name" : "interface{Align() int; AssignableTo(u reflect.Type) bool; Bits() int; ChanDir() reflect.ChanDir; Comparable() bool; ConvertibleTo(u reflect.Type) bool; Elem() reflect.Type; Field(i int) reflect.StructField; FieldAlign() int; FieldByIndex(index []int) reflect.StructField; FieldByName(name string) (reflect.StructField, bool); FieldByNameFunc(match func(string) bool) (reflect.StructField, bool); Implements(u reflect.Type) bool; In(i int) reflect.Type; IsVariadic() bool; Key() reflect.Type; Kind() reflect.Kind; Len() int; Method(int) reflect.Method; MethodByName(string) (reflect.Method, bool); Name() string; NumField() int; NumIn() int; NumMethod() int; NumOut() int; Out(i int) reflect.Type; PkgPath() string; Size() uintptr; String() string; common() *reflect.rtype; uncommon() *reflect.uncommonType}",
      "type" : "Interface",
      "underlying" : 39
    }, {
      "name" : "(reflect.Type) func() int",
      "params" : 25,
      "recv" : 9,
      "results" : 41,
      "type" : "Signature",
      "underlying" : 40,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 42
      } ],
      "name" : "(int)",
      "type" : "Tuple",
      "underlying" : 41
    }, {
      "name" : "int",
      "type" : "Basic",
      "underlying" : 42
    }, {
      "name" : "(reflect.Type) func(u reflect.Type) bool",
      "params" : 44,
      "recv" : 10,
      "results" : 15,
      "type" : "Signature",
      "underlying" : 43,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "u",
        "type" : 38
      } ],
      "name" : "(u reflect.Type)",
      "type" : "Tuple",
      "underlying" : 44
    }, {
      "name" : "(reflect.Type) func() reflect.ChanDir",
      "params" : 25,
      "recv" : 11,
      "results" : 46,
      "type" : "Signature",
      "underlying" : 45,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 47
      } ],
      "name" : "(reflect.ChanDir)",
      "type" : "Tuple",
      "underlying" : 46
    }, {
      "local-name" : "ChanDir",
      "name" : "reflect.ChanDir",
      "package" : 0,
      "type" : "Named",
      "underlying" : 42
    }, {
      "name" : "(reflect.Type) func() bool",
      "params" : 25,
      "recv" : 12,
      "results" : 15,
      "type" : "Signature",
      "underlying" : 48,
      "variadic" : false
    }, {
      "name" : "(reflect.Type) func() reflect.Type",
      "params" : 25,
      "recv" : 13,
      "results" : 50,
      "type" : "Signature",
      "underlying" : 49,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 38
      } ],
      "name" : "(reflect.Type)",
      "type" : "Tuple",
      "underlying" : 50
    }, {
      "name" : "(reflect.Type) func(i int) reflect.StructField",
      "params" : 52,
      "recv" : 14,
      "results" : 53,
      "type" : "Signature",
      "underlying" : 51,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "i",
        "type" : 42
      } ],
      "name" : "(i int)",
      "type" : "Tuple",
      "underlying" : 52
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 54
      } ],
      "name" : "(reflect.StructField)",
      "type" : "Tuple",
      "underlying" : 53
    }, {
      "local-name" : "StructField",
      "name" : "reflect.StructField",
      "package" : 0,
      "type" : "Named",
      "underlying" : 55
    }, {
      "fields" : [ {
        "name" : "Name",
        "type" : 2
      }, {
        "name" : "PkgPath",
        "type" : 2
      }, {
        "name" : "Type",
        "type" : 38
      }, {
        "name" : "Tag",
        "type" : 56
      }, {
        "name" : "Offset",
        "type" : 8
      }, {
        "name" : "Index",
        "type" : 57
      }, {
        "name" : "Anonymous",
        "type" : 16
      } ],
      "name" : "struct{Name string; PkgPath string; Type reflect.Type; Tag reflect.StructTag; Offset uintptr; Index []int; Anonymous bool}",
      "type" : "Struct",
      "underlying" : 55
    }, {
      "local-name" : "StructTag",
      "name" : "reflect.StructTag",
      "package" : 0,
      "type" : "Named",
      "underlying" : 2
    }, {
      "elem" : 42,
      "name" : "[]int",
      "type" : "Slice",
      "underlying" : 57
    }, {
      "name" : "(reflect.Type) func(index []int) reflect.StructField",
      "params" : 59,
      "recv" : 15,
      "results" : 53,
      "type" : "Signature",
      "underlying" : 58,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "index",
        "type" : 57
      } ],
      "name" : "(index []int)",
      "type" : "Tuple",
      "underlying" : 59
    }, {
      "name" : "(reflect.Type) func(name string) (reflect.StructField, bool)",
      "params" : 61,
      "recv" : 16,
      "results" : 62,
      "type" : "Signature",
      "underlying" : 60,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "name",
        "type" : 2
      } ],
      "name" : "(name string)",
      "type" : "Tuple",
      "underlying" : 61
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 54
      }, {
        "name" : "",
        "type" : 16
      } ],
      "name" : "(reflect.StructField, bool)",
      "type" : "Tuple",
      "underlying" : 62
    }, {
      "name" : "(reflect.Type) func(match func(string) bool) (reflect.StructField, bool)",
      "params" : 64,
      "recv" : 17,
      "results" : 62,
      "type" : "Signature",
      "underlying" : 63,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "match",
        "type" : 65
      } ],
      "name" : "(match func(string) bool)",
      "type" : "Tuple",
      "underlying" : 64
    }, {
      "name" : "func(string) bool",
      "params" : 66,
      "recv" : -1,
      "results" : 15,
      "type" : "Signature",
      "underlying" : 65,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 2
      } ],
      "name" : "(string)",
      "type" : "Tuple",
      "underlying" : 66
    }, {
      "name" : "(reflect.Type) func(i int) reflect.Type",
      "params" : 52,
      "recv" : 18,
      "results" : 50,
      "type" : "Signature",
      "underlying" : 67,
      "variadic" : false
    }, {
      "name" : "(reflect.Type) func() reflect.Kind",
      "params" : 25,
      "recv" : 19,
      "results" : 32,
      "type" : "Signature",
      "underlying" : 68,
      "variadic" : false
    }, {
      "name" : "(reflect.Type) func(int) reflect.Method",
      "params" : 41,
      "recv" : 20,
      "results" : 70,
      "type" : "Signature",
      "underlying" : 69,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 71
      } ],
      "name" : "(reflect.Method)",
      "type" : "Tuple",
      "underlying" : 70
    }, {
      "local-name" : "Method",
      "name" : "reflect.Method",
      "package" : 0,
      "type" : "Named",
      "underlying" : 72
    }, {
      "fields" : [ {
        "name" : "Name",
        "type" : 2
      }, {
        "name" : "PkgPath",
        "type" : 2
      }, {
        "name" : "Type",
        "type" : 38
      }, {
        "name" : "Func",
        "type" : 3
      }, {
        "name" : "Index",
        "type" : 42
      } ],
      "name" : "struct{Name string; PkgPath string; Type reflect.Type; Func reflect.Value; Index int}",
      "type" : "Struct",
      "underlying" : 72
    }, {
      "name" : "(reflect.Type) func(string) (reflect.Method, bool)",
      "params" : 66,
      "recv" : 21,
      "results" : 74,
      "type" : "Signature",
      "underlying" : 73,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 71
      }, {
        "name" : "",
        "type" : 16
      } ],
      "name" : "(reflect.Method, bool)",
      "type" : "Tuple",
      "underlying" : 74
    }, {
      "name" : "(reflect.Type) func() string",
      "params" : 25,
      "recv" : 22,
      "results" : 66,
      "type" : "Signature",
      "underlying" : 75,
      "variadic" : false
    }, {
      "name" : "(reflect.Type) func() uintptr",
      "params" : 25,
      "recv" : 23,
      "results" : 77,
      "type" : "Signature",
      "underlying" : 76,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 8
      } ],
      "name" : "(uintptr)",
      "type" : "Tuple",
      "underlying" : 77
    }, {
      "name" : "(reflect.Type) func() *reflect.rtype",
      "params" : 25,
      "recv" : 24,
      "results" : 79,
      "type" : "Signature",
      "underlying" : 78,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 5
      } ],
      "name" : "(*reflect.rtype)",
      "type" : "Tuple",
      "underlying" : 79
    }, {
      "name" : "(reflect.Type) func() *reflect.uncommonType",
      "params" : 25,
      "recv" : 25,
      "results" : 81,
      "type" : "Signature",
      "underlying" : 80,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 82
      } ],
      "name" : "(*reflect.uncommonType)",
      "type" : "Tuple",
      "underlying" : 81
    }, {
      "elem" : 83,
      "name" : "*reflect.uncommonType",
      "type" : "Pointer",
      "underlying" : 82
    }, {
      "local-name" : "uncommonType",
      "name" : "reflect.uncommonType",
      "package" : 0,
      "type" : "Named",
      "underlying" : 84
    }, {
      "fields" : [ {
        "name" : "pkgPath",
        "type" : 19
      }, {
        "name" : "mcount",
        "type" : 37
      }, {
        "name" : "xcount",
        "type" : 37
      }, {
        "name" : "moff",
        "type" : 9
      }, {
        "name" : "_",
        "type" : 9
      } ],
      "name" : "struct{pkgPath reflect.nameOff; mcount uint16; xcount uint16; moff uint32; _ uint32}",
      "type" : "Struct",
      "underlying" : 84
    }, {
      "name" : "func() reflect.Type",
      "params" : 25,
      "recv" : -1,
      "results" : 50,
      "type" : "Signature",
      "underlying" : 85,
      "variadic" : false
    }, {
      "name" : "(reflect.Value) func() reflect.Type",
      "params" : 25,
      "recv" : 26,
      "results" : 50,
      "type" : "Signature",
      "underlying" : 86,
      "variadic" : false
    }, {
      "name" : "func()",
      "params" : 25,
      "recv" : -1,
      "results" : 25,
      "type" : "Signature",
      "underlying" : 87,
      "variadic" : false
    }, {
      "elem" : 8,
      "name" : "*uintptr",
      "type" : "Pointer",
      "underlying" : 88
    }, {
      "elem" : 88,
      "name" : "**uintptr",
      "type" : "Pointer",
      "underlying" : 89
    }, {
      "elem" : 87,
      "name" : "*func()",
      "type" : "Pointer",
      "underlying" : 90
    }, {
      "fields" : [ {
        "name" : "frametype",
        "type" : 5
      }, {
        "name" : "argSize",
        "type" : 8
      }, {
        "name" : "retOffset",
        "type" : 8
      }, {
        "name" : "stk",
        "type" : 92
      }, {
        "name" : "framePool",
        "type" : 96
      } ],
      "name" : "(frametype *reflect.rtype, argSize uintptr, retOffset uintptr, stk *reflect.bitVector, framePool *sync.Pool)",
      "type" : "Tuple",
      "underlying" : 91
    }, {
      "elem" : 93,
      "name" : "*reflect.bitVector",
      "type" : "Pointer",
      "underlying" : 92
    }, {
      "local-name" : "bitVector",
      "name" : "reflect.bitVector",
      "package" : 0,
      "type" : "Named",
      "underlying" : 94
    }, {
      "fields" : [ {
        "name" : "n",
        "type" : 9
      }, {
        "name" : "data",
        "type" : 95
      } ],
      "name" : "struct{n uint32; data []byte}",
      "type" : "Struct",
      "underlying" : 94
    }, {
      "elem" : 18,
      "name" : "[]byte",
      "type" : "Slice",
      "underlying" : 95
    }, {
      "elem" : 97,
      "name" : "*sync.Pool",
      "type" : "Pointer",
      "underlying" : 96
    }, {
      "local-name" : "Pool",
      "name" : "sync.Pool",
      "package" : 2,
      "type" : "Named",
      "underlying" : 98
    }, {
      "fields" : [ {
        "name" : "noCopy",
        "type" : 99
      }, {
        "name" : "local",
        "type" : 14
      }, {
        "name" : "localSize",
        "type" : 8
      }, {
        "name" : "victim",
        "type" : 14
      }, {
        "name" : "victimSize",
        "type" : 8
      }, {
        "name" : "New",
        "type" : 101
      } ],
      "name" : "struct{noCopy sync.noCopy; local unsafe.Pointer; localSize uintptr; victim unsafe.Pointer; victimSize uintptr; New func() interface{}}",
      "type" : "Struct",
      "underlying" : 98
    }, {
      "local-name" : "noCopy",
      "name" : "sync.noCopy",
      "package" : 2,
      "type" : "Named",
      "underlying" : 100
    }, {
      "fields" : [ ],
      "name" : "struct{}",
      "type" : "Struct",
      "underlying" : 100
    }, {
      "name" : "func() interface{}",
      "params" : 25,
      "recv" : -1,
      "results" : 27,
      "type" : "Signature",
      "underlying" : 101,
      "variadic" : false
    }, {
      "name" : "func(t *reflect.funcType, rcvr *reflect.rtype) (frametype *reflect.rtype, argSize uintptr, retOffset uintptr, stk *reflect.bitVector, framePool *sync.Pool)",
      "params" : 103,
      "recv" : -1,
      "results" : 91,
      "type" : "Signature",
      "underlying" : 102,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "t",
        "type" : 34
      }, {
        "name" : "rcvr",
        "type" : 5
      } ],
      "name" : "(t *reflect.funcType, rcvr *reflect.rtype)",
      "type" : "Tuple",
      "underlying" : 103
    }, {
      "name" : "untyped nil",
      "type" : "Basic",
      "underlying" : 104
    }, {
      "elem" : 106,
      "name" : "*reflect.methodValue",
      "type" : "Pointer",
      "underlying" : 105
    }, {
      "local-name" : "methodValue",
      "name" : "reflect.methodValue",
      "package" : 0,
      "type" : "Named",
      "underlying" : 107
    }, {
      "fields" : [ {
        "name" : "fn",
        "type" : 8
      }, {
        "name" : "stack",
        "type" : 92
      }, {
        "name" : "argLen",
        "type" : 8
      }, {
        "name" : "method",
        "type" : 42
      }, {
        "name" : "rcvr",
        "type" : 3
      } ],
      "name" : "struct{fn uintptr; stack *reflect.bitVector; argLen uintptr; method int; rcvr reflect.Value}",
      "type" : "Struct",
      "underlying" : 107
    }, {
      "name" : "untyped int",
      "type" : "Basic",
      "underlying" : 108
    }, {
      "fields" : [ {
        "name" : "rcvrtype",
        "type" : 5
      }, {
        "name" : "t",
        "type" : 34
      }, {
        "name" : "fn",
        "type" : 14
      } ],
      "name" : "(rcvrtype *reflect.rtype, t *reflect.funcType, fn unsafe.Pointer)",
      "type" : "Tuple",
      "underlying" : 109
    }, {
      "name" : "func(op string, v reflect.Value, methodIndex int) (rcvrtype *reflect.rtype, t *reflect.funcType, fn unsafe.Pointer)",
      "params" : 111,
      "recv" : -1,
      "results" : 109,
      "type" : "Signature",
      "underlying" : 110,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "op",
        "type" : 2
      }, {
        "name" : "v",
        "type" : 3
      }, {
        "name" : "methodIndex",
        "type" : 42
      } ],
      "name" : "(op string, v reflect.Value, methodIndex int)",
      "type" : "Tuple",
      "underlying" : 111
    } ],
    "variables" : [ {
      "name" : "op",
      "package" : 0,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "v",
      "package" : 0,
      "type" : 3,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "[res0]",
      "package" : 0,
      "type" : 3,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "flag",
      "package" : 0,
      "type" : 22,
      "exported" : false,
      "embedded" : true,
      "field" : true
    }, {
      "name" : "fl",
      "package" : 0,
      "type" : 22,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "typ",
      "package" : 0,
      "type" : 5,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "t",
      "package" : 0,
      "type" : 5,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "ptr",
      "package" : 0,
      "type" : 14,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "rcvr",
      "package" : 0,
      "type" : 3,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 0,
      "type" : 38,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 0,
      "type" : 38,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 0,
      "type" : 38,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 0,
      "type" : 38,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 0,
      "type" : 38,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 0,
      "type" : 38,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 0,
      "type" : 38,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 0,
      "type" : 38,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 0,
      "type" : 38,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 0,
      "type" : 38,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 0,
      "type" : 38,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 0,
      "type" : 38,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 0,
      "type" : 38,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 0,
      "type" : 38,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 0,
      "type" : 38,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 0,
      "type" : 38,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 0,
      "type" : 38,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "v",
      "package" : 0,
      "type" : 3,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "ftyp",
      "package" : 0,
      "type" : 34,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "dummy",
      "package" : 0,
      "type" : 87,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "code",
      "package" : 0,
      "type" : 8,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "stack",
      "package" : 0,
      "type" : 92,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "argLen",
      "package" : 0,
      "type" : 8,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "_",
      "package" : 0,
      "type" : 8,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "_",
      "package" : 0,
      "type" : 5,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "_",
      "package" : 0,
      "type" : 96,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "fn",
      "package" : 0,
      "type" : 8,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "stack",
      "package" : 0,
      "type" : 92,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "argLen",
      "package" : 0,
      "type" : 8,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "method",
      "package" : 0,
      "type" : 42,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "rcvr",
      "package" : 0,
      "type" : 3,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "fv",
      "package" : 0,
      "type" : 105,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "rtype",
      "package" : 0,
      "type" : 6,
      "exported" : false,
      "embedded" : true,
      "field" : true
    } ]
  },
  "go-version" : "1.14.3"
}