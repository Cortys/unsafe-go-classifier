{
  "usage" : {
    "file" : "value.go",
    "label1" : "cast-struct",
    "label2" : "types",
    "line" : "106",
    "module" : "std",
    "pkg" : "reflect",
    "project" : "kubernetes/kubernetes",
    "snippet" : "e := (*emptyInterface)(unsafe.Pointer(&i))",
    "version" : "std"
  },
  "cfg" : {
    "blocks" : [ {
      "update-vars" : [ ],
      "successors" : [ 2 ],
      "in-vars" : [ 0 ],
      "exit" : false,
      "out-vars" : [ 0 ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[entry]",
      "entry" : true,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ ],
      "in-vars" : [ ],
      "exit" : true,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[exit]",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 3 ],
      "in-vars" : [ 0 ],
      "exit" : false,
      "out-vars" : [ 0, 3 ],
      "decl-vars" : [ 3 ],
      "line-start" : 104,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "t"
          }
        } ],
        "right" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "typ",
            "variable" : 2
          },
          "go-type" : 4,
          "kind" : "expression",
          "target" : {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "v",
              "variable" : 0
            }
          },
          "type" : "selector"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 104,
      "code" : "t := v.typ",
      "entry" : false,
      "use-vars" : [ 0 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 4 ],
      "in-vars" : [ 0, 3 ],
      "exit" : false,
      "out-vars" : [ 0, 3, 4 ],
      "decl-vars" : [ 4 ],
      "line-start" : 105,
      "ast" : {
        "kind" : "statement",
        "target" : {
          "kind" : "decl",
          "specs" : [ {
            "comments" : [ ],
            "declared-type" : {
              "go-type" : 23,
              "incomplete" : false,
              "kind" : "type",
              "methods" : [ ],
              "type" : "interface"
            },
            "kind" : "spec",
            "names" : [ {
              "ident-kind" : "NoKind",
              "kind" : "ident",
              "value" : "i"
            } ],
            "type" : "var",
            "values" : [ ]
          } ],
          "type" : "var"
        },
        "type" : "declaration"
      },
      "assign-vars" : [ ],
      "line-end" : 105,
      "code" : "var i interface{}",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 5 ],
      "in-vars" : [ 3, 4, 0 ],
      "exit" : false,
      "out-vars" : [ 4, 0, 5, 3 ],
      "decl-vars" : [ 5 ],
      "line-start" : 106,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "e"
          }
        } ],
        "right" : [ {
          "coerced-to" : {
            "contained" : {
              "go-type" : 25,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 25,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "emptyInterface"
              }
            },
            "go-type" : 24,
            "kind" : "type",
            "type" : "pointer"
          },
          "go-type" : 24,
          "kind" : "expression",
          "target" : {
            "coerced-to" : {
              "go-type" : 13,
              "kind" : "type",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 1,
                "value" : "unsafe"
              },
              "type" : "identifier",
              "value" : {
                "go-type" : 13,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "Pointer"
              }
            },
            "go-type" : 13,
            "kind" : "expression",
            "target" : {
              "go-type" : 27,
              "kind" : "expression",
              "operator" : "&",
              "target" : {
                "go-type" : 23,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "i",
                  "variable" : 4
                }
              },
              "type" : "unary"
            },
            "type" : "cast"
          },
          "type" : "cast"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 106,
      "code" : "e := (*emptyInterface)(unsafe.Pointer(&i))",
      "entry" : false,
      "use-vars" : [ 4 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 6, 15, 17 ],
      "in-vars" : [ 0, 5, 3, 4 ],
      "exit" : false,
      "out-vars" : [ 0, 5, 3, 4 ],
      "decl-vars" : [ ],
      "line-start" : 108,
      "ast" : {
        "condition" : null,
        "kind" : "statement",
        "type" : "switch"
      },
      "assign-vars" : [ ],
      "line-end" : 130,
      "code" : "switch {\ncase ifaceIndir(t):\n\tif v.flag&flagIndir == 0 {\n\t\tpanic(\"bad indir\")\n\t}\n\n\tptr := v.ptr\n\tif v.flag&flagAddr != 0 {\n\n\t\tc := unsafe_New(t)\n\t\ttypedmemmove(t, c, ptr)\n\t\tptr = c\n\t}\n\te.word = ptr\ncase v.flag&flagIndir != 0:\n\n\te.word = *(*unsafe.Pointer)(v.ptr)\ndefault:\n\n\te.word = v.ptr\n}",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 7 ],
      "in-vars" : [ 5, 3, 4, 0 ],
      "exit" : false,
      "out-vars" : [ 0, 5, 3, 4 ],
      "decl-vars" : [ ],
      "line-start" : 109,
      "ast" : {
        "expressions" : [ {
          "arguments" : [ {
            "go-type" : 4,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "t",
              "variable" : 3
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 37,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "ifaceIndir"
            }
          },
          "go-type" : 15,
          "kind" : "expression",
          "type" : "call"
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 122,
      "code" : "case ifaceIndir(t):\n\tif v.flag&flagIndir == 0 {\n\t\tpanic(\"bad indir\")\n\t}\n\n\tptr := v.ptr\n\tif v.flag&flagAddr != 0 {\n\n\t\tc := unsafe_New(t)\n\t\ttypedmemmove(t, c, ptr)\n\t\tptr = c\n\t}\n\te.word = ptr",
      "entry" : false,
      "use-vars" : [ 3 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 8, 9 ],
      "in-vars" : [ 0, 5, 3, 4 ],
      "exit" : false,
      "out-vars" : [ 4, 0, 5, 3 ],
      "decl-vars" : [ ],
      "line-start" : 110,
      "ast" : {
        "condition" : {
          "go-type" : 28,
          "kind" : "expression",
          "left" : {
            "go-type" : 21,
            "kind" : "expression",
            "left" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "flag",
                "variable" : 6
              },
              "go-type" : 21,
              "kind" : "expression",
              "target" : {
                "go-type" : 2,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "v",
                  "variable" : 0
                }
              },
              "type" : "selector"
            },
            "operator" : "&",
            "right" : {
              "go-type" : 21,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "128"
              }
            },
            "type" : "binary"
          },
          "operator" : "==",
          "right" : {
            "go-type" : 21,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 112,
      "code" : "if v.flag&flagIndir == 0 {\n\tpanic(\"bad indir\")\n}",
      "entry" : false,
      "use-vars" : [ 0 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 9 ],
      "in-vars" : [ 0, 5, 3, 4 ],
      "exit" : false,
      "out-vars" : [ 5, 3, 4, 0 ],
      "decl-vars" : [ ],
      "line-start" : 111,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 31,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "bad indir"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 30,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Builtin",
              "kind" : "ident",
              "value" : "panic"
            }
          },
          "go-type" : 29,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 111,
      "code" : "panic(\"bad indir\")",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 10 ],
      "in-vars" : [ 0, 5, 3, 4 ],
      "exit" : false,
      "out-vars" : [ 0, 5, 3, 4, 9 ],
      "decl-vars" : [ 9 ],
      "line-start" : 114,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "ptr"
          }
        } ],
        "right" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "ptr",
            "variable" : 7
          },
          "go-type" : 13,
          "kind" : "expression",
          "target" : {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "v",
              "variable" : 0
            }
          },
          "type" : "selector"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 114,
      "code" : "ptr := v.ptr",
      "entry" : false,
      "use-vars" : [ 0 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 11, 14 ],
      "in-vars" : [ 0, 5, 3, 4, 9 ],
      "exit" : false,
      "out-vars" : [ 5, 3, 4, 9 ],
      "decl-vars" : [ ],
      "line-start" : 115,
      "ast" : {
        "condition" : {
          "go-type" : 28,
          "kind" : "expression",
          "left" : {
            "go-type" : 21,
            "kind" : "expression",
            "left" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "flag",
                "variable" : 6
              },
              "go-type" : 21,
              "kind" : "expression",
              "target" : {
                "go-type" : 2,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "v",
                  "variable" : 0
                }
              },
              "type" : "selector"
            },
            "operator" : "&",
            "right" : {
              "go-type" : 21,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "256"
              }
            },
            "type" : "binary"
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 21,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 121,
      "code" : "if v.flag&flagAddr != 0 {\n\n\tc := unsafe_New(t)\n\ttypedmemmove(t, c, ptr)\n\tptr = c\n}",
      "entry" : false,
      "use-vars" : [ 0 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 12 ],
      "in-vars" : [ 9, 5, 3, 4 ],
      "exit" : false,
      "out-vars" : [ 5, 3, 4, 9, 8 ],
      "decl-vars" : [ 8 ],
      "line-start" : 118,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "c"
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 4,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "t",
              "variable" : 3
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 32,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "unsafe_New"
            }
          },
          "go-type" : 13,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 118,
      "code" : "c := unsafe_New(t)",
      "entry" : false,
      "use-vars" : [ 3 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 13 ],
      "in-vars" : [ 9, 8, 5, 3, 4 ],
      "exit" : false,
      "out-vars" : [ 3, 4, 8, 5 ],
      "decl-vars" : [ ],
      "line-start" : 119,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 4,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "t",
              "variable" : 3
            }
          }, {
            "go-type" : 13,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "c",
              "variable" : 8
            }
          }, {
            "go-type" : 13,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "ptr",
              "variable" : 9
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 35,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "typedmemmove"
            }
          },
          "go-type" : 29,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 119,
      "code" : "typedmemmove(t, c, ptr)",
      "entry" : false,
      "use-vars" : [ 3, 8, 9 ]
    }, {
      "update-vars" : [ 9 ],
      "successors" : [ 14 ],
      "in-vars" : [ 5, 3, 4, 8 ],
      "exit" : false,
      "out-vars" : [ 9, 5, 3, 4 ],
      "decl-vars" : [ ],
      "line-start" : 120,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 13,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "ptr",
            "variable" : 9
          }
        } ],
        "right" : [ {
          "go-type" : 13,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "c",
            "variable" : 8
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 9 ],
      "line-end" : 120,
      "code" : "ptr = c",
      "entry" : false,
      "use-vars" : [ 8 ]
    }, {
      "update-vars" : [ 5 ],
      "successors" : [ 19 ],
      "in-vars" : [ 4, 9, 5, 3 ],
      "exit" : false,
      "out-vars" : [ 5, 3, 4 ],
      "decl-vars" : [ ],
      "line-start" : 122,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "word",
            "variable" : 10
          },
          "go-type" : 13,
          "kind" : "expression",
          "target" : {
            "go-type" : 24,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "e",
              "variable" : 5
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "go-type" : 13,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "ptr",
            "variable" : 9
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 122,
      "code" : "e.word = ptr",
      "entry" : false,
      "use-vars" : [ 9, 5 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 16 ],
      "in-vars" : [ 0, 5, 3, 4 ],
      "exit" : false,
      "out-vars" : [ 5, 3, 4, 0 ],
      "decl-vars" : [ ],
      "line-start" : 123,
      "ast" : {
        "expressions" : [ {
          "go-type" : 15,
          "kind" : "expression",
          "left" : {
            "go-type" : 21,
            "kind" : "expression",
            "left" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "flag",
                "variable" : 6
              },
              "go-type" : 21,
              "kind" : "expression",
              "target" : {
                "go-type" : 2,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "v",
                  "variable" : 0
                }
              },
              "type" : "selector"
            },
            "operator" : "&",
            "right" : {
              "go-type" : 21,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "128"
              }
            },
            "type" : "binary"
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 21,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "type" : "binary"
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 126,
      "code" : "case v.flag&flagIndir != 0:\n\n\te.word = *(*unsafe.Pointer)(v.ptr)",
      "entry" : false,
      "use-vars" : [ 0 ]
    }, {
      "update-vars" : [ 5 ],
      "successors" : [ 19 ],
      "in-vars" : [ 0, 5, 3, 4 ],
      "exit" : false,
      "out-vars" : [ 5, 3, 4 ],
      "decl-vars" : [ ],
      "line-start" : 126,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "word",
            "variable" : 10
          },
          "go-type" : 13,
          "kind" : "expression",
          "target" : {
            "go-type" : 24,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "e",
              "variable" : 5
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "go-type" : 13,
          "kind" : "expression",
          "target" : {
            "coerced-to" : {
              "contained" : {
                "go-type" : 13,
                "kind" : "type",
                "qualifier" : {
                  "ident-kind" : "PkgName",
                  "kind" : "ident",
                  "package" : 1,
                  "value" : "unsafe"
                },
                "type" : "identifier",
                "value" : {
                  "go-type" : 13,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "Pointer"
                }
              },
              "go-type" : 39,
              "kind" : "type",
              "type" : "pointer"
            },
            "go-type" : 39,
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "ptr",
                "variable" : 7
              },
              "go-type" : 13,
              "kind" : "expression",
              "target" : {
                "go-type" : 2,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "v",
                  "variable" : 0
                }
              },
              "type" : "selector"
            },
            "type" : "cast"
          },
          "type" : "star"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 126,
      "code" : "e.word = *(*unsafe.Pointer)(v.ptr)",
      "entry" : false,
      "use-vars" : [ 5, 0 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 18 ],
      "in-vars" : [ 0, 5, 3, 4 ],
      "exit" : false,
      "out-vars" : [ 4, 0, 5, 3 ],
      "decl-vars" : [ ],
      "line-start" : 127,
      "ast" : {
        "expressions" : [ ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 129,
      "code" : "default:\n\n\te.word = v.ptr",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ 5 ],
      "successors" : [ 19 ],
      "in-vars" : [ 0, 5, 3, 4 ],
      "exit" : false,
      "out-vars" : [ 5, 3, 4 ],
      "decl-vars" : [ ],
      "line-start" : 129,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "word",
            "variable" : 10
          },
          "go-type" : 13,
          "kind" : "expression",
          "target" : {
            "go-type" : 24,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "e",
              "variable" : 5
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "ptr",
            "variable" : 7
          },
          "go-type" : 13,
          "kind" : "expression",
          "target" : {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "v",
              "variable" : 0
            }
          },
          "type" : "selector"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 129,
      "code" : "e.word = v.ptr",
      "entry" : false,
      "use-vars" : [ 0, 5 ]
    }, {
      "update-vars" : [ 5 ],
      "successors" : [ 20 ],
      "in-vars" : [ 5, 3, 4 ],
      "exit" : false,
      "out-vars" : [ 4 ],
      "decl-vars" : [ ],
      "line-start" : 135,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "typ",
            "variable" : 11
          },
          "go-type" : 4,
          "kind" : "expression",
          "target" : {
            "go-type" : 24,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "e",
              "variable" : 5
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "go-type" : 4,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "t",
            "variable" : 3
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 135,
      "code" : "e.typ = t",
      "entry" : false,
      "use-vars" : [ 3, 5 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 4 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 136,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 23,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "i",
            "variable" : 4
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 136,
      "code" : "return i",
      "entry" : false,
      "use-vars" : [ 4 ]
    } ],
    "code" : "// packEface converts v to the empty interface.\nfunc packEface(v Value) interface{} {\n\tt := v.typ\n\tvar i interface{}\n\te := (*emptyInterface)(unsafe.Pointer(&i))\n\n\tswitch {\n\tcase ifaceIndir(t):\n\t\tif v.flag&flagIndir == 0 {\n\t\t\tpanic(\"bad indir\")\n\t\t}\n\n\t\tptr := v.ptr\n\t\tif v.flag&flagAddr != 0 {\n\n\t\t\tc := unsafe_New(t)\n\t\t\ttypedmemmove(t, c, ptr)\n\t\t\tptr = c\n\t\t}\n\t\te.word = ptr\n\tcase v.flag&flagIndir != 0:\n\n\t\te.word = *(*unsafe.Pointer)(v.ptr)\n\tdefault:\n\n\t\te.word = v.ptr\n\t}\n\n\te.typ = t\n\treturn i\n}",
    "defines" : [ 0 ],
    "functions" : [ {
      "name" : "packEface",
      "package" : 0,
      "type" : 0,
      "exported" : false
    }, {
      "name" : "unsafe_New",
      "package" : 0,
      "type" : 32,
      "exported" : false
    }, {
      "name" : "typedmemmove",
      "package" : 0,
      "type" : 35,
      "exported" : false
    }, {
      "name" : "ifaceIndir",
      "package" : 0,
      "type" : 37,
      "exported" : false
    } ],
    "line-end" : 137,
    "line-start" : 103,
    "names" : [ "packEface" ],
    "package" : 0,
    "packages" : [ {
      "name" : "reflect",
      "path" : "reflect"
    }, {
      "name" : "unsafe",
      "path" : "unsafe"
    } ],
    "params" : [ 0 ],
    "receivers" : [ ],
    "results" : [ 1 ],
    "type" : "function",
    "types" : [ {
      "name" : "func(v reflect.Value) interface{}",
      "params" : 1,
      "recv" : -1,
      "results" : 22,
      "type" : "Signature",
      "underlying" : 0,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "v",
        "type" : 2
      } ],
      "name" : "(v reflect.Value)",
      "type" : "Tuple",
      "underlying" : 1
    }, {
      "local-name" : "Value",
      "name" : "reflect.Value",
      "package" : 0,
      "type" : "Named",
      "underlying" : 3
    }, {
      "fields" : [ {
        "name" : "typ",
        "type" : 4
      }, {
        "name" : "ptr",
        "type" : 13
      }, {
        "name" : "flag",
        "type" : 21
      } ],
      "name" : "struct{typ *reflect.rtype; ptr unsafe.Pointer; reflect.flag}",
      "type" : "Struct",
      "underlying" : 3
    }, {
      "elem" : 5,
      "name" : "*reflect.rtype",
      "type" : "Pointer",
      "underlying" : 4
    }, {
      "local-name" : "rtype",
      "name" : "reflect.rtype",
      "package" : 0,
      "type" : "Named",
      "underlying" : 6
    }, {
      "fields" : [ {
        "name" : "size",
        "type" : 7
      }, {
        "name" : "ptrdata",
        "type" : 7
      }, {
        "name" : "hash",
        "type" : 8
      }, {
        "name" : "tflag",
        "type" : 9
      }, {
        "name" : "align",
        "type" : 10
      }, {
        "name" : "fieldAlign",
        "type" : 10
      }, {
        "name" : "kind",
        "type" : 10
      }, {
        "name" : "equal",
        "type" : 11
      }, {
        "name" : "gcdata",
        "type" : 16
      }, {
        "name" : "str",
        "type" : 18
      }, {
        "name" : "ptrToThis",
        "type" : 20
      } ],
      "name" : "struct{size uintptr; ptrdata uintptr; hash uint32; tflag reflect.tflag; align uint8; fieldAlign uint8; kind uint8; equal func(unsafe.Pointer, unsafe.Pointer) bool; gcdata *byte; str reflect.nameOff; ptrToThis reflect.typeOff}",
      "type" : "Struct",
      "underlying" : 6
    }, {
      "name" : "uintptr",
      "type" : "Basic",
      "underlying" : 7
    }, {
      "name" : "uint32",
      "type" : "Basic",
      "underlying" : 8
    }, {
      "local-name" : "tflag",
      "name" : "reflect.tflag",
      "package" : 0,
      "type" : "Named",
      "underlying" : 10
    }, {
      "name" : "uint8",
      "type" : "Basic",
      "underlying" : 10
    }, {
      "name" : "func(unsafe.Pointer, unsafe.Pointer) bool",
      "params" : 12,
      "recv" : -1,
      "results" : 14,
      "type" : "Signature",
      "underlying" : 11,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 13
      }, {
        "name" : "",
        "type" : 13
      } ],
      "name" : "(unsafe.Pointer, unsafe.Pointer)",
      "type" : "Tuple",
      "underlying" : 12
    }, {
      "local-name" : "Pointer",
      "name" : "unsafe.Pointer",
      "package" : 1,
      "type" : "Basic",
      "underlying" : 13
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 15
      } ],
      "name" : "(bool)",
      "type" : "Tuple",
      "underlying" : 14
    }, {
      "name" : "bool",
      "type" : "Basic",
      "underlying" : 15
    }, {
      "elem" : 17,
      "name" : "*byte",
      "type" : "Pointer",
      "underlying" : 16
    }, {
      "name" : "byte",
      "type" : "Basic",
      "underlying" : 17
    }, {
      "local-name" : "nameOff",
      "name" : "reflect.nameOff",
      "package" : 0,
      "type" : "Named",
      "underlying" : 19
    }, {
      "name" : "int32",
      "type" : "Basic",
      "underlying" : 19
    }, {
      "local-name" : "typeOff",
      "name" : "reflect.typeOff",
      "package" : 0,
      "type" : "Named",
      "underlying" : 19
    }, {
      "local-name" : "flag",
      "name" : "reflect.flag",
      "package" : 0,
      "type" : "Named",
      "underlying" : 7
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 23
      } ],
      "name" : "(interface{})",
      "type" : "Tuple",
      "underlying" : 22
    }, {
      "methods" : [ ],
      "name" : "interface{}",
      "type" : "Interface",
      "underlying" : 23
    }, {
      "elem" : 25,
      "name" : "*reflect.emptyInterface",
      "type" : "Pointer",
      "underlying" : 24
    }, {
      "local-name" : "emptyInterface",
      "name" : "reflect.emptyInterface",
      "package" : 0,
      "type" : "Named",
      "underlying" : 26
    }, {
      "fields" : [ {
        "name" : "typ",
        "type" : 4
      }, {
        "name" : "word",
        "type" : 13
      } ],
      "name" : "struct{typ *reflect.rtype; word unsafe.Pointer}",
      "type" : "Struct",
      "underlying" : 26
    }, {
      "elem" : 23,
      "name" : "*interface{}",
      "type" : "Pointer",
      "underlying" : 27
    }, {
      "name" : "untyped bool",
      "type" : "Basic",
      "underlying" : 28
    }, {
      "fields" : [ ],
      "name" : "()",
      "type" : "Tuple",
      "underlying" : 29
    }, {
      "name" : "func(interface{})",
      "params" : 22,
      "recv" : -1,
      "results" : 29,
      "type" : "Signature",
      "underlying" : 30,
      "variadic" : false
    }, {
      "name" : "string",
      "type" : "Basic",
      "underlying" : 31
    }, {
      "name" : "func(*reflect.rtype) unsafe.Pointer",
      "params" : 33,
      "recv" : -1,
      "results" : 34,
      "type" : "Signature",
      "underlying" : 32,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 4
      } ],
      "name" : "(*reflect.rtype)",
      "type" : "Tuple",
      "underlying" : 33
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 13
      } ],
      "name" : "(unsafe.Pointer)",
      "type" : "Tuple",
      "underlying" : 34
    }, {
      "name" : "func(t *reflect.rtype, dst unsafe.Pointer, src unsafe.Pointer)",
      "params" : 36,
      "recv" : -1,
      "results" : 29,
      "type" : "Signature",
      "underlying" : 35,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "t",
        "type" : 4
      }, {
        "name" : "dst",
        "type" : 13
      }, {
        "name" : "src",
        "type" : 13
      } ],
      "name" : "(t *reflect.rtype, dst unsafe.Pointer, src unsafe.Pointer)",
      "type" : "Tuple",
      "underlying" : 36
    }, {
      "name" : "func(t *reflect.rtype) bool",
      "params" : 38,
      "recv" : -1,
      "results" : 14,
      "type" : "Signature",
      "underlying" : 37,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "t",
        "type" : 4
      } ],
      "name" : "(t *reflect.rtype)",
      "type" : "Tuple",
      "underlying" : 38
    }, {
      "elem" : 13,
      "name" : "*unsafe.Pointer",
      "type" : "Pointer",
      "underlying" : 39
    } ],
    "variables" : [ {
      "name" : "v",
      "package" : 0,
      "type" : 2,
      "exported" : false
    }, {
      "name" : "[res0]",
      "package" : 0,
      "type" : 23,
      "exported" : false
    }, {
      "name" : "typ",
      "package" : 0,
      "type" : 4,
      "exported" : false
    }, {
      "name" : "t",
      "package" : 0,
      "type" : 4,
      "exported" : false
    }, {
      "name" : "i",
      "package" : 0,
      "type" : 23,
      "exported" : false
    }, {
      "name" : "e",
      "package" : 0,
      "type" : 24,
      "exported" : false
    }, {
      "name" : "flag",
      "package" : 0,
      "type" : 21,
      "exported" : false
    }, {
      "name" : "ptr",
      "package" : 0,
      "type" : 13,
      "exported" : false
    }, {
      "name" : "c",
      "package" : 0,
      "type" : 13,
      "exported" : false
    }, {
      "name" : "ptr",
      "package" : 0,
      "type" : 13,
      "exported" : false
    }, {
      "name" : "word",
      "package" : 0,
      "type" : 13,
      "exported" : false
    }, {
      "name" : "typ",
      "package" : 0,
      "type" : 4,
      "exported" : false
    } ]
  },
  "go-version" : "1.14.3"
}