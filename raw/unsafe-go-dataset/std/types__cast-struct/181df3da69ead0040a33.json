{
  "usage" : {
    "file" : "type.go",
    "label1" : "cast-struct",
    "label2" : "types",
    "line" : "1316",
    "module" : "std",
    "pkg" : "reflect",
    "project" : "kubernetes/kubernetes",
    "snippet" : "styp := (*structType)(unsafe.Pointer(ntyp))",
    "version" : "std"
  },
  "cfg" : {
    "blocks" : [ {
      "update-vars" : [ ],
      "successors" : [ 2 ],
      "in-vars" : [ 17, 20, 18 ],
      "exit" : false,
      "out-vars" : [ 17, 20, 18 ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[entry]",
      "entry" : true,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ ],
      "in-vars" : [ ],
      "exit" : true,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[exit]",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 3 ],
      "in-vars" : [ 17, 20, 18 ],
      "exit" : false,
      "out-vars" : [ 18, 17, 21, 20 ],
      "decl-vars" : [ 21 ],
      "line-start" : 1246,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "current"
          }
        } ],
        "right" : [ {
          "declared" : {
            "element" : {
              "go-type" : 84,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 84,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "fieldScan"
              }
            },
            "go-type" : 83,
            "kind" : "type",
            "type" : "slice"
          },
          "go-type" : 83,
          "kind" : "literal",
          "type" : "composite",
          "values" : [ ]
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 1246,
      "code" : "current := []fieldScan{}",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 4 ],
      "in-vars" : [ 17, 21, 20, 18 ],
      "exit" : false,
      "out-vars" : [ 23, 21, 20, 18 ],
      "decl-vars" : [ 23 ],
      "line-start" : 1247,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "next"
          }
        } ],
        "right" : [ {
          "declared" : {
            "element" : {
              "go-type" : 84,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 84,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "fieldScan"
              }
            },
            "go-type" : 83,
            "kind" : "type",
            "type" : "slice"
          },
          "go-type" : 83,
          "kind" : "literal",
          "type" : "composite",
          "values" : [ {
            "declared" : null,
            "go-type" : 84,
            "kind" : "literal",
            "type" : "composite",
            "values" : [ {
              "go-type" : -1,
              "key" : {
                "go-type" : -1,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "typ",
                  "variable" : 22
                }
              },
              "kind" : "expression",
              "type" : "key-value",
              "value" : {
                "go-type" : 75,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "t",
                  "variable" : 17
                }
              }
            } ]
          } ]
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 1247,
      "code" : "next := []fieldScan{{typ: t}}",
      "entry" : false,
      "use-vars" : [ 17 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 5 ],
      "in-vars" : [ 23, 21, 20, 18 ],
      "exit" : false,
      "out-vars" : [ 24, 23, 21, 20, 18 ],
      "decl-vars" : [ 24 ],
      "line-start" : 1255,
      "ast" : {
        "kind" : "statement",
        "target" : {
          "kind" : "decl",
          "specs" : [ {
            "comments" : [ ],
            "declared-type" : {
              "go-type" : 86,
              "key" : {
                "contained" : {
                  "go-type" : 76,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 76,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "structType"
                  }
                },
                "go-type" : 75,
                "kind" : "type",
                "type" : "pointer"
              },
              "kind" : "type",
              "type" : "map",
              "value" : {
                "go-type" : 15,
                "kind" : "type",
                "type" : "identifier",
                "value" : {
                  "go-type" : 15,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "int"
                }
              }
            },
            "kind" : "spec",
            "names" : [ {
              "ident-kind" : "NoKind",
              "kind" : "ident",
              "value" : "nextCount"
            } ],
            "type" : "var",
            "values" : [ ]
          } ],
          "type" : "var"
        },
        "type" : "declaration"
      },
      "assign-vars" : [ ],
      "line-end" : 1255,
      "code" : "// nextCount records the number of times an embedded type has been\n// encountered and considered for queueing in the 'next' slice.\n// We only queue the first one, but we increment the count on each.\n// If a struct type T can be reached more than once at a given depth level,\n// then it annihilates itself and need not be considered at all when we\n// process that next depth level.\nvar nextCount map[*structType]int",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 6 ],
      "in-vars" : [ 18, 24, 23, 21, 20 ],
      "exit" : false,
      "out-vars" : [ 20, 18, 24, 23, 25, 21 ],
      "decl-vars" : [ 25 ],
      "line-start" : 1262,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "visited"
          }
        } ],
        "right" : [ {
          "declared" : {
            "go-type" : 87,
            "key" : {
              "contained" : {
                "go-type" : 76,
                "kind" : "type",
                "type" : "identifier",
                "value" : {
                  "go-type" : 76,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "structType"
                }
              },
              "go-type" : 75,
              "kind" : "type",
              "type" : "pointer"
            },
            "kind" : "type",
            "type" : "map",
            "value" : {
              "go-type" : 6,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 6,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "bool"
              }
            }
          },
          "go-type" : 87,
          "kind" : "literal",
          "type" : "composite",
          "values" : [ ]
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 1262,
      "code" : "visited := map[*structType]bool{}",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 7, 49 ],
      "in-vars" : [ 23, 25, 21, 20, 18, 24 ],
      "exit" : false,
      "out-vars" : [ 21, 20, 18, 24, 23, 25 ],
      "decl-vars" : [ ],
      "line-start" : 1264,
      "ast" : {
        "condition" : {
          "go-type" : 88,
          "kind" : "expression",
          "left" : {
            "arguments" : [ {
              "go-type" : 83,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "next",
                "variable" : 23
              }
            } ],
            "ellipsis" : false,
            "function" : {
              "go-type" : 89,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Builtin",
                "kind" : "ident",
                "value" : "len"
              }
            },
            "go-type" : 15,
            "kind" : "expression",
            "type" : "call"
          },
          "operator" : ">",
          "right" : {
            "go-type" : 15,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "for"
      },
      "assign-vars" : [ ],
      "line-end" : 1337,
      "code" : "for len(next) > 0 {\n\tcurrent, next = next, current[:0]\n\tcount := nextCount\n\tnextCount = nil\n\n\tfor _, scan := range current {\n\t\tt := scan.typ\n\t\tif visited[t] {\n\n\t\t\tcontinue\n\t\t}\n\t\tvisited[t] = true\n\t\tfor i := range t.fields {\n\t\t\tf := &t.fields[i]\n\n\t\t\tfname := f.name.name()\n\t\t\tvar ntyp *rtype\n\t\t\tif f.embedded() {\n\n\t\t\t\tntyp = f.typ\n\t\t\t\tif ntyp.Kind() == Ptr {\n\t\t\t\t\tntyp = ntyp.Elem().common()\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif match(fname) {\n\n\t\t\t\tif count[t] > 1 || ok {\n\n\t\t\t\t\treturn StructField{}, false\n\t\t\t\t}\n\t\t\t\tresult = t.Field(i)\n\t\t\t\tresult.Index = nil\n\t\t\t\tresult.Index = append(result.Index, scan.index...)\n\t\t\t\tresult.Index = append(result.Index, i)\n\t\t\t\tok = true\n\t\t\t\tcontinue\n\t\t\t}\n\n\t\t\tif ok || ntyp == nil || ntyp.Kind() != Struct {\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tstyp := (*structType)(unsafe.Pointer(ntyp))\n\t\t\tif nextCount[styp] > 0 {\n\t\t\t\tnextCount[styp] = 2\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tif nextCount == nil {\n\t\t\t\tnextCount = map[*structType]int{}\n\t\t\t}\n\t\t\tnextCount[styp] = 1\n\t\t\tif count[t] > 1 {\n\t\t\t\tnextCount[styp] = 2\n\t\t\t}\n\t\t\tvar index []int\n\t\t\tindex = append(index, scan.index...)\n\t\t\tindex = append(index, i)\n\t\t\tnext = append(next, fieldScan{styp, index})\n\t\t}\n\t}\n\tif ok {\n\t\tbreak\n\t}\n}",
      "entry" : false,
      "use-vars" : [ 23 ]
    }, {
      "update-vars" : [ 21, 23 ],
      "successors" : [ 8 ],
      "in-vars" : [ 24, 23, 25, 21, 20, 18 ],
      "exit" : false,
      "out-vars" : [ 23, 25, 21, 20, 18, 24 ],
      "decl-vars" : [ ],
      "line-start" : 1265,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 83,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "current",
            "variable" : 21
          }
        }, {
          "go-type" : 83,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "next",
            "variable" : 23
          }
        } ],
        "right" : [ {
          "go-type" : 83,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "next",
            "variable" : 23
          }
        }, {
          "go-type" : 83,
          "type" : "slice",
          "three" : false,
          "high" : {
            "go-type" : 15,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "max" : null,
          "kind" : "expression",
          "low" : null,
          "target" : {
            "go-type" : 83,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "current",
              "variable" : 21
            }
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 21, 23 ],
      "line-end" : 1265,
      "code" : "current, next = next, current[:0]",
      "entry" : false,
      "use-vars" : [ 21, 23 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 9 ],
      "in-vars" : [ 21, 20, 18, 24, 23, 25 ],
      "exit" : false,
      "out-vars" : [ 21, 20, 18, 35, 23, 25 ],
      "decl-vars" : [ 35 ],
      "line-start" : 1266,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "count"
          }
        } ],
        "right" : [ {
          "go-type" : 86,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "nextCount",
            "variable" : 24
          }
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 1266,
      "code" : "count := nextCount",
      "entry" : false,
      "use-vars" : [ 24 ]
    }, {
      "update-vars" : [ 24 ],
      "successors" : [ 10 ],
      "in-vars" : [ 18, 35, 23, 25, 21, 20 ],
      "exit" : false,
      "out-vars" : [ 35, 24, 23, 25, 21, 20, 18 ],
      "decl-vars" : [ ],
      "line-start" : 1267,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 86,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "nextCount",
            "variable" : 24
          }
        } ],
        "right" : [ {
          "go-type" : 91,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Nil",
            "kind" : "ident",
            "value" : "nil"
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 24 ],
      "line-end" : 1267,
      "code" : "nextCount = nil",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 11, 47 ],
      "in-vars" : [ 25, 21, 20, 18, 35, 24, 23 ],
      "exit" : false,
      "out-vars" : [ 35, 24, 26, 23, 25, 21, 20, 18 ],
      "decl-vars" : [ 40, 26 ],
      "line-start" : 1273,
      "ast" : {
        "is-assign" : false,
        "key" : {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "_"
          }
        },
        "kind" : "statement",
        "target" : {
          "go-type" : 83,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "current",
            "variable" : 21
          }
        },
        "type" : "range",
        "value" : {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "scan"
          }
        }
      },
      "assign-vars" : [ ],
      "line-end" : 1333,
      "code" : "for _, scan := range current {\n\tt := scan.typ\n\tif visited[t] {\n\n\t\tcontinue\n\t}\n\tvisited[t] = true\n\tfor i := range t.fields {\n\t\tf := &t.fields[i]\n\n\t\tfname := f.name.name()\n\t\tvar ntyp *rtype\n\t\tif f.embedded() {\n\n\t\t\tntyp = f.typ\n\t\t\tif ntyp.Kind() == Ptr {\n\t\t\t\tntyp = ntyp.Elem().common()\n\t\t\t}\n\t\t}\n\n\t\tif match(fname) {\n\n\t\t\tif count[t] > 1 || ok {\n\n\t\t\t\treturn StructField{}, false\n\t\t\t}\n\t\t\tresult = t.Field(i)\n\t\t\tresult.Index = nil\n\t\t\tresult.Index = append(result.Index, scan.index...)\n\t\t\tresult.Index = append(result.Index, i)\n\t\t\tok = true\n\t\t\tcontinue\n\t\t}\n\n\t\tif ok || ntyp == nil || ntyp.Kind() != Struct {\n\t\t\tcontinue\n\t\t}\n\t\tstyp := (*structType)(unsafe.Pointer(ntyp))\n\t\tif nextCount[styp] > 0 {\n\t\t\tnextCount[styp] = 2\n\t\t\tcontinue\n\t\t}\n\t\tif nextCount == nil {\n\t\t\tnextCount = map[*structType]int{}\n\t\t}\n\t\tnextCount[styp] = 1\n\t\tif count[t] > 1 {\n\t\t\tnextCount[styp] = 2\n\t\t}\n\t\tvar index []int\n\t\tindex = append(index, scan.index...)\n\t\tindex = append(index, i)\n\t\tnext = append(next, fieldScan{styp, index})\n\t}\n}",
      "entry" : false,
      "use-vars" : [ 21 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 12 ],
      "in-vars" : [ 35, 24, 26, 23, 25, 21, 20, 18 ],
      "exit" : false,
      "out-vars" : [ 25, 27, 21, 20, 18, 35, 24, 26, 23 ],
      "decl-vars" : [ 27 ],
      "line-start" : 1274,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "t"
          }
        } ],
        "right" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "typ",
            "variable" : 22
          },
          "go-type" : 75,
          "kind" : "expression",
          "target" : {
            "go-type" : 84,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "scan",
              "variable" : 26
            }
          },
          "type" : "selector"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 1274,
      "code" : "t := scan.typ",
      "entry" : false,
      "use-vars" : [ 26 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 13, 14 ],
      "in-vars" : [ 18, 24, 25, 21, 20, 35, 26, 23, 27 ],
      "exit" : false,
      "out-vars" : [ 24, 23, 25, 21, 35, 26, 27, 20, 18 ],
      "decl-vars" : [ ],
      "line-start" : 1275,
      "ast" : {
        "condition" : {
          "go-type" : 6,
          "index" : {
            "go-type" : 75,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "t",
              "variable" : 27
            }
          },
          "kind" : "expression",
          "target" : {
            "go-type" : 87,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "visited",
              "variable" : 25
            }
          },
          "type" : "index"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 1280,
      "code" : "if visited[t] {\n\n\tcontinue\n}",
      "entry" : false,
      "use-vars" : [ 27, 25 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 15 ],
      "in-vars" : [ 20, 23, 25, 27, 21, 35, 24, 26, 18 ],
      "exit" : false,
      "out-vars" : [ 21, 20, 35, 24, 26, 23, 25, 27, 18 ],
      "decl-vars" : [ ],
      "line-start" : 1279,
      "ast" : {
        "kind" : "statement",
        "label" : null,
        "type" : "continue"
      },
      "assign-vars" : [ ],
      "line-end" : 1279,
      "code" : "continue",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ 25 ],
      "successors" : [ 15 ],
      "in-vars" : [ 35, 24, 26, 23, 21, 18, 25, 27, 20 ],
      "exit" : false,
      "out-vars" : [ 23, 27, 21, 20, 18, 35, 24, 26, 25 ],
      "decl-vars" : [ ],
      "line-start" : 1281,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 6,
          "index" : {
            "go-type" : 75,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "t",
              "variable" : 27
            }
          },
          "kind" : "expression",
          "target" : {
            "go-type" : 87,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "visited",
              "variable" : 25
            }
          },
          "type" : "index"
        } ],
        "right" : [ {
          "go-type" : 6,
          "kind" : "constant",
          "value" : {
            "type" : "BOOL",
            "value" : "true"
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 1281,
      "code" : "visited[t] = true",
      "entry" : false,
      "use-vars" : [ 25, 27 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 10, 16 ],
      "in-vars" : [ 35, 24, 21, 20, 18, 26, 23, 25, 27 ],
      "exit" : false,
      "out-vars" : [ 26, 29, 23, 27, 20, 35, 24, 25, 21, 18 ],
      "decl-vars" : [ 29 ],
      "line-start" : 1282,
      "ast" : {
        "is-assign" : false,
        "key" : {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "i"
          }
        },
        "kind" : "statement",
        "target" : {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "fields",
            "variable" : 28
          },
          "go-type" : 80,
          "kind" : "expression",
          "target" : {
            "go-type" : 75,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "t",
              "variable" : 27
            }
          },
          "type" : "selector"
        },
        "type" : "range",
        "value" : null
      },
      "assign-vars" : [ ],
      "line-end" : 1332,
      "code" : "for i := range t.fields {\n\tf := &t.fields[i]\n\n\tfname := f.name.name()\n\tvar ntyp *rtype\n\tif f.embedded() {\n\n\t\tntyp = f.typ\n\t\tif ntyp.Kind() == Ptr {\n\t\t\tntyp = ntyp.Elem().common()\n\t\t}\n\t}\n\n\tif match(fname) {\n\n\t\tif count[t] > 1 || ok {\n\n\t\t\treturn StructField{}, false\n\t\t}\n\t\tresult = t.Field(i)\n\t\tresult.Index = nil\n\t\tresult.Index = append(result.Index, scan.index...)\n\t\tresult.Index = append(result.Index, i)\n\t\tok = true\n\t\tcontinue\n\t}\n\n\tif ok || ntyp == nil || ntyp.Kind() != Struct {\n\t\tcontinue\n\t}\n\tstyp := (*structType)(unsafe.Pointer(ntyp))\n\tif nextCount[styp] > 0 {\n\t\tnextCount[styp] = 2\n\t\tcontinue\n\t}\n\tif nextCount == nil {\n\t\tnextCount = map[*structType]int{}\n\t}\n\tnextCount[styp] = 1\n\tif count[t] > 1 {\n\t\tnextCount[styp] = 2\n\t}\n\tvar index []int\n\tindex = append(index, scan.index...)\n\tindex = append(index, i)\n\tnext = append(next, fieldScan{styp, index})\n}",
      "entry" : false,
      "use-vars" : [ 27 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 17 ],
      "in-vars" : [ 24, 29, 27, 35, 26, 23, 25, 21, 20, 18 ],
      "exit" : false,
      "out-vars" : [ 18, 35, 24, 30, 26, 21, 29, 23, 25, 27, 20 ],
      "decl-vars" : [ 30 ],
      "line-start" : 1283,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "f"
          }
        } ],
        "right" : [ {
          "go-type" : 92,
          "kind" : "expression",
          "operator" : "&",
          "target" : {
            "go-type" : 81,
            "index" : {
              "go-type" : 15,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "i",
                "variable" : 29
              }
            },
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "fields",
                "variable" : 28
              },
              "go-type" : 80,
              "kind" : "expression",
              "target" : {
                "go-type" : 75,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "t",
                  "variable" : 27
                }
              },
              "type" : "selector"
            },
            "type" : "index"
          },
          "type" : "unary"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 1283,
      "code" : "f := &t.fields[i]",
      "entry" : false,
      "use-vars" : [ 27, 29 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 18 ],
      "in-vars" : [ 26, 29, 23, 27, 18, 35, 30, 25, 21, 20, 24 ],
      "exit" : false,
      "out-vars" : [ 18, 30, 26, 29, 23, 34, 21, 35, 24, 25, 27, 20 ],
      "decl-vars" : [ 34 ],
      "line-start" : 1285,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "fname"
          }
        } ],
        "right" : [ {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "name"
            },
            "go-type" : 93,
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "name",
                "variable" : 31
              },
              "go-type" : 78,
              "kind" : "expression",
              "target" : {
                "go-type" : 92,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "f",
                  "variable" : 30
                }
              },
              "type" : "selector"
            },
            "type" : "selector"
          },
          "go-type" : 4,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 1285,
      "code" : "fname := f.name.name()",
      "entry" : false,
      "use-vars" : [ 30 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 19 ],
      "in-vars" : [ 24, 26, 25, 34, 21, 18, 35, 30, 29, 23, 27, 20 ],
      "exit" : false,
      "out-vars" : [ 18, 35, 24, 32, 26, 23, 21, 20, 30, 29, 25, 27, 34 ],
      "decl-vars" : [ 32 ],
      "line-start" : 1286,
      "ast" : {
        "kind" : "statement",
        "target" : {
          "kind" : "decl",
          "specs" : [ {
            "comments" : [ ],
            "declared-type" : {
              "contained" : {
                "go-type" : 46,
                "kind" : "type",
                "type" : "identifier",
                "value" : {
                  "go-type" : 46,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "rtype"
                }
              },
              "go-type" : 45,
              "kind" : "type",
              "type" : "pointer"
            },
            "kind" : "spec",
            "names" : [ {
              "ident-kind" : "NoKind",
              "kind" : "ident",
              "value" : "ntyp"
            } ],
            "type" : "var",
            "values" : [ ]
          } ],
          "type" : "var"
        },
        "type" : "declaration"
      },
      "assign-vars" : [ ],
      "line-end" : 1286,
      "code" : "var ntyp *rtype",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 20, 23 ],
      "in-vars" : [ 23, 25, 27, 21, 24, 32, 30, 29, 18, 35, 26, 34, 20 ],
      "exit" : false,
      "out-vars" : [ 26, 23, 25, 20, 24, 30, 29, 27, 34, 21, 18, 35, 32 ],
      "decl-vars" : [ ],
      "line-start" : 1287,
      "ast" : {
        "condition" : {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "embedded"
            },
            "go-type" : 21,
            "kind" : "expression",
            "target" : {
              "go-type" : 92,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "f",
                "variable" : 30
              }
            },
            "type" : "selector"
          },
          "go-type" : 6,
          "kind" : "expression",
          "type" : "call"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 1293,
      "code" : "if f.embedded() {\n\n\tntyp = f.typ\n\tif ntyp.Kind() == Ptr {\n\t\tntyp = ntyp.Elem().common()\n\t}\n}",
      "entry" : false,
      "use-vars" : [ 30 ]
    }, {
      "update-vars" : [ 32 ],
      "successors" : [ 21 ],
      "in-vars" : [ 30, 26, 29, 23, 25, 34, 35, 24, 21, 18, 27, 20 ],
      "exit" : false,
      "out-vars" : [ 23, 25, 21, 20, 18, 35, 24, 32, 26, 29, 27, 34 ],
      "decl-vars" : [ ],
      "line-start" : 1289,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 45,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "ntyp",
            "variable" : 32
          }
        } ],
        "right" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "typ",
            "variable" : 33
          },
          "go-type" : 45,
          "kind" : "expression",
          "target" : {
            "go-type" : 92,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "f",
              "variable" : 30
            }
          },
          "type" : "selector"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 32 ],
      "line-end" : 1289,
      "code" : "ntyp = f.typ",
      "entry" : false,
      "use-vars" : [ 30 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 22, 23 ],
      "in-vars" : [ 27, 34, 35, 24, 32, 26, 23, 25, 29, 21, 20, 18 ],
      "exit" : false,
      "out-vars" : [ 35, 26, 29, 34, 21, 20, 18, 24, 32, 23, 25, 27 ],
      "decl-vars" : [ ],
      "line-start" : 1290,
      "ast" : {
        "condition" : {
          "go-type" : 88,
          "kind" : "expression",
          "left" : {
            "arguments" : [ ],
            "ellipsis" : false,
            "function" : {
              "field" : {
                "ident-kind" : "Func",
                "kind" : "ident",
                "value" : "Kind"
              },
              "go-type" : 35,
              "kind" : "expression",
              "target" : {
                "go-type" : 45,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "ntyp",
                  "variable" : 32
                }
              },
              "type" : "selector"
            },
            "go-type" : 37,
            "kind" : "expression",
            "type" : "call"
          },
          "operator" : "==",
          "right" : {
            "go-type" : 37,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "22"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 1292,
      "code" : "if ntyp.Kind() == Ptr {\n\tntyp = ntyp.Elem().common()\n}",
      "entry" : false,
      "use-vars" : [ 32 ]
    }, {
      "update-vars" : [ 32 ],
      "successors" : [ 23 ],
      "in-vars" : [ 24, 32, 34, 21, 20, 35, 26, 29, 23, 25, 27, 18 ],
      "exit" : false,
      "out-vars" : [ 24, 34, 26, 29, 23, 25, 27, 21, 35, 32, 20, 18 ],
      "decl-vars" : [ ],
      "line-start" : 1291,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 45,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "ntyp",
            "variable" : 32
          }
        } ],
        "right" : [ {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "common"
            },
            "go-type" : 66,
            "kind" : "expression",
            "target" : {
              "arguments" : [ ],
              "ellipsis" : false,
              "function" : {
                "field" : {
                  "ident-kind" : "Func",
                  "kind" : "ident",
                  "value" : "Elem"
                },
                "go-type" : 22,
                "kind" : "expression",
                "target" : {
                  "go-type" : 45,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "ntyp",
                    "variable" : 32
                  }
                },
                "type" : "selector"
              },
              "go-type" : 10,
              "kind" : "expression",
              "type" : "call"
            },
            "type" : "selector"
          },
          "go-type" : 45,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 32 ],
      "line-end" : 1291,
      "code" : "ntyp = ntyp.Elem().common()",
      "entry" : false,
      "use-vars" : [ 32 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 24, 32 ],
      "in-vars" : [ 25, 27, 21, 20, 18, 24, 32, 23, 34, 35, 26, 29 ],
      "exit" : false,
      "out-vars" : [ 35, 24, 32, 23, 26, 29, 25, 27, 21, 20, 18 ],
      "decl-vars" : [ ],
      "line-start" : 1296,
      "ast" : {
        "condition" : {
          "arguments" : [ {
            "go-type" : 4,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "fname",
              "variable" : 34
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "match",
              "variable" : 18
            }
          },
          "go-type" : 6,
          "kind" : "expression",
          "type" : "call"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 1308,
      "code" : "if match(fname) {\n\n\tif count[t] > 1 || ok {\n\n\t\treturn StructField{}, false\n\t}\n\tresult = t.Field(i)\n\tresult.Index = nil\n\tresult.Index = append(result.Index, scan.index...)\n\tresult.Index = append(result.Index, i)\n\tok = true\n\tcontinue\n}",
      "entry" : false,
      "use-vars" : [ 34, 18 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 25, 26 ],
      "in-vars" : [ 18, 35, 26, 29, 25, 27, 21, 24, 23, 20 ],
      "exit" : false,
      "out-vars" : [ 35, 29, 23, 21, 18, 24, 26, 25, 27 ],
      "decl-vars" : [ ],
      "line-start" : 1298,
      "ast" : {
        "condition" : {
          "go-type" : 6,
          "kind" : "expression",
          "left" : {
            "go-type" : 6,
            "kind" : "expression",
            "left" : {
              "go-type" : 15,
              "index" : {
                "go-type" : 75,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "t",
                  "variable" : 27
                }
              },
              "kind" : "expression",
              "target" : {
                "go-type" : 86,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "count",
                  "variable" : 35
                }
              },
              "type" : "index"
            },
            "operator" : ">",
            "right" : {
              "go-type" : 15,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "1"
              }
            },
            "type" : "binary"
          },
          "operator" : "||",
          "right" : {
            "go-type" : 6,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "ok",
              "variable" : 20
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 1301,
      "code" : "if count[t] > 1 || ok {\n\n\treturn StructField{}, false\n}",
      "entry" : false,
      "use-vars" : [ 35, 27, 20 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 1300,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "declared" : {
            "go-type" : 8,
            "kind" : "type",
            "type" : "identifier",
            "value" : {
              "go-type" : 8,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "StructField"
            }
          },
          "go-type" : 8,
          "kind" : "literal",
          "type" : "composite",
          "values" : [ ]
        }, {
          "go-type" : 6,
          "kind" : "constant",
          "value" : {
            "type" : "BOOL",
            "value" : "false"
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 1300,
      "code" : "return StructField{}, false",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ 19 ],
      "successors" : [ 27 ],
      "in-vars" : [ 35, 24, 26, 25, 21, 18, 29, 23, 27 ],
      "exit" : false,
      "out-vars" : [ 21, 18, 19, 29, 25, 23, 27, 35, 24, 26 ],
      "decl-vars" : [ ],
      "line-start" : 1302,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 8,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "result",
            "variable" : 19
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 15,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "i",
              "variable" : 29
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "Field"
            },
            "go-type" : 95,
            "kind" : "expression",
            "target" : {
              "go-type" : 75,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "t",
                "variable" : 27
              }
            },
            "type" : "selector"
          },
          "go-type" : 8,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 19 ],
      "line-end" : 1302,
      "code" : "result = t.Field(i)",
      "entry" : false,
      "use-vars" : [ 27, 29 ]
    }, {
      "update-vars" : [ 19 ],
      "successors" : [ 28 ],
      "in-vars" : [ 27, 18, 29, 25, 19, 26, 23, 21, 35, 24 ],
      "exit" : false,
      "out-vars" : [ 27, 35, 24, 25, 23, 21, 18, 19, 26, 29 ],
      "decl-vars" : [ ],
      "line-start" : 1303,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "Index",
            "variable" : 36
          },
          "go-type" : 29,
          "kind" : "expression",
          "target" : {
            "go-type" : 8,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "result",
              "variable" : 19
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "go-type" : 91,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Nil",
            "kind" : "ident",
            "value" : "nil"
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 1303,
      "code" : "result.Index = nil",
      "entry" : false,
      "use-vars" : [ 19 ]
    }, {
      "update-vars" : [ 19 ],
      "successors" : [ 29 ],
      "in-vars" : [ 35, 24, 19, 23, 27, 18, 26, 29, 25, 21 ],
      "exit" : false,
      "out-vars" : [ 19, 29, 23, 25, 21, 35, 24, 26, 27, 18 ],
      "decl-vars" : [ ],
      "line-start" : 1304,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "Index",
            "variable" : 36
          },
          "go-type" : 29,
          "kind" : "expression",
          "target" : {
            "go-type" : 8,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "result",
              "variable" : 19
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "arguments" : [ {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "Index",
              "variable" : 36
            },
            "go-type" : 29,
            "kind" : "expression",
            "target" : {
              "go-type" : 8,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "result",
                "variable" : 19
              }
            },
            "type" : "selector"
          }, {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "index",
              "variable" : 37
            },
            "go-type" : 29,
            "kind" : "expression",
            "target" : {
              "go-type" : 84,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "scan",
                "variable" : 26
              }
            },
            "type" : "selector"
          } ],
          "ellipsis" : true,
          "function" : {
            "go-type" : 97,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Builtin",
              "kind" : "ident",
              "value" : "append"
            }
          },
          "go-type" : 29,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 1304,
      "code" : "result.Index = append(result.Index, scan.index...)",
      "entry" : false,
      "use-vars" : [ 26, 19 ]
    }, {
      "update-vars" : [ 19 ],
      "successors" : [ 30 ],
      "in-vars" : [ 35, 19, 29, 23, 25, 27, 21, 18, 24, 26 ],
      "exit" : false,
      "out-vars" : [ 23, 25, 27, 21, 18, 35, 24, 26 ],
      "decl-vars" : [ ],
      "line-start" : 1305,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "Index",
            "variable" : 36
          },
          "go-type" : 29,
          "kind" : "expression",
          "target" : {
            "go-type" : 8,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "result",
              "variable" : 19
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "arguments" : [ {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "Index",
              "variable" : 36
            },
            "go-type" : 29,
            "kind" : "expression",
            "target" : {
              "go-type" : 8,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "result",
                "variable" : 19
              }
            },
            "type" : "selector"
          }, {
            "go-type" : 15,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "i",
              "variable" : 29
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 97,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Builtin",
              "kind" : "ident",
              "value" : "append"
            }
          },
          "go-type" : 29,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 1305,
      "code" : "result.Index = append(result.Index, i)",
      "entry" : false,
      "use-vars" : [ 19, 29 ]
    }, {
      "update-vars" : [ 20 ],
      "successors" : [ 31 ],
      "in-vars" : [ 18, 35, 24, 26, 23, 25, 27, 21 ],
      "exit" : false,
      "out-vars" : [ 21, 20, 26, 23, 25, 27, 18, 35, 24 ],
      "decl-vars" : [ ],
      "line-start" : 1306,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 6,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "ok",
            "variable" : 20
          }
        } ],
        "right" : [ {
          "go-type" : 6,
          "kind" : "constant",
          "value" : {
            "type" : "BOOL",
            "value" : "true"
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 20 ],
      "line-end" : 1306,
      "code" : "ok = true",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 15 ],
      "in-vars" : [ 35, 24, 26, 25, 27, 23, 21, 20, 18 ],
      "exit" : false,
      "out-vars" : [ 24, 23, 18, 27, 21, 20, 35, 26, 25 ],
      "decl-vars" : [ ],
      "line-start" : 1307,
      "ast" : {
        "kind" : "statement",
        "label" : null,
        "type" : "continue"
      },
      "assign-vars" : [ ],
      "line-end" : 1307,
      "code" : "continue",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 33, 34 ],
      "in-vars" : [ 27, 18, 35, 24, 32, 25, 20, 26, 29, 23, 21 ],
      "exit" : false,
      "out-vars" : [ 27, 21, 20, 18, 25, 35, 24, 32, 26, 29, 23 ],
      "decl-vars" : [ ],
      "line-start" : 1313,
      "ast" : {
        "condition" : {
          "go-type" : 6,
          "kind" : "expression",
          "left" : {
            "go-type" : 6,
            "kind" : "expression",
            "left" : {
              "go-type" : 6,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "ok",
                "variable" : 20
              }
            },
            "operator" : "||",
            "right" : {
              "go-type" : 6,
              "kind" : "expression",
              "left" : {
                "go-type" : 45,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "ntyp",
                  "variable" : 32
                }
              },
              "operator" : "==",
              "right" : {
                "go-type" : 91,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Nil",
                  "kind" : "ident",
                  "value" : "nil"
                }
              },
              "type" : "binary"
            },
            "type" : "binary"
          },
          "operator" : "||",
          "right" : {
            "go-type" : 6,
            "kind" : "expression",
            "left" : {
              "arguments" : [ ],
              "ellipsis" : false,
              "function" : {
                "field" : {
                  "ident-kind" : "Func",
                  "kind" : "ident",
                  "value" : "Kind"
                },
                "go-type" : 35,
                "kind" : "expression",
                "target" : {
                  "go-type" : 45,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "ntyp",
                    "variable" : 32
                  }
                },
                "type" : "selector"
              },
              "go-type" : 37,
              "kind" : "expression",
              "type" : "call"
            },
            "operator" : "!=",
            "right" : {
              "go-type" : 37,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "25"
              }
            },
            "type" : "binary"
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 1315,
      "code" : "if ok || ntyp == nil || ntyp.Kind() != Struct {\n\tcontinue\n}",
      "entry" : false,
      "use-vars" : [ 20, 32 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 15 ],
      "in-vars" : [ 35, 23, 18, 24, 26, 25, 27, 21, 20 ],
      "exit" : false,
      "out-vars" : [ 27, 20, 24, 26, 23, 18, 35, 25, 21 ],
      "decl-vars" : [ ],
      "line-start" : 1314,
      "ast" : {
        "kind" : "statement",
        "label" : null,
        "type" : "continue"
      },
      "assign-vars" : [ ],
      "line-end" : 1314,
      "code" : "continue",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 35 ],
      "in-vars" : [ 35, 23, 21, 27, 20, 18, 24, 32, 26, 29, 25 ],
      "exit" : false,
      "out-vars" : [ 29, 23, 38, 18, 35, 26, 25, 27, 21, 20, 24 ],
      "decl-vars" : [ 38 ],
      "line-start" : 1316,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "styp"
          }
        } ],
        "right" : [ {
          "coerced-to" : {
            "contained" : {
              "go-type" : 76,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 76,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "structType"
              }
            },
            "go-type" : 75,
            "kind" : "type",
            "type" : "pointer"
          },
          "go-type" : 75,
          "kind" : "expression",
          "target" : {
            "coerced-to" : {
              "go-type" : 54,
              "kind" : "type",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 1,
                "value" : "unsafe"
              },
              "type" : "identifier",
              "value" : {
                "go-type" : 54,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "Pointer"
              }
            },
            "go-type" : 54,
            "kind" : "expression",
            "target" : {
              "go-type" : 45,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "ntyp",
                "variable" : 32
              }
            },
            "type" : "cast"
          },
          "type" : "cast"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 1316,
      "code" : "styp := (*structType)(unsafe.Pointer(ntyp))",
      "entry" : false,
      "use-vars" : [ 32 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 36, 38 ],
      "in-vars" : [ 35, 24, 29, 23, 21, 20, 18, 26, 25, 27, 38 ],
      "exit" : false,
      "out-vars" : [ 35, 24, 25, 21, 18, 20, 26, 29, 23, 27, 38 ],
      "decl-vars" : [ ],
      "line-start" : 1317,
      "ast" : {
        "condition" : {
          "go-type" : 88,
          "kind" : "expression",
          "left" : {
            "go-type" : 15,
            "index" : {
              "go-type" : 75,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "styp",
                "variable" : 38
              }
            },
            "kind" : "expression",
            "target" : {
              "go-type" : 86,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "nextCount",
                "variable" : 24
              }
            },
            "type" : "index"
          },
          "operator" : ">",
          "right" : {
            "go-type" : 15,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 1320,
      "code" : "if nextCount[styp] > 0 {\n\tnextCount[styp] = 2\n\tcontinue\n}",
      "entry" : false,
      "use-vars" : [ 24, 38 ]
    }, {
      "update-vars" : [ 24 ],
      "successors" : [ 37 ],
      "in-vars" : [ 24, 23, 20, 18, 35, 26, 25, 27, 38, 21 ],
      "exit" : false,
      "out-vars" : [ 26, 20, 18, 35, 24, 23, 25, 27, 21 ],
      "decl-vars" : [ ],
      "line-start" : 1318,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 15,
          "index" : {
            "go-type" : 75,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "styp",
              "variable" : 38
            }
          },
          "kind" : "expression",
          "target" : {
            "go-type" : 86,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "nextCount",
              "variable" : 24
            }
          },
          "type" : "index"
        } ],
        "right" : [ {
          "go-type" : 15,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "2"
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 1318,
      "code" : "nextCount[styp] = 2",
      "entry" : false,
      "use-vars" : [ 24, 38 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 15 ],
      "in-vars" : [ 23, 25, 27, 20, 18, 24, 26, 35, 21 ],
      "exit" : false,
      "out-vars" : [ 24, 27, 21, 20, 35, 26, 23, 25, 18 ],
      "decl-vars" : [ ],
      "line-start" : 1319,
      "ast" : {
        "kind" : "statement",
        "label" : null,
        "type" : "continue"
      },
      "assign-vars" : [ ],
      "line-end" : 1319,
      "code" : "continue",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 39, 40 ],
      "in-vars" : [ 29, 23, 25, 27, 38, 35, 24, 26, 21, 20, 18 ],
      "exit" : false,
      "out-vars" : [ 25, 21, 20, 35, 26, 23, 38, 18, 24, 29, 27 ],
      "decl-vars" : [ ],
      "line-start" : 1321,
      "ast" : {
        "condition" : {
          "go-type" : 88,
          "kind" : "expression",
          "left" : {
            "go-type" : 86,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "nextCount",
              "variable" : 24
            }
          },
          "operator" : "==",
          "right" : {
            "go-type" : 91,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Nil",
              "kind" : "ident",
              "value" : "nil"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 1323,
      "code" : "if nextCount == nil {\n\tnextCount = map[*structType]int{}\n}",
      "entry" : false,
      "use-vars" : [ 24 ]
    }, {
      "update-vars" : [ 24 ],
      "successors" : [ 40 ],
      "in-vars" : [ 21, 20, 35, 25, 27, 38, 26, 29, 23, 18 ],
      "exit" : false,
      "out-vars" : [ 35, 24, 29, 18, 20, 26, 23, 25, 27, 38, 21 ],
      "decl-vars" : [ ],
      "line-start" : 1322,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 86,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "nextCount",
            "variable" : 24
          }
        } ],
        "right" : [ {
          "declared" : {
            "go-type" : 86,
            "key" : {
              "contained" : {
                "go-type" : 76,
                "kind" : "type",
                "type" : "identifier",
                "value" : {
                  "go-type" : 76,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "structType"
                }
              },
              "go-type" : 75,
              "kind" : "type",
              "type" : "pointer"
            },
            "kind" : "type",
            "type" : "map",
            "value" : {
              "go-type" : 15,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 15,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "int"
              }
            }
          },
          "go-type" : 86,
          "kind" : "literal",
          "type" : "composite",
          "values" : [ ]
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 24 ],
      "line-end" : 1322,
      "code" : "nextCount = map[*structType]int{}",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ 24 ],
      "successors" : [ 41 ],
      "in-vars" : [ 27, 20, 24, 29, 23, 25, 38, 21, 18, 35, 26 ],
      "exit" : false,
      "out-vars" : [ 21, 20, 24, 26, 29, 23, 27, 35, 25, 38, 18 ],
      "decl-vars" : [ ],
      "line-start" : 1324,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 15,
          "index" : {
            "go-type" : 75,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "styp",
              "variable" : 38
            }
          },
          "kind" : "expression",
          "target" : {
            "go-type" : 86,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "nextCount",
              "variable" : 24
            }
          },
          "type" : "index"
        } ],
        "right" : [ {
          "go-type" : 15,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "1"
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 1324,
      "code" : "nextCount[styp] = 1",
      "entry" : false,
      "use-vars" : [ 38, 24 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 42, 43 ],
      "in-vars" : [ 35, 26, 25, 20, 18, 24, 29, 23, 27, 38, 21 ],
      "exit" : false,
      "out-vars" : [ 20, 18, 35, 26, 29, 25, 21, 24, 23, 27, 38 ],
      "decl-vars" : [ ],
      "line-start" : 1325,
      "ast" : {
        "condition" : {
          "go-type" : 88,
          "kind" : "expression",
          "left" : {
            "go-type" : 15,
            "index" : {
              "go-type" : 75,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "t",
                "variable" : 27
              }
            },
            "kind" : "expression",
            "target" : {
              "go-type" : 86,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "count",
                "variable" : 35
              }
            },
            "type" : "index"
          },
          "operator" : ">",
          "right" : {
            "go-type" : 15,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "1"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 1327,
      "code" : "if count[t] > 1 {\n\tnextCount[styp] = 2\n}",
      "entry" : false,
      "use-vars" : [ 35, 27 ]
    }, {
      "update-vars" : [ 24 ],
      "successors" : [ 43 ],
      "in-vars" : [ 23, 25, 21, 20, 38, 18, 35, 24, 26, 29, 27 ],
      "exit" : false,
      "out-vars" : [ 25, 20, 35, 24, 29, 38, 21, 18, 26, 23, 27 ],
      "decl-vars" : [ ],
      "line-start" : 1326,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 15,
          "index" : {
            "go-type" : 75,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "styp",
              "variable" : 38
            }
          },
          "kind" : "expression",
          "target" : {
            "go-type" : 86,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "nextCount",
              "variable" : 24
            }
          },
          "type" : "index"
        } ],
        "right" : [ {
          "go-type" : 15,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "2"
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 1326,
      "code" : "nextCount[styp] = 2",
      "entry" : false,
      "use-vars" : [ 24, 38 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 44 ],
      "in-vars" : [ 29, 25, 38, 20, 18, 24, 26, 23, 27, 21, 35 ],
      "exit" : false,
      "out-vars" : [ 21, 18, 39, 29, 23, 38, 27, 20, 35, 24, 26, 25 ],
      "decl-vars" : [ 39 ],
      "line-start" : 1328,
      "ast" : {
        "kind" : "statement",
        "target" : {
          "kind" : "decl",
          "specs" : [ {
            "comments" : [ ],
            "declared-type" : {
              "element" : {
                "go-type" : 15,
                "kind" : "type",
                "type" : "identifier",
                "value" : {
                  "go-type" : 15,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "int"
                }
              },
              "go-type" : 29,
              "kind" : "type",
              "type" : "slice"
            },
            "kind" : "spec",
            "names" : [ {
              "ident-kind" : "NoKind",
              "kind" : "ident",
              "value" : "index"
            } ],
            "type" : "var",
            "values" : [ ]
          } ],
          "type" : "var"
        },
        "type" : "declaration"
      },
      "assign-vars" : [ ],
      "line-end" : 1328,
      "code" : "var index []int",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ 39 ],
      "successors" : [ 45 ],
      "in-vars" : [ 24, 27, 20, 18, 35, 39, 29, 23, 25, 38, 21, 26 ],
      "exit" : false,
      "out-vars" : [ 39, 29, 38, 21, 18, 20, 35, 24, 26, 23, 25, 27 ],
      "decl-vars" : [ ],
      "line-start" : 1329,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 29,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "index",
            "variable" : 39
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 29,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "index",
              "variable" : 39
            }
          }, {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "index",
              "variable" : 37
            },
            "go-type" : 29,
            "kind" : "expression",
            "target" : {
              "go-type" : 84,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "scan",
                "variable" : 26
              }
            },
            "type" : "selector"
          } ],
          "ellipsis" : true,
          "function" : {
            "go-type" : 97,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Builtin",
              "kind" : "ident",
              "value" : "append"
            }
          },
          "go-type" : 29,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 39 ],
      "line-end" : 1329,
      "code" : "index = append(index, scan.index...)",
      "entry" : false,
      "use-vars" : [ 26, 39 ]
    }, {
      "update-vars" : [ 39 ],
      "successors" : [ 46 ],
      "in-vars" : [ 18, 35, 29, 25, 38, 21, 20, 24, 26, 39, 23, 27 ],
      "exit" : false,
      "out-vars" : [ 26, 23, 27, 38, 21, 18, 35, 24, 39, 25, 20 ],
      "decl-vars" : [ ],
      "line-start" : 1330,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 29,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "index",
            "variable" : 39
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 29,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "index",
              "variable" : 39
            }
          }, {
            "go-type" : 15,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "i",
              "variable" : 29
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 97,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Builtin",
              "kind" : "ident",
              "value" : "append"
            }
          },
          "go-type" : 29,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 39 ],
      "line-end" : 1330,
      "code" : "index = append(index, i)",
      "entry" : false,
      "use-vars" : [ 39, 29 ]
    }, {
      "update-vars" : [ 23 ],
      "successors" : [ 15 ],
      "in-vars" : [ 23, 27, 18, 20, 35, 24, 26, 39, 25, 38, 21 ],
      "exit" : false,
      "out-vars" : [ 35, 26, 25, 27, 20, 24, 23, 21, 18 ],
      "decl-vars" : [ ],
      "line-start" : 1331,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 83,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "next",
            "variable" : 23
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 83,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "next",
              "variable" : 23
            }
          }, {
            "declared" : {
              "go-type" : 84,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 84,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "fieldScan"
              }
            },
            "go-type" : 84,
            "kind" : "literal",
            "type" : "composite",
            "values" : [ {
              "go-type" : 75,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "styp",
                "variable" : 38
              }
            }, {
              "go-type" : 29,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "index",
                "variable" : 39
              }
            } ]
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 100,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Builtin",
              "kind" : "ident",
              "value" : "append"
            }
          },
          "go-type" : 83,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 23 ],
      "line-end" : 1331,
      "code" : "next = append(next, fieldScan{styp, index})",
      "entry" : false,
      "use-vars" : [ 39, 23, 38 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 6, 48 ],
      "in-vars" : [ 18, 24, 23, 25, 21, 20 ],
      "exit" : false,
      "out-vars" : [ 20, 18, 24, 23, 25, 21 ],
      "decl-vars" : [ ],
      "line-start" : 1334,
      "ast" : {
        "condition" : {
          "go-type" : 6,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "ok",
            "variable" : 20
          }
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 1336,
      "code" : "if ok {\n\tbreak\n}",
      "entry" : false,
      "use-vars" : [ 20 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 49 ],
      "in-vars" : [ ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 1335,
      "ast" : {
        "kind" : "statement",
        "label" : null,
        "type" : "break"
      },
      "assign-vars" : [ ],
      "line-end" : 1335,
      "code" : "break",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 1338,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ ]
      },
      "assign-vars" : [ ],
      "line-end" : 1338,
      "code" : "return",
      "entry" : false,
      "use-vars" : [ ]
    } ],
    "code" : "// FieldByNameFunc returns the struct field with a name that satisfies the\n// match function and a boolean to indicate if the field was found.\nfunc (t *structType) FieldByNameFunc(match func(string) bool) (result StructField, ok bool) {\n\n\tcurrent := []fieldScan{}\n\tnext := []fieldScan{{typ: t}}\n\n\t// nextCount records the number of times an embedded type has been\n\t// encountered and considered for queueing in the 'next' slice.\n\t// We only queue the first one, but we increment the count on each.\n\t// If a struct type T can be reached more than once at a given depth level,\n\t// then it annihilates itself and need not be considered at all when we\n\t// process that next depth level.\n\tvar nextCount map[*structType]int\n\n\tvisited := map[*structType]bool{}\n\n\tfor len(next) > 0 {\n\t\tcurrent, next = next, current[:0]\n\t\tcount := nextCount\n\t\tnextCount = nil\n\n\t\tfor _, scan := range current {\n\t\t\tt := scan.typ\n\t\t\tif visited[t] {\n\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tvisited[t] = true\n\t\t\tfor i := range t.fields {\n\t\t\t\tf := &t.fields[i]\n\n\t\t\t\tfname := f.name.name()\n\t\t\t\tvar ntyp *rtype\n\t\t\t\tif f.embedded() {\n\n\t\t\t\t\tntyp = f.typ\n\t\t\t\t\tif ntyp.Kind() == Ptr {\n\t\t\t\t\t\tntyp = ntyp.Elem().common()\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif match(fname) {\n\n\t\t\t\t\tif count[t] > 1 || ok {\n\n\t\t\t\t\t\treturn StructField{}, false\n\t\t\t\t\t}\n\t\t\t\t\tresult = t.Field(i)\n\t\t\t\t\tresult.Index = nil\n\t\t\t\t\tresult.Index = append(result.Index, scan.index...)\n\t\t\t\t\tresult.Index = append(result.Index, i)\n\t\t\t\t\tok = true\n\t\t\t\t\tcontinue\n\t\t\t\t}\n\n\t\t\t\tif ok || ntyp == nil || ntyp.Kind() != Struct {\n\t\t\t\t\tcontinue\n\t\t\t\t}\n\t\t\t\tstyp := (*structType)(unsafe.Pointer(ntyp))\n\t\t\t\tif nextCount[styp] > 0 {\n\t\t\t\t\tnextCount[styp] = 2\n\t\t\t\t\tcontinue\n\t\t\t\t}\n\t\t\t\tif nextCount == nil {\n\t\t\t\t\tnextCount = map[*structType]int{}\n\t\t\t\t}\n\t\t\t\tnextCount[styp] = 1\n\t\t\t\tif count[t] > 1 {\n\t\t\t\t\tnextCount[styp] = 2\n\t\t\t\t}\n\t\t\t\tvar index []int\n\t\t\t\tindex = append(index, scan.index...)\n\t\t\t\tindex = append(index, i)\n\t\t\t\tnext = append(next, fieldScan{styp, index})\n\t\t\t}\n\t\t}\n\t\tif ok {\n\t\t\tbreak\n\t\t}\n\t}\n\treturn\n}",
    "defines" : [ 0 ],
    "functions" : [ {
      "name" : "FieldByNameFunc",
      "package" : 0,
      "type" : 0,
      "exported" : true
    }, {
      "name" : "name",
      "package" : 0,
      "type" : 93,
      "exported" : false
    }, {
      "name" : "embedded",
      "package" : 0,
      "type" : 21,
      "exported" : false
    }, {
      "name" : "Kind",
      "package" : 0,
      "type" : 35,
      "exported" : true
    }, {
      "name" : "Elem",
      "package" : 0,
      "type" : 22,
      "exported" : true
    }, {
      "name" : "common",
      "package" : 0,
      "type" : 66,
      "exported" : false
    }, {
      "name" : "Field",
      "package" : 0,
      "type" : 95,
      "exported" : true
    } ],
    "line-end" : 1339,
    "line-start" : 1237,
    "names" : [ "FieldByNameFunc" ],
    "package" : 0,
    "packages" : [ {
      "name" : "reflect",
      "path" : "reflect"
    }, {
      "name" : "unsafe",
      "path" : "unsafe"
    } ],
    "params" : [ 18 ],
    "receivers" : [ 17 ],
    "results" : [ 19, 20 ],
    "type" : "function",
    "types" : [ {
      "name" : "func(match func(string) bool) (result reflect.StructField, ok bool)",
      "params" : 1,
      "recv" : 17,
      "results" : 7,
      "type" : "Signature",
      "underlying" : 0,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "match",
        "type" : 2
      } ],
      "name" : "(match func(string) bool)",
      "type" : "Tuple",
      "underlying" : 1
    }, {
      "name" : "func(string) bool",
      "params" : 3,
      "recv" : -1,
      "results" : 5,
      "type" : "Signature",
      "underlying" : 2,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 4
      } ],
      "name" : "(string)",
      "type" : "Tuple",
      "underlying" : 3
    }, {
      "name" : "string",
      "type" : "Basic",
      "underlying" : 4
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 6
      } ],
      "name" : "(bool)",
      "type" : "Tuple",
      "underlying" : 5
    }, {
      "name" : "bool",
      "type" : "Basic",
      "underlying" : 6
    }, {
      "fields" : [ {
        "name" : "result",
        "type" : 8
      }, {
        "name" : "ok",
        "type" : 6
      } ],
      "name" : "(result reflect.StructField, ok bool)",
      "type" : "Tuple",
      "underlying" : 7
    }, {
      "local-name" : "StructField",
      "name" : "reflect.StructField",
      "package" : 0,
      "type" : "Named",
      "underlying" : 9
    }, {
      "fields" : [ {
        "name" : "Name",
        "type" : 4
      }, {
        "name" : "PkgPath",
        "type" : 4
      }, {
        "name" : "Type",
        "type" : 10
      }, {
        "name" : "Tag",
        "type" : 74
      }, {
        "name" : "Offset",
        "type" : 48
      }, {
        "name" : "Index",
        "type" : 29
      }, {
        "name" : "Anonymous",
        "type" : 6
      } ],
      "name" : "struct{Name string; PkgPath string; Type reflect.Type; Tag reflect.StructTag; Offset uintptr; Index []int; Anonymous bool}",
      "type" : "Struct",
      "underlying" : 9
    }, {
      "local-name" : "Type",
      "name" : "reflect.Type",
      "package" : 0,
      "type" : "Named",
      "underlying" : 11
    }, {
      "methods" : [ {
        "name" : "Align",
        "type" : 12
      }, {
        "name" : "AssignableTo",
        "type" : 16
      }, {
        "name" : "Bits",
        "type" : 12
      }, {
        "name" : "ChanDir",
        "type" : 18
      }, {
        "name" : "Comparable",
        "type" : 21
      }, {
        "name" : "ConvertibleTo",
        "type" : 16
      }, {
        "name" : "Elem",
        "type" : 22
      }, {
        "name" : "Field",
        "type" : 24
      }, {
        "name" : "FieldAlign",
        "type" : 12
      }, {
        "name" : "FieldByIndex",
        "type" : 27
      }, {
        "name" : "FieldByName",
        "type" : 30
      }, {
        "name" : "FieldByNameFunc",
        "type" : 33
      }, {
        "name" : "Implements",
        "type" : 16
      }, {
        "name" : "In",
        "type" : 34
      }, {
        "name" : "IsVariadic",
        "type" : 21
      }, {
        "name" : "Key",
        "type" : 22
      }, {
        "name" : "Kind",
        "type" : 35
      }, {
        "name" : "Len",
        "type" : 12
      }, {
        "name" : "Method",
        "type" : 39
      }, {
        "name" : "MethodByName",
        "type" : 61
      }, {
        "name" : "Name",
        "type" : 63
      }, {
        "name" : "NumField",
        "type" : 12
      }, {
        "name" : "NumIn",
        "type" : 12
      }, {
        "name" : "NumMethod",
        "type" : 12
      }, {
        "name" : "NumOut",
        "type" : 12
      }, {
        "name" : "Out",
        "type" : 34
      }, {
        "name" : "PkgPath",
        "type" : 63
      }, {
        "name" : "Size",
        "type" : 64
      }, {
        "name" : "String",
        "type" : 63
      }, {
        "name" : "common",
        "type" : 66
      }, {
        "name" : "uncommon",
        "type" : 68
      } ],
      "name" : "interface{Align() int; AssignableTo(u reflect.Type) bool; Bits() int; ChanDir() reflect.ChanDir; Comparable() bool; ConvertibleTo(u reflect.Type) bool; Elem() reflect.Type; Field(i int) reflect.StructField; FieldAlign() int; FieldByIndex(index []int) reflect.StructField; FieldByName(name string) (reflect.StructField, bool); FieldByNameFunc(match func(string) bool) (reflect.StructField, bool); Implements(u reflect.Type) bool; In(i int) reflect.Type; IsVariadic() bool; Key() reflect.Type; Kind() reflect.Kind; Len() int; Method(int) reflect.Method; MethodByName(string) (reflect.Method, bool); Name() string; NumField() int; NumIn() int; NumMethod() int; NumOut() int; Out(i int) reflect.Type; PkgPath() string; Size() uintptr; String() string; common() *reflect.rtype; uncommon() *reflect.uncommonType}",
      "type" : "Interface",
      "underlying" : 11
    }, {
      "name" : "func() int",
      "params" : 13,
      "recv" : 0,
      "results" : 14,
      "type" : "Signature",
      "underlying" : 12,
      "variadic" : false
    }, {
      "fields" : [ ],
      "name" : "()",
      "type" : "Tuple",
      "underlying" : 13
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 15
      } ],
      "name" : "(int)",
      "type" : "Tuple",
      "underlying" : 14
    }, {
      "name" : "int",
      "type" : "Basic",
      "underlying" : 15
    }, {
      "name" : "func(u reflect.Type) bool",
      "params" : 17,
      "recv" : 1,
      "results" : 5,
      "type" : "Signature",
      "underlying" : 16,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "u",
        "type" : 10
      } ],
      "name" : "(u reflect.Type)",
      "type" : "Tuple",
      "underlying" : 17
    }, {
      "name" : "func() reflect.ChanDir",
      "params" : 13,
      "recv" : 2,
      "results" : 19,
      "type" : "Signature",
      "underlying" : 18,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 20
      } ],
      "name" : "(reflect.ChanDir)",
      "type" : "Tuple",
      "underlying" : 19
    }, {
      "local-name" : "ChanDir",
      "name" : "reflect.ChanDir",
      "package" : 0,
      "type" : "Named",
      "underlying" : 15
    }, {
      "name" : "func() bool",
      "params" : 13,
      "recv" : 3,
      "results" : 5,
      "type" : "Signature",
      "underlying" : 21,
      "variadic" : false
    }, {
      "name" : "func() reflect.Type",
      "params" : 13,
      "recv" : 4,
      "results" : 23,
      "type" : "Signature",
      "underlying" : 22,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 10
      } ],
      "name" : "(reflect.Type)",
      "type" : "Tuple",
      "underlying" : 23
    }, {
      "name" : "func(i int) reflect.StructField",
      "params" : 25,
      "recv" : 5,
      "results" : 26,
      "type" : "Signature",
      "underlying" : 24,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "i",
        "type" : 15
      } ],
      "name" : "(i int)",
      "type" : "Tuple",
      "underlying" : 25
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 8
      } ],
      "name" : "(reflect.StructField)",
      "type" : "Tuple",
      "underlying" : 26
    }, {
      "name" : "func(index []int) reflect.StructField",
      "params" : 28,
      "recv" : 6,
      "results" : 26,
      "type" : "Signature",
      "underlying" : 27,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "index",
        "type" : 29
      } ],
      "name" : "(index []int)",
      "type" : "Tuple",
      "underlying" : 28
    }, {
      "elem" : 15,
      "name" : "[]int",
      "type" : "Slice",
      "underlying" : 29
    }, {
      "name" : "func(name string) (reflect.StructField, bool)",
      "params" : 31,
      "recv" : 7,
      "results" : 32,
      "type" : "Signature",
      "underlying" : 30,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "name",
        "type" : 4
      } ],
      "name" : "(name string)",
      "type" : "Tuple",
      "underlying" : 31
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 8
      }, {
        "name" : "",
        "type" : 6
      } ],
      "name" : "(reflect.StructField, bool)",
      "type" : "Tuple",
      "underlying" : 32
    }, {
      "name" : "func(match func(string) bool) (reflect.StructField, bool)",
      "params" : 1,
      "recv" : 8,
      "results" : 32,
      "type" : "Signature",
      "underlying" : 33,
      "variadic" : false
    }, {
      "name" : "func(i int) reflect.Type",
      "params" : 25,
      "recv" : 9,
      "results" : 23,
      "type" : "Signature",
      "underlying" : 34,
      "variadic" : false
    }, {
      "name" : "func() reflect.Kind",
      "params" : 13,
      "recv" : 10,
      "results" : 36,
      "type" : "Signature",
      "underlying" : 35,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 37
      } ],
      "name" : "(reflect.Kind)",
      "type" : "Tuple",
      "underlying" : 36
    }, {
      "local-name" : "Kind",
      "name" : "reflect.Kind",
      "package" : 0,
      "type" : "Named",
      "underlying" : 38
    }, {
      "name" : "uint",
      "type" : "Basic",
      "underlying" : 38
    }, {
      "name" : "func(int) reflect.Method",
      "params" : 14,
      "recv" : 11,
      "results" : 40,
      "type" : "Signature",
      "underlying" : 39,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 41
      } ],
      "name" : "(reflect.Method)",
      "type" : "Tuple",
      "underlying" : 40
    }, {
      "local-name" : "Method",
      "name" : "reflect.Method",
      "package" : 0,
      "type" : "Named",
      "underlying" : 42
    }, {
      "fields" : [ {
        "name" : "Name",
        "type" : 4
      }, {
        "name" : "PkgPath",
        "type" : 4
      }, {
        "name" : "Type",
        "type" : 10
      }, {
        "name" : "Func",
        "type" : 43
      }, {
        "name" : "Index",
        "type" : 15
      } ],
      "name" : "struct{Name string; PkgPath string; Type reflect.Type; Func reflect.Value; Index int}",
      "type" : "Struct",
      "underlying" : 42
    }, {
      "local-name" : "Value",
      "name" : "reflect.Value",
      "package" : 0,
      "type" : "Named",
      "underlying" : 44
    }, {
      "fields" : [ {
        "name" : "typ",
        "type" : 45
      }, {
        "name" : "ptr",
        "type" : 54
      }, {
        "name" : "flag",
        "type" : 60
      } ],
      "name" : "struct{typ *reflect.rtype; ptr unsafe.Pointer; reflect.flag}",
      "type" : "Struct",
      "underlying" : 44
    }, {
      "elem" : 46,
      "name" : "*reflect.rtype",
      "type" : "Pointer",
      "underlying" : 45
    }, {
      "local-name" : "rtype",
      "name" : "reflect.rtype",
      "package" : 0,
      "type" : "Named",
      "underlying" : 47
    }, {
      "fields" : [ {
        "name" : "size",
        "type" : 48
      }, {
        "name" : "ptrdata",
        "type" : 48
      }, {
        "name" : "hash",
        "type" : 49
      }, {
        "name" : "tflag",
        "type" : 50
      }, {
        "name" : "align",
        "type" : 51
      }, {
        "name" : "fieldAlign",
        "type" : 51
      }, {
        "name" : "kind",
        "type" : 51
      }, {
        "name" : "equal",
        "type" : 52
      }, {
        "name" : "gcdata",
        "type" : 55
      }, {
        "name" : "str",
        "type" : 57
      }, {
        "name" : "ptrToThis",
        "type" : 59
      } ],
      "name" : "struct{size uintptr; ptrdata uintptr; hash uint32; tflag reflect.tflag; align uint8; fieldAlign uint8; kind uint8; equal func(unsafe.Pointer, unsafe.Pointer) bool; gcdata *byte; str reflect.nameOff; ptrToThis reflect.typeOff}",
      "type" : "Struct",
      "underlying" : 47
    }, {
      "name" : "uintptr",
      "type" : "Basic",
      "underlying" : 48
    }, {
      "name" : "uint32",
      "type" : "Basic",
      "underlying" : 49
    }, {
      "local-name" : "tflag",
      "name" : "reflect.tflag",
      "package" : 0,
      "type" : "Named",
      "underlying" : 51
    }, {
      "name" : "uint8",
      "type" : "Basic",
      "underlying" : 51
    }, {
      "name" : "func(unsafe.Pointer, unsafe.Pointer) bool",
      "params" : 53,
      "recv" : -1,
      "results" : 5,
      "type" : "Signature",
      "underlying" : 52,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 54
      }, {
        "name" : "",
        "type" : 54
      } ],
      "name" : "(unsafe.Pointer, unsafe.Pointer)",
      "type" : "Tuple",
      "underlying" : 53
    }, {
      "local-name" : "Pointer",
      "name" : "unsafe.Pointer",
      "package" : 1,
      "type" : "Basic",
      "underlying" : 54
    }, {
      "elem" : 56,
      "name" : "*byte",
      "type" : "Pointer",
      "underlying" : 55
    }, {
      "name" : "byte",
      "type" : "Basic",
      "underlying" : 56
    }, {
      "local-name" : "nameOff",
      "name" : "reflect.nameOff",
      "package" : 0,
      "type" : "Named",
      "underlying" : 58
    }, {
      "name" : "int32",
      "type" : "Basic",
      "underlying" : 58
    }, {
      "local-name" : "typeOff",
      "name" : "reflect.typeOff",
      "package" : 0,
      "type" : "Named",
      "underlying" : 58
    }, {
      "local-name" : "flag",
      "name" : "reflect.flag",
      "package" : 0,
      "type" : "Named",
      "underlying" : 48
    }, {
      "name" : "func(string) (reflect.Method, bool)",
      "params" : 3,
      "recv" : 12,
      "results" : 62,
      "type" : "Signature",
      "underlying" : 61,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 41
      }, {
        "name" : "",
        "type" : 6
      } ],
      "name" : "(reflect.Method, bool)",
      "type" : "Tuple",
      "underlying" : 62
    }, {
      "name" : "func() string",
      "params" : 13,
      "recv" : 13,
      "results" : 3,
      "type" : "Signature",
      "underlying" : 63,
      "variadic" : false
    }, {
      "name" : "func() uintptr",
      "params" : 13,
      "recv" : 14,
      "results" : 65,
      "type" : "Signature",
      "underlying" : 64,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 48
      } ],
      "name" : "(uintptr)",
      "type" : "Tuple",
      "underlying" : 65
    }, {
      "name" : "func() *reflect.rtype",
      "params" : 13,
      "recv" : 15,
      "results" : 67,
      "type" : "Signature",
      "underlying" : 66,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 45
      } ],
      "name" : "(*reflect.rtype)",
      "type" : "Tuple",
      "underlying" : 67
    }, {
      "name" : "func() *reflect.uncommonType",
      "params" : 13,
      "recv" : 16,
      "results" : 69,
      "type" : "Signature",
      "underlying" : 68,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 70
      } ],
      "name" : "(*reflect.uncommonType)",
      "type" : "Tuple",
      "underlying" : 69
    }, {
      "elem" : 71,
      "name" : "*reflect.uncommonType",
      "type" : "Pointer",
      "underlying" : 70
    }, {
      "local-name" : "uncommonType",
      "name" : "reflect.uncommonType",
      "package" : 0,
      "type" : "Named",
      "underlying" : 72
    }, {
      "fields" : [ {
        "name" : "pkgPath",
        "type" : 57
      }, {
        "name" : "mcount",
        "type" : 73
      }, {
        "name" : "xcount",
        "type" : 73
      }, {
        "name" : "moff",
        "type" : 49
      }, {
        "name" : "_",
        "type" : 49
      } ],
      "name" : "struct{pkgPath reflect.nameOff; mcount uint16; xcount uint16; moff uint32; _ uint32}",
      "type" : "Struct",
      "underlying" : 72
    }, {
      "name" : "uint16",
      "type" : "Basic",
      "underlying" : 73
    }, {
      "local-name" : "StructTag",
      "name" : "reflect.StructTag",
      "package" : 0,
      "type" : "Named",
      "underlying" : 4
    }, {
      "elem" : 76,
      "name" : "*reflect.structType",
      "type" : "Pointer",
      "underlying" : 75
    }, {
      "local-name" : "structType",
      "name" : "reflect.structType",
      "package" : 0,
      "type" : "Named",
      "underlying" : 77
    }, {
      "fields" : [ {
        "name" : "rtype",
        "type" : 46
      }, {
        "name" : "pkgPath",
        "type" : 78
      }, {
        "name" : "fields",
        "type" : 80
      } ],
      "name" : "struct{reflect.rtype; pkgPath reflect.name; fields []reflect.structField}",
      "type" : "Struct",
      "underlying" : 77
    }, {
      "local-name" : "name",
      "name" : "reflect.name",
      "package" : 0,
      "type" : "Named",
      "underlying" : 79
    }, {
      "fields" : [ {
        "name" : "bytes",
        "type" : 55
      } ],
      "name" : "struct{bytes *byte}",
      "type" : "Struct",
      "underlying" : 79
    }, {
      "elem" : 81,
      "name" : "[]reflect.structField",
      "type" : "Slice",
      "underlying" : 80
    }, {
      "local-name" : "structField",
      "name" : "reflect.structField",
      "package" : 0,
      "type" : "Named",
      "underlying" : 82
    }, {
      "fields" : [ {
        "name" : "name",
        "type" : 78
      }, {
        "name" : "typ",
        "type" : 45
      }, {
        "name" : "offsetEmbed",
        "type" : 48
      } ],
      "name" : "struct{name reflect.name; typ *reflect.rtype; offsetEmbed uintptr}",
      "type" : "Struct",
      "underlying" : 82
    }, {
      "elem" : 84,
      "name" : "[]reflect.fieldScan",
      "type" : "Slice",
      "underlying" : 83
    }, {
      "local-name" : "fieldScan",
      "name" : "reflect.fieldScan",
      "package" : 0,
      "type" : "Named",
      "underlying" : 85
    }, {
      "fields" : [ {
        "name" : "typ",
        "type" : 75
      }, {
        "name" : "index",
        "type" : 29
      } ],
      "name" : "struct{typ *reflect.structType; index []int}",
      "type" : "Struct",
      "underlying" : 85
    }, {
      "elem" : 15,
      "key" : 75,
      "name" : "map[*reflect.structType]int",
      "type" : "Map",
      "underlying" : 86
    }, {
      "elem" : 6,
      "key" : 75,
      "name" : "map[*reflect.structType]bool",
      "type" : "Map",
      "underlying" : 87
    }, {
      "name" : "untyped bool",
      "type" : "Basic",
      "underlying" : 88
    }, {
      "name" : "func([]reflect.fieldScan) int",
      "params" : 90,
      "recv" : -1,
      "results" : 14,
      "type" : "Signature",
      "underlying" : 89,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 83
      } ],
      "name" : "([]reflect.fieldScan)",
      "type" : "Tuple",
      "underlying" : 90
    }, {
      "name" : "untyped nil",
      "type" : "Basic",
      "underlying" : 91
    }, {
      "elem" : 81,
      "name" : "*reflect.structField",
      "type" : "Pointer",
      "underlying" : 92
    }, {
      "name" : "func() (s string)",
      "params" : 13,
      "recv" : -1,
      "results" : 94,
      "type" : "Signature",
      "underlying" : 93,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "s",
        "type" : 4
      } ],
      "name" : "(s string)",
      "type" : "Tuple",
      "underlying" : 94
    }, {
      "name" : "func(i int) (f reflect.StructField)",
      "params" : 25,
      "recv" : -1,
      "results" : 96,
      "type" : "Signature",
      "underlying" : 95,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "f",
        "type" : 8
      } ],
      "name" : "(f reflect.StructField)",
      "type" : "Tuple",
      "underlying" : 96
    }, {
      "name" : "func([]int, ...int) []int",
      "params" : 98,
      "recv" : -1,
      "results" : 99,
      "type" : "Signature",
      "underlying" : 97,
      "variadic" : true
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 29
      }, {
        "name" : "",
        "type" : 29
      } ],
      "name" : "([]int, []int)",
      "type" : "Tuple",
      "underlying" : 98
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 29
      } ],
      "name" : "([]int)",
      "type" : "Tuple",
      "underlying" : 99
    }, {
      "name" : "func([]reflect.fieldScan, ...reflect.fieldScan) []reflect.fieldScan",
      "params" : 101,
      "recv" : -1,
      "results" : 90,
      "type" : "Signature",
      "underlying" : 100,
      "variadic" : true
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 83
      }, {
        "name" : "",
        "type" : 83
      } ],
      "name" : "([]reflect.fieldScan, []reflect.fieldScan)",
      "type" : "Tuple",
      "underlying" : 101
    } ],
    "variables" : [ {
      "name" : "",
      "package" : 0,
      "type" : 10,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 0,
      "type" : 10,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 0,
      "type" : 10,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 0,
      "type" : 10,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 0,
      "type" : 10,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 0,
      "type" : 10,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 0,
      "type" : 10,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 0,
      "type" : 10,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 0,
      "type" : 10,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 0,
      "type" : 10,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 0,
      "type" : 10,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 0,
      "type" : 10,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 0,
      "type" : 10,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 0,
      "type" : 10,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 0,
      "type" : 10,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 0,
      "type" : 10,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 0,
      "type" : 10,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "t",
      "package" : 0,
      "type" : 75,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "match",
      "package" : 0,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "result",
      "package" : 0,
      "type" : 8,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "ok",
      "package" : 0,
      "type" : 6,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "current",
      "package" : 0,
      "type" : 83,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "typ",
      "package" : 0,
      "type" : 75,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "next",
      "package" : 0,
      "type" : 83,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "nextCount",
      "package" : 0,
      "type" : 86,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "visited",
      "package" : 0,
      "type" : 87,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "scan",
      "package" : 0,
      "type" : 84,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "t",
      "package" : 0,
      "type" : 75,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "fields",
      "package" : 0,
      "type" : 80,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "i",
      "package" : 0,
      "type" : 15,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "f",
      "package" : 0,
      "type" : 92,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "name",
      "package" : 0,
      "type" : 78,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "ntyp",
      "package" : 0,
      "type" : 45,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "typ",
      "package" : 0,
      "type" : 45,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "fname",
      "package" : 0,
      "type" : 4,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "count",
      "package" : 0,
      "type" : 86,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "Index",
      "package" : 0,
      "type" : 29,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "index",
      "package" : 0,
      "type" : 29,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "styp",
      "package" : 0,
      "type" : 75,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "index",
      "package" : 0,
      "type" : 29,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "_",
      "package" : 0,
      "type" : 15,
      "exported" : false,
      "embedded" : false,
      "field" : false
    } ]
  },
  "go-version" : "1.14.3"
}