{
  "usage" : {
    "file" : "unfold_struct.go",
    "label1" : "definition",
    "label2" : "serialization",
    "line" : "42",
    "module" : "github.com/elastic/go-structform",
    "pkg" : "github.com/elastic/go-structform/gotype",
    "project" : "elastic/beats",
    "snippet" : "initState func(ctx *unfoldCtx, sp unsafe.Pointer)",
    "version" : "v0.0.6"
  },
  "cfg" : {
    "blocks" : [ {
      "update-vars" : [ ],
      "successors" : [ 2 ],
      "in-vars" : [ ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[entry]",
      "entry" : true,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ ],
      "in-vars" : [ ],
      "exit" : true,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[exit]",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 40,
      "ast" : {
        "kind" : "statement",
        "target" : {
          "binds" : [ {
            "name" : {
              "ident-kind" : "NoKind",
              "kind" : "ident",
              "value" : "fieldUnfolder"
            },
            "value" : {
              "fields" : [ {
                "declared-type" : {
                  "go-type" : 2,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 2,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "uintptr"
                  }
                },
                "kind" : "field",
                "names" : [ {
                  "ident-kind" : "NoKind",
                  "kind" : "ident",
                  "value" : "offset"
                } ],
                "tag" : null
              }, {
                "declared-type" : {
                  "go-type" : 3,
                  "kind" : "type",
                  "params" : [ {
                    "declared-type" : {
                      "contained" : {
                        "go-type" : 6,
                        "kind" : "type",
                        "type" : "identifier",
                        "value" : {
                          "go-type" : 6,
                          "ident-kind" : "TypeName",
                          "kind" : "ident",
                          "value" : "unfoldCtx"
                        }
                      },
                      "go-type" : 5,
                      "kind" : "type",
                      "type" : "pointer"
                    },
                    "kind" : "field",
                    "names" : [ {
                      "ident-kind" : "NoKind",
                      "kind" : "ident",
                      "value" : "ctx"
                    } ],
                    "tag" : null
                  }, {
                    "declared-type" : {
                      "go-type" : 26,
                      "kind" : "type",
                      "qualifier" : {
                        "ident-kind" : "PkgName",
                        "kind" : "ident",
                        "package" : 2,
                        "value" : "unsafe"
                      },
                      "type" : "identifier",
                      "value" : {
                        "go-type" : 26,
                        "ident-kind" : "TypeName",
                        "kind" : "ident",
                        "value" : "Pointer"
                      }
                    },
                    "kind" : "field",
                    "names" : [ {
                      "ident-kind" : "NoKind",
                      "kind" : "ident",
                      "value" : "sp"
                    } ],
                    "tag" : null
                  } ],
                  "results" : null,
                  "type" : "function",
                  "variadic" : null
                },
                "kind" : "field",
                "names" : [ {
                  "ident-kind" : "NoKind",
                  "kind" : "ident",
                  "value" : "initState"
                } ],
                "tag" : null
              } ],
              "go-type" : 1,
              "kind" : "type",
              "type" : "struct"
            }
          } ],
          "kind" : "decl",
          "type" : "type-alias"
        },
        "type" : "declaration"
      },
      "assign-vars" : [ ],
      "line-end" : 43,
      "code" : "type fieldUnfolder struct {\n\toffset    uintptr\n\tinitState func(ctx *unfoldCtx, sp unsafe.Pointer)\n}",
      "entry" : false,
      "use-vars" : [ ]
    } ],
    "code" : "type fieldUnfolder struct {\n\toffset    uintptr\n\tinitState func(ctx *unfoldCtx, sp unsafe.Pointer)\n}",
    "defines" : [ 0 ],
    "functions" : [ ],
    "line-end" : 43,
    "line-start" : 40,
    "names" : [ "fieldUnfolder" ],
    "package" : 0,
    "packages" : [ {
      "name" : "gotype",
      "path" : "github.com/elastic/go-structform/gotype"
    }, {
      "name" : "reflect",
      "path" : "reflect"
    }, {
      "name" : "unsafe",
      "path" : "unsafe"
    }, {
      "name" : "structform",
      "path" : "github.com/elastic/go-structform"
    } ],
    "params" : [ ],
    "receivers" : [ ],
    "results" : [ ],
    "type" : "type",
    "types" : [ {
      "local-name" : "fieldUnfolder",
      "name" : "github.com/elastic/go-structform/gotype.fieldUnfolder",
      "package" : 0,
      "type" : "Named",
      "underlying" : 1
    }, {
      "fields" : [ {
        "name" : "offset",
        "type" : 2
      }, {
        "name" : "initState",
        "type" : 3
      } ],
      "name" : "struct{offset uintptr; initState func(ctx *github.com/elastic/go-structform/gotype.unfoldCtx, sp unsafe.Pointer)}",
      "type" : "Struct",
      "underlying" : 1
    }, {
      "name" : "uintptr",
      "type" : "Basic",
      "underlying" : 2
    }, {
      "name" : "func(ctx *github.com/elastic/go-structform/gotype.unfoldCtx, sp unsafe.Pointer)",
      "params" : 4,
      "recv" : -1,
      "results" : 35,
      "type" : "Signature",
      "underlying" : 3,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "ctx",
        "type" : 5
      }, {
        "name" : "sp",
        "type" : 26
      } ],
      "name" : "(ctx *github.com/elastic/go-structform/gotype.unfoldCtx, sp unsafe.Pointer)",
      "type" : "Tuple",
      "underlying" : 4
    }, {
      "elem" : 6,
      "name" : "*github.com/elastic/go-structform/gotype.unfoldCtx",
      "type" : "Pointer",
      "underlying" : 5
    }, {
      "local-name" : "unfoldCtx",
      "name" : "github.com/elastic/go-structform/gotype.unfoldCtx",
      "package" : 0,
      "type" : "Named",
      "underlying" : 7
    }, {
      "fields" : [ {
        "name" : "opts",
        "type" : 8
      }, {
        "name" : "userReg",
        "type" : 11
      }, {
        "name" : "reg",
        "type" : 87
      }, {
        "name" : "unfolder",
        "type" : 90
      }, {
        "name" : "value",
        "type" : 144
      }, {
        "name" : "baseType",
        "type" : 148
      }, {
        "name" : "ptr",
        "type" : 152
      }, {
        "name" : "key",
        "type" : 156
      }, {
        "name" : "idx",
        "type" : 160
      }, {
        "name" : "keyCache",
        "type" : 163
      }, {
        "name" : "valueBuffer",
        "type" : 170
      } ],
      "name" : "struct{opts github.com/elastic/go-structform/gotype.options; userReg map[reflect.Type]github.com/elastic/go-structform/gotype.reflUnfolder; reg *github.com/elastic/go-structform/gotype.typeUnfoldRegistry; unfolder github.com/elastic/go-structform/gotype.unfolderStack; value github.com/elastic/go-structform/gotype.reflectValueStack; baseType github.com/elastic/go-structform/gotype.structformTypeStack; ptr github.com/elastic/go-structform/gotype.ptrStack; key github.com/elastic/go-structform/gotype.keyStack; idx github.com/elastic/go-structform/gotype.idxStack; keyCache github.com/elastic/go-structform/gotype.symbolCache; valueBuffer github.com/elastic/go-structform/gotype.unfoldBuf}",
      "type" : "Struct",
      "underlying" : 7
    }, {
      "local-name" : "options",
      "name" : "github.com/elastic/go-structform/gotype.options",
      "package" : 0,
      "type" : "Named",
      "underlying" : 9
    }, {
      "fields" : [ {
        "name" : "tag",
        "type" : 10
      } ],
      "name" : "struct{tag string}",
      "type" : "Struct",
      "underlying" : 9
    }, {
      "name" : "string",
      "type" : "Basic",
      "underlying" : 10
    }, {
      "elem" : 12,
      "key" : 36,
      "name" : "map[reflect.Type]github.com/elastic/go-structform/gotype.reflUnfolder",
      "type" : "Map",
      "underlying" : 11
    }, {
      "local-name" : "reflUnfolder",
      "name" : "github.com/elastic/go-structform/gotype.reflUnfolder",
      "package" : 0,
      "type" : "Named",
      "underlying" : 13
    }, {
      "methods" : [ {
        "name" : "initState",
        "type" : 14
      } ],
      "name" : "interface{initState(*github.com/elastic/go-structform/gotype.unfoldCtx, reflect.Value)}",
      "type" : "Interface",
      "underlying" : 13
    }, {
      "name" : "(github.com/elastic/go-structform/gotype.reflUnfolder) func(*github.com/elastic/go-structform/gotype.unfoldCtx, reflect.Value)",
      "params" : 15,
      "recv" : 0,
      "results" : 35,
      "type" : "Signature",
      "underlying" : 14,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 5
      }, {
        "name" : "",
        "type" : 16
      } ],
      "name" : "(*github.com/elastic/go-structform/gotype.unfoldCtx, reflect.Value)",
      "type" : "Tuple",
      "underlying" : 15
    }, {
      "local-name" : "Value",
      "name" : "reflect.Value",
      "package" : 1,
      "type" : "Named",
      "underlying" : 17
    }, {
      "fields" : [ {
        "name" : "typ",
        "type" : 18
      }, {
        "name" : "ptr",
        "type" : 26
      }, {
        "name" : "flag",
        "type" : 34
      } ],
      "name" : "struct{typ *reflect.rtype; ptr unsafe.Pointer; reflect.flag}",
      "type" : "Struct",
      "underlying" : 17
    }, {
      "elem" : 19,
      "name" : "*reflect.rtype",
      "type" : "Pointer",
      "underlying" : 18
    }, {
      "local-name" : "rtype",
      "name" : "reflect.rtype",
      "package" : 1,
      "type" : "Named",
      "underlying" : 20
    }, {
      "fields" : [ {
        "name" : "size",
        "type" : 2
      }, {
        "name" : "ptrdata",
        "type" : 2
      }, {
        "name" : "hash",
        "type" : 21
      }, {
        "name" : "tflag",
        "type" : 22
      }, {
        "name" : "align",
        "type" : 23
      }, {
        "name" : "fieldAlign",
        "type" : 23
      }, {
        "name" : "kind",
        "type" : 23
      }, {
        "name" : "equal",
        "type" : 24
      }, {
        "name" : "gcdata",
        "type" : 29
      }, {
        "name" : "str",
        "type" : 31
      }, {
        "name" : "ptrToThis",
        "type" : 33
      } ],
      "name" : "struct{size uintptr; ptrdata uintptr; hash uint32; tflag reflect.tflag; align uint8; fieldAlign uint8; kind uint8; equal func(unsafe.Pointer, unsafe.Pointer) bool; gcdata *byte; str reflect.nameOff; ptrToThis reflect.typeOff}",
      "type" : "Struct",
      "underlying" : 20
    }, {
      "name" : "uint32",
      "type" : "Basic",
      "underlying" : 21
    }, {
      "local-name" : "tflag",
      "name" : "reflect.tflag",
      "package" : 1,
      "type" : "Named",
      "underlying" : 23
    }, {
      "name" : "uint8",
      "type" : "Basic",
      "underlying" : 23
    }, {
      "name" : "func(unsafe.Pointer, unsafe.Pointer) bool",
      "params" : 25,
      "recv" : -1,
      "results" : 27,
      "type" : "Signature",
      "underlying" : 24,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 26
      }, {
        "name" : "",
        "type" : 26
      } ],
      "name" : "(unsafe.Pointer, unsafe.Pointer)",
      "type" : "Tuple",
      "underlying" : 25
    }, {
      "local-name" : "Pointer",
      "name" : "unsafe.Pointer",
      "package" : 2,
      "type" : "Basic",
      "underlying" : 26
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 28
      } ],
      "name" : "(bool)",
      "type" : "Tuple",
      "underlying" : 27
    }, {
      "name" : "bool",
      "type" : "Basic",
      "underlying" : 28
    }, {
      "elem" : 30,
      "name" : "*byte",
      "type" : "Pointer",
      "underlying" : 29
    }, {
      "name" : "byte",
      "type" : "Basic",
      "underlying" : 30
    }, {
      "local-name" : "nameOff",
      "name" : "reflect.nameOff",
      "package" : 1,
      "type" : "Named",
      "underlying" : 32
    }, {
      "name" : "int32",
      "type" : "Basic",
      "underlying" : 32
    }, {
      "local-name" : "typeOff",
      "name" : "reflect.typeOff",
      "package" : 1,
      "type" : "Named",
      "underlying" : 32
    }, {
      "local-name" : "flag",
      "name" : "reflect.flag",
      "package" : 1,
      "type" : "Named",
      "underlying" : 2
    }, {
      "fields" : [ ],
      "name" : "()",
      "type" : "Tuple",
      "underlying" : 35
    }, {
      "local-name" : "Type",
      "name" : "reflect.Type",
      "package" : 1,
      "type" : "Named",
      "underlying" : 37
    }, {
      "methods" : [ {
        "name" : "Align",
        "type" : 38
      }, {
        "name" : "AssignableTo",
        "type" : 41
      }, {
        "name" : "Bits",
        "type" : 38
      }, {
        "name" : "ChanDir",
        "type" : 43
      }, {
        "name" : "Comparable",
        "type" : 46
      }, {
        "name" : "ConvertibleTo",
        "type" : 41
      }, {
        "name" : "Elem",
        "type" : 47
      }, {
        "name" : "Field",
        "type" : 49
      }, {
        "name" : "FieldAlign",
        "type" : 38
      }, {
        "name" : "FieldByIndex",
        "type" : 56
      }, {
        "name" : "FieldByName",
        "type" : 58
      }, {
        "name" : "FieldByNameFunc",
        "type" : 61
      }, {
        "name" : "Implements",
        "type" : 41
      }, {
        "name" : "In",
        "type" : 65
      }, {
        "name" : "IsVariadic",
        "type" : 46
      }, {
        "name" : "Key",
        "type" : 47
      }, {
        "name" : "Kind",
        "type" : 66
      }, {
        "name" : "Len",
        "type" : 38
      }, {
        "name" : "Method",
        "type" : 70
      }, {
        "name" : "MethodByName",
        "type" : 74
      }, {
        "name" : "Name",
        "type" : 76
      }, {
        "name" : "NumField",
        "type" : 38
      }, {
        "name" : "NumIn",
        "type" : 38
      }, {
        "name" : "NumMethod",
        "type" : 38
      }, {
        "name" : "NumOut",
        "type" : 38
      }, {
        "name" : "Out",
        "type" : 65
      }, {
        "name" : "PkgPath",
        "type" : 76
      }, {
        "name" : "Size",
        "type" : 77
      }, {
        "name" : "String",
        "type" : 76
      }, {
        "name" : "common",
        "type" : 79
      }, {
        "name" : "uncommon",
        "type" : 81
      } ],
      "name" : "interface{Align() int; AssignableTo(u reflect.Type) bool; Bits() int; ChanDir() reflect.ChanDir; Comparable() bool; ConvertibleTo(u reflect.Type) bool; Elem() reflect.Type; Field(i int) reflect.StructField; FieldAlign() int; FieldByIndex(index []int) reflect.StructField; FieldByName(name string) (reflect.StructField, bool); FieldByNameFunc(match func(string) bool) (reflect.StructField, bool); Implements(u reflect.Type) bool; In(i int) reflect.Type; IsVariadic() bool; Key() reflect.Type; Kind() reflect.Kind; Len() int; Method(int) reflect.Method; MethodByName(string) (reflect.Method, bool); Name() string; NumField() int; NumIn() int; NumMethod() int; NumOut() int; Out(i int) reflect.Type; PkgPath() string; Size() uintptr; String() string; common() *reflect.rtype; uncommon() *reflect.uncommonType}",
      "type" : "Interface",
      "underlying" : 37
    }, {
      "name" : "(reflect.Type) func() int",
      "params" : 35,
      "recv" : 1,
      "results" : 39,
      "type" : "Signature",
      "underlying" : 38,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 40
      } ],
      "name" : "(int)",
      "type" : "Tuple",
      "underlying" : 39
    }, {
      "name" : "int",
      "type" : "Basic",
      "underlying" : 40
    }, {
      "name" : "(reflect.Type) func(u reflect.Type) bool",
      "params" : 42,
      "recv" : 2,
      "results" : 27,
      "type" : "Signature",
      "underlying" : 41,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "u",
        "type" : 36
      } ],
      "name" : "(u reflect.Type)",
      "type" : "Tuple",
      "underlying" : 42
    }, {
      "name" : "(reflect.Type) func() reflect.ChanDir",
      "params" : 35,
      "recv" : 3,
      "results" : 44,
      "type" : "Signature",
      "underlying" : 43,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 45
      } ],
      "name" : "(reflect.ChanDir)",
      "type" : "Tuple",
      "underlying" : 44
    }, {
      "local-name" : "ChanDir",
      "name" : "reflect.ChanDir",
      "package" : 1,
      "type" : "Named",
      "underlying" : 40
    }, {
      "name" : "(reflect.Type) func() bool",
      "params" : 35,
      "recv" : 4,
      "results" : 27,
      "type" : "Signature",
      "underlying" : 46,
      "variadic" : false
    }, {
      "name" : "(reflect.Type) func() reflect.Type",
      "params" : 35,
      "recv" : 5,
      "results" : 48,
      "type" : "Signature",
      "underlying" : 47,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 36
      } ],
      "name" : "(reflect.Type)",
      "type" : "Tuple",
      "underlying" : 48
    }, {
      "name" : "(reflect.Type) func(i int) reflect.StructField",
      "params" : 50,
      "recv" : 6,
      "results" : 51,
      "type" : "Signature",
      "underlying" : 49,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "i",
        "type" : 40
      } ],
      "name" : "(i int)",
      "type" : "Tuple",
      "underlying" : 50
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 52
      } ],
      "name" : "(reflect.StructField)",
      "type" : "Tuple",
      "underlying" : 51
    }, {
      "local-name" : "StructField",
      "name" : "reflect.StructField",
      "package" : 1,
      "type" : "Named",
      "underlying" : 53
    }, {
      "fields" : [ {
        "name" : "Name",
        "type" : 10
      }, {
        "name" : "PkgPath",
        "type" : 10
      }, {
        "name" : "Type",
        "type" : 36
      }, {
        "name" : "Tag",
        "type" : 54
      }, {
        "name" : "Offset",
        "type" : 2
      }, {
        "name" : "Index",
        "type" : 55
      }, {
        "name" : "Anonymous",
        "type" : 28
      } ],
      "name" : "struct{Name string; PkgPath string; Type reflect.Type; Tag reflect.StructTag; Offset uintptr; Index []int; Anonymous bool}",
      "type" : "Struct",
      "underlying" : 53
    }, {
      "local-name" : "StructTag",
      "name" : "reflect.StructTag",
      "package" : 1,
      "type" : "Named",
      "underlying" : 10
    }, {
      "elem" : 40,
      "name" : "[]int",
      "type" : "Slice",
      "underlying" : 55
    }, {
      "name" : "(reflect.Type) func(index []int) reflect.StructField",
      "params" : 57,
      "recv" : 7,
      "results" : 51,
      "type" : "Signature",
      "underlying" : 56,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "index",
        "type" : 55
      } ],
      "name" : "(index []int)",
      "type" : "Tuple",
      "underlying" : 57
    }, {
      "name" : "(reflect.Type) func(name string) (reflect.StructField, bool)",
      "params" : 59,
      "recv" : 8,
      "results" : 60,
      "type" : "Signature",
      "underlying" : 58,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "name",
        "type" : 10
      } ],
      "name" : "(name string)",
      "type" : "Tuple",
      "underlying" : 59
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 52
      }, {
        "name" : "",
        "type" : 28
      } ],
      "name" : "(reflect.StructField, bool)",
      "type" : "Tuple",
      "underlying" : 60
    }, {
      "name" : "(reflect.Type) func(match func(string) bool) (reflect.StructField, bool)",
      "params" : 62,
      "recv" : 9,
      "results" : 60,
      "type" : "Signature",
      "underlying" : 61,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "match",
        "type" : 63
      } ],
      "name" : "(match func(string) bool)",
      "type" : "Tuple",
      "underlying" : 62
    }, {
      "name" : "func(string) bool",
      "params" : 64,
      "recv" : -1,
      "results" : 27,
      "type" : "Signature",
      "underlying" : 63,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 10
      } ],
      "name" : "(string)",
      "type" : "Tuple",
      "underlying" : 64
    }, {
      "name" : "(reflect.Type) func(i int) reflect.Type",
      "params" : 50,
      "recv" : 10,
      "results" : 48,
      "type" : "Signature",
      "underlying" : 65,
      "variadic" : false
    }, {
      "name" : "(reflect.Type) func() reflect.Kind",
      "params" : 35,
      "recv" : 11,
      "results" : 67,
      "type" : "Signature",
      "underlying" : 66,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 68
      } ],
      "name" : "(reflect.Kind)",
      "type" : "Tuple",
      "underlying" : 67
    }, {
      "local-name" : "Kind",
      "name" : "reflect.Kind",
      "package" : 1,
      "type" : "Named",
      "underlying" : 69
    }, {
      "name" : "uint",
      "type" : "Basic",
      "underlying" : 69
    }, {
      "name" : "(reflect.Type) func(int) reflect.Method",
      "params" : 39,
      "recv" : 12,
      "results" : 71,
      "type" : "Signature",
      "underlying" : 70,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 72
      } ],
      "name" : "(reflect.Method)",
      "type" : "Tuple",
      "underlying" : 71
    }, {
      "local-name" : "Method",
      "name" : "reflect.Method",
      "package" : 1,
      "type" : "Named",
      "underlying" : 73
    }, {
      "fields" : [ {
        "name" : "Name",
        "type" : 10
      }, {
        "name" : "PkgPath",
        "type" : 10
      }, {
        "name" : "Type",
        "type" : 36
      }, {
        "name" : "Func",
        "type" : 16
      }, {
        "name" : "Index",
        "type" : 40
      } ],
      "name" : "struct{Name string; PkgPath string; Type reflect.Type; Func reflect.Value; Index int}",
      "type" : "Struct",
      "underlying" : 73
    }, {
      "name" : "(reflect.Type) func(string) (reflect.Method, bool)",
      "params" : 64,
      "recv" : 13,
      "results" : 75,
      "type" : "Signature",
      "underlying" : 74,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 72
      }, {
        "name" : "",
        "type" : 28
      } ],
      "name" : "(reflect.Method, bool)",
      "type" : "Tuple",
      "underlying" : 75
    }, {
      "name" : "(reflect.Type) func() string",
      "params" : 35,
      "recv" : 14,
      "results" : 64,
      "type" : "Signature",
      "underlying" : 76,
      "variadic" : false
    }, {
      "name" : "(reflect.Type) func() uintptr",
      "params" : 35,
      "recv" : 15,
      "results" : 78,
      "type" : "Signature",
      "underlying" : 77,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 2
      } ],
      "name" : "(uintptr)",
      "type" : "Tuple",
      "underlying" : 78
    }, {
      "name" : "(reflect.Type) func() *reflect.rtype",
      "params" : 35,
      "recv" : 16,
      "results" : 80,
      "type" : "Signature",
      "underlying" : 79,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 18
      } ],
      "name" : "(*reflect.rtype)",
      "type" : "Tuple",
      "underlying" : 80
    }, {
      "name" : "(reflect.Type) func() *reflect.uncommonType",
      "params" : 35,
      "recv" : 17,
      "results" : 82,
      "type" : "Signature",
      "underlying" : 81,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 83
      } ],
      "name" : "(*reflect.uncommonType)",
      "type" : "Tuple",
      "underlying" : 82
    }, {
      "elem" : 84,
      "name" : "*reflect.uncommonType",
      "type" : "Pointer",
      "underlying" : 83
    }, {
      "local-name" : "uncommonType",
      "name" : "reflect.uncommonType",
      "package" : 1,
      "type" : "Named",
      "underlying" : 85
    }, {
      "fields" : [ {
        "name" : "pkgPath",
        "type" : 31
      }, {
        "name" : "mcount",
        "type" : 86
      }, {
        "name" : "xcount",
        "type" : 86
      }, {
        "name" : "moff",
        "type" : 21
      }, {
        "name" : "_",
        "type" : 21
      } ],
      "name" : "struct{pkgPath reflect.nameOff; mcount uint16; xcount uint16; moff uint32; _ uint32}",
      "type" : "Struct",
      "underlying" : 85
    }, {
      "name" : "uint16",
      "type" : "Basic",
      "underlying" : 86
    }, {
      "elem" : 88,
      "name" : "*github.com/elastic/go-structform/gotype.typeUnfoldRegistry",
      "type" : "Pointer",
      "underlying" : 87
    }, {
      "local-name" : "typeUnfoldRegistry",
      "name" : "github.com/elastic/go-structform/gotype.typeUnfoldRegistry",
      "package" : 0,
      "type" : "Named",
      "underlying" : 89
    }, {
      "fields" : [ {
        "name" : "m",
        "type" : 11
      } ],
      "name" : "struct{m map[reflect.Type]github.com/elastic/go-structform/gotype.reflUnfolder}",
      "type" : "Struct",
      "underlying" : 89
    }, {
      "local-name" : "unfolderStack",
      "name" : "github.com/elastic/go-structform/gotype.unfolderStack",
      "package" : 0,
      "type" : "Named",
      "underlying" : 91
    }, {
      "fields" : [ {
        "name" : "current",
        "type" : 92
      }, {
        "name" : "stack",
        "type" : 142
      }, {
        "name" : "stack0",
        "type" : 143
      } ],
      "name" : "struct{current github.com/elastic/go-structform/gotype.unfolder; stack []github.com/elastic/go-structform/gotype.unfolder; stack0 [32]github.com/elastic/go-structform/gotype.unfolder}",
      "type" : "Struct",
      "underlying" : 91
    }, {
      "local-name" : "unfolder",
      "name" : "github.com/elastic/go-structform/gotype.unfolder",
      "package" : 0,
      "type" : "Named",
      "underlying" : 93
    }, {
      "methods" : [ {
        "name" : "OnArrayFinished",
        "type" : 94
      }, {
        "name" : "OnArrayStart",
        "type" : 100
      }, {
        "name" : "OnBool",
        "type" : 103
      }, {
        "name" : "OnByte",
        "type" : 105
      }, {
        "name" : "OnChildArrayDone",
        "type" : 94
      }, {
        "name" : "OnChildObjectDone",
        "type" : 94
      }, {
        "name" : "OnFloat32",
        "type" : 107
      }, {
        "name" : "OnFloat64",
        "type" : 110
      }, {
        "name" : "OnInt",
        "type" : 113
      }, {
        "name" : "OnInt16",
        "type" : 115
      }, {
        "name" : "OnInt32",
        "type" : 118
      }, {
        "name" : "OnInt64",
        "type" : 120
      }, {
        "name" : "OnInt8",
        "type" : 123
      }, {
        "name" : "OnKey",
        "type" : 126
      }, {
        "name" : "OnKeyRef",
        "type" : 128
      }, {
        "name" : "OnNil",
        "type" : 94
      }, {
        "name" : "OnObjectFinished",
        "type" : 94
      }, {
        "name" : "OnObjectStart",
        "type" : 100
      }, {
        "name" : "OnString",
        "type" : 126
      }, {
        "name" : "OnStringRef",
        "type" : 128
      }, {
        "name" : "OnUint",
        "type" : 131
      }, {
        "name" : "OnUint16",
        "type" : 133
      }, {
        "name" : "OnUint32",
        "type" : 135
      }, {
        "name" : "OnUint64",
        "type" : 137
      }, {
        "name" : "OnUint8",
        "type" : 140
      } ],
      "name" : "interface{OnArrayFinished(*github.com/elastic/go-structform/gotype.unfoldCtx) error; OnArrayStart(*github.com/elastic/go-structform/gotype.unfoldCtx, int, github.com/elastic/go-structform.BaseType) error; OnBool(*github.com/elastic/go-structform/gotype.unfoldCtx, bool) error; OnByte(*github.com/elastic/go-structform/gotype.unfoldCtx, byte) error; OnChildArrayDone(*github.com/elastic/go-structform/gotype.unfoldCtx) error; OnChildObjectDone(*github.com/elastic/go-structform/gotype.unfoldCtx) error; OnFloat32(*github.com/elastic/go-structform/gotype.unfoldCtx, float32) error; OnFloat64(*github.com/elastic/go-structform/gotype.unfoldCtx, float64) error; OnInt(*github.com/elastic/go-structform/gotype.unfoldCtx, int) error; OnInt16(*github.com/elastic/go-structform/gotype.unfoldCtx, int16) error; OnInt32(*github.com/elastic/go-structform/gotype.unfoldCtx, int32) error; OnInt64(*github.com/elastic/go-structform/gotype.unfoldCtx, int64) error; OnInt8(*github.com/elastic/go-structform/gotype.unfoldCtx, int8) error; OnKey(*github.com/elastic/go-structform/gotype.unfoldCtx, string) error; OnKeyRef(*github.com/elastic/go-structform/gotype.unfoldCtx, []byte) error; OnNil(*github.com/elastic/go-structform/gotype.unfoldCtx) error; OnObjectFinished(*github.com/elastic/go-structform/gotype.unfoldCtx) error; OnObjectStart(*github.com/elastic/go-structform/gotype.unfoldCtx, int, github.com/elastic/go-structform.BaseType) error; OnString(*github.com/elastic/go-structform/gotype.unfoldCtx, string) error; OnStringRef(*github.com/elastic/go-structform/gotype.unfoldCtx, []byte) error; OnUint(*github.com/elastic/go-structform/gotype.unfoldCtx, uint) error; OnUint16(*github.com/elastic/go-structform/gotype.unfoldCtx, uint16) error; OnUint32(*github.com/elastic/go-structform/gotype.unfoldCtx, uint32) error; OnUint64(*github.com/elastic/go-structform/gotype.unfoldCtx, uint64) error; OnUint8(*github.com/elastic/go-structform/gotype.unfoldCtx, uint8) error}",
      "type" : "Interface",
      "underlying" : 93
    }, {
      "name" : "(github.com/elastic/go-structform/gotype.unfolder) func(*github.com/elastic/go-structform/gotype.unfoldCtx) error",
      "params" : 95,
      "recv" : 19,
      "results" : 96,
      "type" : "Signature",
      "underlying" : 94,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 5
      } ],
      "name" : "(*github.com/elastic/go-structform/gotype.unfoldCtx)",
      "type" : "Tuple",
      "underlying" : 95
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 97
      } ],
      "name" : "(error)",
      "type" : "Tuple",
      "underlying" : 96
    }, {
      "local-name" : "error",
      "name" : "error",
      "package" : -1,
      "type" : "Named",
      "underlying" : 98
    }, {
      "methods" : [ {
        "name" : "Error",
        "type" : 99
      } ],
      "name" : "interface{Error() string}",
      "type" : "Interface",
      "underlying" : 98
    }, {
      "name" : "(error) func() string",
      "params" : 35,
      "recv" : 18,
      "results" : 64,
      "type" : "Signature",
      "underlying" : 99,
      "variadic" : false
    }, {
      "name" : "(github.com/elastic/go-structform/gotype.unfolder) func(*github.com/elastic/go-structform/gotype.unfoldCtx, int, github.com/elastic/go-structform.BaseType) error",
      "params" : 101,
      "recv" : 20,
      "results" : 96,
      "type" : "Signature",
      "underlying" : 100,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 5
      }, {
        "name" : "",
        "type" : 40
      }, {
        "name" : "",
        "type" : 102
      } ],
      "name" : "(*github.com/elastic/go-structform/gotype.unfoldCtx, int, github.com/elastic/go-structform.BaseType)",
      "type" : "Tuple",
      "underlying" : 101
    }, {
      "local-name" : "BaseType",
      "name" : "github.com/elastic/go-structform.BaseType",
      "package" : 3,
      "type" : "Named",
      "underlying" : 23
    }, {
      "name" : "(github.com/elastic/go-structform/gotype.unfolder) func(*github.com/elastic/go-structform/gotype.unfoldCtx, bool) error",
      "params" : 104,
      "recv" : 21,
      "results" : 96,
      "type" : "Signature",
      "underlying" : 103,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 5
      }, {
        "name" : "",
        "type" : 28
      } ],
      "name" : "(*github.com/elastic/go-structform/gotype.unfoldCtx, bool)",
      "type" : "Tuple",
      "underlying" : 104
    }, {
      "name" : "(github.com/elastic/go-structform/gotype.unfolder) func(*github.com/elastic/go-structform/gotype.unfoldCtx, byte) error",
      "params" : 106,
      "recv" : 22,
      "results" : 96,
      "type" : "Signature",
      "underlying" : 105,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 5
      }, {
        "name" : "",
        "type" : 30
      } ],
      "name" : "(*github.com/elastic/go-structform/gotype.unfoldCtx, byte)",
      "type" : "Tuple",
      "underlying" : 106
    }, {
      "name" : "(github.com/elastic/go-structform/gotype.unfolder) func(*github.com/elastic/go-structform/gotype.unfoldCtx, float32) error",
      "params" : 108,
      "recv" : 23,
      "results" : 96,
      "type" : "Signature",
      "underlying" : 107,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 5
      }, {
        "name" : "",
        "type" : 109
      } ],
      "name" : "(*github.com/elastic/go-structform/gotype.unfoldCtx, float32)",
      "type" : "Tuple",
      "underlying" : 108
    }, {
      "name" : "float32",
      "type" : "Basic",
      "underlying" : 109
    }, {
      "name" : "(github.com/elastic/go-structform/gotype.unfolder) func(*github.com/elastic/go-structform/gotype.unfoldCtx, float64) error",
      "params" : 111,
      "recv" : 24,
      "results" : 96,
      "type" : "Signature",
      "underlying" : 110,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 5
      }, {
        "name" : "",
        "type" : 112
      } ],
      "name" : "(*github.com/elastic/go-structform/gotype.unfoldCtx, float64)",
      "type" : "Tuple",
      "underlying" : 111
    }, {
      "name" : "float64",
      "type" : "Basic",
      "underlying" : 112
    }, {
      "name" : "(github.com/elastic/go-structform/gotype.unfolder) func(*github.com/elastic/go-structform/gotype.unfoldCtx, int) error",
      "params" : 114,
      "recv" : 25,
      "results" : 96,
      "type" : "Signature",
      "underlying" : 113,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 5
      }, {
        "name" : "",
        "type" : 40
      } ],
      "name" : "(*github.com/elastic/go-structform/gotype.unfoldCtx, int)",
      "type" : "Tuple",
      "underlying" : 114
    }, {
      "name" : "(github.com/elastic/go-structform/gotype.unfolder) func(*github.com/elastic/go-structform/gotype.unfoldCtx, int16) error",
      "params" : 116,
      "recv" : 26,
      "results" : 96,
      "type" : "Signature",
      "underlying" : 115,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 5
      }, {
        "name" : "",
        "type" : 117
      } ],
      "name" : "(*github.com/elastic/go-structform/gotype.unfoldCtx, int16)",
      "type" : "Tuple",
      "underlying" : 116
    }, {
      "name" : "int16",
      "type" : "Basic",
      "underlying" : 117
    }, {
      "name" : "(github.com/elastic/go-structform/gotype.unfolder) func(*github.com/elastic/go-structform/gotype.unfoldCtx, int32) error",
      "params" : 119,
      "recv" : 27,
      "results" : 96,
      "type" : "Signature",
      "underlying" : 118,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 5
      }, {
        "name" : "",
        "type" : 32
      } ],
      "name" : "(*github.com/elastic/go-structform/gotype.unfoldCtx, int32)",
      "type" : "Tuple",
      "underlying" : 119
    }, {
      "name" : "(github.com/elastic/go-structform/gotype.unfolder) func(*github.com/elastic/go-structform/gotype.unfoldCtx, int64) error",
      "params" : 121,
      "recv" : 28,
      "results" : 96,
      "type" : "Signature",
      "underlying" : 120,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 5
      }, {
        "name" : "",
        "type" : 122
      } ],
      "name" : "(*github.com/elastic/go-structform/gotype.unfoldCtx, int64)",
      "type" : "Tuple",
      "underlying" : 121
    }, {
      "name" : "int64",
      "type" : "Basic",
      "underlying" : 122
    }, {
      "name" : "(github.com/elastic/go-structform/gotype.unfolder) func(*github.com/elastic/go-structform/gotype.unfoldCtx, int8) error",
      "params" : 124,
      "recv" : 29,
      "results" : 96,
      "type" : "Signature",
      "underlying" : 123,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 5
      }, {
        "name" : "",
        "type" : 125
      } ],
      "name" : "(*github.com/elastic/go-structform/gotype.unfoldCtx, int8)",
      "type" : "Tuple",
      "underlying" : 124
    }, {
      "name" : "int8",
      "type" : "Basic",
      "underlying" : 125
    }, {
      "name" : "(github.com/elastic/go-structform/gotype.unfolder) func(*github.com/elastic/go-structform/gotype.unfoldCtx, string) error",
      "params" : 127,
      "recv" : 30,
      "results" : 96,
      "type" : "Signature",
      "underlying" : 126,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 5
      }, {
        "name" : "",
        "type" : 10
      } ],
      "name" : "(*github.com/elastic/go-structform/gotype.unfoldCtx, string)",
      "type" : "Tuple",
      "underlying" : 127
    }, {
      "name" : "(github.com/elastic/go-structform/gotype.unfolder) func(*github.com/elastic/go-structform/gotype.unfoldCtx, []byte) error",
      "params" : 129,
      "recv" : 31,
      "results" : 96,
      "type" : "Signature",
      "underlying" : 128,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 5
      }, {
        "name" : "",
        "type" : 130
      } ],
      "name" : "(*github.com/elastic/go-structform/gotype.unfoldCtx, []byte)",
      "type" : "Tuple",
      "underlying" : 129
    }, {
      "elem" : 30,
      "name" : "[]byte",
      "type" : "Slice",
      "underlying" : 130
    }, {
      "name" : "(github.com/elastic/go-structform/gotype.unfolder) func(*github.com/elastic/go-structform/gotype.unfoldCtx, uint) error",
      "params" : 132,
      "recv" : 32,
      "results" : 96,
      "type" : "Signature",
      "underlying" : 131,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 5
      }, {
        "name" : "",
        "type" : 69
      } ],
      "name" : "(*github.com/elastic/go-structform/gotype.unfoldCtx, uint)",
      "type" : "Tuple",
      "underlying" : 132
    }, {
      "name" : "(github.com/elastic/go-structform/gotype.unfolder) func(*github.com/elastic/go-structform/gotype.unfoldCtx, uint16) error",
      "params" : 134,
      "recv" : 33,
      "results" : 96,
      "type" : "Signature",
      "underlying" : 133,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 5
      }, {
        "name" : "",
        "type" : 86
      } ],
      "name" : "(*github.com/elastic/go-structform/gotype.unfoldCtx, uint16)",
      "type" : "Tuple",
      "underlying" : 134
    }, {
      "name" : "(github.com/elastic/go-structform/gotype.unfolder) func(*github.com/elastic/go-structform/gotype.unfoldCtx, uint32) error",
      "params" : 136,
      "recv" : 34,
      "results" : 96,
      "type" : "Signature",
      "underlying" : 135,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 5
      }, {
        "name" : "",
        "type" : 21
      } ],
      "name" : "(*github.com/elastic/go-structform/gotype.unfoldCtx, uint32)",
      "type" : "Tuple",
      "underlying" : 136
    }, {
      "name" : "(github.com/elastic/go-structform/gotype.unfolder) func(*github.com/elastic/go-structform/gotype.unfoldCtx, uint64) error",
      "params" : 138,
      "recv" : 35,
      "results" : 96,
      "type" : "Signature",
      "underlying" : 137,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 5
      }, {
        "name" : "",
        "type" : 139
      } ],
      "name" : "(*github.com/elastic/go-structform/gotype.unfoldCtx, uint64)",
      "type" : "Tuple",
      "underlying" : 138
    }, {
      "name" : "uint64",
      "type" : "Basic",
      "underlying" : 139
    }, {
      "name" : "(github.com/elastic/go-structform/gotype.unfolder) func(*github.com/elastic/go-structform/gotype.unfoldCtx, uint8) error",
      "params" : 141,
      "recv" : 36,
      "results" : 96,
      "type" : "Signature",
      "underlying" : 140,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 5
      }, {
        "name" : "",
        "type" : 23
      } ],
      "name" : "(*github.com/elastic/go-structform/gotype.unfoldCtx, uint8)",
      "type" : "Tuple",
      "underlying" : 141
    }, {
      "elem" : 92,
      "name" : "[]github.com/elastic/go-structform/gotype.unfolder",
      "type" : "Slice",
      "underlying" : 142
    }, {
      "elem" : 92,
      "name" : "[32]github.com/elastic/go-structform/gotype.unfolder",
      "type" : "Array",
      "underlying" : 143
    }, {
      "local-name" : "reflectValueStack",
      "name" : "github.com/elastic/go-structform/gotype.reflectValueStack",
      "package" : 0,
      "type" : "Named",
      "underlying" : 145
    }, {
      "fields" : [ {
        "name" : "current",
        "type" : 16
      }, {
        "name" : "stack",
        "type" : 146
      }, {
        "name" : "stack0",
        "type" : 147
      } ],
      "name" : "struct{current reflect.Value; stack []reflect.Value; stack0 [32]reflect.Value}",
      "type" : "Struct",
      "underlying" : 145
    }, {
      "elem" : 16,
      "name" : "[]reflect.Value",
      "type" : "Slice",
      "underlying" : 146
    }, {
      "elem" : 16,
      "name" : "[32]reflect.Value",
      "type" : "Array",
      "underlying" : 147
    }, {
      "local-name" : "structformTypeStack",
      "name" : "github.com/elastic/go-structform/gotype.structformTypeStack",
      "package" : 0,
      "type" : "Named",
      "underlying" : 149
    }, {
      "fields" : [ {
        "name" : "current",
        "type" : 102
      }, {
        "name" : "stack",
        "type" : 150
      }, {
        "name" : "stack0",
        "type" : 151
      } ],
      "name" : "struct{current github.com/elastic/go-structform.BaseType; stack []github.com/elastic/go-structform.BaseType; stack0 [32]github.com/elastic/go-structform.BaseType}",
      "type" : "Struct",
      "underlying" : 149
    }, {
      "elem" : 102,
      "name" : "[]github.com/elastic/go-structform.BaseType",
      "type" : "Slice",
      "underlying" : 150
    }, {
      "elem" : 102,
      "name" : "[32]github.com/elastic/go-structform.BaseType",
      "type" : "Array",
      "underlying" : 151
    }, {
      "local-name" : "ptrStack",
      "name" : "github.com/elastic/go-structform/gotype.ptrStack",
      "package" : 0,
      "type" : "Named",
      "underlying" : 153
    }, {
      "fields" : [ {
        "name" : "current",
        "type" : 26
      }, {
        "name" : "stack",
        "type" : 154
      }, {
        "name" : "stack0",
        "type" : 155
      } ],
      "name" : "struct{current unsafe.Pointer; stack []unsafe.Pointer; stack0 [32]unsafe.Pointer}",
      "type" : "Struct",
      "underlying" : 153
    }, {
      "elem" : 26,
      "name" : "[]unsafe.Pointer",
      "type" : "Slice",
      "underlying" : 154
    }, {
      "elem" : 26,
      "name" : "[32]unsafe.Pointer",
      "type" : "Array",
      "underlying" : 155
    }, {
      "local-name" : "keyStack",
      "name" : "github.com/elastic/go-structform/gotype.keyStack",
      "package" : 0,
      "type" : "Named",
      "underlying" : 157
    }, {
      "fields" : [ {
        "name" : "current",
        "type" : 10
      }, {
        "name" : "stack",
        "type" : 158
      }, {
        "name" : "stack0",
        "type" : 159
      } ],
      "name" : "struct{current string; stack []string; stack0 [32]string}",
      "type" : "Struct",
      "underlying" : 157
    }, {
      "elem" : 10,
      "name" : "[]string",
      "type" : "Slice",
      "underlying" : 158
    }, {
      "elem" : 10,
      "name" : "[32]string",
      "type" : "Array",
      "underlying" : 159
    }, {
      "local-name" : "idxStack",
      "name" : "github.com/elastic/go-structform/gotype.idxStack",
      "package" : 0,
      "type" : "Named",
      "underlying" : 161
    }, {
      "fields" : [ {
        "name" : "current",
        "type" : 40
      }, {
        "name" : "stack",
        "type" : 55
      }, {
        "name" : "stack0",
        "type" : 162
      } ],
      "name" : "struct{current int; stack []int; stack0 [32]int}",
      "type" : "Struct",
      "underlying" : 161
    }, {
      "elem" : 40,
      "name" : "[32]int",
      "type" : "Array",
      "underlying" : 162
    }, {
      "local-name" : "symbolCache",
      "name" : "github.com/elastic/go-structform/gotype.symbolCache",
      "package" : 0,
      "type" : "Named",
      "underlying" : 164
    }, {
      "fields" : [ {
        "name" : "m",
        "type" : 165
      }, {
        "name" : "lst",
        "type" : 169
      }, {
        "name" : "max",
        "type" : 40
      } ],
      "name" : "struct{m map[string]*github.com/elastic/go-structform/gotype.symbol; lst github.com/elastic/go-structform/gotype.symbolList; max int}",
      "type" : "Struct",
      "underlying" : 164
    }, {
      "elem" : 166,
      "key" : 10,
      "name" : "map[string]*github.com/elastic/go-structform/gotype.symbol",
      "type" : "Map",
      "underlying" : 165
    }, {
      "elem" : 167,
      "name" : "*github.com/elastic/go-structform/gotype.symbol",
      "type" : "Pointer",
      "underlying" : 166
    }, {
      "local-name" : "symbol",
      "name" : "github.com/elastic/go-structform/gotype.symbol",
      "package" : 0,
      "type" : "Named",
      "underlying" : 168
    }, {
      "fields" : [ {
        "name" : "value",
        "type" : 10
      }, {
        "name" : "prev",
        "type" : 166
      }, {
        "name" : "next",
        "type" : 166
      } ],
      "name" : "struct{value string; prev *github.com/elastic/go-structform/gotype.symbol; next *github.com/elastic/go-structform/gotype.symbol}",
      "type" : "Struct",
      "underlying" : 168
    }, {
      "local-name" : "symbolList",
      "name" : "github.com/elastic/go-structform/gotype.symbolList",
      "package" : 0,
      "type" : "Named",
      "underlying" : 168
    }, {
      "local-name" : "unfoldBuf",
      "name" : "github.com/elastic/go-structform/gotype.unfoldBuf",
      "package" : 0,
      "type" : "Named",
      "underlying" : 171
    }, {
      "fields" : [ {
        "name" : "arrays",
        "type" : 172
      }, {
        "name" : "mapPrimitive",
        "type" : 173
      }, {
        "name" : "mapAny",
        "type" : 175
      } ],
      "name" : "struct{arrays [][]byte; mapPrimitive []map[string]byte; mapAny []map[string]interface{}}",
      "type" : "Struct",
      "underlying" : 171
    }, {
      "elem" : 130,
      "name" : "[][]byte",
      "type" : "Slice",
      "underlying" : 172
    }, {
      "elem" : 174,
      "name" : "[]map[string]byte",
      "type" : "Slice",
      "underlying" : 173
    }, {
      "elem" : 30,
      "key" : 10,
      "name" : "map[string]byte",
      "type" : "Map",
      "underlying" : 174
    }, {
      "elem" : 176,
      "name" : "[]map[string]interface{}",
      "type" : "Slice",
      "underlying" : 175
    }, {
      "elem" : 177,
      "key" : 10,
      "name" : "map[string]interface{}",
      "type" : "Map",
      "underlying" : 176
    }, {
      "methods" : [ ],
      "name" : "interface{}",
      "type" : "Interface",
      "underlying" : 177
    } ],
    "variables" : [ {
      "name" : "",
      "package" : 0,
      "type" : 12,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 1,
      "type" : 36,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 1,
      "type" : 36,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 1,
      "type" : 36,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 1,
      "type" : 36,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 1,
      "type" : 36,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 1,
      "type" : 36,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 1,
      "type" : 36,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 1,
      "type" : 36,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 1,
      "type" : 36,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 1,
      "type" : 36,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 1,
      "type" : 36,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 1,
      "type" : 36,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 1,
      "type" : 36,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 1,
      "type" : 36,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 1,
      "type" : 36,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 1,
      "type" : 36,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 1,
      "type" : 36,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : -1,
      "type" : 97,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 0,
      "type" : 92,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 0,
      "type" : 92,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 0,
      "type" : 92,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 0,
      "type" : 92,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 0,
      "type" : 92,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 0,
      "type" : 92,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 0,
      "type" : 92,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 0,
      "type" : 92,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 0,
      "type" : 92,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 0,
      "type" : 92,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 0,
      "type" : 92,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 0,
      "type" : 92,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 0,
      "type" : 92,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 0,
      "type" : 92,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 0,
      "type" : 92,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 0,
      "type" : 92,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 0,
      "type" : 92,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 0,
      "type" : 92,
      "exported" : false,
      "embedded" : false,
      "field" : false
    } ]
  },
  "go-version" : "1.14.3"
}