{
  "usage" : {
    "file" : "queue.go",
    "label1" : "delegate",
    "label2" : "ffi",
    "line" : "248",
    "module" : "github.com/godror/godror",
    "pkg" : "github.com/godror/godror",
    "project" : "elastic/beats",
    "snippet" : "C.free(unsafe.Pointer(value))",
    "version" : "v0.10.4"
  },
  "cfg" : {
    "blocks" : [ {
      "update-vars" : [ ],
      "successors" : [ 2 ],
      "in-vars" : [ 2, 5, 3, 1, 6, 7 ],
      "exit" : false,
      "out-vars" : [ 2, 5, 3, 1, 6, 7 ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[entry]",
      "entry" : true,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ ],
      "in-vars" : [ ],
      "exit" : true,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[exit]",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 3 ],
      "in-vars" : [ 2, 5, 3, 1, 6, 7 ],
      "exit" : false,
      "out-vars" : [ 3, 1, 8, 6, 7, 2, 5 ],
      "decl-vars" : [ 8 ],
      "line-start" : 226,
      "ast" : {
        "kind" : "statement",
        "target" : {
          "kind" : "decl",
          "specs" : [ {
            "comments" : [ ],
            "declared-type" : {
              "go-type" : 33,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 33,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "error"
              }
            },
            "kind" : "spec",
            "names" : [ {
              "ident-kind" : "NoKind",
              "kind" : "ident",
              "value" : "firstErr"
            } ],
            "type" : "var",
            "values" : [ ]
          } ],
          "type" : "var"
        },
        "type" : "declaration"
      },
      "assign-vars" : [ ],
      "line-end" : 226,
      "code" : "var firstErr error",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 4 ],
      "in-vars" : [ 2, 5, 3, 1, 8, 6, 7 ],
      "exit" : false,
      "out-vars" : [ 3, 1, 9, 8, 6 ],
      "decl-vars" : [ 9 ],
      "line-start" : 227,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "OK"
          }
        } ],
        "right" : [ {
          "body" : [ {
            "body" : [ {
              "kind" : "statement",
              "type" : "return",
              "values" : [ ]
            } ],
            "condition" : {
              "go-type" : -1,
              "kind" : "expression",
              "left" : {
                "go-type" : -1,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "ok",
                  "variable" : 5
                }
              },
              "operator" : "==",
              "right" : {
                "go-type" : -1,
                "kind" : "expression",
                "qualifier" : {
                  "ident-kind" : "PkgName",
                  "kind" : "ident",
                  "package" : 3,
                  "value" : "C"
                },
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "NoKind",
                  "kind" : "ident",
                  "value" : "DPI_SUCCESS"
                }
              },
              "type" : "binary"
            },
            "else" : null,
            "init" : null,
            "kind" : "statement",
            "type" : "if"
          }, {
            "body" : [ {
              "kind" : "statement",
              "left" : [ {
                "go-type" : 33,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "firstErr",
                  "variable" : 8
                }
              } ],
              "right" : [ {
                "arguments" : [ {
                  "go-type" : 18,
                  "kind" : "constant",
                  "value" : {
                    "type" : "STRING",
                    "value" : "%s: %w"
                  }
                }, {
                  "go-type" : 18,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "name",
                    "variable" : 7
                  }
                }, {
                  "arguments" : [ ],
                  "ellipsis" : false,
                  "function" : {
                    "field" : {
                      "ident-kind" : "Func",
                      "kind" : "ident",
                      "value" : "getError"
                    },
                    "go-type" : 49,
                    "kind" : "expression",
                    "target" : {
                      "go-type" : 2,
                      "kind" : "expression",
                      "type" : "identifier",
                      "value" : {
                        "ident-kind" : "Var",
                        "kind" : "ident",
                        "value" : "d",
                        "variable" : 2
                      }
                    },
                    "type" : "selector"
                  },
                  "go-type" : 46,
                  "kind" : "expression",
                  "type" : "call"
                } ],
                "ellipsis" : false,
                "function" : {
                  "go-type" : 42,
                  "kind" : "expression",
                  "qualifier" : {
                    "ident-kind" : "PkgName",
                    "kind" : "ident",
                    "package" : 4,
                    "value" : "errors"
                  },
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Func",
                    "kind" : "ident",
                    "value" : "Errorf"
                  }
                },
                "go-type" : 33,
                "kind" : "expression",
                "type" : "call"
              } ],
              "type" : "assign"
            } ],
            "condition" : {
              "go-type" : 40,
              "kind" : "expression",
              "left" : {
                "go-type" : 33,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "firstErr",
                  "variable" : 8
                }
              },
              "operator" : "==",
              "right" : {
                "go-type" : 41,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Nil",
                  "kind" : "ident",
                  "value" : "nil"
                }
              },
              "type" : "binary"
            },
            "else" : null,
            "init" : null,
            "kind" : "statement",
            "type" : "if"
          } ],
          "go-type" : 38,
          "kind" : "literal",
          "params" : [ {
            "declared-type" : {
              "go-type" : 10,
              "kind" : "type",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 3,
                "value" : "C"
              },
              "type" : "identifier",
              "value" : {
                "ident-kind" : "NoKind",
                "kind" : "ident",
                "value" : "int"
              }
            },
            "kind" : "field",
            "names" : [ {
              "ident-kind" : "NoKind",
              "kind" : "ident",
              "value" : "ok"
            } ],
            "tag" : null
          }, {
            "declared-type" : {
              "go-type" : 18,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 18,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "string"
              }
            },
            "kind" : "field",
            "names" : [ {
              "ident-kind" : "NoKind",
              "kind" : "ident",
              "value" : "name"
            } ],
            "tag" : null
          } ],
          "results" : null,
          "type" : "function",
          "variadic" : null
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 234,
      "code" : "OK := func(ok C.int, name string) {\n\tif ok == C.DPI_SUCCESS {\n\t\treturn\n\t}\n\tif firstErr == nil {\n\t\tfirstErr = errors.Errorf(\"%s: %w\", name, d.getError())\n\t}\n}",
      "entry" : false,
      "use-vars" : [ 7, 5, 8, 2 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 5, 8 ],
      "in-vars" : [ 9, 8, 6, 3, 1 ],
      "exit" : false,
      "out-vars" : [ 1, 9, 8, 6, 3 ],
      "decl-vars" : [ ],
      "line-start" : 235,
      "ast" : {
        "condition" : {
          "go-type" : 40,
          "kind" : "expression",
          "left" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "Correlation",
              "variable" : 10
            },
            "go-type" : 18,
            "kind" : "expression",
            "target" : {
              "go-type" : 0,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "M",
                "variable" : 1
              }
            },
            "type" : "selector"
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 18,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : ""
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 239,
      "code" : "if M.Correlation != \"\" {\n\tvalue := C.CString(M.Correlation)\n\tOK(C.dpiMsgProps_setCorrelation(props, value, C.uint(len(M.Correlation))), \"setCorrelation\")\n\tC.free(unsafe.Pointer(value))\n}",
      "entry" : false,
      "use-vars" : [ 1 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 6 ],
      "in-vars" : [ 9, 8, 6, 3, 1 ],
      "exit" : false,
      "out-vars" : [ 3, 1, 9, 11, 8, 6 ],
      "decl-vars" : [ 11 ],
      "line-start" : 236,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "value"
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "Correlation",
              "variable" : 10
            },
            "go-type" : 18,
            "kind" : "expression",
            "target" : {
              "go-type" : 0,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "M",
                "variable" : 1
              }
            },
            "type" : "selector"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : -1,
            "kind" : "expression",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 3,
              "value" : "C"
            },
            "type" : "identifier",
            "value" : {
              "ident-kind" : "NoKind",
              "kind" : "ident",
              "value" : "CString"
            }
          },
          "go-type" : -1,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 236,
      "code" : "value := C.CString(M.Correlation)",
      "entry" : false,
      "use-vars" : [ 1 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 7 ],
      "in-vars" : [ 1, 9, 11, 8, 6, 3 ],
      "exit" : false,
      "out-vars" : [ 1, 9, 11, 8, 6, 3 ],
      "decl-vars" : [ ],
      "line-start" : 237,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "arguments" : [ {
              "go-type" : 9,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "props",
                "variable" : 3
              }
            }, {
              "go-type" : -1,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "value",
                "variable" : 11
              }
            }, {
              "arguments" : [ {
                "arguments" : [ {
                  "field" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "Correlation",
                    "variable" : 10
                  },
                  "go-type" : 18,
                  "kind" : "expression",
                  "target" : {
                    "go-type" : 0,
                    "kind" : "expression",
                    "type" : "identifier",
                    "value" : {
                      "ident-kind" : "Var",
                      "kind" : "ident",
                      "value" : "M",
                      "variable" : 1
                    }
                  },
                  "type" : "selector"
                } ],
                "ellipsis" : false,
                "function" : {
                  "go-type" : 51,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Builtin",
                    "kind" : "ident",
                    "value" : "len"
                  }
                },
                "go-type" : 22,
                "kind" : "expression",
                "type" : "call"
              } ],
              "ellipsis" : false,
              "function" : {
                "go-type" : -1,
                "kind" : "expression",
                "qualifier" : {
                  "ident-kind" : "PkgName",
                  "kind" : "ident",
                  "package" : 3,
                  "value" : "C"
                },
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "NoKind",
                  "kind" : "ident",
                  "value" : "uint"
                }
              },
              "go-type" : -1,
              "kind" : "expression",
              "type" : "call"
            } ],
            "ellipsis" : false,
            "function" : {
              "go-type" : -1,
              "kind" : "expression",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 3,
                "value" : "C"
              },
              "type" : "identifier",
              "value" : {
                "ident-kind" : "NoKind",
                "kind" : "ident",
                "value" : "dpiMsgProps_setCorrelation"
              }
            },
            "go-type" : -1,
            "kind" : "expression",
            "type" : "call"
          }, {
            "go-type" : 18,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "setCorrelation"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 38,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "OK",
              "variable" : 9
            }
          },
          "go-type" : 36,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 237,
      "code" : "OK(C.dpiMsgProps_setCorrelation(props, value, C.uint(len(M.Correlation))), \"setCorrelation\")",
      "entry" : false,
      "use-vars" : [ 11, 9, 3, 1 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 8 ],
      "in-vars" : [ 9, 11, 8, 6, 3, 1 ],
      "exit" : false,
      "out-vars" : [ 8, 6, 3, 1, 9 ],
      "decl-vars" : [ ],
      "line-start" : 238,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "coerced-to" : {
              "go-type" : 53,
              "kind" : "type",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 5,
                "value" : "unsafe"
              },
              "type" : "identifier",
              "value" : {
                "go-type" : 53,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "Pointer"
              }
            },
            "go-type" : -1,
            "kind" : "expression",
            "target" : {
              "go-type" : -1,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "value",
                "variable" : 11
              }
            },
            "type" : "cast"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : -1,
            "kind" : "expression",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 3,
              "value" : "C"
            },
            "type" : "identifier",
            "value" : {
              "ident-kind" : "NoKind",
              "kind" : "ident",
              "value" : "free"
            }
          },
          "go-type" : -1,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 238,
      "code" : "C.free(unsafe.Pointer(value))",
      "entry" : false,
      "use-vars" : [ 11 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 9, 10 ],
      "in-vars" : [ 3, 1, 9, 8, 6 ],
      "exit" : false,
      "out-vars" : [ 6, 3, 1, 9, 8 ],
      "decl-vars" : [ ],
      "line-start" : 241,
      "ast" : {
        "condition" : {
          "go-type" : 40,
          "kind" : "expression",
          "left" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "Delay",
              "variable" : 12
            },
            "go-type" : 7,
            "kind" : "expression",
            "target" : {
              "go-type" : 0,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "M",
                "variable" : 1
              }
            },
            "type" : "selector"
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 7,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 243,
      "code" : "if M.Delay != 0 {\n\tOK(C.dpiMsgProps_setDelay(props, C.int(M.Delay)), \"setDelay\")\n}",
      "entry" : false,
      "use-vars" : [ 1 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 10 ],
      "in-vars" : [ 1, 9, 8, 6, 3 ],
      "exit" : false,
      "out-vars" : [ 1, 9, 8, 6, 3 ],
      "decl-vars" : [ ],
      "line-start" : 242,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "arguments" : [ {
              "go-type" : 9,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "props",
                "variable" : 3
              }
            }, {
              "arguments" : [ {
                "field" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "Delay",
                  "variable" : 12
                },
                "go-type" : 7,
                "kind" : "expression",
                "target" : {
                  "go-type" : 0,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "M",
                    "variable" : 1
                  }
                },
                "type" : "selector"
              } ],
              "ellipsis" : false,
              "function" : {
                "go-type" : -1,
                "kind" : "expression",
                "qualifier" : {
                  "ident-kind" : "PkgName",
                  "kind" : "ident",
                  "package" : 3,
                  "value" : "C"
                },
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "NoKind",
                  "kind" : "ident",
                  "value" : "int"
                }
              },
              "go-type" : -1,
              "kind" : "expression",
              "type" : "call"
            } ],
            "ellipsis" : false,
            "function" : {
              "go-type" : -1,
              "kind" : "expression",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 3,
                "value" : "C"
              },
              "type" : "identifier",
              "value" : {
                "ident-kind" : "NoKind",
                "kind" : "ident",
                "value" : "dpiMsgProps_setDelay"
              }
            },
            "go-type" : -1,
            "kind" : "expression",
            "type" : "call"
          }, {
            "go-type" : 18,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "setDelay"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 38,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "OK",
              "variable" : 9
            }
          },
          "go-type" : 36,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 242,
      "code" : "OK(C.dpiMsgProps_setDelay(props, C.int(M.Delay)), \"setDelay\")",
      "entry" : false,
      "use-vars" : [ 9, 3, 1 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 11, 14 ],
      "in-vars" : [ 8, 6, 3, 1, 9 ],
      "exit" : false,
      "out-vars" : [ 3, 1, 9, 8, 6 ],
      "decl-vars" : [ ],
      "line-start" : 245,
      "ast" : {
        "condition" : {
          "go-type" : 40,
          "kind" : "expression",
          "left" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "ExceptionQ",
              "variable" : 13
            },
            "go-type" : 18,
            "kind" : "expression",
            "target" : {
              "go-type" : 0,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "M",
                "variable" : 1
              }
            },
            "type" : "selector"
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 18,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : ""
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 249,
      "code" : "if M.ExceptionQ != \"\" {\n\tvalue := C.CString(M.ExceptionQ)\n\tOK(C.dpiMsgProps_setExceptionQ(props, value, C.uint(len(M.ExceptionQ))), \"setExceptionQ\")\n\tC.free(unsafe.Pointer(value))\n}",
      "entry" : false,
      "use-vars" : [ 1 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 12 ],
      "in-vars" : [ 3, 1, 9, 8, 6 ],
      "exit" : false,
      "out-vars" : [ 6, 3, 1, 9, 14, 8 ],
      "decl-vars" : [ 14 ],
      "line-start" : 246,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "value"
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "ExceptionQ",
              "variable" : 13
            },
            "go-type" : 18,
            "kind" : "expression",
            "target" : {
              "go-type" : 0,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "M",
                "variable" : 1
              }
            },
            "type" : "selector"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : -1,
            "kind" : "expression",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 3,
              "value" : "C"
            },
            "type" : "identifier",
            "value" : {
              "ident-kind" : "NoKind",
              "kind" : "ident",
              "value" : "CString"
            }
          },
          "go-type" : -1,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 246,
      "code" : "value := C.CString(M.ExceptionQ)",
      "entry" : false,
      "use-vars" : [ 1 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 13 ],
      "in-vars" : [ 3, 1, 9, 14, 8, 6 ],
      "exit" : false,
      "out-vars" : [ 3, 1, 9, 14, 8, 6 ],
      "decl-vars" : [ ],
      "line-start" : 247,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "arguments" : [ {
              "go-type" : 9,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "props",
                "variable" : 3
              }
            }, {
              "go-type" : -1,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "value",
                "variable" : 14
              }
            }, {
              "arguments" : [ {
                "arguments" : [ {
                  "field" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "ExceptionQ",
                    "variable" : 13
                  },
                  "go-type" : 18,
                  "kind" : "expression",
                  "target" : {
                    "go-type" : 0,
                    "kind" : "expression",
                    "type" : "identifier",
                    "value" : {
                      "ident-kind" : "Var",
                      "kind" : "ident",
                      "value" : "M",
                      "variable" : 1
                    }
                  },
                  "type" : "selector"
                } ],
                "ellipsis" : false,
                "function" : {
                  "go-type" : 51,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Builtin",
                    "kind" : "ident",
                    "value" : "len"
                  }
                },
                "go-type" : 22,
                "kind" : "expression",
                "type" : "call"
              } ],
              "ellipsis" : false,
              "function" : {
                "go-type" : -1,
                "kind" : "expression",
                "qualifier" : {
                  "ident-kind" : "PkgName",
                  "kind" : "ident",
                  "package" : 3,
                  "value" : "C"
                },
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "NoKind",
                  "kind" : "ident",
                  "value" : "uint"
                }
              },
              "go-type" : -1,
              "kind" : "expression",
              "type" : "call"
            } ],
            "ellipsis" : false,
            "function" : {
              "go-type" : -1,
              "kind" : "expression",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 3,
                "value" : "C"
              },
              "type" : "identifier",
              "value" : {
                "ident-kind" : "NoKind",
                "kind" : "ident",
                "value" : "dpiMsgProps_setExceptionQ"
              }
            },
            "go-type" : -1,
            "kind" : "expression",
            "type" : "call"
          }, {
            "go-type" : 18,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "setExceptionQ"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 38,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "OK",
              "variable" : 9
            }
          },
          "go-type" : 36,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 247,
      "code" : "OK(C.dpiMsgProps_setExceptionQ(props, value, C.uint(len(M.ExceptionQ))), \"setExceptionQ\")",
      "entry" : false,
      "use-vars" : [ 9, 3, 14, 1 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 14 ],
      "in-vars" : [ 14, 8, 6, 3, 1, 9 ],
      "exit" : false,
      "out-vars" : [ 3, 1, 9, 8, 6 ],
      "decl-vars" : [ ],
      "line-start" : 248,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "coerced-to" : {
              "go-type" : 53,
              "kind" : "type",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 5,
                "value" : "unsafe"
              },
              "type" : "identifier",
              "value" : {
                "go-type" : 53,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "Pointer"
              }
            },
            "go-type" : -1,
            "kind" : "expression",
            "target" : {
              "go-type" : -1,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "value",
                "variable" : 14
              }
            },
            "type" : "cast"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : -1,
            "kind" : "expression",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 3,
              "value" : "C"
            },
            "type" : "identifier",
            "value" : {
              "ident-kind" : "NoKind",
              "kind" : "ident",
              "value" : "free"
            }
          },
          "go-type" : -1,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 248,
      "code" : "C.free(unsafe.Pointer(value))",
      "entry" : false,
      "use-vars" : [ 14 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 15, 16 ],
      "in-vars" : [ 6, 3, 1, 9, 8 ],
      "exit" : false,
      "out-vars" : [ 3, 1, 9, 8, 6 ],
      "decl-vars" : [ ],
      "line-start" : 251,
      "ast" : {
        "condition" : {
          "go-type" : 40,
          "kind" : "expression",
          "left" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "Expiration",
              "variable" : 15
            },
            "go-type" : 7,
            "kind" : "expression",
            "target" : {
              "go-type" : 0,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "M",
                "variable" : 1
              }
            },
            "type" : "selector"
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 7,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 253,
      "code" : "if M.Expiration != 0 {\n\tOK(C.dpiMsgProps_setExpiration(props, C.int(M.Expiration)), \"setExpiration\")\n}",
      "entry" : false,
      "use-vars" : [ 1 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 16 ],
      "in-vars" : [ 3, 1, 9, 8, 6 ],
      "exit" : false,
      "out-vars" : [ 1, 9, 8, 6, 3 ],
      "decl-vars" : [ ],
      "line-start" : 252,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "arguments" : [ {
              "go-type" : 9,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "props",
                "variable" : 3
              }
            }, {
              "arguments" : [ {
                "field" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "Expiration",
                  "variable" : 15
                },
                "go-type" : 7,
                "kind" : "expression",
                "target" : {
                  "go-type" : 0,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "M",
                    "variable" : 1
                  }
                },
                "type" : "selector"
              } ],
              "ellipsis" : false,
              "function" : {
                "go-type" : -1,
                "kind" : "expression",
                "qualifier" : {
                  "ident-kind" : "PkgName",
                  "kind" : "ident",
                  "package" : 3,
                  "value" : "C"
                },
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "NoKind",
                  "kind" : "ident",
                  "value" : "int"
                }
              },
              "go-type" : -1,
              "kind" : "expression",
              "type" : "call"
            } ],
            "ellipsis" : false,
            "function" : {
              "go-type" : -1,
              "kind" : "expression",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 3,
                "value" : "C"
              },
              "type" : "identifier",
              "value" : {
                "ident-kind" : "NoKind",
                "kind" : "ident",
                "value" : "dpiMsgProps_setExpiration"
              }
            },
            "go-type" : -1,
            "kind" : "expression",
            "type" : "call"
          }, {
            "go-type" : 18,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "setExpiration"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 38,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "OK",
              "variable" : 9
            }
          },
          "go-type" : 36,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 252,
      "code" : "OK(C.dpiMsgProps_setExpiration(props, C.int(M.Expiration)), \"setExpiration\")",
      "entry" : false,
      "use-vars" : [ 9, 3, 1 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 17, 18 ],
      "in-vars" : [ 9, 8, 6, 3, 1 ],
      "exit" : false,
      "out-vars" : [ 1, 9, 8, 3 ],
      "decl-vars" : [ ],
      "line-start" : 255,
      "ast" : {
        "condition" : {
          "go-type" : 40,
          "kind" : "expression",
          "left" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "OriginalMsgID",
              "variable" : 16
            },
            "go-type" : 6,
            "kind" : "expression",
            "target" : {
              "go-type" : 0,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "M",
                "variable" : 1
              }
            },
            "type" : "selector"
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 6,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "zeroMsgID",
              "variable" : 6
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 257,
      "code" : "if M.OriginalMsgID != zeroMsgID {\n\tOK(C.dpiMsgProps_setOriginalMsgId(props, (*C.char)(unsafe.Pointer(&M.OriginalMsgID[0])), MsgIDLength), \"setMsgOriginalId\")\n}",
      "entry" : false,
      "use-vars" : [ 1, 6 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 18 ],
      "in-vars" : [ 3, 1, 9, 8 ],
      "exit" : false,
      "out-vars" : [ 8, 3, 1, 9 ],
      "decl-vars" : [ ],
      "line-start" : 256,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "arguments" : [ {
              "go-type" : 9,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "props",
                "variable" : 3
              }
            }, {
              "coerced-to" : {
                "contained" : {
                  "go-type" : -1,
                  "kind" : "type",
                  "qualifier" : {
                    "ident-kind" : "PkgName",
                    "kind" : "ident",
                    "package" : 3,
                    "value" : "C"
                  },
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "NoKind",
                    "kind" : "ident",
                    "value" : "char"
                  }
                },
                "go-type" : -1,
                "kind" : "type",
                "type" : "pointer"
              },
              "go-type" : -1,
              "kind" : "expression",
              "target" : {
                "coerced-to" : {
                  "go-type" : 53,
                  "kind" : "type",
                  "qualifier" : {
                    "ident-kind" : "PkgName",
                    "kind" : "ident",
                    "package" : 5,
                    "value" : "unsafe"
                  },
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 53,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "Pointer"
                  }
                },
                "go-type" : 53,
                "kind" : "expression",
                "target" : {
                  "go-type" : 54,
                  "kind" : "expression",
                  "operator" : "&",
                  "target" : {
                    "go-type" : 7,
                    "index" : {
                      "go-type" : 22,
                      "kind" : "constant",
                      "value" : {
                        "type" : "INT",
                        "value" : "0"
                      }
                    },
                    "kind" : "expression",
                    "target" : {
                      "field" : {
                        "ident-kind" : "Var",
                        "kind" : "ident",
                        "value" : "OriginalMsgID",
                        "variable" : 16
                      },
                      "go-type" : 6,
                      "kind" : "expression",
                      "target" : {
                        "go-type" : 0,
                        "kind" : "expression",
                        "type" : "identifier",
                        "value" : {
                          "ident-kind" : "Var",
                          "kind" : "ident",
                          "value" : "M",
                          "variable" : 1
                        }
                      },
                      "type" : "selector"
                    },
                    "type" : "index"
                  },
                  "type" : "unary"
                },
                "type" : "cast"
              },
              "type" : "cast"
            }, {
              "go-type" : 55,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "16"
              }
            } ],
            "ellipsis" : false,
            "function" : {
              "go-type" : -1,
              "kind" : "expression",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 3,
                "value" : "C"
              },
              "type" : "identifier",
              "value" : {
                "ident-kind" : "NoKind",
                "kind" : "ident",
                "value" : "dpiMsgProps_setOriginalMsgId"
              }
            },
            "go-type" : -1,
            "kind" : "expression",
            "type" : "call"
          }, {
            "go-type" : 18,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "setMsgOriginalId"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 38,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "OK",
              "variable" : 9
            }
          },
          "go-type" : 36,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 256,
      "code" : "OK(C.dpiMsgProps_setOriginalMsgId(props, (*C.char)(unsafe.Pointer(&M.OriginalMsgID[0])), MsgIDLength), \"setMsgOriginalId\")",
      "entry" : false,
      "use-vars" : [ 1, 3, 9 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 19 ],
      "in-vars" : [ 3, 1, 9, 8 ],
      "exit" : false,
      "out-vars" : [ 3, 1, 9, 8 ],
      "decl-vars" : [ ],
      "line-start" : 259,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "arguments" : [ {
              "go-type" : 9,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "props",
                "variable" : 3
              }
            }, {
              "arguments" : [ {
                "field" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "Priority",
                  "variable" : 17
                },
                "go-type" : 7,
                "kind" : "expression",
                "target" : {
                  "go-type" : 0,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "M",
                    "variable" : 1
                  }
                },
                "type" : "selector"
              } ],
              "ellipsis" : false,
              "function" : {
                "go-type" : -1,
                "kind" : "expression",
                "qualifier" : {
                  "ident-kind" : "PkgName",
                  "kind" : "ident",
                  "package" : 3,
                  "value" : "C"
                },
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "NoKind",
                  "kind" : "ident",
                  "value" : "int"
                }
              },
              "go-type" : -1,
              "kind" : "expression",
              "type" : "call"
            } ],
            "ellipsis" : false,
            "function" : {
              "go-type" : -1,
              "kind" : "expression",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 3,
                "value" : "C"
              },
              "type" : "identifier",
              "value" : {
                "ident-kind" : "NoKind",
                "kind" : "ident",
                "value" : "dpiMsgProps_setPriority"
              }
            },
            "go-type" : -1,
            "kind" : "expression",
            "type" : "call"
          }, {
            "go-type" : 18,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "setPriority"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 38,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "OK",
              "variable" : 9
            }
          },
          "go-type" : 36,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 259,
      "code" : "OK(C.dpiMsgProps_setPriority(props, C.int(M.Priority)), \"setPriority\")",
      "entry" : false,
      "use-vars" : [ 3, 1, 9 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 20, 21 ],
      "in-vars" : [ 1, 9, 8, 3 ],
      "exit" : false,
      "out-vars" : [ 3, 1, 9, 8 ],
      "decl-vars" : [ ],
      "line-start" : 261,
      "ast" : {
        "condition" : {
          "go-type" : 40,
          "kind" : "expression",
          "left" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "Object",
              "variable" : 18
            },
            "go-type" : 9,
            "kind" : "expression",
            "target" : {
              "go-type" : 0,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "M",
                "variable" : 1
              }
            },
            "type" : "selector"
          },
          "operator" : "==",
          "right" : {
            "go-type" : 41,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Nil",
              "kind" : "ident",
              "value" : "nil"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 265,
      "code" : "if M.Object == nil {\n\tOK(C.dpiMsgProps_setPayloadBytes(props, (*C.char)(unsafe.Pointer(&M.Raw[0])), C.uint(len(M.Raw))), \"setPayloadBytes\")\n} else {\n\tOK(C.dpiMsgProps_setPayloadObject(props, M.Object.dpiObject), \"setPayloadObject\")\n}",
      "entry" : false,
      "use-vars" : [ 1 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 22 ],
      "in-vars" : [ 3, 1, 9, 8 ],
      "exit" : false,
      "out-vars" : [ 8 ],
      "decl-vars" : [ ],
      "line-start" : 262,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "arguments" : [ {
              "go-type" : 9,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "props",
                "variable" : 3
              }
            }, {
              "coerced-to" : {
                "contained" : {
                  "go-type" : -1,
                  "kind" : "type",
                  "qualifier" : {
                    "ident-kind" : "PkgName",
                    "kind" : "ident",
                    "package" : 3,
                    "value" : "C"
                  },
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "NoKind",
                    "kind" : "ident",
                    "value" : "char"
                  }
                },
                "go-type" : -1,
                "kind" : "type",
                "type" : "pointer"
              },
              "go-type" : -1,
              "kind" : "expression",
              "target" : {
                "coerced-to" : {
                  "go-type" : 53,
                  "kind" : "type",
                  "qualifier" : {
                    "ident-kind" : "PkgName",
                    "kind" : "ident",
                    "package" : 5,
                    "value" : "unsafe"
                  },
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 53,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "Pointer"
                  }
                },
                "go-type" : 53,
                "kind" : "expression",
                "target" : {
                  "go-type" : 54,
                  "kind" : "expression",
                  "operator" : "&",
                  "target" : {
                    "go-type" : 7,
                    "index" : {
                      "go-type" : 22,
                      "kind" : "constant",
                      "value" : {
                        "type" : "INT",
                        "value" : "0"
                      }
                    },
                    "kind" : "expression",
                    "target" : {
                      "field" : {
                        "ident-kind" : "Var",
                        "kind" : "ident",
                        "value" : "Raw",
                        "variable" : 19
                      },
                      "go-type" : 8,
                      "kind" : "expression",
                      "target" : {
                        "go-type" : 0,
                        "kind" : "expression",
                        "type" : "identifier",
                        "value" : {
                          "ident-kind" : "Var",
                          "kind" : "ident",
                          "value" : "M",
                          "variable" : 1
                        }
                      },
                      "type" : "selector"
                    },
                    "type" : "index"
                  },
                  "type" : "unary"
                },
                "type" : "cast"
              },
              "type" : "cast"
            }, {
              "arguments" : [ {
                "arguments" : [ {
                  "field" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "Raw",
                    "variable" : 19
                  },
                  "go-type" : 8,
                  "kind" : "expression",
                  "target" : {
                    "go-type" : 0,
                    "kind" : "expression",
                    "type" : "identifier",
                    "value" : {
                      "ident-kind" : "Var",
                      "kind" : "ident",
                      "value" : "M",
                      "variable" : 1
                    }
                  },
                  "type" : "selector"
                } ],
                "ellipsis" : false,
                "function" : {
                  "go-type" : 56,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Builtin",
                    "kind" : "ident",
                    "value" : "len"
                  }
                },
                "go-type" : 22,
                "kind" : "expression",
                "type" : "call"
              } ],
              "ellipsis" : false,
              "function" : {
                "go-type" : -1,
                "kind" : "expression",
                "qualifier" : {
                  "ident-kind" : "PkgName",
                  "kind" : "ident",
                  "package" : 3,
                  "value" : "C"
                },
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "NoKind",
                  "kind" : "ident",
                  "value" : "uint"
                }
              },
              "go-type" : -1,
              "kind" : "expression",
              "type" : "call"
            } ],
            "ellipsis" : false,
            "function" : {
              "go-type" : -1,
              "kind" : "expression",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 3,
                "value" : "C"
              },
              "type" : "identifier",
              "value" : {
                "ident-kind" : "NoKind",
                "kind" : "ident",
                "value" : "dpiMsgProps_setPayloadBytes"
              }
            },
            "go-type" : -1,
            "kind" : "expression",
            "type" : "call"
          }, {
            "go-type" : 18,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "setPayloadBytes"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 38,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "OK",
              "variable" : 9
            }
          },
          "go-type" : 36,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 262,
      "code" : "OK(C.dpiMsgProps_setPayloadBytes(props, (*C.char)(unsafe.Pointer(&M.Raw[0])), C.uint(len(M.Raw))), \"setPayloadBytes\")",
      "entry" : false,
      "use-vars" : [ 9, 1, 3 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 22 ],
      "in-vars" : [ 3, 1, 9, 8 ],
      "exit" : false,
      "out-vars" : [ 8 ],
      "decl-vars" : [ ],
      "line-start" : 264,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "arguments" : [ {
              "go-type" : 9,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "props",
                "variable" : 3
              }
            }, {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "dpiObject",
                "variable" : 20
              },
              "go-type" : 9,
              "kind" : "expression",
              "target" : {
                "field" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "Object",
                  "variable" : 18
                },
                "go-type" : 9,
                "kind" : "expression",
                "target" : {
                  "go-type" : 0,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "M",
                    "variable" : 1
                  }
                },
                "type" : "selector"
              },
              "type" : "selector"
            } ],
            "ellipsis" : false,
            "function" : {
              "go-type" : -1,
              "kind" : "expression",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 3,
                "value" : "C"
              },
              "type" : "identifier",
              "value" : {
                "ident-kind" : "NoKind",
                "kind" : "ident",
                "value" : "dpiMsgProps_setPayloadObject"
              }
            },
            "go-type" : -1,
            "kind" : "expression",
            "type" : "call"
          }, {
            "go-type" : 18,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "setPayloadObject"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 38,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "OK",
              "variable" : 9
            }
          },
          "go-type" : 36,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 264,
      "code" : "OK(C.dpiMsgProps_setPayloadObject(props, M.Object.dpiObject), \"setPayloadObject\")",
      "entry" : false,
      "use-vars" : [ 3, 1, 9 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 8 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 267,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 33,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "firstErr",
            "variable" : 8
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 267,
      "code" : "return firstErr",
      "entry" : false,
      "use-vars" : [ 8 ]
    } ],
    "code" : "func (M *Message) toOra(d *drv, props *C.dpiMsgProps) error {\n\tvar firstErr error\n\tOK := func(ok C.int, name string) {\n\t\tif ok == C.DPI_SUCCESS {\n\t\t\treturn\n\t\t}\n\t\tif firstErr == nil {\n\t\t\tfirstErr = errors.Errorf(\"%s: %w\", name, d.getError())\n\t\t}\n\t}\n\tif M.Correlation != \"\" {\n\t\tvalue := C.CString(M.Correlation)\n\t\tOK(C.dpiMsgProps_setCorrelation(props, value, C.uint(len(M.Correlation))), \"setCorrelation\")\n\t\tC.free(unsafe.Pointer(value))\n\t}\n\n\tif M.Delay != 0 {\n\t\tOK(C.dpiMsgProps_setDelay(props, C.int(M.Delay)), \"setDelay\")\n\t}\n\n\tif M.ExceptionQ != \"\" {\n\t\tvalue := C.CString(M.ExceptionQ)\n\t\tOK(C.dpiMsgProps_setExceptionQ(props, value, C.uint(len(M.ExceptionQ))), \"setExceptionQ\")\n\t\tC.free(unsafe.Pointer(value))\n\t}\n\n\tif M.Expiration != 0 {\n\t\tOK(C.dpiMsgProps_setExpiration(props, C.int(M.Expiration)), \"setExpiration\")\n\t}\n\n\tif M.OriginalMsgID != zeroMsgID {\n\t\tOK(C.dpiMsgProps_setOriginalMsgId(props, (*C.char)(unsafe.Pointer(&M.OriginalMsgID[0])), MsgIDLength), \"setMsgOriginalId\")\n\t}\n\n\tOK(C.dpiMsgProps_setPriority(props, C.int(M.Priority)), \"setPriority\")\n\n\tif M.Object == nil {\n\t\tOK(C.dpiMsgProps_setPayloadBytes(props, (*C.char)(unsafe.Pointer(&M.Raw[0])), C.uint(len(M.Raw))), \"setPayloadBytes\")\n\t} else {\n\t\tOK(C.dpiMsgProps_setPayloadObject(props, M.Object.dpiObject), \"setPayloadObject\")\n\t}\n\n\treturn firstErr\n}",
    "defines" : [ 0 ],
    "functions" : [ {
      "name" : "toOra",
      "package" : 0,
      "type" : 0,
      "exported" : false
    }, {
      "name" : "Errorf",
      "package" : 4,
      "type" : 42,
      "exported" : true
    }, {
      "name" : "getError",
      "package" : 0,
      "type" : 49,
      "exported" : false
    } ],
    "line-end" : 268,
    "line-start" : 225,
    "names" : [ "toOra" ],
    "package" : 0,
    "packages" : [ {
      "name" : "godror",
      "path" : "github.com/godror/godror"
    }, {
      "name" : "sync",
      "path" : "sync"
    }, {
      "name" : "time",
      "path" : "time"
    }, {
      "name" : "C",
      "path" : "C"
    }, {
      "name" : "xerrors",
      "path" : "golang.org/x/xerrors"
    }, {
      "name" : "unsafe",
      "path" : "unsafe"
    } ],
    "params" : [ 2, 3 ],
    "receivers" : [ 1 ],
    "results" : [ 4 ],
    "type" : "function",
    "types" : [ {
      "name" : "func(d *github.com/godror/godror.drv, props *invalid type) error",
      "params" : 1,
      "recv" : 1,
      "results" : 32,
      "type" : "Signature",
      "underlying" : 0,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "d",
        "type" : 2
      }, {
        "name" : "props",
        "type" : 9
      } ],
      "name" : "(d *github.com/godror/godror.drv, props *invalid type)",
      "type" : "Tuple",
      "underlying" : 1
    }, {
      "elem" : 3,
      "name" : "*github.com/godror/godror.drv",
      "type" : "Pointer",
      "underlying" : 2
    }, {
      "local-name" : "drv",
      "name" : "github.com/godror/godror.drv",
      "package" : 0,
      "type" : "Named",
      "underlying" : 4
    }, {
      "fields" : [ {
        "name" : "mu",
        "type" : 5
      }, {
        "name" : "dpiContext",
        "type" : 9
      }, {
        "name" : "pools",
        "type" : 11
      }, {
        "name" : "clientVersion",
        "type" : 30
      } ],
      "name" : "struct{mu sync.Mutex; dpiContext *invalid type; pools map[string]*github.com/godror/godror.connPool; clientVersion github.com/godror/godror.VersionInfo}",
      "type" : "Struct",
      "underlying" : 4
    }, {
      "local-name" : "Mutex",
      "name" : "sync.Mutex",
      "package" : 1,
      "type" : "Named",
      "underlying" : 6
    }, {
      "fields" : [ {
        "name" : "state",
        "type" : 7
      }, {
        "name" : "sema",
        "type" : 8
      } ],
      "name" : "struct{state int32; sema uint32}",
      "type" : "Struct",
      "underlying" : 6
    }, {
      "name" : "int32",
      "type" : "Basic",
      "underlying" : 7
    }, {
      "name" : "uint32",
      "type" : "Basic",
      "underlying" : 8
    }, {
      "elem" : 10,
      "name" : "*invalid type",
      "type" : "Pointer",
      "underlying" : 9
    }, {
      "name" : "invalid type",
      "type" : "Basic",
      "underlying" : 10
    }, {
      "elem" : 12,
      "key" : 18,
      "name" : "map[string]*github.com/godror/godror.connPool",
      "type" : "Map",
      "underlying" : 11
    }, {
      "elem" : 13,
      "name" : "*github.com/godror/godror.connPool",
      "type" : "Pointer",
      "underlying" : 12
    }, {
      "local-name" : "connPool",
      "name" : "github.com/godror/godror.connPool",
      "package" : 0,
      "type" : "Named",
      "underlying" : 14
    }, {
      "fields" : [ {
        "name" : "dpiPool",
        "type" : 9
      }, {
        "name" : "timeZone",
        "type" : 15
      }, {
        "name" : "tzOffSecs",
        "type" : 22
      }, {
        "name" : "serverVersion",
        "type" : 30
      } ],
      "name" : "struct{dpiPool *invalid type; timeZone *time.Location; tzOffSecs int; serverVersion github.com/godror/godror.VersionInfo}",
      "type" : "Struct",
      "underlying" : 14
    }, {
      "elem" : 16,
      "name" : "*time.Location",
      "type" : "Pointer",
      "underlying" : 15
    }, {
      "local-name" : "Location",
      "name" : "time.Location",
      "package" : 2,
      "type" : "Named",
      "underlying" : 17
    }, {
      "fields" : [ {
        "name" : "name",
        "type" : 18
      }, {
        "name" : "zone",
        "type" : 19
      }, {
        "name" : "tx",
        "type" : 24
      }, {
        "name" : "cacheStart",
        "type" : 27
      }, {
        "name" : "cacheEnd",
        "type" : 27
      }, {
        "name" : "cacheZone",
        "type" : 29
      } ],
      "name" : "struct{name string; zone []time.zone; tx []time.zoneTrans; cacheStart int64; cacheEnd int64; cacheZone *time.zone}",
      "type" : "Struct",
      "underlying" : 17
    }, {
      "name" : "string",
      "type" : "Basic",
      "underlying" : 18
    }, {
      "elem" : 20,
      "name" : "[]time.zone",
      "type" : "Slice",
      "underlying" : 19
    }, {
      "local-name" : "zone",
      "name" : "time.zone",
      "package" : 2,
      "type" : "Named",
      "underlying" : 21
    }, {
      "fields" : [ {
        "name" : "name",
        "type" : 18
      }, {
        "name" : "offset",
        "type" : 22
      }, {
        "name" : "isDST",
        "type" : 23
      } ],
      "name" : "struct{name string; offset int; isDST bool}",
      "type" : "Struct",
      "underlying" : 21
    }, {
      "name" : "int",
      "type" : "Basic",
      "underlying" : 22
    }, {
      "name" : "bool",
      "type" : "Basic",
      "underlying" : 23
    }, {
      "elem" : 25,
      "name" : "[]time.zoneTrans",
      "type" : "Slice",
      "underlying" : 24
    }, {
      "local-name" : "zoneTrans",
      "name" : "time.zoneTrans",
      "package" : 2,
      "type" : "Named",
      "underlying" : 26
    }, {
      "fields" : [ {
        "name" : "when",
        "type" : 27
      }, {
        "name" : "index",
        "type" : 28
      }, {
        "name" : "isstd",
        "type" : 23
      }, {
        "name" : "isutc",
        "type" : 23
      } ],
      "name" : "struct{when int64; index uint8; isstd bool; isutc bool}",
      "type" : "Struct",
      "underlying" : 26
    }, {
      "name" : "int64",
      "type" : "Basic",
      "underlying" : 27
    }, {
      "name" : "uint8",
      "type" : "Basic",
      "underlying" : 28
    }, {
      "elem" : 20,
      "name" : "*time.zone",
      "type" : "Pointer",
      "underlying" : 29
    }, {
      "local-name" : "VersionInfo",
      "name" : "github.com/godror/godror.VersionInfo",
      "package" : 0,
      "type" : "Named",
      "underlying" : 31
    }, {
      "fields" : [ {
        "name" : "ServerRelease",
        "type" : 18
      }, {
        "name" : "Version",
        "type" : 28
      }, {
        "name" : "Release",
        "type" : 28
      }, {
        "name" : "Update",
        "type" : 28
      }, {
        "name" : "PortRelease",
        "type" : 28
      }, {
        "name" : "PortUpdate",
        "type" : 28
      }, {
        "name" : "Full",
        "type" : 28
      } ],
      "name" : "struct{ServerRelease string; Version uint8; Release uint8; Update uint8; PortRelease uint8; PortUpdate uint8; Full uint8}",
      "type" : "Struct",
      "underlying" : 31
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 33
      } ],
      "name" : "(error)",
      "type" : "Tuple",
      "underlying" : 32
    }, {
      "local-name" : "error",
      "name" : "error",
      "package" : -1,
      "type" : "Named",
      "underlying" : 34
    }, {
      "methods" : [ {
        "name" : "Error",
        "type" : 35
      } ],
      "name" : "interface{Error() string}",
      "type" : "Interface",
      "underlying" : 34
    }, {
      "name" : "func() string",
      "params" : 36,
      "recv" : 0,
      "results" : 37,
      "type" : "Signature",
      "underlying" : 35,
      "variadic" : false
    }, {
      "fields" : [ ],
      "name" : "()",
      "type" : "Tuple",
      "underlying" : 36
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 18
      } ],
      "name" : "(string)",
      "type" : "Tuple",
      "underlying" : 37
    }, {
      "name" : "func(ok invalid type, name string)",
      "params" : 39,
      "recv" : -1,
      "results" : 36,
      "type" : "Signature",
      "underlying" : 38,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "ok",
        "type" : 10
      }, {
        "name" : "name",
        "type" : 18
      } ],
      "name" : "(ok invalid type, name string)",
      "type" : "Tuple",
      "underlying" : 39
    }, {
      "name" : "untyped bool",
      "type" : "Basic",
      "underlying" : 40
    }, {
      "name" : "untyped nil",
      "type" : "Basic",
      "underlying" : 41
    }, {
      "name" : "func(format string, a ...interface{}) error",
      "params" : 43,
      "recv" : -1,
      "results" : 32,
      "type" : "Signature",
      "underlying" : 42,
      "variadic" : true
    }, {
      "fields" : [ {
        "name" : "format",
        "type" : 18
      }, {
        "name" : "a",
        "type" : 44
      } ],
      "name" : "(format string, a []interface{})",
      "type" : "Tuple",
      "underlying" : 43
    }, {
      "elem" : 45,
      "name" : "[]interface{}",
      "type" : "Slice",
      "underlying" : 44
    }, {
      "methods" : [ ],
      "name" : "interface{}",
      "type" : "Interface",
      "underlying" : 45
    }, {
      "elem" : 47,
      "name" : "*github.com/godror/godror.OraErr",
      "type" : "Pointer",
      "underlying" : 46
    }, {
      "local-name" : "OraErr",
      "name" : "github.com/godror/godror.OraErr",
      "package" : 0,
      "type" : "Named",
      "underlying" : 48
    }, {
      "fields" : [ {
        "name" : "message",
        "type" : 18
      }, {
        "name" : "code",
        "type" : 22
      } ],
      "name" : "struct{message string; code int}",
      "type" : "Struct",
      "underlying" : 48
    }, {
      "name" : "func() *github.com/godror/godror.OraErr",
      "params" : 36,
      "recv" : -1,
      "results" : 50,
      "type" : "Signature",
      "underlying" : 49,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 46
      } ],
      "name" : "(*github.com/godror/godror.OraErr)",
      "type" : "Tuple",
      "underlying" : 50
    }, {
      "name" : "func(string) int",
      "params" : 37,
      "recv" : -1,
      "results" : 52,
      "type" : "Signature",
      "underlying" : 51,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 22
      } ],
      "name" : "(int)",
      "type" : "Tuple",
      "underlying" : 52
    }, {
      "local-name" : "Pointer",
      "name" : "unsafe.Pointer",
      "package" : 5,
      "type" : "Basic",
      "underlying" : 53
    }, {
      "elem" : 7,
      "name" : "*byte",
      "type" : "Pointer",
      "underlying" : 54
    }, {
      "name" : "untyped int",
      "type" : "Basic",
      "underlying" : 55
    }, {
      "name" : "func([]byte) int",
      "params" : 57,
      "recv" : -1,
      "results" : 52,
      "type" : "Signature",
      "underlying" : 56,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 8
      } ],
      "name" : "([]byte)",
      "type" : "Tuple",
      "underlying" : 57
    } ],
    "variables" : [ {
      "name" : "",
      "package" : -1,
      "type" : 33,
      "exported" : false
    }, {
      "name" : "M",
      "package" : 0,
      "type" : 0,
      "exported" : true
    }, {
      "name" : "d",
      "package" : 0,
      "type" : 2,
      "exported" : false
    }, {
      "name" : "props",
      "package" : 0,
      "type" : 9,
      "exported" : false
    }, {
      "name" : "[res0]",
      "package" : 0,
      "type" : 33,
      "exported" : false
    }, {
      "name" : "ok",
      "package" : 0,
      "type" : 10,
      "exported" : false
    }, {
      "name" : "zeroMsgID",
      "package" : 0,
      "type" : 6,
      "exported" : false
    }, {
      "name" : "name",
      "package" : 0,
      "type" : 18,
      "exported" : false
    }, {
      "name" : "firstErr",
      "package" : 0,
      "type" : 33,
      "exported" : false
    }, {
      "name" : "OK",
      "package" : 0,
      "type" : 38,
      "exported" : true
    }, {
      "name" : "Correlation",
      "package" : 0,
      "type" : 18,
      "exported" : true
    }, {
      "name" : "value",
      "package" : 0,
      "type" : 10,
      "exported" : false
    }, {
      "name" : "Delay",
      "package" : 0,
      "type" : 7,
      "exported" : true
    }, {
      "name" : "ExceptionQ",
      "package" : 0,
      "type" : 18,
      "exported" : true
    }, {
      "name" : "value",
      "package" : 0,
      "type" : 10,
      "exported" : false
    }, {
      "name" : "Expiration",
      "package" : 0,
      "type" : 7,
      "exported" : true
    }, {
      "name" : "OriginalMsgID",
      "package" : 0,
      "type" : 6,
      "exported" : true
    }, {
      "name" : "Priority",
      "package" : 0,
      "type" : 7,
      "exported" : true
    }, {
      "name" : "Object",
      "package" : 0,
      "type" : 9,
      "exported" : true
    }, {
      "name" : "Raw",
      "package" : 0,
      "type" : 8,
      "exported" : true
    }, {
      "name" : "dpiObject",
      "package" : 0,
      "type" : 9,
      "exported" : false
    } ]
  },
  "go-version" : "1.14.3"
}