{
  "usage" : {
    "file" : "blas.go",
    "label1" : "delegate",
    "label2" : "ffi",
    "line" : "6946",
    "module" : "gonum.org/v1/netlib",
    "pkg" : "gonum.org/v1/netlib/blas/netlib",
    "project" : "gorgonia/gorgonia",
    "snippet" : "C.cblas_csyr2k(C.enum_CBLAS_ORDER(rowMajor), C.enum_CBLAS_UPLO(ul), C.enum_CBLAS_TRANSPOSE(t), C.int(n), C.int(k), unsafe.Pointer(&alpha), unsafe.Pointer(_a), C.int(lda), unsafe.Pointer(_b), C.int(ldb), unsafe.Pointer(&beta), unsafe.Pointer(_c), C.int(ldc))",
    "version" : "v0.0.0-20200317120129-c5a04cffd98a"
  },
  "cfg" : {
    "blocks" : [ {
      "update-vars" : [ ],
      "successors" : [ 2 ],
      "in-vars" : [ 13, 3, 7, 8, 5, 6, 11, 12, 2, 4, 10, 9 ],
      "exit" : false,
      "out-vars" : [ 2, 13, 3, 5, 6, 11, 12, 4, 10, 7, 8, 9 ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[entry]",
      "entry" : true,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ ],
      "in-vars" : [ ],
      "exit" : true,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[exit]",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 3, 5, 7 ],
      "in-vars" : [ 12, 13, 4, 3, 8, 5, 11, 2, 10, 7, 6, 9 ],
      "exit" : false,
      "out-vars" : [ 7, 5, 6, 11, 10, 2, 13, 4, 3, 8, 9, 12 ],
      "decl-vars" : [ ],
      "line-start" : 6881,
      "ast" : {
        "condition" : {
          "go-type" : 4,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "t",
            "variable" : 3
          }
        },
        "kind" : "statement",
        "type" : "switch"
      },
      "assign-vars" : [ ],
      "line-end" : 6888,
      "code" : "switch t {\ncase blas.NoTrans:\n\tt = C.CblasNoTrans\ncase blas.Trans:\n\tt = C.CblasTrans\ndefault:\n\tpanic(badTranspose)\n}",
      "entry" : false,
      "use-vars" : [ 3 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 4 ],
      "in-vars" : [ 8, 9, 13, 10, 4, 7, 5, 6, 11, 12, 2 ],
      "exit" : false,
      "out-vars" : [ 4, 10, 7, 8, 6, 9, 12, 2, 13, 5, 11 ],
      "decl-vars" : [ ],
      "line-start" : 6882,
      "ast" : {
        "expressions" : [ {
          "go-type" : 4,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "78"
          }
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 6883,
      "code" : "case blas.NoTrans:\n\tt = C.CblasNoTrans",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ 3 ],
      "successors" : [ 9 ],
      "in-vars" : [ 9, 4, 6, 13, 10, 7, 8, 5, 11, 12, 2 ],
      "exit" : false,
      "out-vars" : [ 7, 5, 9, 2, 3, 10, 8, 6, 11, 12, 13, 4 ],
      "decl-vars" : [ ],
      "line-start" : 6883,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 4,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "t",
            "variable" : 3
          }
        } ],
        "right" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "qualifier" : {
            "ident-kind" : "PkgName",
            "kind" : "ident",
            "package" : 2,
            "value" : "C"
          },
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "CblasNoTrans"
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 3 ],
      "line-end" : 6883,
      "code" : "t = C.CblasNoTrans",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 6 ],
      "in-vars" : [ 10, 6, 11, 9, 12, 2, 13, 4, 7, 8, 5 ],
      "exit" : false,
      "out-vars" : [ 12, 2, 4, 7, 9, 13, 10, 8, 5, 6, 11 ],
      "decl-vars" : [ ],
      "line-start" : 6884,
      "ast" : {
        "expressions" : [ {
          "go-type" : 4,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "84"
          }
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 6885,
      "code" : "case blas.Trans:\n\tt = C.CblasTrans",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ 3 ],
      "successors" : [ 9 ],
      "in-vars" : [ 9, 13, 10, 7, 8, 5, 6, 11, 12, 2, 4 ],
      "exit" : false,
      "out-vars" : [ 4, 8, 5, 9, 10, 7, 6, 11, 12, 2, 13, 3 ],
      "decl-vars" : [ ],
      "line-start" : 6885,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 4,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "t",
            "variable" : 3
          }
        } ],
        "right" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "qualifier" : {
            "ident-kind" : "PkgName",
            "kind" : "ident",
            "package" : 2,
            "value" : "C"
          },
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "CblasTrans"
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 3 ],
      "line-end" : 6885,
      "code" : "t = C.CblasTrans",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 8 ],
      "in-vars" : [ 4, 3, 7, 5, 6, 11, 12, 2, 13, 10, 8, 9 ],
      "exit" : false,
      "out-vars" : [ 12, 2, 11, 9, 13, 4, 3, 10, 7, 8, 5, 6 ],
      "decl-vars" : [ ],
      "line-start" : 6886,
      "ast" : {
        "expressions" : [ ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 6887,
      "code" : "default:\n\tpanic(badTranspose)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 9 ],
      "in-vars" : [ 12, 8, 5, 6, 9, 11, 2, 13, 4, 3, 10, 7 ],
      "exit" : false,
      "out-vars" : [ 8, 5, 11, 9, 3, 10, 7, 4, 6, 12, 2, 13 ],
      "decl-vars" : [ ],
      "line-start" : 6887,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 12,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "blas: illegal transpose"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 9,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Builtin",
              "kind" : "ident",
              "value" : "panic"
            }
          },
          "go-type" : 8,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 6887,
      "code" : "panic(badTranspose)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 10, 12, 14 ],
      "in-vars" : [ 12, 13, 4, 7, 6, 9, 2, 3, 10, 8, 5, 11 ],
      "exit" : false,
      "out-vars" : [ 13, 4, 8, 11, 5, 6, 9, 12, 2, 3, 10, 7 ],
      "decl-vars" : [ ],
      "line-start" : 6889,
      "ast" : {
        "condition" : {
          "go-type" : 2,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "ul",
            "variable" : 2
          }
        },
        "kind" : "statement",
        "type" : "switch"
      },
      "assign-vars" : [ ],
      "line-end" : 6896,
      "code" : "switch ul {\ncase blas.Upper:\n\tul = C.CblasUpper\ncase blas.Lower:\n\tul = C.CblasLower\ndefault:\n\tpanic(badUplo)\n}",
      "entry" : false,
      "use-vars" : [ 2 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 11 ],
      "in-vars" : [ 12, 3, 10, 7, 8, 9, 13, 4, 5, 6, 11 ],
      "exit" : false,
      "out-vars" : [ 11, 9, 4, 3, 5, 6, 8, 12, 13, 10, 7 ],
      "decl-vars" : [ ],
      "line-start" : 6890,
      "ast" : {
        "expressions" : [ {
          "go-type" : 2,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "85"
          }
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 6891,
      "code" : "case blas.Upper:\n\tul = C.CblasUpper",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ 2 ],
      "successors" : [ 16 ],
      "in-vars" : [ 10, 7, 8, 5, 4, 3, 6, 11, 9, 12, 13 ],
      "exit" : false,
      "out-vars" : [ 10, 7, 8, 6, 11, 2, 13, 4, 9, 12, 3, 5 ],
      "decl-vars" : [ ],
      "line-start" : 6891,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 2,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "ul",
            "variable" : 2
          }
        } ],
        "right" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "qualifier" : {
            "ident-kind" : "PkgName",
            "kind" : "ident",
            "package" : 2,
            "value" : "C"
          },
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "CblasUpper"
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 2 ],
      "line-end" : 6891,
      "code" : "ul = C.CblasUpper",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 13 ],
      "in-vars" : [ 5, 3, 8, 4, 10, 7, 6, 11, 9, 12, 13 ],
      "exit" : false,
      "out-vars" : [ 12, 4, 3, 7, 8, 5, 6, 13, 10, 11, 9 ],
      "decl-vars" : [ ],
      "line-start" : 6892,
      "ast" : {
        "expressions" : [ {
          "go-type" : 2,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "76"
          }
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 6893,
      "code" : "case blas.Lower:\n\tul = C.CblasLower",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ 2 ],
      "successors" : [ 16 ],
      "in-vars" : [ 13, 8, 9, 11, 12, 4, 3, 10, 7, 5, 6 ],
      "exit" : false,
      "out-vars" : [ 11, 12, 10, 7, 8, 6, 9, 2, 13, 4, 3, 5 ],
      "decl-vars" : [ ],
      "line-start" : 6893,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 2,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "ul",
            "variable" : 2
          }
        } ],
        "right" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "qualifier" : {
            "ident-kind" : "PkgName",
            "kind" : "ident",
            "package" : 2,
            "value" : "C"
          },
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "CblasLower"
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 2 ],
      "line-end" : 6893,
      "code" : "ul = C.CblasLower",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 15 ],
      "in-vars" : [ 9, 12, 2, 3, 10, 7, 5, 13, 4, 8, 6, 11 ],
      "exit" : false,
      "out-vars" : [ 11, 3, 7, 5, 6, 10, 8, 9, 12, 2, 13, 4 ],
      "decl-vars" : [ ],
      "line-start" : 6894,
      "ast" : {
        "expressions" : [ ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 6895,
      "code" : "default:\n\tpanic(badUplo)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 16 ],
      "in-vars" : [ 13, 4, 10, 6, 11, 12, 2, 3, 7, 8, 5, 9 ],
      "exit" : false,
      "out-vars" : [ 6, 11, 9, 13, 3, 10, 7, 8, 12, 2, 4, 5 ],
      "decl-vars" : [ ],
      "line-start" : 6895,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 12,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "blas: illegal triangle"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 9,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Builtin",
              "kind" : "ident",
              "value" : "panic"
            }
          },
          "go-type" : 8,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 6895,
      "code" : "panic(badUplo)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 17, 18 ],
      "in-vars" : [ 8, 5, 9, 13, 3, 10, 7, 6, 11, 12, 2, 4 ],
      "exit" : false,
      "out-vars" : [ 10, 5, 13, 3, 4, 7, 8, 6, 11, 9, 12, 2 ],
      "decl-vars" : [ ],
      "line-start" : 6897,
      "ast" : {
        "condition" : {
          "go-type" : 13,
          "kind" : "expression",
          "left" : {
            "go-type" : 5,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "n",
              "variable" : 4
            }
          },
          "operator" : "<",
          "right" : {
            "go-type" : 5,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 6899,
      "code" : "if n < 0 {\n\tpanic(nLT0)\n}",
      "entry" : false,
      "use-vars" : [ 4 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 18 ],
      "in-vars" : [ 13, 4, 3, 8, 5, 6, 11, 9, 12, 2, 10, 7 ],
      "exit" : false,
      "out-vars" : [ 2, 13, 4, 5, 6, 11, 9, 12, 10, 7, 8, 3 ],
      "decl-vars" : [ ],
      "line-start" : 6898,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 12,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "blas: n < 0"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 9,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Builtin",
              "kind" : "ident",
              "value" : "panic"
            }
          },
          "go-type" : 8,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 6898,
      "code" : "panic(nLT0)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 19, 20 ],
      "in-vars" : [ 11, 2, 13, 4, 3, 5, 6, 9, 12, 10, 7, 8 ],
      "exit" : false,
      "out-vars" : [ 3, 10, 7, 6, 12, 2, 13, 4, 9, 8, 5, 11 ],
      "decl-vars" : [ ],
      "line-start" : 6900,
      "ast" : {
        "condition" : {
          "go-type" : 13,
          "kind" : "expression",
          "left" : {
            "go-type" : 5,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "k",
              "variable" : 5
            }
          },
          "operator" : "<",
          "right" : {
            "go-type" : 5,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 6902,
      "code" : "if k < 0 {\n\tpanic(kLT0)\n}",
      "entry" : false,
      "use-vars" : [ 5 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 20 ],
      "in-vars" : [ 8, 5, 11, 3, 2, 13, 4, 10, 7, 6, 9, 12 ],
      "exit" : false,
      "out-vars" : [ 13, 3, 7, 8, 6, 11, 9, 12, 2, 4, 10, 5 ],
      "decl-vars" : [ ],
      "line-start" : 6901,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 12,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "blas: k < 0"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 9,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Builtin",
              "kind" : "ident",
              "value" : "panic"
            }
          },
          "go-type" : 8,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 6901,
      "code" : "panic(kLT0)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 21 ],
      "in-vars" : [ 6, 11, 12, 3, 10, 7, 8, 2, 13, 4, 5, 9 ],
      "exit" : false,
      "out-vars" : [ 5, 11, 4, 10, 13, 3, 7, 8, 6, 9, 12, 2 ],
      "decl-vars" : [ 14, 15 ],
      "line-start" : 6903,
      "ast" : {
        "kind" : "statement",
        "target" : {
          "kind" : "decl",
          "specs" : [ {
            "comments" : [ ],
            "declared-type" : {
              "go-type" : 5,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 5,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "int"
              }
            },
            "kind" : "spec",
            "names" : [ {
              "ident-kind" : "NoKind",
              "kind" : "ident",
              "value" : "row"
            }, {
              "ident-kind" : "NoKind",
              "kind" : "ident",
              "value" : "col"
            } ],
            "type" : "var",
            "values" : [ ]
          } ],
          "type" : "var"
        },
        "type" : "declaration"
      },
      "assign-vars" : [ ],
      "line-end" : 6903,
      "code" : "var row, col int",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 22, 23 ],
      "in-vars" : [ 10, 7, 2, 13, 3, 8, 5, 6, 11, 9, 12, 4 ],
      "exit" : false,
      "out-vars" : [ 12, 13, 10, 11, 9, 2, 4, 3, 7, 8, 5, 6 ],
      "decl-vars" : [ ],
      "line-start" : 6904,
      "ast" : {
        "condition" : {
          "go-type" : -1,
          "kind" : "expression",
          "left" : {
            "go-type" : 4,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "t",
              "variable" : 3
            }
          },
          "operator" : "==",
          "right" : {
            "go-type" : -1,
            "kind" : "expression",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 2,
              "value" : "C"
            },
            "type" : "identifier",
            "value" : {
              "ident-kind" : "NoKind",
              "kind" : "ident",
              "value" : "CblasNoTrans"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 6908,
      "code" : "if t == C.CblasNoTrans {\n\trow, col = n, k\n} else {\n\trow, col = k, n\n}",
      "entry" : false,
      "use-vars" : [ 3 ]
    }, {
      "update-vars" : [ 15, 14 ],
      "successors" : [ 24 ],
      "in-vars" : [ 12, 13, 4, 8, 11, 9, 2, 3, 10, 7, 5, 6 ],
      "exit" : false,
      "out-vars" : [ 10, 14, 5, 6, 12, 15, 8, 11, 2, 4, 9, 13, 3, 7 ],
      "decl-vars" : [ ],
      "line-start" : 6905,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 5,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "row",
            "variable" : 14
          }
        }, {
          "go-type" : 5,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "col",
            "variable" : 15
          }
        } ],
        "right" : [ {
          "go-type" : 5,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "n",
            "variable" : 4
          }
        }, {
          "go-type" : 5,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "k",
            "variable" : 5
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 15, 14 ],
      "line-end" : 6905,
      "code" : "row, col = n, k",
      "entry" : false,
      "use-vars" : [ 5, 4 ]
    }, {
      "update-vars" : [ 15, 14 ],
      "successors" : [ 24 ],
      "in-vars" : [ 2, 4, 8, 5, 6, 11, 12, 13, 3, 10, 7, 9 ],
      "exit" : false,
      "out-vars" : [ 11, 9, 12, 2, 14, 6, 7, 8, 13, 3, 15, 5, 4, 10 ],
      "decl-vars" : [ ],
      "line-start" : 6907,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 5,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "row",
            "variable" : 14
          }
        }, {
          "go-type" : 5,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "col",
            "variable" : 15
          }
        } ],
        "right" : [ {
          "go-type" : 5,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "k",
            "variable" : 5
          }
        }, {
          "go-type" : 5,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "n",
            "variable" : 4
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 14, 15 ],
      "line-end" : 6907,
      "code" : "row, col = k, n",
      "entry" : false,
      "use-vars" : [ 4, 5 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 25, 26 ],
      "in-vars" : [ 4, 3, 8, 6, 9, 12, 2, 15, 7, 5, 10, 13, 14, 11 ],
      "exit" : false,
      "out-vars" : [ 7, 5, 4, 15, 10, 12, 11, 6, 2, 8, 14, 13, 3, 9 ],
      "decl-vars" : [ ],
      "line-start" : 6909,
      "ast" : {
        "condition" : {
          "go-type" : 13,
          "kind" : "expression",
          "left" : {
            "go-type" : 5,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "lda",
              "variable" : 8
            }
          },
          "operator" : "<",
          "right" : {
            "arguments" : [ {
              "go-type" : 5,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "1"
              }
            }, {
              "go-type" : 5,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "col",
                "variable" : 15
              }
            } ],
            "ellipsis" : false,
            "function" : {
              "go-type" : 14,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Func",
                "kind" : "ident",
                "value" : "max"
              }
            },
            "go-type" : 5,
            "kind" : "expression",
            "type" : "call"
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 6911,
      "code" : "if lda < max(1, col) {\n\tpanic(badLdA)\n}",
      "entry" : false,
      "use-vars" : [ 8, 15 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 26 ],
      "in-vars" : [ 2, 3, 14, 12, 10, 5, 6, 9, 7, 13, 4, 15, 8, 11 ],
      "exit" : false,
      "out-vars" : [ 4, 3, 15, 10, 6, 9, 2, 14, 5, 12, 7, 8, 11, 13 ],
      "decl-vars" : [ ],
      "line-start" : 6910,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 12,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "blas: bad leading dimension of A"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 9,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Builtin",
              "kind" : "ident",
              "value" : "panic"
            }
          },
          "go-type" : 8,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 6910,
      "code" : "panic(badLdA)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 27, 28 ],
      "in-vars" : [ 3, 8, 14, 11, 4, 10, 9, 12, 2, 13, 15, 7, 5, 6 ],
      "exit" : false,
      "out-vars" : [ 10, 14, 2, 3, 5, 4, 7, 8, 11, 9, 12, 13, 15, 6 ],
      "decl-vars" : [ ],
      "line-start" : 6912,
      "ast" : {
        "condition" : {
          "go-type" : 13,
          "kind" : "expression",
          "left" : {
            "go-type" : 5,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "ldb",
              "variable" : 10
            }
          },
          "operator" : "<",
          "right" : {
            "arguments" : [ {
              "go-type" : 5,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "1"
              }
            }, {
              "go-type" : 5,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "col",
                "variable" : 15
              }
            } ],
            "ellipsis" : false,
            "function" : {
              "go-type" : 14,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Func",
                "kind" : "ident",
                "value" : "max"
              }
            },
            "go-type" : 5,
            "kind" : "expression",
            "type" : "call"
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 6914,
      "code" : "if ldb < max(1, col) {\n\tpanic(badLdB)\n}",
      "entry" : false,
      "use-vars" : [ 10, 15 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 28 ],
      "in-vars" : [ 13, 3, 10, 7, 11, 9, 2, 15, 6, 12, 5, 4, 8, 14 ],
      "exit" : false,
      "out-vars" : [ 2, 3, 15, 8, 5, 12, 11, 9, 14, 7, 13, 10, 6, 4 ],
      "decl-vars" : [ ],
      "line-start" : 6913,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 12,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "blas: bad leading dimension of B"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 9,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Builtin",
              "kind" : "ident",
              "value" : "panic"
            }
          },
          "go-type" : 8,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 6913,
      "code" : "panic(badLdB)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 29, 30 ],
      "in-vars" : [ 15, 12, 13, 3, 4, 7, 9, 11, 14, 5, 6, 2, 10, 8 ],
      "exit" : false,
      "out-vars" : [ 2, 12, 10, 8, 3, 15, 7, 5, 6, 13, 4, 14, 11, 9 ],
      "decl-vars" : [ ],
      "line-start" : 6915,
      "ast" : {
        "condition" : {
          "go-type" : 13,
          "kind" : "expression",
          "left" : {
            "go-type" : 5,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "ldc",
              "variable" : 13
            }
          },
          "operator" : "<",
          "right" : {
            "arguments" : [ {
              "go-type" : 5,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "1"
              }
            }, {
              "go-type" : 5,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "n",
                "variable" : 4
              }
            } ],
            "ellipsis" : false,
            "function" : {
              "go-type" : 14,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Func",
                "kind" : "ident",
                "value" : "max"
              }
            },
            "go-type" : 5,
            "kind" : "expression",
            "type" : "call"
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 6917,
      "code" : "if ldc < max(1, n) {\n\tpanic(badLdC)\n}",
      "entry" : false,
      "use-vars" : [ 4, 13 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 30 ],
      "in-vars" : [ 3, 9, 2, 7, 14, 13, 15, 5, 11, 12, 4, 10, 8, 6 ],
      "exit" : false,
      "out-vars" : [ 7, 8, 14, 11, 9, 12, 10, 13, 5, 2, 3, 6, 4, 15 ],
      "decl-vars" : [ ],
      "line-start" : 6916,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 12,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "blas: bad leading dimension of C"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 9,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Builtin",
              "kind" : "ident",
              "value" : "panic"
            }
          },
          "go-type" : 8,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 6916,
      "code" : "panic(badLdC)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 31, 32 ],
      "in-vars" : [ 13, 15, 12, 10, 8, 5, 6, 9, 2, 4, 3, 7, 14, 11 ],
      "exit" : false,
      "out-vars" : [ 3, 11, 13, 4, 10, 8, 2, 15, 7, 5, 12, 14, 6, 9 ],
      "decl-vars" : [ ],
      "line-start" : 6920,
      "ast" : {
        "condition" : {
          "go-type" : 13,
          "kind" : "expression",
          "left" : {
            "go-type" : 5,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "n",
              "variable" : 4
            }
          },
          "operator" : "==",
          "right" : {
            "go-type" : 5,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 6922,
      "code" : "if n == 0 {\n\treturn\n}",
      "entry" : false,
      "use-vars" : [ 4 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 6921,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ ]
      },
      "assign-vars" : [ ],
      "line-end" : 6921,
      "code" : "return",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 33, 34 ],
      "in-vars" : [ 6, 2, 5, 12, 8, 14, 11, 9, 13, 3, 10, 7, 4, 15 ],
      "exit" : false,
      "out-vars" : [ 15, 7, 9, 10, 14, 5, 6, 12, 13, 3, 11, 2, 4, 8 ],
      "decl-vars" : [ ],
      "line-start" : 6925,
      "ast" : {
        "condition" : {
          "go-type" : 13,
          "kind" : "expression",
          "left" : {
            "arguments" : [ {
              "go-type" : 7,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "a",
                "variable" : 7
              }
            } ],
            "ellipsis" : false,
            "function" : {
              "go-type" : 17,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Builtin",
                "kind" : "ident",
                "value" : "len"
              }
            },
            "go-type" : 5,
            "kind" : "expression",
            "type" : "call"
          },
          "operator" : "<",
          "right" : {
            "go-type" : 5,
            "kind" : "expression",
            "left" : {
              "go-type" : 5,
              "kind" : "expression",
              "left" : {
                "go-type" : 5,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "lda",
                  "variable" : 8
                }
              },
              "operator" : "*",
              "right" : {
                "go-type" : 5,
                "kind" : "expression",
                "target" : {
                  "go-type" : 5,
                  "kind" : "expression",
                  "left" : {
                    "go-type" : 5,
                    "kind" : "expression",
                    "type" : "identifier",
                    "value" : {
                      "ident-kind" : "Var",
                      "kind" : "ident",
                      "value" : "row",
                      "variable" : 14
                    }
                  },
                  "operator" : "-",
                  "right" : {
                    "go-type" : 5,
                    "kind" : "constant",
                    "value" : {
                      "type" : "INT",
                      "value" : "1"
                    }
                  },
                  "type" : "binary"
                },
                "type" : "paren"
              },
              "type" : "binary"
            },
            "operator" : "+",
            "right" : {
              "go-type" : 5,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "col",
                "variable" : 15
              }
            },
            "type" : "binary"
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 6927,
      "code" : "if len(a) < lda*(row-1)+col {\n\tpanic(shortA)\n}",
      "entry" : false,
      "use-vars" : [ 8, 14, 15, 7 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 34 ],
      "in-vars" : [ 13, 4, 3, 9, 15, 7, 8, 14, 12, 2, 10, 5, 6, 11 ],
      "exit" : false,
      "out-vars" : [ 8, 14, 11, 2, 4, 10, 6, 9, 12, 3, 13, 15, 7, 5 ],
      "decl-vars" : [ ],
      "line-start" : 6926,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 12,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "blas: insufficient length of a"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 9,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Builtin",
              "kind" : "ident",
              "value" : "panic"
            }
          },
          "go-type" : 8,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 6926,
      "code" : "panic(shortA)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 35, 36 ],
      "in-vars" : [ 12, 13, 8, 6, 9, 2, 4, 15, 10, 7, 3, 14, 5, 11 ],
      "exit" : false,
      "out-vars" : [ 5, 12, 2, 13, 3, 7, 9, 4, 10, 8, 6, 11 ],
      "decl-vars" : [ ],
      "line-start" : 6928,
      "ast" : {
        "condition" : {
          "go-type" : 13,
          "kind" : "expression",
          "left" : {
            "arguments" : [ {
              "go-type" : 7,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "b",
                "variable" : 9
              }
            } ],
            "ellipsis" : false,
            "function" : {
              "go-type" : 17,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Builtin",
                "kind" : "ident",
                "value" : "len"
              }
            },
            "go-type" : 5,
            "kind" : "expression",
            "type" : "call"
          },
          "operator" : "<",
          "right" : {
            "go-type" : 5,
            "kind" : "expression",
            "left" : {
              "go-type" : 5,
              "kind" : "expression",
              "left" : {
                "go-type" : 5,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "ldb",
                  "variable" : 10
                }
              },
              "operator" : "*",
              "right" : {
                "go-type" : 5,
                "kind" : "expression",
                "target" : {
                  "go-type" : 5,
                  "kind" : "expression",
                  "left" : {
                    "go-type" : 5,
                    "kind" : "expression",
                    "type" : "identifier",
                    "value" : {
                      "ident-kind" : "Var",
                      "kind" : "ident",
                      "value" : "row",
                      "variable" : 14
                    }
                  },
                  "operator" : "-",
                  "right" : {
                    "go-type" : 5,
                    "kind" : "constant",
                    "value" : {
                      "type" : "INT",
                      "value" : "1"
                    }
                  },
                  "type" : "binary"
                },
                "type" : "paren"
              },
              "type" : "binary"
            },
            "operator" : "+",
            "right" : {
              "go-type" : 5,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "col",
                "variable" : 15
              }
            },
            "type" : "binary"
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 6930,
      "code" : "if len(b) < ldb*(row-1)+col {\n\tpanic(shortB)\n}",
      "entry" : false,
      "use-vars" : [ 9, 10, 14, 15 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 36 ],
      "in-vars" : [ 8, 11, 9, 2, 3, 10, 7, 5, 6, 12, 13, 4 ],
      "exit" : false,
      "out-vars" : [ 12, 2, 3, 5, 6, 9, 13, 4, 10, 7, 8, 11 ],
      "decl-vars" : [ ],
      "line-start" : 6929,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 12,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "blas: insufficient length of b"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 9,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Builtin",
              "kind" : "ident",
              "value" : "panic"
            }
          },
          "go-type" : 8,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 6929,
      "code" : "panic(shortB)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 37, 38 ],
      "in-vars" : [ 4, 8, 11, 9, 7, 5, 6, 12, 2, 13, 3, 10 ],
      "exit" : false,
      "out-vars" : [ 12, 2, 13, 3, 10, 8, 11, 9, 4, 7, 5, 6 ],
      "decl-vars" : [ ],
      "line-start" : 6931,
      "ast" : {
        "condition" : {
          "go-type" : 13,
          "kind" : "expression",
          "left" : {
            "arguments" : [ {
              "go-type" : 7,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "c",
                "variable" : 12
              }
            } ],
            "ellipsis" : false,
            "function" : {
              "go-type" : 17,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Builtin",
                "kind" : "ident",
                "value" : "len"
              }
            },
            "go-type" : 5,
            "kind" : "expression",
            "type" : "call"
          },
          "operator" : "<",
          "right" : {
            "go-type" : 5,
            "kind" : "expression",
            "left" : {
              "go-type" : 5,
              "kind" : "expression",
              "left" : {
                "go-type" : 5,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "ldc",
                  "variable" : 13
                }
              },
              "operator" : "*",
              "right" : {
                "go-type" : 5,
                "kind" : "expression",
                "target" : {
                  "go-type" : 5,
                  "kind" : "expression",
                  "left" : {
                    "go-type" : 5,
                    "kind" : "expression",
                    "type" : "identifier",
                    "value" : {
                      "ident-kind" : "Var",
                      "kind" : "ident",
                      "value" : "n",
                      "variable" : 4
                    }
                  },
                  "operator" : "-",
                  "right" : {
                    "go-type" : 5,
                    "kind" : "constant",
                    "value" : {
                      "type" : "INT",
                      "value" : "1"
                    }
                  },
                  "type" : "binary"
                },
                "type" : "paren"
              },
              "type" : "binary"
            },
            "operator" : "+",
            "right" : {
              "go-type" : 5,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "n",
                "variable" : 4
              }
            },
            "type" : "binary"
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 6933,
      "code" : "if len(c) < ldc*(n-1)+n {\n\tpanic(shortC)\n}",
      "entry" : false,
      "use-vars" : [ 12, 13, 4 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 38 ],
      "in-vars" : [ 7, 8, 5, 9, 13, 10, 4, 3, 6, 11, 12, 2 ],
      "exit" : false,
      "out-vars" : [ 13, 4, 3, 10, 5, 11, 12, 2, 7, 8, 6, 9 ],
      "decl-vars" : [ ],
      "line-start" : 6932,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 12,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "blas: insufficient length of c"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 9,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Builtin",
              "kind" : "ident",
              "value" : "panic"
            }
          },
          "go-type" : 8,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 6932,
      "code" : "panic(shortC)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 39 ],
      "in-vars" : [ 2, 10, 8, 9, 7, 5, 6, 11, 12, 13, 4, 3 ],
      "exit" : false,
      "out-vars" : [ 12, 2, 7, 8, 5, 6, 11, 16, 13, 4, 3, 10, 9 ],
      "decl-vars" : [ 16 ],
      "line-start" : 6934,
      "ast" : {
        "kind" : "statement",
        "target" : {
          "kind" : "decl",
          "specs" : [ {
            "comments" : [ ],
            "declared-type" : {
              "contained" : {
                "go-type" : 6,
                "kind" : "type",
                "type" : "identifier",
                "value" : {
                  "go-type" : 6,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "complex64"
                }
              },
              "go-type" : 19,
              "kind" : "type",
              "type" : "pointer"
            },
            "kind" : "spec",
            "names" : [ {
              "ident-kind" : "NoKind",
              "kind" : "ident",
              "value" : "_a"
            } ],
            "type" : "var",
            "values" : [ ]
          } ],
          "type" : "var"
        },
        "type" : "declaration"
      },
      "assign-vars" : [ ],
      "line-end" : 6934,
      "code" : "var _a *complex64",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 40, 41 ],
      "in-vars" : [ 3, 10, 7, 8, 6, 11, 9, 12, 13, 4, 5, 16, 2 ],
      "exit" : false,
      "out-vars" : [ 16, 9, 2, 7, 4, 3, 10, 8, 5, 6, 12, 13, 11 ],
      "decl-vars" : [ ],
      "line-start" : 6935,
      "ast" : {
        "condition" : {
          "go-type" : 13,
          "kind" : "expression",
          "left" : {
            "arguments" : [ {
              "go-type" : 7,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "a",
                "variable" : 7
              }
            } ],
            "ellipsis" : false,
            "function" : {
              "go-type" : 17,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Builtin",
                "kind" : "ident",
                "value" : "len"
              }
            },
            "go-type" : 5,
            "kind" : "expression",
            "type" : "call"
          },
          "operator" : ">",
          "right" : {
            "go-type" : 5,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 6937,
      "code" : "if len(a) > 0 {\n\t_a = &a[0]\n}",
      "entry" : false,
      "use-vars" : [ 7 ]
    }, {
      "update-vars" : [ 16 ],
      "successors" : [ 41 ],
      "in-vars" : [ 12, 2, 13, 3, 6, 9, 4, 10, 7, 8, 5, 11 ],
      "exit" : false,
      "out-vars" : [ 2, 8, 11, 16, 10, 5, 6, 9, 12, 13, 4, 3 ],
      "decl-vars" : [ ],
      "line-start" : 6936,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 19,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "_a",
            "variable" : 16
          }
        } ],
        "right" : [ {
          "go-type" : 19,
          "kind" : "expression",
          "operator" : "&",
          "target" : {
            "go-type" : 6,
            "index" : {
              "go-type" : 5,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "0"
              }
            },
            "kind" : "expression",
            "target" : {
              "go-type" : 7,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "a",
                "variable" : 7
              }
            },
            "type" : "index"
          },
          "type" : "unary"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 16 ],
      "line-end" : 6936,
      "code" : "_a = &a[0]",
      "entry" : false,
      "use-vars" : [ 7 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 42 ],
      "in-vars" : [ 12, 4, 3, 6, 11, 2, 13, 10, 8, 5, 16, 9 ],
      "exit" : false,
      "out-vars" : [ 10, 17, 5, 6, 16, 2, 13, 4, 9, 11, 12, 3, 8 ],
      "decl-vars" : [ 17 ],
      "line-start" : 6938,
      "ast" : {
        "kind" : "statement",
        "target" : {
          "kind" : "decl",
          "specs" : [ {
            "comments" : [ ],
            "declared-type" : {
              "contained" : {
                "go-type" : 6,
                "kind" : "type",
                "type" : "identifier",
                "value" : {
                  "go-type" : 6,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "complex64"
                }
              },
              "go-type" : 19,
              "kind" : "type",
              "type" : "pointer"
            },
            "kind" : "spec",
            "names" : [ {
              "ident-kind" : "NoKind",
              "kind" : "ident",
              "value" : "_b"
            } ],
            "type" : "var",
            "values" : [ ]
          } ],
          "type" : "var"
        },
        "type" : "declaration"
      },
      "assign-vars" : [ ],
      "line-end" : 6938,
      "code" : "var _b *complex64",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 43, 44 ],
      "in-vars" : [ 12, 13, 4, 11, 6, 16, 2, 3, 10, 8, 17, 5, 9 ],
      "exit" : false,
      "out-vars" : [ 12, 3, 5, 6, 11, 16, 9, 2, 13, 4, 10, 8, 17 ],
      "decl-vars" : [ ],
      "line-start" : 6939,
      "ast" : {
        "condition" : {
          "go-type" : 13,
          "kind" : "expression",
          "left" : {
            "arguments" : [ {
              "go-type" : 7,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "b",
                "variable" : 9
              }
            } ],
            "ellipsis" : false,
            "function" : {
              "go-type" : 17,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Builtin",
                "kind" : "ident",
                "value" : "len"
              }
            },
            "go-type" : 5,
            "kind" : "expression",
            "type" : "call"
          },
          "operator" : ">",
          "right" : {
            "go-type" : 5,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 6941,
      "code" : "if len(b) > 0 {\n\t_b = &b[0]\n}",
      "entry" : false,
      "use-vars" : [ 9 ]
    }, {
      "update-vars" : [ 17 ],
      "successors" : [ 44 ],
      "in-vars" : [ 16, 12, 2, 4, 11, 5, 6, 9, 13, 3, 10, 8 ],
      "exit" : false,
      "out-vars" : [ 12, 13, 4, 3, 5, 6, 11, 16, 2, 10, 8, 17 ],
      "decl-vars" : [ ],
      "line-start" : 6940,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 19,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "_b",
            "variable" : 17
          }
        } ],
        "right" : [ {
          "go-type" : 19,
          "kind" : "expression",
          "operator" : "&",
          "target" : {
            "go-type" : 6,
            "index" : {
              "go-type" : 5,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "0"
              }
            },
            "kind" : "expression",
            "target" : {
              "go-type" : 7,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "b",
                "variable" : 9
              }
            },
            "type" : "index"
          },
          "type" : "unary"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 17 ],
      "line-end" : 6940,
      "code" : "_b = &b[0]",
      "entry" : false,
      "use-vars" : [ 9 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 45 ],
      "in-vars" : [ 17, 5, 12, 2, 4, 3, 10, 8, 6, 13, 11, 16 ],
      "exit" : false,
      "out-vars" : [ 13, 10, 17, 5, 11, 16, 12, 2, 4, 3, 8, 6, 18 ],
      "decl-vars" : [ 18 ],
      "line-start" : 6942,
      "ast" : {
        "kind" : "statement",
        "target" : {
          "kind" : "decl",
          "specs" : [ {
            "comments" : [ ],
            "declared-type" : {
              "contained" : {
                "go-type" : 6,
                "kind" : "type",
                "type" : "identifier",
                "value" : {
                  "go-type" : 6,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "complex64"
                }
              },
              "go-type" : 19,
              "kind" : "type",
              "type" : "pointer"
            },
            "kind" : "spec",
            "names" : [ {
              "ident-kind" : "NoKind",
              "kind" : "ident",
              "value" : "_c"
            } ],
            "type" : "var",
            "values" : [ ]
          } ],
          "type" : "var"
        },
        "type" : "declaration"
      },
      "assign-vars" : [ ],
      "line-end" : 6942,
      "code" : "var _c *complex64",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 46, 47 ],
      "in-vars" : [ 3, 11, 18, 4, 10, 8, 17, 5, 12, 2, 13, 6, 16 ],
      "exit" : false,
      "out-vars" : [ 4, 10, 5, 2, 13, 8, 17, 6, 11, 18, 16, 12, 3 ],
      "decl-vars" : [ ],
      "line-start" : 6943,
      "ast" : {
        "condition" : {
          "go-type" : 13,
          "kind" : "expression",
          "left" : {
            "arguments" : [ {
              "go-type" : 7,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "c",
                "variable" : 12
              }
            } ],
            "ellipsis" : false,
            "function" : {
              "go-type" : 17,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Builtin",
                "kind" : "ident",
                "value" : "len"
              }
            },
            "go-type" : 5,
            "kind" : "expression",
            "type" : "call"
          },
          "operator" : ">",
          "right" : {
            "go-type" : 5,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 6945,
      "code" : "if len(c) > 0 {\n\t_c = &c[0]\n}",
      "entry" : false,
      "use-vars" : [ 12 ]
    }, {
      "update-vars" : [ 18 ],
      "successors" : [ 47 ],
      "in-vars" : [ 13, 3, 16, 2, 4, 10, 8, 17, 5, 6, 11, 12 ],
      "exit" : false,
      "out-vars" : [ 2, 4, 3, 10, 17, 5, 11, 16, 13, 8, 6, 18 ],
      "decl-vars" : [ ],
      "line-start" : 6944,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 19,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "_c",
            "variable" : 18
          }
        } ],
        "right" : [ {
          "go-type" : 19,
          "kind" : "expression",
          "operator" : "&",
          "target" : {
            "go-type" : 6,
            "index" : {
              "go-type" : 5,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "0"
              }
            },
            "kind" : "expression",
            "target" : {
              "go-type" : 7,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "c",
                "variable" : 12
              }
            },
            "type" : "index"
          },
          "type" : "unary"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 18 ],
      "line-end" : 6944,
      "code" : "_c = &c[0]",
      "entry" : false,
      "use-vars" : [ 12 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 17, 6, 13, 3, 10, 8, 5, 11, 18, 16, 2, 4 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 6946,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "arguments" : [ {
              "go-type" : 20,
              "kind" : "constant",
              "value" : null
            } ],
            "ellipsis" : false,
            "function" : {
              "go-type" : -1,
              "kind" : "expression",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 2,
                "value" : "C"
              },
              "type" : "identifier",
              "value" : {
                "ident-kind" : "NoKind",
                "kind" : "ident",
                "value" : "enum_CBLAS_ORDER"
              }
            },
            "go-type" : -1,
            "kind" : "expression",
            "type" : "call"
          }, {
            "arguments" : [ {
              "go-type" : 2,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "ul",
                "variable" : 2
              }
            } ],
            "ellipsis" : false,
            "function" : {
              "go-type" : -1,
              "kind" : "expression",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 2,
                "value" : "C"
              },
              "type" : "identifier",
              "value" : {
                "ident-kind" : "NoKind",
                "kind" : "ident",
                "value" : "enum_CBLAS_UPLO"
              }
            },
            "go-type" : -1,
            "kind" : "expression",
            "type" : "call"
          }, {
            "arguments" : [ {
              "go-type" : 4,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "t",
                "variable" : 3
              }
            } ],
            "ellipsis" : false,
            "function" : {
              "go-type" : -1,
              "kind" : "expression",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 2,
                "value" : "C"
              },
              "type" : "identifier",
              "value" : {
                "ident-kind" : "NoKind",
                "kind" : "ident",
                "value" : "enum_CBLAS_TRANSPOSE"
              }
            },
            "go-type" : -1,
            "kind" : "expression",
            "type" : "call"
          }, {
            "arguments" : [ {
              "go-type" : 5,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "n",
                "variable" : 4
              }
            } ],
            "ellipsis" : false,
            "function" : {
              "go-type" : -1,
              "kind" : "expression",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 2,
                "value" : "C"
              },
              "type" : "identifier",
              "value" : {
                "ident-kind" : "NoKind",
                "kind" : "ident",
                "value" : "int"
              }
            },
            "go-type" : -1,
            "kind" : "expression",
            "type" : "call"
          }, {
            "arguments" : [ {
              "go-type" : 5,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "k",
                "variable" : 5
              }
            } ],
            "ellipsis" : false,
            "function" : {
              "go-type" : -1,
              "kind" : "expression",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 2,
                "value" : "C"
              },
              "type" : "identifier",
              "value" : {
                "ident-kind" : "NoKind",
                "kind" : "ident",
                "value" : "int"
              }
            },
            "go-type" : -1,
            "kind" : "expression",
            "type" : "call"
          }, {
            "coerced-to" : {
              "go-type" : 21,
              "kind" : "type",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 3,
                "value" : "unsafe"
              },
              "type" : "identifier",
              "value" : {
                "go-type" : 21,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "Pointer"
              }
            },
            "go-type" : 21,
            "kind" : "expression",
            "target" : {
              "go-type" : 19,
              "kind" : "expression",
              "operator" : "&",
              "target" : {
                "go-type" : 6,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "alpha",
                  "variable" : 6
                }
              },
              "type" : "unary"
            },
            "type" : "cast"
          }, {
            "coerced-to" : {
              "go-type" : 21,
              "kind" : "type",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 3,
                "value" : "unsafe"
              },
              "type" : "identifier",
              "value" : {
                "go-type" : 21,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "Pointer"
              }
            },
            "go-type" : 21,
            "kind" : "expression",
            "target" : {
              "go-type" : 19,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "_a",
                "variable" : 16
              }
            },
            "type" : "cast"
          }, {
            "arguments" : [ {
              "go-type" : 5,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "lda",
                "variable" : 8
              }
            } ],
            "ellipsis" : false,
            "function" : {
              "go-type" : -1,
              "kind" : "expression",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 2,
                "value" : "C"
              },
              "type" : "identifier",
              "value" : {
                "ident-kind" : "NoKind",
                "kind" : "ident",
                "value" : "int"
              }
            },
            "go-type" : -1,
            "kind" : "expression",
            "type" : "call"
          }, {
            "coerced-to" : {
              "go-type" : 21,
              "kind" : "type",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 3,
                "value" : "unsafe"
              },
              "type" : "identifier",
              "value" : {
                "go-type" : 21,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "Pointer"
              }
            },
            "go-type" : 21,
            "kind" : "expression",
            "target" : {
              "go-type" : 19,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "_b",
                "variable" : 17
              }
            },
            "type" : "cast"
          }, {
            "arguments" : [ {
              "go-type" : 5,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "ldb",
                "variable" : 10
              }
            } ],
            "ellipsis" : false,
            "function" : {
              "go-type" : -1,
              "kind" : "expression",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 2,
                "value" : "C"
              },
              "type" : "identifier",
              "value" : {
                "ident-kind" : "NoKind",
                "kind" : "ident",
                "value" : "int"
              }
            },
            "go-type" : -1,
            "kind" : "expression",
            "type" : "call"
          }, {
            "coerced-to" : {
              "go-type" : 21,
              "kind" : "type",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 3,
                "value" : "unsafe"
              },
              "type" : "identifier",
              "value" : {
                "go-type" : 21,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "Pointer"
              }
            },
            "go-type" : 21,
            "kind" : "expression",
            "target" : {
              "go-type" : 19,
              "kind" : "expression",
              "operator" : "&",
              "target" : {
                "go-type" : 6,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "beta",
                  "variable" : 11
                }
              },
              "type" : "unary"
            },
            "type" : "cast"
          }, {
            "coerced-to" : {
              "go-type" : 21,
              "kind" : "type",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 3,
                "value" : "unsafe"
              },
              "type" : "identifier",
              "value" : {
                "go-type" : 21,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "Pointer"
              }
            },
            "go-type" : 21,
            "kind" : "expression",
            "target" : {
              "go-type" : 19,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "_c",
                "variable" : 18
              }
            },
            "type" : "cast"
          }, {
            "arguments" : [ {
              "go-type" : 5,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "ldc",
                "variable" : 13
              }
            } ],
            "ellipsis" : false,
            "function" : {
              "go-type" : -1,
              "kind" : "expression",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 2,
                "value" : "C"
              },
              "type" : "identifier",
              "value" : {
                "ident-kind" : "NoKind",
                "kind" : "ident",
                "value" : "int"
              }
            },
            "go-type" : -1,
            "kind" : "expression",
            "type" : "call"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : -1,
            "kind" : "expression",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 2,
              "value" : "C"
            },
            "type" : "identifier",
            "value" : {
              "ident-kind" : "NoKind",
              "kind" : "ident",
              "value" : "cblas_csyr2k"
            }
          },
          "go-type" : -1,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 6946,
      "code" : "C.cblas_csyr2k(C.enum_CBLAS_ORDER(rowMajor), C.enum_CBLAS_UPLO(ul), C.enum_CBLAS_TRANSPOSE(t), C.int(n), C.int(k), unsafe.Pointer(&alpha), unsafe.Pointer(_a), C.int(lda), unsafe.Pointer(_b), C.int(ldb), unsafe.Pointer(&beta), unsafe.Pointer(_c), C.int(ldc))",
      "entry" : false,
      "use-vars" : [ 17, 11, 3, 16, 8, 2, 18, 13, 5, 10, 4, 6 ]
    } ],
    "code" : "// Csyr2k performs one of the symmetric rank-2k operations\n//  C = alpha*A*Bᵀ + alpha*B*Aᵀ + beta*C  if trans == blas.NoTrans\n//  C = alpha*Aᵀ*B + alpha*Bᵀ*A + beta*C  if trans == blas.Trans\n// where alpha and beta are scalars, C is an n×n symmetric matrix and A and B\n// are n×k matrices in the first case and k×n matrices in the second case.\n//\n// Complex64 implementations are autogenerated and not directly tested.\nfunc (Implementation) Csyr2k(ul blas.Uplo, t blas.Transpose, n, k int, alpha complex64, a []complex64, lda int, b []complex64, ldb int, beta complex64, c []complex64, ldc int) {\n\n\tswitch t {\n\tcase blas.NoTrans:\n\t\tt = C.CblasNoTrans\n\tcase blas.Trans:\n\t\tt = C.CblasTrans\n\tdefault:\n\t\tpanic(badTranspose)\n\t}\n\tswitch ul {\n\tcase blas.Upper:\n\t\tul = C.CblasUpper\n\tcase blas.Lower:\n\t\tul = C.CblasLower\n\tdefault:\n\t\tpanic(badUplo)\n\t}\n\tif n < 0 {\n\t\tpanic(nLT0)\n\t}\n\tif k < 0 {\n\t\tpanic(kLT0)\n\t}\n\tvar row, col int\n\tif t == C.CblasNoTrans {\n\t\trow, col = n, k\n\t} else {\n\t\trow, col = k, n\n\t}\n\tif lda < max(1, col) {\n\t\tpanic(badLdA)\n\t}\n\tif ldb < max(1, col) {\n\t\tpanic(badLdB)\n\t}\n\tif ldc < max(1, n) {\n\t\tpanic(badLdC)\n\t}\n\n\tif n == 0 {\n\t\treturn\n\t}\n\n\tif len(a) < lda*(row-1)+col {\n\t\tpanic(shortA)\n\t}\n\tif len(b) < ldb*(row-1)+col {\n\t\tpanic(shortB)\n\t}\n\tif len(c) < ldc*(n-1)+n {\n\t\tpanic(shortC)\n\t}\n\tvar _a *complex64\n\tif len(a) > 0 {\n\t\t_a = &a[0]\n\t}\n\tvar _b *complex64\n\tif len(b) > 0 {\n\t\t_b = &b[0]\n\t}\n\tvar _c *complex64\n\tif len(c) > 0 {\n\t\t_c = &c[0]\n\t}\n\tC.cblas_csyr2k(C.enum_CBLAS_ORDER(rowMajor), C.enum_CBLAS_UPLO(ul), C.enum_CBLAS_TRANSPOSE(t), C.int(n), C.int(k), unsafe.Pointer(&alpha), unsafe.Pointer(_a), C.int(lda), unsafe.Pointer(_b), C.int(ldb), unsafe.Pointer(&beta), unsafe.Pointer(_c), C.int(ldc))\n}",
    "defines" : [ 0 ],
    "functions" : [ {
      "name" : "Csyr2k",
      "package" : 0,
      "type" : 0,
      "exported" : true
    }, {
      "name" : "max",
      "package" : 0,
      "type" : 14,
      "exported" : false
    } ],
    "line-end" : 6947,
    "line-start" : 6878,
    "names" : [ "Csyr2k" ],
    "package" : 0,
    "packages" : [ {
      "name" : "netlib",
      "path" : "gonum.org/v1/netlib/blas/netlib"
    }, {
      "name" : "blas",
      "path" : "gonum.org/v1/gonum/blas"
    }, {
      "name" : "C",
      "path" : "C"
    }, {
      "name" : "unsafe",
      "path" : "unsafe"
    } ],
    "params" : [ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13 ],
    "receivers" : [ 1 ],
    "results" : [ ],
    "type" : "function",
    "types" : [ {
      "name" : "func(ul gonum.org/v1/gonum/blas.Uplo, t gonum.org/v1/gonum/blas.Transpose, n int, k int, alpha complex64, a []complex64, lda int, b []complex64, ldb int, beta complex64, c []complex64, ldc int)",
      "params" : 1,
      "recv" : 0,
      "results" : 8,
      "type" : "Signature",
      "underlying" : 0,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "ul",
        "type" : 2
      }, {
        "name" : "t",
        "type" : 4
      }, {
        "name" : "n",
        "type" : 5
      }, {
        "name" : "k",
        "type" : 5
      }, {
        "name" : "alpha",
        "type" : 6
      }, {
        "name" : "a",
        "type" : 7
      }, {
        "name" : "lda",
        "type" : 5
      }, {
        "name" : "b",
        "type" : 7
      }, {
        "name" : "ldb",
        "type" : 5
      }, {
        "name" : "beta",
        "type" : 6
      }, {
        "name" : "c",
        "type" : 7
      }, {
        "name" : "ldc",
        "type" : 5
      } ],
      "name" : "(ul gonum.org/v1/gonum/blas.Uplo, t gonum.org/v1/gonum/blas.Transpose, n int, k int, alpha complex64, a []complex64, lda int, b []complex64, ldb int, beta complex64, c []complex64, ldc int)",
      "type" : "Tuple",
      "underlying" : 1
    }, {
      "local-name" : "Uplo",
      "name" : "gonum.org/v1/gonum/blas.Uplo",
      "package" : 1,
      "type" : "Named",
      "underlying" : 3
    }, {
      "name" : "byte",
      "type" : "Basic",
      "underlying" : 3
    }, {
      "local-name" : "Transpose",
      "name" : "gonum.org/v1/gonum/blas.Transpose",
      "package" : 1,
      "type" : "Named",
      "underlying" : 3
    }, {
      "name" : "int",
      "type" : "Basic",
      "underlying" : 5
    }, {
      "name" : "complex64",
      "type" : "Basic",
      "underlying" : 6
    }, {
      "elem" : 6,
      "name" : "[]complex64",
      "type" : "Slice",
      "underlying" : 7
    }, {
      "fields" : [ ],
      "name" : "()",
      "type" : "Tuple",
      "underlying" : 8
    }, {
      "name" : "func(interface{})",
      "params" : 10,
      "recv" : -1,
      "results" : 8,
      "type" : "Signature",
      "underlying" : 9,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 11
      } ],
      "name" : "(interface{})",
      "type" : "Tuple",
      "underlying" : 10
    }, {
      "methods" : [ ],
      "name" : "interface{}",
      "type" : "Interface",
      "underlying" : 11
    }, {
      "name" : "string",
      "type" : "Basic",
      "underlying" : 12
    }, {
      "name" : "untyped bool",
      "type" : "Basic",
      "underlying" : 13
    }, {
      "name" : "func(a int, b int) int",
      "params" : 15,
      "recv" : -1,
      "results" : 16,
      "type" : "Signature",
      "underlying" : 14,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "a",
        "type" : 5
      }, {
        "name" : "b",
        "type" : 5
      } ],
      "name" : "(a int, b int)",
      "type" : "Tuple",
      "underlying" : 15
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 5
      } ],
      "name" : "(int)",
      "type" : "Tuple",
      "underlying" : 16
    }, {
      "name" : "func([]complex64) int",
      "params" : 18,
      "recv" : -1,
      "results" : 16,
      "type" : "Signature",
      "underlying" : 17,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 7
      } ],
      "name" : "([]complex64)",
      "type" : "Tuple",
      "underlying" : 18
    }, {
      "elem" : 6,
      "name" : "*complex64",
      "type" : "Pointer",
      "underlying" : 19
    }, {
      "local-name" : "order",
      "name" : "gonum.org/v1/netlib/blas/netlib.order",
      "package" : 0,
      "type" : "Named",
      "underlying" : 5
    }, {
      "local-name" : "Pointer",
      "name" : "unsafe.Pointer",
      "package" : 3,
      "type" : "Basic",
      "underlying" : 21
    } ],
    "variables" : [ {
      "name" : "",
      "package" : 0,
      "type" : 0,
      "exported" : false
    }, {
      "name" : "[rec0]",
      "package" : 0,
      "type" : 0,
      "exported" : false
    }, {
      "name" : "ul",
      "package" : 0,
      "type" : 2,
      "exported" : false
    }, {
      "name" : "t",
      "package" : 0,
      "type" : 4,
      "exported" : false
    }, {
      "name" : "n",
      "package" : 0,
      "type" : 5,
      "exported" : false
    }, {
      "name" : "k",
      "package" : 0,
      "type" : 5,
      "exported" : false
    }, {
      "name" : "alpha",
      "package" : 0,
      "type" : 6,
      "exported" : false
    }, {
      "name" : "a",
      "package" : 0,
      "type" : 7,
      "exported" : false
    }, {
      "name" : "lda",
      "package" : 0,
      "type" : 5,
      "exported" : false
    }, {
      "name" : "b",
      "package" : 0,
      "type" : 7,
      "exported" : false
    }, {
      "name" : "ldb",
      "package" : 0,
      "type" : 5,
      "exported" : false
    }, {
      "name" : "beta",
      "package" : 0,
      "type" : 6,
      "exported" : false
    }, {
      "name" : "c",
      "package" : 0,
      "type" : 7,
      "exported" : false
    }, {
      "name" : "ldc",
      "package" : 0,
      "type" : 5,
      "exported" : false
    }, {
      "name" : "row",
      "package" : 0,
      "type" : 5,
      "exported" : false
    }, {
      "name" : "col",
      "package" : 0,
      "type" : 5,
      "exported" : false
    }, {
      "name" : "_a",
      "package" : 0,
      "type" : 19,
      "exported" : false
    }, {
      "name" : "_b",
      "package" : 0,
      "type" : 19,
      "exported" : false
    }, {
      "name" : "_c",
      "package" : 0,
      "type" : 19,
      "exported" : false
    } ]
  },
  "go-version" : "1.14.3"
}