{
  "usage" : {
    "file" : "prog.go",
    "label1" : "delegate",
    "label2" : "ffi",
    "line" : "315",
    "module" : "github.com/cilium/ebpf",
    "pkg" : "github.com/cilium/ebpf",
    "project" : "kubernetes/kubernetes",
    "snippet" : "_, err = bpfCall(_ProgTestRun, unsafe.Pointer(&attr), unsafe.Sizeof(attr))",
    "version" : "v0.0.0-20191113100448-d9fb101ca1fb"
  },
  "cfg" : {
    "blocks" : [ {
      "update-vars" : [ ],
      "successors" : [ 2 ],
      "in-vars" : [ ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[entry]",
      "entry" : true,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ ],
      "in-vars" : [ ],
      "exit" : true,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[exit]",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ 0, 14, 7, 10, 6, 12 ],
      "line-start" : 286,
      "ast" : {
        "kind" : "statement",
        "target" : {
          "kind" : "decl",
          "specs" : [ {
            "comments" : [ ],
            "declared-type" : null,
            "kind" : "spec",
            "names" : [ {
              "ident-kind" : "NoKind",
              "kind" : "ident",
              "value" : "noProgTestRun"
            } ],
            "type" : "var",
            "values" : [ {
              "declared" : {
                "go-type" : 0,
                "kind" : "type",
                "type" : "identifier",
                "value" : {
                  "go-type" : 0,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "featureTest"
                }
              },
              "go-type" : 0,
              "kind" : "literal",
              "type" : "composite",
              "values" : [ {
                "go-type" : -1,
                "key" : {
                  "go-type" : -1,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "Fn",
                    "variable" : 1
                  }
                },
                "kind" : "expression",
                "type" : "key-value",
                "value" : {
                  "body" : [ {
                    "kind" : "statement",
                    "left" : [ {
                      "go-type" : -1,
                      "kind" : "expression",
                      "type" : "identifier",
                      "value" : {
                        "ident-kind" : "NoKind",
                        "kind" : "ident",
                        "value" : "prog"
                      }
                    }, {
                      "go-type" : -1,
                      "kind" : "expression",
                      "type" : "identifier",
                      "value" : {
                        "ident-kind" : "NoKind",
                        "kind" : "ident",
                        "value" : "err"
                      }
                    } ],
                    "right" : [ {
                      "arguments" : [ {
                        "go-type" : 30,
                        "kind" : "expression",
                        "operator" : "&",
                        "target" : {
                          "declared" : {
                            "go-type" : 31,
                            "kind" : "type",
                            "type" : "identifier",
                            "value" : {
                              "go-type" : 31,
                              "ident-kind" : "TypeName",
                              "kind" : "ident",
                              "value" : "ProgramSpec"
                            }
                          },
                          "go-type" : 31,
                          "kind" : "literal",
                          "type" : "composite",
                          "values" : [ {
                            "go-type" : -1,
                            "key" : {
                              "go-type" : -1,
                              "kind" : "expression",
                              "type" : "identifier",
                              "value" : {
                                "ident-kind" : "Var",
                                "kind" : "ident",
                                "value" : "Type",
                                "variable" : 3
                              }
                            },
                            "kind" : "expression",
                            "type" : "key-value",
                            "value" : {
                              "go-type" : 23,
                              "kind" : "constant",
                              "value" : {
                                "type" : "INT",
                                "value" : "1"
                              }
                            }
                          }, {
                            "go-type" : -1,
                            "key" : {
                              "go-type" : -1,
                              "kind" : "expression",
                              "type" : "identifier",
                              "value" : {
                                "ident-kind" : "Var",
                                "kind" : "ident",
                                "value" : "Instructions",
                                "variable" : 4
                              }
                            },
                            "kind" : "expression",
                            "type" : "key-value",
                            "value" : {
                              "declared" : {
                                "go-type" : 34,
                                "kind" : "type",
                                "qualifier" : {
                                  "ident-kind" : "PkgName",
                                  "kind" : "ident",
                                  "package" : 2,
                                  "value" : "asm"
                                },
                                "type" : "identifier",
                                "value" : {
                                  "go-type" : 34,
                                  "ident-kind" : "TypeName",
                                  "kind" : "ident",
                                  "value" : "Instructions"
                                }
                              },
                              "go-type" : 34,
                              "kind" : "literal",
                              "type" : "composite",
                              "values" : [ {
                                "arguments" : [ {
                                  "go-type" : 40,
                                  "kind" : "constant",
                                  "value" : {
                                    "type" : "INT",
                                    "value" : "0"
                                  }
                                }, {
                                  "go-type" : 20,
                                  "kind" : "constant",
                                  "value" : {
                                    "type" : "INT",
                                    "value" : "0"
                                  }
                                }, {
                                  "go-type" : 44,
                                  "kind" : "constant",
                                  "value" : {
                                    "type" : "INT",
                                    "value" : "24"
                                  }
                                } ],
                                "ellipsis" : false,
                                "function" : {
                                  "go-type" : 42,
                                  "kind" : "expression",
                                  "qualifier" : {
                                    "ident-kind" : "PkgName",
                                    "kind" : "ident",
                                    "package" : 2,
                                    "value" : "asm"
                                  },
                                  "type" : "identifier",
                                  "value" : {
                                    "ident-kind" : "Func",
                                    "kind" : "ident",
                                    "value" : "LoadImm"
                                  }
                                },
                                "go-type" : 36,
                                "kind" : "expression",
                                "type" : "call"
                              }, {
                                "arguments" : [ ],
                                "ellipsis" : false,
                                "function" : {
                                  "go-type" : 46,
                                  "kind" : "expression",
                                  "qualifier" : {
                                    "ident-kind" : "PkgName",
                                    "kind" : "ident",
                                    "package" : 2,
                                    "value" : "asm"
                                  },
                                  "type" : "identifier",
                                  "value" : {
                                    "ident-kind" : "Func",
                                    "kind" : "ident",
                                    "value" : "Return"
                                  }
                                },
                                "go-type" : 36,
                                "kind" : "expression",
                                "type" : "call"
                              } ]
                            }
                          }, {
                            "go-type" : -1,
                            "key" : {
                              "go-type" : -1,
                              "kind" : "expression",
                              "type" : "identifier",
                              "value" : {
                                "ident-kind" : "Var",
                                "kind" : "ident",
                                "value" : "License",
                                "variable" : 5
                              }
                            },
                            "kind" : "expression",
                            "type" : "key-value",
                            "value" : {
                              "go-type" : 16,
                              "kind" : "constant",
                              "value" : {
                                "type" : "STRING",
                                "value" : "MIT"
                              }
                            }
                          } ]
                        },
                        "type" : "unary"
                      } ],
                      "ellipsis" : false,
                      "function" : {
                        "go-type" : 28,
                        "kind" : "expression",
                        "type" : "identifier",
                        "value" : {
                          "ident-kind" : "Func",
                          "kind" : "ident",
                          "value" : "NewProgram"
                        }
                      },
                      "go-type" : 12,
                      "kind" : "expression",
                      "type" : "call"
                    } ],
                    "type" : "define"
                  }, {
                    "body" : [ {
                      "kind" : "statement",
                      "type" : "return",
                      "values" : [ {
                        "go-type" : 5,
                        "kind" : "constant",
                        "value" : {
                          "type" : "BOOL",
                          "value" : "false"
                        }
                      } ]
                    } ],
                    "condition" : {
                      "go-type" : 47,
                      "kind" : "expression",
                      "left" : {
                        "go-type" : 24,
                        "kind" : "expression",
                        "type" : "identifier",
                        "value" : {
                          "ident-kind" : "Var",
                          "kind" : "ident",
                          "value" : "err",
                          "variable" : 6
                        }
                      },
                      "operator" : "!=",
                      "right" : {
                        "go-type" : 48,
                        "kind" : "expression",
                        "type" : "identifier",
                        "value" : {
                          "ident-kind" : "Nil",
                          "kind" : "ident",
                          "value" : "nil"
                        }
                      },
                      "type" : "binary"
                    },
                    "else" : null,
                    "init" : null,
                    "kind" : "statement",
                    "type" : "if"
                  }, {
                    "kind" : "statement",
                    "target" : {
                      "arguments" : [ ],
                      "ellipsis" : false,
                      "function" : {
                        "field" : {
                          "ident-kind" : "Func",
                          "kind" : "ident",
                          "value" : "Close"
                        },
                        "go-type" : 49,
                        "kind" : "expression",
                        "target" : {
                          "go-type" : 13,
                          "kind" : "expression",
                          "type" : "identifier",
                          "value" : {
                            "ident-kind" : "Var",
                            "kind" : "ident",
                            "value" : "prog",
                            "variable" : 7
                          }
                        },
                        "type" : "selector"
                      },
                      "go-type" : 24,
                      "kind" : "expression",
                      "type" : "call"
                    },
                    "type" : "defer"
                  }, {
                    "kind" : "statement",
                    "left" : [ {
                      "go-type" : -1,
                      "kind" : "expression",
                      "type" : "identifier",
                      "value" : {
                        "ident-kind" : "NoKind",
                        "kind" : "ident",
                        "value" : "fd"
                      }
                    }, {
                      "go-type" : -1,
                      "kind" : "expression",
                      "type" : "identifier",
                      "value" : {
                        "ident-kind" : "Var",
                        "kind" : "ident",
                        "value" : "err",
                        "variable" : 6
                      }
                    } ],
                    "right" : [ {
                      "arguments" : [ ],
                      "ellipsis" : false,
                      "function" : {
                        "field" : {
                          "ident-kind" : "Func",
                          "kind" : "ident",
                          "value" : "value"
                        },
                        "go-type" : 52,
                        "kind" : "expression",
                        "target" : {
                          "field" : {
                            "ident-kind" : "Var",
                            "kind" : "ident",
                            "value" : "fd",
                            "variable" : 8
                          },
                          "go-type" : 17,
                          "kind" : "expression",
                          "target" : {
                            "go-type" : 13,
                            "kind" : "expression",
                            "type" : "identifier",
                            "value" : {
                              "ident-kind" : "Var",
                              "kind" : "ident",
                              "value" : "prog",
                              "variable" : 7
                            }
                          },
                          "type" : "selector"
                        },
                        "type" : "selector"
                      },
                      "go-type" : 51,
                      "kind" : "expression",
                      "type" : "call"
                    } ],
                    "type" : "define"
                  }, {
                    "body" : [ {
                      "kind" : "statement",
                      "type" : "return",
                      "values" : [ {
                        "go-type" : 5,
                        "kind" : "constant",
                        "value" : {
                          "type" : "BOOL",
                          "value" : "false"
                        }
                      } ]
                    } ],
                    "condition" : {
                      "go-type" : 47,
                      "kind" : "expression",
                      "left" : {
                        "go-type" : 24,
                        "kind" : "expression",
                        "type" : "identifier",
                        "value" : {
                          "ident-kind" : "Var",
                          "kind" : "ident",
                          "value" : "err",
                          "variable" : 6
                        }
                      },
                      "operator" : "!=",
                      "right" : {
                        "go-type" : 48,
                        "kind" : "expression",
                        "type" : "identifier",
                        "value" : {
                          "ident-kind" : "Nil",
                          "kind" : "ident",
                          "value" : "nil"
                        }
                      },
                      "type" : "binary"
                    },
                    "else" : null,
                    "init" : null,
                    "kind" : "statement",
                    "type" : "if"
                  }, {
                    "kind" : "statement",
                    "left" : [ {
                      "go-type" : -1,
                      "kind" : "expression",
                      "type" : "identifier",
                      "value" : {
                        "ident-kind" : "NoKind",
                        "kind" : "ident",
                        "value" : "in"
                      }
                    } ],
                    "right" : [ {
                      "argument" : {
                        "element" : {
                          "go-type" : 54,
                          "kind" : "type",
                          "type" : "identifier",
                          "value" : {
                            "go-type" : 54,
                            "ident-kind" : "TypeName",
                            "kind" : "ident",
                            "value" : "byte"
                          }
                        },
                        "go-type" : 53,
                        "kind" : "type",
                        "type" : "slice"
                      },
                      "go-type" : 53,
                      "kind" : "expression",
                      "rest" : [ {
                        "go-type" : 55,
                        "kind" : "constant",
                        "value" : {
                          "type" : "INT",
                          "value" : "14"
                        }
                      } ],
                      "type" : "make"
                    } ],
                    "type" : "define"
                  }, {
                    "kind" : "statement",
                    "left" : [ {
                      "go-type" : -1,
                      "kind" : "expression",
                      "type" : "identifier",
                      "value" : {
                        "ident-kind" : "NoKind",
                        "kind" : "ident",
                        "value" : "attr"
                      }
                    } ],
                    "right" : [ {
                      "declared" : {
                        "go-type" : 56,
                        "kind" : "type",
                        "type" : "identifier",
                        "value" : {
                          "go-type" : 56,
                          "ident-kind" : "TypeName",
                          "kind" : "ident",
                          "value" : "bpfProgTestRunAttr"
                        }
                      },
                      "go-type" : 56,
                      "kind" : "literal",
                      "type" : "composite",
                      "values" : [ {
                        "go-type" : -1,
                        "key" : {
                          "go-type" : -1,
                          "kind" : "expression",
                          "type" : "identifier",
                          "value" : {
                            "ident-kind" : "Var",
                            "kind" : "ident",
                            "value" : "fd",
                            "variable" : 9
                          }
                        },
                        "kind" : "expression",
                        "type" : "key-value",
                        "value" : {
                          "go-type" : 8,
                          "kind" : "expression",
                          "type" : "identifier",
                          "value" : {
                            "ident-kind" : "Var",
                            "kind" : "ident",
                            "value" : "fd",
                            "variable" : 10
                          }
                        }
                      }, {
                        "go-type" : -1,
                        "key" : {
                          "go-type" : -1,
                          "kind" : "expression",
                          "type" : "identifier",
                          "value" : {
                            "ident-kind" : "Var",
                            "kind" : "ident",
                            "value" : "dataSizeIn",
                            "variable" : 11
                          }
                        },
                        "kind" : "expression",
                        "type" : "key-value",
                        "value" : {
                          "coerced-to" : {
                            "go-type" : 8,
                            "kind" : "type",
                            "type" : "identifier",
                            "value" : {
                              "go-type" : 8,
                              "ident-kind" : "TypeName",
                              "kind" : "ident",
                              "value" : "uint32"
                            }
                          },
                          "go-type" : 8,
                          "kind" : "expression",
                          "target" : {
                            "arguments" : [ {
                              "go-type" : 53,
                              "kind" : "expression",
                              "type" : "identifier",
                              "value" : {
                                "ident-kind" : "Var",
                                "kind" : "ident",
                                "value" : "in",
                                "variable" : 12
                              }
                            } ],
                            "ellipsis" : false,
                            "function" : {
                              "go-type" : 61,
                              "kind" : "expression",
                              "type" : "identifier",
                              "value" : {
                                "ident-kind" : "Builtin",
                                "kind" : "ident",
                                "value" : "len"
                              }
                            },
                            "go-type" : 55,
                            "kind" : "expression",
                            "type" : "call"
                          },
                          "type" : "cast"
                        }
                      }, {
                        "go-type" : -1,
                        "key" : {
                          "go-type" : -1,
                          "kind" : "expression",
                          "type" : "identifier",
                          "value" : {
                            "ident-kind" : "Var",
                            "kind" : "ident",
                            "value" : "dataIn",
                            "variable" : 13
                          }
                        },
                        "kind" : "expression",
                        "type" : "key-value",
                        "value" : {
                          "arguments" : [ {
                            "coerced-to" : {
                              "go-type" : 60,
                              "kind" : "type",
                              "qualifier" : {
                                "ident-kind" : "PkgName",
                                "kind" : "ident",
                                "package" : 3,
                                "value" : "unsafe"
                              },
                              "type" : "identifier",
                              "value" : {
                                "go-type" : 60,
                                "ident-kind" : "TypeName",
                                "kind" : "ident",
                                "value" : "Pointer"
                              }
                            },
                            "go-type" : 60,
                            "kind" : "expression",
                            "target" : {
                              "go-type" : 67,
                              "kind" : "expression",
                              "operator" : "&",
                              "target" : {
                                "go-type" : 54,
                                "index" : {
                                  "go-type" : 55,
                                  "kind" : "constant",
                                  "value" : {
                                    "type" : "INT",
                                    "value" : "0"
                                  }
                                },
                                "kind" : "expression",
                                "target" : {
                                  "go-type" : 53,
                                  "kind" : "expression",
                                  "type" : "identifier",
                                  "value" : {
                                    "ident-kind" : "Var",
                                    "kind" : "ident",
                                    "value" : "in",
                                    "variable" : 12
                                  }
                                },
                                "type" : "index"
                              },
                              "type" : "unary"
                            },
                            "type" : "cast"
                          } ],
                          "ellipsis" : false,
                          "function" : {
                            "go-type" : 64,
                            "kind" : "expression",
                            "type" : "identifier",
                            "value" : {
                              "ident-kind" : "Func",
                              "kind" : "ident",
                              "value" : "newPtr"
                            }
                          },
                          "go-type" : 58,
                          "kind" : "expression",
                          "type" : "call"
                        }
                      } ]
                    } ],
                    "type" : "define"
                  }, {
                    "kind" : "statement",
                    "left" : [ {
                      "go-type" : -1,
                      "kind" : "expression",
                      "type" : "identifier",
                      "value" : {
                        "ident-kind" : "NoKind",
                        "kind" : "ident",
                        "value" : "_"
                      }
                    }, {
                      "go-type" : 24,
                      "kind" : "expression",
                      "type" : "identifier",
                      "value" : {
                        "ident-kind" : "Var",
                        "kind" : "ident",
                        "value" : "err",
                        "variable" : 6
                      }
                    } ],
                    "right" : [ {
                      "arguments" : [ {
                        "go-type" : 55,
                        "kind" : "constant",
                        "value" : {
                          "type" : "INT",
                          "value" : "10"
                        }
                      }, {
                        "coerced-to" : {
                          "go-type" : 60,
                          "kind" : "type",
                          "qualifier" : {
                            "ident-kind" : "PkgName",
                            "kind" : "ident",
                            "package" : 3,
                            "value" : "unsafe"
                          },
                          "type" : "identifier",
                          "value" : {
                            "go-type" : 60,
                            "ident-kind" : "TypeName",
                            "kind" : "ident",
                            "value" : "Pointer"
                          }
                        },
                        "go-type" : 60,
                        "kind" : "expression",
                        "target" : {
                          "go-type" : 72,
                          "kind" : "expression",
                          "operator" : "&",
                          "target" : {
                            "go-type" : 56,
                            "kind" : "expression",
                            "type" : "identifier",
                            "value" : {
                              "ident-kind" : "Var",
                              "kind" : "ident",
                              "value" : "attr",
                              "variable" : 14
                            }
                          },
                          "type" : "unary"
                        },
                        "type" : "cast"
                      }, {
                        "go-type" : 69,
                        "kind" : "constant",
                        "value" : {
                          "type" : "INT",
                          "value" : "40"
                        }
                      } ],
                      "ellipsis" : false,
                      "function" : {
                        "go-type" : 70,
                        "kind" : "expression",
                        "type" : "identifier",
                        "value" : {
                          "ident-kind" : "Func",
                          "kind" : "ident",
                          "value" : "bpfCall"
                        }
                      },
                      "go-type" : 68,
                      "kind" : "expression",
                      "type" : "call"
                    } ],
                    "type" : "assign"
                  }, {
                    "kind" : "statement",
                    "type" : "return",
                    "values" : [ {
                      "go-type" : 5,
                      "kind" : "expression",
                      "left" : {
                        "arguments" : [ {
                          "go-type" : 24,
                          "kind" : "expression",
                          "type" : "identifier",
                          "value" : {
                            "ident-kind" : "Var",
                            "kind" : "ident",
                            "value" : "err",
                            "variable" : 6
                          }
                        } ],
                        "ellipsis" : false,
                        "function" : {
                          "go-type" : 73,
                          "kind" : "expression",
                          "qualifier" : {
                            "ident-kind" : "PkgName",
                            "kind" : "ident",
                            "package" : 4,
                            "value" : "errors"
                          },
                          "type" : "identifier",
                          "value" : {
                            "ident-kind" : "Func",
                            "kind" : "ident",
                            "value" : "Cause"
                          }
                        },
                        "go-type" : 24,
                        "kind" : "expression",
                        "type" : "call"
                      },
                      "operator" : "==",
                      "right" : {
                        "go-type" : 75,
                        "kind" : "constant",
                        "value" : {
                          "type" : "INT",
                          "value" : "22"
                        }
                      },
                      "type" : "binary"
                    } ]
                  } ],
                  "go-type" : 2,
                  "kind" : "literal",
                  "params" : [ ],
                  "results" : [ {
                    "declared-type" : {
                      "go-type" : 5,
                      "kind" : "type",
                      "type" : "identifier",
                      "value" : {
                        "go-type" : 5,
                        "ident-kind" : "TypeName",
                        "kind" : "ident",
                        "value" : "bool"
                      }
                    },
                    "kind" : "field",
                    "names" : [ ],
                    "tag" : null
                  } ],
                  "type" : "function",
                  "variadic" : null
                }
              } ]
            } ]
          } ],
          "type" : "var"
        },
        "type" : "declaration"
      },
      "assign-vars" : [ ],
      "line-end" : 318,
      "code" : "var noProgTestRun = featureTest{\n\tFn: func() bool {\n\t\tprog, err := NewProgram(&ProgramSpec{\n\t\t\tType: SocketFilter,\n\t\t\tInstructions: asm.Instructions{\n\t\t\t\tasm.LoadImm(asm.R0, 0, asm.DWord),\n\t\t\t\tasm.Return(),\n\t\t\t},\n\t\t\tLicense: \"MIT\",\n\t\t})\n\t\tif err != nil {\n\n\t\t\treturn false\n\t\t}\n\t\tdefer prog.Close()\n\n\t\tfd, err := prog.fd.value()\n\t\tif err != nil {\n\t\t\treturn false\n\t\t}\n\n\t\tin := make([]byte, 14)\n\t\tattr := bpfProgTestRunAttr{\n\t\t\tfd:         fd,\n\t\t\tdataSizeIn: uint32(len(in)),\n\t\t\tdataIn:     newPtr(unsafe.Pointer(&in[0])),\n\t\t}\n\n\t\t_, err = bpfCall(_ProgTestRun, unsafe.Pointer(&attr), unsafe.Sizeof(attr))\n\t\treturn errors.Cause(err) == unix.EINVAL\n\t},\n}",
      "entry" : false,
      "use-vars" : [ ]
    } ],
    "code" : "var noProgTestRun = featureTest{\n\tFn: func() bool {\n\t\tprog, err := NewProgram(&ProgramSpec{\n\t\t\tType: SocketFilter,\n\t\t\tInstructions: asm.Instructions{\n\t\t\t\tasm.LoadImm(asm.R0, 0, asm.DWord),\n\t\t\t\tasm.Return(),\n\t\t\t},\n\t\t\tLicense: \"MIT\",\n\t\t})\n\t\tif err != nil {\n\n\t\t\treturn false\n\t\t}\n\t\tdefer prog.Close()\n\n\t\tfd, err := prog.fd.value()\n\t\tif err != nil {\n\t\t\treturn false\n\t\t}\n\n\t\tin := make([]byte, 14)\n\t\tattr := bpfProgTestRunAttr{\n\t\t\tfd:         fd,\n\t\t\tdataSizeIn: uint32(len(in)),\n\t\t\tdataIn:     newPtr(unsafe.Pointer(&in[0])),\n\t\t}\n\n\t\t_, err = bpfCall(_ProgTestRun, unsafe.Pointer(&attr), unsafe.Sizeof(attr))\n\t\treturn errors.Cause(err) == unix.EINVAL\n\t},\n}",
    "defines" : [ 0 ],
    "functions" : [ {
      "name" : "NewProgram",
      "package" : 0,
      "type" : 28,
      "exported" : true
    }, {
      "name" : "LoadImm",
      "package" : 2,
      "type" : 42,
      "exported" : true
    }, {
      "name" : "Return",
      "package" : 2,
      "type" : 46,
      "exported" : true
    }, {
      "name" : "Close",
      "package" : 0,
      "type" : 49,
      "exported" : true
    }, {
      "name" : "value",
      "package" : 0,
      "type" : 52,
      "exported" : false
    }, {
      "name" : "newPtr",
      "package" : 0,
      "type" : 64,
      "exported" : false
    }, {
      "name" : "bpfCall",
      "package" : 0,
      "type" : 70,
      "exported" : false
    }, {
      "name" : "Cause",
      "package" : 4,
      "type" : 73,
      "exported" : true
    } ],
    "line-end" : 318,
    "line-start" : 286,
    "names" : [ "noProgTestRun" ],
    "package" : 0,
    "packages" : [ {
      "name" : "ebpf",
      "path" : "github.com/cilium/ebpf"
    }, {
      "name" : "sync",
      "path" : "sync"
    }, {
      "name" : "asm",
      "path" : "github.com/cilium/ebpf/asm"
    }, {
      "name" : "unsafe",
      "path" : "unsafe"
    }, {
      "name" : "errors",
      "path" : "github.com/pkg/errors"
    }, {
      "name" : "syscall",
      "path" : "syscall"
    } ],
    "params" : [ ],
    "receivers" : [ ],
    "results" : [ ],
    "type" : "variable",
    "types" : [ {
      "local-name" : "featureTest",
      "name" : "github.com/cilium/ebpf.featureTest",
      "package" : 0,
      "type" : "Named",
      "underlying" : 1
    }, {
      "fields" : [ {
        "name" : "Fn",
        "type" : 2
      }, {
        "name" : "once",
        "type" : 6
      }, {
        "name" : "result",
        "type" : 5
      } ],
      "name" : "struct{Fn func() bool; once sync.Once; result bool}",
      "type" : "Struct",
      "underlying" : 1
    }, {
      "name" : "func() bool",
      "params" : 3,
      "recv" : -1,
      "results" : 4,
      "type" : "Signature",
      "underlying" : 2,
      "variadic" : false
    }, {
      "fields" : [ ],
      "name" : "()",
      "type" : "Tuple",
      "underlying" : 3
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 5
      } ],
      "name" : "(bool)",
      "type" : "Tuple",
      "underlying" : 4
    }, {
      "name" : "bool",
      "type" : "Basic",
      "underlying" : 5
    }, {
      "local-name" : "Once",
      "name" : "sync.Once",
      "package" : 1,
      "type" : "Named",
      "underlying" : 7
    }, {
      "fields" : [ {
        "name" : "done",
        "type" : 8
      }, {
        "name" : "m",
        "type" : 9
      } ],
      "name" : "struct{done uint32; m sync.Mutex}",
      "type" : "Struct",
      "underlying" : 7
    }, {
      "name" : "uint32",
      "type" : "Basic",
      "underlying" : 8
    }, {
      "local-name" : "Mutex",
      "name" : "sync.Mutex",
      "package" : 1,
      "type" : "Named",
      "underlying" : 10
    }, {
      "fields" : [ {
        "name" : "state",
        "type" : 11
      }, {
        "name" : "sema",
        "type" : 8
      } ],
      "name" : "struct{state int32; sema uint32}",
      "type" : "Struct",
      "underlying" : 10
    }, {
      "name" : "int32",
      "type" : "Basic",
      "underlying" : 11
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 13
      }, {
        "name" : "",
        "type" : 24
      } ],
      "name" : "(*github.com/cilium/ebpf.Program, error)",
      "type" : "Tuple",
      "underlying" : 12
    }, {
      "elem" : 14,
      "name" : "*github.com/cilium/ebpf.Program",
      "type" : "Pointer",
      "underlying" : 13
    }, {
      "local-name" : "Program",
      "name" : "github.com/cilium/ebpf.Program",
      "package" : 0,
      "type" : "Named",
      "underlying" : 15
    }, {
      "fields" : [ {
        "name" : "VerifierLog",
        "type" : 16
      }, {
        "name" : "fd",
        "type" : 17
      }, {
        "name" : "name",
        "type" : 16
      }, {
        "name" : "abi",
        "type" : 21
      } ],
      "name" : "struct{VerifierLog string; fd *github.com/cilium/ebpf.bpfFD; name string; abi github.com/cilium/ebpf.ProgramABI}",
      "type" : "Struct",
      "underlying" : 15
    }, {
      "name" : "string",
      "type" : "Basic",
      "underlying" : 16
    }, {
      "elem" : 18,
      "name" : "*github.com/cilium/ebpf.bpfFD",
      "type" : "Pointer",
      "underlying" : 17
    }, {
      "local-name" : "bpfFD",
      "name" : "github.com/cilium/ebpf.bpfFD",
      "package" : 0,
      "type" : "Named",
      "underlying" : 19
    }, {
      "fields" : [ {
        "name" : "raw",
        "type" : 20
      } ],
      "name" : "struct{raw int64}",
      "type" : "Struct",
      "underlying" : 19
    }, {
      "name" : "int64",
      "type" : "Basic",
      "underlying" : 20
    }, {
      "local-name" : "ProgramABI",
      "name" : "github.com/cilium/ebpf.ProgramABI",
      "package" : 0,
      "type" : "Named",
      "underlying" : 22
    }, {
      "fields" : [ {
        "name" : "Type",
        "type" : 23
      } ],
      "name" : "struct{Type github.com/cilium/ebpf.ProgramType}",
      "type" : "Struct",
      "underlying" : 22
    }, {
      "local-name" : "ProgramType",
      "name" : "github.com/cilium/ebpf.ProgramType",
      "package" : 0,
      "type" : "Named",
      "underlying" : 8
    }, {
      "local-name" : "error",
      "name" : "error",
      "package" : -1,
      "type" : "Named",
      "underlying" : 25
    }, {
      "methods" : [ {
        "name" : "Error",
        "type" : 26
      } ],
      "name" : "interface{Error() string}",
      "type" : "Interface",
      "underlying" : 25
    }, {
      "name" : "func() string",
      "params" : 3,
      "recv" : 2,
      "results" : 27,
      "type" : "Signature",
      "underlying" : 26,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 16
      } ],
      "name" : "(string)",
      "type" : "Tuple",
      "underlying" : 27
    }, {
      "name" : "func(spec *github.com/cilium/ebpf.ProgramSpec) (*github.com/cilium/ebpf.Program, error)",
      "params" : 29,
      "recv" : -1,
      "results" : 12,
      "type" : "Signature",
      "underlying" : 28,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "spec",
        "type" : 30
      } ],
      "name" : "(spec *github.com/cilium/ebpf.ProgramSpec)",
      "type" : "Tuple",
      "underlying" : 29
    }, {
      "elem" : 31,
      "name" : "*github.com/cilium/ebpf.ProgramSpec",
      "type" : "Pointer",
      "underlying" : 30
    }, {
      "local-name" : "ProgramSpec",
      "name" : "github.com/cilium/ebpf.ProgramSpec",
      "package" : 0,
      "type" : "Named",
      "underlying" : 32
    }, {
      "fields" : [ {
        "name" : "Name",
        "type" : 16
      }, {
        "name" : "Type",
        "type" : 23
      }, {
        "name" : "AttachType",
        "type" : 33
      }, {
        "name" : "Instructions",
        "type" : 34
      }, {
        "name" : "License",
        "type" : 16
      }, {
        "name" : "KernelVersion",
        "type" : 8
      } ],
      "name" : "struct{Name string; Type github.com/cilium/ebpf.ProgramType; AttachType github.com/cilium/ebpf.AttachType; Instructions github.com/cilium/ebpf/asm.Instructions; License string; KernelVersion uint32}",
      "type" : "Struct",
      "underlying" : 32
    }, {
      "local-name" : "AttachType",
      "name" : "github.com/cilium/ebpf.AttachType",
      "package" : 0,
      "type" : "Named",
      "underlying" : 8
    }, {
      "local-name" : "Instructions",
      "name" : "github.com/cilium/ebpf/asm.Instructions",
      "package" : 2,
      "type" : "Named",
      "underlying" : 35
    }, {
      "elem" : 36,
      "name" : "[]github.com/cilium/ebpf/asm.Instruction",
      "type" : "Slice",
      "underlying" : 35
    }, {
      "local-name" : "Instruction",
      "name" : "github.com/cilium/ebpf/asm.Instruction",
      "package" : 2,
      "type" : "Named",
      "underlying" : 37
    }, {
      "fields" : [ {
        "name" : "OpCode",
        "type" : 38
      }, {
        "name" : "Dst",
        "type" : 40
      }, {
        "name" : "Src",
        "type" : 40
      }, {
        "name" : "Offset",
        "type" : 41
      }, {
        "name" : "Constant",
        "type" : 20
      }, {
        "name" : "Reference",
        "type" : 16
      }, {
        "name" : "Symbol",
        "type" : 16
      } ],
      "name" : "struct{OpCode github.com/cilium/ebpf/asm.OpCode; Dst github.com/cilium/ebpf/asm.Register; Src github.com/cilium/ebpf/asm.Register; Offset int16; Constant int64; Reference string; Symbol string}",
      "type" : "Struct",
      "underlying" : 37
    }, {
      "local-name" : "OpCode",
      "name" : "github.com/cilium/ebpf/asm.OpCode",
      "package" : 2,
      "type" : "Named",
      "underlying" : 39
    }, {
      "name" : "uint8",
      "type" : "Basic",
      "underlying" : 39
    }, {
      "local-name" : "Register",
      "name" : "github.com/cilium/ebpf/asm.Register",
      "package" : 2,
      "type" : "Named",
      "underlying" : 39
    }, {
      "name" : "int16",
      "type" : "Basic",
      "underlying" : 41
    }, {
      "name" : "func(dst github.com/cilium/ebpf/asm.Register, value int64, size github.com/cilium/ebpf/asm.Size) github.com/cilium/ebpf/asm.Instruction",
      "params" : 43,
      "recv" : -1,
      "results" : 45,
      "type" : "Signature",
      "underlying" : 42,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "dst",
        "type" : 40
      }, {
        "name" : "value",
        "type" : 20
      }, {
        "name" : "size",
        "type" : 44
      } ],
      "name" : "(dst github.com/cilium/ebpf/asm.Register, value int64, size github.com/cilium/ebpf/asm.Size)",
      "type" : "Tuple",
      "underlying" : 43
    }, {
      "local-name" : "Size",
      "name" : "github.com/cilium/ebpf/asm.Size",
      "package" : 2,
      "type" : "Named",
      "underlying" : 39
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 36
      } ],
      "name" : "(github.com/cilium/ebpf/asm.Instruction)",
      "type" : "Tuple",
      "underlying" : 45
    }, {
      "name" : "func() github.com/cilium/ebpf/asm.Instruction",
      "params" : 3,
      "recv" : -1,
      "results" : 45,
      "type" : "Signature",
      "underlying" : 46,
      "variadic" : false
    }, {
      "name" : "untyped bool",
      "type" : "Basic",
      "underlying" : 47
    }, {
      "name" : "untyped nil",
      "type" : "Basic",
      "underlying" : 48
    }, {
      "name" : "func() error",
      "params" : 3,
      "recv" : -1,
      "results" : 50,
      "type" : "Signature",
      "underlying" : 49,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 24
      } ],
      "name" : "(error)",
      "type" : "Tuple",
      "underlying" : 50
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 8
      }, {
        "name" : "",
        "type" : 24
      } ],
      "name" : "(uint32, error)",
      "type" : "Tuple",
      "underlying" : 51
    }, {
      "name" : "func() (uint32, error)",
      "params" : 3,
      "recv" : -1,
      "results" : 51,
      "type" : "Signature",
      "underlying" : 52,
      "variadic" : false
    }, {
      "elem" : 54,
      "name" : "[]byte",
      "type" : "Slice",
      "underlying" : 53
    }, {
      "name" : "byte",
      "type" : "Basic",
      "underlying" : 54
    }, {
      "name" : "int",
      "type" : "Basic",
      "underlying" : 55
    }, {
      "local-name" : "bpfProgTestRunAttr",
      "name" : "github.com/cilium/ebpf.bpfProgTestRunAttr",
      "package" : 0,
      "type" : "Named",
      "underlying" : 57
    }, {
      "fields" : [ {
        "name" : "fd",
        "type" : 8
      }, {
        "name" : "retval",
        "type" : 8
      }, {
        "name" : "dataSizeIn",
        "type" : 8
      }, {
        "name" : "dataSizeOut",
        "type" : 8
      }, {
        "name" : "dataIn",
        "type" : 58
      }, {
        "name" : "dataOut",
        "type" : 58
      }, {
        "name" : "repeat",
        "type" : 8
      }, {
        "name" : "duration",
        "type" : 8
      } ],
      "name" : "struct{fd uint32; retval uint32; dataSizeIn uint32; dataSizeOut uint32; dataIn github.com/cilium/ebpf.syscallPtr; dataOut github.com/cilium/ebpf.syscallPtr; repeat uint32; duration uint32}",
      "type" : "Struct",
      "underlying" : 57
    }, {
      "local-name" : "syscallPtr",
      "name" : "github.com/cilium/ebpf.syscallPtr",
      "package" : 0,
      "type" : "Named",
      "underlying" : 59
    }, {
      "fields" : [ {
        "name" : "ptr",
        "type" : 60
      } ],
      "name" : "struct{ptr unsafe.Pointer}",
      "type" : "Struct",
      "underlying" : 59
    }, {
      "local-name" : "Pointer",
      "name" : "unsafe.Pointer",
      "package" : 3,
      "type" : "Basic",
      "underlying" : 60
    }, {
      "name" : "func([]byte) int",
      "params" : 62,
      "recv" : -1,
      "results" : 63,
      "type" : "Signature",
      "underlying" : 61,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 53
      } ],
      "name" : "([]byte)",
      "type" : "Tuple",
      "underlying" : 62
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 55
      } ],
      "name" : "(int)",
      "type" : "Tuple",
      "underlying" : 63
    }, {
      "name" : "func(ptr unsafe.Pointer) github.com/cilium/ebpf.syscallPtr",
      "params" : 65,
      "recv" : -1,
      "results" : 66,
      "type" : "Signature",
      "underlying" : 64,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "ptr",
        "type" : 60
      } ],
      "name" : "(ptr unsafe.Pointer)",
      "type" : "Tuple",
      "underlying" : 65
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 58
      } ],
      "name" : "(github.com/cilium/ebpf.syscallPtr)",
      "type" : "Tuple",
      "underlying" : 66
    }, {
      "elem" : 54,
      "name" : "*byte",
      "type" : "Pointer",
      "underlying" : 67
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 69
      }, {
        "name" : "",
        "type" : 24
      } ],
      "name" : "(uintptr, error)",
      "type" : "Tuple",
      "underlying" : 68
    }, {
      "name" : "uintptr",
      "type" : "Basic",
      "underlying" : 69
    }, {
      "name" : "func(cmd int, attr unsafe.Pointer, size uintptr) (uintptr, error)",
      "params" : 71,
      "recv" : -1,
      "results" : 68,
      "type" : "Signature",
      "underlying" : 70,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "cmd",
        "type" : 55
      }, {
        "name" : "attr",
        "type" : 60
      }, {
        "name" : "size",
        "type" : 69
      } ],
      "name" : "(cmd int, attr unsafe.Pointer, size uintptr)",
      "type" : "Tuple",
      "underlying" : 71
    }, {
      "elem" : 56,
      "name" : "*github.com/cilium/ebpf.bpfProgTestRunAttr",
      "type" : "Pointer",
      "underlying" : 72
    }, {
      "name" : "func(err error) error",
      "params" : 74,
      "recv" : -1,
      "results" : 50,
      "type" : "Signature",
      "underlying" : 73,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "err",
        "type" : 24
      } ],
      "name" : "(err error)",
      "type" : "Tuple",
      "underlying" : 74
    }, {
      "local-name" : "Errno",
      "name" : "syscall.Errno",
      "package" : 5,
      "type" : "Named",
      "underlying" : 69
    } ],
    "variables" : [ {
      "name" : "noProgTestRun",
      "package" : 0,
      "type" : 0,
      "exported" : false
    }, {
      "name" : "Fn",
      "package" : 0,
      "type" : 2,
      "exported" : true
    }, {
      "name" : "",
      "package" : -1,
      "type" : 24,
      "exported" : false
    }, {
      "name" : "Type",
      "package" : 0,
      "type" : 23,
      "exported" : true
    }, {
      "name" : "Instructions",
      "package" : 0,
      "type" : 34,
      "exported" : true
    }, {
      "name" : "License",
      "package" : 0,
      "type" : 16,
      "exported" : true
    }, {
      "name" : "err",
      "package" : 0,
      "type" : 24,
      "exported" : false
    }, {
      "name" : "prog",
      "package" : 0,
      "type" : 13,
      "exported" : false
    }, {
      "name" : "fd",
      "package" : 0,
      "type" : 17,
      "exported" : false
    }, {
      "name" : "fd",
      "package" : 0,
      "type" : 8,
      "exported" : false
    }, {
      "name" : "fd",
      "package" : 0,
      "type" : 8,
      "exported" : false
    }, {
      "name" : "dataSizeIn",
      "package" : 0,
      "type" : 8,
      "exported" : false
    }, {
      "name" : "in",
      "package" : 0,
      "type" : 53,
      "exported" : false
    }, {
      "name" : "dataIn",
      "package" : 0,
      "type" : 58,
      "exported" : false
    }, {
      "name" : "attr",
      "package" : 0,
      "type" : 56,
      "exported" : false
    } ]
  },
  "go-version" : "1.14.3"
}