{
  "usage" : {
    "file" : "syscalls.go",
    "label1" : "delegate",
    "label2" : "ffi",
    "line" : "335",
    "module" : "github.com/cilium/ebpf",
    "pkg" : "github.com/cilium/ebpf",
    "project" : "kubernetes/kubernetes",
    "snippet" : "_, err = bpfCall(_ObjGetInfoByFD, unsafe.Pointer(&attr), unsafe.Sizeof(attr))",
    "version" : "v0.0.0-20191113100448-d9fb101ca1fb"
  },
  "cfg" : {
    "blocks" : [ {
      "update-vars" : [ ],
      "successors" : [ 2 ],
      "in-vars" : [ 2, 3, 1 ],
      "exit" : false,
      "out-vars" : [ 2, 3, 1 ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[entry]",
      "entry" : true,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ ],
      "in-vars" : [ ],
      "exit" : true,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[exit]",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 3 ],
      "in-vars" : [ 2, 3, 1 ],
      "exit" : false,
      "out-vars" : [ 5, 2, 6, 3 ],
      "decl-vars" : [ 5, 6 ],
      "line-start" : 324,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "value"
          }
        }, {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "err"
          }
        } ],
        "right" : [ {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "function" : 1,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "value"
            },
            "go-type" : 17,
            "kind" : "expression",
            "target" : {
              "go-type" : 2,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "fd",
                "variable" : 1
              }
            },
            "type" : "selector"
          },
          "go-type" : 15,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 324,
      "code" : "value, err := fd.value()",
      "entry" : false,
      "use-vars" : [ 1 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 4, 5 ],
      "in-vars" : [ 5, 2, 6, 3 ],
      "exit" : false,
      "out-vars" : [ 2, 6, 3, 5 ],
      "decl-vars" : [ ],
      "line-start" : 325,
      "ast" : {
        "condition" : {
          "go-type" : 18,
          "kind" : "expression",
          "left" : {
            "go-type" : 9,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "err",
              "variable" : 5
            }
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 19,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Nil",
              "kind" : "ident",
              "value" : "nil"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 327,
      "code" : "if err != nil {\n\treturn err\n}",
      "entry" : false,
      "use-vars" : [ 5 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 5 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 326,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 9,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "err",
            "variable" : 5
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 326,
      "code" : "return err",
      "entry" : false,
      "use-vars" : [ 5 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 6 ],
      "in-vars" : [ 2, 6, 3 ],
      "exit" : false,
      "out-vars" : [ 10, 6 ],
      "decl-vars" : [ 10 ],
      "line-start" : 330,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "attr"
          }
        } ],
        "right" : [ {
          "declared" : {
            "go-type" : 20,
            "kind" : "type",
            "type" : "identifier",
            "value" : {
              "go-type" : 20,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "bpfObjGetInfoByFDAttr"
            }
          },
          "go-type" : 20,
          "kind" : "literal",
          "type" : "composite",
          "values" : [ {
            "go-type" : -1,
            "key" : {
              "go-type" : -1,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "fd",
                "variable" : 7
              }
            },
            "kind" : "expression",
            "type" : "key-value",
            "value" : {
              "go-type" : 16,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "value",
                "variable" : 6
              }
            }
          }, {
            "go-type" : -1,
            "key" : {
              "go-type" : -1,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "infoLen",
                "variable" : 8
              }
            },
            "kind" : "expression",
            "type" : "key-value",
            "value" : {
              "coerced-to" : {
                "go-type" : 16,
                "kind" : "type",
                "type" : "identifier",
                "value" : {
                  "go-type" : 16,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "uint32"
                }
              },
              "go-type" : 16,
              "kind" : "expression",
              "target" : {
                "go-type" : 7,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "size",
                  "variable" : 3
                }
              },
              "type" : "cast"
            }
          }, {
            "go-type" : -1,
            "key" : {
              "go-type" : -1,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "info",
                "variable" : 9
              }
            },
            "kind" : "expression",
            "type" : "key-value",
            "value" : {
              "arguments" : [ {
                "go-type" : 6,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "info",
                  "variable" : 2
                }
              } ],
              "ellipsis" : false,
              "function" : {
                "go-type" : 24,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "function" : 2,
                  "ident-kind" : "Func",
                  "kind" : "ident",
                  "value" : "newPtr"
                }
              },
              "go-type" : 22,
              "kind" : "expression",
              "type" : "call"
            }
          } ]
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 334,
      "code" : "attr := bpfObjGetInfoByFDAttr{\n\tfd:      value,\n\tinfoLen: uint32(size),\n\tinfo:    newPtr(info),\n}",
      "entry" : false,
      "use-vars" : [ 6, 3, 2 ]
    }, {
      "update-vars" : [ 5 ],
      "successors" : [ 7 ],
      "in-vars" : [ 10, 6 ],
      "exit" : false,
      "out-vars" : [ 5, 6 ],
      "decl-vars" : [ ],
      "line-start" : 335,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "_"
          }
        }, {
          "go-type" : 9,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "err",
            "variable" : 5
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 30,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "15"
            }
          }, {
            "coerced-to" : {
              "go-type" : 6,
              "kind" : "type",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 1,
                "value" : "unsafe"
              },
              "type" : "identifier",
              "value" : {
                "go-type" : 6,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "Pointer"
              }
            },
            "go-type" : 6,
            "kind" : "expression",
            "target" : {
              "go-type" : 31,
              "kind" : "expression",
              "operator" : "&",
              "target" : {
                "go-type" : 20,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "attr",
                  "variable" : 10
                }
              },
              "type" : "unary"
            },
            "type" : "cast"
          }, {
            "go-type" : 7,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "16"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 28,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 3,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "bpfCall"
            }
          },
          "go-type" : 27,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 5 ],
      "line-end" : 335,
      "code" : "_, err = bpfCall(_ObjGetInfoByFD, unsafe.Pointer(&attr), unsafe.Sizeof(attr))",
      "entry" : false,
      "use-vars" : [ 10 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 5, 6 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 336,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "arguments" : [ {
            "go-type" : 9,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "err",
              "variable" : 5
            }
          }, {
            "go-type" : 14,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "fd %d"
            }
          }, {
            "go-type" : 16,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "value",
              "variable" : 6
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 32,
            "kind" : "expression",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 2,
              "value" : "errors"
            },
            "type" : "identifier",
            "value" : {
              "function" : 4,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "Wrapf"
            }
          },
          "go-type" : 9,
          "kind" : "expression",
          "type" : "call"
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 336,
      "code" : "return errors.Wrapf(err, \"fd %d\", value)",
      "entry" : false,
      "use-vars" : [ 5, 6 ]
    } ],
    "code" : "func bpfGetObjectInfoByFD(fd *bpfFD, info unsafe.Pointer, size uintptr) error {\n\tvalue, err := fd.value()\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tattr := bpfObjGetInfoByFDAttr{\n\t\tfd:      value,\n\t\tinfoLen: uint32(size),\n\t\tinfo:    newPtr(info),\n\t}\n\t_, err = bpfCall(_ObjGetInfoByFD, unsafe.Pointer(&attr), unsafe.Sizeof(attr))\n\treturn errors.Wrapf(err, \"fd %d\", value)\n}",
    "defines" : [ 0 ],
    "functions" : [ {
      "name" : "bpfGetObjectInfoByFD",
      "package" : 0,
      "type" : 0,
      "exported" : false
    }, {
      "name" : "value",
      "package" : 0,
      "type" : 17,
      "exported" : false
    }, {
      "name" : "newPtr",
      "package" : 0,
      "type" : 24,
      "exported" : false
    }, {
      "name" : "bpfCall",
      "package" : 0,
      "type" : 28,
      "exported" : false
    }, {
      "name" : "Wrapf",
      "package" : 2,
      "type" : 32,
      "exported" : true
    } ],
    "line-end" : 337,
    "line-start" : 323,
    "names" : [ "bpfGetObjectInfoByFD" ],
    "package" : 0,
    "packages" : [ {
      "name" : "ebpf",
      "path" : "github.com/cilium/ebpf"
    }, {
      "name" : "unsafe",
      "path" : "unsafe"
    }, {
      "name" : "errors",
      "path" : "github.com/pkg/errors"
    } ],
    "params" : [ 1, 2, 3 ],
    "receivers" : [ ],
    "results" : [ 4 ],
    "type" : "function",
    "types" : [ {
      "name" : "func(fd *github.com/cilium/ebpf.bpfFD, info unsafe.Pointer, size uintptr) error",
      "params" : 1,
      "recv" : -1,
      "results" : 8,
      "type" : "Signature",
      "underlying" : 0,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "fd",
        "type" : 2
      }, {
        "name" : "info",
        "type" : 6
      }, {
        "name" : "size",
        "type" : 7
      } ],
      "name" : "(fd *github.com/cilium/ebpf.bpfFD, info unsafe.Pointer, size uintptr)",
      "type" : "Tuple",
      "underlying" : 1
    }, {
      "elem" : 3,
      "name" : "*github.com/cilium/ebpf.bpfFD",
      "type" : "Pointer",
      "underlying" : 2
    }, {
      "local-name" : "bpfFD",
      "name" : "github.com/cilium/ebpf.bpfFD",
      "package" : 0,
      "type" : "Named",
      "underlying" : 4
    }, {
      "fields" : [ {
        "name" : "raw",
        "type" : 5
      } ],
      "name" : "struct{raw int64}",
      "type" : "Struct",
      "underlying" : 4
    }, {
      "name" : "int64",
      "type" : "Basic",
      "underlying" : 5
    }, {
      "local-name" : "Pointer",
      "name" : "unsafe.Pointer",
      "package" : 1,
      "type" : "Basic",
      "underlying" : 6
    }, {
      "name" : "uintptr",
      "type" : "Basic",
      "underlying" : 7
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 9
      } ],
      "name" : "(error)",
      "type" : "Tuple",
      "underlying" : 8
    }, {
      "local-name" : "error",
      "name" : "error",
      "package" : -1,
      "type" : "Named",
      "underlying" : 10
    }, {
      "methods" : [ {
        "name" : "Error",
        "type" : 11
      } ],
      "name" : "interface{Error() string}",
      "type" : "Interface",
      "underlying" : 10
    }, {
      "name" : "func() string",
      "params" : 12,
      "recv" : 0,
      "results" : 13,
      "type" : "Signature",
      "underlying" : 11,
      "variadic" : false
    }, {
      "fields" : [ ],
      "name" : "()",
      "type" : "Tuple",
      "underlying" : 12
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 14
      } ],
      "name" : "(string)",
      "type" : "Tuple",
      "underlying" : 13
    }, {
      "name" : "string",
      "type" : "Basic",
      "underlying" : 14
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 16
      }, {
        "name" : "",
        "type" : 9
      } ],
      "name" : "(uint32, error)",
      "type" : "Tuple",
      "underlying" : 15
    }, {
      "name" : "uint32",
      "type" : "Basic",
      "underlying" : 16
    }, {
      "name" : "func() (uint32, error)",
      "params" : 12,
      "recv" : -1,
      "results" : 15,
      "type" : "Signature",
      "underlying" : 17,
      "variadic" : false
    }, {
      "name" : "untyped bool",
      "type" : "Basic",
      "underlying" : 18
    }, {
      "name" : "untyped nil",
      "type" : "Basic",
      "underlying" : 19
    }, {
      "local-name" : "bpfObjGetInfoByFDAttr",
      "name" : "github.com/cilium/ebpf.bpfObjGetInfoByFDAttr",
      "package" : 0,
      "type" : "Named",
      "underlying" : 21
    }, {
      "fields" : [ {
        "name" : "fd",
        "type" : 16
      }, {
        "name" : "infoLen",
        "type" : 16
      }, {
        "name" : "info",
        "type" : 22
      } ],
      "name" : "struct{fd uint32; infoLen uint32; info github.com/cilium/ebpf.syscallPtr}",
      "type" : "Struct",
      "underlying" : 21
    }, {
      "local-name" : "syscallPtr",
      "name" : "github.com/cilium/ebpf.syscallPtr",
      "package" : 0,
      "type" : "Named",
      "underlying" : 23
    }, {
      "fields" : [ {
        "name" : "ptr",
        "type" : 6
      } ],
      "name" : "struct{ptr unsafe.Pointer}",
      "type" : "Struct",
      "underlying" : 23
    }, {
      "name" : "func(ptr unsafe.Pointer) github.com/cilium/ebpf.syscallPtr",
      "params" : 25,
      "recv" : -1,
      "results" : 26,
      "type" : "Signature",
      "underlying" : 24,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "ptr",
        "type" : 6
      } ],
      "name" : "(ptr unsafe.Pointer)",
      "type" : "Tuple",
      "underlying" : 25
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 22
      } ],
      "name" : "(github.com/cilium/ebpf.syscallPtr)",
      "type" : "Tuple",
      "underlying" : 26
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 7
      }, {
        "name" : "",
        "type" : 9
      } ],
      "name" : "(uintptr, error)",
      "type" : "Tuple",
      "underlying" : 27
    }, {
      "name" : "func(cmd int, attr unsafe.Pointer, size uintptr) (uintptr, error)",
      "params" : 29,
      "recv" : -1,
      "results" : 27,
      "type" : "Signature",
      "underlying" : 28,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "cmd",
        "type" : 30
      }, {
        "name" : "attr",
        "type" : 6
      }, {
        "name" : "size",
        "type" : 7
      } ],
      "name" : "(cmd int, attr unsafe.Pointer, size uintptr)",
      "type" : "Tuple",
      "underlying" : 29
    }, {
      "name" : "int",
      "type" : "Basic",
      "underlying" : 30
    }, {
      "elem" : 20,
      "name" : "*github.com/cilium/ebpf.bpfObjGetInfoByFDAttr",
      "type" : "Pointer",
      "underlying" : 31
    }, {
      "name" : "func(err error, format string, args ...interface{}) error",
      "params" : 33,
      "recv" : -1,
      "results" : 8,
      "type" : "Signature",
      "underlying" : 32,
      "variadic" : true
    }, {
      "fields" : [ {
        "name" : "err",
        "type" : 9
      }, {
        "name" : "format",
        "type" : 14
      }, {
        "name" : "args",
        "type" : 34
      } ],
      "name" : "(err error, format string, args []interface{})",
      "type" : "Tuple",
      "underlying" : 33
    }, {
      "elem" : 35,
      "name" : "[]interface{}",
      "type" : "Slice",
      "underlying" : 34
    }, {
      "methods" : [ ],
      "name" : "interface{}",
      "type" : "Interface",
      "underlying" : 35
    } ],
    "variables" : [ {
      "name" : "",
      "package" : -1,
      "type" : 9,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "fd",
      "package" : 0,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "info",
      "package" : 0,
      "type" : 6,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "size",
      "package" : 0,
      "type" : 7,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "[res0]",
      "package" : 0,
      "type" : 9,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "err",
      "package" : 0,
      "type" : 9,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "value",
      "package" : 0,
      "type" : 16,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "fd",
      "package" : 0,
      "type" : 16,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "infoLen",
      "package" : 0,
      "type" : 16,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "info",
      "package" : 0,
      "type" : 22,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "attr",
      "package" : 0,
      "type" : 20,
      "exported" : false,
      "embedded" : false,
      "field" : false
    } ]
  },
  "go-version" : "1.14.3"
}