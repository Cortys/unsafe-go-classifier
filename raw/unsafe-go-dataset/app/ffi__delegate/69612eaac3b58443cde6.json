{
  "usage" : {
    "file" : "sctp.go",
    "label1" : "delegate",
    "label2" : "ffi",
    "line" : "304",
    "module" : "github.com/ishidawataru/sctp",
    "pkg" : "github.com/ishidawataru/sctp",
    "project" : "cilium/cilium",
    "snippet" : "_, _, err := getsockopt(fd, SCTP_SOCKOPT_CONNECTX3, uintptr(unsafe.Pointer(&param)), uintptr(unsafe.Pointer(&optlen)))",
    "version" : "v0.0.0-20180213033435-07191f837fed"
  },
  "cfg" : {
    "blocks" : [ {
      "update-vars" : [ ],
      "successors" : [ 2 ],
      "in-vars" : [ 1, 2 ],
      "exit" : false,
      "out-vars" : [ 2, 1 ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[entry]",
      "entry" : true,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ ],
      "in-vars" : [ ],
      "exit" : true,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[exit]",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 3 ],
      "in-vars" : [ 1, 2 ],
      "exit" : false,
      "out-vars" : [ 1, 6 ],
      "decl-vars" : [ 6 ],
      "line-start" : 298,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "buf"
          }
        } ],
        "right" : [ {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "function" : 1,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "ToRawSockAddrBuf"
            },
            "go-type" : 17,
            "kind" : "expression",
            "target" : {
              "go-type" : 3,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "addr",
                "variable" : 2
              }
            },
            "type" : "selector"
          },
          "go-type" : 8,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 298,
      "code" : "buf := addr.ToRawSockAddrBuf()",
      "entry" : false,
      "use-vars" : [ 2 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 4 ],
      "in-vars" : [ 1, 6 ],
      "exit" : false,
      "out-vars" : [ 6, 9, 1 ],
      "decl-vars" : [ 9 ],
      "line-start" : 299,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "param"
          }
        } ],
        "right" : [ {
          "declared" : {
            "go-type" : 20,
            "kind" : "type",
            "type" : "identifier",
            "value" : {
              "go-type" : 20,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "GetAddrsOld"
            }
          },
          "go-type" : 20,
          "kind" : "literal",
          "type" : "composite",
          "values" : [ {
            "go-type" : -1,
            "key" : {
              "go-type" : -1,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "AddrNum",
                "variable" : 7
              }
            },
            "kind" : "expression",
            "type" : "key-value",
            "value" : {
              "coerced-to" : {
                "go-type" : 22,
                "kind" : "type",
                "type" : "identifier",
                "value" : {
                  "go-type" : 22,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "int32"
                }
              },
              "go-type" : 22,
              "kind" : "expression",
              "target" : {
                "arguments" : [ {
                  "go-type" : 8,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "buf",
                    "variable" : 6
                  }
                } ],
                "ellipsis" : false,
                "function" : {
                  "go-type" : 24,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Builtin",
                    "kind" : "ident",
                    "value" : "len"
                  }
                },
                "go-type" : 2,
                "kind" : "expression",
                "type" : "call"
              },
              "type" : "cast"
            }
          }, {
            "go-type" : -1,
            "key" : {
              "go-type" : -1,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "Addrs",
                "variable" : 8
              }
            },
            "kind" : "expression",
            "type" : "key-value",
            "value" : {
              "coerced-to" : {
                "go-type" : 23,
                "kind" : "type",
                "type" : "identifier",
                "value" : {
                  "go-type" : 23,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "uintptr"
                }
              },
              "go-type" : 23,
              "kind" : "expression",
              "target" : {
                "coerced-to" : {
                  "go-type" : 23,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 23,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "uintptr"
                  }
                },
                "go-type" : 23,
                "kind" : "expression",
                "target" : {
                  "coerced-to" : {
                    "go-type" : 26,
                    "kind" : "type",
                    "qualifier" : {
                      "ident-kind" : "PkgName",
                      "kind" : "ident",
                      "package" : 2,
                      "value" : "unsafe"
                    },
                    "type" : "identifier",
                    "value" : {
                      "go-type" : 26,
                      "ident-kind" : "TypeName",
                      "kind" : "ident",
                      "value" : "Pointer"
                    }
                  },
                  "go-type" : 26,
                  "kind" : "expression",
                  "target" : {
                    "go-type" : 27,
                    "kind" : "expression",
                    "operator" : "&",
                    "target" : {
                      "go-type" : 9,
                      "index" : {
                        "go-type" : 2,
                        "kind" : "constant",
                        "value" : {
                          "type" : "INT",
                          "value" : "0"
                        }
                      },
                      "kind" : "expression",
                      "target" : {
                        "go-type" : 8,
                        "kind" : "expression",
                        "type" : "identifier",
                        "value" : {
                          "ident-kind" : "Var",
                          "kind" : "ident",
                          "value" : "buf",
                          "variable" : 6
                        }
                      },
                      "type" : "index"
                    },
                    "type" : "unary"
                  },
                  "type" : "cast"
                },
                "type" : "cast"
              },
              "type" : "cast"
            }
          } ]
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 302,
      "code" : "param := GetAddrsOld{\n\tAddrNum: int32(len(buf)),\n\tAddrs:   uintptr(uintptr(unsafe.Pointer(&buf[0]))),\n}",
      "entry" : false,
      "use-vars" : [ 6 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 5 ],
      "in-vars" : [ 9, 1, 6 ],
      "exit" : false,
      "out-vars" : [ 9, 1, 10, 6 ],
      "decl-vars" : [ 10 ],
      "line-start" : 303,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "optlen"
          }
        } ],
        "right" : [ {
          "go-type" : 23,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "16"
          }
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 303,
      "code" : "optlen := unsafe.Sizeof(param)",
      "entry" : false,
      "use-vars" : [ 9 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 6 ],
      "in-vars" : [ 1, 10, 6, 9 ],
      "exit" : false,
      "out-vars" : [ 11, 9, 1, 6 ],
      "decl-vars" : [ 12, 13, 11 ],
      "line-start" : 304,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "_"
          }
        }, {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "_"
          }
        }, {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "err"
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "fd",
              "variable" : 1
            }
          }, {
            "go-type" : 23,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "111"
            }
          }, {
            "coerced-to" : {
              "go-type" : 23,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 23,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "uintptr"
              }
            },
            "go-type" : 23,
            "kind" : "expression",
            "target" : {
              "coerced-to" : {
                "go-type" : 26,
                "kind" : "type",
                "qualifier" : {
                  "ident-kind" : "PkgName",
                  "kind" : "ident",
                  "package" : 2,
                  "value" : "unsafe"
                },
                "type" : "identifier",
                "value" : {
                  "go-type" : 26,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "Pointer"
                }
              },
              "go-type" : 26,
              "kind" : "expression",
              "target" : {
                "go-type" : 31,
                "kind" : "expression",
                "operator" : "&",
                "target" : {
                  "go-type" : 20,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "param",
                    "variable" : 9
                  }
                },
                "type" : "unary"
              },
              "type" : "cast"
            },
            "type" : "cast"
          }, {
            "coerced-to" : {
              "go-type" : 23,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 23,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "uintptr"
              }
            },
            "go-type" : 23,
            "kind" : "expression",
            "target" : {
              "coerced-to" : {
                "go-type" : 26,
                "kind" : "type",
                "qualifier" : {
                  "ident-kind" : "PkgName",
                  "kind" : "ident",
                  "package" : 2,
                  "value" : "unsafe"
                },
                "type" : "identifier",
                "value" : {
                  "go-type" : 26,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "Pointer"
                }
              },
              "go-type" : 26,
              "kind" : "expression",
              "target" : {
                "go-type" : 32,
                "kind" : "expression",
                "operator" : "&",
                "target" : {
                  "go-type" : 23,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "optlen",
                    "variable" : 10
                  }
                },
                "type" : "unary"
              },
              "type" : "cast"
            },
            "type" : "cast"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 29,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 2,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "getsockopt"
            }
          },
          "go-type" : 28,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 304,
      "code" : "_, _, err := getsockopt(fd, SCTP_SOCKOPT_CONNECTX3, uintptr(unsafe.Pointer(&param)), uintptr(unsafe.Pointer(&optlen)))",
      "entry" : false,
      "use-vars" : [ 9, 10, 1 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 7, 8 ],
      "in-vars" : [ 11, 9, 1, 6 ],
      "exit" : false,
      "out-vars" : [ 11, 9, 1, 6 ],
      "decl-vars" : [ ],
      "line-start" : 305,
      "ast" : {
        "condition" : {
          "go-type" : 33,
          "kind" : "expression",
          "left" : {
            "go-type" : 11,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "err",
              "variable" : 11
            }
          },
          "operator" : "==",
          "right" : {
            "go-type" : 34,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Nil",
              "kind" : "ident",
              "value" : "nil"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 309,
      "code" : "if err == nil {\n\treturn int(param.AssocID), nil\n} else if err != syscall.ENOPROTOOPT {\n\treturn 0, err\n}",
      "entry" : false,
      "use-vars" : [ 11 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 9 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 306,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "coerced-to" : {
            "go-type" : 2,
            "kind" : "type",
            "type" : "identifier",
            "value" : {
              "go-type" : 2,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "int"
            }
          },
          "go-type" : 2,
          "kind" : "expression",
          "target" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "AssocID",
              "variable" : 14
            },
            "go-type" : 22,
            "kind" : "expression",
            "target" : {
              "go-type" : 20,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "param",
                "variable" : 9
              }
            },
            "type" : "selector"
          },
          "type" : "cast"
        }, {
          "go-type" : 34,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Nil",
            "kind" : "ident",
            "value" : "nil"
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 306,
      "code" : "return int(param.AssocID), nil",
      "entry" : false,
      "use-vars" : [ 9 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 9, 10 ],
      "in-vars" : [ 11, 1, 6 ],
      "exit" : false,
      "out-vars" : [ 1, 6, 11 ],
      "decl-vars" : [ ],
      "line-start" : 307,
      "ast" : {
        "condition" : {
          "go-type" : 33,
          "kind" : "expression",
          "left" : {
            "go-type" : 11,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "err",
              "variable" : 11
            }
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 35,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "92"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 309,
      "code" : "if err != syscall.ENOPROTOOPT {\n\treturn 0, err\n}",
      "entry" : false,
      "use-vars" : [ 11 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 11 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 308,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 2,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "0"
          }
        }, {
          "go-type" : 11,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "err",
            "variable" : 11
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 308,
      "code" : "return 0, err",
      "entry" : false,
      "use-vars" : [ 11 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 11 ],
      "in-vars" : [ 1, 6 ],
      "exit" : false,
      "out-vars" : [ 11, 15 ],
      "decl-vars" : [ 11, 16, 15 ],
      "line-start" : 310,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "r0"
          }
        }, {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "_"
          }
        }, {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "err",
            "variable" : 11
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "fd",
              "variable" : 1
            }
          }, {
            "go-type" : 23,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "110"
            }
          }, {
            "coerced-to" : {
              "go-type" : 23,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 23,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "uintptr"
              }
            },
            "go-type" : 23,
            "kind" : "expression",
            "target" : {
              "coerced-to" : {
                "go-type" : 26,
                "kind" : "type",
                "qualifier" : {
                  "ident-kind" : "PkgName",
                  "kind" : "ident",
                  "package" : 2,
                  "value" : "unsafe"
                },
                "type" : "identifier",
                "value" : {
                  "go-type" : 26,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "Pointer"
                }
              },
              "go-type" : 26,
              "kind" : "expression",
              "target" : {
                "go-type" : 27,
                "kind" : "expression",
                "operator" : "&",
                "target" : {
                  "go-type" : 9,
                  "index" : {
                    "go-type" : 2,
                    "kind" : "constant",
                    "value" : {
                      "type" : "INT",
                      "value" : "0"
                    }
                  },
                  "kind" : "expression",
                  "target" : {
                    "go-type" : 8,
                    "kind" : "expression",
                    "type" : "identifier",
                    "value" : {
                      "ident-kind" : "Var",
                      "kind" : "ident",
                      "value" : "buf",
                      "variable" : 6
                    }
                  },
                  "type" : "index"
                },
                "type" : "unary"
              },
              "type" : "cast"
            },
            "type" : "cast"
          }, {
            "coerced-to" : {
              "go-type" : 23,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 23,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "uintptr"
              }
            },
            "go-type" : 23,
            "kind" : "expression",
            "target" : {
              "arguments" : [ {
                "go-type" : 8,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "buf",
                  "variable" : 6
                }
              } ],
              "ellipsis" : false,
              "function" : {
                "go-type" : 24,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Builtin",
                  "kind" : "ident",
                  "value" : "len"
                }
              },
              "go-type" : 2,
              "kind" : "expression",
              "type" : "call"
            },
            "type" : "cast"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 29,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 3,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "setsockopt"
            }
          },
          "go-type" : 28,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 310,
      "code" : "r0, _, err := setsockopt(fd, SCTP_SOCKOPT_CONNECTX, uintptr(unsafe.Pointer(&buf[0])), uintptr(len(buf)))",
      "entry" : false,
      "use-vars" : [ 1, 6 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 11, 15 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 311,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "coerced-to" : {
            "go-type" : 2,
            "kind" : "type",
            "type" : "identifier",
            "value" : {
              "go-type" : 2,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "int"
            }
          },
          "go-type" : 2,
          "kind" : "expression",
          "target" : {
            "go-type" : 23,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "r0",
              "variable" : 15
            }
          },
          "type" : "cast"
        }, {
          "go-type" : 11,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "err",
            "variable" : 11
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 311,
      "code" : "return int(r0), err",
      "entry" : false,
      "use-vars" : [ 15, 11 ]
    } ],
    "code" : "func SCTPConnect(fd int, addr *SCTPAddr) (int, error) {\n\tbuf := addr.ToRawSockAddrBuf()\n\tparam := GetAddrsOld{\n\t\tAddrNum: int32(len(buf)),\n\t\tAddrs:   uintptr(uintptr(unsafe.Pointer(&buf[0]))),\n\t}\n\toptlen := unsafe.Sizeof(param)\n\t_, _, err := getsockopt(fd, SCTP_SOCKOPT_CONNECTX3, uintptr(unsafe.Pointer(&param)), uintptr(unsafe.Pointer(&optlen)))\n\tif err == nil {\n\t\treturn int(param.AssocID), nil\n\t} else if err != syscall.ENOPROTOOPT {\n\t\treturn 0, err\n\t}\n\tr0, _, err := setsockopt(fd, SCTP_SOCKOPT_CONNECTX, uintptr(unsafe.Pointer(&buf[0])), uintptr(len(buf)))\n\treturn int(r0), err\n}",
    "defines" : [ 0 ],
    "functions" : [ {
      "name" : "SCTPConnect",
      "package" : 0,
      "type" : 0,
      "exported" : true
    }, {
      "name" : "ToRawSockAddrBuf",
      "package" : 0,
      "type" : 19,
      "exported" : true
    }, {
      "name" : "getsockopt",
      "package" : 0,
      "type" : 29,
      "exported" : false
    }, {
      "name" : "setsockopt",
      "package" : 0,
      "type" : 29,
      "exported" : false
    } ],
    "line-end" : 312,
    "line-start" : 297,
    "names" : [ "SCTPConnect" ],
    "package" : 0,
    "packages" : [ {
      "name" : "sctp",
      "path" : "github.com/ishidawataru/sctp"
    }, {
      "name" : "net",
      "path" : "net"
    }, {
      "name" : "unsafe",
      "path" : "unsafe"
    }, {
      "name" : "syscall",
      "path" : "syscall"
    } ],
    "params" : [ 1, 2 ],
    "receivers" : [ ],
    "results" : [ 3, 4 ],
    "type" : "function",
    "types" : [ {
      "name" : "func(fd int, addr *github.com/ishidawataru/sctp.SCTPAddr) (int, error)",
      "params" : 1,
      "recv" : -1,
      "results" : 10,
      "type" : "Signature",
      "underlying" : 0,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "fd",
        "type" : 2
      }, {
        "name" : "addr",
        "type" : 3
      } ],
      "name" : "(fd int, addr *github.com/ishidawataru/sctp.SCTPAddr)",
      "type" : "Tuple",
      "underlying" : 1
    }, {
      "name" : "int",
      "type" : "Basic",
      "underlying" : 2
    }, {
      "elem" : 4,
      "name" : "*github.com/ishidawataru/sctp.SCTPAddr",
      "type" : "Pointer",
      "underlying" : 3
    }, {
      "local-name" : "SCTPAddr",
      "name" : "github.com/ishidawataru/sctp.SCTPAddr",
      "package" : 0,
      "type" : "Named",
      "underlying" : 5
    }, {
      "fields" : [ {
        "name" : "IP",
        "type" : 6
      }, {
        "name" : "Port",
        "type" : 2
      } ],
      "name" : "struct{IP []net.IP; Port int}",
      "type" : "Struct",
      "underlying" : 5
    }, {
      "elem" : 7,
      "name" : "[]net.IP",
      "type" : "Slice",
      "underlying" : 6
    }, {
      "local-name" : "IP",
      "name" : "net.IP",
      "package" : 1,
      "type" : "Named",
      "underlying" : 8
    }, {
      "elem" : 9,
      "name" : "[]byte",
      "type" : "Slice",
      "underlying" : 8
    }, {
      "name" : "byte",
      "type" : "Basic",
      "underlying" : 9
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 2
      }, {
        "name" : "",
        "type" : 11
      } ],
      "name" : "(int, error)",
      "type" : "Tuple",
      "underlying" : 10
    }, {
      "local-name" : "error",
      "name" : "error",
      "package" : -1,
      "type" : "Named",
      "underlying" : 12
    }, {
      "methods" : [ {
        "name" : "Error",
        "type" : 13
      } ],
      "name" : "interface{Error() string}",
      "type" : "Interface",
      "underlying" : 12
    }, {
      "name" : "(error) func() string",
      "params" : 14,
      "recv" : 0,
      "results" : 15,
      "type" : "Signature",
      "underlying" : 13,
      "variadic" : false
    }, {
      "fields" : [ ],
      "name" : "()",
      "type" : "Tuple",
      "underlying" : 14
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 16
      } ],
      "name" : "(string)",
      "type" : "Tuple",
      "underlying" : 15
    }, {
      "name" : "string",
      "type" : "Basic",
      "underlying" : 16
    }, {
      "name" : "func() []byte",
      "params" : 14,
      "recv" : -1,
      "results" : 18,
      "type" : "Signature",
      "underlying" : 17,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 8
      } ],
      "name" : "([]byte)",
      "type" : "Tuple",
      "underlying" : 18
    }, {
      "name" : "(*github.com/ishidawataru/sctp.SCTPAddr) func() []byte",
      "params" : 14,
      "recv" : 5,
      "results" : 18,
      "type" : "Signature",
      "underlying" : 19,
      "variadic" : false
    }, {
      "local-name" : "GetAddrsOld",
      "name" : "github.com/ishidawataru/sctp.GetAddrsOld",
      "package" : 0,
      "type" : "Named",
      "underlying" : 21
    }, {
      "fields" : [ {
        "name" : "AssocID",
        "type" : 22
      }, {
        "name" : "AddrNum",
        "type" : 22
      }, {
        "name" : "Addrs",
        "type" : 23
      } ],
      "name" : "struct{AssocID int32; AddrNum int32; Addrs uintptr}",
      "type" : "Struct",
      "underlying" : 21
    }, {
      "name" : "int32",
      "type" : "Basic",
      "underlying" : 22
    }, {
      "name" : "uintptr",
      "type" : "Basic",
      "underlying" : 23
    }, {
      "name" : "func([]byte) int",
      "params" : 18,
      "recv" : -1,
      "results" : 25,
      "type" : "Signature",
      "underlying" : 24,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 2
      } ],
      "name" : "(int)",
      "type" : "Tuple",
      "underlying" : 25
    }, {
      "local-name" : "Pointer",
      "name" : "unsafe.Pointer",
      "package" : 2,
      "type" : "Basic",
      "underlying" : 26
    }, {
      "elem" : 9,
      "name" : "*byte",
      "type" : "Pointer",
      "underlying" : 27
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 23
      }, {
        "name" : "",
        "type" : 23
      }, {
        "name" : "",
        "type" : 11
      } ],
      "name" : "(uintptr, uintptr, error)",
      "type" : "Tuple",
      "underlying" : 28
    }, {
      "name" : "func(fd int, optname uintptr, optval uintptr, optlen uintptr) (uintptr, uintptr, error)",
      "params" : 30,
      "recv" : -1,
      "results" : 28,
      "type" : "Signature",
      "underlying" : 29,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "fd",
        "type" : 2
      }, {
        "name" : "optname",
        "type" : 23
      }, {
        "name" : "optval",
        "type" : 23
      }, {
        "name" : "optlen",
        "type" : 23
      } ],
      "name" : "(fd int, optname uintptr, optval uintptr, optlen uintptr)",
      "type" : "Tuple",
      "underlying" : 30
    }, {
      "elem" : 20,
      "name" : "*github.com/ishidawataru/sctp.GetAddrsOld",
      "type" : "Pointer",
      "underlying" : 31
    }, {
      "elem" : 23,
      "name" : "*uintptr",
      "type" : "Pointer",
      "underlying" : 32
    }, {
      "name" : "untyped bool",
      "type" : "Basic",
      "underlying" : 33
    }, {
      "name" : "untyped nil",
      "type" : "Basic",
      "underlying" : 34
    }, {
      "local-name" : "Errno",
      "name" : "syscall.Errno",
      "package" : 3,
      "type" : "Named",
      "underlying" : 23
    } ],
    "variables" : [ {
      "name" : "",
      "package" : -1,
      "type" : 11,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "fd",
      "package" : 0,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "addr",
      "package" : 0,
      "type" : 3,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "[res0]",
      "package" : 0,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "[res1]",
      "package" : 0,
      "type" : 11,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "a",
      "package" : 0,
      "type" : 3,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "buf",
      "package" : 0,
      "type" : 8,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "AddrNum",
      "package" : 0,
      "type" : 22,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "Addrs",
      "package" : 0,
      "type" : 23,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "param",
      "package" : 0,
      "type" : 20,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "optlen",
      "package" : 0,
      "type" : 23,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "err",
      "package" : 0,
      "type" : 11,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "_",
      "package" : 0,
      "type" : 23,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "_",
      "package" : 0,
      "type" : 23,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "AssocID",
      "package" : 0,
      "type" : 22,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "r0",
      "package" : 0,
      "type" : 23,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "_",
      "package" : 0,
      "type" : 23,
      "exported" : false,
      "embedded" : false,
      "field" : false
    } ]
  },
  "go-version" : "1.14.3"
}