{
  "usage" : {
    "file" : "sctp.go",
    "label1" : "delegate",
    "label2" : "ffi",
    "line" : "489",
    "module" : "github.com/ishidawataru/sctp",
    "pkg" : "github.com/ishidawataru/sctp",
    "project" : "kubernetes/kubernetes",
    "snippet" : "_, _, err := getsockopt(c.fd(), SCTP_DEFAULT_SENT_PARAM, uintptr(unsafe.Pointer(info)), uintptr(unsafe.Pointer(&optlen)))",
    "version" : "v0.0.0-20190723014705-7c296d48a2b5"
  },
  "cfg" : {
    "blocks" : [ {
      "update-vars" : [ ],
      "successors" : [ 2 ],
      "in-vars" : [ 1 ],
      "exit" : false,
      "out-vars" : [ 1 ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[entry]",
      "entry" : true,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ ],
      "in-vars" : [ ],
      "exit" : true,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[exit]",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 3 ],
      "in-vars" : [ 1 ],
      "exit" : false,
      "out-vars" : [ 4, 1 ],
      "decl-vars" : [ 4 ],
      "line-start" : 487,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "info"
          }
        } ],
        "right" : [ {
          "go-type" : 3,
          "kind" : "expression",
          "operator" : "&",
          "target" : {
            "declared" : {
              "go-type" : 4,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 4,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "SndRcvInfo"
              }
            },
            "go-type" : 4,
            "kind" : "literal",
            "type" : "composite",
            "values" : [ ]
          },
          "type" : "unary"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 487,
      "code" : "info := &SndRcvInfo{}",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 4 ],
      "in-vars" : [ 4, 1 ],
      "exit" : false,
      "out-vars" : [ 1, 4, 5 ],
      "decl-vars" : [ 5 ],
      "line-start" : 488,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "optlen"
          }
        } ],
        "right" : [ {
          "go-type" : 23,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "32"
          }
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 488,
      "code" : "optlen := unsafe.Sizeof(*info)",
      "entry" : false,
      "use-vars" : [ 4 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 5 ],
      "in-vars" : [ 4, 5, 1 ],
      "exit" : false,
      "out-vars" : [ 4, 6 ],
      "decl-vars" : [ 7, 8, 6 ],
      "line-start" : 489,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "_"
          }
        }, {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "_"
          }
        }, {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "err"
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "arguments" : [ ],
            "ellipsis" : false,
            "function" : {
              "field" : {
                "ident-kind" : "Func",
                "kind" : "ident",
                "value" : "fd"
              },
              "go-type" : 28,
              "kind" : "expression",
              "target" : {
                "go-type" : 14,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "c",
                  "variable" : 1
                }
              },
              "type" : "selector"
            },
            "go-type" : 27,
            "kind" : "expression",
            "type" : "call"
          }, {
            "go-type" : 23,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "10"
            }
          }, {
            "coerced-to" : {
              "go-type" : 23,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 23,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "uintptr"
              }
            },
            "go-type" : 23,
            "kind" : "expression",
            "target" : {
              "coerced-to" : {
                "go-type" : 30,
                "kind" : "type",
                "qualifier" : {
                  "ident-kind" : "PkgName",
                  "kind" : "ident",
                  "package" : 1,
                  "value" : "unsafe"
                },
                "type" : "identifier",
                "value" : {
                  "go-type" : 30,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "Pointer"
                }
              },
              "go-type" : 30,
              "kind" : "expression",
              "target" : {
                "go-type" : 3,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "info",
                  "variable" : 4
                }
              },
              "type" : "cast"
            },
            "type" : "cast"
          }, {
            "coerced-to" : {
              "go-type" : 23,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 23,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "uintptr"
              }
            },
            "go-type" : 23,
            "kind" : "expression",
            "target" : {
              "coerced-to" : {
                "go-type" : 30,
                "kind" : "type",
                "qualifier" : {
                  "ident-kind" : "PkgName",
                  "kind" : "ident",
                  "package" : 1,
                  "value" : "unsafe"
                },
                "type" : "identifier",
                "value" : {
                  "go-type" : 30,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "Pointer"
                }
              },
              "go-type" : 30,
              "kind" : "expression",
              "target" : {
                "go-type" : 31,
                "kind" : "expression",
                "operator" : "&",
                "target" : {
                  "go-type" : 23,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "optlen",
                    "variable" : 5
                  }
                },
                "type" : "unary"
              },
              "type" : "cast"
            },
            "type" : "cast"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 25,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "getsockopt"
            }
          },
          "go-type" : 24,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 489,
      "code" : "_, _, err := getsockopt(c.fd(), SCTP_DEFAULT_SENT_PARAM, uintptr(unsafe.Pointer(info)), uintptr(unsafe.Pointer(&optlen)))",
      "entry" : false,
      "use-vars" : [ 4, 1, 5 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 4, 6 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 490,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 3,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "info",
            "variable" : 4
          }
        }, {
          "go-type" : 9,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "err",
            "variable" : 6
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 490,
      "code" : "return info, err",
      "entry" : false,
      "use-vars" : [ 6, 4 ]
    } ],
    "code" : "func (c *SCTPConn) GetDefaultSentParam() (*SndRcvInfo, error) {\n\tinfo := &SndRcvInfo{}\n\toptlen := unsafe.Sizeof(*info)\n\t_, _, err := getsockopt(c.fd(), SCTP_DEFAULT_SENT_PARAM, uintptr(unsafe.Pointer(info)), uintptr(unsafe.Pointer(&optlen)))\n\treturn info, err\n}",
    "defines" : [ 0 ],
    "functions" : [ {
      "name" : "GetDefaultSentParam",
      "package" : 0,
      "type" : 0,
      "exported" : true
    }, {
      "name" : "getsockopt",
      "package" : 0,
      "type" : 25,
      "exported" : false
    }, {
      "name" : "fd",
      "package" : 0,
      "type" : 28,
      "exported" : false
    } ],
    "line-end" : 491,
    "line-start" : 486,
    "names" : [ "GetDefaultSentParam" ],
    "package" : 0,
    "packages" : [ {
      "name" : "sctp",
      "path" : "github.com/ishidawataru/sctp"
    }, {
      "name" : "unsafe",
      "path" : "unsafe"
    } ],
    "params" : [ ],
    "receivers" : [ 1 ],
    "results" : [ 2, 3 ],
    "type" : "function",
    "types" : [ {
      "name" : "func() (*github.com/ishidawataru/sctp.SndRcvInfo, error)",
      "params" : 1,
      "recv" : 1,
      "results" : 2,
      "type" : "Signature",
      "underlying" : 0,
      "variadic" : false
    }, {
      "fields" : [ ],
      "name" : "()",
      "type" : "Tuple",
      "underlying" : 1
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 3
      }, {
        "name" : "",
        "type" : 9
      } ],
      "name" : "(*github.com/ishidawataru/sctp.SndRcvInfo, error)",
      "type" : "Tuple",
      "underlying" : 2
    }, {
      "elem" : 4,
      "name" : "*github.com/ishidawataru/sctp.SndRcvInfo",
      "type" : "Pointer",
      "underlying" : 3
    }, {
      "local-name" : "SndRcvInfo",
      "name" : "github.com/ishidawataru/sctp.SndRcvInfo",
      "package" : 0,
      "type" : "Named",
      "underlying" : 5
    }, {
      "fields" : [ {
        "name" : "Stream",
        "type" : 6
      }, {
        "name" : "SSN",
        "type" : 6
      }, {
        "name" : "Flags",
        "type" : 6
      }, {
        "name" : "_",
        "type" : 6
      }, {
        "name" : "PPID",
        "type" : 7
      }, {
        "name" : "Context",
        "type" : 7
      }, {
        "name" : "TTL",
        "type" : 7
      }, {
        "name" : "TSN",
        "type" : 7
      }, {
        "name" : "CumTSN",
        "type" : 7
      }, {
        "name" : "AssocID",
        "type" : 8
      } ],
      "name" : "struct{Stream uint16; SSN uint16; Flags uint16; _ uint16; PPID uint32; Context uint32; TTL uint32; TSN uint32; CumTSN uint32; AssocID int32}",
      "type" : "Struct",
      "underlying" : 5
    }, {
      "name" : "uint16",
      "type" : "Basic",
      "underlying" : 6
    }, {
      "name" : "uint32",
      "type" : "Basic",
      "underlying" : 7
    }, {
      "name" : "int32",
      "type" : "Basic",
      "underlying" : 8
    }, {
      "local-name" : "error",
      "name" : "error",
      "package" : -1,
      "type" : "Named",
      "underlying" : 10
    }, {
      "methods" : [ {
        "name" : "Error",
        "type" : 11
      } ],
      "name" : "interface{Error() string}",
      "type" : "Interface",
      "underlying" : 10
    }, {
      "name" : "func() string",
      "params" : 1,
      "recv" : 0,
      "results" : 12,
      "type" : "Signature",
      "underlying" : 11,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 13
      } ],
      "name" : "(string)",
      "type" : "Tuple",
      "underlying" : 12
    }, {
      "name" : "string",
      "type" : "Basic",
      "underlying" : 13
    }, {
      "elem" : 15,
      "name" : "*github.com/ishidawataru/sctp.SCTPConn",
      "type" : "Pointer",
      "underlying" : 14
    }, {
      "local-name" : "SCTPConn",
      "name" : "github.com/ishidawataru/sctp.SCTPConn",
      "package" : 0,
      "type" : "Named",
      "underlying" : 16
    }, {
      "fields" : [ {
        "name" : "_fd",
        "type" : 8
      }, {
        "name" : "notificationHandler",
        "type" : 17
      } ],
      "name" : "struct{_fd int32; notificationHandler github.com/ishidawataru/sctp.NotificationHandler}",
      "type" : "Struct",
      "underlying" : 16
    }, {
      "local-name" : "NotificationHandler",
      "name" : "github.com/ishidawataru/sctp.NotificationHandler",
      "package" : 0,
      "type" : "Named",
      "underlying" : 18
    }, {
      "name" : "func([]byte) error",
      "params" : 19,
      "recv" : -1,
      "results" : 22,
      "type" : "Signature",
      "underlying" : 18,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 20
      } ],
      "name" : "([]byte)",
      "type" : "Tuple",
      "underlying" : 19
    }, {
      "elem" : 21,
      "name" : "[]byte",
      "type" : "Slice",
      "underlying" : 20
    }, {
      "name" : "byte",
      "type" : "Basic",
      "underlying" : 21
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 9
      } ],
      "name" : "(error)",
      "type" : "Tuple",
      "underlying" : 22
    }, {
      "name" : "uintptr",
      "type" : "Basic",
      "underlying" : 23
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 23
      }, {
        "name" : "",
        "type" : 23
      }, {
        "name" : "",
        "type" : 9
      } ],
      "name" : "(uintptr, uintptr, error)",
      "type" : "Tuple",
      "underlying" : 24
    }, {
      "name" : "func(fd int, optname uintptr, optval uintptr, optlen uintptr) (uintptr, uintptr, error)",
      "params" : 26,
      "recv" : -1,
      "results" : 24,
      "type" : "Signature",
      "underlying" : 25,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "fd",
        "type" : 27
      }, {
        "name" : "optname",
        "type" : 23
      }, {
        "name" : "optval",
        "type" : 23
      }, {
        "name" : "optlen",
        "type" : 23
      } ],
      "name" : "(fd int, optname uintptr, optval uintptr, optlen uintptr)",
      "type" : "Tuple",
      "underlying" : 26
    }, {
      "name" : "int",
      "type" : "Basic",
      "underlying" : 27
    }, {
      "name" : "func() int",
      "params" : 1,
      "recv" : -1,
      "results" : 29,
      "type" : "Signature",
      "underlying" : 28,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 27
      } ],
      "name" : "(int)",
      "type" : "Tuple",
      "underlying" : 29
    }, {
      "local-name" : "Pointer",
      "name" : "unsafe.Pointer",
      "package" : 1,
      "type" : "Basic",
      "underlying" : 30
    }, {
      "elem" : 23,
      "name" : "*uintptr",
      "type" : "Pointer",
      "underlying" : 31
    } ],
    "variables" : [ {
      "name" : "",
      "package" : -1,
      "type" : 9,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "c",
      "package" : 0,
      "type" : 14,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "[res0]",
      "package" : 0,
      "type" : 3,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "[res1]",
      "package" : 0,
      "type" : 9,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "info",
      "package" : 0,
      "type" : 3,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "optlen",
      "package" : 0,
      "type" : 23,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "err",
      "package" : 0,
      "type" : 9,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "_",
      "package" : 0,
      "type" : 23,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "_",
      "package" : 0,
      "type" : 23,
      "exported" : false,
      "embedded" : false,
      "field" : false
    } ]
  },
  "go-version" : "1.14.3"
}