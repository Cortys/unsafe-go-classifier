{
  "usage" : {
    "file" : "arith.go",
    "label1" : "delegate",
    "label2" : "ffi",
    "line" : "631",
    "module" : "gorgonia.org/gorgonia",
    "pkg" : "gorgonia.org/gorgonia/cuda",
    "project" : "gorgonia/gorgonia",
    "snippet" : "unsafe.Pointer(&memB),",
    "version" : "project"
  },
  "cfg" : {
    "blocks" : [ {
      "update-vars" : [ ],
      "successors" : [ 2 ],
      "in-vars" : [ 170, 171, 169, 172 ],
      "exit" : false,
      "out-vars" : [ 170, 171, 169, 172 ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[entry]",
      "entry" : true,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ ],
      "in-vars" : [ ],
      "exit" : true,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[exit]",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 3 ],
      "in-vars" : [ 170, 171, 169, 172 ],
      "exit" : false,
      "out-vars" : [ 171, 169, 172, 175, 170 ],
      "decl-vars" : [ 175 ],
      "line-start" : 590,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "name"
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "a",
              "variable" : 170
            }
          }, {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "b",
              "variable" : 171
            }
          }, {
            "go-type" : 37,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "mod"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 548,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "constructName2"
            }
          },
          "go-type" : 37,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 590,
      "code" : "name := constructName2(a, b, \"mod\")",
      "entry" : false,
      "use-vars" : [ 170, 171 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 4, 6 ],
      "in-vars" : [ 171, 169, 172, 175, 170 ],
      "exit" : false,
      "out-vars" : [ 175, 170, 171, 169, 172 ],
      "decl-vars" : [ ],
      "line-start" : 592,
      "ast" : {
        "condition" : {
          "go-type" : 14,
          "kind" : "expression",
          "operator" : "!",
          "target" : {
            "arguments" : [ {
              "go-type" : 37,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "name",
                "variable" : 175
              }
            } ],
            "ellipsis" : false,
            "function" : {
              "field" : {
                "ident-kind" : "Func",
                "kind" : "ident",
                "value" : "HasFunc"
              },
              "go-type" : 550,
              "kind" : "expression",
              "target" : {
                "go-type" : 243,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "e",
                  "variable" : 169
                }
              },
              "type" : "selector"
            },
            "go-type" : 14,
            "kind" : "expression",
            "type" : "call"
          },
          "type" : "unary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 594,
      "code" : "if !e.HasFunc(name) {\n\treturn nil, errors.Errorf(\"Unable to perform Mod(). The tensor engine does not have the function %q\", name)\n}",
      "entry" : false,
      "use-vars" : [ 169, 175 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 175 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 593,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 551,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Nil",
            "kind" : "ident",
            "value" : "nil"
          }
        }, {
          "arguments" : [ {
            "go-type" : 37,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "Unable to perform Mod(). The tensor engine does not have the function %q"
            }
          }, {
            "go-type" : 37,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "name",
              "variable" : 175
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 552,
            "kind" : "expression",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 12,
              "value" : "errors"
            },
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "Errorf"
            }
          },
          "go-type" : 90,
          "kind" : "expression",
          "type" : "call"
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 593,
      "code" : "return nil, errors.Errorf(\"Unable to perform Mod(). The tensor engine does not have the function %q\", name)",
      "entry" : false,
      "use-vars" : [ 175 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 7, 8 ],
      "in-vars" : [ 174, 169, 172, 175, 170, 171 ],
      "exit" : false,
      "out-vars" : [ 172, 175, 170, 171, 174, 169 ],
      "decl-vars" : [ ],
      "line-start" : 596,
      "ast" : {
        "condition" : {
          "go-type" : 558,
          "kind" : "expression",
          "left" : {
            "go-type" : 90,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "err",
              "variable" : 174
            }
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 551,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Nil",
              "kind" : "ident",
              "value" : "nil"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 598,
      "code" : "if err = binaryCheck(a, b); err != nil {\n\treturn nil, errors.Wrap(err, \"Basic checks failed for Mod\")\n}",
      "entry" : false,
      "use-vars" : [ 174 ]
    }, {
      "update-vars" : [ 174 ],
      "successors" : [ 5 ],
      "in-vars" : [ 175, 170, 171, 169, 172 ],
      "exit" : false,
      "out-vars" : [ 172, 175, 170, 171, 174, 169 ],
      "decl-vars" : [ ],
      "line-start" : 596,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 90,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "err",
            "variable" : 174
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "a",
              "variable" : 170
            }
          }, {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "b",
              "variable" : 171
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 555,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "binaryCheck"
            }
          },
          "go-type" : 90,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 174 ],
      "line-end" : 596,
      "code" : "err = binaryCheck(a, b)",
      "entry" : false,
      "use-vars" : [ 170, 171 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 174 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 597,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 551,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Nil",
            "kind" : "ident",
            "value" : "nil"
          }
        }, {
          "arguments" : [ {
            "go-type" : 90,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "err",
              "variable" : 174
            }
          }, {
            "go-type" : 37,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "Basic checks failed for Mod"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 559,
            "kind" : "expression",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 12,
              "value" : "errors"
            },
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "Wrap"
            }
          },
          "go-type" : 90,
          "kind" : "expression",
          "type" : "call"
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 597,
      "code" : "return nil, errors.Wrap(err, \"Basic checks failed for Mod\")",
      "entry" : false,
      "use-vars" : [ 174 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 9 ],
      "in-vars" : [ 175, 170, 171, 169, 172 ],
      "exit" : false,
      "out-vars" : [ 175, 170, 171, 169, 172 ],
      "decl-vars" : [ 193 ],
      "line-start" : 600,
      "ast" : {
        "kind" : "statement",
        "target" : {
          "kind" : "decl",
          "specs" : [ {
            "comments" : [ ],
            "declared-type" : {
              "go-type" : 561,
              "kind" : "type",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 1,
                "value" : "tensor"
              },
              "type" : "identifier",
              "value" : {
                "go-type" : 561,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "DenseTensor"
              }
            },
            "kind" : "spec",
            "names" : [ {
              "ident-kind" : "NoKind",
              "kind" : "ident",
              "value" : "reuse"
            } ],
            "type" : "var",
            "values" : [ ]
          } ],
          "type" : "var"
        },
        "type" : "declaration"
      },
      "assign-vars" : [ ],
      "line-end" : 600,
      "code" : "var reuse tensor.DenseTensor",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 11 ],
      "in-vars" : [ 170, 171, 169, 172, 175 ],
      "exit" : false,
      "out-vars" : [ 170, 171, 169, 172, 175 ],
      "decl-vars" : [ 194, 195 ],
      "line-start" : 601,
      "ast" : {
        "kind" : "statement",
        "target" : {
          "kind" : "decl",
          "specs" : [ {
            "comments" : [ ],
            "declared-type" : {
              "go-type" : 14,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 14,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "bool"
              }
            },
            "kind" : "spec",
            "names" : [ {
              "ident-kind" : "NoKind",
              "kind" : "ident",
              "value" : "safe"
            }, {
              "ident-kind" : "NoKind",
              "kind" : "ident",
              "value" : "toReuse"
            } ],
            "type" : "var",
            "values" : [ ]
          } ],
          "type" : "var"
        },
        "type" : "declaration"
      },
      "assign-vars" : [ ],
      "line-end" : 601,
      "code" : "var safe, toReuse bool",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 12, 13 ],
      "in-vars" : [ 195, 175, 170, 171, 174, 193, 169, 194 ],
      "exit" : false,
      "out-vars" : [ 195, 175, 170, 171, 174, 193, 169, 194 ],
      "decl-vars" : [ ],
      "line-start" : 602,
      "ast" : {
        "condition" : {
          "go-type" : 558,
          "kind" : "expression",
          "left" : {
            "go-type" : 90,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "err",
              "variable" : 174
            }
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 551,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Nil",
              "kind" : "ident",
              "value" : "nil"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 604,
      "code" : "if reuse, safe, toReuse, _, _, err = handleFuncOpts(a.Shape(), a.Dtype(), a.DataOrder(), true, opts...); err != nil {\n\treturn nil, errors.Wrap(err, \"Unable to handle funcOpts\")\n}",
      "entry" : false,
      "use-vars" : [ 174 ]
    }, {
      "update-vars" : [ 195, 194, 174, 193 ],
      "successors" : [ 10 ],
      "in-vars" : [ 169, 172, 175, 170, 171 ],
      "exit" : false,
      "out-vars" : [ 174, 193, 169, 194, 195, 175, 170, 171 ],
      "decl-vars" : [ ],
      "line-start" : 602,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 561,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "reuse",
            "variable" : 193
          }
        }, {
          "go-type" : 14,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "safe",
            "variable" : 194
          }
        }, {
          "go-type" : 14,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "toReuse",
            "variable" : 195
          }
        }, {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "_"
          }
        }, {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "_"
          }
        }, {
          "go-type" : 90,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "err",
            "variable" : 174
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "arguments" : [ ],
            "ellipsis" : false,
            "function" : {
              "field" : {
                "ident-kind" : "Func",
                "kind" : "ident",
                "value" : "Shape"
              },
              "go-type" : 168,
              "kind" : "expression",
              "target" : {
                "go-type" : 2,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "a",
                  "variable" : 170
                }
              },
              "type" : "selector"
            },
            "go-type" : 170,
            "kind" : "expression",
            "type" : "call"
          }, {
            "arguments" : [ ],
            "ellipsis" : false,
            "function" : {
              "field" : {
                "ident-kind" : "Func",
                "kind" : "ident",
                "value" : "Dtype"
              },
              "go-type" : 102,
              "kind" : "expression",
              "target" : {
                "go-type" : 2,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "a",
                  "variable" : 170
                }
              },
              "type" : "selector"
            },
            "go-type" : 15,
            "kind" : "expression",
            "type" : "call"
          }, {
            "arguments" : [ ],
            "ellipsis" : false,
            "function" : {
              "field" : {
                "ident-kind" : "Func",
                "kind" : "ident",
                "value" : "DataOrder"
              },
              "go-type" : 99,
              "kind" : "expression",
              "target" : {
                "go-type" : 2,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "a",
                  "variable" : 170
                }
              },
              "type" : "selector"
            },
            "go-type" : 101,
            "kind" : "expression",
            "type" : "call"
          }, {
            "go-type" : 14,
            "kind" : "constant",
            "value" : {
              "type" : "BOOL",
              "value" : "true"
            }
          }, {
            "go-type" : 7,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "opts",
              "variable" : 172
            }
          } ],
          "ellipsis" : true,
          "function" : {
            "go-type" : 613,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "handleFuncOpts"
            }
          },
          "go-type" : 612,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 195, 174, 194, 193 ],
      "line-end" : 602,
      "code" : "reuse, safe, toReuse, _, _, err = handleFuncOpts(a.Shape(), a.Dtype(), a.DataOrder(), true, opts...)",
      "entry" : false,
      "use-vars" : [ 172, 170 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 174 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 603,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 551,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Nil",
            "kind" : "ident",
            "value" : "nil"
          }
        }, {
          "arguments" : [ {
            "go-type" : 90,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "err",
              "variable" : 174
            }
          }, {
            "go-type" : 37,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "Unable to handle funcOpts"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 559,
            "kind" : "expression",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 12,
              "value" : "errors"
            },
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "Wrap"
            }
          },
          "go-type" : 90,
          "kind" : "expression",
          "type" : "call"
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 603,
      "code" : "return nil, errors.Wrap(err, \"Unable to handle funcOpts\")",
      "entry" : false,
      "use-vars" : [ 174 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 14 ],
      "in-vars" : [ 194, 195, 175, 170, 171, 193, 169 ],
      "exit" : false,
      "out-vars" : [ 194, 195, 175, 170, 171, 193, 169 ],
      "decl-vars" : [ 196, 197 ],
      "line-start" : 606,
      "ast" : {
        "kind" : "statement",
        "target" : {
          "kind" : "decl",
          "specs" : [ {
            "comments" : [ ],
            "declared-type" : {
              "go-type" : 269,
              "kind" : "type",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 10,
                "value" : "cu"
              },
              "type" : "identifier",
              "value" : {
                "go-type" : 269,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "DevicePtr"
              }
            },
            "kind" : "spec",
            "names" : [ {
              "ident-kind" : "NoKind",
              "kind" : "ident",
              "value" : "mem"
            }, {
              "ident-kind" : "NoKind",
              "kind" : "ident",
              "value" : "memB"
            } ],
            "type" : "var",
            "values" : [ ]
          } ],
          "type" : "var"
        },
        "type" : "declaration"
      },
      "assign-vars" : [ ],
      "line-end" : 606,
      "code" : "var mem, memB cu.DevicePtr",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 15 ],
      "in-vars" : [ 193, 169, 194, 195, 175, 170, 171 ],
      "exit" : false,
      "out-vars" : [ 193, 169, 194, 195, 175, 170, 171 ],
      "decl-vars" : [ 198 ],
      "line-start" : 607,
      "ast" : {
        "kind" : "statement",
        "target" : {
          "kind" : "decl",
          "specs" : [ {
            "comments" : [ ],
            "declared-type" : {
              "go-type" : 117,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 117,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "int64"
              }
            },
            "kind" : "spec",
            "names" : [ {
              "ident-kind" : "NoKind",
              "kind" : "ident",
              "value" : "size"
            } ],
            "type" : "var",
            "values" : [ ]
          } ],
          "type" : "var"
        },
        "type" : "declaration"
      },
      "assign-vars" : [ ],
      "line-end" : 607,
      "code" : "var size int64",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 16, 23, 27 ],
      "in-vars" : [ 194, 195, 175, 170, 171, 193, 169 ],
      "exit" : false,
      "out-vars" : [ 194, 195, 175, 170, 171, 193, 169 ],
      "decl-vars" : [ ],
      "line-start" : 609,
      "ast" : {
        "condition" : null,
        "kind" : "statement",
        "type" : "switch"
      },
      "assign-vars" : [ ],
      "line-end" : 624,
      "code" : "switch {\ncase toReuse:\n\tmem = cu.DevicePtr(reuse.Uintptr())\n\tmemA := cu.DevicePtr(a.Uintptr())\n\tmemSize := int64(a.MemSize())\n\te.memcpy(mem, memA, memSize)\n\n\tsize = int64(logicalSize(reuse.Shape()))\n\tretVal = reuse\ncase !safe:\n\tmem = cu.DevicePtr(a.Uintptr())\n\tretVal = a\n\tsize = int64(logicalSize(a.Shape()))\ndefault:\n\treturn nil, errors.New(\"Impossible state: A reuse tensor must be passed in, or the operation must be unsafe. Incr and safe operations are not supported\")\n}",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 17 ],
      "in-vars" : [ 175, 170, 171, 193, 169, 195 ],
      "exit" : false,
      "out-vars" : [ 175, 170, 171, 193, 169 ],
      "decl-vars" : [ ],
      "line-start" : 610,
      "ast" : {
        "expressions" : [ {
          "go-type" : 14,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "toReuse",
            "variable" : 195
          }
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 617,
      "code" : "case toReuse:\n\tmem = cu.DevicePtr(reuse.Uintptr())\n\tmemA := cu.DevicePtr(a.Uintptr())\n\tmemSize := int64(a.MemSize())\n\te.memcpy(mem, memA, memSize)\n\n\tsize = int64(logicalSize(reuse.Shape()))\n\tretVal = reuse",
      "entry" : false,
      "use-vars" : [ 195 ]
    }, {
      "update-vars" : [ 197 ],
      "successors" : [ 18 ],
      "in-vars" : [ 170, 171, 193, 169, 175 ],
      "exit" : false,
      "out-vars" : [ 170, 171, 193, 169, 197, 175 ],
      "decl-vars" : [ ],
      "line-start" : 611,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 269,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "mem",
            "variable" : 197
          }
        } ],
        "right" : [ {
          "coerced-to" : {
            "go-type" : 269,
            "kind" : "type",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 10,
              "value" : "cu"
            },
            "type" : "identifier",
            "value" : {
              "go-type" : 269,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "DevicePtr"
            }
          },
          "go-type" : 269,
          "kind" : "expression",
          "target" : {
            "arguments" : [ ],
            "ellipsis" : false,
            "function" : {
              "field" : {
                "ident-kind" : "Func",
                "kind" : "ident",
                "value" : "Uintptr"
              },
              "go-type" : 79,
              "kind" : "expression",
              "target" : {
                "go-type" : 561,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "reuse",
                  "variable" : 193
                }
              },
              "type" : "selector"
            },
            "go-type" : 39,
            "kind" : "expression",
            "type" : "call"
          },
          "type" : "cast"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 197 ],
      "line-end" : 611,
      "code" : "mem = cu.DevicePtr(reuse.Uintptr())",
      "entry" : false,
      "use-vars" : [ 193 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 19 ],
      "in-vars" : [ 171, 193, 169, 197, 175, 170 ],
      "exit" : false,
      "out-vars" : [ 193, 169, 199, 197, 175, 170, 171 ],
      "decl-vars" : [ 199 ],
      "line-start" : 612,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "memA"
          }
        } ],
        "right" : [ {
          "coerced-to" : {
            "go-type" : 269,
            "kind" : "type",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 10,
              "value" : "cu"
            },
            "type" : "identifier",
            "value" : {
              "go-type" : 269,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "DevicePtr"
            }
          },
          "go-type" : 269,
          "kind" : "expression",
          "target" : {
            "arguments" : [ ],
            "ellipsis" : false,
            "function" : {
              "field" : {
                "ident-kind" : "Func",
                "kind" : "ident",
                "value" : "Uintptr"
              },
              "go-type" : 79,
              "kind" : "expression",
              "target" : {
                "go-type" : 2,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "a",
                  "variable" : 170
                }
              },
              "type" : "selector"
            },
            "go-type" : 39,
            "kind" : "expression",
            "type" : "call"
          },
          "type" : "cast"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 612,
      "code" : "memA := cu.DevicePtr(a.Uintptr())",
      "entry" : false,
      "use-vars" : [ 170 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 20 ],
      "in-vars" : [ 175, 170, 171, 193, 169, 199, 197 ],
      "exit" : false,
      "out-vars" : [ 169, 199, 200, 197, 175, 171, 193 ],
      "decl-vars" : [ 200 ],
      "line-start" : 613,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "memSize"
          }
        } ],
        "right" : [ {
          "coerced-to" : {
            "go-type" : 117,
            "kind" : "type",
            "type" : "identifier",
            "value" : {
              "go-type" : 117,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "int64"
            }
          },
          "go-type" : 117,
          "kind" : "expression",
          "target" : {
            "arguments" : [ ],
            "ellipsis" : false,
            "function" : {
              "field" : {
                "ident-kind" : "Func",
                "kind" : "ident",
                "value" : "MemSize"
              },
              "go-type" : 79,
              "kind" : "expression",
              "target" : {
                "go-type" : 2,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "a",
                  "variable" : 170
                }
              },
              "type" : "selector"
            },
            "go-type" : 39,
            "kind" : "expression",
            "type" : "call"
          },
          "type" : "cast"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 613,
      "code" : "memSize := int64(a.MemSize())",
      "entry" : false,
      "use-vars" : [ 170 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 21 ],
      "in-vars" : [ 193, 169, 199, 200, 197, 175, 171 ],
      "exit" : false,
      "out-vars" : [ 175, 171, 193, 169, 197 ],
      "decl-vars" : [ ],
      "line-start" : 614,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 269,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "mem",
              "variable" : 197
            }
          }, {
            "go-type" : 269,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "memA",
              "variable" : 199
            }
          }, {
            "go-type" : 117,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "memSize",
              "variable" : 200
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "memcpy"
            },
            "go-type" : 615,
            "kind" : "expression",
            "target" : {
              "go-type" : 243,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "e",
                "variable" : 169
              }
            },
            "type" : "selector"
          },
          "go-type" : 20,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 614,
      "code" : "e.memcpy(mem, memA, memSize)",
      "entry" : false,
      "use-vars" : [ 169, 197, 199, 200 ]
    }, {
      "update-vars" : [ 198 ],
      "successors" : [ 22 ],
      "in-vars" : [ 169, 197, 175, 171, 193 ],
      "exit" : false,
      "out-vars" : [ 193, 169, 197, 175, 171, 198 ],
      "decl-vars" : [ ],
      "line-start" : 616,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 117,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "size",
            "variable" : 198
          }
        } ],
        "right" : [ {
          "coerced-to" : {
            "go-type" : 117,
            "kind" : "type",
            "type" : "identifier",
            "value" : {
              "go-type" : 117,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "int64"
            }
          },
          "go-type" : 117,
          "kind" : "expression",
          "target" : {
            "arguments" : [ {
              "arguments" : [ ],
              "ellipsis" : false,
              "function" : {
                "field" : {
                  "ident-kind" : "Func",
                  "kind" : "ident",
                  "value" : "Shape"
                },
                "go-type" : 168,
                "kind" : "expression",
                "target" : {
                  "go-type" : 561,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "reuse",
                    "variable" : 193
                  }
                },
                "type" : "selector"
              },
              "go-type" : 170,
              "kind" : "expression",
              "type" : "call"
            } ],
            "ellipsis" : false,
            "function" : {
              "go-type" : 617,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Func",
                "kind" : "ident",
                "value" : "logicalSize"
              }
            },
            "go-type" : 22,
            "kind" : "expression",
            "type" : "call"
          },
          "type" : "cast"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 198 ],
      "line-end" : 616,
      "code" : "size = int64(logicalSize(reuse.Shape()))",
      "entry" : false,
      "use-vars" : [ 193 ]
    }, {
      "update-vars" : [ 173 ],
      "successors" : [ 29 ],
      "in-vars" : [ 171, 198, 193, 169, 197, 175 ],
      "exit" : false,
      "out-vars" : [ 175, 171, 198, 169, 197 ],
      "decl-vars" : [ ],
      "line-start" : 617,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 2,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "retVal",
            "variable" : 173
          }
        } ],
        "right" : [ {
          "go-type" : 561,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "reuse",
            "variable" : 193
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 173 ],
      "line-end" : 617,
      "code" : "retVal = reuse",
      "entry" : false,
      "use-vars" : [ 193 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 24 ],
      "in-vars" : [ 175, 170, 171, 169, 194 ],
      "exit" : false,
      "out-vars" : [ 175, 170, 171, 169 ],
      "decl-vars" : [ ],
      "line-start" : 618,
      "ast" : {
        "expressions" : [ {
          "go-type" : 14,
          "kind" : "expression",
          "operator" : "!",
          "target" : {
            "go-type" : 14,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "safe",
              "variable" : 194
            }
          },
          "type" : "unary"
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 621,
      "code" : "case !safe:\n\tmem = cu.DevicePtr(a.Uintptr())\n\tretVal = a\n\tsize = int64(logicalSize(a.Shape()))",
      "entry" : false,
      "use-vars" : [ 194 ]
    }, {
      "update-vars" : [ 197 ],
      "successors" : [ 25 ],
      "in-vars" : [ 169, 175, 170, 171 ],
      "exit" : false,
      "out-vars" : [ 169, 197, 175, 170, 171 ],
      "decl-vars" : [ ],
      "line-start" : 619,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 269,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "mem",
            "variable" : 197
          }
        } ],
        "right" : [ {
          "coerced-to" : {
            "go-type" : 269,
            "kind" : "type",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 10,
              "value" : "cu"
            },
            "type" : "identifier",
            "value" : {
              "go-type" : 269,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "DevicePtr"
            }
          },
          "go-type" : 269,
          "kind" : "expression",
          "target" : {
            "arguments" : [ ],
            "ellipsis" : false,
            "function" : {
              "field" : {
                "ident-kind" : "Func",
                "kind" : "ident",
                "value" : "Uintptr"
              },
              "go-type" : 79,
              "kind" : "expression",
              "target" : {
                "go-type" : 2,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "a",
                  "variable" : 170
                }
              },
              "type" : "selector"
            },
            "go-type" : 39,
            "kind" : "expression",
            "type" : "call"
          },
          "type" : "cast"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 197 ],
      "line-end" : 619,
      "code" : "mem = cu.DevicePtr(a.Uintptr())",
      "entry" : false,
      "use-vars" : [ 170 ]
    }, {
      "update-vars" : [ 173 ],
      "successors" : [ 26 ],
      "in-vars" : [ 175, 170, 171, 169, 197 ],
      "exit" : false,
      "out-vars" : [ 171, 169, 197, 175, 170 ],
      "decl-vars" : [ ],
      "line-start" : 620,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 2,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "retVal",
            "variable" : 173
          }
        } ],
        "right" : [ {
          "go-type" : 2,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "a",
            "variable" : 170
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 173 ],
      "line-end" : 620,
      "code" : "retVal = a",
      "entry" : false,
      "use-vars" : [ 170 ]
    }, {
      "update-vars" : [ 198 ],
      "successors" : [ 29 ],
      "in-vars" : [ 197, 175, 170, 171, 169 ],
      "exit" : false,
      "out-vars" : [ 175, 171, 198, 169, 197 ],
      "decl-vars" : [ ],
      "line-start" : 621,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 117,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "size",
            "variable" : 198
          }
        } ],
        "right" : [ {
          "coerced-to" : {
            "go-type" : 117,
            "kind" : "type",
            "type" : "identifier",
            "value" : {
              "go-type" : 117,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "int64"
            }
          },
          "go-type" : 117,
          "kind" : "expression",
          "target" : {
            "arguments" : [ {
              "arguments" : [ ],
              "ellipsis" : false,
              "function" : {
                "field" : {
                  "ident-kind" : "Func",
                  "kind" : "ident",
                  "value" : "Shape"
                },
                "go-type" : 168,
                "kind" : "expression",
                "target" : {
                  "go-type" : 2,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "a",
                    "variable" : 170
                  }
                },
                "type" : "selector"
              },
              "go-type" : 170,
              "kind" : "expression",
              "type" : "call"
            } ],
            "ellipsis" : false,
            "function" : {
              "go-type" : 617,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Func",
                "kind" : "ident",
                "value" : "logicalSize"
              }
            },
            "go-type" : 22,
            "kind" : "expression",
            "type" : "call"
          },
          "type" : "cast"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 198 ],
      "line-end" : 621,
      "code" : "size = int64(logicalSize(a.Shape()))",
      "entry" : false,
      "use-vars" : [ 170 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 28 ],
      "in-vars" : [ ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 622,
      "ast" : {
        "expressions" : [ ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 623,
      "code" : "default:\n\treturn nil, errors.New(\"Impossible state: A reuse tensor must be passed in, or the operation must be unsafe. Incr and safe operations are not supported\")",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 623,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 551,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Nil",
            "kind" : "ident",
            "value" : "nil"
          }
        }, {
          "arguments" : [ {
            "go-type" : 37,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "Impossible state: A reuse tensor must be passed in, or the operation must be unsafe. Incr and safe operations are not supported"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 619,
            "kind" : "expression",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 12,
              "value" : "errors"
            },
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "New"
            }
          },
          "go-type" : 90,
          "kind" : "expression",
          "type" : "call"
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 623,
      "code" : "return nil, errors.New(\"Impossible state: A reuse tensor must be passed in, or the operation must be unsafe. Incr and safe operations are not supported\")",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ 196 ],
      "successors" : [ 30 ],
      "in-vars" : [ 169, 197, 175, 171, 198 ],
      "exit" : false,
      "out-vars" : [ 175, 198, 169, 197, 196 ],
      "decl-vars" : [ ],
      "line-start" : 626,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 269,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "memB",
            "variable" : 196
          }
        } ],
        "right" : [ {
          "coerced-to" : {
            "go-type" : 269,
            "kind" : "type",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 10,
              "value" : "cu"
            },
            "type" : "identifier",
            "value" : {
              "go-type" : 269,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "DevicePtr"
            }
          },
          "go-type" : 269,
          "kind" : "expression",
          "target" : {
            "arguments" : [ ],
            "ellipsis" : false,
            "function" : {
              "field" : {
                "ident-kind" : "Func",
                "kind" : "ident",
                "value" : "Uintptr"
              },
              "go-type" : 79,
              "kind" : "expression",
              "target" : {
                "go-type" : 2,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "b",
                  "variable" : 171
                }
              },
              "type" : "selector"
            },
            "go-type" : 39,
            "kind" : "expression",
            "type" : "call"
          },
          "type" : "cast"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 196 ],
      "line-end" : 626,
      "code" : "memB = cu.DevicePtr(b.Uintptr())",
      "entry" : false,
      "use-vars" : [ 171 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 31 ],
      "in-vars" : [ 175, 198, 169, 197, 196 ],
      "exit" : false,
      "out-vars" : [ 198, 169, 202, 197, 196, 175 ],
      "decl-vars" : [ 202 ],
      "line-start" : 627,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "fn"
          }
        } ],
        "right" : [ {
          "go-type" : 339,
          "index" : {
            "go-type" : 37,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "name",
              "variable" : 175
            }
          },
          "kind" : "expression",
          "target" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "f",
              "variable" : 201
            },
            "go-type" : 543,
            "kind" : "expression",
            "target" : {
              "go-type" : 243,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "e",
                "variable" : 169
              }
            },
            "type" : "selector"
          },
          "type" : "index"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 627,
      "code" : "fn := e.f[name]",
      "entry" : false,
      "use-vars" : [ 169, 175 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 32 ],
      "in-vars" : [ 198, 169, 202, 197, 196, 175 ],
      "exit" : false,
      "out-vars" : [ 203, 197, 196, 198, 204, 205, 206, 207, 208, 175, 169, 202 ],
      "decl-vars" : [ 207, 203, 205, 206, 204, 208 ],
      "line-start" : 628,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "gridDimX"
          }
        }, {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "gridDimY"
          }
        }, {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "gridDimZ"
          }
        }, {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "blockDimX"
          }
        }, {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "blockDimY"
          }
        }, {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "blockDimZ"
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "coerced-to" : {
              "go-type" : 22,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 22,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "int"
              }
            },
            "go-type" : 22,
            "kind" : "expression",
            "target" : {
              "go-type" : 117,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "size",
                "variable" : 198
              }
            },
            "type" : "cast"
          } ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "ElemGridSize"
            },
            "go-type" : 622,
            "kind" : "expression",
            "target" : {
              "go-type" : 243,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "e",
                "variable" : 169
              }
            },
            "type" : "selector"
          },
          "go-type" : 621,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 628,
      "code" : "gridDimX, gridDimY, gridDimZ, blockDimX, blockDimY, blockDimZ := e.ElemGridSize(int(size))",
      "entry" : false,
      "use-vars" : [ 198, 169 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 33 ],
      "in-vars" : [ 198, 202, 208, 175, 204, 205, 203, 206, 207, 197, 196, 169 ],
      "exit" : false,
      "out-vars" : [ 175, 198, 169, 203, 206, 209, 196, 202, 204, 205, 207, 208, 197 ],
      "decl-vars" : [ 209 ],
      "line-start" : 629,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "args"
          }
        } ],
        "right" : [ {
          "declared" : {
            "element" : {
              "go-type" : 69,
              "kind" : "type",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 3,
                "value" : "unsafe"
              },
              "type" : "identifier",
              "value" : {
                "go-type" : 69,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "Pointer"
              }
            },
            "go-type" : 348,
            "kind" : "type",
            "type" : "slice"
          },
          "go-type" : 348,
          "kind" : "literal",
          "type" : "composite",
          "values" : [ {
            "coerced-to" : {
              "go-type" : 69,
              "kind" : "type",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 3,
                "value" : "unsafe"
              },
              "type" : "identifier",
              "value" : {
                "go-type" : 69,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "Pointer"
              }
            },
            "go-type" : 69,
            "kind" : "expression",
            "target" : {
              "go-type" : 624,
              "kind" : "expression",
              "operator" : "&",
              "target" : {
                "go-type" : 269,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "mem",
                  "variable" : 197
                }
              },
              "type" : "unary"
            },
            "type" : "cast"
          }, {
            "coerced-to" : {
              "go-type" : 69,
              "kind" : "type",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 3,
                "value" : "unsafe"
              },
              "type" : "identifier",
              "value" : {
                "go-type" : 69,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "Pointer"
              }
            },
            "go-type" : 69,
            "kind" : "expression",
            "target" : {
              "go-type" : 624,
              "kind" : "expression",
              "operator" : "&",
              "target" : {
                "go-type" : 269,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "memB",
                  "variable" : 196
                }
              },
              "type" : "unary"
            },
            "type" : "cast"
          }, {
            "coerced-to" : {
              "go-type" : 69,
              "kind" : "type",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 3,
                "value" : "unsafe"
              },
              "type" : "identifier",
              "value" : {
                "go-type" : 69,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "Pointer"
              }
            },
            "go-type" : 69,
            "kind" : "expression",
            "target" : {
              "go-type" : 625,
              "kind" : "expression",
              "operator" : "&",
              "target" : {
                "go-type" : 117,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "size",
                  "variable" : 198
                }
              },
              "type" : "unary"
            },
            "type" : "cast"
          } ]
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 633,
      "code" : "args := []unsafe.Pointer{\n\tunsafe.Pointer(&mem),\n\tunsafe.Pointer(&memB),\n\tunsafe.Pointer(&size),\n}",
      "entry" : false,
      "use-vars" : [ 196, 198, 197 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 34 ],
      "in-vars" : [ 202, 204, 209, 207, 196, 169, 198, 205, 203, 206, 208, 197, 175 ],
      "exit" : false,
      "out-vars" : [ 204, 205, 206, 209, 207, 197, 175, 202, 203, 208, 196, 198, 169 ],
      "decl-vars" : [ ],
      "line-start" : 634,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 37,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "gx %d, gy %d, gz %d | bx %d by %d, bz %d"
            }
          }, {
            "go-type" : 22,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "gridDimX",
              "variable" : 207
            }
          }, {
            "go-type" : 22,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "gridDimY",
              "variable" : 204
            }
          }, {
            "go-type" : 22,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "gridDimZ",
              "variable" : 205
            }
          }, {
            "go-type" : 22,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "blockDimX",
              "variable" : 203
            }
          }, {
            "go-type" : 22,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "blockDimY",
              "variable" : 206
            }
          }, {
            "go-type" : 22,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "blockDimZ",
              "variable" : 208
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 626,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "logf"
            }
          },
          "go-type" : 20,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 634,
      "code" : "logf(\"gx %d, gy %d, gz %d | bx %d by %d, bz %d\", gridDimX, gridDimY, gridDimZ, blockDimX, blockDimY, blockDimZ)",
      "entry" : false,
      "use-vars" : [ 207, 204, 205, 203, 206, 208 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 35 ],
      "in-vars" : [ 198, 203, 206, 209, 207, 208, 175, 169, 202, 204, 205, 197, 196 ],
      "exit" : false,
      "out-vars" : [ 169, 204, 206, 197, 198, 202, 205, 203, 209, 207, 208 ],
      "decl-vars" : [ ],
      "line-start" : 635,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 37,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "CUDADO %q, Mem: %v MemB: %v size %v, args %v"
            }
          }, {
            "go-type" : 37,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "name",
              "variable" : 175
            }
          }, {
            "go-type" : 269,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "mem",
              "variable" : 197
            }
          }, {
            "go-type" : 269,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "memB",
              "variable" : 196
            }
          }, {
            "go-type" : 117,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "size",
              "variable" : 198
            }
          }, {
            "go-type" : 348,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "args",
              "variable" : 209
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 626,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "logf"
            }
          },
          "go-type" : 20,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 635,
      "code" : "logf(\"CUDADO %q, Mem: %v MemB: %v size %v, args %v\", name, mem, memB, size, args)",
      "entry" : false,
      "use-vars" : [ 175, 197, 196, 198, 209 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 36 ],
      "in-vars" : [ 198, 169, 204, 205, 209, 207, 202, 203, 206, 208, 197 ],
      "exit" : false,
      "out-vars" : [ 169, 202, 203, 206, 207, 204, 205, 209, 208 ],
      "decl-vars" : [ ],
      "line-start" : 636,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 37,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "LaunchKernel Params. mem: %v. Size %v"
            }
          }, {
            "go-type" : 269,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "mem",
              "variable" : 197
            }
          }, {
            "go-type" : 117,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "size",
              "variable" : 198
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 626,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "logf"
            }
          },
          "go-type" : 20,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 636,
      "code" : "logf(\"LaunchKernel Params. mem: %v. Size %v\", mem, size)",
      "entry" : false,
      "use-vars" : [ 198, 197 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 37 ],
      "in-vars" : [ 202, 204, 205, 203, 208, 169, 206, 209, 207 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 637,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 339,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "fn",
              "variable" : 202
            }
          }, {
            "go-type" : 22,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "gridDimX",
              "variable" : 207
            }
          }, {
            "go-type" : 22,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "gridDimY",
              "variable" : 204
            }
          }, {
            "go-type" : 22,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "gridDimZ",
              "variable" : 205
            }
          }, {
            "go-type" : 22,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "blockDimX",
              "variable" : 203
            }
          }, {
            "go-type" : 22,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "blockDimY",
              "variable" : 206
            }
          }, {
            "go-type" : 22,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "blockDimZ",
              "variable" : 208
            }
          }, {
            "go-type" : 22,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          }, {
            "go-type" : 281,
            "kind" : "expression",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 10,
              "value" : "cu"
            },
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "NoStream",
              "variable" : 211
            }
          }, {
            "go-type" : 348,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "args",
              "variable" : 209
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "LaunchAndSync"
            },
            "go-type" : 628,
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "c",
                "variable" : 210
              },
              "go-type" : 529,
              "kind" : "expression",
              "target" : {
                "go-type" : 243,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "e",
                  "variable" : 169
                }
              },
              "type" : "selector"
            },
            "type" : "selector"
          },
          "go-type" : 20,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 637,
      "code" : "e.c.LaunchAndSync(fn, gridDimX, gridDimY, gridDimZ, blockDimX, blockDimY, blockDimZ, 0, cu.NoStream, args)",
      "entry" : false,
      "use-vars" : [ 169, 203, 206, 209, 202, 207, 205, 204, 208 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 638,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ ]
      },
      "assign-vars" : [ ],
      "line-end" : 638,
      "code" : "return",
      "entry" : false,
      "use-vars" : [ ]
    } ],
    "code" : "// Mod implements tensor.Moder. It does not support safe or increment operation options and will return an error if those options are passed in\nfunc (e *Engine) Mod(a tensor.Tensor, b tensor.Tensor, opts ...tensor.FuncOpt) (retVal tensor.Tensor, err error) {\n\tname := constructName2(a, b, \"mod\")\n\n\tif !e.HasFunc(name) {\n\t\treturn nil, errors.Errorf(\"Unable to perform Mod(). The tensor engine does not have the function %q\", name)\n\t}\n\n\tif err = binaryCheck(a, b); err != nil {\n\t\treturn nil, errors.Wrap(err, \"Basic checks failed for Mod\")\n\t}\n\n\tvar reuse tensor.DenseTensor\n\tvar safe, toReuse bool\n\tif reuse, safe, toReuse, _, _, err = handleFuncOpts(a.Shape(), a.Dtype(), a.DataOrder(), true, opts...); err != nil {\n\t\treturn nil, errors.Wrap(err, \"Unable to handle funcOpts\")\n\t}\n\n\tvar mem, memB cu.DevicePtr\n\tvar size int64\n\n\tswitch {\n\tcase toReuse:\n\t\tmem = cu.DevicePtr(reuse.Uintptr())\n\t\tmemA := cu.DevicePtr(a.Uintptr())\n\t\tmemSize := int64(a.MemSize())\n\t\te.memcpy(mem, memA, memSize)\n\n\t\tsize = int64(logicalSize(reuse.Shape()))\n\t\tretVal = reuse\n\tcase !safe:\n\t\tmem = cu.DevicePtr(a.Uintptr())\n\t\tretVal = a\n\t\tsize = int64(logicalSize(a.Shape()))\n\tdefault:\n\t\treturn nil, errors.New(\"Impossible state: A reuse tensor must be passed in, or the operation must be unsafe. Incr and safe operations are not supported\")\n\t}\n\n\tmemB = cu.DevicePtr(b.Uintptr())\n\tfn := e.f[name]\n\tgridDimX, gridDimY, gridDimZ, blockDimX, blockDimY, blockDimZ := e.ElemGridSize(int(size))\n\targs := []unsafe.Pointer{\n\t\tunsafe.Pointer(&mem),\n\t\tunsafe.Pointer(&memB),\n\t\tunsafe.Pointer(&size),\n\t}\n\tlogf(\"gx %d, gy %d, gz %d | bx %d by %d, bz %d\", gridDimX, gridDimY, gridDimZ, blockDimX, blockDimY, blockDimZ)\n\tlogf(\"CUDADO %q, Mem: %v MemB: %v size %v, args %v\", name, mem, memB, size, args)\n\tlogf(\"LaunchKernel Params. mem: %v. Size %v\", mem, size)\n\te.c.LaunchAndSync(fn, gridDimX, gridDimY, gridDimZ, blockDimX, blockDimY, blockDimZ, 0, cu.NoStream, args)\n\treturn\n}",
    "defines" : [ 0 ],
    "functions" : [ {
      "name" : "Mod",
      "package" : 0,
      "type" : 0,
      "exported" : true
    }, {
      "name" : "constructName2",
      "package" : 0,
      "type" : 548,
      "exported" : false
    }, {
      "name" : "HasFunc",
      "package" : 0,
      "type" : 550,
      "exported" : true
    }, {
      "name" : "Errorf",
      "package" : 12,
      "type" : 552,
      "exported" : true
    }, {
      "name" : "binaryCheck",
      "package" : 0,
      "type" : 555,
      "exported" : false
    }, {
      "name" : "Wrap",
      "package" : 12,
      "type" : 559,
      "exported" : true
    }, {
      "name" : "handleFuncOpts",
      "package" : 0,
      "type" : 613,
      "exported" : false
    }, {
      "name" : "Shape",
      "package" : 1,
      "type" : 168,
      "exported" : true
    }, {
      "name" : "Dtype",
      "package" : 1,
      "type" : 102,
      "exported" : true
    }, {
      "name" : "DataOrder",
      "package" : 1,
      "type" : 99,
      "exported" : true
    }, {
      "name" : "Uintptr",
      "package" : 1,
      "type" : 79,
      "exported" : true
    }, {
      "name" : "MemSize",
      "package" : 1,
      "type" : 79,
      "exported" : true
    }, {
      "name" : "memcpy",
      "package" : 0,
      "type" : 615,
      "exported" : false
    }, {
      "name" : "logicalSize",
      "package" : 0,
      "type" : 617,
      "exported" : false
    }, {
      "name" : "New",
      "package" : 12,
      "type" : 619,
      "exported" : true
    }, {
      "name" : "ElemGridSize",
      "package" : 0,
      "type" : 622,
      "exported" : true
    }, {
      "name" : "logf",
      "package" : 0,
      "type" : 626,
      "exported" : false
    }, {
      "name" : "LaunchAndSync",
      "package" : 10,
      "type" : 628,
      "exported" : true
    } ],
    "line-end" : 639,
    "line-start" : 589,
    "names" : [ "Mod" ],
    "package" : 0,
    "packages" : [ {
      "name" : "cuda",
      "path" : "gorgonia.org/gorgonia/cuda"
    }, {
      "name" : "tensor",
      "path" : "gorgonia.org/tensor"
    }, {
      "name" : "reflect",
      "path" : "reflect"
    }, {
      "name" : "unsafe",
      "path" : "unsafe"
    }, {
      "name" : "fmt",
      "path" : "fmt"
    }, {
      "name" : "gob",
      "path" : "encoding/gob"
    }, {
      "name" : "io",
      "path" : "io"
    }, {
      "name" : "storage",
      "path" : "gorgonia.org/tensor/internal/storage"
    }, {
      "name" : "sync",
      "path" : "sync"
    }, {
      "name" : "cublas",
      "path" : "gorgonia.org/cu/blas"
    }, {
      "name" : "cu",
      "path" : "gorgonia.org/cu"
    }, {
      "name" : "cudnn",
      "path" : "gorgonia.org/cu/dnn"
    }, {
      "name" : "errors",
      "path" : "github.com/pkg/errors"
    } ],
    "params" : [ 170, 171, 172 ],
    "receivers" : [ 169 ],
    "results" : [ 173, 174 ],
    "type" : "function",
    "types" : [ {
      "name" : "func(a gorgonia.org/tensor.Tensor, b gorgonia.org/tensor.Tensor, opts ...gorgonia.org/tensor.FuncOpt) (retVal gorgonia.org/tensor.Tensor, err error)",
      "params" : 1,
      "recv" : 169,
      "results" : 242,
      "type" : "Signature",
      "underlying" : 0,
      "variadic" : true
    }, {
      "fields" : [ {
        "name" : "a",
        "type" : 2
      }, {
        "name" : "b",
        "type" : 2
      }, {
        "name" : "opts",
        "type" : 7
      } ],
      "name" : "(a gorgonia.org/tensor.Tensor, b gorgonia.org/tensor.Tensor, opts []gorgonia.org/tensor.FuncOpt)",
      "type" : "Tuple",
      "underlying" : 1
    }, {
      "local-name" : "Tensor",
      "name" : "gorgonia.org/tensor.Tensor",
      "package" : 1,
      "type" : "Named",
      "underlying" : 3
    }, {
      "methods" : [ {
        "name" : "Apply",
        "type" : 4
      }, {
        "name" : "At",
        "type" : 92
      }, {
        "name" : "Clone",
        "type" : 95
      }, {
        "name" : "Data",
        "type" : 95
      }, {
        "name" : "DataOrder",
        "type" : 99
      }, {
        "name" : "DataSize",
        "type" : 19
      }, {
        "name" : "Dims",
        "type" : 19
      }, {
        "name" : "Dtype",
        "type" : 102
      }, {
        "name" : "Engine",
        "type" : 104
      }, {
        "name" : "Eq",
        "type" : 128
      }, {
        "name" : "Format",
        "type" : 131
      }, {
        "name" : "GobDecode",
        "type" : 148
      }, {
        "name" : "GobEncode",
        "type" : 152
      }, {
        "name" : "IsManuallyManaged",
        "type" : 29
      }, {
        "name" : "IsNativelyAccessible",
        "type" : 29
      }, {
        "name" : "IsScalar",
        "type" : 29
      }, {
        "name" : "Iterator",
        "type" : 156
      }, {
        "name" : "MemSize",
        "type" : 79
      }, {
        "name" : "Memset",
        "type" : 171
      }, {
        "name" : "Pointer",
        "type" : 112
      }, {
        "name" : "ReadNpy",
        "type" : 174
      }, {
        "name" : "RequiresIterator",
        "type" : 29
      }, {
        "name" : "Reshape",
        "type" : 180
      }, {
        "name" : "ScalarValue",
        "type" : 95
      }, {
        "name" : "SetAt",
        "type" : 181
      }, {
        "name" : "Shape",
        "type" : 168
      }, {
        "name" : "Size",
        "type" : 19
      }, {
        "name" : "Slice",
        "type" : 183
      }, {
        "name" : "Strides",
        "type" : 160
      }, {
        "name" : "String",
        "type" : 78
      }, {
        "name" : "T",
        "type" : 193
      }, {
        "name" : "Transpose",
        "type" : 195
      }, {
        "name" : "UT",
        "type" : 167
      }, {
        "name" : "Uintptr",
        "type" : 79
      }, {
        "name" : "WriteNpy",
        "type" : 196
      }, {
        "name" : "Zero",
        "type" : 167
      }, {
        "name" : "arr",
        "type" : 200
      }, {
        "name" : "arrPtr",
        "type" : 208
      }, {
        "name" : "hdr",
        "type" : 211
      }, {
        "name" : "standardEngine",
        "type" : 216
      } ],
      "name" : "interface{Apply(fn interface{}, opts ...gorgonia.org/tensor.FuncOpt) (gorgonia.org/tensor.Tensor, error); At(...int) (interface{}, error); DataOrder() gorgonia.org/tensor.DataOrder; DataSize() int; Dims() int; Dtype() gorgonia.org/tensor.Dtype; Engine() gorgonia.org/tensor.Engine; IsManuallyManaged() bool; IsNativelyAccessible() bool; IsScalar() bool; Iterator() gorgonia.org/tensor.Iterator; MemSize() uintptr; Pointer() unsafe.Pointer; ReadNpy(io.Reader) error; RequiresIterator() bool; Reshape(...int) error; ScalarValue() interface{}; SetAt(v interface{}, coord ...int) error; Shape() gorgonia.org/tensor.Shape; Size() int; Strides() []int; T(axes ...int) error; Transpose() error; UT(); Uintptr() uintptr; WriteNpy(io.Writer) error; standardEngine() gorgonia.org/tensor.standardEngine; gorgonia.org/tensor.Cloner; gorgonia.org/tensor.Dataer; gorgonia.org/tensor.Eq; fmt.Formatter; encoding/gob.GobDecoder; encoding/gob.GobEncoder; gorgonia.org/tensor.MemSetter; gorgonia.org/tensor.Slicer; fmt.Stringer; gorgonia.org/tensor.Zeroer; gorgonia.org/tensor.arrayer; gorgonia.org/tensor.headerer}",
      "type" : "Interface",
      "underlying" : 3
    }, {
      "name" : "func(fn interface{}, opts ...gorgonia.org/tensor.FuncOpt) (gorgonia.org/tensor.Tensor, error)",
      "params" : 5,
      "recv" : 17,
      "results" : 89,
      "type" : "Signature",
      "underlying" : 4,
      "variadic" : true
    }, {
      "fields" : [ {
        "name" : "fn",
        "type" : 6
      }, {
        "name" : "opts",
        "type" : 7
      } ],
      "name" : "(fn interface{}, opts []gorgonia.org/tensor.FuncOpt)",
      "type" : "Tuple",
      "underlying" : 5
    }, {
      "methods" : [ ],
      "name" : "interface{}",
      "type" : "Interface",
      "underlying" : 6
    }, {
      "elem" : 8,
      "name" : "[]gorgonia.org/tensor.FuncOpt",
      "type" : "Slice",
      "underlying" : 7
    }, {
      "local-name" : "FuncOpt",
      "name" : "gorgonia.org/tensor.FuncOpt",
      "package" : 1,
      "type" : "Named",
      "underlying" : 9
    }, {
      "name" : "func(*gorgonia.org/tensor.OpOpt)",
      "params" : 10,
      "recv" : -1,
      "results" : 20,
      "type" : "Signature",
      "underlying" : 9,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 11
      } ],
      "name" : "(*gorgonia.org/tensor.OpOpt)",
      "type" : "Tuple",
      "underlying" : 10
    }, {
      "elem" : 12,
      "name" : "*gorgonia.org/tensor.OpOpt",
      "type" : "Pointer",
      "underlying" : 11
    }, {
      "local-name" : "OpOpt",
      "name" : "gorgonia.org/tensor.OpOpt",
      "package" : 1,
      "type" : "Named",
      "underlying" : 13
    }, {
      "fields" : [ {
        "name" : "reuse",
        "type" : 2
      }, {
        "name" : "incr",
        "type" : 2
      }, {
        "name" : "unsafe",
        "type" : 14
      }, {
        "name" : "same",
        "type" : 14
      }, {
        "name" : "t",
        "type" : 15
      } ],
      "name" : "struct{reuse gorgonia.org/tensor.Tensor; incr gorgonia.org/tensor.Tensor; unsafe bool; same bool; t gorgonia.org/tensor.Dtype}",
      "type" : "Struct",
      "underlying" : 13
    }, {
      "name" : "bool",
      "type" : "Basic",
      "underlying" : 14
    }, {
      "local-name" : "Dtype",
      "name" : "gorgonia.org/tensor.Dtype",
      "package" : 1,
      "type" : "Named",
      "underlying" : 16
    }, {
      "fields" : [ {
        "name" : "Type",
        "type" : 17
      } ],
      "name" : "struct{reflect.Type}",
      "type" : "Struct",
      "underlying" : 16
    }, {
      "local-name" : "Type",
      "name" : "reflect.Type",
      "package" : 2,
      "type" : "Named",
      "underlying" : 18
    }, {
      "methods" : [ {
        "name" : "Align",
        "type" : 19
      }, {
        "name" : "AssignableTo",
        "type" : 23
      }, {
        "name" : "Bits",
        "type" : 19
      }, {
        "name" : "ChanDir",
        "type" : 26
      }, {
        "name" : "Comparable",
        "type" : 29
      }, {
        "name" : "ConvertibleTo",
        "type" : 23
      }, {
        "name" : "Elem",
        "type" : 30
      }, {
        "name" : "Field",
        "type" : 32
      }, {
        "name" : "FieldAlign",
        "type" : 19
      }, {
        "name" : "FieldByIndex",
        "type" : 41
      }, {
        "name" : "FieldByName",
        "type" : 43
      }, {
        "name" : "FieldByNameFunc",
        "type" : 46
      }, {
        "name" : "Implements",
        "type" : 23
      }, {
        "name" : "In",
        "type" : 50
      }, {
        "name" : "IsVariadic",
        "type" : 29
      }, {
        "name" : "Key",
        "type" : 30
      }, {
        "name" : "Kind",
        "type" : 51
      }, {
        "name" : "Len",
        "type" : 19
      }, {
        "name" : "Method",
        "type" : 55
      }, {
        "name" : "MethodByName",
        "type" : 76
      }, {
        "name" : "Name",
        "type" : 78
      }, {
        "name" : "NumField",
        "type" : 19
      }, {
        "name" : "NumIn",
        "type" : 19
      }, {
        "name" : "NumMethod",
        "type" : 19
      }, {
        "name" : "NumOut",
        "type" : 19
      }, {
        "name" : "Out",
        "type" : 50
      }, {
        "name" : "PkgPath",
        "type" : 78
      }, {
        "name" : "Size",
        "type" : 79
      }, {
        "name" : "String",
        "type" : 78
      }, {
        "name" : "common",
        "type" : 81
      }, {
        "name" : "uncommon",
        "type" : 83
      } ],
      "name" : "interface{Align() int; AssignableTo(u reflect.Type) bool; Bits() int; ChanDir() reflect.ChanDir; Comparable() bool; ConvertibleTo(u reflect.Type) bool; Elem() reflect.Type; Field(i int) reflect.StructField; FieldAlign() int; FieldByIndex(index []int) reflect.StructField; FieldByName(name string) (reflect.StructField, bool); FieldByNameFunc(match func(string) bool) (reflect.StructField, bool); Implements(u reflect.Type) bool; In(i int) reflect.Type; IsVariadic() bool; Key() reflect.Type; Kind() reflect.Kind; Len() int; Method(int) reflect.Method; MethodByName(string) (reflect.Method, bool); Name() string; NumField() int; NumIn() int; NumMethod() int; NumOut() int; Out(i int) reflect.Type; PkgPath() string; Size() uintptr; String() string; common() *reflect.rtype; uncommon() *reflect.uncommonType}",
      "type" : "Interface",
      "underlying" : 18
    }, {
      "name" : "func() int",
      "params" : 20,
      "recv" : 0,
      "results" : 21,
      "type" : "Signature",
      "underlying" : 19,
      "variadic" : false
    }, {
      "fields" : [ ],
      "name" : "()",
      "type" : "Tuple",
      "underlying" : 20
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 22
      } ],
      "name" : "(int)",
      "type" : "Tuple",
      "underlying" : 21
    }, {
      "name" : "int",
      "type" : "Basic",
      "underlying" : 22
    }, {
      "name" : "func(u reflect.Type) bool",
      "params" : 24,
      "recv" : 1,
      "results" : 25,
      "type" : "Signature",
      "underlying" : 23,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "u",
        "type" : 17
      } ],
      "name" : "(u reflect.Type)",
      "type" : "Tuple",
      "underlying" : 24
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 14
      } ],
      "name" : "(bool)",
      "type" : "Tuple",
      "underlying" : 25
    }, {
      "name" : "func() reflect.ChanDir",
      "params" : 20,
      "recv" : 2,
      "results" : 27,
      "type" : "Signature",
      "underlying" : 26,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 28
      } ],
      "name" : "(reflect.ChanDir)",
      "type" : "Tuple",
      "underlying" : 27
    }, {
      "local-name" : "ChanDir",
      "name" : "reflect.ChanDir",
      "package" : 2,
      "type" : "Named",
      "underlying" : 22
    }, {
      "name" : "func() bool",
      "params" : 20,
      "recv" : 3,
      "results" : 25,
      "type" : "Signature",
      "underlying" : 29,
      "variadic" : false
    }, {
      "name" : "func() reflect.Type",
      "params" : 20,
      "recv" : 4,
      "results" : 31,
      "type" : "Signature",
      "underlying" : 30,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 17
      } ],
      "name" : "(reflect.Type)",
      "type" : "Tuple",
      "underlying" : 31
    }, {
      "name" : "func(i int) reflect.StructField",
      "params" : 33,
      "recv" : 5,
      "results" : 34,
      "type" : "Signature",
      "underlying" : 32,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "i",
        "type" : 22
      } ],
      "name" : "(i int)",
      "type" : "Tuple",
      "underlying" : 33
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 35
      } ],
      "name" : "(reflect.StructField)",
      "type" : "Tuple",
      "underlying" : 34
    }, {
      "local-name" : "StructField",
      "name" : "reflect.StructField",
      "package" : 2,
      "type" : "Named",
      "underlying" : 36
    }, {
      "fields" : [ {
        "name" : "Name",
        "type" : 37
      }, {
        "name" : "PkgPath",
        "type" : 37
      }, {
        "name" : "Type",
        "type" : 17
      }, {
        "name" : "Tag",
        "type" : 38
      }, {
        "name" : "Offset",
        "type" : 39
      }, {
        "name" : "Index",
        "type" : 40
      }, {
        "name" : "Anonymous",
        "type" : 14
      } ],
      "name" : "struct{Name string; PkgPath string; Type reflect.Type; Tag reflect.StructTag; Offset uintptr; Index []int; Anonymous bool}",
      "type" : "Struct",
      "underlying" : 36
    }, {
      "name" : "string",
      "type" : "Basic",
      "underlying" : 37
    }, {
      "local-name" : "StructTag",
      "name" : "reflect.StructTag",
      "package" : 2,
      "type" : "Named",
      "underlying" : 37
    }, {
      "name" : "uintptr",
      "type" : "Basic",
      "underlying" : 39
    }, {
      "elem" : 22,
      "name" : "[]int",
      "type" : "Slice",
      "underlying" : 40
    }, {
      "name" : "func(index []int) reflect.StructField",
      "params" : 42,
      "recv" : 6,
      "results" : 34,
      "type" : "Signature",
      "underlying" : 41,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "index",
        "type" : 40
      } ],
      "name" : "(index []int)",
      "type" : "Tuple",
      "underlying" : 42
    }, {
      "name" : "func(name string) (reflect.StructField, bool)",
      "params" : 44,
      "recv" : 7,
      "results" : 45,
      "type" : "Signature",
      "underlying" : 43,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "name",
        "type" : 37
      } ],
      "name" : "(name string)",
      "type" : "Tuple",
      "underlying" : 44
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 35
      }, {
        "name" : "",
        "type" : 14
      } ],
      "name" : "(reflect.StructField, bool)",
      "type" : "Tuple",
      "underlying" : 45
    }, {
      "name" : "func(match func(string) bool) (reflect.StructField, bool)",
      "params" : 47,
      "recv" : 8,
      "results" : 45,
      "type" : "Signature",
      "underlying" : 46,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "match",
        "type" : 48
      } ],
      "name" : "(match func(string) bool)",
      "type" : "Tuple",
      "underlying" : 47
    }, {
      "name" : "func(string) bool",
      "params" : 49,
      "recv" : -1,
      "results" : 25,
      "type" : "Signature",
      "underlying" : 48,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 37
      } ],
      "name" : "(string)",
      "type" : "Tuple",
      "underlying" : 49
    }, {
      "name" : "func(i int) reflect.Type",
      "params" : 33,
      "recv" : 9,
      "results" : 31,
      "type" : "Signature",
      "underlying" : 50,
      "variadic" : false
    }, {
      "name" : "func() reflect.Kind",
      "params" : 20,
      "recv" : 10,
      "results" : 52,
      "type" : "Signature",
      "underlying" : 51,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 53
      } ],
      "name" : "(reflect.Kind)",
      "type" : "Tuple",
      "underlying" : 52
    }, {
      "local-name" : "Kind",
      "name" : "reflect.Kind",
      "package" : 2,
      "type" : "Named",
      "underlying" : 54
    }, {
      "name" : "uint",
      "type" : "Basic",
      "underlying" : 54
    }, {
      "name" : "func(int) reflect.Method",
      "params" : 21,
      "recv" : 11,
      "results" : 56,
      "type" : "Signature",
      "underlying" : 55,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 57
      } ],
      "name" : "(reflect.Method)",
      "type" : "Tuple",
      "underlying" : 56
    }, {
      "local-name" : "Method",
      "name" : "reflect.Method",
      "package" : 2,
      "type" : "Named",
      "underlying" : 58
    }, {
      "fields" : [ {
        "name" : "Name",
        "type" : 37
      }, {
        "name" : "PkgPath",
        "type" : 37
      }, {
        "name" : "Type",
        "type" : 17
      }, {
        "name" : "Func",
        "type" : 59
      }, {
        "name" : "Index",
        "type" : 22
      } ],
      "name" : "struct{Name string; PkgPath string; Type reflect.Type; Func reflect.Value; Index int}",
      "type" : "Struct",
      "underlying" : 58
    }, {
      "local-name" : "Value",
      "name" : "reflect.Value",
      "package" : 2,
      "type" : "Named",
      "underlying" : 60
    }, {
      "fields" : [ {
        "name" : "typ",
        "type" : 61
      }, {
        "name" : "ptr",
        "type" : 69
      }, {
        "name" : "flag",
        "type" : 75
      } ],
      "name" : "struct{typ *reflect.rtype; ptr unsafe.Pointer; reflect.flag}",
      "type" : "Struct",
      "underlying" : 60
    }, {
      "elem" : 62,
      "name" : "*reflect.rtype",
      "type" : "Pointer",
      "underlying" : 61
    }, {
      "local-name" : "rtype",
      "name" : "reflect.rtype",
      "package" : 2,
      "type" : "Named",
      "underlying" : 63
    }, {
      "fields" : [ {
        "name" : "size",
        "type" : 39
      }, {
        "name" : "ptrdata",
        "type" : 39
      }, {
        "name" : "hash",
        "type" : 64
      }, {
        "name" : "tflag",
        "type" : 65
      }, {
        "name" : "align",
        "type" : 66
      }, {
        "name" : "fieldAlign",
        "type" : 66
      }, {
        "name" : "kind",
        "type" : 66
      }, {
        "name" : "equal",
        "type" : 67
      }, {
        "name" : "gcdata",
        "type" : 70
      }, {
        "name" : "str",
        "type" : 72
      }, {
        "name" : "ptrToThis",
        "type" : 74
      } ],
      "name" : "struct{size uintptr; ptrdata uintptr; hash uint32; tflag reflect.tflag; align uint8; fieldAlign uint8; kind uint8; equal func(unsafe.Pointer, unsafe.Pointer) bool; gcdata *byte; str reflect.nameOff; ptrToThis reflect.typeOff}",
      "type" : "Struct",
      "underlying" : 63
    }, {
      "name" : "uint32",
      "type" : "Basic",
      "underlying" : 64
    }, {
      "local-name" : "tflag",
      "name" : "reflect.tflag",
      "package" : 2,
      "type" : "Named",
      "underlying" : 66
    }, {
      "name" : "uint8",
      "type" : "Basic",
      "underlying" : 66
    }, {
      "name" : "func(unsafe.Pointer, unsafe.Pointer) bool",
      "params" : 68,
      "recv" : -1,
      "results" : 25,
      "type" : "Signature",
      "underlying" : 67,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 69
      }, {
        "name" : "",
        "type" : 69
      } ],
      "name" : "(unsafe.Pointer, unsafe.Pointer)",
      "type" : "Tuple",
      "underlying" : 68
    }, {
      "local-name" : "Pointer",
      "name" : "unsafe.Pointer",
      "package" : 3,
      "type" : "Basic",
      "underlying" : 69
    }, {
      "elem" : 71,
      "name" : "*byte",
      "type" : "Pointer",
      "underlying" : 70
    }, {
      "name" : "byte",
      "type" : "Basic",
      "underlying" : 71
    }, {
      "local-name" : "nameOff",
      "name" : "reflect.nameOff",
      "package" : 2,
      "type" : "Named",
      "underlying" : 73
    }, {
      "name" : "int32",
      "type" : "Basic",
      "underlying" : 73
    }, {
      "local-name" : "typeOff",
      "name" : "reflect.typeOff",
      "package" : 2,
      "type" : "Named",
      "underlying" : 73
    }, {
      "local-name" : "flag",
      "name" : "reflect.flag",
      "package" : 2,
      "type" : "Named",
      "underlying" : 39
    }, {
      "name" : "func(string) (reflect.Method, bool)",
      "params" : 49,
      "recv" : 12,
      "results" : 77,
      "type" : "Signature",
      "underlying" : 76,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 57
      }, {
        "name" : "",
        "type" : 14
      } ],
      "name" : "(reflect.Method, bool)",
      "type" : "Tuple",
      "underlying" : 77
    }, {
      "name" : "func() string",
      "params" : 20,
      "recv" : 13,
      "results" : 49,
      "type" : "Signature",
      "underlying" : 78,
      "variadic" : false
    }, {
      "name" : "func() uintptr",
      "params" : 20,
      "recv" : 14,
      "results" : 80,
      "type" : "Signature",
      "underlying" : 79,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 39
      } ],
      "name" : "(uintptr)",
      "type" : "Tuple",
      "underlying" : 80
    }, {
      "name" : "func() *reflect.rtype",
      "params" : 20,
      "recv" : 15,
      "results" : 82,
      "type" : "Signature",
      "underlying" : 81,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 61
      } ],
      "name" : "(*reflect.rtype)",
      "type" : "Tuple",
      "underlying" : 82
    }, {
      "name" : "func() *reflect.uncommonType",
      "params" : 20,
      "recv" : 16,
      "results" : 84,
      "type" : "Signature",
      "underlying" : 83,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 85
      } ],
      "name" : "(*reflect.uncommonType)",
      "type" : "Tuple",
      "underlying" : 84
    }, {
      "elem" : 86,
      "name" : "*reflect.uncommonType",
      "type" : "Pointer",
      "underlying" : 85
    }, {
      "local-name" : "uncommonType",
      "name" : "reflect.uncommonType",
      "package" : 2,
      "type" : "Named",
      "underlying" : 87
    }, {
      "fields" : [ {
        "name" : "pkgPath",
        "type" : 72
      }, {
        "name" : "mcount",
        "type" : 88
      }, {
        "name" : "xcount",
        "type" : 88
      }, {
        "name" : "moff",
        "type" : 64
      }, {
        "name" : "_",
        "type" : 64
      } ],
      "name" : "struct{pkgPath reflect.nameOff; mcount uint16; xcount uint16; moff uint32; _ uint32}",
      "type" : "Struct",
      "underlying" : 87
    }, {
      "name" : "uint16",
      "type" : "Basic",
      "underlying" : 88
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 2
      }, {
        "name" : "",
        "type" : 90
      } ],
      "name" : "(gorgonia.org/tensor.Tensor, error)",
      "type" : "Tuple",
      "underlying" : 89
    }, {
      "local-name" : "error",
      "name" : "error",
      "package" : -1,
      "type" : "Named",
      "underlying" : 91
    }, {
      "methods" : [ {
        "name" : "Error",
        "type" : 78
      } ],
      "name" : "interface{Error() string}",
      "type" : "Interface",
      "underlying" : 91
    }, {
      "name" : "func(...int) (interface{}, error)",
      "params" : 93,
      "recv" : 18,
      "results" : 94,
      "type" : "Signature",
      "underlying" : 92,
      "variadic" : true
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 40
      } ],
      "name" : "([]int)",
      "type" : "Tuple",
      "underlying" : 93
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 6
      }, {
        "name" : "",
        "type" : 90
      } ],
      "name" : "(interface{}, error)",
      "type" : "Tuple",
      "underlying" : 94
    }, {
      "name" : "func() interface{}",
      "params" : 20,
      "recv" : 19,
      "results" : 96,
      "type" : "Signature",
      "underlying" : 95,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 6
      } ],
      "name" : "(interface{})",
      "type" : "Tuple",
      "underlying" : 96
    }, {
      "local-name" : "Cloner",
      "name" : "gorgonia.org/tensor.Cloner",
      "package" : 1,
      "type" : "Named",
      "underlying" : 98
    }, {
      "methods" : [ {
        "name" : "Clone",
        "type" : 95
      } ],
      "name" : "interface{Clone() interface{}}",
      "type" : "Interface",
      "underlying" : 98
    }, {
      "name" : "func() gorgonia.org/tensor.DataOrder",
      "params" : 20,
      "recv" : 20,
      "results" : 100,
      "type" : "Signature",
      "underlying" : 99,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 101
      } ],
      "name" : "(gorgonia.org/tensor.DataOrder)",
      "type" : "Tuple",
      "underlying" : 100
    }, {
      "local-name" : "DataOrder",
      "name" : "gorgonia.org/tensor.DataOrder",
      "package" : 1,
      "type" : "Named",
      "underlying" : 71
    }, {
      "name" : "func() gorgonia.org/tensor.Dtype",
      "params" : 20,
      "recv" : 21,
      "results" : 103,
      "type" : "Signature",
      "underlying" : 102,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 15
      } ],
      "name" : "(gorgonia.org/tensor.Dtype)",
      "type" : "Tuple",
      "underlying" : 103
    }, {
      "name" : "func() gorgonia.org/tensor.Engine",
      "params" : 20,
      "recv" : 30,
      "results" : 105,
      "type" : "Signature",
      "underlying" : 104,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 106
      } ],
      "name" : "(gorgonia.org/tensor.Engine)",
      "type" : "Tuple",
      "underlying" : 105
    }, {
      "local-name" : "Engine",
      "name" : "gorgonia.org/tensor.Engine",
      "package" : 1,
      "type" : "Named",
      "underlying" : 107
    }, {
      "methods" : [ {
        "name" : "Accessible",
        "type" : 108
      }, {
        "name" : "Alloc",
        "type" : 115
      }, {
        "name" : "AllocAccessible",
        "type" : 29
      }, {
        "name" : "Free",
        "type" : 118
      }, {
        "name" : "Memclr",
        "type" : 121
      }, {
        "name" : "Memcpy",
        "type" : 122
      }, {
        "name" : "Memset",
        "type" : 124
      }, {
        "name" : "WorksWith",
        "type" : 126
      } ],
      "name" : "interface{Accessible(mem gorgonia.org/tensor.Memory) (gorgonia.org/tensor.Memory, error); Alloc(size int64) (gorgonia.org/tensor.Memory, error); AllocAccessible() bool; Free(mem gorgonia.org/tensor.Memory, size int64) error; Memclr(mem gorgonia.org/tensor.Memory); Memcpy(dst gorgonia.org/tensor.Memory, src gorgonia.org/tensor.Memory) error; Memset(mem gorgonia.org/tensor.Memory, val interface{}) error; WorksWith(order gorgonia.org/tensor.DataOrder) bool}",
      "type" : "Interface",
      "underlying" : 107
    }, {
      "name" : "func(mem gorgonia.org/tensor.Memory) (gorgonia.org/tensor.Memory, error)",
      "params" : 109,
      "recv" : 23,
      "results" : 114,
      "type" : "Signature",
      "underlying" : 108,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "mem",
        "type" : 110
      } ],
      "name" : "(mem gorgonia.org/tensor.Memory)",
      "type" : "Tuple",
      "underlying" : 109
    }, {
      "local-name" : "Memory",
      "name" : "gorgonia.org/tensor.Memory",
      "package" : 1,
      "type" : "Named",
      "underlying" : 111
    }, {
      "methods" : [ {
        "name" : "MemSize",
        "type" : 79
      }, {
        "name" : "Pointer",
        "type" : 112
      }, {
        "name" : "Uintptr",
        "type" : 79
      } ],
      "name" : "interface{MemSize() uintptr; Pointer() unsafe.Pointer; Uintptr() uintptr}",
      "type" : "Interface",
      "underlying" : 111
    }, {
      "name" : "func() unsafe.Pointer",
      "params" : 20,
      "recv" : 22,
      "results" : 113,
      "type" : "Signature",
      "underlying" : 112,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 69
      } ],
      "name" : "(unsafe.Pointer)",
      "type" : "Tuple",
      "underlying" : 113
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 110
      }, {
        "name" : "",
        "type" : 90
      } ],
      "name" : "(gorgonia.org/tensor.Memory, error)",
      "type" : "Tuple",
      "underlying" : 114
    }, {
      "name" : "func(size int64) (gorgonia.org/tensor.Memory, error)",
      "params" : 116,
      "recv" : 24,
      "results" : 114,
      "type" : "Signature",
      "underlying" : 115,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "size",
        "type" : 117
      } ],
      "name" : "(size int64)",
      "type" : "Tuple",
      "underlying" : 116
    }, {
      "name" : "int64",
      "type" : "Basic",
      "underlying" : 117
    }, {
      "name" : "func(mem gorgonia.org/tensor.Memory, size int64) error",
      "params" : 119,
      "recv" : 25,
      "results" : 120,
      "type" : "Signature",
      "underlying" : 118,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "mem",
        "type" : 110
      }, {
        "name" : "size",
        "type" : 117
      } ],
      "name" : "(mem gorgonia.org/tensor.Memory, size int64)",
      "type" : "Tuple",
      "underlying" : 119
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 90
      } ],
      "name" : "(error)",
      "type" : "Tuple",
      "underlying" : 120
    }, {
      "name" : "func(mem gorgonia.org/tensor.Memory)",
      "params" : 109,
      "recv" : 26,
      "results" : 20,
      "type" : "Signature",
      "underlying" : 121,
      "variadic" : false
    }, {
      "name" : "func(dst gorgonia.org/tensor.Memory, src gorgonia.org/tensor.Memory) error",
      "params" : 123,
      "recv" : 27,
      "results" : 120,
      "type" : "Signature",
      "underlying" : 122,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "dst",
        "type" : 110
      }, {
        "name" : "src",
        "type" : 110
      } ],
      "name" : "(dst gorgonia.org/tensor.Memory, src gorgonia.org/tensor.Memory)",
      "type" : "Tuple",
      "underlying" : 123
    }, {
      "name" : "func(mem gorgonia.org/tensor.Memory, val interface{}) error",
      "params" : 125,
      "recv" : 28,
      "results" : 120,
      "type" : "Signature",
      "underlying" : 124,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "mem",
        "type" : 110
      }, {
        "name" : "val",
        "type" : 6
      } ],
      "name" : "(mem gorgonia.org/tensor.Memory, val interface{})",
      "type" : "Tuple",
      "underlying" : 125
    }, {
      "name" : "func(order gorgonia.org/tensor.DataOrder) bool",
      "params" : 127,
      "recv" : 29,
      "results" : 25,
      "type" : "Signature",
      "underlying" : 126,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "order",
        "type" : 101
      } ],
      "name" : "(order gorgonia.org/tensor.DataOrder)",
      "type" : "Tuple",
      "underlying" : 127
    }, {
      "name" : "func(interface{}) bool",
      "params" : 96,
      "recv" : 31,
      "results" : 25,
      "type" : "Signature",
      "underlying" : 128,
      "variadic" : false
    }, {
      "local-name" : "Eq",
      "name" : "gorgonia.org/tensor.Eq",
      "package" : 1,
      "type" : "Named",
      "underlying" : 130
    }, {
      "methods" : [ {
        "name" : "Eq",
        "type" : 128
      } ],
      "name" : "interface{Eq(interface{}) bool}",
      "type" : "Interface",
      "underlying" : 130
    }, {
      "name" : "func(f fmt.State, c rune)",
      "params" : 132,
      "recv" : 36,
      "results" : 20,
      "type" : "Signature",
      "underlying" : 131,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "f",
        "type" : 133
      }, {
        "name" : "c",
        "type" : 145
      } ],
      "name" : "(f fmt.State, c rune)",
      "type" : "Tuple",
      "underlying" : 132
    }, {
      "local-name" : "State",
      "name" : "fmt.State",
      "package" : 4,
      "type" : "Named",
      "underlying" : 134
    }, {
      "methods" : [ {
        "name" : "Flag",
        "type" : 135
      }, {
        "name" : "Precision",
        "type" : 137
      }, {
        "name" : "Width",
        "type" : 139
      }, {
        "name" : "Write",
        "type" : 141
      } ],
      "name" : "interface{Flag(c int) bool; Precision() (prec int, ok bool); Width() (wid int, ok bool); Write(b []byte) (n int, err error)}",
      "type" : "Interface",
      "underlying" : 134
    }, {
      "name" : "func(c int) bool",
      "params" : 136,
      "recv" : 32,
      "results" : 25,
      "type" : "Signature",
      "underlying" : 135,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "c",
        "type" : 22
      } ],
      "name" : "(c int)",
      "type" : "Tuple",
      "underlying" : 136
    }, {
      "name" : "func() (prec int, ok bool)",
      "params" : 20,
      "recv" : 33,
      "results" : 138,
      "type" : "Signature",
      "underlying" : 137,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "prec",
        "type" : 22
      }, {
        "name" : "ok",
        "type" : 14
      } ],
      "name" : "(prec int, ok bool)",
      "type" : "Tuple",
      "underlying" : 138
    }, {
      "name" : "func() (wid int, ok bool)",
      "params" : 20,
      "recv" : 34,
      "results" : 140,
      "type" : "Signature",
      "underlying" : 139,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "wid",
        "type" : 22
      }, {
        "name" : "ok",
        "type" : 14
      } ],
      "name" : "(wid int, ok bool)",
      "type" : "Tuple",
      "underlying" : 140
    }, {
      "name" : "func(b []byte) (n int, err error)",
      "params" : 142,
      "recv" : 35,
      "results" : 144,
      "type" : "Signature",
      "underlying" : 141,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "b",
        "type" : 143
      } ],
      "name" : "(b []byte)",
      "type" : "Tuple",
      "underlying" : 142
    }, {
      "elem" : 71,
      "name" : "[]byte",
      "type" : "Slice",
      "underlying" : 143
    }, {
      "fields" : [ {
        "name" : "n",
        "type" : 22
      }, {
        "name" : "err",
        "type" : 90
      } ],
      "name" : "(n int, err error)",
      "type" : "Tuple",
      "underlying" : 144
    }, {
      "name" : "rune",
      "type" : "Basic",
      "underlying" : 145
    }, {
      "local-name" : "Formatter",
      "name" : "fmt.Formatter",
      "package" : 4,
      "type" : "Named",
      "underlying" : 147
    }, {
      "methods" : [ {
        "name" : "Format",
        "type" : 131
      } ],
      "name" : "interface{Format(f fmt.State, c rune)}",
      "type" : "Interface",
      "underlying" : 147
    }, {
      "name" : "func([]byte) error",
      "params" : 149,
      "recv" : 37,
      "results" : 120,
      "type" : "Signature",
      "underlying" : 148,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 143
      } ],
      "name" : "([]byte)",
      "type" : "Tuple",
      "underlying" : 149
    }, {
      "local-name" : "GobDecoder",
      "name" : "encoding/gob.GobDecoder",
      "package" : 5,
      "type" : "Named",
      "underlying" : 151
    }, {
      "methods" : [ {
        "name" : "GobDecode",
        "type" : 148
      } ],
      "name" : "interface{GobDecode([]byte) error}",
      "type" : "Interface",
      "underlying" : 151
    }, {
      "name" : "func() ([]byte, error)",
      "params" : 20,
      "recv" : 38,
      "results" : 153,
      "type" : "Signature",
      "underlying" : 152,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 143
      }, {
        "name" : "",
        "type" : 90
      } ],
      "name" : "([]byte, error)",
      "type" : "Tuple",
      "underlying" : 153
    }, {
      "local-name" : "GobEncoder",
      "name" : "encoding/gob.GobEncoder",
      "package" : 5,
      "type" : "Named",
      "underlying" : 155
    }, {
      "methods" : [ {
        "name" : "GobEncode",
        "type" : 152
      } ],
      "name" : "interface{GobEncode() ([]byte, error)}",
      "type" : "Interface",
      "underlying" : 155
    }, {
      "name" : "func() gorgonia.org/tensor.Iterator",
      "params" : 20,
      "recv" : 45,
      "results" : 157,
      "type" : "Signature",
      "underlying" : 156,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 158
      } ],
      "name" : "(gorgonia.org/tensor.Iterator)",
      "type" : "Tuple",
      "underlying" : 157
    }, {
      "local-name" : "Iterator",
      "name" : "gorgonia.org/tensor.Iterator",
      "package" : 1,
      "type" : "Named",
      "underlying" : 159
    }, {
      "methods" : [ {
        "name" : "Coord",
        "type" : 160
      }, {
        "name" : "Done",
        "type" : 29
      }, {
        "name" : "Next",
        "type" : 161
      }, {
        "name" : "NextInvalid",
        "type" : 163
      }, {
        "name" : "NextValid",
        "type" : 163
      }, {
        "name" : "NextValidity",
        "type" : 165
      }, {
        "name" : "Reset",
        "type" : 167
      }, {
        "name" : "SetForward",
        "type" : 167
      }, {
        "name" : "SetReverse",
        "type" : 167
      }, {
        "name" : "Shape",
        "type" : 168
      }, {
        "name" : "Start",
        "type" : 161
      } ],
      "name" : "interface{Coord() []int; Done() bool; Next() (int, error); NextInvalid() (int, int, error); NextValid() (int, int, error); NextValidity() (int, bool, error); Reset(); SetForward(); SetReverse(); Shape() gorgonia.org/tensor.Shape; Start() (int, error)}",
      "type" : "Interface",
      "underlying" : 159
    }, {
      "name" : "func() []int",
      "params" : 20,
      "recv" : 39,
      "results" : 93,
      "type" : "Signature",
      "underlying" : 160,
      "variadic" : false
    }, {
      "name" : "func() (int, error)",
      "params" : 20,
      "recv" : 40,
      "results" : 162,
      "type" : "Signature",
      "underlying" : 161,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 22
      }, {
        "name" : "",
        "type" : 90
      } ],
      "name" : "(int, error)",
      "type" : "Tuple",
      "underlying" : 162
    }, {
      "name" : "func() (int, int, error)",
      "params" : 20,
      "recv" : 41,
      "results" : 164,
      "type" : "Signature",
      "underlying" : 163,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 22
      }, {
        "name" : "",
        "type" : 22
      }, {
        "name" : "",
        "type" : 90
      } ],
      "name" : "(int, int, error)",
      "type" : "Tuple",
      "underlying" : 164
    }, {
      "name" : "func() (int, bool, error)",
      "params" : 20,
      "recv" : 42,
      "results" : 166,
      "type" : "Signature",
      "underlying" : 165,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 22
      }, {
        "name" : "",
        "type" : 14
      }, {
        "name" : "",
        "type" : 90
      } ],
      "name" : "(int, bool, error)",
      "type" : "Tuple",
      "underlying" : 166
    }, {
      "name" : "func()",
      "params" : 20,
      "recv" : 43,
      "results" : 20,
      "type" : "Signature",
      "underlying" : 167,
      "variadic" : false
    }, {
      "name" : "func() gorgonia.org/tensor.Shape",
      "params" : 20,
      "recv" : 44,
      "results" : 169,
      "type" : "Signature",
      "underlying" : 168,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 170
      } ],
      "name" : "(gorgonia.org/tensor.Shape)",
      "type" : "Tuple",
      "underlying" : 169
    }, {
      "local-name" : "Shape",
      "name" : "gorgonia.org/tensor.Shape",
      "package" : 1,
      "type" : "Named",
      "underlying" : 40
    }, {
      "name" : "func(interface{}) error",
      "params" : 96,
      "recv" : 46,
      "results" : 120,
      "type" : "Signature",
      "underlying" : 171,
      "variadic" : false
    }, {
      "local-name" : "MemSetter",
      "name" : "gorgonia.org/tensor.MemSetter",
      "package" : 1,
      "type" : "Named",
      "underlying" : 173
    }, {
      "methods" : [ {
        "name" : "Memset",
        "type" : 171
      } ],
      "name" : "interface{Memset(interface{}) error}",
      "type" : "Interface",
      "underlying" : 173
    }, {
      "name" : "func(io.Reader) error",
      "params" : 175,
      "recv" : 48,
      "results" : 120,
      "type" : "Signature",
      "underlying" : 174,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 176
      } ],
      "name" : "(io.Reader)",
      "type" : "Tuple",
      "underlying" : 175
    }, {
      "local-name" : "Reader",
      "name" : "io.Reader",
      "package" : 6,
      "type" : "Named",
      "underlying" : 177
    }, {
      "methods" : [ {
        "name" : "Read",
        "type" : 178
      } ],
      "name" : "interface{Read(p []byte) (n int, err error)}",
      "type" : "Interface",
      "underlying" : 177
    }, {
      "name" : "func(p []byte) (n int, err error)",
      "params" : 179,
      "recv" : 47,
      "results" : 144,
      "type" : "Signature",
      "underlying" : 178,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "p",
        "type" : 143
      } ],
      "name" : "(p []byte)",
      "type" : "Tuple",
      "underlying" : 179
    }, {
      "name" : "func(...int) error",
      "params" : 93,
      "recv" : 49,
      "results" : 120,
      "type" : "Signature",
      "underlying" : 180,
      "variadic" : true
    }, {
      "name" : "func(v interface{}, coord ...int) error",
      "params" : 182,
      "recv" : 50,
      "results" : 120,
      "type" : "Signature",
      "underlying" : 181,
      "variadic" : true
    }, {
      "fields" : [ {
        "name" : "v",
        "type" : 6
      }, {
        "name" : "coord",
        "type" : 40
      } ],
      "name" : "(v interface{}, coord []int)",
      "type" : "Tuple",
      "underlying" : 182
    }, {
      "name" : "func(...gorgonia.org/tensor.Slice) (gorgonia.org/tensor.View, error)",
      "params" : 184,
      "recv" : 65,
      "results" : 188,
      "type" : "Signature",
      "underlying" : 183,
      "variadic" : true
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 185
      } ],
      "name" : "([]gorgonia.org/tensor.Slice)",
      "type" : "Tuple",
      "underlying" : 184
    }, {
      "elem" : 186,
      "name" : "[]gorgonia.org/tensor.Slice",
      "type" : "Slice",
      "underlying" : 185
    }, {
      "local-name" : "Slice",
      "name" : "gorgonia.org/tensor.Slice",
      "package" : 1,
      "type" : "Named",
      "underlying" : 187
    }, {
      "methods" : [ {
        "name" : "End",
        "type" : 19
      }, {
        "name" : "Start",
        "type" : 19
      }, {
        "name" : "Step",
        "type" : 19
      } ],
      "name" : "interface{End() int; Start() int; Step() int}",
      "type" : "Interface",
      "underlying" : 187
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 189
      }, {
        "name" : "",
        "type" : 90
      } ],
      "name" : "(gorgonia.org/tensor.View, error)",
      "type" : "Tuple",
      "underlying" : 188
    }, {
      "local-name" : "View",
      "name" : "gorgonia.org/tensor.View",
      "package" : 1,
      "type" : "Named",
      "underlying" : 190
    }, {
      "methods" : [ {
        "name" : "Apply",
        "type" : 4
      }, {
        "name" : "At",
        "type" : 92
      }, {
        "name" : "Clone",
        "type" : 95
      }, {
        "name" : "Data",
        "type" : 95
      }, {
        "name" : "DataOrder",
        "type" : 99
      }, {
        "name" : "DataSize",
        "type" : 19
      }, {
        "name" : "Dims",
        "type" : 19
      }, {
        "name" : "Dtype",
        "type" : 102
      }, {
        "name" : "Engine",
        "type" : 104
      }, {
        "name" : "Eq",
        "type" : 128
      }, {
        "name" : "Format",
        "type" : 131
      }, {
        "name" : "GobDecode",
        "type" : 148
      }, {
        "name" : "GobEncode",
        "type" : 152
      }, {
        "name" : "IsManuallyManaged",
        "type" : 29
      }, {
        "name" : "IsMaterializable",
        "type" : 29
      }, {
        "name" : "IsNativelyAccessible",
        "type" : 29
      }, {
        "name" : "IsScalar",
        "type" : 29
      }, {
        "name" : "IsView",
        "type" : 29
      }, {
        "name" : "Iterator",
        "type" : 156
      }, {
        "name" : "Materialize",
        "type" : 191
      }, {
        "name" : "MemSize",
        "type" : 79
      }, {
        "name" : "Memset",
        "type" : 171
      }, {
        "name" : "Pointer",
        "type" : 112
      }, {
        "name" : "ReadNpy",
        "type" : 174
      }, {
        "name" : "RequiresIterator",
        "type" : 29
      }, {
        "name" : "Reshape",
        "type" : 180
      }, {
        "name" : "ScalarValue",
        "type" : 95
      }, {
        "name" : "SetAt",
        "type" : 181
      }, {
        "name" : "Shape",
        "type" : 168
      }, {
        "name" : "Size",
        "type" : 19
      }, {
        "name" : "Slice",
        "type" : 183
      }, {
        "name" : "Strides",
        "type" : 160
      }, {
        "name" : "String",
        "type" : 78
      }, {
        "name" : "T",
        "type" : 193
      }, {
        "name" : "Transpose",
        "type" : 195
      }, {
        "name" : "UT",
        "type" : 167
      }, {
        "name" : "Uintptr",
        "type" : 79
      }, {
        "name" : "WriteNpy",
        "type" : 196
      }, {
        "name" : "Zero",
        "type" : 167
      }, {
        "name" : "arr",
        "type" : 200
      }, {
        "name" : "arrPtr",
        "type" : 208
      }, {
        "name" : "hdr",
        "type" : 211
      }, {
        "name" : "standardEngine",
        "type" : 216
      } ],
      "name" : "interface{IsMaterializable() bool; IsView() bool; Materialize() gorgonia.org/tensor.Tensor; gorgonia.org/tensor.Tensor}",
      "type" : "Interface",
      "underlying" : 190
    }, {
      "name" : "func() gorgonia.org/tensor.Tensor",
      "params" : 20,
      "recv" : 51,
      "results" : 192,
      "type" : "Signature",
      "underlying" : 191,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 2
      } ],
      "name" : "(gorgonia.org/tensor.Tensor)",
      "type" : "Tuple",
      "underlying" : 192
    }, {
      "name" : "func(axes ...int) error",
      "params" : 194,
      "recv" : 52,
      "results" : 120,
      "type" : "Signature",
      "underlying" : 193,
      "variadic" : true
    }, {
      "fields" : [ {
        "name" : "axes",
        "type" : 40
      } ],
      "name" : "(axes []int)",
      "type" : "Tuple",
      "underlying" : 194
    }, {
      "name" : "func() error",
      "params" : 20,
      "recv" : 53,
      "results" : 120,
      "type" : "Signature",
      "underlying" : 195,
      "variadic" : false
    }, {
      "name" : "func(io.Writer) error",
      "params" : 197,
      "recv" : 54,
      "results" : 120,
      "type" : "Signature",
      "underlying" : 196,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 198
      } ],
      "name" : "(io.Writer)",
      "type" : "Tuple",
      "underlying" : 197
    }, {
      "local-name" : "Writer",
      "name" : "io.Writer",
      "package" : 6,
      "type" : "Named",
      "underlying" : 199
    }, {
      "methods" : [ {
        "name" : "Write",
        "type" : 178
      } ],
      "name" : "interface{Write(p []byte) (n int, err error)}",
      "type" : "Interface",
      "underlying" : 199
    }, {
      "name" : "func() gorgonia.org/tensor.array",
      "params" : 20,
      "recv" : 56,
      "results" : 201,
      "type" : "Signature",
      "underlying" : 200,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 202
      } ],
      "name" : "(gorgonia.org/tensor.array)",
      "type" : "Tuple",
      "underlying" : 201
    }, {
      "local-name" : "array",
      "name" : "gorgonia.org/tensor.array",
      "package" : 1,
      "type" : "Named",
      "underlying" : 203
    }, {
      "fields" : [ {
        "name" : "Header",
        "type" : 204
      }, {
        "name" : "t",
        "type" : 15
      }, {
        "name" : "v",
        "type" : 6
      } ],
      "name" : "struct{gorgonia.org/tensor/internal/storage.Header; t gorgonia.org/tensor.Dtype; v interface{}}",
      "type" : "Struct",
      "underlying" : 203
    }, {
      "local-name" : "Header",
      "name" : "gorgonia.org/tensor/internal/storage.Header",
      "package" : 7,
      "type" : "Named",
      "underlying" : 205
    }, {
      "fields" : [ {
        "name" : "Ptr",
        "type" : 69
      }, {
        "name" : "L",
        "type" : 22
      }, {
        "name" : "C",
        "type" : 22
      } ],
      "name" : "struct{Ptr unsafe.Pointer; L int; C int}",
      "type" : "Struct",
      "underlying" : 205
    }, {
      "local-name" : "arrayer",
      "name" : "gorgonia.org/tensor.arrayer",
      "package" : 1,
      "type" : "Named",
      "underlying" : 207
    }, {
      "methods" : [ {
        "name" : "arr",
        "type" : 200
      }, {
        "name" : "arrPtr",
        "type" : 208
      } ],
      "name" : "interface{arr() gorgonia.org/tensor.array; arrPtr() *gorgonia.org/tensor.array}",
      "type" : "Interface",
      "underlying" : 207
    }, {
      "name" : "func() *gorgonia.org/tensor.array",
      "params" : 20,
      "recv" : 55,
      "results" : 209,
      "type" : "Signature",
      "underlying" : 208,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 210
      } ],
      "name" : "(*gorgonia.org/tensor.array)",
      "type" : "Tuple",
      "underlying" : 209
    }, {
      "elem" : 202,
      "name" : "*gorgonia.org/tensor.array",
      "type" : "Pointer",
      "underlying" : 210
    }, {
      "name" : "func() *gorgonia.org/tensor/internal/storage.Header",
      "params" : 20,
      "recv" : 57,
      "results" : 212,
      "type" : "Signature",
      "underlying" : 211,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 213
      } ],
      "name" : "(*gorgonia.org/tensor/internal/storage.Header)",
      "type" : "Tuple",
      "underlying" : 212
    }, {
      "elem" : 204,
      "name" : "*gorgonia.org/tensor/internal/storage.Header",
      "type" : "Pointer",
      "underlying" : 213
    }, {
      "local-name" : "headerer",
      "name" : "gorgonia.org/tensor.headerer",
      "package" : 1,
      "type" : "Named",
      "underlying" : 215
    }, {
      "methods" : [ {
        "name" : "hdr",
        "type" : 211
      } ],
      "name" : "interface{hdr() *gorgonia.org/tensor/internal/storage.Header}",
      "type" : "Interface",
      "underlying" : 215
    }, {
      "name" : "func() gorgonia.org/tensor.standardEngine",
      "params" : 20,
      "recv" : 64,
      "results" : 217,
      "type" : "Signature",
      "underlying" : 216,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 218
      } ],
      "name" : "(gorgonia.org/tensor.standardEngine)",
      "type" : "Tuple",
      "underlying" : 217
    }, {
      "local-name" : "standardEngine",
      "name" : "gorgonia.org/tensor.standardEngine",
      "package" : 1,
      "type" : "Named",
      "underlying" : 219
    }, {
      "methods" : [ {
        "name" : "Accessible",
        "type" : 108
      }, {
        "name" : "Add",
        "type" : 220
      }, {
        "name" : "AddScalar",
        "type" : 223
      }, {
        "name" : "Alloc",
        "type" : 115
      }, {
        "name" : "AllocAccessible",
        "type" : 29
      }, {
        "name" : "Div",
        "type" : 220
      }, {
        "name" : "DivScalar",
        "type" : 223
      }, {
        "name" : "Dot",
        "type" : 220
      }, {
        "name" : "ElEq",
        "type" : 220
      }, {
        "name" : "ElNe",
        "type" : 220
      }, {
        "name" : "EqScalar",
        "type" : 223
      }, {
        "name" : "FMA",
        "type" : 225
      }, {
        "name" : "FMAScalar",
        "type" : 229
      }, {
        "name" : "Free",
        "type" : 118
      }, {
        "name" : "Gt",
        "type" : 220
      }, {
        "name" : "GtScalar",
        "type" : 223
      }, {
        "name" : "Gte",
        "type" : 220
      }, {
        "name" : "GteScalar",
        "type" : 223
      }, {
        "name" : "Lt",
        "type" : 220
      }, {
        "name" : "LtScalar",
        "type" : 223
      }, {
        "name" : "Lte",
        "type" : 220
      }, {
        "name" : "LteScalar",
        "type" : 223
      }, {
        "name" : "MatMul",
        "type" : 231
      }, {
        "name" : "MatVecMul",
        "type" : 231
      }, {
        "name" : "Memclr",
        "type" : 121
      }, {
        "name" : "Memcpy",
        "type" : 122
      }, {
        "name" : "Memset",
        "type" : 124
      }, {
        "name" : "Mod",
        "type" : 220
      }, {
        "name" : "ModScalar",
        "type" : 223
      }, {
        "name" : "Mul",
        "type" : 220
      }, {
        "name" : "MulScalar",
        "type" : 223
      }, {
        "name" : "NeScalar",
        "type" : 223
      }, {
        "name" : "Outer",
        "type" : 231
      }, {
        "name" : "Pow",
        "type" : 220
      }, {
        "name" : "PowScalar",
        "type" : 223
      }, {
        "name" : "SVD",
        "type" : 235
      }, {
        "name" : "Sub",
        "type" : 220
      }, {
        "name" : "SubScalar",
        "type" : 223
      }, {
        "name" : "WorksWith",
        "type" : 126
      } ],
      "name" : "interface{gorgonia.org/tensor.Adder; gorgonia.org/tensor.Diver; gorgonia.org/tensor.Dotter; gorgonia.org/tensor.ElEqer; gorgonia.org/tensor.Engine; gorgonia.org/tensor.FMAer; gorgonia.org/tensor.Gteer; gorgonia.org/tensor.Gter; gorgonia.org/tensor.Lteer; gorgonia.org/tensor.Lter; gorgonia.org/tensor.MatMuler; gorgonia.org/tensor.MatVecMuler; gorgonia.org/tensor.Moder; gorgonia.org/tensor.Muler; gorgonia.org/tensor.OuterProder; gorgonia.org/tensor.Power; gorgonia.org/tensor.SVDer; gorgonia.org/tensor.Suber}",
      "type" : "Interface",
      "underlying" : 219
    }, {
      "name" : "func(a gorgonia.org/tensor.Tensor, b gorgonia.org/tensor.Tensor, opts ...gorgonia.org/tensor.FuncOpt) (gorgonia.org/tensor.Tensor, error)",
      "params" : 1,
      "recv" : 59,
      "results" : 89,
      "type" : "Signature",
      "underlying" : 220,
      "variadic" : true
    }, {
      "local-name" : "Adder",
      "name" : "gorgonia.org/tensor.Adder",
      "package" : 1,
      "type" : "Named",
      "underlying" : 222
    }, {
      "methods" : [ {
        "name" : "Add",
        "type" : 220
      }, {
        "name" : "AddScalar",
        "type" : 223
      } ],
      "name" : "interface{Add(a gorgonia.org/tensor.Tensor, b gorgonia.org/tensor.Tensor, opts ...gorgonia.org/tensor.FuncOpt) (gorgonia.org/tensor.Tensor, error); AddScalar(a gorgonia.org/tensor.Tensor, b interface{}, leftTensor bool, opts ...gorgonia.org/tensor.FuncOpt) (gorgonia.org/tensor.Tensor, error)}",
      "type" : "Interface",
      "underlying" : 222
    }, {
      "name" : "func(a gorgonia.org/tensor.Tensor, b interface{}, leftTensor bool, opts ...gorgonia.org/tensor.FuncOpt) (gorgonia.org/tensor.Tensor, error)",
      "params" : 224,
      "recv" : 58,
      "results" : 89,
      "type" : "Signature",
      "underlying" : 223,
      "variadic" : true
    }, {
      "fields" : [ {
        "name" : "a",
        "type" : 2
      }, {
        "name" : "b",
        "type" : 6
      }, {
        "name" : "leftTensor",
        "type" : 14
      }, {
        "name" : "opts",
        "type" : 7
      } ],
      "name" : "(a gorgonia.org/tensor.Tensor, b interface{}, leftTensor bool, opts []gorgonia.org/tensor.FuncOpt)",
      "type" : "Tuple",
      "underlying" : 224
    }, {
      "name" : "func(a gorgonia.org/tensor.Tensor, x gorgonia.org/tensor.Tensor, y gorgonia.org/tensor.Tensor) (gorgonia.org/tensor.Tensor, error)",
      "params" : 226,
      "recv" : 61,
      "results" : 89,
      "type" : "Signature",
      "underlying" : 225,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "a",
        "type" : 2
      }, {
        "name" : "x",
        "type" : 2
      }, {
        "name" : "y",
        "type" : 2
      } ],
      "name" : "(a gorgonia.org/tensor.Tensor, x gorgonia.org/tensor.Tensor, y gorgonia.org/tensor.Tensor)",
      "type" : "Tuple",
      "underlying" : 226
    }, {
      "local-name" : "FMAer",
      "name" : "gorgonia.org/tensor.FMAer",
      "package" : 1,
      "type" : "Named",
      "underlying" : 228
    }, {
      "methods" : [ {
        "name" : "FMA",
        "type" : 225
      }, {
        "name" : "FMAScalar",
        "type" : 229
      } ],
      "name" : "interface{FMA(a gorgonia.org/tensor.Tensor, x gorgonia.org/tensor.Tensor, y gorgonia.org/tensor.Tensor) (gorgonia.org/tensor.Tensor, error); FMAScalar(a gorgonia.org/tensor.Tensor, x interface{}, y gorgonia.org/tensor.Tensor) (gorgonia.org/tensor.Tensor, error)}",
      "type" : "Interface",
      "underlying" : 228
    }, {
      "name" : "func(a gorgonia.org/tensor.Tensor, x interface{}, y gorgonia.org/tensor.Tensor) (gorgonia.org/tensor.Tensor, error)",
      "params" : 230,
      "recv" : 60,
      "results" : 89,
      "type" : "Signature",
      "underlying" : 229,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "a",
        "type" : 2
      }, {
        "name" : "x",
        "type" : 6
      }, {
        "name" : "y",
        "type" : 2
      } ],
      "name" : "(a gorgonia.org/tensor.Tensor, x interface{}, y gorgonia.org/tensor.Tensor)",
      "type" : "Tuple",
      "underlying" : 230
    }, {
      "name" : "func(a gorgonia.org/tensor.Tensor, b gorgonia.org/tensor.Tensor, preallocated gorgonia.org/tensor.Tensor) error",
      "params" : 232,
      "recv" : 62,
      "results" : 120,
      "type" : "Signature",
      "underlying" : 231,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "a",
        "type" : 2
      }, {
        "name" : "b",
        "type" : 2
      }, {
        "name" : "preallocated",
        "type" : 2
      } ],
      "name" : "(a gorgonia.org/tensor.Tensor, b gorgonia.org/tensor.Tensor, preallocated gorgonia.org/tensor.Tensor)",
      "type" : "Tuple",
      "underlying" : 232
    }, {
      "local-name" : "MatMuler",
      "name" : "gorgonia.org/tensor.MatMuler",
      "package" : 1,
      "type" : "Named",
      "underlying" : 234
    }, {
      "methods" : [ {
        "name" : "MatMul",
        "type" : 231
      } ],
      "name" : "interface{MatMul(a gorgonia.org/tensor.Tensor, b gorgonia.org/tensor.Tensor, preallocated gorgonia.org/tensor.Tensor) error}",
      "type" : "Interface",
      "underlying" : 234
    }, {
      "name" : "func(a gorgonia.org/tensor.Tensor, uv bool, full bool) (s gorgonia.org/tensor.Tensor, u gorgonia.org/tensor.Tensor, v gorgonia.org/tensor.Tensor, err error)",
      "params" : 236,
      "recv" : 63,
      "results" : 237,
      "type" : "Signature",
      "underlying" : 235,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "a",
        "type" : 2
      }, {
        "name" : "uv",
        "type" : 14
      }, {
        "name" : "full",
        "type" : 14
      } ],
      "name" : "(a gorgonia.org/tensor.Tensor, uv bool, full bool)",
      "type" : "Tuple",
      "underlying" : 236
    }, {
      "fields" : [ {
        "name" : "s",
        "type" : 2
      }, {
        "name" : "u",
        "type" : 2
      }, {
        "name" : "v",
        "type" : 2
      }, {
        "name" : "err",
        "type" : 90
      } ],
      "name" : "(s gorgonia.org/tensor.Tensor, u gorgonia.org/tensor.Tensor, v gorgonia.org/tensor.Tensor, err error)",
      "type" : "Tuple",
      "underlying" : 237
    }, {
      "local-name" : "SVDer",
      "name" : "gorgonia.org/tensor.SVDer",
      "package" : 1,
      "type" : "Named",
      "underlying" : 239
    }, {
      "methods" : [ {
        "name" : "SVD",
        "type" : 235
      } ],
      "name" : "interface{SVD(a gorgonia.org/tensor.Tensor, uv bool, full bool) (s gorgonia.org/tensor.Tensor, u gorgonia.org/tensor.Tensor, v gorgonia.org/tensor.Tensor, err error)}",
      "type" : "Interface",
      "underlying" : 239
    }, {
      "local-name" : "Slicer",
      "name" : "gorgonia.org/tensor.Slicer",
      "package" : 1,
      "type" : "Named",
      "underlying" : 241
    }, {
      "methods" : [ {
        "name" : "Slice",
        "type" : 183
      } ],
      "name" : "interface{Slice(...gorgonia.org/tensor.Slice) (gorgonia.org/tensor.View, error)}",
      "type" : "Interface",
      "underlying" : 241
    }, {
      "fields" : [ {
        "name" : "retVal",
        "type" : 2
      }, {
        "name" : "err",
        "type" : 90
      } ],
      "name" : "(retVal gorgonia.org/tensor.Tensor, err error)",
      "type" : "Tuple",
      "underlying" : 242
    }, {
      "elem" : 244,
      "name" : "*gorgonia.org/gorgonia/cuda.Engine",
      "type" : "Pointer",
      "underlying" : 243
    }, {
      "local-name" : "Engine",
      "name" : "gorgonia.org/gorgonia/cuda.Engine",
      "package" : 0,
      "type" : "Named",
      "underlying" : 245
    }, {
      "fields" : [ {
        "name" : "Engine",
        "type" : 106
      }, {
        "name" : "Mutex",
        "type" : 246
      }, {
        "name" : "a",
        "type" : 248
      }, {
        "name" : "b",
        "type" : 257
      }, {
        "name" : "c",
        "type" : 529
      }, {
        "name" : "d",
        "type" : 296
      }, {
        "name" : "f",
        "type" : 543
      }, {
        "name" : "m",
        "type" : 544
      }, {
        "name" : "n",
        "type" : 545
      }, {
        "name" : "warp",
        "type" : 22
      }, {
        "name" : "mtpb",
        "type" : 22
      }, {
        "name" : "mgdx",
        "type" : 22
      }, {
        "name" : "mgdy",
        "type" : 22
      }, {
        "name" : "mgdz",
        "type" : 22
      }, {
        "name" : "mbdx",
        "type" : 22
      }, {
        "name" : "mbdy",
        "type" : 22
      }, {
        "name" : "mbdz",
        "type" : 22
      }, {
        "name" : "freeMem",
        "type" : 117
      }, {
        "name" : "totalMem",
        "type" : 117
      }, {
        "name" : "syncChan",
        "type" : 531
      }, {
        "name" : "finishChan",
        "type" : 531
      }, {
        "name" : "finishChan2",
        "type" : 531
      }, {
        "name" : "workAvailable",
        "type" : 547
      }, {
        "name" : "err",
        "type" : 90
      }, {
        "name" : "initialized",
        "type" : 14
      }, {
        "name" : "running",
        "type" : 14
      } ],
      "name" : "struct{gorgonia.org/tensor.Engine; sync.Mutex; a gorgonia.org/gorgonia/cuda.bfc; b gorgonia.org/cu/blas.Standard; c gorgonia.org/cu.BatchedContext; d gorgonia.org/cu.Device; f map[string]gorgonia.org/cu.Function; m map[string]gorgonia.org/cu.Module; n gorgonia.org/cu/dnn.Context; warp int; mtpb int; mgdx int; mgdy int; mgdz int; mbdx int; mbdy int; mbdz int; freeMem int64; totalMem int64; syncChan chan struct{}; finishChan chan struct{}; finishChan2 chan struct{}; workAvailable chan bool; err error; initialized bool; running bool}",
      "type" : "Struct",
      "underlying" : 245
    }, {
      "local-name" : "Mutex",
      "name" : "sync.Mutex",
      "package" : 8,
      "type" : "Named",
      "underlying" : 247
    }, {
      "fields" : [ {
        "name" : "state",
        "type" : 73
      }, {
        "name" : "sema",
        "type" : 64
      } ],
      "name" : "struct{state int32; sema uint32}",
      "type" : "Struct",
      "underlying" : 247
    }, {
      "local-name" : "bfc",
      "name" : "gorgonia.org/gorgonia/cuda.bfc",
      "package" : 0,
      "type" : "Named",
      "underlying" : 249
    }, {
      "fields" : [ {
        "name" : "start",
        "type" : 39
      }, {
        "name" : "size",
        "type" : 117
      }, {
        "name" : "blockSize",
        "type" : 117
      }, {
        "name" : "reservedSize",
        "type" : 117
      }, {
        "name" : "freelist",
        "type" : 250
      }, {
        "name" : "used",
        "type" : 256
      }, {
        "name" : "allocated",
        "type" : 117
      }, {
        "name" : "allocs",
        "type" : 22
      }, {
        "name" : "frees",
        "type" : 22
      } ],
      "name" : "struct{start uintptr; size int64; blockSize int64; reservedSize int64; freelist *gorgonia.org/gorgonia/cuda.freelist; used map[uintptr]int64; allocated int64; allocs int; frees int}",
      "type" : "Struct",
      "underlying" : 249
    }, {
      "elem" : 251,
      "name" : "*gorgonia.org/gorgonia/cuda.freelist",
      "type" : "Pointer",
      "underlying" : 250
    }, {
      "local-name" : "freelist",
      "name" : "gorgonia.org/gorgonia/cuda.freelist",
      "package" : 0,
      "type" : "Named",
      "underlying" : 252
    }, {
      "fields" : [ {
        "name" : "first",
        "type" : 253
      }, {
        "name" : "last",
        "type" : 253
      }, {
        "name" : "l",
        "type" : 22
      } ],
      "name" : "struct{first *gorgonia.org/gorgonia/cuda.memblock; last *gorgonia.org/gorgonia/cuda.memblock; l int}",
      "type" : "Struct",
      "underlying" : 252
    }, {
      "elem" : 254,
      "name" : "*gorgonia.org/gorgonia/cuda.memblock",
      "type" : "Pointer",
      "underlying" : 253
    }, {
      "local-name" : "memblock",
      "name" : "gorgonia.org/gorgonia/cuda.memblock",
      "package" : 0,
      "type" : "Named",
      "underlying" : 255
    }, {
      "fields" : [ {
        "name" : "address",
        "type" : 39
      }, {
        "name" : "size",
        "type" : 117
      }, {
        "name" : "next",
        "type" : 253
      }, {
        "name" : "prev",
        "type" : 253
      } ],
      "name" : "struct{address uintptr; size int64; next *gorgonia.org/gorgonia/cuda.memblock; prev *gorgonia.org/gorgonia/cuda.memblock}",
      "type" : "Struct",
      "underlying" : 255
    }, {
      "elem" : 117,
      "key" : 39,
      "name" : "map[uintptr]int64",
      "type" : "Map",
      "underlying" : 256
    }, {
      "local-name" : "Standard",
      "name" : "gorgonia.org/cu/blas.Standard",
      "package" : 9,
      "type" : "Named",
      "underlying" : 258
    }, {
      "fields" : [ {
        "name" : "h",
        "type" : 259
      }, {
        "name" : "o",
        "type" : 260
      }, {
        "name" : "m",
        "type" : 261
      }, {
        "name" : "e",
        "type" : 90
      }, {
        "name" : "Context",
        "type" : 262
      }, {
        "name" : "dataOnDev",
        "type" : 14
      }, {
        "name" : "Mutex",
        "type" : 246
      } ],
      "name" : "struct{h invalid type; o gorgonia.org/cu/blas.Order; m gorgonia.org/cu/blas.PointerMode; e error; gorgonia.org/cu.Context; dataOnDev bool; sync.Mutex}",
      "type" : "Struct",
      "underlying" : 258
    }, {
      "name" : "invalid type",
      "type" : "Basic",
      "underlying" : 259
    }, {
      "local-name" : "Order",
      "name" : "gorgonia.org/cu/blas.Order",
      "package" : 9,
      "type" : "Named",
      "underlying" : 71
    }, {
      "local-name" : "PointerMode",
      "name" : "gorgonia.org/cu/blas.PointerMode",
      "package" : 9,
      "type" : "Named",
      "underlying" : 71
    }, {
      "local-name" : "Context",
      "name" : "gorgonia.org/cu.Context",
      "package" : 10,
      "type" : "Named",
      "underlying" : 263
    }, {
      "methods" : [ {
        "name" : "Address",
        "type" : 264
      }, {
        "name" : "AddressMode",
        "type" : 270
      }, {
        "name" : "Array",
        "type" : 274
      }, {
        "name" : "AttachMemAsync",
        "type" : 279
      }, {
        "name" : "BorderColor",
        "type" : 283
      }, {
        "name" : "CUDAContext",
        "type" : 287
      }, {
        "name" : "Close",
        "type" : 195
      }, {
        "name" : "CurrentCacheConfig",
        "type" : 291
      }, {
        "name" : "CurrentDevice",
        "type" : 294
      }, {
        "name" : "CurrentFlags",
        "type" : 297
      }, {
        "name" : "Descriptor",
        "type" : 300
      }, {
        "name" : "Descriptor3",
        "type" : 306
      }, {
        "name" : "DestroyArray",
        "type" : 310
      }, {
        "name" : "DestroyEvent",
        "type" : 311
      }, {
        "name" : "DestroyStream",
        "type" : 316
      }, {
        "name" : "DisablePeerAccess",
        "type" : 319
      }, {
        "name" : "Do",
        "type" : 321
      }, {
        "name" : "Elapsed",
        "type" : 323
      }, {
        "name" : "EnablePeerAccess",
        "type" : 327
      }, {
        "name" : "ErrChan",
        "type" : 329
      }, {
        "name" : "Error",
        "type" : 195
      }, {
        "name" : "FilterMode",
        "type" : 332
      }, {
        "name" : "Format",
        "type" : 335
      }, {
        "name" : "FunctionAttribute",
        "type" : 337
      }, {
        "name" : "GetArray",
        "type" : 343
      }, {
        "name" : "LaunchKernel",
        "type" : 346
      }, {
        "name" : "Limits",
        "type" : 349
      }, {
        "name" : "Load",
        "type" : 353
      }, {
        "name" : "MakeEvent",
        "type" : 357
      }, {
        "name" : "MakeStream",
        "type" : 361
      }, {
        "name" : "MakeStreamWithPriority",
        "type" : 365
      }, {
        "name" : "MaxAnisotropy",
        "type" : 367
      }, {
        "name" : "MemAlloc",
        "type" : 369
      }, {
        "name" : "MemAllocManaged",
        "type" : 372
      }, {
        "name" : "MemAllocPitch",
        "type" : 375
      }, {
        "name" : "MemFree",
        "type" : 378
      }, {
        "name" : "MemFreeHost",
        "type" : 380
      }, {
        "name" : "MemInfo",
        "type" : 382
      }, {
        "name" : "Memcpy",
        "type" : 384
      }, {
        "name" : "Memcpy2D",
        "type" : 386
      }, {
        "name" : "Memcpy2DAsync",
        "type" : 391
      }, {
        "name" : "Memcpy2DUnaligned",
        "type" : 386
      }, {
        "name" : "Memcpy3D",
        "type" : 393
      }, {
        "name" : "Memcpy3DAsync",
        "type" : 397
      }, {
        "name" : "Memcpy3DPeer",
        "type" : 399
      }, {
        "name" : "Memcpy3DPeerAsync",
        "type" : 403
      }, {
        "name" : "MemcpyAsync",
        "type" : 405
      }, {
        "name" : "MemcpyAtoA",
        "type" : 407
      }, {
        "name" : "MemcpyAtoD",
        "type" : 409
      }, {
        "name" : "MemcpyAtoH",
        "type" : 411
      }, {
        "name" : "MemcpyAtoHAsync",
        "type" : 413
      }, {
        "name" : "MemcpyDtoA",
        "type" : 415
      }, {
        "name" : "MemcpyDtoD",
        "type" : 417
      }, {
        "name" : "MemcpyDtoDAsync",
        "type" : 419
      }, {
        "name" : "MemcpyDtoH",
        "type" : 421
      }, {
        "name" : "MemcpyDtoHAsync",
        "type" : 423
      }, {
        "name" : "MemcpyHtoA",
        "type" : 425
      }, {
        "name" : "MemcpyHtoAAsync",
        "type" : 427
      }, {
        "name" : "MemcpyHtoD",
        "type" : 429
      }, {
        "name" : "MemcpyHtoDAsync",
        "type" : 431
      }, {
        "name" : "MemcpyPeer",
        "type" : 433
      }, {
        "name" : "MemcpyPeerAsync",
        "type" : 435
      }, {
        "name" : "MemsetD16",
        "type" : 437
      }, {
        "name" : "MemsetD16Async",
        "type" : 439
      }, {
        "name" : "MemsetD2D16",
        "type" : 441
      }, {
        "name" : "MemsetD2D16Async",
        "type" : 443
      }, {
        "name" : "MemsetD2D32",
        "type" : 445
      }, {
        "name" : "MemsetD2D32Async",
        "type" : 447
      }, {
        "name" : "MemsetD2D8",
        "type" : 449
      }, {
        "name" : "MemsetD2D8Async",
        "type" : 451
      }, {
        "name" : "MemsetD32",
        "type" : 453
      }, {
        "name" : "MemsetD32Async",
        "type" : 455
      }, {
        "name" : "MemsetD8",
        "type" : 457
      }, {
        "name" : "MemsetD8Async",
        "type" : 459
      }, {
        "name" : "ModuleFunction",
        "type" : 461
      }, {
        "name" : "ModuleGlobal",
        "type" : 464
      }, {
        "name" : "Priority",
        "type" : 466
      }, {
        "name" : "QueryEvent",
        "type" : 469
      }, {
        "name" : "QueryStream",
        "type" : 471
      }, {
        "name" : "Record",
        "type" : 472
      }, {
        "name" : "Run",
        "type" : 474
      }, {
        "name" : "SetAddress",
        "type" : 475
      }, {
        "name" : "SetAddress2D",
        "type" : 478
      }, {
        "name" : "SetAddressMode",
        "type" : 480
      }, {
        "name" : "SetBorderColor",
        "type" : 482
      }, {
        "name" : "SetCacheConfig",
        "type" : 484
      }, {
        "name" : "SetCurrentCacheConfig",
        "type" : 486
      }, {
        "name" : "SetFilterMode",
        "type" : 488
      }, {
        "name" : "SetFormat",
        "type" : 490
      }, {
        "name" : "SetFunctionSharedMemConfig",
        "type" : 492
      }, {
        "name" : "SetLimit",
        "type" : 495
      }, {
        "name" : "SetMaxAnisotropy",
        "type" : 497
      }, {
        "name" : "SetMipmapFilterMode",
        "type" : 488
      }, {
        "name" : "SetMipmapLevelBias",
        "type" : 499
      }, {
        "name" : "SetMipmapLevelClamp",
        "type" : 501
      }, {
        "name" : "SetSharedMemConfig",
        "type" : 503
      }, {
        "name" : "SetTexRefFlags",
        "type" : 505
      }, {
        "name" : "SharedMemConfig",
        "type" : 508
      }, {
        "name" : "StreamFlags",
        "type" : 510
      }, {
        "name" : "StreamPriorityRange",
        "type" : 512
      }, {
        "name" : "SurfRefSetArray",
        "type" : 514
      }, {
        "name" : "Synchronize",
        "type" : 167
      }, {
        "name" : "SynchronizeEvent",
        "type" : 469
      }, {
        "name" : "SynchronizeStream",
        "type" : 471
      }, {
        "name" : "TexRefFlags",
        "type" : 516
      }, {
        "name" : "TexRefSetArray",
        "type" : 518
      }, {
        "name" : "Unload",
        "type" : 520
      }, {
        "name" : "Wait",
        "type" : 522
      }, {
        "name" : "WaitOnValue32",
        "type" : 524
      }, {
        "name" : "Work",
        "type" : 526
      }, {
        "name" : "WriteValue32",
        "type" : 524
      } ],
      "name" : "interface{Address(hTexRef gorgonia.org/cu.TexRef) (pdptr gorgonia.org/cu.DevicePtr, err error); AddressMode(hTexRef gorgonia.org/cu.TexRef, dim int) (pam gorgonia.org/cu.AddressMode, err error); Array(hTexRef gorgonia.org/cu.TexRef) (phArray gorgonia.org/cu.Array, err error); AttachMemAsync(hStream gorgonia.org/cu.Stream, dptr gorgonia.org/cu.DevicePtr, length int64, flags uint); BorderColor(hTexRef gorgonia.org/cu.TexRef) (pBorderColor [3]float32, err error); CUDAContext() gorgonia.org/cu.CUContext; Close() error; CurrentCacheConfig() (pconfig gorgonia.org/cu.FuncCacheConfig, err error); CurrentDevice() (device gorgonia.org/cu.Device, err error); CurrentFlags() (flags gorgonia.org/cu.ContextFlags, err error); Descriptor(hArray gorgonia.org/cu.Array) (pArrayDescriptor gorgonia.org/cu.ArrayDesc, err error); Descriptor3(hArray gorgonia.org/cu.Array) (pArrayDescriptor gorgonia.org/cu.Array3Desc, err error); DestroyArray(hArray gorgonia.org/cu.Array); DestroyEvent(event *gorgonia.org/cu.Event); DestroyStream(hStream *gorgonia.org/cu.Stream); DisablePeerAccess(peerContext gorgonia.org/cu.CUContext); Do(fn func() error) error; Elapsed(hStart gorgonia.org/cu.Event, hEnd gorgonia.org/cu.Event) (pMilliseconds float64, err error); EnablePeerAccess(peerContext gorgonia.org/cu.CUContext, Flags uint); ErrChan() chan error; Error() error; FilterMode(hTexRef gorgonia.org/cu.TexRef) (pfm gorgonia.org/cu.FilterMode, err error); Format(hTexRef gorgonia.org/cu.TexRef) (pFormat gorgonia.org/cu.Format, pNumChannels int, err error); FunctionAttribute(fn gorgonia.org/cu.Function, attrib gorgonia.org/cu.FunctionAttribute) (pi int, err error); GetArray(hSurfRef gorgonia.org/cu.SurfRef) (phArray gorgonia.org/cu.Array, err error); LaunchKernel(fn gorgonia.org/cu.Function, gridDimX int, gridDimY int, gridDimZ int, blockDimX int, blockDimY int, blockDimZ int, sharedMemBytes int, stream gorgonia.org/cu.Stream, kernelParams []unsafe.Pointer); Limits(limit gorgonia.org/cu.Limit) (pvalue int64, err error); Load(name string) (m gorgonia.org/cu.Module, err error); MakeEvent(flags gorgonia.org/cu.EventFlags) (event gorgonia.org/cu.Event, err error); MakeStream(flags gorgonia.org/cu.StreamFlags) (stream gorgonia.org/cu.Stream, err error); MakeStreamWithPriority(priority int, flags gorgonia.org/cu.StreamFlags) (stream gorgonia.org/cu.Stream, err error); MaxAnisotropy(hTexRef gorgonia.org/cu.TexRef) (pmaxAniso int, err error); MemAlloc(bytesize int64) (dptr gorgonia.org/cu.DevicePtr, err error); MemAllocManaged(bytesize int64, flags gorgonia.org/cu.MemAttachFlags) (dptr gorgonia.org/cu.DevicePtr, err error); MemAllocPitch(WidthInBytes int64, Height int64, ElementSizeBytes uint) (dptr gorgonia.org/cu.DevicePtr, pPitch int64, err error); MemFree(dptr gorgonia.org/cu.DevicePtr); MemFreeHost(p unsafe.Pointer); MemInfo() (free int64, total int64, err error); Memcpy(dst gorgonia.org/cu.DevicePtr, src gorgonia.org/cu.DevicePtr, ByteCount int64); Memcpy2D(pCopy gorgonia.org/cu.Memcpy2dParam); Memcpy2DAsync(pCopy gorgonia.org/cu.Memcpy2dParam, hStream gorgonia.org/cu.Stream); Memcpy2DUnaligned(pCopy gorgonia.org/cu.Memcpy2dParam); Memcpy3D(pCopy gorgonia.org/cu.Memcpy3dParam); Memcpy3DAsync(pCopy gorgonia.org/cu.Memcpy3dParam, hStream gorgonia.org/cu.Stream); Memcpy3DPeer(pCopy gorgonia.org/cu.Memcpy3dPeerParam); Memcpy3DPeerAsync(pCopy gorgonia.org/cu.Memcpy3dPeerParam, hStream gorgonia.org/cu.Stream); MemcpyAsync(dst gorgonia.org/cu.DevicePtr, src gorgonia.org/cu.DevicePtr, ByteCount int64, hStream gorgonia.org/cu.Stream); MemcpyAtoA(dstArray gorgonia.org/cu.Array, dstOffset int64, srcArray gorgonia.org/cu.Array, srcOffset int64, ByteCount int64); MemcpyAtoD(dstDevice gorgonia.org/cu.DevicePtr, srcArray gorgonia.org/cu.Array, srcOffset int64, ByteCount int64); MemcpyAtoH(dstHost unsafe.Pointer, srcArray gorgonia.org/cu.Array, srcOffset int64, ByteCount int64); MemcpyAtoHAsync(dstHost unsafe.Pointer, srcArray gorgonia.org/cu.Array, srcOffset int64, ByteCount int64, hStream gorgonia.org/cu.Stream); MemcpyDtoA(dstArray gorgonia.org/cu.Array, dstOffset int64, srcDevice gorgonia.org/cu.DevicePtr, ByteCount int64); MemcpyDtoD(dstDevice gorgonia.org/cu.DevicePtr, srcDevice gorgonia.org/cu.DevicePtr, ByteCount int64); MemcpyDtoDAsync(dstDevice gorgonia.org/cu.DevicePtr, srcDevice gorgonia.org/cu.DevicePtr, ByteCount int64, hStream gorgonia.org/cu.Stream); MemcpyDtoH(dstHost unsafe.Pointer, srcDevice gorgonia.org/cu.DevicePtr, ByteCount int64); MemcpyDtoHAsync(dstHost unsafe.Pointer, srcDevice gorgonia.org/cu.DevicePtr, ByteCount int64, hStream gorgonia.org/cu.Stream); MemcpyHtoA(dstArray gorgonia.org/cu.Array, dstOffset int64, srcHost unsafe.Pointer, ByteCount int64); MemcpyHtoAAsync(dstArray gorgonia.org/cu.Array, dstOffset int64, srcHost unsafe.Pointer, ByteCount int64, hStream gorgonia.org/cu.Stream); MemcpyHtoD(dstDevice gorgonia.org/cu.DevicePtr, srcHost unsafe.Pointer, ByteCount int64); MemcpyHtoDAsync(dstDevice gorgonia.org/cu.DevicePtr, srcHost unsafe.Pointer, ByteCount int64, hStream gorgonia.org/cu.Stream); MemcpyPeer(dstDevice gorgonia.org/cu.DevicePtr, dstContext gorgonia.org/cu.CUContext, srcDevice gorgonia.org/cu.DevicePtr, srcContext gorgonia.org/cu.CUContext, ByteCount int64); MemcpyPeerAsync(dstDevice gorgonia.org/cu.DevicePtr, dstContext gorgonia.org/cu.CUContext, srcDevice gorgonia.org/cu.DevicePtr, srcContext gorgonia.org/cu.CUContext, ByteCount int64, hStream gorgonia.org/cu.Stream); MemsetD16(dstDevice gorgonia.org/cu.DevicePtr, us uint16, N int64); MemsetD16Async(dstDevice gorgonia.org/cu.DevicePtr, us uint16, N int64, hStream gorgonia.org/cu.Stream); MemsetD2D16(dstDevice gorgonia.org/cu.DevicePtr, dstPitch int64, us uint16, Width int64, Height int64); MemsetD2D16Async(dstDevice gorgonia.org/cu.DevicePtr, dstPitch int64, us uint16, Width int64, Height int64, hStream gorgonia.org/cu.Stream); MemsetD2D32(dstDevice gorgonia.org/cu.DevicePtr, dstPitch int64, ui uint, Width int64, Height int64); MemsetD2D32Async(dstDevice gorgonia.org/cu.DevicePtr, dstPitch int64, ui uint, Width int64, Height int64, hStream gorgonia.org/cu.Stream); MemsetD2D8(dstDevice gorgonia.org/cu.DevicePtr, dstPitch int64, uc byte, Width int64, Height int64); MemsetD2D8Async(dstDevice gorgonia.org/cu.DevicePtr, dstPitch int64, uc byte, Width int64, Height int64, hStream gorgonia.org/cu.Stream); MemsetD32(dstDevice gorgonia.org/cu.DevicePtr, ui uint, N int64); MemsetD32Async(dstDevice gorgonia.org/cu.DevicePtr, ui uint, N int64, hStream gorgonia.org/cu.Stream); MemsetD8(dstDevice gorgonia.org/cu.DevicePtr, uc byte, N int64); MemsetD8Async(dstDevice gorgonia.org/cu.DevicePtr, uc byte, N int64, hStream gorgonia.org/cu.Stream); ModuleFunction(m gorgonia.org/cu.Module, name string) (function gorgonia.org/cu.Function, err error); ModuleGlobal(m gorgonia.org/cu.Module, name string) (dptr gorgonia.org/cu.DevicePtr, size int64, err error); Priority(hStream gorgonia.org/cu.Stream) (priority int, err error); QueryEvent(hEvent gorgonia.org/cu.Event); QueryStream(hStream gorgonia.org/cu.Stream); Record(hEvent gorgonia.org/cu.Event, hStream gorgonia.org/cu.Stream); Run(chan error) error; SetAddress(hTexRef gorgonia.org/cu.TexRef, dptr gorgonia.org/cu.DevicePtr, bytes int64) (ByteOffset int64, err error); SetAddress2D(hTexRef gorgonia.org/cu.TexRef, desc gorgonia.org/cu.ArrayDesc, dptr gorgonia.org/cu.DevicePtr, Pitch int64); SetAddressMode(hTexRef gorgonia.org/cu.TexRef, dim int, am gorgonia.org/cu.AddressMode); SetBorderColor(hTexRef gorgonia.org/cu.TexRef, pBorderColor [3]float32); SetCacheConfig(fn gorgonia.org/cu.Function, config gorgonia.org/cu.FuncCacheConfig); SetCurrentCacheConfig(config gorgonia.org/cu.FuncCacheConfig); SetFilterMode(hTexRef gorgonia.org/cu.TexRef, fm gorgonia.org/cu.FilterMode); SetFormat(hTexRef gorgonia.org/cu.TexRef, fmt gorgonia.org/cu.Format, NumPackedComponents int); SetFunctionSharedMemConfig(fn gorgonia.org/cu.Function, config gorgonia.org/cu.SharedConfig); SetLimit(limit gorgonia.org/cu.Limit, value int64); SetMaxAnisotropy(hTexRef gorgonia.org/cu.TexRef, maxAniso uint); SetMipmapFilterMode(hTexRef gorgonia.org/cu.TexRef, fm gorgonia.org/cu.FilterMode); SetMipmapLevelBias(hTexRef gorgonia.org/cu.TexRef, bias float64); SetMipmapLevelClamp(hTexRef gorgonia.org/cu.TexRef, minMipmapLevelClamp float64, maxMipmapLevelClamp float64); SetSharedMemConfig(config gorgonia.org/cu.SharedConfig); SetTexRefFlags(hTexRef gorgonia.org/cu.TexRef, Flags gorgonia.org/cu.TexRefFlags); SharedMemConfig() (pConfig gorgonia.org/cu.SharedConfig, err error); StreamFlags(hStream gorgonia.org/cu.Stream) (flags uint, err error); StreamPriorityRange() (leastPriority int, greatestPriority int, err error); SurfRefSetArray(hSurfRef gorgonia.org/cu.SurfRef, hArray gorgonia.org/cu.Array, Flags uint); Synchronize(); SynchronizeEvent(hEvent gorgonia.org/cu.Event); SynchronizeStream(hStream gorgonia.org/cu.Stream); TexRefFlags(hTexRef gorgonia.org/cu.TexRef) (pFlags uint, err error); TexRefSetArray(hTexRef gorgonia.org/cu.TexRef, hArray gorgonia.org/cu.Array, Flags uint); Unload(hmod gorgonia.org/cu.Module); Wait(hStream gorgonia.org/cu.Stream, hEvent gorgonia.org/cu.Event, Flags uint); WaitOnValue32(stream gorgonia.org/cu.Stream, addr gorgonia.org/cu.DevicePtr, value uint32, flags uint); Work() <-chan func() error; WriteValue32(stream gorgonia.org/cu.Stream, addr gorgonia.org/cu.DevicePtr, value uint32, flags uint)}",
      "type" : "Interface",
      "underlying" : 263
    }, {
      "name" : "func(hTexRef gorgonia.org/cu.TexRef) (pdptr gorgonia.org/cu.DevicePtr, err error)",
      "params" : 265,
      "recv" : 66,
      "results" : 268,
      "type" : "Signature",
      "underlying" : 264,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "hTexRef",
        "type" : 266
      } ],
      "name" : "(hTexRef gorgonia.org/cu.TexRef)",
      "type" : "Tuple",
      "underlying" : 265
    }, {
      "local-name" : "TexRef",
      "name" : "gorgonia.org/cu.TexRef",
      "package" : 10,
      "type" : "Named",
      "underlying" : 267
    }, {
      "fields" : [ {
        "name" : "ref",
        "type" : 259
      } ],
      "name" : "struct{ref invalid type}",
      "type" : "Struct",
      "underlying" : 267
    }, {
      "fields" : [ {
        "name" : "pdptr",
        "type" : 269
      }, {
        "name" : "err",
        "type" : 90
      } ],
      "name" : "(pdptr gorgonia.org/cu.DevicePtr, err error)",
      "type" : "Tuple",
      "underlying" : 268
    }, {
      "local-name" : "DevicePtr",
      "name" : "gorgonia.org/cu.DevicePtr",
      "package" : 10,
      "type" : "Named",
      "underlying" : 39
    }, {
      "name" : "func(hTexRef gorgonia.org/cu.TexRef, dim int) (pam gorgonia.org/cu.AddressMode, err error)",
      "params" : 271,
      "recv" : 67,
      "results" : 272,
      "type" : "Signature",
      "underlying" : 270,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "hTexRef",
        "type" : 266
      }, {
        "name" : "dim",
        "type" : 22
      } ],
      "name" : "(hTexRef gorgonia.org/cu.TexRef, dim int)",
      "type" : "Tuple",
      "underlying" : 271
    }, {
      "fields" : [ {
        "name" : "pam",
        "type" : 273
      }, {
        "name" : "err",
        "type" : 90
      } ],
      "name" : "(pam gorgonia.org/cu.AddressMode, err error)",
      "type" : "Tuple",
      "underlying" : 272
    }, {
      "local-name" : "AddressMode",
      "name" : "gorgonia.org/cu.AddressMode",
      "package" : 10,
      "type" : "Named",
      "underlying" : 71
    }, {
      "name" : "func(hTexRef gorgonia.org/cu.TexRef) (phArray gorgonia.org/cu.Array, err error)",
      "params" : 265,
      "recv" : 68,
      "results" : 275,
      "type" : "Signature",
      "underlying" : 274,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "phArray",
        "type" : 276
      }, {
        "name" : "err",
        "type" : 90
      } ],
      "name" : "(phArray gorgonia.org/cu.Array, err error)",
      "type" : "Tuple",
      "underlying" : 275
    }, {
      "local-name" : "Array",
      "name" : "gorgonia.org/cu.Array",
      "package" : 10,
      "type" : "Named",
      "underlying" : 277
    }, {
      "fields" : [ {
        "name" : "arr",
        "type" : 278
      } ],
      "name" : "struct{arr *invalid type}",
      "type" : "Struct",
      "underlying" : 277
    }, {
      "elem" : 259,
      "name" : "*invalid type",
      "type" : "Pointer",
      "underlying" : 278
    }, {
      "name" : "func(hStream gorgonia.org/cu.Stream, dptr gorgonia.org/cu.DevicePtr, length int64, flags uint)",
      "params" : 280,
      "recv" : 69,
      "results" : 20,
      "type" : "Signature",
      "underlying" : 279,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "hStream",
        "type" : 281
      }, {
        "name" : "dptr",
        "type" : 269
      }, {
        "name" : "length",
        "type" : 117
      }, {
        "name" : "flags",
        "type" : 54
      } ],
      "name" : "(hStream gorgonia.org/cu.Stream, dptr gorgonia.org/cu.DevicePtr, length int64, flags uint)",
      "type" : "Tuple",
      "underlying" : 280
    }, {
      "local-name" : "Stream",
      "name" : "gorgonia.org/cu.Stream",
      "package" : 10,
      "type" : "Named",
      "underlying" : 282
    }, {
      "fields" : [ {
        "name" : "s",
        "type" : 259
      } ],
      "name" : "struct{s invalid type}",
      "type" : "Struct",
      "underlying" : 282
    }, {
      "name" : "func(hTexRef gorgonia.org/cu.TexRef) (pBorderColor [3]float32, err error)",
      "params" : 265,
      "recv" : 70,
      "results" : 284,
      "type" : "Signature",
      "underlying" : 283,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "pBorderColor",
        "type" : 285
      }, {
        "name" : "err",
        "type" : 90
      } ],
      "name" : "(pBorderColor [3]float32, err error)",
      "type" : "Tuple",
      "underlying" : 284
    }, {
      "elem" : 286,
      "name" : "[3]float32",
      "type" : "Array",
      "underlying" : 285
    }, {
      "name" : "float32",
      "type" : "Basic",
      "underlying" : 286
    }, {
      "name" : "func() gorgonia.org/cu.CUContext",
      "params" : 20,
      "recv" : 71,
      "results" : 288,
      "type" : "Signature",
      "underlying" : 287,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 289
      } ],
      "name" : "(gorgonia.org/cu.CUContext)",
      "type" : "Tuple",
      "underlying" : 288
    }, {
      "local-name" : "CUContext",
      "name" : "gorgonia.org/cu.CUContext",
      "package" : 10,
      "type" : "Named",
      "underlying" : 290
    }, {
      "fields" : [ {
        "name" : "ctx",
        "type" : 259
      } ],
      "name" : "struct{ctx invalid type}",
      "type" : "Struct",
      "underlying" : 290
    }, {
      "name" : "func() (pconfig gorgonia.org/cu.FuncCacheConfig, err error)",
      "params" : 20,
      "recv" : 72,
      "results" : 292,
      "type" : "Signature",
      "underlying" : 291,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "pconfig",
        "type" : 293
      }, {
        "name" : "err",
        "type" : 90
      } ],
      "name" : "(pconfig gorgonia.org/cu.FuncCacheConfig, err error)",
      "type" : "Tuple",
      "underlying" : 292
    }, {
      "local-name" : "FuncCacheConfig",
      "name" : "gorgonia.org/cu.FuncCacheConfig",
      "package" : 10,
      "type" : "Named",
      "underlying" : 71
    }, {
      "name" : "func() (device gorgonia.org/cu.Device, err error)",
      "params" : 20,
      "recv" : 73,
      "results" : 295,
      "type" : "Signature",
      "underlying" : 294,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "device",
        "type" : 296
      }, {
        "name" : "err",
        "type" : 90
      } ],
      "name" : "(device gorgonia.org/cu.Device, err error)",
      "type" : "Tuple",
      "underlying" : 295
    }, {
      "local-name" : "Device",
      "name" : "gorgonia.org/cu.Device",
      "package" : 10,
      "type" : "Named",
      "underlying" : 22
    }, {
      "name" : "func() (flags gorgonia.org/cu.ContextFlags, err error)",
      "params" : 20,
      "recv" : 74,
      "results" : 298,
      "type" : "Signature",
      "underlying" : 297,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "flags",
        "type" : 299
      }, {
        "name" : "err",
        "type" : 90
      } ],
      "name" : "(flags gorgonia.org/cu.ContextFlags, err error)",
      "type" : "Tuple",
      "underlying" : 298
    }, {
      "local-name" : "ContextFlags",
      "name" : "gorgonia.org/cu.ContextFlags",
      "package" : 10,
      "type" : "Named",
      "underlying" : 71
    }, {
      "name" : "func(hArray gorgonia.org/cu.Array) (pArrayDescriptor gorgonia.org/cu.ArrayDesc, err error)",
      "params" : 301,
      "recv" : 75,
      "results" : 302,
      "type" : "Signature",
      "underlying" : 300,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "hArray",
        "type" : 276
      } ],
      "name" : "(hArray gorgonia.org/cu.Array)",
      "type" : "Tuple",
      "underlying" : 301
    }, {
      "fields" : [ {
        "name" : "pArrayDescriptor",
        "type" : 303
      }, {
        "name" : "err",
        "type" : 90
      } ],
      "name" : "(pArrayDescriptor gorgonia.org/cu.ArrayDesc, err error)",
      "type" : "Tuple",
      "underlying" : 302
    }, {
      "local-name" : "ArrayDesc",
      "name" : "gorgonia.org/cu.ArrayDesc",
      "package" : 10,
      "type" : "Named",
      "underlying" : 304
    }, {
      "fields" : [ {
        "name" : "Width",
        "type" : 54
      }, {
        "name" : "Height",
        "type" : 54
      }, {
        "name" : "Format",
        "type" : 305
      }, {
        "name" : "NumChannels",
        "type" : 54
      } ],
      "name" : "struct{Width uint; Height uint; Format gorgonia.org/cu.Format; NumChannels uint}",
      "type" : "Struct",
      "underlying" : 304
    }, {
      "local-name" : "Format",
      "name" : "gorgonia.org/cu.Format",
      "package" : 10,
      "type" : "Named",
      "underlying" : 71
    }, {
      "name" : "func(hArray gorgonia.org/cu.Array) (pArrayDescriptor gorgonia.org/cu.Array3Desc, err error)",
      "params" : 301,
      "recv" : 76,
      "results" : 307,
      "type" : "Signature",
      "underlying" : 306,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "pArrayDescriptor",
        "type" : 308
      }, {
        "name" : "err",
        "type" : 90
      } ],
      "name" : "(pArrayDescriptor gorgonia.org/cu.Array3Desc, err error)",
      "type" : "Tuple",
      "underlying" : 307
    }, {
      "local-name" : "Array3Desc",
      "name" : "gorgonia.org/cu.Array3Desc",
      "package" : 10,
      "type" : "Named",
      "underlying" : 309
    }, {
      "fields" : [ {
        "name" : "Width",
        "type" : 54
      }, {
        "name" : "Height",
        "type" : 54
      }, {
        "name" : "Depth",
        "type" : 54
      }, {
        "name" : "Format",
        "type" : 305
      }, {
        "name" : "NumChannels",
        "type" : 54
      }, {
        "name" : "Flags",
        "type" : 54
      } ],
      "name" : "struct{Width uint; Height uint; Depth uint; Format gorgonia.org/cu.Format; NumChannels uint; Flags uint}",
      "type" : "Struct",
      "underlying" : 309
    }, {
      "name" : "func(hArray gorgonia.org/cu.Array)",
      "params" : 301,
      "recv" : 77,
      "results" : 20,
      "type" : "Signature",
      "underlying" : 310,
      "variadic" : false
    }, {
      "name" : "func(event *gorgonia.org/cu.Event)",
      "params" : 312,
      "recv" : 78,
      "results" : 20,
      "type" : "Signature",
      "underlying" : 311,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "event",
        "type" : 313
      } ],
      "name" : "(event *gorgonia.org/cu.Event)",
      "type" : "Tuple",
      "underlying" : 312
    }, {
      "elem" : 314,
      "name" : "*gorgonia.org/cu.Event",
      "type" : "Pointer",
      "underlying" : 313
    }, {
      "local-name" : "Event",
      "name" : "gorgonia.org/cu.Event",
      "package" : 10,
      "type" : "Named",
      "underlying" : 315
    }, {
      "fields" : [ {
        "name" : "ev",
        "type" : 259
      } ],
      "name" : "struct{ev invalid type}",
      "type" : "Struct",
      "underlying" : 315
    }, {
      "name" : "func(hStream *gorgonia.org/cu.Stream)",
      "params" : 317,
      "recv" : 79,
      "results" : 20,
      "type" : "Signature",
      "underlying" : 316,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "hStream",
        "type" : 318
      } ],
      "name" : "(hStream *gorgonia.org/cu.Stream)",
      "type" : "Tuple",
      "underlying" : 317
    }, {
      "elem" : 281,
      "name" : "*gorgonia.org/cu.Stream",
      "type" : "Pointer",
      "underlying" : 318
    }, {
      "name" : "func(peerContext gorgonia.org/cu.CUContext)",
      "params" : 320,
      "recv" : 80,
      "results" : 20,
      "type" : "Signature",
      "underlying" : 319,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "peerContext",
        "type" : 289
      } ],
      "name" : "(peerContext gorgonia.org/cu.CUContext)",
      "type" : "Tuple",
      "underlying" : 320
    }, {
      "name" : "func(fn func() error) error",
      "params" : 322,
      "recv" : 81,
      "results" : 120,
      "type" : "Signature",
      "underlying" : 321,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "fn",
        "type" : 195
      } ],
      "name" : "(fn func() error)",
      "type" : "Tuple",
      "underlying" : 322
    }, {
      "name" : "func(hStart gorgonia.org/cu.Event, hEnd gorgonia.org/cu.Event) (pMilliseconds float64, err error)",
      "params" : 324,
      "recv" : 82,
      "results" : 325,
      "type" : "Signature",
      "underlying" : 323,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "hStart",
        "type" : 314
      }, {
        "name" : "hEnd",
        "type" : 314
      } ],
      "name" : "(hStart gorgonia.org/cu.Event, hEnd gorgonia.org/cu.Event)",
      "type" : "Tuple",
      "underlying" : 324
    }, {
      "fields" : [ {
        "name" : "pMilliseconds",
        "type" : 326
      }, {
        "name" : "err",
        "type" : 90
      } ],
      "name" : "(pMilliseconds float64, err error)",
      "type" : "Tuple",
      "underlying" : 325
    }, {
      "name" : "float64",
      "type" : "Basic",
      "underlying" : 326
    }, {
      "name" : "func(peerContext gorgonia.org/cu.CUContext, Flags uint)",
      "params" : 328,
      "recv" : 83,
      "results" : 20,
      "type" : "Signature",
      "underlying" : 327,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "peerContext",
        "type" : 289
      }, {
        "name" : "Flags",
        "type" : 54
      } ],
      "name" : "(peerContext gorgonia.org/cu.CUContext, Flags uint)",
      "type" : "Tuple",
      "underlying" : 328
    }, {
      "name" : "func() chan error",
      "params" : 20,
      "recv" : 84,
      "results" : 330,
      "type" : "Signature",
      "underlying" : 329,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 331
      } ],
      "name" : "(chan error)",
      "type" : "Tuple",
      "underlying" : 330
    }, {
      "dir" : "both",
      "elem" : 90,
      "name" : "chan error",
      "type" : "Chan",
      "underlying" : 331
    }, {
      "name" : "func(hTexRef gorgonia.org/cu.TexRef) (pfm gorgonia.org/cu.FilterMode, err error)",
      "params" : 265,
      "recv" : 85,
      "results" : 333,
      "type" : "Signature",
      "underlying" : 332,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "pfm",
        "type" : 334
      }, {
        "name" : "err",
        "type" : 90
      } ],
      "name" : "(pfm gorgonia.org/cu.FilterMode, err error)",
      "type" : "Tuple",
      "underlying" : 333
    }, {
      "local-name" : "FilterMode",
      "name" : "gorgonia.org/cu.FilterMode",
      "package" : 10,
      "type" : "Named",
      "underlying" : 71
    }, {
      "name" : "func(hTexRef gorgonia.org/cu.TexRef) (pFormat gorgonia.org/cu.Format, pNumChannels int, err error)",
      "params" : 265,
      "recv" : 86,
      "results" : 336,
      "type" : "Signature",
      "underlying" : 335,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "pFormat",
        "type" : 305
      }, {
        "name" : "pNumChannels",
        "type" : 22
      }, {
        "name" : "err",
        "type" : 90
      } ],
      "name" : "(pFormat gorgonia.org/cu.Format, pNumChannels int, err error)",
      "type" : "Tuple",
      "underlying" : 336
    }, {
      "name" : "func(fn gorgonia.org/cu.Function, attrib gorgonia.org/cu.FunctionAttribute) (pi int, err error)",
      "params" : 338,
      "recv" : 87,
      "results" : 342,
      "type" : "Signature",
      "underlying" : 337,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "fn",
        "type" : 339
      }, {
        "name" : "attrib",
        "type" : 341
      } ],
      "name" : "(fn gorgonia.org/cu.Function, attrib gorgonia.org/cu.FunctionAttribute)",
      "type" : "Tuple",
      "underlying" : 338
    }, {
      "local-name" : "Function",
      "name" : "gorgonia.org/cu.Function",
      "package" : 10,
      "type" : "Named",
      "underlying" : 340
    }, {
      "fields" : [ {
        "name" : "fn",
        "type" : 259
      } ],
      "name" : "struct{fn invalid type}",
      "type" : "Struct",
      "underlying" : 340
    }, {
      "local-name" : "FunctionAttribute",
      "name" : "gorgonia.org/cu.FunctionAttribute",
      "package" : 10,
      "type" : "Named",
      "underlying" : 22
    }, {
      "fields" : [ {
        "name" : "pi",
        "type" : 22
      }, {
        "name" : "err",
        "type" : 90
      } ],
      "name" : "(pi int, err error)",
      "type" : "Tuple",
      "underlying" : 342
    }, {
      "name" : "func(hSurfRef gorgonia.org/cu.SurfRef) (phArray gorgonia.org/cu.Array, err error)",
      "params" : 344,
      "recv" : 88,
      "results" : 275,
      "type" : "Signature",
      "underlying" : 343,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "hSurfRef",
        "type" : 345
      } ],
      "name" : "(hSurfRef gorgonia.org/cu.SurfRef)",
      "type" : "Tuple",
      "underlying" : 344
    }, {
      "local-name" : "SurfRef",
      "name" : "gorgonia.org/cu.SurfRef",
      "package" : 10,
      "type" : "Named",
      "underlying" : 267
    }, {
      "name" : "func(fn gorgonia.org/cu.Function, gridDimX int, gridDimY int, gridDimZ int, blockDimX int, blockDimY int, blockDimZ int, sharedMemBytes int, stream gorgonia.org/cu.Stream, kernelParams []unsafe.Pointer)",
      "params" : 347,
      "recv" : 89,
      "results" : 20,
      "type" : "Signature",
      "underlying" : 346,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "fn",
        "type" : 339
      }, {
        "name" : "gridDimX",
        "type" : 22
      }, {
        "name" : "gridDimY",
        "type" : 22
      }, {
        "name" : "gridDimZ",
        "type" : 22
      }, {
        "name" : "blockDimX",
        "type" : 22
      }, {
        "name" : "blockDimY",
        "type" : 22
      }, {
        "name" : "blockDimZ",
        "type" : 22
      }, {
        "name" : "sharedMemBytes",
        "type" : 22
      }, {
        "name" : "stream",
        "type" : 281
      }, {
        "name" : "kernelParams",
        "type" : 348
      } ],
      "name" : "(fn gorgonia.org/cu.Function, gridDimX int, gridDimY int, gridDimZ int, blockDimX int, blockDimY int, blockDimZ int, sharedMemBytes int, stream gorgonia.org/cu.Stream, kernelParams []unsafe.Pointer)",
      "type" : "Tuple",
      "underlying" : 347
    }, {
      "elem" : 69,
      "name" : "[]unsafe.Pointer",
      "type" : "Slice",
      "underlying" : 348
    }, {
      "name" : "func(limit gorgonia.org/cu.Limit) (pvalue int64, err error)",
      "params" : 350,
      "recv" : 90,
      "results" : 352,
      "type" : "Signature",
      "underlying" : 349,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "limit",
        "type" : 351
      } ],
      "name" : "(limit gorgonia.org/cu.Limit)",
      "type" : "Tuple",
      "underlying" : 350
    }, {
      "local-name" : "Limit",
      "name" : "gorgonia.org/cu.Limit",
      "package" : 10,
      "type" : "Named",
      "underlying" : 71
    }, {
      "fields" : [ {
        "name" : "pvalue",
        "type" : 117
      }, {
        "name" : "err",
        "type" : 90
      } ],
      "name" : "(pvalue int64, err error)",
      "type" : "Tuple",
      "underlying" : 352
    }, {
      "name" : "func(name string) (m gorgonia.org/cu.Module, err error)",
      "params" : 44,
      "recv" : 91,
      "results" : 354,
      "type" : "Signature",
      "underlying" : 353,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "m",
        "type" : 355
      }, {
        "name" : "err",
        "type" : 90
      } ],
      "name" : "(m gorgonia.org/cu.Module, err error)",
      "type" : "Tuple",
      "underlying" : 354
    }, {
      "local-name" : "Module",
      "name" : "gorgonia.org/cu.Module",
      "package" : 10,
      "type" : "Named",
      "underlying" : 356
    }, {
      "fields" : [ {
        "name" : "mod",
        "type" : 259
      } ],
      "name" : "struct{mod invalid type}",
      "type" : "Struct",
      "underlying" : 356
    }, {
      "name" : "func(flags gorgonia.org/cu.EventFlags) (event gorgonia.org/cu.Event, err error)",
      "params" : 358,
      "recv" : 92,
      "results" : 360,
      "type" : "Signature",
      "underlying" : 357,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "flags",
        "type" : 359
      } ],
      "name" : "(flags gorgonia.org/cu.EventFlags)",
      "type" : "Tuple",
      "underlying" : 358
    }, {
      "local-name" : "EventFlags",
      "name" : "gorgonia.org/cu.EventFlags",
      "package" : 10,
      "type" : "Named",
      "underlying" : 71
    }, {
      "fields" : [ {
        "name" : "event",
        "type" : 314
      }, {
        "name" : "err",
        "type" : 90
      } ],
      "name" : "(event gorgonia.org/cu.Event, err error)",
      "type" : "Tuple",
      "underlying" : 360
    }, {
      "name" : "func(flags gorgonia.org/cu.StreamFlags) (stream gorgonia.org/cu.Stream, err error)",
      "params" : 362,
      "recv" : 93,
      "results" : 364,
      "type" : "Signature",
      "underlying" : 361,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "flags",
        "type" : 363
      } ],
      "name" : "(flags gorgonia.org/cu.StreamFlags)",
      "type" : "Tuple",
      "underlying" : 362
    }, {
      "local-name" : "StreamFlags",
      "name" : "gorgonia.org/cu.StreamFlags",
      "package" : 10,
      "type" : "Named",
      "underlying" : 71
    }, {
      "fields" : [ {
        "name" : "stream",
        "type" : 281
      }, {
        "name" : "err",
        "type" : 90
      } ],
      "name" : "(stream gorgonia.org/cu.Stream, err error)",
      "type" : "Tuple",
      "underlying" : 364
    }, {
      "name" : "func(priority int, flags gorgonia.org/cu.StreamFlags) (stream gorgonia.org/cu.Stream, err error)",
      "params" : 366,
      "recv" : 94,
      "results" : 364,
      "type" : "Signature",
      "underlying" : 365,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "priority",
        "type" : 22
      }, {
        "name" : "flags",
        "type" : 363
      } ],
      "name" : "(priority int, flags gorgonia.org/cu.StreamFlags)",
      "type" : "Tuple",
      "underlying" : 366
    }, {
      "name" : "func(hTexRef gorgonia.org/cu.TexRef) (pmaxAniso int, err error)",
      "params" : 265,
      "recv" : 95,
      "results" : 368,
      "type" : "Signature",
      "underlying" : 367,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "pmaxAniso",
        "type" : 22
      }, {
        "name" : "err",
        "type" : 90
      } ],
      "name" : "(pmaxAniso int, err error)",
      "type" : "Tuple",
      "underlying" : 368
    }, {
      "name" : "func(bytesize int64) (dptr gorgonia.org/cu.DevicePtr, err error)",
      "params" : 370,
      "recv" : 96,
      "results" : 371,
      "type" : "Signature",
      "underlying" : 369,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "bytesize",
        "type" : 117
      } ],
      "name" : "(bytesize int64)",
      "type" : "Tuple",
      "underlying" : 370
    }, {
      "fields" : [ {
        "name" : "dptr",
        "type" : 269
      }, {
        "name" : "err",
        "type" : 90
      } ],
      "name" : "(dptr gorgonia.org/cu.DevicePtr, err error)",
      "type" : "Tuple",
      "underlying" : 371
    }, {
      "name" : "func(bytesize int64, flags gorgonia.org/cu.MemAttachFlags) (dptr gorgonia.org/cu.DevicePtr, err error)",
      "params" : 373,
      "recv" : 97,
      "results" : 371,
      "type" : "Signature",
      "underlying" : 372,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "bytesize",
        "type" : 117
      }, {
        "name" : "flags",
        "type" : 374
      } ],
      "name" : "(bytesize int64, flags gorgonia.org/cu.MemAttachFlags)",
      "type" : "Tuple",
      "underlying" : 373
    }, {
      "local-name" : "MemAttachFlags",
      "name" : "gorgonia.org/cu.MemAttachFlags",
      "package" : 10,
      "type" : "Named",
      "underlying" : 71
    }, {
      "name" : "func(WidthInBytes int64, Height int64, ElementSizeBytes uint) (dptr gorgonia.org/cu.DevicePtr, pPitch int64, err error)",
      "params" : 376,
      "recv" : 98,
      "results" : 377,
      "type" : "Signature",
      "underlying" : 375,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "WidthInBytes",
        "type" : 117
      }, {
        "name" : "Height",
        "type" : 117
      }, {
        "name" : "ElementSizeBytes",
        "type" : 54
      } ],
      "name" : "(WidthInBytes int64, Height int64, ElementSizeBytes uint)",
      "type" : "Tuple",
      "underlying" : 376
    }, {
      "fields" : [ {
        "name" : "dptr",
        "type" : 269
      }, {
        "name" : "pPitch",
        "type" : 117
      }, {
        "name" : "err",
        "type" : 90
      } ],
      "name" : "(dptr gorgonia.org/cu.DevicePtr, pPitch int64, err error)",
      "type" : "Tuple",
      "underlying" : 377
    }, {
      "name" : "func(dptr gorgonia.org/cu.DevicePtr)",
      "params" : 379,
      "recv" : 99,
      "results" : 20,
      "type" : "Signature",
      "underlying" : 378,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "dptr",
        "type" : 269
      } ],
      "name" : "(dptr gorgonia.org/cu.DevicePtr)",
      "type" : "Tuple",
      "underlying" : 379
    }, {
      "name" : "func(p unsafe.Pointer)",
      "params" : 381,
      "recv" : 100,
      "results" : 20,
      "type" : "Signature",
      "underlying" : 380,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "p",
        "type" : 69
      } ],
      "name" : "(p unsafe.Pointer)",
      "type" : "Tuple",
      "underlying" : 381
    }, {
      "name" : "func() (free int64, total int64, err error)",
      "params" : 20,
      "recv" : 101,
      "results" : 383,
      "type" : "Signature",
      "underlying" : 382,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "free",
        "type" : 117
      }, {
        "name" : "total",
        "type" : 117
      }, {
        "name" : "err",
        "type" : 90
      } ],
      "name" : "(free int64, total int64, err error)",
      "type" : "Tuple",
      "underlying" : 383
    }, {
      "name" : "func(dst gorgonia.org/cu.DevicePtr, src gorgonia.org/cu.DevicePtr, ByteCount int64)",
      "params" : 385,
      "recv" : 102,
      "results" : 20,
      "type" : "Signature",
      "underlying" : 384,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "dst",
        "type" : 269
      }, {
        "name" : "src",
        "type" : 269
      }, {
        "name" : "ByteCount",
        "type" : 117
      } ],
      "name" : "(dst gorgonia.org/cu.DevicePtr, src gorgonia.org/cu.DevicePtr, ByteCount int64)",
      "type" : "Tuple",
      "underlying" : 385
    }, {
      "name" : "func(pCopy gorgonia.org/cu.Memcpy2dParam)",
      "params" : 387,
      "recv" : 103,
      "results" : 20,
      "type" : "Signature",
      "underlying" : 386,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "pCopy",
        "type" : 388
      } ],
      "name" : "(pCopy gorgonia.org/cu.Memcpy2dParam)",
      "type" : "Tuple",
      "underlying" : 387
    }, {
      "local-name" : "Memcpy2dParam",
      "name" : "gorgonia.org/cu.Memcpy2dParam",
      "package" : 10,
      "type" : "Named",
      "underlying" : 389
    }, {
      "fields" : [ {
        "name" : "Height",
        "type" : 117
      }, {
        "name" : "WidthInBytes",
        "type" : 117
      }, {
        "name" : "DstArray",
        "type" : 276
      }, {
        "name" : "DstDevice",
        "type" : 269
      }, {
        "name" : "DstHost",
        "type" : 69
      }, {
        "name" : "DstMemoryType",
        "type" : 390
      }, {
        "name" : "DstPitch",
        "type" : 117
      }, {
        "name" : "DstXInBytes",
        "type" : 117
      }, {
        "name" : "DstY",
        "type" : 117
      }, {
        "name" : "SrcArray",
        "type" : 276
      }, {
        "name" : "SrcDevice",
        "type" : 269
      }, {
        "name" : "SrcHost",
        "type" : 69
      }, {
        "name" : "SrcMemoryType",
        "type" : 390
      }, {
        "name" : "SrcPitch",
        "type" : 117
      }, {
        "name" : "SrcXInBytes",
        "type" : 117
      }, {
        "name" : "SrcY",
        "type" : 117
      } ],
      "name" : "struct{Height int64; WidthInBytes int64; DstArray gorgonia.org/cu.Array; DstDevice gorgonia.org/cu.DevicePtr; DstHost unsafe.Pointer; DstMemoryType gorgonia.org/cu.MemoryType; DstPitch int64; DstXInBytes int64; DstY int64; SrcArray gorgonia.org/cu.Array; SrcDevice gorgonia.org/cu.DevicePtr; SrcHost unsafe.Pointer; SrcMemoryType gorgonia.org/cu.MemoryType; SrcPitch int64; SrcXInBytes int64; SrcY int64}",
      "type" : "Struct",
      "underlying" : 389
    }, {
      "local-name" : "MemoryType",
      "name" : "gorgonia.org/cu.MemoryType",
      "package" : 10,
      "type" : "Named",
      "underlying" : 71
    }, {
      "name" : "func(pCopy gorgonia.org/cu.Memcpy2dParam, hStream gorgonia.org/cu.Stream)",
      "params" : 392,
      "recv" : 104,
      "results" : 20,
      "type" : "Signature",
      "underlying" : 391,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "pCopy",
        "type" : 388
      }, {
        "name" : "hStream",
        "type" : 281
      } ],
      "name" : "(pCopy gorgonia.org/cu.Memcpy2dParam, hStream gorgonia.org/cu.Stream)",
      "type" : "Tuple",
      "underlying" : 392
    }, {
      "name" : "func(pCopy gorgonia.org/cu.Memcpy3dParam)",
      "params" : 394,
      "recv" : 105,
      "results" : 20,
      "type" : "Signature",
      "underlying" : 393,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "pCopy",
        "type" : 395
      } ],
      "name" : "(pCopy gorgonia.org/cu.Memcpy3dParam)",
      "type" : "Tuple",
      "underlying" : 394
    }, {
      "local-name" : "Memcpy3dParam",
      "name" : "gorgonia.org/cu.Memcpy3dParam",
      "package" : 10,
      "type" : "Named",
      "underlying" : 396
    }, {
      "fields" : [ {
        "name" : "Depth",
        "type" : 117
      }, {
        "name" : "Height",
        "type" : 117
      }, {
        "name" : "WidthInBytes",
        "type" : 117
      }, {
        "name" : "DstArray",
        "type" : 276
      }, {
        "name" : "DstDevice",
        "type" : 269
      }, {
        "name" : "DstHeight",
        "type" : 117
      }, {
        "name" : "DstHost",
        "type" : 69
      }, {
        "name" : "DstLOD",
        "type" : 117
      }, {
        "name" : "DstMemoryType",
        "type" : 390
      }, {
        "name" : "DstPitch",
        "type" : 117
      }, {
        "name" : "DstXInBytes",
        "type" : 117
      }, {
        "name" : "DstY",
        "type" : 117
      }, {
        "name" : "DstZ",
        "type" : 117
      }, {
        "name" : "SrcArray",
        "type" : 276
      }, {
        "name" : "SrcDevice",
        "type" : 269
      }, {
        "name" : "SrcHeight",
        "type" : 117
      }, {
        "name" : "SrcHost",
        "type" : 69
      }, {
        "name" : "SrcLOD",
        "type" : 117
      }, {
        "name" : "SrcMemoryType",
        "type" : 390
      }, {
        "name" : "SrcPitch",
        "type" : 117
      }, {
        "name" : "SrcXInBytes",
        "type" : 117
      }, {
        "name" : "SrcY",
        "type" : 117
      }, {
        "name" : "SrcZ",
        "type" : 117
      } ],
      "name" : "struct{Depth int64; Height int64; WidthInBytes int64; DstArray gorgonia.org/cu.Array; DstDevice gorgonia.org/cu.DevicePtr; DstHeight int64; DstHost unsafe.Pointer; DstLOD int64; DstMemoryType gorgonia.org/cu.MemoryType; DstPitch int64; DstXInBytes int64; DstY int64; DstZ int64; SrcArray gorgonia.org/cu.Array; SrcDevice gorgonia.org/cu.DevicePtr; SrcHeight int64; SrcHost unsafe.Pointer; SrcLOD int64; SrcMemoryType gorgonia.org/cu.MemoryType; SrcPitch int64; SrcXInBytes int64; SrcY int64; SrcZ int64}",
      "type" : "Struct",
      "underlying" : 396
    }, {
      "name" : "func(pCopy gorgonia.org/cu.Memcpy3dParam, hStream gorgonia.org/cu.Stream)",
      "params" : 398,
      "recv" : 106,
      "results" : 20,
      "type" : "Signature",
      "underlying" : 397,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "pCopy",
        "type" : 395
      }, {
        "name" : "hStream",
        "type" : 281
      } ],
      "name" : "(pCopy gorgonia.org/cu.Memcpy3dParam, hStream gorgonia.org/cu.Stream)",
      "type" : "Tuple",
      "underlying" : 398
    }, {
      "name" : "func(pCopy gorgonia.org/cu.Memcpy3dPeerParam)",
      "params" : 400,
      "recv" : 107,
      "results" : 20,
      "type" : "Signature",
      "underlying" : 399,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "pCopy",
        "type" : 401
      } ],
      "name" : "(pCopy gorgonia.org/cu.Memcpy3dPeerParam)",
      "type" : "Tuple",
      "underlying" : 400
    }, {
      "local-name" : "Memcpy3dPeerParam",
      "name" : "gorgonia.org/cu.Memcpy3dPeerParam",
      "package" : 10,
      "type" : "Named",
      "underlying" : 402
    }, {
      "fields" : [ {
        "name" : "Depth",
        "type" : 117
      }, {
        "name" : "Height",
        "type" : 117
      }, {
        "name" : "WidthInBytes",
        "type" : 117
      }, {
        "name" : "DstArray",
        "type" : 276
      }, {
        "name" : "DstContext",
        "type" : 289
      }, {
        "name" : "DstDevice",
        "type" : 269
      }, {
        "name" : "DstHeight",
        "type" : 117
      }, {
        "name" : "DstHost",
        "type" : 69
      }, {
        "name" : "DstLOD",
        "type" : 117
      }, {
        "name" : "DstMemoryType",
        "type" : 390
      }, {
        "name" : "DstPitch",
        "type" : 117
      }, {
        "name" : "DstXInBytes",
        "type" : 117
      }, {
        "name" : "DstY",
        "type" : 117
      }, {
        "name" : "DstZ",
        "type" : 117
      }, {
        "name" : "SrcArray",
        "type" : 276
      }, {
        "name" : "SrcContext",
        "type" : 289
      }, {
        "name" : "SrcDevice",
        "type" : 269
      }, {
        "name" : "SrcHeight",
        "type" : 117
      }, {
        "name" : "SrcHost",
        "type" : 69
      }, {
        "name" : "SrcLOD",
        "type" : 117
      }, {
        "name" : "SrcMemoryType",
        "type" : 390
      }, {
        "name" : "SrcPitch",
        "type" : 117
      }, {
        "name" : "SrcXInBytes",
        "type" : 117
      }, {
        "name" : "SrcY",
        "type" : 117
      }, {
        "name" : "SrcZ",
        "type" : 117
      } ],
      "name" : "struct{Depth int64; Height int64; WidthInBytes int64; DstArray gorgonia.org/cu.Array; DstContext gorgonia.org/cu.CUContext; DstDevice gorgonia.org/cu.DevicePtr; DstHeight int64; DstHost unsafe.Pointer; DstLOD int64; DstMemoryType gorgonia.org/cu.MemoryType; DstPitch int64; DstXInBytes int64; DstY int64; DstZ int64; SrcArray gorgonia.org/cu.Array; SrcContext gorgonia.org/cu.CUContext; SrcDevice gorgonia.org/cu.DevicePtr; SrcHeight int64; SrcHost unsafe.Pointer; SrcLOD int64; SrcMemoryType gorgonia.org/cu.MemoryType; SrcPitch int64; SrcXInBytes int64; SrcY int64; SrcZ int64}",
      "type" : "Struct",
      "underlying" : 402
    }, {
      "name" : "func(pCopy gorgonia.org/cu.Memcpy3dPeerParam, hStream gorgonia.org/cu.Stream)",
      "params" : 404,
      "recv" : 108,
      "results" : 20,
      "type" : "Signature",
      "underlying" : 403,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "pCopy",
        "type" : 401
      }, {
        "name" : "hStream",
        "type" : 281
      } ],
      "name" : "(pCopy gorgonia.org/cu.Memcpy3dPeerParam, hStream gorgonia.org/cu.Stream)",
      "type" : "Tuple",
      "underlying" : 404
    }, {
      "name" : "func(dst gorgonia.org/cu.DevicePtr, src gorgonia.org/cu.DevicePtr, ByteCount int64, hStream gorgonia.org/cu.Stream)",
      "params" : 406,
      "recv" : 109,
      "results" : 20,
      "type" : "Signature",
      "underlying" : 405,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "dst",
        "type" : 269
      }, {
        "name" : "src",
        "type" : 269
      }, {
        "name" : "ByteCount",
        "type" : 117
      }, {
        "name" : "hStream",
        "type" : 281
      } ],
      "name" : "(dst gorgonia.org/cu.DevicePtr, src gorgonia.org/cu.DevicePtr, ByteCount int64, hStream gorgonia.org/cu.Stream)",
      "type" : "Tuple",
      "underlying" : 406
    }, {
      "name" : "func(dstArray gorgonia.org/cu.Array, dstOffset int64, srcArray gorgonia.org/cu.Array, srcOffset int64, ByteCount int64)",
      "params" : 408,
      "recv" : 110,
      "results" : 20,
      "type" : "Signature",
      "underlying" : 407,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "dstArray",
        "type" : 276
      }, {
        "name" : "dstOffset",
        "type" : 117
      }, {
        "name" : "srcArray",
        "type" : 276
      }, {
        "name" : "srcOffset",
        "type" : 117
      }, {
        "name" : "ByteCount",
        "type" : 117
      } ],
      "name" : "(dstArray gorgonia.org/cu.Array, dstOffset int64, srcArray gorgonia.org/cu.Array, srcOffset int64, ByteCount int64)",
      "type" : "Tuple",
      "underlying" : 408
    }, {
      "name" : "func(dstDevice gorgonia.org/cu.DevicePtr, srcArray gorgonia.org/cu.Array, srcOffset int64, ByteCount int64)",
      "params" : 410,
      "recv" : 111,
      "results" : 20,
      "type" : "Signature",
      "underlying" : 409,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "dstDevice",
        "type" : 269
      }, {
        "name" : "srcArray",
        "type" : 276
      }, {
        "name" : "srcOffset",
        "type" : 117
      }, {
        "name" : "ByteCount",
        "type" : 117
      } ],
      "name" : "(dstDevice gorgonia.org/cu.DevicePtr, srcArray gorgonia.org/cu.Array, srcOffset int64, ByteCount int64)",
      "type" : "Tuple",
      "underlying" : 410
    }, {
      "name" : "func(dstHost unsafe.Pointer, srcArray gorgonia.org/cu.Array, srcOffset int64, ByteCount int64)",
      "params" : 412,
      "recv" : 112,
      "results" : 20,
      "type" : "Signature",
      "underlying" : 411,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "dstHost",
        "type" : 69
      }, {
        "name" : "srcArray",
        "type" : 276
      }, {
        "name" : "srcOffset",
        "type" : 117
      }, {
        "name" : "ByteCount",
        "type" : 117
      } ],
      "name" : "(dstHost unsafe.Pointer, srcArray gorgonia.org/cu.Array, srcOffset int64, ByteCount int64)",
      "type" : "Tuple",
      "underlying" : 412
    }, {
      "name" : "func(dstHost unsafe.Pointer, srcArray gorgonia.org/cu.Array, srcOffset int64, ByteCount int64, hStream gorgonia.org/cu.Stream)",
      "params" : 414,
      "recv" : 113,
      "results" : 20,
      "type" : "Signature",
      "underlying" : 413,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "dstHost",
        "type" : 69
      }, {
        "name" : "srcArray",
        "type" : 276
      }, {
        "name" : "srcOffset",
        "type" : 117
      }, {
        "name" : "ByteCount",
        "type" : 117
      }, {
        "name" : "hStream",
        "type" : 281
      } ],
      "name" : "(dstHost unsafe.Pointer, srcArray gorgonia.org/cu.Array, srcOffset int64, ByteCount int64, hStream gorgonia.org/cu.Stream)",
      "type" : "Tuple",
      "underlying" : 414
    }, {
      "name" : "func(dstArray gorgonia.org/cu.Array, dstOffset int64, srcDevice gorgonia.org/cu.DevicePtr, ByteCount int64)",
      "params" : 416,
      "recv" : 114,
      "results" : 20,
      "type" : "Signature",
      "underlying" : 415,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "dstArray",
        "type" : 276
      }, {
        "name" : "dstOffset",
        "type" : 117
      }, {
        "name" : "srcDevice",
        "type" : 269
      }, {
        "name" : "ByteCount",
        "type" : 117
      } ],
      "name" : "(dstArray gorgonia.org/cu.Array, dstOffset int64, srcDevice gorgonia.org/cu.DevicePtr, ByteCount int64)",
      "type" : "Tuple",
      "underlying" : 416
    }, {
      "name" : "func(dstDevice gorgonia.org/cu.DevicePtr, srcDevice gorgonia.org/cu.DevicePtr, ByteCount int64)",
      "params" : 418,
      "recv" : 115,
      "results" : 20,
      "type" : "Signature",
      "underlying" : 417,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "dstDevice",
        "type" : 269
      }, {
        "name" : "srcDevice",
        "type" : 269
      }, {
        "name" : "ByteCount",
        "type" : 117
      } ],
      "name" : "(dstDevice gorgonia.org/cu.DevicePtr, srcDevice gorgonia.org/cu.DevicePtr, ByteCount int64)",
      "type" : "Tuple",
      "underlying" : 418
    }, {
      "name" : "func(dstDevice gorgonia.org/cu.DevicePtr, srcDevice gorgonia.org/cu.DevicePtr, ByteCount int64, hStream gorgonia.org/cu.Stream)",
      "params" : 420,
      "recv" : 116,
      "results" : 20,
      "type" : "Signature",
      "underlying" : 419,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "dstDevice",
        "type" : 269
      }, {
        "name" : "srcDevice",
        "type" : 269
      }, {
        "name" : "ByteCount",
        "type" : 117
      }, {
        "name" : "hStream",
        "type" : 281
      } ],
      "name" : "(dstDevice gorgonia.org/cu.DevicePtr, srcDevice gorgonia.org/cu.DevicePtr, ByteCount int64, hStream gorgonia.org/cu.Stream)",
      "type" : "Tuple",
      "underlying" : 420
    }, {
      "name" : "func(dstHost unsafe.Pointer, srcDevice gorgonia.org/cu.DevicePtr, ByteCount int64)",
      "params" : 422,
      "recv" : 117,
      "results" : 20,
      "type" : "Signature",
      "underlying" : 421,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "dstHost",
        "type" : 69
      }, {
        "name" : "srcDevice",
        "type" : 269
      }, {
        "name" : "ByteCount",
        "type" : 117
      } ],
      "name" : "(dstHost unsafe.Pointer, srcDevice gorgonia.org/cu.DevicePtr, ByteCount int64)",
      "type" : "Tuple",
      "underlying" : 422
    }, {
      "name" : "func(dstHost unsafe.Pointer, srcDevice gorgonia.org/cu.DevicePtr, ByteCount int64, hStream gorgonia.org/cu.Stream)",
      "params" : 424,
      "recv" : 118,
      "results" : 20,
      "type" : "Signature",
      "underlying" : 423,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "dstHost",
        "type" : 69
      }, {
        "name" : "srcDevice",
        "type" : 269
      }, {
        "name" : "ByteCount",
        "type" : 117
      }, {
        "name" : "hStream",
        "type" : 281
      } ],
      "name" : "(dstHost unsafe.Pointer, srcDevice gorgonia.org/cu.DevicePtr, ByteCount int64, hStream gorgonia.org/cu.Stream)",
      "type" : "Tuple",
      "underlying" : 424
    }, {
      "name" : "func(dstArray gorgonia.org/cu.Array, dstOffset int64, srcHost unsafe.Pointer, ByteCount int64)",
      "params" : 426,
      "recv" : 119,
      "results" : 20,
      "type" : "Signature",
      "underlying" : 425,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "dstArray",
        "type" : 276
      }, {
        "name" : "dstOffset",
        "type" : 117
      }, {
        "name" : "srcHost",
        "type" : 69
      }, {
        "name" : "ByteCount",
        "type" : 117
      } ],
      "name" : "(dstArray gorgonia.org/cu.Array, dstOffset int64, srcHost unsafe.Pointer, ByteCount int64)",
      "type" : "Tuple",
      "underlying" : 426
    }, {
      "name" : "func(dstArray gorgonia.org/cu.Array, dstOffset int64, srcHost unsafe.Pointer, ByteCount int64, hStream gorgonia.org/cu.Stream)",
      "params" : 428,
      "recv" : 120,
      "results" : 20,
      "type" : "Signature",
      "underlying" : 427,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "dstArray",
        "type" : 276
      }, {
        "name" : "dstOffset",
        "type" : 117
      }, {
        "name" : "srcHost",
        "type" : 69
      }, {
        "name" : "ByteCount",
        "type" : 117
      }, {
        "name" : "hStream",
        "type" : 281
      } ],
      "name" : "(dstArray gorgonia.org/cu.Array, dstOffset int64, srcHost unsafe.Pointer, ByteCount int64, hStream gorgonia.org/cu.Stream)",
      "type" : "Tuple",
      "underlying" : 428
    }, {
      "name" : "func(dstDevice gorgonia.org/cu.DevicePtr, srcHost unsafe.Pointer, ByteCount int64)",
      "params" : 430,
      "recv" : 121,
      "results" : 20,
      "type" : "Signature",
      "underlying" : 429,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "dstDevice",
        "type" : 269
      }, {
        "name" : "srcHost",
        "type" : 69
      }, {
        "name" : "ByteCount",
        "type" : 117
      } ],
      "name" : "(dstDevice gorgonia.org/cu.DevicePtr, srcHost unsafe.Pointer, ByteCount int64)",
      "type" : "Tuple",
      "underlying" : 430
    }, {
      "name" : "func(dstDevice gorgonia.org/cu.DevicePtr, srcHost unsafe.Pointer, ByteCount int64, hStream gorgonia.org/cu.Stream)",
      "params" : 432,
      "recv" : 122,
      "results" : 20,
      "type" : "Signature",
      "underlying" : 431,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "dstDevice",
        "type" : 269
      }, {
        "name" : "srcHost",
        "type" : 69
      }, {
        "name" : "ByteCount",
        "type" : 117
      }, {
        "name" : "hStream",
        "type" : 281
      } ],
      "name" : "(dstDevice gorgonia.org/cu.DevicePtr, srcHost unsafe.Pointer, ByteCount int64, hStream gorgonia.org/cu.Stream)",
      "type" : "Tuple",
      "underlying" : 432
    }, {
      "name" : "func(dstDevice gorgonia.org/cu.DevicePtr, dstContext gorgonia.org/cu.CUContext, srcDevice gorgonia.org/cu.DevicePtr, srcContext gorgonia.org/cu.CUContext, ByteCount int64)",
      "params" : 434,
      "recv" : 123,
      "results" : 20,
      "type" : "Signature",
      "underlying" : 433,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "dstDevice",
        "type" : 269
      }, {
        "name" : "dstContext",
        "type" : 289
      }, {
        "name" : "srcDevice",
        "type" : 269
      }, {
        "name" : "srcContext",
        "type" : 289
      }, {
        "name" : "ByteCount",
        "type" : 117
      } ],
      "name" : "(dstDevice gorgonia.org/cu.DevicePtr, dstContext gorgonia.org/cu.CUContext, srcDevice gorgonia.org/cu.DevicePtr, srcContext gorgonia.org/cu.CUContext, ByteCount int64)",
      "type" : "Tuple",
      "underlying" : 434
    }, {
      "name" : "func(dstDevice gorgonia.org/cu.DevicePtr, dstContext gorgonia.org/cu.CUContext, srcDevice gorgonia.org/cu.DevicePtr, srcContext gorgonia.org/cu.CUContext, ByteCount int64, hStream gorgonia.org/cu.Stream)",
      "params" : 436,
      "recv" : 124,
      "results" : 20,
      "type" : "Signature",
      "underlying" : 435,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "dstDevice",
        "type" : 269
      }, {
        "name" : "dstContext",
        "type" : 289
      }, {
        "name" : "srcDevice",
        "type" : 269
      }, {
        "name" : "srcContext",
        "type" : 289
      }, {
        "name" : "ByteCount",
        "type" : 117
      }, {
        "name" : "hStream",
        "type" : 281
      } ],
      "name" : "(dstDevice gorgonia.org/cu.DevicePtr, dstContext gorgonia.org/cu.CUContext, srcDevice gorgonia.org/cu.DevicePtr, srcContext gorgonia.org/cu.CUContext, ByteCount int64, hStream gorgonia.org/cu.Stream)",
      "type" : "Tuple",
      "underlying" : 436
    }, {
      "name" : "func(dstDevice gorgonia.org/cu.DevicePtr, us uint16, N int64)",
      "params" : 438,
      "recv" : 125,
      "results" : 20,
      "type" : "Signature",
      "underlying" : 437,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "dstDevice",
        "type" : 269
      }, {
        "name" : "us",
        "type" : 88
      }, {
        "name" : "N",
        "type" : 117
      } ],
      "name" : "(dstDevice gorgonia.org/cu.DevicePtr, us uint16, N int64)",
      "type" : "Tuple",
      "underlying" : 438
    }, {
      "name" : "func(dstDevice gorgonia.org/cu.DevicePtr, us uint16, N int64, hStream gorgonia.org/cu.Stream)",
      "params" : 440,
      "recv" : 126,
      "results" : 20,
      "type" : "Signature",
      "underlying" : 439,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "dstDevice",
        "type" : 269
      }, {
        "name" : "us",
        "type" : 88
      }, {
        "name" : "N",
        "type" : 117
      }, {
        "name" : "hStream",
        "type" : 281
      } ],
      "name" : "(dstDevice gorgonia.org/cu.DevicePtr, us uint16, N int64, hStream gorgonia.org/cu.Stream)",
      "type" : "Tuple",
      "underlying" : 440
    }, {
      "name" : "func(dstDevice gorgonia.org/cu.DevicePtr, dstPitch int64, us uint16, Width int64, Height int64)",
      "params" : 442,
      "recv" : 127,
      "results" : 20,
      "type" : "Signature",
      "underlying" : 441,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "dstDevice",
        "type" : 269
      }, {
        "name" : "dstPitch",
        "type" : 117
      }, {
        "name" : "us",
        "type" : 88
      }, {
        "name" : "Width",
        "type" : 117
      }, {
        "name" : "Height",
        "type" : 117
      } ],
      "name" : "(dstDevice gorgonia.org/cu.DevicePtr, dstPitch int64, us uint16, Width int64, Height int64)",
      "type" : "Tuple",
      "underlying" : 442
    }, {
      "name" : "func(dstDevice gorgonia.org/cu.DevicePtr, dstPitch int64, us uint16, Width int64, Height int64, hStream gorgonia.org/cu.Stream)",
      "params" : 444,
      "recv" : 128,
      "results" : 20,
      "type" : "Signature",
      "underlying" : 443,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "dstDevice",
        "type" : 269
      }, {
        "name" : "dstPitch",
        "type" : 117
      }, {
        "name" : "us",
        "type" : 88
      }, {
        "name" : "Width",
        "type" : 117
      }, {
        "name" : "Height",
        "type" : 117
      }, {
        "name" : "hStream",
        "type" : 281
      } ],
      "name" : "(dstDevice gorgonia.org/cu.DevicePtr, dstPitch int64, us uint16, Width int64, Height int64, hStream gorgonia.org/cu.Stream)",
      "type" : "Tuple",
      "underlying" : 444
    }, {
      "name" : "func(dstDevice gorgonia.org/cu.DevicePtr, dstPitch int64, ui uint, Width int64, Height int64)",
      "params" : 446,
      "recv" : 129,
      "results" : 20,
      "type" : "Signature",
      "underlying" : 445,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "dstDevice",
        "type" : 269
      }, {
        "name" : "dstPitch",
        "type" : 117
      }, {
        "name" : "ui",
        "type" : 54
      }, {
        "name" : "Width",
        "type" : 117
      }, {
        "name" : "Height",
        "type" : 117
      } ],
      "name" : "(dstDevice gorgonia.org/cu.DevicePtr, dstPitch int64, ui uint, Width int64, Height int64)",
      "type" : "Tuple",
      "underlying" : 446
    }, {
      "name" : "func(dstDevice gorgonia.org/cu.DevicePtr, dstPitch int64, ui uint, Width int64, Height int64, hStream gorgonia.org/cu.Stream)",
      "params" : 448,
      "recv" : 130,
      "results" : 20,
      "type" : "Signature",
      "underlying" : 447,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "dstDevice",
        "type" : 269
      }, {
        "name" : "dstPitch",
        "type" : 117
      }, {
        "name" : "ui",
        "type" : 54
      }, {
        "name" : "Width",
        "type" : 117
      }, {
        "name" : "Height",
        "type" : 117
      }, {
        "name" : "hStream",
        "type" : 281
      } ],
      "name" : "(dstDevice gorgonia.org/cu.DevicePtr, dstPitch int64, ui uint, Width int64, Height int64, hStream gorgonia.org/cu.Stream)",
      "type" : "Tuple",
      "underlying" : 448
    }, {
      "name" : "func(dstDevice gorgonia.org/cu.DevicePtr, dstPitch int64, uc byte, Width int64, Height int64)",
      "params" : 450,
      "recv" : 131,
      "results" : 20,
      "type" : "Signature",
      "underlying" : 449,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "dstDevice",
        "type" : 269
      }, {
        "name" : "dstPitch",
        "type" : 117
      }, {
        "name" : "uc",
        "type" : 71
      }, {
        "name" : "Width",
        "type" : 117
      }, {
        "name" : "Height",
        "type" : 117
      } ],
      "name" : "(dstDevice gorgonia.org/cu.DevicePtr, dstPitch int64, uc byte, Width int64, Height int64)",
      "type" : "Tuple",
      "underlying" : 450
    }, {
      "name" : "func(dstDevice gorgonia.org/cu.DevicePtr, dstPitch int64, uc byte, Width int64, Height int64, hStream gorgonia.org/cu.Stream)",
      "params" : 452,
      "recv" : 132,
      "results" : 20,
      "type" : "Signature",
      "underlying" : 451,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "dstDevice",
        "type" : 269
      }, {
        "name" : "dstPitch",
        "type" : 117
      }, {
        "name" : "uc",
        "type" : 71
      }, {
        "name" : "Width",
        "type" : 117
      }, {
        "name" : "Height",
        "type" : 117
      }, {
        "name" : "hStream",
        "type" : 281
      } ],
      "name" : "(dstDevice gorgonia.org/cu.DevicePtr, dstPitch int64, uc byte, Width int64, Height int64, hStream gorgonia.org/cu.Stream)",
      "type" : "Tuple",
      "underlying" : 452
    }, {
      "name" : "func(dstDevice gorgonia.org/cu.DevicePtr, ui uint, N int64)",
      "params" : 454,
      "recv" : 133,
      "results" : 20,
      "type" : "Signature",
      "underlying" : 453,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "dstDevice",
        "type" : 269
      }, {
        "name" : "ui",
        "type" : 54
      }, {
        "name" : "N",
        "type" : 117
      } ],
      "name" : "(dstDevice gorgonia.org/cu.DevicePtr, ui uint, N int64)",
      "type" : "Tuple",
      "underlying" : 454
    }, {
      "name" : "func(dstDevice gorgonia.org/cu.DevicePtr, ui uint, N int64, hStream gorgonia.org/cu.Stream)",
      "params" : 456,
      "recv" : 134,
      "results" : 20,
      "type" : "Signature",
      "underlying" : 455,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "dstDevice",
        "type" : 269
      }, {
        "name" : "ui",
        "type" : 54
      }, {
        "name" : "N",
        "type" : 117
      }, {
        "name" : "hStream",
        "type" : 281
      } ],
      "name" : "(dstDevice gorgonia.org/cu.DevicePtr, ui uint, N int64, hStream gorgonia.org/cu.Stream)",
      "type" : "Tuple",
      "underlying" : 456
    }, {
      "name" : "func(dstDevice gorgonia.org/cu.DevicePtr, uc byte, N int64)",
      "params" : 458,
      "recv" : 135,
      "results" : 20,
      "type" : "Signature",
      "underlying" : 457,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "dstDevice",
        "type" : 269
      }, {
        "name" : "uc",
        "type" : 71
      }, {
        "name" : "N",
        "type" : 117
      } ],
      "name" : "(dstDevice gorgonia.org/cu.DevicePtr, uc byte, N int64)",
      "type" : "Tuple",
      "underlying" : 458
    }, {
      "name" : "func(dstDevice gorgonia.org/cu.DevicePtr, uc byte, N int64, hStream gorgonia.org/cu.Stream)",
      "params" : 460,
      "recv" : 136,
      "results" : 20,
      "type" : "Signature",
      "underlying" : 459,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "dstDevice",
        "type" : 269
      }, {
        "name" : "uc",
        "type" : 71
      }, {
        "name" : "N",
        "type" : 117
      }, {
        "name" : "hStream",
        "type" : 281
      } ],
      "name" : "(dstDevice gorgonia.org/cu.DevicePtr, uc byte, N int64, hStream gorgonia.org/cu.Stream)",
      "type" : "Tuple",
      "underlying" : 460
    }, {
      "name" : "func(m gorgonia.org/cu.Module, name string) (function gorgonia.org/cu.Function, err error)",
      "params" : 462,
      "recv" : 137,
      "results" : 463,
      "type" : "Signature",
      "underlying" : 461,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "m",
        "type" : 355
      }, {
        "name" : "name",
        "type" : 37
      } ],
      "name" : "(m gorgonia.org/cu.Module, name string)",
      "type" : "Tuple",
      "underlying" : 462
    }, {
      "fields" : [ {
        "name" : "function",
        "type" : 339
      }, {
        "name" : "err",
        "type" : 90
      } ],
      "name" : "(function gorgonia.org/cu.Function, err error)",
      "type" : "Tuple",
      "underlying" : 463
    }, {
      "name" : "func(m gorgonia.org/cu.Module, name string) (dptr gorgonia.org/cu.DevicePtr, size int64, err error)",
      "params" : 462,
      "recv" : 138,
      "results" : 465,
      "type" : "Signature",
      "underlying" : 464,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "dptr",
        "type" : 269
      }, {
        "name" : "size",
        "type" : 117
      }, {
        "name" : "err",
        "type" : 90
      } ],
      "name" : "(dptr gorgonia.org/cu.DevicePtr, size int64, err error)",
      "type" : "Tuple",
      "underlying" : 465
    }, {
      "name" : "func(hStream gorgonia.org/cu.Stream) (priority int, err error)",
      "params" : 467,
      "recv" : 139,
      "results" : 468,
      "type" : "Signature",
      "underlying" : 466,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "hStream",
        "type" : 281
      } ],
      "name" : "(hStream gorgonia.org/cu.Stream)",
      "type" : "Tuple",
      "underlying" : 467
    }, {
      "fields" : [ {
        "name" : "priority",
        "type" : 22
      }, {
        "name" : "err",
        "type" : 90
      } ],
      "name" : "(priority int, err error)",
      "type" : "Tuple",
      "underlying" : 468
    }, {
      "name" : "func(hEvent gorgonia.org/cu.Event)",
      "params" : 470,
      "recv" : 140,
      "results" : 20,
      "type" : "Signature",
      "underlying" : 469,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "hEvent",
        "type" : 314
      } ],
      "name" : "(hEvent gorgonia.org/cu.Event)",
      "type" : "Tuple",
      "underlying" : 470
    }, {
      "name" : "func(hStream gorgonia.org/cu.Stream)",
      "params" : 467,
      "recv" : 141,
      "results" : 20,
      "type" : "Signature",
      "underlying" : 471,
      "variadic" : false
    }, {
      "name" : "func(hEvent gorgonia.org/cu.Event, hStream gorgonia.org/cu.Stream)",
      "params" : 473,
      "recv" : 142,
      "results" : 20,
      "type" : "Signature",
      "underlying" : 472,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "hEvent",
        "type" : 314
      }, {
        "name" : "hStream",
        "type" : 281
      } ],
      "name" : "(hEvent gorgonia.org/cu.Event, hStream gorgonia.org/cu.Stream)",
      "type" : "Tuple",
      "underlying" : 473
    }, {
      "name" : "func(chan error) error",
      "params" : 330,
      "recv" : 143,
      "results" : 120,
      "type" : "Signature",
      "underlying" : 474,
      "variadic" : false
    }, {
      "name" : "func(hTexRef gorgonia.org/cu.TexRef, dptr gorgonia.org/cu.DevicePtr, bytes int64) (ByteOffset int64, err error)",
      "params" : 476,
      "recv" : 144,
      "results" : 477,
      "type" : "Signature",
      "underlying" : 475,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "hTexRef",
        "type" : 266
      }, {
        "name" : "dptr",
        "type" : 269
      }, {
        "name" : "bytes",
        "type" : 117
      } ],
      "name" : "(hTexRef gorgonia.org/cu.TexRef, dptr gorgonia.org/cu.DevicePtr, bytes int64)",
      "type" : "Tuple",
      "underlying" : 476
    }, {
      "fields" : [ {
        "name" : "ByteOffset",
        "type" : 117
      }, {
        "name" : "err",
        "type" : 90
      } ],
      "name" : "(ByteOffset int64, err error)",
      "type" : "Tuple",
      "underlying" : 477
    }, {
      "name" : "func(hTexRef gorgonia.org/cu.TexRef, desc gorgonia.org/cu.ArrayDesc, dptr gorgonia.org/cu.DevicePtr, Pitch int64)",
      "params" : 479,
      "recv" : 145,
      "results" : 20,
      "type" : "Signature",
      "underlying" : 478,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "hTexRef",
        "type" : 266
      }, {
        "name" : "desc",
        "type" : 303
      }, {
        "name" : "dptr",
        "type" : 269
      }, {
        "name" : "Pitch",
        "type" : 117
      } ],
      "name" : "(hTexRef gorgonia.org/cu.TexRef, desc gorgonia.org/cu.ArrayDesc, dptr gorgonia.org/cu.DevicePtr, Pitch int64)",
      "type" : "Tuple",
      "underlying" : 479
    }, {
      "name" : "func(hTexRef gorgonia.org/cu.TexRef, dim int, am gorgonia.org/cu.AddressMode)",
      "params" : 481,
      "recv" : 146,
      "results" : 20,
      "type" : "Signature",
      "underlying" : 480,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "hTexRef",
        "type" : 266
      }, {
        "name" : "dim",
        "type" : 22
      }, {
        "name" : "am",
        "type" : 273
      } ],
      "name" : "(hTexRef gorgonia.org/cu.TexRef, dim int, am gorgonia.org/cu.AddressMode)",
      "type" : "Tuple",
      "underlying" : 481
    }, {
      "name" : "func(hTexRef gorgonia.org/cu.TexRef, pBorderColor [3]float32)",
      "params" : 483,
      "recv" : 147,
      "results" : 20,
      "type" : "Signature",
      "underlying" : 482,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "hTexRef",
        "type" : 266
      }, {
        "name" : "pBorderColor",
        "type" : 285
      } ],
      "name" : "(hTexRef gorgonia.org/cu.TexRef, pBorderColor [3]float32)",
      "type" : "Tuple",
      "underlying" : 483
    }, {
      "name" : "func(fn gorgonia.org/cu.Function, config gorgonia.org/cu.FuncCacheConfig)",
      "params" : 485,
      "recv" : 148,
      "results" : 20,
      "type" : "Signature",
      "underlying" : 484,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "fn",
        "type" : 339
      }, {
        "name" : "config",
        "type" : 293
      } ],
      "name" : "(fn gorgonia.org/cu.Function, config gorgonia.org/cu.FuncCacheConfig)",
      "type" : "Tuple",
      "underlying" : 485
    }, {
      "name" : "func(config gorgonia.org/cu.FuncCacheConfig)",
      "params" : 487,
      "recv" : 149,
      "results" : 20,
      "type" : "Signature",
      "underlying" : 486,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "config",
        "type" : 293
      } ],
      "name" : "(config gorgonia.org/cu.FuncCacheConfig)",
      "type" : "Tuple",
      "underlying" : 487
    }, {
      "name" : "func(hTexRef gorgonia.org/cu.TexRef, fm gorgonia.org/cu.FilterMode)",
      "params" : 489,
      "recv" : 150,
      "results" : 20,
      "type" : "Signature",
      "underlying" : 488,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "hTexRef",
        "type" : 266
      }, {
        "name" : "fm",
        "type" : 334
      } ],
      "name" : "(hTexRef gorgonia.org/cu.TexRef, fm gorgonia.org/cu.FilterMode)",
      "type" : "Tuple",
      "underlying" : 489
    }, {
      "name" : "func(hTexRef gorgonia.org/cu.TexRef, fmt gorgonia.org/cu.Format, NumPackedComponents int)",
      "params" : 491,
      "recv" : 151,
      "results" : 20,
      "type" : "Signature",
      "underlying" : 490,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "hTexRef",
        "type" : 266
      }, {
        "name" : "fmt",
        "type" : 305
      }, {
        "name" : "NumPackedComponents",
        "type" : 22
      } ],
      "name" : "(hTexRef gorgonia.org/cu.TexRef, fmt gorgonia.org/cu.Format, NumPackedComponents int)",
      "type" : "Tuple",
      "underlying" : 491
    }, {
      "name" : "func(fn gorgonia.org/cu.Function, config gorgonia.org/cu.SharedConfig)",
      "params" : 493,
      "recv" : 152,
      "results" : 20,
      "type" : "Signature",
      "underlying" : 492,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "fn",
        "type" : 339
      }, {
        "name" : "config",
        "type" : 494
      } ],
      "name" : "(fn gorgonia.org/cu.Function, config gorgonia.org/cu.SharedConfig)",
      "type" : "Tuple",
      "underlying" : 493
    }, {
      "local-name" : "SharedConfig",
      "name" : "gorgonia.org/cu.SharedConfig",
      "package" : 10,
      "type" : "Named",
      "underlying" : 71
    }, {
      "name" : "func(limit gorgonia.org/cu.Limit, value int64)",
      "params" : 496,
      "recv" : 153,
      "results" : 20,
      "type" : "Signature",
      "underlying" : 495,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "limit",
        "type" : 351
      }, {
        "name" : "value",
        "type" : 117
      } ],
      "name" : "(limit gorgonia.org/cu.Limit, value int64)",
      "type" : "Tuple",
      "underlying" : 496
    }, {
      "name" : "func(hTexRef gorgonia.org/cu.TexRef, maxAniso uint)",
      "params" : 498,
      "recv" : 154,
      "results" : 20,
      "type" : "Signature",
      "underlying" : 497,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "hTexRef",
        "type" : 266
      }, {
        "name" : "maxAniso",
        "type" : 54
      } ],
      "name" : "(hTexRef gorgonia.org/cu.TexRef, maxAniso uint)",
      "type" : "Tuple",
      "underlying" : 498
    }, {
      "name" : "func(hTexRef gorgonia.org/cu.TexRef, bias float64)",
      "params" : 500,
      "recv" : 155,
      "results" : 20,
      "type" : "Signature",
      "underlying" : 499,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "hTexRef",
        "type" : 266
      }, {
        "name" : "bias",
        "type" : 326
      } ],
      "name" : "(hTexRef gorgonia.org/cu.TexRef, bias float64)",
      "type" : "Tuple",
      "underlying" : 500
    }, {
      "name" : "func(hTexRef gorgonia.org/cu.TexRef, minMipmapLevelClamp float64, maxMipmapLevelClamp float64)",
      "params" : 502,
      "recv" : 156,
      "results" : 20,
      "type" : "Signature",
      "underlying" : 501,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "hTexRef",
        "type" : 266
      }, {
        "name" : "minMipmapLevelClamp",
        "type" : 326
      }, {
        "name" : "maxMipmapLevelClamp",
        "type" : 326
      } ],
      "name" : "(hTexRef gorgonia.org/cu.TexRef, minMipmapLevelClamp float64, maxMipmapLevelClamp float64)",
      "type" : "Tuple",
      "underlying" : 502
    }, {
      "name" : "func(config gorgonia.org/cu.SharedConfig)",
      "params" : 504,
      "recv" : 157,
      "results" : 20,
      "type" : "Signature",
      "underlying" : 503,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "config",
        "type" : 494
      } ],
      "name" : "(config gorgonia.org/cu.SharedConfig)",
      "type" : "Tuple",
      "underlying" : 504
    }, {
      "name" : "func(hTexRef gorgonia.org/cu.TexRef, Flags gorgonia.org/cu.TexRefFlags)",
      "params" : 506,
      "recv" : 158,
      "results" : 20,
      "type" : "Signature",
      "underlying" : 505,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "hTexRef",
        "type" : 266
      }, {
        "name" : "Flags",
        "type" : 507
      } ],
      "name" : "(hTexRef gorgonia.org/cu.TexRef, Flags gorgonia.org/cu.TexRefFlags)",
      "type" : "Tuple",
      "underlying" : 506
    }, {
      "local-name" : "TexRefFlags",
      "name" : "gorgonia.org/cu.TexRefFlags",
      "package" : 10,
      "type" : "Named",
      "underlying" : 71
    }, {
      "name" : "func() (pConfig gorgonia.org/cu.SharedConfig, err error)",
      "params" : 20,
      "recv" : 159,
      "results" : 509,
      "type" : "Signature",
      "underlying" : 508,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "pConfig",
        "type" : 494
      }, {
        "name" : "err",
        "type" : 90
      } ],
      "name" : "(pConfig gorgonia.org/cu.SharedConfig, err error)",
      "type" : "Tuple",
      "underlying" : 509
    }, {
      "name" : "func(hStream gorgonia.org/cu.Stream) (flags uint, err error)",
      "params" : 467,
      "recv" : 160,
      "results" : 511,
      "type" : "Signature",
      "underlying" : 510,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "flags",
        "type" : 54
      }, {
        "name" : "err",
        "type" : 90
      } ],
      "name" : "(flags uint, err error)",
      "type" : "Tuple",
      "underlying" : 511
    }, {
      "name" : "func() (leastPriority int, greatestPriority int, err error)",
      "params" : 20,
      "recv" : 161,
      "results" : 513,
      "type" : "Signature",
      "underlying" : 512,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "leastPriority",
        "type" : 22
      }, {
        "name" : "greatestPriority",
        "type" : 22
      }, {
        "name" : "err",
        "type" : 90
      } ],
      "name" : "(leastPriority int, greatestPriority int, err error)",
      "type" : "Tuple",
      "underlying" : 513
    }, {
      "name" : "func(hSurfRef gorgonia.org/cu.SurfRef, hArray gorgonia.org/cu.Array, Flags uint)",
      "params" : 515,
      "recv" : 162,
      "results" : 20,
      "type" : "Signature",
      "underlying" : 514,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "hSurfRef",
        "type" : 345
      }, {
        "name" : "hArray",
        "type" : 276
      }, {
        "name" : "Flags",
        "type" : 54
      } ],
      "name" : "(hSurfRef gorgonia.org/cu.SurfRef, hArray gorgonia.org/cu.Array, Flags uint)",
      "type" : "Tuple",
      "underlying" : 515
    }, {
      "name" : "func(hTexRef gorgonia.org/cu.TexRef) (pFlags uint, err error)",
      "params" : 265,
      "recv" : 163,
      "results" : 517,
      "type" : "Signature",
      "underlying" : 516,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "pFlags",
        "type" : 54
      }, {
        "name" : "err",
        "type" : 90
      } ],
      "name" : "(pFlags uint, err error)",
      "type" : "Tuple",
      "underlying" : 517
    }, {
      "name" : "func(hTexRef gorgonia.org/cu.TexRef, hArray gorgonia.org/cu.Array, Flags uint)",
      "params" : 519,
      "recv" : 164,
      "results" : 20,
      "type" : "Signature",
      "underlying" : 518,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "hTexRef",
        "type" : 266
      }, {
        "name" : "hArray",
        "type" : 276
      }, {
        "name" : "Flags",
        "type" : 54
      } ],
      "name" : "(hTexRef gorgonia.org/cu.TexRef, hArray gorgonia.org/cu.Array, Flags uint)",
      "type" : "Tuple",
      "underlying" : 519
    }, {
      "name" : "func(hmod gorgonia.org/cu.Module)",
      "params" : 521,
      "recv" : 165,
      "results" : 20,
      "type" : "Signature",
      "underlying" : 520,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "hmod",
        "type" : 355
      } ],
      "name" : "(hmod gorgonia.org/cu.Module)",
      "type" : "Tuple",
      "underlying" : 521
    }, {
      "name" : "func(hStream gorgonia.org/cu.Stream, hEvent gorgonia.org/cu.Event, Flags uint)",
      "params" : 523,
      "recv" : 166,
      "results" : 20,
      "type" : "Signature",
      "underlying" : 522,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "hStream",
        "type" : 281
      }, {
        "name" : "hEvent",
        "type" : 314
      }, {
        "name" : "Flags",
        "type" : 54
      } ],
      "name" : "(hStream gorgonia.org/cu.Stream, hEvent gorgonia.org/cu.Event, Flags uint)",
      "type" : "Tuple",
      "underlying" : 523
    }, {
      "name" : "func(stream gorgonia.org/cu.Stream, addr gorgonia.org/cu.DevicePtr, value uint32, flags uint)",
      "params" : 525,
      "recv" : 167,
      "results" : 20,
      "type" : "Signature",
      "underlying" : 524,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "stream",
        "type" : 281
      }, {
        "name" : "addr",
        "type" : 269
      }, {
        "name" : "value",
        "type" : 64
      }, {
        "name" : "flags",
        "type" : 54
      } ],
      "name" : "(stream gorgonia.org/cu.Stream, addr gorgonia.org/cu.DevicePtr, value uint32, flags uint)",
      "type" : "Tuple",
      "underlying" : 525
    }, {
      "name" : "func() <-chan func() error",
      "params" : 20,
      "recv" : 168,
      "results" : 527,
      "type" : "Signature",
      "underlying" : 526,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 528
      } ],
      "name" : "(<-chan func() error)",
      "type" : "Tuple",
      "underlying" : 527
    }, {
      "dir" : "recv",
      "elem" : 195,
      "name" : "<-chan func() error",
      "type" : "Chan",
      "underlying" : 528
    }, {
      "local-name" : "BatchedContext",
      "name" : "gorgonia.org/cu.BatchedContext",
      "package" : 10,
      "type" : "Named",
      "underlying" : 530
    }, {
      "fields" : [ {
        "name" : "Context",
        "type" : 262
      }, {
        "name" : "Device",
        "type" : 296
      }, {
        "name" : "workAvailable",
        "type" : 531
      }, {
        "name" : "work",
        "type" : 533
      }, {
        "name" : "queue",
        "type" : 540
      }, {
        "name" : "fns",
        "type" : 541
      }, {
        "name" : "results",
        "type" : 541
      }, {
        "name" : "frees",
        "type" : 348
      }, {
        "name" : "retVal",
        "type" : 542
      }, {
        "name" : "initialized",
        "type" : 14
      } ],
      "name" : "struct{gorgonia.org/cu.Context; gorgonia.org/cu.Device; workAvailable chan struct{}; work chan gorgonia.org/cu.call; queue []gorgonia.org/cu.call; fns []invalid type; results []invalid type; frees []unsafe.Pointer; retVal chan gorgonia.org/cu.DevicePtr; initialized bool}",
      "type" : "Struct",
      "underlying" : 530
    }, {
      "dir" : "both",
      "elem" : 532,
      "name" : "chan struct{}",
      "type" : "Chan",
      "underlying" : 531
    }, {
      "fields" : [ ],
      "name" : "struct{}",
      "type" : "Struct",
      "underlying" : 532
    }, {
      "dir" : "both",
      "elem" : 534,
      "name" : "chan gorgonia.org/cu.call",
      "type" : "Chan",
      "underlying" : 533
    }, {
      "local-name" : "call",
      "name" : "gorgonia.org/cu.call",
      "package" : 10,
      "type" : "Named",
      "underlying" : 535
    }, {
      "fields" : [ {
        "name" : "fnargs",
        "type" : 536
      }, {
        "name" : "blocking",
        "type" : 14
      } ],
      "name" : "struct{fnargs *gorgonia.org/cu.fnargs; blocking bool}",
      "type" : "Struct",
      "underlying" : 535
    }, {
      "elem" : 537,
      "name" : "*gorgonia.org/cu.fnargs",
      "type" : "Pointer",
      "underlying" : 536
    }, {
      "local-name" : "fnargs",
      "name" : "gorgonia.org/cu.fnargs",
      "package" : 10,
      "type" : "Named",
      "underlying" : 538
    }, {
      "fields" : [ {
        "name" : "fn",
        "type" : 259
      }, {
        "name" : "ctx",
        "type" : 259
      }, {
        "name" : "devptr0",
        "type" : 259
      }, {
        "name" : "devptr1",
        "type" : 259
      }, {
        "name" : "ptr0",
        "type" : 69
      }, {
        "name" : "ptr1",
        "type" : 69
      }, {
        "name" : "f",
        "type" : 259
      }, {
        "name" : "gridDimX",
        "type" : 259
      }, {
        "name" : "gridDimY",
        "type" : 259
      }, {
        "name" : "gridDimZ",
        "type" : 259
      }, {
        "name" : "blockDimX",
        "type" : 259
      }, {
        "name" : "blockDimY",
        "type" : 259
      }, {
        "name" : "blockDimZ",
        "type" : 259
      }, {
        "name" : "sharedMemBytes",
        "type" : 259
      }, {
        "name" : "kernelParams",
        "type" : 539
      }, {
        "name" : "extra",
        "type" : 539
      }, {
        "name" : "size",
        "type" : 259
      }, {
        "name" : "stream",
        "type" : 259
      } ],
      "name" : "struct{fn invalid type; ctx invalid type; devptr0 invalid type; devptr1 invalid type; ptr0 unsafe.Pointer; ptr1 unsafe.Pointer; f invalid type; gridDimX invalid type; gridDimY invalid type; gridDimZ invalid type; blockDimX invalid type; blockDimY invalid type; blockDimZ invalid type; sharedMemBytes invalid type; kernelParams *unsafe.Pointer; extra *unsafe.Pointer; size invalid type; stream invalid type}",
      "type" : "Struct",
      "underlying" : 538
    }, {
      "elem" : 69,
      "name" : "*unsafe.Pointer",
      "type" : "Pointer",
      "underlying" : 539
    }, {
      "elem" : 534,
      "name" : "[]gorgonia.org/cu.call",
      "type" : "Slice",
      "underlying" : 540
    }, {
      "elem" : 259,
      "name" : "[]invalid type",
      "type" : "Slice",
      "underlying" : 541
    }, {
      "dir" : "both",
      "elem" : 269,
      "name" : "chan gorgonia.org/cu.DevicePtr",
      "type" : "Chan",
      "underlying" : 542
    }, {
      "elem" : 339,
      "key" : 37,
      "name" : "map[string]gorgonia.org/cu.Function",
      "type" : "Map",
      "underlying" : 543
    }, {
      "elem" : 355,
      "key" : 37,
      "name" : "map[string]gorgonia.org/cu.Module",
      "type" : "Map",
      "underlying" : 544
    }, {
      "local-name" : "Context",
      "name" : "gorgonia.org/cu/dnn.Context",
      "package" : 11,
      "type" : "Named",
      "underlying" : 546
    }, {
      "fields" : [ {
        "name" : "internal",
        "type" : 259
      } ],
      "name" : "struct{internal invalid type}",
      "type" : "Struct",
      "underlying" : 546
    }, {
      "dir" : "both",
      "elem" : 14,
      "name" : "chan bool",
      "type" : "Chan",
      "underlying" : 547
    }, {
      "name" : "func(a gorgonia.org/tensor.Tensor, b gorgonia.org/tensor.Tensor, fn string) (name string)",
      "params" : 549,
      "recv" : -1,
      "results" : 44,
      "type" : "Signature",
      "underlying" : 548,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "a",
        "type" : 2
      }, {
        "name" : "b",
        "type" : 2
      }, {
        "name" : "fn",
        "type" : 37
      } ],
      "name" : "(a gorgonia.org/tensor.Tensor, b gorgonia.org/tensor.Tensor, fn string)",
      "type" : "Tuple",
      "underlying" : 549
    }, {
      "name" : "func(name string) bool",
      "params" : 44,
      "recv" : -1,
      "results" : 25,
      "type" : "Signature",
      "underlying" : 550,
      "variadic" : false
    }, {
      "name" : "untyped nil",
      "type" : "Basic",
      "underlying" : 551
    }, {
      "name" : "func(format string, args ...interface{}) error",
      "params" : 553,
      "recv" : -1,
      "results" : 120,
      "type" : "Signature",
      "underlying" : 552,
      "variadic" : true
    }, {
      "fields" : [ {
        "name" : "format",
        "type" : 37
      }, {
        "name" : "args",
        "type" : 554
      } ],
      "name" : "(format string, args []interface{})",
      "type" : "Tuple",
      "underlying" : 553
    }, {
      "elem" : 6,
      "name" : "[]interface{}",
      "type" : "Slice",
      "underlying" : 554
    }, {
      "name" : "func(a gorgonia.org/tensor.Tensor, b gorgonia.org/tensor.Tensor) (err error)",
      "params" : 556,
      "recv" : -1,
      "results" : 557,
      "type" : "Signature",
      "underlying" : 555,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "a",
        "type" : 2
      }, {
        "name" : "b",
        "type" : 2
      } ],
      "name" : "(a gorgonia.org/tensor.Tensor, b gorgonia.org/tensor.Tensor)",
      "type" : "Tuple",
      "underlying" : 556
    }, {
      "fields" : [ {
        "name" : "err",
        "type" : 90
      } ],
      "name" : "(err error)",
      "type" : "Tuple",
      "underlying" : 557
    }, {
      "name" : "untyped bool",
      "type" : "Basic",
      "underlying" : 558
    }, {
      "name" : "func(err error, message string) error",
      "params" : 560,
      "recv" : -1,
      "results" : 120,
      "type" : "Signature",
      "underlying" : 559,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "err",
        "type" : 90
      }, {
        "name" : "message",
        "type" : 37
      } ],
      "name" : "(err error, message string)",
      "type" : "Tuple",
      "underlying" : 560
    }, {
      "local-name" : "DenseTensor",
      "name" : "gorgonia.org/tensor.DenseTensor",
      "package" : 1,
      "type" : "Named",
      "underlying" : 562
    }, {
      "methods" : [ {
        "name" : "Apply",
        "type" : 4
      }, {
        "name" : "At",
        "type" : 92
      }, {
        "name" : "Clone",
        "type" : 95
      }, {
        "name" : "Data",
        "type" : 95
      }, {
        "name" : "DataOrder",
        "type" : 99
      }, {
        "name" : "DataSize",
        "type" : 19
      }, {
        "name" : "Dims",
        "type" : 19
      }, {
        "name" : "Dtype",
        "type" : 102
      }, {
        "name" : "Engine",
        "type" : 104
      }, {
        "name" : "Eq",
        "type" : 128
      }, {
        "name" : "Float32s",
        "type" : 563
      }, {
        "name" : "Float64s",
        "type" : 568
      }, {
        "name" : "Format",
        "type" : 131
      }, {
        "name" : "GetF32",
        "type" : 571
      }, {
        "name" : "GetF64",
        "type" : 573
      }, {
        "name" : "GobDecode",
        "type" : 148
      }, {
        "name" : "GobEncode",
        "type" : 152
      }, {
        "name" : "Info",
        "type" : 577
      }, {
        "name" : "Inner",
        "type" : 583
      }, {
        "name" : "IsColVec",
        "type" : 29
      }, {
        "name" : "IsManuallyManaged",
        "type" : 29
      }, {
        "name" : "IsMatrix",
        "type" : 29
      }, {
        "name" : "IsNativelyAccessible",
        "type" : 29
      }, {
        "name" : "IsRowVec",
        "type" : 29
      }, {
        "name" : "IsScalar",
        "type" : 29
      }, {
        "name" : "IsVector",
        "type" : 29
      }, {
        "name" : "Iterator",
        "type" : 156
      }, {
        "name" : "MatMul",
        "type" : 586
      }, {
        "name" : "MatVecMul",
        "type" : 586
      }, {
        "name" : "MemSize",
        "type" : 79
      }, {
        "name" : "Memset",
        "type" : 171
      }, {
        "name" : "Pointer",
        "type" : 112
      }, {
        "name" : "ReadNpy",
        "type" : 174
      }, {
        "name" : "RequiresIterator",
        "type" : 29
      }, {
        "name" : "Reshape",
        "type" : 180
      }, {
        "name" : "ScalarValue",
        "type" : 95
      }, {
        "name" : "Set",
        "type" : 575
      }, {
        "name" : "SetAt",
        "type" : 181
      }, {
        "name" : "Shape",
        "type" : 168
      }, {
        "name" : "Size",
        "type" : 19
      }, {
        "name" : "Slice",
        "type" : 183
      }, {
        "name" : "Strides",
        "type" : 160
      }, {
        "name" : "String",
        "type" : 78
      }, {
        "name" : "T",
        "type" : 193
      }, {
        "name" : "TensorMul",
        "type" : 594
      }, {
        "name" : "Transpose",
        "type" : 195
      }, {
        "name" : "UT",
        "type" : 167
      }, {
        "name" : "Uintptr",
        "type" : 79
      }, {
        "name" : "WriteNpy",
        "type" : 196
      }, {
        "name" : "Zero",
        "type" : 167
      }, {
        "name" : "arr",
        "type" : 200
      }, {
        "name" : "arrPtr",
        "type" : 208
      }, {
        "name" : "cap",
        "type" : 19
      }, {
        "name" : "hdr",
        "type" : 211
      }, {
        "name" : "isTransposed",
        "type" : 29
      }, {
        "name" : "len",
        "type" : 19
      }, {
        "name" : "oldAP",
        "type" : 577
      }, {
        "name" : "oshape",
        "type" : 168
      }, {
        "name" : "ostrides",
        "type" : 160
      }, {
        "name" : "parentTensor",
        "type" : 596
      }, {
        "name" : "reshape",
        "type" : 598
      }, {
        "name" : "rtype",
        "type" : 30
      }, {
        "name" : "setAP",
        "type" : 600
      }, {
        "name" : "setDataOrder",
        "type" : 601
      }, {
        "name" : "setOldAP",
        "type" : 603
      }, {
        "name" : "setParentTensor",
        "type" : 605
      }, {
        "name" : "stackDense",
        "type" : 606
      }, {
        "name" : "standardEngine",
        "type" : 216
      }, {
        "name" : "transposeAxes",
        "type" : 160
      }, {
        "name" : "transposeIndex",
        "type" : 610
      } ],
      "name" : "interface{Info() *gorgonia.org/tensor.AP; Inner(other gorgonia.org/tensor.Tensor) (retVal interface{}, err error); IsColVec() bool; IsMatrix() bool; IsRowVec() bool; IsVector() bool; MatMul(other gorgonia.org/tensor.Tensor, opts ...gorgonia.org/tensor.FuncOpt) (retVal *gorgonia.org/tensor.Dense, err error); MatVecMul(other gorgonia.org/tensor.Tensor, opts ...gorgonia.org/tensor.FuncOpt) (retVal *gorgonia.org/tensor.Dense, err error); TensorMul(other gorgonia.org/tensor.Tensor, axesA []int, axesB []int) (retVal *gorgonia.org/tensor.Dense, err error); cap() int; isTransposed() bool; len() int; oldAP() *gorgonia.org/tensor.AP; oshape() gorgonia.org/tensor.Shape; ostrides() []int; parentTensor() *gorgonia.org/tensor.Dense; reshape(dims ...int) error; rtype() reflect.Type; setAP(*gorgonia.org/tensor.AP); setDataOrder(o gorgonia.org/tensor.DataOrder); setOldAP(ap *gorgonia.org/tensor.AP); setParentTensor(*gorgonia.org/tensor.Dense); stackDense(axis int, others ...gorgonia.org/tensor.DenseTensor) (gorgonia.org/tensor.DenseTensor, error); transposeAxes() []int; transposeIndex(i int, transposePat []int, strides []int) int; gorgonia.org/tensor.Tensor; gorgonia.org/tensor.unsafeMem}",
      "type" : "Interface",
      "underlying" : 562
    }, {
      "name" : "func() []float32",
      "params" : 20,
      "recv" : 180,
      "results" : 564,
      "type" : "Signature",
      "underlying" : 563,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 565
      } ],
      "name" : "([]float32)",
      "type" : "Tuple",
      "underlying" : 564
    }, {
      "elem" : 286,
      "name" : "[]float32",
      "type" : "Slice",
      "underlying" : 565
    }, {
      "local-name" : "unsafeMem",
      "name" : "gorgonia.org/tensor.unsafeMem",
      "package" : 1,
      "type" : "Named",
      "underlying" : 567
    }, {
      "methods" : [ {
        "name" : "Float32s",
        "type" : 563
      }, {
        "name" : "Float64s",
        "type" : 568
      }, {
        "name" : "GetF32",
        "type" : 571
      }, {
        "name" : "GetF64",
        "type" : 573
      }, {
        "name" : "Set",
        "type" : 575
      } ],
      "name" : "interface{Float32s() []float32; Float64s() []float64; GetF32(i int) float32; GetF64(i int) float64; Set(i int, x interface{})}",
      "type" : "Interface",
      "underlying" : 567
    }, {
      "name" : "func() []float64",
      "params" : 20,
      "recv" : 176,
      "results" : 569,
      "type" : "Signature",
      "underlying" : 568,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 570
      } ],
      "name" : "([]float64)",
      "type" : "Tuple",
      "underlying" : 569
    }, {
      "elem" : 326,
      "name" : "[]float64",
      "type" : "Slice",
      "underlying" : 570
    }, {
      "name" : "func(i int) float32",
      "params" : 33,
      "recv" : 177,
      "results" : 572,
      "type" : "Signature",
      "underlying" : 571,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 286
      } ],
      "name" : "(float32)",
      "type" : "Tuple",
      "underlying" : 572
    }, {
      "name" : "func(i int) float64",
      "params" : 33,
      "recv" : 178,
      "results" : 574,
      "type" : "Signature",
      "underlying" : 573,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 326
      } ],
      "name" : "(float64)",
      "type" : "Tuple",
      "underlying" : 574
    }, {
      "name" : "func(i int, x interface{})",
      "params" : 576,
      "recv" : 179,
      "results" : 20,
      "type" : "Signature",
      "underlying" : 575,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "i",
        "type" : 22
      }, {
        "name" : "x",
        "type" : 6
      } ],
      "name" : "(i int, x interface{})",
      "type" : "Tuple",
      "underlying" : 576
    }, {
      "name" : "func() *gorgonia.org/tensor.AP",
      "params" : 20,
      "recv" : 181,
      "results" : 578,
      "type" : "Signature",
      "underlying" : 577,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 579
      } ],
      "name" : "(*gorgonia.org/tensor.AP)",
      "type" : "Tuple",
      "underlying" : 578
    }, {
      "elem" : 580,
      "name" : "*gorgonia.org/tensor.AP",
      "type" : "Pointer",
      "underlying" : 579
    }, {
      "local-name" : "AP",
      "name" : "gorgonia.org/tensor.AP",
      "package" : 1,
      "type" : "Named",
      "underlying" : 581
    }, {
      "fields" : [ {
        "name" : "shape",
        "type" : 170
      }, {
        "name" : "strides",
        "type" : 40
      }, {
        "name" : "fin",
        "type" : 14
      }, {
        "name" : "o",
        "type" : 101
      }, {
        "name" : "Δ",
        "type" : 582
      } ],
      "name" : "struct{shape gorgonia.org/tensor.Shape; strides []int; fin bool; o gorgonia.org/tensor.DataOrder; Δ gorgonia.org/tensor.Triangle}",
      "type" : "Struct",
      "underlying" : 581
    }, {
      "local-name" : "Triangle",
      "name" : "gorgonia.org/tensor.Triangle",
      "package" : 1,
      "type" : "Named",
      "underlying" : 71
    }, {
      "name" : "func(other gorgonia.org/tensor.Tensor) (retVal interface{}, err error)",
      "params" : 584,
      "recv" : 182,
      "results" : 585,
      "type" : "Signature",
      "underlying" : 583,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "other",
        "type" : 2
      } ],
      "name" : "(other gorgonia.org/tensor.Tensor)",
      "type" : "Tuple",
      "underlying" : 584
    }, {
      "fields" : [ {
        "name" : "retVal",
        "type" : 6
      }, {
        "name" : "err",
        "type" : 90
      } ],
      "name" : "(retVal interface{}, err error)",
      "type" : "Tuple",
      "underlying" : 585
    }, {
      "name" : "func(other gorgonia.org/tensor.Tensor, opts ...gorgonia.org/tensor.FuncOpt) (retVal *gorgonia.org/tensor.Dense, err error)",
      "params" : 587,
      "recv" : 183,
      "results" : 588,
      "type" : "Signature",
      "underlying" : 586,
      "variadic" : true
    }, {
      "fields" : [ {
        "name" : "other",
        "type" : 2
      }, {
        "name" : "opts",
        "type" : 7
      } ],
      "name" : "(other gorgonia.org/tensor.Tensor, opts []gorgonia.org/tensor.FuncOpt)",
      "type" : "Tuple",
      "underlying" : 587
    }, {
      "fields" : [ {
        "name" : "retVal",
        "type" : 589
      }, {
        "name" : "err",
        "type" : 90
      } ],
      "name" : "(retVal *gorgonia.org/tensor.Dense, err error)",
      "type" : "Tuple",
      "underlying" : 588
    }, {
      "elem" : 590,
      "name" : "*gorgonia.org/tensor.Dense",
      "type" : "Pointer",
      "underlying" : 589
    }, {
      "local-name" : "Dense",
      "name" : "gorgonia.org/tensor.Dense",
      "package" : 1,
      "type" : "Named",
      "underlying" : 591
    }, {
      "fields" : [ {
        "name" : "AP",
        "type" : 580
      }, {
        "name" : "array",
        "type" : 202
      }, {
        "name" : "flag",
        "type" : 592
      }, {
        "name" : "e",
        "type" : 106
      }, {
        "name" : "oe",
        "type" : 218
      }, {
        "name" : "old",
        "type" : 580
      }, {
        "name" : "transposeWith",
        "type" : 40
      }, {
        "name" : "viewOf",
        "type" : 39
      }, {
        "name" : "mask",
        "type" : 593
      }, {
        "name" : "maskIsSoft",
        "type" : 14
      } ],
      "name" : "struct{gorgonia.org/tensor.AP; gorgonia.org/tensor.array; flag gorgonia.org/tensor.MemoryFlag; e gorgonia.org/tensor.Engine; oe gorgonia.org/tensor.standardEngine; old gorgonia.org/tensor.AP; transposeWith []int; viewOf uintptr; mask []bool; maskIsSoft bool}",
      "type" : "Struct",
      "underlying" : 591
    }, {
      "local-name" : "MemoryFlag",
      "name" : "gorgonia.org/tensor.MemoryFlag",
      "package" : 1,
      "type" : "Named",
      "underlying" : 71
    }, {
      "elem" : 14,
      "name" : "[]bool",
      "type" : "Slice",
      "underlying" : 593
    }, {
      "name" : "func(other gorgonia.org/tensor.Tensor, axesA []int, axesB []int) (retVal *gorgonia.org/tensor.Dense, err error)",
      "params" : 595,
      "recv" : 184,
      "results" : 588,
      "type" : "Signature",
      "underlying" : 594,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "other",
        "type" : 2
      }, {
        "name" : "axesA",
        "type" : 40
      }, {
        "name" : "axesB",
        "type" : 40
      } ],
      "name" : "(other gorgonia.org/tensor.Tensor, axesA []int, axesB []int)",
      "type" : "Tuple",
      "underlying" : 595
    }, {
      "name" : "func() *gorgonia.org/tensor.Dense",
      "params" : 20,
      "recv" : 185,
      "results" : 597,
      "type" : "Signature",
      "underlying" : 596,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 589
      } ],
      "name" : "(*gorgonia.org/tensor.Dense)",
      "type" : "Tuple",
      "underlying" : 597
    }, {
      "name" : "func(dims ...int) error",
      "params" : 599,
      "recv" : 186,
      "results" : 120,
      "type" : "Signature",
      "underlying" : 598,
      "variadic" : true
    }, {
      "fields" : [ {
        "name" : "dims",
        "type" : 40
      } ],
      "name" : "(dims []int)",
      "type" : "Tuple",
      "underlying" : 599
    }, {
      "name" : "func(*gorgonia.org/tensor.AP)",
      "params" : 578,
      "recv" : 187,
      "results" : 20,
      "type" : "Signature",
      "underlying" : 600,
      "variadic" : false
    }, {
      "name" : "func(o gorgonia.org/tensor.DataOrder)",
      "params" : 602,
      "recv" : 188,
      "results" : 20,
      "type" : "Signature",
      "underlying" : 601,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "o",
        "type" : 101
      } ],
      "name" : "(o gorgonia.org/tensor.DataOrder)",
      "type" : "Tuple",
      "underlying" : 602
    }, {
      "name" : "func(ap *gorgonia.org/tensor.AP)",
      "params" : 604,
      "recv" : 189,
      "results" : 20,
      "type" : "Signature",
      "underlying" : 603,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "ap",
        "type" : 579
      } ],
      "name" : "(ap *gorgonia.org/tensor.AP)",
      "type" : "Tuple",
      "underlying" : 604
    }, {
      "name" : "func(*gorgonia.org/tensor.Dense)",
      "params" : 597,
      "recv" : 190,
      "results" : 20,
      "type" : "Signature",
      "underlying" : 605,
      "variadic" : false
    }, {
      "name" : "func(axis int, others ...gorgonia.org/tensor.DenseTensor) (gorgonia.org/tensor.DenseTensor, error)",
      "params" : 607,
      "recv" : 191,
      "results" : 609,
      "type" : "Signature",
      "underlying" : 606,
      "variadic" : true
    }, {
      "fields" : [ {
        "name" : "axis",
        "type" : 22
      }, {
        "name" : "others",
        "type" : 608
      } ],
      "name" : "(axis int, others []gorgonia.org/tensor.DenseTensor)",
      "type" : "Tuple",
      "underlying" : 607
    }, {
      "elem" : 561,
      "name" : "[]gorgonia.org/tensor.DenseTensor",
      "type" : "Slice",
      "underlying" : 608
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 561
      }, {
        "name" : "",
        "type" : 90
      } ],
      "name" : "(gorgonia.org/tensor.DenseTensor, error)",
      "type" : "Tuple",
      "underlying" : 609
    }, {
      "name" : "func(i int, transposePat []int, strides []int) int",
      "params" : 611,
      "recv" : 192,
      "results" : 21,
      "type" : "Signature",
      "underlying" : 610,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "i",
        "type" : 22
      }, {
        "name" : "transposePat",
        "type" : 40
      }, {
        "name" : "strides",
        "type" : 40
      } ],
      "name" : "(i int, transposePat []int, strides []int)",
      "type" : "Tuple",
      "underlying" : 611
    }, {
      "fields" : [ {
        "name" : "reuse",
        "type" : 561
      }, {
        "name" : "safe",
        "type" : 14
      }, {
        "name" : "toReuse",
        "type" : 14
      }, {
        "name" : "incr",
        "type" : 14
      }, {
        "name" : "same",
        "type" : 14
      }, {
        "name" : "err",
        "type" : 90
      } ],
      "name" : "(reuse gorgonia.org/tensor.DenseTensor, safe bool, toReuse bool, incr bool, same bool, err error)",
      "type" : "Tuple",
      "underlying" : 612
    }, {
      "name" : "func(expShape gorgonia.org/tensor.Shape, expType gorgonia.org/tensor.Dtype, o gorgonia.org/tensor.DataOrder, strict bool, opts ...gorgonia.org/tensor.FuncOpt) (reuse gorgonia.org/tensor.DenseTensor, safe bool, toReuse bool, incr bool, same bool, err error)",
      "params" : 614,
      "recv" : -1,
      "results" : 612,
      "type" : "Signature",
      "underlying" : 613,
      "variadic" : true
    }, {
      "fields" : [ {
        "name" : "expShape",
        "type" : 170
      }, {
        "name" : "expType",
        "type" : 15
      }, {
        "name" : "o",
        "type" : 101
      }, {
        "name" : "strict",
        "type" : 14
      }, {
        "name" : "opts",
        "type" : 7
      } ],
      "name" : "(expShape gorgonia.org/tensor.Shape, expType gorgonia.org/tensor.Dtype, o gorgonia.org/tensor.DataOrder, strict bool, opts []gorgonia.org/tensor.FuncOpt)",
      "type" : "Tuple",
      "underlying" : 614
    }, {
      "name" : "func(dst gorgonia.org/cu.DevicePtr, src gorgonia.org/cu.DevicePtr, size int64)",
      "params" : 616,
      "recv" : -1,
      "results" : 20,
      "type" : "Signature",
      "underlying" : 615,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "dst",
        "type" : 269
      }, {
        "name" : "src",
        "type" : 269
      }, {
        "name" : "size",
        "type" : 117
      } ],
      "name" : "(dst gorgonia.org/cu.DevicePtr, src gorgonia.org/cu.DevicePtr, size int64)",
      "type" : "Tuple",
      "underlying" : 616
    }, {
      "name" : "func(s gorgonia.org/tensor.Shape) int",
      "params" : 618,
      "recv" : -1,
      "results" : 21,
      "type" : "Signature",
      "underlying" : 617,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "s",
        "type" : 170
      } ],
      "name" : "(s gorgonia.org/tensor.Shape)",
      "type" : "Tuple",
      "underlying" : 618
    }, {
      "name" : "func(message string) error",
      "params" : 620,
      "recv" : -1,
      "results" : 120,
      "type" : "Signature",
      "underlying" : 619,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "message",
        "type" : 37
      } ],
      "name" : "(message string)",
      "type" : "Tuple",
      "underlying" : 620
    }, {
      "fields" : [ {
        "name" : "gridDimX",
        "type" : 22
      }, {
        "name" : "gridDimY",
        "type" : 22
      }, {
        "name" : "gridDimZ",
        "type" : 22
      }, {
        "name" : "blockDimX",
        "type" : 22
      }, {
        "name" : "blockDimY",
        "type" : 22
      }, {
        "name" : "blockDimZ",
        "type" : 22
      } ],
      "name" : "(gridDimX int, gridDimY int, gridDimZ int, blockDimX int, blockDimY int, blockDimZ int)",
      "type" : "Tuple",
      "underlying" : 621
    }, {
      "name" : "func(n int) (gridDimX int, gridDimY int, gridDimZ int, blockDimX int, blockDimY int, blockDimZ int)",
      "params" : 623,
      "recv" : -1,
      "results" : 621,
      "type" : "Signature",
      "underlying" : 622,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "n",
        "type" : 22
      } ],
      "name" : "(n int)",
      "type" : "Tuple",
      "underlying" : 623
    }, {
      "elem" : 269,
      "name" : "*gorgonia.org/cu.DevicePtr",
      "type" : "Pointer",
      "underlying" : 624
    }, {
      "elem" : 117,
      "name" : "*int64",
      "type" : "Pointer",
      "underlying" : 625
    }, {
      "name" : "func(format string, others ...interface{})",
      "params" : 627,
      "recv" : -1,
      "results" : 20,
      "type" : "Signature",
      "underlying" : 626,
      "variadic" : true
    }, {
      "fields" : [ {
        "name" : "format",
        "type" : 37
      }, {
        "name" : "others",
        "type" : 554
      } ],
      "name" : "(format string, others []interface{})",
      "type" : "Tuple",
      "underlying" : 627
    }, {
      "name" : "func(function gorgonia.org/cu.Function, gridDimX int, gridDimY int, gridDimZ int, blockDimX int, blockDimY int, blockDimZ int, sharedMemBytes int, stream gorgonia.org/cu.Stream, kernelParams []unsafe.Pointer)",
      "params" : 629,
      "recv" : -1,
      "results" : 20,
      "type" : "Signature",
      "underlying" : 628,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "function",
        "type" : 339
      }, {
        "name" : "gridDimX",
        "type" : 22
      }, {
        "name" : "gridDimY",
        "type" : 22
      }, {
        "name" : "gridDimZ",
        "type" : 22
      }, {
        "name" : "blockDimX",
        "type" : 22
      }, {
        "name" : "blockDimY",
        "type" : 22
      }, {
        "name" : "blockDimZ",
        "type" : 22
      }, {
        "name" : "sharedMemBytes",
        "type" : 22
      }, {
        "name" : "stream",
        "type" : 281
      }, {
        "name" : "kernelParams",
        "type" : 348
      } ],
      "name" : "(function gorgonia.org/cu.Function, gridDimX int, gridDimY int, gridDimZ int, blockDimX int, blockDimY int, blockDimZ int, sharedMemBytes int, stream gorgonia.org/cu.Stream, kernelParams []unsafe.Pointer)",
      "type" : "Tuple",
      "underlying" : 629
    } ],
    "variables" : [ {
      "name" : "",
      "package" : 2,
      "type" : 17,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 2,
      "type" : 17,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 2,
      "type" : 17,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 2,
      "type" : 17,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 2,
      "type" : 17,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 2,
      "type" : 17,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 2,
      "type" : 17,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 2,
      "type" : 17,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 2,
      "type" : 17,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 2,
      "type" : 17,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 2,
      "type" : 17,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 2,
      "type" : 17,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 2,
      "type" : 17,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 2,
      "type" : 17,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 2,
      "type" : 17,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 2,
      "type" : 17,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 2,
      "type" : 17,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 1,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 1,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 1,
      "type" : 97,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 1,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 1,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 1,
      "type" : 110,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 1,
      "type" : 106,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 1,
      "type" : 106,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 1,
      "type" : 106,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 1,
      "type" : 106,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 1,
      "type" : 106,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 1,
      "type" : 106,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 1,
      "type" : 106,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 1,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 1,
      "type" : 129,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 4,
      "type" : 133,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 4,
      "type" : 133,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 4,
      "type" : 133,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 4,
      "type" : 133,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 4,
      "type" : 146,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 5,
      "type" : 150,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 5,
      "type" : 154,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 1,
      "type" : 158,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 1,
      "type" : 158,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 1,
      "type" : 158,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 1,
      "type" : 158,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 1,
      "type" : 158,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 1,
      "type" : 158,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 1,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 1,
      "type" : 172,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 6,
      "type" : 176,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 1,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 1,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 1,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 1,
      "type" : 189,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 1,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 1,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 1,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 1,
      "type" : 206,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 1,
      "type" : 206,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 1,
      "type" : 214,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 1,
      "type" : 221,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 1,
      "type" : 221,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 1,
      "type" : 227,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 1,
      "type" : 227,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 1,
      "type" : 233,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 1,
      "type" : 238,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 1,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 1,
      "type" : 240,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 10,
      "type" : 262,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 10,
      "type" : 262,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 10,
      "type" : 262,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 10,
      "type" : 262,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 10,
      "type" : 262,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 10,
      "type" : 262,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 10,
      "type" : 262,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 10,
      "type" : 262,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 10,
      "type" : 262,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 10,
      "type" : 262,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 10,
      "type" : 262,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 10,
      "type" : 262,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 10,
      "type" : 262,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 10,
      "type" : 262,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 10,
      "type" : 262,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 10,
      "type" : 262,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 10,
      "type" : 262,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 10,
      "type" : 262,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 10,
      "type" : 262,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 10,
      "type" : 262,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 10,
      "type" : 262,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 10,
      "type" : 262,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 10,
      "type" : 262,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 10,
      "type" : 262,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 10,
      "type" : 262,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 10,
      "type" : 262,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 10,
      "type" : 262,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 10,
      "type" : 262,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 10,
      "type" : 262,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 10,
      "type" : 262,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 10,
      "type" : 262,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 10,
      "type" : 262,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 10,
      "type" : 262,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 10,
      "type" : 262,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 10,
      "type" : 262,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 10,
      "type" : 262,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 10,
      "type" : 262,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 10,
      "type" : 262,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 10,
      "type" : 262,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 10,
      "type" : 262,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 10,
      "type" : 262,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 10,
      "type" : 262,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 10,
      "type" : 262,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 10,
      "type" : 262,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 10,
      "type" : 262,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 10,
      "type" : 262,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 10,
      "type" : 262,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 10,
      "type" : 262,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 10,
      "type" : 262,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 10,
      "type" : 262,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 10,
      "type" : 262,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 10,
      "type" : 262,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 10,
      "type" : 262,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 10,
      "type" : 262,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 10,
      "type" : 262,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 10,
      "type" : 262,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 10,
      "type" : 262,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 10,
      "type" : 262,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 10,
      "type" : 262,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 10,
      "type" : 262,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 10,
      "type" : 262,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 10,
      "type" : 262,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 10,
      "type" : 262,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 10,
      "type" : 262,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 10,
      "type" : 262,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 10,
      "type" : 262,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 10,
      "type" : 262,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 10,
      "type" : 262,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 10,
      "type" : 262,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 10,
      "type" : 262,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 10,
      "type" : 262,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 10,
      "type" : 262,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 10,
      "type" : 262,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 10,
      "type" : 262,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 10,
      "type" : 262,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 10,
      "type" : 262,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 10,
      "type" : 262,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 10,
      "type" : 262,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 10,
      "type" : 262,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 10,
      "type" : 262,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 10,
      "type" : 262,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 10,
      "type" : 262,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 10,
      "type" : 262,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 10,
      "type" : 262,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 10,
      "type" : 262,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 10,
      "type" : 262,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 10,
      "type" : 262,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 10,
      "type" : 262,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 10,
      "type" : 262,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 10,
      "type" : 262,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 10,
      "type" : 262,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 10,
      "type" : 262,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 10,
      "type" : 262,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 10,
      "type" : 262,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 10,
      "type" : 262,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 10,
      "type" : 262,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 10,
      "type" : 262,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 10,
      "type" : 262,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 10,
      "type" : 262,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 10,
      "type" : 262,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 10,
      "type" : 262,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 10,
      "type" : 262,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 10,
      "type" : 262,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "e",
      "package" : 0,
      "type" : 243,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "a",
      "package" : 0,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "b",
      "package" : 0,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "opts",
      "package" : 0,
      "type" : 7,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "retVal",
      "package" : 0,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "err",
      "package" : 0,
      "type" : 90,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "name",
      "package" : 0,
      "type" : 37,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 1,
      "type" : 566,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 1,
      "type" : 566,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 1,
      "type" : 566,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 1,
      "type" : 566,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 1,
      "type" : 566,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 1,
      "type" : 561,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 1,
      "type" : 561,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 1,
      "type" : 561,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 1,
      "type" : 561,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 1,
      "type" : 561,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 1,
      "type" : 561,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 1,
      "type" : 561,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 1,
      "type" : 561,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 1,
      "type" : 561,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 1,
      "type" : 561,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 1,
      "type" : 561,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 1,
      "type" : 561,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "reuse",
      "package" : 0,
      "type" : 561,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "safe",
      "package" : 0,
      "type" : 14,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "toReuse",
      "package" : 0,
      "type" : 14,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "memB",
      "package" : 0,
      "type" : 269,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "mem",
      "package" : 0,
      "type" : 269,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "size",
      "package" : 0,
      "type" : 117,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "memA",
      "package" : 0,
      "type" : 269,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "memSize",
      "package" : 0,
      "type" : 117,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "f",
      "package" : 0,
      "type" : 543,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "fn",
      "package" : 0,
      "type" : 339,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "blockDimX",
      "package" : 0,
      "type" : 22,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "gridDimY",
      "package" : 0,
      "type" : 22,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "gridDimZ",
      "package" : 0,
      "type" : 22,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "blockDimY",
      "package" : 0,
      "type" : 22,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "gridDimX",
      "package" : 0,
      "type" : 22,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "blockDimZ",
      "package" : 0,
      "type" : 22,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "args",
      "package" : 0,
      "type" : 348,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "c",
      "package" : 0,
      "type" : 529,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "NoStream",
      "package" : 10,
      "type" : 281,
      "exported" : true,
      "embedded" : false,
      "field" : false
    } ]
  },
  "go-version" : "1.14.3"
}