{
  "usage" : {
    "file" : "prog.go",
    "label1" : "delegate",
    "label2" : "ffi",
    "line" : "353",
    "module" : "github.com/cilium/ebpf",
    "pkg" : "github.com/cilium/ebpf",
    "project" : "kubernetes/kubernetes",
    "snippet" : "dataIn:      newPtr(unsafe.Pointer(&in[0])),",
    "version" : "v0.0.0-20191113100448-d9fb101ca1fb"
  },
  "cfg" : {
    "blocks" : [ {
      "update-vars" : [ ],
      "successors" : [ 2 ],
      "in-vars" : [ 2, 8, 3, 9, 1 ],
      "exit" : false,
      "out-vars" : [ 3, 9, 1, 2, 8 ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[entry]",
      "entry" : true,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ ],
      "in-vars" : [ ],
      "exit" : true,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[exit]",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 3, 4 ],
      "in-vars" : [ 8, 3, 9, 1, 2 ],
      "exit" : false,
      "out-vars" : [ 8, 3, 9, 1, 2 ],
      "decl-vars" : [ ],
      "line-start" : 321,
      "ast" : {
        "condition" : {
          "go-type" : 25,
          "kind" : "expression",
          "left" : {
            "coerced-to" : {
              "go-type" : 26,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 26,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "uint"
              }
            },
            "go-type" : 26,
            "kind" : "expression",
            "target" : {
              "go-type" : 4,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "repeat",
                "variable" : 3
              }
            },
            "type" : "cast"
          },
          "operator" : ">",
          "right" : {
            "go-type" : 26,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "4294967295"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 323,
      "code" : "if uint(repeat) > math.MaxUint32 {\n\treturn 0, nil, 0, fmt.Errorf(\"repeat is too high\")\n}",
      "entry" : false,
      "use-vars" : [ 3 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 322,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 6,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "0"
          }
        }, {
          "go-type" : 27,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Nil",
            "kind" : "ident",
            "value" : "nil"
          }
        }, {
          "go-type" : 7,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "0"
          }
        }, {
          "arguments" : [ {
            "go-type" : 14,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "repeat is too high"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 28,
            "kind" : "expression",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 3,
              "value" : "fmt"
            },
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "Errorf"
            }
          },
          "go-type" : 9,
          "kind" : "expression",
          "type" : "call"
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 322,
      "code" : "return 0, nil, 0, fmt.Errorf(\"repeat is too high\")",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 5, 6 ],
      "in-vars" : [ 2, 8, 3, 9, 1 ],
      "exit" : false,
      "out-vars" : [ 8, 3, 9, 1, 2 ],
      "decl-vars" : [ ],
      "line-start" : 325,
      "ast" : {
        "condition" : {
          "go-type" : 25,
          "kind" : "expression",
          "left" : {
            "arguments" : [ {
              "go-type" : 2,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "in",
                "variable" : 2
              }
            } ],
            "ellipsis" : false,
            "function" : {
              "go-type" : 33,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Builtin",
                "kind" : "ident",
                "value" : "len"
              }
            },
            "go-type" : 4,
            "kind" : "expression",
            "type" : "call"
          },
          "operator" : "==",
          "right" : {
            "go-type" : 4,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 327,
      "code" : "if len(in) == 0 {\n\treturn 0, nil, 0, fmt.Errorf(\"missing input\")\n}",
      "entry" : false,
      "use-vars" : [ 2 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 326,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 6,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "0"
          }
        }, {
          "go-type" : 27,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Nil",
            "kind" : "ident",
            "value" : "nil"
          }
        }, {
          "go-type" : 7,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "0"
          }
        }, {
          "arguments" : [ {
            "go-type" : 14,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "missing input"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 28,
            "kind" : "expression",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 3,
              "value" : "fmt"
            },
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "Errorf"
            }
          },
          "go-type" : 9,
          "kind" : "expression",
          "type" : "call"
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 326,
      "code" : "return 0, nil, 0, fmt.Errorf(\"missing input\")",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 7, 8 ],
      "in-vars" : [ 3, 9, 1, 2, 8 ],
      "exit" : false,
      "out-vars" : [ 2, 8, 3, 9, 1 ],
      "decl-vars" : [ ],
      "line-start" : 329,
      "ast" : {
        "condition" : {
          "go-type" : 25,
          "kind" : "expression",
          "left" : {
            "coerced-to" : {
              "go-type" : 26,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 26,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "uint"
              }
            },
            "go-type" : 26,
            "kind" : "expression",
            "target" : {
              "arguments" : [ {
                "go-type" : 2,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "in",
                  "variable" : 2
                }
              } ],
              "ellipsis" : false,
              "function" : {
                "go-type" : 33,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Builtin",
                  "kind" : "ident",
                  "value" : "len"
                }
              },
              "go-type" : 4,
              "kind" : "expression",
              "type" : "call"
            },
            "type" : "cast"
          },
          "operator" : ">",
          "right" : {
            "go-type" : 26,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "4294967295"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 331,
      "code" : "if uint(len(in)) > math.MaxUint32 {\n\treturn 0, nil, 0, fmt.Errorf(\"input is too long\")\n}",
      "entry" : false,
      "use-vars" : [ 2 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 330,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 6,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "0"
          }
        }, {
          "go-type" : 27,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Nil",
            "kind" : "ident",
            "value" : "nil"
          }
        }, {
          "go-type" : 7,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "0"
          }
        }, {
          "arguments" : [ {
            "go-type" : 14,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "input is too long"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 28,
            "kind" : "expression",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 3,
              "value" : "fmt"
            },
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "Errorf"
            }
          },
          "go-type" : 9,
          "kind" : "expression",
          "type" : "call"
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 330,
      "code" : "return 0, nil, 0, fmt.Errorf(\"input is too long\")",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 9, 10 ],
      "in-vars" : [ 2, 8, 3, 9, 1 ],
      "exit" : false,
      "out-vars" : [ 2, 3, 9, 1 ],
      "decl-vars" : [ ],
      "line-start" : 333,
      "ast" : {
        "condition" : {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "Result"
            },
            "go-type" : 17,
            "kind" : "expression",
            "target" : {
              "go-type" : 15,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "noProgTestRun",
                "variable" : 8
              }
            },
            "type" : "selector"
          },
          "go-type" : 19,
          "kind" : "expression",
          "type" : "call"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 335,
      "code" : "if noProgTestRun.Result() {\n\treturn 0, nil, 0, errNotSupported\n}",
      "entry" : false,
      "use-vars" : [ 8 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 9 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 334,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 6,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "0"
          }
        }, {
          "go-type" : 27,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Nil",
            "kind" : "ident",
            "value" : "nil"
          }
        }, {
          "go-type" : 7,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "0"
          }
        }, {
          "go-type" : 9,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "errNotSupported",
            "variable" : 9
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 334,
      "code" : "return 0, nil, 0, errNotSupported",
      "entry" : false,
      "use-vars" : [ 9 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 11 ],
      "in-vars" : [ 2, 3, 1 ],
      "exit" : false,
      "out-vars" : [ 10, 3, 1, 2 ],
      "decl-vars" : [ 10 ],
      "line-start" : 342,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "out"
          }
        } ],
        "right" : [ {
          "argument" : {
            "element" : {
              "go-type" : 3,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 3,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "byte"
              }
            },
            "go-type" : 2,
            "kind" : "type",
            "type" : "slice"
          },
          "go-type" : 2,
          "kind" : "expression",
          "rest" : [ {
            "go-type" : 4,
            "kind" : "expression",
            "left" : {
              "arguments" : [ {
                "go-type" : 2,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "in",
                  "variable" : 2
                }
              } ],
              "ellipsis" : false,
              "function" : {
                "go-type" : 33,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Builtin",
                  "kind" : "ident",
                  "value" : "len"
                }
              },
              "go-type" : 4,
              "kind" : "expression",
              "type" : "call"
            },
            "operator" : "+",
            "right" : {
              "go-type" : 4,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "258"
              }
            },
            "type" : "binary"
          } ],
          "type" : "make"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 342,
      "code" : "out := make([]byte, len(in)+outputPad)",
      "entry" : false,
      "use-vars" : [ 2 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 12 ],
      "in-vars" : [ 2, 10, 3, 1 ],
      "exit" : false,
      "out-vars" : [ 2, 10, 3, 12, 13 ],
      "decl-vars" : [ 13, 12 ],
      "line-start" : 344,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "fd"
          }
        }, {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "err"
          }
        } ],
        "right" : [ {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "value"
            },
            "go-type" : 37,
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "fd",
                "variable" : 11
              },
              "go-type" : 3,
              "kind" : "expression",
              "target" : {
                "go-type" : 0,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "p",
                  "variable" : 1
                }
              },
              "type" : "selector"
            },
            "type" : "selector"
          },
          "go-type" : 36,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 344,
      "code" : "fd, err := p.fd.value()",
      "entry" : false,
      "use-vars" : [ 1 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 13, 14 ],
      "in-vars" : [ 12, 13, 2, 10, 3 ],
      "exit" : false,
      "out-vars" : [ 12, 13, 2, 10, 3 ],
      "decl-vars" : [ ],
      "line-start" : 345,
      "ast" : {
        "condition" : {
          "go-type" : 25,
          "kind" : "expression",
          "left" : {
            "go-type" : 9,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "err",
              "variable" : 12
            }
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 27,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Nil",
              "kind" : "ident",
              "value" : "nil"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 347,
      "code" : "if err != nil {\n\treturn 0, nil, 0, err\n}",
      "entry" : false,
      "use-vars" : [ 12 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 12 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 346,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 6,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "0"
          }
        }, {
          "go-type" : 27,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Nil",
            "kind" : "ident",
            "value" : "nil"
          }
        }, {
          "go-type" : 7,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "0"
          }
        }, {
          "go-type" : 9,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "err",
            "variable" : 12
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 346,
      "code" : "return 0, nil, 0, err",
      "entry" : false,
      "use-vars" : [ 12 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 15 ],
      "in-vars" : [ 3, 13, 2, 10 ],
      "exit" : false,
      "out-vars" : [ 10, 20 ],
      "decl-vars" : [ 20 ],
      "line-start" : 349,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "attr"
          }
        } ],
        "right" : [ {
          "declared" : {
            "go-type" : 38,
            "kind" : "type",
            "type" : "identifier",
            "value" : {
              "go-type" : 38,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "bpfProgTestRunAttr"
            }
          },
          "go-type" : 38,
          "kind" : "literal",
          "type" : "composite",
          "values" : [ {
            "go-type" : -1,
            "key" : {
              "go-type" : -1,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "fd",
                "variable" : 14
              }
            },
            "kind" : "expression",
            "type" : "key-value",
            "value" : {
              "go-type" : 6,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "fd",
                "variable" : 13
              }
            }
          }, {
            "go-type" : -1,
            "key" : {
              "go-type" : -1,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "dataSizeIn",
                "variable" : 15
              }
            },
            "kind" : "expression",
            "type" : "key-value",
            "value" : {
              "coerced-to" : {
                "go-type" : 6,
                "kind" : "type",
                "type" : "identifier",
                "value" : {
                  "go-type" : 6,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "uint32"
                }
              },
              "go-type" : 6,
              "kind" : "expression",
              "target" : {
                "arguments" : [ {
                  "go-type" : 2,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "in",
                    "variable" : 2
                  }
                } ],
                "ellipsis" : false,
                "function" : {
                  "go-type" : 33,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Builtin",
                    "kind" : "ident",
                    "value" : "len"
                  }
                },
                "go-type" : 4,
                "kind" : "expression",
                "type" : "call"
              },
              "type" : "cast"
            }
          }, {
            "go-type" : -1,
            "key" : {
              "go-type" : -1,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "dataSizeOut",
                "variable" : 16
              }
            },
            "kind" : "expression",
            "type" : "key-value",
            "value" : {
              "coerced-to" : {
                "go-type" : 6,
                "kind" : "type",
                "type" : "identifier",
                "value" : {
                  "go-type" : 6,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "uint32"
                }
              },
              "go-type" : 6,
              "kind" : "expression",
              "target" : {
                "arguments" : [ {
                  "go-type" : 2,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "out",
                    "variable" : 10
                  }
                } ],
                "ellipsis" : false,
                "function" : {
                  "go-type" : 33,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Builtin",
                    "kind" : "ident",
                    "value" : "len"
                  }
                },
                "go-type" : 4,
                "kind" : "expression",
                "type" : "call"
              },
              "type" : "cast"
            }
          }, {
            "go-type" : -1,
            "key" : {
              "go-type" : -1,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "dataIn",
                "variable" : 17
              }
            },
            "kind" : "expression",
            "type" : "key-value",
            "value" : {
              "arguments" : [ {
                "coerced-to" : {
                  "go-type" : 42,
                  "kind" : "type",
                  "qualifier" : {
                    "ident-kind" : "PkgName",
                    "kind" : "ident",
                    "package" : 4,
                    "value" : "unsafe"
                  },
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 42,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "Pointer"
                  }
                },
                "go-type" : 42,
                "kind" : "expression",
                "target" : {
                  "go-type" : 46,
                  "kind" : "expression",
                  "operator" : "&",
                  "target" : {
                    "go-type" : 3,
                    "index" : {
                      "go-type" : 4,
                      "kind" : "constant",
                      "value" : {
                        "type" : "INT",
                        "value" : "0"
                      }
                    },
                    "kind" : "expression",
                    "target" : {
                      "go-type" : 2,
                      "kind" : "expression",
                      "type" : "identifier",
                      "value" : {
                        "ident-kind" : "Var",
                        "kind" : "ident",
                        "value" : "in",
                        "variable" : 2
                      }
                    },
                    "type" : "index"
                  },
                  "type" : "unary"
                },
                "type" : "cast"
              } ],
              "ellipsis" : false,
              "function" : {
                "go-type" : 43,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Func",
                  "kind" : "ident",
                  "value" : "newPtr"
                }
              },
              "go-type" : 40,
              "kind" : "expression",
              "type" : "call"
            }
          }, {
            "go-type" : -1,
            "key" : {
              "go-type" : -1,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "dataOut",
                "variable" : 18
              }
            },
            "kind" : "expression",
            "type" : "key-value",
            "value" : {
              "arguments" : [ {
                "coerced-to" : {
                  "go-type" : 42,
                  "kind" : "type",
                  "qualifier" : {
                    "ident-kind" : "PkgName",
                    "kind" : "ident",
                    "package" : 4,
                    "value" : "unsafe"
                  },
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 42,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "Pointer"
                  }
                },
                "go-type" : 42,
                "kind" : "expression",
                "target" : {
                  "go-type" : 46,
                  "kind" : "expression",
                  "operator" : "&",
                  "target" : {
                    "go-type" : 3,
                    "index" : {
                      "go-type" : 4,
                      "kind" : "constant",
                      "value" : {
                        "type" : "INT",
                        "value" : "0"
                      }
                    },
                    "kind" : "expression",
                    "target" : {
                      "go-type" : 2,
                      "kind" : "expression",
                      "type" : "identifier",
                      "value" : {
                        "ident-kind" : "Var",
                        "kind" : "ident",
                        "value" : "out",
                        "variable" : 10
                      }
                    },
                    "type" : "index"
                  },
                  "type" : "unary"
                },
                "type" : "cast"
              } ],
              "ellipsis" : false,
              "function" : {
                "go-type" : 43,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Func",
                  "kind" : "ident",
                  "value" : "newPtr"
                }
              },
              "go-type" : 40,
              "kind" : "expression",
              "type" : "call"
            }
          }, {
            "go-type" : -1,
            "key" : {
              "go-type" : -1,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "repeat",
                "variable" : 19
              }
            },
            "kind" : "expression",
            "type" : "key-value",
            "value" : {
              "coerced-to" : {
                "go-type" : 6,
                "kind" : "type",
                "type" : "identifier",
                "value" : {
                  "go-type" : 6,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "uint32"
                }
              },
              "go-type" : 6,
              "kind" : "expression",
              "target" : {
                "go-type" : 4,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "repeat",
                  "variable" : 3
                }
              },
              "type" : "cast"
            }
          } ]
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 356,
      "code" : "attr := bpfProgTestRunAttr{\n\tfd:          fd,\n\tdataSizeIn:  uint32(len(in)),\n\tdataSizeOut: uint32(len(out)),\n\tdataIn:      newPtr(unsafe.Pointer(&in[0])),\n\tdataOut:     newPtr(unsafe.Pointer(&out[0])),\n\trepeat:      uint32(repeat),\n}",
      "entry" : false,
      "use-vars" : [ 10, 3, 2, 13 ]
    }, {
      "update-vars" : [ 12 ],
      "successors" : [ 16 ],
      "in-vars" : [ 20, 10 ],
      "exit" : false,
      "out-vars" : [ 10, 20, 12 ],
      "decl-vars" : [ ],
      "line-start" : 358,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "_"
          }
        }, {
          "go-type" : 9,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "err",
            "variable" : 12
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 4,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "10"
            }
          }, {
            "coerced-to" : {
              "go-type" : 42,
              "kind" : "type",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 4,
                "value" : "unsafe"
              },
              "type" : "identifier",
              "value" : {
                "go-type" : 42,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "Pointer"
              }
            },
            "go-type" : 42,
            "kind" : "expression",
            "target" : {
              "go-type" : 51,
              "kind" : "expression",
              "operator" : "&",
              "target" : {
                "go-type" : 38,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "attr",
                  "variable" : 20
                }
              },
              "type" : "unary"
            },
            "type" : "cast"
          }, {
            "go-type" : 48,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "40"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 49,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "bpfCall"
            }
          },
          "go-type" : 47,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 12 ],
      "line-end" : 358,
      "code" : "_, err = bpfCall(_ProgTestRun, unsafe.Pointer(&attr), unsafe.Sizeof(attr))",
      "entry" : false,
      "use-vars" : [ 20 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 17, 18 ],
      "in-vars" : [ 10, 20, 12 ],
      "exit" : false,
      "out-vars" : [ 10, 20, 12 ],
      "decl-vars" : [ ],
      "line-start" : 359,
      "ast" : {
        "condition" : {
          "go-type" : 25,
          "kind" : "expression",
          "left" : {
            "go-type" : 9,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "err",
              "variable" : 12
            }
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 27,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Nil",
              "kind" : "ident",
              "value" : "nil"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 361,
      "code" : "if err != nil {\n\treturn 0, nil, 0, errors.Wrap(err, \"can't run test\")\n}",
      "entry" : false,
      "use-vars" : [ 12 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 12 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 360,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 6,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "0"
          }
        }, {
          "go-type" : 27,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Nil",
            "kind" : "ident",
            "value" : "nil"
          }
        }, {
          "go-type" : 7,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "0"
          }
        }, {
          "arguments" : [ {
            "go-type" : 9,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "err",
              "variable" : 12
            }
          }, {
            "go-type" : 14,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "can't run test"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 52,
            "kind" : "expression",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 5,
              "value" : "errors"
            },
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "Wrap"
            }
          },
          "go-type" : 9,
          "kind" : "expression",
          "type" : "call"
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 360,
      "code" : "return 0, nil, 0, errors.Wrap(err, \"can't run test\")",
      "entry" : false,
      "use-vars" : [ 12 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 19, 20 ],
      "in-vars" : [ 10, 20 ],
      "exit" : false,
      "out-vars" : [ 10, 20 ],
      "decl-vars" : [ ],
      "line-start" : 363,
      "ast" : {
        "condition" : {
          "go-type" : 25,
          "kind" : "expression",
          "left" : {
            "coerced-to" : {
              "go-type" : 4,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 4,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "int"
              }
            },
            "go-type" : 4,
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "dataSizeOut",
                "variable" : 16
              },
              "go-type" : 6,
              "kind" : "expression",
              "target" : {
                "go-type" : 38,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "attr",
                  "variable" : 20
                }
              },
              "type" : "selector"
            },
            "type" : "cast"
          },
          "operator" : ">",
          "right" : {
            "arguments" : [ {
              "go-type" : 2,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "out",
                "variable" : 10
              }
            } ],
            "ellipsis" : false,
            "function" : {
              "go-type" : 33,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Builtin",
                "kind" : "ident",
                "value" : "cap"
              }
            },
            "go-type" : 4,
            "kind" : "expression",
            "type" : "call"
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 367,
      "code" : "if int(attr.dataSizeOut) > cap(out) {\n\n\tpanic(\"kernel wrote past end of output buffer\")\n}",
      "entry" : false,
      "use-vars" : [ 20, 10 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 20 ],
      "in-vars" : [ 10, 20 ],
      "exit" : false,
      "out-vars" : [ 10, 20 ],
      "decl-vars" : [ ],
      "line-start" : 366,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 14,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "kernel wrote past end of output buffer"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 54,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Builtin",
              "kind" : "ident",
              "value" : "panic"
            }
          },
          "go-type" : 12,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 366,
      "code" : "panic(\"kernel wrote past end of output buffer\")",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ 10 ],
      "successors" : [ 21 ],
      "in-vars" : [ 10, 20 ],
      "exit" : false,
      "out-vars" : [ 10, 20 ],
      "decl-vars" : [ ],
      "line-start" : 368,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 2,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "out",
            "variable" : 10
          }
        } ],
        "right" : [ {
          "go-type" : 2,
          "type" : "slice",
          "three" : false,
          "high" : {
            "coerced-to" : {
              "go-type" : 4,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 4,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "int"
              }
            },
            "go-type" : 4,
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "dataSizeOut",
                "variable" : 16
              },
              "go-type" : 6,
              "kind" : "expression",
              "target" : {
                "go-type" : 38,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "attr",
                  "variable" : 20
                }
              },
              "type" : "selector"
            },
            "type" : "cast"
          },
          "max" : null,
          "kind" : "expression",
          "low" : null,
          "target" : {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "out",
              "variable" : 10
            }
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 10 ],
      "line-end" : 368,
      "code" : "out = out[:int(attr.dataSizeOut)]",
      "entry" : false,
      "use-vars" : [ 20, 10 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 22 ],
      "in-vars" : [ 10, 20 ],
      "exit" : false,
      "out-vars" : [ 10, 20, 22 ],
      "decl-vars" : [ 22 ],
      "line-start" : 370,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "total"
          }
        } ],
        "right" : [ {
          "go-type" : 7,
          "kind" : "expression",
          "left" : {
            "coerced-to" : {
              "go-type" : 7,
              "kind" : "type",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 1,
                "value" : "time"
              },
              "type" : "identifier",
              "value" : {
                "go-type" : 7,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "Duration"
              }
            },
            "go-type" : 7,
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "duration",
                "variable" : 21
              },
              "go-type" : 6,
              "kind" : "expression",
              "target" : {
                "go-type" : 38,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "attr",
                  "variable" : 20
                }
              },
              "type" : "selector"
            },
            "type" : "cast"
          },
          "operator" : "*",
          "right" : {
            "go-type" : 7,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "1"
            }
          },
          "type" : "binary"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 370,
      "code" : "total := time.Duration(attr.duration) * time.Nanosecond",
      "entry" : false,
      "use-vars" : [ 20 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 10, 20, 22 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 371,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "retval",
            "variable" : 23
          },
          "go-type" : 6,
          "kind" : "expression",
          "target" : {
            "go-type" : 38,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "attr",
              "variable" : 20
            }
          },
          "type" : "selector"
        }, {
          "go-type" : 2,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "out",
            "variable" : 10
          }
        }, {
          "go-type" : 7,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "total",
            "variable" : 22
          }
        }, {
          "go-type" : 27,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Nil",
            "kind" : "ident",
            "value" : "nil"
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 371,
      "code" : "return attr.retval, out, total, nil",
      "entry" : false,
      "use-vars" : [ 20, 10, 22 ]
    } ],
    "code" : "func (p *Program) testRun(in []byte, repeat int) (uint32, []byte, time.Duration, error) {\n\tif uint(repeat) > math.MaxUint32 {\n\t\treturn 0, nil, 0, fmt.Errorf(\"repeat is too high\")\n\t}\n\n\tif len(in) == 0 {\n\t\treturn 0, nil, 0, fmt.Errorf(\"missing input\")\n\t}\n\n\tif uint(len(in)) > math.MaxUint32 {\n\t\treturn 0, nil, 0, fmt.Errorf(\"input is too long\")\n\t}\n\n\tif noProgTestRun.Result() {\n\t\treturn 0, nil, 0, errNotSupported\n\t}\n\n\tout := make([]byte, len(in)+outputPad)\n\n\tfd, err := p.fd.value()\n\tif err != nil {\n\t\treturn 0, nil, 0, err\n\t}\n\n\tattr := bpfProgTestRunAttr{\n\t\tfd:          fd,\n\t\tdataSizeIn:  uint32(len(in)),\n\t\tdataSizeOut: uint32(len(out)),\n\t\tdataIn:      newPtr(unsafe.Pointer(&in[0])),\n\t\tdataOut:     newPtr(unsafe.Pointer(&out[0])),\n\t\trepeat:      uint32(repeat),\n\t}\n\n\t_, err = bpfCall(_ProgTestRun, unsafe.Pointer(&attr), unsafe.Sizeof(attr))\n\tif err != nil {\n\t\treturn 0, nil, 0, errors.Wrap(err, \"can't run test\")\n\t}\n\n\tif int(attr.dataSizeOut) > cap(out) {\n\n\t\tpanic(\"kernel wrote past end of output buffer\")\n\t}\n\tout = out[:int(attr.dataSizeOut)]\n\n\ttotal := time.Duration(attr.duration) * time.Nanosecond\n\treturn attr.retval, out, total, nil\n}",
    "defines" : [ 0 ],
    "functions" : [ {
      "name" : "testRun",
      "package" : 0,
      "type" : 0,
      "exported" : false
    }, {
      "name" : "Errorf",
      "package" : 3,
      "type" : 28,
      "exported" : true
    }, {
      "name" : "Result",
      "package" : 0,
      "type" : 17,
      "exported" : true
    }, {
      "name" : "value",
      "package" : 0,
      "type" : 37,
      "exported" : false
    }, {
      "name" : "newPtr",
      "package" : 0,
      "type" : 43,
      "exported" : false
    }, {
      "name" : "bpfCall",
      "package" : 0,
      "type" : 49,
      "exported" : false
    }, {
      "name" : "Wrap",
      "package" : 5,
      "type" : 52,
      "exported" : true
    } ],
    "line-end" : 372,
    "line-start" : 320,
    "names" : [ "testRun" ],
    "package" : 0,
    "packages" : [ {
      "name" : "ebpf",
      "path" : "github.com/cilium/ebpf"
    }, {
      "name" : "time",
      "path" : "time"
    }, {
      "name" : "sync",
      "path" : "sync"
    }, {
      "name" : "fmt",
      "path" : "fmt"
    }, {
      "name" : "unsafe",
      "path" : "unsafe"
    }, {
      "name" : "errors",
      "path" : "github.com/pkg/errors"
    } ],
    "params" : [ 2, 3 ],
    "receivers" : [ 1 ],
    "results" : [ 4, 5, 6, 7 ],
    "type" : "function",
    "types" : [ {
      "name" : "func(in []byte, repeat int) (uint32, []byte, time.Duration, error)",
      "params" : 1,
      "recv" : 1,
      "results" : 5,
      "type" : "Signature",
      "underlying" : 0,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "in",
        "type" : 2
      }, {
        "name" : "repeat",
        "type" : 4
      } ],
      "name" : "(in []byte, repeat int)",
      "type" : "Tuple",
      "underlying" : 1
    }, {
      "elem" : 3,
      "name" : "[]byte",
      "type" : "Slice",
      "underlying" : 2
    }, {
      "name" : "byte",
      "type" : "Basic",
      "underlying" : 3
    }, {
      "name" : "int",
      "type" : "Basic",
      "underlying" : 4
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 6
      }, {
        "name" : "",
        "type" : 2
      }, {
        "name" : "",
        "type" : 7
      }, {
        "name" : "",
        "type" : 9
      } ],
      "name" : "(uint32, []byte, time.Duration, error)",
      "type" : "Tuple",
      "underlying" : 5
    }, {
      "name" : "uint32",
      "type" : "Basic",
      "underlying" : 6
    }, {
      "local-name" : "Duration",
      "name" : "time.Duration",
      "package" : 1,
      "type" : "Named",
      "underlying" : 8
    }, {
      "name" : "int64",
      "type" : "Basic",
      "underlying" : 8
    }, {
      "local-name" : "error",
      "name" : "error",
      "package" : -1,
      "type" : "Named",
      "underlying" : 10
    }, {
      "methods" : [ {
        "name" : "Error",
        "type" : 11
      } ],
      "name" : "interface{Error() string}",
      "type" : "Interface",
      "underlying" : 10
    }, {
      "name" : "func() string",
      "params" : 12,
      "recv" : 0,
      "results" : 13,
      "type" : "Signature",
      "underlying" : 11,
      "variadic" : false
    }, {
      "fields" : [ ],
      "name" : "()",
      "type" : "Tuple",
      "underlying" : 12
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 14
      } ],
      "name" : "(string)",
      "type" : "Tuple",
      "underlying" : 13
    }, {
      "name" : "string",
      "type" : "Basic",
      "underlying" : 14
    }, {
      "local-name" : "featureTest",
      "name" : "github.com/cilium/ebpf.featureTest",
      "package" : 0,
      "type" : "Named",
      "underlying" : 16
    }, {
      "fields" : [ {
        "name" : "Fn",
        "type" : 17
      }, {
        "name" : "once",
        "type" : 20
      }, {
        "name" : "result",
        "type" : 19
      } ],
      "name" : "struct{Fn func() bool; once sync.Once; result bool}",
      "type" : "Struct",
      "underlying" : 16
    }, {
      "name" : "func() bool",
      "params" : 12,
      "recv" : -1,
      "results" : 18,
      "type" : "Signature",
      "underlying" : 17,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 19
      } ],
      "name" : "(bool)",
      "type" : "Tuple",
      "underlying" : 18
    }, {
      "name" : "bool",
      "type" : "Basic",
      "underlying" : 19
    }, {
      "local-name" : "Once",
      "name" : "sync.Once",
      "package" : 2,
      "type" : "Named",
      "underlying" : 21
    }, {
      "fields" : [ {
        "name" : "done",
        "type" : 6
      }, {
        "name" : "m",
        "type" : 22
      } ],
      "name" : "struct{done uint32; m sync.Mutex}",
      "type" : "Struct",
      "underlying" : 21
    }, {
      "local-name" : "Mutex",
      "name" : "sync.Mutex",
      "package" : 2,
      "type" : "Named",
      "underlying" : 23
    }, {
      "fields" : [ {
        "name" : "state",
        "type" : 24
      }, {
        "name" : "sema",
        "type" : 6
      } ],
      "name" : "struct{state int32; sema uint32}",
      "type" : "Struct",
      "underlying" : 23
    }, {
      "name" : "int32",
      "type" : "Basic",
      "underlying" : 24
    }, {
      "name" : "untyped bool",
      "type" : "Basic",
      "underlying" : 25
    }, {
      "name" : "uint",
      "type" : "Basic",
      "underlying" : 26
    }, {
      "name" : "untyped nil",
      "type" : "Basic",
      "underlying" : 27
    }, {
      "name" : "func(format string, a ...interface{}) error",
      "params" : 29,
      "recv" : -1,
      "results" : 32,
      "type" : "Signature",
      "underlying" : 28,
      "variadic" : true
    }, {
      "fields" : [ {
        "name" : "format",
        "type" : 14
      }, {
        "name" : "a",
        "type" : 30
      } ],
      "name" : "(format string, a []interface{})",
      "type" : "Tuple",
      "underlying" : 29
    }, {
      "elem" : 31,
      "name" : "[]interface{}",
      "type" : "Slice",
      "underlying" : 30
    }, {
      "methods" : [ ],
      "name" : "interface{}",
      "type" : "Interface",
      "underlying" : 31
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 9
      } ],
      "name" : "(error)",
      "type" : "Tuple",
      "underlying" : 32
    }, {
      "name" : "func([]byte) int",
      "params" : 34,
      "recv" : -1,
      "results" : 35,
      "type" : "Signature",
      "underlying" : 33,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 2
      } ],
      "name" : "([]byte)",
      "type" : "Tuple",
      "underlying" : 34
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 4
      } ],
      "name" : "(int)",
      "type" : "Tuple",
      "underlying" : 35
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 6
      }, {
        "name" : "",
        "type" : 9
      } ],
      "name" : "(uint32, error)",
      "type" : "Tuple",
      "underlying" : 36
    }, {
      "name" : "func() (uint32, error)",
      "params" : 12,
      "recv" : -1,
      "results" : 36,
      "type" : "Signature",
      "underlying" : 37,
      "variadic" : false
    }, {
      "local-name" : "bpfProgTestRunAttr",
      "name" : "github.com/cilium/ebpf.bpfProgTestRunAttr",
      "package" : 0,
      "type" : "Named",
      "underlying" : 39
    }, {
      "fields" : [ {
        "name" : "fd",
        "type" : 6
      }, {
        "name" : "retval",
        "type" : 6
      }, {
        "name" : "dataSizeIn",
        "type" : 6
      }, {
        "name" : "dataSizeOut",
        "type" : 6
      }, {
        "name" : "dataIn",
        "type" : 40
      }, {
        "name" : "dataOut",
        "type" : 40
      }, {
        "name" : "repeat",
        "type" : 6
      }, {
        "name" : "duration",
        "type" : 6
      } ],
      "name" : "struct{fd uint32; retval uint32; dataSizeIn uint32; dataSizeOut uint32; dataIn github.com/cilium/ebpf.syscallPtr; dataOut github.com/cilium/ebpf.syscallPtr; repeat uint32; duration uint32}",
      "type" : "Struct",
      "underlying" : 39
    }, {
      "local-name" : "syscallPtr",
      "name" : "github.com/cilium/ebpf.syscallPtr",
      "package" : 0,
      "type" : "Named",
      "underlying" : 41
    }, {
      "fields" : [ {
        "name" : "ptr",
        "type" : 42
      } ],
      "name" : "struct{ptr unsafe.Pointer}",
      "type" : "Struct",
      "underlying" : 41
    }, {
      "local-name" : "Pointer",
      "name" : "unsafe.Pointer",
      "package" : 4,
      "type" : "Basic",
      "underlying" : 42
    }, {
      "name" : "func(ptr unsafe.Pointer) github.com/cilium/ebpf.syscallPtr",
      "params" : 44,
      "recv" : -1,
      "results" : 45,
      "type" : "Signature",
      "underlying" : 43,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "ptr",
        "type" : 42
      } ],
      "name" : "(ptr unsafe.Pointer)",
      "type" : "Tuple",
      "underlying" : 44
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 40
      } ],
      "name" : "(github.com/cilium/ebpf.syscallPtr)",
      "type" : "Tuple",
      "underlying" : 45
    }, {
      "elem" : 3,
      "name" : "*byte",
      "type" : "Pointer",
      "underlying" : 46
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 48
      }, {
        "name" : "",
        "type" : 9
      } ],
      "name" : "(uintptr, error)",
      "type" : "Tuple",
      "underlying" : 47
    }, {
      "name" : "uintptr",
      "type" : "Basic",
      "underlying" : 48
    }, {
      "name" : "func(cmd int, attr unsafe.Pointer, size uintptr) (uintptr, error)",
      "params" : 50,
      "recv" : -1,
      "results" : 47,
      "type" : "Signature",
      "underlying" : 49,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "cmd",
        "type" : 4
      }, {
        "name" : "attr",
        "type" : 42
      }, {
        "name" : "size",
        "type" : 48
      } ],
      "name" : "(cmd int, attr unsafe.Pointer, size uintptr)",
      "type" : "Tuple",
      "underlying" : 50
    }, {
      "elem" : 38,
      "name" : "*github.com/cilium/ebpf.bpfProgTestRunAttr",
      "type" : "Pointer",
      "underlying" : 51
    }, {
      "name" : "func(err error, message string) error",
      "params" : 53,
      "recv" : -1,
      "results" : 32,
      "type" : "Signature",
      "underlying" : 52,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "err",
        "type" : 9
      }, {
        "name" : "message",
        "type" : 14
      } ],
      "name" : "(err error, message string)",
      "type" : "Tuple",
      "underlying" : 53
    }, {
      "name" : "func(interface{})",
      "params" : 55,
      "recv" : -1,
      "results" : 12,
      "type" : "Signature",
      "underlying" : 54,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 31
      } ],
      "name" : "(interface{})",
      "type" : "Tuple",
      "underlying" : 55
    } ],
    "variables" : [ {
      "name" : "",
      "package" : -1,
      "type" : 9,
      "exported" : false
    }, {
      "name" : "p",
      "package" : 0,
      "type" : 0,
      "exported" : false
    }, {
      "name" : "in",
      "package" : 0,
      "type" : 2,
      "exported" : false
    }, {
      "name" : "repeat",
      "package" : 0,
      "type" : 4,
      "exported" : false
    }, {
      "name" : "[res0]",
      "package" : 0,
      "type" : 6,
      "exported" : false
    }, {
      "name" : "[res1]",
      "package" : 0,
      "type" : 2,
      "exported" : false
    }, {
      "name" : "[res2]",
      "package" : 0,
      "type" : 7,
      "exported" : false
    }, {
      "name" : "[res3]",
      "package" : 0,
      "type" : 9,
      "exported" : false
    }, {
      "name" : "noProgTestRun",
      "package" : 0,
      "type" : 15,
      "exported" : false
    }, {
      "name" : "errNotSupported",
      "package" : 0,
      "type" : 9,
      "exported" : false
    }, {
      "name" : "out",
      "package" : 0,
      "type" : 2,
      "exported" : false
    }, {
      "name" : "fd",
      "package" : 0,
      "type" : 3,
      "exported" : false
    }, {
      "name" : "err",
      "package" : 0,
      "type" : 9,
      "exported" : false
    }, {
      "name" : "fd",
      "package" : 0,
      "type" : 6,
      "exported" : false
    }, {
      "name" : "fd",
      "package" : 0,
      "type" : 6,
      "exported" : false
    }, {
      "name" : "dataSizeIn",
      "package" : 0,
      "type" : 6,
      "exported" : false
    }, {
      "name" : "dataSizeOut",
      "package" : 0,
      "type" : 6,
      "exported" : false
    }, {
      "name" : "dataIn",
      "package" : 0,
      "type" : 40,
      "exported" : false
    }, {
      "name" : "dataOut",
      "package" : 0,
      "type" : 40,
      "exported" : false
    }, {
      "name" : "repeat",
      "package" : 0,
      "type" : 6,
      "exported" : false
    }, {
      "name" : "attr",
      "package" : 0,
      "type" : 38,
      "exported" : false
    }, {
      "name" : "duration",
      "package" : 0,
      "type" : 6,
      "exported" : false
    }, {
      "name" : "total",
      "package" : 0,
      "type" : 7,
      "exported" : false
    }, {
      "name" : "retval",
      "package" : 0,
      "type" : 6,
      "exported" : false
    } ]
  },
  "go-version" : "1.14.3"
}