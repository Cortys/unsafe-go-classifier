{
  "usage" : {
    "file" : "unfold_map.generated.go",
    "label1" : "cast-pointer",
    "label2" : "serialization",
    "line" : "2333",
    "module" : "github.com/elastic/go-structform",
    "pkg" : "github.com/elastic/go-structform/gotype",
    "project" : "elastic/beats",
    "snippet" : "ptr := unsafe.Pointer(to)",
    "version" : "v0.0.6"
  },
  "cfg" : {
    "blocks" : [ {
      "update-vars" : [ ],
      "successors" : [ 2 ],
      "in-vars" : [ 38, 40 ],
      "exit" : false,
      "out-vars" : [ 38, 40 ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[entry]",
      "entry" : true,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ ],
      "in-vars" : [ ],
      "exit" : true,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[exit]",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 3, 10, 18, 26, 34, 42, 50, 58, 66, 74, 82, 90, 98, 106, 114, 122, 130, 137 ],
      "in-vars" : [ 38, 40 ],
      "exit" : false,
      "out-vars" : [ 38 ],
      "decl-vars" : [ ],
      "line-start" : 2184,
      "ast" : {
        "condition" : {
          "go-type" : 100,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "bt",
            "variable" : 40
          }
        },
        "kind" : "statement",
        "type" : "switch"
      },
      "assign-vars" : [ ],
      "line-end" : 2339,
      "code" : "switch bt {\n\ncase structform.AnyType:\n\tidx := len(ctx.valueBuffer.mapAny)\n\tctx.valueBuffer.mapAny = append(ctx.valueBuffer.mapAny, nil)\n\tto := &ctx.valueBuffer.mapAny[idx]\n\tptr := unsafe.Pointer(to)\n\tunfolder := newUnfolderMapIfc()\n\treturn to, ptr, unfolder\n\ncase structform.BoolType:\n\tidx := len(ctx.valueBuffer.mapPrimitive)\n\tctx.valueBuffer.mapPrimitive = append(ctx.valueBuffer.mapPrimitive, nil)\n\tmapPtr := &ctx.valueBuffer.mapPrimitive[idx]\n\tptr := unsafe.Pointer(mapPtr)\n\tto := (*map[string]bool)(ptr)\n\tunfolder := newUnfolderMapBool()\n\treturn to, ptr, unfolder\n\ncase structform.ByteType:\n\tidx := len(ctx.valueBuffer.mapPrimitive)\n\tctx.valueBuffer.mapPrimitive = append(ctx.valueBuffer.mapPrimitive, nil)\n\tmapPtr := &ctx.valueBuffer.mapPrimitive[idx]\n\tptr := unsafe.Pointer(mapPtr)\n\tto := (*map[string]uint8)(ptr)\n\tunfolder := newUnfolderMapUint8()\n\treturn to, ptr, unfolder\n\ncase structform.Float32Type:\n\tidx := len(ctx.valueBuffer.mapPrimitive)\n\tctx.valueBuffer.mapPrimitive = append(ctx.valueBuffer.mapPrimitive, nil)\n\tmapPtr := &ctx.valueBuffer.mapPrimitive[idx]\n\tptr := unsafe.Pointer(mapPtr)\n\tto := (*map[string]float32)(ptr)\n\tunfolder := newUnfolderMapFloat32()\n\treturn to, ptr, unfolder\n\ncase structform.Float64Type:\n\tidx := len(ctx.valueBuffer.mapPrimitive)\n\tctx.valueBuffer.mapPrimitive = append(ctx.valueBuffer.mapPrimitive, nil)\n\tmapPtr := &ctx.valueBuffer.mapPrimitive[idx]\n\tptr := unsafe.Pointer(mapPtr)\n\tto := (*map[string]float64)(ptr)\n\tunfolder := newUnfolderMapFloat64()\n\treturn to, ptr, unfolder\n\ncase structform.Int16Type:\n\tidx := len(ctx.valueBuffer.mapPrimitive)\n\tctx.valueBuffer.mapPrimitive = append(ctx.valueBuffer.mapPrimitive, nil)\n\tmapPtr := &ctx.valueBuffer.mapPrimitive[idx]\n\tptr := unsafe.Pointer(mapPtr)\n\tto := (*map[string]int16)(ptr)\n\tunfolder := newUnfolderMapInt16()\n\treturn to, ptr, unfolder\n\ncase structform.Int32Type:\n\tidx := len(ctx.valueBuffer.mapPrimitive)\n\tctx.valueBuffer.mapPrimitive = append(ctx.valueBuffer.mapPrimitive, nil)\n\tmapPtr := &ctx.valueBuffer.mapPrimitive[idx]\n\tptr := unsafe.Pointer(mapPtr)\n\tto := (*map[string]int32)(ptr)\n\tunfolder := newUnfolderMapInt32()\n\treturn to, ptr, unfolder\n\ncase structform.Int64Type:\n\tidx := len(ctx.valueBuffer.mapPrimitive)\n\tctx.valueBuffer.mapPrimitive = append(ctx.valueBuffer.mapPrimitive, nil)\n\tmapPtr := &ctx.valueBuffer.mapPrimitive[idx]\n\tptr := unsafe.Pointer(mapPtr)\n\tto := (*map[string]int64)(ptr)\n\tunfolder := newUnfolderMapInt64()\n\treturn to, ptr, unfolder\n\ncase structform.Int8Type:\n\tidx := len(ctx.valueBuffer.mapPrimitive)\n\tctx.valueBuffer.mapPrimitive = append(ctx.valueBuffer.mapPrimitive, nil)\n\tmapPtr := &ctx.valueBuffer.mapPrimitive[idx]\n\tptr := unsafe.Pointer(mapPtr)\n\tto := (*map[string]int8)(ptr)\n\tunfolder := newUnfolderMapInt8()\n\treturn to, ptr, unfolder\n\ncase structform.IntType:\n\tidx := len(ctx.valueBuffer.mapPrimitive)\n\tctx.valueBuffer.mapPrimitive = append(ctx.valueBuffer.mapPrimitive, nil)\n\tmapPtr := &ctx.valueBuffer.mapPrimitive[idx]\n\tptr := unsafe.Pointer(mapPtr)\n\tto := (*map[string]int)(ptr)\n\tunfolder := newUnfolderMapInt()\n\treturn to, ptr, unfolder\n\ncase structform.StringType:\n\tidx := len(ctx.valueBuffer.mapPrimitive)\n\tctx.valueBuffer.mapPrimitive = append(ctx.valueBuffer.mapPrimitive, nil)\n\tmapPtr := &ctx.valueBuffer.mapPrimitive[idx]\n\tptr := unsafe.Pointer(mapPtr)\n\tto := (*map[string]string)(ptr)\n\tunfolder := newUnfolderMapString()\n\treturn to, ptr, unfolder\n\ncase structform.Uint16Type:\n\tidx := len(ctx.valueBuffer.mapPrimitive)\n\tctx.valueBuffer.mapPrimitive = append(ctx.valueBuffer.mapPrimitive, nil)\n\tmapPtr := &ctx.valueBuffer.mapPrimitive[idx]\n\tptr := unsafe.Pointer(mapPtr)\n\tto := (*map[string]uint16)(ptr)\n\tunfolder := newUnfolderMapUint16()\n\treturn to, ptr, unfolder\n\ncase structform.Uint32Type:\n\tidx := len(ctx.valueBuffer.mapPrimitive)\n\tctx.valueBuffer.mapPrimitive = append(ctx.valueBuffer.mapPrimitive, nil)\n\tmapPtr := &ctx.valueBuffer.mapPrimitive[idx]\n\tptr := unsafe.Pointer(mapPtr)\n\tto := (*map[string]uint32)(ptr)\n\tunfolder := newUnfolderMapUint32()\n\treturn to, ptr, unfolder\n\ncase structform.Uint64Type:\n\tidx := len(ctx.valueBuffer.mapPrimitive)\n\tctx.valueBuffer.mapPrimitive = append(ctx.valueBuffer.mapPrimitive, nil)\n\tmapPtr := &ctx.valueBuffer.mapPrimitive[idx]\n\tptr := unsafe.Pointer(mapPtr)\n\tto := (*map[string]uint64)(ptr)\n\tunfolder := newUnfolderMapUint64()\n\treturn to, ptr, unfolder\n\ncase structform.Uint8Type:\n\tidx := len(ctx.valueBuffer.mapPrimitive)\n\tctx.valueBuffer.mapPrimitive = append(ctx.valueBuffer.mapPrimitive, nil)\n\tmapPtr := &ctx.valueBuffer.mapPrimitive[idx]\n\tptr := unsafe.Pointer(mapPtr)\n\tto := (*map[string]uint8)(ptr)\n\tunfolder := newUnfolderMapUint8()\n\treturn to, ptr, unfolder\n\ncase structform.UintType:\n\tidx := len(ctx.valueBuffer.mapPrimitive)\n\tctx.valueBuffer.mapPrimitive = append(ctx.valueBuffer.mapPrimitive, nil)\n\tmapPtr := &ctx.valueBuffer.mapPrimitive[idx]\n\tptr := unsafe.Pointer(mapPtr)\n\tto := (*map[string]uint)(ptr)\n\tunfolder := newUnfolderMapUint()\n\treturn to, ptr, unfolder\n\ncase structform.ZeroType:\n\tidx := len(ctx.valueBuffer.mapAny)\n\tctx.valueBuffer.mapAny = append(ctx.valueBuffer.mapAny, nil)\n\tto := &ctx.valueBuffer.mapAny[idx]\n\tptr := unsafe.Pointer(to)\n\tunfolder := newUnfolderMapIfc()\n\treturn to, ptr, unfolder\n\ndefault:\n\tpanic(\"invalid type code\")\n}",
      "entry" : false,
      "use-vars" : [ 40 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 4 ],
      "in-vars" : [ 38 ],
      "exit" : false,
      "out-vars" : [ 38 ],
      "decl-vars" : [ ],
      "line-start" : 2186,
      "ast" : {
        "expressions" : [ {
          "go-type" : 100,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "0"
          }
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 2192,
      "code" : "case structform.AnyType:\n\tidx := len(ctx.valueBuffer.mapAny)\n\tctx.valueBuffer.mapAny = append(ctx.valueBuffer.mapAny, nil)\n\tto := &ctx.valueBuffer.mapAny[idx]\n\tptr := unsafe.Pointer(to)\n\tunfolder := newUnfolderMapIfc()\n\treturn to, ptr, unfolder",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 5 ],
      "in-vars" : [ 38 ],
      "exit" : false,
      "out-vars" : [ 38, 46 ],
      "decl-vars" : [ 46 ],
      "line-start" : 2187,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "idx"
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "mapAny",
              "variable" : 45
            },
            "go-type" : 173,
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "valueBuffer",
                "variable" : 44
              },
              "go-type" : 168,
              "kind" : "expression",
              "target" : {
                "go-type" : 2,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "ctx",
                  "variable" : 38
                }
              },
              "type" : "selector"
            },
            "type" : "selector"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 181,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Builtin",
              "kind" : "ident",
              "value" : "len"
            }
          },
          "go-type" : 38,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 2187,
      "code" : "idx := len(ctx.valueBuffer.mapAny)",
      "entry" : false,
      "use-vars" : [ 38 ]
    }, {
      "update-vars" : [ 38 ],
      "successors" : [ 6 ],
      "in-vars" : [ 38, 46 ],
      "exit" : false,
      "out-vars" : [ 38, 46 ],
      "decl-vars" : [ ],
      "line-start" : 2188,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "mapAny",
            "variable" : 45
          },
          "go-type" : 173,
          "kind" : "expression",
          "target" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "valueBuffer",
              "variable" : 44
            },
            "go-type" : 168,
            "kind" : "expression",
            "target" : {
              "go-type" : 2,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "ctx",
                "variable" : 38
              }
            },
            "type" : "selector"
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "arguments" : [ {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "mapAny",
              "variable" : 45
            },
            "go-type" : 173,
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "valueBuffer",
                "variable" : 44
              },
              "go-type" : 168,
              "kind" : "expression",
              "target" : {
                "go-type" : 2,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "ctx",
                  "variable" : 38
                }
              },
              "type" : "selector"
            },
            "type" : "selector"
          }, {
            "go-type" : 185,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Nil",
              "kind" : "ident",
              "value" : "nil"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 183,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Builtin",
              "kind" : "ident",
              "value" : "append"
            }
          },
          "go-type" : 173,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 2188,
      "code" : "ctx.valueBuffer.mapAny = append(ctx.valueBuffer.mapAny, nil)",
      "entry" : false,
      "use-vars" : [ 38 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 7 ],
      "in-vars" : [ 38, 46 ],
      "exit" : false,
      "out-vars" : [ 47 ],
      "decl-vars" : [ 47 ],
      "line-start" : 2189,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "to"
          }
        } ],
        "right" : [ {
          "go-type" : 186,
          "kind" : "expression",
          "operator" : "&",
          "target" : {
            "go-type" : 174,
            "index" : {
              "go-type" : 38,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "idx",
                "variable" : 46
              }
            },
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "mapAny",
                "variable" : 45
              },
              "go-type" : 173,
              "kind" : "expression",
              "target" : {
                "field" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "valueBuffer",
                  "variable" : 44
                },
                "go-type" : 168,
                "kind" : "expression",
                "target" : {
                  "go-type" : 2,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "ctx",
                    "variable" : 38
                  }
                },
                "type" : "selector"
              },
              "type" : "selector"
            },
            "type" : "index"
          },
          "type" : "unary"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 2189,
      "code" : "to := &ctx.valueBuffer.mapAny[idx]",
      "entry" : false,
      "use-vars" : [ 46, 38 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 8 ],
      "in-vars" : [ 47 ],
      "exit" : false,
      "out-vars" : [ 47, 48 ],
      "decl-vars" : [ 48 ],
      "line-start" : 2190,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "ptr"
          }
        } ],
        "right" : [ {
          "coerced-to" : {
            "go-type" : 24,
            "kind" : "type",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 2,
              "value" : "unsafe"
            },
            "type" : "identifier",
            "value" : {
              "go-type" : 24,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "Pointer"
            }
          },
          "go-type" : 24,
          "kind" : "expression",
          "target" : {
            "go-type" : 186,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "to",
              "variable" : 47
            }
          },
          "type" : "cast"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 2190,
      "code" : "ptr := unsafe.Pointer(to)",
      "entry" : false,
      "use-vars" : [ 47 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 9 ],
      "in-vars" : [ 47, 48 ],
      "exit" : false,
      "out-vars" : [ 49, 47, 48 ],
      "decl-vars" : [ 49 ],
      "line-start" : 2191,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "unfolder"
          }
        } ],
        "right" : [ {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 192,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 1,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "newUnfolderMapIfc"
            }
          },
          "go-type" : 187,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 2191,
      "code" : "unfolder := newUnfolderMapIfc()",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 47, 48, 49 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 2192,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 186,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "to",
            "variable" : 47
          }
        }, {
          "go-type" : 24,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "ptr",
            "variable" : 48
          }
        }, {
          "go-type" : 187,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "unfolder",
            "variable" : 49
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 2192,
      "code" : "return to, ptr, unfolder",
      "entry" : false,
      "use-vars" : [ 47, 48, 49 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 11 ],
      "in-vars" : [ 38 ],
      "exit" : false,
      "out-vars" : [ 38 ],
      "decl-vars" : [ ],
      "line-start" : 2194,
      "ast" : {
        "expressions" : [ {
          "go-type" : 100,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "3"
          }
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 2201,
      "code" : "case structform.BoolType:\n\tidx := len(ctx.valueBuffer.mapPrimitive)\n\tctx.valueBuffer.mapPrimitive = append(ctx.valueBuffer.mapPrimitive, nil)\n\tmapPtr := &ctx.valueBuffer.mapPrimitive[idx]\n\tptr := unsafe.Pointer(mapPtr)\n\tto := (*map[string]bool)(ptr)\n\tunfolder := newUnfolderMapBool()\n\treturn to, ptr, unfolder",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 12 ],
      "in-vars" : [ 38 ],
      "exit" : false,
      "out-vars" : [ 38, 51 ],
      "decl-vars" : [ 51 ],
      "line-start" : 2195,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "idx"
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "mapPrimitive",
              "variable" : 50
            },
            "go-type" : 171,
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "valueBuffer",
                "variable" : 44
              },
              "go-type" : 168,
              "kind" : "expression",
              "target" : {
                "go-type" : 2,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "ctx",
                  "variable" : 38
                }
              },
              "type" : "selector"
            },
            "type" : "selector"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 194,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Builtin",
              "kind" : "ident",
              "value" : "len"
            }
          },
          "go-type" : 38,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 2195,
      "code" : "idx := len(ctx.valueBuffer.mapPrimitive)",
      "entry" : false,
      "use-vars" : [ 38 ]
    }, {
      "update-vars" : [ 38 ],
      "successors" : [ 13 ],
      "in-vars" : [ 38, 51 ],
      "exit" : false,
      "out-vars" : [ 38, 51 ],
      "decl-vars" : [ ],
      "line-start" : 2196,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "mapPrimitive",
            "variable" : 50
          },
          "go-type" : 171,
          "kind" : "expression",
          "target" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "valueBuffer",
              "variable" : 44
            },
            "go-type" : 168,
            "kind" : "expression",
            "target" : {
              "go-type" : 2,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "ctx",
                "variable" : 38
              }
            },
            "type" : "selector"
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "arguments" : [ {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "mapPrimitive",
              "variable" : 50
            },
            "go-type" : 171,
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "valueBuffer",
                "variable" : 44
              },
              "go-type" : 168,
              "kind" : "expression",
              "target" : {
                "go-type" : 2,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "ctx",
                  "variable" : 38
                }
              },
              "type" : "selector"
            },
            "type" : "selector"
          }, {
            "go-type" : 185,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Nil",
              "kind" : "ident",
              "value" : "nil"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 196,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Builtin",
              "kind" : "ident",
              "value" : "append"
            }
          },
          "go-type" : 171,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 2196,
      "code" : "ctx.valueBuffer.mapPrimitive = append(ctx.valueBuffer.mapPrimitive, nil)",
      "entry" : false,
      "use-vars" : [ 38 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 14 ],
      "in-vars" : [ 38, 51 ],
      "exit" : false,
      "out-vars" : [ 52 ],
      "decl-vars" : [ 52 ],
      "line-start" : 2197,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "mapPtr"
          }
        } ],
        "right" : [ {
          "go-type" : 198,
          "kind" : "expression",
          "operator" : "&",
          "target" : {
            "go-type" : 172,
            "index" : {
              "go-type" : 38,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "idx",
                "variable" : 51
              }
            },
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "mapPrimitive",
                "variable" : 50
              },
              "go-type" : 171,
              "kind" : "expression",
              "target" : {
                "field" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "valueBuffer",
                  "variable" : 44
                },
                "go-type" : 168,
                "kind" : "expression",
                "target" : {
                  "go-type" : 2,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "ctx",
                    "variable" : 38
                  }
                },
                "type" : "selector"
              },
              "type" : "selector"
            },
            "type" : "index"
          },
          "type" : "unary"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 2197,
      "code" : "mapPtr := &ctx.valueBuffer.mapPrimitive[idx]",
      "entry" : false,
      "use-vars" : [ 51, 38 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 15 ],
      "in-vars" : [ 52 ],
      "exit" : false,
      "out-vars" : [ 53 ],
      "decl-vars" : [ 53 ],
      "line-start" : 2198,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "ptr"
          }
        } ],
        "right" : [ {
          "coerced-to" : {
            "go-type" : 24,
            "kind" : "type",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 2,
              "value" : "unsafe"
            },
            "type" : "identifier",
            "value" : {
              "go-type" : 24,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "Pointer"
            }
          },
          "go-type" : 24,
          "kind" : "expression",
          "target" : {
            "go-type" : 198,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "mapPtr",
              "variable" : 52
            }
          },
          "type" : "cast"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 2198,
      "code" : "ptr := unsafe.Pointer(mapPtr)",
      "entry" : false,
      "use-vars" : [ 52 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 16 ],
      "in-vars" : [ 53 ],
      "exit" : false,
      "out-vars" : [ 53, 54 ],
      "decl-vars" : [ 54 ],
      "line-start" : 2199,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "to"
          }
        } ],
        "right" : [ {
          "coerced-to" : {
            "contained" : {
              "go-type" : 200,
              "key" : {
                "go-type" : 7,
                "kind" : "type",
                "type" : "identifier",
                "value" : {
                  "go-type" : 7,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "string"
                }
              },
              "kind" : "type",
              "type" : "map",
              "value" : {
                "go-type" : 26,
                "kind" : "type",
                "type" : "identifier",
                "value" : {
                  "go-type" : 26,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "bool"
                }
              }
            },
            "go-type" : 199,
            "kind" : "type",
            "type" : "pointer"
          },
          "go-type" : 199,
          "kind" : "expression",
          "target" : {
            "go-type" : 24,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "ptr",
              "variable" : 53
            }
          },
          "type" : "cast"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 2199,
      "code" : "to := (*map[string]bool)(ptr)",
      "entry" : false,
      "use-vars" : [ 53 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 17 ],
      "in-vars" : [ 53, 54 ],
      "exit" : false,
      "out-vars" : [ 55, 53, 54 ],
      "decl-vars" : [ 55 ],
      "line-start" : 2200,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "unfolder"
          }
        } ],
        "right" : [ {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 203,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 2,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "newUnfolderMapBool"
            }
          },
          "go-type" : 201,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 2200,
      "code" : "unfolder := newUnfolderMapBool()",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 55, 53, 54 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 2201,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 199,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "to",
            "variable" : 54
          }
        }, {
          "go-type" : 24,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "ptr",
            "variable" : 53
          }
        }, {
          "go-type" : 201,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "unfolder",
            "variable" : 55
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 2201,
      "code" : "return to, ptr, unfolder",
      "entry" : false,
      "use-vars" : [ 54, 53, 55 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 19 ],
      "in-vars" : [ 38 ],
      "exit" : false,
      "out-vars" : [ 38 ],
      "decl-vars" : [ ],
      "line-start" : 2203,
      "ast" : {
        "expressions" : [ {
          "go-type" : 100,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "1"
          }
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 2210,
      "code" : "case structform.ByteType:\n\tidx := len(ctx.valueBuffer.mapPrimitive)\n\tctx.valueBuffer.mapPrimitive = append(ctx.valueBuffer.mapPrimitive, nil)\n\tmapPtr := &ctx.valueBuffer.mapPrimitive[idx]\n\tptr := unsafe.Pointer(mapPtr)\n\tto := (*map[string]uint8)(ptr)\n\tunfolder := newUnfolderMapUint8()\n\treturn to, ptr, unfolder",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 20 ],
      "in-vars" : [ 38 ],
      "exit" : false,
      "out-vars" : [ 38, 56 ],
      "decl-vars" : [ 56 ],
      "line-start" : 2204,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "idx"
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "mapPrimitive",
              "variable" : 50
            },
            "go-type" : 171,
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "valueBuffer",
                "variable" : 44
              },
              "go-type" : 168,
              "kind" : "expression",
              "target" : {
                "go-type" : 2,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "ctx",
                  "variable" : 38
                }
              },
              "type" : "selector"
            },
            "type" : "selector"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 194,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Builtin",
              "kind" : "ident",
              "value" : "len"
            }
          },
          "go-type" : 38,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 2204,
      "code" : "idx := len(ctx.valueBuffer.mapPrimitive)",
      "entry" : false,
      "use-vars" : [ 38 ]
    }, {
      "update-vars" : [ 38 ],
      "successors" : [ 21 ],
      "in-vars" : [ 38, 56 ],
      "exit" : false,
      "out-vars" : [ 38, 56 ],
      "decl-vars" : [ ],
      "line-start" : 2205,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "mapPrimitive",
            "variable" : 50
          },
          "go-type" : 171,
          "kind" : "expression",
          "target" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "valueBuffer",
              "variable" : 44
            },
            "go-type" : 168,
            "kind" : "expression",
            "target" : {
              "go-type" : 2,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "ctx",
                "variable" : 38
              }
            },
            "type" : "selector"
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "arguments" : [ {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "mapPrimitive",
              "variable" : 50
            },
            "go-type" : 171,
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "valueBuffer",
                "variable" : 44
              },
              "go-type" : 168,
              "kind" : "expression",
              "target" : {
                "go-type" : 2,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "ctx",
                  "variable" : 38
                }
              },
              "type" : "selector"
            },
            "type" : "selector"
          }, {
            "go-type" : 185,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Nil",
              "kind" : "ident",
              "value" : "nil"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 196,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Builtin",
              "kind" : "ident",
              "value" : "append"
            }
          },
          "go-type" : 171,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 2205,
      "code" : "ctx.valueBuffer.mapPrimitive = append(ctx.valueBuffer.mapPrimitive, nil)",
      "entry" : false,
      "use-vars" : [ 38 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 22 ],
      "in-vars" : [ 56, 38 ],
      "exit" : false,
      "out-vars" : [ 57 ],
      "decl-vars" : [ 57 ],
      "line-start" : 2206,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "mapPtr"
          }
        } ],
        "right" : [ {
          "go-type" : 198,
          "kind" : "expression",
          "operator" : "&",
          "target" : {
            "go-type" : 172,
            "index" : {
              "go-type" : 38,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "idx",
                "variable" : 56
              }
            },
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "mapPrimitive",
                "variable" : 50
              },
              "go-type" : 171,
              "kind" : "expression",
              "target" : {
                "field" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "valueBuffer",
                  "variable" : 44
                },
                "go-type" : 168,
                "kind" : "expression",
                "target" : {
                  "go-type" : 2,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "ctx",
                    "variable" : 38
                  }
                },
                "type" : "selector"
              },
              "type" : "selector"
            },
            "type" : "index"
          },
          "type" : "unary"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 2206,
      "code" : "mapPtr := &ctx.valueBuffer.mapPrimitive[idx]",
      "entry" : false,
      "use-vars" : [ 38, 56 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 23 ],
      "in-vars" : [ 57 ],
      "exit" : false,
      "out-vars" : [ 58 ],
      "decl-vars" : [ 58 ],
      "line-start" : 2207,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "ptr"
          }
        } ],
        "right" : [ {
          "coerced-to" : {
            "go-type" : 24,
            "kind" : "type",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 2,
              "value" : "unsafe"
            },
            "type" : "identifier",
            "value" : {
              "go-type" : 24,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "Pointer"
            }
          },
          "go-type" : 24,
          "kind" : "expression",
          "target" : {
            "go-type" : 198,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "mapPtr",
              "variable" : 57
            }
          },
          "type" : "cast"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 2207,
      "code" : "ptr := unsafe.Pointer(mapPtr)",
      "entry" : false,
      "use-vars" : [ 57 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 24 ],
      "in-vars" : [ 58 ],
      "exit" : false,
      "out-vars" : [ 59, 58 ],
      "decl-vars" : [ 59 ],
      "line-start" : 2208,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "to"
          }
        } ],
        "right" : [ {
          "coerced-to" : {
            "contained" : {
              "go-type" : 206,
              "key" : {
                "go-type" : 7,
                "kind" : "type",
                "type" : "identifier",
                "value" : {
                  "go-type" : 7,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "string"
                }
              },
              "kind" : "type",
              "type" : "map",
              "value" : {
                "go-type" : 21,
                "kind" : "type",
                "type" : "identifier",
                "value" : {
                  "go-type" : 21,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "uint8"
                }
              }
            },
            "go-type" : 205,
            "kind" : "type",
            "type" : "pointer"
          },
          "go-type" : 205,
          "kind" : "expression",
          "target" : {
            "go-type" : 24,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "ptr",
              "variable" : 58
            }
          },
          "type" : "cast"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 2208,
      "code" : "to := (*map[string]uint8)(ptr)",
      "entry" : false,
      "use-vars" : [ 58 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 25 ],
      "in-vars" : [ 58, 59 ],
      "exit" : false,
      "out-vars" : [ 60, 58, 59 ],
      "decl-vars" : [ 60 ],
      "line-start" : 2209,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "unfolder"
          }
        } ],
        "right" : [ {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 209,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 3,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "newUnfolderMapUint8"
            }
          },
          "go-type" : 207,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 2209,
      "code" : "unfolder := newUnfolderMapUint8()",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 60, 58, 59 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 2210,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 205,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "to",
            "variable" : 59
          }
        }, {
          "go-type" : 24,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "ptr",
            "variable" : 58
          }
        }, {
          "go-type" : 207,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "unfolder",
            "variable" : 60
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 2210,
      "code" : "return to, ptr, unfolder",
      "entry" : false,
      "use-vars" : [ 58, 60, 59 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 27 ],
      "in-vars" : [ 38 ],
      "exit" : false,
      "out-vars" : [ 38 ],
      "decl-vars" : [ ],
      "line-start" : 2212,
      "ast" : {
        "expressions" : [ {
          "go-type" : 100,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "15"
          }
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 2219,
      "code" : "case structform.Float32Type:\n\tidx := len(ctx.valueBuffer.mapPrimitive)\n\tctx.valueBuffer.mapPrimitive = append(ctx.valueBuffer.mapPrimitive, nil)\n\tmapPtr := &ctx.valueBuffer.mapPrimitive[idx]\n\tptr := unsafe.Pointer(mapPtr)\n\tto := (*map[string]float32)(ptr)\n\tunfolder := newUnfolderMapFloat32()\n\treturn to, ptr, unfolder",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 28 ],
      "in-vars" : [ 38 ],
      "exit" : false,
      "out-vars" : [ 38, 61 ],
      "decl-vars" : [ 61 ],
      "line-start" : 2213,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "idx"
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "mapPrimitive",
              "variable" : 50
            },
            "go-type" : 171,
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "valueBuffer",
                "variable" : 44
              },
              "go-type" : 168,
              "kind" : "expression",
              "target" : {
                "go-type" : 2,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "ctx",
                  "variable" : 38
                }
              },
              "type" : "selector"
            },
            "type" : "selector"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 194,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Builtin",
              "kind" : "ident",
              "value" : "len"
            }
          },
          "go-type" : 38,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 2213,
      "code" : "idx := len(ctx.valueBuffer.mapPrimitive)",
      "entry" : false,
      "use-vars" : [ 38 ]
    }, {
      "update-vars" : [ 38 ],
      "successors" : [ 29 ],
      "in-vars" : [ 38, 61 ],
      "exit" : false,
      "out-vars" : [ 38, 61 ],
      "decl-vars" : [ ],
      "line-start" : 2214,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "mapPrimitive",
            "variable" : 50
          },
          "go-type" : 171,
          "kind" : "expression",
          "target" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "valueBuffer",
              "variable" : 44
            },
            "go-type" : 168,
            "kind" : "expression",
            "target" : {
              "go-type" : 2,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "ctx",
                "variable" : 38
              }
            },
            "type" : "selector"
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "arguments" : [ {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "mapPrimitive",
              "variable" : 50
            },
            "go-type" : 171,
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "valueBuffer",
                "variable" : 44
              },
              "go-type" : 168,
              "kind" : "expression",
              "target" : {
                "go-type" : 2,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "ctx",
                  "variable" : 38
                }
              },
              "type" : "selector"
            },
            "type" : "selector"
          }, {
            "go-type" : 185,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Nil",
              "kind" : "ident",
              "value" : "nil"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 196,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Builtin",
              "kind" : "ident",
              "value" : "append"
            }
          },
          "go-type" : 171,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 2214,
      "code" : "ctx.valueBuffer.mapPrimitive = append(ctx.valueBuffer.mapPrimitive, nil)",
      "entry" : false,
      "use-vars" : [ 38 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 30 ],
      "in-vars" : [ 38, 61 ],
      "exit" : false,
      "out-vars" : [ 62 ],
      "decl-vars" : [ 62 ],
      "line-start" : 2215,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "mapPtr"
          }
        } ],
        "right" : [ {
          "go-type" : 198,
          "kind" : "expression",
          "operator" : "&",
          "target" : {
            "go-type" : 172,
            "index" : {
              "go-type" : 38,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "idx",
                "variable" : 61
              }
            },
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "mapPrimitive",
                "variable" : 50
              },
              "go-type" : 171,
              "kind" : "expression",
              "target" : {
                "field" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "valueBuffer",
                  "variable" : 44
                },
                "go-type" : 168,
                "kind" : "expression",
                "target" : {
                  "go-type" : 2,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "ctx",
                    "variable" : 38
                  }
                },
                "type" : "selector"
              },
              "type" : "selector"
            },
            "type" : "index"
          },
          "type" : "unary"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 2215,
      "code" : "mapPtr := &ctx.valueBuffer.mapPrimitive[idx]",
      "entry" : false,
      "use-vars" : [ 61, 38 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 31 ],
      "in-vars" : [ 62 ],
      "exit" : false,
      "out-vars" : [ 63 ],
      "decl-vars" : [ 63 ],
      "line-start" : 2216,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "ptr"
          }
        } ],
        "right" : [ {
          "coerced-to" : {
            "go-type" : 24,
            "kind" : "type",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 2,
              "value" : "unsafe"
            },
            "type" : "identifier",
            "value" : {
              "go-type" : 24,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "Pointer"
            }
          },
          "go-type" : 24,
          "kind" : "expression",
          "target" : {
            "go-type" : 198,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "mapPtr",
              "variable" : 62
            }
          },
          "type" : "cast"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 2216,
      "code" : "ptr := unsafe.Pointer(mapPtr)",
      "entry" : false,
      "use-vars" : [ 62 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 32 ],
      "in-vars" : [ 63 ],
      "exit" : false,
      "out-vars" : [ 63, 64 ],
      "decl-vars" : [ 64 ],
      "line-start" : 2217,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "to"
          }
        } ],
        "right" : [ {
          "coerced-to" : {
            "contained" : {
              "go-type" : 212,
              "key" : {
                "go-type" : 7,
                "kind" : "type",
                "type" : "identifier",
                "value" : {
                  "go-type" : 7,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "string"
                }
              },
              "kind" : "type",
              "type" : "map",
              "value" : {
                "go-type" : 107,
                "kind" : "type",
                "type" : "identifier",
                "value" : {
                  "go-type" : 107,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "float32"
                }
              }
            },
            "go-type" : 211,
            "kind" : "type",
            "type" : "pointer"
          },
          "go-type" : 211,
          "kind" : "expression",
          "target" : {
            "go-type" : 24,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "ptr",
              "variable" : 63
            }
          },
          "type" : "cast"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 2217,
      "code" : "to := (*map[string]float32)(ptr)",
      "entry" : false,
      "use-vars" : [ 63 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 33 ],
      "in-vars" : [ 64, 63 ],
      "exit" : false,
      "out-vars" : [ 64, 63, 65 ],
      "decl-vars" : [ 65 ],
      "line-start" : 2218,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "unfolder"
          }
        } ],
        "right" : [ {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 215,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 4,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "newUnfolderMapFloat32"
            }
          },
          "go-type" : 213,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 2218,
      "code" : "unfolder := newUnfolderMapFloat32()",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 65, 64, 63 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 2219,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 211,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "to",
            "variable" : 64
          }
        }, {
          "go-type" : 24,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "ptr",
            "variable" : 63
          }
        }, {
          "go-type" : 213,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "unfolder",
            "variable" : 65
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 2219,
      "code" : "return to, ptr, unfolder",
      "entry" : false,
      "use-vars" : [ 65, 64, 63 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 35 ],
      "in-vars" : [ 38 ],
      "exit" : false,
      "out-vars" : [ 38 ],
      "decl-vars" : [ ],
      "line-start" : 2221,
      "ast" : {
        "expressions" : [ {
          "go-type" : 100,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "16"
          }
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 2228,
      "code" : "case structform.Float64Type:\n\tidx := len(ctx.valueBuffer.mapPrimitive)\n\tctx.valueBuffer.mapPrimitive = append(ctx.valueBuffer.mapPrimitive, nil)\n\tmapPtr := &ctx.valueBuffer.mapPrimitive[idx]\n\tptr := unsafe.Pointer(mapPtr)\n\tto := (*map[string]float64)(ptr)\n\tunfolder := newUnfolderMapFloat64()\n\treturn to, ptr, unfolder",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 36 ],
      "in-vars" : [ 38 ],
      "exit" : false,
      "out-vars" : [ 38, 66 ],
      "decl-vars" : [ 66 ],
      "line-start" : 2222,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "idx"
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "mapPrimitive",
              "variable" : 50
            },
            "go-type" : 171,
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "valueBuffer",
                "variable" : 44
              },
              "go-type" : 168,
              "kind" : "expression",
              "target" : {
                "go-type" : 2,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "ctx",
                  "variable" : 38
                }
              },
              "type" : "selector"
            },
            "type" : "selector"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 194,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Builtin",
              "kind" : "ident",
              "value" : "len"
            }
          },
          "go-type" : 38,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 2222,
      "code" : "idx := len(ctx.valueBuffer.mapPrimitive)",
      "entry" : false,
      "use-vars" : [ 38 ]
    }, {
      "update-vars" : [ 38 ],
      "successors" : [ 37 ],
      "in-vars" : [ 38, 66 ],
      "exit" : false,
      "out-vars" : [ 38, 66 ],
      "decl-vars" : [ ],
      "line-start" : 2223,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "mapPrimitive",
            "variable" : 50
          },
          "go-type" : 171,
          "kind" : "expression",
          "target" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "valueBuffer",
              "variable" : 44
            },
            "go-type" : 168,
            "kind" : "expression",
            "target" : {
              "go-type" : 2,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "ctx",
                "variable" : 38
              }
            },
            "type" : "selector"
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "arguments" : [ {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "mapPrimitive",
              "variable" : 50
            },
            "go-type" : 171,
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "valueBuffer",
                "variable" : 44
              },
              "go-type" : 168,
              "kind" : "expression",
              "target" : {
                "go-type" : 2,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "ctx",
                  "variable" : 38
                }
              },
              "type" : "selector"
            },
            "type" : "selector"
          }, {
            "go-type" : 185,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Nil",
              "kind" : "ident",
              "value" : "nil"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 196,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Builtin",
              "kind" : "ident",
              "value" : "append"
            }
          },
          "go-type" : 171,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 2223,
      "code" : "ctx.valueBuffer.mapPrimitive = append(ctx.valueBuffer.mapPrimitive, nil)",
      "entry" : false,
      "use-vars" : [ 38 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 38 ],
      "in-vars" : [ 38, 66 ],
      "exit" : false,
      "out-vars" : [ 67 ],
      "decl-vars" : [ 67 ],
      "line-start" : 2224,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "mapPtr"
          }
        } ],
        "right" : [ {
          "go-type" : 198,
          "kind" : "expression",
          "operator" : "&",
          "target" : {
            "go-type" : 172,
            "index" : {
              "go-type" : 38,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "idx",
                "variable" : 66
              }
            },
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "mapPrimitive",
                "variable" : 50
              },
              "go-type" : 171,
              "kind" : "expression",
              "target" : {
                "field" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "valueBuffer",
                  "variable" : 44
                },
                "go-type" : 168,
                "kind" : "expression",
                "target" : {
                  "go-type" : 2,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "ctx",
                    "variable" : 38
                  }
                },
                "type" : "selector"
              },
              "type" : "selector"
            },
            "type" : "index"
          },
          "type" : "unary"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 2224,
      "code" : "mapPtr := &ctx.valueBuffer.mapPrimitive[idx]",
      "entry" : false,
      "use-vars" : [ 66, 38 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 39 ],
      "in-vars" : [ 67 ],
      "exit" : false,
      "out-vars" : [ 68 ],
      "decl-vars" : [ 68 ],
      "line-start" : 2225,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "ptr"
          }
        } ],
        "right" : [ {
          "coerced-to" : {
            "go-type" : 24,
            "kind" : "type",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 2,
              "value" : "unsafe"
            },
            "type" : "identifier",
            "value" : {
              "go-type" : 24,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "Pointer"
            }
          },
          "go-type" : 24,
          "kind" : "expression",
          "target" : {
            "go-type" : 198,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "mapPtr",
              "variable" : 67
            }
          },
          "type" : "cast"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 2225,
      "code" : "ptr := unsafe.Pointer(mapPtr)",
      "entry" : false,
      "use-vars" : [ 67 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 40 ],
      "in-vars" : [ 68 ],
      "exit" : false,
      "out-vars" : [ 69, 68 ],
      "decl-vars" : [ 69 ],
      "line-start" : 2226,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "to"
          }
        } ],
        "right" : [ {
          "coerced-to" : {
            "contained" : {
              "go-type" : 218,
              "key" : {
                "go-type" : 7,
                "kind" : "type",
                "type" : "identifier",
                "value" : {
                  "go-type" : 7,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "string"
                }
              },
              "kind" : "type",
              "type" : "map",
              "value" : {
                "go-type" : 110,
                "kind" : "type",
                "type" : "identifier",
                "value" : {
                  "go-type" : 110,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "float64"
                }
              }
            },
            "go-type" : 217,
            "kind" : "type",
            "type" : "pointer"
          },
          "go-type" : 217,
          "kind" : "expression",
          "target" : {
            "go-type" : 24,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "ptr",
              "variable" : 68
            }
          },
          "type" : "cast"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 2226,
      "code" : "to := (*map[string]float64)(ptr)",
      "entry" : false,
      "use-vars" : [ 68 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 41 ],
      "in-vars" : [ 68, 69 ],
      "exit" : false,
      "out-vars" : [ 69, 68, 70 ],
      "decl-vars" : [ 70 ],
      "line-start" : 2227,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "unfolder"
          }
        } ],
        "right" : [ {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 221,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 5,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "newUnfolderMapFloat64"
            }
          },
          "go-type" : 219,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 2227,
      "code" : "unfolder := newUnfolderMapFloat64()",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 69, 68, 70 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 2228,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 217,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "to",
            "variable" : 69
          }
        }, {
          "go-type" : 24,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "ptr",
            "variable" : 68
          }
        }, {
          "go-type" : 219,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "unfolder",
            "variable" : 70
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 2228,
      "code" : "return to, ptr, unfolder",
      "entry" : false,
      "use-vars" : [ 68, 70, 69 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 43 ],
      "in-vars" : [ 38 ],
      "exit" : false,
      "out-vars" : [ 38 ],
      "decl-vars" : [ ],
      "line-start" : 2230,
      "ast" : {
        "expressions" : [ {
          "go-type" : 100,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "7"
          }
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 2237,
      "code" : "case structform.Int16Type:\n\tidx := len(ctx.valueBuffer.mapPrimitive)\n\tctx.valueBuffer.mapPrimitive = append(ctx.valueBuffer.mapPrimitive, nil)\n\tmapPtr := &ctx.valueBuffer.mapPrimitive[idx]\n\tptr := unsafe.Pointer(mapPtr)\n\tto := (*map[string]int16)(ptr)\n\tunfolder := newUnfolderMapInt16()\n\treturn to, ptr, unfolder",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 44 ],
      "in-vars" : [ 38 ],
      "exit" : false,
      "out-vars" : [ 38, 71 ],
      "decl-vars" : [ 71 ],
      "line-start" : 2231,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "idx"
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "mapPrimitive",
              "variable" : 50
            },
            "go-type" : 171,
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "valueBuffer",
                "variable" : 44
              },
              "go-type" : 168,
              "kind" : "expression",
              "target" : {
                "go-type" : 2,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "ctx",
                  "variable" : 38
                }
              },
              "type" : "selector"
            },
            "type" : "selector"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 194,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Builtin",
              "kind" : "ident",
              "value" : "len"
            }
          },
          "go-type" : 38,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 2231,
      "code" : "idx := len(ctx.valueBuffer.mapPrimitive)",
      "entry" : false,
      "use-vars" : [ 38 ]
    }, {
      "update-vars" : [ 38 ],
      "successors" : [ 45 ],
      "in-vars" : [ 38, 71 ],
      "exit" : false,
      "out-vars" : [ 71, 38 ],
      "decl-vars" : [ ],
      "line-start" : 2232,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "mapPrimitive",
            "variable" : 50
          },
          "go-type" : 171,
          "kind" : "expression",
          "target" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "valueBuffer",
              "variable" : 44
            },
            "go-type" : 168,
            "kind" : "expression",
            "target" : {
              "go-type" : 2,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "ctx",
                "variable" : 38
              }
            },
            "type" : "selector"
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "arguments" : [ {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "mapPrimitive",
              "variable" : 50
            },
            "go-type" : 171,
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "valueBuffer",
                "variable" : 44
              },
              "go-type" : 168,
              "kind" : "expression",
              "target" : {
                "go-type" : 2,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "ctx",
                  "variable" : 38
                }
              },
              "type" : "selector"
            },
            "type" : "selector"
          }, {
            "go-type" : 185,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Nil",
              "kind" : "ident",
              "value" : "nil"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 196,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Builtin",
              "kind" : "ident",
              "value" : "append"
            }
          },
          "go-type" : 171,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 2232,
      "code" : "ctx.valueBuffer.mapPrimitive = append(ctx.valueBuffer.mapPrimitive, nil)",
      "entry" : false,
      "use-vars" : [ 38 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 46 ],
      "in-vars" : [ 71, 38 ],
      "exit" : false,
      "out-vars" : [ 72 ],
      "decl-vars" : [ 72 ],
      "line-start" : 2233,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "mapPtr"
          }
        } ],
        "right" : [ {
          "go-type" : 198,
          "kind" : "expression",
          "operator" : "&",
          "target" : {
            "go-type" : 172,
            "index" : {
              "go-type" : 38,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "idx",
                "variable" : 71
              }
            },
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "mapPrimitive",
                "variable" : 50
              },
              "go-type" : 171,
              "kind" : "expression",
              "target" : {
                "field" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "valueBuffer",
                  "variable" : 44
                },
                "go-type" : 168,
                "kind" : "expression",
                "target" : {
                  "go-type" : 2,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "ctx",
                    "variable" : 38
                  }
                },
                "type" : "selector"
              },
              "type" : "selector"
            },
            "type" : "index"
          },
          "type" : "unary"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 2233,
      "code" : "mapPtr := &ctx.valueBuffer.mapPrimitive[idx]",
      "entry" : false,
      "use-vars" : [ 38, 71 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 47 ],
      "in-vars" : [ 72 ],
      "exit" : false,
      "out-vars" : [ 73 ],
      "decl-vars" : [ 73 ],
      "line-start" : 2234,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "ptr"
          }
        } ],
        "right" : [ {
          "coerced-to" : {
            "go-type" : 24,
            "kind" : "type",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 2,
              "value" : "unsafe"
            },
            "type" : "identifier",
            "value" : {
              "go-type" : 24,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "Pointer"
            }
          },
          "go-type" : 24,
          "kind" : "expression",
          "target" : {
            "go-type" : 198,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "mapPtr",
              "variable" : 72
            }
          },
          "type" : "cast"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 2234,
      "code" : "ptr := unsafe.Pointer(mapPtr)",
      "entry" : false,
      "use-vars" : [ 72 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 48 ],
      "in-vars" : [ 73 ],
      "exit" : false,
      "out-vars" : [ 74, 73 ],
      "decl-vars" : [ 74 ],
      "line-start" : 2235,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "to"
          }
        } ],
        "right" : [ {
          "coerced-to" : {
            "contained" : {
              "go-type" : 224,
              "key" : {
                "go-type" : 7,
                "kind" : "type",
                "type" : "identifier",
                "value" : {
                  "go-type" : 7,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "string"
                }
              },
              "kind" : "type",
              "type" : "map",
              "value" : {
                "go-type" : 115,
                "kind" : "type",
                "type" : "identifier",
                "value" : {
                  "go-type" : 115,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "int16"
                }
              }
            },
            "go-type" : 223,
            "kind" : "type",
            "type" : "pointer"
          },
          "go-type" : 223,
          "kind" : "expression",
          "target" : {
            "go-type" : 24,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "ptr",
              "variable" : 73
            }
          },
          "type" : "cast"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 2235,
      "code" : "to := (*map[string]int16)(ptr)",
      "entry" : false,
      "use-vars" : [ 73 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 49 ],
      "in-vars" : [ 74, 73 ],
      "exit" : false,
      "out-vars" : [ 75, 74, 73 ],
      "decl-vars" : [ 75 ],
      "line-start" : 2236,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "unfolder"
          }
        } ],
        "right" : [ {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 227,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 6,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "newUnfolderMapInt16"
            }
          },
          "go-type" : 225,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 2236,
      "code" : "unfolder := newUnfolderMapInt16()",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 75, 74, 73 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 2237,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 223,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "to",
            "variable" : 74
          }
        }, {
          "go-type" : 24,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "ptr",
            "variable" : 73
          }
        }, {
          "go-type" : 225,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "unfolder",
            "variable" : 75
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 2237,
      "code" : "return to, ptr, unfolder",
      "entry" : false,
      "use-vars" : [ 74, 73, 75 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 51 ],
      "in-vars" : [ 38 ],
      "exit" : false,
      "out-vars" : [ 38 ],
      "decl-vars" : [ ],
      "line-start" : 2239,
      "ast" : {
        "expressions" : [ {
          "go-type" : 100,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "8"
          }
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 2246,
      "code" : "case structform.Int32Type:\n\tidx := len(ctx.valueBuffer.mapPrimitive)\n\tctx.valueBuffer.mapPrimitive = append(ctx.valueBuffer.mapPrimitive, nil)\n\tmapPtr := &ctx.valueBuffer.mapPrimitive[idx]\n\tptr := unsafe.Pointer(mapPtr)\n\tto := (*map[string]int32)(ptr)\n\tunfolder := newUnfolderMapInt32()\n\treturn to, ptr, unfolder",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 52 ],
      "in-vars" : [ 38 ],
      "exit" : false,
      "out-vars" : [ 38, 76 ],
      "decl-vars" : [ 76 ],
      "line-start" : 2240,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "idx"
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "mapPrimitive",
              "variable" : 50
            },
            "go-type" : 171,
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "valueBuffer",
                "variable" : 44
              },
              "go-type" : 168,
              "kind" : "expression",
              "target" : {
                "go-type" : 2,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "ctx",
                  "variable" : 38
                }
              },
              "type" : "selector"
            },
            "type" : "selector"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 194,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Builtin",
              "kind" : "ident",
              "value" : "len"
            }
          },
          "go-type" : 38,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 2240,
      "code" : "idx := len(ctx.valueBuffer.mapPrimitive)",
      "entry" : false,
      "use-vars" : [ 38 ]
    }, {
      "update-vars" : [ 38 ],
      "successors" : [ 53 ],
      "in-vars" : [ 38, 76 ],
      "exit" : false,
      "out-vars" : [ 38, 76 ],
      "decl-vars" : [ ],
      "line-start" : 2241,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "mapPrimitive",
            "variable" : 50
          },
          "go-type" : 171,
          "kind" : "expression",
          "target" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "valueBuffer",
              "variable" : 44
            },
            "go-type" : 168,
            "kind" : "expression",
            "target" : {
              "go-type" : 2,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "ctx",
                "variable" : 38
              }
            },
            "type" : "selector"
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "arguments" : [ {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "mapPrimitive",
              "variable" : 50
            },
            "go-type" : 171,
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "valueBuffer",
                "variable" : 44
              },
              "go-type" : 168,
              "kind" : "expression",
              "target" : {
                "go-type" : 2,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "ctx",
                  "variable" : 38
                }
              },
              "type" : "selector"
            },
            "type" : "selector"
          }, {
            "go-type" : 185,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Nil",
              "kind" : "ident",
              "value" : "nil"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 196,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Builtin",
              "kind" : "ident",
              "value" : "append"
            }
          },
          "go-type" : 171,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 2241,
      "code" : "ctx.valueBuffer.mapPrimitive = append(ctx.valueBuffer.mapPrimitive, nil)",
      "entry" : false,
      "use-vars" : [ 38 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 54 ],
      "in-vars" : [ 38, 76 ],
      "exit" : false,
      "out-vars" : [ 77 ],
      "decl-vars" : [ 77 ],
      "line-start" : 2242,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "mapPtr"
          }
        } ],
        "right" : [ {
          "go-type" : 198,
          "kind" : "expression",
          "operator" : "&",
          "target" : {
            "go-type" : 172,
            "index" : {
              "go-type" : 38,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "idx",
                "variable" : 76
              }
            },
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "mapPrimitive",
                "variable" : 50
              },
              "go-type" : 171,
              "kind" : "expression",
              "target" : {
                "field" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "valueBuffer",
                  "variable" : 44
                },
                "go-type" : 168,
                "kind" : "expression",
                "target" : {
                  "go-type" : 2,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "ctx",
                    "variable" : 38
                  }
                },
                "type" : "selector"
              },
              "type" : "selector"
            },
            "type" : "index"
          },
          "type" : "unary"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 2242,
      "code" : "mapPtr := &ctx.valueBuffer.mapPrimitive[idx]",
      "entry" : false,
      "use-vars" : [ 76, 38 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 55 ],
      "in-vars" : [ 77 ],
      "exit" : false,
      "out-vars" : [ 78 ],
      "decl-vars" : [ 78 ],
      "line-start" : 2243,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "ptr"
          }
        } ],
        "right" : [ {
          "coerced-to" : {
            "go-type" : 24,
            "kind" : "type",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 2,
              "value" : "unsafe"
            },
            "type" : "identifier",
            "value" : {
              "go-type" : 24,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "Pointer"
            }
          },
          "go-type" : 24,
          "kind" : "expression",
          "target" : {
            "go-type" : 198,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "mapPtr",
              "variable" : 77
            }
          },
          "type" : "cast"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 2243,
      "code" : "ptr := unsafe.Pointer(mapPtr)",
      "entry" : false,
      "use-vars" : [ 77 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 56 ],
      "in-vars" : [ 78 ],
      "exit" : false,
      "out-vars" : [ 79, 78 ],
      "decl-vars" : [ 79 ],
      "line-start" : 2244,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "to"
          }
        } ],
        "right" : [ {
          "coerced-to" : {
            "contained" : {
              "go-type" : 230,
              "key" : {
                "go-type" : 7,
                "kind" : "type",
                "type" : "identifier",
                "value" : {
                  "go-type" : 7,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "string"
                }
              },
              "kind" : "type",
              "type" : "map",
              "value" : {
                "go-type" : 30,
                "kind" : "type",
                "type" : "identifier",
                "value" : {
                  "go-type" : 30,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "int32"
                }
              }
            },
            "go-type" : 229,
            "kind" : "type",
            "type" : "pointer"
          },
          "go-type" : 229,
          "kind" : "expression",
          "target" : {
            "go-type" : 24,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "ptr",
              "variable" : 78
            }
          },
          "type" : "cast"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 2244,
      "code" : "to := (*map[string]int32)(ptr)",
      "entry" : false,
      "use-vars" : [ 78 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 57 ],
      "in-vars" : [ 79, 78 ],
      "exit" : false,
      "out-vars" : [ 78, 80, 79 ],
      "decl-vars" : [ 80 ],
      "line-start" : 2245,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "unfolder"
          }
        } ],
        "right" : [ {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 233,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 7,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "newUnfolderMapInt32"
            }
          },
          "go-type" : 231,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 2245,
      "code" : "unfolder := newUnfolderMapInt32()",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 79, 78, 80 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 2246,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 229,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "to",
            "variable" : 79
          }
        }, {
          "go-type" : 24,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "ptr",
            "variable" : 78
          }
        }, {
          "go-type" : 231,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "unfolder",
            "variable" : 80
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 2246,
      "code" : "return to, ptr, unfolder",
      "entry" : false,
      "use-vars" : [ 80, 79, 78 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 59 ],
      "in-vars" : [ 38 ],
      "exit" : false,
      "out-vars" : [ 38 ],
      "decl-vars" : [ ],
      "line-start" : 2248,
      "ast" : {
        "expressions" : [ {
          "go-type" : 100,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "9"
          }
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 2255,
      "code" : "case structform.Int64Type:\n\tidx := len(ctx.valueBuffer.mapPrimitive)\n\tctx.valueBuffer.mapPrimitive = append(ctx.valueBuffer.mapPrimitive, nil)\n\tmapPtr := &ctx.valueBuffer.mapPrimitive[idx]\n\tptr := unsafe.Pointer(mapPtr)\n\tto := (*map[string]int64)(ptr)\n\tunfolder := newUnfolderMapInt64()\n\treturn to, ptr, unfolder",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 60 ],
      "in-vars" : [ 38 ],
      "exit" : false,
      "out-vars" : [ 81, 38 ],
      "decl-vars" : [ 81 ],
      "line-start" : 2249,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "idx"
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "mapPrimitive",
              "variable" : 50
            },
            "go-type" : 171,
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "valueBuffer",
                "variable" : 44
              },
              "go-type" : 168,
              "kind" : "expression",
              "target" : {
                "go-type" : 2,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "ctx",
                  "variable" : 38
                }
              },
              "type" : "selector"
            },
            "type" : "selector"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 194,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Builtin",
              "kind" : "ident",
              "value" : "len"
            }
          },
          "go-type" : 38,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 2249,
      "code" : "idx := len(ctx.valueBuffer.mapPrimitive)",
      "entry" : false,
      "use-vars" : [ 38 ]
    }, {
      "update-vars" : [ 38 ],
      "successors" : [ 61 ],
      "in-vars" : [ 81, 38 ],
      "exit" : false,
      "out-vars" : [ 81, 38 ],
      "decl-vars" : [ ],
      "line-start" : 2250,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "mapPrimitive",
            "variable" : 50
          },
          "go-type" : 171,
          "kind" : "expression",
          "target" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "valueBuffer",
              "variable" : 44
            },
            "go-type" : 168,
            "kind" : "expression",
            "target" : {
              "go-type" : 2,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "ctx",
                "variable" : 38
              }
            },
            "type" : "selector"
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "arguments" : [ {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "mapPrimitive",
              "variable" : 50
            },
            "go-type" : 171,
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "valueBuffer",
                "variable" : 44
              },
              "go-type" : 168,
              "kind" : "expression",
              "target" : {
                "go-type" : 2,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "ctx",
                  "variable" : 38
                }
              },
              "type" : "selector"
            },
            "type" : "selector"
          }, {
            "go-type" : 185,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Nil",
              "kind" : "ident",
              "value" : "nil"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 196,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Builtin",
              "kind" : "ident",
              "value" : "append"
            }
          },
          "go-type" : 171,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 2250,
      "code" : "ctx.valueBuffer.mapPrimitive = append(ctx.valueBuffer.mapPrimitive, nil)",
      "entry" : false,
      "use-vars" : [ 38 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 62 ],
      "in-vars" : [ 38, 81 ],
      "exit" : false,
      "out-vars" : [ 82 ],
      "decl-vars" : [ 82 ],
      "line-start" : 2251,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "mapPtr"
          }
        } ],
        "right" : [ {
          "go-type" : 198,
          "kind" : "expression",
          "operator" : "&",
          "target" : {
            "go-type" : 172,
            "index" : {
              "go-type" : 38,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "idx",
                "variable" : 81
              }
            },
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "mapPrimitive",
                "variable" : 50
              },
              "go-type" : 171,
              "kind" : "expression",
              "target" : {
                "field" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "valueBuffer",
                  "variable" : 44
                },
                "go-type" : 168,
                "kind" : "expression",
                "target" : {
                  "go-type" : 2,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "ctx",
                    "variable" : 38
                  }
                },
                "type" : "selector"
              },
              "type" : "selector"
            },
            "type" : "index"
          },
          "type" : "unary"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 2251,
      "code" : "mapPtr := &ctx.valueBuffer.mapPrimitive[idx]",
      "entry" : false,
      "use-vars" : [ 38, 81 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 63 ],
      "in-vars" : [ 82 ],
      "exit" : false,
      "out-vars" : [ 83 ],
      "decl-vars" : [ 83 ],
      "line-start" : 2252,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "ptr"
          }
        } ],
        "right" : [ {
          "coerced-to" : {
            "go-type" : 24,
            "kind" : "type",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 2,
              "value" : "unsafe"
            },
            "type" : "identifier",
            "value" : {
              "go-type" : 24,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "Pointer"
            }
          },
          "go-type" : 24,
          "kind" : "expression",
          "target" : {
            "go-type" : 198,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "mapPtr",
              "variable" : 82
            }
          },
          "type" : "cast"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 2252,
      "code" : "ptr := unsafe.Pointer(mapPtr)",
      "entry" : false,
      "use-vars" : [ 82 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 64 ],
      "in-vars" : [ 83 ],
      "exit" : false,
      "out-vars" : [ 83, 84 ],
      "decl-vars" : [ 84 ],
      "line-start" : 2253,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "to"
          }
        } ],
        "right" : [ {
          "coerced-to" : {
            "contained" : {
              "go-type" : 236,
              "key" : {
                "go-type" : 7,
                "kind" : "type",
                "type" : "identifier",
                "value" : {
                  "go-type" : 7,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "string"
                }
              },
              "kind" : "type",
              "type" : "map",
              "value" : {
                "go-type" : 120,
                "kind" : "type",
                "type" : "identifier",
                "value" : {
                  "go-type" : 120,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "int64"
                }
              }
            },
            "go-type" : 235,
            "kind" : "type",
            "type" : "pointer"
          },
          "go-type" : 235,
          "kind" : "expression",
          "target" : {
            "go-type" : 24,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "ptr",
              "variable" : 83
            }
          },
          "type" : "cast"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 2253,
      "code" : "to := (*map[string]int64)(ptr)",
      "entry" : false,
      "use-vars" : [ 83 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 65 ],
      "in-vars" : [ 83, 84 ],
      "exit" : false,
      "out-vars" : [ 83, 84, 85 ],
      "decl-vars" : [ 85 ],
      "line-start" : 2254,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "unfolder"
          }
        } ],
        "right" : [ {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 239,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 8,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "newUnfolderMapInt64"
            }
          },
          "go-type" : 237,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 2254,
      "code" : "unfolder := newUnfolderMapInt64()",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 84, 85, 83 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 2255,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 235,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "to",
            "variable" : 84
          }
        }, {
          "go-type" : 24,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "ptr",
            "variable" : 83
          }
        }, {
          "go-type" : 237,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "unfolder",
            "variable" : 85
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 2255,
      "code" : "return to, ptr, unfolder",
      "entry" : false,
      "use-vars" : [ 84, 83, 85 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 67 ],
      "in-vars" : [ 38 ],
      "exit" : false,
      "out-vars" : [ 38 ],
      "decl-vars" : [ ],
      "line-start" : 2257,
      "ast" : {
        "expressions" : [ {
          "go-type" : 100,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "6"
          }
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 2264,
      "code" : "case structform.Int8Type:\n\tidx := len(ctx.valueBuffer.mapPrimitive)\n\tctx.valueBuffer.mapPrimitive = append(ctx.valueBuffer.mapPrimitive, nil)\n\tmapPtr := &ctx.valueBuffer.mapPrimitive[idx]\n\tptr := unsafe.Pointer(mapPtr)\n\tto := (*map[string]int8)(ptr)\n\tunfolder := newUnfolderMapInt8()\n\treturn to, ptr, unfolder",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 68 ],
      "in-vars" : [ 38 ],
      "exit" : false,
      "out-vars" : [ 38, 86 ],
      "decl-vars" : [ 86 ],
      "line-start" : 2258,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "idx"
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "mapPrimitive",
              "variable" : 50
            },
            "go-type" : 171,
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "valueBuffer",
                "variable" : 44
              },
              "go-type" : 168,
              "kind" : "expression",
              "target" : {
                "go-type" : 2,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "ctx",
                  "variable" : 38
                }
              },
              "type" : "selector"
            },
            "type" : "selector"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 194,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Builtin",
              "kind" : "ident",
              "value" : "len"
            }
          },
          "go-type" : 38,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 2258,
      "code" : "idx := len(ctx.valueBuffer.mapPrimitive)",
      "entry" : false,
      "use-vars" : [ 38 ]
    }, {
      "update-vars" : [ 38 ],
      "successors" : [ 69 ],
      "in-vars" : [ 38, 86 ],
      "exit" : false,
      "out-vars" : [ 38, 86 ],
      "decl-vars" : [ ],
      "line-start" : 2259,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "mapPrimitive",
            "variable" : 50
          },
          "go-type" : 171,
          "kind" : "expression",
          "target" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "valueBuffer",
              "variable" : 44
            },
            "go-type" : 168,
            "kind" : "expression",
            "target" : {
              "go-type" : 2,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "ctx",
                "variable" : 38
              }
            },
            "type" : "selector"
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "arguments" : [ {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "mapPrimitive",
              "variable" : 50
            },
            "go-type" : 171,
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "valueBuffer",
                "variable" : 44
              },
              "go-type" : 168,
              "kind" : "expression",
              "target" : {
                "go-type" : 2,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "ctx",
                  "variable" : 38
                }
              },
              "type" : "selector"
            },
            "type" : "selector"
          }, {
            "go-type" : 185,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Nil",
              "kind" : "ident",
              "value" : "nil"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 196,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Builtin",
              "kind" : "ident",
              "value" : "append"
            }
          },
          "go-type" : 171,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 2259,
      "code" : "ctx.valueBuffer.mapPrimitive = append(ctx.valueBuffer.mapPrimitive, nil)",
      "entry" : false,
      "use-vars" : [ 38 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 70 ],
      "in-vars" : [ 38, 86 ],
      "exit" : false,
      "out-vars" : [ 87 ],
      "decl-vars" : [ 87 ],
      "line-start" : 2260,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "mapPtr"
          }
        } ],
        "right" : [ {
          "go-type" : 198,
          "kind" : "expression",
          "operator" : "&",
          "target" : {
            "go-type" : 172,
            "index" : {
              "go-type" : 38,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "idx",
                "variable" : 86
              }
            },
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "mapPrimitive",
                "variable" : 50
              },
              "go-type" : 171,
              "kind" : "expression",
              "target" : {
                "field" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "valueBuffer",
                  "variable" : 44
                },
                "go-type" : 168,
                "kind" : "expression",
                "target" : {
                  "go-type" : 2,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "ctx",
                    "variable" : 38
                  }
                },
                "type" : "selector"
              },
              "type" : "selector"
            },
            "type" : "index"
          },
          "type" : "unary"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 2260,
      "code" : "mapPtr := &ctx.valueBuffer.mapPrimitive[idx]",
      "entry" : false,
      "use-vars" : [ 38, 86 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 71 ],
      "in-vars" : [ 87 ],
      "exit" : false,
      "out-vars" : [ 88 ],
      "decl-vars" : [ 88 ],
      "line-start" : 2261,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "ptr"
          }
        } ],
        "right" : [ {
          "coerced-to" : {
            "go-type" : 24,
            "kind" : "type",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 2,
              "value" : "unsafe"
            },
            "type" : "identifier",
            "value" : {
              "go-type" : 24,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "Pointer"
            }
          },
          "go-type" : 24,
          "kind" : "expression",
          "target" : {
            "go-type" : 198,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "mapPtr",
              "variable" : 87
            }
          },
          "type" : "cast"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 2261,
      "code" : "ptr := unsafe.Pointer(mapPtr)",
      "entry" : false,
      "use-vars" : [ 87 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 72 ],
      "in-vars" : [ 88 ],
      "exit" : false,
      "out-vars" : [ 89, 88 ],
      "decl-vars" : [ 89 ],
      "line-start" : 2262,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "to"
          }
        } ],
        "right" : [ {
          "coerced-to" : {
            "contained" : {
              "go-type" : 242,
              "key" : {
                "go-type" : 7,
                "kind" : "type",
                "type" : "identifier",
                "value" : {
                  "go-type" : 7,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "string"
                }
              },
              "kind" : "type",
              "type" : "map",
              "value" : {
                "go-type" : 123,
                "kind" : "type",
                "type" : "identifier",
                "value" : {
                  "go-type" : 123,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "int8"
                }
              }
            },
            "go-type" : 241,
            "kind" : "type",
            "type" : "pointer"
          },
          "go-type" : 241,
          "kind" : "expression",
          "target" : {
            "go-type" : 24,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "ptr",
              "variable" : 88
            }
          },
          "type" : "cast"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 2262,
      "code" : "to := (*map[string]int8)(ptr)",
      "entry" : false,
      "use-vars" : [ 88 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 73 ],
      "in-vars" : [ 89, 88 ],
      "exit" : false,
      "out-vars" : [ 89, 88, 90 ],
      "decl-vars" : [ 90 ],
      "line-start" : 2263,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "unfolder"
          }
        } ],
        "right" : [ {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 245,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 9,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "newUnfolderMapInt8"
            }
          },
          "go-type" : 243,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 2263,
      "code" : "unfolder := newUnfolderMapInt8()",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 89, 88, 90 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 2264,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 241,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "to",
            "variable" : 89
          }
        }, {
          "go-type" : 24,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "ptr",
            "variable" : 88
          }
        }, {
          "go-type" : 243,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "unfolder",
            "variable" : 90
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 2264,
      "code" : "return to, ptr, unfolder",
      "entry" : false,
      "use-vars" : [ 90, 89, 88 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 75 ],
      "in-vars" : [ 38 ],
      "exit" : false,
      "out-vars" : [ 38 ],
      "decl-vars" : [ ],
      "line-start" : 2266,
      "ast" : {
        "expressions" : [ {
          "go-type" : 100,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "5"
          }
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 2273,
      "code" : "case structform.IntType:\n\tidx := len(ctx.valueBuffer.mapPrimitive)\n\tctx.valueBuffer.mapPrimitive = append(ctx.valueBuffer.mapPrimitive, nil)\n\tmapPtr := &ctx.valueBuffer.mapPrimitive[idx]\n\tptr := unsafe.Pointer(mapPtr)\n\tto := (*map[string]int)(ptr)\n\tunfolder := newUnfolderMapInt()\n\treturn to, ptr, unfolder",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 76 ],
      "in-vars" : [ 38 ],
      "exit" : false,
      "out-vars" : [ 38, 91 ],
      "decl-vars" : [ 91 ],
      "line-start" : 2267,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "idx"
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "mapPrimitive",
              "variable" : 50
            },
            "go-type" : 171,
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "valueBuffer",
                "variable" : 44
              },
              "go-type" : 168,
              "kind" : "expression",
              "target" : {
                "go-type" : 2,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "ctx",
                  "variable" : 38
                }
              },
              "type" : "selector"
            },
            "type" : "selector"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 194,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Builtin",
              "kind" : "ident",
              "value" : "len"
            }
          },
          "go-type" : 38,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 2267,
      "code" : "idx := len(ctx.valueBuffer.mapPrimitive)",
      "entry" : false,
      "use-vars" : [ 38 ]
    }, {
      "update-vars" : [ 38 ],
      "successors" : [ 77 ],
      "in-vars" : [ 38, 91 ],
      "exit" : false,
      "out-vars" : [ 38, 91 ],
      "decl-vars" : [ ],
      "line-start" : 2268,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "mapPrimitive",
            "variable" : 50
          },
          "go-type" : 171,
          "kind" : "expression",
          "target" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "valueBuffer",
              "variable" : 44
            },
            "go-type" : 168,
            "kind" : "expression",
            "target" : {
              "go-type" : 2,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "ctx",
                "variable" : 38
              }
            },
            "type" : "selector"
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "arguments" : [ {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "mapPrimitive",
              "variable" : 50
            },
            "go-type" : 171,
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "valueBuffer",
                "variable" : 44
              },
              "go-type" : 168,
              "kind" : "expression",
              "target" : {
                "go-type" : 2,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "ctx",
                  "variable" : 38
                }
              },
              "type" : "selector"
            },
            "type" : "selector"
          }, {
            "go-type" : 185,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Nil",
              "kind" : "ident",
              "value" : "nil"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 196,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Builtin",
              "kind" : "ident",
              "value" : "append"
            }
          },
          "go-type" : 171,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 2268,
      "code" : "ctx.valueBuffer.mapPrimitive = append(ctx.valueBuffer.mapPrimitive, nil)",
      "entry" : false,
      "use-vars" : [ 38 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 78 ],
      "in-vars" : [ 38, 91 ],
      "exit" : false,
      "out-vars" : [ 92 ],
      "decl-vars" : [ 92 ],
      "line-start" : 2269,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "mapPtr"
          }
        } ],
        "right" : [ {
          "go-type" : 198,
          "kind" : "expression",
          "operator" : "&",
          "target" : {
            "go-type" : 172,
            "index" : {
              "go-type" : 38,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "idx",
                "variable" : 91
              }
            },
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "mapPrimitive",
                "variable" : 50
              },
              "go-type" : 171,
              "kind" : "expression",
              "target" : {
                "field" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "valueBuffer",
                  "variable" : 44
                },
                "go-type" : 168,
                "kind" : "expression",
                "target" : {
                  "go-type" : 2,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "ctx",
                    "variable" : 38
                  }
                },
                "type" : "selector"
              },
              "type" : "selector"
            },
            "type" : "index"
          },
          "type" : "unary"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 2269,
      "code" : "mapPtr := &ctx.valueBuffer.mapPrimitive[idx]",
      "entry" : false,
      "use-vars" : [ 38, 91 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 79 ],
      "in-vars" : [ 92 ],
      "exit" : false,
      "out-vars" : [ 93 ],
      "decl-vars" : [ 93 ],
      "line-start" : 2270,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "ptr"
          }
        } ],
        "right" : [ {
          "coerced-to" : {
            "go-type" : 24,
            "kind" : "type",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 2,
              "value" : "unsafe"
            },
            "type" : "identifier",
            "value" : {
              "go-type" : 24,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "Pointer"
            }
          },
          "go-type" : 24,
          "kind" : "expression",
          "target" : {
            "go-type" : 198,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "mapPtr",
              "variable" : 92
            }
          },
          "type" : "cast"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 2270,
      "code" : "ptr := unsafe.Pointer(mapPtr)",
      "entry" : false,
      "use-vars" : [ 92 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 80 ],
      "in-vars" : [ 93 ],
      "exit" : false,
      "out-vars" : [ 93, 94 ],
      "decl-vars" : [ 94 ],
      "line-start" : 2271,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "to"
          }
        } ],
        "right" : [ {
          "coerced-to" : {
            "contained" : {
              "go-type" : 248,
              "key" : {
                "go-type" : 7,
                "kind" : "type",
                "type" : "identifier",
                "value" : {
                  "go-type" : 7,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "string"
                }
              },
              "kind" : "type",
              "type" : "map",
              "value" : {
                "go-type" : 38,
                "kind" : "type",
                "type" : "identifier",
                "value" : {
                  "go-type" : 38,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "int"
                }
              }
            },
            "go-type" : 247,
            "kind" : "type",
            "type" : "pointer"
          },
          "go-type" : 247,
          "kind" : "expression",
          "target" : {
            "go-type" : 24,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "ptr",
              "variable" : 93
            }
          },
          "type" : "cast"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 2271,
      "code" : "to := (*map[string]int)(ptr)",
      "entry" : false,
      "use-vars" : [ 93 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 81 ],
      "in-vars" : [ 93, 94 ],
      "exit" : false,
      "out-vars" : [ 95, 94, 93 ],
      "decl-vars" : [ 95 ],
      "line-start" : 2272,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "unfolder"
          }
        } ],
        "right" : [ {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 251,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 10,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "newUnfolderMapInt"
            }
          },
          "go-type" : 249,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 2272,
      "code" : "unfolder := newUnfolderMapInt()",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 93, 95, 94 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 2273,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 247,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "to",
            "variable" : 94
          }
        }, {
          "go-type" : 24,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "ptr",
            "variable" : 93
          }
        }, {
          "go-type" : 249,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "unfolder",
            "variable" : 95
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 2273,
      "code" : "return to, ptr, unfolder",
      "entry" : false,
      "use-vars" : [ 95, 94, 93 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 83 ],
      "in-vars" : [ 38 ],
      "exit" : false,
      "out-vars" : [ 38 ],
      "decl-vars" : [ ],
      "line-start" : 2275,
      "ast" : {
        "expressions" : [ {
          "go-type" : 100,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "2"
          }
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 2282,
      "code" : "case structform.StringType:\n\tidx := len(ctx.valueBuffer.mapPrimitive)\n\tctx.valueBuffer.mapPrimitive = append(ctx.valueBuffer.mapPrimitive, nil)\n\tmapPtr := &ctx.valueBuffer.mapPrimitive[idx]\n\tptr := unsafe.Pointer(mapPtr)\n\tto := (*map[string]string)(ptr)\n\tunfolder := newUnfolderMapString()\n\treturn to, ptr, unfolder",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 84 ],
      "in-vars" : [ 38 ],
      "exit" : false,
      "out-vars" : [ 96, 38 ],
      "decl-vars" : [ 96 ],
      "line-start" : 2276,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "idx"
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "mapPrimitive",
              "variable" : 50
            },
            "go-type" : 171,
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "valueBuffer",
                "variable" : 44
              },
              "go-type" : 168,
              "kind" : "expression",
              "target" : {
                "go-type" : 2,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "ctx",
                  "variable" : 38
                }
              },
              "type" : "selector"
            },
            "type" : "selector"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 194,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Builtin",
              "kind" : "ident",
              "value" : "len"
            }
          },
          "go-type" : 38,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 2276,
      "code" : "idx := len(ctx.valueBuffer.mapPrimitive)",
      "entry" : false,
      "use-vars" : [ 38 ]
    }, {
      "update-vars" : [ 38 ],
      "successors" : [ 85 ],
      "in-vars" : [ 96, 38 ],
      "exit" : false,
      "out-vars" : [ 96, 38 ],
      "decl-vars" : [ ],
      "line-start" : 2277,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "mapPrimitive",
            "variable" : 50
          },
          "go-type" : 171,
          "kind" : "expression",
          "target" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "valueBuffer",
              "variable" : 44
            },
            "go-type" : 168,
            "kind" : "expression",
            "target" : {
              "go-type" : 2,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "ctx",
                "variable" : 38
              }
            },
            "type" : "selector"
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "arguments" : [ {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "mapPrimitive",
              "variable" : 50
            },
            "go-type" : 171,
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "valueBuffer",
                "variable" : 44
              },
              "go-type" : 168,
              "kind" : "expression",
              "target" : {
                "go-type" : 2,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "ctx",
                  "variable" : 38
                }
              },
              "type" : "selector"
            },
            "type" : "selector"
          }, {
            "go-type" : 185,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Nil",
              "kind" : "ident",
              "value" : "nil"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 196,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Builtin",
              "kind" : "ident",
              "value" : "append"
            }
          },
          "go-type" : 171,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 2277,
      "code" : "ctx.valueBuffer.mapPrimitive = append(ctx.valueBuffer.mapPrimitive, nil)",
      "entry" : false,
      "use-vars" : [ 38 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 86 ],
      "in-vars" : [ 96, 38 ],
      "exit" : false,
      "out-vars" : [ 97 ],
      "decl-vars" : [ 97 ],
      "line-start" : 2278,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "mapPtr"
          }
        } ],
        "right" : [ {
          "go-type" : 198,
          "kind" : "expression",
          "operator" : "&",
          "target" : {
            "go-type" : 172,
            "index" : {
              "go-type" : 38,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "idx",
                "variable" : 96
              }
            },
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "mapPrimitive",
                "variable" : 50
              },
              "go-type" : 171,
              "kind" : "expression",
              "target" : {
                "field" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "valueBuffer",
                  "variable" : 44
                },
                "go-type" : 168,
                "kind" : "expression",
                "target" : {
                  "go-type" : 2,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "ctx",
                    "variable" : 38
                  }
                },
                "type" : "selector"
              },
              "type" : "selector"
            },
            "type" : "index"
          },
          "type" : "unary"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 2278,
      "code" : "mapPtr := &ctx.valueBuffer.mapPrimitive[idx]",
      "entry" : false,
      "use-vars" : [ 38, 96 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 87 ],
      "in-vars" : [ 97 ],
      "exit" : false,
      "out-vars" : [ 98 ],
      "decl-vars" : [ 98 ],
      "line-start" : 2279,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "ptr"
          }
        } ],
        "right" : [ {
          "coerced-to" : {
            "go-type" : 24,
            "kind" : "type",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 2,
              "value" : "unsafe"
            },
            "type" : "identifier",
            "value" : {
              "go-type" : 24,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "Pointer"
            }
          },
          "go-type" : 24,
          "kind" : "expression",
          "target" : {
            "go-type" : 198,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "mapPtr",
              "variable" : 97
            }
          },
          "type" : "cast"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 2279,
      "code" : "ptr := unsafe.Pointer(mapPtr)",
      "entry" : false,
      "use-vars" : [ 97 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 88 ],
      "in-vars" : [ 98 ],
      "exit" : false,
      "out-vars" : [ 99, 98 ],
      "decl-vars" : [ 99 ],
      "line-start" : 2280,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "to"
          }
        } ],
        "right" : [ {
          "coerced-to" : {
            "contained" : {
              "go-type" : 254,
              "key" : {
                "go-type" : 7,
                "kind" : "type",
                "type" : "identifier",
                "value" : {
                  "go-type" : 7,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "string"
                }
              },
              "kind" : "type",
              "type" : "map",
              "value" : {
                "go-type" : 7,
                "kind" : "type",
                "type" : "identifier",
                "value" : {
                  "go-type" : 7,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "string"
                }
              }
            },
            "go-type" : 253,
            "kind" : "type",
            "type" : "pointer"
          },
          "go-type" : 253,
          "kind" : "expression",
          "target" : {
            "go-type" : 24,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "ptr",
              "variable" : 98
            }
          },
          "type" : "cast"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 2280,
      "code" : "to := (*map[string]string)(ptr)",
      "entry" : false,
      "use-vars" : [ 98 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 89 ],
      "in-vars" : [ 98, 99 ],
      "exit" : false,
      "out-vars" : [ 99, 98, 100 ],
      "decl-vars" : [ 100 ],
      "line-start" : 2281,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "unfolder"
          }
        } ],
        "right" : [ {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 257,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 11,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "newUnfolderMapString"
            }
          },
          "go-type" : 255,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 2281,
      "code" : "unfolder := newUnfolderMapString()",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 99, 98, 100 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 2282,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 253,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "to",
            "variable" : 99
          }
        }, {
          "go-type" : 24,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "ptr",
            "variable" : 98
          }
        }, {
          "go-type" : 255,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "unfolder",
            "variable" : 100
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 2282,
      "code" : "return to, ptr, unfolder",
      "entry" : false,
      "use-vars" : [ 99, 98, 100 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 91 ],
      "in-vars" : [ 38 ],
      "exit" : false,
      "out-vars" : [ 38 ],
      "decl-vars" : [ ],
      "line-start" : 2284,
      "ast" : {
        "expressions" : [ {
          "go-type" : 100,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "12"
          }
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 2291,
      "code" : "case structform.Uint16Type:\n\tidx := len(ctx.valueBuffer.mapPrimitive)\n\tctx.valueBuffer.mapPrimitive = append(ctx.valueBuffer.mapPrimitive, nil)\n\tmapPtr := &ctx.valueBuffer.mapPrimitive[idx]\n\tptr := unsafe.Pointer(mapPtr)\n\tto := (*map[string]uint16)(ptr)\n\tunfolder := newUnfolderMapUint16()\n\treturn to, ptr, unfolder",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 92 ],
      "in-vars" : [ 38 ],
      "exit" : false,
      "out-vars" : [ 38, 101 ],
      "decl-vars" : [ 101 ],
      "line-start" : 2285,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "idx"
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "mapPrimitive",
              "variable" : 50
            },
            "go-type" : 171,
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "valueBuffer",
                "variable" : 44
              },
              "go-type" : 168,
              "kind" : "expression",
              "target" : {
                "go-type" : 2,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "ctx",
                  "variable" : 38
                }
              },
              "type" : "selector"
            },
            "type" : "selector"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 194,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Builtin",
              "kind" : "ident",
              "value" : "len"
            }
          },
          "go-type" : 38,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 2285,
      "code" : "idx := len(ctx.valueBuffer.mapPrimitive)",
      "entry" : false,
      "use-vars" : [ 38 ]
    }, {
      "update-vars" : [ 38 ],
      "successors" : [ 93 ],
      "in-vars" : [ 38, 101 ],
      "exit" : false,
      "out-vars" : [ 38, 101 ],
      "decl-vars" : [ ],
      "line-start" : 2286,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "mapPrimitive",
            "variable" : 50
          },
          "go-type" : 171,
          "kind" : "expression",
          "target" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "valueBuffer",
              "variable" : 44
            },
            "go-type" : 168,
            "kind" : "expression",
            "target" : {
              "go-type" : 2,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "ctx",
                "variable" : 38
              }
            },
            "type" : "selector"
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "arguments" : [ {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "mapPrimitive",
              "variable" : 50
            },
            "go-type" : 171,
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "valueBuffer",
                "variable" : 44
              },
              "go-type" : 168,
              "kind" : "expression",
              "target" : {
                "go-type" : 2,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "ctx",
                  "variable" : 38
                }
              },
              "type" : "selector"
            },
            "type" : "selector"
          }, {
            "go-type" : 185,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Nil",
              "kind" : "ident",
              "value" : "nil"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 196,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Builtin",
              "kind" : "ident",
              "value" : "append"
            }
          },
          "go-type" : 171,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 2286,
      "code" : "ctx.valueBuffer.mapPrimitive = append(ctx.valueBuffer.mapPrimitive, nil)",
      "entry" : false,
      "use-vars" : [ 38 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 94 ],
      "in-vars" : [ 38, 101 ],
      "exit" : false,
      "out-vars" : [ 102 ],
      "decl-vars" : [ 102 ],
      "line-start" : 2287,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "mapPtr"
          }
        } ],
        "right" : [ {
          "go-type" : 198,
          "kind" : "expression",
          "operator" : "&",
          "target" : {
            "go-type" : 172,
            "index" : {
              "go-type" : 38,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "idx",
                "variable" : 101
              }
            },
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "mapPrimitive",
                "variable" : 50
              },
              "go-type" : 171,
              "kind" : "expression",
              "target" : {
                "field" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "valueBuffer",
                  "variable" : 44
                },
                "go-type" : 168,
                "kind" : "expression",
                "target" : {
                  "go-type" : 2,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "ctx",
                    "variable" : 38
                  }
                },
                "type" : "selector"
              },
              "type" : "selector"
            },
            "type" : "index"
          },
          "type" : "unary"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 2287,
      "code" : "mapPtr := &ctx.valueBuffer.mapPrimitive[idx]",
      "entry" : false,
      "use-vars" : [ 101, 38 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 95 ],
      "in-vars" : [ 102 ],
      "exit" : false,
      "out-vars" : [ 103 ],
      "decl-vars" : [ 103 ],
      "line-start" : 2288,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "ptr"
          }
        } ],
        "right" : [ {
          "coerced-to" : {
            "go-type" : 24,
            "kind" : "type",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 2,
              "value" : "unsafe"
            },
            "type" : "identifier",
            "value" : {
              "go-type" : 24,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "Pointer"
            }
          },
          "go-type" : 24,
          "kind" : "expression",
          "target" : {
            "go-type" : 198,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "mapPtr",
              "variable" : 102
            }
          },
          "type" : "cast"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 2288,
      "code" : "ptr := unsafe.Pointer(mapPtr)",
      "entry" : false,
      "use-vars" : [ 102 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 96 ],
      "in-vars" : [ 103 ],
      "exit" : false,
      "out-vars" : [ 103, 104 ],
      "decl-vars" : [ 104 ],
      "line-start" : 2289,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "to"
          }
        } ],
        "right" : [ {
          "coerced-to" : {
            "contained" : {
              "go-type" : 260,
              "key" : {
                "go-type" : 7,
                "kind" : "type",
                "type" : "identifier",
                "value" : {
                  "go-type" : 7,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "string"
                }
              },
              "kind" : "type",
              "type" : "map",
              "value" : {
                "go-type" : 84,
                "kind" : "type",
                "type" : "identifier",
                "value" : {
                  "go-type" : 84,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "uint16"
                }
              }
            },
            "go-type" : 259,
            "kind" : "type",
            "type" : "pointer"
          },
          "go-type" : 259,
          "kind" : "expression",
          "target" : {
            "go-type" : 24,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "ptr",
              "variable" : 103
            }
          },
          "type" : "cast"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 2289,
      "code" : "to := (*map[string]uint16)(ptr)",
      "entry" : false,
      "use-vars" : [ 103 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 97 ],
      "in-vars" : [ 103, 104 ],
      "exit" : false,
      "out-vars" : [ 105, 104, 103 ],
      "decl-vars" : [ 105 ],
      "line-start" : 2290,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "unfolder"
          }
        } ],
        "right" : [ {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 263,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 12,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "newUnfolderMapUint16"
            }
          },
          "go-type" : 261,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 2290,
      "code" : "unfolder := newUnfolderMapUint16()",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 104, 103, 105 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 2291,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 259,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "to",
            "variable" : 104
          }
        }, {
          "go-type" : 24,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "ptr",
            "variable" : 103
          }
        }, {
          "go-type" : 261,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "unfolder",
            "variable" : 105
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 2291,
      "code" : "return to, ptr, unfolder",
      "entry" : false,
      "use-vars" : [ 105, 104, 103 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 99 ],
      "in-vars" : [ 38 ],
      "exit" : false,
      "out-vars" : [ 38 ],
      "decl-vars" : [ ],
      "line-start" : 2293,
      "ast" : {
        "expressions" : [ {
          "go-type" : 100,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "13"
          }
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 2300,
      "code" : "case structform.Uint32Type:\n\tidx := len(ctx.valueBuffer.mapPrimitive)\n\tctx.valueBuffer.mapPrimitive = append(ctx.valueBuffer.mapPrimitive, nil)\n\tmapPtr := &ctx.valueBuffer.mapPrimitive[idx]\n\tptr := unsafe.Pointer(mapPtr)\n\tto := (*map[string]uint32)(ptr)\n\tunfolder := newUnfolderMapUint32()\n\treturn to, ptr, unfolder",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 100 ],
      "in-vars" : [ 38 ],
      "exit" : false,
      "out-vars" : [ 38, 106 ],
      "decl-vars" : [ 106 ],
      "line-start" : 2294,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "idx"
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "mapPrimitive",
              "variable" : 50
            },
            "go-type" : 171,
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "valueBuffer",
                "variable" : 44
              },
              "go-type" : 168,
              "kind" : "expression",
              "target" : {
                "go-type" : 2,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "ctx",
                  "variable" : 38
                }
              },
              "type" : "selector"
            },
            "type" : "selector"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 194,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Builtin",
              "kind" : "ident",
              "value" : "len"
            }
          },
          "go-type" : 38,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 2294,
      "code" : "idx := len(ctx.valueBuffer.mapPrimitive)",
      "entry" : false,
      "use-vars" : [ 38 ]
    }, {
      "update-vars" : [ 38 ],
      "successors" : [ 101 ],
      "in-vars" : [ 38, 106 ],
      "exit" : false,
      "out-vars" : [ 38, 106 ],
      "decl-vars" : [ ],
      "line-start" : 2295,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "mapPrimitive",
            "variable" : 50
          },
          "go-type" : 171,
          "kind" : "expression",
          "target" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "valueBuffer",
              "variable" : 44
            },
            "go-type" : 168,
            "kind" : "expression",
            "target" : {
              "go-type" : 2,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "ctx",
                "variable" : 38
              }
            },
            "type" : "selector"
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "arguments" : [ {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "mapPrimitive",
              "variable" : 50
            },
            "go-type" : 171,
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "valueBuffer",
                "variable" : 44
              },
              "go-type" : 168,
              "kind" : "expression",
              "target" : {
                "go-type" : 2,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "ctx",
                  "variable" : 38
                }
              },
              "type" : "selector"
            },
            "type" : "selector"
          }, {
            "go-type" : 185,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Nil",
              "kind" : "ident",
              "value" : "nil"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 196,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Builtin",
              "kind" : "ident",
              "value" : "append"
            }
          },
          "go-type" : 171,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 2295,
      "code" : "ctx.valueBuffer.mapPrimitive = append(ctx.valueBuffer.mapPrimitive, nil)",
      "entry" : false,
      "use-vars" : [ 38 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 102 ],
      "in-vars" : [ 106, 38 ],
      "exit" : false,
      "out-vars" : [ 107 ],
      "decl-vars" : [ 107 ],
      "line-start" : 2296,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "mapPtr"
          }
        } ],
        "right" : [ {
          "go-type" : 198,
          "kind" : "expression",
          "operator" : "&",
          "target" : {
            "go-type" : 172,
            "index" : {
              "go-type" : 38,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "idx",
                "variable" : 106
              }
            },
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "mapPrimitive",
                "variable" : 50
              },
              "go-type" : 171,
              "kind" : "expression",
              "target" : {
                "field" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "valueBuffer",
                  "variable" : 44
                },
                "go-type" : 168,
                "kind" : "expression",
                "target" : {
                  "go-type" : 2,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "ctx",
                    "variable" : 38
                  }
                },
                "type" : "selector"
              },
              "type" : "selector"
            },
            "type" : "index"
          },
          "type" : "unary"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 2296,
      "code" : "mapPtr := &ctx.valueBuffer.mapPrimitive[idx]",
      "entry" : false,
      "use-vars" : [ 38, 106 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 103 ],
      "in-vars" : [ 107 ],
      "exit" : false,
      "out-vars" : [ 108 ],
      "decl-vars" : [ 108 ],
      "line-start" : 2297,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "ptr"
          }
        } ],
        "right" : [ {
          "coerced-to" : {
            "go-type" : 24,
            "kind" : "type",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 2,
              "value" : "unsafe"
            },
            "type" : "identifier",
            "value" : {
              "go-type" : 24,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "Pointer"
            }
          },
          "go-type" : 24,
          "kind" : "expression",
          "target" : {
            "go-type" : 198,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "mapPtr",
              "variable" : 107
            }
          },
          "type" : "cast"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 2297,
      "code" : "ptr := unsafe.Pointer(mapPtr)",
      "entry" : false,
      "use-vars" : [ 107 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 104 ],
      "in-vars" : [ 108 ],
      "exit" : false,
      "out-vars" : [ 108, 109 ],
      "decl-vars" : [ 109 ],
      "line-start" : 2298,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "to"
          }
        } ],
        "right" : [ {
          "coerced-to" : {
            "contained" : {
              "go-type" : 266,
              "key" : {
                "go-type" : 7,
                "kind" : "type",
                "type" : "identifier",
                "value" : {
                  "go-type" : 7,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "string"
                }
              },
              "kind" : "type",
              "type" : "map",
              "value" : {
                "go-type" : 19,
                "kind" : "type",
                "type" : "identifier",
                "value" : {
                  "go-type" : 19,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "uint32"
                }
              }
            },
            "go-type" : 265,
            "kind" : "type",
            "type" : "pointer"
          },
          "go-type" : 265,
          "kind" : "expression",
          "target" : {
            "go-type" : 24,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "ptr",
              "variable" : 108
            }
          },
          "type" : "cast"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 2298,
      "code" : "to := (*map[string]uint32)(ptr)",
      "entry" : false,
      "use-vars" : [ 108 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 105 ],
      "in-vars" : [ 108, 109 ],
      "exit" : false,
      "out-vars" : [ 108, 110, 109 ],
      "decl-vars" : [ 110 ],
      "line-start" : 2299,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "unfolder"
          }
        } ],
        "right" : [ {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 269,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 13,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "newUnfolderMapUint32"
            }
          },
          "go-type" : 267,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 2299,
      "code" : "unfolder := newUnfolderMapUint32()",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 108, 110, 109 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 2300,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 265,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "to",
            "variable" : 109
          }
        }, {
          "go-type" : 24,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "ptr",
            "variable" : 108
          }
        }, {
          "go-type" : 267,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "unfolder",
            "variable" : 110
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 2300,
      "code" : "return to, ptr, unfolder",
      "entry" : false,
      "use-vars" : [ 108, 110, 109 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 107 ],
      "in-vars" : [ 38 ],
      "exit" : false,
      "out-vars" : [ 38 ],
      "decl-vars" : [ ],
      "line-start" : 2302,
      "ast" : {
        "expressions" : [ {
          "go-type" : 100,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "14"
          }
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 2309,
      "code" : "case structform.Uint64Type:\n\tidx := len(ctx.valueBuffer.mapPrimitive)\n\tctx.valueBuffer.mapPrimitive = append(ctx.valueBuffer.mapPrimitive, nil)\n\tmapPtr := &ctx.valueBuffer.mapPrimitive[idx]\n\tptr := unsafe.Pointer(mapPtr)\n\tto := (*map[string]uint64)(ptr)\n\tunfolder := newUnfolderMapUint64()\n\treturn to, ptr, unfolder",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 108 ],
      "in-vars" : [ 38 ],
      "exit" : false,
      "out-vars" : [ 38, 111 ],
      "decl-vars" : [ 111 ],
      "line-start" : 2303,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "idx"
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "mapPrimitive",
              "variable" : 50
            },
            "go-type" : 171,
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "valueBuffer",
                "variable" : 44
              },
              "go-type" : 168,
              "kind" : "expression",
              "target" : {
                "go-type" : 2,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "ctx",
                  "variable" : 38
                }
              },
              "type" : "selector"
            },
            "type" : "selector"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 194,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Builtin",
              "kind" : "ident",
              "value" : "len"
            }
          },
          "go-type" : 38,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 2303,
      "code" : "idx := len(ctx.valueBuffer.mapPrimitive)",
      "entry" : false,
      "use-vars" : [ 38 ]
    }, {
      "update-vars" : [ 38 ],
      "successors" : [ 109 ],
      "in-vars" : [ 38, 111 ],
      "exit" : false,
      "out-vars" : [ 38, 111 ],
      "decl-vars" : [ ],
      "line-start" : 2304,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "mapPrimitive",
            "variable" : 50
          },
          "go-type" : 171,
          "kind" : "expression",
          "target" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "valueBuffer",
              "variable" : 44
            },
            "go-type" : 168,
            "kind" : "expression",
            "target" : {
              "go-type" : 2,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "ctx",
                "variable" : 38
              }
            },
            "type" : "selector"
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "arguments" : [ {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "mapPrimitive",
              "variable" : 50
            },
            "go-type" : 171,
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "valueBuffer",
                "variable" : 44
              },
              "go-type" : 168,
              "kind" : "expression",
              "target" : {
                "go-type" : 2,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "ctx",
                  "variable" : 38
                }
              },
              "type" : "selector"
            },
            "type" : "selector"
          }, {
            "go-type" : 185,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Nil",
              "kind" : "ident",
              "value" : "nil"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 196,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Builtin",
              "kind" : "ident",
              "value" : "append"
            }
          },
          "go-type" : 171,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 2304,
      "code" : "ctx.valueBuffer.mapPrimitive = append(ctx.valueBuffer.mapPrimitive, nil)",
      "entry" : false,
      "use-vars" : [ 38 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 110 ],
      "in-vars" : [ 38, 111 ],
      "exit" : false,
      "out-vars" : [ 112 ],
      "decl-vars" : [ 112 ],
      "line-start" : 2305,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "mapPtr"
          }
        } ],
        "right" : [ {
          "go-type" : 198,
          "kind" : "expression",
          "operator" : "&",
          "target" : {
            "go-type" : 172,
            "index" : {
              "go-type" : 38,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "idx",
                "variable" : 111
              }
            },
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "mapPrimitive",
                "variable" : 50
              },
              "go-type" : 171,
              "kind" : "expression",
              "target" : {
                "field" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "valueBuffer",
                  "variable" : 44
                },
                "go-type" : 168,
                "kind" : "expression",
                "target" : {
                  "go-type" : 2,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "ctx",
                    "variable" : 38
                  }
                },
                "type" : "selector"
              },
              "type" : "selector"
            },
            "type" : "index"
          },
          "type" : "unary"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 2305,
      "code" : "mapPtr := &ctx.valueBuffer.mapPrimitive[idx]",
      "entry" : false,
      "use-vars" : [ 111, 38 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 111 ],
      "in-vars" : [ 112 ],
      "exit" : false,
      "out-vars" : [ 113 ],
      "decl-vars" : [ 113 ],
      "line-start" : 2306,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "ptr"
          }
        } ],
        "right" : [ {
          "coerced-to" : {
            "go-type" : 24,
            "kind" : "type",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 2,
              "value" : "unsafe"
            },
            "type" : "identifier",
            "value" : {
              "go-type" : 24,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "Pointer"
            }
          },
          "go-type" : 24,
          "kind" : "expression",
          "target" : {
            "go-type" : 198,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "mapPtr",
              "variable" : 112
            }
          },
          "type" : "cast"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 2306,
      "code" : "ptr := unsafe.Pointer(mapPtr)",
      "entry" : false,
      "use-vars" : [ 112 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 112 ],
      "in-vars" : [ 113 ],
      "exit" : false,
      "out-vars" : [ 113, 114 ],
      "decl-vars" : [ 114 ],
      "line-start" : 2307,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "to"
          }
        } ],
        "right" : [ {
          "coerced-to" : {
            "contained" : {
              "go-type" : 272,
              "key" : {
                "go-type" : 7,
                "kind" : "type",
                "type" : "identifier",
                "value" : {
                  "go-type" : 7,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "string"
                }
              },
              "kind" : "type",
              "type" : "map",
              "value" : {
                "go-type" : 137,
                "kind" : "type",
                "type" : "identifier",
                "value" : {
                  "go-type" : 137,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "uint64"
                }
              }
            },
            "go-type" : 271,
            "kind" : "type",
            "type" : "pointer"
          },
          "go-type" : 271,
          "kind" : "expression",
          "target" : {
            "go-type" : 24,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "ptr",
              "variable" : 113
            }
          },
          "type" : "cast"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 2307,
      "code" : "to := (*map[string]uint64)(ptr)",
      "entry" : false,
      "use-vars" : [ 113 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 113 ],
      "in-vars" : [ 114, 113 ],
      "exit" : false,
      "out-vars" : [ 113, 114, 115 ],
      "decl-vars" : [ 115 ],
      "line-start" : 2308,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "unfolder"
          }
        } ],
        "right" : [ {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 275,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 14,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "newUnfolderMapUint64"
            }
          },
          "go-type" : 273,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 2308,
      "code" : "unfolder := newUnfolderMapUint64()",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 113, 114, 115 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 2309,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 271,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "to",
            "variable" : 114
          }
        }, {
          "go-type" : 24,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "ptr",
            "variable" : 113
          }
        }, {
          "go-type" : 273,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "unfolder",
            "variable" : 115
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 2309,
      "code" : "return to, ptr, unfolder",
      "entry" : false,
      "use-vars" : [ 114, 113, 115 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 115 ],
      "in-vars" : [ 38 ],
      "exit" : false,
      "out-vars" : [ 38 ],
      "decl-vars" : [ ],
      "line-start" : 2311,
      "ast" : {
        "expressions" : [ {
          "go-type" : 100,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "11"
          }
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 2318,
      "code" : "case structform.Uint8Type:\n\tidx := len(ctx.valueBuffer.mapPrimitive)\n\tctx.valueBuffer.mapPrimitive = append(ctx.valueBuffer.mapPrimitive, nil)\n\tmapPtr := &ctx.valueBuffer.mapPrimitive[idx]\n\tptr := unsafe.Pointer(mapPtr)\n\tto := (*map[string]uint8)(ptr)\n\tunfolder := newUnfolderMapUint8()\n\treturn to, ptr, unfolder",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 116 ],
      "in-vars" : [ 38 ],
      "exit" : false,
      "out-vars" : [ 38, 116 ],
      "decl-vars" : [ 116 ],
      "line-start" : 2312,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "idx"
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "mapPrimitive",
              "variable" : 50
            },
            "go-type" : 171,
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "valueBuffer",
                "variable" : 44
              },
              "go-type" : 168,
              "kind" : "expression",
              "target" : {
                "go-type" : 2,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "ctx",
                  "variable" : 38
                }
              },
              "type" : "selector"
            },
            "type" : "selector"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 194,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Builtin",
              "kind" : "ident",
              "value" : "len"
            }
          },
          "go-type" : 38,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 2312,
      "code" : "idx := len(ctx.valueBuffer.mapPrimitive)",
      "entry" : false,
      "use-vars" : [ 38 ]
    }, {
      "update-vars" : [ 38 ],
      "successors" : [ 117 ],
      "in-vars" : [ 116, 38 ],
      "exit" : false,
      "out-vars" : [ 38, 116 ],
      "decl-vars" : [ ],
      "line-start" : 2313,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "mapPrimitive",
            "variable" : 50
          },
          "go-type" : 171,
          "kind" : "expression",
          "target" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "valueBuffer",
              "variable" : 44
            },
            "go-type" : 168,
            "kind" : "expression",
            "target" : {
              "go-type" : 2,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "ctx",
                "variable" : 38
              }
            },
            "type" : "selector"
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "arguments" : [ {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "mapPrimitive",
              "variable" : 50
            },
            "go-type" : 171,
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "valueBuffer",
                "variable" : 44
              },
              "go-type" : 168,
              "kind" : "expression",
              "target" : {
                "go-type" : 2,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "ctx",
                  "variable" : 38
                }
              },
              "type" : "selector"
            },
            "type" : "selector"
          }, {
            "go-type" : 185,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Nil",
              "kind" : "ident",
              "value" : "nil"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 196,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Builtin",
              "kind" : "ident",
              "value" : "append"
            }
          },
          "go-type" : 171,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 2313,
      "code" : "ctx.valueBuffer.mapPrimitive = append(ctx.valueBuffer.mapPrimitive, nil)",
      "entry" : false,
      "use-vars" : [ 38 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 118 ],
      "in-vars" : [ 38, 116 ],
      "exit" : false,
      "out-vars" : [ 117 ],
      "decl-vars" : [ 117 ],
      "line-start" : 2314,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "mapPtr"
          }
        } ],
        "right" : [ {
          "go-type" : 198,
          "kind" : "expression",
          "operator" : "&",
          "target" : {
            "go-type" : 172,
            "index" : {
              "go-type" : 38,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "idx",
                "variable" : 116
              }
            },
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "mapPrimitive",
                "variable" : 50
              },
              "go-type" : 171,
              "kind" : "expression",
              "target" : {
                "field" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "valueBuffer",
                  "variable" : 44
                },
                "go-type" : 168,
                "kind" : "expression",
                "target" : {
                  "go-type" : 2,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "ctx",
                    "variable" : 38
                  }
                },
                "type" : "selector"
              },
              "type" : "selector"
            },
            "type" : "index"
          },
          "type" : "unary"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 2314,
      "code" : "mapPtr := &ctx.valueBuffer.mapPrimitive[idx]",
      "entry" : false,
      "use-vars" : [ 38, 116 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 119 ],
      "in-vars" : [ 117 ],
      "exit" : false,
      "out-vars" : [ 118 ],
      "decl-vars" : [ 118 ],
      "line-start" : 2315,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "ptr"
          }
        } ],
        "right" : [ {
          "coerced-to" : {
            "go-type" : 24,
            "kind" : "type",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 2,
              "value" : "unsafe"
            },
            "type" : "identifier",
            "value" : {
              "go-type" : 24,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "Pointer"
            }
          },
          "go-type" : 24,
          "kind" : "expression",
          "target" : {
            "go-type" : 198,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "mapPtr",
              "variable" : 117
            }
          },
          "type" : "cast"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 2315,
      "code" : "ptr := unsafe.Pointer(mapPtr)",
      "entry" : false,
      "use-vars" : [ 117 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 120 ],
      "in-vars" : [ 118 ],
      "exit" : false,
      "out-vars" : [ 119, 118 ],
      "decl-vars" : [ 119 ],
      "line-start" : 2316,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "to"
          }
        } ],
        "right" : [ {
          "coerced-to" : {
            "contained" : {
              "go-type" : 206,
              "key" : {
                "go-type" : 7,
                "kind" : "type",
                "type" : "identifier",
                "value" : {
                  "go-type" : 7,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "string"
                }
              },
              "kind" : "type",
              "type" : "map",
              "value" : {
                "go-type" : 21,
                "kind" : "type",
                "type" : "identifier",
                "value" : {
                  "go-type" : 21,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "uint8"
                }
              }
            },
            "go-type" : 205,
            "kind" : "type",
            "type" : "pointer"
          },
          "go-type" : 205,
          "kind" : "expression",
          "target" : {
            "go-type" : 24,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "ptr",
              "variable" : 118
            }
          },
          "type" : "cast"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 2316,
      "code" : "to := (*map[string]uint8)(ptr)",
      "entry" : false,
      "use-vars" : [ 118 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 121 ],
      "in-vars" : [ 119, 118 ],
      "exit" : false,
      "out-vars" : [ 120, 119, 118 ],
      "decl-vars" : [ 120 ],
      "line-start" : 2317,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "unfolder"
          }
        } ],
        "right" : [ {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 209,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 3,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "newUnfolderMapUint8"
            }
          },
          "go-type" : 207,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 2317,
      "code" : "unfolder := newUnfolderMapUint8()",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 120, 119, 118 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 2318,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 205,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "to",
            "variable" : 119
          }
        }, {
          "go-type" : 24,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "ptr",
            "variable" : 118
          }
        }, {
          "go-type" : 207,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "unfolder",
            "variable" : 120
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 2318,
      "code" : "return to, ptr, unfolder",
      "entry" : false,
      "use-vars" : [ 120, 119, 118 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 123 ],
      "in-vars" : [ 38 ],
      "exit" : false,
      "out-vars" : [ 38 ],
      "decl-vars" : [ ],
      "line-start" : 2320,
      "ast" : {
        "expressions" : [ {
          "go-type" : 100,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "10"
          }
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 2327,
      "code" : "case structform.UintType:\n\tidx := len(ctx.valueBuffer.mapPrimitive)\n\tctx.valueBuffer.mapPrimitive = append(ctx.valueBuffer.mapPrimitive, nil)\n\tmapPtr := &ctx.valueBuffer.mapPrimitive[idx]\n\tptr := unsafe.Pointer(mapPtr)\n\tto := (*map[string]uint)(ptr)\n\tunfolder := newUnfolderMapUint()\n\treturn to, ptr, unfolder",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 124 ],
      "in-vars" : [ 38 ],
      "exit" : false,
      "out-vars" : [ 38, 121 ],
      "decl-vars" : [ 121 ],
      "line-start" : 2321,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "idx"
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "mapPrimitive",
              "variable" : 50
            },
            "go-type" : 171,
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "valueBuffer",
                "variable" : 44
              },
              "go-type" : 168,
              "kind" : "expression",
              "target" : {
                "go-type" : 2,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "ctx",
                  "variable" : 38
                }
              },
              "type" : "selector"
            },
            "type" : "selector"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 194,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Builtin",
              "kind" : "ident",
              "value" : "len"
            }
          },
          "go-type" : 38,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 2321,
      "code" : "idx := len(ctx.valueBuffer.mapPrimitive)",
      "entry" : false,
      "use-vars" : [ 38 ]
    }, {
      "update-vars" : [ 38 ],
      "successors" : [ 125 ],
      "in-vars" : [ 38, 121 ],
      "exit" : false,
      "out-vars" : [ 38, 121 ],
      "decl-vars" : [ ],
      "line-start" : 2322,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "mapPrimitive",
            "variable" : 50
          },
          "go-type" : 171,
          "kind" : "expression",
          "target" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "valueBuffer",
              "variable" : 44
            },
            "go-type" : 168,
            "kind" : "expression",
            "target" : {
              "go-type" : 2,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "ctx",
                "variable" : 38
              }
            },
            "type" : "selector"
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "arguments" : [ {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "mapPrimitive",
              "variable" : 50
            },
            "go-type" : 171,
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "valueBuffer",
                "variable" : 44
              },
              "go-type" : 168,
              "kind" : "expression",
              "target" : {
                "go-type" : 2,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "ctx",
                  "variable" : 38
                }
              },
              "type" : "selector"
            },
            "type" : "selector"
          }, {
            "go-type" : 185,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Nil",
              "kind" : "ident",
              "value" : "nil"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 196,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Builtin",
              "kind" : "ident",
              "value" : "append"
            }
          },
          "go-type" : 171,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 2322,
      "code" : "ctx.valueBuffer.mapPrimitive = append(ctx.valueBuffer.mapPrimitive, nil)",
      "entry" : false,
      "use-vars" : [ 38 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 126 ],
      "in-vars" : [ 38, 121 ],
      "exit" : false,
      "out-vars" : [ 122 ],
      "decl-vars" : [ 122 ],
      "line-start" : 2323,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "mapPtr"
          }
        } ],
        "right" : [ {
          "go-type" : 198,
          "kind" : "expression",
          "operator" : "&",
          "target" : {
            "go-type" : 172,
            "index" : {
              "go-type" : 38,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "idx",
                "variable" : 121
              }
            },
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "mapPrimitive",
                "variable" : 50
              },
              "go-type" : 171,
              "kind" : "expression",
              "target" : {
                "field" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "valueBuffer",
                  "variable" : 44
                },
                "go-type" : 168,
                "kind" : "expression",
                "target" : {
                  "go-type" : 2,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "ctx",
                    "variable" : 38
                  }
                },
                "type" : "selector"
              },
              "type" : "selector"
            },
            "type" : "index"
          },
          "type" : "unary"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 2323,
      "code" : "mapPtr := &ctx.valueBuffer.mapPrimitive[idx]",
      "entry" : false,
      "use-vars" : [ 38, 121 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 127 ],
      "in-vars" : [ 122 ],
      "exit" : false,
      "out-vars" : [ 123 ],
      "decl-vars" : [ 123 ],
      "line-start" : 2324,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "ptr"
          }
        } ],
        "right" : [ {
          "coerced-to" : {
            "go-type" : 24,
            "kind" : "type",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 2,
              "value" : "unsafe"
            },
            "type" : "identifier",
            "value" : {
              "go-type" : 24,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "Pointer"
            }
          },
          "go-type" : 24,
          "kind" : "expression",
          "target" : {
            "go-type" : 198,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "mapPtr",
              "variable" : 122
            }
          },
          "type" : "cast"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 2324,
      "code" : "ptr := unsafe.Pointer(mapPtr)",
      "entry" : false,
      "use-vars" : [ 122 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 128 ],
      "in-vars" : [ 123 ],
      "exit" : false,
      "out-vars" : [ 124, 123 ],
      "decl-vars" : [ 124 ],
      "line-start" : 2325,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "to"
          }
        } ],
        "right" : [ {
          "coerced-to" : {
            "contained" : {
              "go-type" : 278,
              "key" : {
                "go-type" : 7,
                "kind" : "type",
                "type" : "identifier",
                "value" : {
                  "go-type" : 7,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "string"
                }
              },
              "kind" : "type",
              "type" : "map",
              "value" : {
                "go-type" : 67,
                "kind" : "type",
                "type" : "identifier",
                "value" : {
                  "go-type" : 67,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "uint"
                }
              }
            },
            "go-type" : 277,
            "kind" : "type",
            "type" : "pointer"
          },
          "go-type" : 277,
          "kind" : "expression",
          "target" : {
            "go-type" : 24,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "ptr",
              "variable" : 123
            }
          },
          "type" : "cast"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 2325,
      "code" : "to := (*map[string]uint)(ptr)",
      "entry" : false,
      "use-vars" : [ 123 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 129 ],
      "in-vars" : [ 124, 123 ],
      "exit" : false,
      "out-vars" : [ 125, 124, 123 ],
      "decl-vars" : [ 125 ],
      "line-start" : 2326,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "unfolder"
          }
        } ],
        "right" : [ {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 281,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 15,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "newUnfolderMapUint"
            }
          },
          "go-type" : 279,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 2326,
      "code" : "unfolder := newUnfolderMapUint()",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 125, 124, 123 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 2327,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 277,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "to",
            "variable" : 124
          }
        }, {
          "go-type" : 24,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "ptr",
            "variable" : 123
          }
        }, {
          "go-type" : 279,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "unfolder",
            "variable" : 125
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 2327,
      "code" : "return to, ptr, unfolder",
      "entry" : false,
      "use-vars" : [ 124, 123, 125 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 131 ],
      "in-vars" : [ 38 ],
      "exit" : false,
      "out-vars" : [ 38 ],
      "decl-vars" : [ ],
      "line-start" : 2329,
      "ast" : {
        "expressions" : [ {
          "go-type" : 100,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "4"
          }
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 2335,
      "code" : "case structform.ZeroType:\n\tidx := len(ctx.valueBuffer.mapAny)\n\tctx.valueBuffer.mapAny = append(ctx.valueBuffer.mapAny, nil)\n\tto := &ctx.valueBuffer.mapAny[idx]\n\tptr := unsafe.Pointer(to)\n\tunfolder := newUnfolderMapIfc()\n\treturn to, ptr, unfolder",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 132 ],
      "in-vars" : [ 38 ],
      "exit" : false,
      "out-vars" : [ 38, 126 ],
      "decl-vars" : [ 126 ],
      "line-start" : 2330,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "idx"
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "mapAny",
              "variable" : 45
            },
            "go-type" : 173,
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "valueBuffer",
                "variable" : 44
              },
              "go-type" : 168,
              "kind" : "expression",
              "target" : {
                "go-type" : 2,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "ctx",
                  "variable" : 38
                }
              },
              "type" : "selector"
            },
            "type" : "selector"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 181,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Builtin",
              "kind" : "ident",
              "value" : "len"
            }
          },
          "go-type" : 38,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 2330,
      "code" : "idx := len(ctx.valueBuffer.mapAny)",
      "entry" : false,
      "use-vars" : [ 38 ]
    }, {
      "update-vars" : [ 38 ],
      "successors" : [ 133 ],
      "in-vars" : [ 38, 126 ],
      "exit" : false,
      "out-vars" : [ 38, 126 ],
      "decl-vars" : [ ],
      "line-start" : 2331,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "mapAny",
            "variable" : 45
          },
          "go-type" : 173,
          "kind" : "expression",
          "target" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "valueBuffer",
              "variable" : 44
            },
            "go-type" : 168,
            "kind" : "expression",
            "target" : {
              "go-type" : 2,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "ctx",
                "variable" : 38
              }
            },
            "type" : "selector"
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "arguments" : [ {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "mapAny",
              "variable" : 45
            },
            "go-type" : 173,
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "valueBuffer",
                "variable" : 44
              },
              "go-type" : 168,
              "kind" : "expression",
              "target" : {
                "go-type" : 2,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "ctx",
                  "variable" : 38
                }
              },
              "type" : "selector"
            },
            "type" : "selector"
          }, {
            "go-type" : 185,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Nil",
              "kind" : "ident",
              "value" : "nil"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 183,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Builtin",
              "kind" : "ident",
              "value" : "append"
            }
          },
          "go-type" : 173,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 2331,
      "code" : "ctx.valueBuffer.mapAny = append(ctx.valueBuffer.mapAny, nil)",
      "entry" : false,
      "use-vars" : [ 38 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 134 ],
      "in-vars" : [ 38, 126 ],
      "exit" : false,
      "out-vars" : [ 127 ],
      "decl-vars" : [ 127 ],
      "line-start" : 2332,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "to"
          }
        } ],
        "right" : [ {
          "go-type" : 186,
          "kind" : "expression",
          "operator" : "&",
          "target" : {
            "go-type" : 174,
            "index" : {
              "go-type" : 38,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "idx",
                "variable" : 126
              }
            },
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "mapAny",
                "variable" : 45
              },
              "go-type" : 173,
              "kind" : "expression",
              "target" : {
                "field" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "valueBuffer",
                  "variable" : 44
                },
                "go-type" : 168,
                "kind" : "expression",
                "target" : {
                  "go-type" : 2,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "ctx",
                    "variable" : 38
                  }
                },
                "type" : "selector"
              },
              "type" : "selector"
            },
            "type" : "index"
          },
          "type" : "unary"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 2332,
      "code" : "to := &ctx.valueBuffer.mapAny[idx]",
      "entry" : false,
      "use-vars" : [ 38, 126 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 135 ],
      "in-vars" : [ 127 ],
      "exit" : false,
      "out-vars" : [ 127, 128 ],
      "decl-vars" : [ 128 ],
      "line-start" : 2333,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "ptr"
          }
        } ],
        "right" : [ {
          "coerced-to" : {
            "go-type" : 24,
            "kind" : "type",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 2,
              "value" : "unsafe"
            },
            "type" : "identifier",
            "value" : {
              "go-type" : 24,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "Pointer"
            }
          },
          "go-type" : 24,
          "kind" : "expression",
          "target" : {
            "go-type" : 186,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "to",
              "variable" : 127
            }
          },
          "type" : "cast"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 2333,
      "code" : "ptr := unsafe.Pointer(to)",
      "entry" : false,
      "use-vars" : [ 127 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 136 ],
      "in-vars" : [ 127, 128 ],
      "exit" : false,
      "out-vars" : [ 127, 128, 129 ],
      "decl-vars" : [ 129 ],
      "line-start" : 2334,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "unfolder"
          }
        } ],
        "right" : [ {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 192,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 1,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "newUnfolderMapIfc"
            }
          },
          "go-type" : 187,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 2334,
      "code" : "unfolder := newUnfolderMapIfc()",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 128, 129, 127 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 2335,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 186,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "to",
            "variable" : 127
          }
        }, {
          "go-type" : 24,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "ptr",
            "variable" : 128
          }
        }, {
          "go-type" : 187,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "unfolder",
            "variable" : 129
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 2335,
      "code" : "return to, ptr, unfolder",
      "entry" : false,
      "use-vars" : [ 127, 128, 129 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 138 ],
      "in-vars" : [ ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 2337,
      "ast" : {
        "expressions" : [ ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 2338,
      "code" : "default:\n\tpanic(\"invalid type code\")",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 2338,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 7,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "invalid type code"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 283,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Builtin",
              "kind" : "ident",
              "value" : "panic"
            }
          },
          "go-type" : 33,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 2338,
      "code" : "panic(\"invalid type code\")",
      "entry" : false,
      "use-vars" : [ ]
    } ],
    "code" : "func makeMapPtr(ctx *unfoldCtx, l int, bt structform.BaseType) (interface{}, unsafe.Pointer, ptrUnfolder) {\n\tswitch bt {\n\n\tcase structform.AnyType:\n\t\tidx := len(ctx.valueBuffer.mapAny)\n\t\tctx.valueBuffer.mapAny = append(ctx.valueBuffer.mapAny, nil)\n\t\tto := &ctx.valueBuffer.mapAny[idx]\n\t\tptr := unsafe.Pointer(to)\n\t\tunfolder := newUnfolderMapIfc()\n\t\treturn to, ptr, unfolder\n\n\tcase structform.BoolType:\n\t\tidx := len(ctx.valueBuffer.mapPrimitive)\n\t\tctx.valueBuffer.mapPrimitive = append(ctx.valueBuffer.mapPrimitive, nil)\n\t\tmapPtr := &ctx.valueBuffer.mapPrimitive[idx]\n\t\tptr := unsafe.Pointer(mapPtr)\n\t\tto := (*map[string]bool)(ptr)\n\t\tunfolder := newUnfolderMapBool()\n\t\treturn to, ptr, unfolder\n\n\tcase structform.ByteType:\n\t\tidx := len(ctx.valueBuffer.mapPrimitive)\n\t\tctx.valueBuffer.mapPrimitive = append(ctx.valueBuffer.mapPrimitive, nil)\n\t\tmapPtr := &ctx.valueBuffer.mapPrimitive[idx]\n\t\tptr := unsafe.Pointer(mapPtr)\n\t\tto := (*map[string]uint8)(ptr)\n\t\tunfolder := newUnfolderMapUint8()\n\t\treturn to, ptr, unfolder\n\n\tcase structform.Float32Type:\n\t\tidx := len(ctx.valueBuffer.mapPrimitive)\n\t\tctx.valueBuffer.mapPrimitive = append(ctx.valueBuffer.mapPrimitive, nil)\n\t\tmapPtr := &ctx.valueBuffer.mapPrimitive[idx]\n\t\tptr := unsafe.Pointer(mapPtr)\n\t\tto := (*map[string]float32)(ptr)\n\t\tunfolder := newUnfolderMapFloat32()\n\t\treturn to, ptr, unfolder\n\n\tcase structform.Float64Type:\n\t\tidx := len(ctx.valueBuffer.mapPrimitive)\n\t\tctx.valueBuffer.mapPrimitive = append(ctx.valueBuffer.mapPrimitive, nil)\n\t\tmapPtr := &ctx.valueBuffer.mapPrimitive[idx]\n\t\tptr := unsafe.Pointer(mapPtr)\n\t\tto := (*map[string]float64)(ptr)\n\t\tunfolder := newUnfolderMapFloat64()\n\t\treturn to, ptr, unfolder\n\n\tcase structform.Int16Type:\n\t\tidx := len(ctx.valueBuffer.mapPrimitive)\n\t\tctx.valueBuffer.mapPrimitive = append(ctx.valueBuffer.mapPrimitive, nil)\n\t\tmapPtr := &ctx.valueBuffer.mapPrimitive[idx]\n\t\tptr := unsafe.Pointer(mapPtr)\n\t\tto := (*map[string]int16)(ptr)\n\t\tunfolder := newUnfolderMapInt16()\n\t\treturn to, ptr, unfolder\n\n\tcase structform.Int32Type:\n\t\tidx := len(ctx.valueBuffer.mapPrimitive)\n\t\tctx.valueBuffer.mapPrimitive = append(ctx.valueBuffer.mapPrimitive, nil)\n\t\tmapPtr := &ctx.valueBuffer.mapPrimitive[idx]\n\t\tptr := unsafe.Pointer(mapPtr)\n\t\tto := (*map[string]int32)(ptr)\n\t\tunfolder := newUnfolderMapInt32()\n\t\treturn to, ptr, unfolder\n\n\tcase structform.Int64Type:\n\t\tidx := len(ctx.valueBuffer.mapPrimitive)\n\t\tctx.valueBuffer.mapPrimitive = append(ctx.valueBuffer.mapPrimitive, nil)\n\t\tmapPtr := &ctx.valueBuffer.mapPrimitive[idx]\n\t\tptr := unsafe.Pointer(mapPtr)\n\t\tto := (*map[string]int64)(ptr)\n\t\tunfolder := newUnfolderMapInt64()\n\t\treturn to, ptr, unfolder\n\n\tcase structform.Int8Type:\n\t\tidx := len(ctx.valueBuffer.mapPrimitive)\n\t\tctx.valueBuffer.mapPrimitive = append(ctx.valueBuffer.mapPrimitive, nil)\n\t\tmapPtr := &ctx.valueBuffer.mapPrimitive[idx]\n\t\tptr := unsafe.Pointer(mapPtr)\n\t\tto := (*map[string]int8)(ptr)\n\t\tunfolder := newUnfolderMapInt8()\n\t\treturn to, ptr, unfolder\n\n\tcase structform.IntType:\n\t\tidx := len(ctx.valueBuffer.mapPrimitive)\n\t\tctx.valueBuffer.mapPrimitive = append(ctx.valueBuffer.mapPrimitive, nil)\n\t\tmapPtr := &ctx.valueBuffer.mapPrimitive[idx]\n\t\tptr := unsafe.Pointer(mapPtr)\n\t\tto := (*map[string]int)(ptr)\n\t\tunfolder := newUnfolderMapInt()\n\t\treturn to, ptr, unfolder\n\n\tcase structform.StringType:\n\t\tidx := len(ctx.valueBuffer.mapPrimitive)\n\t\tctx.valueBuffer.mapPrimitive = append(ctx.valueBuffer.mapPrimitive, nil)\n\t\tmapPtr := &ctx.valueBuffer.mapPrimitive[idx]\n\t\tptr := unsafe.Pointer(mapPtr)\n\t\tto := (*map[string]string)(ptr)\n\t\tunfolder := newUnfolderMapString()\n\t\treturn to, ptr, unfolder\n\n\tcase structform.Uint16Type:\n\t\tidx := len(ctx.valueBuffer.mapPrimitive)\n\t\tctx.valueBuffer.mapPrimitive = append(ctx.valueBuffer.mapPrimitive, nil)\n\t\tmapPtr := &ctx.valueBuffer.mapPrimitive[idx]\n\t\tptr := unsafe.Pointer(mapPtr)\n\t\tto := (*map[string]uint16)(ptr)\n\t\tunfolder := newUnfolderMapUint16()\n\t\treturn to, ptr, unfolder\n\n\tcase structform.Uint32Type:\n\t\tidx := len(ctx.valueBuffer.mapPrimitive)\n\t\tctx.valueBuffer.mapPrimitive = append(ctx.valueBuffer.mapPrimitive, nil)\n\t\tmapPtr := &ctx.valueBuffer.mapPrimitive[idx]\n\t\tptr := unsafe.Pointer(mapPtr)\n\t\tto := (*map[string]uint32)(ptr)\n\t\tunfolder := newUnfolderMapUint32()\n\t\treturn to, ptr, unfolder\n\n\tcase structform.Uint64Type:\n\t\tidx := len(ctx.valueBuffer.mapPrimitive)\n\t\tctx.valueBuffer.mapPrimitive = append(ctx.valueBuffer.mapPrimitive, nil)\n\t\tmapPtr := &ctx.valueBuffer.mapPrimitive[idx]\n\t\tptr := unsafe.Pointer(mapPtr)\n\t\tto := (*map[string]uint64)(ptr)\n\t\tunfolder := newUnfolderMapUint64()\n\t\treturn to, ptr, unfolder\n\n\tcase structform.Uint8Type:\n\t\tidx := len(ctx.valueBuffer.mapPrimitive)\n\t\tctx.valueBuffer.mapPrimitive = append(ctx.valueBuffer.mapPrimitive, nil)\n\t\tmapPtr := &ctx.valueBuffer.mapPrimitive[idx]\n\t\tptr := unsafe.Pointer(mapPtr)\n\t\tto := (*map[string]uint8)(ptr)\n\t\tunfolder := newUnfolderMapUint8()\n\t\treturn to, ptr, unfolder\n\n\tcase structform.UintType:\n\t\tidx := len(ctx.valueBuffer.mapPrimitive)\n\t\tctx.valueBuffer.mapPrimitive = append(ctx.valueBuffer.mapPrimitive, nil)\n\t\tmapPtr := &ctx.valueBuffer.mapPrimitive[idx]\n\t\tptr := unsafe.Pointer(mapPtr)\n\t\tto := (*map[string]uint)(ptr)\n\t\tunfolder := newUnfolderMapUint()\n\t\treturn to, ptr, unfolder\n\n\tcase structform.ZeroType:\n\t\tidx := len(ctx.valueBuffer.mapAny)\n\t\tctx.valueBuffer.mapAny = append(ctx.valueBuffer.mapAny, nil)\n\t\tto := &ctx.valueBuffer.mapAny[idx]\n\t\tptr := unsafe.Pointer(to)\n\t\tunfolder := newUnfolderMapIfc()\n\t\treturn to, ptr, unfolder\n\n\tdefault:\n\t\tpanic(\"invalid type code\")\n\t}\n}",
    "defines" : [ 0 ],
    "functions" : [ {
      "name" : "makeMapPtr",
      "package" : 0,
      "type" : 0,
      "exported" : false
    }, {
      "name" : "newUnfolderMapIfc",
      "package" : 0,
      "type" : 192,
      "exported" : false
    }, {
      "name" : "newUnfolderMapBool",
      "package" : 0,
      "type" : 203,
      "exported" : false
    }, {
      "name" : "newUnfolderMapUint8",
      "package" : 0,
      "type" : 209,
      "exported" : false
    }, {
      "name" : "newUnfolderMapFloat32",
      "package" : 0,
      "type" : 215,
      "exported" : false
    }, {
      "name" : "newUnfolderMapFloat64",
      "package" : 0,
      "type" : 221,
      "exported" : false
    }, {
      "name" : "newUnfolderMapInt16",
      "package" : 0,
      "type" : 227,
      "exported" : false
    }, {
      "name" : "newUnfolderMapInt32",
      "package" : 0,
      "type" : 233,
      "exported" : false
    }, {
      "name" : "newUnfolderMapInt64",
      "package" : 0,
      "type" : 239,
      "exported" : false
    }, {
      "name" : "newUnfolderMapInt8",
      "package" : 0,
      "type" : 245,
      "exported" : false
    }, {
      "name" : "newUnfolderMapInt",
      "package" : 0,
      "type" : 251,
      "exported" : false
    }, {
      "name" : "newUnfolderMapString",
      "package" : 0,
      "type" : 257,
      "exported" : false
    }, {
      "name" : "newUnfolderMapUint16",
      "package" : 0,
      "type" : 263,
      "exported" : false
    }, {
      "name" : "newUnfolderMapUint32",
      "package" : 0,
      "type" : 269,
      "exported" : false
    }, {
      "name" : "newUnfolderMapUint64",
      "package" : 0,
      "type" : 275,
      "exported" : false
    }, {
      "name" : "newUnfolderMapUint",
      "package" : 0,
      "type" : 281,
      "exported" : false
    } ],
    "line-end" : 2340,
    "line-start" : 2183,
    "names" : [ "makeMapPtr" ],
    "package" : 0,
    "packages" : [ {
      "name" : "gotype",
      "path" : "github.com/elastic/go-structform/gotype"
    }, {
      "name" : "reflect",
      "path" : "reflect"
    }, {
      "name" : "unsafe",
      "path" : "unsafe"
    }, {
      "name" : "structform",
      "path" : "github.com/elastic/go-structform"
    } ],
    "params" : [ 38, 39, 40 ],
    "receivers" : [ ],
    "results" : [ 41, 42, 43 ],
    "type" : "function",
    "types" : [ {
      "name" : "func(ctx *github.com/elastic/go-structform/gotype.unfoldCtx, l int, bt github.com/elastic/go-structform.BaseType) (interface{}, unsafe.Pointer, github.com/elastic/go-structform/gotype.ptrUnfolder)",
      "params" : 1,
      "recv" : -1,
      "results" : 176,
      "type" : "Signature",
      "underlying" : 0,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "ctx",
        "type" : 2
      }, {
        "name" : "l",
        "type" : 38
      }, {
        "name" : "bt",
        "type" : 100
      } ],
      "name" : "(ctx *github.com/elastic/go-structform/gotype.unfoldCtx, l int, bt github.com/elastic/go-structform.BaseType)",
      "type" : "Tuple",
      "underlying" : 1
    }, {
      "elem" : 3,
      "name" : "*github.com/elastic/go-structform/gotype.unfoldCtx",
      "type" : "Pointer",
      "underlying" : 2
    }, {
      "local-name" : "unfoldCtx",
      "name" : "github.com/elastic/go-structform/gotype.unfoldCtx",
      "package" : 0,
      "type" : "Named",
      "underlying" : 4
    }, {
      "fields" : [ {
        "name" : "opts",
        "type" : 5
      }, {
        "name" : "userReg",
        "type" : 8
      }, {
        "name" : "reg",
        "type" : 85
      }, {
        "name" : "unfolder",
        "type" : 88
      }, {
        "name" : "value",
        "type" : 142
      }, {
        "name" : "baseType",
        "type" : 146
      }, {
        "name" : "ptr",
        "type" : 150
      }, {
        "name" : "key",
        "type" : 154
      }, {
        "name" : "idx",
        "type" : 158
      }, {
        "name" : "keyCache",
        "type" : 161
      }, {
        "name" : "valueBuffer",
        "type" : 168
      } ],
      "name" : "struct{opts github.com/elastic/go-structform/gotype.options; userReg map[reflect.Type]github.com/elastic/go-structform/gotype.reflUnfolder; reg *github.com/elastic/go-structform/gotype.typeUnfoldRegistry; unfolder github.com/elastic/go-structform/gotype.unfolderStack; value github.com/elastic/go-structform/gotype.reflectValueStack; baseType github.com/elastic/go-structform/gotype.structformTypeStack; ptr github.com/elastic/go-structform/gotype.ptrStack; key github.com/elastic/go-structform/gotype.keyStack; idx github.com/elastic/go-structform/gotype.idxStack; keyCache github.com/elastic/go-structform/gotype.symbolCache; valueBuffer github.com/elastic/go-structform/gotype.unfoldBuf}",
      "type" : "Struct",
      "underlying" : 4
    }, {
      "local-name" : "options",
      "name" : "github.com/elastic/go-structform/gotype.options",
      "package" : 0,
      "type" : "Named",
      "underlying" : 6
    }, {
      "fields" : [ {
        "name" : "tag",
        "type" : 7
      } ],
      "name" : "struct{tag string}",
      "type" : "Struct",
      "underlying" : 6
    }, {
      "name" : "string",
      "type" : "Basic",
      "underlying" : 7
    }, {
      "elem" : 9,
      "key" : 34,
      "name" : "map[reflect.Type]github.com/elastic/go-structform/gotype.reflUnfolder",
      "type" : "Map",
      "underlying" : 8
    }, {
      "local-name" : "reflUnfolder",
      "name" : "github.com/elastic/go-structform/gotype.reflUnfolder",
      "package" : 0,
      "type" : "Named",
      "underlying" : 10
    }, {
      "methods" : [ {
        "name" : "initState",
        "type" : 11
      } ],
      "name" : "interface{initState(*github.com/elastic/go-structform/gotype.unfoldCtx, reflect.Value)}",
      "type" : "Interface",
      "underlying" : 10
    }, {
      "name" : "(github.com/elastic/go-structform/gotype.reflUnfolder) func(*github.com/elastic/go-structform/gotype.unfoldCtx, reflect.Value)",
      "params" : 12,
      "recv" : 0,
      "results" : 33,
      "type" : "Signature",
      "underlying" : 11,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 2
      }, {
        "name" : "",
        "type" : 13
      } ],
      "name" : "(*github.com/elastic/go-structform/gotype.unfoldCtx, reflect.Value)",
      "type" : "Tuple",
      "underlying" : 12
    }, {
      "local-name" : "Value",
      "name" : "reflect.Value",
      "package" : 1,
      "type" : "Named",
      "underlying" : 14
    }, {
      "fields" : [ {
        "name" : "typ",
        "type" : 15
      }, {
        "name" : "ptr",
        "type" : 24
      }, {
        "name" : "flag",
        "type" : 32
      } ],
      "name" : "struct{typ *reflect.rtype; ptr unsafe.Pointer; reflect.flag}",
      "type" : "Struct",
      "underlying" : 14
    }, {
      "elem" : 16,
      "name" : "*reflect.rtype",
      "type" : "Pointer",
      "underlying" : 15
    }, {
      "local-name" : "rtype",
      "name" : "reflect.rtype",
      "package" : 1,
      "type" : "Named",
      "underlying" : 17
    }, {
      "fields" : [ {
        "name" : "size",
        "type" : 18
      }, {
        "name" : "ptrdata",
        "type" : 18
      }, {
        "name" : "hash",
        "type" : 19
      }, {
        "name" : "tflag",
        "type" : 20
      }, {
        "name" : "align",
        "type" : 21
      }, {
        "name" : "fieldAlign",
        "type" : 21
      }, {
        "name" : "kind",
        "type" : 21
      }, {
        "name" : "equal",
        "type" : 22
      }, {
        "name" : "gcdata",
        "type" : 27
      }, {
        "name" : "str",
        "type" : 29
      }, {
        "name" : "ptrToThis",
        "type" : 31
      } ],
      "name" : "struct{size uintptr; ptrdata uintptr; hash uint32; tflag reflect.tflag; align uint8; fieldAlign uint8; kind uint8; equal func(unsafe.Pointer, unsafe.Pointer) bool; gcdata *byte; str reflect.nameOff; ptrToThis reflect.typeOff}",
      "type" : "Struct",
      "underlying" : 17
    }, {
      "name" : "uintptr",
      "type" : "Basic",
      "underlying" : 18
    }, {
      "name" : "uint32",
      "type" : "Basic",
      "underlying" : 19
    }, {
      "local-name" : "tflag",
      "name" : "reflect.tflag",
      "package" : 1,
      "type" : "Named",
      "underlying" : 21
    }, {
      "name" : "uint8",
      "type" : "Basic",
      "underlying" : 21
    }, {
      "name" : "func(unsafe.Pointer, unsafe.Pointer) bool",
      "params" : 23,
      "recv" : -1,
      "results" : 25,
      "type" : "Signature",
      "underlying" : 22,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 24
      }, {
        "name" : "",
        "type" : 24
      } ],
      "name" : "(unsafe.Pointer, unsafe.Pointer)",
      "type" : "Tuple",
      "underlying" : 23
    }, {
      "local-name" : "Pointer",
      "name" : "unsafe.Pointer",
      "package" : 2,
      "type" : "Basic",
      "underlying" : 24
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 26
      } ],
      "name" : "(bool)",
      "type" : "Tuple",
      "underlying" : 25
    }, {
      "name" : "bool",
      "type" : "Basic",
      "underlying" : 26
    }, {
      "elem" : 28,
      "name" : "*byte",
      "type" : "Pointer",
      "underlying" : 27
    }, {
      "name" : "byte",
      "type" : "Basic",
      "underlying" : 28
    }, {
      "local-name" : "nameOff",
      "name" : "reflect.nameOff",
      "package" : 1,
      "type" : "Named",
      "underlying" : 30
    }, {
      "name" : "int32",
      "type" : "Basic",
      "underlying" : 30
    }, {
      "local-name" : "typeOff",
      "name" : "reflect.typeOff",
      "package" : 1,
      "type" : "Named",
      "underlying" : 30
    }, {
      "local-name" : "flag",
      "name" : "reflect.flag",
      "package" : 1,
      "type" : "Named",
      "underlying" : 18
    }, {
      "fields" : [ ],
      "name" : "()",
      "type" : "Tuple",
      "underlying" : 33
    }, {
      "local-name" : "Type",
      "name" : "reflect.Type",
      "package" : 1,
      "type" : "Named",
      "underlying" : 35
    }, {
      "methods" : [ {
        "name" : "Align",
        "type" : 36
      }, {
        "name" : "AssignableTo",
        "type" : 39
      }, {
        "name" : "Bits",
        "type" : 36
      }, {
        "name" : "ChanDir",
        "type" : 41
      }, {
        "name" : "Comparable",
        "type" : 44
      }, {
        "name" : "ConvertibleTo",
        "type" : 39
      }, {
        "name" : "Elem",
        "type" : 45
      }, {
        "name" : "Field",
        "type" : 47
      }, {
        "name" : "FieldAlign",
        "type" : 36
      }, {
        "name" : "FieldByIndex",
        "type" : 54
      }, {
        "name" : "FieldByName",
        "type" : 56
      }, {
        "name" : "FieldByNameFunc",
        "type" : 59
      }, {
        "name" : "Implements",
        "type" : 39
      }, {
        "name" : "In",
        "type" : 63
      }, {
        "name" : "IsVariadic",
        "type" : 44
      }, {
        "name" : "Key",
        "type" : 45
      }, {
        "name" : "Kind",
        "type" : 64
      }, {
        "name" : "Len",
        "type" : 36
      }, {
        "name" : "Method",
        "type" : 68
      }, {
        "name" : "MethodByName",
        "type" : 72
      }, {
        "name" : "Name",
        "type" : 74
      }, {
        "name" : "NumField",
        "type" : 36
      }, {
        "name" : "NumIn",
        "type" : 36
      }, {
        "name" : "NumMethod",
        "type" : 36
      }, {
        "name" : "NumOut",
        "type" : 36
      }, {
        "name" : "Out",
        "type" : 63
      }, {
        "name" : "PkgPath",
        "type" : 74
      }, {
        "name" : "Size",
        "type" : 75
      }, {
        "name" : "String",
        "type" : 74
      }, {
        "name" : "common",
        "type" : 77
      }, {
        "name" : "uncommon",
        "type" : 79
      } ],
      "name" : "interface{Align() int; AssignableTo(u reflect.Type) bool; Bits() int; ChanDir() reflect.ChanDir; Comparable() bool; ConvertibleTo(u reflect.Type) bool; Elem() reflect.Type; Field(i int) reflect.StructField; FieldAlign() int; FieldByIndex(index []int) reflect.StructField; FieldByName(name string) (reflect.StructField, bool); FieldByNameFunc(match func(string) bool) (reflect.StructField, bool); Implements(u reflect.Type) bool; In(i int) reflect.Type; IsVariadic() bool; Key() reflect.Type; Kind() reflect.Kind; Len() int; Method(int) reflect.Method; MethodByName(string) (reflect.Method, bool); Name() string; NumField() int; NumIn() int; NumMethod() int; NumOut() int; Out(i int) reflect.Type; PkgPath() string; Size() uintptr; String() string; common() *reflect.rtype; uncommon() *reflect.uncommonType}",
      "type" : "Interface",
      "underlying" : 35
    }, {
      "name" : "(reflect.Type) func() int",
      "params" : 33,
      "recv" : 1,
      "results" : 37,
      "type" : "Signature",
      "underlying" : 36,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 38
      } ],
      "name" : "(int)",
      "type" : "Tuple",
      "underlying" : 37
    }, {
      "name" : "int",
      "type" : "Basic",
      "underlying" : 38
    }, {
      "name" : "(reflect.Type) func(u reflect.Type) bool",
      "params" : 40,
      "recv" : 2,
      "results" : 25,
      "type" : "Signature",
      "underlying" : 39,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "u",
        "type" : 34
      } ],
      "name" : "(u reflect.Type)",
      "type" : "Tuple",
      "underlying" : 40
    }, {
      "name" : "(reflect.Type) func() reflect.ChanDir",
      "params" : 33,
      "recv" : 3,
      "results" : 42,
      "type" : "Signature",
      "underlying" : 41,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 43
      } ],
      "name" : "(reflect.ChanDir)",
      "type" : "Tuple",
      "underlying" : 42
    }, {
      "local-name" : "ChanDir",
      "name" : "reflect.ChanDir",
      "package" : 1,
      "type" : "Named",
      "underlying" : 38
    }, {
      "name" : "(reflect.Type) func() bool",
      "params" : 33,
      "recv" : 4,
      "results" : 25,
      "type" : "Signature",
      "underlying" : 44,
      "variadic" : false
    }, {
      "name" : "(reflect.Type) func() reflect.Type",
      "params" : 33,
      "recv" : 5,
      "results" : 46,
      "type" : "Signature",
      "underlying" : 45,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 34
      } ],
      "name" : "(reflect.Type)",
      "type" : "Tuple",
      "underlying" : 46
    }, {
      "name" : "(reflect.Type) func(i int) reflect.StructField",
      "params" : 48,
      "recv" : 6,
      "results" : 49,
      "type" : "Signature",
      "underlying" : 47,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "i",
        "type" : 38
      } ],
      "name" : "(i int)",
      "type" : "Tuple",
      "underlying" : 48
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 50
      } ],
      "name" : "(reflect.StructField)",
      "type" : "Tuple",
      "underlying" : 49
    }, {
      "local-name" : "StructField",
      "name" : "reflect.StructField",
      "package" : 1,
      "type" : "Named",
      "underlying" : 51
    }, {
      "fields" : [ {
        "name" : "Name",
        "type" : 7
      }, {
        "name" : "PkgPath",
        "type" : 7
      }, {
        "name" : "Type",
        "type" : 34
      }, {
        "name" : "Tag",
        "type" : 52
      }, {
        "name" : "Offset",
        "type" : 18
      }, {
        "name" : "Index",
        "type" : 53
      }, {
        "name" : "Anonymous",
        "type" : 26
      } ],
      "name" : "struct{Name string; PkgPath string; Type reflect.Type; Tag reflect.StructTag; Offset uintptr; Index []int; Anonymous bool}",
      "type" : "Struct",
      "underlying" : 51
    }, {
      "local-name" : "StructTag",
      "name" : "reflect.StructTag",
      "package" : 1,
      "type" : "Named",
      "underlying" : 7
    }, {
      "elem" : 38,
      "name" : "[]int",
      "type" : "Slice",
      "underlying" : 53
    }, {
      "name" : "(reflect.Type) func(index []int) reflect.StructField",
      "params" : 55,
      "recv" : 7,
      "results" : 49,
      "type" : "Signature",
      "underlying" : 54,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "index",
        "type" : 53
      } ],
      "name" : "(index []int)",
      "type" : "Tuple",
      "underlying" : 55
    }, {
      "name" : "(reflect.Type) func(name string) (reflect.StructField, bool)",
      "params" : 57,
      "recv" : 8,
      "results" : 58,
      "type" : "Signature",
      "underlying" : 56,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "name",
        "type" : 7
      } ],
      "name" : "(name string)",
      "type" : "Tuple",
      "underlying" : 57
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 50
      }, {
        "name" : "",
        "type" : 26
      } ],
      "name" : "(reflect.StructField, bool)",
      "type" : "Tuple",
      "underlying" : 58
    }, {
      "name" : "(reflect.Type) func(match func(string) bool) (reflect.StructField, bool)",
      "params" : 60,
      "recv" : 9,
      "results" : 58,
      "type" : "Signature",
      "underlying" : 59,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "match",
        "type" : 61
      } ],
      "name" : "(match func(string) bool)",
      "type" : "Tuple",
      "underlying" : 60
    }, {
      "name" : "func(string) bool",
      "params" : 62,
      "recv" : -1,
      "results" : 25,
      "type" : "Signature",
      "underlying" : 61,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 7
      } ],
      "name" : "(string)",
      "type" : "Tuple",
      "underlying" : 62
    }, {
      "name" : "(reflect.Type) func(i int) reflect.Type",
      "params" : 48,
      "recv" : 10,
      "results" : 46,
      "type" : "Signature",
      "underlying" : 63,
      "variadic" : false
    }, {
      "name" : "(reflect.Type) func() reflect.Kind",
      "params" : 33,
      "recv" : 11,
      "results" : 65,
      "type" : "Signature",
      "underlying" : 64,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 66
      } ],
      "name" : "(reflect.Kind)",
      "type" : "Tuple",
      "underlying" : 65
    }, {
      "local-name" : "Kind",
      "name" : "reflect.Kind",
      "package" : 1,
      "type" : "Named",
      "underlying" : 67
    }, {
      "name" : "uint",
      "type" : "Basic",
      "underlying" : 67
    }, {
      "name" : "(reflect.Type) func(int) reflect.Method",
      "params" : 37,
      "recv" : 12,
      "results" : 69,
      "type" : "Signature",
      "underlying" : 68,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 70
      } ],
      "name" : "(reflect.Method)",
      "type" : "Tuple",
      "underlying" : 69
    }, {
      "local-name" : "Method",
      "name" : "reflect.Method",
      "package" : 1,
      "type" : "Named",
      "underlying" : 71
    }, {
      "fields" : [ {
        "name" : "Name",
        "type" : 7
      }, {
        "name" : "PkgPath",
        "type" : 7
      }, {
        "name" : "Type",
        "type" : 34
      }, {
        "name" : "Func",
        "type" : 13
      }, {
        "name" : "Index",
        "type" : 38
      } ],
      "name" : "struct{Name string; PkgPath string; Type reflect.Type; Func reflect.Value; Index int}",
      "type" : "Struct",
      "underlying" : 71
    }, {
      "name" : "(reflect.Type) func(string) (reflect.Method, bool)",
      "params" : 62,
      "recv" : 13,
      "results" : 73,
      "type" : "Signature",
      "underlying" : 72,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 70
      }, {
        "name" : "",
        "type" : 26
      } ],
      "name" : "(reflect.Method, bool)",
      "type" : "Tuple",
      "underlying" : 73
    }, {
      "name" : "(reflect.Type) func() string",
      "params" : 33,
      "recv" : 14,
      "results" : 62,
      "type" : "Signature",
      "underlying" : 74,
      "variadic" : false
    }, {
      "name" : "(reflect.Type) func() uintptr",
      "params" : 33,
      "recv" : 15,
      "results" : 76,
      "type" : "Signature",
      "underlying" : 75,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 18
      } ],
      "name" : "(uintptr)",
      "type" : "Tuple",
      "underlying" : 76
    }, {
      "name" : "(reflect.Type) func() *reflect.rtype",
      "params" : 33,
      "recv" : 16,
      "results" : 78,
      "type" : "Signature",
      "underlying" : 77,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 15
      } ],
      "name" : "(*reflect.rtype)",
      "type" : "Tuple",
      "underlying" : 78
    }, {
      "name" : "(reflect.Type) func() *reflect.uncommonType",
      "params" : 33,
      "recv" : 17,
      "results" : 80,
      "type" : "Signature",
      "underlying" : 79,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 81
      } ],
      "name" : "(*reflect.uncommonType)",
      "type" : "Tuple",
      "underlying" : 80
    }, {
      "elem" : 82,
      "name" : "*reflect.uncommonType",
      "type" : "Pointer",
      "underlying" : 81
    }, {
      "local-name" : "uncommonType",
      "name" : "reflect.uncommonType",
      "package" : 1,
      "type" : "Named",
      "underlying" : 83
    }, {
      "fields" : [ {
        "name" : "pkgPath",
        "type" : 29
      }, {
        "name" : "mcount",
        "type" : 84
      }, {
        "name" : "xcount",
        "type" : 84
      }, {
        "name" : "moff",
        "type" : 19
      }, {
        "name" : "_",
        "type" : 19
      } ],
      "name" : "struct{pkgPath reflect.nameOff; mcount uint16; xcount uint16; moff uint32; _ uint32}",
      "type" : "Struct",
      "underlying" : 83
    }, {
      "name" : "uint16",
      "type" : "Basic",
      "underlying" : 84
    }, {
      "elem" : 86,
      "name" : "*github.com/elastic/go-structform/gotype.typeUnfoldRegistry",
      "type" : "Pointer",
      "underlying" : 85
    }, {
      "local-name" : "typeUnfoldRegistry",
      "name" : "github.com/elastic/go-structform/gotype.typeUnfoldRegistry",
      "package" : 0,
      "type" : "Named",
      "underlying" : 87
    }, {
      "fields" : [ {
        "name" : "m",
        "type" : 8
      } ],
      "name" : "struct{m map[reflect.Type]github.com/elastic/go-structform/gotype.reflUnfolder}",
      "type" : "Struct",
      "underlying" : 87
    }, {
      "local-name" : "unfolderStack",
      "name" : "github.com/elastic/go-structform/gotype.unfolderStack",
      "package" : 0,
      "type" : "Named",
      "underlying" : 89
    }, {
      "fields" : [ {
        "name" : "current",
        "type" : 90
      }, {
        "name" : "stack",
        "type" : 140
      }, {
        "name" : "stack0",
        "type" : 141
      } ],
      "name" : "struct{current github.com/elastic/go-structform/gotype.unfolder; stack []github.com/elastic/go-structform/gotype.unfolder; stack0 [32]github.com/elastic/go-structform/gotype.unfolder}",
      "type" : "Struct",
      "underlying" : 89
    }, {
      "local-name" : "unfolder",
      "name" : "github.com/elastic/go-structform/gotype.unfolder",
      "package" : 0,
      "type" : "Named",
      "underlying" : 91
    }, {
      "methods" : [ {
        "name" : "OnArrayFinished",
        "type" : 92
      }, {
        "name" : "OnArrayStart",
        "type" : 98
      }, {
        "name" : "OnBool",
        "type" : 101
      }, {
        "name" : "OnByte",
        "type" : 103
      }, {
        "name" : "OnChildArrayDone",
        "type" : 92
      }, {
        "name" : "OnChildObjectDone",
        "type" : 92
      }, {
        "name" : "OnFloat32",
        "type" : 105
      }, {
        "name" : "OnFloat64",
        "type" : 108
      }, {
        "name" : "OnInt",
        "type" : 111
      }, {
        "name" : "OnInt16",
        "type" : 113
      }, {
        "name" : "OnInt32",
        "type" : 116
      }, {
        "name" : "OnInt64",
        "type" : 118
      }, {
        "name" : "OnInt8",
        "type" : 121
      }, {
        "name" : "OnKey",
        "type" : 124
      }, {
        "name" : "OnKeyRef",
        "type" : 126
      }, {
        "name" : "OnNil",
        "type" : 92
      }, {
        "name" : "OnObjectFinished",
        "type" : 92
      }, {
        "name" : "OnObjectStart",
        "type" : 98
      }, {
        "name" : "OnString",
        "type" : 124
      }, {
        "name" : "OnStringRef",
        "type" : 126
      }, {
        "name" : "OnUint",
        "type" : 129
      }, {
        "name" : "OnUint16",
        "type" : 131
      }, {
        "name" : "OnUint32",
        "type" : 133
      }, {
        "name" : "OnUint64",
        "type" : 135
      }, {
        "name" : "OnUint8",
        "type" : 138
      } ],
      "name" : "interface{OnArrayFinished(*github.com/elastic/go-structform/gotype.unfoldCtx) error; OnArrayStart(*github.com/elastic/go-structform/gotype.unfoldCtx, int, github.com/elastic/go-structform.BaseType) error; OnBool(*github.com/elastic/go-structform/gotype.unfoldCtx, bool) error; OnByte(*github.com/elastic/go-structform/gotype.unfoldCtx, byte) error; OnChildArrayDone(*github.com/elastic/go-structform/gotype.unfoldCtx) error; OnChildObjectDone(*github.com/elastic/go-structform/gotype.unfoldCtx) error; OnFloat32(*github.com/elastic/go-structform/gotype.unfoldCtx, float32) error; OnFloat64(*github.com/elastic/go-structform/gotype.unfoldCtx, float64) error; OnInt(*github.com/elastic/go-structform/gotype.unfoldCtx, int) error; OnInt16(*github.com/elastic/go-structform/gotype.unfoldCtx, int16) error; OnInt32(*github.com/elastic/go-structform/gotype.unfoldCtx, int32) error; OnInt64(*github.com/elastic/go-structform/gotype.unfoldCtx, int64) error; OnInt8(*github.com/elastic/go-structform/gotype.unfoldCtx, int8) error; OnKey(*github.com/elastic/go-structform/gotype.unfoldCtx, string) error; OnKeyRef(*github.com/elastic/go-structform/gotype.unfoldCtx, []byte) error; OnNil(*github.com/elastic/go-structform/gotype.unfoldCtx) error; OnObjectFinished(*github.com/elastic/go-structform/gotype.unfoldCtx) error; OnObjectStart(*github.com/elastic/go-structform/gotype.unfoldCtx, int, github.com/elastic/go-structform.BaseType) error; OnString(*github.com/elastic/go-structform/gotype.unfoldCtx, string) error; OnStringRef(*github.com/elastic/go-structform/gotype.unfoldCtx, []byte) error; OnUint(*github.com/elastic/go-structform/gotype.unfoldCtx, uint) error; OnUint16(*github.com/elastic/go-structform/gotype.unfoldCtx, uint16) error; OnUint32(*github.com/elastic/go-structform/gotype.unfoldCtx, uint32) error; OnUint64(*github.com/elastic/go-structform/gotype.unfoldCtx, uint64) error; OnUint8(*github.com/elastic/go-structform/gotype.unfoldCtx, uint8) error}",
      "type" : "Interface",
      "underlying" : 91
    }, {
      "name" : "(github.com/elastic/go-structform/gotype.unfolder) func(*github.com/elastic/go-structform/gotype.unfoldCtx) error",
      "params" : 93,
      "recv" : 19,
      "results" : 94,
      "type" : "Signature",
      "underlying" : 92,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 2
      } ],
      "name" : "(*github.com/elastic/go-structform/gotype.unfoldCtx)",
      "type" : "Tuple",
      "underlying" : 93
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 95
      } ],
      "name" : "(error)",
      "type" : "Tuple",
      "underlying" : 94
    }, {
      "local-name" : "error",
      "name" : "error",
      "package" : -1,
      "type" : "Named",
      "underlying" : 96
    }, {
      "methods" : [ {
        "name" : "Error",
        "type" : 97
      } ],
      "name" : "interface{Error() string}",
      "type" : "Interface",
      "underlying" : 96
    }, {
      "name" : "(error) func() string",
      "params" : 33,
      "recv" : 18,
      "results" : 62,
      "type" : "Signature",
      "underlying" : 97,
      "variadic" : false
    }, {
      "name" : "(github.com/elastic/go-structform/gotype.unfolder) func(*github.com/elastic/go-structform/gotype.unfoldCtx, int, github.com/elastic/go-structform.BaseType) error",
      "params" : 99,
      "recv" : 20,
      "results" : 94,
      "type" : "Signature",
      "underlying" : 98,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 2
      }, {
        "name" : "",
        "type" : 38
      }, {
        "name" : "",
        "type" : 100
      } ],
      "name" : "(*github.com/elastic/go-structform/gotype.unfoldCtx, int, github.com/elastic/go-structform.BaseType)",
      "type" : "Tuple",
      "underlying" : 99
    }, {
      "local-name" : "BaseType",
      "name" : "github.com/elastic/go-structform.BaseType",
      "package" : 3,
      "type" : "Named",
      "underlying" : 21
    }, {
      "name" : "(github.com/elastic/go-structform/gotype.unfolder) func(*github.com/elastic/go-structform/gotype.unfoldCtx, bool) error",
      "params" : 102,
      "recv" : 21,
      "results" : 94,
      "type" : "Signature",
      "underlying" : 101,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 2
      }, {
        "name" : "",
        "type" : 26
      } ],
      "name" : "(*github.com/elastic/go-structform/gotype.unfoldCtx, bool)",
      "type" : "Tuple",
      "underlying" : 102
    }, {
      "name" : "(github.com/elastic/go-structform/gotype.unfolder) func(*github.com/elastic/go-structform/gotype.unfoldCtx, byte) error",
      "params" : 104,
      "recv" : 22,
      "results" : 94,
      "type" : "Signature",
      "underlying" : 103,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 2
      }, {
        "name" : "",
        "type" : 28
      } ],
      "name" : "(*github.com/elastic/go-structform/gotype.unfoldCtx, byte)",
      "type" : "Tuple",
      "underlying" : 104
    }, {
      "name" : "(github.com/elastic/go-structform/gotype.unfolder) func(*github.com/elastic/go-structform/gotype.unfoldCtx, float32) error",
      "params" : 106,
      "recv" : 23,
      "results" : 94,
      "type" : "Signature",
      "underlying" : 105,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 2
      }, {
        "name" : "",
        "type" : 107
      } ],
      "name" : "(*github.com/elastic/go-structform/gotype.unfoldCtx, float32)",
      "type" : "Tuple",
      "underlying" : 106
    }, {
      "name" : "float32",
      "type" : "Basic",
      "underlying" : 107
    }, {
      "name" : "(github.com/elastic/go-structform/gotype.unfolder) func(*github.com/elastic/go-structform/gotype.unfoldCtx, float64) error",
      "params" : 109,
      "recv" : 24,
      "results" : 94,
      "type" : "Signature",
      "underlying" : 108,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 2
      }, {
        "name" : "",
        "type" : 110
      } ],
      "name" : "(*github.com/elastic/go-structform/gotype.unfoldCtx, float64)",
      "type" : "Tuple",
      "underlying" : 109
    }, {
      "name" : "float64",
      "type" : "Basic",
      "underlying" : 110
    }, {
      "name" : "(github.com/elastic/go-structform/gotype.unfolder) func(*github.com/elastic/go-structform/gotype.unfoldCtx, int) error",
      "params" : 112,
      "recv" : 25,
      "results" : 94,
      "type" : "Signature",
      "underlying" : 111,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 2
      }, {
        "name" : "",
        "type" : 38
      } ],
      "name" : "(*github.com/elastic/go-structform/gotype.unfoldCtx, int)",
      "type" : "Tuple",
      "underlying" : 112
    }, {
      "name" : "(github.com/elastic/go-structform/gotype.unfolder) func(*github.com/elastic/go-structform/gotype.unfoldCtx, int16) error",
      "params" : 114,
      "recv" : 26,
      "results" : 94,
      "type" : "Signature",
      "underlying" : 113,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 2
      }, {
        "name" : "",
        "type" : 115
      } ],
      "name" : "(*github.com/elastic/go-structform/gotype.unfoldCtx, int16)",
      "type" : "Tuple",
      "underlying" : 114
    }, {
      "name" : "int16",
      "type" : "Basic",
      "underlying" : 115
    }, {
      "name" : "(github.com/elastic/go-structform/gotype.unfolder) func(*github.com/elastic/go-structform/gotype.unfoldCtx, int32) error",
      "params" : 117,
      "recv" : 27,
      "results" : 94,
      "type" : "Signature",
      "underlying" : 116,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 2
      }, {
        "name" : "",
        "type" : 30
      } ],
      "name" : "(*github.com/elastic/go-structform/gotype.unfoldCtx, int32)",
      "type" : "Tuple",
      "underlying" : 117
    }, {
      "name" : "(github.com/elastic/go-structform/gotype.unfolder) func(*github.com/elastic/go-structform/gotype.unfoldCtx, int64) error",
      "params" : 119,
      "recv" : 28,
      "results" : 94,
      "type" : "Signature",
      "underlying" : 118,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 2
      }, {
        "name" : "",
        "type" : 120
      } ],
      "name" : "(*github.com/elastic/go-structform/gotype.unfoldCtx, int64)",
      "type" : "Tuple",
      "underlying" : 119
    }, {
      "name" : "int64",
      "type" : "Basic",
      "underlying" : 120
    }, {
      "name" : "(github.com/elastic/go-structform/gotype.unfolder) func(*github.com/elastic/go-structform/gotype.unfoldCtx, int8) error",
      "params" : 122,
      "recv" : 29,
      "results" : 94,
      "type" : "Signature",
      "underlying" : 121,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 2
      }, {
        "name" : "",
        "type" : 123
      } ],
      "name" : "(*github.com/elastic/go-structform/gotype.unfoldCtx, int8)",
      "type" : "Tuple",
      "underlying" : 122
    }, {
      "name" : "int8",
      "type" : "Basic",
      "underlying" : 123
    }, {
      "name" : "(github.com/elastic/go-structform/gotype.unfolder) func(*github.com/elastic/go-structform/gotype.unfoldCtx, string) error",
      "params" : 125,
      "recv" : 30,
      "results" : 94,
      "type" : "Signature",
      "underlying" : 124,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 2
      }, {
        "name" : "",
        "type" : 7
      } ],
      "name" : "(*github.com/elastic/go-structform/gotype.unfoldCtx, string)",
      "type" : "Tuple",
      "underlying" : 125
    }, {
      "name" : "(github.com/elastic/go-structform/gotype.unfolder) func(*github.com/elastic/go-structform/gotype.unfoldCtx, []byte) error",
      "params" : 127,
      "recv" : 31,
      "results" : 94,
      "type" : "Signature",
      "underlying" : 126,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 2
      }, {
        "name" : "",
        "type" : 128
      } ],
      "name" : "(*github.com/elastic/go-structform/gotype.unfoldCtx, []byte)",
      "type" : "Tuple",
      "underlying" : 127
    }, {
      "elem" : 28,
      "name" : "[]byte",
      "type" : "Slice",
      "underlying" : 128
    }, {
      "name" : "(github.com/elastic/go-structform/gotype.unfolder) func(*github.com/elastic/go-structform/gotype.unfoldCtx, uint) error",
      "params" : 130,
      "recv" : 32,
      "results" : 94,
      "type" : "Signature",
      "underlying" : 129,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 2
      }, {
        "name" : "",
        "type" : 67
      } ],
      "name" : "(*github.com/elastic/go-structform/gotype.unfoldCtx, uint)",
      "type" : "Tuple",
      "underlying" : 130
    }, {
      "name" : "(github.com/elastic/go-structform/gotype.unfolder) func(*github.com/elastic/go-structform/gotype.unfoldCtx, uint16) error",
      "params" : 132,
      "recv" : 33,
      "results" : 94,
      "type" : "Signature",
      "underlying" : 131,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 2
      }, {
        "name" : "",
        "type" : 84
      } ],
      "name" : "(*github.com/elastic/go-structform/gotype.unfoldCtx, uint16)",
      "type" : "Tuple",
      "underlying" : 132
    }, {
      "name" : "(github.com/elastic/go-structform/gotype.unfolder) func(*github.com/elastic/go-structform/gotype.unfoldCtx, uint32) error",
      "params" : 134,
      "recv" : 34,
      "results" : 94,
      "type" : "Signature",
      "underlying" : 133,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 2
      }, {
        "name" : "",
        "type" : 19
      } ],
      "name" : "(*github.com/elastic/go-structform/gotype.unfoldCtx, uint32)",
      "type" : "Tuple",
      "underlying" : 134
    }, {
      "name" : "(github.com/elastic/go-structform/gotype.unfolder) func(*github.com/elastic/go-structform/gotype.unfoldCtx, uint64) error",
      "params" : 136,
      "recv" : 35,
      "results" : 94,
      "type" : "Signature",
      "underlying" : 135,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 2
      }, {
        "name" : "",
        "type" : 137
      } ],
      "name" : "(*github.com/elastic/go-structform/gotype.unfoldCtx, uint64)",
      "type" : "Tuple",
      "underlying" : 136
    }, {
      "name" : "uint64",
      "type" : "Basic",
      "underlying" : 137
    }, {
      "name" : "(github.com/elastic/go-structform/gotype.unfolder) func(*github.com/elastic/go-structform/gotype.unfoldCtx, uint8) error",
      "params" : 139,
      "recv" : 36,
      "results" : 94,
      "type" : "Signature",
      "underlying" : 138,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 2
      }, {
        "name" : "",
        "type" : 21
      } ],
      "name" : "(*github.com/elastic/go-structform/gotype.unfoldCtx, uint8)",
      "type" : "Tuple",
      "underlying" : 139
    }, {
      "elem" : 90,
      "name" : "[]github.com/elastic/go-structform/gotype.unfolder",
      "type" : "Slice",
      "underlying" : 140
    }, {
      "elem" : 90,
      "name" : "[32]github.com/elastic/go-structform/gotype.unfolder",
      "type" : "Array",
      "underlying" : 141
    }, {
      "local-name" : "reflectValueStack",
      "name" : "github.com/elastic/go-structform/gotype.reflectValueStack",
      "package" : 0,
      "type" : "Named",
      "underlying" : 143
    }, {
      "fields" : [ {
        "name" : "current",
        "type" : 13
      }, {
        "name" : "stack",
        "type" : 144
      }, {
        "name" : "stack0",
        "type" : 145
      } ],
      "name" : "struct{current reflect.Value; stack []reflect.Value; stack0 [32]reflect.Value}",
      "type" : "Struct",
      "underlying" : 143
    }, {
      "elem" : 13,
      "name" : "[]reflect.Value",
      "type" : "Slice",
      "underlying" : 144
    }, {
      "elem" : 13,
      "name" : "[32]reflect.Value",
      "type" : "Array",
      "underlying" : 145
    }, {
      "local-name" : "structformTypeStack",
      "name" : "github.com/elastic/go-structform/gotype.structformTypeStack",
      "package" : 0,
      "type" : "Named",
      "underlying" : 147
    }, {
      "fields" : [ {
        "name" : "current",
        "type" : 100
      }, {
        "name" : "stack",
        "type" : 148
      }, {
        "name" : "stack0",
        "type" : 149
      } ],
      "name" : "struct{current github.com/elastic/go-structform.BaseType; stack []github.com/elastic/go-structform.BaseType; stack0 [32]github.com/elastic/go-structform.BaseType}",
      "type" : "Struct",
      "underlying" : 147
    }, {
      "elem" : 100,
      "name" : "[]github.com/elastic/go-structform.BaseType",
      "type" : "Slice",
      "underlying" : 148
    }, {
      "elem" : 100,
      "name" : "[32]github.com/elastic/go-structform.BaseType",
      "type" : "Array",
      "underlying" : 149
    }, {
      "local-name" : "ptrStack",
      "name" : "github.com/elastic/go-structform/gotype.ptrStack",
      "package" : 0,
      "type" : "Named",
      "underlying" : 151
    }, {
      "fields" : [ {
        "name" : "current",
        "type" : 24
      }, {
        "name" : "stack",
        "type" : 152
      }, {
        "name" : "stack0",
        "type" : 153
      } ],
      "name" : "struct{current unsafe.Pointer; stack []unsafe.Pointer; stack0 [32]unsafe.Pointer}",
      "type" : "Struct",
      "underlying" : 151
    }, {
      "elem" : 24,
      "name" : "[]unsafe.Pointer",
      "type" : "Slice",
      "underlying" : 152
    }, {
      "elem" : 24,
      "name" : "[32]unsafe.Pointer",
      "type" : "Array",
      "underlying" : 153
    }, {
      "local-name" : "keyStack",
      "name" : "github.com/elastic/go-structform/gotype.keyStack",
      "package" : 0,
      "type" : "Named",
      "underlying" : 155
    }, {
      "fields" : [ {
        "name" : "current",
        "type" : 7
      }, {
        "name" : "stack",
        "type" : 156
      }, {
        "name" : "stack0",
        "type" : 157
      } ],
      "name" : "struct{current string; stack []string; stack0 [32]string}",
      "type" : "Struct",
      "underlying" : 155
    }, {
      "elem" : 7,
      "name" : "[]string",
      "type" : "Slice",
      "underlying" : 156
    }, {
      "elem" : 7,
      "name" : "[32]string",
      "type" : "Array",
      "underlying" : 157
    }, {
      "local-name" : "idxStack",
      "name" : "github.com/elastic/go-structform/gotype.idxStack",
      "package" : 0,
      "type" : "Named",
      "underlying" : 159
    }, {
      "fields" : [ {
        "name" : "current",
        "type" : 38
      }, {
        "name" : "stack",
        "type" : 53
      }, {
        "name" : "stack0",
        "type" : 160
      } ],
      "name" : "struct{current int; stack []int; stack0 [32]int}",
      "type" : "Struct",
      "underlying" : 159
    }, {
      "elem" : 38,
      "name" : "[32]int",
      "type" : "Array",
      "underlying" : 160
    }, {
      "local-name" : "symbolCache",
      "name" : "github.com/elastic/go-structform/gotype.symbolCache",
      "package" : 0,
      "type" : "Named",
      "underlying" : 162
    }, {
      "fields" : [ {
        "name" : "m",
        "type" : 163
      }, {
        "name" : "lst",
        "type" : 167
      }, {
        "name" : "max",
        "type" : 38
      } ],
      "name" : "struct{m map[string]*github.com/elastic/go-structform/gotype.symbol; lst github.com/elastic/go-structform/gotype.symbolList; max int}",
      "type" : "Struct",
      "underlying" : 162
    }, {
      "elem" : 164,
      "key" : 7,
      "name" : "map[string]*github.com/elastic/go-structform/gotype.symbol",
      "type" : "Map",
      "underlying" : 163
    }, {
      "elem" : 165,
      "name" : "*github.com/elastic/go-structform/gotype.symbol",
      "type" : "Pointer",
      "underlying" : 164
    }, {
      "local-name" : "symbol",
      "name" : "github.com/elastic/go-structform/gotype.symbol",
      "package" : 0,
      "type" : "Named",
      "underlying" : 166
    }, {
      "fields" : [ {
        "name" : "value",
        "type" : 7
      }, {
        "name" : "prev",
        "type" : 164
      }, {
        "name" : "next",
        "type" : 164
      } ],
      "name" : "struct{value string; prev *github.com/elastic/go-structform/gotype.symbol; next *github.com/elastic/go-structform/gotype.symbol}",
      "type" : "Struct",
      "underlying" : 166
    }, {
      "local-name" : "symbolList",
      "name" : "github.com/elastic/go-structform/gotype.symbolList",
      "package" : 0,
      "type" : "Named",
      "underlying" : 166
    }, {
      "local-name" : "unfoldBuf",
      "name" : "github.com/elastic/go-structform/gotype.unfoldBuf",
      "package" : 0,
      "type" : "Named",
      "underlying" : 169
    }, {
      "fields" : [ {
        "name" : "arrays",
        "type" : 170
      }, {
        "name" : "mapPrimitive",
        "type" : 171
      }, {
        "name" : "mapAny",
        "type" : 173
      } ],
      "name" : "struct{arrays [][]byte; mapPrimitive []map[string]byte; mapAny []map[string]interface{}}",
      "type" : "Struct",
      "underlying" : 169
    }, {
      "elem" : 128,
      "name" : "[][]byte",
      "type" : "Slice",
      "underlying" : 170
    }, {
      "elem" : 172,
      "name" : "[]map[string]byte",
      "type" : "Slice",
      "underlying" : 171
    }, {
      "elem" : 28,
      "key" : 7,
      "name" : "map[string]byte",
      "type" : "Map",
      "underlying" : 172
    }, {
      "elem" : 174,
      "name" : "[]map[string]interface{}",
      "type" : "Slice",
      "underlying" : 173
    }, {
      "elem" : 175,
      "key" : 7,
      "name" : "map[string]interface{}",
      "type" : "Map",
      "underlying" : 174
    }, {
      "methods" : [ ],
      "name" : "interface{}",
      "type" : "Interface",
      "underlying" : 175
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 175
      }, {
        "name" : "",
        "type" : 24
      }, {
        "name" : "",
        "type" : 177
      } ],
      "name" : "(interface{}, unsafe.Pointer, github.com/elastic/go-structform/gotype.ptrUnfolder)",
      "type" : "Tuple",
      "underlying" : 176
    }, {
      "local-name" : "ptrUnfolder",
      "name" : "github.com/elastic/go-structform/gotype.ptrUnfolder",
      "package" : 0,
      "type" : "Named",
      "underlying" : 178
    }, {
      "methods" : [ {
        "name" : "initState",
        "type" : 179
      } ],
      "name" : "interface{initState(*github.com/elastic/go-structform/gotype.unfoldCtx, unsafe.Pointer)}",
      "type" : "Interface",
      "underlying" : 178
    }, {
      "name" : "(github.com/elastic/go-structform/gotype.ptrUnfolder) func(*github.com/elastic/go-structform/gotype.unfoldCtx, unsafe.Pointer)",
      "params" : 180,
      "recv" : 37,
      "results" : 33,
      "type" : "Signature",
      "underlying" : 179,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 2
      }, {
        "name" : "",
        "type" : 24
      } ],
      "name" : "(*github.com/elastic/go-structform/gotype.unfoldCtx, unsafe.Pointer)",
      "type" : "Tuple",
      "underlying" : 180
    }, {
      "name" : "func([]map[string]interface{}) int",
      "params" : 182,
      "recv" : -1,
      "results" : 37,
      "type" : "Signature",
      "underlying" : 181,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 173
      } ],
      "name" : "([]map[string]interface{})",
      "type" : "Tuple",
      "underlying" : 182
    }, {
      "name" : "func([]map[string]interface{}, ...map[string]interface{}) []map[string]interface{}",
      "params" : 184,
      "recv" : -1,
      "results" : 182,
      "type" : "Signature",
      "underlying" : 183,
      "variadic" : true
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 173
      }, {
        "name" : "",
        "type" : 173
      } ],
      "name" : "([]map[string]interface{}, []map[string]interface{})",
      "type" : "Tuple",
      "underlying" : 184
    }, {
      "name" : "untyped nil",
      "type" : "Basic",
      "underlying" : 185
    }, {
      "elem" : 174,
      "name" : "*map[string]interface{}",
      "type" : "Pointer",
      "underlying" : 186
    }, {
      "elem" : 188,
      "name" : "*github.com/elastic/go-structform/gotype.unfolderMapIfc",
      "type" : "Pointer",
      "underlying" : 187
    }, {
      "local-name" : "unfolderMapIfc",
      "name" : "github.com/elastic/go-structform/gotype.unfolderMapIfc",
      "package" : 0,
      "type" : "Named",
      "underlying" : 189
    }, {
      "fields" : [ {
        "name" : "unfolderErrUnknown",
        "type" : 190
      } ],
      "name" : "struct{github.com/elastic/go-structform/gotype.unfolderErrUnknown}",
      "type" : "Struct",
      "underlying" : 189
    }, {
      "local-name" : "unfolderErrUnknown",
      "name" : "github.com/elastic/go-structform/gotype.unfolderErrUnknown",
      "package" : 0,
      "type" : "Named",
      "underlying" : 191
    }, {
      "fields" : [ ],
      "name" : "struct{}",
      "type" : "Struct",
      "underlying" : 191
    }, {
      "name" : "func() *github.com/elastic/go-structform/gotype.unfolderMapIfc",
      "params" : 33,
      "recv" : -1,
      "results" : 193,
      "type" : "Signature",
      "underlying" : 192,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 187
      } ],
      "name" : "(*github.com/elastic/go-structform/gotype.unfolderMapIfc)",
      "type" : "Tuple",
      "underlying" : 193
    }, {
      "name" : "func([]map[string]byte) int",
      "params" : 195,
      "recv" : -1,
      "results" : 37,
      "type" : "Signature",
      "underlying" : 194,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 171
      } ],
      "name" : "([]map[string]byte)",
      "type" : "Tuple",
      "underlying" : 195
    }, {
      "name" : "func([]map[string]byte, ...map[string]byte) []map[string]byte",
      "params" : 197,
      "recv" : -1,
      "results" : 195,
      "type" : "Signature",
      "underlying" : 196,
      "variadic" : true
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 171
      }, {
        "name" : "",
        "type" : 171
      } ],
      "name" : "([]map[string]byte, []map[string]byte)",
      "type" : "Tuple",
      "underlying" : 197
    }, {
      "elem" : 172,
      "name" : "*map[string]byte",
      "type" : "Pointer",
      "underlying" : 198
    }, {
      "elem" : 200,
      "name" : "*map[string]bool",
      "type" : "Pointer",
      "underlying" : 199
    }, {
      "elem" : 26,
      "key" : 7,
      "name" : "map[string]bool",
      "type" : "Map",
      "underlying" : 200
    }, {
      "elem" : 202,
      "name" : "*github.com/elastic/go-structform/gotype.unfolderMapBool",
      "type" : "Pointer",
      "underlying" : 201
    }, {
      "local-name" : "unfolderMapBool",
      "name" : "github.com/elastic/go-structform/gotype.unfolderMapBool",
      "package" : 0,
      "type" : "Named",
      "underlying" : 189
    }, {
      "name" : "func() *github.com/elastic/go-structform/gotype.unfolderMapBool",
      "params" : 33,
      "recv" : -1,
      "results" : 204,
      "type" : "Signature",
      "underlying" : 203,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 201
      } ],
      "name" : "(*github.com/elastic/go-structform/gotype.unfolderMapBool)",
      "type" : "Tuple",
      "underlying" : 204
    }, {
      "elem" : 206,
      "name" : "*map[string]uint8",
      "type" : "Pointer",
      "underlying" : 205
    }, {
      "elem" : 21,
      "key" : 7,
      "name" : "map[string]uint8",
      "type" : "Map",
      "underlying" : 206
    }, {
      "elem" : 208,
      "name" : "*github.com/elastic/go-structform/gotype.unfolderMapUint8",
      "type" : "Pointer",
      "underlying" : 207
    }, {
      "local-name" : "unfolderMapUint8",
      "name" : "github.com/elastic/go-structform/gotype.unfolderMapUint8",
      "package" : 0,
      "type" : "Named",
      "underlying" : 189
    }, {
      "name" : "func() *github.com/elastic/go-structform/gotype.unfolderMapUint8",
      "params" : 33,
      "recv" : -1,
      "results" : 210,
      "type" : "Signature",
      "underlying" : 209,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 207
      } ],
      "name" : "(*github.com/elastic/go-structform/gotype.unfolderMapUint8)",
      "type" : "Tuple",
      "underlying" : 210
    }, {
      "elem" : 212,
      "name" : "*map[string]float32",
      "type" : "Pointer",
      "underlying" : 211
    }, {
      "elem" : 107,
      "key" : 7,
      "name" : "map[string]float32",
      "type" : "Map",
      "underlying" : 212
    }, {
      "elem" : 214,
      "name" : "*github.com/elastic/go-structform/gotype.unfolderMapFloat32",
      "type" : "Pointer",
      "underlying" : 213
    }, {
      "local-name" : "unfolderMapFloat32",
      "name" : "github.com/elastic/go-structform/gotype.unfolderMapFloat32",
      "package" : 0,
      "type" : "Named",
      "underlying" : 189
    }, {
      "name" : "func() *github.com/elastic/go-structform/gotype.unfolderMapFloat32",
      "params" : 33,
      "recv" : -1,
      "results" : 216,
      "type" : "Signature",
      "underlying" : 215,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 213
      } ],
      "name" : "(*github.com/elastic/go-structform/gotype.unfolderMapFloat32)",
      "type" : "Tuple",
      "underlying" : 216
    }, {
      "elem" : 218,
      "name" : "*map[string]float64",
      "type" : "Pointer",
      "underlying" : 217
    }, {
      "elem" : 110,
      "key" : 7,
      "name" : "map[string]float64",
      "type" : "Map",
      "underlying" : 218
    }, {
      "elem" : 220,
      "name" : "*github.com/elastic/go-structform/gotype.unfolderMapFloat64",
      "type" : "Pointer",
      "underlying" : 219
    }, {
      "local-name" : "unfolderMapFloat64",
      "name" : "github.com/elastic/go-structform/gotype.unfolderMapFloat64",
      "package" : 0,
      "type" : "Named",
      "underlying" : 189
    }, {
      "name" : "func() *github.com/elastic/go-structform/gotype.unfolderMapFloat64",
      "params" : 33,
      "recv" : -1,
      "results" : 222,
      "type" : "Signature",
      "underlying" : 221,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 219
      } ],
      "name" : "(*github.com/elastic/go-structform/gotype.unfolderMapFloat64)",
      "type" : "Tuple",
      "underlying" : 222
    }, {
      "elem" : 224,
      "name" : "*map[string]int16",
      "type" : "Pointer",
      "underlying" : 223
    }, {
      "elem" : 115,
      "key" : 7,
      "name" : "map[string]int16",
      "type" : "Map",
      "underlying" : 224
    }, {
      "elem" : 226,
      "name" : "*github.com/elastic/go-structform/gotype.unfolderMapInt16",
      "type" : "Pointer",
      "underlying" : 225
    }, {
      "local-name" : "unfolderMapInt16",
      "name" : "github.com/elastic/go-structform/gotype.unfolderMapInt16",
      "package" : 0,
      "type" : "Named",
      "underlying" : 189
    }, {
      "name" : "func() *github.com/elastic/go-structform/gotype.unfolderMapInt16",
      "params" : 33,
      "recv" : -1,
      "results" : 228,
      "type" : "Signature",
      "underlying" : 227,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 225
      } ],
      "name" : "(*github.com/elastic/go-structform/gotype.unfolderMapInt16)",
      "type" : "Tuple",
      "underlying" : 228
    }, {
      "elem" : 230,
      "name" : "*map[string]int32",
      "type" : "Pointer",
      "underlying" : 229
    }, {
      "elem" : 30,
      "key" : 7,
      "name" : "map[string]int32",
      "type" : "Map",
      "underlying" : 230
    }, {
      "elem" : 232,
      "name" : "*github.com/elastic/go-structform/gotype.unfolderMapInt32",
      "type" : "Pointer",
      "underlying" : 231
    }, {
      "local-name" : "unfolderMapInt32",
      "name" : "github.com/elastic/go-structform/gotype.unfolderMapInt32",
      "package" : 0,
      "type" : "Named",
      "underlying" : 189
    }, {
      "name" : "func() *github.com/elastic/go-structform/gotype.unfolderMapInt32",
      "params" : 33,
      "recv" : -1,
      "results" : 234,
      "type" : "Signature",
      "underlying" : 233,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 231
      } ],
      "name" : "(*github.com/elastic/go-structform/gotype.unfolderMapInt32)",
      "type" : "Tuple",
      "underlying" : 234
    }, {
      "elem" : 236,
      "name" : "*map[string]int64",
      "type" : "Pointer",
      "underlying" : 235
    }, {
      "elem" : 120,
      "key" : 7,
      "name" : "map[string]int64",
      "type" : "Map",
      "underlying" : 236
    }, {
      "elem" : 238,
      "name" : "*github.com/elastic/go-structform/gotype.unfolderMapInt64",
      "type" : "Pointer",
      "underlying" : 237
    }, {
      "local-name" : "unfolderMapInt64",
      "name" : "github.com/elastic/go-structform/gotype.unfolderMapInt64",
      "package" : 0,
      "type" : "Named",
      "underlying" : 189
    }, {
      "name" : "func() *github.com/elastic/go-structform/gotype.unfolderMapInt64",
      "params" : 33,
      "recv" : -1,
      "results" : 240,
      "type" : "Signature",
      "underlying" : 239,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 237
      } ],
      "name" : "(*github.com/elastic/go-structform/gotype.unfolderMapInt64)",
      "type" : "Tuple",
      "underlying" : 240
    }, {
      "elem" : 242,
      "name" : "*map[string]int8",
      "type" : "Pointer",
      "underlying" : 241
    }, {
      "elem" : 123,
      "key" : 7,
      "name" : "map[string]int8",
      "type" : "Map",
      "underlying" : 242
    }, {
      "elem" : 244,
      "name" : "*github.com/elastic/go-structform/gotype.unfolderMapInt8",
      "type" : "Pointer",
      "underlying" : 243
    }, {
      "local-name" : "unfolderMapInt8",
      "name" : "github.com/elastic/go-structform/gotype.unfolderMapInt8",
      "package" : 0,
      "type" : "Named",
      "underlying" : 189
    }, {
      "name" : "func() *github.com/elastic/go-structform/gotype.unfolderMapInt8",
      "params" : 33,
      "recv" : -1,
      "results" : 246,
      "type" : "Signature",
      "underlying" : 245,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 243
      } ],
      "name" : "(*github.com/elastic/go-structform/gotype.unfolderMapInt8)",
      "type" : "Tuple",
      "underlying" : 246
    }, {
      "elem" : 248,
      "name" : "*map[string]int",
      "type" : "Pointer",
      "underlying" : 247
    }, {
      "elem" : 38,
      "key" : 7,
      "name" : "map[string]int",
      "type" : "Map",
      "underlying" : 248
    }, {
      "elem" : 250,
      "name" : "*github.com/elastic/go-structform/gotype.unfolderMapInt",
      "type" : "Pointer",
      "underlying" : 249
    }, {
      "local-name" : "unfolderMapInt",
      "name" : "github.com/elastic/go-structform/gotype.unfolderMapInt",
      "package" : 0,
      "type" : "Named",
      "underlying" : 189
    }, {
      "name" : "func() *github.com/elastic/go-structform/gotype.unfolderMapInt",
      "params" : 33,
      "recv" : -1,
      "results" : 252,
      "type" : "Signature",
      "underlying" : 251,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 249
      } ],
      "name" : "(*github.com/elastic/go-structform/gotype.unfolderMapInt)",
      "type" : "Tuple",
      "underlying" : 252
    }, {
      "elem" : 254,
      "name" : "*map[string]string",
      "type" : "Pointer",
      "underlying" : 253
    }, {
      "elem" : 7,
      "key" : 7,
      "name" : "map[string]string",
      "type" : "Map",
      "underlying" : 254
    }, {
      "elem" : 256,
      "name" : "*github.com/elastic/go-structform/gotype.unfolderMapString",
      "type" : "Pointer",
      "underlying" : 255
    }, {
      "local-name" : "unfolderMapString",
      "name" : "github.com/elastic/go-structform/gotype.unfolderMapString",
      "package" : 0,
      "type" : "Named",
      "underlying" : 189
    }, {
      "name" : "func() *github.com/elastic/go-structform/gotype.unfolderMapString",
      "params" : 33,
      "recv" : -1,
      "results" : 258,
      "type" : "Signature",
      "underlying" : 257,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 255
      } ],
      "name" : "(*github.com/elastic/go-structform/gotype.unfolderMapString)",
      "type" : "Tuple",
      "underlying" : 258
    }, {
      "elem" : 260,
      "name" : "*map[string]uint16",
      "type" : "Pointer",
      "underlying" : 259
    }, {
      "elem" : 84,
      "key" : 7,
      "name" : "map[string]uint16",
      "type" : "Map",
      "underlying" : 260
    }, {
      "elem" : 262,
      "name" : "*github.com/elastic/go-structform/gotype.unfolderMapUint16",
      "type" : "Pointer",
      "underlying" : 261
    }, {
      "local-name" : "unfolderMapUint16",
      "name" : "github.com/elastic/go-structform/gotype.unfolderMapUint16",
      "package" : 0,
      "type" : "Named",
      "underlying" : 189
    }, {
      "name" : "func() *github.com/elastic/go-structform/gotype.unfolderMapUint16",
      "params" : 33,
      "recv" : -1,
      "results" : 264,
      "type" : "Signature",
      "underlying" : 263,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 261
      } ],
      "name" : "(*github.com/elastic/go-structform/gotype.unfolderMapUint16)",
      "type" : "Tuple",
      "underlying" : 264
    }, {
      "elem" : 266,
      "name" : "*map[string]uint32",
      "type" : "Pointer",
      "underlying" : 265
    }, {
      "elem" : 19,
      "key" : 7,
      "name" : "map[string]uint32",
      "type" : "Map",
      "underlying" : 266
    }, {
      "elem" : 268,
      "name" : "*github.com/elastic/go-structform/gotype.unfolderMapUint32",
      "type" : "Pointer",
      "underlying" : 267
    }, {
      "local-name" : "unfolderMapUint32",
      "name" : "github.com/elastic/go-structform/gotype.unfolderMapUint32",
      "package" : 0,
      "type" : "Named",
      "underlying" : 189
    }, {
      "name" : "func() *github.com/elastic/go-structform/gotype.unfolderMapUint32",
      "params" : 33,
      "recv" : -1,
      "results" : 270,
      "type" : "Signature",
      "underlying" : 269,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 267
      } ],
      "name" : "(*github.com/elastic/go-structform/gotype.unfolderMapUint32)",
      "type" : "Tuple",
      "underlying" : 270
    }, {
      "elem" : 272,
      "name" : "*map[string]uint64",
      "type" : "Pointer",
      "underlying" : 271
    }, {
      "elem" : 137,
      "key" : 7,
      "name" : "map[string]uint64",
      "type" : "Map",
      "underlying" : 272
    }, {
      "elem" : 274,
      "name" : "*github.com/elastic/go-structform/gotype.unfolderMapUint64",
      "type" : "Pointer",
      "underlying" : 273
    }, {
      "local-name" : "unfolderMapUint64",
      "name" : "github.com/elastic/go-structform/gotype.unfolderMapUint64",
      "package" : 0,
      "type" : "Named",
      "underlying" : 189
    }, {
      "name" : "func() *github.com/elastic/go-structform/gotype.unfolderMapUint64",
      "params" : 33,
      "recv" : -1,
      "results" : 276,
      "type" : "Signature",
      "underlying" : 275,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 273
      } ],
      "name" : "(*github.com/elastic/go-structform/gotype.unfolderMapUint64)",
      "type" : "Tuple",
      "underlying" : 276
    }, {
      "elem" : 278,
      "name" : "*map[string]uint",
      "type" : "Pointer",
      "underlying" : 277
    }, {
      "elem" : 67,
      "key" : 7,
      "name" : "map[string]uint",
      "type" : "Map",
      "underlying" : 278
    }, {
      "elem" : 280,
      "name" : "*github.com/elastic/go-structform/gotype.unfolderMapUint",
      "type" : "Pointer",
      "underlying" : 279
    }, {
      "local-name" : "unfolderMapUint",
      "name" : "github.com/elastic/go-structform/gotype.unfolderMapUint",
      "package" : 0,
      "type" : "Named",
      "underlying" : 189
    }, {
      "name" : "func() *github.com/elastic/go-structform/gotype.unfolderMapUint",
      "params" : 33,
      "recv" : -1,
      "results" : 282,
      "type" : "Signature",
      "underlying" : 281,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 279
      } ],
      "name" : "(*github.com/elastic/go-structform/gotype.unfolderMapUint)",
      "type" : "Tuple",
      "underlying" : 282
    }, {
      "name" : "func(interface{})",
      "params" : 284,
      "recv" : -1,
      "results" : 33,
      "type" : "Signature",
      "underlying" : 283,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 175
      } ],
      "name" : "(interface{})",
      "type" : "Tuple",
      "underlying" : 284
    } ],
    "variables" : [ {
      "name" : "",
      "package" : 0,
      "type" : 9,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 1,
      "type" : 34,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 1,
      "type" : 34,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 1,
      "type" : 34,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 1,
      "type" : 34,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 1,
      "type" : 34,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 1,
      "type" : 34,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 1,
      "type" : 34,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 1,
      "type" : 34,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 1,
      "type" : 34,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 1,
      "type" : 34,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 1,
      "type" : 34,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 1,
      "type" : 34,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 1,
      "type" : 34,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 1,
      "type" : 34,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 1,
      "type" : 34,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 1,
      "type" : 34,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 1,
      "type" : 34,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : -1,
      "type" : 95,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 0,
      "type" : 90,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 0,
      "type" : 90,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 0,
      "type" : 90,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 0,
      "type" : 90,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 0,
      "type" : 90,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 0,
      "type" : 90,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 0,
      "type" : 90,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 0,
      "type" : 90,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 0,
      "type" : 90,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 0,
      "type" : 90,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 0,
      "type" : 90,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 0,
      "type" : 90,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 0,
      "type" : 90,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 0,
      "type" : 90,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 0,
      "type" : 90,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 0,
      "type" : 90,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 0,
      "type" : 90,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 0,
      "type" : 90,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 0,
      "type" : 177,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "ctx",
      "package" : 0,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "l",
      "package" : 0,
      "type" : 38,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "bt",
      "package" : 0,
      "type" : 100,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "[res0]",
      "package" : 0,
      "type" : 175,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "[res1]",
      "package" : 0,
      "type" : 24,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "[res2]",
      "package" : 0,
      "type" : 177,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "valueBuffer",
      "package" : 0,
      "type" : 168,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "mapAny",
      "package" : 0,
      "type" : 173,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "idx",
      "package" : 0,
      "type" : 38,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "to",
      "package" : 0,
      "type" : 186,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "ptr",
      "package" : 0,
      "type" : 24,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "unfolder",
      "package" : 0,
      "type" : 187,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "mapPrimitive",
      "package" : 0,
      "type" : 171,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "idx",
      "package" : 0,
      "type" : 38,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "mapPtr",
      "package" : 0,
      "type" : 198,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "ptr",
      "package" : 0,
      "type" : 24,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "to",
      "package" : 0,
      "type" : 199,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "unfolder",
      "package" : 0,
      "type" : 201,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "idx",
      "package" : 0,
      "type" : 38,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "mapPtr",
      "package" : 0,
      "type" : 198,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "ptr",
      "package" : 0,
      "type" : 24,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "to",
      "package" : 0,
      "type" : 205,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "unfolder",
      "package" : 0,
      "type" : 207,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "idx",
      "package" : 0,
      "type" : 38,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "mapPtr",
      "package" : 0,
      "type" : 198,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "ptr",
      "package" : 0,
      "type" : 24,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "to",
      "package" : 0,
      "type" : 211,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "unfolder",
      "package" : 0,
      "type" : 213,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "idx",
      "package" : 0,
      "type" : 38,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "mapPtr",
      "package" : 0,
      "type" : 198,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "ptr",
      "package" : 0,
      "type" : 24,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "to",
      "package" : 0,
      "type" : 217,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "unfolder",
      "package" : 0,
      "type" : 219,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "idx",
      "package" : 0,
      "type" : 38,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "mapPtr",
      "package" : 0,
      "type" : 198,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "ptr",
      "package" : 0,
      "type" : 24,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "to",
      "package" : 0,
      "type" : 223,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "unfolder",
      "package" : 0,
      "type" : 225,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "idx",
      "package" : 0,
      "type" : 38,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "mapPtr",
      "package" : 0,
      "type" : 198,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "ptr",
      "package" : 0,
      "type" : 24,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "to",
      "package" : 0,
      "type" : 229,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "unfolder",
      "package" : 0,
      "type" : 231,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "idx",
      "package" : 0,
      "type" : 38,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "mapPtr",
      "package" : 0,
      "type" : 198,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "ptr",
      "package" : 0,
      "type" : 24,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "to",
      "package" : 0,
      "type" : 235,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "unfolder",
      "package" : 0,
      "type" : 237,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "idx",
      "package" : 0,
      "type" : 38,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "mapPtr",
      "package" : 0,
      "type" : 198,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "ptr",
      "package" : 0,
      "type" : 24,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "to",
      "package" : 0,
      "type" : 241,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "unfolder",
      "package" : 0,
      "type" : 243,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "idx",
      "package" : 0,
      "type" : 38,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "mapPtr",
      "package" : 0,
      "type" : 198,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "ptr",
      "package" : 0,
      "type" : 24,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "to",
      "package" : 0,
      "type" : 247,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "unfolder",
      "package" : 0,
      "type" : 249,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "idx",
      "package" : 0,
      "type" : 38,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "mapPtr",
      "package" : 0,
      "type" : 198,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "ptr",
      "package" : 0,
      "type" : 24,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "to",
      "package" : 0,
      "type" : 253,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "unfolder",
      "package" : 0,
      "type" : 255,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "idx",
      "package" : 0,
      "type" : 38,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "mapPtr",
      "package" : 0,
      "type" : 198,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "ptr",
      "package" : 0,
      "type" : 24,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "to",
      "package" : 0,
      "type" : 259,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "unfolder",
      "package" : 0,
      "type" : 261,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "idx",
      "package" : 0,
      "type" : 38,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "mapPtr",
      "package" : 0,
      "type" : 198,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "ptr",
      "package" : 0,
      "type" : 24,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "to",
      "package" : 0,
      "type" : 265,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "unfolder",
      "package" : 0,
      "type" : 267,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "idx",
      "package" : 0,
      "type" : 38,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "mapPtr",
      "package" : 0,
      "type" : 198,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "ptr",
      "package" : 0,
      "type" : 24,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "to",
      "package" : 0,
      "type" : 271,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "unfolder",
      "package" : 0,
      "type" : 273,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "idx",
      "package" : 0,
      "type" : 38,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "mapPtr",
      "package" : 0,
      "type" : 198,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "ptr",
      "package" : 0,
      "type" : 24,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "to",
      "package" : 0,
      "type" : 205,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "unfolder",
      "package" : 0,
      "type" : 207,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "idx",
      "package" : 0,
      "type" : 38,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "mapPtr",
      "package" : 0,
      "type" : 198,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "ptr",
      "package" : 0,
      "type" : 24,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "to",
      "package" : 0,
      "type" : 277,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "unfolder",
      "package" : 0,
      "type" : 279,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "idx",
      "package" : 0,
      "type" : 38,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "to",
      "package" : 0,
      "type" : 186,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "ptr",
      "package" : 0,
      "type" : 24,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "unfolder",
      "package" : 0,
      "type" : 187,
      "exported" : false,
      "embedded" : false,
      "field" : false
    } ]
  },
  "go-version" : "1.14.3"
}