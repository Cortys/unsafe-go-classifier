{
  "usage" : {
    "file" : "unfold_lookup_go.generated.go",
    "label1" : "cast-pointer",
    "label2" : "serialization",
    "line" : "89",
    "module" : "github.com/elastic/go-structform",
    "pkg" : "github.com/elastic/go-structform/gotype",
    "project" : "elastic/beats",
    "snippet" : "return unsafe.Pointer(ptr), newUnfolderMapBool()",
    "version" : "v0.0.6"
  },
  "cfg" : {
    "blocks" : [ {
      "update-vars" : [ ],
      "successors" : [ 2 ],
      "in-vars" : [ 37 ],
      "exit" : false,
      "out-vars" : [ 37 ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[entry]",
      "entry" : true,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ ],
      "in-vars" : [ ],
      "exit" : true,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[exit]",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 3 ],
      "in-vars" : [ 37 ],
      "exit" : false,
      "out-vars" : [ 40, 43, 57, 78, 77, 75, 48, 66, 68, 54, 52, 65, 55, 51, 49, 41, 62, 53, 76, 80, 61, 63, 71, 73, 60, 42, 81, 83, 47, 82, 70, 64, 58, 44, 79, 45, 74, 72, 56, 46, 50, 37, 67, 84, 69, 59 ],
      "decl-vars" : [ 82, 54, 58, 66, 76, 59, 70, 74, 85, 40, 42, 45, 46, 72, 73, 75, 79, 49, 61, 64, 71, 81, 57, 62, 83, 60, 63, 68, 84, 51, 53, 69, 77, 41, 44, 47, 50, 78, 52, 56, 80, 67, 43, 48, 55, 65 ],
      "line-start" : 76,
      "ast" : {
        "kind" : "statement",
        "type" : "type-switch"
      },
      "assign-vars" : [ ],
      "line-end" : 184,
      "code" : "switch ptr := to.(type) {\ncase *interface{}:\n\treturn unsafe.Pointer(ptr), newUnfolderIfc()\ncase *[]interface{}:\n\treturn unsafe.Pointer(ptr), newUnfolderArrIfc()\ncase *map[string]interface{}:\n\treturn unsafe.Pointer(ptr), newUnfolderMapIfc()\n\ncase *bool:\n\treturn unsafe.Pointer(ptr), newUnfolderBool()\ncase *[]bool:\n\treturn unsafe.Pointer(ptr), newUnfolderArrBool()\ncase *map[string]bool:\n\treturn unsafe.Pointer(ptr), newUnfolderMapBool()\n\ncase *string:\n\treturn unsafe.Pointer(ptr), newUnfolderString()\ncase *[]string:\n\treturn unsafe.Pointer(ptr), newUnfolderArrString()\ncase *map[string]string:\n\treturn unsafe.Pointer(ptr), newUnfolderMapString()\n\ncase *uint:\n\treturn unsafe.Pointer(ptr), newUnfolderUint()\ncase *[]uint:\n\treturn unsafe.Pointer(ptr), newUnfolderArrUint()\ncase *map[string]uint:\n\treturn unsafe.Pointer(ptr), newUnfolderMapUint()\n\ncase *uint8:\n\treturn unsafe.Pointer(ptr), newUnfolderUint8()\ncase *[]uint8:\n\treturn unsafe.Pointer(ptr), newUnfolderArrUint8()\ncase *map[string]uint8:\n\treturn unsafe.Pointer(ptr), newUnfolderMapUint8()\n\ncase *uint16:\n\treturn unsafe.Pointer(ptr), newUnfolderUint16()\ncase *[]uint16:\n\treturn unsafe.Pointer(ptr), newUnfolderArrUint16()\ncase *map[string]uint16:\n\treturn unsafe.Pointer(ptr), newUnfolderMapUint16()\n\ncase *uint32:\n\treturn unsafe.Pointer(ptr), newUnfolderUint32()\ncase *[]uint32:\n\treturn unsafe.Pointer(ptr), newUnfolderArrUint32()\ncase *map[string]uint32:\n\treturn unsafe.Pointer(ptr), newUnfolderMapUint32()\n\ncase *uint64:\n\treturn unsafe.Pointer(ptr), newUnfolderUint64()\ncase *[]uint64:\n\treturn unsafe.Pointer(ptr), newUnfolderArrUint64()\ncase *map[string]uint64:\n\treturn unsafe.Pointer(ptr), newUnfolderMapUint64()\n\ncase *int:\n\treturn unsafe.Pointer(ptr), newUnfolderInt()\ncase *[]int:\n\treturn unsafe.Pointer(ptr), newUnfolderArrInt()\ncase *map[string]int:\n\treturn unsafe.Pointer(ptr), newUnfolderMapInt()\n\ncase *int8:\n\treturn unsafe.Pointer(ptr), newUnfolderInt8()\ncase *[]int8:\n\treturn unsafe.Pointer(ptr), newUnfolderArrInt8()\ncase *map[string]int8:\n\treturn unsafe.Pointer(ptr), newUnfolderMapInt8()\n\ncase *int16:\n\treturn unsafe.Pointer(ptr), newUnfolderInt16()\ncase *[]int16:\n\treturn unsafe.Pointer(ptr), newUnfolderArrInt16()\ncase *map[string]int16:\n\treturn unsafe.Pointer(ptr), newUnfolderMapInt16()\n\ncase *int32:\n\treturn unsafe.Pointer(ptr), newUnfolderInt32()\ncase *[]int32:\n\treturn unsafe.Pointer(ptr), newUnfolderArrInt32()\ncase *map[string]int32:\n\treturn unsafe.Pointer(ptr), newUnfolderMapInt32()\n\ncase *int64:\n\treturn unsafe.Pointer(ptr), newUnfolderInt64()\ncase *[]int64:\n\treturn unsafe.Pointer(ptr), newUnfolderArrInt64()\ncase *map[string]int64:\n\treturn unsafe.Pointer(ptr), newUnfolderMapInt64()\n\ncase *float32:\n\treturn unsafe.Pointer(ptr), newUnfolderFloat32()\ncase *[]float32:\n\treturn unsafe.Pointer(ptr), newUnfolderArrFloat32()\ncase *map[string]float32:\n\treturn unsafe.Pointer(ptr), newUnfolderMapFloat32()\n\ncase *float64:\n\treturn unsafe.Pointer(ptr), newUnfolderFloat64()\ncase *[]float64:\n\treturn unsafe.Pointer(ptr), newUnfolderArrFloat64()\ncase *map[string]float64:\n\treturn unsafe.Pointer(ptr), newUnfolderMapFloat64()\n\ndefault:\n\treturn nil, nil\n}",
      "entry" : false,
      "use-vars" : [ 37 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94 ],
      "in-vars" : [ 49, 57, 77, 54, 65, 61, 69, 55, 40, 37, 81, 62, 60, 72, 56, 66, 82, 46, 68, 83, 52, 71, 42, 75, 44, 73, 48, 76, 43, 67, 58, 78, 79, 74, 70, 80, 59, 51, 84, 41, 45, 53, 50, 64, 63, 47 ],
      "exit" : false,
      "out-vars" : [ 68, 57, 52, 60, 47, 56, 76, 55, 67, 81, 80, 41, 45, 48, 51, 77, 53, 58, 65, 66, 49, 78, 54, 72, 42, 50, 64, 70, 75, 69, 79, 40, 43, 71, 62, 74, 61, 59, 73, 82, 84, 44, 63, 46, 83 ],
      "decl-vars" : [ ],
      "line-start" : 76,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "ptr"
          }
        } ],
        "right" : [ {
          "asserted" : null,
          "go-type" : -1,
          "kind" : "expression",
          "target" : {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "to",
              "variable" : 37
            }
          },
          "type" : "type-assert"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 76,
      "code" : "ptr := to.(type)",
      "entry" : false,
      "use-vars" : [ 37 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 5 ],
      "in-vars" : [ 40 ],
      "exit" : false,
      "out-vars" : [ 40 ],
      "decl-vars" : [ ],
      "line-start" : 77,
      "ast" : {
        "expressions" : [ {
          "contained" : {
            "go-type" : 2,
            "incomplete" : false,
            "kind" : "type",
            "methods" : [ ],
            "type" : "interface"
          },
          "go-type" : 180,
          "kind" : "type",
          "type" : "pointer"
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 78,
      "code" : "case *interface{}:\n\treturn unsafe.Pointer(ptr), newUnfolderIfc()",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 40 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 78,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "coerced-to" : {
            "go-type" : 4,
            "kind" : "type",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 1,
              "value" : "unsafe"
            },
            "type" : "identifier",
            "value" : {
              "go-type" : 4,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "Pointer"
            }
          },
          "go-type" : 4,
          "kind" : "expression",
          "target" : {
            "go-type" : 180,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "ptr",
              "variable" : 40
            }
          },
          "type" : "cast"
        }, {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 186,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "newUnfolderIfc"
            }
          },
          "go-type" : 181,
          "kind" : "expression",
          "type" : "call"
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 78,
      "code" : "return unsafe.Pointer(ptr), newUnfolderIfc()",
      "entry" : false,
      "use-vars" : [ 40 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 7 ],
      "in-vars" : [ 41 ],
      "exit" : false,
      "out-vars" : [ 41 ],
      "decl-vars" : [ ],
      "line-start" : 79,
      "ast" : {
        "expressions" : [ {
          "contained" : {
            "element" : {
              "go-type" : 2,
              "incomplete" : false,
              "kind" : "type",
              "methods" : [ ],
              "type" : "interface"
            },
            "go-type" : 189,
            "kind" : "type",
            "type" : "slice"
          },
          "go-type" : 188,
          "kind" : "type",
          "type" : "pointer"
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 80,
      "code" : "case *[]interface{}:\n\treturn unsafe.Pointer(ptr), newUnfolderArrIfc()",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 41 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 80,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "coerced-to" : {
            "go-type" : 4,
            "kind" : "type",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 1,
              "value" : "unsafe"
            },
            "type" : "identifier",
            "value" : {
              "go-type" : 4,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "Pointer"
            }
          },
          "go-type" : 4,
          "kind" : "expression",
          "target" : {
            "go-type" : 188,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "ptr",
              "variable" : 41
            }
          },
          "type" : "cast"
        }, {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 192,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "newUnfolderArrIfc"
            }
          },
          "go-type" : 190,
          "kind" : "expression",
          "type" : "call"
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 80,
      "code" : "return unsafe.Pointer(ptr), newUnfolderArrIfc()",
      "entry" : false,
      "use-vars" : [ 41 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 9 ],
      "in-vars" : [ 42 ],
      "exit" : false,
      "out-vars" : [ 42 ],
      "decl-vars" : [ ],
      "line-start" : 81,
      "ast" : {
        "expressions" : [ {
          "contained" : {
            "go-type" : 179,
            "key" : {
              "go-type" : 14,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 14,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "string"
              }
            },
            "kind" : "type",
            "type" : "map",
            "value" : {
              "go-type" : 2,
              "incomplete" : false,
              "kind" : "type",
              "methods" : [ ],
              "type" : "interface"
            }
          },
          "go-type" : 194,
          "kind" : "type",
          "type" : "pointer"
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 82,
      "code" : "case *map[string]interface{}:\n\treturn unsafe.Pointer(ptr), newUnfolderMapIfc()",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 42 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 82,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "coerced-to" : {
            "go-type" : 4,
            "kind" : "type",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 1,
              "value" : "unsafe"
            },
            "type" : "identifier",
            "value" : {
              "go-type" : 4,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "Pointer"
            }
          },
          "go-type" : 4,
          "kind" : "expression",
          "target" : {
            "go-type" : 194,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "ptr",
              "variable" : 42
            }
          },
          "type" : "cast"
        }, {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 197,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "newUnfolderMapIfc"
            }
          },
          "go-type" : 195,
          "kind" : "expression",
          "type" : "call"
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 82,
      "code" : "return unsafe.Pointer(ptr), newUnfolderMapIfc()",
      "entry" : false,
      "use-vars" : [ 42 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 11 ],
      "in-vars" : [ 43 ],
      "exit" : false,
      "out-vars" : [ 43 ],
      "decl-vars" : [ ],
      "line-start" : 84,
      "ast" : {
        "expressions" : [ {
          "contained" : {
            "go-type" : 32,
            "kind" : "type",
            "type" : "identifier",
            "value" : {
              "go-type" : 32,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "bool"
            }
          },
          "go-type" : 199,
          "kind" : "type",
          "type" : "pointer"
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 85,
      "code" : "case *bool:\n\treturn unsafe.Pointer(ptr), newUnfolderBool()",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 43 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 85,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "coerced-to" : {
            "go-type" : 4,
            "kind" : "type",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 1,
              "value" : "unsafe"
            },
            "type" : "identifier",
            "value" : {
              "go-type" : 4,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "Pointer"
            }
          },
          "go-type" : 4,
          "kind" : "expression",
          "target" : {
            "go-type" : 199,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "ptr",
              "variable" : 43
            }
          },
          "type" : "cast"
        }, {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 202,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "newUnfolderBool"
            }
          },
          "go-type" : 200,
          "kind" : "expression",
          "type" : "call"
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 85,
      "code" : "return unsafe.Pointer(ptr), newUnfolderBool()",
      "entry" : false,
      "use-vars" : [ 43 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 13 ],
      "in-vars" : [ 44 ],
      "exit" : false,
      "out-vars" : [ 44 ],
      "decl-vars" : [ ],
      "line-start" : 86,
      "ast" : {
        "expressions" : [ {
          "contained" : {
            "element" : {
              "go-type" : 32,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 32,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "bool"
              }
            },
            "go-type" : 205,
            "kind" : "type",
            "type" : "slice"
          },
          "go-type" : 204,
          "kind" : "type",
          "type" : "pointer"
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 87,
      "code" : "case *[]bool:\n\treturn unsafe.Pointer(ptr), newUnfolderArrBool()",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 44 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 87,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "coerced-to" : {
            "go-type" : 4,
            "kind" : "type",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 1,
              "value" : "unsafe"
            },
            "type" : "identifier",
            "value" : {
              "go-type" : 4,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "Pointer"
            }
          },
          "go-type" : 4,
          "kind" : "expression",
          "target" : {
            "go-type" : 204,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "ptr",
              "variable" : 44
            }
          },
          "type" : "cast"
        }, {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 208,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "newUnfolderArrBool"
            }
          },
          "go-type" : 206,
          "kind" : "expression",
          "type" : "call"
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 87,
      "code" : "return unsafe.Pointer(ptr), newUnfolderArrBool()",
      "entry" : false,
      "use-vars" : [ 44 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 15 ],
      "in-vars" : [ 45 ],
      "exit" : false,
      "out-vars" : [ 45 ],
      "decl-vars" : [ ],
      "line-start" : 88,
      "ast" : {
        "expressions" : [ {
          "contained" : {
            "go-type" : 211,
            "key" : {
              "go-type" : 14,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 14,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "string"
              }
            },
            "kind" : "type",
            "type" : "map",
            "value" : {
              "go-type" : 32,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 32,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "bool"
              }
            }
          },
          "go-type" : 210,
          "kind" : "type",
          "type" : "pointer"
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 89,
      "code" : "case *map[string]bool:\n\treturn unsafe.Pointer(ptr), newUnfolderMapBool()",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 45 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 89,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "coerced-to" : {
            "go-type" : 4,
            "kind" : "type",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 1,
              "value" : "unsafe"
            },
            "type" : "identifier",
            "value" : {
              "go-type" : 4,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "Pointer"
            }
          },
          "go-type" : 4,
          "kind" : "expression",
          "target" : {
            "go-type" : 210,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "ptr",
              "variable" : 45
            }
          },
          "type" : "cast"
        }, {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 214,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "newUnfolderMapBool"
            }
          },
          "go-type" : 212,
          "kind" : "expression",
          "type" : "call"
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 89,
      "code" : "return unsafe.Pointer(ptr), newUnfolderMapBool()",
      "entry" : false,
      "use-vars" : [ 45 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 17 ],
      "in-vars" : [ 46 ],
      "exit" : false,
      "out-vars" : [ 46 ],
      "decl-vars" : [ ],
      "line-start" : 91,
      "ast" : {
        "expressions" : [ {
          "contained" : {
            "go-type" : 14,
            "kind" : "type",
            "type" : "identifier",
            "value" : {
              "go-type" : 14,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "string"
            }
          },
          "go-type" : 216,
          "kind" : "type",
          "type" : "pointer"
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 92,
      "code" : "case *string:\n\treturn unsafe.Pointer(ptr), newUnfolderString()",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 46 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 92,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "coerced-to" : {
            "go-type" : 4,
            "kind" : "type",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 1,
              "value" : "unsafe"
            },
            "type" : "identifier",
            "value" : {
              "go-type" : 4,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "Pointer"
            }
          },
          "go-type" : 4,
          "kind" : "expression",
          "target" : {
            "go-type" : 216,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "ptr",
              "variable" : 46
            }
          },
          "type" : "cast"
        }, {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 219,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "newUnfolderString"
            }
          },
          "go-type" : 217,
          "kind" : "expression",
          "type" : "call"
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 92,
      "code" : "return unsafe.Pointer(ptr), newUnfolderString()",
      "entry" : false,
      "use-vars" : [ 46 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 19 ],
      "in-vars" : [ 47 ],
      "exit" : false,
      "out-vars" : [ 47 ],
      "decl-vars" : [ ],
      "line-start" : 93,
      "ast" : {
        "expressions" : [ {
          "contained" : {
            "element" : {
              "go-type" : 14,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 14,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "string"
              }
            },
            "go-type" : 161,
            "kind" : "type",
            "type" : "slice"
          },
          "go-type" : 221,
          "kind" : "type",
          "type" : "pointer"
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 94,
      "code" : "case *[]string:\n\treturn unsafe.Pointer(ptr), newUnfolderArrString()",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 47 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 94,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "coerced-to" : {
            "go-type" : 4,
            "kind" : "type",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 1,
              "value" : "unsafe"
            },
            "type" : "identifier",
            "value" : {
              "go-type" : 4,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "Pointer"
            }
          },
          "go-type" : 4,
          "kind" : "expression",
          "target" : {
            "go-type" : 221,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "ptr",
              "variable" : 47
            }
          },
          "type" : "cast"
        }, {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 224,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "newUnfolderArrString"
            }
          },
          "go-type" : 222,
          "kind" : "expression",
          "type" : "call"
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 94,
      "code" : "return unsafe.Pointer(ptr), newUnfolderArrString()",
      "entry" : false,
      "use-vars" : [ 47 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 21 ],
      "in-vars" : [ 48 ],
      "exit" : false,
      "out-vars" : [ 48 ],
      "decl-vars" : [ ],
      "line-start" : 95,
      "ast" : {
        "expressions" : [ {
          "contained" : {
            "go-type" : 227,
            "key" : {
              "go-type" : 14,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 14,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "string"
              }
            },
            "kind" : "type",
            "type" : "map",
            "value" : {
              "go-type" : 14,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 14,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "string"
              }
            }
          },
          "go-type" : 226,
          "kind" : "type",
          "type" : "pointer"
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 96,
      "code" : "case *map[string]string:\n\treturn unsafe.Pointer(ptr), newUnfolderMapString()",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 48 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 96,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "coerced-to" : {
            "go-type" : 4,
            "kind" : "type",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 1,
              "value" : "unsafe"
            },
            "type" : "identifier",
            "value" : {
              "go-type" : 4,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "Pointer"
            }
          },
          "go-type" : 4,
          "kind" : "expression",
          "target" : {
            "go-type" : 226,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "ptr",
              "variable" : 48
            }
          },
          "type" : "cast"
        }, {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 230,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "newUnfolderMapString"
            }
          },
          "go-type" : 228,
          "kind" : "expression",
          "type" : "call"
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 96,
      "code" : "return unsafe.Pointer(ptr), newUnfolderMapString()",
      "entry" : false,
      "use-vars" : [ 48 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 23 ],
      "in-vars" : [ 49 ],
      "exit" : false,
      "out-vars" : [ 49 ],
      "decl-vars" : [ ],
      "line-start" : 98,
      "ast" : {
        "expressions" : [ {
          "contained" : {
            "go-type" : 73,
            "kind" : "type",
            "type" : "identifier",
            "value" : {
              "go-type" : 73,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "uint"
            }
          },
          "go-type" : 232,
          "kind" : "type",
          "type" : "pointer"
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 99,
      "code" : "case *uint:\n\treturn unsafe.Pointer(ptr), newUnfolderUint()",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 49 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 99,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "coerced-to" : {
            "go-type" : 4,
            "kind" : "type",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 1,
              "value" : "unsafe"
            },
            "type" : "identifier",
            "value" : {
              "go-type" : 4,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "Pointer"
            }
          },
          "go-type" : 4,
          "kind" : "expression",
          "target" : {
            "go-type" : 232,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "ptr",
              "variable" : 49
            }
          },
          "type" : "cast"
        }, {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 235,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "newUnfolderUint"
            }
          },
          "go-type" : 233,
          "kind" : "expression",
          "type" : "call"
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 99,
      "code" : "return unsafe.Pointer(ptr), newUnfolderUint()",
      "entry" : false,
      "use-vars" : [ 49 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 25 ],
      "in-vars" : [ 50 ],
      "exit" : false,
      "out-vars" : [ 50 ],
      "decl-vars" : [ ],
      "line-start" : 100,
      "ast" : {
        "expressions" : [ {
          "contained" : {
            "element" : {
              "go-type" : 73,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 73,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "uint"
              }
            },
            "go-type" : 238,
            "kind" : "type",
            "type" : "slice"
          },
          "go-type" : 237,
          "kind" : "type",
          "type" : "pointer"
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 101,
      "code" : "case *[]uint:\n\treturn unsafe.Pointer(ptr), newUnfolderArrUint()",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 50 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 101,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "coerced-to" : {
            "go-type" : 4,
            "kind" : "type",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 1,
              "value" : "unsafe"
            },
            "type" : "identifier",
            "value" : {
              "go-type" : 4,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "Pointer"
            }
          },
          "go-type" : 4,
          "kind" : "expression",
          "target" : {
            "go-type" : 237,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "ptr",
              "variable" : 50
            }
          },
          "type" : "cast"
        }, {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 241,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "newUnfolderArrUint"
            }
          },
          "go-type" : 239,
          "kind" : "expression",
          "type" : "call"
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 101,
      "code" : "return unsafe.Pointer(ptr), newUnfolderArrUint()",
      "entry" : false,
      "use-vars" : [ 50 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 27 ],
      "in-vars" : [ 51 ],
      "exit" : false,
      "out-vars" : [ 51 ],
      "decl-vars" : [ ],
      "line-start" : 102,
      "ast" : {
        "expressions" : [ {
          "contained" : {
            "go-type" : 244,
            "key" : {
              "go-type" : 14,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 14,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "string"
              }
            },
            "kind" : "type",
            "type" : "map",
            "value" : {
              "go-type" : 73,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 73,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "uint"
              }
            }
          },
          "go-type" : 243,
          "kind" : "type",
          "type" : "pointer"
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 103,
      "code" : "case *map[string]uint:\n\treturn unsafe.Pointer(ptr), newUnfolderMapUint()",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 51 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 103,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "coerced-to" : {
            "go-type" : 4,
            "kind" : "type",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 1,
              "value" : "unsafe"
            },
            "type" : "identifier",
            "value" : {
              "go-type" : 4,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "Pointer"
            }
          },
          "go-type" : 4,
          "kind" : "expression",
          "target" : {
            "go-type" : 243,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "ptr",
              "variable" : 51
            }
          },
          "type" : "cast"
        }, {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 247,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "newUnfolderMapUint"
            }
          },
          "go-type" : 245,
          "kind" : "expression",
          "type" : "call"
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 103,
      "code" : "return unsafe.Pointer(ptr), newUnfolderMapUint()",
      "entry" : false,
      "use-vars" : [ 51 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 29 ],
      "in-vars" : [ 52 ],
      "exit" : false,
      "out-vars" : [ 52 ],
      "decl-vars" : [ ],
      "line-start" : 105,
      "ast" : {
        "expressions" : [ {
          "contained" : {
            "go-type" : 28,
            "kind" : "type",
            "type" : "identifier",
            "value" : {
              "go-type" : 28,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "uint8"
            }
          },
          "go-type" : 249,
          "kind" : "type",
          "type" : "pointer"
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 106,
      "code" : "case *uint8:\n\treturn unsafe.Pointer(ptr), newUnfolderUint8()",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 52 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 106,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "coerced-to" : {
            "go-type" : 4,
            "kind" : "type",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 1,
              "value" : "unsafe"
            },
            "type" : "identifier",
            "value" : {
              "go-type" : 4,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "Pointer"
            }
          },
          "go-type" : 4,
          "kind" : "expression",
          "target" : {
            "go-type" : 249,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "ptr",
              "variable" : 52
            }
          },
          "type" : "cast"
        }, {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 252,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "newUnfolderUint8"
            }
          },
          "go-type" : 250,
          "kind" : "expression",
          "type" : "call"
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 106,
      "code" : "return unsafe.Pointer(ptr), newUnfolderUint8()",
      "entry" : false,
      "use-vars" : [ 52 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 31 ],
      "in-vars" : [ 53 ],
      "exit" : false,
      "out-vars" : [ 53 ],
      "decl-vars" : [ ],
      "line-start" : 107,
      "ast" : {
        "expressions" : [ {
          "contained" : {
            "element" : {
              "go-type" : 28,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 28,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "uint8"
              }
            },
            "go-type" : 255,
            "kind" : "type",
            "type" : "slice"
          },
          "go-type" : 254,
          "kind" : "type",
          "type" : "pointer"
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 108,
      "code" : "case *[]uint8:\n\treturn unsafe.Pointer(ptr), newUnfolderArrUint8()",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 53 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 108,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "coerced-to" : {
            "go-type" : 4,
            "kind" : "type",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 1,
              "value" : "unsafe"
            },
            "type" : "identifier",
            "value" : {
              "go-type" : 4,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "Pointer"
            }
          },
          "go-type" : 4,
          "kind" : "expression",
          "target" : {
            "go-type" : 254,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "ptr",
              "variable" : 53
            }
          },
          "type" : "cast"
        }, {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 258,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "newUnfolderArrUint8"
            }
          },
          "go-type" : 256,
          "kind" : "expression",
          "type" : "call"
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 108,
      "code" : "return unsafe.Pointer(ptr), newUnfolderArrUint8()",
      "entry" : false,
      "use-vars" : [ 53 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 33 ],
      "in-vars" : [ 54 ],
      "exit" : false,
      "out-vars" : [ 54 ],
      "decl-vars" : [ ],
      "line-start" : 109,
      "ast" : {
        "expressions" : [ {
          "contained" : {
            "go-type" : 261,
            "key" : {
              "go-type" : 14,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 14,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "string"
              }
            },
            "kind" : "type",
            "type" : "map",
            "value" : {
              "go-type" : 28,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 28,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "uint8"
              }
            }
          },
          "go-type" : 260,
          "kind" : "type",
          "type" : "pointer"
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 110,
      "code" : "case *map[string]uint8:\n\treturn unsafe.Pointer(ptr), newUnfolderMapUint8()",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 54 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 110,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "coerced-to" : {
            "go-type" : 4,
            "kind" : "type",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 1,
              "value" : "unsafe"
            },
            "type" : "identifier",
            "value" : {
              "go-type" : 4,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "Pointer"
            }
          },
          "go-type" : 4,
          "kind" : "expression",
          "target" : {
            "go-type" : 260,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "ptr",
              "variable" : 54
            }
          },
          "type" : "cast"
        }, {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 264,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "newUnfolderMapUint8"
            }
          },
          "go-type" : 262,
          "kind" : "expression",
          "type" : "call"
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 110,
      "code" : "return unsafe.Pointer(ptr), newUnfolderMapUint8()",
      "entry" : false,
      "use-vars" : [ 54 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 35 ],
      "in-vars" : [ 55 ],
      "exit" : false,
      "out-vars" : [ 55 ],
      "decl-vars" : [ ],
      "line-start" : 112,
      "ast" : {
        "expressions" : [ {
          "contained" : {
            "go-type" : 90,
            "kind" : "type",
            "type" : "identifier",
            "value" : {
              "go-type" : 90,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "uint16"
            }
          },
          "go-type" : 266,
          "kind" : "type",
          "type" : "pointer"
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 113,
      "code" : "case *uint16:\n\treturn unsafe.Pointer(ptr), newUnfolderUint16()",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 55 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 113,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "coerced-to" : {
            "go-type" : 4,
            "kind" : "type",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 1,
              "value" : "unsafe"
            },
            "type" : "identifier",
            "value" : {
              "go-type" : 4,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "Pointer"
            }
          },
          "go-type" : 4,
          "kind" : "expression",
          "target" : {
            "go-type" : 266,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "ptr",
              "variable" : 55
            }
          },
          "type" : "cast"
        }, {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 269,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "newUnfolderUint16"
            }
          },
          "go-type" : 267,
          "kind" : "expression",
          "type" : "call"
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 113,
      "code" : "return unsafe.Pointer(ptr), newUnfolderUint16()",
      "entry" : false,
      "use-vars" : [ 55 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 37 ],
      "in-vars" : [ 56 ],
      "exit" : false,
      "out-vars" : [ 56 ],
      "decl-vars" : [ ],
      "line-start" : 114,
      "ast" : {
        "expressions" : [ {
          "contained" : {
            "element" : {
              "go-type" : 90,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 90,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "uint16"
              }
            },
            "go-type" : 272,
            "kind" : "type",
            "type" : "slice"
          },
          "go-type" : 271,
          "kind" : "type",
          "type" : "pointer"
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 115,
      "code" : "case *[]uint16:\n\treturn unsafe.Pointer(ptr), newUnfolderArrUint16()",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 56 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 115,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "coerced-to" : {
            "go-type" : 4,
            "kind" : "type",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 1,
              "value" : "unsafe"
            },
            "type" : "identifier",
            "value" : {
              "go-type" : 4,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "Pointer"
            }
          },
          "go-type" : 4,
          "kind" : "expression",
          "target" : {
            "go-type" : 271,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "ptr",
              "variable" : 56
            }
          },
          "type" : "cast"
        }, {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 275,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "newUnfolderArrUint16"
            }
          },
          "go-type" : 273,
          "kind" : "expression",
          "type" : "call"
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 115,
      "code" : "return unsafe.Pointer(ptr), newUnfolderArrUint16()",
      "entry" : false,
      "use-vars" : [ 56 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 39 ],
      "in-vars" : [ 57 ],
      "exit" : false,
      "out-vars" : [ 57 ],
      "decl-vars" : [ ],
      "line-start" : 116,
      "ast" : {
        "expressions" : [ {
          "contained" : {
            "go-type" : 278,
            "key" : {
              "go-type" : 14,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 14,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "string"
              }
            },
            "kind" : "type",
            "type" : "map",
            "value" : {
              "go-type" : 90,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 90,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "uint16"
              }
            }
          },
          "go-type" : 277,
          "kind" : "type",
          "type" : "pointer"
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 117,
      "code" : "case *map[string]uint16:\n\treturn unsafe.Pointer(ptr), newUnfolderMapUint16()",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 57 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 117,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "coerced-to" : {
            "go-type" : 4,
            "kind" : "type",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 1,
              "value" : "unsafe"
            },
            "type" : "identifier",
            "value" : {
              "go-type" : 4,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "Pointer"
            }
          },
          "go-type" : 4,
          "kind" : "expression",
          "target" : {
            "go-type" : 277,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "ptr",
              "variable" : 57
            }
          },
          "type" : "cast"
        }, {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 281,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "newUnfolderMapUint16"
            }
          },
          "go-type" : 279,
          "kind" : "expression",
          "type" : "call"
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 117,
      "code" : "return unsafe.Pointer(ptr), newUnfolderMapUint16()",
      "entry" : false,
      "use-vars" : [ 57 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 41 ],
      "in-vars" : [ 58 ],
      "exit" : false,
      "out-vars" : [ 58 ],
      "decl-vars" : [ ],
      "line-start" : 119,
      "ast" : {
        "expressions" : [ {
          "contained" : {
            "go-type" : 26,
            "kind" : "type",
            "type" : "identifier",
            "value" : {
              "go-type" : 26,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "uint32"
            }
          },
          "go-type" : 283,
          "kind" : "type",
          "type" : "pointer"
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 120,
      "code" : "case *uint32:\n\treturn unsafe.Pointer(ptr), newUnfolderUint32()",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 58 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 120,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "coerced-to" : {
            "go-type" : 4,
            "kind" : "type",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 1,
              "value" : "unsafe"
            },
            "type" : "identifier",
            "value" : {
              "go-type" : 4,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "Pointer"
            }
          },
          "go-type" : 4,
          "kind" : "expression",
          "target" : {
            "go-type" : 283,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "ptr",
              "variable" : 58
            }
          },
          "type" : "cast"
        }, {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 286,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "newUnfolderUint32"
            }
          },
          "go-type" : 284,
          "kind" : "expression",
          "type" : "call"
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 120,
      "code" : "return unsafe.Pointer(ptr), newUnfolderUint32()",
      "entry" : false,
      "use-vars" : [ 58 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 43 ],
      "in-vars" : [ 59 ],
      "exit" : false,
      "out-vars" : [ 59 ],
      "decl-vars" : [ ],
      "line-start" : 121,
      "ast" : {
        "expressions" : [ {
          "contained" : {
            "element" : {
              "go-type" : 26,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 26,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "uint32"
              }
            },
            "go-type" : 289,
            "kind" : "type",
            "type" : "slice"
          },
          "go-type" : 288,
          "kind" : "type",
          "type" : "pointer"
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 122,
      "code" : "case *[]uint32:\n\treturn unsafe.Pointer(ptr), newUnfolderArrUint32()",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 59 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 122,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "coerced-to" : {
            "go-type" : 4,
            "kind" : "type",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 1,
              "value" : "unsafe"
            },
            "type" : "identifier",
            "value" : {
              "go-type" : 4,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "Pointer"
            }
          },
          "go-type" : 4,
          "kind" : "expression",
          "target" : {
            "go-type" : 288,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "ptr",
              "variable" : 59
            }
          },
          "type" : "cast"
        }, {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 292,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "newUnfolderArrUint32"
            }
          },
          "go-type" : 290,
          "kind" : "expression",
          "type" : "call"
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 122,
      "code" : "return unsafe.Pointer(ptr), newUnfolderArrUint32()",
      "entry" : false,
      "use-vars" : [ 59 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 45 ],
      "in-vars" : [ 60 ],
      "exit" : false,
      "out-vars" : [ 60 ],
      "decl-vars" : [ ],
      "line-start" : 123,
      "ast" : {
        "expressions" : [ {
          "contained" : {
            "go-type" : 295,
            "key" : {
              "go-type" : 14,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 14,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "string"
              }
            },
            "kind" : "type",
            "type" : "map",
            "value" : {
              "go-type" : 26,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 26,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "uint32"
              }
            }
          },
          "go-type" : 294,
          "kind" : "type",
          "type" : "pointer"
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 124,
      "code" : "case *map[string]uint32:\n\treturn unsafe.Pointer(ptr), newUnfolderMapUint32()",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 60 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 124,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "coerced-to" : {
            "go-type" : 4,
            "kind" : "type",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 1,
              "value" : "unsafe"
            },
            "type" : "identifier",
            "value" : {
              "go-type" : 4,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "Pointer"
            }
          },
          "go-type" : 4,
          "kind" : "expression",
          "target" : {
            "go-type" : 294,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "ptr",
              "variable" : 60
            }
          },
          "type" : "cast"
        }, {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 298,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "newUnfolderMapUint32"
            }
          },
          "go-type" : 296,
          "kind" : "expression",
          "type" : "call"
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 124,
      "code" : "return unsafe.Pointer(ptr), newUnfolderMapUint32()",
      "entry" : false,
      "use-vars" : [ 60 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 47 ],
      "in-vars" : [ 61 ],
      "exit" : false,
      "out-vars" : [ 61 ],
      "decl-vars" : [ ],
      "line-start" : 126,
      "ast" : {
        "expressions" : [ {
          "contained" : {
            "go-type" : 142,
            "kind" : "type",
            "type" : "identifier",
            "value" : {
              "go-type" : 142,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "uint64"
            }
          },
          "go-type" : 300,
          "kind" : "type",
          "type" : "pointer"
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 127,
      "code" : "case *uint64:\n\treturn unsafe.Pointer(ptr), newUnfolderUint64()",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 61 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 127,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "coerced-to" : {
            "go-type" : 4,
            "kind" : "type",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 1,
              "value" : "unsafe"
            },
            "type" : "identifier",
            "value" : {
              "go-type" : 4,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "Pointer"
            }
          },
          "go-type" : 4,
          "kind" : "expression",
          "target" : {
            "go-type" : 300,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "ptr",
              "variable" : 61
            }
          },
          "type" : "cast"
        }, {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 303,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "newUnfolderUint64"
            }
          },
          "go-type" : 301,
          "kind" : "expression",
          "type" : "call"
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 127,
      "code" : "return unsafe.Pointer(ptr), newUnfolderUint64()",
      "entry" : false,
      "use-vars" : [ 61 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 49 ],
      "in-vars" : [ 62 ],
      "exit" : false,
      "out-vars" : [ 62 ],
      "decl-vars" : [ ],
      "line-start" : 128,
      "ast" : {
        "expressions" : [ {
          "contained" : {
            "element" : {
              "go-type" : 142,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 142,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "uint64"
              }
            },
            "go-type" : 306,
            "kind" : "type",
            "type" : "slice"
          },
          "go-type" : 305,
          "kind" : "type",
          "type" : "pointer"
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 129,
      "code" : "case *[]uint64:\n\treturn unsafe.Pointer(ptr), newUnfolderArrUint64()",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 62 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 129,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "coerced-to" : {
            "go-type" : 4,
            "kind" : "type",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 1,
              "value" : "unsafe"
            },
            "type" : "identifier",
            "value" : {
              "go-type" : 4,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "Pointer"
            }
          },
          "go-type" : 4,
          "kind" : "expression",
          "target" : {
            "go-type" : 305,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "ptr",
              "variable" : 62
            }
          },
          "type" : "cast"
        }, {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 309,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "newUnfolderArrUint64"
            }
          },
          "go-type" : 307,
          "kind" : "expression",
          "type" : "call"
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 129,
      "code" : "return unsafe.Pointer(ptr), newUnfolderArrUint64()",
      "entry" : false,
      "use-vars" : [ 62 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 51 ],
      "in-vars" : [ 63 ],
      "exit" : false,
      "out-vars" : [ 63 ],
      "decl-vars" : [ ],
      "line-start" : 130,
      "ast" : {
        "expressions" : [ {
          "contained" : {
            "go-type" : 312,
            "key" : {
              "go-type" : 14,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 14,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "string"
              }
            },
            "kind" : "type",
            "type" : "map",
            "value" : {
              "go-type" : 142,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 142,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "uint64"
              }
            }
          },
          "go-type" : 311,
          "kind" : "type",
          "type" : "pointer"
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 131,
      "code" : "case *map[string]uint64:\n\treturn unsafe.Pointer(ptr), newUnfolderMapUint64()",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 63 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 131,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "coerced-to" : {
            "go-type" : 4,
            "kind" : "type",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 1,
              "value" : "unsafe"
            },
            "type" : "identifier",
            "value" : {
              "go-type" : 4,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "Pointer"
            }
          },
          "go-type" : 4,
          "kind" : "expression",
          "target" : {
            "go-type" : 311,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "ptr",
              "variable" : 63
            }
          },
          "type" : "cast"
        }, {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 315,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "newUnfolderMapUint64"
            }
          },
          "go-type" : 313,
          "kind" : "expression",
          "type" : "call"
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 131,
      "code" : "return unsafe.Pointer(ptr), newUnfolderMapUint64()",
      "entry" : false,
      "use-vars" : [ 63 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 53 ],
      "in-vars" : [ 64 ],
      "exit" : false,
      "out-vars" : [ 64 ],
      "decl-vars" : [ ],
      "line-start" : 133,
      "ast" : {
        "expressions" : [ {
          "contained" : {
            "go-type" : 44,
            "kind" : "type",
            "type" : "identifier",
            "value" : {
              "go-type" : 44,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "int"
            }
          },
          "go-type" : 317,
          "kind" : "type",
          "type" : "pointer"
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 134,
      "code" : "case *int:\n\treturn unsafe.Pointer(ptr), newUnfolderInt()",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 64 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 134,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "coerced-to" : {
            "go-type" : 4,
            "kind" : "type",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 1,
              "value" : "unsafe"
            },
            "type" : "identifier",
            "value" : {
              "go-type" : 4,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "Pointer"
            }
          },
          "go-type" : 4,
          "kind" : "expression",
          "target" : {
            "go-type" : 317,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "ptr",
              "variable" : 64
            }
          },
          "type" : "cast"
        }, {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 320,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "newUnfolderInt"
            }
          },
          "go-type" : 318,
          "kind" : "expression",
          "type" : "call"
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 134,
      "code" : "return unsafe.Pointer(ptr), newUnfolderInt()",
      "entry" : false,
      "use-vars" : [ 64 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 55 ],
      "in-vars" : [ 65 ],
      "exit" : false,
      "out-vars" : [ 65 ],
      "decl-vars" : [ ],
      "line-start" : 135,
      "ast" : {
        "expressions" : [ {
          "contained" : {
            "element" : {
              "go-type" : 44,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 44,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "int"
              }
            },
            "go-type" : 59,
            "kind" : "type",
            "type" : "slice"
          },
          "go-type" : 322,
          "kind" : "type",
          "type" : "pointer"
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 136,
      "code" : "case *[]int:\n\treturn unsafe.Pointer(ptr), newUnfolderArrInt()",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 65 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 136,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "coerced-to" : {
            "go-type" : 4,
            "kind" : "type",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 1,
              "value" : "unsafe"
            },
            "type" : "identifier",
            "value" : {
              "go-type" : 4,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "Pointer"
            }
          },
          "go-type" : 4,
          "kind" : "expression",
          "target" : {
            "go-type" : 322,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "ptr",
              "variable" : 65
            }
          },
          "type" : "cast"
        }, {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 325,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "newUnfolderArrInt"
            }
          },
          "go-type" : 323,
          "kind" : "expression",
          "type" : "call"
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 136,
      "code" : "return unsafe.Pointer(ptr), newUnfolderArrInt()",
      "entry" : false,
      "use-vars" : [ 65 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 57 ],
      "in-vars" : [ 66 ],
      "exit" : false,
      "out-vars" : [ 66 ],
      "decl-vars" : [ ],
      "line-start" : 137,
      "ast" : {
        "expressions" : [ {
          "contained" : {
            "go-type" : 328,
            "key" : {
              "go-type" : 14,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 14,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "string"
              }
            },
            "kind" : "type",
            "type" : "map",
            "value" : {
              "go-type" : 44,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 44,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "int"
              }
            }
          },
          "go-type" : 327,
          "kind" : "type",
          "type" : "pointer"
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 138,
      "code" : "case *map[string]int:\n\treturn unsafe.Pointer(ptr), newUnfolderMapInt()",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 66 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 138,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "coerced-to" : {
            "go-type" : 4,
            "kind" : "type",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 1,
              "value" : "unsafe"
            },
            "type" : "identifier",
            "value" : {
              "go-type" : 4,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "Pointer"
            }
          },
          "go-type" : 4,
          "kind" : "expression",
          "target" : {
            "go-type" : 327,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "ptr",
              "variable" : 66
            }
          },
          "type" : "cast"
        }, {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 331,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "newUnfolderMapInt"
            }
          },
          "go-type" : 329,
          "kind" : "expression",
          "type" : "call"
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 138,
      "code" : "return unsafe.Pointer(ptr), newUnfolderMapInt()",
      "entry" : false,
      "use-vars" : [ 66 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 59 ],
      "in-vars" : [ 67 ],
      "exit" : false,
      "out-vars" : [ 67 ],
      "decl-vars" : [ ],
      "line-start" : 140,
      "ast" : {
        "expressions" : [ {
          "contained" : {
            "go-type" : 128,
            "kind" : "type",
            "type" : "identifier",
            "value" : {
              "go-type" : 128,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "int8"
            }
          },
          "go-type" : 333,
          "kind" : "type",
          "type" : "pointer"
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 141,
      "code" : "case *int8:\n\treturn unsafe.Pointer(ptr), newUnfolderInt8()",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 67 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 141,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "coerced-to" : {
            "go-type" : 4,
            "kind" : "type",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 1,
              "value" : "unsafe"
            },
            "type" : "identifier",
            "value" : {
              "go-type" : 4,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "Pointer"
            }
          },
          "go-type" : 4,
          "kind" : "expression",
          "target" : {
            "go-type" : 333,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "ptr",
              "variable" : 67
            }
          },
          "type" : "cast"
        }, {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 336,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "newUnfolderInt8"
            }
          },
          "go-type" : 334,
          "kind" : "expression",
          "type" : "call"
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 141,
      "code" : "return unsafe.Pointer(ptr), newUnfolderInt8()",
      "entry" : false,
      "use-vars" : [ 67 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 61 ],
      "in-vars" : [ 68 ],
      "exit" : false,
      "out-vars" : [ 68 ],
      "decl-vars" : [ ],
      "line-start" : 142,
      "ast" : {
        "expressions" : [ {
          "contained" : {
            "element" : {
              "go-type" : 128,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 128,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "int8"
              }
            },
            "go-type" : 339,
            "kind" : "type",
            "type" : "slice"
          },
          "go-type" : 338,
          "kind" : "type",
          "type" : "pointer"
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 143,
      "code" : "case *[]int8:\n\treturn unsafe.Pointer(ptr), newUnfolderArrInt8()",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 68 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 143,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "coerced-to" : {
            "go-type" : 4,
            "kind" : "type",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 1,
              "value" : "unsafe"
            },
            "type" : "identifier",
            "value" : {
              "go-type" : 4,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "Pointer"
            }
          },
          "go-type" : 4,
          "kind" : "expression",
          "target" : {
            "go-type" : 338,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "ptr",
              "variable" : 68
            }
          },
          "type" : "cast"
        }, {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 342,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "newUnfolderArrInt8"
            }
          },
          "go-type" : 340,
          "kind" : "expression",
          "type" : "call"
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 143,
      "code" : "return unsafe.Pointer(ptr), newUnfolderArrInt8()",
      "entry" : false,
      "use-vars" : [ 68 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 63 ],
      "in-vars" : [ 69 ],
      "exit" : false,
      "out-vars" : [ 69 ],
      "decl-vars" : [ ],
      "line-start" : 144,
      "ast" : {
        "expressions" : [ {
          "contained" : {
            "go-type" : 345,
            "key" : {
              "go-type" : 14,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 14,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "string"
              }
            },
            "kind" : "type",
            "type" : "map",
            "value" : {
              "go-type" : 128,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 128,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "int8"
              }
            }
          },
          "go-type" : 344,
          "kind" : "type",
          "type" : "pointer"
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 145,
      "code" : "case *map[string]int8:\n\treturn unsafe.Pointer(ptr), newUnfolderMapInt8()",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 69 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 145,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "coerced-to" : {
            "go-type" : 4,
            "kind" : "type",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 1,
              "value" : "unsafe"
            },
            "type" : "identifier",
            "value" : {
              "go-type" : 4,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "Pointer"
            }
          },
          "go-type" : 4,
          "kind" : "expression",
          "target" : {
            "go-type" : 344,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "ptr",
              "variable" : 69
            }
          },
          "type" : "cast"
        }, {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 348,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "newUnfolderMapInt8"
            }
          },
          "go-type" : 346,
          "kind" : "expression",
          "type" : "call"
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 145,
      "code" : "return unsafe.Pointer(ptr), newUnfolderMapInt8()",
      "entry" : false,
      "use-vars" : [ 69 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 65 ],
      "in-vars" : [ 70 ],
      "exit" : false,
      "out-vars" : [ 70 ],
      "decl-vars" : [ ],
      "line-start" : 147,
      "ast" : {
        "expressions" : [ {
          "contained" : {
            "go-type" : 120,
            "kind" : "type",
            "type" : "identifier",
            "value" : {
              "go-type" : 120,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "int16"
            }
          },
          "go-type" : 350,
          "kind" : "type",
          "type" : "pointer"
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 148,
      "code" : "case *int16:\n\treturn unsafe.Pointer(ptr), newUnfolderInt16()",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 70 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 148,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "coerced-to" : {
            "go-type" : 4,
            "kind" : "type",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 1,
              "value" : "unsafe"
            },
            "type" : "identifier",
            "value" : {
              "go-type" : 4,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "Pointer"
            }
          },
          "go-type" : 4,
          "kind" : "expression",
          "target" : {
            "go-type" : 350,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "ptr",
              "variable" : 70
            }
          },
          "type" : "cast"
        }, {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 353,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "newUnfolderInt16"
            }
          },
          "go-type" : 351,
          "kind" : "expression",
          "type" : "call"
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 148,
      "code" : "return unsafe.Pointer(ptr), newUnfolderInt16()",
      "entry" : false,
      "use-vars" : [ 70 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 67 ],
      "in-vars" : [ 71 ],
      "exit" : false,
      "out-vars" : [ 71 ],
      "decl-vars" : [ ],
      "line-start" : 149,
      "ast" : {
        "expressions" : [ {
          "contained" : {
            "element" : {
              "go-type" : 120,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 120,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "int16"
              }
            },
            "go-type" : 356,
            "kind" : "type",
            "type" : "slice"
          },
          "go-type" : 355,
          "kind" : "type",
          "type" : "pointer"
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 150,
      "code" : "case *[]int16:\n\treturn unsafe.Pointer(ptr), newUnfolderArrInt16()",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 71 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 150,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "coerced-to" : {
            "go-type" : 4,
            "kind" : "type",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 1,
              "value" : "unsafe"
            },
            "type" : "identifier",
            "value" : {
              "go-type" : 4,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "Pointer"
            }
          },
          "go-type" : 4,
          "kind" : "expression",
          "target" : {
            "go-type" : 355,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "ptr",
              "variable" : 71
            }
          },
          "type" : "cast"
        }, {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 359,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "newUnfolderArrInt16"
            }
          },
          "go-type" : 357,
          "kind" : "expression",
          "type" : "call"
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 150,
      "code" : "return unsafe.Pointer(ptr), newUnfolderArrInt16()",
      "entry" : false,
      "use-vars" : [ 71 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 69 ],
      "in-vars" : [ 72 ],
      "exit" : false,
      "out-vars" : [ 72 ],
      "decl-vars" : [ ],
      "line-start" : 151,
      "ast" : {
        "expressions" : [ {
          "contained" : {
            "go-type" : 362,
            "key" : {
              "go-type" : 14,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 14,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "string"
              }
            },
            "kind" : "type",
            "type" : "map",
            "value" : {
              "go-type" : 120,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 120,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "int16"
              }
            }
          },
          "go-type" : 361,
          "kind" : "type",
          "type" : "pointer"
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 152,
      "code" : "case *map[string]int16:\n\treturn unsafe.Pointer(ptr), newUnfolderMapInt16()",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 72 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 152,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "coerced-to" : {
            "go-type" : 4,
            "kind" : "type",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 1,
              "value" : "unsafe"
            },
            "type" : "identifier",
            "value" : {
              "go-type" : 4,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "Pointer"
            }
          },
          "go-type" : 4,
          "kind" : "expression",
          "target" : {
            "go-type" : 361,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "ptr",
              "variable" : 72
            }
          },
          "type" : "cast"
        }, {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 365,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "newUnfolderMapInt16"
            }
          },
          "go-type" : 363,
          "kind" : "expression",
          "type" : "call"
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 152,
      "code" : "return unsafe.Pointer(ptr), newUnfolderMapInt16()",
      "entry" : false,
      "use-vars" : [ 72 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 71 ],
      "in-vars" : [ 73 ],
      "exit" : false,
      "out-vars" : [ 73 ],
      "decl-vars" : [ ],
      "line-start" : 154,
      "ast" : {
        "expressions" : [ {
          "contained" : {
            "go-type" : 36,
            "kind" : "type",
            "type" : "identifier",
            "value" : {
              "go-type" : 36,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "int32"
            }
          },
          "go-type" : 367,
          "kind" : "type",
          "type" : "pointer"
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 155,
      "code" : "case *int32:\n\treturn unsafe.Pointer(ptr), newUnfolderInt32()",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 73 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 155,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "coerced-to" : {
            "go-type" : 4,
            "kind" : "type",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 1,
              "value" : "unsafe"
            },
            "type" : "identifier",
            "value" : {
              "go-type" : 4,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "Pointer"
            }
          },
          "go-type" : 4,
          "kind" : "expression",
          "target" : {
            "go-type" : 367,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "ptr",
              "variable" : 73
            }
          },
          "type" : "cast"
        }, {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 370,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "newUnfolderInt32"
            }
          },
          "go-type" : 368,
          "kind" : "expression",
          "type" : "call"
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 155,
      "code" : "return unsafe.Pointer(ptr), newUnfolderInt32()",
      "entry" : false,
      "use-vars" : [ 73 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 73 ],
      "in-vars" : [ 74 ],
      "exit" : false,
      "out-vars" : [ 74 ],
      "decl-vars" : [ ],
      "line-start" : 156,
      "ast" : {
        "expressions" : [ {
          "contained" : {
            "element" : {
              "go-type" : 36,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 36,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "int32"
              }
            },
            "go-type" : 373,
            "kind" : "type",
            "type" : "slice"
          },
          "go-type" : 372,
          "kind" : "type",
          "type" : "pointer"
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 157,
      "code" : "case *[]int32:\n\treturn unsafe.Pointer(ptr), newUnfolderArrInt32()",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 74 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 157,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "coerced-to" : {
            "go-type" : 4,
            "kind" : "type",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 1,
              "value" : "unsafe"
            },
            "type" : "identifier",
            "value" : {
              "go-type" : 4,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "Pointer"
            }
          },
          "go-type" : 4,
          "kind" : "expression",
          "target" : {
            "go-type" : 372,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "ptr",
              "variable" : 74
            }
          },
          "type" : "cast"
        }, {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 376,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "newUnfolderArrInt32"
            }
          },
          "go-type" : 374,
          "kind" : "expression",
          "type" : "call"
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 157,
      "code" : "return unsafe.Pointer(ptr), newUnfolderArrInt32()",
      "entry" : false,
      "use-vars" : [ 74 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 75 ],
      "in-vars" : [ 75 ],
      "exit" : false,
      "out-vars" : [ 75 ],
      "decl-vars" : [ ],
      "line-start" : 158,
      "ast" : {
        "expressions" : [ {
          "contained" : {
            "go-type" : 379,
            "key" : {
              "go-type" : 14,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 14,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "string"
              }
            },
            "kind" : "type",
            "type" : "map",
            "value" : {
              "go-type" : 36,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 36,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "int32"
              }
            }
          },
          "go-type" : 378,
          "kind" : "type",
          "type" : "pointer"
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 159,
      "code" : "case *map[string]int32:\n\treturn unsafe.Pointer(ptr), newUnfolderMapInt32()",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 75 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 159,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "coerced-to" : {
            "go-type" : 4,
            "kind" : "type",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 1,
              "value" : "unsafe"
            },
            "type" : "identifier",
            "value" : {
              "go-type" : 4,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "Pointer"
            }
          },
          "go-type" : 4,
          "kind" : "expression",
          "target" : {
            "go-type" : 378,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "ptr",
              "variable" : 75
            }
          },
          "type" : "cast"
        }, {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 382,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "newUnfolderMapInt32"
            }
          },
          "go-type" : 380,
          "kind" : "expression",
          "type" : "call"
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 159,
      "code" : "return unsafe.Pointer(ptr), newUnfolderMapInt32()",
      "entry" : false,
      "use-vars" : [ 75 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 77 ],
      "in-vars" : [ 76 ],
      "exit" : false,
      "out-vars" : [ 76 ],
      "decl-vars" : [ ],
      "line-start" : 161,
      "ast" : {
        "expressions" : [ {
          "contained" : {
            "go-type" : 125,
            "kind" : "type",
            "type" : "identifier",
            "value" : {
              "go-type" : 125,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "int64"
            }
          },
          "go-type" : 384,
          "kind" : "type",
          "type" : "pointer"
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 162,
      "code" : "case *int64:\n\treturn unsafe.Pointer(ptr), newUnfolderInt64()",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 76 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 162,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "coerced-to" : {
            "go-type" : 4,
            "kind" : "type",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 1,
              "value" : "unsafe"
            },
            "type" : "identifier",
            "value" : {
              "go-type" : 4,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "Pointer"
            }
          },
          "go-type" : 4,
          "kind" : "expression",
          "target" : {
            "go-type" : 384,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "ptr",
              "variable" : 76
            }
          },
          "type" : "cast"
        }, {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 387,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "newUnfolderInt64"
            }
          },
          "go-type" : 385,
          "kind" : "expression",
          "type" : "call"
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 162,
      "code" : "return unsafe.Pointer(ptr), newUnfolderInt64()",
      "entry" : false,
      "use-vars" : [ 76 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 79 ],
      "in-vars" : [ 77 ],
      "exit" : false,
      "out-vars" : [ 77 ],
      "decl-vars" : [ ],
      "line-start" : 163,
      "ast" : {
        "expressions" : [ {
          "contained" : {
            "element" : {
              "go-type" : 125,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 125,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "int64"
              }
            },
            "go-type" : 390,
            "kind" : "type",
            "type" : "slice"
          },
          "go-type" : 389,
          "kind" : "type",
          "type" : "pointer"
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 164,
      "code" : "case *[]int64:\n\treturn unsafe.Pointer(ptr), newUnfolderArrInt64()",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 77 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 164,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "coerced-to" : {
            "go-type" : 4,
            "kind" : "type",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 1,
              "value" : "unsafe"
            },
            "type" : "identifier",
            "value" : {
              "go-type" : 4,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "Pointer"
            }
          },
          "go-type" : 4,
          "kind" : "expression",
          "target" : {
            "go-type" : 389,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "ptr",
              "variable" : 77
            }
          },
          "type" : "cast"
        }, {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 393,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "newUnfolderArrInt64"
            }
          },
          "go-type" : 391,
          "kind" : "expression",
          "type" : "call"
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 164,
      "code" : "return unsafe.Pointer(ptr), newUnfolderArrInt64()",
      "entry" : false,
      "use-vars" : [ 77 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 81 ],
      "in-vars" : [ 78 ],
      "exit" : false,
      "out-vars" : [ 78 ],
      "decl-vars" : [ ],
      "line-start" : 165,
      "ast" : {
        "expressions" : [ {
          "contained" : {
            "go-type" : 396,
            "key" : {
              "go-type" : 14,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 14,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "string"
              }
            },
            "kind" : "type",
            "type" : "map",
            "value" : {
              "go-type" : 125,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 125,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "int64"
              }
            }
          },
          "go-type" : 395,
          "kind" : "type",
          "type" : "pointer"
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 166,
      "code" : "case *map[string]int64:\n\treturn unsafe.Pointer(ptr), newUnfolderMapInt64()",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 78 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 166,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "coerced-to" : {
            "go-type" : 4,
            "kind" : "type",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 1,
              "value" : "unsafe"
            },
            "type" : "identifier",
            "value" : {
              "go-type" : 4,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "Pointer"
            }
          },
          "go-type" : 4,
          "kind" : "expression",
          "target" : {
            "go-type" : 395,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "ptr",
              "variable" : 78
            }
          },
          "type" : "cast"
        }, {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 399,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "newUnfolderMapInt64"
            }
          },
          "go-type" : 397,
          "kind" : "expression",
          "type" : "call"
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 166,
      "code" : "return unsafe.Pointer(ptr), newUnfolderMapInt64()",
      "entry" : false,
      "use-vars" : [ 78 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 83 ],
      "in-vars" : [ 79 ],
      "exit" : false,
      "out-vars" : [ 79 ],
      "decl-vars" : [ ],
      "line-start" : 168,
      "ast" : {
        "expressions" : [ {
          "contained" : {
            "go-type" : 112,
            "kind" : "type",
            "type" : "identifier",
            "value" : {
              "go-type" : 112,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "float32"
            }
          },
          "go-type" : 401,
          "kind" : "type",
          "type" : "pointer"
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 169,
      "code" : "case *float32:\n\treturn unsafe.Pointer(ptr), newUnfolderFloat32()",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 79 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 169,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "coerced-to" : {
            "go-type" : 4,
            "kind" : "type",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 1,
              "value" : "unsafe"
            },
            "type" : "identifier",
            "value" : {
              "go-type" : 4,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "Pointer"
            }
          },
          "go-type" : 4,
          "kind" : "expression",
          "target" : {
            "go-type" : 401,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "ptr",
              "variable" : 79
            }
          },
          "type" : "cast"
        }, {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 404,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "newUnfolderFloat32"
            }
          },
          "go-type" : 402,
          "kind" : "expression",
          "type" : "call"
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 169,
      "code" : "return unsafe.Pointer(ptr), newUnfolderFloat32()",
      "entry" : false,
      "use-vars" : [ 79 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 85 ],
      "in-vars" : [ 80 ],
      "exit" : false,
      "out-vars" : [ 80 ],
      "decl-vars" : [ ],
      "line-start" : 170,
      "ast" : {
        "expressions" : [ {
          "contained" : {
            "element" : {
              "go-type" : 112,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 112,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "float32"
              }
            },
            "go-type" : 407,
            "kind" : "type",
            "type" : "slice"
          },
          "go-type" : 406,
          "kind" : "type",
          "type" : "pointer"
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 171,
      "code" : "case *[]float32:\n\treturn unsafe.Pointer(ptr), newUnfolderArrFloat32()",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 80 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 171,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "coerced-to" : {
            "go-type" : 4,
            "kind" : "type",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 1,
              "value" : "unsafe"
            },
            "type" : "identifier",
            "value" : {
              "go-type" : 4,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "Pointer"
            }
          },
          "go-type" : 4,
          "kind" : "expression",
          "target" : {
            "go-type" : 406,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "ptr",
              "variable" : 80
            }
          },
          "type" : "cast"
        }, {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 410,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "newUnfolderArrFloat32"
            }
          },
          "go-type" : 408,
          "kind" : "expression",
          "type" : "call"
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 171,
      "code" : "return unsafe.Pointer(ptr), newUnfolderArrFloat32()",
      "entry" : false,
      "use-vars" : [ 80 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 87 ],
      "in-vars" : [ 81 ],
      "exit" : false,
      "out-vars" : [ 81 ],
      "decl-vars" : [ ],
      "line-start" : 172,
      "ast" : {
        "expressions" : [ {
          "contained" : {
            "go-type" : 413,
            "key" : {
              "go-type" : 14,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 14,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "string"
              }
            },
            "kind" : "type",
            "type" : "map",
            "value" : {
              "go-type" : 112,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 112,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "float32"
              }
            }
          },
          "go-type" : 412,
          "kind" : "type",
          "type" : "pointer"
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 173,
      "code" : "case *map[string]float32:\n\treturn unsafe.Pointer(ptr), newUnfolderMapFloat32()",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 81 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 173,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "coerced-to" : {
            "go-type" : 4,
            "kind" : "type",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 1,
              "value" : "unsafe"
            },
            "type" : "identifier",
            "value" : {
              "go-type" : 4,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "Pointer"
            }
          },
          "go-type" : 4,
          "kind" : "expression",
          "target" : {
            "go-type" : 412,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "ptr",
              "variable" : 81
            }
          },
          "type" : "cast"
        }, {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 416,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "newUnfolderMapFloat32"
            }
          },
          "go-type" : 414,
          "kind" : "expression",
          "type" : "call"
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 173,
      "code" : "return unsafe.Pointer(ptr), newUnfolderMapFloat32()",
      "entry" : false,
      "use-vars" : [ 81 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 89 ],
      "in-vars" : [ 82 ],
      "exit" : false,
      "out-vars" : [ 82 ],
      "decl-vars" : [ ],
      "line-start" : 175,
      "ast" : {
        "expressions" : [ {
          "contained" : {
            "go-type" : 115,
            "kind" : "type",
            "type" : "identifier",
            "value" : {
              "go-type" : 115,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "float64"
            }
          },
          "go-type" : 418,
          "kind" : "type",
          "type" : "pointer"
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 176,
      "code" : "case *float64:\n\treturn unsafe.Pointer(ptr), newUnfolderFloat64()",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 82 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 176,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "coerced-to" : {
            "go-type" : 4,
            "kind" : "type",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 1,
              "value" : "unsafe"
            },
            "type" : "identifier",
            "value" : {
              "go-type" : 4,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "Pointer"
            }
          },
          "go-type" : 4,
          "kind" : "expression",
          "target" : {
            "go-type" : 418,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "ptr",
              "variable" : 82
            }
          },
          "type" : "cast"
        }, {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 421,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "newUnfolderFloat64"
            }
          },
          "go-type" : 419,
          "kind" : "expression",
          "type" : "call"
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 176,
      "code" : "return unsafe.Pointer(ptr), newUnfolderFloat64()",
      "entry" : false,
      "use-vars" : [ 82 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 91 ],
      "in-vars" : [ 83 ],
      "exit" : false,
      "out-vars" : [ 83 ],
      "decl-vars" : [ ],
      "line-start" : 177,
      "ast" : {
        "expressions" : [ {
          "contained" : {
            "element" : {
              "go-type" : 115,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 115,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "float64"
              }
            },
            "go-type" : 424,
            "kind" : "type",
            "type" : "slice"
          },
          "go-type" : 423,
          "kind" : "type",
          "type" : "pointer"
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 178,
      "code" : "case *[]float64:\n\treturn unsafe.Pointer(ptr), newUnfolderArrFloat64()",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 83 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 178,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "coerced-to" : {
            "go-type" : 4,
            "kind" : "type",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 1,
              "value" : "unsafe"
            },
            "type" : "identifier",
            "value" : {
              "go-type" : 4,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "Pointer"
            }
          },
          "go-type" : 4,
          "kind" : "expression",
          "target" : {
            "go-type" : 423,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "ptr",
              "variable" : 83
            }
          },
          "type" : "cast"
        }, {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 427,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "newUnfolderArrFloat64"
            }
          },
          "go-type" : 425,
          "kind" : "expression",
          "type" : "call"
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 178,
      "code" : "return unsafe.Pointer(ptr), newUnfolderArrFloat64()",
      "entry" : false,
      "use-vars" : [ 83 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 93 ],
      "in-vars" : [ 84 ],
      "exit" : false,
      "out-vars" : [ 84 ],
      "decl-vars" : [ ],
      "line-start" : 179,
      "ast" : {
        "expressions" : [ {
          "contained" : {
            "go-type" : 430,
            "key" : {
              "go-type" : 14,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 14,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "string"
              }
            },
            "kind" : "type",
            "type" : "map",
            "value" : {
              "go-type" : 115,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 115,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "float64"
              }
            }
          },
          "go-type" : 429,
          "kind" : "type",
          "type" : "pointer"
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 180,
      "code" : "case *map[string]float64:\n\treturn unsafe.Pointer(ptr), newUnfolderMapFloat64()",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 84 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 180,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "coerced-to" : {
            "go-type" : 4,
            "kind" : "type",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 1,
              "value" : "unsafe"
            },
            "type" : "identifier",
            "value" : {
              "go-type" : 4,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "Pointer"
            }
          },
          "go-type" : 4,
          "kind" : "expression",
          "target" : {
            "go-type" : 429,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "ptr",
              "variable" : 84
            }
          },
          "type" : "cast"
        }, {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 433,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "newUnfolderMapFloat64"
            }
          },
          "go-type" : 431,
          "kind" : "expression",
          "type" : "call"
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 180,
      "code" : "return unsafe.Pointer(ptr), newUnfolderMapFloat64()",
      "entry" : false,
      "use-vars" : [ 84 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 95 ],
      "in-vars" : [ ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 182,
      "ast" : {
        "expressions" : [ ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 183,
      "code" : "default:\n\treturn nil, nil",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 183,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 4,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Nil",
            "kind" : "ident",
            "value" : "nil"
          }
        }, {
          "go-type" : 435,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Nil",
            "kind" : "ident",
            "value" : "nil"
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 183,
      "code" : "return nil, nil",
      "entry" : false,
      "use-vars" : [ ]
    } ],
    "code" : "func lookupGoTypeUnfolder(to interface{}) (unsafe.Pointer, ptrUnfolder) {\n\tswitch ptr := to.(type) {\n\tcase *interface{}:\n\t\treturn unsafe.Pointer(ptr), newUnfolderIfc()\n\tcase *[]interface{}:\n\t\treturn unsafe.Pointer(ptr), newUnfolderArrIfc()\n\tcase *map[string]interface{}:\n\t\treturn unsafe.Pointer(ptr), newUnfolderMapIfc()\n\n\tcase *bool:\n\t\treturn unsafe.Pointer(ptr), newUnfolderBool()\n\tcase *[]bool:\n\t\treturn unsafe.Pointer(ptr), newUnfolderArrBool()\n\tcase *map[string]bool:\n\t\treturn unsafe.Pointer(ptr), newUnfolderMapBool()\n\n\tcase *string:\n\t\treturn unsafe.Pointer(ptr), newUnfolderString()\n\tcase *[]string:\n\t\treturn unsafe.Pointer(ptr), newUnfolderArrString()\n\tcase *map[string]string:\n\t\treturn unsafe.Pointer(ptr), newUnfolderMapString()\n\n\tcase *uint:\n\t\treturn unsafe.Pointer(ptr), newUnfolderUint()\n\tcase *[]uint:\n\t\treturn unsafe.Pointer(ptr), newUnfolderArrUint()\n\tcase *map[string]uint:\n\t\treturn unsafe.Pointer(ptr), newUnfolderMapUint()\n\n\tcase *uint8:\n\t\treturn unsafe.Pointer(ptr), newUnfolderUint8()\n\tcase *[]uint8:\n\t\treturn unsafe.Pointer(ptr), newUnfolderArrUint8()\n\tcase *map[string]uint8:\n\t\treturn unsafe.Pointer(ptr), newUnfolderMapUint8()\n\n\tcase *uint16:\n\t\treturn unsafe.Pointer(ptr), newUnfolderUint16()\n\tcase *[]uint16:\n\t\treturn unsafe.Pointer(ptr), newUnfolderArrUint16()\n\tcase *map[string]uint16:\n\t\treturn unsafe.Pointer(ptr), newUnfolderMapUint16()\n\n\tcase *uint32:\n\t\treturn unsafe.Pointer(ptr), newUnfolderUint32()\n\tcase *[]uint32:\n\t\treturn unsafe.Pointer(ptr), newUnfolderArrUint32()\n\tcase *map[string]uint32:\n\t\treturn unsafe.Pointer(ptr), newUnfolderMapUint32()\n\n\tcase *uint64:\n\t\treturn unsafe.Pointer(ptr), newUnfolderUint64()\n\tcase *[]uint64:\n\t\treturn unsafe.Pointer(ptr), newUnfolderArrUint64()\n\tcase *map[string]uint64:\n\t\treturn unsafe.Pointer(ptr), newUnfolderMapUint64()\n\n\tcase *int:\n\t\treturn unsafe.Pointer(ptr), newUnfolderInt()\n\tcase *[]int:\n\t\treturn unsafe.Pointer(ptr), newUnfolderArrInt()\n\tcase *map[string]int:\n\t\treturn unsafe.Pointer(ptr), newUnfolderMapInt()\n\n\tcase *int8:\n\t\treturn unsafe.Pointer(ptr), newUnfolderInt8()\n\tcase *[]int8:\n\t\treturn unsafe.Pointer(ptr), newUnfolderArrInt8()\n\tcase *map[string]int8:\n\t\treturn unsafe.Pointer(ptr), newUnfolderMapInt8()\n\n\tcase *int16:\n\t\treturn unsafe.Pointer(ptr), newUnfolderInt16()\n\tcase *[]int16:\n\t\treturn unsafe.Pointer(ptr), newUnfolderArrInt16()\n\tcase *map[string]int16:\n\t\treturn unsafe.Pointer(ptr), newUnfolderMapInt16()\n\n\tcase *int32:\n\t\treturn unsafe.Pointer(ptr), newUnfolderInt32()\n\tcase *[]int32:\n\t\treturn unsafe.Pointer(ptr), newUnfolderArrInt32()\n\tcase *map[string]int32:\n\t\treturn unsafe.Pointer(ptr), newUnfolderMapInt32()\n\n\tcase *int64:\n\t\treturn unsafe.Pointer(ptr), newUnfolderInt64()\n\tcase *[]int64:\n\t\treturn unsafe.Pointer(ptr), newUnfolderArrInt64()\n\tcase *map[string]int64:\n\t\treturn unsafe.Pointer(ptr), newUnfolderMapInt64()\n\n\tcase *float32:\n\t\treturn unsafe.Pointer(ptr), newUnfolderFloat32()\n\tcase *[]float32:\n\t\treturn unsafe.Pointer(ptr), newUnfolderArrFloat32()\n\tcase *map[string]float32:\n\t\treturn unsafe.Pointer(ptr), newUnfolderMapFloat32()\n\n\tcase *float64:\n\t\treturn unsafe.Pointer(ptr), newUnfolderFloat64()\n\tcase *[]float64:\n\t\treturn unsafe.Pointer(ptr), newUnfolderArrFloat64()\n\tcase *map[string]float64:\n\t\treturn unsafe.Pointer(ptr), newUnfolderMapFloat64()\n\n\tdefault:\n\t\treturn nil, nil\n\t}\n}",
    "defines" : [ 0 ],
    "functions" : [ {
      "name" : "lookupGoTypeUnfolder",
      "package" : 0,
      "type" : 0,
      "exported" : false
    }, {
      "name" : "newUnfolderIfc",
      "package" : 0,
      "type" : 186,
      "exported" : false
    }, {
      "name" : "newUnfolderArrIfc",
      "package" : 0,
      "type" : 192,
      "exported" : false
    }, {
      "name" : "newUnfolderMapIfc",
      "package" : 0,
      "type" : 197,
      "exported" : false
    }, {
      "name" : "newUnfolderBool",
      "package" : 0,
      "type" : 202,
      "exported" : false
    }, {
      "name" : "newUnfolderArrBool",
      "package" : 0,
      "type" : 208,
      "exported" : false
    }, {
      "name" : "newUnfolderMapBool",
      "package" : 0,
      "type" : 214,
      "exported" : false
    }, {
      "name" : "newUnfolderString",
      "package" : 0,
      "type" : 219,
      "exported" : false
    }, {
      "name" : "newUnfolderArrString",
      "package" : 0,
      "type" : 224,
      "exported" : false
    }, {
      "name" : "newUnfolderMapString",
      "package" : 0,
      "type" : 230,
      "exported" : false
    }, {
      "name" : "newUnfolderUint",
      "package" : 0,
      "type" : 235,
      "exported" : false
    }, {
      "name" : "newUnfolderArrUint",
      "package" : 0,
      "type" : 241,
      "exported" : false
    }, {
      "name" : "newUnfolderMapUint",
      "package" : 0,
      "type" : 247,
      "exported" : false
    }, {
      "name" : "newUnfolderUint8",
      "package" : 0,
      "type" : 252,
      "exported" : false
    }, {
      "name" : "newUnfolderArrUint8",
      "package" : 0,
      "type" : 258,
      "exported" : false
    }, {
      "name" : "newUnfolderMapUint8",
      "package" : 0,
      "type" : 264,
      "exported" : false
    }, {
      "name" : "newUnfolderUint16",
      "package" : 0,
      "type" : 269,
      "exported" : false
    }, {
      "name" : "newUnfolderArrUint16",
      "package" : 0,
      "type" : 275,
      "exported" : false
    }, {
      "name" : "newUnfolderMapUint16",
      "package" : 0,
      "type" : 281,
      "exported" : false
    }, {
      "name" : "newUnfolderUint32",
      "package" : 0,
      "type" : 286,
      "exported" : false
    }, {
      "name" : "newUnfolderArrUint32",
      "package" : 0,
      "type" : 292,
      "exported" : false
    }, {
      "name" : "newUnfolderMapUint32",
      "package" : 0,
      "type" : 298,
      "exported" : false
    }, {
      "name" : "newUnfolderUint64",
      "package" : 0,
      "type" : 303,
      "exported" : false
    }, {
      "name" : "newUnfolderArrUint64",
      "package" : 0,
      "type" : 309,
      "exported" : false
    }, {
      "name" : "newUnfolderMapUint64",
      "package" : 0,
      "type" : 315,
      "exported" : false
    }, {
      "name" : "newUnfolderInt",
      "package" : 0,
      "type" : 320,
      "exported" : false
    }, {
      "name" : "newUnfolderArrInt",
      "package" : 0,
      "type" : 325,
      "exported" : false
    }, {
      "name" : "newUnfolderMapInt",
      "package" : 0,
      "type" : 331,
      "exported" : false
    }, {
      "name" : "newUnfolderInt8",
      "package" : 0,
      "type" : 336,
      "exported" : false
    }, {
      "name" : "newUnfolderArrInt8",
      "package" : 0,
      "type" : 342,
      "exported" : false
    }, {
      "name" : "newUnfolderMapInt8",
      "package" : 0,
      "type" : 348,
      "exported" : false
    }, {
      "name" : "newUnfolderInt16",
      "package" : 0,
      "type" : 353,
      "exported" : false
    }, {
      "name" : "newUnfolderArrInt16",
      "package" : 0,
      "type" : 359,
      "exported" : false
    }, {
      "name" : "newUnfolderMapInt16",
      "package" : 0,
      "type" : 365,
      "exported" : false
    }, {
      "name" : "newUnfolderInt32",
      "package" : 0,
      "type" : 370,
      "exported" : false
    }, {
      "name" : "newUnfolderArrInt32",
      "package" : 0,
      "type" : 376,
      "exported" : false
    }, {
      "name" : "newUnfolderMapInt32",
      "package" : 0,
      "type" : 382,
      "exported" : false
    }, {
      "name" : "newUnfolderInt64",
      "package" : 0,
      "type" : 387,
      "exported" : false
    }, {
      "name" : "newUnfolderArrInt64",
      "package" : 0,
      "type" : 393,
      "exported" : false
    }, {
      "name" : "newUnfolderMapInt64",
      "package" : 0,
      "type" : 399,
      "exported" : false
    }, {
      "name" : "newUnfolderFloat32",
      "package" : 0,
      "type" : 404,
      "exported" : false
    }, {
      "name" : "newUnfolderArrFloat32",
      "package" : 0,
      "type" : 410,
      "exported" : false
    }, {
      "name" : "newUnfolderMapFloat32",
      "package" : 0,
      "type" : 416,
      "exported" : false
    }, {
      "name" : "newUnfolderFloat64",
      "package" : 0,
      "type" : 421,
      "exported" : false
    }, {
      "name" : "newUnfolderArrFloat64",
      "package" : 0,
      "type" : 427,
      "exported" : false
    }, {
      "name" : "newUnfolderMapFloat64",
      "package" : 0,
      "type" : 433,
      "exported" : false
    } ],
    "line-end" : 185,
    "line-start" : 75,
    "names" : [ "lookupGoTypeUnfolder" ],
    "package" : 0,
    "packages" : [ {
      "name" : "gotype",
      "path" : "github.com/elastic/go-structform/gotype"
    }, {
      "name" : "unsafe",
      "path" : "unsafe"
    }, {
      "name" : "reflect",
      "path" : "reflect"
    }, {
      "name" : "structform",
      "path" : "github.com/elastic/go-structform"
    } ],
    "params" : [ 37 ],
    "receivers" : [ ],
    "results" : [ 38, 39 ],
    "type" : "function",
    "types" : [ {
      "name" : "func(to interface{}) (unsafe.Pointer, github.com/elastic/go-structform/gotype.ptrUnfolder)",
      "params" : 1,
      "recv" : -1,
      "results" : 3,
      "type" : "Signature",
      "underlying" : 0,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "to",
        "type" : 2
      } ],
      "name" : "(to interface{})",
      "type" : "Tuple",
      "underlying" : 1
    }, {
      "methods" : [ ],
      "name" : "interface{}",
      "type" : "Interface",
      "underlying" : 2
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 4
      }, {
        "name" : "",
        "type" : 5
      } ],
      "name" : "(unsafe.Pointer, github.com/elastic/go-structform/gotype.ptrUnfolder)",
      "type" : "Tuple",
      "underlying" : 3
    }, {
      "local-name" : "Pointer",
      "name" : "unsafe.Pointer",
      "package" : 1,
      "type" : "Basic",
      "underlying" : 4
    }, {
      "local-name" : "ptrUnfolder",
      "name" : "github.com/elastic/go-structform/gotype.ptrUnfolder",
      "package" : 0,
      "type" : "Named",
      "underlying" : 6
    }, {
      "methods" : [ {
        "name" : "initState",
        "type" : 7
      } ],
      "name" : "interface{initState(*github.com/elastic/go-structform/gotype.unfoldCtx, unsafe.Pointer)}",
      "type" : "Interface",
      "underlying" : 6
    }, {
      "name" : "func(*github.com/elastic/go-structform/gotype.unfoldCtx, unsafe.Pointer)",
      "params" : 8,
      "recv" : 36,
      "results" : 39,
      "type" : "Signature",
      "underlying" : 7,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 9
      }, {
        "name" : "",
        "type" : 4
      } ],
      "name" : "(*github.com/elastic/go-structform/gotype.unfoldCtx, unsafe.Pointer)",
      "type" : "Tuple",
      "underlying" : 8
    }, {
      "elem" : 10,
      "name" : "*github.com/elastic/go-structform/gotype.unfoldCtx",
      "type" : "Pointer",
      "underlying" : 9
    }, {
      "local-name" : "unfoldCtx",
      "name" : "github.com/elastic/go-structform/gotype.unfoldCtx",
      "package" : 0,
      "type" : "Named",
      "underlying" : 11
    }, {
      "fields" : [ {
        "name" : "opts",
        "type" : 12
      }, {
        "name" : "userReg",
        "type" : 15
      }, {
        "name" : "reg",
        "type" : 91
      }, {
        "name" : "unfolder",
        "type" : 94
      }, {
        "name" : "value",
        "type" : 147
      }, {
        "name" : "baseType",
        "type" : 151
      }, {
        "name" : "ptr",
        "type" : 155
      }, {
        "name" : "key",
        "type" : 159
      }, {
        "name" : "idx",
        "type" : 163
      }, {
        "name" : "keyCache",
        "type" : 166
      }, {
        "name" : "valueBuffer",
        "type" : 173
      } ],
      "name" : "struct{opts github.com/elastic/go-structform/gotype.options; userReg map[reflect.Type]github.com/elastic/go-structform/gotype.reflUnfolder; reg *github.com/elastic/go-structform/gotype.typeUnfoldRegistry; unfolder github.com/elastic/go-structform/gotype.unfolderStack; value github.com/elastic/go-structform/gotype.reflectValueStack; baseType github.com/elastic/go-structform/gotype.structformTypeStack; ptr github.com/elastic/go-structform/gotype.ptrStack; key github.com/elastic/go-structform/gotype.keyStack; idx github.com/elastic/go-structform/gotype.idxStack; keyCache github.com/elastic/go-structform/gotype.symbolCache; valueBuffer github.com/elastic/go-structform/gotype.unfoldBuf}",
      "type" : "Struct",
      "underlying" : 11
    }, {
      "local-name" : "options",
      "name" : "github.com/elastic/go-structform/gotype.options",
      "package" : 0,
      "type" : "Named",
      "underlying" : 13
    }, {
      "fields" : [ {
        "name" : "tag",
        "type" : 14
      } ],
      "name" : "struct{tag string}",
      "type" : "Struct",
      "underlying" : 13
    }, {
      "name" : "string",
      "type" : "Basic",
      "underlying" : 14
    }, {
      "elem" : 16,
      "key" : 40,
      "name" : "map[reflect.Type]github.com/elastic/go-structform/gotype.reflUnfolder",
      "type" : "Map",
      "underlying" : 15
    }, {
      "local-name" : "reflUnfolder",
      "name" : "github.com/elastic/go-structform/gotype.reflUnfolder",
      "package" : 0,
      "type" : "Named",
      "underlying" : 17
    }, {
      "methods" : [ {
        "name" : "initState",
        "type" : 18
      } ],
      "name" : "interface{initState(*github.com/elastic/go-structform/gotype.unfoldCtx, reflect.Value)}",
      "type" : "Interface",
      "underlying" : 17
    }, {
      "name" : "func(*github.com/elastic/go-structform/gotype.unfoldCtx, reflect.Value)",
      "params" : 19,
      "recv" : 0,
      "results" : 39,
      "type" : "Signature",
      "underlying" : 18,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 9
      }, {
        "name" : "",
        "type" : 20
      } ],
      "name" : "(*github.com/elastic/go-structform/gotype.unfoldCtx, reflect.Value)",
      "type" : "Tuple",
      "underlying" : 19
    }, {
      "local-name" : "Value",
      "name" : "reflect.Value",
      "package" : 2,
      "type" : "Named",
      "underlying" : 21
    }, {
      "fields" : [ {
        "name" : "typ",
        "type" : 22
      }, {
        "name" : "ptr",
        "type" : 4
      }, {
        "name" : "flag",
        "type" : 38
      } ],
      "name" : "struct{typ *reflect.rtype; ptr unsafe.Pointer; reflect.flag}",
      "type" : "Struct",
      "underlying" : 21
    }, {
      "elem" : 23,
      "name" : "*reflect.rtype",
      "type" : "Pointer",
      "underlying" : 22
    }, {
      "local-name" : "rtype",
      "name" : "reflect.rtype",
      "package" : 2,
      "type" : "Named",
      "underlying" : 24
    }, {
      "fields" : [ {
        "name" : "size",
        "type" : 25
      }, {
        "name" : "ptrdata",
        "type" : 25
      }, {
        "name" : "hash",
        "type" : 26
      }, {
        "name" : "tflag",
        "type" : 27
      }, {
        "name" : "align",
        "type" : 28
      }, {
        "name" : "fieldAlign",
        "type" : 28
      }, {
        "name" : "kind",
        "type" : 28
      }, {
        "name" : "equal",
        "type" : 29
      }, {
        "name" : "gcdata",
        "type" : 33
      }, {
        "name" : "str",
        "type" : 35
      }, {
        "name" : "ptrToThis",
        "type" : 37
      } ],
      "name" : "struct{size uintptr; ptrdata uintptr; hash uint32; tflag reflect.tflag; align uint8; fieldAlign uint8; kind uint8; equal func(unsafe.Pointer, unsafe.Pointer) bool; gcdata *byte; str reflect.nameOff; ptrToThis reflect.typeOff}",
      "type" : "Struct",
      "underlying" : 24
    }, {
      "name" : "uintptr",
      "type" : "Basic",
      "underlying" : 25
    }, {
      "name" : "uint32",
      "type" : "Basic",
      "underlying" : 26
    }, {
      "local-name" : "tflag",
      "name" : "reflect.tflag",
      "package" : 2,
      "type" : "Named",
      "underlying" : 28
    }, {
      "name" : "uint8",
      "type" : "Basic",
      "underlying" : 28
    }, {
      "name" : "func(unsafe.Pointer, unsafe.Pointer) bool",
      "params" : 30,
      "recv" : -1,
      "results" : 31,
      "type" : "Signature",
      "underlying" : 29,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 4
      }, {
        "name" : "",
        "type" : 4
      } ],
      "name" : "(unsafe.Pointer, unsafe.Pointer)",
      "type" : "Tuple",
      "underlying" : 30
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 32
      } ],
      "name" : "(bool)",
      "type" : "Tuple",
      "underlying" : 31
    }, {
      "name" : "bool",
      "type" : "Basic",
      "underlying" : 32
    }, {
      "elem" : 34,
      "name" : "*byte",
      "type" : "Pointer",
      "underlying" : 33
    }, {
      "name" : "byte",
      "type" : "Basic",
      "underlying" : 34
    }, {
      "local-name" : "nameOff",
      "name" : "reflect.nameOff",
      "package" : 2,
      "type" : "Named",
      "underlying" : 36
    }, {
      "name" : "int32",
      "type" : "Basic",
      "underlying" : 36
    }, {
      "local-name" : "typeOff",
      "name" : "reflect.typeOff",
      "package" : 2,
      "type" : "Named",
      "underlying" : 36
    }, {
      "local-name" : "flag",
      "name" : "reflect.flag",
      "package" : 2,
      "type" : "Named",
      "underlying" : 25
    }, {
      "fields" : [ ],
      "name" : "()",
      "type" : "Tuple",
      "underlying" : 39
    }, {
      "local-name" : "Type",
      "name" : "reflect.Type",
      "package" : 2,
      "type" : "Named",
      "underlying" : 41
    }, {
      "methods" : [ {
        "name" : "Align",
        "type" : 42
      }, {
        "name" : "AssignableTo",
        "type" : 45
      }, {
        "name" : "Bits",
        "type" : 42
      }, {
        "name" : "ChanDir",
        "type" : 47
      }, {
        "name" : "Comparable",
        "type" : 50
      }, {
        "name" : "ConvertibleTo",
        "type" : 45
      }, {
        "name" : "Elem",
        "type" : 51
      }, {
        "name" : "Field",
        "type" : 53
      }, {
        "name" : "FieldAlign",
        "type" : 42
      }, {
        "name" : "FieldByIndex",
        "type" : 60
      }, {
        "name" : "FieldByName",
        "type" : 62
      }, {
        "name" : "FieldByNameFunc",
        "type" : 65
      }, {
        "name" : "Implements",
        "type" : 45
      }, {
        "name" : "In",
        "type" : 69
      }, {
        "name" : "IsVariadic",
        "type" : 50
      }, {
        "name" : "Key",
        "type" : 51
      }, {
        "name" : "Kind",
        "type" : 70
      }, {
        "name" : "Len",
        "type" : 42
      }, {
        "name" : "Method",
        "type" : 74
      }, {
        "name" : "MethodByName",
        "type" : 78
      }, {
        "name" : "Name",
        "type" : 80
      }, {
        "name" : "NumField",
        "type" : 42
      }, {
        "name" : "NumIn",
        "type" : 42
      }, {
        "name" : "NumMethod",
        "type" : 42
      }, {
        "name" : "NumOut",
        "type" : 42
      }, {
        "name" : "Out",
        "type" : 69
      }, {
        "name" : "PkgPath",
        "type" : 80
      }, {
        "name" : "Size",
        "type" : 81
      }, {
        "name" : "String",
        "type" : 80
      }, {
        "name" : "common",
        "type" : 83
      }, {
        "name" : "uncommon",
        "type" : 85
      } ],
      "name" : "interface{Align() int; AssignableTo(u reflect.Type) bool; Bits() int; ChanDir() reflect.ChanDir; Comparable() bool; ConvertibleTo(u reflect.Type) bool; Elem() reflect.Type; Field(i int) reflect.StructField; FieldAlign() int; FieldByIndex(index []int) reflect.StructField; FieldByName(name string) (reflect.StructField, bool); FieldByNameFunc(match func(string) bool) (reflect.StructField, bool); Implements(u reflect.Type) bool; In(i int) reflect.Type; IsVariadic() bool; Key() reflect.Type; Kind() reflect.Kind; Len() int; Method(int) reflect.Method; MethodByName(string) (reflect.Method, bool); Name() string; NumField() int; NumIn() int; NumMethod() int; NumOut() int; Out(i int) reflect.Type; PkgPath() string; Size() uintptr; String() string; common() *reflect.rtype; uncommon() *reflect.uncommonType}",
      "type" : "Interface",
      "underlying" : 41
    }, {
      "name" : "func() int",
      "params" : 39,
      "recv" : 1,
      "results" : 43,
      "type" : "Signature",
      "underlying" : 42,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 44
      } ],
      "name" : "(int)",
      "type" : "Tuple",
      "underlying" : 43
    }, {
      "name" : "int",
      "type" : "Basic",
      "underlying" : 44
    }, {
      "name" : "func(u reflect.Type) bool",
      "params" : 46,
      "recv" : 2,
      "results" : 31,
      "type" : "Signature",
      "underlying" : 45,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "u",
        "type" : 40
      } ],
      "name" : "(u reflect.Type)",
      "type" : "Tuple",
      "underlying" : 46
    }, {
      "name" : "func() reflect.ChanDir",
      "params" : 39,
      "recv" : 3,
      "results" : 48,
      "type" : "Signature",
      "underlying" : 47,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 49
      } ],
      "name" : "(reflect.ChanDir)",
      "type" : "Tuple",
      "underlying" : 48
    }, {
      "local-name" : "ChanDir",
      "name" : "reflect.ChanDir",
      "package" : 2,
      "type" : "Named",
      "underlying" : 44
    }, {
      "name" : "func() bool",
      "params" : 39,
      "recv" : 4,
      "results" : 31,
      "type" : "Signature",
      "underlying" : 50,
      "variadic" : false
    }, {
      "name" : "func() reflect.Type",
      "params" : 39,
      "recv" : 5,
      "results" : 52,
      "type" : "Signature",
      "underlying" : 51,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 40
      } ],
      "name" : "(reflect.Type)",
      "type" : "Tuple",
      "underlying" : 52
    }, {
      "name" : "func(i int) reflect.StructField",
      "params" : 54,
      "recv" : 6,
      "results" : 55,
      "type" : "Signature",
      "underlying" : 53,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "i",
        "type" : 44
      } ],
      "name" : "(i int)",
      "type" : "Tuple",
      "underlying" : 54
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 56
      } ],
      "name" : "(reflect.StructField)",
      "type" : "Tuple",
      "underlying" : 55
    }, {
      "local-name" : "StructField",
      "name" : "reflect.StructField",
      "package" : 2,
      "type" : "Named",
      "underlying" : 57
    }, {
      "fields" : [ {
        "name" : "Name",
        "type" : 14
      }, {
        "name" : "PkgPath",
        "type" : 14
      }, {
        "name" : "Type",
        "type" : 40
      }, {
        "name" : "Tag",
        "type" : 58
      }, {
        "name" : "Offset",
        "type" : 25
      }, {
        "name" : "Index",
        "type" : 59
      }, {
        "name" : "Anonymous",
        "type" : 32
      } ],
      "name" : "struct{Name string; PkgPath string; Type reflect.Type; Tag reflect.StructTag; Offset uintptr; Index []int; Anonymous bool}",
      "type" : "Struct",
      "underlying" : 57
    }, {
      "local-name" : "StructTag",
      "name" : "reflect.StructTag",
      "package" : 2,
      "type" : "Named",
      "underlying" : 14
    }, {
      "elem" : 44,
      "name" : "[]int",
      "type" : "Slice",
      "underlying" : 59
    }, {
      "name" : "func(index []int) reflect.StructField",
      "params" : 61,
      "recv" : 7,
      "results" : 55,
      "type" : "Signature",
      "underlying" : 60,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "index",
        "type" : 59
      } ],
      "name" : "(index []int)",
      "type" : "Tuple",
      "underlying" : 61
    }, {
      "name" : "func(name string) (reflect.StructField, bool)",
      "params" : 63,
      "recv" : 8,
      "results" : 64,
      "type" : "Signature",
      "underlying" : 62,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "name",
        "type" : 14
      } ],
      "name" : "(name string)",
      "type" : "Tuple",
      "underlying" : 63
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 56
      }, {
        "name" : "",
        "type" : 32
      } ],
      "name" : "(reflect.StructField, bool)",
      "type" : "Tuple",
      "underlying" : 64
    }, {
      "name" : "func(match func(string) bool) (reflect.StructField, bool)",
      "params" : 66,
      "recv" : 9,
      "results" : 64,
      "type" : "Signature",
      "underlying" : 65,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "match",
        "type" : 67
      } ],
      "name" : "(match func(string) bool)",
      "type" : "Tuple",
      "underlying" : 66
    }, {
      "name" : "func(string) bool",
      "params" : 68,
      "recv" : -1,
      "results" : 31,
      "type" : "Signature",
      "underlying" : 67,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 14
      } ],
      "name" : "(string)",
      "type" : "Tuple",
      "underlying" : 68
    }, {
      "name" : "func(i int) reflect.Type",
      "params" : 54,
      "recv" : 10,
      "results" : 52,
      "type" : "Signature",
      "underlying" : 69,
      "variadic" : false
    }, {
      "name" : "func() reflect.Kind",
      "params" : 39,
      "recv" : 11,
      "results" : 71,
      "type" : "Signature",
      "underlying" : 70,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 72
      } ],
      "name" : "(reflect.Kind)",
      "type" : "Tuple",
      "underlying" : 71
    }, {
      "local-name" : "Kind",
      "name" : "reflect.Kind",
      "package" : 2,
      "type" : "Named",
      "underlying" : 73
    }, {
      "name" : "uint",
      "type" : "Basic",
      "underlying" : 73
    }, {
      "name" : "func(int) reflect.Method",
      "params" : 43,
      "recv" : 12,
      "results" : 75,
      "type" : "Signature",
      "underlying" : 74,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 76
      } ],
      "name" : "(reflect.Method)",
      "type" : "Tuple",
      "underlying" : 75
    }, {
      "local-name" : "Method",
      "name" : "reflect.Method",
      "package" : 2,
      "type" : "Named",
      "underlying" : 77
    }, {
      "fields" : [ {
        "name" : "Name",
        "type" : 14
      }, {
        "name" : "PkgPath",
        "type" : 14
      }, {
        "name" : "Type",
        "type" : 40
      }, {
        "name" : "Func",
        "type" : 20
      }, {
        "name" : "Index",
        "type" : 44
      } ],
      "name" : "struct{Name string; PkgPath string; Type reflect.Type; Func reflect.Value; Index int}",
      "type" : "Struct",
      "underlying" : 77
    }, {
      "name" : "func(string) (reflect.Method, bool)",
      "params" : 68,
      "recv" : 13,
      "results" : 79,
      "type" : "Signature",
      "underlying" : 78,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 76
      }, {
        "name" : "",
        "type" : 32
      } ],
      "name" : "(reflect.Method, bool)",
      "type" : "Tuple",
      "underlying" : 79
    }, {
      "name" : "func() string",
      "params" : 39,
      "recv" : 14,
      "results" : 68,
      "type" : "Signature",
      "underlying" : 80,
      "variadic" : false
    }, {
      "name" : "func() uintptr",
      "params" : 39,
      "recv" : 15,
      "results" : 82,
      "type" : "Signature",
      "underlying" : 81,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 25
      } ],
      "name" : "(uintptr)",
      "type" : "Tuple",
      "underlying" : 82
    }, {
      "name" : "func() *reflect.rtype",
      "params" : 39,
      "recv" : 16,
      "results" : 84,
      "type" : "Signature",
      "underlying" : 83,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 22
      } ],
      "name" : "(*reflect.rtype)",
      "type" : "Tuple",
      "underlying" : 84
    }, {
      "name" : "func() *reflect.uncommonType",
      "params" : 39,
      "recv" : 17,
      "results" : 86,
      "type" : "Signature",
      "underlying" : 85,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 87
      } ],
      "name" : "(*reflect.uncommonType)",
      "type" : "Tuple",
      "underlying" : 86
    }, {
      "elem" : 88,
      "name" : "*reflect.uncommonType",
      "type" : "Pointer",
      "underlying" : 87
    }, {
      "local-name" : "uncommonType",
      "name" : "reflect.uncommonType",
      "package" : 2,
      "type" : "Named",
      "underlying" : 89
    }, {
      "fields" : [ {
        "name" : "pkgPath",
        "type" : 35
      }, {
        "name" : "mcount",
        "type" : 90
      }, {
        "name" : "xcount",
        "type" : 90
      }, {
        "name" : "moff",
        "type" : 26
      }, {
        "name" : "_",
        "type" : 26
      } ],
      "name" : "struct{pkgPath reflect.nameOff; mcount uint16; xcount uint16; moff uint32; _ uint32}",
      "type" : "Struct",
      "underlying" : 89
    }, {
      "name" : "uint16",
      "type" : "Basic",
      "underlying" : 90
    }, {
      "elem" : 92,
      "name" : "*github.com/elastic/go-structform/gotype.typeUnfoldRegistry",
      "type" : "Pointer",
      "underlying" : 91
    }, {
      "local-name" : "typeUnfoldRegistry",
      "name" : "github.com/elastic/go-structform/gotype.typeUnfoldRegistry",
      "package" : 0,
      "type" : "Named",
      "underlying" : 93
    }, {
      "fields" : [ {
        "name" : "m",
        "type" : 15
      } ],
      "name" : "struct{m map[reflect.Type]github.com/elastic/go-structform/gotype.reflUnfolder}",
      "type" : "Struct",
      "underlying" : 93
    }, {
      "local-name" : "unfolderStack",
      "name" : "github.com/elastic/go-structform/gotype.unfolderStack",
      "package" : 0,
      "type" : "Named",
      "underlying" : 95
    }, {
      "fields" : [ {
        "name" : "current",
        "type" : 96
      }, {
        "name" : "stack",
        "type" : 145
      }, {
        "name" : "stack0",
        "type" : 146
      } ],
      "name" : "struct{current github.com/elastic/go-structform/gotype.unfolder; stack []github.com/elastic/go-structform/gotype.unfolder; stack0 [32]github.com/elastic/go-structform/gotype.unfolder}",
      "type" : "Struct",
      "underlying" : 95
    }, {
      "local-name" : "unfolder",
      "name" : "github.com/elastic/go-structform/gotype.unfolder",
      "package" : 0,
      "type" : "Named",
      "underlying" : 97
    }, {
      "methods" : [ {
        "name" : "OnArrayFinished",
        "type" : 98
      }, {
        "name" : "OnArrayStart",
        "type" : 103
      }, {
        "name" : "OnBool",
        "type" : 106
      }, {
        "name" : "OnByte",
        "type" : 108
      }, {
        "name" : "OnChildArrayDone",
        "type" : 98
      }, {
        "name" : "OnChildObjectDone",
        "type" : 98
      }, {
        "name" : "OnFloat32",
        "type" : 110
      }, {
        "name" : "OnFloat64",
        "type" : 113
      }, {
        "name" : "OnInt",
        "type" : 116
      }, {
        "name" : "OnInt16",
        "type" : 118
      }, {
        "name" : "OnInt32",
        "type" : 121
      }, {
        "name" : "OnInt64",
        "type" : 123
      }, {
        "name" : "OnInt8",
        "type" : 126
      }, {
        "name" : "OnKey",
        "type" : 129
      }, {
        "name" : "OnKeyRef",
        "type" : 131
      }, {
        "name" : "OnNil",
        "type" : 98
      }, {
        "name" : "OnObjectFinished",
        "type" : 98
      }, {
        "name" : "OnObjectStart",
        "type" : 103
      }, {
        "name" : "OnString",
        "type" : 129
      }, {
        "name" : "OnStringRef",
        "type" : 131
      }, {
        "name" : "OnUint",
        "type" : 134
      }, {
        "name" : "OnUint16",
        "type" : 136
      }, {
        "name" : "OnUint32",
        "type" : 138
      }, {
        "name" : "OnUint64",
        "type" : 140
      }, {
        "name" : "OnUint8",
        "type" : 143
      } ],
      "name" : "interface{OnArrayFinished(*github.com/elastic/go-structform/gotype.unfoldCtx) error; OnArrayStart(*github.com/elastic/go-structform/gotype.unfoldCtx, int, github.com/elastic/go-structform.BaseType) error; OnBool(*github.com/elastic/go-structform/gotype.unfoldCtx, bool) error; OnByte(*github.com/elastic/go-structform/gotype.unfoldCtx, byte) error; OnChildArrayDone(*github.com/elastic/go-structform/gotype.unfoldCtx) error; OnChildObjectDone(*github.com/elastic/go-structform/gotype.unfoldCtx) error; OnFloat32(*github.com/elastic/go-structform/gotype.unfoldCtx, float32) error; OnFloat64(*github.com/elastic/go-structform/gotype.unfoldCtx, float64) error; OnInt(*github.com/elastic/go-structform/gotype.unfoldCtx, int) error; OnInt16(*github.com/elastic/go-structform/gotype.unfoldCtx, int16) error; OnInt32(*github.com/elastic/go-structform/gotype.unfoldCtx, int32) error; OnInt64(*github.com/elastic/go-structform/gotype.unfoldCtx, int64) error; OnInt8(*github.com/elastic/go-structform/gotype.unfoldCtx, int8) error; OnKey(*github.com/elastic/go-structform/gotype.unfoldCtx, string) error; OnKeyRef(*github.com/elastic/go-structform/gotype.unfoldCtx, []byte) error; OnNil(*github.com/elastic/go-structform/gotype.unfoldCtx) error; OnObjectFinished(*github.com/elastic/go-structform/gotype.unfoldCtx) error; OnObjectStart(*github.com/elastic/go-structform/gotype.unfoldCtx, int, github.com/elastic/go-structform.BaseType) error; OnString(*github.com/elastic/go-structform/gotype.unfoldCtx, string) error; OnStringRef(*github.com/elastic/go-structform/gotype.unfoldCtx, []byte) error; OnUint(*github.com/elastic/go-structform/gotype.unfoldCtx, uint) error; OnUint16(*github.com/elastic/go-structform/gotype.unfoldCtx, uint16) error; OnUint32(*github.com/elastic/go-structform/gotype.unfoldCtx, uint32) error; OnUint64(*github.com/elastic/go-structform/gotype.unfoldCtx, uint64) error; OnUint8(*github.com/elastic/go-structform/gotype.unfoldCtx, uint8) error}",
      "type" : "Interface",
      "underlying" : 97
    }, {
      "name" : "func(*github.com/elastic/go-structform/gotype.unfoldCtx) error",
      "params" : 99,
      "recv" : 18,
      "results" : 100,
      "type" : "Signature",
      "underlying" : 98,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 9
      } ],
      "name" : "(*github.com/elastic/go-structform/gotype.unfoldCtx)",
      "type" : "Tuple",
      "underlying" : 99
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 101
      } ],
      "name" : "(error)",
      "type" : "Tuple",
      "underlying" : 100
    }, {
      "local-name" : "error",
      "name" : "error",
      "package" : -1,
      "type" : "Named",
      "underlying" : 102
    }, {
      "methods" : [ {
        "name" : "Error",
        "type" : 80
      } ],
      "name" : "interface{Error() string}",
      "type" : "Interface",
      "underlying" : 102
    }, {
      "name" : "func(*github.com/elastic/go-structform/gotype.unfoldCtx, int, github.com/elastic/go-structform.BaseType) error",
      "params" : 104,
      "recv" : 19,
      "results" : 100,
      "type" : "Signature",
      "underlying" : 103,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 9
      }, {
        "name" : "",
        "type" : 44
      }, {
        "name" : "",
        "type" : 105
      } ],
      "name" : "(*github.com/elastic/go-structform/gotype.unfoldCtx, int, github.com/elastic/go-structform.BaseType)",
      "type" : "Tuple",
      "underlying" : 104
    }, {
      "local-name" : "BaseType",
      "name" : "github.com/elastic/go-structform.BaseType",
      "package" : 3,
      "type" : "Named",
      "underlying" : 28
    }, {
      "name" : "func(*github.com/elastic/go-structform/gotype.unfoldCtx, bool) error",
      "params" : 107,
      "recv" : 20,
      "results" : 100,
      "type" : "Signature",
      "underlying" : 106,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 9
      }, {
        "name" : "",
        "type" : 32
      } ],
      "name" : "(*github.com/elastic/go-structform/gotype.unfoldCtx, bool)",
      "type" : "Tuple",
      "underlying" : 107
    }, {
      "name" : "func(*github.com/elastic/go-structform/gotype.unfoldCtx, byte) error",
      "params" : 109,
      "recv" : 21,
      "results" : 100,
      "type" : "Signature",
      "underlying" : 108,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 9
      }, {
        "name" : "",
        "type" : 34
      } ],
      "name" : "(*github.com/elastic/go-structform/gotype.unfoldCtx, byte)",
      "type" : "Tuple",
      "underlying" : 109
    }, {
      "name" : "func(*github.com/elastic/go-structform/gotype.unfoldCtx, float32) error",
      "params" : 111,
      "recv" : 22,
      "results" : 100,
      "type" : "Signature",
      "underlying" : 110,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 9
      }, {
        "name" : "",
        "type" : 112
      } ],
      "name" : "(*github.com/elastic/go-structform/gotype.unfoldCtx, float32)",
      "type" : "Tuple",
      "underlying" : 111
    }, {
      "name" : "float32",
      "type" : "Basic",
      "underlying" : 112
    }, {
      "name" : "func(*github.com/elastic/go-structform/gotype.unfoldCtx, float64) error",
      "params" : 114,
      "recv" : 23,
      "results" : 100,
      "type" : "Signature",
      "underlying" : 113,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 9
      }, {
        "name" : "",
        "type" : 115
      } ],
      "name" : "(*github.com/elastic/go-structform/gotype.unfoldCtx, float64)",
      "type" : "Tuple",
      "underlying" : 114
    }, {
      "name" : "float64",
      "type" : "Basic",
      "underlying" : 115
    }, {
      "name" : "func(*github.com/elastic/go-structform/gotype.unfoldCtx, int) error",
      "params" : 117,
      "recv" : 24,
      "results" : 100,
      "type" : "Signature",
      "underlying" : 116,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 9
      }, {
        "name" : "",
        "type" : 44
      } ],
      "name" : "(*github.com/elastic/go-structform/gotype.unfoldCtx, int)",
      "type" : "Tuple",
      "underlying" : 117
    }, {
      "name" : "func(*github.com/elastic/go-structform/gotype.unfoldCtx, int16) error",
      "params" : 119,
      "recv" : 25,
      "results" : 100,
      "type" : "Signature",
      "underlying" : 118,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 9
      }, {
        "name" : "",
        "type" : 120
      } ],
      "name" : "(*github.com/elastic/go-structform/gotype.unfoldCtx, int16)",
      "type" : "Tuple",
      "underlying" : 119
    }, {
      "name" : "int16",
      "type" : "Basic",
      "underlying" : 120
    }, {
      "name" : "func(*github.com/elastic/go-structform/gotype.unfoldCtx, int32) error",
      "params" : 122,
      "recv" : 26,
      "results" : 100,
      "type" : "Signature",
      "underlying" : 121,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 9
      }, {
        "name" : "",
        "type" : 36
      } ],
      "name" : "(*github.com/elastic/go-structform/gotype.unfoldCtx, int32)",
      "type" : "Tuple",
      "underlying" : 122
    }, {
      "name" : "func(*github.com/elastic/go-structform/gotype.unfoldCtx, int64) error",
      "params" : 124,
      "recv" : 27,
      "results" : 100,
      "type" : "Signature",
      "underlying" : 123,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 9
      }, {
        "name" : "",
        "type" : 125
      } ],
      "name" : "(*github.com/elastic/go-structform/gotype.unfoldCtx, int64)",
      "type" : "Tuple",
      "underlying" : 124
    }, {
      "name" : "int64",
      "type" : "Basic",
      "underlying" : 125
    }, {
      "name" : "func(*github.com/elastic/go-structform/gotype.unfoldCtx, int8) error",
      "params" : 127,
      "recv" : 28,
      "results" : 100,
      "type" : "Signature",
      "underlying" : 126,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 9
      }, {
        "name" : "",
        "type" : 128
      } ],
      "name" : "(*github.com/elastic/go-structform/gotype.unfoldCtx, int8)",
      "type" : "Tuple",
      "underlying" : 127
    }, {
      "name" : "int8",
      "type" : "Basic",
      "underlying" : 128
    }, {
      "name" : "func(*github.com/elastic/go-structform/gotype.unfoldCtx, string) error",
      "params" : 130,
      "recv" : 29,
      "results" : 100,
      "type" : "Signature",
      "underlying" : 129,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 9
      }, {
        "name" : "",
        "type" : 14
      } ],
      "name" : "(*github.com/elastic/go-structform/gotype.unfoldCtx, string)",
      "type" : "Tuple",
      "underlying" : 130
    }, {
      "name" : "func(*github.com/elastic/go-structform/gotype.unfoldCtx, []byte) error",
      "params" : 132,
      "recv" : 30,
      "results" : 100,
      "type" : "Signature",
      "underlying" : 131,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 9
      }, {
        "name" : "",
        "type" : 133
      } ],
      "name" : "(*github.com/elastic/go-structform/gotype.unfoldCtx, []byte)",
      "type" : "Tuple",
      "underlying" : 132
    }, {
      "elem" : 34,
      "name" : "[]byte",
      "type" : "Slice",
      "underlying" : 133
    }, {
      "name" : "func(*github.com/elastic/go-structform/gotype.unfoldCtx, uint) error",
      "params" : 135,
      "recv" : 31,
      "results" : 100,
      "type" : "Signature",
      "underlying" : 134,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 9
      }, {
        "name" : "",
        "type" : 73
      } ],
      "name" : "(*github.com/elastic/go-structform/gotype.unfoldCtx, uint)",
      "type" : "Tuple",
      "underlying" : 135
    }, {
      "name" : "func(*github.com/elastic/go-structform/gotype.unfoldCtx, uint16) error",
      "params" : 137,
      "recv" : 32,
      "results" : 100,
      "type" : "Signature",
      "underlying" : 136,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 9
      }, {
        "name" : "",
        "type" : 90
      } ],
      "name" : "(*github.com/elastic/go-structform/gotype.unfoldCtx, uint16)",
      "type" : "Tuple",
      "underlying" : 137
    }, {
      "name" : "func(*github.com/elastic/go-structform/gotype.unfoldCtx, uint32) error",
      "params" : 139,
      "recv" : 33,
      "results" : 100,
      "type" : "Signature",
      "underlying" : 138,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 9
      }, {
        "name" : "",
        "type" : 26
      } ],
      "name" : "(*github.com/elastic/go-structform/gotype.unfoldCtx, uint32)",
      "type" : "Tuple",
      "underlying" : 139
    }, {
      "name" : "func(*github.com/elastic/go-structform/gotype.unfoldCtx, uint64) error",
      "params" : 141,
      "recv" : 34,
      "results" : 100,
      "type" : "Signature",
      "underlying" : 140,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 9
      }, {
        "name" : "",
        "type" : 142
      } ],
      "name" : "(*github.com/elastic/go-structform/gotype.unfoldCtx, uint64)",
      "type" : "Tuple",
      "underlying" : 141
    }, {
      "name" : "uint64",
      "type" : "Basic",
      "underlying" : 142
    }, {
      "name" : "func(*github.com/elastic/go-structform/gotype.unfoldCtx, uint8) error",
      "params" : 144,
      "recv" : 35,
      "results" : 100,
      "type" : "Signature",
      "underlying" : 143,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 9
      }, {
        "name" : "",
        "type" : 28
      } ],
      "name" : "(*github.com/elastic/go-structform/gotype.unfoldCtx, uint8)",
      "type" : "Tuple",
      "underlying" : 144
    }, {
      "elem" : 96,
      "name" : "[]github.com/elastic/go-structform/gotype.unfolder",
      "type" : "Slice",
      "underlying" : 145
    }, {
      "elem" : 96,
      "name" : "[32]github.com/elastic/go-structform/gotype.unfolder",
      "type" : "Array",
      "underlying" : 146
    }, {
      "local-name" : "reflectValueStack",
      "name" : "github.com/elastic/go-structform/gotype.reflectValueStack",
      "package" : 0,
      "type" : "Named",
      "underlying" : 148
    }, {
      "fields" : [ {
        "name" : "current",
        "type" : 20
      }, {
        "name" : "stack",
        "type" : 149
      }, {
        "name" : "stack0",
        "type" : 150
      } ],
      "name" : "struct{current reflect.Value; stack []reflect.Value; stack0 [32]reflect.Value}",
      "type" : "Struct",
      "underlying" : 148
    }, {
      "elem" : 20,
      "name" : "[]reflect.Value",
      "type" : "Slice",
      "underlying" : 149
    }, {
      "elem" : 20,
      "name" : "[32]reflect.Value",
      "type" : "Array",
      "underlying" : 150
    }, {
      "local-name" : "structformTypeStack",
      "name" : "github.com/elastic/go-structform/gotype.structformTypeStack",
      "package" : 0,
      "type" : "Named",
      "underlying" : 152
    }, {
      "fields" : [ {
        "name" : "current",
        "type" : 105
      }, {
        "name" : "stack",
        "type" : 153
      }, {
        "name" : "stack0",
        "type" : 154
      } ],
      "name" : "struct{current github.com/elastic/go-structform.BaseType; stack []github.com/elastic/go-structform.BaseType; stack0 [32]github.com/elastic/go-structform.BaseType}",
      "type" : "Struct",
      "underlying" : 152
    }, {
      "elem" : 105,
      "name" : "[]github.com/elastic/go-structform.BaseType",
      "type" : "Slice",
      "underlying" : 153
    }, {
      "elem" : 105,
      "name" : "[32]github.com/elastic/go-structform.BaseType",
      "type" : "Array",
      "underlying" : 154
    }, {
      "local-name" : "ptrStack",
      "name" : "github.com/elastic/go-structform/gotype.ptrStack",
      "package" : 0,
      "type" : "Named",
      "underlying" : 156
    }, {
      "fields" : [ {
        "name" : "current",
        "type" : 4
      }, {
        "name" : "stack",
        "type" : 157
      }, {
        "name" : "stack0",
        "type" : 158
      } ],
      "name" : "struct{current unsafe.Pointer; stack []unsafe.Pointer; stack0 [32]unsafe.Pointer}",
      "type" : "Struct",
      "underlying" : 156
    }, {
      "elem" : 4,
      "name" : "[]unsafe.Pointer",
      "type" : "Slice",
      "underlying" : 157
    }, {
      "elem" : 4,
      "name" : "[32]unsafe.Pointer",
      "type" : "Array",
      "underlying" : 158
    }, {
      "local-name" : "keyStack",
      "name" : "github.com/elastic/go-structform/gotype.keyStack",
      "package" : 0,
      "type" : "Named",
      "underlying" : 160
    }, {
      "fields" : [ {
        "name" : "current",
        "type" : 14
      }, {
        "name" : "stack",
        "type" : 161
      }, {
        "name" : "stack0",
        "type" : 162
      } ],
      "name" : "struct{current string; stack []string; stack0 [32]string}",
      "type" : "Struct",
      "underlying" : 160
    }, {
      "elem" : 14,
      "name" : "[]string",
      "type" : "Slice",
      "underlying" : 161
    }, {
      "elem" : 14,
      "name" : "[32]string",
      "type" : "Array",
      "underlying" : 162
    }, {
      "local-name" : "idxStack",
      "name" : "github.com/elastic/go-structform/gotype.idxStack",
      "package" : 0,
      "type" : "Named",
      "underlying" : 164
    }, {
      "fields" : [ {
        "name" : "current",
        "type" : 44
      }, {
        "name" : "stack",
        "type" : 59
      }, {
        "name" : "stack0",
        "type" : 165
      } ],
      "name" : "struct{current int; stack []int; stack0 [32]int}",
      "type" : "Struct",
      "underlying" : 164
    }, {
      "elem" : 44,
      "name" : "[32]int",
      "type" : "Array",
      "underlying" : 165
    }, {
      "local-name" : "symbolCache",
      "name" : "github.com/elastic/go-structform/gotype.symbolCache",
      "package" : 0,
      "type" : "Named",
      "underlying" : 167
    }, {
      "fields" : [ {
        "name" : "m",
        "type" : 168
      }, {
        "name" : "lst",
        "type" : 172
      }, {
        "name" : "max",
        "type" : 44
      } ],
      "name" : "struct{m map[string]*github.com/elastic/go-structform/gotype.symbol; lst github.com/elastic/go-structform/gotype.symbolList; max int}",
      "type" : "Struct",
      "underlying" : 167
    }, {
      "elem" : 169,
      "key" : 14,
      "name" : "map[string]*github.com/elastic/go-structform/gotype.symbol",
      "type" : "Map",
      "underlying" : 168
    }, {
      "elem" : 170,
      "name" : "*github.com/elastic/go-structform/gotype.symbol",
      "type" : "Pointer",
      "underlying" : 169
    }, {
      "local-name" : "symbol",
      "name" : "github.com/elastic/go-structform/gotype.symbol",
      "package" : 0,
      "type" : "Named",
      "underlying" : 171
    }, {
      "fields" : [ {
        "name" : "value",
        "type" : 14
      }, {
        "name" : "prev",
        "type" : 169
      }, {
        "name" : "next",
        "type" : 169
      } ],
      "name" : "struct{value string; prev *github.com/elastic/go-structform/gotype.symbol; next *github.com/elastic/go-structform/gotype.symbol}",
      "type" : "Struct",
      "underlying" : 171
    }, {
      "local-name" : "symbolList",
      "name" : "github.com/elastic/go-structform/gotype.symbolList",
      "package" : 0,
      "type" : "Named",
      "underlying" : 171
    }, {
      "local-name" : "unfoldBuf",
      "name" : "github.com/elastic/go-structform/gotype.unfoldBuf",
      "package" : 0,
      "type" : "Named",
      "underlying" : 174
    }, {
      "fields" : [ {
        "name" : "arrays",
        "type" : 175
      }, {
        "name" : "mapPrimitive",
        "type" : 176
      }, {
        "name" : "mapAny",
        "type" : 178
      } ],
      "name" : "struct{arrays [][]byte; mapPrimitive []map[string]byte; mapAny []map[string]interface{}}",
      "type" : "Struct",
      "underlying" : 174
    }, {
      "elem" : 133,
      "name" : "[][]byte",
      "type" : "Slice",
      "underlying" : 175
    }, {
      "elem" : 177,
      "name" : "[]map[string]byte",
      "type" : "Slice",
      "underlying" : 176
    }, {
      "elem" : 34,
      "key" : 14,
      "name" : "map[string]byte",
      "type" : "Map",
      "underlying" : 177
    }, {
      "elem" : 179,
      "name" : "[]map[string]interface{}",
      "type" : "Slice",
      "underlying" : 178
    }, {
      "elem" : 2,
      "key" : 14,
      "name" : "map[string]interface{}",
      "type" : "Map",
      "underlying" : 179
    }, {
      "elem" : 2,
      "name" : "*interface{}",
      "type" : "Pointer",
      "underlying" : 180
    }, {
      "elem" : 182,
      "name" : "*github.com/elastic/go-structform/gotype.unfolderIfc",
      "type" : "Pointer",
      "underlying" : 181
    }, {
      "local-name" : "unfolderIfc",
      "name" : "github.com/elastic/go-structform/gotype.unfolderIfc",
      "package" : 0,
      "type" : "Named",
      "underlying" : 183
    }, {
      "fields" : [ {
        "name" : "unfolderErrUnknown",
        "type" : 184
      } ],
      "name" : "struct{github.com/elastic/go-structform/gotype.unfolderErrUnknown}",
      "type" : "Struct",
      "underlying" : 183
    }, {
      "local-name" : "unfolderErrUnknown",
      "name" : "github.com/elastic/go-structform/gotype.unfolderErrUnknown",
      "package" : 0,
      "type" : "Named",
      "underlying" : 185
    }, {
      "fields" : [ ],
      "name" : "struct{}",
      "type" : "Struct",
      "underlying" : 185
    }, {
      "name" : "func() *github.com/elastic/go-structform/gotype.unfolderIfc",
      "params" : 39,
      "recv" : -1,
      "results" : 187,
      "type" : "Signature",
      "underlying" : 186,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 181
      } ],
      "name" : "(*github.com/elastic/go-structform/gotype.unfolderIfc)",
      "type" : "Tuple",
      "underlying" : 187
    }, {
      "elem" : 189,
      "name" : "*[]interface{}",
      "type" : "Pointer",
      "underlying" : 188
    }, {
      "elem" : 2,
      "name" : "[]interface{}",
      "type" : "Slice",
      "underlying" : 189
    }, {
      "elem" : 191,
      "name" : "*github.com/elastic/go-structform/gotype.unfolderArrIfc",
      "type" : "Pointer",
      "underlying" : 190
    }, {
      "local-name" : "unfolderArrIfc",
      "name" : "github.com/elastic/go-structform/gotype.unfolderArrIfc",
      "package" : 0,
      "type" : "Named",
      "underlying" : 183
    }, {
      "name" : "func() *github.com/elastic/go-structform/gotype.unfolderArrIfc",
      "params" : 39,
      "recv" : -1,
      "results" : 193,
      "type" : "Signature",
      "underlying" : 192,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 190
      } ],
      "name" : "(*github.com/elastic/go-structform/gotype.unfolderArrIfc)",
      "type" : "Tuple",
      "underlying" : 193
    }, {
      "elem" : 179,
      "name" : "*map[string]interface{}",
      "type" : "Pointer",
      "underlying" : 194
    }, {
      "elem" : 196,
      "name" : "*github.com/elastic/go-structform/gotype.unfolderMapIfc",
      "type" : "Pointer",
      "underlying" : 195
    }, {
      "local-name" : "unfolderMapIfc",
      "name" : "github.com/elastic/go-structform/gotype.unfolderMapIfc",
      "package" : 0,
      "type" : "Named",
      "underlying" : 183
    }, {
      "name" : "func() *github.com/elastic/go-structform/gotype.unfolderMapIfc",
      "params" : 39,
      "recv" : -1,
      "results" : 198,
      "type" : "Signature",
      "underlying" : 197,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 195
      } ],
      "name" : "(*github.com/elastic/go-structform/gotype.unfolderMapIfc)",
      "type" : "Tuple",
      "underlying" : 198
    }, {
      "elem" : 32,
      "name" : "*bool",
      "type" : "Pointer",
      "underlying" : 199
    }, {
      "elem" : 201,
      "name" : "*github.com/elastic/go-structform/gotype.unfolderBool",
      "type" : "Pointer",
      "underlying" : 200
    }, {
      "local-name" : "unfolderBool",
      "name" : "github.com/elastic/go-structform/gotype.unfolderBool",
      "package" : 0,
      "type" : "Named",
      "underlying" : 183
    }, {
      "name" : "func() *github.com/elastic/go-structform/gotype.unfolderBool",
      "params" : 39,
      "recv" : -1,
      "results" : 203,
      "type" : "Signature",
      "underlying" : 202,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 200
      } ],
      "name" : "(*github.com/elastic/go-structform/gotype.unfolderBool)",
      "type" : "Tuple",
      "underlying" : 203
    }, {
      "elem" : 205,
      "name" : "*[]bool",
      "type" : "Pointer",
      "underlying" : 204
    }, {
      "elem" : 32,
      "name" : "[]bool",
      "type" : "Slice",
      "underlying" : 205
    }, {
      "elem" : 207,
      "name" : "*github.com/elastic/go-structform/gotype.unfolderArrBool",
      "type" : "Pointer",
      "underlying" : 206
    }, {
      "local-name" : "unfolderArrBool",
      "name" : "github.com/elastic/go-structform/gotype.unfolderArrBool",
      "package" : 0,
      "type" : "Named",
      "underlying" : 183
    }, {
      "name" : "func() *github.com/elastic/go-structform/gotype.unfolderArrBool",
      "params" : 39,
      "recv" : -1,
      "results" : 209,
      "type" : "Signature",
      "underlying" : 208,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 206
      } ],
      "name" : "(*github.com/elastic/go-structform/gotype.unfolderArrBool)",
      "type" : "Tuple",
      "underlying" : 209
    }, {
      "elem" : 211,
      "name" : "*map[string]bool",
      "type" : "Pointer",
      "underlying" : 210
    }, {
      "elem" : 32,
      "key" : 14,
      "name" : "map[string]bool",
      "type" : "Map",
      "underlying" : 211
    }, {
      "elem" : 213,
      "name" : "*github.com/elastic/go-structform/gotype.unfolderMapBool",
      "type" : "Pointer",
      "underlying" : 212
    }, {
      "local-name" : "unfolderMapBool",
      "name" : "github.com/elastic/go-structform/gotype.unfolderMapBool",
      "package" : 0,
      "type" : "Named",
      "underlying" : 183
    }, {
      "name" : "func() *github.com/elastic/go-structform/gotype.unfolderMapBool",
      "params" : 39,
      "recv" : -1,
      "results" : 215,
      "type" : "Signature",
      "underlying" : 214,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 212
      } ],
      "name" : "(*github.com/elastic/go-structform/gotype.unfolderMapBool)",
      "type" : "Tuple",
      "underlying" : 215
    }, {
      "elem" : 14,
      "name" : "*string",
      "type" : "Pointer",
      "underlying" : 216
    }, {
      "elem" : 218,
      "name" : "*github.com/elastic/go-structform/gotype.unfolderString",
      "type" : "Pointer",
      "underlying" : 217
    }, {
      "local-name" : "unfolderString",
      "name" : "github.com/elastic/go-structform/gotype.unfolderString",
      "package" : 0,
      "type" : "Named",
      "underlying" : 183
    }, {
      "name" : "func() *github.com/elastic/go-structform/gotype.unfolderString",
      "params" : 39,
      "recv" : -1,
      "results" : 220,
      "type" : "Signature",
      "underlying" : 219,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 217
      } ],
      "name" : "(*github.com/elastic/go-structform/gotype.unfolderString)",
      "type" : "Tuple",
      "underlying" : 220
    }, {
      "elem" : 161,
      "name" : "*[]string",
      "type" : "Pointer",
      "underlying" : 221
    }, {
      "elem" : 223,
      "name" : "*github.com/elastic/go-structform/gotype.unfolderArrString",
      "type" : "Pointer",
      "underlying" : 222
    }, {
      "local-name" : "unfolderArrString",
      "name" : "github.com/elastic/go-structform/gotype.unfolderArrString",
      "package" : 0,
      "type" : "Named",
      "underlying" : 183
    }, {
      "name" : "func() *github.com/elastic/go-structform/gotype.unfolderArrString",
      "params" : 39,
      "recv" : -1,
      "results" : 225,
      "type" : "Signature",
      "underlying" : 224,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 222
      } ],
      "name" : "(*github.com/elastic/go-structform/gotype.unfolderArrString)",
      "type" : "Tuple",
      "underlying" : 225
    }, {
      "elem" : 227,
      "name" : "*map[string]string",
      "type" : "Pointer",
      "underlying" : 226
    }, {
      "elem" : 14,
      "key" : 14,
      "name" : "map[string]string",
      "type" : "Map",
      "underlying" : 227
    }, {
      "elem" : 229,
      "name" : "*github.com/elastic/go-structform/gotype.unfolderMapString",
      "type" : "Pointer",
      "underlying" : 228
    }, {
      "local-name" : "unfolderMapString",
      "name" : "github.com/elastic/go-structform/gotype.unfolderMapString",
      "package" : 0,
      "type" : "Named",
      "underlying" : 183
    }, {
      "name" : "func() *github.com/elastic/go-structform/gotype.unfolderMapString",
      "params" : 39,
      "recv" : -1,
      "results" : 231,
      "type" : "Signature",
      "underlying" : 230,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 228
      } ],
      "name" : "(*github.com/elastic/go-structform/gotype.unfolderMapString)",
      "type" : "Tuple",
      "underlying" : 231
    }, {
      "elem" : 73,
      "name" : "*uint",
      "type" : "Pointer",
      "underlying" : 232
    }, {
      "elem" : 234,
      "name" : "*github.com/elastic/go-structform/gotype.unfolderUint",
      "type" : "Pointer",
      "underlying" : 233
    }, {
      "local-name" : "unfolderUint",
      "name" : "github.com/elastic/go-structform/gotype.unfolderUint",
      "package" : 0,
      "type" : "Named",
      "underlying" : 183
    }, {
      "name" : "func() *github.com/elastic/go-structform/gotype.unfolderUint",
      "params" : 39,
      "recv" : -1,
      "results" : 236,
      "type" : "Signature",
      "underlying" : 235,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 233
      } ],
      "name" : "(*github.com/elastic/go-structform/gotype.unfolderUint)",
      "type" : "Tuple",
      "underlying" : 236
    }, {
      "elem" : 238,
      "name" : "*[]uint",
      "type" : "Pointer",
      "underlying" : 237
    }, {
      "elem" : 73,
      "name" : "[]uint",
      "type" : "Slice",
      "underlying" : 238
    }, {
      "elem" : 240,
      "name" : "*github.com/elastic/go-structform/gotype.unfolderArrUint",
      "type" : "Pointer",
      "underlying" : 239
    }, {
      "local-name" : "unfolderArrUint",
      "name" : "github.com/elastic/go-structform/gotype.unfolderArrUint",
      "package" : 0,
      "type" : "Named",
      "underlying" : 183
    }, {
      "name" : "func() *github.com/elastic/go-structform/gotype.unfolderArrUint",
      "params" : 39,
      "recv" : -1,
      "results" : 242,
      "type" : "Signature",
      "underlying" : 241,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 239
      } ],
      "name" : "(*github.com/elastic/go-structform/gotype.unfolderArrUint)",
      "type" : "Tuple",
      "underlying" : 242
    }, {
      "elem" : 244,
      "name" : "*map[string]uint",
      "type" : "Pointer",
      "underlying" : 243
    }, {
      "elem" : 73,
      "key" : 14,
      "name" : "map[string]uint",
      "type" : "Map",
      "underlying" : 244
    }, {
      "elem" : 246,
      "name" : "*github.com/elastic/go-structform/gotype.unfolderMapUint",
      "type" : "Pointer",
      "underlying" : 245
    }, {
      "local-name" : "unfolderMapUint",
      "name" : "github.com/elastic/go-structform/gotype.unfolderMapUint",
      "package" : 0,
      "type" : "Named",
      "underlying" : 183
    }, {
      "name" : "func() *github.com/elastic/go-structform/gotype.unfolderMapUint",
      "params" : 39,
      "recv" : -1,
      "results" : 248,
      "type" : "Signature",
      "underlying" : 247,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 245
      } ],
      "name" : "(*github.com/elastic/go-structform/gotype.unfolderMapUint)",
      "type" : "Tuple",
      "underlying" : 248
    }, {
      "elem" : 28,
      "name" : "*uint8",
      "type" : "Pointer",
      "underlying" : 249
    }, {
      "elem" : 251,
      "name" : "*github.com/elastic/go-structform/gotype.unfolderUint8",
      "type" : "Pointer",
      "underlying" : 250
    }, {
      "local-name" : "unfolderUint8",
      "name" : "github.com/elastic/go-structform/gotype.unfolderUint8",
      "package" : 0,
      "type" : "Named",
      "underlying" : 183
    }, {
      "name" : "func() *github.com/elastic/go-structform/gotype.unfolderUint8",
      "params" : 39,
      "recv" : -1,
      "results" : 253,
      "type" : "Signature",
      "underlying" : 252,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 250
      } ],
      "name" : "(*github.com/elastic/go-structform/gotype.unfolderUint8)",
      "type" : "Tuple",
      "underlying" : 253
    }, {
      "elem" : 255,
      "name" : "*[]uint8",
      "type" : "Pointer",
      "underlying" : 254
    }, {
      "elem" : 28,
      "name" : "[]uint8",
      "type" : "Slice",
      "underlying" : 255
    }, {
      "elem" : 257,
      "name" : "*github.com/elastic/go-structform/gotype.unfolderArrUint8",
      "type" : "Pointer",
      "underlying" : 256
    }, {
      "local-name" : "unfolderArrUint8",
      "name" : "github.com/elastic/go-structform/gotype.unfolderArrUint8",
      "package" : 0,
      "type" : "Named",
      "underlying" : 183
    }, {
      "name" : "func() *github.com/elastic/go-structform/gotype.unfolderArrUint8",
      "params" : 39,
      "recv" : -1,
      "results" : 259,
      "type" : "Signature",
      "underlying" : 258,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 256
      } ],
      "name" : "(*github.com/elastic/go-structform/gotype.unfolderArrUint8)",
      "type" : "Tuple",
      "underlying" : 259
    }, {
      "elem" : 261,
      "name" : "*map[string]uint8",
      "type" : "Pointer",
      "underlying" : 260
    }, {
      "elem" : 28,
      "key" : 14,
      "name" : "map[string]uint8",
      "type" : "Map",
      "underlying" : 261
    }, {
      "elem" : 263,
      "name" : "*github.com/elastic/go-structform/gotype.unfolderMapUint8",
      "type" : "Pointer",
      "underlying" : 262
    }, {
      "local-name" : "unfolderMapUint8",
      "name" : "github.com/elastic/go-structform/gotype.unfolderMapUint8",
      "package" : 0,
      "type" : "Named",
      "underlying" : 183
    }, {
      "name" : "func() *github.com/elastic/go-structform/gotype.unfolderMapUint8",
      "params" : 39,
      "recv" : -1,
      "results" : 265,
      "type" : "Signature",
      "underlying" : 264,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 262
      } ],
      "name" : "(*github.com/elastic/go-structform/gotype.unfolderMapUint8)",
      "type" : "Tuple",
      "underlying" : 265
    }, {
      "elem" : 90,
      "name" : "*uint16",
      "type" : "Pointer",
      "underlying" : 266
    }, {
      "elem" : 268,
      "name" : "*github.com/elastic/go-structform/gotype.unfolderUint16",
      "type" : "Pointer",
      "underlying" : 267
    }, {
      "local-name" : "unfolderUint16",
      "name" : "github.com/elastic/go-structform/gotype.unfolderUint16",
      "package" : 0,
      "type" : "Named",
      "underlying" : 183
    }, {
      "name" : "func() *github.com/elastic/go-structform/gotype.unfolderUint16",
      "params" : 39,
      "recv" : -1,
      "results" : 270,
      "type" : "Signature",
      "underlying" : 269,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 267
      } ],
      "name" : "(*github.com/elastic/go-structform/gotype.unfolderUint16)",
      "type" : "Tuple",
      "underlying" : 270
    }, {
      "elem" : 272,
      "name" : "*[]uint16",
      "type" : "Pointer",
      "underlying" : 271
    }, {
      "elem" : 90,
      "name" : "[]uint16",
      "type" : "Slice",
      "underlying" : 272
    }, {
      "elem" : 274,
      "name" : "*github.com/elastic/go-structform/gotype.unfolderArrUint16",
      "type" : "Pointer",
      "underlying" : 273
    }, {
      "local-name" : "unfolderArrUint16",
      "name" : "github.com/elastic/go-structform/gotype.unfolderArrUint16",
      "package" : 0,
      "type" : "Named",
      "underlying" : 183
    }, {
      "name" : "func() *github.com/elastic/go-structform/gotype.unfolderArrUint16",
      "params" : 39,
      "recv" : -1,
      "results" : 276,
      "type" : "Signature",
      "underlying" : 275,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 273
      } ],
      "name" : "(*github.com/elastic/go-structform/gotype.unfolderArrUint16)",
      "type" : "Tuple",
      "underlying" : 276
    }, {
      "elem" : 278,
      "name" : "*map[string]uint16",
      "type" : "Pointer",
      "underlying" : 277
    }, {
      "elem" : 90,
      "key" : 14,
      "name" : "map[string]uint16",
      "type" : "Map",
      "underlying" : 278
    }, {
      "elem" : 280,
      "name" : "*github.com/elastic/go-structform/gotype.unfolderMapUint16",
      "type" : "Pointer",
      "underlying" : 279
    }, {
      "local-name" : "unfolderMapUint16",
      "name" : "github.com/elastic/go-structform/gotype.unfolderMapUint16",
      "package" : 0,
      "type" : "Named",
      "underlying" : 183
    }, {
      "name" : "func() *github.com/elastic/go-structform/gotype.unfolderMapUint16",
      "params" : 39,
      "recv" : -1,
      "results" : 282,
      "type" : "Signature",
      "underlying" : 281,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 279
      } ],
      "name" : "(*github.com/elastic/go-structform/gotype.unfolderMapUint16)",
      "type" : "Tuple",
      "underlying" : 282
    }, {
      "elem" : 26,
      "name" : "*uint32",
      "type" : "Pointer",
      "underlying" : 283
    }, {
      "elem" : 285,
      "name" : "*github.com/elastic/go-structform/gotype.unfolderUint32",
      "type" : "Pointer",
      "underlying" : 284
    }, {
      "local-name" : "unfolderUint32",
      "name" : "github.com/elastic/go-structform/gotype.unfolderUint32",
      "package" : 0,
      "type" : "Named",
      "underlying" : 183
    }, {
      "name" : "func() *github.com/elastic/go-structform/gotype.unfolderUint32",
      "params" : 39,
      "recv" : -1,
      "results" : 287,
      "type" : "Signature",
      "underlying" : 286,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 284
      } ],
      "name" : "(*github.com/elastic/go-structform/gotype.unfolderUint32)",
      "type" : "Tuple",
      "underlying" : 287
    }, {
      "elem" : 289,
      "name" : "*[]uint32",
      "type" : "Pointer",
      "underlying" : 288
    }, {
      "elem" : 26,
      "name" : "[]uint32",
      "type" : "Slice",
      "underlying" : 289
    }, {
      "elem" : 291,
      "name" : "*github.com/elastic/go-structform/gotype.unfolderArrUint32",
      "type" : "Pointer",
      "underlying" : 290
    }, {
      "local-name" : "unfolderArrUint32",
      "name" : "github.com/elastic/go-structform/gotype.unfolderArrUint32",
      "package" : 0,
      "type" : "Named",
      "underlying" : 183
    }, {
      "name" : "func() *github.com/elastic/go-structform/gotype.unfolderArrUint32",
      "params" : 39,
      "recv" : -1,
      "results" : 293,
      "type" : "Signature",
      "underlying" : 292,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 290
      } ],
      "name" : "(*github.com/elastic/go-structform/gotype.unfolderArrUint32)",
      "type" : "Tuple",
      "underlying" : 293
    }, {
      "elem" : 295,
      "name" : "*map[string]uint32",
      "type" : "Pointer",
      "underlying" : 294
    }, {
      "elem" : 26,
      "key" : 14,
      "name" : "map[string]uint32",
      "type" : "Map",
      "underlying" : 295
    }, {
      "elem" : 297,
      "name" : "*github.com/elastic/go-structform/gotype.unfolderMapUint32",
      "type" : "Pointer",
      "underlying" : 296
    }, {
      "local-name" : "unfolderMapUint32",
      "name" : "github.com/elastic/go-structform/gotype.unfolderMapUint32",
      "package" : 0,
      "type" : "Named",
      "underlying" : 183
    }, {
      "name" : "func() *github.com/elastic/go-structform/gotype.unfolderMapUint32",
      "params" : 39,
      "recv" : -1,
      "results" : 299,
      "type" : "Signature",
      "underlying" : 298,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 296
      } ],
      "name" : "(*github.com/elastic/go-structform/gotype.unfolderMapUint32)",
      "type" : "Tuple",
      "underlying" : 299
    }, {
      "elem" : 142,
      "name" : "*uint64",
      "type" : "Pointer",
      "underlying" : 300
    }, {
      "elem" : 302,
      "name" : "*github.com/elastic/go-structform/gotype.unfolderUint64",
      "type" : "Pointer",
      "underlying" : 301
    }, {
      "local-name" : "unfolderUint64",
      "name" : "github.com/elastic/go-structform/gotype.unfolderUint64",
      "package" : 0,
      "type" : "Named",
      "underlying" : 183
    }, {
      "name" : "func() *github.com/elastic/go-structform/gotype.unfolderUint64",
      "params" : 39,
      "recv" : -1,
      "results" : 304,
      "type" : "Signature",
      "underlying" : 303,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 301
      } ],
      "name" : "(*github.com/elastic/go-structform/gotype.unfolderUint64)",
      "type" : "Tuple",
      "underlying" : 304
    }, {
      "elem" : 306,
      "name" : "*[]uint64",
      "type" : "Pointer",
      "underlying" : 305
    }, {
      "elem" : 142,
      "name" : "[]uint64",
      "type" : "Slice",
      "underlying" : 306
    }, {
      "elem" : 308,
      "name" : "*github.com/elastic/go-structform/gotype.unfolderArrUint64",
      "type" : "Pointer",
      "underlying" : 307
    }, {
      "local-name" : "unfolderArrUint64",
      "name" : "github.com/elastic/go-structform/gotype.unfolderArrUint64",
      "package" : 0,
      "type" : "Named",
      "underlying" : 183
    }, {
      "name" : "func() *github.com/elastic/go-structform/gotype.unfolderArrUint64",
      "params" : 39,
      "recv" : -1,
      "results" : 310,
      "type" : "Signature",
      "underlying" : 309,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 307
      } ],
      "name" : "(*github.com/elastic/go-structform/gotype.unfolderArrUint64)",
      "type" : "Tuple",
      "underlying" : 310
    }, {
      "elem" : 312,
      "name" : "*map[string]uint64",
      "type" : "Pointer",
      "underlying" : 311
    }, {
      "elem" : 142,
      "key" : 14,
      "name" : "map[string]uint64",
      "type" : "Map",
      "underlying" : 312
    }, {
      "elem" : 314,
      "name" : "*github.com/elastic/go-structform/gotype.unfolderMapUint64",
      "type" : "Pointer",
      "underlying" : 313
    }, {
      "local-name" : "unfolderMapUint64",
      "name" : "github.com/elastic/go-structform/gotype.unfolderMapUint64",
      "package" : 0,
      "type" : "Named",
      "underlying" : 183
    }, {
      "name" : "func() *github.com/elastic/go-structform/gotype.unfolderMapUint64",
      "params" : 39,
      "recv" : -1,
      "results" : 316,
      "type" : "Signature",
      "underlying" : 315,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 313
      } ],
      "name" : "(*github.com/elastic/go-structform/gotype.unfolderMapUint64)",
      "type" : "Tuple",
      "underlying" : 316
    }, {
      "elem" : 44,
      "name" : "*int",
      "type" : "Pointer",
      "underlying" : 317
    }, {
      "elem" : 319,
      "name" : "*github.com/elastic/go-structform/gotype.unfolderInt",
      "type" : "Pointer",
      "underlying" : 318
    }, {
      "local-name" : "unfolderInt",
      "name" : "github.com/elastic/go-structform/gotype.unfolderInt",
      "package" : 0,
      "type" : "Named",
      "underlying" : 183
    }, {
      "name" : "func() *github.com/elastic/go-structform/gotype.unfolderInt",
      "params" : 39,
      "recv" : -1,
      "results" : 321,
      "type" : "Signature",
      "underlying" : 320,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 318
      } ],
      "name" : "(*github.com/elastic/go-structform/gotype.unfolderInt)",
      "type" : "Tuple",
      "underlying" : 321
    }, {
      "elem" : 59,
      "name" : "*[]int",
      "type" : "Pointer",
      "underlying" : 322
    }, {
      "elem" : 324,
      "name" : "*github.com/elastic/go-structform/gotype.unfolderArrInt",
      "type" : "Pointer",
      "underlying" : 323
    }, {
      "local-name" : "unfolderArrInt",
      "name" : "github.com/elastic/go-structform/gotype.unfolderArrInt",
      "package" : 0,
      "type" : "Named",
      "underlying" : 183
    }, {
      "name" : "func() *github.com/elastic/go-structform/gotype.unfolderArrInt",
      "params" : 39,
      "recv" : -1,
      "results" : 326,
      "type" : "Signature",
      "underlying" : 325,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 323
      } ],
      "name" : "(*github.com/elastic/go-structform/gotype.unfolderArrInt)",
      "type" : "Tuple",
      "underlying" : 326
    }, {
      "elem" : 328,
      "name" : "*map[string]int",
      "type" : "Pointer",
      "underlying" : 327
    }, {
      "elem" : 44,
      "key" : 14,
      "name" : "map[string]int",
      "type" : "Map",
      "underlying" : 328
    }, {
      "elem" : 330,
      "name" : "*github.com/elastic/go-structform/gotype.unfolderMapInt",
      "type" : "Pointer",
      "underlying" : 329
    }, {
      "local-name" : "unfolderMapInt",
      "name" : "github.com/elastic/go-structform/gotype.unfolderMapInt",
      "package" : 0,
      "type" : "Named",
      "underlying" : 183
    }, {
      "name" : "func() *github.com/elastic/go-structform/gotype.unfolderMapInt",
      "params" : 39,
      "recv" : -1,
      "results" : 332,
      "type" : "Signature",
      "underlying" : 331,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 329
      } ],
      "name" : "(*github.com/elastic/go-structform/gotype.unfolderMapInt)",
      "type" : "Tuple",
      "underlying" : 332
    }, {
      "elem" : 128,
      "name" : "*int8",
      "type" : "Pointer",
      "underlying" : 333
    }, {
      "elem" : 335,
      "name" : "*github.com/elastic/go-structform/gotype.unfolderInt8",
      "type" : "Pointer",
      "underlying" : 334
    }, {
      "local-name" : "unfolderInt8",
      "name" : "github.com/elastic/go-structform/gotype.unfolderInt8",
      "package" : 0,
      "type" : "Named",
      "underlying" : 183
    }, {
      "name" : "func() *github.com/elastic/go-structform/gotype.unfolderInt8",
      "params" : 39,
      "recv" : -1,
      "results" : 337,
      "type" : "Signature",
      "underlying" : 336,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 334
      } ],
      "name" : "(*github.com/elastic/go-structform/gotype.unfolderInt8)",
      "type" : "Tuple",
      "underlying" : 337
    }, {
      "elem" : 339,
      "name" : "*[]int8",
      "type" : "Pointer",
      "underlying" : 338
    }, {
      "elem" : 128,
      "name" : "[]int8",
      "type" : "Slice",
      "underlying" : 339
    }, {
      "elem" : 341,
      "name" : "*github.com/elastic/go-structform/gotype.unfolderArrInt8",
      "type" : "Pointer",
      "underlying" : 340
    }, {
      "local-name" : "unfolderArrInt8",
      "name" : "github.com/elastic/go-structform/gotype.unfolderArrInt8",
      "package" : 0,
      "type" : "Named",
      "underlying" : 183
    }, {
      "name" : "func() *github.com/elastic/go-structform/gotype.unfolderArrInt8",
      "params" : 39,
      "recv" : -1,
      "results" : 343,
      "type" : "Signature",
      "underlying" : 342,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 340
      } ],
      "name" : "(*github.com/elastic/go-structform/gotype.unfolderArrInt8)",
      "type" : "Tuple",
      "underlying" : 343
    }, {
      "elem" : 345,
      "name" : "*map[string]int8",
      "type" : "Pointer",
      "underlying" : 344
    }, {
      "elem" : 128,
      "key" : 14,
      "name" : "map[string]int8",
      "type" : "Map",
      "underlying" : 345
    }, {
      "elem" : 347,
      "name" : "*github.com/elastic/go-structform/gotype.unfolderMapInt8",
      "type" : "Pointer",
      "underlying" : 346
    }, {
      "local-name" : "unfolderMapInt8",
      "name" : "github.com/elastic/go-structform/gotype.unfolderMapInt8",
      "package" : 0,
      "type" : "Named",
      "underlying" : 183
    }, {
      "name" : "func() *github.com/elastic/go-structform/gotype.unfolderMapInt8",
      "params" : 39,
      "recv" : -1,
      "results" : 349,
      "type" : "Signature",
      "underlying" : 348,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 346
      } ],
      "name" : "(*github.com/elastic/go-structform/gotype.unfolderMapInt8)",
      "type" : "Tuple",
      "underlying" : 349
    }, {
      "elem" : 120,
      "name" : "*int16",
      "type" : "Pointer",
      "underlying" : 350
    }, {
      "elem" : 352,
      "name" : "*github.com/elastic/go-structform/gotype.unfolderInt16",
      "type" : "Pointer",
      "underlying" : 351
    }, {
      "local-name" : "unfolderInt16",
      "name" : "github.com/elastic/go-structform/gotype.unfolderInt16",
      "package" : 0,
      "type" : "Named",
      "underlying" : 183
    }, {
      "name" : "func() *github.com/elastic/go-structform/gotype.unfolderInt16",
      "params" : 39,
      "recv" : -1,
      "results" : 354,
      "type" : "Signature",
      "underlying" : 353,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 351
      } ],
      "name" : "(*github.com/elastic/go-structform/gotype.unfolderInt16)",
      "type" : "Tuple",
      "underlying" : 354
    }, {
      "elem" : 356,
      "name" : "*[]int16",
      "type" : "Pointer",
      "underlying" : 355
    }, {
      "elem" : 120,
      "name" : "[]int16",
      "type" : "Slice",
      "underlying" : 356
    }, {
      "elem" : 358,
      "name" : "*github.com/elastic/go-structform/gotype.unfolderArrInt16",
      "type" : "Pointer",
      "underlying" : 357
    }, {
      "local-name" : "unfolderArrInt16",
      "name" : "github.com/elastic/go-structform/gotype.unfolderArrInt16",
      "package" : 0,
      "type" : "Named",
      "underlying" : 183
    }, {
      "name" : "func() *github.com/elastic/go-structform/gotype.unfolderArrInt16",
      "params" : 39,
      "recv" : -1,
      "results" : 360,
      "type" : "Signature",
      "underlying" : 359,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 357
      } ],
      "name" : "(*github.com/elastic/go-structform/gotype.unfolderArrInt16)",
      "type" : "Tuple",
      "underlying" : 360
    }, {
      "elem" : 362,
      "name" : "*map[string]int16",
      "type" : "Pointer",
      "underlying" : 361
    }, {
      "elem" : 120,
      "key" : 14,
      "name" : "map[string]int16",
      "type" : "Map",
      "underlying" : 362
    }, {
      "elem" : 364,
      "name" : "*github.com/elastic/go-structform/gotype.unfolderMapInt16",
      "type" : "Pointer",
      "underlying" : 363
    }, {
      "local-name" : "unfolderMapInt16",
      "name" : "github.com/elastic/go-structform/gotype.unfolderMapInt16",
      "package" : 0,
      "type" : "Named",
      "underlying" : 183
    }, {
      "name" : "func() *github.com/elastic/go-structform/gotype.unfolderMapInt16",
      "params" : 39,
      "recv" : -1,
      "results" : 366,
      "type" : "Signature",
      "underlying" : 365,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 363
      } ],
      "name" : "(*github.com/elastic/go-structform/gotype.unfolderMapInt16)",
      "type" : "Tuple",
      "underlying" : 366
    }, {
      "elem" : 36,
      "name" : "*int32",
      "type" : "Pointer",
      "underlying" : 367
    }, {
      "elem" : 369,
      "name" : "*github.com/elastic/go-structform/gotype.unfolderInt32",
      "type" : "Pointer",
      "underlying" : 368
    }, {
      "local-name" : "unfolderInt32",
      "name" : "github.com/elastic/go-structform/gotype.unfolderInt32",
      "package" : 0,
      "type" : "Named",
      "underlying" : 183
    }, {
      "name" : "func() *github.com/elastic/go-structform/gotype.unfolderInt32",
      "params" : 39,
      "recv" : -1,
      "results" : 371,
      "type" : "Signature",
      "underlying" : 370,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 368
      } ],
      "name" : "(*github.com/elastic/go-structform/gotype.unfolderInt32)",
      "type" : "Tuple",
      "underlying" : 371
    }, {
      "elem" : 373,
      "name" : "*[]int32",
      "type" : "Pointer",
      "underlying" : 372
    }, {
      "elem" : 36,
      "name" : "[]int32",
      "type" : "Slice",
      "underlying" : 373
    }, {
      "elem" : 375,
      "name" : "*github.com/elastic/go-structform/gotype.unfolderArrInt32",
      "type" : "Pointer",
      "underlying" : 374
    }, {
      "local-name" : "unfolderArrInt32",
      "name" : "github.com/elastic/go-structform/gotype.unfolderArrInt32",
      "package" : 0,
      "type" : "Named",
      "underlying" : 183
    }, {
      "name" : "func() *github.com/elastic/go-structform/gotype.unfolderArrInt32",
      "params" : 39,
      "recv" : -1,
      "results" : 377,
      "type" : "Signature",
      "underlying" : 376,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 374
      } ],
      "name" : "(*github.com/elastic/go-structform/gotype.unfolderArrInt32)",
      "type" : "Tuple",
      "underlying" : 377
    }, {
      "elem" : 379,
      "name" : "*map[string]int32",
      "type" : "Pointer",
      "underlying" : 378
    }, {
      "elem" : 36,
      "key" : 14,
      "name" : "map[string]int32",
      "type" : "Map",
      "underlying" : 379
    }, {
      "elem" : 381,
      "name" : "*github.com/elastic/go-structform/gotype.unfolderMapInt32",
      "type" : "Pointer",
      "underlying" : 380
    }, {
      "local-name" : "unfolderMapInt32",
      "name" : "github.com/elastic/go-structform/gotype.unfolderMapInt32",
      "package" : 0,
      "type" : "Named",
      "underlying" : 183
    }, {
      "name" : "func() *github.com/elastic/go-structform/gotype.unfolderMapInt32",
      "params" : 39,
      "recv" : -1,
      "results" : 383,
      "type" : "Signature",
      "underlying" : 382,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 380
      } ],
      "name" : "(*github.com/elastic/go-structform/gotype.unfolderMapInt32)",
      "type" : "Tuple",
      "underlying" : 383
    }, {
      "elem" : 125,
      "name" : "*int64",
      "type" : "Pointer",
      "underlying" : 384
    }, {
      "elem" : 386,
      "name" : "*github.com/elastic/go-structform/gotype.unfolderInt64",
      "type" : "Pointer",
      "underlying" : 385
    }, {
      "local-name" : "unfolderInt64",
      "name" : "github.com/elastic/go-structform/gotype.unfolderInt64",
      "package" : 0,
      "type" : "Named",
      "underlying" : 183
    }, {
      "name" : "func() *github.com/elastic/go-structform/gotype.unfolderInt64",
      "params" : 39,
      "recv" : -1,
      "results" : 388,
      "type" : "Signature",
      "underlying" : 387,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 385
      } ],
      "name" : "(*github.com/elastic/go-structform/gotype.unfolderInt64)",
      "type" : "Tuple",
      "underlying" : 388
    }, {
      "elem" : 390,
      "name" : "*[]int64",
      "type" : "Pointer",
      "underlying" : 389
    }, {
      "elem" : 125,
      "name" : "[]int64",
      "type" : "Slice",
      "underlying" : 390
    }, {
      "elem" : 392,
      "name" : "*github.com/elastic/go-structform/gotype.unfolderArrInt64",
      "type" : "Pointer",
      "underlying" : 391
    }, {
      "local-name" : "unfolderArrInt64",
      "name" : "github.com/elastic/go-structform/gotype.unfolderArrInt64",
      "package" : 0,
      "type" : "Named",
      "underlying" : 183
    }, {
      "name" : "func() *github.com/elastic/go-structform/gotype.unfolderArrInt64",
      "params" : 39,
      "recv" : -1,
      "results" : 394,
      "type" : "Signature",
      "underlying" : 393,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 391
      } ],
      "name" : "(*github.com/elastic/go-structform/gotype.unfolderArrInt64)",
      "type" : "Tuple",
      "underlying" : 394
    }, {
      "elem" : 396,
      "name" : "*map[string]int64",
      "type" : "Pointer",
      "underlying" : 395
    }, {
      "elem" : 125,
      "key" : 14,
      "name" : "map[string]int64",
      "type" : "Map",
      "underlying" : 396
    }, {
      "elem" : 398,
      "name" : "*github.com/elastic/go-structform/gotype.unfolderMapInt64",
      "type" : "Pointer",
      "underlying" : 397
    }, {
      "local-name" : "unfolderMapInt64",
      "name" : "github.com/elastic/go-structform/gotype.unfolderMapInt64",
      "package" : 0,
      "type" : "Named",
      "underlying" : 183
    }, {
      "name" : "func() *github.com/elastic/go-structform/gotype.unfolderMapInt64",
      "params" : 39,
      "recv" : -1,
      "results" : 400,
      "type" : "Signature",
      "underlying" : 399,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 397
      } ],
      "name" : "(*github.com/elastic/go-structform/gotype.unfolderMapInt64)",
      "type" : "Tuple",
      "underlying" : 400
    }, {
      "elem" : 112,
      "name" : "*float32",
      "type" : "Pointer",
      "underlying" : 401
    }, {
      "elem" : 403,
      "name" : "*github.com/elastic/go-structform/gotype.unfolderFloat32",
      "type" : "Pointer",
      "underlying" : 402
    }, {
      "local-name" : "unfolderFloat32",
      "name" : "github.com/elastic/go-structform/gotype.unfolderFloat32",
      "package" : 0,
      "type" : "Named",
      "underlying" : 183
    }, {
      "name" : "func() *github.com/elastic/go-structform/gotype.unfolderFloat32",
      "params" : 39,
      "recv" : -1,
      "results" : 405,
      "type" : "Signature",
      "underlying" : 404,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 402
      } ],
      "name" : "(*github.com/elastic/go-structform/gotype.unfolderFloat32)",
      "type" : "Tuple",
      "underlying" : 405
    }, {
      "elem" : 407,
      "name" : "*[]float32",
      "type" : "Pointer",
      "underlying" : 406
    }, {
      "elem" : 112,
      "name" : "[]float32",
      "type" : "Slice",
      "underlying" : 407
    }, {
      "elem" : 409,
      "name" : "*github.com/elastic/go-structform/gotype.unfolderArrFloat32",
      "type" : "Pointer",
      "underlying" : 408
    }, {
      "local-name" : "unfolderArrFloat32",
      "name" : "github.com/elastic/go-structform/gotype.unfolderArrFloat32",
      "package" : 0,
      "type" : "Named",
      "underlying" : 183
    }, {
      "name" : "func() *github.com/elastic/go-structform/gotype.unfolderArrFloat32",
      "params" : 39,
      "recv" : -1,
      "results" : 411,
      "type" : "Signature",
      "underlying" : 410,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 408
      } ],
      "name" : "(*github.com/elastic/go-structform/gotype.unfolderArrFloat32)",
      "type" : "Tuple",
      "underlying" : 411
    }, {
      "elem" : 413,
      "name" : "*map[string]float32",
      "type" : "Pointer",
      "underlying" : 412
    }, {
      "elem" : 112,
      "key" : 14,
      "name" : "map[string]float32",
      "type" : "Map",
      "underlying" : 413
    }, {
      "elem" : 415,
      "name" : "*github.com/elastic/go-structform/gotype.unfolderMapFloat32",
      "type" : "Pointer",
      "underlying" : 414
    }, {
      "local-name" : "unfolderMapFloat32",
      "name" : "github.com/elastic/go-structform/gotype.unfolderMapFloat32",
      "package" : 0,
      "type" : "Named",
      "underlying" : 183
    }, {
      "name" : "func() *github.com/elastic/go-structform/gotype.unfolderMapFloat32",
      "params" : 39,
      "recv" : -1,
      "results" : 417,
      "type" : "Signature",
      "underlying" : 416,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 414
      } ],
      "name" : "(*github.com/elastic/go-structform/gotype.unfolderMapFloat32)",
      "type" : "Tuple",
      "underlying" : 417
    }, {
      "elem" : 115,
      "name" : "*float64",
      "type" : "Pointer",
      "underlying" : 418
    }, {
      "elem" : 420,
      "name" : "*github.com/elastic/go-structform/gotype.unfolderFloat64",
      "type" : "Pointer",
      "underlying" : 419
    }, {
      "local-name" : "unfolderFloat64",
      "name" : "github.com/elastic/go-structform/gotype.unfolderFloat64",
      "package" : 0,
      "type" : "Named",
      "underlying" : 183
    }, {
      "name" : "func() *github.com/elastic/go-structform/gotype.unfolderFloat64",
      "params" : 39,
      "recv" : -1,
      "results" : 422,
      "type" : "Signature",
      "underlying" : 421,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 419
      } ],
      "name" : "(*github.com/elastic/go-structform/gotype.unfolderFloat64)",
      "type" : "Tuple",
      "underlying" : 422
    }, {
      "elem" : 424,
      "name" : "*[]float64",
      "type" : "Pointer",
      "underlying" : 423
    }, {
      "elem" : 115,
      "name" : "[]float64",
      "type" : "Slice",
      "underlying" : 424
    }, {
      "elem" : 426,
      "name" : "*github.com/elastic/go-structform/gotype.unfolderArrFloat64",
      "type" : "Pointer",
      "underlying" : 425
    }, {
      "local-name" : "unfolderArrFloat64",
      "name" : "github.com/elastic/go-structform/gotype.unfolderArrFloat64",
      "package" : 0,
      "type" : "Named",
      "underlying" : 183
    }, {
      "name" : "func() *github.com/elastic/go-structform/gotype.unfolderArrFloat64",
      "params" : 39,
      "recv" : -1,
      "results" : 428,
      "type" : "Signature",
      "underlying" : 427,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 425
      } ],
      "name" : "(*github.com/elastic/go-structform/gotype.unfolderArrFloat64)",
      "type" : "Tuple",
      "underlying" : 428
    }, {
      "elem" : 430,
      "name" : "*map[string]float64",
      "type" : "Pointer",
      "underlying" : 429
    }, {
      "elem" : 115,
      "key" : 14,
      "name" : "map[string]float64",
      "type" : "Map",
      "underlying" : 430
    }, {
      "elem" : 432,
      "name" : "*github.com/elastic/go-structform/gotype.unfolderMapFloat64",
      "type" : "Pointer",
      "underlying" : 431
    }, {
      "local-name" : "unfolderMapFloat64",
      "name" : "github.com/elastic/go-structform/gotype.unfolderMapFloat64",
      "package" : 0,
      "type" : "Named",
      "underlying" : 183
    }, {
      "name" : "func() *github.com/elastic/go-structform/gotype.unfolderMapFloat64",
      "params" : 39,
      "recv" : -1,
      "results" : 434,
      "type" : "Signature",
      "underlying" : 433,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 431
      } ],
      "name" : "(*github.com/elastic/go-structform/gotype.unfolderMapFloat64)",
      "type" : "Tuple",
      "underlying" : 434
    }, {
      "name" : "untyped nil",
      "type" : "Basic",
      "underlying" : 435
    } ],
    "variables" : [ {
      "name" : "",
      "package" : 0,
      "type" : 16,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 2,
      "type" : 40,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 2,
      "type" : 40,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 2,
      "type" : 40,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 2,
      "type" : 40,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 2,
      "type" : 40,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 2,
      "type" : 40,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 2,
      "type" : 40,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 2,
      "type" : 40,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 2,
      "type" : 40,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 2,
      "type" : 40,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 2,
      "type" : 40,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 2,
      "type" : 40,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 2,
      "type" : 40,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 2,
      "type" : 40,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 2,
      "type" : 40,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 2,
      "type" : 40,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 2,
      "type" : 40,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 0,
      "type" : 96,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 0,
      "type" : 96,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 0,
      "type" : 96,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 0,
      "type" : 96,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 0,
      "type" : 96,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 0,
      "type" : 96,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 0,
      "type" : 96,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 0,
      "type" : 96,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 0,
      "type" : 96,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 0,
      "type" : 96,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 0,
      "type" : 96,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 0,
      "type" : 96,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 0,
      "type" : 96,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 0,
      "type" : 96,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 0,
      "type" : 96,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 0,
      "type" : 96,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 0,
      "type" : 96,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 0,
      "type" : 96,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 0,
      "type" : 5,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "to",
      "package" : 0,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "[res0]",
      "package" : 0,
      "type" : 4,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "[res1]",
      "package" : 0,
      "type" : 5,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "ptr",
      "package" : 0,
      "type" : 180,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "ptr",
      "package" : 0,
      "type" : 188,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "ptr",
      "package" : 0,
      "type" : 194,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "ptr",
      "package" : 0,
      "type" : 199,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "ptr",
      "package" : 0,
      "type" : 204,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "ptr",
      "package" : 0,
      "type" : 210,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "ptr",
      "package" : 0,
      "type" : 216,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "ptr",
      "package" : 0,
      "type" : 221,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "ptr",
      "package" : 0,
      "type" : 226,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "ptr",
      "package" : 0,
      "type" : 232,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "ptr",
      "package" : 0,
      "type" : 237,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "ptr",
      "package" : 0,
      "type" : 243,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "ptr",
      "package" : 0,
      "type" : 249,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "ptr",
      "package" : 0,
      "type" : 254,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "ptr",
      "package" : 0,
      "type" : 260,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "ptr",
      "package" : 0,
      "type" : 266,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "ptr",
      "package" : 0,
      "type" : 271,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "ptr",
      "package" : 0,
      "type" : 277,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "ptr",
      "package" : 0,
      "type" : 283,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "ptr",
      "package" : 0,
      "type" : 288,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "ptr",
      "package" : 0,
      "type" : 294,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "ptr",
      "package" : 0,
      "type" : 300,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "ptr",
      "package" : 0,
      "type" : 305,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "ptr",
      "package" : 0,
      "type" : 311,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "ptr",
      "package" : 0,
      "type" : 317,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "ptr",
      "package" : 0,
      "type" : 322,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "ptr",
      "package" : 0,
      "type" : 327,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "ptr",
      "package" : 0,
      "type" : 333,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "ptr",
      "package" : 0,
      "type" : 338,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "ptr",
      "package" : 0,
      "type" : 344,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "ptr",
      "package" : 0,
      "type" : 350,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "ptr",
      "package" : 0,
      "type" : 355,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "ptr",
      "package" : 0,
      "type" : 361,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "ptr",
      "package" : 0,
      "type" : 367,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "ptr",
      "package" : 0,
      "type" : 372,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "ptr",
      "package" : 0,
      "type" : 378,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "ptr",
      "package" : 0,
      "type" : 384,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "ptr",
      "package" : 0,
      "type" : 389,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "ptr",
      "package" : 0,
      "type" : 395,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "ptr",
      "package" : 0,
      "type" : 401,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "ptr",
      "package" : 0,
      "type" : 406,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "ptr",
      "package" : 0,
      "type" : 412,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "ptr",
      "package" : 0,
      "type" : 418,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "ptr",
      "package" : 0,
      "type" : 423,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "ptr",
      "package" : 0,
      "type" : 429,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "ptr",
      "package" : 0,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : false
    } ]
  },
  "go-version" : "1.14.3"
}