{
  "usage" : {
    "file" : "unsafe_map.go",
    "label1" : "cast-pointer",
    "label2" : "serialization",
    "line" : "112",
    "module" : "github.com/modern-go/reflect2",
    "pkg" : "github.com/modern-go/reflect2",
    "project" : "kubernetes/kubernetes",
    "snippet" : "hiter:      mapiterinit(type2.rtype, *(*unsafe.Pointer)(obj)),",
    "version" : "v1.0.1"
  },
  "cfg" : {
    "blocks" : [ {
      "update-vars" : [ ],
      "successors" : [ 2 ],
      "in-vars" : [ 21, 20 ],
      "exit" : false,
      "out-vars" : [ 21, 20 ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[entry]",
      "entry" : true,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ ],
      "in-vars" : [ ],
      "exit" : true,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[exit]",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 21, 20 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 111,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 107,
          "kind" : "expression",
          "operator" : "&",
          "target" : {
            "declared" : {
              "go-type" : 108,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 108,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "UnsafeMapIterator"
              }
            },
            "go-type" : 108,
            "kind" : "literal",
            "type" : "composite",
            "values" : [ {
              "go-type" : -1,
              "key" : {
                "go-type" : -1,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "hiter",
                  "variable" : 23
                }
              },
              "kind" : "expression",
              "type" : "key-value",
              "value" : {
                "arguments" : [ {
                  "field" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "rtype",
                    "variable" : 24
                  },
                  "go-type" : 2,
                  "kind" : "expression",
                  "target" : {
                    "go-type" : 15,
                    "kind" : "expression",
                    "type" : "identifier",
                    "value" : {
                      "ident-kind" : "Var",
                      "kind" : "ident",
                      "value" : "type2",
                      "variable" : 20
                    }
                  },
                  "type" : "selector"
                }, {
                  "go-type" : 2,
                  "kind" : "expression",
                  "target" : {
                    "coerced-to" : {
                      "contained" : {
                        "go-type" : 2,
                        "kind" : "type",
                        "qualifier" : {
                          "ident-kind" : "PkgName",
                          "kind" : "ident",
                          "package" : 1,
                          "value" : "unsafe"
                        },
                        "type" : "identifier",
                        "value" : {
                          "go-type" : 2,
                          "ident-kind" : "TypeName",
                          "kind" : "ident",
                          "value" : "Pointer"
                        }
                      },
                      "go-type" : 116,
                      "kind" : "type",
                      "type" : "pointer"
                    },
                    "go-type" : 116,
                    "kind" : "expression",
                    "target" : {
                      "go-type" : 2,
                      "kind" : "expression",
                      "type" : "identifier",
                      "value" : {
                        "ident-kind" : "Var",
                        "kind" : "ident",
                        "value" : "obj",
                        "variable" : 21
                      }
                    },
                    "type" : "cast"
                  },
                  "type" : "star"
                } ],
                "ellipsis" : false,
                "function" : {
                  "go-type" : 113,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "function" : 1,
                    "ident-kind" : "Func",
                    "kind" : "ident",
                    "value" : "mapiterinit"
                  }
                },
                "go-type" : 110,
                "kind" : "expression",
                "type" : "call"
              }
            }, {
              "go-type" : -1,
              "key" : {
                "go-type" : -1,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "pKeyRType",
                  "variable" : 25
                }
              },
              "kind" : "expression",
              "type" : "key-value",
              "value" : {
                "field" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "pKeyRType",
                  "variable" : 26
                },
                "go-type" : 2,
                "kind" : "expression",
                "target" : {
                  "go-type" : 15,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "type2",
                    "variable" : 20
                  }
                },
                "type" : "selector"
              }
            }, {
              "go-type" : -1,
              "key" : {
                "go-type" : -1,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "pElemRType",
                  "variable" : 27
                }
              },
              "kind" : "expression",
              "type" : "key-value",
              "value" : {
                "field" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "pElemRType",
                  "variable" : 28
                },
                "go-type" : 2,
                "kind" : "expression",
                "target" : {
                  "go-type" : 15,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "type2",
                    "variable" : 20
                  }
                },
                "type" : "selector"
              }
            } ]
          },
          "type" : "unary"
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 115,
      "code" : "return &UnsafeMapIterator{\n\thiter:      mapiterinit(type2.rtype, *(*unsafe.Pointer)(obj)),\n\tpKeyRType:  type2.pKeyRType,\n\tpElemRType: type2.pElemRType,\n}",
      "entry" : false,
      "use-vars" : [ 21, 20 ]
    } ],
    "code" : "func (type2 *UnsafeMapType) UnsafeIterate(obj unsafe.Pointer) MapIterator {\n\treturn &UnsafeMapIterator{\n\t\thiter:      mapiterinit(type2.rtype, *(*unsafe.Pointer)(obj)),\n\t\tpKeyRType:  type2.pKeyRType,\n\t\tpElemRType: type2.pElemRType,\n\t}\n}",
    "defines" : [ 0 ],
    "functions" : [ {
      "name" : "UnsafeIterate",
      "package" : 0,
      "type" : 0,
      "exported" : true
    }, {
      "name" : "mapiterinit",
      "package" : 0,
      "type" : 113,
      "exported" : false
    } ],
    "line-end" : 116,
    "line-start" : 110,
    "names" : [ "UnsafeIterate" ],
    "package" : 0,
    "packages" : [ {
      "name" : "reflect2",
      "path" : "github.com/modern-go/reflect2"
    }, {
      "name" : "unsafe",
      "path" : "unsafe"
    }, {
      "name" : "reflect",
      "path" : "reflect"
    }, {
      "name" : "concurrent",
      "path" : "github.com/modern-go/concurrent"
    }, {
      "name" : "sync",
      "path" : "sync"
    }, {
      "name" : "atomic",
      "path" : "sync/atomic"
    } ],
    "params" : [ 21 ],
    "receivers" : [ 20 ],
    "results" : [ 22 ],
    "type" : "function",
    "types" : [ {
      "name" : "(*github.com/modern-go/reflect2.UnsafeMapType) func(obj unsafe.Pointer) github.com/modern-go/reflect2.MapIterator",
      "params" : 1,
      "recv" : 20,
      "results" : 3,
      "type" : "Signature",
      "underlying" : 0,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "obj",
        "type" : 2
      } ],
      "name" : "(obj unsafe.Pointer)",
      "type" : "Tuple",
      "underlying" : 1
    }, {
      "local-name" : "Pointer",
      "name" : "unsafe.Pointer",
      "package" : 1,
      "type" : "Basic",
      "underlying" : 2
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 4
      } ],
      "name" : "(github.com/modern-go/reflect2.MapIterator)",
      "type" : "Tuple",
      "underlying" : 3
    }, {
      "local-name" : "MapIterator",
      "name" : "github.com/modern-go/reflect2.MapIterator",
      "package" : 0,
      "type" : "Named",
      "underlying" : 5
    }, {
      "methods" : [ {
        "name" : "HasNext",
        "type" : 6
      }, {
        "name" : "Next",
        "type" : 10
      }, {
        "name" : "UnsafeNext",
        "type" : 13
      } ],
      "name" : "interface{HasNext() bool; Next() (key interface{}, elem interface{}); UnsafeNext() (key unsafe.Pointer, elem unsafe.Pointer)}",
      "type" : "Interface",
      "underlying" : 5
    }, {
      "name" : "(github.com/modern-go/reflect2.MapIterator) func() bool",
      "params" : 7,
      "recv" : 0,
      "results" : 8,
      "type" : "Signature",
      "underlying" : 6,
      "variadic" : false
    }, {
      "fields" : [ ],
      "name" : "()",
      "type" : "Tuple",
      "underlying" : 7
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 9
      } ],
      "name" : "(bool)",
      "type" : "Tuple",
      "underlying" : 8
    }, {
      "name" : "bool",
      "type" : "Basic",
      "underlying" : 9
    }, {
      "name" : "(github.com/modern-go/reflect2.MapIterator) func() (key interface{}, elem interface{})",
      "params" : 7,
      "recv" : 1,
      "results" : 11,
      "type" : "Signature",
      "underlying" : 10,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "key",
        "type" : 12
      }, {
        "name" : "elem",
        "type" : 12
      } ],
      "name" : "(key interface{}, elem interface{})",
      "type" : "Tuple",
      "underlying" : 11
    }, {
      "methods" : [ ],
      "name" : "interface{}",
      "type" : "Interface",
      "underlying" : 12
    }, {
      "name" : "(github.com/modern-go/reflect2.MapIterator) func() (key unsafe.Pointer, elem unsafe.Pointer)",
      "params" : 7,
      "recv" : 2,
      "results" : 14,
      "type" : "Signature",
      "underlying" : 13,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "key",
        "type" : 2
      }, {
        "name" : "elem",
        "type" : 2
      } ],
      "name" : "(key unsafe.Pointer, elem unsafe.Pointer)",
      "type" : "Tuple",
      "underlying" : 14
    }, {
      "elem" : 16,
      "name" : "*github.com/modern-go/reflect2.UnsafeMapType",
      "type" : "Pointer",
      "underlying" : 15
    }, {
      "local-name" : "UnsafeMapType",
      "name" : "github.com/modern-go/reflect2.UnsafeMapType",
      "package" : 0,
      "type" : "Named",
      "underlying" : 17
    }, {
      "fields" : [ {
        "name" : "unsafeType",
        "type" : 18
      }, {
        "name" : "pKeyRType",
        "type" : 2
      }, {
        "name" : "pElemRType",
        "type" : 2
      } ],
      "name" : "struct{github.com/modern-go/reflect2.unsafeType; pKeyRType unsafe.Pointer; pElemRType unsafe.Pointer}",
      "type" : "Struct",
      "underlying" : 17
    }, {
      "local-name" : "unsafeType",
      "name" : "github.com/modern-go/reflect2.unsafeType",
      "package" : 0,
      "type" : "Named",
      "underlying" : 19
    }, {
      "fields" : [ {
        "name" : "safeType",
        "type" : 20
      }, {
        "name" : "rtype",
        "type" : 2
      }, {
        "name" : "ptrRType",
        "type" : 2
      } ],
      "name" : "struct{github.com/modern-go/reflect2.safeType; rtype unsafe.Pointer; ptrRType unsafe.Pointer}",
      "type" : "Struct",
      "underlying" : 19
    }, {
      "local-name" : "safeType",
      "name" : "github.com/modern-go/reflect2.safeType",
      "package" : 0,
      "type" : "Named",
      "underlying" : 21
    }, {
      "fields" : [ {
        "name" : "Type",
        "type" : 22
      }, {
        "name" : "cfg",
        "type" : 91
      } ],
      "name" : "struct{reflect.Type; cfg *github.com/modern-go/reflect2.frozenConfig}",
      "type" : "Struct",
      "underlying" : 21
    }, {
      "local-name" : "Type",
      "name" : "reflect.Type",
      "package" : 2,
      "type" : "Named",
      "underlying" : 23
    }, {
      "methods" : [ {
        "name" : "Align",
        "type" : 24
      }, {
        "name" : "AssignableTo",
        "type" : 27
      }, {
        "name" : "Bits",
        "type" : 24
      }, {
        "name" : "ChanDir",
        "type" : 29
      }, {
        "name" : "Comparable",
        "type" : 32
      }, {
        "name" : "ConvertibleTo",
        "type" : 27
      }, {
        "name" : "Elem",
        "type" : 33
      }, {
        "name" : "Field",
        "type" : 35
      }, {
        "name" : "FieldAlign",
        "type" : 24
      }, {
        "name" : "FieldByIndex",
        "type" : 44
      }, {
        "name" : "FieldByName",
        "type" : 46
      }, {
        "name" : "FieldByNameFunc",
        "type" : 49
      }, {
        "name" : "Implements",
        "type" : 27
      }, {
        "name" : "In",
        "type" : 53
      }, {
        "name" : "IsVariadic",
        "type" : 32
      }, {
        "name" : "Key",
        "type" : 33
      }, {
        "name" : "Kind",
        "type" : 54
      }, {
        "name" : "Len",
        "type" : 24
      }, {
        "name" : "Method",
        "type" : 58
      }, {
        "name" : "MethodByName",
        "type" : 78
      }, {
        "name" : "Name",
        "type" : 80
      }, {
        "name" : "NumField",
        "type" : 24
      }, {
        "name" : "NumIn",
        "type" : 24
      }, {
        "name" : "NumMethod",
        "type" : 24
      }, {
        "name" : "NumOut",
        "type" : 24
      }, {
        "name" : "Out",
        "type" : 53
      }, {
        "name" : "PkgPath",
        "type" : 80
      }, {
        "name" : "Size",
        "type" : 81
      }, {
        "name" : "String",
        "type" : 80
      }, {
        "name" : "common",
        "type" : 83
      }, {
        "name" : "uncommon",
        "type" : 85
      } ],
      "name" : "interface{Align() int; AssignableTo(u reflect.Type) bool; Bits() int; ChanDir() reflect.ChanDir; Comparable() bool; ConvertibleTo(u reflect.Type) bool; Elem() reflect.Type; Field(i int) reflect.StructField; FieldAlign() int; FieldByIndex(index []int) reflect.StructField; FieldByName(name string) (reflect.StructField, bool); FieldByNameFunc(match func(string) bool) (reflect.StructField, bool); Implements(u reflect.Type) bool; In(i int) reflect.Type; IsVariadic() bool; Key() reflect.Type; Kind() reflect.Kind; Len() int; Method(int) reflect.Method; MethodByName(string) (reflect.Method, bool); Name() string; NumField() int; NumIn() int; NumMethod() int; NumOut() int; Out(i int) reflect.Type; PkgPath() string; Size() uintptr; String() string; common() *reflect.rtype; uncommon() *reflect.uncommonType}",
      "type" : "Interface",
      "underlying" : 23
    }, {
      "name" : "(reflect.Type) func() int",
      "params" : 7,
      "recv" : 3,
      "results" : 25,
      "type" : "Signature",
      "underlying" : 24,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 26
      } ],
      "name" : "(int)",
      "type" : "Tuple",
      "underlying" : 25
    }, {
      "name" : "int",
      "type" : "Basic",
      "underlying" : 26
    }, {
      "name" : "(reflect.Type) func(u reflect.Type) bool",
      "params" : 28,
      "recv" : 4,
      "results" : 8,
      "type" : "Signature",
      "underlying" : 27,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "u",
        "type" : 22
      } ],
      "name" : "(u reflect.Type)",
      "type" : "Tuple",
      "underlying" : 28
    }, {
      "name" : "(reflect.Type) func() reflect.ChanDir",
      "params" : 7,
      "recv" : 5,
      "results" : 30,
      "type" : "Signature",
      "underlying" : 29,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 31
      } ],
      "name" : "(reflect.ChanDir)",
      "type" : "Tuple",
      "underlying" : 30
    }, {
      "local-name" : "ChanDir",
      "name" : "reflect.ChanDir",
      "package" : 2,
      "type" : "Named",
      "underlying" : 26
    }, {
      "name" : "(reflect.Type) func() bool",
      "params" : 7,
      "recv" : 6,
      "results" : 8,
      "type" : "Signature",
      "underlying" : 32,
      "variadic" : false
    }, {
      "name" : "(reflect.Type) func() reflect.Type",
      "params" : 7,
      "recv" : 7,
      "results" : 34,
      "type" : "Signature",
      "underlying" : 33,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 22
      } ],
      "name" : "(reflect.Type)",
      "type" : "Tuple",
      "underlying" : 34
    }, {
      "name" : "(reflect.Type) func(i int) reflect.StructField",
      "params" : 36,
      "recv" : 8,
      "results" : 37,
      "type" : "Signature",
      "underlying" : 35,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "i",
        "type" : 26
      } ],
      "name" : "(i int)",
      "type" : "Tuple",
      "underlying" : 36
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 38
      } ],
      "name" : "(reflect.StructField)",
      "type" : "Tuple",
      "underlying" : 37
    }, {
      "local-name" : "StructField",
      "name" : "reflect.StructField",
      "package" : 2,
      "type" : "Named",
      "underlying" : 39
    }, {
      "fields" : [ {
        "name" : "Name",
        "type" : 40
      }, {
        "name" : "PkgPath",
        "type" : 40
      }, {
        "name" : "Type",
        "type" : 22
      }, {
        "name" : "Tag",
        "type" : 41
      }, {
        "name" : "Offset",
        "type" : 42
      }, {
        "name" : "Index",
        "type" : 43
      }, {
        "name" : "Anonymous",
        "type" : 9
      } ],
      "name" : "struct{Name string; PkgPath string; Type reflect.Type; Tag reflect.StructTag; Offset uintptr; Index []int; Anonymous bool}",
      "type" : "Struct",
      "underlying" : 39
    }, {
      "name" : "string",
      "type" : "Basic",
      "underlying" : 40
    }, {
      "local-name" : "StructTag",
      "name" : "reflect.StructTag",
      "package" : 2,
      "type" : "Named",
      "underlying" : 40
    }, {
      "name" : "uintptr",
      "type" : "Basic",
      "underlying" : 42
    }, {
      "elem" : 26,
      "name" : "[]int",
      "type" : "Slice",
      "underlying" : 43
    }, {
      "name" : "(reflect.Type) func(index []int) reflect.StructField",
      "params" : 45,
      "recv" : 9,
      "results" : 37,
      "type" : "Signature",
      "underlying" : 44,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "index",
        "type" : 43
      } ],
      "name" : "(index []int)",
      "type" : "Tuple",
      "underlying" : 45
    }, {
      "name" : "(reflect.Type) func(name string) (reflect.StructField, bool)",
      "params" : 47,
      "recv" : 10,
      "results" : 48,
      "type" : "Signature",
      "underlying" : 46,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "name",
        "type" : 40
      } ],
      "name" : "(name string)",
      "type" : "Tuple",
      "underlying" : 47
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 38
      }, {
        "name" : "",
        "type" : 9
      } ],
      "name" : "(reflect.StructField, bool)",
      "type" : "Tuple",
      "underlying" : 48
    }, {
      "name" : "(reflect.Type) func(match func(string) bool) (reflect.StructField, bool)",
      "params" : 50,
      "recv" : 11,
      "results" : 48,
      "type" : "Signature",
      "underlying" : 49,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "match",
        "type" : 51
      } ],
      "name" : "(match func(string) bool)",
      "type" : "Tuple",
      "underlying" : 50
    }, {
      "name" : "func(string) bool",
      "params" : 52,
      "recv" : -1,
      "results" : 8,
      "type" : "Signature",
      "underlying" : 51,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 40
      } ],
      "name" : "(string)",
      "type" : "Tuple",
      "underlying" : 52
    }, {
      "name" : "(reflect.Type) func(i int) reflect.Type",
      "params" : 36,
      "recv" : 12,
      "results" : 34,
      "type" : "Signature",
      "underlying" : 53,
      "variadic" : false
    }, {
      "name" : "(reflect.Type) func() reflect.Kind",
      "params" : 7,
      "recv" : 13,
      "results" : 55,
      "type" : "Signature",
      "underlying" : 54,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 56
      } ],
      "name" : "(reflect.Kind)",
      "type" : "Tuple",
      "underlying" : 55
    }, {
      "local-name" : "Kind",
      "name" : "reflect.Kind",
      "package" : 2,
      "type" : "Named",
      "underlying" : 57
    }, {
      "name" : "uint",
      "type" : "Basic",
      "underlying" : 57
    }, {
      "name" : "(reflect.Type) func(int) reflect.Method",
      "params" : 25,
      "recv" : 14,
      "results" : 59,
      "type" : "Signature",
      "underlying" : 58,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 60
      } ],
      "name" : "(reflect.Method)",
      "type" : "Tuple",
      "underlying" : 59
    }, {
      "local-name" : "Method",
      "name" : "reflect.Method",
      "package" : 2,
      "type" : "Named",
      "underlying" : 61
    }, {
      "fields" : [ {
        "name" : "Name",
        "type" : 40
      }, {
        "name" : "PkgPath",
        "type" : 40
      }, {
        "name" : "Type",
        "type" : 22
      }, {
        "name" : "Func",
        "type" : 62
      }, {
        "name" : "Index",
        "type" : 26
      } ],
      "name" : "struct{Name string; PkgPath string; Type reflect.Type; Func reflect.Value; Index int}",
      "type" : "Struct",
      "underlying" : 61
    }, {
      "local-name" : "Value",
      "name" : "reflect.Value",
      "package" : 2,
      "type" : "Named",
      "underlying" : 63
    }, {
      "fields" : [ {
        "name" : "typ",
        "type" : 64
      }, {
        "name" : "ptr",
        "type" : 2
      }, {
        "name" : "flag",
        "type" : 77
      } ],
      "name" : "struct{typ *reflect.rtype; ptr unsafe.Pointer; reflect.flag}",
      "type" : "Struct",
      "underlying" : 63
    }, {
      "elem" : 65,
      "name" : "*reflect.rtype",
      "type" : "Pointer",
      "underlying" : 64
    }, {
      "local-name" : "rtype",
      "name" : "reflect.rtype",
      "package" : 2,
      "type" : "Named",
      "underlying" : 66
    }, {
      "fields" : [ {
        "name" : "size",
        "type" : 42
      }, {
        "name" : "ptrdata",
        "type" : 42
      }, {
        "name" : "hash",
        "type" : 67
      }, {
        "name" : "tflag",
        "type" : 68
      }, {
        "name" : "align",
        "type" : 69
      }, {
        "name" : "fieldAlign",
        "type" : 69
      }, {
        "name" : "kind",
        "type" : 69
      }, {
        "name" : "equal",
        "type" : 70
      }, {
        "name" : "gcdata",
        "type" : 72
      }, {
        "name" : "str",
        "type" : 74
      }, {
        "name" : "ptrToThis",
        "type" : 76
      } ],
      "name" : "struct{size uintptr; ptrdata uintptr; hash uint32; tflag reflect.tflag; align uint8; fieldAlign uint8; kind uint8; equal func(unsafe.Pointer, unsafe.Pointer) bool; gcdata *byte; str reflect.nameOff; ptrToThis reflect.typeOff}",
      "type" : "Struct",
      "underlying" : 66
    }, {
      "name" : "uint32",
      "type" : "Basic",
      "underlying" : 67
    }, {
      "local-name" : "tflag",
      "name" : "reflect.tflag",
      "package" : 2,
      "type" : "Named",
      "underlying" : 69
    }, {
      "name" : "uint8",
      "type" : "Basic",
      "underlying" : 69
    }, {
      "name" : "func(unsafe.Pointer, unsafe.Pointer) bool",
      "params" : 71,
      "recv" : -1,
      "results" : 8,
      "type" : "Signature",
      "underlying" : 70,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 2
      }, {
        "name" : "",
        "type" : 2
      } ],
      "name" : "(unsafe.Pointer, unsafe.Pointer)",
      "type" : "Tuple",
      "underlying" : 71
    }, {
      "elem" : 73,
      "name" : "*byte",
      "type" : "Pointer",
      "underlying" : 72
    }, {
      "name" : "byte",
      "type" : "Basic",
      "underlying" : 73
    }, {
      "local-name" : "nameOff",
      "name" : "reflect.nameOff",
      "package" : 2,
      "type" : "Named",
      "underlying" : 75
    }, {
      "name" : "int32",
      "type" : "Basic",
      "underlying" : 75
    }, {
      "local-name" : "typeOff",
      "name" : "reflect.typeOff",
      "package" : 2,
      "type" : "Named",
      "underlying" : 75
    }, {
      "local-name" : "flag",
      "name" : "reflect.flag",
      "package" : 2,
      "type" : "Named",
      "underlying" : 42
    }, {
      "name" : "(reflect.Type) func(string) (reflect.Method, bool)",
      "params" : 52,
      "recv" : 15,
      "results" : 79,
      "type" : "Signature",
      "underlying" : 78,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 60
      }, {
        "name" : "",
        "type" : 9
      } ],
      "name" : "(reflect.Method, bool)",
      "type" : "Tuple",
      "underlying" : 79
    }, {
      "name" : "(reflect.Type) func() string",
      "params" : 7,
      "recv" : 16,
      "results" : 52,
      "type" : "Signature",
      "underlying" : 80,
      "variadic" : false
    }, {
      "name" : "(reflect.Type) func() uintptr",
      "params" : 7,
      "recv" : 17,
      "results" : 82,
      "type" : "Signature",
      "underlying" : 81,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 42
      } ],
      "name" : "(uintptr)",
      "type" : "Tuple",
      "underlying" : 82
    }, {
      "name" : "(reflect.Type) func() *reflect.rtype",
      "params" : 7,
      "recv" : 18,
      "results" : 84,
      "type" : "Signature",
      "underlying" : 83,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 64
      } ],
      "name" : "(*reflect.rtype)",
      "type" : "Tuple",
      "underlying" : 84
    }, {
      "name" : "(reflect.Type) func() *reflect.uncommonType",
      "params" : 7,
      "recv" : 19,
      "results" : 86,
      "type" : "Signature",
      "underlying" : 85,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 87
      } ],
      "name" : "(*reflect.uncommonType)",
      "type" : "Tuple",
      "underlying" : 86
    }, {
      "elem" : 88,
      "name" : "*reflect.uncommonType",
      "type" : "Pointer",
      "underlying" : 87
    }, {
      "local-name" : "uncommonType",
      "name" : "reflect.uncommonType",
      "package" : 2,
      "type" : "Named",
      "underlying" : 89
    }, {
      "fields" : [ {
        "name" : "pkgPath",
        "type" : 74
      }, {
        "name" : "mcount",
        "type" : 90
      }, {
        "name" : "xcount",
        "type" : 90
      }, {
        "name" : "moff",
        "type" : 67
      }, {
        "name" : "_",
        "type" : 67
      } ],
      "name" : "struct{pkgPath reflect.nameOff; mcount uint16; xcount uint16; moff uint32; _ uint32}",
      "type" : "Struct",
      "underlying" : 89
    }, {
      "name" : "uint16",
      "type" : "Basic",
      "underlying" : 90
    }, {
      "elem" : 92,
      "name" : "*github.com/modern-go/reflect2.frozenConfig",
      "type" : "Pointer",
      "underlying" : 91
    }, {
      "local-name" : "frozenConfig",
      "name" : "github.com/modern-go/reflect2.frozenConfig",
      "package" : 0,
      "type" : "Named",
      "underlying" : 93
    }, {
      "fields" : [ {
        "name" : "useSafeImplementation",
        "type" : 9
      }, {
        "name" : "cache",
        "type" : 94
      } ],
      "name" : "struct{useSafeImplementation bool; cache *github.com/modern-go/concurrent.Map}",
      "type" : "Struct",
      "underlying" : 93
    }, {
      "elem" : 95,
      "name" : "*github.com/modern-go/concurrent.Map",
      "type" : "Pointer",
      "underlying" : 94
    }, {
      "local-name" : "Map",
      "name" : "github.com/modern-go/concurrent.Map",
      "package" : 3,
      "type" : "Named",
      "underlying" : 96
    }, {
      "fields" : [ {
        "name" : "Map",
        "type" : 97
      } ],
      "name" : "struct{sync.Map}",
      "type" : "Struct",
      "underlying" : 96
    }, {
      "local-name" : "Map",
      "name" : "sync.Map",
      "package" : 4,
      "type" : "Named",
      "underlying" : 98
    }, {
      "fields" : [ {
        "name" : "mu",
        "type" : 99
      }, {
        "name" : "read",
        "type" : 101
      }, {
        "name" : "dirty",
        "type" : 103
      }, {
        "name" : "misses",
        "type" : 26
      } ],
      "name" : "struct{mu sync.Mutex; read sync/atomic.Value; dirty map[interface{}]*sync.entry; misses int}",
      "type" : "Struct",
      "underlying" : 98
    }, {
      "local-name" : "Mutex",
      "name" : "sync.Mutex",
      "package" : 4,
      "type" : "Named",
      "underlying" : 100
    }, {
      "fields" : [ {
        "name" : "state",
        "type" : 75
      }, {
        "name" : "sema",
        "type" : 67
      } ],
      "name" : "struct{state int32; sema uint32}",
      "type" : "Struct",
      "underlying" : 100
    }, {
      "local-name" : "Value",
      "name" : "sync/atomic.Value",
      "package" : 5,
      "type" : "Named",
      "underlying" : 102
    }, {
      "fields" : [ {
        "name" : "v",
        "type" : 12
      } ],
      "name" : "struct{v interface{}}",
      "type" : "Struct",
      "underlying" : 102
    }, {
      "elem" : 104,
      "key" : 12,
      "name" : "map[interface{}]*sync.entry",
      "type" : "Map",
      "underlying" : 103
    }, {
      "elem" : 105,
      "name" : "*sync.entry",
      "type" : "Pointer",
      "underlying" : 104
    }, {
      "local-name" : "entry",
      "name" : "sync.entry",
      "package" : 4,
      "type" : "Named",
      "underlying" : 106
    }, {
      "fields" : [ {
        "name" : "p",
        "type" : 2
      } ],
      "name" : "struct{p unsafe.Pointer}",
      "type" : "Struct",
      "underlying" : 106
    }, {
      "elem" : 108,
      "name" : "*github.com/modern-go/reflect2.UnsafeMapIterator",
      "type" : "Pointer",
      "underlying" : 107
    }, {
      "local-name" : "UnsafeMapIterator",
      "name" : "github.com/modern-go/reflect2.UnsafeMapIterator",
      "package" : 0,
      "type" : "Named",
      "underlying" : 109
    }, {
      "fields" : [ {
        "name" : "hiter",
        "type" : 110
      }, {
        "name" : "pKeyRType",
        "type" : 2
      }, {
        "name" : "pElemRType",
        "type" : 2
      } ],
      "name" : "struct{*github.com/modern-go/reflect2.hiter; pKeyRType unsafe.Pointer; pElemRType unsafe.Pointer}",
      "type" : "Struct",
      "underlying" : 109
    }, {
      "elem" : 111,
      "name" : "*github.com/modern-go/reflect2.hiter",
      "type" : "Pointer",
      "underlying" : 110
    }, {
      "local-name" : "hiter",
      "name" : "github.com/modern-go/reflect2.hiter",
      "package" : 0,
      "type" : "Named",
      "underlying" : 112
    }, {
      "fields" : [ {
        "name" : "key",
        "type" : 2
      }, {
        "name" : "value",
        "type" : 2
      } ],
      "name" : "struct{key unsafe.Pointer; value unsafe.Pointer}",
      "type" : "Struct",
      "underlying" : 112
    }, {
      "name" : "func(rtype unsafe.Pointer, m unsafe.Pointer) *github.com/modern-go/reflect2.hiter",
      "params" : 114,
      "recv" : -1,
      "results" : 115,
      "type" : "Signature",
      "underlying" : 113,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "rtype",
        "type" : 2
      }, {
        "name" : "m",
        "type" : 2
      } ],
      "name" : "(rtype unsafe.Pointer, m unsafe.Pointer)",
      "type" : "Tuple",
      "underlying" : 114
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 110
      } ],
      "name" : "(*github.com/modern-go/reflect2.hiter)",
      "type" : "Tuple",
      "underlying" : 115
    }, {
      "elem" : 2,
      "name" : "*unsafe.Pointer",
      "type" : "Pointer",
      "underlying" : 116
    } ],
    "variables" : [ {
      "name" : "",
      "package" : 0,
      "type" : 4,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 0,
      "type" : 4,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 0,
      "type" : 4,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 2,
      "type" : 22,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 2,
      "type" : 22,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 2,
      "type" : 22,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 2,
      "type" : 22,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 2,
      "type" : 22,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 2,
      "type" : 22,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 2,
      "type" : 22,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 2,
      "type" : 22,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 2,
      "type" : 22,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 2,
      "type" : 22,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 2,
      "type" : 22,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 2,
      "type" : 22,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 2,
      "type" : 22,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 2,
      "type" : 22,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 2,
      "type" : 22,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 2,
      "type" : 22,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 2,
      "type" : 22,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "type2",
      "package" : 0,
      "type" : 15,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "obj",
      "package" : 0,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "[res0]",
      "package" : 0,
      "type" : 4,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "hiter",
      "package" : 0,
      "type" : 110,
      "exported" : false,
      "embedded" : true,
      "field" : true
    }, {
      "name" : "rtype",
      "package" : 0,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "pKeyRType",
      "package" : 0,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "pKeyRType",
      "package" : 0,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "pElemRType",
      "package" : 0,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "pElemRType",
      "package" : 0,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : true
    } ]
  },
  "go-version" : "1.14.3"
}