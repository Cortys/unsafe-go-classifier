{
  "usage" : {
    "file" : "marshalers.go",
    "label1" : "cast-header",
    "label2" : "serialization",
    "line" : "66",
    "module" : "github.com/cilium/ebpf",
    "pkg" : "github.com/cilium/ebpf",
    "project" : "kubernetes/kubernetes",
    "snippet" : "case unsafe.Pointer:",
    "version" : "v0.0.0-20191113100448-d9fb101ca1fb"
  },
  "cfg" : {
    "blocks" : [ {
      "update-vars" : [ ],
      "successors" : [ 2 ],
      "in-vars" : [ 2, 1 ],
      "exit" : false,
      "out-vars" : [ 2, 1 ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[entry]",
      "entry" : true,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ ],
      "in-vars" : [ ],
      "exit" : true,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[exit]",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 3 ],
      "in-vars" : [ 2, 1 ],
      "exit" : false,
      "out-vars" : [ 5, 1, 2, 11, 24 ],
      "decl-vars" : [ 26, 24, 5, 11, 12, 13, 27 ],
      "line-start" : 65,
      "ast" : {
        "kind" : "statement",
        "type" : "type-switch"
      },
      "assign-vars" : [ ],
      "line-end" : 93,
      "code" : "switch value := data.(type) {\ncase unsafe.Pointer:\n\tsh := &reflect.SliceHeader{\n\t\tData: uintptr(value),\n\t\tLen:  len(buf),\n\t\tCap:  len(buf),\n\t}\n\n\tdst := *(*[]byte)(unsafe.Pointer(sh))\n\tcopy(dst, buf)\n\truntime.KeepAlive(value)\n\treturn nil\ncase encoding.BinaryUnmarshaler:\n\treturn value.UnmarshalBinary(buf)\ncase *string:\n\t*value = string(buf)\n\treturn nil\ncase *[]byte:\n\t*value = buf\n\treturn nil\ncase string:\n\treturn errors.New(\"require pointer to string\")\ncase []byte:\n\treturn errors.New(\"require pointer to []byte\")\ndefault:\n\trd := bytes.NewReader(buf)\n\terr := binary.Read(rd, internal.NativeEndian, value)\n\treturn errors.Wrapf(err, \"decoding %T\", value)\n}",
      "entry" : false,
      "use-vars" : [ 1 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 4, 10, 12, 15, 18, 20, 22 ],
      "in-vars" : [ 2, 11, 24, 5, 1 ],
      "exit" : false,
      "out-vars" : [ 2, 11, 24, 5 ],
      "decl-vars" : [ ],
      "line-start" : 65,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "value"
          }
        } ],
        "right" : [ {
          "asserted" : null,
          "go-type" : -1,
          "kind" : "expression",
          "target" : {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "data",
              "variable" : 1
            }
          },
          "type" : "type-assert"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 65,
      "code" : "value := data.(type)",
      "entry" : false,
      "use-vars" : [ 1 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 5 ],
      "in-vars" : [ 2, 5 ],
      "exit" : false,
      "out-vars" : [ 5, 2 ],
      "decl-vars" : [ ],
      "line-start" : 66,
      "ast" : {
        "expressions" : [ {
          "go-type" : 17,
          "kind" : "type",
          "qualifier" : {
            "ident-kind" : "PkgName",
            "kind" : "ident",
            "package" : 2,
            "value" : "unsafe"
          },
          "type" : "identifier",
          "value" : {
            "go-type" : 17,
            "ident-kind" : "TypeName",
            "kind" : "ident",
            "value" : "Pointer"
          }
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 76,
      "code" : "case unsafe.Pointer:\n\tsh := &reflect.SliceHeader{\n\t\tData: uintptr(value),\n\t\tLen:  len(buf),\n\t\tCap:  len(buf),\n\t}\n\n\tdst := *(*[]byte)(unsafe.Pointer(sh))\n\tcopy(dst, buf)\n\truntime.KeepAlive(value)\n\treturn nil",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 6 ],
      "in-vars" : [ 2, 5 ],
      "exit" : false,
      "out-vars" : [ 2, 5, 8 ],
      "decl-vars" : [ 8 ],
      "line-start" : 67,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "sh"
          }
        } ],
        "right" : [ {
          "go-type" : 12,
          "kind" : "expression",
          "operator" : "&",
          "target" : {
            "declared" : {
              "go-type" : 13,
              "kind" : "type",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 1,
                "value" : "reflect"
              },
              "type" : "identifier",
              "value" : {
                "go-type" : 13,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "SliceHeader"
              }
            },
            "go-type" : 13,
            "kind" : "literal",
            "type" : "composite",
            "values" : [ {
              "go-type" : -1,
              "key" : {
                "go-type" : -1,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "Data",
                  "variable" : 4
                }
              },
              "kind" : "expression",
              "type" : "key-value",
              "value" : {
                "coerced-to" : {
                  "go-type" : 15,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 15,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "uintptr"
                  }
                },
                "go-type" : 15,
                "kind" : "expression",
                "target" : {
                  "go-type" : 17,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "value",
                    "variable" : 5
                  }
                },
                "type" : "cast"
              }
            }, {
              "go-type" : -1,
              "key" : {
                "go-type" : -1,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "Len",
                  "variable" : 6
                }
              },
              "kind" : "expression",
              "type" : "key-value",
              "value" : {
                "arguments" : [ {
                  "go-type" : 3,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "buf",
                    "variable" : 2
                  }
                } ],
                "ellipsis" : false,
                "function" : {
                  "go-type" : 18,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Builtin",
                    "kind" : "ident",
                    "value" : "len"
                  }
                },
                "go-type" : 16,
                "kind" : "expression",
                "type" : "call"
              }
            }, {
              "go-type" : -1,
              "key" : {
                "go-type" : -1,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "Cap",
                  "variable" : 7
                }
              },
              "kind" : "expression",
              "type" : "key-value",
              "value" : {
                "arguments" : [ {
                  "go-type" : 3,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "buf",
                    "variable" : 2
                  }
                } ],
                "ellipsis" : false,
                "function" : {
                  "go-type" : 18,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Builtin",
                    "kind" : "ident",
                    "value" : "len"
                  }
                },
                "go-type" : 16,
                "kind" : "expression",
                "type" : "call"
              }
            } ]
          },
          "type" : "unary"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 71,
      "code" : "sh := &reflect.SliceHeader{\n\tData: uintptr(value),\n\tLen:  len(buf),\n\tCap:  len(buf),\n}",
      "entry" : false,
      "use-vars" : [ 2, 5 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 7 ],
      "in-vars" : [ 2, 5, 8 ],
      "exit" : false,
      "out-vars" : [ 2, 5, 9 ],
      "decl-vars" : [ 9 ],
      "line-start" : 73,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "dst"
          }
        } ],
        "right" : [ {
          "go-type" : 3,
          "kind" : "expression",
          "target" : {
            "coerced-to" : {
              "contained" : {
                "element" : {
                  "go-type" : 4,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 4,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "byte"
                  }
                },
                "go-type" : 3,
                "kind" : "type",
                "type" : "slice"
              },
              "go-type" : 21,
              "kind" : "type",
              "type" : "pointer"
            },
            "go-type" : 21,
            "kind" : "expression",
            "target" : {
              "coerced-to" : {
                "go-type" : 17,
                "kind" : "type",
                "qualifier" : {
                  "ident-kind" : "PkgName",
                  "kind" : "ident",
                  "package" : 2,
                  "value" : "unsafe"
                },
                "type" : "identifier",
                "value" : {
                  "go-type" : 17,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "Pointer"
                }
              },
              "go-type" : 17,
              "kind" : "expression",
              "target" : {
                "go-type" : 12,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "sh",
                  "variable" : 8
                }
              },
              "type" : "cast"
            },
            "type" : "cast"
          },
          "type" : "star"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 73,
      "code" : "dst := *(*[]byte)(unsafe.Pointer(sh))",
      "entry" : false,
      "use-vars" : [ 8 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 8 ],
      "in-vars" : [ 2, 5, 9 ],
      "exit" : false,
      "out-vars" : [ 5 ],
      "decl-vars" : [ ],
      "line-start" : 74,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 3,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "dst",
              "variable" : 9
            }
          }, {
            "go-type" : 3,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "buf",
              "variable" : 2
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 22,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Builtin",
              "kind" : "ident",
              "value" : "copy"
            }
          },
          "go-type" : 16,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 74,
      "code" : "copy(dst, buf)",
      "entry" : false,
      "use-vars" : [ 9, 2 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 9 ],
      "in-vars" : [ 5 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 75,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 17,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "value",
              "variable" : 5
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 24,
            "kind" : "expression",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 3,
              "value" : "runtime"
            },
            "type" : "identifier",
            "value" : {
              "function" : 1,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "KeepAlive"
            }
          },
          "go-type" : 9,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 75,
      "code" : "runtime.KeepAlive(value)",
      "entry" : false,
      "use-vars" : [ 5 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 76,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 26,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Nil",
            "kind" : "ident",
            "value" : "nil"
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 76,
      "code" : "return nil",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 11 ],
      "in-vars" : [ 2, 11 ],
      "exit" : false,
      "out-vars" : [ 2, 11 ],
      "decl-vars" : [ ],
      "line-start" : 77,
      "ast" : {
        "expressions" : [ {
          "go-type" : 29,
          "kind" : "type",
          "qualifier" : {
            "ident-kind" : "PkgName",
            "kind" : "ident",
            "package" : 4,
            "value" : "encoding"
          },
          "type" : "identifier",
          "value" : {
            "go-type" : 29,
            "ident-kind" : "TypeName",
            "kind" : "ident",
            "value" : "BinaryUnmarshaler"
          }
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 78,
      "code" : "case encoding.BinaryUnmarshaler:\n\treturn value.UnmarshalBinary(buf)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 2, 11 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 78,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "arguments" : [ {
            "go-type" : 3,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "buf",
              "variable" : 2
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "function" : 2,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "UnmarshalBinary"
            },
            "go-type" : 27,
            "kind" : "expression",
            "target" : {
              "go-type" : 29,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "value",
                "variable" : 11
              }
            },
            "type" : "selector"
          },
          "go-type" : 6,
          "kind" : "expression",
          "type" : "call"
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 78,
      "code" : "return value.UnmarshalBinary(buf)",
      "entry" : false,
      "use-vars" : [ 2, 11 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 13 ],
      "in-vars" : [ 2 ],
      "exit" : false,
      "out-vars" : [ 2 ],
      "decl-vars" : [ ],
      "line-start" : 79,
      "ast" : {
        "expressions" : [ {
          "contained" : {
            "go-type" : 11,
            "kind" : "type",
            "type" : "identifier",
            "value" : {
              "go-type" : 11,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "string"
            }
          },
          "go-type" : 32,
          "kind" : "type",
          "type" : "pointer"
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 81,
      "code" : "case *string:\n\t*value = string(buf)\n\treturn nil",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 14 ],
      "in-vars" : [ 2 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 80,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 11,
          "kind" : "expression",
          "target" : {
            "go-type" : 32,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "value",
              "variable" : 12
            }
          },
          "type" : "star"
        } ],
        "right" : [ {
          "coerced-to" : {
            "go-type" : 11,
            "kind" : "type",
            "type" : "identifier",
            "value" : {
              "go-type" : 11,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "string"
            }
          },
          "go-type" : 11,
          "kind" : "expression",
          "target" : {
            "go-type" : 3,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "buf",
              "variable" : 2
            }
          },
          "type" : "cast"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 80,
      "code" : "*value = string(buf)",
      "entry" : false,
      "use-vars" : [ 2 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 81,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 26,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Nil",
            "kind" : "ident",
            "value" : "nil"
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 81,
      "code" : "return nil",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 16 ],
      "in-vars" : [ 2 ],
      "exit" : false,
      "out-vars" : [ 2 ],
      "decl-vars" : [ ],
      "line-start" : 82,
      "ast" : {
        "expressions" : [ {
          "contained" : {
            "element" : {
              "go-type" : 4,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 4,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "byte"
              }
            },
            "go-type" : 3,
            "kind" : "type",
            "type" : "slice"
          },
          "go-type" : 21,
          "kind" : "type",
          "type" : "pointer"
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 84,
      "code" : "case *[]byte:\n\t*value = buf\n\treturn nil",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 17 ],
      "in-vars" : [ 2 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 83,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 3,
          "kind" : "expression",
          "target" : {
            "go-type" : 21,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "value",
              "variable" : 13
            }
          },
          "type" : "star"
        } ],
        "right" : [ {
          "go-type" : 3,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "buf",
            "variable" : 2
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 83,
      "code" : "*value = buf",
      "entry" : false,
      "use-vars" : [ 2 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 84,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 26,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Nil",
            "kind" : "ident",
            "value" : "nil"
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 84,
      "code" : "return nil",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 19 ],
      "in-vars" : [ ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 85,
      "ast" : {
        "expressions" : [ {
          "go-type" : 11,
          "kind" : "type",
          "type" : "identifier",
          "value" : {
            "go-type" : 11,
            "ident-kind" : "TypeName",
            "kind" : "ident",
            "value" : "string"
          }
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 86,
      "code" : "case string:\n\treturn errors.New(\"require pointer to string\")",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 86,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "arguments" : [ {
            "go-type" : 11,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "require pointer to string"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 33,
            "kind" : "expression",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 5,
              "value" : "errors"
            },
            "type" : "identifier",
            "value" : {
              "function" : 3,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "New"
            }
          },
          "go-type" : 6,
          "kind" : "expression",
          "type" : "call"
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 86,
      "code" : "return errors.New(\"require pointer to string\")",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 21 ],
      "in-vars" : [ ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 87,
      "ast" : {
        "expressions" : [ {
          "element" : {
            "go-type" : 4,
            "kind" : "type",
            "type" : "identifier",
            "value" : {
              "go-type" : 4,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "byte"
            }
          },
          "go-type" : 3,
          "kind" : "type",
          "type" : "slice"
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 88,
      "code" : "case []byte:\n\treturn errors.New(\"require pointer to []byte\")",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 88,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "arguments" : [ {
            "go-type" : 11,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "require pointer to []byte"
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 33,
            "kind" : "expression",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 5,
              "value" : "errors"
            },
            "type" : "identifier",
            "value" : {
              "function" : 3,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "New"
            }
          },
          "go-type" : 6,
          "kind" : "expression",
          "type" : "call"
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 88,
      "code" : "return errors.New(\"require pointer to []byte\")",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 23 ],
      "in-vars" : [ 2, 24 ],
      "exit" : false,
      "out-vars" : [ 2, 24 ],
      "decl-vars" : [ ],
      "line-start" : 89,
      "ast" : {
        "expressions" : [ ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 92,
      "code" : "default:\n\trd := bytes.NewReader(buf)\n\terr := binary.Read(rd, internal.NativeEndian, value)\n\treturn errors.Wrapf(err, \"decoding %T\", value)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 24 ],
      "in-vars" : [ 2, 24 ],
      "exit" : false,
      "out-vars" : [ 24, 22 ],
      "decl-vars" : [ 22 ],
      "line-start" : 90,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "rd"
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 3,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "buf",
              "variable" : 2
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 39,
            "kind" : "expression",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 6,
              "value" : "bytes"
            },
            "type" : "identifier",
            "value" : {
              "function" : 4,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "NewReader"
            }
          },
          "go-type" : 35,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 90,
      "code" : "rd := bytes.NewReader(buf)",
      "entry" : false,
      "use-vars" : [ 2 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 25 ],
      "in-vars" : [ 24, 22 ],
      "exit" : false,
      "out-vars" : [ 25, 24 ],
      "decl-vars" : [ 25 ],
      "line-start" : 91,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "err"
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 35,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "rd",
              "variable" : 22
            }
          }, {
            "go-type" : 49,
            "kind" : "expression",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 9,
              "value" : "internal"
            },
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "NativeEndian",
              "variable" : 23
            }
          }, {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "value",
              "variable" : 24
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 42,
            "kind" : "expression",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 8,
              "value" : "binary"
            },
            "type" : "identifier",
            "value" : {
              "function" : 5,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "Read"
            }
          },
          "go-type" : 6,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 91,
      "code" : "err := binary.Read(rd, internal.NativeEndian, value)",
      "entry" : false,
      "use-vars" : [ 22, 24 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 25, 24 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 92,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "arguments" : [ {
            "go-type" : 6,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "err",
              "variable" : 25
            }
          }, {
            "go-type" : 11,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "decoding %T"
            }
          }, {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "value",
              "variable" : 24
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 67,
            "kind" : "expression",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 5,
              "value" : "errors"
            },
            "type" : "identifier",
            "value" : {
              "function" : 6,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "Wrapf"
            }
          },
          "go-type" : 6,
          "kind" : "expression",
          "type" : "call"
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 92,
      "code" : "return errors.Wrapf(err, \"decoding %T\", value)",
      "entry" : false,
      "use-vars" : [ 25, 24 ]
    } ],
    "code" : "func unmarshalBytes(data interface{}, buf []byte) error {\n\tswitch value := data.(type) {\n\tcase unsafe.Pointer:\n\t\tsh := &reflect.SliceHeader{\n\t\t\tData: uintptr(value),\n\t\t\tLen:  len(buf),\n\t\t\tCap:  len(buf),\n\t\t}\n\n\t\tdst := *(*[]byte)(unsafe.Pointer(sh))\n\t\tcopy(dst, buf)\n\t\truntime.KeepAlive(value)\n\t\treturn nil\n\tcase encoding.BinaryUnmarshaler:\n\t\treturn value.UnmarshalBinary(buf)\n\tcase *string:\n\t\t*value = string(buf)\n\t\treturn nil\n\tcase *[]byte:\n\t\t*value = buf\n\t\treturn nil\n\tcase string:\n\t\treturn errors.New(\"require pointer to string\")\n\tcase []byte:\n\t\treturn errors.New(\"require pointer to []byte\")\n\tdefault:\n\t\trd := bytes.NewReader(buf)\n\t\terr := binary.Read(rd, internal.NativeEndian, value)\n\t\treturn errors.Wrapf(err, \"decoding %T\", value)\n\t}\n}",
    "defines" : [ 0 ],
    "functions" : [ {
      "name" : "unmarshalBytes",
      "package" : 0,
      "type" : 0,
      "exported" : false
    }, {
      "name" : "KeepAlive",
      "package" : 3,
      "type" : 24,
      "exported" : true
    }, {
      "name" : "UnmarshalBinary",
      "package" : 4,
      "type" : 31,
      "exported" : true
    }, {
      "name" : "New",
      "package" : 5,
      "type" : 33,
      "exported" : true
    }, {
      "name" : "NewReader",
      "package" : 6,
      "type" : 39,
      "exported" : true
    }, {
      "name" : "Read",
      "package" : 8,
      "type" : 42,
      "exported" : true
    }, {
      "name" : "Wrapf",
      "package" : 5,
      "type" : 67,
      "exported" : true
    } ],
    "line-end" : 94,
    "line-start" : 64,
    "names" : [ "unmarshalBytes" ],
    "package" : 0,
    "packages" : [ {
      "name" : "ebpf",
      "path" : "github.com/cilium/ebpf"
    }, {
      "name" : "reflect",
      "path" : "reflect"
    }, {
      "name" : "unsafe",
      "path" : "unsafe"
    }, {
      "name" : "runtime",
      "path" : "runtime"
    }, {
      "name" : "encoding",
      "path" : "encoding"
    }, {
      "name" : "errors",
      "path" : "github.com/pkg/errors"
    }, {
      "name" : "bytes",
      "path" : "bytes"
    }, {
      "name" : "io",
      "path" : "io"
    }, {
      "name" : "binary",
      "path" : "encoding/binary"
    }, {
      "name" : "internal",
      "path" : "github.com/cilium/ebpf/internal"
    } ],
    "params" : [ 1, 2 ],
    "receivers" : [ ],
    "results" : [ 3 ],
    "type" : "function",
    "types" : [ {
      "name" : "func(data interface{}, buf []byte) error",
      "params" : 1,
      "recv" : -1,
      "results" : 5,
      "type" : "Signature",
      "underlying" : 0,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "data",
        "type" : 2
      }, {
        "name" : "buf",
        "type" : 3
      } ],
      "name" : "(data interface{}, buf []byte)",
      "type" : "Tuple",
      "underlying" : 1
    }, {
      "methods" : [ ],
      "name" : "interface{}",
      "type" : "Interface",
      "underlying" : 2
    }, {
      "elem" : 4,
      "name" : "[]byte",
      "type" : "Slice",
      "underlying" : 3
    }, {
      "name" : "byte",
      "type" : "Basic",
      "underlying" : 4
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 6
      } ],
      "name" : "(error)",
      "type" : "Tuple",
      "underlying" : 5
    }, {
      "local-name" : "error",
      "name" : "error",
      "package" : -1,
      "type" : "Named",
      "underlying" : 7
    }, {
      "methods" : [ {
        "name" : "Error",
        "type" : 8
      } ],
      "name" : "interface{Error() string}",
      "type" : "Interface",
      "underlying" : 7
    }, {
      "name" : "(error) func() string",
      "params" : 9,
      "recv" : 0,
      "results" : 10,
      "type" : "Signature",
      "underlying" : 8,
      "variadic" : false
    }, {
      "fields" : [ ],
      "name" : "()",
      "type" : "Tuple",
      "underlying" : 9
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 11
      } ],
      "name" : "(string)",
      "type" : "Tuple",
      "underlying" : 10
    }, {
      "name" : "string",
      "type" : "Basic",
      "underlying" : 11
    }, {
      "elem" : 13,
      "name" : "*reflect.SliceHeader",
      "type" : "Pointer",
      "underlying" : 12
    }, {
      "local-name" : "SliceHeader",
      "name" : "reflect.SliceHeader",
      "package" : 1,
      "type" : "Named",
      "underlying" : 14
    }, {
      "fields" : [ {
        "name" : "Data",
        "type" : 15
      }, {
        "name" : "Len",
        "type" : 16
      }, {
        "name" : "Cap",
        "type" : 16
      } ],
      "name" : "struct{Data uintptr; Len int; Cap int}",
      "type" : "Struct",
      "underlying" : 14
    }, {
      "name" : "uintptr",
      "type" : "Basic",
      "underlying" : 15
    }, {
      "name" : "int",
      "type" : "Basic",
      "underlying" : 16
    }, {
      "local-name" : "Pointer",
      "name" : "unsafe.Pointer",
      "package" : 2,
      "type" : "Basic",
      "underlying" : 17
    }, {
      "name" : "func([]byte) int",
      "params" : 19,
      "recv" : -1,
      "results" : 20,
      "type" : "Signature",
      "underlying" : 18,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 3
      } ],
      "name" : "([]byte)",
      "type" : "Tuple",
      "underlying" : 19
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 16
      } ],
      "name" : "(int)",
      "type" : "Tuple",
      "underlying" : 20
    }, {
      "elem" : 3,
      "name" : "*[]byte",
      "type" : "Pointer",
      "underlying" : 21
    }, {
      "name" : "func([]byte, []byte) int",
      "params" : 23,
      "recv" : -1,
      "results" : 20,
      "type" : "Signature",
      "underlying" : 22,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 3
      }, {
        "name" : "",
        "type" : 3
      } ],
      "name" : "([]byte, []byte)",
      "type" : "Tuple",
      "underlying" : 23
    }, {
      "name" : "func(x interface{})",
      "params" : 25,
      "recv" : -1,
      "results" : 9,
      "type" : "Signature",
      "underlying" : 24,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "x",
        "type" : 2
      } ],
      "name" : "(x interface{})",
      "type" : "Tuple",
      "underlying" : 25
    }, {
      "name" : "untyped nil",
      "type" : "Basic",
      "underlying" : 26
    }, {
      "name" : "func(data []byte) error",
      "params" : 28,
      "recv" : -1,
      "results" : 5,
      "type" : "Signature",
      "underlying" : 27,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "data",
        "type" : 3
      } ],
      "name" : "(data []byte)",
      "type" : "Tuple",
      "underlying" : 28
    }, {
      "local-name" : "BinaryUnmarshaler",
      "name" : "encoding.BinaryUnmarshaler",
      "package" : 4,
      "type" : "Named",
      "underlying" : 30
    }, {
      "methods" : [ {
        "name" : "UnmarshalBinary",
        "type" : 31
      } ],
      "name" : "interface{UnmarshalBinary(data []byte) error}",
      "type" : "Interface",
      "underlying" : 30
    }, {
      "name" : "(encoding.BinaryUnmarshaler) func(data []byte) error",
      "params" : 28,
      "recv" : 10,
      "results" : 5,
      "type" : "Signature",
      "underlying" : 31,
      "variadic" : false
    }, {
      "elem" : 11,
      "name" : "*string",
      "type" : "Pointer",
      "underlying" : 32
    }, {
      "name" : "func(message string) error",
      "params" : 34,
      "recv" : -1,
      "results" : 5,
      "type" : "Signature",
      "underlying" : 33,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "message",
        "type" : 11
      } ],
      "name" : "(message string)",
      "type" : "Tuple",
      "underlying" : 34
    }, {
      "elem" : 36,
      "name" : "*bytes.Reader",
      "type" : "Pointer",
      "underlying" : 35
    }, {
      "local-name" : "Reader",
      "name" : "bytes.Reader",
      "package" : 6,
      "type" : "Named",
      "underlying" : 37
    }, {
      "fields" : [ {
        "name" : "s",
        "type" : 3
      }, {
        "name" : "i",
        "type" : 38
      }, {
        "name" : "prevRune",
        "type" : 16
      } ],
      "name" : "struct{s []byte; i int64; prevRune int}",
      "type" : "Struct",
      "underlying" : 37
    }, {
      "name" : "int64",
      "type" : "Basic",
      "underlying" : 38
    }, {
      "name" : "func(b []byte) *bytes.Reader",
      "params" : 40,
      "recv" : -1,
      "results" : 41,
      "type" : "Signature",
      "underlying" : 39,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "b",
        "type" : 3
      } ],
      "name" : "(b []byte)",
      "type" : "Tuple",
      "underlying" : 40
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 35
      } ],
      "name" : "(*bytes.Reader)",
      "type" : "Tuple",
      "underlying" : 41
    }, {
      "name" : "func(r io.Reader, order encoding/binary.ByteOrder, data interface{}) error",
      "params" : 43,
      "recv" : -1,
      "results" : 5,
      "type" : "Signature",
      "underlying" : 42,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "r",
        "type" : 44
      }, {
        "name" : "order",
        "type" : 49
      }, {
        "name" : "data",
        "type" : 2
      } ],
      "name" : "(r io.Reader, order encoding/binary.ByteOrder, data interface{})",
      "type" : "Tuple",
      "underlying" : 43
    }, {
      "local-name" : "Reader",
      "name" : "io.Reader",
      "package" : 7,
      "type" : "Named",
      "underlying" : 45
    }, {
      "methods" : [ {
        "name" : "Read",
        "type" : 46
      } ],
      "name" : "interface{Read(p []byte) (n int, err error)}",
      "type" : "Interface",
      "underlying" : 45
    }, {
      "name" : "(io.Reader) func(p []byte) (n int, err error)",
      "params" : 47,
      "recv" : 14,
      "results" : 48,
      "type" : "Signature",
      "underlying" : 46,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "p",
        "type" : 3
      } ],
      "name" : "(p []byte)",
      "type" : "Tuple",
      "underlying" : 47
    }, {
      "fields" : [ {
        "name" : "n",
        "type" : 16
      }, {
        "name" : "err",
        "type" : 6
      } ],
      "name" : "(n int, err error)",
      "type" : "Tuple",
      "underlying" : 48
    }, {
      "local-name" : "ByteOrder",
      "name" : "encoding/binary.ByteOrder",
      "package" : 8,
      "type" : "Named",
      "underlying" : 50
    }, {
      "methods" : [ {
        "name" : "PutUint16",
        "type" : 51
      }, {
        "name" : "PutUint32",
        "type" : 54
      }, {
        "name" : "PutUint64",
        "type" : 57
      }, {
        "name" : "String",
        "type" : 60
      }, {
        "name" : "Uint16",
        "type" : 61
      }, {
        "name" : "Uint32",
        "type" : 63
      }, {
        "name" : "Uint64",
        "type" : 65
      } ],
      "name" : "interface{PutUint16([]byte, uint16); PutUint32([]byte, uint32); PutUint64([]byte, uint64); String() string; Uint16([]byte) uint16; Uint32([]byte) uint32; Uint64([]byte) uint64}",
      "type" : "Interface",
      "underlying" : 50
    }, {
      "name" : "(encoding/binary.ByteOrder) func([]byte, uint16)",
      "params" : 52,
      "recv" : 15,
      "results" : 9,
      "type" : "Signature",
      "underlying" : 51,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 3
      }, {
        "name" : "",
        "type" : 53
      } ],
      "name" : "([]byte, uint16)",
      "type" : "Tuple",
      "underlying" : 52
    }, {
      "name" : "uint16",
      "type" : "Basic",
      "underlying" : 53
    }, {
      "name" : "(encoding/binary.ByteOrder) func([]byte, uint32)",
      "params" : 55,
      "recv" : 16,
      "results" : 9,
      "type" : "Signature",
      "underlying" : 54,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 3
      }, {
        "name" : "",
        "type" : 56
      } ],
      "name" : "([]byte, uint32)",
      "type" : "Tuple",
      "underlying" : 55
    }, {
      "name" : "uint32",
      "type" : "Basic",
      "underlying" : 56
    }, {
      "name" : "(encoding/binary.ByteOrder) func([]byte, uint64)",
      "params" : 58,
      "recv" : 17,
      "results" : 9,
      "type" : "Signature",
      "underlying" : 57,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 3
      }, {
        "name" : "",
        "type" : 59
      } ],
      "name" : "([]byte, uint64)",
      "type" : "Tuple",
      "underlying" : 58
    }, {
      "name" : "uint64",
      "type" : "Basic",
      "underlying" : 59
    }, {
      "name" : "(encoding/binary.ByteOrder) func() string",
      "params" : 9,
      "recv" : 18,
      "results" : 10,
      "type" : "Signature",
      "underlying" : 60,
      "variadic" : false
    }, {
      "name" : "(encoding/binary.ByteOrder) func([]byte) uint16",
      "params" : 19,
      "recv" : 19,
      "results" : 62,
      "type" : "Signature",
      "underlying" : 61,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 53
      } ],
      "name" : "(uint16)",
      "type" : "Tuple",
      "underlying" : 62
    }, {
      "name" : "(encoding/binary.ByteOrder) func([]byte) uint32",
      "params" : 19,
      "recv" : 20,
      "results" : 64,
      "type" : "Signature",
      "underlying" : 63,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 56
      } ],
      "name" : "(uint32)",
      "type" : "Tuple",
      "underlying" : 64
    }, {
      "name" : "(encoding/binary.ByteOrder) func([]byte) uint64",
      "params" : 19,
      "recv" : 21,
      "results" : 66,
      "type" : "Signature",
      "underlying" : 65,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 59
      } ],
      "name" : "(uint64)",
      "type" : "Tuple",
      "underlying" : 66
    }, {
      "name" : "func(err error, format string, args ...interface{}) error",
      "params" : 68,
      "recv" : -1,
      "results" : 5,
      "type" : "Signature",
      "underlying" : 67,
      "variadic" : true
    }, {
      "fields" : [ {
        "name" : "err",
        "type" : 6
      }, {
        "name" : "format",
        "type" : 11
      }, {
        "name" : "args",
        "type" : 69
      } ],
      "name" : "(err error, format string, args []interface{})",
      "type" : "Tuple",
      "underlying" : 68
    }, {
      "elem" : 2,
      "name" : "[]interface{}",
      "type" : "Slice",
      "underlying" : 69
    } ],
    "variables" : [ {
      "name" : "",
      "package" : -1,
      "type" : 6,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "data",
      "package" : 0,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "buf",
      "package" : 0,
      "type" : 3,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "[res0]",
      "package" : 0,
      "type" : 6,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "Data",
      "package" : 1,
      "type" : 15,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "value",
      "package" : 0,
      "type" : 17,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "Len",
      "package" : 1,
      "type" : 16,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "Cap",
      "package" : 1,
      "type" : 16,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "sh",
      "package" : 0,
      "type" : 12,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "dst",
      "package" : 0,
      "type" : 3,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 4,
      "type" : 29,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "value",
      "package" : 0,
      "type" : 29,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "value",
      "package" : 0,
      "type" : 32,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "value",
      "package" : 0,
      "type" : 21,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 7,
      "type" : 44,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 8,
      "type" : 49,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 8,
      "type" : 49,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 8,
      "type" : 49,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 8,
      "type" : 49,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 8,
      "type" : 49,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 8,
      "type" : 49,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 8,
      "type" : 49,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "rd",
      "package" : 0,
      "type" : 35,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "NativeEndian",
      "package" : 9,
      "type" : 49,
      "exported" : true,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "value",
      "package" : 0,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "err",
      "package" : 0,
      "type" : 6,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "value",
      "package" : 0,
      "type" : 3,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "value",
      "package" : 0,
      "type" : 11,
      "exported" : false,
      "embedded" : false,
      "field" : false
    } ]
  },
  "go-version" : "1.14.3"
}