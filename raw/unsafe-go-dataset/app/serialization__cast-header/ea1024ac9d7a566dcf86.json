{
  "usage" : {
    "file" : "label.go",
    "label1" : "cast-header",
    "label2" : "serialization",
    "line" : "118",
    "module" : "golang.org/x/tools",
    "pkg" : "golang.org/x/tools/internal/event/label",
    "project" : "mattermost/mattermost-server",
    "snippet" : "hdr.Data = uintptr(t.untyped.(unsafe.Pointer))",
    "version" : "v0.0.0-20200428021058-7ae4988eb4d9"
  },
  "cfg" : {
    "blocks" : [ {
      "update-vars" : [ ],
      "successors" : [ 2 ],
      "in-vars" : [ 4 ],
      "exit" : false,
      "out-vars" : [ 4 ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[entry]",
      "entry" : true,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ ],
      "in-vars" : [ ],
      "exit" : true,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[exit]",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 3 ],
      "in-vars" : [ 4 ],
      "exit" : false,
      "out-vars" : [ 4, 6 ],
      "decl-vars" : [ 6 ],
      "line-start" : 116,
      "ast" : {
        "kind" : "statement",
        "target" : {
          "kind" : "decl",
          "specs" : [ {
            "comments" : [ ],
            "declared-type" : {
              "go-type" : 3,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 3,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "string"
              }
            },
            "kind" : "spec",
            "names" : [ {
              "ident-kind" : "NoKind",
              "kind" : "ident",
              "value" : "v"
            } ],
            "type" : "var",
            "values" : [ ]
          } ],
          "type" : "var"
        },
        "type" : "declaration"
      },
      "assign-vars" : [ ],
      "line-end" : 116,
      "code" : "var v string",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 4 ],
      "in-vars" : [ 4, 6 ],
      "exit" : false,
      "out-vars" : [ 7, 4 ],
      "decl-vars" : [ 7 ],
      "line-start" : 117,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "hdr"
          }
        } ],
        "right" : [ {
          "coerced-to" : {
            "contained" : {
              "go-type" : 25,
              "kind" : "type",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 2,
                "value" : "reflect"
              },
              "type" : "identifier",
              "value" : {
                "go-type" : 25,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "StringHeader"
              }
            },
            "go-type" : 24,
            "kind" : "type",
            "type" : "pointer"
          },
          "go-type" : 24,
          "kind" : "expression",
          "target" : {
            "coerced-to" : {
              "go-type" : 28,
              "kind" : "type",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 3,
                "value" : "unsafe"
              },
              "type" : "identifier",
              "value" : {
                "go-type" : 28,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "Pointer"
              }
            },
            "go-type" : 28,
            "kind" : "expression",
            "target" : {
              "go-type" : 29,
              "kind" : "expression",
              "operator" : "&",
              "target" : {
                "go-type" : 3,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "v",
                  "variable" : 6
                }
              },
              "type" : "unary"
            },
            "type" : "cast"
          },
          "type" : "cast"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 117,
      "code" : "hdr := (*reflect.StringHeader)(unsafe.Pointer(&v))",
      "entry" : false,
      "use-vars" : [ 6 ]
    }, {
      "update-vars" : [ 7 ],
      "successors" : [ 5 ],
      "in-vars" : [ 4, 7 ],
      "exit" : false,
      "out-vars" : [ 7, 4 ],
      "decl-vars" : [ ],
      "line-start" : 118,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "Data",
            "variable" : 8
          },
          "go-type" : 27,
          "kind" : "expression",
          "target" : {
            "go-type" : 24,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "hdr",
              "variable" : 7
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "coerced-to" : {
            "go-type" : 27,
            "kind" : "type",
            "type" : "identifier",
            "value" : {
              "go-type" : 27,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "uintptr"
            }
          },
          "go-type" : 27,
          "kind" : "expression",
          "target" : {
            "asserted" : {
              "go-type" : 28,
              "kind" : "type",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 3,
                "value" : "unsafe"
              },
              "type" : "identifier",
              "value" : {
                "go-type" : 28,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "Pointer"
              }
            },
            "go-type" : 28,
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "untyped",
                "variable" : 9
              },
              "go-type" : 23,
              "kind" : "expression",
              "target" : {
                "go-type" : 4,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "t",
                  "variable" : 4
                }
              },
              "type" : "selector"
            },
            "type" : "type-assert"
          },
          "type" : "cast"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 118,
      "code" : "hdr.Data = uintptr(t.untyped.(unsafe.Pointer))",
      "entry" : false,
      "use-vars" : [ 4, 7 ]
    }, {
      "update-vars" : [ 7 ],
      "successors" : [ 6 ],
      "in-vars" : [ 7, 4 ],
      "exit" : false,
      "out-vars" : [ 7 ],
      "decl-vars" : [ ],
      "line-start" : 119,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "Len",
            "variable" : 10
          },
          "go-type" : 18,
          "kind" : "expression",
          "target" : {
            "go-type" : 24,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "hdr",
              "variable" : 7
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "coerced-to" : {
            "go-type" : 18,
            "kind" : "type",
            "type" : "identifier",
            "value" : {
              "go-type" : 18,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "int"
            }
          },
          "go-type" : 18,
          "kind" : "expression",
          "target" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "packed",
              "variable" : 11
            },
            "go-type" : 22,
            "kind" : "expression",
            "target" : {
              "go-type" : 4,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "t",
                "variable" : 4
              }
            },
            "type" : "selector"
          },
          "type" : "cast"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 119,
      "code" : "hdr.Len = int(t.packed)",
      "entry" : false,
      "use-vars" : [ 7, 4 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 7 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 120,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 3,
          "kind" : "expression",
          "target" : {
            "coerced-to" : {
              "contained" : {
                "go-type" : 3,
                "kind" : "type",
                "type" : "identifier",
                "value" : {
                  "go-type" : 3,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "string"
                }
              },
              "go-type" : 29,
              "kind" : "type",
              "type" : "pointer"
            },
            "go-type" : 29,
            "kind" : "expression",
            "target" : {
              "coerced-to" : {
                "go-type" : 28,
                "kind" : "type",
                "qualifier" : {
                  "ident-kind" : "PkgName",
                  "kind" : "ident",
                  "package" : 3,
                  "value" : "unsafe"
                },
                "type" : "identifier",
                "value" : {
                  "go-type" : 28,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "Pointer"
                }
              },
              "go-type" : 28,
              "kind" : "expression",
              "target" : {
                "go-type" : 24,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "hdr",
                  "variable" : 7
                }
              },
              "type" : "cast"
            },
            "type" : "cast"
          },
          "type" : "star"
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 120,
      "code" : "return *(*string)(unsafe.Pointer(hdr))",
      "entry" : false,
      "use-vars" : [ 7 ]
    } ],
    "code" : "// UnpackString assumes the label was built using LabelOfString and returns the\n// value that was passed to that constructor.\n// This method is for implementing new key types, for type safety normal\n// access should be done with the From method of the key.\nfunc (t Label) UnpackString() string {\n\tvar v string\n\thdr := (*reflect.StringHeader)(unsafe.Pointer(&v))\n\thdr.Data = uintptr(t.untyped.(unsafe.Pointer))\n\thdr.Len = int(t.packed)\n\treturn *(*string)(unsafe.Pointer(hdr))\n}",
    "defines" : [ 0 ],
    "functions" : [ {
      "name" : "UnpackString",
      "package" : 0,
      "type" : 0,
      "exported" : true
    } ],
    "line-end" : 121,
    "line-start" : 115,
    "names" : [ "UnpackString" ],
    "package" : 0,
    "packages" : [ {
      "name" : "label",
      "path" : "golang.org/x/tools/internal/event/label"
    }, {
      "name" : "io",
      "path" : "io"
    }, {
      "name" : "reflect",
      "path" : "reflect"
    }, {
      "name" : "unsafe",
      "path" : "unsafe"
    } ],
    "params" : [ ],
    "receivers" : [ 4 ],
    "results" : [ 5 ],
    "type" : "function",
    "types" : [ {
      "name" : "(golang.org/x/tools/internal/event/label.Label) func() string",
      "params" : 1,
      "recv" : 4,
      "results" : 2,
      "type" : "Signature",
      "underlying" : 0,
      "variadic" : false
    }, {
      "fields" : [ ],
      "name" : "()",
      "type" : "Tuple",
      "underlying" : 1
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 3
      } ],
      "name" : "(string)",
      "type" : "Tuple",
      "underlying" : 2
    }, {
      "name" : "string",
      "type" : "Basic",
      "underlying" : 3
    }, {
      "local-name" : "Label",
      "name" : "golang.org/x/tools/internal/event/label.Label",
      "package" : 0,
      "type" : "Named",
      "underlying" : 5
    }, {
      "fields" : [ {
        "name" : "key",
        "type" : 6
      }, {
        "name" : "packed",
        "type" : 22
      }, {
        "name" : "untyped",
        "type" : 23
      } ],
      "name" : "struct{key golang.org/x/tools/internal/event/label.Key; packed uint64; untyped interface{}}",
      "type" : "Struct",
      "underlying" : 5
    }, {
      "local-name" : "Key",
      "name" : "golang.org/x/tools/internal/event/label.Key",
      "package" : 0,
      "type" : "Named",
      "underlying" : 7
    }, {
      "methods" : [ {
        "name" : "Description",
        "type" : 8
      }, {
        "name" : "Format",
        "type" : 9
      }, {
        "name" : "Name",
        "type" : 8
      } ],
      "name" : "interface{Description() string; Format(w io.Writer, buf []byte, l golang.org/x/tools/internal/event/label.Label); Name() string}",
      "type" : "Interface",
      "underlying" : 7
    }, {
      "name" : "(golang.org/x/tools/internal/event/label.Key) func() string",
      "params" : 1,
      "recv" : 0,
      "results" : 2,
      "type" : "Signature",
      "underlying" : 8,
      "variadic" : false
    }, {
      "name" : "(golang.org/x/tools/internal/event/label.Key) func(w io.Writer, buf []byte, l golang.org/x/tools/internal/event/label.Label)",
      "params" : 10,
      "recv" : 3,
      "results" : 1,
      "type" : "Signature",
      "underlying" : 9,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "w",
        "type" : 11
      }, {
        "name" : "buf",
        "type" : 15
      }, {
        "name" : "l",
        "type" : 4
      } ],
      "name" : "(w io.Writer, buf []byte, l golang.org/x/tools/internal/event/label.Label)",
      "type" : "Tuple",
      "underlying" : 10
    }, {
      "local-name" : "Writer",
      "name" : "io.Writer",
      "package" : 1,
      "type" : "Named",
      "underlying" : 12
    }, {
      "methods" : [ {
        "name" : "Write",
        "type" : 13
      } ],
      "name" : "interface{Write(p []byte) (n int, err error)}",
      "type" : "Interface",
      "underlying" : 12
    }, {
      "name" : "(io.Writer) func(p []byte) (n int, err error)",
      "params" : 14,
      "recv" : 2,
      "results" : 17,
      "type" : "Signature",
      "underlying" : 13,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "p",
        "type" : 15
      } ],
      "name" : "(p []byte)",
      "type" : "Tuple",
      "underlying" : 14
    }, {
      "elem" : 16,
      "name" : "[]byte",
      "type" : "Slice",
      "underlying" : 15
    }, {
      "name" : "byte",
      "type" : "Basic",
      "underlying" : 16
    }, {
      "fields" : [ {
        "name" : "n",
        "type" : 18
      }, {
        "name" : "err",
        "type" : 19
      } ],
      "name" : "(n int, err error)",
      "type" : "Tuple",
      "underlying" : 17
    }, {
      "name" : "int",
      "type" : "Basic",
      "underlying" : 18
    }, {
      "local-name" : "error",
      "name" : "error",
      "package" : -1,
      "type" : "Named",
      "underlying" : 20
    }, {
      "methods" : [ {
        "name" : "Error",
        "type" : 21
      } ],
      "name" : "interface{Error() string}",
      "type" : "Interface",
      "underlying" : 20
    }, {
      "name" : "(error) func() string",
      "params" : 1,
      "recv" : 1,
      "results" : 2,
      "type" : "Signature",
      "underlying" : 21,
      "variadic" : false
    }, {
      "name" : "uint64",
      "type" : "Basic",
      "underlying" : 22
    }, {
      "methods" : [ ],
      "name" : "interface{}",
      "type" : "Interface",
      "underlying" : 23
    }, {
      "elem" : 25,
      "name" : "*reflect.StringHeader",
      "type" : "Pointer",
      "underlying" : 24
    }, {
      "local-name" : "StringHeader",
      "name" : "reflect.StringHeader",
      "package" : 2,
      "type" : "Named",
      "underlying" : 26
    }, {
      "fields" : [ {
        "name" : "Data",
        "type" : 27
      }, {
        "name" : "Len",
        "type" : 18
      } ],
      "name" : "struct{Data uintptr; Len int}",
      "type" : "Struct",
      "underlying" : 26
    }, {
      "name" : "uintptr",
      "type" : "Basic",
      "underlying" : 27
    }, {
      "local-name" : "Pointer",
      "name" : "unsafe.Pointer",
      "package" : 3,
      "type" : "Basic",
      "underlying" : 28
    }, {
      "elem" : 3,
      "name" : "*string",
      "type" : "Pointer",
      "underlying" : 29
    } ],
    "variables" : [ {
      "name" : "",
      "package" : 0,
      "type" : 6,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : -1,
      "type" : 19,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 1,
      "type" : 11,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 0,
      "type" : 6,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "t",
      "package" : 0,
      "type" : 4,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "[res0]",
      "package" : 0,
      "type" : 3,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "v",
      "package" : 0,
      "type" : 3,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "hdr",
      "package" : 0,
      "type" : 24,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "Data",
      "package" : 2,
      "type" : 27,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "untyped",
      "package" : 0,
      "type" : 23,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "Len",
      "package" : 2,
      "type" : 18,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "packed",
      "package" : 0,
      "type" : 22,
      "exported" : false,
      "embedded" : false,
      "field" : true
    } ]
  },
  "go-version" : "1.14.3"
}