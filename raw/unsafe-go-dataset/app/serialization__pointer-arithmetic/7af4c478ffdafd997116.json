{
  "usage" : {
    "file" : "helper_unsafe.go",
    "label1" : "pointer-arithmetic",
    "label2" : "serialization",
    "line" : "87",
    "module" : "github.com/hashicorp/go-msgpack",
    "pkg" : "github.com/hashicorp/go-msgpack/codec",
    "project" : "mattermost/mattermost-server",
    "snippet" : "var ptr unsafe.Pointer",
    "version" : "v1.1.5"
  },
  "cfg" : {
    "blocks" : [ {
      "update-vars" : [ ],
      "successors" : [ 2 ],
      "in-vars" : [ 0, 2 ],
      "exit" : false,
      "out-vars" : [ 0, 2 ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[entry]",
      "entry" : true,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ ],
      "in-vars" : [ ],
      "exit" : true,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[exit]",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 3 ],
      "in-vars" : [ 0, 2 ],
      "exit" : false,
      "out-vars" : [ 3, 2 ],
      "decl-vars" : [ 3 ],
      "line-start" : 85,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "urv"
          }
        } ],
        "right" : [ {
          "coerced-to" : {
            "contained" : {
              "go-type" : 27,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 27,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "unsafeReflectValue"
              }
            },
            "go-type" : 26,
            "kind" : "type",
            "type" : "pointer"
          },
          "go-type" : 26,
          "kind" : "expression",
          "target" : {
            "coerced-to" : {
              "go-type" : 13,
              "kind" : "type",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 2,
                "value" : "unsafe"
              },
              "type" : "identifier",
              "value" : {
                "go-type" : 13,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "Pointer"
              }
            },
            "go-type" : 13,
            "kind" : "expression",
            "target" : {
              "go-type" : 29,
              "kind" : "expression",
              "operator" : "&",
              "target" : {
                "go-type" : 2,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "rv",
                  "variable" : 0
                }
              },
              "type" : "unary"
            },
            "type" : "cast"
          },
          "type" : "cast"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 85,
      "code" : "urv := (*unsafeReflectValue)(unsafe.Pointer(&rv))",
      "entry" : false,
      "use-vars" : [ 0 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 4 ],
      "in-vars" : [ 3, 2 ],
      "exit" : false,
      "out-vars" : [ 2, 3 ],
      "decl-vars" : [ 4 ],
      "line-start" : 87,
      "ast" : {
        "kind" : "statement",
        "target" : {
          "kind" : "decl",
          "specs" : [ {
            "comments" : [ ],
            "declared-type" : {
              "go-type" : 13,
              "kind" : "type",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 2,
                "value" : "unsafe"
              },
              "type" : "identifier",
              "value" : {
                "go-type" : 13,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "Pointer"
              }
            },
            "kind" : "spec",
            "names" : [ {
              "ident-kind" : "NoKind",
              "kind" : "ident",
              "value" : "ptr"
            } ],
            "type" : "var",
            "values" : [ ]
          } ],
          "type" : "var"
        },
        "type" : "declaration"
      },
      "assign-vars" : [ ],
      "line-end" : 87,
      "code" : "// true references (map, func, chan, ptr - NOT slice) may be double-referenced as flagIndir\nvar ptr unsafe.Pointer",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 5, 6 ],
      "in-vars" : [ 3, 2 ],
      "exit" : false,
      "out-vars" : [ 3 ],
      "decl-vars" : [ ],
      "line-start" : 88,
      "ast" : {
        "condition" : {
          "go-type" : 15,
          "kind" : "expression",
          "left" : {
            "arguments" : [ {
              "coerced-to" : {
                "go-type" : 17,
                "kind" : "type",
                "type" : "identifier",
                "value" : {
                  "go-type" : 17,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "byte"
                }
              },
              "go-type" : 17,
              "kind" : "expression",
              "target" : {
                "go-type" : 7,
                "kind" : "expression",
                "left" : {
                  "field" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "flag",
                    "variable" : 6
                  },
                  "go-type" : 7,
                  "kind" : "expression",
                  "target" : {
                    "go-type" : 26,
                    "kind" : "expression",
                    "type" : "identifier",
                    "value" : {
                      "ident-kind" : "Var",
                      "kind" : "ident",
                      "value" : "urv",
                      "variable" : 3
                    }
                  },
                  "type" : "selector"
                },
                "operator" : "&",
                "right" : {
                  "go-type" : 7,
                  "kind" : "constant",
                  "value" : {
                    "type" : "INT",
                    "value" : "31"
                  }
                },
                "type" : "binary"
              },
              "type" : "cast"
            } ],
            "ellipsis" : false,
            "function" : {
              "field" : {
                "function" : 1,
                "ident-kind" : "Func",
                "kind" : "ident",
                "value" : "isset"
              },
              "go-type" : 30,
              "kind" : "expression",
              "target" : {
                "go-type" : 24,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "refBitset",
                  "variable" : 2
                }
              },
              "type" : "selector"
            },
            "go-type" : 15,
            "kind" : "expression",
            "type" : "call"
          },
          "operator" : "&&",
          "right" : {
            "go-type" : 15,
            "kind" : "expression",
            "left" : {
              "go-type" : 7,
              "kind" : "expression",
              "left" : {
                "field" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "flag",
                  "variable" : 6
                },
                "go-type" : 7,
                "kind" : "expression",
                "target" : {
                  "go-type" : 26,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "urv",
                    "variable" : 3
                  }
                },
                "type" : "selector"
              },
              "operator" : "&",
              "right" : {
                "go-type" : 7,
                "kind" : "constant",
                "value" : {
                  "type" : "INT",
                  "value" : "128"
                }
              },
              "type" : "binary"
            },
            "operator" : "!=",
            "right" : {
              "go-type" : 7,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "0"
              }
            },
            "type" : "binary"
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 92,
      "code" : "if refBitset.isset(byte(urv.flag&(1<<5-1))) && urv.flag&unsafeFlagIndir != 0 {\n\tptr = *(*unsafe.Pointer)(urv.ptr)\n} else {\n\tptr = urv.ptr\n}",
      "entry" : false,
      "use-vars" : [ 2, 3 ]
    }, {
      "update-vars" : [ 4 ],
      "successors" : [ 7 ],
      "in-vars" : [ 3 ],
      "exit" : false,
      "out-vars" : [ 4, 3 ],
      "decl-vars" : [ ],
      "line-start" : 89,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 13,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "ptr",
            "variable" : 4
          }
        } ],
        "right" : [ {
          "go-type" : 13,
          "kind" : "expression",
          "target" : {
            "coerced-to" : {
              "contained" : {
                "go-type" : 13,
                "kind" : "type",
                "qualifier" : {
                  "ident-kind" : "PkgName",
                  "kind" : "ident",
                  "package" : 2,
                  "value" : "unsafe"
                },
                "type" : "identifier",
                "value" : {
                  "go-type" : 13,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "Pointer"
                }
              },
              "go-type" : 34,
              "kind" : "type",
              "type" : "pointer"
            },
            "go-type" : 34,
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "ptr",
                "variable" : 7
              },
              "go-type" : 13,
              "kind" : "expression",
              "target" : {
                "go-type" : 26,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "urv",
                  "variable" : 3
                }
              },
              "type" : "selector"
            },
            "type" : "cast"
          },
          "type" : "star"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 4 ],
      "line-end" : 89,
      "code" : "ptr = *(*unsafe.Pointer)(urv.ptr)",
      "entry" : false,
      "use-vars" : [ 3 ]
    }, {
      "update-vars" : [ 4 ],
      "successors" : [ 7 ],
      "in-vars" : [ 3 ],
      "exit" : false,
      "out-vars" : [ 4, 3 ],
      "decl-vars" : [ ],
      "line-start" : 91,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 13,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "ptr",
            "variable" : 4
          }
        } ],
        "right" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "ptr",
            "variable" : 7
          },
          "go-type" : 13,
          "kind" : "expression",
          "target" : {
            "go-type" : 26,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "urv",
              "variable" : 3
            }
          },
          "type" : "selector"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 4 ],
      "line-end" : 91,
      "code" : "ptr = urv.ptr",
      "entry" : false,
      "use-vars" : [ 3 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 3, 4 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 93,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 23,
          "kind" : "expression",
          "target" : {
            "coerced-to" : {
              "contained" : {
                "go-type" : 23,
                "incomplete" : false,
                "kind" : "type",
                "methods" : [ ],
                "type" : "interface"
              },
              "go-type" : 35,
              "kind" : "type",
              "type" : "pointer"
            },
            "go-type" : 35,
            "kind" : "expression",
            "target" : {
              "coerced-to" : {
                "go-type" : 13,
                "kind" : "type",
                "qualifier" : {
                  "ident-kind" : "PkgName",
                  "kind" : "ident",
                  "package" : 2,
                  "value" : "unsafe"
                },
                "type" : "identifier",
                "value" : {
                  "go-type" : 13,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "Pointer"
                }
              },
              "go-type" : 13,
              "kind" : "expression",
              "target" : {
                "go-type" : 36,
                "kind" : "expression",
                "operator" : "&",
                "target" : {
                  "declared" : {
                    "go-type" : 37,
                    "kind" : "type",
                    "type" : "identifier",
                    "value" : {
                      "go-type" : 37,
                      "ident-kind" : "TypeName",
                      "kind" : "ident",
                      "value" : "unsafeIntf"
                    }
                  },
                  "go-type" : 37,
                  "kind" : "literal",
                  "type" : "composite",
                  "values" : [ {
                    "go-type" : -1,
                    "key" : {
                      "go-type" : -1,
                      "kind" : "expression",
                      "type" : "identifier",
                      "value" : {
                        "ident-kind" : "Var",
                        "kind" : "ident",
                        "value" : "typ",
                        "variable" : 8
                      }
                    },
                    "kind" : "expression",
                    "type" : "key-value",
                    "value" : {
                      "field" : {
                        "ident-kind" : "Var",
                        "kind" : "ident",
                        "value" : "typ",
                        "variable" : 9
                      },
                      "go-type" : 13,
                      "kind" : "expression",
                      "target" : {
                        "go-type" : 26,
                        "kind" : "expression",
                        "type" : "identifier",
                        "value" : {
                          "ident-kind" : "Var",
                          "kind" : "ident",
                          "value" : "urv",
                          "variable" : 3
                        }
                      },
                      "type" : "selector"
                    }
                  }, {
                    "go-type" : -1,
                    "key" : {
                      "go-type" : -1,
                      "kind" : "expression",
                      "type" : "identifier",
                      "value" : {
                        "ident-kind" : "Var",
                        "kind" : "ident",
                        "value" : "word",
                        "variable" : 10
                      }
                    },
                    "kind" : "expression",
                    "type" : "key-value",
                    "value" : {
                      "go-type" : 13,
                      "kind" : "expression",
                      "type" : "identifier",
                      "value" : {
                        "ident-kind" : "Var",
                        "kind" : "ident",
                        "value" : "ptr",
                        "variable" : 4
                      }
                    }
                  } ]
                },
                "type" : "unary"
              },
              "type" : "cast"
            },
            "type" : "cast"
          },
          "type" : "star"
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 93,
      "code" : "return *(*interface{})(unsafe.Pointer(&unsafeIntf{typ: urv.typ, word: ptr}))",
      "entry" : false,
      "use-vars" : [ 4, 3 ]
    } ],
    "code" : "func rv2i(rv reflect.Value) interface{} {\n\n\turv := (*unsafeReflectValue)(unsafe.Pointer(&rv))\n\t// true references (map, func, chan, ptr - NOT slice) may be double-referenced as flagIndir\n\tvar ptr unsafe.Pointer\n\tif refBitset.isset(byte(urv.flag&(1<<5-1))) && urv.flag&unsafeFlagIndir != 0 {\n\t\tptr = *(*unsafe.Pointer)(urv.ptr)\n\t} else {\n\t\tptr = urv.ptr\n\t}\n\treturn *(*interface{})(unsafe.Pointer(&unsafeIntf{typ: urv.typ, word: ptr}))\n}",
    "defines" : [ 0 ],
    "functions" : [ {
      "name" : "rv2i",
      "package" : 0,
      "type" : 0,
      "exported" : false
    }, {
      "name" : "isset",
      "package" : 0,
      "type" : 32,
      "exported" : false
    } ],
    "line-end" : 94,
    "line-start" : 79,
    "names" : [ "rv2i" ],
    "package" : 0,
    "packages" : [ {
      "name" : "codec",
      "path" : "github.com/hashicorp/go-msgpack/codec"
    }, {
      "name" : "reflect",
      "path" : "reflect"
    }, {
      "name" : "unsafe",
      "path" : "unsafe"
    } ],
    "params" : [ 0 ],
    "receivers" : [ ],
    "results" : [ 1 ],
    "type" : "function",
    "types" : [ {
      "name" : "func(rv reflect.Value) interface{}",
      "params" : 1,
      "recv" : -1,
      "results" : 22,
      "type" : "Signature",
      "underlying" : 0,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "rv",
        "type" : 2
      } ],
      "name" : "(rv reflect.Value)",
      "type" : "Tuple",
      "underlying" : 1
    }, {
      "local-name" : "Value",
      "name" : "reflect.Value",
      "package" : 1,
      "type" : "Named",
      "underlying" : 3
    }, {
      "fields" : [ {
        "name" : "typ",
        "type" : 4
      }, {
        "name" : "ptr",
        "type" : 13
      }, {
        "name" : "flag",
        "type" : 21
      } ],
      "name" : "struct{typ *reflect.rtype; ptr unsafe.Pointer; reflect.flag}",
      "type" : "Struct",
      "underlying" : 3
    }, {
      "elem" : 5,
      "name" : "*reflect.rtype",
      "type" : "Pointer",
      "underlying" : 4
    }, {
      "local-name" : "rtype",
      "name" : "reflect.rtype",
      "package" : 1,
      "type" : "Named",
      "underlying" : 6
    }, {
      "fields" : [ {
        "name" : "size",
        "type" : 7
      }, {
        "name" : "ptrdata",
        "type" : 7
      }, {
        "name" : "hash",
        "type" : 8
      }, {
        "name" : "tflag",
        "type" : 9
      }, {
        "name" : "align",
        "type" : 10
      }, {
        "name" : "fieldAlign",
        "type" : 10
      }, {
        "name" : "kind",
        "type" : 10
      }, {
        "name" : "equal",
        "type" : 11
      }, {
        "name" : "gcdata",
        "type" : 16
      }, {
        "name" : "str",
        "type" : 18
      }, {
        "name" : "ptrToThis",
        "type" : 20
      } ],
      "name" : "struct{size uintptr; ptrdata uintptr; hash uint32; tflag reflect.tflag; align uint8; fieldAlign uint8; kind uint8; equal func(unsafe.Pointer, unsafe.Pointer) bool; gcdata *byte; str reflect.nameOff; ptrToThis reflect.typeOff}",
      "type" : "Struct",
      "underlying" : 6
    }, {
      "name" : "uintptr",
      "type" : "Basic",
      "underlying" : 7
    }, {
      "name" : "uint32",
      "type" : "Basic",
      "underlying" : 8
    }, {
      "local-name" : "tflag",
      "name" : "reflect.tflag",
      "package" : 1,
      "type" : "Named",
      "underlying" : 10
    }, {
      "name" : "uint8",
      "type" : "Basic",
      "underlying" : 10
    }, {
      "name" : "func(unsafe.Pointer, unsafe.Pointer) bool",
      "params" : 12,
      "recv" : -1,
      "results" : 14,
      "type" : "Signature",
      "underlying" : 11,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 13
      }, {
        "name" : "",
        "type" : 13
      } ],
      "name" : "(unsafe.Pointer, unsafe.Pointer)",
      "type" : "Tuple",
      "underlying" : 12
    }, {
      "local-name" : "Pointer",
      "name" : "unsafe.Pointer",
      "package" : 2,
      "type" : "Basic",
      "underlying" : 13
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 15
      } ],
      "name" : "(bool)",
      "type" : "Tuple",
      "underlying" : 14
    }, {
      "name" : "bool",
      "type" : "Basic",
      "underlying" : 15
    }, {
      "elem" : 17,
      "name" : "*byte",
      "type" : "Pointer",
      "underlying" : 16
    }, {
      "name" : "byte",
      "type" : "Basic",
      "underlying" : 17
    }, {
      "local-name" : "nameOff",
      "name" : "reflect.nameOff",
      "package" : 1,
      "type" : "Named",
      "underlying" : 19
    }, {
      "name" : "int32",
      "type" : "Basic",
      "underlying" : 19
    }, {
      "local-name" : "typeOff",
      "name" : "reflect.typeOff",
      "package" : 1,
      "type" : "Named",
      "underlying" : 19
    }, {
      "local-name" : "flag",
      "name" : "reflect.flag",
      "package" : 1,
      "type" : "Named",
      "underlying" : 7
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 23
      } ],
      "name" : "(interface{})",
      "type" : "Tuple",
      "underlying" : 22
    }, {
      "methods" : [ ],
      "name" : "interface{}",
      "type" : "Interface",
      "underlying" : 23
    }, {
      "local-name" : "bitset256",
      "name" : "github.com/hashicorp/go-msgpack/codec.bitset256",
      "package" : 0,
      "type" : "Named",
      "underlying" : 25
    }, {
      "elem" : 17,
      "name" : "[32]byte",
      "type" : "Array",
      "underlying" : 25
    }, {
      "elem" : 27,
      "name" : "*github.com/hashicorp/go-msgpack/codec.unsafeReflectValue",
      "type" : "Pointer",
      "underlying" : 26
    }, {
      "local-name" : "unsafeReflectValue",
      "name" : "github.com/hashicorp/go-msgpack/codec.unsafeReflectValue",
      "package" : 0,
      "type" : "Named",
      "underlying" : 28
    }, {
      "fields" : [ {
        "name" : "typ",
        "type" : 13
      }, {
        "name" : "ptr",
        "type" : 13
      }, {
        "name" : "flag",
        "type" : 7
      } ],
      "name" : "struct{typ unsafe.Pointer; ptr unsafe.Pointer; flag uintptr}",
      "type" : "Struct",
      "underlying" : 28
    }, {
      "elem" : 2,
      "name" : "*reflect.Value",
      "type" : "Pointer",
      "underlying" : 29
    }, {
      "name" : "func(pos byte) bool",
      "params" : 31,
      "recv" : -1,
      "results" : 14,
      "type" : "Signature",
      "underlying" : 30,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "pos",
        "type" : 17
      } ],
      "name" : "(pos byte)",
      "type" : "Tuple",
      "underlying" : 31
    }, {
      "name" : "(*github.com/hashicorp/go-msgpack/codec.bitset256) func(pos byte) bool",
      "params" : 31,
      "recv" : 5,
      "results" : 14,
      "type" : "Signature",
      "underlying" : 32,
      "variadic" : false
    }, {
      "elem" : 24,
      "name" : "*github.com/hashicorp/go-msgpack/codec.bitset256",
      "type" : "Pointer",
      "underlying" : 33
    }, {
      "elem" : 13,
      "name" : "*unsafe.Pointer",
      "type" : "Pointer",
      "underlying" : 34
    }, {
      "elem" : 23,
      "name" : "*interface{}",
      "type" : "Pointer",
      "underlying" : 35
    }, {
      "elem" : 37,
      "name" : "*github.com/hashicorp/go-msgpack/codec.unsafeIntf",
      "type" : "Pointer",
      "underlying" : 36
    }, {
      "local-name" : "unsafeIntf",
      "name" : "github.com/hashicorp/go-msgpack/codec.unsafeIntf",
      "package" : 0,
      "type" : "Named",
      "underlying" : 38
    }, {
      "fields" : [ {
        "name" : "typ",
        "type" : 13
      }, {
        "name" : "word",
        "type" : 13
      } ],
      "name" : "struct{typ unsafe.Pointer; word unsafe.Pointer}",
      "type" : "Struct",
      "underlying" : 38
    } ],
    "variables" : [ {
      "name" : "rv",
      "package" : 0,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "[res0]",
      "package" : 0,
      "type" : 23,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "refBitset",
      "package" : 0,
      "type" : 24,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "urv",
      "package" : 0,
      "type" : 26,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "ptr",
      "package" : 0,
      "type" : 13,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "x",
      "package" : 0,
      "type" : 33,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "flag",
      "package" : 0,
      "type" : 7,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "ptr",
      "package" : 0,
      "type" : 13,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "typ",
      "package" : 0,
      "type" : 13,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "typ",
      "package" : 0,
      "type" : 13,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "word",
      "package" : 0,
      "type" : 13,
      "exported" : false,
      "embedded" : false,
      "field" : true
    } ]
  },
  "go-version" : "1.14.3"
}