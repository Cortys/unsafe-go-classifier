{
  "usage" : {
    "file" : "mask.go",
    "label1" : "pointer-arithmetic",
    "label2" : "serialization",
    "line" : "24",
    "module" : "github.com/gorilla/websocket",
    "pkg" : "github.com/gorilla/websocket",
    "project" : "kubernetes/kubernetes",
    "snippet" : "if n := int(uintptr(unsafe.Pointer(&b[0]))) % wordSize; n != 0 {",
    "version" : "v1.4.0"
  },
  "cfg" : {
    "blocks" : [ {
      "update-vars" : [ ],
      "successors" : [ 2 ],
      "in-vars" : [ 0, 1, 2 ],
      "exit" : false,
      "out-vars" : [ 0, 1, 2 ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[entry]",
      "entry" : true,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ ],
      "in-vars" : [ ],
      "exit" : true,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[exit]",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 3, 8 ],
      "in-vars" : [ 0, 1, 2 ],
      "exit" : false,
      "out-vars" : [ 0, 1, 2 ],
      "decl-vars" : [ ],
      "line-start" : 15,
      "ast" : {
        "condition" : {
          "go-type" : 7,
          "kind" : "expression",
          "left" : {
            "arguments" : [ {
              "go-type" : 5,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "b",
                "variable" : 2
              }
            } ],
            "ellipsis" : false,
            "function" : {
              "go-type" : 8,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Builtin",
                "kind" : "ident",
                "value" : "len"
              }
            },
            "go-type" : 4,
            "kind" : "expression",
            "type" : "call"
          },
          "operator" : "<",
          "right" : {
            "go-type" : 4,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "16"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 21,
      "code" : "if len(b) < 2*wordSize {\n\tfor i := range b {\n\t\tb[i] ^= key[pos&3]\n\t\tpos++\n\t}\n\treturn pos & 3\n}",
      "entry" : false,
      "use-vars" : [ 2 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 4, 6 ],
      "in-vars" : [ 0, 1, 2 ],
      "exit" : false,
      "out-vars" : [ 0, 1, 2, 4 ],
      "decl-vars" : [ 4 ],
      "line-start" : 16,
      "ast" : {
        "is-assign" : false,
        "key" : {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "i"
          }
        },
        "kind" : "statement",
        "target" : {
          "go-type" : 5,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "b",
            "variable" : 2
          }
        },
        "type" : "range",
        "value" : null
      },
      "assign-vars" : [ ],
      "line-end" : 19,
      "code" : "for i := range b {\n\tb[i] ^= key[pos&3]\n\tpos++\n}",
      "entry" : false,
      "use-vars" : [ 2 ]
    }, {
      "update-vars" : [ 2 ],
      "successors" : [ 5 ],
      "in-vars" : [ 0, 1, 2, 4 ],
      "exit" : false,
      "out-vars" : [ 0, 1, 2 ],
      "decl-vars" : [ ],
      "line-start" : 17,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 3,
          "index" : {
            "go-type" : 4,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "i",
              "variable" : 4
            }
          },
          "kind" : "expression",
          "target" : {
            "go-type" : 5,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "b",
              "variable" : 2
            }
          },
          "type" : "index"
        } ],
        "operator" : "^",
        "right" : [ {
          "go-type" : 3,
          "index" : {
            "go-type" : 4,
            "kind" : "expression",
            "left" : {
              "go-type" : 4,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "pos",
                "variable" : 1
              }
            },
            "operator" : "&",
            "right" : {
              "go-type" : 4,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "3"
              }
            },
            "type" : "binary"
          },
          "kind" : "expression",
          "target" : {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "key",
              "variable" : 0
            }
          },
          "type" : "index"
        } ],
        "type" : "assign-operator"
      },
      "assign-vars" : [ ],
      "line-end" : 17,
      "code" : "b[i] ^= key[pos&3]",
      "entry" : false,
      "use-vars" : [ 1, 2, 4, 0 ]
    }, {
      "update-vars" : [ 1 ],
      "successors" : [ 3 ],
      "in-vars" : [ 1, 2, 0 ],
      "exit" : false,
      "out-vars" : [ 1, 2, 0 ],
      "decl-vars" : [ ],
      "line-start" : 18,
      "ast" : {
        "kind" : "statement",
        "operation" : "++",
        "target" : {
          "go-type" : 4,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "pos",
            "variable" : 1
          }
        },
        "type" : "crement"
      },
      "assign-vars" : [ 1 ],
      "line-end" : 18,
      "code" : "pos++",
      "entry" : false,
      "use-vars" : [ 1 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 1 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 20,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 4,
          "kind" : "expression",
          "left" : {
            "go-type" : 4,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "pos",
              "variable" : 1
            }
          },
          "operator" : "&",
          "right" : {
            "go-type" : 4,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "3"
            }
          },
          "type" : "binary"
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 20,
      "code" : "return pos & 3",
      "entry" : false,
      "use-vars" : [ 1 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 9, 14 ],
      "in-vars" : [ 2, 5, 0, 1 ],
      "exit" : false,
      "out-vars" : [ 5, 0, 1, 2 ],
      "decl-vars" : [ ],
      "line-start" : 24,
      "ast" : {
        "condition" : {
          "go-type" : 7,
          "kind" : "expression",
          "left" : {
            "go-type" : 4,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "n",
              "variable" : 5
            }
          },
          "operator" : "!=",
          "right" : {
            "go-type" : 4,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "0"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 31,
      "code" : "if n := int(uintptr(unsafe.Pointer(&b[0]))) % wordSize; n != 0 {\n\tn = wordSize - n\n\tfor i := range b[:n] {\n\t\tb[i] ^= key[pos&3]\n\t\tpos++\n\t}\n\tb = b[n:]\n}",
      "entry" : false,
      "use-vars" : [ 5 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 7 ],
      "in-vars" : [ 0, 1, 2 ],
      "exit" : false,
      "out-vars" : [ 5, 0, 1, 2 ],
      "decl-vars" : [ 5 ],
      "line-start" : 24,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "n"
          }
        } ],
        "right" : [ {
          "go-type" : 4,
          "kind" : "expression",
          "left" : {
            "coerced-to" : {
              "go-type" : 4,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 4,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "int"
              }
            },
            "go-type" : 4,
            "kind" : "expression",
            "target" : {
              "coerced-to" : {
                "go-type" : 10,
                "kind" : "type",
                "type" : "identifier",
                "value" : {
                  "go-type" : 10,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "uintptr"
                }
              },
              "go-type" : 10,
              "kind" : "expression",
              "target" : {
                "coerced-to" : {
                  "go-type" : 11,
                  "kind" : "type",
                  "qualifier" : {
                    "ident-kind" : "PkgName",
                    "kind" : "ident",
                    "package" : 1,
                    "value" : "unsafe"
                  },
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 11,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "Pointer"
                  }
                },
                "go-type" : 11,
                "kind" : "expression",
                "target" : {
                  "go-type" : 12,
                  "kind" : "expression",
                  "operator" : "&",
                  "target" : {
                    "go-type" : 3,
                    "index" : {
                      "go-type" : 4,
                      "kind" : "constant",
                      "value" : {
                        "type" : "INT",
                        "value" : "0"
                      }
                    },
                    "kind" : "expression",
                    "target" : {
                      "go-type" : 5,
                      "kind" : "expression",
                      "type" : "identifier",
                      "value" : {
                        "ident-kind" : "Var",
                        "kind" : "ident",
                        "value" : "b",
                        "variable" : 2
                      }
                    },
                    "type" : "index"
                  },
                  "type" : "unary"
                },
                "type" : "cast"
              },
              "type" : "cast"
            },
            "type" : "cast"
          },
          "operator" : "%",
          "right" : {
            "go-type" : 4,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "8"
            }
          },
          "type" : "binary"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 24,
      "code" : "n := int(uintptr(unsafe.Pointer(&b[0]))) % wordSize",
      "entry" : false,
      "use-vars" : [ 2 ]
    }, {
      "update-vars" : [ 5 ],
      "successors" : [ 10 ],
      "in-vars" : [ 0, 1, 2, 5 ],
      "exit" : false,
      "out-vars" : [ 5, 0, 1, 2 ],
      "decl-vars" : [ ],
      "line-start" : 25,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 4,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "n",
            "variable" : 5
          }
        } ],
        "right" : [ {
          "go-type" : 4,
          "kind" : "expression",
          "left" : {
            "go-type" : 4,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "8"
            }
          },
          "operator" : "-",
          "right" : {
            "go-type" : 4,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "n",
              "variable" : 5
            }
          },
          "type" : "binary"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 5 ],
      "line-end" : 25,
      "code" : "n = wordSize - n",
      "entry" : false,
      "use-vars" : [ 5 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 11, 13 ],
      "in-vars" : [ 5, 0, 1, 2 ],
      "exit" : false,
      "out-vars" : [ 2, 6, 5, 0, 1 ],
      "decl-vars" : [ 6 ],
      "line-start" : 26,
      "ast" : {
        "is-assign" : false,
        "key" : {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "i"
          }
        },
        "kind" : "statement",
        "target" : {
          "go-type" : 5,
          "type" : "slice",
          "three" : false,
          "high" : {
            "go-type" : 4,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "n",
              "variable" : 5
            }
          },
          "max" : null,
          "kind" : "expression",
          "low" : null,
          "target" : {
            "go-type" : 5,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "b",
              "variable" : 2
            }
          }
        },
        "type" : "range",
        "value" : null
      },
      "assign-vars" : [ ],
      "line-end" : 29,
      "code" : "for i := range b[:n] {\n\tb[i] ^= key[pos&3]\n\tpos++\n}",
      "entry" : false,
      "use-vars" : [ 2, 5 ]
    }, {
      "update-vars" : [ 2 ],
      "successors" : [ 12 ],
      "in-vars" : [ 2, 6, 5, 0, 1 ],
      "exit" : false,
      "out-vars" : [ 2, 5, 0, 1 ],
      "decl-vars" : [ ],
      "line-start" : 27,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 3,
          "index" : {
            "go-type" : 4,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "i",
              "variable" : 6
            }
          },
          "kind" : "expression",
          "target" : {
            "go-type" : 5,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "b",
              "variable" : 2
            }
          },
          "type" : "index"
        } ],
        "operator" : "^",
        "right" : [ {
          "go-type" : 3,
          "index" : {
            "go-type" : 4,
            "kind" : "expression",
            "left" : {
              "go-type" : 4,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "pos",
                "variable" : 1
              }
            },
            "operator" : "&",
            "right" : {
              "go-type" : 4,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "3"
              }
            },
            "type" : "binary"
          },
          "kind" : "expression",
          "target" : {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "key",
              "variable" : 0
            }
          },
          "type" : "index"
        } ],
        "type" : "assign-operator"
      },
      "assign-vars" : [ ],
      "line-end" : 27,
      "code" : "b[i] ^= key[pos&3]",
      "entry" : false,
      "use-vars" : [ 2, 6, 0, 1 ]
    }, {
      "update-vars" : [ 1 ],
      "successors" : [ 10 ],
      "in-vars" : [ 5, 0, 1, 2 ],
      "exit" : false,
      "out-vars" : [ 5, 0, 1, 2 ],
      "decl-vars" : [ ],
      "line-start" : 28,
      "ast" : {
        "kind" : "statement",
        "operation" : "++",
        "target" : {
          "go-type" : 4,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "pos",
            "variable" : 1
          }
        },
        "type" : "crement"
      },
      "assign-vars" : [ 1 ],
      "line-end" : 28,
      "code" : "pos++",
      "entry" : false,
      "use-vars" : [ 1 ]
    }, {
      "update-vars" : [ 2 ],
      "successors" : [ 14 ],
      "in-vars" : [ 5, 0, 1, 2 ],
      "exit" : false,
      "out-vars" : [ 2, 0, 1 ],
      "decl-vars" : [ ],
      "line-start" : 30,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 5,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "b",
            "variable" : 2
          }
        } ],
        "right" : [ {
          "go-type" : 5,
          "type" : "slice",
          "three" : false,
          "high" : null,
          "max" : null,
          "kind" : "expression",
          "low" : {
            "go-type" : 4,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "n",
              "variable" : 5
            }
          },
          "target" : {
            "go-type" : 5,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "b",
              "variable" : 2
            }
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 2 ],
      "line-end" : 30,
      "code" : "b = b[n:]",
      "entry" : false,
      "use-vars" : [ 2, 5 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 15 ],
      "in-vars" : [ 0, 1, 2 ],
      "exit" : false,
      "out-vars" : [ 7, 0, 1, 2 ],
      "decl-vars" : [ 7 ],
      "line-start" : 34,
      "ast" : {
        "kind" : "statement",
        "target" : {
          "kind" : "decl",
          "specs" : [ {
            "comments" : [ ],
            "declared-type" : {
              "element" : {
                "go-type" : 3,
                "kind" : "type",
                "type" : "identifier",
                "value" : {
                  "go-type" : 3,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "byte"
                }
              },
              "go-type" : 13,
              "kind" : "type",
              "length" : {
                "go-type" : 4,
                "kind" : "constant",
                "value" : {
                  "type" : "INT",
                  "value" : "8"
                }
              },
              "type" : "array"
            },
            "kind" : "spec",
            "names" : [ {
              "ident-kind" : "NoKind",
              "kind" : "ident",
              "value" : "k"
            } ],
            "type" : "var",
            "values" : [ ]
          } ],
          "type" : "var"
        },
        "type" : "declaration"
      },
      "assign-vars" : [ ],
      "line-end" : 34,
      "code" : "// Create aligned word size key.\nvar k [wordSize]byte",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 16, 17 ],
      "in-vars" : [ 7, 0, 1, 2 ],
      "exit" : false,
      "out-vars" : [ 7, 0, 1, 8, 2 ],
      "decl-vars" : [ 8 ],
      "line-start" : 35,
      "ast" : {
        "is-assign" : false,
        "key" : {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "i"
          }
        },
        "kind" : "statement",
        "target" : {
          "go-type" : 13,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "k",
            "variable" : 7
          }
        },
        "type" : "range",
        "value" : null
      },
      "assign-vars" : [ ],
      "line-end" : 37,
      "code" : "for i := range k {\n\tk[i] = key[(pos+i)&3]\n}",
      "entry" : false,
      "use-vars" : [ 7 ]
    }, {
      "update-vars" : [ 7 ],
      "successors" : [ 15 ],
      "in-vars" : [ 2, 7, 0, 1, 8 ],
      "exit" : false,
      "out-vars" : [ 7, 0, 1, 2 ],
      "decl-vars" : [ ],
      "line-start" : 36,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 3,
          "index" : {
            "go-type" : 4,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "i",
              "variable" : 8
            }
          },
          "kind" : "expression",
          "target" : {
            "go-type" : 13,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "k",
              "variable" : 7
            }
          },
          "type" : "index"
        } ],
        "right" : [ {
          "go-type" : 3,
          "index" : {
            "go-type" : 4,
            "kind" : "expression",
            "left" : {
              "go-type" : 4,
              "kind" : "expression",
              "target" : {
                "go-type" : 4,
                "kind" : "expression",
                "left" : {
                  "go-type" : 4,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "pos",
                    "variable" : 1
                  }
                },
                "operator" : "+",
                "right" : {
                  "go-type" : 4,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "i",
                    "variable" : 8
                  }
                },
                "type" : "binary"
              },
              "type" : "paren"
            },
            "operator" : "&",
            "right" : {
              "go-type" : 4,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "3"
              }
            },
            "type" : "binary"
          },
          "kind" : "expression",
          "target" : {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "key",
              "variable" : 0
            }
          },
          "type" : "index"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 36,
      "code" : "k[i] = key[(pos+i)&3]",
      "entry" : false,
      "use-vars" : [ 7, 0, 1, 8 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 18 ],
      "in-vars" : [ 7, 0, 1, 2 ],
      "exit" : false,
      "out-vars" : [ 9, 0, 1, 2 ],
      "decl-vars" : [ 9 ],
      "line-start" : 38,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "kw"
          }
        } ],
        "right" : [ {
          "go-type" : 10,
          "kind" : "expression",
          "target" : {
            "coerced-to" : {
              "contained" : {
                "go-type" : 10,
                "kind" : "type",
                "type" : "identifier",
                "value" : {
                  "go-type" : 10,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "uintptr"
                }
              },
              "go-type" : 14,
              "kind" : "type",
              "type" : "pointer"
            },
            "go-type" : 14,
            "kind" : "expression",
            "target" : {
              "coerced-to" : {
                "go-type" : 11,
                "kind" : "type",
                "qualifier" : {
                  "ident-kind" : "PkgName",
                  "kind" : "ident",
                  "package" : 1,
                  "value" : "unsafe"
                },
                "type" : "identifier",
                "value" : {
                  "go-type" : 11,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "Pointer"
                }
              },
              "go-type" : 11,
              "kind" : "expression",
              "target" : {
                "go-type" : 15,
                "kind" : "expression",
                "operator" : "&",
                "target" : {
                  "go-type" : 13,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "k",
                    "variable" : 7
                  }
                },
                "type" : "unary"
              },
              "type" : "cast"
            },
            "type" : "cast"
          },
          "type" : "star"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 38,
      "code" : "kw := *(*uintptr)(unsafe.Pointer(&k))",
      "entry" : false,
      "use-vars" : [ 7 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 20 ],
      "in-vars" : [ 0, 1, 2, 9 ],
      "exit" : false,
      "out-vars" : [ 0, 1, 2, 10, 9 ],
      "decl-vars" : [ 10 ],
      "line-start" : 41,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "n"
          }
        } ],
        "right" : [ {
          "go-type" : 4,
          "kind" : "expression",
          "left" : {
            "go-type" : 4,
            "kind" : "expression",
            "target" : {
              "go-type" : 4,
              "kind" : "expression",
              "left" : {
                "arguments" : [ {
                  "go-type" : 5,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "b",
                    "variable" : 2
                  }
                } ],
                "ellipsis" : false,
                "function" : {
                  "go-type" : 8,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Builtin",
                    "kind" : "ident",
                    "value" : "len"
                  }
                },
                "go-type" : 4,
                "kind" : "expression",
                "type" : "call"
              },
              "operator" : "/",
              "right" : {
                "go-type" : 4,
                "kind" : "constant",
                "value" : {
                  "type" : "INT",
                  "value" : "8"
                }
              },
              "type" : "binary"
            },
            "type" : "paren"
          },
          "operator" : "*",
          "right" : {
            "go-type" : 4,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "8"
            }
          },
          "type" : "binary"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 41,
      "code" : "n := (len(b) / wordSize) * wordSize",
      "entry" : false,
      "use-vars" : [ 2 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 22, 23 ],
      "in-vars" : [ 1, 11, 2, 10, 9, 0 ],
      "exit" : false,
      "out-vars" : [ 11, 2, 10, 9, 0, 1 ],
      "decl-vars" : [ ],
      "line-start" : 42,
      "ast" : {
        "condition" : {
          "go-type" : 7,
          "kind" : "expression",
          "left" : {
            "go-type" : 4,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "i",
              "variable" : 11
            }
          },
          "operator" : "<",
          "right" : {
            "go-type" : 4,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "n",
              "variable" : 10
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "for"
      },
      "assign-vars" : [ ],
      "line-end" : 44,
      "code" : "for i := 0; i < n; i += wordSize {\n\t*(*uintptr)(unsafe.Pointer(uintptr(unsafe.Pointer(&b[0])) + uintptr(i))) ^= kw\n}",
      "entry" : false,
      "use-vars" : [ 11, 10 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 19 ],
      "in-vars" : [ 1, 2, 10, 9, 0 ],
      "exit" : false,
      "out-vars" : [ 0, 1, 11, 2, 10, 9 ],
      "decl-vars" : [ 11 ],
      "line-start" : 42,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "i"
          }
        } ],
        "right" : [ {
          "go-type" : 4,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "0"
          }
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 42,
      "code" : "i := 0",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ 11 ],
      "successors" : [ 19 ],
      "in-vars" : [ 0, 1, 11, 2, 10, 9 ],
      "exit" : false,
      "out-vars" : [ 9, 0, 1, 11, 2, 10 ],
      "decl-vars" : [ ],
      "line-start" : 42,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 4,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "i",
            "variable" : 11
          }
        } ],
        "operator" : "+",
        "right" : [ {
          "go-type" : 4,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "8"
          }
        } ],
        "type" : "assign-operator"
      },
      "assign-vars" : [ 11 ],
      "line-end" : 42,
      "code" : "i += wordSize",
      "entry" : false,
      "use-vars" : [ 11 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 21 ],
      "in-vars" : [ 2, 10, 9, 0, 1, 11 ],
      "exit" : false,
      "out-vars" : [ 10, 9, 0, 1, 11, 2 ],
      "decl-vars" : [ ],
      "line-start" : 43,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 10,
          "kind" : "expression",
          "target" : {
            "coerced-to" : {
              "contained" : {
                "go-type" : 10,
                "kind" : "type",
                "type" : "identifier",
                "value" : {
                  "go-type" : 10,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "uintptr"
                }
              },
              "go-type" : 14,
              "kind" : "type",
              "type" : "pointer"
            },
            "go-type" : 14,
            "kind" : "expression",
            "target" : {
              "coerced-to" : {
                "go-type" : 11,
                "kind" : "type",
                "qualifier" : {
                  "ident-kind" : "PkgName",
                  "kind" : "ident",
                  "package" : 1,
                  "value" : "unsafe"
                },
                "type" : "identifier",
                "value" : {
                  "go-type" : 11,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "Pointer"
                }
              },
              "go-type" : 11,
              "kind" : "expression",
              "target" : {
                "go-type" : 10,
                "kind" : "expression",
                "left" : {
                  "coerced-to" : {
                    "go-type" : 10,
                    "kind" : "type",
                    "type" : "identifier",
                    "value" : {
                      "go-type" : 10,
                      "ident-kind" : "TypeName",
                      "kind" : "ident",
                      "value" : "uintptr"
                    }
                  },
                  "go-type" : 10,
                  "kind" : "expression",
                  "target" : {
                    "coerced-to" : {
                      "go-type" : 11,
                      "kind" : "type",
                      "qualifier" : {
                        "ident-kind" : "PkgName",
                        "kind" : "ident",
                        "package" : 1,
                        "value" : "unsafe"
                      },
                      "type" : "identifier",
                      "value" : {
                        "go-type" : 11,
                        "ident-kind" : "TypeName",
                        "kind" : "ident",
                        "value" : "Pointer"
                      }
                    },
                    "go-type" : 11,
                    "kind" : "expression",
                    "target" : {
                      "go-type" : 12,
                      "kind" : "expression",
                      "operator" : "&",
                      "target" : {
                        "go-type" : 3,
                        "index" : {
                          "go-type" : 4,
                          "kind" : "constant",
                          "value" : {
                            "type" : "INT",
                            "value" : "0"
                          }
                        },
                        "kind" : "expression",
                        "target" : {
                          "go-type" : 5,
                          "kind" : "expression",
                          "type" : "identifier",
                          "value" : {
                            "ident-kind" : "Var",
                            "kind" : "ident",
                            "value" : "b",
                            "variable" : 2
                          }
                        },
                        "type" : "index"
                      },
                      "type" : "unary"
                    },
                    "type" : "cast"
                  },
                  "type" : "cast"
                },
                "operator" : "+",
                "right" : {
                  "coerced-to" : {
                    "go-type" : 10,
                    "kind" : "type",
                    "type" : "identifier",
                    "value" : {
                      "go-type" : 10,
                      "ident-kind" : "TypeName",
                      "kind" : "ident",
                      "value" : "uintptr"
                    }
                  },
                  "go-type" : 10,
                  "kind" : "expression",
                  "target" : {
                    "go-type" : 4,
                    "kind" : "expression",
                    "type" : "identifier",
                    "value" : {
                      "ident-kind" : "Var",
                      "kind" : "ident",
                      "value" : "i",
                      "variable" : 11
                    }
                  },
                  "type" : "cast"
                },
                "type" : "binary"
              },
              "type" : "cast"
            },
            "type" : "cast"
          },
          "type" : "star"
        } ],
        "operator" : "^",
        "right" : [ {
          "go-type" : 10,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "kw",
            "variable" : 9
          }
        } ],
        "type" : "assign-operator"
      },
      "assign-vars" : [ ],
      "line-end" : 43,
      "code" : "*(*uintptr)(unsafe.Pointer(uintptr(unsafe.Pointer(&b[0])) + uintptr(i))) ^= kw",
      "entry" : false,
      "use-vars" : [ 2, 9, 11 ]
    }, {
      "update-vars" : [ 2 ],
      "successors" : [ 24 ],
      "in-vars" : [ 0, 1, 2, 10 ],
      "exit" : false,
      "out-vars" : [ 0, 1, 2 ],
      "decl-vars" : [ ],
      "line-start" : 47,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 5,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "b",
            "variable" : 2
          }
        } ],
        "right" : [ {
          "go-type" : 5,
          "type" : "slice",
          "three" : false,
          "high" : null,
          "max" : null,
          "kind" : "expression",
          "low" : {
            "go-type" : 4,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "n",
              "variable" : 10
            }
          },
          "target" : {
            "go-type" : 5,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "b",
              "variable" : 2
            }
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 2 ],
      "line-end" : 47,
      "code" : "b = b[n:]",
      "entry" : false,
      "use-vars" : [ 2, 10 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 25, 27 ],
      "in-vars" : [ 0, 1, 2 ],
      "exit" : false,
      "out-vars" : [ 12, 0, 1, 2 ],
      "decl-vars" : [ 12 ],
      "line-start" : 48,
      "ast" : {
        "is-assign" : false,
        "key" : {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "i"
          }
        },
        "kind" : "statement",
        "target" : {
          "go-type" : 5,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "b",
            "variable" : 2
          }
        },
        "type" : "range",
        "value" : null
      },
      "assign-vars" : [ ],
      "line-end" : 51,
      "code" : "for i := range b {\n\tb[i] ^= key[pos&3]\n\tpos++\n}",
      "entry" : false,
      "use-vars" : [ 2 ]
    }, {
      "update-vars" : [ 2 ],
      "successors" : [ 26 ],
      "in-vars" : [ 12, 0, 1, 2 ],
      "exit" : false,
      "out-vars" : [ 0, 1, 2 ],
      "decl-vars" : [ ],
      "line-start" : 49,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 3,
          "index" : {
            "go-type" : 4,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "i",
              "variable" : 12
            }
          },
          "kind" : "expression",
          "target" : {
            "go-type" : 5,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "b",
              "variable" : 2
            }
          },
          "type" : "index"
        } ],
        "operator" : "^",
        "right" : [ {
          "go-type" : 3,
          "index" : {
            "go-type" : 4,
            "kind" : "expression",
            "left" : {
              "go-type" : 4,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "pos",
                "variable" : 1
              }
            },
            "operator" : "&",
            "right" : {
              "go-type" : 4,
              "kind" : "constant",
              "value" : {
                "type" : "INT",
                "value" : "3"
              }
            },
            "type" : "binary"
          },
          "kind" : "expression",
          "target" : {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "key",
              "variable" : 0
            }
          },
          "type" : "index"
        } ],
        "type" : "assign-operator"
      },
      "assign-vars" : [ ],
      "line-end" : 49,
      "code" : "b[i] ^= key[pos&3]",
      "entry" : false,
      "use-vars" : [ 2, 12, 0, 1 ]
    }, {
      "update-vars" : [ 1 ],
      "successors" : [ 24 ],
      "in-vars" : [ 0, 1, 2 ],
      "exit" : false,
      "out-vars" : [ 0, 1, 2 ],
      "decl-vars" : [ ],
      "line-start" : 50,
      "ast" : {
        "kind" : "statement",
        "operation" : "++",
        "target" : {
          "go-type" : 4,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "pos",
            "variable" : 1
          }
        },
        "type" : "crement"
      },
      "assign-vars" : [ 1 ],
      "line-end" : 50,
      "code" : "pos++",
      "entry" : false,
      "use-vars" : [ 1 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 1 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 53,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 4,
          "kind" : "expression",
          "left" : {
            "go-type" : 4,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "pos",
              "variable" : 1
            }
          },
          "operator" : "&",
          "right" : {
            "go-type" : 4,
            "kind" : "constant",
            "value" : {
              "type" : "INT",
              "value" : "3"
            }
          },
          "type" : "binary"
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 53,
      "code" : "return pos & 3",
      "entry" : false,
      "use-vars" : [ 1 ]
    } ],
    "code" : "func maskBytes(key [4]byte, pos int, b []byte) int {\n\n\tif len(b) < 2*wordSize {\n\t\tfor i := range b {\n\t\t\tb[i] ^= key[pos&3]\n\t\t\tpos++\n\t\t}\n\t\treturn pos & 3\n\t}\n\n\tif n := int(uintptr(unsafe.Pointer(&b[0]))) % wordSize; n != 0 {\n\t\tn = wordSize - n\n\t\tfor i := range b[:n] {\n\t\t\tb[i] ^= key[pos&3]\n\t\t\tpos++\n\t\t}\n\t\tb = b[n:]\n\t}\n\n\t// Create aligned word size key.\n\tvar k [wordSize]byte\n\tfor i := range k {\n\t\tk[i] = key[(pos+i)&3]\n\t}\n\tkw := *(*uintptr)(unsafe.Pointer(&k))\n\n\tn := (len(b) / wordSize) * wordSize\n\tfor i := 0; i < n; i += wordSize {\n\t\t*(*uintptr)(unsafe.Pointer(uintptr(unsafe.Pointer(&b[0])) + uintptr(i))) ^= kw\n\t}\n\n\tb = b[n:]\n\tfor i := range b {\n\t\tb[i] ^= key[pos&3]\n\t\tpos++\n\t}\n\n\treturn pos & 3\n}",
    "defines" : [ 0 ],
    "functions" : [ {
      "name" : "maskBytes",
      "package" : 0,
      "type" : 0,
      "exported" : false
    } ],
    "line-end" : 54,
    "line-start" : 13,
    "names" : [ "maskBytes" ],
    "package" : 0,
    "packages" : [ {
      "name" : "websocket",
      "path" : "github.com/gorilla/websocket"
    }, {
      "name" : "unsafe",
      "path" : "unsafe"
    } ],
    "params" : [ 0, 1, 2 ],
    "receivers" : [ ],
    "results" : [ 3 ],
    "type" : "function",
    "types" : [ {
      "name" : "func(key [4]byte, pos int, b []byte) int",
      "params" : 1,
      "recv" : -1,
      "results" : 6,
      "type" : "Signature",
      "underlying" : 0,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "key",
        "type" : 2
      }, {
        "name" : "pos",
        "type" : 4
      }, {
        "name" : "b",
        "type" : 5
      } ],
      "name" : "(key [4]byte, pos int, b []byte)",
      "type" : "Tuple",
      "underlying" : 1
    }, {
      "elem" : 3,
      "name" : "[4]byte",
      "type" : "Array",
      "underlying" : 2
    }, {
      "name" : "byte",
      "type" : "Basic",
      "underlying" : 3
    }, {
      "name" : "int",
      "type" : "Basic",
      "underlying" : 4
    }, {
      "elem" : 3,
      "name" : "[]byte",
      "type" : "Slice",
      "underlying" : 5
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 4
      } ],
      "name" : "(int)",
      "type" : "Tuple",
      "underlying" : 6
    }, {
      "name" : "untyped bool",
      "type" : "Basic",
      "underlying" : 7
    }, {
      "name" : "func([]byte) int",
      "params" : 9,
      "recv" : -1,
      "results" : 6,
      "type" : "Signature",
      "underlying" : 8,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 5
      } ],
      "name" : "([]byte)",
      "type" : "Tuple",
      "underlying" : 9
    }, {
      "name" : "uintptr",
      "type" : "Basic",
      "underlying" : 10
    }, {
      "local-name" : "Pointer",
      "name" : "unsafe.Pointer",
      "package" : 1,
      "type" : "Basic",
      "underlying" : 11
    }, {
      "elem" : 3,
      "name" : "*byte",
      "type" : "Pointer",
      "underlying" : 12
    }, {
      "elem" : 3,
      "name" : "[8]byte",
      "type" : "Array",
      "underlying" : 13
    }, {
      "elem" : 10,
      "name" : "*uintptr",
      "type" : "Pointer",
      "underlying" : 14
    }, {
      "elem" : 13,
      "name" : "*[8]byte",
      "type" : "Pointer",
      "underlying" : 15
    } ],
    "variables" : [ {
      "name" : "key",
      "package" : 0,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "pos",
      "package" : 0,
      "type" : 4,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "b",
      "package" : 0,
      "type" : 5,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "[res0]",
      "package" : 0,
      "type" : 4,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "i",
      "package" : 0,
      "type" : 4,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "n",
      "package" : 0,
      "type" : 4,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "i",
      "package" : 0,
      "type" : 4,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "k",
      "package" : 0,
      "type" : 13,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "i",
      "package" : 0,
      "type" : 4,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "kw",
      "package" : 0,
      "type" : 10,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "n",
      "package" : 0,
      "type" : 4,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "i",
      "package" : 0,
      "type" : 4,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "i",
      "package" : 0,
      "type" : 4,
      "exported" : false,
      "embedded" : false,
      "field" : false
    } ]
  },
  "go-version" : "1.14.3"
}