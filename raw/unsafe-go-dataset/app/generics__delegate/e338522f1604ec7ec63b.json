{
  "usage" : {
    "file" : "eng_reduce.go",
    "label1" : "delegate",
    "label2" : "generics",
    "line" : "539",
    "module" : "gorgonia.org/tensor",
    "pkg" : "gorgonia.org/tensor/internal/execution",
    "project" : "gorgonia/gorgonia",
    "snippet" : "case func(unsafe.Pointer, unsafe.Pointer) unsafe.Pointer:",
    "version" : "v0.9.6"
  },
  "cfg" : {
    "blocks" : [ {
      "update-vars" : [ ],
      "successors" : [ 2 ],
      "in-vars" : [ 23, 20, 19, 25, 26, 27, 28, 29, 30, 31, 32, 18, 33, 34, 35, 22, 36, 37, 21, 38, 39, 40, 41, 42 ],
      "exit" : false,
      "out-vars" : [ 22, 19, 25, 26, 18, 31, 20, 21, 41, 33, 30, 23, 38, 40, 28, 34, 35, 39, 27, 29, 42, 36, 32, 37 ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[entry]",
      "entry" : true,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ ],
      "in-vars" : [ ],
      "exit" : true,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[exit]",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 3 ],
      "in-vars" : [ 22, 32, 38, 39, 37, 28, 30, 23, 19, 35, 36, 26, 27, 40, 18, 33, 34, 21, 42, 20, 25, 41, 29, 31 ],
      "exit" : false,
      "out-vars" : [ 37, 27, 29, 38, 18, 33, 21, 22, 19, 25, 36, 28, 35, 20, 32, 26, 40, 42, 30, 31, 23, 39, 41, 34 ],
      "decl-vars" : [ 43 ],
      "line-start" : 237,
      "ast" : {
        "kind" : "statement",
        "target" : {
          "kind" : "decl",
          "specs" : [ {
            "comments" : [ ],
            "declared-type" : {
              "go-type" : 11,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 11,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "bool"
              }
            },
            "kind" : "spec",
            "names" : [ {
              "ident-kind" : "NoKind",
              "kind" : "ident",
              "value" : "ok"
            } ],
            "type" : "var",
            "values" : [ ]
          } ],
          "type" : "var"
        },
        "type" : "declaration"
      },
      "assign-vars" : [ ],
      "line-end" : 237,
      "code" : "var ok bool",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 4, 20, 36, 52, 68, 84, 100, 116, 132, 148, 164, 180, 196, 212, 228, 244, 260, 276, 292 ],
      "in-vars" : [ 28, 33, 29, 31, 21, 22, 25, 36, 30, 37, 27, 40, 23, 35, 20, 19, 32, 38, 41, 34, 42, 26, 39, 18 ],
      "exit" : false,
      "out-vars" : [ 36, 39, 27, 40, 30, 25, 19, 26, 38, 34, 31, 20, 32, 37, 41, 29, 35, 21, 22, 28, 18, 33, 42, 23 ],
      "decl-vars" : [ ],
      "line-start" : 238,
      "ast" : {
        "condition" : {
          "go-type" : 2,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "t",
            "variable" : 18
          }
        },
        "kind" : "statement",
        "type" : "switch"
      },
      "assign-vars" : [ ],
      "line-end" : 547,
      "code" : "switch t {\ncase Bool:\n\tvar def bool\n\n\tif def, ok = defaultValue.(bool); !ok {\n\t\treturn errors.Errorf(defaultValueErrMsg, def, defaultValue, defaultValue)\n\t}\n\tdt := data.Bools()\n\trt := retVal.Bools()\n\tswitch f := fn.(type) {\n\tcase func([]bool) bool:\n\t\treduceLastB(dt, rt, dimSize, def, f)\n\tcase func(bool, bool) bool:\n\t\tgenericReduceLastB(dt, rt, dimSize, def, f)\n\tdefault:\n\t\treturn errors.Errorf(reductionErrMsg, fn)\n\t}\n\treturn nil\ncase Int:\n\tvar def int\n\n\tif def, ok = defaultValue.(int); !ok {\n\t\treturn errors.Errorf(defaultValueErrMsg, def, defaultValue, defaultValue)\n\t}\n\tdt := data.Ints()\n\trt := retVal.Ints()\n\tswitch f := fn.(type) {\n\tcase func([]int) int:\n\t\treduceLastI(dt, rt, dimSize, def, f)\n\tcase func(int, int) int:\n\t\tgenericReduceLastI(dt, rt, dimSize, def, f)\n\tdefault:\n\t\treturn errors.Errorf(reductionErrMsg, fn)\n\t}\n\treturn nil\ncase Int8:\n\tvar def int8\n\n\tif def, ok = defaultValue.(int8); !ok {\n\t\treturn errors.Errorf(defaultValueErrMsg, def, defaultValue, defaultValue)\n\t}\n\tdt := data.Int8s()\n\trt := retVal.Int8s()\n\tswitch f := fn.(type) {\n\tcase func([]int8) int8:\n\t\treduceLastI8(dt, rt, dimSize, def, f)\n\tcase func(int8, int8) int8:\n\t\tgenericReduceLastI8(dt, rt, dimSize, def, f)\n\tdefault:\n\t\treturn errors.Errorf(reductionErrMsg, fn)\n\t}\n\treturn nil\ncase Int16:\n\tvar def int16\n\n\tif def, ok = defaultValue.(int16); !ok {\n\t\treturn errors.Errorf(defaultValueErrMsg, def, defaultValue, defaultValue)\n\t}\n\tdt := data.Int16s()\n\trt := retVal.Int16s()\n\tswitch f := fn.(type) {\n\tcase func([]int16) int16:\n\t\treduceLastI16(dt, rt, dimSize, def, f)\n\tcase func(int16, int16) int16:\n\t\tgenericReduceLastI16(dt, rt, dimSize, def, f)\n\tdefault:\n\t\treturn errors.Errorf(reductionErrMsg, fn)\n\t}\n\treturn nil\ncase Int32:\n\tvar def int32\n\n\tif def, ok = defaultValue.(int32); !ok {\n\t\treturn errors.Errorf(defaultValueErrMsg, def, defaultValue, defaultValue)\n\t}\n\tdt := data.Int32s()\n\trt := retVal.Int32s()\n\tswitch f := fn.(type) {\n\tcase func([]int32) int32:\n\t\treduceLastI32(dt, rt, dimSize, def, f)\n\tcase func(int32, int32) int32:\n\t\tgenericReduceLastI32(dt, rt, dimSize, def, f)\n\tdefault:\n\t\treturn errors.Errorf(reductionErrMsg, fn)\n\t}\n\treturn nil\ncase Int64:\n\tvar def int64\n\n\tif def, ok = defaultValue.(int64); !ok {\n\t\treturn errors.Errorf(defaultValueErrMsg, def, defaultValue, defaultValue)\n\t}\n\tdt := data.Int64s()\n\trt := retVal.Int64s()\n\tswitch f := fn.(type) {\n\tcase func([]int64) int64:\n\t\treduceLastI64(dt, rt, dimSize, def, f)\n\tcase func(int64, int64) int64:\n\t\tgenericReduceLastI64(dt, rt, dimSize, def, f)\n\tdefault:\n\t\treturn errors.Errorf(reductionErrMsg, fn)\n\t}\n\treturn nil\ncase Uint:\n\tvar def uint\n\n\tif def, ok = defaultValue.(uint); !ok {\n\t\treturn errors.Errorf(defaultValueErrMsg, def, defaultValue, defaultValue)\n\t}\n\tdt := data.Uints()\n\trt := retVal.Uints()\n\tswitch f := fn.(type) {\n\tcase func([]uint) uint:\n\t\treduceLastU(dt, rt, dimSize, def, f)\n\tcase func(uint, uint) uint:\n\t\tgenericReduceLastU(dt, rt, dimSize, def, f)\n\tdefault:\n\t\treturn errors.Errorf(reductionErrMsg, fn)\n\t}\n\treturn nil\ncase Uint8:\n\tvar def uint8\n\n\tif def, ok = defaultValue.(uint8); !ok {\n\t\treturn errors.Errorf(defaultValueErrMsg, def, defaultValue, defaultValue)\n\t}\n\tdt := data.Uint8s()\n\trt := retVal.Uint8s()\n\tswitch f := fn.(type) {\n\tcase func([]uint8) uint8:\n\t\treduceLastU8(dt, rt, dimSize, def, f)\n\tcase func(uint8, uint8) uint8:\n\t\tgenericReduceLastU8(dt, rt, dimSize, def, f)\n\tdefault:\n\t\treturn errors.Errorf(reductionErrMsg, fn)\n\t}\n\treturn nil\ncase Uint16:\n\tvar def uint16\n\n\tif def, ok = defaultValue.(uint16); !ok {\n\t\treturn errors.Errorf(defaultValueErrMsg, def, defaultValue, defaultValue)\n\t}\n\tdt := data.Uint16s()\n\trt := retVal.Uint16s()\n\tswitch f := fn.(type) {\n\tcase func([]uint16) uint16:\n\t\treduceLastU16(dt, rt, dimSize, def, f)\n\tcase func(uint16, uint16) uint16:\n\t\tgenericReduceLastU16(dt, rt, dimSize, def, f)\n\tdefault:\n\t\treturn errors.Errorf(reductionErrMsg, fn)\n\t}\n\treturn nil\ncase Uint32:\n\tvar def uint32\n\n\tif def, ok = defaultValue.(uint32); !ok {\n\t\treturn errors.Errorf(defaultValueErrMsg, def, defaultValue, defaultValue)\n\t}\n\tdt := data.Uint32s()\n\trt := retVal.Uint32s()\n\tswitch f := fn.(type) {\n\tcase func([]uint32) uint32:\n\t\treduceLastU32(dt, rt, dimSize, def, f)\n\tcase func(uint32, uint32) uint32:\n\t\tgenericReduceLastU32(dt, rt, dimSize, def, f)\n\tdefault:\n\t\treturn errors.Errorf(reductionErrMsg, fn)\n\t}\n\treturn nil\ncase Uint64:\n\tvar def uint64\n\n\tif def, ok = defaultValue.(uint64); !ok {\n\t\treturn errors.Errorf(defaultValueErrMsg, def, defaultValue, defaultValue)\n\t}\n\tdt := data.Uint64s()\n\trt := retVal.Uint64s()\n\tswitch f := fn.(type) {\n\tcase func([]uint64) uint64:\n\t\treduceLastU64(dt, rt, dimSize, def, f)\n\tcase func(uint64, uint64) uint64:\n\t\tgenericReduceLastU64(dt, rt, dimSize, def, f)\n\tdefault:\n\t\treturn errors.Errorf(reductionErrMsg, fn)\n\t}\n\treturn nil\ncase Uintptr:\n\tvar def uintptr\n\n\tif def, ok = defaultValue.(uintptr); !ok {\n\t\treturn errors.Errorf(defaultValueErrMsg, def, defaultValue, defaultValue)\n\t}\n\tdt := data.Uintptrs()\n\trt := retVal.Uintptrs()\n\tswitch f := fn.(type) {\n\tcase func([]uintptr) uintptr:\n\t\treduceLastUintptr(dt, rt, dimSize, def, f)\n\tcase func(uintptr, uintptr) uintptr:\n\t\tgenericReduceLastUintptr(dt, rt, dimSize, def, f)\n\tdefault:\n\t\treturn errors.Errorf(reductionErrMsg, fn)\n\t}\n\treturn nil\ncase Float32:\n\tvar def float32\n\n\tif def, ok = defaultValue.(float32); !ok {\n\t\treturn errors.Errorf(defaultValueErrMsg, def, defaultValue, defaultValue)\n\t}\n\tdt := data.Float32s()\n\trt := retVal.Float32s()\n\tswitch f := fn.(type) {\n\tcase func([]float32) float32:\n\t\treduceLastF32(dt, rt, dimSize, def, f)\n\tcase func(float32, float32) float32:\n\t\tgenericReduceLastF32(dt, rt, dimSize, def, f)\n\tdefault:\n\t\treturn errors.Errorf(reductionErrMsg, fn)\n\t}\n\treturn nil\ncase Float64:\n\tvar def float64\n\n\tif def, ok = defaultValue.(float64); !ok {\n\t\treturn errors.Errorf(defaultValueErrMsg, def, defaultValue, defaultValue)\n\t}\n\tdt := data.Float64s()\n\trt := retVal.Float64s()\n\tswitch f := fn.(type) {\n\tcase func([]float64) float64:\n\t\treduceLastF64(dt, rt, dimSize, def, f)\n\tcase func(float64, float64) float64:\n\t\tgenericReduceLastF64(dt, rt, dimSize, def, f)\n\tdefault:\n\t\treturn errors.Errorf(reductionErrMsg, fn)\n\t}\n\treturn nil\ncase Complex64:\n\tvar def complex64\n\n\tif def, ok = defaultValue.(complex64); !ok {\n\t\treturn errors.Errorf(defaultValueErrMsg, def, defaultValue, defaultValue)\n\t}\n\tdt := data.Complex64s()\n\trt := retVal.Complex64s()\n\tswitch f := fn.(type) {\n\tcase func([]complex64) complex64:\n\t\treduceLastC64(dt, rt, dimSize, def, f)\n\tcase func(complex64, complex64) complex64:\n\t\tgenericReduceLastC64(dt, rt, dimSize, def, f)\n\tdefault:\n\t\treturn errors.Errorf(reductionErrMsg, fn)\n\t}\n\treturn nil\ncase Complex128:\n\tvar def complex128\n\n\tif def, ok = defaultValue.(complex128); !ok {\n\t\treturn errors.Errorf(defaultValueErrMsg, def, defaultValue, defaultValue)\n\t}\n\tdt := data.Complex128s()\n\trt := retVal.Complex128s()\n\tswitch f := fn.(type) {\n\tcase func([]complex128) complex128:\n\t\treduceLastC128(dt, rt, dimSize, def, f)\n\tcase func(complex128, complex128) complex128:\n\t\tgenericReduceLastC128(dt, rt, dimSize, def, f)\n\tdefault:\n\t\treturn errors.Errorf(reductionErrMsg, fn)\n\t}\n\treturn nil\ncase String:\n\tvar def string\n\n\tif def, ok = defaultValue.(string); !ok {\n\t\treturn errors.Errorf(defaultValueErrMsg, def, defaultValue, defaultValue)\n\t}\n\tdt := data.Strings()\n\trt := retVal.Strings()\n\tswitch f := fn.(type) {\n\tcase func([]string) string:\n\t\treduceLastStr(dt, rt, dimSize, def, f)\n\tcase func(string, string) string:\n\t\tgenericReduceLastStr(dt, rt, dimSize, def, f)\n\tdefault:\n\t\treturn errors.Errorf(reductionErrMsg, fn)\n\t}\n\treturn nil\ncase UnsafePointer:\n\tvar def unsafe.Pointer\n\n\tif def, ok = defaultValue.(unsafe.Pointer); !ok {\n\t\treturn errors.Errorf(defaultValueErrMsg, def, defaultValue, defaultValue)\n\t}\n\tdt := data.UnsafePointers()\n\trt := retVal.UnsafePointers()\n\tswitch f := fn.(type) {\n\tcase func([]unsafe.Pointer) unsafe.Pointer:\n\t\treduceLastUnsafePointer(dt, rt, dimSize, def, f)\n\tcase func(unsafe.Pointer, unsafe.Pointer) unsafe.Pointer:\n\t\tgenericReduceLastUnsafePointer(dt, rt, dimSize, def, f)\n\tdefault:\n\t\treturn errors.Errorf(reductionErrMsg, fn)\n\t}\n\treturn nil\ndefault:\n\treturn errors.Errorf(\"Unsupported type %v for ReduceLast\", t)\n}",
      "entry" : false,
      "use-vars" : [ 18 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 5 ],
      "in-vars" : [ 23, 20, 21, 22, 19, 29 ],
      "exit" : false,
      "out-vars" : [ 20, 21, 22, 19, 23 ],
      "decl-vars" : [ ],
      "line-start" : 239,
      "ast" : {
        "expressions" : [ {
          "go-type" : 2,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "Bool",
            "variable" : 29
          }
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 255,
      "code" : "case Bool:\n\tvar def bool\n\n\tif def, ok = defaultValue.(bool); !ok {\n\t\treturn errors.Errorf(defaultValueErrMsg, def, defaultValue, defaultValue)\n\t}\n\tdt := data.Bools()\n\trt := retVal.Bools()\n\tswitch f := fn.(type) {\n\tcase func([]bool) bool:\n\t\treduceLastB(dt, rt, dimSize, def, f)\n\tcase func(bool, bool) bool:\n\t\tgenericReduceLastB(dt, rt, dimSize, def, f)\n\tdefault:\n\t\treturn errors.Errorf(reductionErrMsg, fn)\n\t}\n\treturn nil",
      "entry" : false,
      "use-vars" : [ 29 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 7 ],
      "in-vars" : [ 23, 20, 21, 22, 19 ],
      "exit" : false,
      "out-vars" : [ 23, 20, 21, 22, 19 ],
      "decl-vars" : [ 44 ],
      "line-start" : 240,
      "ast" : {
        "kind" : "statement",
        "target" : {
          "kind" : "decl",
          "specs" : [ {
            "comments" : [ ],
            "declared-type" : {
              "go-type" : 11,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 11,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "bool"
              }
            },
            "kind" : "spec",
            "names" : [ {
              "ident-kind" : "NoKind",
              "kind" : "ident",
              "value" : "def"
            } ],
            "type" : "var",
            "values" : [ ]
          } ],
          "type" : "var"
        },
        "type" : "declaration"
      },
      "assign-vars" : [ ],
      "line-end" : 240,
      "code" : "var def bool",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 8, 9 ],
      "in-vars" : [ 22, 19, 44, 43, 23, 20, 21 ],
      "exit" : false,
      "out-vars" : [ 44, 23, 20, 21, 22, 19 ],
      "decl-vars" : [ ],
      "line-start" : 242,
      "ast" : {
        "condition" : {
          "go-type" : 11,
          "kind" : "expression",
          "operator" : "!",
          "target" : {
            "go-type" : 11,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "ok",
              "variable" : 43
            }
          },
          "type" : "unary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 244,
      "code" : "if def, ok = defaultValue.(bool); !ok {\n\treturn errors.Errorf(defaultValueErrMsg, def, defaultValue, defaultValue)\n}",
      "entry" : false,
      "use-vars" : [ 43 ]
    }, {
      "update-vars" : [ 43, 44 ],
      "successors" : [ 6 ],
      "in-vars" : [ 22, 19, 23, 20, 21 ],
      "exit" : false,
      "out-vars" : [ 19, 44, 43, 23, 20, 21, 22 ],
      "decl-vars" : [ ],
      "line-start" : 242,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 11,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "def",
            "variable" : 44
          }
        }, {
          "go-type" : 11,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "ok",
            "variable" : 43
          }
        } ],
        "right" : [ {
          "asserted" : {
            "go-type" : 11,
            "kind" : "type",
            "type" : "identifier",
            "value" : {
              "go-type" : 11,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "bool"
            }
          },
          "go-type" : 84,
          "kind" : "expression",
          "target" : {
            "go-type" : 78,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "defaultValue",
              "variable" : 22
            }
          },
          "type" : "type-assert"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 43, 44 ],
      "line-end" : 242,
      "code" : "def, ok = defaultValue.(bool)",
      "entry" : false,
      "use-vars" : [ 22 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 22, 44 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 243,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "arguments" : [ {
            "go-type" : 23,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "Expected default value of type %T. Got %v of %T instead"
            }
          }, {
            "go-type" : 11,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "def",
              "variable" : 44
            }
          }, {
            "go-type" : 78,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "defaultValue",
              "variable" : 22
            }
          }, {
            "go-type" : 78,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "defaultValue",
              "variable" : 22
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 85,
            "kind" : "expression",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 4,
              "value" : "errors"
            },
            "type" : "identifier",
            "value" : {
              "function" : 1,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "Errorf"
            }
          },
          "go-type" : 80,
          "kind" : "expression",
          "type" : "call"
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 243,
      "code" : "return errors.Errorf(defaultValueErrMsg, def, defaultValue, defaultValue)",
      "entry" : false,
      "use-vars" : [ 44, 22 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 10 ],
      "in-vars" : [ 20, 21, 19, 44, 23 ],
      "exit" : false,
      "out-vars" : [ 23, 20, 21, 45, 44 ],
      "decl-vars" : [ 45 ],
      "line-start" : 245,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "dt"
          }
        } ],
        "right" : [ {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "function" : 2,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "Bools"
            },
            "go-type" : 90,
            "kind" : "expression",
            "target" : {
              "go-type" : 75,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "data",
                "variable" : 19
              }
            },
            "type" : "selector"
          },
          "go-type" : 89,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 245,
      "code" : "dt := data.Bools()",
      "entry" : false,
      "use-vars" : [ 19 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 11 ],
      "in-vars" : [ 23, 20, 21, 45, 44 ],
      "exit" : false,
      "out-vars" : [ 46, 23, 21, 45, 44 ],
      "decl-vars" : [ 46 ],
      "line-start" : 246,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "rt"
          }
        } ],
        "right" : [ {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "function" : 2,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "Bools"
            },
            "go-type" : 90,
            "kind" : "expression",
            "target" : {
              "go-type" : 75,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "retVal",
                "variable" : 20
              }
            },
            "type" : "selector"
          },
          "go-type" : 89,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 246,
      "code" : "rt := retVal.Bools()",
      "entry" : false,
      "use-vars" : [ 20 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 12 ],
      "in-vars" : [ 23, 21, 45, 44, 46 ],
      "exit" : false,
      "out-vars" : [ 47, 48, 46, 23, 21, 45, 44 ],
      "decl-vars" : [ 47, 48, 134 ],
      "line-start" : 247,
      "ast" : {
        "kind" : "statement",
        "type" : "type-switch"
      },
      "assign-vars" : [ ],
      "line-end" : 254,
      "code" : "switch f := fn.(type) {\ncase func([]bool) bool:\n\treduceLastB(dt, rt, dimSize, def, f)\ncase func(bool, bool) bool:\n\tgenericReduceLastB(dt, rt, dimSize, def, f)\ndefault:\n\treturn errors.Errorf(reductionErrMsg, fn)\n}",
      "entry" : false,
      "use-vars" : [ 23 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 13, 15, 17 ],
      "in-vars" : [ 23, 21, 45, 44, 47, 48, 46 ],
      "exit" : false,
      "out-vars" : [ 48, 46, 23, 21, 45, 44, 47 ],
      "decl-vars" : [ ],
      "line-start" : 247,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "f"
          }
        } ],
        "right" : [ {
          "asserted" : null,
          "go-type" : -1,
          "kind" : "expression",
          "target" : {
            "go-type" : 78,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "fn",
              "variable" : 23
            }
          },
          "type" : "type-assert"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 247,
      "code" : "f := fn.(type)",
      "entry" : false,
      "use-vars" : [ 23 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 14 ],
      "in-vars" : [ 46, 21, 45, 44, 47 ],
      "exit" : false,
      "out-vars" : [ 47, 46, 21, 45, 44 ],
      "decl-vars" : [ ],
      "line-start" : 248,
      "ast" : {
        "expressions" : [ {
          "go-type" : 96,
          "kind" : "type",
          "params" : [ {
            "declared-type" : {
              "element" : {
                "go-type" : 11,
                "kind" : "type",
                "type" : "identifier",
                "value" : {
                  "go-type" : 11,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "bool"
                }
              },
              "go-type" : 89,
              "kind" : "type",
              "type" : "slice"
            },
            "kind" : "field",
            "names" : [ ],
            "tag" : null
          } ],
          "results" : [ {
            "declared-type" : {
              "go-type" : 11,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 11,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "bool"
              }
            },
            "kind" : "field",
            "names" : [ ],
            "tag" : null
          } ],
          "type" : "function",
          "variadic" : null
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 249,
      "code" : "case func([]bool) bool:\n\treduceLastB(dt, rt, dimSize, def, f)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 19 ],
      "in-vars" : [ 21, 45, 44, 47, 46 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 249,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 89,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "dt",
              "variable" : 45
            }
          }, {
            "go-type" : 89,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "rt",
              "variable" : 46
            }
          }, {
            "go-type" : 7,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "dimSize",
              "variable" : 21
            }
          }, {
            "go-type" : 11,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "def",
              "variable" : 44
            }
          }, {
            "go-type" : 96,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "f",
              "variable" : 47
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 92,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 3,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "reduceLastB"
            }
          },
          "go-type" : 5,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 249,
      "code" : "reduceLastB(dt, rt, dimSize, def, f)",
      "entry" : false,
      "use-vars" : [ 45, 46, 21, 44, 47 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 16 ],
      "in-vars" : [ 46, 21, 45, 44, 48 ],
      "exit" : false,
      "out-vars" : [ 46, 21, 45, 44, 48 ],
      "decl-vars" : [ ],
      "line-start" : 250,
      "ast" : {
        "expressions" : [ {
          "go-type" : 99,
          "kind" : "type",
          "params" : [ {
            "declared-type" : {
              "go-type" : 11,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 11,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "bool"
              }
            },
            "kind" : "field",
            "names" : [ ],
            "tag" : null
          }, {
            "declared-type" : {
              "go-type" : 11,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 11,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "bool"
              }
            },
            "kind" : "field",
            "names" : [ ],
            "tag" : null
          } ],
          "results" : [ {
            "declared-type" : {
              "go-type" : 11,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 11,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "bool"
              }
            },
            "kind" : "field",
            "names" : [ ],
            "tag" : null
          } ],
          "type" : "function",
          "variadic" : null
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 251,
      "code" : "case func(bool, bool) bool:\n\tgenericReduceLastB(dt, rt, dimSize, def, f)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 19 ],
      "in-vars" : [ 21, 45, 44, 48, 46 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 251,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 89,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "dt",
              "variable" : 45
            }
          }, {
            "go-type" : 89,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "rt",
              "variable" : 46
            }
          }, {
            "go-type" : 7,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "dimSize",
              "variable" : 21
            }
          }, {
            "go-type" : 11,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "def",
              "variable" : 44
            }
          }, {
            "go-type" : 99,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "f",
              "variable" : 48
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 97,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 4,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "genericReduceLastB"
            }
          },
          "go-type" : 5,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 251,
      "code" : "genericReduceLastB(dt, rt, dimSize, def, f)",
      "entry" : false,
      "use-vars" : [ 44, 48, 45, 46, 21 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 18 ],
      "in-vars" : [ 23 ],
      "exit" : false,
      "out-vars" : [ 23 ],
      "decl-vars" : [ ],
      "line-start" : 252,
      "ast" : {
        "expressions" : [ ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 253,
      "code" : "default:\n\treturn errors.Errorf(reductionErrMsg, fn)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 23 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 253,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "arguments" : [ {
            "go-type" : 23,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "Cannot reduce with function of type %T"
            }
          }, {
            "go-type" : 78,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "fn",
              "variable" : 23
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 85,
            "kind" : "expression",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 4,
              "value" : "errors"
            },
            "type" : "identifier",
            "value" : {
              "function" : 1,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "Errorf"
            }
          },
          "go-type" : 80,
          "kind" : "expression",
          "type" : "call"
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 253,
      "code" : "return errors.Errorf(reductionErrMsg, fn)",
      "entry" : false,
      "use-vars" : [ 23 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 255,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 100,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Nil",
            "kind" : "ident",
            "value" : "nil"
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 255,
      "code" : "return nil",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 21 ],
      "in-vars" : [ 23, 20, 21, 22, 19, 32 ],
      "exit" : false,
      "out-vars" : [ 23, 20, 21, 22, 19 ],
      "decl-vars" : [ ],
      "line-start" : 256,
      "ast" : {
        "expressions" : [ {
          "go-type" : 2,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "Int",
            "variable" : 32
          }
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 272,
      "code" : "case Int:\n\tvar def int\n\n\tif def, ok = defaultValue.(int); !ok {\n\t\treturn errors.Errorf(defaultValueErrMsg, def, defaultValue, defaultValue)\n\t}\n\tdt := data.Ints()\n\trt := retVal.Ints()\n\tswitch f := fn.(type) {\n\tcase func([]int) int:\n\t\treduceLastI(dt, rt, dimSize, def, f)\n\tcase func(int, int) int:\n\t\tgenericReduceLastI(dt, rt, dimSize, def, f)\n\tdefault:\n\t\treturn errors.Errorf(reductionErrMsg, fn)\n\t}\n\treturn nil",
      "entry" : false,
      "use-vars" : [ 32 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 23 ],
      "in-vars" : [ 20, 21, 22, 19, 23 ],
      "exit" : false,
      "out-vars" : [ 23, 20, 21, 22, 19 ],
      "decl-vars" : [ 49 ],
      "line-start" : 257,
      "ast" : {
        "kind" : "statement",
        "target" : {
          "kind" : "decl",
          "specs" : [ {
            "comments" : [ ],
            "declared-type" : {
              "go-type" : 7,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 7,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "int"
              }
            },
            "kind" : "spec",
            "names" : [ {
              "ident-kind" : "NoKind",
              "kind" : "ident",
              "value" : "def"
            } ],
            "type" : "var",
            "values" : [ ]
          } ],
          "type" : "var"
        },
        "type" : "declaration"
      },
      "assign-vars" : [ ],
      "line-end" : 257,
      "code" : "var def int",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 24, 25 ],
      "in-vars" : [ 43, 23, 20, 21, 22, 19, 49 ],
      "exit" : false,
      "out-vars" : [ 22, 19, 49, 23, 20, 21 ],
      "decl-vars" : [ ],
      "line-start" : 259,
      "ast" : {
        "condition" : {
          "go-type" : 11,
          "kind" : "expression",
          "operator" : "!",
          "target" : {
            "go-type" : 11,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "ok",
              "variable" : 43
            }
          },
          "type" : "unary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 261,
      "code" : "if def, ok = defaultValue.(int); !ok {\n\treturn errors.Errorf(defaultValueErrMsg, def, defaultValue, defaultValue)\n}",
      "entry" : false,
      "use-vars" : [ 43 ]
    }, {
      "update-vars" : [ 43, 49 ],
      "successors" : [ 22 ],
      "in-vars" : [ 19, 23, 20, 21, 22 ],
      "exit" : false,
      "out-vars" : [ 49, 43, 23, 20, 21, 22, 19 ],
      "decl-vars" : [ ],
      "line-start" : 259,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 7,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "def",
            "variable" : 49
          }
        }, {
          "go-type" : 11,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "ok",
            "variable" : 43
          }
        } ],
        "right" : [ {
          "asserted" : {
            "go-type" : 7,
            "kind" : "type",
            "type" : "identifier",
            "value" : {
              "go-type" : 7,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "int"
            }
          },
          "go-type" : 101,
          "kind" : "expression",
          "target" : {
            "go-type" : 78,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "defaultValue",
              "variable" : 22
            }
          },
          "type" : "type-assert"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 43, 49 ],
      "line-end" : 259,
      "code" : "def, ok = defaultValue.(int)",
      "entry" : false,
      "use-vars" : [ 22 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 22, 49 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 260,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "arguments" : [ {
            "go-type" : 23,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "Expected default value of type %T. Got %v of %T instead"
            }
          }, {
            "go-type" : 7,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "def",
              "variable" : 49
            }
          }, {
            "go-type" : 78,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "defaultValue",
              "variable" : 22
            }
          }, {
            "go-type" : 78,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "defaultValue",
              "variable" : 22
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 85,
            "kind" : "expression",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 4,
              "value" : "errors"
            },
            "type" : "identifier",
            "value" : {
              "function" : 1,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "Errorf"
            }
          },
          "go-type" : 80,
          "kind" : "expression",
          "type" : "call"
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 260,
      "code" : "return errors.Errorf(defaultValueErrMsg, def, defaultValue, defaultValue)",
      "entry" : false,
      "use-vars" : [ 49, 22 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 26 ],
      "in-vars" : [ 23, 20, 21, 19, 49 ],
      "exit" : false,
      "out-vars" : [ 23, 20, 21, 49, 50 ],
      "decl-vars" : [ 50 ],
      "line-start" : 262,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "dt"
          }
        } ],
        "right" : [ {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "function" : 5,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "Ints"
            },
            "go-type" : 102,
            "kind" : "expression",
            "target" : {
              "go-type" : 75,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "data",
                "variable" : 19
              }
            },
            "type" : "selector"
          },
          "go-type" : 26,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 262,
      "code" : "dt := data.Ints()",
      "entry" : false,
      "use-vars" : [ 19 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 27 ],
      "in-vars" : [ 21, 49, 50, 23, 20 ],
      "exit" : false,
      "out-vars" : [ 23, 21, 51, 49, 50 ],
      "decl-vars" : [ 51 ],
      "line-start" : 263,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "rt"
          }
        } ],
        "right" : [ {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "function" : 5,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "Ints"
            },
            "go-type" : 102,
            "kind" : "expression",
            "target" : {
              "go-type" : 75,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "retVal",
                "variable" : 20
              }
            },
            "type" : "selector"
          },
          "go-type" : 26,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 263,
      "code" : "rt := retVal.Ints()",
      "entry" : false,
      "use-vars" : [ 20 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 28 ],
      "in-vars" : [ 23, 21, 51, 49, 50 ],
      "exit" : false,
      "out-vars" : [ 53, 51, 49, 50, 23, 21, 52 ],
      "decl-vars" : [ 52, 53, 135 ],
      "line-start" : 264,
      "ast" : {
        "kind" : "statement",
        "type" : "type-switch"
      },
      "assign-vars" : [ ],
      "line-end" : 271,
      "code" : "switch f := fn.(type) {\ncase func([]int) int:\n\treduceLastI(dt, rt, dimSize, def, f)\ncase func(int, int) int:\n\tgenericReduceLastI(dt, rt, dimSize, def, f)\ndefault:\n\treturn errors.Errorf(reductionErrMsg, fn)\n}",
      "entry" : false,
      "use-vars" : [ 23 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 29, 31, 33 ],
      "in-vars" : [ 23, 21, 52, 53, 51, 49, 50 ],
      "exit" : false,
      "out-vars" : [ 23, 21, 52, 53, 51, 49, 50 ],
      "decl-vars" : [ ],
      "line-start" : 264,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "f"
          }
        } ],
        "right" : [ {
          "asserted" : null,
          "go-type" : -1,
          "kind" : "expression",
          "target" : {
            "go-type" : 78,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "fn",
              "variable" : 23
            }
          },
          "type" : "type-assert"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 264,
      "code" : "f := fn.(type)",
      "entry" : false,
      "use-vars" : [ 23 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 30 ],
      "in-vars" : [ 52, 51, 49, 50, 21 ],
      "exit" : false,
      "out-vars" : [ 49, 50, 21, 52, 51 ],
      "decl-vars" : [ ],
      "line-start" : 265,
      "ast" : {
        "expressions" : [ {
          "go-type" : 108,
          "kind" : "type",
          "params" : [ {
            "declared-type" : {
              "element" : {
                "go-type" : 7,
                "kind" : "type",
                "type" : "identifier",
                "value" : {
                  "go-type" : 7,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "int"
                }
              },
              "go-type" : 26,
              "kind" : "type",
              "type" : "slice"
            },
            "kind" : "field",
            "names" : [ ],
            "tag" : null
          } ],
          "results" : [ {
            "declared-type" : {
              "go-type" : 7,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 7,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "int"
              }
            },
            "kind" : "field",
            "names" : [ ],
            "tag" : null
          } ],
          "type" : "function",
          "variadic" : null
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 266,
      "code" : "case func([]int) int:\n\treduceLastI(dt, rt, dimSize, def, f)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 35 ],
      "in-vars" : [ 21, 52, 51, 49, 50 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 266,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 26,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "dt",
              "variable" : 50
            }
          }, {
            "go-type" : 26,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "rt",
              "variable" : 51
            }
          }, {
            "go-type" : 7,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "dimSize",
              "variable" : 21
            }
          }, {
            "go-type" : 7,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "def",
              "variable" : 49
            }
          }, {
            "go-type" : 108,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "f",
              "variable" : 52
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 104,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 6,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "reduceLastI"
            }
          },
          "go-type" : 5,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 266,
      "code" : "reduceLastI(dt, rt, dimSize, def, f)",
      "entry" : false,
      "use-vars" : [ 21, 49, 52, 50, 51 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 32 ],
      "in-vars" : [ 21, 53, 51, 49, 50 ],
      "exit" : false,
      "out-vars" : [ 49, 50, 21, 53, 51 ],
      "decl-vars" : [ ],
      "line-start" : 267,
      "ast" : {
        "expressions" : [ {
          "go-type" : 111,
          "kind" : "type",
          "params" : [ {
            "declared-type" : {
              "go-type" : 7,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 7,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "int"
              }
            },
            "kind" : "field",
            "names" : [ ],
            "tag" : null
          }, {
            "declared-type" : {
              "go-type" : 7,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 7,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "int"
              }
            },
            "kind" : "field",
            "names" : [ ],
            "tag" : null
          } ],
          "results" : [ {
            "declared-type" : {
              "go-type" : 7,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 7,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "int"
              }
            },
            "kind" : "field",
            "names" : [ ],
            "tag" : null
          } ],
          "type" : "function",
          "variadic" : null
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 268,
      "code" : "case func(int, int) int:\n\tgenericReduceLastI(dt, rt, dimSize, def, f)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 35 ],
      "in-vars" : [ 21, 53, 51, 49, 50 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 268,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 26,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "dt",
              "variable" : 50
            }
          }, {
            "go-type" : 26,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "rt",
              "variable" : 51
            }
          }, {
            "go-type" : 7,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "dimSize",
              "variable" : 21
            }
          }, {
            "go-type" : 7,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "def",
              "variable" : 49
            }
          }, {
            "go-type" : 111,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "f",
              "variable" : 53
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 109,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 7,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "genericReduceLastI"
            }
          },
          "go-type" : 5,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 268,
      "code" : "genericReduceLastI(dt, rt, dimSize, def, f)",
      "entry" : false,
      "use-vars" : [ 50, 51, 21, 49, 53 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 34 ],
      "in-vars" : [ 23 ],
      "exit" : false,
      "out-vars" : [ 23 ],
      "decl-vars" : [ ],
      "line-start" : 269,
      "ast" : {
        "expressions" : [ ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 270,
      "code" : "default:\n\treturn errors.Errorf(reductionErrMsg, fn)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 23 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 270,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "arguments" : [ {
            "go-type" : 23,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "Cannot reduce with function of type %T"
            }
          }, {
            "go-type" : 78,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "fn",
              "variable" : 23
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 85,
            "kind" : "expression",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 4,
              "value" : "errors"
            },
            "type" : "identifier",
            "value" : {
              "function" : 1,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "Errorf"
            }
          },
          "go-type" : 80,
          "kind" : "expression",
          "type" : "call"
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 270,
      "code" : "return errors.Errorf(reductionErrMsg, fn)",
      "entry" : false,
      "use-vars" : [ 23 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 272,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 100,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Nil",
            "kind" : "ident",
            "value" : "nil"
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 272,
      "code" : "return nil",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 37 ],
      "in-vars" : [ 19, 37, 23, 20, 21, 22 ],
      "exit" : false,
      "out-vars" : [ 23, 20, 21, 22, 19 ],
      "decl-vars" : [ ],
      "line-start" : 273,
      "ast" : {
        "expressions" : [ {
          "go-type" : 2,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "Int8",
            "variable" : 37
          }
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 289,
      "code" : "case Int8:\n\tvar def int8\n\n\tif def, ok = defaultValue.(int8); !ok {\n\t\treturn errors.Errorf(defaultValueErrMsg, def, defaultValue, defaultValue)\n\t}\n\tdt := data.Int8s()\n\trt := retVal.Int8s()\n\tswitch f := fn.(type) {\n\tcase func([]int8) int8:\n\t\treduceLastI8(dt, rt, dimSize, def, f)\n\tcase func(int8, int8) int8:\n\t\tgenericReduceLastI8(dt, rt, dimSize, def, f)\n\tdefault:\n\t\treturn errors.Errorf(reductionErrMsg, fn)\n\t}\n\treturn nil",
      "entry" : false,
      "use-vars" : [ 37 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 39 ],
      "in-vars" : [ 22, 19, 23, 20, 21 ],
      "exit" : false,
      "out-vars" : [ 23, 20, 21, 22, 19 ],
      "decl-vars" : [ 54 ],
      "line-start" : 274,
      "ast" : {
        "kind" : "statement",
        "target" : {
          "kind" : "decl",
          "specs" : [ {
            "comments" : [ ],
            "declared-type" : {
              "go-type" : 113,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 113,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "int8"
              }
            },
            "kind" : "spec",
            "names" : [ {
              "ident-kind" : "NoKind",
              "kind" : "ident",
              "value" : "def"
            } ],
            "type" : "var",
            "values" : [ ]
          } ],
          "type" : "var"
        },
        "type" : "declaration"
      },
      "assign-vars" : [ ],
      "line-end" : 274,
      "code" : "var def int8",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 40, 41 ],
      "in-vars" : [ 20, 21, 22, 19, 54, 43, 23 ],
      "exit" : false,
      "out-vars" : [ 23, 20, 21, 22, 19, 54 ],
      "decl-vars" : [ ],
      "line-start" : 276,
      "ast" : {
        "condition" : {
          "go-type" : 11,
          "kind" : "expression",
          "operator" : "!",
          "target" : {
            "go-type" : 11,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "ok",
              "variable" : 43
            }
          },
          "type" : "unary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 278,
      "code" : "if def, ok = defaultValue.(int8); !ok {\n\treturn errors.Errorf(defaultValueErrMsg, def, defaultValue, defaultValue)\n}",
      "entry" : false,
      "use-vars" : [ 43 ]
    }, {
      "update-vars" : [ 54, 43 ],
      "successors" : [ 38 ],
      "in-vars" : [ 23, 20, 21, 22, 19 ],
      "exit" : false,
      "out-vars" : [ 43, 23, 20, 21, 22, 19, 54 ],
      "decl-vars" : [ ],
      "line-start" : 276,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 113,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "def",
            "variable" : 54
          }
        }, {
          "go-type" : 11,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "ok",
            "variable" : 43
          }
        } ],
        "right" : [ {
          "asserted" : {
            "go-type" : 113,
            "kind" : "type",
            "type" : "identifier",
            "value" : {
              "go-type" : 113,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "int8"
            }
          },
          "go-type" : 114,
          "kind" : "expression",
          "target" : {
            "go-type" : 78,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "defaultValue",
              "variable" : 22
            }
          },
          "type" : "type-assert"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 43, 54 ],
      "line-end" : 276,
      "code" : "def, ok = defaultValue.(int8)",
      "entry" : false,
      "use-vars" : [ 22 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 22, 54 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 277,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "arguments" : [ {
            "go-type" : 23,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "Expected default value of type %T. Got %v of %T instead"
            }
          }, {
            "go-type" : 113,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "def",
              "variable" : 54
            }
          }, {
            "go-type" : 78,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "defaultValue",
              "variable" : 22
            }
          }, {
            "go-type" : 78,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "defaultValue",
              "variable" : 22
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 85,
            "kind" : "expression",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 4,
              "value" : "errors"
            },
            "type" : "identifier",
            "value" : {
              "function" : 1,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "Errorf"
            }
          },
          "go-type" : 80,
          "kind" : "expression",
          "type" : "call"
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 277,
      "code" : "return errors.Errorf(defaultValueErrMsg, def, defaultValue, defaultValue)",
      "entry" : false,
      "use-vars" : [ 54, 22 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 42 ],
      "in-vars" : [ 23, 20, 21, 19, 54 ],
      "exit" : false,
      "out-vars" : [ 23, 20, 21, 55, 54 ],
      "decl-vars" : [ 55 ],
      "line-start" : 279,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "dt"
          }
        } ],
        "right" : [ {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "function" : 8,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "Int8s"
            },
            "go-type" : 116,
            "kind" : "expression",
            "target" : {
              "go-type" : 75,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "data",
                "variable" : 19
              }
            },
            "type" : "selector"
          },
          "go-type" : 115,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 279,
      "code" : "dt := data.Int8s()",
      "entry" : false,
      "use-vars" : [ 19 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 43 ],
      "in-vars" : [ 23, 20, 21, 55, 54 ],
      "exit" : false,
      "out-vars" : [ 23, 56, 21, 55, 54 ],
      "decl-vars" : [ 56 ],
      "line-start" : 280,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "rt"
          }
        } ],
        "right" : [ {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "function" : 8,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "Int8s"
            },
            "go-type" : 116,
            "kind" : "expression",
            "target" : {
              "go-type" : 75,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "retVal",
                "variable" : 20
              }
            },
            "type" : "selector"
          },
          "go-type" : 115,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 280,
      "code" : "rt := retVal.Int8s()",
      "entry" : false,
      "use-vars" : [ 20 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 44 ],
      "in-vars" : [ 21, 55, 54, 23, 56 ],
      "exit" : false,
      "out-vars" : [ 56, 21, 55, 54, 58, 57, 23 ],
      "decl-vars" : [ 57, 58, 136 ],
      "line-start" : 281,
      "ast" : {
        "kind" : "statement",
        "type" : "type-switch"
      },
      "assign-vars" : [ ],
      "line-end" : 288,
      "code" : "switch f := fn.(type) {\ncase func([]int8) int8:\n\treduceLastI8(dt, rt, dimSize, def, f)\ncase func(int8, int8) int8:\n\tgenericReduceLastI8(dt, rt, dimSize, def, f)\ndefault:\n\treturn errors.Errorf(reductionErrMsg, fn)\n}",
      "entry" : false,
      "use-vars" : [ 23 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 45, 47, 49 ],
      "in-vars" : [ 23, 56, 21, 55, 54, 58, 57 ],
      "exit" : false,
      "out-vars" : [ 23, 56, 21, 55, 54, 58, 57 ],
      "decl-vars" : [ ],
      "line-start" : 281,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "f"
          }
        } ],
        "right" : [ {
          "asserted" : null,
          "go-type" : -1,
          "kind" : "expression",
          "target" : {
            "go-type" : 78,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "fn",
              "variable" : 23
            }
          },
          "type" : "type-assert"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 281,
      "code" : "f := fn.(type)",
      "entry" : false,
      "use-vars" : [ 23 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 46 ],
      "in-vars" : [ 55, 54, 57, 56, 21 ],
      "exit" : false,
      "out-vars" : [ 56, 21, 55, 54, 57 ],
      "decl-vars" : [ ],
      "line-start" : 282,
      "ast" : {
        "expressions" : [ {
          "go-type" : 123,
          "kind" : "type",
          "params" : [ {
            "declared-type" : {
              "element" : {
                "go-type" : 113,
                "kind" : "type",
                "type" : "identifier",
                "value" : {
                  "go-type" : 113,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "int8"
                }
              },
              "go-type" : 115,
              "kind" : "type",
              "type" : "slice"
            },
            "kind" : "field",
            "names" : [ ],
            "tag" : null
          } ],
          "results" : [ {
            "declared-type" : {
              "go-type" : 113,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 113,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "int8"
              }
            },
            "kind" : "field",
            "names" : [ ],
            "tag" : null
          } ],
          "type" : "function",
          "variadic" : null
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 283,
      "code" : "case func([]int8) int8:\n\treduceLastI8(dt, rt, dimSize, def, f)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 51 ],
      "in-vars" : [ 21, 55, 54, 57, 56 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 283,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 115,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "dt",
              "variable" : 55
            }
          }, {
            "go-type" : 115,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "rt",
              "variable" : 56
            }
          }, {
            "go-type" : 7,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "dimSize",
              "variable" : 21
            }
          }, {
            "go-type" : 113,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "def",
              "variable" : 54
            }
          }, {
            "go-type" : 123,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "f",
              "variable" : 57
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 118,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 9,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "reduceLastI8"
            }
          },
          "go-type" : 5,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 283,
      "code" : "reduceLastI8(dt, rt, dimSize, def, f)",
      "entry" : false,
      "use-vars" : [ 54, 57, 55, 56, 21 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 48 ],
      "in-vars" : [ 56, 21, 55, 54, 58 ],
      "exit" : false,
      "out-vars" : [ 56, 21, 55, 54, 58 ],
      "decl-vars" : [ ],
      "line-start" : 284,
      "ast" : {
        "expressions" : [ {
          "go-type" : 126,
          "kind" : "type",
          "params" : [ {
            "declared-type" : {
              "go-type" : 113,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 113,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "int8"
              }
            },
            "kind" : "field",
            "names" : [ ],
            "tag" : null
          }, {
            "declared-type" : {
              "go-type" : 113,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 113,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "int8"
              }
            },
            "kind" : "field",
            "names" : [ ],
            "tag" : null
          } ],
          "results" : [ {
            "declared-type" : {
              "go-type" : 113,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 113,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "int8"
              }
            },
            "kind" : "field",
            "names" : [ ],
            "tag" : null
          } ],
          "type" : "function",
          "variadic" : null
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 285,
      "code" : "case func(int8, int8) int8:\n\tgenericReduceLastI8(dt, rt, dimSize, def, f)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 51 ],
      "in-vars" : [ 54, 58, 56, 21, 55 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 285,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 115,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "dt",
              "variable" : 55
            }
          }, {
            "go-type" : 115,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "rt",
              "variable" : 56
            }
          }, {
            "go-type" : 7,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "dimSize",
              "variable" : 21
            }
          }, {
            "go-type" : 113,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "def",
              "variable" : 54
            }
          }, {
            "go-type" : 126,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "f",
              "variable" : 58
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 124,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 10,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "genericReduceLastI8"
            }
          },
          "go-type" : 5,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 285,
      "code" : "genericReduceLastI8(dt, rt, dimSize, def, f)",
      "entry" : false,
      "use-vars" : [ 55, 56, 21, 54, 58 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 50 ],
      "in-vars" : [ 23 ],
      "exit" : false,
      "out-vars" : [ 23 ],
      "decl-vars" : [ ],
      "line-start" : 286,
      "ast" : {
        "expressions" : [ ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 287,
      "code" : "default:\n\treturn errors.Errorf(reductionErrMsg, fn)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 23 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 287,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "arguments" : [ {
            "go-type" : 23,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "Cannot reduce with function of type %T"
            }
          }, {
            "go-type" : 78,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "fn",
              "variable" : 23
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 85,
            "kind" : "expression",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 4,
              "value" : "errors"
            },
            "type" : "identifier",
            "value" : {
              "function" : 1,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "Errorf"
            }
          },
          "go-type" : 80,
          "kind" : "expression",
          "type" : "call"
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 287,
      "code" : "return errors.Errorf(reductionErrMsg, fn)",
      "entry" : false,
      "use-vars" : [ 23 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 289,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 100,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Nil",
            "kind" : "ident",
            "value" : "nil"
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 289,
      "code" : "return nil",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 53 ],
      "in-vars" : [ 19, 42, 23, 20, 21, 22 ],
      "exit" : false,
      "out-vars" : [ 23, 20, 21, 22, 19 ],
      "decl-vars" : [ ],
      "line-start" : 290,
      "ast" : {
        "expressions" : [ {
          "go-type" : 2,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "Int16",
            "variable" : 42
          }
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 306,
      "code" : "case Int16:\n\tvar def int16\n\n\tif def, ok = defaultValue.(int16); !ok {\n\t\treturn errors.Errorf(defaultValueErrMsg, def, defaultValue, defaultValue)\n\t}\n\tdt := data.Int16s()\n\trt := retVal.Int16s()\n\tswitch f := fn.(type) {\n\tcase func([]int16) int16:\n\t\treduceLastI16(dt, rt, dimSize, def, f)\n\tcase func(int16, int16) int16:\n\t\tgenericReduceLastI16(dt, rt, dimSize, def, f)\n\tdefault:\n\t\treturn errors.Errorf(reductionErrMsg, fn)\n\t}\n\treturn nil",
      "entry" : false,
      "use-vars" : [ 42 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 55 ],
      "in-vars" : [ 20, 21, 22, 19, 23 ],
      "exit" : false,
      "out-vars" : [ 23, 20, 21, 22, 19 ],
      "decl-vars" : [ 59 ],
      "line-start" : 291,
      "ast" : {
        "kind" : "statement",
        "target" : {
          "kind" : "decl",
          "specs" : [ {
            "comments" : [ ],
            "declared-type" : {
              "go-type" : 128,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 128,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "int16"
              }
            },
            "kind" : "spec",
            "names" : [ {
              "ident-kind" : "NoKind",
              "kind" : "ident",
              "value" : "def"
            } ],
            "type" : "var",
            "values" : [ ]
          } ],
          "type" : "var"
        },
        "type" : "declaration"
      },
      "assign-vars" : [ ],
      "line-end" : 291,
      "code" : "var def int16",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 56, 57 ],
      "in-vars" : [ 23, 20, 21, 59, 22, 19, 43 ],
      "exit" : false,
      "out-vars" : [ 59, 22, 19, 23, 20, 21 ],
      "decl-vars" : [ ],
      "line-start" : 293,
      "ast" : {
        "condition" : {
          "go-type" : 11,
          "kind" : "expression",
          "operator" : "!",
          "target" : {
            "go-type" : 11,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "ok",
              "variable" : 43
            }
          },
          "type" : "unary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 295,
      "code" : "if def, ok = defaultValue.(int16); !ok {\n\treturn errors.Errorf(defaultValueErrMsg, def, defaultValue, defaultValue)\n}",
      "entry" : false,
      "use-vars" : [ 43 ]
    }, {
      "update-vars" : [ 43, 59 ],
      "successors" : [ 54 ],
      "in-vars" : [ 23, 20, 21, 22, 19 ],
      "exit" : false,
      "out-vars" : [ 59, 22, 19, 43, 23, 20, 21 ],
      "decl-vars" : [ ],
      "line-start" : 293,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 128,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "def",
            "variable" : 59
          }
        }, {
          "go-type" : 11,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "ok",
            "variable" : 43
          }
        } ],
        "right" : [ {
          "asserted" : {
            "go-type" : 128,
            "kind" : "type",
            "type" : "identifier",
            "value" : {
              "go-type" : 128,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "int16"
            }
          },
          "go-type" : 129,
          "kind" : "expression",
          "target" : {
            "go-type" : 78,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "defaultValue",
              "variable" : 22
            }
          },
          "type" : "type-assert"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 43, 59 ],
      "line-end" : 293,
      "code" : "def, ok = defaultValue.(int16)",
      "entry" : false,
      "use-vars" : [ 22 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 59, 22 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 294,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "arguments" : [ {
            "go-type" : 23,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "Expected default value of type %T. Got %v of %T instead"
            }
          }, {
            "go-type" : 128,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "def",
              "variable" : 59
            }
          }, {
            "go-type" : 78,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "defaultValue",
              "variable" : 22
            }
          }, {
            "go-type" : 78,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "defaultValue",
              "variable" : 22
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 85,
            "kind" : "expression",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 4,
              "value" : "errors"
            },
            "type" : "identifier",
            "value" : {
              "function" : 1,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "Errorf"
            }
          },
          "go-type" : 80,
          "kind" : "expression",
          "type" : "call"
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 294,
      "code" : "return errors.Errorf(defaultValueErrMsg, def, defaultValue, defaultValue)",
      "entry" : false,
      "use-vars" : [ 59, 22 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 58 ],
      "in-vars" : [ 19, 23, 20, 21, 59 ],
      "exit" : false,
      "out-vars" : [ 23, 20, 21, 59, 60 ],
      "decl-vars" : [ 60 ],
      "line-start" : 296,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "dt"
          }
        } ],
        "right" : [ {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "function" : 11,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "Int16s"
            },
            "go-type" : 131,
            "kind" : "expression",
            "target" : {
              "go-type" : 75,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "data",
                "variable" : 19
              }
            },
            "type" : "selector"
          },
          "go-type" : 130,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 296,
      "code" : "dt := data.Int16s()",
      "entry" : false,
      "use-vars" : [ 19 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 59 ],
      "in-vars" : [ 60, 23, 20, 21, 59 ],
      "exit" : false,
      "out-vars" : [ 23, 61, 21, 59, 60 ],
      "decl-vars" : [ 61 ],
      "line-start" : 297,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "rt"
          }
        } ],
        "right" : [ {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "function" : 11,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "Int16s"
            },
            "go-type" : 131,
            "kind" : "expression",
            "target" : {
              "go-type" : 75,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "retVal",
                "variable" : 20
              }
            },
            "type" : "selector"
          },
          "go-type" : 130,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 297,
      "code" : "rt := retVal.Int16s()",
      "entry" : false,
      "use-vars" : [ 20 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 60 ],
      "in-vars" : [ 60, 23, 61, 21, 59 ],
      "exit" : false,
      "out-vars" : [ 60, 62, 23, 61, 21, 59, 63 ],
      "decl-vars" : [ 62, 63, 137 ],
      "line-start" : 298,
      "ast" : {
        "kind" : "statement",
        "type" : "type-switch"
      },
      "assign-vars" : [ ],
      "line-end" : 305,
      "code" : "switch f := fn.(type) {\ncase func([]int16) int16:\n\treduceLastI16(dt, rt, dimSize, def, f)\ncase func(int16, int16) int16:\n\tgenericReduceLastI16(dt, rt, dimSize, def, f)\ndefault:\n\treturn errors.Errorf(reductionErrMsg, fn)\n}",
      "entry" : false,
      "use-vars" : [ 23 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 61, 63, 65 ],
      "in-vars" : [ 60, 62, 23, 61, 21, 59, 63 ],
      "exit" : false,
      "out-vars" : [ 62, 23, 61, 21, 59, 63, 60 ],
      "decl-vars" : [ ],
      "line-start" : 298,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "f"
          }
        } ],
        "right" : [ {
          "asserted" : null,
          "go-type" : -1,
          "kind" : "expression",
          "target" : {
            "go-type" : 78,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "fn",
              "variable" : 23
            }
          },
          "type" : "type-assert"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 298,
      "code" : "f := fn.(type)",
      "entry" : false,
      "use-vars" : [ 23 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 62 ],
      "in-vars" : [ 59, 60, 62, 61, 21 ],
      "exit" : false,
      "out-vars" : [ 62, 61, 21, 59, 60 ],
      "decl-vars" : [ ],
      "line-start" : 299,
      "ast" : {
        "expressions" : [ {
          "go-type" : 138,
          "kind" : "type",
          "params" : [ {
            "declared-type" : {
              "element" : {
                "go-type" : 128,
                "kind" : "type",
                "type" : "identifier",
                "value" : {
                  "go-type" : 128,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "int16"
                }
              },
              "go-type" : 130,
              "kind" : "type",
              "type" : "slice"
            },
            "kind" : "field",
            "names" : [ ],
            "tag" : null
          } ],
          "results" : [ {
            "declared-type" : {
              "go-type" : 128,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 128,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "int16"
              }
            },
            "kind" : "field",
            "names" : [ ],
            "tag" : null
          } ],
          "type" : "function",
          "variadic" : null
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 300,
      "code" : "case func([]int16) int16:\n\treduceLastI16(dt, rt, dimSize, def, f)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 67 ],
      "in-vars" : [ 61, 21, 59, 60, 62 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 300,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 130,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "dt",
              "variable" : 60
            }
          }, {
            "go-type" : 130,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "rt",
              "variable" : 61
            }
          }, {
            "go-type" : 7,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "dimSize",
              "variable" : 21
            }
          }, {
            "go-type" : 128,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "def",
              "variable" : 59
            }
          }, {
            "go-type" : 138,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "f",
              "variable" : 62
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 133,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 12,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "reduceLastI16"
            }
          },
          "go-type" : 5,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 300,
      "code" : "reduceLastI16(dt, rt, dimSize, def, f)",
      "entry" : false,
      "use-vars" : [ 61, 21, 59, 62, 60 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 64 ],
      "in-vars" : [ 59, 63, 60, 61, 21 ],
      "exit" : false,
      "out-vars" : [ 61, 21, 59, 63, 60 ],
      "decl-vars" : [ ],
      "line-start" : 301,
      "ast" : {
        "expressions" : [ {
          "go-type" : 141,
          "kind" : "type",
          "params" : [ {
            "declared-type" : {
              "go-type" : 128,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 128,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "int16"
              }
            },
            "kind" : "field",
            "names" : [ ],
            "tag" : null
          }, {
            "declared-type" : {
              "go-type" : 128,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 128,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "int16"
              }
            },
            "kind" : "field",
            "names" : [ ],
            "tag" : null
          } ],
          "results" : [ {
            "declared-type" : {
              "go-type" : 128,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 128,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "int16"
              }
            },
            "kind" : "field",
            "names" : [ ],
            "tag" : null
          } ],
          "type" : "function",
          "variadic" : null
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 302,
      "code" : "case func(int16, int16) int16:\n\tgenericReduceLastI16(dt, rt, dimSize, def, f)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 67 ],
      "in-vars" : [ 61, 21, 59, 63, 60 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 302,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 130,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "dt",
              "variable" : 60
            }
          }, {
            "go-type" : 130,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "rt",
              "variable" : 61
            }
          }, {
            "go-type" : 7,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "dimSize",
              "variable" : 21
            }
          }, {
            "go-type" : 128,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "def",
              "variable" : 59
            }
          }, {
            "go-type" : 141,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "f",
              "variable" : 63
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 139,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 13,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "genericReduceLastI16"
            }
          },
          "go-type" : 5,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 302,
      "code" : "genericReduceLastI16(dt, rt, dimSize, def, f)",
      "entry" : false,
      "use-vars" : [ 61, 21, 59, 63, 60 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 66 ],
      "in-vars" : [ 23 ],
      "exit" : false,
      "out-vars" : [ 23 ],
      "decl-vars" : [ ],
      "line-start" : 303,
      "ast" : {
        "expressions" : [ ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 304,
      "code" : "default:\n\treturn errors.Errorf(reductionErrMsg, fn)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 23 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 304,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "arguments" : [ {
            "go-type" : 23,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "Cannot reduce with function of type %T"
            }
          }, {
            "go-type" : 78,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "fn",
              "variable" : 23
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 85,
            "kind" : "expression",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 4,
              "value" : "errors"
            },
            "type" : "identifier",
            "value" : {
              "function" : 1,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "Errorf"
            }
          },
          "go-type" : 80,
          "kind" : "expression",
          "type" : "call"
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 304,
      "code" : "return errors.Errorf(reductionErrMsg, fn)",
      "entry" : false,
      "use-vars" : [ 23 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 306,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 100,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Nil",
            "kind" : "ident",
            "value" : "nil"
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 306,
      "code" : "return nil",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 69 ],
      "in-vars" : [ 22, 19, 34, 23, 20, 21 ],
      "exit" : false,
      "out-vars" : [ 20, 21, 22, 19, 23 ],
      "decl-vars" : [ ],
      "line-start" : 307,
      "ast" : {
        "expressions" : [ {
          "go-type" : 2,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "Int32",
            "variable" : 34
          }
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 323,
      "code" : "case Int32:\n\tvar def int32\n\n\tif def, ok = defaultValue.(int32); !ok {\n\t\treturn errors.Errorf(defaultValueErrMsg, def, defaultValue, defaultValue)\n\t}\n\tdt := data.Int32s()\n\trt := retVal.Int32s()\n\tswitch f := fn.(type) {\n\tcase func([]int32) int32:\n\t\treduceLastI32(dt, rt, dimSize, def, f)\n\tcase func(int32, int32) int32:\n\t\tgenericReduceLastI32(dt, rt, dimSize, def, f)\n\tdefault:\n\t\treturn errors.Errorf(reductionErrMsg, fn)\n\t}\n\treturn nil",
      "entry" : false,
      "use-vars" : [ 34 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 71 ],
      "in-vars" : [ 23, 20, 21, 22, 19 ],
      "exit" : false,
      "out-vars" : [ 23, 20, 21, 22, 19 ],
      "decl-vars" : [ 64 ],
      "line-start" : 308,
      "ast" : {
        "kind" : "statement",
        "target" : {
          "kind" : "decl",
          "specs" : [ {
            "comments" : [ ],
            "declared-type" : {
              "go-type" : 59,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 59,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "int32"
              }
            },
            "kind" : "spec",
            "names" : [ {
              "ident-kind" : "NoKind",
              "kind" : "ident",
              "value" : "def"
            } ],
            "type" : "var",
            "values" : [ ]
          } ],
          "type" : "var"
        },
        "type" : "declaration"
      },
      "assign-vars" : [ ],
      "line-end" : 308,
      "code" : "var def int32",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 72, 73 ],
      "in-vars" : [ 21, 22, 19, 64, 43, 23, 20 ],
      "exit" : false,
      "out-vars" : [ 21, 22, 19, 64, 23, 20 ],
      "decl-vars" : [ ],
      "line-start" : 310,
      "ast" : {
        "condition" : {
          "go-type" : 11,
          "kind" : "expression",
          "operator" : "!",
          "target" : {
            "go-type" : 11,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "ok",
              "variable" : 43
            }
          },
          "type" : "unary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 312,
      "code" : "if def, ok = defaultValue.(int32); !ok {\n\treturn errors.Errorf(defaultValueErrMsg, def, defaultValue, defaultValue)\n}",
      "entry" : false,
      "use-vars" : [ 43 ]
    }, {
      "update-vars" : [ 43, 64 ],
      "successors" : [ 70 ],
      "in-vars" : [ 23, 20, 21, 22, 19 ],
      "exit" : false,
      "out-vars" : [ 21, 22, 19, 64, 43, 23, 20 ],
      "decl-vars" : [ ],
      "line-start" : 310,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 59,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "def",
            "variable" : 64
          }
        }, {
          "go-type" : 11,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "ok",
            "variable" : 43
          }
        } ],
        "right" : [ {
          "asserted" : {
            "go-type" : 59,
            "kind" : "type",
            "type" : "identifier",
            "value" : {
              "go-type" : 59,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "int32"
            }
          },
          "go-type" : 143,
          "kind" : "expression",
          "target" : {
            "go-type" : 78,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "defaultValue",
              "variable" : 22
            }
          },
          "type" : "type-assert"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 43, 64 ],
      "line-end" : 310,
      "code" : "def, ok = defaultValue.(int32)",
      "entry" : false,
      "use-vars" : [ 22 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 22, 64 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 311,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "arguments" : [ {
            "go-type" : 23,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "Expected default value of type %T. Got %v of %T instead"
            }
          }, {
            "go-type" : 59,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "def",
              "variable" : 64
            }
          }, {
            "go-type" : 78,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "defaultValue",
              "variable" : 22
            }
          }, {
            "go-type" : 78,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "defaultValue",
              "variable" : 22
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 85,
            "kind" : "expression",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 4,
              "value" : "errors"
            },
            "type" : "identifier",
            "value" : {
              "function" : 1,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "Errorf"
            }
          },
          "go-type" : 80,
          "kind" : "expression",
          "type" : "call"
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 311,
      "code" : "return errors.Errorf(defaultValueErrMsg, def, defaultValue, defaultValue)",
      "entry" : false,
      "use-vars" : [ 22, 64 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 74 ],
      "in-vars" : [ 20, 21, 19, 64, 23 ],
      "exit" : false,
      "out-vars" : [ 23, 20, 21, 65, 64 ],
      "decl-vars" : [ 65 ],
      "line-start" : 313,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "dt"
          }
        } ],
        "right" : [ {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "function" : 14,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "Int32s"
            },
            "go-type" : 145,
            "kind" : "expression",
            "target" : {
              "go-type" : 75,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "data",
                "variable" : 19
              }
            },
            "type" : "selector"
          },
          "go-type" : 144,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 313,
      "code" : "dt := data.Int32s()",
      "entry" : false,
      "use-vars" : [ 19 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 75 ],
      "in-vars" : [ 23, 20, 21, 65, 64 ],
      "exit" : false,
      "out-vars" : [ 66, 64, 23, 21, 65 ],
      "decl-vars" : [ 66 ],
      "line-start" : 314,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "rt"
          }
        } ],
        "right" : [ {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "function" : 14,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "Int32s"
            },
            "go-type" : 145,
            "kind" : "expression",
            "target" : {
              "go-type" : 75,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "retVal",
                "variable" : 20
              }
            },
            "type" : "selector"
          },
          "go-type" : 144,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 314,
      "code" : "rt := retVal.Int32s()",
      "entry" : false,
      "use-vars" : [ 20 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 76 ],
      "in-vars" : [ 21, 65, 66, 64, 23 ],
      "exit" : false,
      "out-vars" : [ 23, 21, 65, 66, 64, 67, 68 ],
      "decl-vars" : [ 67, 68, 138 ],
      "line-start" : 315,
      "ast" : {
        "kind" : "statement",
        "type" : "type-switch"
      },
      "assign-vars" : [ ],
      "line-end" : 322,
      "code" : "switch f := fn.(type) {\ncase func([]int32) int32:\n\treduceLastI32(dt, rt, dimSize, def, f)\ncase func(int32, int32) int32:\n\tgenericReduceLastI32(dt, rt, dimSize, def, f)\ndefault:\n\treturn errors.Errorf(reductionErrMsg, fn)\n}",
      "entry" : false,
      "use-vars" : [ 23 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 77, 79, 81 ],
      "in-vars" : [ 64, 67, 68, 23, 21, 65, 66 ],
      "exit" : false,
      "out-vars" : [ 23, 21, 65, 66, 64, 67, 68 ],
      "decl-vars" : [ ],
      "line-start" : 315,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "f"
          }
        } ],
        "right" : [ {
          "asserted" : null,
          "go-type" : -1,
          "kind" : "expression",
          "target" : {
            "go-type" : 78,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "fn",
              "variable" : 23
            }
          },
          "type" : "type-assert"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 315,
      "code" : "f := fn.(type)",
      "entry" : false,
      "use-vars" : [ 23 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 78 ],
      "in-vars" : [ 21, 65, 66, 64, 67 ],
      "exit" : false,
      "out-vars" : [ 21, 65, 66, 64, 67 ],
      "decl-vars" : [ ],
      "line-start" : 316,
      "ast" : {
        "expressions" : [ {
          "go-type" : 152,
          "kind" : "type",
          "params" : [ {
            "declared-type" : {
              "element" : {
                "go-type" : 59,
                "kind" : "type",
                "type" : "identifier",
                "value" : {
                  "go-type" : 59,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "int32"
                }
              },
              "go-type" : 144,
              "kind" : "type",
              "type" : "slice"
            },
            "kind" : "field",
            "names" : [ ],
            "tag" : null
          } ],
          "results" : [ {
            "declared-type" : {
              "go-type" : 59,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 59,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "int32"
              }
            },
            "kind" : "field",
            "names" : [ ],
            "tag" : null
          } ],
          "type" : "function",
          "variadic" : null
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 317,
      "code" : "case func([]int32) int32:\n\treduceLastI32(dt, rt, dimSize, def, f)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 83 ],
      "in-vars" : [ 21, 65, 66, 64, 67 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 317,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 144,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "dt",
              "variable" : 65
            }
          }, {
            "go-type" : 144,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "rt",
              "variable" : 66
            }
          }, {
            "go-type" : 7,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "dimSize",
              "variable" : 21
            }
          }, {
            "go-type" : 59,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "def",
              "variable" : 64
            }
          }, {
            "go-type" : 152,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "f",
              "variable" : 67
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 147,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 15,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "reduceLastI32"
            }
          },
          "go-type" : 5,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 317,
      "code" : "reduceLastI32(dt, rt, dimSize, def, f)",
      "entry" : false,
      "use-vars" : [ 65, 66, 21, 64, 67 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 80 ],
      "in-vars" : [ 65, 66, 64, 68, 21 ],
      "exit" : false,
      "out-vars" : [ 64, 68, 21, 65, 66 ],
      "decl-vars" : [ ],
      "line-start" : 318,
      "ast" : {
        "expressions" : [ {
          "go-type" : 155,
          "kind" : "type",
          "params" : [ {
            "declared-type" : {
              "go-type" : 59,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 59,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "int32"
              }
            },
            "kind" : "field",
            "names" : [ ],
            "tag" : null
          }, {
            "declared-type" : {
              "go-type" : 59,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 59,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "int32"
              }
            },
            "kind" : "field",
            "names" : [ ],
            "tag" : null
          } ],
          "results" : [ {
            "declared-type" : {
              "go-type" : 59,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 59,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "int32"
              }
            },
            "kind" : "field",
            "names" : [ ],
            "tag" : null
          } ],
          "type" : "function",
          "variadic" : null
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 319,
      "code" : "case func(int32, int32) int32:\n\tgenericReduceLastI32(dt, rt, dimSize, def, f)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 83 ],
      "in-vars" : [ 21, 65, 66, 64, 68 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 319,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 144,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "dt",
              "variable" : 65
            }
          }, {
            "go-type" : 144,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "rt",
              "variable" : 66
            }
          }, {
            "go-type" : 7,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "dimSize",
              "variable" : 21
            }
          }, {
            "go-type" : 59,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "def",
              "variable" : 64
            }
          }, {
            "go-type" : 155,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "f",
              "variable" : 68
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 153,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 16,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "genericReduceLastI32"
            }
          },
          "go-type" : 5,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 319,
      "code" : "genericReduceLastI32(dt, rt, dimSize, def, f)",
      "entry" : false,
      "use-vars" : [ 66, 21, 64, 68, 65 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 82 ],
      "in-vars" : [ 23 ],
      "exit" : false,
      "out-vars" : [ 23 ],
      "decl-vars" : [ ],
      "line-start" : 320,
      "ast" : {
        "expressions" : [ ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 321,
      "code" : "default:\n\treturn errors.Errorf(reductionErrMsg, fn)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 23 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 321,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "arguments" : [ {
            "go-type" : 23,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "Cannot reduce with function of type %T"
            }
          }, {
            "go-type" : 78,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "fn",
              "variable" : 23
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 85,
            "kind" : "expression",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 4,
              "value" : "errors"
            },
            "type" : "identifier",
            "value" : {
              "function" : 1,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "Errorf"
            }
          },
          "go-type" : 80,
          "kind" : "expression",
          "type" : "call"
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 321,
      "code" : "return errors.Errorf(reductionErrMsg, fn)",
      "entry" : false,
      "use-vars" : [ 23 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 323,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 100,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Nil",
            "kind" : "ident",
            "value" : "nil"
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 323,
      "code" : "return nil",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 85 ],
      "in-vars" : [ 33, 23, 20, 21, 22, 19 ],
      "exit" : false,
      "out-vars" : [ 21, 22, 19, 23, 20 ],
      "decl-vars" : [ ],
      "line-start" : 324,
      "ast" : {
        "expressions" : [ {
          "go-type" : 2,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "Int64",
            "variable" : 33
          }
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 340,
      "code" : "case Int64:\n\tvar def int64\n\n\tif def, ok = defaultValue.(int64); !ok {\n\t\treturn errors.Errorf(defaultValueErrMsg, def, defaultValue, defaultValue)\n\t}\n\tdt := data.Int64s()\n\trt := retVal.Int64s()\n\tswitch f := fn.(type) {\n\tcase func([]int64) int64:\n\t\treduceLastI64(dt, rt, dimSize, def, f)\n\tcase func(int64, int64) int64:\n\t\tgenericReduceLastI64(dt, rt, dimSize, def, f)\n\tdefault:\n\t\treturn errors.Errorf(reductionErrMsg, fn)\n\t}\n\treturn nil",
      "entry" : false,
      "use-vars" : [ 33 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 87 ],
      "in-vars" : [ 21, 22, 19, 23, 20 ],
      "exit" : false,
      "out-vars" : [ 23, 20, 21, 22, 19 ],
      "decl-vars" : [ 69 ],
      "line-start" : 325,
      "ast" : {
        "kind" : "statement",
        "target" : {
          "kind" : "decl",
          "specs" : [ {
            "comments" : [ ],
            "declared-type" : {
              "go-type" : 157,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 157,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "int64"
              }
            },
            "kind" : "spec",
            "names" : [ {
              "ident-kind" : "NoKind",
              "kind" : "ident",
              "value" : "def"
            } ],
            "type" : "var",
            "values" : [ ]
          } ],
          "type" : "var"
        },
        "type" : "declaration"
      },
      "assign-vars" : [ ],
      "line-end" : 325,
      "code" : "var def int64",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 88, 89 ],
      "in-vars" : [ 21, 22, 19, 69, 43, 23, 20 ],
      "exit" : false,
      "out-vars" : [ 23, 20, 21, 22, 19, 69 ],
      "decl-vars" : [ ],
      "line-start" : 327,
      "ast" : {
        "condition" : {
          "go-type" : 11,
          "kind" : "expression",
          "operator" : "!",
          "target" : {
            "go-type" : 11,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "ok",
              "variable" : 43
            }
          },
          "type" : "unary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 329,
      "code" : "if def, ok = defaultValue.(int64); !ok {\n\treturn errors.Errorf(defaultValueErrMsg, def, defaultValue, defaultValue)\n}",
      "entry" : false,
      "use-vars" : [ 43 ]
    }, {
      "update-vars" : [ 43, 69 ],
      "successors" : [ 86 ],
      "in-vars" : [ 20, 21, 22, 19, 23 ],
      "exit" : false,
      "out-vars" : [ 23, 20, 21, 22, 19, 69, 43 ],
      "decl-vars" : [ ],
      "line-start" : 327,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 157,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "def",
            "variable" : 69
          }
        }, {
          "go-type" : 11,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "ok",
            "variable" : 43
          }
        } ],
        "right" : [ {
          "asserted" : {
            "go-type" : 157,
            "kind" : "type",
            "type" : "identifier",
            "value" : {
              "go-type" : 157,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "int64"
            }
          },
          "go-type" : 158,
          "kind" : "expression",
          "target" : {
            "go-type" : 78,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "defaultValue",
              "variable" : 22
            }
          },
          "type" : "type-assert"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 69, 43 ],
      "line-end" : 327,
      "code" : "def, ok = defaultValue.(int64)",
      "entry" : false,
      "use-vars" : [ 22 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 22, 69 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 328,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "arguments" : [ {
            "go-type" : 23,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "Expected default value of type %T. Got %v of %T instead"
            }
          }, {
            "go-type" : 157,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "def",
              "variable" : 69
            }
          }, {
            "go-type" : 78,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "defaultValue",
              "variable" : 22
            }
          }, {
            "go-type" : 78,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "defaultValue",
              "variable" : 22
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 85,
            "kind" : "expression",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 4,
              "value" : "errors"
            },
            "type" : "identifier",
            "value" : {
              "function" : 1,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "Errorf"
            }
          },
          "go-type" : 80,
          "kind" : "expression",
          "type" : "call"
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 328,
      "code" : "return errors.Errorf(defaultValueErrMsg, def, defaultValue, defaultValue)",
      "entry" : false,
      "use-vars" : [ 22, 69 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 90 ],
      "in-vars" : [ 23, 20, 21, 19, 69 ],
      "exit" : false,
      "out-vars" : [ 20, 21, 69, 70, 23 ],
      "decl-vars" : [ 70 ],
      "line-start" : 330,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "dt"
          }
        } ],
        "right" : [ {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "function" : 17,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "Int64s"
            },
            "go-type" : 160,
            "kind" : "expression",
            "target" : {
              "go-type" : 75,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "data",
                "variable" : 19
              }
            },
            "type" : "selector"
          },
          "go-type" : 159,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 330,
      "code" : "dt := data.Int64s()",
      "entry" : false,
      "use-vars" : [ 19 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 91 ],
      "in-vars" : [ 23, 20, 21, 69, 70 ],
      "exit" : false,
      "out-vars" : [ 23, 21, 71, 69, 70 ],
      "decl-vars" : [ 71 ],
      "line-start" : 331,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "rt"
          }
        } ],
        "right" : [ {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "function" : 17,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "Int64s"
            },
            "go-type" : 160,
            "kind" : "expression",
            "target" : {
              "go-type" : 75,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "retVal",
                "variable" : 20
              }
            },
            "type" : "selector"
          },
          "go-type" : 159,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 331,
      "code" : "rt := retVal.Int64s()",
      "entry" : false,
      "use-vars" : [ 20 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 92 ],
      "in-vars" : [ 21, 71, 69, 70, 23 ],
      "exit" : false,
      "out-vars" : [ 70, 73, 72, 23, 21, 71, 69 ],
      "decl-vars" : [ 72, 73, 139 ],
      "line-start" : 332,
      "ast" : {
        "kind" : "statement",
        "type" : "type-switch"
      },
      "assign-vars" : [ ],
      "line-end" : 339,
      "code" : "switch f := fn.(type) {\ncase func([]int64) int64:\n\treduceLastI64(dt, rt, dimSize, def, f)\ncase func(int64, int64) int64:\n\tgenericReduceLastI64(dt, rt, dimSize, def, f)\ndefault:\n\treturn errors.Errorf(reductionErrMsg, fn)\n}",
      "entry" : false,
      "use-vars" : [ 23 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 93, 95, 97 ],
      "in-vars" : [ 69, 70, 73, 72, 23, 21, 71 ],
      "exit" : false,
      "out-vars" : [ 23, 21, 71, 69, 70, 73, 72 ],
      "decl-vars" : [ ],
      "line-start" : 332,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "f"
          }
        } ],
        "right" : [ {
          "asserted" : null,
          "go-type" : -1,
          "kind" : "expression",
          "target" : {
            "go-type" : 78,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "fn",
              "variable" : 23
            }
          },
          "type" : "type-assert"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 332,
      "code" : "f := fn.(type)",
      "entry" : false,
      "use-vars" : [ 23 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 94 ],
      "in-vars" : [ 21, 71, 69, 70, 72 ],
      "exit" : false,
      "out-vars" : [ 69, 70, 72, 21, 71 ],
      "decl-vars" : [ ],
      "line-start" : 333,
      "ast" : {
        "expressions" : [ {
          "go-type" : 167,
          "kind" : "type",
          "params" : [ {
            "declared-type" : {
              "element" : {
                "go-type" : 157,
                "kind" : "type",
                "type" : "identifier",
                "value" : {
                  "go-type" : 157,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "int64"
                }
              },
              "go-type" : 159,
              "kind" : "type",
              "type" : "slice"
            },
            "kind" : "field",
            "names" : [ ],
            "tag" : null
          } ],
          "results" : [ {
            "declared-type" : {
              "go-type" : 157,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 157,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "int64"
              }
            },
            "kind" : "field",
            "names" : [ ],
            "tag" : null
          } ],
          "type" : "function",
          "variadic" : null
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 334,
      "code" : "case func([]int64) int64:\n\treduceLastI64(dt, rt, dimSize, def, f)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 99 ],
      "in-vars" : [ 69, 70, 72, 21, 71 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 334,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 159,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "dt",
              "variable" : 70
            }
          }, {
            "go-type" : 159,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "rt",
              "variable" : 71
            }
          }, {
            "go-type" : 7,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "dimSize",
              "variable" : 21
            }
          }, {
            "go-type" : 157,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "def",
              "variable" : 69
            }
          }, {
            "go-type" : 167,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "f",
              "variable" : 72
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 162,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 18,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "reduceLastI64"
            }
          },
          "go-type" : 5,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 334,
      "code" : "reduceLastI64(dt, rt, dimSize, def, f)",
      "entry" : false,
      "use-vars" : [ 72, 70, 71, 21, 69 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 96 ],
      "in-vars" : [ 21, 71, 69, 70, 73 ],
      "exit" : false,
      "out-vars" : [ 69, 70, 73, 21, 71 ],
      "decl-vars" : [ ],
      "line-start" : 335,
      "ast" : {
        "expressions" : [ {
          "go-type" : 170,
          "kind" : "type",
          "params" : [ {
            "declared-type" : {
              "go-type" : 157,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 157,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "int64"
              }
            },
            "kind" : "field",
            "names" : [ ],
            "tag" : null
          }, {
            "declared-type" : {
              "go-type" : 157,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 157,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "int64"
              }
            },
            "kind" : "field",
            "names" : [ ],
            "tag" : null
          } ],
          "results" : [ {
            "declared-type" : {
              "go-type" : 157,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 157,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "int64"
              }
            },
            "kind" : "field",
            "names" : [ ],
            "tag" : null
          } ],
          "type" : "function",
          "variadic" : null
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 336,
      "code" : "case func(int64, int64) int64:\n\tgenericReduceLastI64(dt, rt, dimSize, def, f)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 99 ],
      "in-vars" : [ 70, 73, 21, 71, 69 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 336,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 159,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "dt",
              "variable" : 70
            }
          }, {
            "go-type" : 159,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "rt",
              "variable" : 71
            }
          }, {
            "go-type" : 7,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "dimSize",
              "variable" : 21
            }
          }, {
            "go-type" : 157,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "def",
              "variable" : 69
            }
          }, {
            "go-type" : 170,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "f",
              "variable" : 73
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 168,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 19,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "genericReduceLastI64"
            }
          },
          "go-type" : 5,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 336,
      "code" : "genericReduceLastI64(dt, rt, dimSize, def, f)",
      "entry" : false,
      "use-vars" : [ 73, 70, 71, 21, 69 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 98 ],
      "in-vars" : [ 23 ],
      "exit" : false,
      "out-vars" : [ 23 ],
      "decl-vars" : [ ],
      "line-start" : 337,
      "ast" : {
        "expressions" : [ ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 338,
      "code" : "default:\n\treturn errors.Errorf(reductionErrMsg, fn)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 23 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 338,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "arguments" : [ {
            "go-type" : 23,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "Cannot reduce with function of type %T"
            }
          }, {
            "go-type" : 78,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "fn",
              "variable" : 23
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 85,
            "kind" : "expression",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 4,
              "value" : "errors"
            },
            "type" : "identifier",
            "value" : {
              "function" : 1,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "Errorf"
            }
          },
          "go-type" : 80,
          "kind" : "expression",
          "type" : "call"
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 338,
      "code" : "return errors.Errorf(reductionErrMsg, fn)",
      "entry" : false,
      "use-vars" : [ 23 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 340,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 100,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Nil",
            "kind" : "ident",
            "value" : "nil"
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 340,
      "code" : "return nil",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 101 ],
      "in-vars" : [ 21, 22, 19, 30, 23, 20 ],
      "exit" : false,
      "out-vars" : [ 23, 20, 21, 22, 19 ],
      "decl-vars" : [ ],
      "line-start" : 341,
      "ast" : {
        "expressions" : [ {
          "go-type" : 2,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "Uint",
            "variable" : 30
          }
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 357,
      "code" : "case Uint:\n\tvar def uint\n\n\tif def, ok = defaultValue.(uint); !ok {\n\t\treturn errors.Errorf(defaultValueErrMsg, def, defaultValue, defaultValue)\n\t}\n\tdt := data.Uints()\n\trt := retVal.Uints()\n\tswitch f := fn.(type) {\n\tcase func([]uint) uint:\n\t\treduceLastU(dt, rt, dimSize, def, f)\n\tcase func(uint, uint) uint:\n\t\tgenericReduceLastU(dt, rt, dimSize, def, f)\n\tdefault:\n\t\treturn errors.Errorf(reductionErrMsg, fn)\n\t}\n\treturn nil",
      "entry" : false,
      "use-vars" : [ 30 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 103 ],
      "in-vars" : [ 23, 20, 21, 22, 19 ],
      "exit" : false,
      "out-vars" : [ 20, 21, 22, 19, 23 ],
      "decl-vars" : [ 74 ],
      "line-start" : 342,
      "ast" : {
        "kind" : "statement",
        "target" : {
          "kind" : "decl",
          "specs" : [ {
            "comments" : [ ],
            "declared-type" : {
              "go-type" : 40,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 40,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "uint"
              }
            },
            "kind" : "spec",
            "names" : [ {
              "ident-kind" : "NoKind",
              "kind" : "ident",
              "value" : "def"
            } ],
            "type" : "var",
            "values" : [ ]
          } ],
          "type" : "var"
        },
        "type" : "declaration"
      },
      "assign-vars" : [ ],
      "line-end" : 342,
      "code" : "var def uint",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 104, 105 ],
      "in-vars" : [ 21, 22, 19, 74, 43, 23, 20 ],
      "exit" : false,
      "out-vars" : [ 23, 20, 21, 22, 19, 74 ],
      "decl-vars" : [ ],
      "line-start" : 344,
      "ast" : {
        "condition" : {
          "go-type" : 11,
          "kind" : "expression",
          "operator" : "!",
          "target" : {
            "go-type" : 11,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "ok",
              "variable" : 43
            }
          },
          "type" : "unary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 346,
      "code" : "if def, ok = defaultValue.(uint); !ok {\n\treturn errors.Errorf(defaultValueErrMsg, def, defaultValue, defaultValue)\n}",
      "entry" : false,
      "use-vars" : [ 43 ]
    }, {
      "update-vars" : [ 43, 74 ],
      "successors" : [ 102 ],
      "in-vars" : [ 21, 22, 19, 23, 20 ],
      "exit" : false,
      "out-vars" : [ 21, 22, 19, 74, 43, 23, 20 ],
      "decl-vars" : [ ],
      "line-start" : 344,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 40,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "def",
            "variable" : 74
          }
        }, {
          "go-type" : 11,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "ok",
            "variable" : 43
          }
        } ],
        "right" : [ {
          "asserted" : {
            "go-type" : 40,
            "kind" : "type",
            "type" : "identifier",
            "value" : {
              "go-type" : 40,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "uint"
            }
          },
          "go-type" : 172,
          "kind" : "expression",
          "target" : {
            "go-type" : 78,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "defaultValue",
              "variable" : 22
            }
          },
          "type" : "type-assert"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 43, 74 ],
      "line-end" : 344,
      "code" : "def, ok = defaultValue.(uint)",
      "entry" : false,
      "use-vars" : [ 22 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 22, 74 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 345,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "arguments" : [ {
            "go-type" : 23,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "Expected default value of type %T. Got %v of %T instead"
            }
          }, {
            "go-type" : 40,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "def",
              "variable" : 74
            }
          }, {
            "go-type" : 78,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "defaultValue",
              "variable" : 22
            }
          }, {
            "go-type" : 78,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "defaultValue",
              "variable" : 22
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 85,
            "kind" : "expression",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 4,
              "value" : "errors"
            },
            "type" : "identifier",
            "value" : {
              "function" : 1,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "Errorf"
            }
          },
          "go-type" : 80,
          "kind" : "expression",
          "type" : "call"
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 345,
      "code" : "return errors.Errorf(defaultValueErrMsg, def, defaultValue, defaultValue)",
      "entry" : false,
      "use-vars" : [ 74, 22 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 106 ],
      "in-vars" : [ 23, 20, 21, 19, 74 ],
      "exit" : false,
      "out-vars" : [ 20, 21, 75, 74, 23 ],
      "decl-vars" : [ 75 ],
      "line-start" : 347,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "dt"
          }
        } ],
        "right" : [ {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "function" : 20,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "Uints"
            },
            "go-type" : 174,
            "kind" : "expression",
            "target" : {
              "go-type" : 75,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "data",
                "variable" : 19
              }
            },
            "type" : "selector"
          },
          "go-type" : 173,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 347,
      "code" : "dt := data.Uints()",
      "entry" : false,
      "use-vars" : [ 19 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 107 ],
      "in-vars" : [ 21, 75, 74, 23, 20 ],
      "exit" : false,
      "out-vars" : [ 23, 21, 75, 74, 76 ],
      "decl-vars" : [ 76 ],
      "line-start" : 348,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "rt"
          }
        } ],
        "right" : [ {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "function" : 20,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "Uints"
            },
            "go-type" : 174,
            "kind" : "expression",
            "target" : {
              "go-type" : 75,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "retVal",
                "variable" : 20
              }
            },
            "type" : "selector"
          },
          "go-type" : 173,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 348,
      "code" : "rt := retVal.Uints()",
      "entry" : false,
      "use-vars" : [ 20 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 108 ],
      "in-vars" : [ 23, 21, 75, 74, 76 ],
      "exit" : false,
      "out-vars" : [ 76, 23, 21, 77, 78, 75, 74 ],
      "decl-vars" : [ 77, 78, 140 ],
      "line-start" : 349,
      "ast" : {
        "kind" : "statement",
        "type" : "type-switch"
      },
      "assign-vars" : [ ],
      "line-end" : 356,
      "code" : "switch f := fn.(type) {\ncase func([]uint) uint:\n\treduceLastU(dt, rt, dimSize, def, f)\ncase func(uint, uint) uint:\n\tgenericReduceLastU(dt, rt, dimSize, def, f)\ndefault:\n\treturn errors.Errorf(reductionErrMsg, fn)\n}",
      "entry" : false,
      "use-vars" : [ 23 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 109, 111, 113 ],
      "in-vars" : [ 77, 78, 75, 74, 76, 23, 21 ],
      "exit" : false,
      "out-vars" : [ 23, 21, 77, 78, 75, 74, 76 ],
      "decl-vars" : [ ],
      "line-start" : 349,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "f"
          }
        } ],
        "right" : [ {
          "asserted" : null,
          "go-type" : -1,
          "kind" : "expression",
          "target" : {
            "go-type" : 78,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "fn",
              "variable" : 23
            }
          },
          "type" : "type-assert"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 349,
      "code" : "f := fn.(type)",
      "entry" : false,
      "use-vars" : [ 23 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 110 ],
      "in-vars" : [ 21, 77, 75, 74, 76 ],
      "exit" : false,
      "out-vars" : [ 75, 74, 76, 21, 77 ],
      "decl-vars" : [ ],
      "line-start" : 350,
      "ast" : {
        "expressions" : [ {
          "go-type" : 181,
          "kind" : "type",
          "params" : [ {
            "declared-type" : {
              "element" : {
                "go-type" : 40,
                "kind" : "type",
                "type" : "identifier",
                "value" : {
                  "go-type" : 40,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "uint"
                }
              },
              "go-type" : 173,
              "kind" : "type",
              "type" : "slice"
            },
            "kind" : "field",
            "names" : [ ],
            "tag" : null
          } ],
          "results" : [ {
            "declared-type" : {
              "go-type" : 40,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 40,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "uint"
              }
            },
            "kind" : "field",
            "names" : [ ],
            "tag" : null
          } ],
          "type" : "function",
          "variadic" : null
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 351,
      "code" : "case func([]uint) uint:\n\treduceLastU(dt, rt, dimSize, def, f)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 115 ],
      "in-vars" : [ 76, 21, 77, 75, 74 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 351,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 173,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "dt",
              "variable" : 75
            }
          }, {
            "go-type" : 173,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "rt",
              "variable" : 76
            }
          }, {
            "go-type" : 7,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "dimSize",
              "variable" : 21
            }
          }, {
            "go-type" : 40,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "def",
              "variable" : 74
            }
          }, {
            "go-type" : 181,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "f",
              "variable" : 77
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 176,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 21,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "reduceLastU"
            }
          },
          "go-type" : 5,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 351,
      "code" : "reduceLastU(dt, rt, dimSize, def, f)",
      "entry" : false,
      "use-vars" : [ 76, 21, 74, 77, 75 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 112 ],
      "in-vars" : [ 74, 76, 21, 78, 75 ],
      "exit" : false,
      "out-vars" : [ 75, 74, 76, 21, 78 ],
      "decl-vars" : [ ],
      "line-start" : 352,
      "ast" : {
        "expressions" : [ {
          "go-type" : 184,
          "kind" : "type",
          "params" : [ {
            "declared-type" : {
              "go-type" : 40,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 40,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "uint"
              }
            },
            "kind" : "field",
            "names" : [ ],
            "tag" : null
          }, {
            "declared-type" : {
              "go-type" : 40,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 40,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "uint"
              }
            },
            "kind" : "field",
            "names" : [ ],
            "tag" : null
          } ],
          "results" : [ {
            "declared-type" : {
              "go-type" : 40,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 40,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "uint"
              }
            },
            "kind" : "field",
            "names" : [ ],
            "tag" : null
          } ],
          "type" : "function",
          "variadic" : null
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 353,
      "code" : "case func(uint, uint) uint:\n\tgenericReduceLastU(dt, rt, dimSize, def, f)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 115 ],
      "in-vars" : [ 75, 74, 76, 21, 78 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 353,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 173,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "dt",
              "variable" : 75
            }
          }, {
            "go-type" : 173,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "rt",
              "variable" : 76
            }
          }, {
            "go-type" : 7,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "dimSize",
              "variable" : 21
            }
          }, {
            "go-type" : 40,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "def",
              "variable" : 74
            }
          }, {
            "go-type" : 184,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "f",
              "variable" : 78
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 182,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 22,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "genericReduceLastU"
            }
          },
          "go-type" : 5,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 353,
      "code" : "genericReduceLastU(dt, rt, dimSize, def, f)",
      "entry" : false,
      "use-vars" : [ 74, 78, 75, 76, 21 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 114 ],
      "in-vars" : [ 23 ],
      "exit" : false,
      "out-vars" : [ 23 ],
      "decl-vars" : [ ],
      "line-start" : 354,
      "ast" : {
        "expressions" : [ ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 355,
      "code" : "default:\n\treturn errors.Errorf(reductionErrMsg, fn)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 23 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 355,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "arguments" : [ {
            "go-type" : 23,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "Cannot reduce with function of type %T"
            }
          }, {
            "go-type" : 78,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "fn",
              "variable" : 23
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 85,
            "kind" : "expression",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 4,
              "value" : "errors"
            },
            "type" : "identifier",
            "value" : {
              "function" : 1,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "Errorf"
            }
          },
          "go-type" : 80,
          "kind" : "expression",
          "type" : "call"
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 355,
      "code" : "return errors.Errorf(reductionErrMsg, fn)",
      "entry" : false,
      "use-vars" : [ 23 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 357,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 100,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Nil",
            "kind" : "ident",
            "value" : "nil"
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 357,
      "code" : "return nil",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 117 ],
      "in-vars" : [ 28, 23, 20, 21, 22, 19 ],
      "exit" : false,
      "out-vars" : [ 19, 23, 20, 21, 22 ],
      "decl-vars" : [ ],
      "line-start" : 358,
      "ast" : {
        "expressions" : [ {
          "go-type" : 2,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "Uint8",
            "variable" : 28
          }
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 374,
      "code" : "case Uint8:\n\tvar def uint8\n\n\tif def, ok = defaultValue.(uint8); !ok {\n\t\treturn errors.Errorf(defaultValueErrMsg, def, defaultValue, defaultValue)\n\t}\n\tdt := data.Uint8s()\n\trt := retVal.Uint8s()\n\tswitch f := fn.(type) {\n\tcase func([]uint8) uint8:\n\t\treduceLastU8(dt, rt, dimSize, def, f)\n\tcase func(uint8, uint8) uint8:\n\t\tgenericReduceLastU8(dt, rt, dimSize, def, f)\n\tdefault:\n\t\treturn errors.Errorf(reductionErrMsg, fn)\n\t}\n\treturn nil",
      "entry" : false,
      "use-vars" : [ 28 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 119 ],
      "in-vars" : [ 19, 23, 20, 21, 22 ],
      "exit" : false,
      "out-vars" : [ 19, 23, 20, 21, 22 ],
      "decl-vars" : [ 79 ],
      "line-start" : 359,
      "ast" : {
        "kind" : "statement",
        "target" : {
          "kind" : "decl",
          "specs" : [ {
            "comments" : [ ],
            "declared-type" : {
              "go-type" : 52,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 52,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "uint8"
              }
            },
            "kind" : "spec",
            "names" : [ {
              "ident-kind" : "NoKind",
              "kind" : "ident",
              "value" : "def"
            } ],
            "type" : "var",
            "values" : [ ]
          } ],
          "type" : "var"
        },
        "type" : "declaration"
      },
      "assign-vars" : [ ],
      "line-end" : 359,
      "code" : "var def uint8",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 120, 121 ],
      "in-vars" : [ 43, 23, 20, 21, 22, 19, 79 ],
      "exit" : false,
      "out-vars" : [ 19, 79, 23, 20, 21, 22 ],
      "decl-vars" : [ ],
      "line-start" : 361,
      "ast" : {
        "condition" : {
          "go-type" : 11,
          "kind" : "expression",
          "operator" : "!",
          "target" : {
            "go-type" : 11,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "ok",
              "variable" : 43
            }
          },
          "type" : "unary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 363,
      "code" : "if def, ok = defaultValue.(uint8); !ok {\n\treturn errors.Errorf(defaultValueErrMsg, def, defaultValue, defaultValue)\n}",
      "entry" : false,
      "use-vars" : [ 43 ]
    }, {
      "update-vars" : [ 43, 79 ],
      "successors" : [ 118 ],
      "in-vars" : [ 23, 20, 21, 22, 19 ],
      "exit" : false,
      "out-vars" : [ 43, 23, 20, 21, 22, 19, 79 ],
      "decl-vars" : [ ],
      "line-start" : 361,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 52,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "def",
            "variable" : 79
          }
        }, {
          "go-type" : 11,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "ok",
            "variable" : 43
          }
        } ],
        "right" : [ {
          "asserted" : {
            "go-type" : 52,
            "kind" : "type",
            "type" : "identifier",
            "value" : {
              "go-type" : 52,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "uint8"
            }
          },
          "go-type" : 186,
          "kind" : "expression",
          "target" : {
            "go-type" : 78,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "defaultValue",
              "variable" : 22
            }
          },
          "type" : "type-assert"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 43, 79 ],
      "line-end" : 361,
      "code" : "def, ok = defaultValue.(uint8)",
      "entry" : false,
      "use-vars" : [ 22 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 22, 79 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 362,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "arguments" : [ {
            "go-type" : 23,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "Expected default value of type %T. Got %v of %T instead"
            }
          }, {
            "go-type" : 52,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "def",
              "variable" : 79
            }
          }, {
            "go-type" : 78,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "defaultValue",
              "variable" : 22
            }
          }, {
            "go-type" : 78,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "defaultValue",
              "variable" : 22
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 85,
            "kind" : "expression",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 4,
              "value" : "errors"
            },
            "type" : "identifier",
            "value" : {
              "function" : 1,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "Errorf"
            }
          },
          "go-type" : 80,
          "kind" : "expression",
          "type" : "call"
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 362,
      "code" : "return errors.Errorf(defaultValueErrMsg, def, defaultValue, defaultValue)",
      "entry" : false,
      "use-vars" : [ 79, 22 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 122 ],
      "in-vars" : [ 23, 20, 21, 19, 79 ],
      "exit" : false,
      "out-vars" : [ 21, 79, 80, 23, 20 ],
      "decl-vars" : [ 80 ],
      "line-start" : 364,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "dt"
          }
        } ],
        "right" : [ {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "function" : 23,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "Uint8s"
            },
            "go-type" : 188,
            "kind" : "expression",
            "target" : {
              "go-type" : 75,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "data",
                "variable" : 19
              }
            },
            "type" : "selector"
          },
          "go-type" : 187,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 364,
      "code" : "dt := data.Uint8s()",
      "entry" : false,
      "use-vars" : [ 19 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 123 ],
      "in-vars" : [ 23, 20, 21, 79, 80 ],
      "exit" : false,
      "out-vars" : [ 23, 21, 79, 81, 80 ],
      "decl-vars" : [ 81 ],
      "line-start" : 365,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "rt"
          }
        } ],
        "right" : [ {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "function" : 23,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "Uint8s"
            },
            "go-type" : 188,
            "kind" : "expression",
            "target" : {
              "go-type" : 75,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "retVal",
                "variable" : 20
              }
            },
            "type" : "selector"
          },
          "go-type" : 187,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 365,
      "code" : "rt := retVal.Uint8s()",
      "entry" : false,
      "use-vars" : [ 20 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 124 ],
      "in-vars" : [ 23, 21, 79, 81, 80 ],
      "exit" : false,
      "out-vars" : [ 83, 23, 21, 79, 81, 80, 82 ],
      "decl-vars" : [ 82, 83, 141 ],
      "line-start" : 366,
      "ast" : {
        "kind" : "statement",
        "type" : "type-switch"
      },
      "assign-vars" : [ ],
      "line-end" : 373,
      "code" : "switch f := fn.(type) {\ncase func([]uint8) uint8:\n\treduceLastU8(dt, rt, dimSize, def, f)\ncase func(uint8, uint8) uint8:\n\tgenericReduceLastU8(dt, rt, dimSize, def, f)\ndefault:\n\treturn errors.Errorf(reductionErrMsg, fn)\n}",
      "entry" : false,
      "use-vars" : [ 23 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 125, 127, 129 ],
      "in-vars" : [ 83, 23, 21, 79, 81, 80, 82 ],
      "exit" : false,
      "out-vars" : [ 80, 82, 83, 23, 21, 79, 81 ],
      "decl-vars" : [ ],
      "line-start" : 366,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "f"
          }
        } ],
        "right" : [ {
          "asserted" : null,
          "go-type" : -1,
          "kind" : "expression",
          "target" : {
            "go-type" : 78,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "fn",
              "variable" : 23
            }
          },
          "type" : "type-assert"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 366,
      "code" : "f := fn.(type)",
      "entry" : false,
      "use-vars" : [ 23 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 126 ],
      "in-vars" : [ 82, 21, 79, 81, 80 ],
      "exit" : false,
      "out-vars" : [ 82, 21, 79, 81, 80 ],
      "decl-vars" : [ ],
      "line-start" : 367,
      "ast" : {
        "expressions" : [ {
          "go-type" : 195,
          "kind" : "type",
          "params" : [ {
            "declared-type" : {
              "element" : {
                "go-type" : 52,
                "kind" : "type",
                "type" : "identifier",
                "value" : {
                  "go-type" : 52,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "uint8"
                }
              },
              "go-type" : 187,
              "kind" : "type",
              "type" : "slice"
            },
            "kind" : "field",
            "names" : [ ],
            "tag" : null
          } ],
          "results" : [ {
            "declared-type" : {
              "go-type" : 52,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 52,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "uint8"
              }
            },
            "kind" : "field",
            "names" : [ ],
            "tag" : null
          } ],
          "type" : "function",
          "variadic" : null
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 368,
      "code" : "case func([]uint8) uint8:\n\treduceLastU8(dt, rt, dimSize, def, f)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 131 ],
      "in-vars" : [ 82, 21, 79, 81, 80 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 368,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 187,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "dt",
              "variable" : 80
            }
          }, {
            "go-type" : 187,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "rt",
              "variable" : 81
            }
          }, {
            "go-type" : 7,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "dimSize",
              "variable" : 21
            }
          }, {
            "go-type" : 52,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "def",
              "variable" : 79
            }
          }, {
            "go-type" : 195,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "f",
              "variable" : 82
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 190,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 24,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "reduceLastU8"
            }
          },
          "go-type" : 5,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 368,
      "code" : "reduceLastU8(dt, rt, dimSize, def, f)",
      "entry" : false,
      "use-vars" : [ 21, 79, 82, 80, 81 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 128 ],
      "in-vars" : [ 79, 81, 80, 83, 21 ],
      "exit" : false,
      "out-vars" : [ 83, 21, 79, 81, 80 ],
      "decl-vars" : [ ],
      "line-start" : 369,
      "ast" : {
        "expressions" : [ {
          "go-type" : 198,
          "kind" : "type",
          "params" : [ {
            "declared-type" : {
              "go-type" : 52,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 52,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "uint8"
              }
            },
            "kind" : "field",
            "names" : [ ],
            "tag" : null
          }, {
            "declared-type" : {
              "go-type" : 52,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 52,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "uint8"
              }
            },
            "kind" : "field",
            "names" : [ ],
            "tag" : null
          } ],
          "results" : [ {
            "declared-type" : {
              "go-type" : 52,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 52,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "uint8"
              }
            },
            "kind" : "field",
            "names" : [ ],
            "tag" : null
          } ],
          "type" : "function",
          "variadic" : null
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 370,
      "code" : "case func(uint8, uint8) uint8:\n\tgenericReduceLastU8(dt, rt, dimSize, def, f)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 131 ],
      "in-vars" : [ 83, 21, 79, 81, 80 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 370,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 187,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "dt",
              "variable" : 80
            }
          }, {
            "go-type" : 187,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "rt",
              "variable" : 81
            }
          }, {
            "go-type" : 7,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "dimSize",
              "variable" : 21
            }
          }, {
            "go-type" : 52,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "def",
              "variable" : 79
            }
          }, {
            "go-type" : 198,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "f",
              "variable" : 83
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 196,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 25,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "genericReduceLastU8"
            }
          },
          "go-type" : 5,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 370,
      "code" : "genericReduceLastU8(dt, rt, dimSize, def, f)",
      "entry" : false,
      "use-vars" : [ 79, 83, 80, 81, 21 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 130 ],
      "in-vars" : [ 23 ],
      "exit" : false,
      "out-vars" : [ 23 ],
      "decl-vars" : [ ],
      "line-start" : 371,
      "ast" : {
        "expressions" : [ ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 372,
      "code" : "default:\n\treturn errors.Errorf(reductionErrMsg, fn)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 23 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 372,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "arguments" : [ {
            "go-type" : 23,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "Cannot reduce with function of type %T"
            }
          }, {
            "go-type" : 78,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "fn",
              "variable" : 23
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 85,
            "kind" : "expression",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 4,
              "value" : "errors"
            },
            "type" : "identifier",
            "value" : {
              "function" : 1,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "Errorf"
            }
          },
          "go-type" : 80,
          "kind" : "expression",
          "type" : "call"
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 372,
      "code" : "return errors.Errorf(reductionErrMsg, fn)",
      "entry" : false,
      "use-vars" : [ 23 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 374,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 100,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Nil",
            "kind" : "ident",
            "value" : "nil"
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 374,
      "code" : "return nil",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 133 ],
      "in-vars" : [ 19, 26, 23, 20, 21, 22 ],
      "exit" : false,
      "out-vars" : [ 19, 23, 20, 21, 22 ],
      "decl-vars" : [ ],
      "line-start" : 375,
      "ast" : {
        "expressions" : [ {
          "go-type" : 2,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "Uint16",
            "variable" : 26
          }
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 391,
      "code" : "case Uint16:\n\tvar def uint16\n\n\tif def, ok = defaultValue.(uint16); !ok {\n\t\treturn errors.Errorf(defaultValueErrMsg, def, defaultValue, defaultValue)\n\t}\n\tdt := data.Uint16s()\n\trt := retVal.Uint16s()\n\tswitch f := fn.(type) {\n\tcase func([]uint16) uint16:\n\t\treduceLastU16(dt, rt, dimSize, def, f)\n\tcase func(uint16, uint16) uint16:\n\t\tgenericReduceLastU16(dt, rt, dimSize, def, f)\n\tdefault:\n\t\treturn errors.Errorf(reductionErrMsg, fn)\n\t}\n\treturn nil",
      "entry" : false,
      "use-vars" : [ 26 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 135 ],
      "in-vars" : [ 22, 19, 23, 20, 21 ],
      "exit" : false,
      "out-vars" : [ 23, 20, 21, 22, 19 ],
      "decl-vars" : [ 84 ],
      "line-start" : 376,
      "ast" : {
        "kind" : "statement",
        "target" : {
          "kind" : "decl",
          "specs" : [ {
            "comments" : [ ],
            "declared-type" : {
              "go-type" : 74,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 74,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "uint16"
              }
            },
            "kind" : "spec",
            "names" : [ {
              "ident-kind" : "NoKind",
              "kind" : "ident",
              "value" : "def"
            } ],
            "type" : "var",
            "values" : [ ]
          } ],
          "type" : "var"
        },
        "type" : "declaration"
      },
      "assign-vars" : [ ],
      "line-end" : 376,
      "code" : "var def uint16",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 136, 137 ],
      "in-vars" : [ 20, 21, 22, 19, 84, 43, 23 ],
      "exit" : false,
      "out-vars" : [ 23, 20, 21, 22, 19, 84 ],
      "decl-vars" : [ ],
      "line-start" : 378,
      "ast" : {
        "condition" : {
          "go-type" : 11,
          "kind" : "expression",
          "operator" : "!",
          "target" : {
            "go-type" : 11,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "ok",
              "variable" : 43
            }
          },
          "type" : "unary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 380,
      "code" : "if def, ok = defaultValue.(uint16); !ok {\n\treturn errors.Errorf(defaultValueErrMsg, def, defaultValue, defaultValue)\n}",
      "entry" : false,
      "use-vars" : [ 43 ]
    }, {
      "update-vars" : [ 43, 84 ],
      "successors" : [ 134 ],
      "in-vars" : [ 20, 21, 22, 19, 23 ],
      "exit" : false,
      "out-vars" : [ 21, 22, 19, 84, 43, 23, 20 ],
      "decl-vars" : [ ],
      "line-start" : 378,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 74,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "def",
            "variable" : 84
          }
        }, {
          "go-type" : 11,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "ok",
            "variable" : 43
          }
        } ],
        "right" : [ {
          "asserted" : {
            "go-type" : 74,
            "kind" : "type",
            "type" : "identifier",
            "value" : {
              "go-type" : 74,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "uint16"
            }
          },
          "go-type" : 200,
          "kind" : "expression",
          "target" : {
            "go-type" : 78,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "defaultValue",
              "variable" : 22
            }
          },
          "type" : "type-assert"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 84, 43 ],
      "line-end" : 378,
      "code" : "def, ok = defaultValue.(uint16)",
      "entry" : false,
      "use-vars" : [ 22 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 22, 84 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 379,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "arguments" : [ {
            "go-type" : 23,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "Expected default value of type %T. Got %v of %T instead"
            }
          }, {
            "go-type" : 74,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "def",
              "variable" : 84
            }
          }, {
            "go-type" : 78,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "defaultValue",
              "variable" : 22
            }
          }, {
            "go-type" : 78,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "defaultValue",
              "variable" : 22
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 85,
            "kind" : "expression",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 4,
              "value" : "errors"
            },
            "type" : "identifier",
            "value" : {
              "function" : 1,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "Errorf"
            }
          },
          "go-type" : 80,
          "kind" : "expression",
          "type" : "call"
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 379,
      "code" : "return errors.Errorf(defaultValueErrMsg, def, defaultValue, defaultValue)",
      "entry" : false,
      "use-vars" : [ 84, 22 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 138 ],
      "in-vars" : [ 23, 20, 21, 19, 84 ],
      "exit" : false,
      "out-vars" : [ 23, 20, 21, 85, 84 ],
      "decl-vars" : [ 85 ],
      "line-start" : 381,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "dt"
          }
        } ],
        "right" : [ {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "function" : 26,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "Uint16s"
            },
            "go-type" : 202,
            "kind" : "expression",
            "target" : {
              "go-type" : 75,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "data",
                "variable" : 19
              }
            },
            "type" : "selector"
          },
          "go-type" : 201,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 381,
      "code" : "dt := data.Uint16s()",
      "entry" : false,
      "use-vars" : [ 19 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 139 ],
      "in-vars" : [ 23, 20, 21, 85, 84 ],
      "exit" : false,
      "out-vars" : [ 23, 21, 85, 86, 84 ],
      "decl-vars" : [ 86 ],
      "line-start" : 382,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "rt"
          }
        } ],
        "right" : [ {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "function" : 26,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "Uint16s"
            },
            "go-type" : 202,
            "kind" : "expression",
            "target" : {
              "go-type" : 75,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "retVal",
                "variable" : 20
              }
            },
            "type" : "selector"
          },
          "go-type" : 201,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 382,
      "code" : "rt := retVal.Uint16s()",
      "entry" : false,
      "use-vars" : [ 20 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 140 ],
      "in-vars" : [ 85, 86, 84, 23, 21 ],
      "exit" : false,
      "out-vars" : [ 23, 21, 85, 86, 84, 88, 87 ],
      "decl-vars" : [ 87, 88, 142 ],
      "line-start" : 383,
      "ast" : {
        "kind" : "statement",
        "type" : "type-switch"
      },
      "assign-vars" : [ ],
      "line-end" : 390,
      "code" : "switch f := fn.(type) {\ncase func([]uint16) uint16:\n\treduceLastU16(dt, rt, dimSize, def, f)\ncase func(uint16, uint16) uint16:\n\tgenericReduceLastU16(dt, rt, dimSize, def, f)\ndefault:\n\treturn errors.Errorf(reductionErrMsg, fn)\n}",
      "entry" : false,
      "use-vars" : [ 23 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 141, 143, 145 ],
      "in-vars" : [ 23, 21, 85, 86, 84, 88, 87 ],
      "exit" : false,
      "out-vars" : [ 88, 87, 23, 21, 85, 86, 84 ],
      "decl-vars" : [ ],
      "line-start" : 383,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "f"
          }
        } ],
        "right" : [ {
          "asserted" : null,
          "go-type" : -1,
          "kind" : "expression",
          "target" : {
            "go-type" : 78,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "fn",
              "variable" : 23
            }
          },
          "type" : "type-assert"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 383,
      "code" : "f := fn.(type)",
      "entry" : false,
      "use-vars" : [ 23 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 142 ],
      "in-vars" : [ 21, 85, 86, 84, 87 ],
      "exit" : false,
      "out-vars" : [ 21, 85, 86, 84, 87 ],
      "decl-vars" : [ ],
      "line-start" : 384,
      "ast" : {
        "expressions" : [ {
          "go-type" : 209,
          "kind" : "type",
          "params" : [ {
            "declared-type" : {
              "element" : {
                "go-type" : 74,
                "kind" : "type",
                "type" : "identifier",
                "value" : {
                  "go-type" : 74,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "uint16"
                }
              },
              "go-type" : 201,
              "kind" : "type",
              "type" : "slice"
            },
            "kind" : "field",
            "names" : [ ],
            "tag" : null
          } ],
          "results" : [ {
            "declared-type" : {
              "go-type" : 74,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 74,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "uint16"
              }
            },
            "kind" : "field",
            "names" : [ ],
            "tag" : null
          } ],
          "type" : "function",
          "variadic" : null
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 385,
      "code" : "case func([]uint16) uint16:\n\treduceLastU16(dt, rt, dimSize, def, f)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 147 ],
      "in-vars" : [ 87, 21, 85, 86, 84 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 385,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 201,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "dt",
              "variable" : 85
            }
          }, {
            "go-type" : 201,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "rt",
              "variable" : 86
            }
          }, {
            "go-type" : 7,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "dimSize",
              "variable" : 21
            }
          }, {
            "go-type" : 74,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "def",
              "variable" : 84
            }
          }, {
            "go-type" : 209,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "f",
              "variable" : 87
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 204,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 27,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "reduceLastU16"
            }
          },
          "go-type" : 5,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 385,
      "code" : "reduceLastU16(dt, rt, dimSize, def, f)",
      "entry" : false,
      "use-vars" : [ 84, 87, 85, 86, 21 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 144 ],
      "in-vars" : [ 21, 85, 86, 84, 88 ],
      "exit" : false,
      "out-vars" : [ 88, 21, 85, 86, 84 ],
      "decl-vars" : [ ],
      "line-start" : 386,
      "ast" : {
        "expressions" : [ {
          "go-type" : 212,
          "kind" : "type",
          "params" : [ {
            "declared-type" : {
              "go-type" : 74,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 74,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "uint16"
              }
            },
            "kind" : "field",
            "names" : [ ],
            "tag" : null
          }, {
            "declared-type" : {
              "go-type" : 74,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 74,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "uint16"
              }
            },
            "kind" : "field",
            "names" : [ ],
            "tag" : null
          } ],
          "results" : [ {
            "declared-type" : {
              "go-type" : 74,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 74,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "uint16"
              }
            },
            "kind" : "field",
            "names" : [ ],
            "tag" : null
          } ],
          "type" : "function",
          "variadic" : null
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 387,
      "code" : "case func(uint16, uint16) uint16:\n\tgenericReduceLastU16(dt, rt, dimSize, def, f)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 147 ],
      "in-vars" : [ 86, 84, 88, 21, 85 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 387,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 201,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "dt",
              "variable" : 85
            }
          }, {
            "go-type" : 201,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "rt",
              "variable" : 86
            }
          }, {
            "go-type" : 7,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "dimSize",
              "variable" : 21
            }
          }, {
            "go-type" : 74,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "def",
              "variable" : 84
            }
          }, {
            "go-type" : 212,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "f",
              "variable" : 88
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 210,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 28,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "genericReduceLastU16"
            }
          },
          "go-type" : 5,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 387,
      "code" : "genericReduceLastU16(dt, rt, dimSize, def, f)",
      "entry" : false,
      "use-vars" : [ 88, 85, 86, 21, 84 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 146 ],
      "in-vars" : [ 23 ],
      "exit" : false,
      "out-vars" : [ 23 ],
      "decl-vars" : [ ],
      "line-start" : 388,
      "ast" : {
        "expressions" : [ ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 389,
      "code" : "default:\n\treturn errors.Errorf(reductionErrMsg, fn)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 23 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 389,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "arguments" : [ {
            "go-type" : 23,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "Cannot reduce with function of type %T"
            }
          }, {
            "go-type" : 78,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "fn",
              "variable" : 23
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 85,
            "kind" : "expression",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 4,
              "value" : "errors"
            },
            "type" : "identifier",
            "value" : {
              "function" : 1,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "Errorf"
            }
          },
          "go-type" : 80,
          "kind" : "expression",
          "type" : "call"
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 389,
      "code" : "return errors.Errorf(reductionErrMsg, fn)",
      "entry" : false,
      "use-vars" : [ 23 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 391,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 100,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Nil",
            "kind" : "ident",
            "value" : "nil"
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 391,
      "code" : "return nil",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 149 ],
      "in-vars" : [ 23, 20, 21, 22, 19, 38 ],
      "exit" : false,
      "out-vars" : [ 23, 20, 21, 22, 19 ],
      "decl-vars" : [ ],
      "line-start" : 392,
      "ast" : {
        "expressions" : [ {
          "go-type" : 2,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "Uint32",
            "variable" : 38
          }
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 408,
      "code" : "case Uint32:\n\tvar def uint32\n\n\tif def, ok = defaultValue.(uint32); !ok {\n\t\treturn errors.Errorf(defaultValueErrMsg, def, defaultValue, defaultValue)\n\t}\n\tdt := data.Uint32s()\n\trt := retVal.Uint32s()\n\tswitch f := fn.(type) {\n\tcase func([]uint32) uint32:\n\t\treduceLastU32(dt, rt, dimSize, def, f)\n\tcase func(uint32, uint32) uint32:\n\t\tgenericReduceLastU32(dt, rt, dimSize, def, f)\n\tdefault:\n\t\treturn errors.Errorf(reductionErrMsg, fn)\n\t}\n\treturn nil",
      "entry" : false,
      "use-vars" : [ 38 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 151 ],
      "in-vars" : [ 23, 20, 21, 22, 19 ],
      "exit" : false,
      "out-vars" : [ 21, 22, 19, 23, 20 ],
      "decl-vars" : [ 89 ],
      "line-start" : 393,
      "ast" : {
        "kind" : "statement",
        "target" : {
          "kind" : "decl",
          "specs" : [ {
            "comments" : [ ],
            "declared-type" : {
              "go-type" : 50,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 50,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "uint32"
              }
            },
            "kind" : "spec",
            "names" : [ {
              "ident-kind" : "NoKind",
              "kind" : "ident",
              "value" : "def"
            } ],
            "type" : "var",
            "values" : [ ]
          } ],
          "type" : "var"
        },
        "type" : "declaration"
      },
      "assign-vars" : [ ],
      "line-end" : 393,
      "code" : "var def uint32",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 152, 153 ],
      "in-vars" : [ 19, 43, 23, 20, 21, 89, 22 ],
      "exit" : false,
      "out-vars" : [ 19, 23, 20, 21, 89, 22 ],
      "decl-vars" : [ ],
      "line-start" : 395,
      "ast" : {
        "condition" : {
          "go-type" : 11,
          "kind" : "expression",
          "operator" : "!",
          "target" : {
            "go-type" : 11,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "ok",
              "variable" : 43
            }
          },
          "type" : "unary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 397,
      "code" : "if def, ok = defaultValue.(uint32); !ok {\n\treturn errors.Errorf(defaultValueErrMsg, def, defaultValue, defaultValue)\n}",
      "entry" : false,
      "use-vars" : [ 43 ]
    }, {
      "update-vars" : [ 43, 89 ],
      "successors" : [ 150 ],
      "in-vars" : [ 21, 22, 19, 23, 20 ],
      "exit" : false,
      "out-vars" : [ 23, 20, 21, 89, 22, 19, 43 ],
      "decl-vars" : [ ],
      "line-start" : 395,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 50,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "def",
            "variable" : 89
          }
        }, {
          "go-type" : 11,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "ok",
            "variable" : 43
          }
        } ],
        "right" : [ {
          "asserted" : {
            "go-type" : 50,
            "kind" : "type",
            "type" : "identifier",
            "value" : {
              "go-type" : 50,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "uint32"
            }
          },
          "go-type" : 214,
          "kind" : "expression",
          "target" : {
            "go-type" : 78,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "defaultValue",
              "variable" : 22
            }
          },
          "type" : "type-assert"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 43, 89 ],
      "line-end" : 395,
      "code" : "def, ok = defaultValue.(uint32)",
      "entry" : false,
      "use-vars" : [ 22 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 22, 89 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 396,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "arguments" : [ {
            "go-type" : 23,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "Expected default value of type %T. Got %v of %T instead"
            }
          }, {
            "go-type" : 50,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "def",
              "variable" : 89
            }
          }, {
            "go-type" : 78,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "defaultValue",
              "variable" : 22
            }
          }, {
            "go-type" : 78,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "defaultValue",
              "variable" : 22
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 85,
            "kind" : "expression",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 4,
              "value" : "errors"
            },
            "type" : "identifier",
            "value" : {
              "function" : 1,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "Errorf"
            }
          },
          "go-type" : 80,
          "kind" : "expression",
          "type" : "call"
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 396,
      "code" : "return errors.Errorf(defaultValueErrMsg, def, defaultValue, defaultValue)",
      "entry" : false,
      "use-vars" : [ 89, 22 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 154 ],
      "in-vars" : [ 89, 19, 23, 20, 21 ],
      "exit" : false,
      "out-vars" : [ 23, 20, 21, 89, 90 ],
      "decl-vars" : [ 90 ],
      "line-start" : 398,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "dt"
          }
        } ],
        "right" : [ {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "function" : 29,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "Uint32s"
            },
            "go-type" : 216,
            "kind" : "expression",
            "target" : {
              "go-type" : 75,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "data",
                "variable" : 19
              }
            },
            "type" : "selector"
          },
          "go-type" : 215,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 398,
      "code" : "dt := data.Uint32s()",
      "entry" : false,
      "use-vars" : [ 19 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 155 ],
      "in-vars" : [ 20, 21, 89, 90, 23 ],
      "exit" : false,
      "out-vars" : [ 23, 21, 89, 90, 91 ],
      "decl-vars" : [ 91 ],
      "line-start" : 399,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "rt"
          }
        } ],
        "right" : [ {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "function" : 29,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "Uint32s"
            },
            "go-type" : 216,
            "kind" : "expression",
            "target" : {
              "go-type" : 75,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "retVal",
                "variable" : 20
              }
            },
            "type" : "selector"
          },
          "go-type" : 215,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 399,
      "code" : "rt := retVal.Uint32s()",
      "entry" : false,
      "use-vars" : [ 20 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 156 ],
      "in-vars" : [ 89, 90, 91, 23, 21 ],
      "exit" : false,
      "out-vars" : [ 89, 93, 90, 91, 92, 23, 21 ],
      "decl-vars" : [ 143, 92, 93 ],
      "line-start" : 400,
      "ast" : {
        "kind" : "statement",
        "type" : "type-switch"
      },
      "assign-vars" : [ ],
      "line-end" : 407,
      "code" : "switch f := fn.(type) {\ncase func([]uint32) uint32:\n\treduceLastU32(dt, rt, dimSize, def, f)\ncase func(uint32, uint32) uint32:\n\tgenericReduceLastU32(dt, rt, dimSize, def, f)\ndefault:\n\treturn errors.Errorf(reductionErrMsg, fn)\n}",
      "entry" : false,
      "use-vars" : [ 23 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 157, 159, 161 ],
      "in-vars" : [ 90, 91, 92, 23, 21, 89, 93 ],
      "exit" : false,
      "out-vars" : [ 90, 91, 92, 23, 21, 89, 93 ],
      "decl-vars" : [ ],
      "line-start" : 400,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "f"
          }
        } ],
        "right" : [ {
          "asserted" : null,
          "go-type" : -1,
          "kind" : "expression",
          "target" : {
            "go-type" : 78,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "fn",
              "variable" : 23
            }
          },
          "type" : "type-assert"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 400,
      "code" : "f := fn.(type)",
      "entry" : false,
      "use-vars" : [ 23 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 158 ],
      "in-vars" : [ 21, 89, 90, 91, 92 ],
      "exit" : false,
      "out-vars" : [ 92, 21, 89, 90, 91 ],
      "decl-vars" : [ ],
      "line-start" : 401,
      "ast" : {
        "expressions" : [ {
          "go-type" : 223,
          "kind" : "type",
          "params" : [ {
            "declared-type" : {
              "element" : {
                "go-type" : 50,
                "kind" : "type",
                "type" : "identifier",
                "value" : {
                  "go-type" : 50,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "uint32"
                }
              },
              "go-type" : 215,
              "kind" : "type",
              "type" : "slice"
            },
            "kind" : "field",
            "names" : [ ],
            "tag" : null
          } ],
          "results" : [ {
            "declared-type" : {
              "go-type" : 50,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 50,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "uint32"
              }
            },
            "kind" : "field",
            "names" : [ ],
            "tag" : null
          } ],
          "type" : "function",
          "variadic" : null
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 402,
      "code" : "case func([]uint32) uint32:\n\treduceLastU32(dt, rt, dimSize, def, f)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 163 ],
      "in-vars" : [ 89, 90, 91, 92, 21 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 402,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 215,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "dt",
              "variable" : 90
            }
          }, {
            "go-type" : 215,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "rt",
              "variable" : 91
            }
          }, {
            "go-type" : 7,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "dimSize",
              "variable" : 21
            }
          }, {
            "go-type" : 50,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "def",
              "variable" : 89
            }
          }, {
            "go-type" : 223,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "f",
              "variable" : 92
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 218,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 30,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "reduceLastU32"
            }
          },
          "go-type" : 5,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 402,
      "code" : "reduceLastU32(dt, rt, dimSize, def, f)",
      "entry" : false,
      "use-vars" : [ 89, 92, 90, 91, 21 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 160 ],
      "in-vars" : [ 89, 93, 90, 91, 21 ],
      "exit" : false,
      "out-vars" : [ 21, 89, 93, 90, 91 ],
      "decl-vars" : [ ],
      "line-start" : 403,
      "ast" : {
        "expressions" : [ {
          "go-type" : 226,
          "kind" : "type",
          "params" : [ {
            "declared-type" : {
              "go-type" : 50,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 50,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "uint32"
              }
            },
            "kind" : "field",
            "names" : [ ],
            "tag" : null
          }, {
            "declared-type" : {
              "go-type" : 50,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 50,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "uint32"
              }
            },
            "kind" : "field",
            "names" : [ ],
            "tag" : null
          } ],
          "results" : [ {
            "declared-type" : {
              "go-type" : 50,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 50,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "uint32"
              }
            },
            "kind" : "field",
            "names" : [ ],
            "tag" : null
          } ],
          "type" : "function",
          "variadic" : null
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 404,
      "code" : "case func(uint32, uint32) uint32:\n\tgenericReduceLastU32(dt, rt, dimSize, def, f)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 163 ],
      "in-vars" : [ 21, 89, 93, 90, 91 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 404,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 215,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "dt",
              "variable" : 90
            }
          }, {
            "go-type" : 215,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "rt",
              "variable" : 91
            }
          }, {
            "go-type" : 7,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "dimSize",
              "variable" : 21
            }
          }, {
            "go-type" : 50,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "def",
              "variable" : 89
            }
          }, {
            "go-type" : 226,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "f",
              "variable" : 93
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 224,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 31,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "genericReduceLastU32"
            }
          },
          "go-type" : 5,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 404,
      "code" : "genericReduceLastU32(dt, rt, dimSize, def, f)",
      "entry" : false,
      "use-vars" : [ 93, 90, 91, 21, 89 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 162 ],
      "in-vars" : [ 23 ],
      "exit" : false,
      "out-vars" : [ 23 ],
      "decl-vars" : [ ],
      "line-start" : 405,
      "ast" : {
        "expressions" : [ ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 406,
      "code" : "default:\n\treturn errors.Errorf(reductionErrMsg, fn)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 23 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 406,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "arguments" : [ {
            "go-type" : 23,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "Cannot reduce with function of type %T"
            }
          }, {
            "go-type" : 78,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "fn",
              "variable" : 23
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 85,
            "kind" : "expression",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 4,
              "value" : "errors"
            },
            "type" : "identifier",
            "value" : {
              "function" : 1,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "Errorf"
            }
          },
          "go-type" : 80,
          "kind" : "expression",
          "type" : "call"
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 406,
      "code" : "return errors.Errorf(reductionErrMsg, fn)",
      "entry" : false,
      "use-vars" : [ 23 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 408,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 100,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Nil",
            "kind" : "ident",
            "value" : "nil"
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 408,
      "code" : "return nil",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 165 ],
      "in-vars" : [ 23, 20, 21, 22, 19, 27 ],
      "exit" : false,
      "out-vars" : [ 19, 23, 20, 21, 22 ],
      "decl-vars" : [ ],
      "line-start" : 409,
      "ast" : {
        "expressions" : [ {
          "go-type" : 2,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "Uint64",
            "variable" : 27
          }
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 425,
      "code" : "case Uint64:\n\tvar def uint64\n\n\tif def, ok = defaultValue.(uint64); !ok {\n\t\treturn errors.Errorf(defaultValueErrMsg, def, defaultValue, defaultValue)\n\t}\n\tdt := data.Uint64s()\n\trt := retVal.Uint64s()\n\tswitch f := fn.(type) {\n\tcase func([]uint64) uint64:\n\t\treduceLastU64(dt, rt, dimSize, def, f)\n\tcase func(uint64, uint64) uint64:\n\t\tgenericReduceLastU64(dt, rt, dimSize, def, f)\n\tdefault:\n\t\treturn errors.Errorf(reductionErrMsg, fn)\n\t}\n\treturn nil",
      "entry" : false,
      "use-vars" : [ 27 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 167 ],
      "in-vars" : [ 21, 22, 19, 23, 20 ],
      "exit" : false,
      "out-vars" : [ 19, 23, 20, 21, 22 ],
      "decl-vars" : [ 94 ],
      "line-start" : 410,
      "ast" : {
        "kind" : "statement",
        "target" : {
          "kind" : "decl",
          "specs" : [ {
            "comments" : [ ],
            "declared-type" : {
              "go-type" : 228,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 228,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "uint64"
              }
            },
            "kind" : "spec",
            "names" : [ {
              "ident-kind" : "NoKind",
              "kind" : "ident",
              "value" : "def"
            } ],
            "type" : "var",
            "values" : [ ]
          } ],
          "type" : "var"
        },
        "type" : "declaration"
      },
      "assign-vars" : [ ],
      "line-end" : 410,
      "code" : "var def uint64",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 168, 169 ],
      "in-vars" : [ 43, 23, 20, 21, 22, 19, 94 ],
      "exit" : false,
      "out-vars" : [ 23, 20, 21, 22, 19, 94 ],
      "decl-vars" : [ ],
      "line-start" : 412,
      "ast" : {
        "condition" : {
          "go-type" : 11,
          "kind" : "expression",
          "operator" : "!",
          "target" : {
            "go-type" : 11,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "ok",
              "variable" : 43
            }
          },
          "type" : "unary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 414,
      "code" : "if def, ok = defaultValue.(uint64); !ok {\n\treturn errors.Errorf(defaultValueErrMsg, def, defaultValue, defaultValue)\n}",
      "entry" : false,
      "use-vars" : [ 43 ]
    }, {
      "update-vars" : [ 43, 94 ],
      "successors" : [ 166 ],
      "in-vars" : [ 23, 20, 21, 22, 19 ],
      "exit" : false,
      "out-vars" : [ 20, 21, 22, 19, 94, 43, 23 ],
      "decl-vars" : [ ],
      "line-start" : 412,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 228,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "def",
            "variable" : 94
          }
        }, {
          "go-type" : 11,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "ok",
            "variable" : 43
          }
        } ],
        "right" : [ {
          "asserted" : {
            "go-type" : 228,
            "kind" : "type",
            "type" : "identifier",
            "value" : {
              "go-type" : 228,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "uint64"
            }
          },
          "go-type" : 229,
          "kind" : "expression",
          "target" : {
            "go-type" : 78,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "defaultValue",
              "variable" : 22
            }
          },
          "type" : "type-assert"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 43, 94 ],
      "line-end" : 412,
      "code" : "def, ok = defaultValue.(uint64)",
      "entry" : false,
      "use-vars" : [ 22 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 22, 94 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 413,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "arguments" : [ {
            "go-type" : 23,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "Expected default value of type %T. Got %v of %T instead"
            }
          }, {
            "go-type" : 228,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "def",
              "variable" : 94
            }
          }, {
            "go-type" : 78,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "defaultValue",
              "variable" : 22
            }
          }, {
            "go-type" : 78,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "defaultValue",
              "variable" : 22
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 85,
            "kind" : "expression",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 4,
              "value" : "errors"
            },
            "type" : "identifier",
            "value" : {
              "function" : 1,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "Errorf"
            }
          },
          "go-type" : 80,
          "kind" : "expression",
          "type" : "call"
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 413,
      "code" : "return errors.Errorf(defaultValueErrMsg, def, defaultValue, defaultValue)",
      "entry" : false,
      "use-vars" : [ 94, 22 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 170 ],
      "in-vars" : [ 20, 21, 19, 94, 23 ],
      "exit" : false,
      "out-vars" : [ 23, 20, 21, 94, 95 ],
      "decl-vars" : [ 95 ],
      "line-start" : 415,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "dt"
          }
        } ],
        "right" : [ {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "function" : 32,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "Uint64s"
            },
            "go-type" : 231,
            "kind" : "expression",
            "target" : {
              "go-type" : 75,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "data",
                "variable" : 19
              }
            },
            "type" : "selector"
          },
          "go-type" : 230,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 415,
      "code" : "dt := data.Uint64s()",
      "entry" : false,
      "use-vars" : [ 19 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 171 ],
      "in-vars" : [ 94, 95, 23, 20, 21 ],
      "exit" : false,
      "out-vars" : [ 21, 96, 94, 95, 23 ],
      "decl-vars" : [ 96 ],
      "line-start" : 416,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "rt"
          }
        } ],
        "right" : [ {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "function" : 32,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "Uint64s"
            },
            "go-type" : 231,
            "kind" : "expression",
            "target" : {
              "go-type" : 75,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "retVal",
                "variable" : 20
              }
            },
            "type" : "selector"
          },
          "go-type" : 230,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 416,
      "code" : "rt := retVal.Uint64s()",
      "entry" : false,
      "use-vars" : [ 20 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 172 ],
      "in-vars" : [ 23, 21, 96, 94, 95 ],
      "exit" : false,
      "out-vars" : [ 98, 23, 21, 96, 94, 95, 97 ],
      "decl-vars" : [ 144, 97, 98 ],
      "line-start" : 417,
      "ast" : {
        "kind" : "statement",
        "type" : "type-switch"
      },
      "assign-vars" : [ ],
      "line-end" : 424,
      "code" : "switch f := fn.(type) {\ncase func([]uint64) uint64:\n\treduceLastU64(dt, rt, dimSize, def, f)\ncase func(uint64, uint64) uint64:\n\tgenericReduceLastU64(dt, rt, dimSize, def, f)\ndefault:\n\treturn errors.Errorf(reductionErrMsg, fn)\n}",
      "entry" : false,
      "use-vars" : [ 23 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 173, 175, 177 ],
      "in-vars" : [ 97, 98, 23, 21, 96, 94, 95 ],
      "exit" : false,
      "out-vars" : [ 96, 94, 95, 97, 98, 23, 21 ],
      "decl-vars" : [ ],
      "line-start" : 417,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "f"
          }
        } ],
        "right" : [ {
          "asserted" : null,
          "go-type" : -1,
          "kind" : "expression",
          "target" : {
            "go-type" : 78,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "fn",
              "variable" : 23
            }
          },
          "type" : "type-assert"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 417,
      "code" : "f := fn.(type)",
      "entry" : false,
      "use-vars" : [ 23 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 174 ],
      "in-vars" : [ 21, 96, 94, 95, 97 ],
      "exit" : false,
      "out-vars" : [ 21, 96, 94, 95, 97 ],
      "decl-vars" : [ ],
      "line-start" : 418,
      "ast" : {
        "expressions" : [ {
          "go-type" : 238,
          "kind" : "type",
          "params" : [ {
            "declared-type" : {
              "element" : {
                "go-type" : 228,
                "kind" : "type",
                "type" : "identifier",
                "value" : {
                  "go-type" : 228,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "uint64"
                }
              },
              "go-type" : 230,
              "kind" : "type",
              "type" : "slice"
            },
            "kind" : "field",
            "names" : [ ],
            "tag" : null
          } ],
          "results" : [ {
            "declared-type" : {
              "go-type" : 228,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 228,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "uint64"
              }
            },
            "kind" : "field",
            "names" : [ ],
            "tag" : null
          } ],
          "type" : "function",
          "variadic" : null
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 419,
      "code" : "case func([]uint64) uint64:\n\treduceLastU64(dt, rt, dimSize, def, f)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 179 ],
      "in-vars" : [ 21, 96, 94, 95, 97 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 419,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 230,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "dt",
              "variable" : 95
            }
          }, {
            "go-type" : 230,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "rt",
              "variable" : 96
            }
          }, {
            "go-type" : 7,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "dimSize",
              "variable" : 21
            }
          }, {
            "go-type" : 228,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "def",
              "variable" : 94
            }
          }, {
            "go-type" : 238,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "f",
              "variable" : 97
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 233,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 33,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "reduceLastU64"
            }
          },
          "go-type" : 5,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 419,
      "code" : "reduceLastU64(dt, rt, dimSize, def, f)",
      "entry" : false,
      "use-vars" : [ 94, 97, 95, 96, 21 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 176 ],
      "in-vars" : [ 21, 96, 94, 95, 98 ],
      "exit" : false,
      "out-vars" : [ 21, 96, 94, 95, 98 ],
      "decl-vars" : [ ],
      "line-start" : 420,
      "ast" : {
        "expressions" : [ {
          "go-type" : 241,
          "kind" : "type",
          "params" : [ {
            "declared-type" : {
              "go-type" : 228,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 228,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "uint64"
              }
            },
            "kind" : "field",
            "names" : [ ],
            "tag" : null
          }, {
            "declared-type" : {
              "go-type" : 228,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 228,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "uint64"
              }
            },
            "kind" : "field",
            "names" : [ ],
            "tag" : null
          } ],
          "results" : [ {
            "declared-type" : {
              "go-type" : 228,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 228,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "uint64"
              }
            },
            "kind" : "field",
            "names" : [ ],
            "tag" : null
          } ],
          "type" : "function",
          "variadic" : null
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 421,
      "code" : "case func(uint64, uint64) uint64:\n\tgenericReduceLastU64(dt, rt, dimSize, def, f)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 179 ],
      "in-vars" : [ 98, 21, 96, 94, 95 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 421,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 230,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "dt",
              "variable" : 95
            }
          }, {
            "go-type" : 230,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "rt",
              "variable" : 96
            }
          }, {
            "go-type" : 7,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "dimSize",
              "variable" : 21
            }
          }, {
            "go-type" : 228,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "def",
              "variable" : 94
            }
          }, {
            "go-type" : 241,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "f",
              "variable" : 98
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 239,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 34,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "genericReduceLastU64"
            }
          },
          "go-type" : 5,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 421,
      "code" : "genericReduceLastU64(dt, rt, dimSize, def, f)",
      "entry" : false,
      "use-vars" : [ 21, 94, 98, 95, 96 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 178 ],
      "in-vars" : [ 23 ],
      "exit" : false,
      "out-vars" : [ 23 ],
      "decl-vars" : [ ],
      "line-start" : 422,
      "ast" : {
        "expressions" : [ ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 423,
      "code" : "default:\n\treturn errors.Errorf(reductionErrMsg, fn)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 23 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 423,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "arguments" : [ {
            "go-type" : 23,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "Cannot reduce with function of type %T"
            }
          }, {
            "go-type" : 78,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "fn",
              "variable" : 23
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 85,
            "kind" : "expression",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 4,
              "value" : "errors"
            },
            "type" : "identifier",
            "value" : {
              "function" : 1,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "Errorf"
            }
          },
          "go-type" : 80,
          "kind" : "expression",
          "type" : "call"
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 423,
      "code" : "return errors.Errorf(reductionErrMsg, fn)",
      "entry" : false,
      "use-vars" : [ 23 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 425,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 100,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Nil",
            "kind" : "ident",
            "value" : "nil"
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 425,
      "code" : "return nil",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 181 ],
      "in-vars" : [ 20, 21, 22, 19, 23, 35 ],
      "exit" : false,
      "out-vars" : [ 23, 20, 21, 22, 19 ],
      "decl-vars" : [ ],
      "line-start" : 426,
      "ast" : {
        "expressions" : [ {
          "go-type" : 2,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "Uintptr",
            "variable" : 35
          }
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 442,
      "code" : "case Uintptr:\n\tvar def uintptr\n\n\tif def, ok = defaultValue.(uintptr); !ok {\n\t\treturn errors.Errorf(defaultValueErrMsg, def, defaultValue, defaultValue)\n\t}\n\tdt := data.Uintptrs()\n\trt := retVal.Uintptrs()\n\tswitch f := fn.(type) {\n\tcase func([]uintptr) uintptr:\n\t\treduceLastUintptr(dt, rt, dimSize, def, f)\n\tcase func(uintptr, uintptr) uintptr:\n\t\tgenericReduceLastUintptr(dt, rt, dimSize, def, f)\n\tdefault:\n\t\treturn errors.Errorf(reductionErrMsg, fn)\n\t}\n\treturn nil",
      "entry" : false,
      "use-vars" : [ 35 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 183 ],
      "in-vars" : [ 19, 23, 20, 21, 22 ],
      "exit" : false,
      "out-vars" : [ 22, 19, 23, 20, 21 ],
      "decl-vars" : [ 99 ],
      "line-start" : 427,
      "ast" : {
        "kind" : "statement",
        "target" : {
          "kind" : "decl",
          "specs" : [ {
            "comments" : [ ],
            "declared-type" : {
              "go-type" : 25,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 25,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "uintptr"
              }
            },
            "kind" : "spec",
            "names" : [ {
              "ident-kind" : "NoKind",
              "kind" : "ident",
              "value" : "def"
            } ],
            "type" : "var",
            "values" : [ ]
          } ],
          "type" : "var"
        },
        "type" : "declaration"
      },
      "assign-vars" : [ ],
      "line-end" : 427,
      "code" : "var def uintptr",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 184, 185 ],
      "in-vars" : [ 23, 20, 21, 22, 99, 19, 43 ],
      "exit" : false,
      "out-vars" : [ 20, 21, 22, 99, 19, 23 ],
      "decl-vars" : [ ],
      "line-start" : 429,
      "ast" : {
        "condition" : {
          "go-type" : 11,
          "kind" : "expression",
          "operator" : "!",
          "target" : {
            "go-type" : 11,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "ok",
              "variable" : 43
            }
          },
          "type" : "unary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 431,
      "code" : "if def, ok = defaultValue.(uintptr); !ok {\n\treturn errors.Errorf(defaultValueErrMsg, def, defaultValue, defaultValue)\n}",
      "entry" : false,
      "use-vars" : [ 43 ]
    }, {
      "update-vars" : [ 43, 99 ],
      "successors" : [ 182 ],
      "in-vars" : [ 23, 20, 21, 22, 19 ],
      "exit" : false,
      "out-vars" : [ 19, 43, 23, 20, 21, 22, 99 ],
      "decl-vars" : [ ],
      "line-start" : 429,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 25,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "def",
            "variable" : 99
          }
        }, {
          "go-type" : 11,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "ok",
            "variable" : 43
          }
        } ],
        "right" : [ {
          "asserted" : {
            "go-type" : 25,
            "kind" : "type",
            "type" : "identifier",
            "value" : {
              "go-type" : 25,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "uintptr"
            }
          },
          "go-type" : 243,
          "kind" : "expression",
          "target" : {
            "go-type" : 78,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "defaultValue",
              "variable" : 22
            }
          },
          "type" : "type-assert"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 99, 43 ],
      "line-end" : 429,
      "code" : "def, ok = defaultValue.(uintptr)",
      "entry" : false,
      "use-vars" : [ 22 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 22, 99 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 430,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "arguments" : [ {
            "go-type" : 23,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "Expected default value of type %T. Got %v of %T instead"
            }
          }, {
            "go-type" : 25,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "def",
              "variable" : 99
            }
          }, {
            "go-type" : 78,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "defaultValue",
              "variable" : 22
            }
          }, {
            "go-type" : 78,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "defaultValue",
              "variable" : 22
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 85,
            "kind" : "expression",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 4,
              "value" : "errors"
            },
            "type" : "identifier",
            "value" : {
              "function" : 1,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "Errorf"
            }
          },
          "go-type" : 80,
          "kind" : "expression",
          "type" : "call"
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 430,
      "code" : "return errors.Errorf(defaultValueErrMsg, def, defaultValue, defaultValue)",
      "entry" : false,
      "use-vars" : [ 22, 99 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 186 ],
      "in-vars" : [ 23, 20, 21, 99, 19 ],
      "exit" : false,
      "out-vars" : [ 20, 21, 99, 100, 23 ],
      "decl-vars" : [ 100 ],
      "line-start" : 432,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "dt"
          }
        } ],
        "right" : [ {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "function" : 35,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "Uintptrs"
            },
            "go-type" : 245,
            "kind" : "expression",
            "target" : {
              "go-type" : 75,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "data",
                "variable" : 19
              }
            },
            "type" : "selector"
          },
          "go-type" : 244,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 432,
      "code" : "dt := data.Uintptrs()",
      "entry" : false,
      "use-vars" : [ 19 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 187 ],
      "in-vars" : [ 23, 20, 21, 99, 100 ],
      "exit" : false,
      "out-vars" : [ 101, 21, 99, 100, 23 ],
      "decl-vars" : [ 101 ],
      "line-start" : 433,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "rt"
          }
        } ],
        "right" : [ {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "function" : 35,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "Uintptrs"
            },
            "go-type" : 245,
            "kind" : "expression",
            "target" : {
              "go-type" : 75,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "retVal",
                "variable" : 20
              }
            },
            "type" : "selector"
          },
          "go-type" : 244,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 433,
      "code" : "rt := retVal.Uintptrs()",
      "entry" : false,
      "use-vars" : [ 20 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 188 ],
      "in-vars" : [ 23, 101, 21, 99, 100 ],
      "exit" : false,
      "out-vars" : [ 102, 23, 101, 21, 99, 103, 100 ],
      "decl-vars" : [ 102, 103, 145 ],
      "line-start" : 434,
      "ast" : {
        "kind" : "statement",
        "type" : "type-switch"
      },
      "assign-vars" : [ ],
      "line-end" : 441,
      "code" : "switch f := fn.(type) {\ncase func([]uintptr) uintptr:\n\treduceLastUintptr(dt, rt, dimSize, def, f)\ncase func(uintptr, uintptr) uintptr:\n\tgenericReduceLastUintptr(dt, rt, dimSize, def, f)\ndefault:\n\treturn errors.Errorf(reductionErrMsg, fn)\n}",
      "entry" : false,
      "use-vars" : [ 23 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 189, 191, 193 ],
      "in-vars" : [ 21, 99, 103, 100, 102, 23, 101 ],
      "exit" : false,
      "out-vars" : [ 23, 101, 21, 99, 103, 100, 102 ],
      "decl-vars" : [ ],
      "line-start" : 434,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "f"
          }
        } ],
        "right" : [ {
          "asserted" : null,
          "go-type" : -1,
          "kind" : "expression",
          "target" : {
            "go-type" : 78,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "fn",
              "variable" : 23
            }
          },
          "type" : "type-assert"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 434,
      "code" : "f := fn.(type)",
      "entry" : false,
      "use-vars" : [ 23 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 190 ],
      "in-vars" : [ 100, 102, 101, 21, 99 ],
      "exit" : false,
      "out-vars" : [ 101, 21, 99, 100, 102 ],
      "decl-vars" : [ ],
      "line-start" : 435,
      "ast" : {
        "expressions" : [ {
          "go-type" : 251,
          "kind" : "type",
          "params" : [ {
            "declared-type" : {
              "element" : {
                "go-type" : 25,
                "kind" : "type",
                "type" : "identifier",
                "value" : {
                  "go-type" : 25,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "uintptr"
                }
              },
              "go-type" : 244,
              "kind" : "type",
              "type" : "slice"
            },
            "kind" : "field",
            "names" : [ ],
            "tag" : null
          } ],
          "results" : [ {
            "declared-type" : {
              "go-type" : 25,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 25,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "uintptr"
              }
            },
            "kind" : "field",
            "names" : [ ],
            "tag" : null
          } ],
          "type" : "function",
          "variadic" : null
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 436,
      "code" : "case func([]uintptr) uintptr:\n\treduceLastUintptr(dt, rt, dimSize, def, f)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 195 ],
      "in-vars" : [ 101, 21, 99, 100, 102 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 436,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 244,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "dt",
              "variable" : 100
            }
          }, {
            "go-type" : 244,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "rt",
              "variable" : 101
            }
          }, {
            "go-type" : 7,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "dimSize",
              "variable" : 21
            }
          }, {
            "go-type" : 25,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "def",
              "variable" : 99
            }
          }, {
            "go-type" : 251,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "f",
              "variable" : 102
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 247,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 36,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "reduceLastUintptr"
            }
          },
          "go-type" : 5,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 436,
      "code" : "reduceLastUintptr(dt, rt, dimSize, def, f)",
      "entry" : false,
      "use-vars" : [ 101, 21, 99, 102, 100 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 192 ],
      "in-vars" : [ 103, 100, 101, 21, 99 ],
      "exit" : false,
      "out-vars" : [ 21, 99, 103, 100, 101 ],
      "decl-vars" : [ ],
      "line-start" : 437,
      "ast" : {
        "expressions" : [ {
          "go-type" : 254,
          "kind" : "type",
          "params" : [ {
            "declared-type" : {
              "go-type" : 25,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 25,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "uintptr"
              }
            },
            "kind" : "field",
            "names" : [ ],
            "tag" : null
          }, {
            "declared-type" : {
              "go-type" : 25,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 25,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "uintptr"
              }
            },
            "kind" : "field",
            "names" : [ ],
            "tag" : null
          } ],
          "results" : [ {
            "declared-type" : {
              "go-type" : 25,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 25,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "uintptr"
              }
            },
            "kind" : "field",
            "names" : [ ],
            "tag" : null
          } ],
          "type" : "function",
          "variadic" : null
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 438,
      "code" : "case func(uintptr, uintptr) uintptr:\n\tgenericReduceLastUintptr(dt, rt, dimSize, def, f)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 195 ],
      "in-vars" : [ 103, 100, 101, 21, 99 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 438,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 244,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "dt",
              "variable" : 100
            }
          }, {
            "go-type" : 244,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "rt",
              "variable" : 101
            }
          }, {
            "go-type" : 7,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "dimSize",
              "variable" : 21
            }
          }, {
            "go-type" : 25,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "def",
              "variable" : 99
            }
          }, {
            "go-type" : 254,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "f",
              "variable" : 103
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 252,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 37,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "genericReduceLastUintptr"
            }
          },
          "go-type" : 5,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 438,
      "code" : "genericReduceLastUintptr(dt, rt, dimSize, def, f)",
      "entry" : false,
      "use-vars" : [ 100, 101, 21, 99, 103 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 194 ],
      "in-vars" : [ 23 ],
      "exit" : false,
      "out-vars" : [ 23 ],
      "decl-vars" : [ ],
      "line-start" : 439,
      "ast" : {
        "expressions" : [ ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 440,
      "code" : "default:\n\treturn errors.Errorf(reductionErrMsg, fn)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 23 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 440,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "arguments" : [ {
            "go-type" : 23,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "Cannot reduce with function of type %T"
            }
          }, {
            "go-type" : 78,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "fn",
              "variable" : 23
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 85,
            "kind" : "expression",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 4,
              "value" : "errors"
            },
            "type" : "identifier",
            "value" : {
              "function" : 1,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "Errorf"
            }
          },
          "go-type" : 80,
          "kind" : "expression",
          "type" : "call"
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 440,
      "code" : "return errors.Errorf(reductionErrMsg, fn)",
      "entry" : false,
      "use-vars" : [ 23 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 442,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 100,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Nil",
            "kind" : "ident",
            "value" : "nil"
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 442,
      "code" : "return nil",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 197 ],
      "in-vars" : [ 22, 19, 31, 23, 20, 21 ],
      "exit" : false,
      "out-vars" : [ 21, 22, 19, 23, 20 ],
      "decl-vars" : [ ],
      "line-start" : 443,
      "ast" : {
        "expressions" : [ {
          "go-type" : 2,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "Float32",
            "variable" : 31
          }
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 459,
      "code" : "case Float32:\n\tvar def float32\n\n\tif def, ok = defaultValue.(float32); !ok {\n\t\treturn errors.Errorf(defaultValueErrMsg, def, defaultValue, defaultValue)\n\t}\n\tdt := data.Float32s()\n\trt := retVal.Float32s()\n\tswitch f := fn.(type) {\n\tcase func([]float32) float32:\n\t\treduceLastF32(dt, rt, dimSize, def, f)\n\tcase func(float32, float32) float32:\n\t\tgenericReduceLastF32(dt, rt, dimSize, def, f)\n\tdefault:\n\t\treturn errors.Errorf(reductionErrMsg, fn)\n\t}\n\treturn nil",
      "entry" : false,
      "use-vars" : [ 31 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 199 ],
      "in-vars" : [ 23, 20, 21, 22, 19 ],
      "exit" : false,
      "out-vars" : [ 19, 23, 20, 21, 22 ],
      "decl-vars" : [ 104 ],
      "line-start" : 444,
      "ast" : {
        "kind" : "statement",
        "target" : {
          "kind" : "decl",
          "specs" : [ {
            "comments" : [ ],
            "declared-type" : {
              "go-type" : 256,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 256,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "float32"
              }
            },
            "kind" : "spec",
            "names" : [ {
              "ident-kind" : "NoKind",
              "kind" : "ident",
              "value" : "def"
            } ],
            "type" : "var",
            "values" : [ ]
          } ],
          "type" : "var"
        },
        "type" : "declaration"
      },
      "assign-vars" : [ ],
      "line-end" : 444,
      "code" : "var def float32",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 200, 201 ],
      "in-vars" : [ 20, 21, 22, 19, 104, 43, 23 ],
      "exit" : false,
      "out-vars" : [ 23, 20, 21, 22, 19, 104 ],
      "decl-vars" : [ ],
      "line-start" : 446,
      "ast" : {
        "condition" : {
          "go-type" : 11,
          "kind" : "expression",
          "operator" : "!",
          "target" : {
            "go-type" : 11,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "ok",
              "variable" : 43
            }
          },
          "type" : "unary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 448,
      "code" : "if def, ok = defaultValue.(float32); !ok {\n\treturn errors.Errorf(defaultValueErrMsg, def, defaultValue, defaultValue)\n}",
      "entry" : false,
      "use-vars" : [ 43 ]
    }, {
      "update-vars" : [ 43, 104 ],
      "successors" : [ 198 ],
      "in-vars" : [ 23, 20, 21, 22, 19 ],
      "exit" : false,
      "out-vars" : [ 19, 104, 43, 23, 20, 21, 22 ],
      "decl-vars" : [ ],
      "line-start" : 446,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 256,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "def",
            "variable" : 104
          }
        }, {
          "go-type" : 11,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "ok",
            "variable" : 43
          }
        } ],
        "right" : [ {
          "asserted" : {
            "go-type" : 256,
            "kind" : "type",
            "type" : "identifier",
            "value" : {
              "go-type" : 256,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "float32"
            }
          },
          "go-type" : 257,
          "kind" : "expression",
          "target" : {
            "go-type" : 78,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "defaultValue",
              "variable" : 22
            }
          },
          "type" : "type-assert"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 43, 104 ],
      "line-end" : 446,
      "code" : "def, ok = defaultValue.(float32)",
      "entry" : false,
      "use-vars" : [ 22 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 22, 104 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 447,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "arguments" : [ {
            "go-type" : 23,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "Expected default value of type %T. Got %v of %T instead"
            }
          }, {
            "go-type" : 256,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "def",
              "variable" : 104
            }
          }, {
            "go-type" : 78,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "defaultValue",
              "variable" : 22
            }
          }, {
            "go-type" : 78,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "defaultValue",
              "variable" : 22
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 85,
            "kind" : "expression",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 4,
              "value" : "errors"
            },
            "type" : "identifier",
            "value" : {
              "function" : 1,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "Errorf"
            }
          },
          "go-type" : 80,
          "kind" : "expression",
          "type" : "call"
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 447,
      "code" : "return errors.Errorf(defaultValueErrMsg, def, defaultValue, defaultValue)",
      "entry" : false,
      "use-vars" : [ 104, 22 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 202 ],
      "in-vars" : [ 104, 23, 20, 21, 19 ],
      "exit" : false,
      "out-vars" : [ 20, 21, 104, 105, 23 ],
      "decl-vars" : [ 105 ],
      "line-start" : 449,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "dt"
          }
        } ],
        "right" : [ {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "function" : 38,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "Float32s"
            },
            "go-type" : 259,
            "kind" : "expression",
            "target" : {
              "go-type" : 75,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "data",
                "variable" : 19
              }
            },
            "type" : "selector"
          },
          "go-type" : 258,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 449,
      "code" : "dt := data.Float32s()",
      "entry" : false,
      "use-vars" : [ 19 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 203 ],
      "in-vars" : [ 20, 21, 104, 105, 23 ],
      "exit" : false,
      "out-vars" : [ 21, 104, 105, 106, 23 ],
      "decl-vars" : [ 106 ],
      "line-start" : 450,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "rt"
          }
        } ],
        "right" : [ {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "function" : 38,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "Float32s"
            },
            "go-type" : 259,
            "kind" : "expression",
            "target" : {
              "go-type" : 75,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "retVal",
                "variable" : 20
              }
            },
            "type" : "selector"
          },
          "go-type" : 258,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 450,
      "code" : "rt := retVal.Float32s()",
      "entry" : false,
      "use-vars" : [ 20 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 204 ],
      "in-vars" : [ 105, 106, 23, 21, 104 ],
      "exit" : false,
      "out-vars" : [ 104, 105, 106, 108, 107, 23, 21 ],
      "decl-vars" : [ 107, 108, 146 ],
      "line-start" : 451,
      "ast" : {
        "kind" : "statement",
        "type" : "type-switch"
      },
      "assign-vars" : [ ],
      "line-end" : 458,
      "code" : "switch f := fn.(type) {\ncase func([]float32) float32:\n\treduceLastF32(dt, rt, dimSize, def, f)\ncase func(float32, float32) float32:\n\tgenericReduceLastF32(dt, rt, dimSize, def, f)\ndefault:\n\treturn errors.Errorf(reductionErrMsg, fn)\n}",
      "entry" : false,
      "use-vars" : [ 23 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 205, 207, 209 ],
      "in-vars" : [ 106, 108, 107, 23, 21, 104, 105 ],
      "exit" : false,
      "out-vars" : [ 104, 105, 106, 108, 107, 23, 21 ],
      "decl-vars" : [ ],
      "line-start" : 451,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "f"
          }
        } ],
        "right" : [ {
          "asserted" : null,
          "go-type" : -1,
          "kind" : "expression",
          "target" : {
            "go-type" : 78,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "fn",
              "variable" : 23
            }
          },
          "type" : "type-assert"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 451,
      "code" : "f := fn.(type)",
      "entry" : false,
      "use-vars" : [ 23 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 206 ],
      "in-vars" : [ 107, 21, 104, 105, 106 ],
      "exit" : false,
      "out-vars" : [ 21, 104, 105, 106, 107 ],
      "decl-vars" : [ ],
      "line-start" : 452,
      "ast" : {
        "expressions" : [ {
          "go-type" : 266,
          "kind" : "type",
          "params" : [ {
            "declared-type" : {
              "element" : {
                "go-type" : 256,
                "kind" : "type",
                "type" : "identifier",
                "value" : {
                  "go-type" : 256,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "float32"
                }
              },
              "go-type" : 258,
              "kind" : "type",
              "type" : "slice"
            },
            "kind" : "field",
            "names" : [ ],
            "tag" : null
          } ],
          "results" : [ {
            "declared-type" : {
              "go-type" : 256,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 256,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "float32"
              }
            },
            "kind" : "field",
            "names" : [ ],
            "tag" : null
          } ],
          "type" : "function",
          "variadic" : null
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 453,
      "code" : "case func([]float32) float32:\n\treduceLastF32(dt, rt, dimSize, def, f)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 211 ],
      "in-vars" : [ 105, 106, 107, 21, 104 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 453,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 258,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "dt",
              "variable" : 105
            }
          }, {
            "go-type" : 258,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "rt",
              "variable" : 106
            }
          }, {
            "go-type" : 7,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "dimSize",
              "variable" : 21
            }
          }, {
            "go-type" : 256,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "def",
              "variable" : 104
            }
          }, {
            "go-type" : 266,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "f",
              "variable" : 107
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 261,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 39,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "reduceLastF32"
            }
          },
          "go-type" : 5,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 453,
      "code" : "reduceLastF32(dt, rt, dimSize, def, f)",
      "entry" : false,
      "use-vars" : [ 105, 106, 21, 104, 107 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 208 ],
      "in-vars" : [ 21, 104, 105, 106, 108 ],
      "exit" : false,
      "out-vars" : [ 21, 104, 105, 106, 108 ],
      "decl-vars" : [ ],
      "line-start" : 454,
      "ast" : {
        "expressions" : [ {
          "go-type" : 269,
          "kind" : "type",
          "params" : [ {
            "declared-type" : {
              "go-type" : 256,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 256,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "float32"
              }
            },
            "kind" : "field",
            "names" : [ ],
            "tag" : null
          }, {
            "declared-type" : {
              "go-type" : 256,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 256,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "float32"
              }
            },
            "kind" : "field",
            "names" : [ ],
            "tag" : null
          } ],
          "results" : [ {
            "declared-type" : {
              "go-type" : 256,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 256,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "float32"
              }
            },
            "kind" : "field",
            "names" : [ ],
            "tag" : null
          } ],
          "type" : "function",
          "variadic" : null
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 455,
      "code" : "case func(float32, float32) float32:\n\tgenericReduceLastF32(dt, rt, dimSize, def, f)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 211 ],
      "in-vars" : [ 106, 108, 21, 104, 105 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 455,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 258,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "dt",
              "variable" : 105
            }
          }, {
            "go-type" : 258,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "rt",
              "variable" : 106
            }
          }, {
            "go-type" : 7,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "dimSize",
              "variable" : 21
            }
          }, {
            "go-type" : 256,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "def",
              "variable" : 104
            }
          }, {
            "go-type" : 269,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "f",
              "variable" : 108
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 267,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 40,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "genericReduceLastF32"
            }
          },
          "go-type" : 5,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 455,
      "code" : "genericReduceLastF32(dt, rt, dimSize, def, f)",
      "entry" : false,
      "use-vars" : [ 105, 106, 21, 104, 108 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 210 ],
      "in-vars" : [ 23 ],
      "exit" : false,
      "out-vars" : [ 23 ],
      "decl-vars" : [ ],
      "line-start" : 456,
      "ast" : {
        "expressions" : [ ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 457,
      "code" : "default:\n\treturn errors.Errorf(reductionErrMsg, fn)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 23 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 457,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "arguments" : [ {
            "go-type" : 23,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "Cannot reduce with function of type %T"
            }
          }, {
            "go-type" : 78,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "fn",
              "variable" : 23
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 85,
            "kind" : "expression",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 4,
              "value" : "errors"
            },
            "type" : "identifier",
            "value" : {
              "function" : 1,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "Errorf"
            }
          },
          "go-type" : 80,
          "kind" : "expression",
          "type" : "call"
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 457,
      "code" : "return errors.Errorf(reductionErrMsg, fn)",
      "entry" : false,
      "use-vars" : [ 23 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 459,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 100,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Nil",
            "kind" : "ident",
            "value" : "nil"
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 459,
      "code" : "return nil",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 213 ],
      "in-vars" : [ 19, 40, 23, 20, 21, 22 ],
      "exit" : false,
      "out-vars" : [ 21, 22, 19, 23, 20 ],
      "decl-vars" : [ ],
      "line-start" : 460,
      "ast" : {
        "expressions" : [ {
          "go-type" : 2,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "Float64",
            "variable" : 40
          }
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 476,
      "code" : "case Float64:\n\tvar def float64\n\n\tif def, ok = defaultValue.(float64); !ok {\n\t\treturn errors.Errorf(defaultValueErrMsg, def, defaultValue, defaultValue)\n\t}\n\tdt := data.Float64s()\n\trt := retVal.Float64s()\n\tswitch f := fn.(type) {\n\tcase func([]float64) float64:\n\t\treduceLastF64(dt, rt, dimSize, def, f)\n\tcase func(float64, float64) float64:\n\t\tgenericReduceLastF64(dt, rt, dimSize, def, f)\n\tdefault:\n\t\treturn errors.Errorf(reductionErrMsg, fn)\n\t}\n\treturn nil",
      "entry" : false,
      "use-vars" : [ 40 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 215 ],
      "in-vars" : [ 23, 20, 21, 22, 19 ],
      "exit" : false,
      "out-vars" : [ 23, 20, 21, 22, 19 ],
      "decl-vars" : [ 109 ],
      "line-start" : 461,
      "ast" : {
        "kind" : "statement",
        "target" : {
          "kind" : "decl",
          "specs" : [ {
            "comments" : [ ],
            "declared-type" : {
              "go-type" : 271,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 271,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "float64"
              }
            },
            "kind" : "spec",
            "names" : [ {
              "ident-kind" : "NoKind",
              "kind" : "ident",
              "value" : "def"
            } ],
            "type" : "var",
            "values" : [ ]
          } ],
          "type" : "var"
        },
        "type" : "declaration"
      },
      "assign-vars" : [ ],
      "line-end" : 461,
      "code" : "var def float64",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 216, 217 ],
      "in-vars" : [ 22, 19, 43, 23, 20, 21, 109 ],
      "exit" : false,
      "out-vars" : [ 20, 21, 109, 22, 19, 23 ],
      "decl-vars" : [ ],
      "line-start" : 463,
      "ast" : {
        "condition" : {
          "go-type" : 11,
          "kind" : "expression",
          "operator" : "!",
          "target" : {
            "go-type" : 11,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "ok",
              "variable" : 43
            }
          },
          "type" : "unary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 465,
      "code" : "if def, ok = defaultValue.(float64); !ok {\n\treturn errors.Errorf(defaultValueErrMsg, def, defaultValue, defaultValue)\n}",
      "entry" : false,
      "use-vars" : [ 43 ]
    }, {
      "update-vars" : [ 43, 109 ],
      "successors" : [ 214 ],
      "in-vars" : [ 20, 21, 22, 19, 23 ],
      "exit" : false,
      "out-vars" : [ 22, 19, 43, 23, 20, 21, 109 ],
      "decl-vars" : [ ],
      "line-start" : 463,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 271,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "def",
            "variable" : 109
          }
        }, {
          "go-type" : 11,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "ok",
            "variable" : 43
          }
        } ],
        "right" : [ {
          "asserted" : {
            "go-type" : 271,
            "kind" : "type",
            "type" : "identifier",
            "value" : {
              "go-type" : 271,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "float64"
            }
          },
          "go-type" : 272,
          "kind" : "expression",
          "target" : {
            "go-type" : 78,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "defaultValue",
              "variable" : 22
            }
          },
          "type" : "type-assert"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 43, 109 ],
      "line-end" : 463,
      "code" : "def, ok = defaultValue.(float64)",
      "entry" : false,
      "use-vars" : [ 22 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 109, 22 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 464,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "arguments" : [ {
            "go-type" : 23,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "Expected default value of type %T. Got %v of %T instead"
            }
          }, {
            "go-type" : 271,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "def",
              "variable" : 109
            }
          }, {
            "go-type" : 78,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "defaultValue",
              "variable" : 22
            }
          }, {
            "go-type" : 78,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "defaultValue",
              "variable" : 22
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 85,
            "kind" : "expression",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 4,
              "value" : "errors"
            },
            "type" : "identifier",
            "value" : {
              "function" : 1,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "Errorf"
            }
          },
          "go-type" : 80,
          "kind" : "expression",
          "type" : "call"
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 464,
      "code" : "return errors.Errorf(defaultValueErrMsg, def, defaultValue, defaultValue)",
      "entry" : false,
      "use-vars" : [ 109, 22 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 218 ],
      "in-vars" : [ 20, 21, 109, 19, 23 ],
      "exit" : false,
      "out-vars" : [ 109, 110, 23, 20, 21 ],
      "decl-vars" : [ 110 ],
      "line-start" : 466,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "dt"
          }
        } ],
        "right" : [ {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "function" : 41,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "Float64s"
            },
            "go-type" : 274,
            "kind" : "expression",
            "target" : {
              "go-type" : 75,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "data",
                "variable" : 19
              }
            },
            "type" : "selector"
          },
          "go-type" : 273,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 466,
      "code" : "dt := data.Float64s()",
      "entry" : false,
      "use-vars" : [ 19 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 219 ],
      "in-vars" : [ 21, 109, 110, 23, 20 ],
      "exit" : false,
      "out-vars" : [ 111, 23, 21, 109, 110 ],
      "decl-vars" : [ 111 ],
      "line-start" : 467,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "rt"
          }
        } ],
        "right" : [ {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "function" : 41,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "Float64s"
            },
            "go-type" : 274,
            "kind" : "expression",
            "target" : {
              "go-type" : 75,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "retVal",
                "variable" : 20
              }
            },
            "type" : "selector"
          },
          "go-type" : 273,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 467,
      "code" : "rt := retVal.Float64s()",
      "entry" : false,
      "use-vars" : [ 20 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 220 ],
      "in-vars" : [ 23, 21, 109, 110, 111 ],
      "exit" : false,
      "out-vars" : [ 110, 111, 113, 112, 23, 21, 109 ],
      "decl-vars" : [ 112, 113, 147 ],
      "line-start" : 468,
      "ast" : {
        "kind" : "statement",
        "type" : "type-switch"
      },
      "assign-vars" : [ ],
      "line-end" : 475,
      "code" : "switch f := fn.(type) {\ncase func([]float64) float64:\n\treduceLastF64(dt, rt, dimSize, def, f)\ncase func(float64, float64) float64:\n\tgenericReduceLastF64(dt, rt, dimSize, def, f)\ndefault:\n\treturn errors.Errorf(reductionErrMsg, fn)\n}",
      "entry" : false,
      "use-vars" : [ 23 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 221, 223, 225 ],
      "in-vars" : [ 112, 23, 21, 109, 110, 111, 113 ],
      "exit" : false,
      "out-vars" : [ 23, 21, 109, 110, 111, 113, 112 ],
      "decl-vars" : [ ],
      "line-start" : 468,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "f"
          }
        } ],
        "right" : [ {
          "asserted" : null,
          "go-type" : -1,
          "kind" : "expression",
          "target" : {
            "go-type" : 78,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "fn",
              "variable" : 23
            }
          },
          "type" : "type-assert"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 468,
      "code" : "f := fn.(type)",
      "entry" : false,
      "use-vars" : [ 23 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 222 ],
      "in-vars" : [ 21, 109, 110, 111, 112 ],
      "exit" : false,
      "out-vars" : [ 109, 110, 111, 112, 21 ],
      "decl-vars" : [ ],
      "line-start" : 469,
      "ast" : {
        "expressions" : [ {
          "go-type" : 281,
          "kind" : "type",
          "params" : [ {
            "declared-type" : {
              "element" : {
                "go-type" : 271,
                "kind" : "type",
                "type" : "identifier",
                "value" : {
                  "go-type" : 271,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "float64"
                }
              },
              "go-type" : 273,
              "kind" : "type",
              "type" : "slice"
            },
            "kind" : "field",
            "names" : [ ],
            "tag" : null
          } ],
          "results" : [ {
            "declared-type" : {
              "go-type" : 271,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 271,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "float64"
              }
            },
            "kind" : "field",
            "names" : [ ],
            "tag" : null
          } ],
          "type" : "function",
          "variadic" : null
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 470,
      "code" : "case func([]float64) float64:\n\treduceLastF64(dt, rt, dimSize, def, f)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 227 ],
      "in-vars" : [ 21, 109, 110, 111, 112 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 470,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 273,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "dt",
              "variable" : 110
            }
          }, {
            "go-type" : 273,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "rt",
              "variable" : 111
            }
          }, {
            "go-type" : 7,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "dimSize",
              "variable" : 21
            }
          }, {
            "go-type" : 271,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "def",
              "variable" : 109
            }
          }, {
            "go-type" : 281,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "f",
              "variable" : 112
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 276,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 42,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "reduceLastF64"
            }
          },
          "go-type" : 5,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 470,
      "code" : "reduceLastF64(dt, rt, dimSize, def, f)",
      "entry" : false,
      "use-vars" : [ 21, 109, 112, 110, 111 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 224 ],
      "in-vars" : [ 109, 110, 111, 113, 21 ],
      "exit" : false,
      "out-vars" : [ 21, 109, 110, 111, 113 ],
      "decl-vars" : [ ],
      "line-start" : 471,
      "ast" : {
        "expressions" : [ {
          "go-type" : 284,
          "kind" : "type",
          "params" : [ {
            "declared-type" : {
              "go-type" : 271,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 271,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "float64"
              }
            },
            "kind" : "field",
            "names" : [ ],
            "tag" : null
          }, {
            "declared-type" : {
              "go-type" : 271,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 271,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "float64"
              }
            },
            "kind" : "field",
            "names" : [ ],
            "tag" : null
          } ],
          "results" : [ {
            "declared-type" : {
              "go-type" : 271,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 271,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "float64"
              }
            },
            "kind" : "field",
            "names" : [ ],
            "tag" : null
          } ],
          "type" : "function",
          "variadic" : null
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 472,
      "code" : "case func(float64, float64) float64:\n\tgenericReduceLastF64(dt, rt, dimSize, def, f)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 227 ],
      "in-vars" : [ 21, 109, 110, 111, 113 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 472,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 273,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "dt",
              "variable" : 110
            }
          }, {
            "go-type" : 273,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "rt",
              "variable" : 111
            }
          }, {
            "go-type" : 7,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "dimSize",
              "variable" : 21
            }
          }, {
            "go-type" : 271,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "def",
              "variable" : 109
            }
          }, {
            "go-type" : 284,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "f",
              "variable" : 113
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 282,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 43,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "genericReduceLastF64"
            }
          },
          "go-type" : 5,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 472,
      "code" : "genericReduceLastF64(dt, rt, dimSize, def, f)",
      "entry" : false,
      "use-vars" : [ 21, 109, 113, 110, 111 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 226 ],
      "in-vars" : [ 23 ],
      "exit" : false,
      "out-vars" : [ 23 ],
      "decl-vars" : [ ],
      "line-start" : 473,
      "ast" : {
        "expressions" : [ ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 474,
      "code" : "default:\n\treturn errors.Errorf(reductionErrMsg, fn)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 23 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 474,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "arguments" : [ {
            "go-type" : 23,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "Cannot reduce with function of type %T"
            }
          }, {
            "go-type" : 78,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "fn",
              "variable" : 23
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 85,
            "kind" : "expression",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 4,
              "value" : "errors"
            },
            "type" : "identifier",
            "value" : {
              "function" : 1,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "Errorf"
            }
          },
          "go-type" : 80,
          "kind" : "expression",
          "type" : "call"
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 474,
      "code" : "return errors.Errorf(reductionErrMsg, fn)",
      "entry" : false,
      "use-vars" : [ 23 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 476,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 100,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Nil",
            "kind" : "ident",
            "value" : "nil"
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 476,
      "code" : "return nil",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 229 ],
      "in-vars" : [ 21, 22, 19, 41, 23, 20 ],
      "exit" : false,
      "out-vars" : [ 23, 20, 21, 22, 19 ],
      "decl-vars" : [ ],
      "line-start" : 477,
      "ast" : {
        "expressions" : [ {
          "go-type" : 2,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "Complex64",
            "variable" : 41
          }
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 493,
      "code" : "case Complex64:\n\tvar def complex64\n\n\tif def, ok = defaultValue.(complex64); !ok {\n\t\treturn errors.Errorf(defaultValueErrMsg, def, defaultValue, defaultValue)\n\t}\n\tdt := data.Complex64s()\n\trt := retVal.Complex64s()\n\tswitch f := fn.(type) {\n\tcase func([]complex64) complex64:\n\t\treduceLastC64(dt, rt, dimSize, def, f)\n\tcase func(complex64, complex64) complex64:\n\t\tgenericReduceLastC64(dt, rt, dimSize, def, f)\n\tdefault:\n\t\treturn errors.Errorf(reductionErrMsg, fn)\n\t}\n\treturn nil",
      "entry" : false,
      "use-vars" : [ 41 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 231 ],
      "in-vars" : [ 23, 20, 21, 22, 19 ],
      "exit" : false,
      "out-vars" : [ 23, 20, 21, 22, 19 ],
      "decl-vars" : [ 114 ],
      "line-start" : 478,
      "ast" : {
        "kind" : "statement",
        "target" : {
          "kind" : "decl",
          "specs" : [ {
            "comments" : [ ],
            "declared-type" : {
              "go-type" : 286,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 286,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "complex64"
              }
            },
            "kind" : "spec",
            "names" : [ {
              "ident-kind" : "NoKind",
              "kind" : "ident",
              "value" : "def"
            } ],
            "type" : "var",
            "values" : [ ]
          } ],
          "type" : "var"
        },
        "type" : "declaration"
      },
      "assign-vars" : [ ],
      "line-end" : 478,
      "code" : "var def complex64",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 232, 233 ],
      "in-vars" : [ 114, 43, 23, 20, 21, 22, 19 ],
      "exit" : false,
      "out-vars" : [ 114, 23, 20, 21, 22, 19 ],
      "decl-vars" : [ ],
      "line-start" : 480,
      "ast" : {
        "condition" : {
          "go-type" : 11,
          "kind" : "expression",
          "operator" : "!",
          "target" : {
            "go-type" : 11,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "ok",
              "variable" : 43
            }
          },
          "type" : "unary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 482,
      "code" : "if def, ok = defaultValue.(complex64); !ok {\n\treturn errors.Errorf(defaultValueErrMsg, def, defaultValue, defaultValue)\n}",
      "entry" : false,
      "use-vars" : [ 43 ]
    }, {
      "update-vars" : [ 114, 43 ],
      "successors" : [ 230 ],
      "in-vars" : [ 21, 22, 19, 23, 20 ],
      "exit" : false,
      "out-vars" : [ 22, 19, 114, 43, 23, 20, 21 ],
      "decl-vars" : [ ],
      "line-start" : 480,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 286,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "def",
            "variable" : 114
          }
        }, {
          "go-type" : 11,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "ok",
            "variable" : 43
          }
        } ],
        "right" : [ {
          "asserted" : {
            "go-type" : 286,
            "kind" : "type",
            "type" : "identifier",
            "value" : {
              "go-type" : 286,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "complex64"
            }
          },
          "go-type" : 287,
          "kind" : "expression",
          "target" : {
            "go-type" : 78,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "defaultValue",
              "variable" : 22
            }
          },
          "type" : "type-assert"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 43, 114 ],
      "line-end" : 480,
      "code" : "def, ok = defaultValue.(complex64)",
      "entry" : false,
      "use-vars" : [ 22 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 22, 114 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 481,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "arguments" : [ {
            "go-type" : 23,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "Expected default value of type %T. Got %v of %T instead"
            }
          }, {
            "go-type" : 286,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "def",
              "variable" : 114
            }
          }, {
            "go-type" : 78,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "defaultValue",
              "variable" : 22
            }
          }, {
            "go-type" : 78,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "defaultValue",
              "variable" : 22
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 85,
            "kind" : "expression",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 4,
              "value" : "errors"
            },
            "type" : "identifier",
            "value" : {
              "function" : 1,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "Errorf"
            }
          },
          "go-type" : 80,
          "kind" : "expression",
          "type" : "call"
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 481,
      "code" : "return errors.Errorf(defaultValueErrMsg, def, defaultValue, defaultValue)",
      "entry" : false,
      "use-vars" : [ 114, 22 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 234 ],
      "in-vars" : [ 23, 20, 21, 19, 114 ],
      "exit" : false,
      "out-vars" : [ 23, 20, 21, 115, 114 ],
      "decl-vars" : [ 115 ],
      "line-start" : 483,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "dt"
          }
        } ],
        "right" : [ {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "function" : 44,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "Complex64s"
            },
            "go-type" : 289,
            "kind" : "expression",
            "target" : {
              "go-type" : 75,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "data",
                "variable" : 19
              }
            },
            "type" : "selector"
          },
          "go-type" : 288,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 483,
      "code" : "dt := data.Complex64s()",
      "entry" : false,
      "use-vars" : [ 19 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 235 ],
      "in-vars" : [ 23, 20, 21, 115, 114 ],
      "exit" : false,
      "out-vars" : [ 21, 116, 115, 114, 23 ],
      "decl-vars" : [ 116 ],
      "line-start" : 484,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "rt"
          }
        } ],
        "right" : [ {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "function" : 44,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "Complex64s"
            },
            "go-type" : 289,
            "kind" : "expression",
            "target" : {
              "go-type" : 75,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "retVal",
                "variable" : 20
              }
            },
            "type" : "selector"
          },
          "go-type" : 288,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 484,
      "code" : "rt := retVal.Complex64s()",
      "entry" : false,
      "use-vars" : [ 20 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 236 ],
      "in-vars" : [ 116, 115, 114, 23, 21 ],
      "exit" : false,
      "out-vars" : [ 117, 23, 21, 116, 118, 115, 114 ],
      "decl-vars" : [ 148, 117, 118 ],
      "line-start" : 485,
      "ast" : {
        "kind" : "statement",
        "type" : "type-switch"
      },
      "assign-vars" : [ ],
      "line-end" : 492,
      "code" : "switch f := fn.(type) {\ncase func([]complex64) complex64:\n\treduceLastC64(dt, rt, dimSize, def, f)\ncase func(complex64, complex64) complex64:\n\tgenericReduceLastC64(dt, rt, dimSize, def, f)\ndefault:\n\treturn errors.Errorf(reductionErrMsg, fn)\n}",
      "entry" : false,
      "use-vars" : [ 23 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 237, 239, 241 ],
      "in-vars" : [ 117, 23, 21, 116, 118, 115, 114 ],
      "exit" : false,
      "out-vars" : [ 23, 21, 116, 118, 115, 114, 117 ],
      "decl-vars" : [ ],
      "line-start" : 485,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "f"
          }
        } ],
        "right" : [ {
          "asserted" : null,
          "go-type" : -1,
          "kind" : "expression",
          "target" : {
            "go-type" : 78,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "fn",
              "variable" : 23
            }
          },
          "type" : "type-assert"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 485,
      "code" : "f := fn.(type)",
      "entry" : false,
      "use-vars" : [ 23 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 238 ],
      "in-vars" : [ 21, 116, 115, 114, 117 ],
      "exit" : false,
      "out-vars" : [ 21, 116, 115, 114, 117 ],
      "decl-vars" : [ ],
      "line-start" : 486,
      "ast" : {
        "expressions" : [ {
          "go-type" : 296,
          "kind" : "type",
          "params" : [ {
            "declared-type" : {
              "element" : {
                "go-type" : 286,
                "kind" : "type",
                "type" : "identifier",
                "value" : {
                  "go-type" : 286,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "complex64"
                }
              },
              "go-type" : 288,
              "kind" : "type",
              "type" : "slice"
            },
            "kind" : "field",
            "names" : [ ],
            "tag" : null
          } ],
          "results" : [ {
            "declared-type" : {
              "go-type" : 286,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 286,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "complex64"
              }
            },
            "kind" : "field",
            "names" : [ ],
            "tag" : null
          } ],
          "type" : "function",
          "variadic" : null
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 487,
      "code" : "case func([]complex64) complex64:\n\treduceLastC64(dt, rt, dimSize, def, f)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 243 ],
      "in-vars" : [ 21, 116, 115, 114, 117 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 487,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 288,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "dt",
              "variable" : 115
            }
          }, {
            "go-type" : 288,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "rt",
              "variable" : 116
            }
          }, {
            "go-type" : 7,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "dimSize",
              "variable" : 21
            }
          }, {
            "go-type" : 286,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "def",
              "variable" : 114
            }
          }, {
            "go-type" : 296,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "f",
              "variable" : 117
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 291,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 45,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "reduceLastC64"
            }
          },
          "go-type" : 5,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 487,
      "code" : "reduceLastC64(dt, rt, dimSize, def, f)",
      "entry" : false,
      "use-vars" : [ 117, 115, 116, 21, 114 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 240 ],
      "in-vars" : [ 21, 116, 118, 115, 114 ],
      "exit" : false,
      "out-vars" : [ 21, 116, 118, 115, 114 ],
      "decl-vars" : [ ],
      "line-start" : 488,
      "ast" : {
        "expressions" : [ {
          "go-type" : 299,
          "kind" : "type",
          "params" : [ {
            "declared-type" : {
              "go-type" : 286,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 286,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "complex64"
              }
            },
            "kind" : "field",
            "names" : [ ],
            "tag" : null
          }, {
            "declared-type" : {
              "go-type" : 286,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 286,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "complex64"
              }
            },
            "kind" : "field",
            "names" : [ ],
            "tag" : null
          } ],
          "results" : [ {
            "declared-type" : {
              "go-type" : 286,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 286,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "complex64"
              }
            },
            "kind" : "field",
            "names" : [ ],
            "tag" : null
          } ],
          "type" : "function",
          "variadic" : null
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 489,
      "code" : "case func(complex64, complex64) complex64:\n\tgenericReduceLastC64(dt, rt, dimSize, def, f)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 243 ],
      "in-vars" : [ 118, 115, 114, 21, 116 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 489,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 288,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "dt",
              "variable" : 115
            }
          }, {
            "go-type" : 288,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "rt",
              "variable" : 116
            }
          }, {
            "go-type" : 7,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "dimSize",
              "variable" : 21
            }
          }, {
            "go-type" : 286,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "def",
              "variable" : 114
            }
          }, {
            "go-type" : 299,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "f",
              "variable" : 118
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 297,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 46,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "genericReduceLastC64"
            }
          },
          "go-type" : 5,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 489,
      "code" : "genericReduceLastC64(dt, rt, dimSize, def, f)",
      "entry" : false,
      "use-vars" : [ 116, 21, 114, 118, 115 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 242 ],
      "in-vars" : [ 23 ],
      "exit" : false,
      "out-vars" : [ 23 ],
      "decl-vars" : [ ],
      "line-start" : 490,
      "ast" : {
        "expressions" : [ ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 491,
      "code" : "default:\n\treturn errors.Errorf(reductionErrMsg, fn)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 23 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 491,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "arguments" : [ {
            "go-type" : 23,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "Cannot reduce with function of type %T"
            }
          }, {
            "go-type" : 78,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "fn",
              "variable" : 23
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 85,
            "kind" : "expression",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 4,
              "value" : "errors"
            },
            "type" : "identifier",
            "value" : {
              "function" : 1,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "Errorf"
            }
          },
          "go-type" : 80,
          "kind" : "expression",
          "type" : "call"
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 491,
      "code" : "return errors.Errorf(reductionErrMsg, fn)",
      "entry" : false,
      "use-vars" : [ 23 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 493,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 100,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Nil",
            "kind" : "ident",
            "value" : "nil"
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 493,
      "code" : "return nil",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 245 ],
      "in-vars" : [ 23, 20, 21, 22, 19, 36 ],
      "exit" : false,
      "out-vars" : [ 21, 22, 19, 23, 20 ],
      "decl-vars" : [ ],
      "line-start" : 494,
      "ast" : {
        "expressions" : [ {
          "go-type" : 2,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "Complex128",
            "variable" : 36
          }
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 510,
      "code" : "case Complex128:\n\tvar def complex128\n\n\tif def, ok = defaultValue.(complex128); !ok {\n\t\treturn errors.Errorf(defaultValueErrMsg, def, defaultValue, defaultValue)\n\t}\n\tdt := data.Complex128s()\n\trt := retVal.Complex128s()\n\tswitch f := fn.(type) {\n\tcase func([]complex128) complex128:\n\t\treduceLastC128(dt, rt, dimSize, def, f)\n\tcase func(complex128, complex128) complex128:\n\t\tgenericReduceLastC128(dt, rt, dimSize, def, f)\n\tdefault:\n\t\treturn errors.Errorf(reductionErrMsg, fn)\n\t}\n\treturn nil",
      "entry" : false,
      "use-vars" : [ 36 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 247 ],
      "in-vars" : [ 20, 21, 22, 19, 23 ],
      "exit" : false,
      "out-vars" : [ 20, 21, 22, 19, 23 ],
      "decl-vars" : [ 119 ],
      "line-start" : 495,
      "ast" : {
        "kind" : "statement",
        "target" : {
          "kind" : "decl",
          "specs" : [ {
            "comments" : [ ],
            "declared-type" : {
              "go-type" : 301,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 301,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "complex128"
              }
            },
            "kind" : "spec",
            "names" : [ {
              "ident-kind" : "NoKind",
              "kind" : "ident",
              "value" : "def"
            } ],
            "type" : "var",
            "values" : [ ]
          } ],
          "type" : "var"
        },
        "type" : "declaration"
      },
      "assign-vars" : [ ],
      "line-end" : 495,
      "code" : "var def complex128",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 248, 249 ],
      "in-vars" : [ 19, 119, 43, 23, 20, 21, 22 ],
      "exit" : false,
      "out-vars" : [ 119, 23, 20, 21, 22, 19 ],
      "decl-vars" : [ ],
      "line-start" : 497,
      "ast" : {
        "condition" : {
          "go-type" : 11,
          "kind" : "expression",
          "operator" : "!",
          "target" : {
            "go-type" : 11,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "ok",
              "variable" : 43
            }
          },
          "type" : "unary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 499,
      "code" : "if def, ok = defaultValue.(complex128); !ok {\n\treturn errors.Errorf(defaultValueErrMsg, def, defaultValue, defaultValue)\n}",
      "entry" : false,
      "use-vars" : [ 43 ]
    }, {
      "update-vars" : [ 43, 119 ],
      "successors" : [ 246 ],
      "in-vars" : [ 21, 22, 19, 23, 20 ],
      "exit" : false,
      "out-vars" : [ 43, 23, 20, 21, 22, 19, 119 ],
      "decl-vars" : [ ],
      "line-start" : 497,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 301,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "def",
            "variable" : 119
          }
        }, {
          "go-type" : 11,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "ok",
            "variable" : 43
          }
        } ],
        "right" : [ {
          "asserted" : {
            "go-type" : 301,
            "kind" : "type",
            "type" : "identifier",
            "value" : {
              "go-type" : 301,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "complex128"
            }
          },
          "go-type" : 302,
          "kind" : "expression",
          "target" : {
            "go-type" : 78,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "defaultValue",
              "variable" : 22
            }
          },
          "type" : "type-assert"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 43, 119 ],
      "line-end" : 497,
      "code" : "def, ok = defaultValue.(complex128)",
      "entry" : false,
      "use-vars" : [ 22 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 22, 119 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 498,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "arguments" : [ {
            "go-type" : 23,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "Expected default value of type %T. Got %v of %T instead"
            }
          }, {
            "go-type" : 301,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "def",
              "variable" : 119
            }
          }, {
            "go-type" : 78,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "defaultValue",
              "variable" : 22
            }
          }, {
            "go-type" : 78,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "defaultValue",
              "variable" : 22
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 85,
            "kind" : "expression",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 4,
              "value" : "errors"
            },
            "type" : "identifier",
            "value" : {
              "function" : 1,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "Errorf"
            }
          },
          "go-type" : 80,
          "kind" : "expression",
          "type" : "call"
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 498,
      "code" : "return errors.Errorf(defaultValueErrMsg, def, defaultValue, defaultValue)",
      "entry" : false,
      "use-vars" : [ 22, 119 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 250 ],
      "in-vars" : [ 23, 20, 21, 19, 119 ],
      "exit" : false,
      "out-vars" : [ 23, 20, 21, 119, 120 ],
      "decl-vars" : [ 120 ],
      "line-start" : 500,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "dt"
          }
        } ],
        "right" : [ {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "function" : 47,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "Complex128s"
            },
            "go-type" : 304,
            "kind" : "expression",
            "target" : {
              "go-type" : 75,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "data",
                "variable" : 19
              }
            },
            "type" : "selector"
          },
          "go-type" : 303,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 500,
      "code" : "dt := data.Complex128s()",
      "entry" : false,
      "use-vars" : [ 19 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 251 ],
      "in-vars" : [ 23, 20, 21, 119, 120 ],
      "exit" : false,
      "out-vars" : [ 119, 120, 23, 21, 121 ],
      "decl-vars" : [ 121 ],
      "line-start" : 501,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "rt"
          }
        } ],
        "right" : [ {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "function" : 47,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "Complex128s"
            },
            "go-type" : 304,
            "kind" : "expression",
            "target" : {
              "go-type" : 75,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "retVal",
                "variable" : 20
              }
            },
            "type" : "selector"
          },
          "go-type" : 303,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 501,
      "code" : "rt := retVal.Complex128s()",
      "entry" : false,
      "use-vars" : [ 20 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 252 ],
      "in-vars" : [ 23, 21, 121, 119, 120 ],
      "exit" : false,
      "out-vars" : [ 120, 122, 123, 23, 21, 121, 119 ],
      "decl-vars" : [ 122, 123, 149 ],
      "line-start" : 502,
      "ast" : {
        "kind" : "statement",
        "type" : "type-switch"
      },
      "assign-vars" : [ ],
      "line-end" : 509,
      "code" : "switch f := fn.(type) {\ncase func([]complex128) complex128:\n\treduceLastC128(dt, rt, dimSize, def, f)\ncase func(complex128, complex128) complex128:\n\tgenericReduceLastC128(dt, rt, dimSize, def, f)\ndefault:\n\treturn errors.Errorf(reductionErrMsg, fn)\n}",
      "entry" : false,
      "use-vars" : [ 23 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 253, 255, 257 ],
      "in-vars" : [ 120, 122, 123, 23, 21, 121, 119 ],
      "exit" : false,
      "out-vars" : [ 122, 123, 23, 21, 121, 119, 120 ],
      "decl-vars" : [ ],
      "line-start" : 502,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "f"
          }
        } ],
        "right" : [ {
          "asserted" : null,
          "go-type" : -1,
          "kind" : "expression",
          "target" : {
            "go-type" : 78,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "fn",
              "variable" : 23
            }
          },
          "type" : "type-assert"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 502,
      "code" : "f := fn.(type)",
      "entry" : false,
      "use-vars" : [ 23 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 254 ],
      "in-vars" : [ 21, 121, 119, 120, 122 ],
      "exit" : false,
      "out-vars" : [ 21, 121, 119, 120, 122 ],
      "decl-vars" : [ ],
      "line-start" : 503,
      "ast" : {
        "expressions" : [ {
          "go-type" : 311,
          "kind" : "type",
          "params" : [ {
            "declared-type" : {
              "element" : {
                "go-type" : 301,
                "kind" : "type",
                "type" : "identifier",
                "value" : {
                  "go-type" : 301,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "complex128"
                }
              },
              "go-type" : 303,
              "kind" : "type",
              "type" : "slice"
            },
            "kind" : "field",
            "names" : [ ],
            "tag" : null
          } ],
          "results" : [ {
            "declared-type" : {
              "go-type" : 301,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 301,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "complex128"
              }
            },
            "kind" : "field",
            "names" : [ ],
            "tag" : null
          } ],
          "type" : "function",
          "variadic" : null
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 504,
      "code" : "case func([]complex128) complex128:\n\treduceLastC128(dt, rt, dimSize, def, f)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 259 ],
      "in-vars" : [ 21, 121, 119, 120, 122 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 504,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 303,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "dt",
              "variable" : 120
            }
          }, {
            "go-type" : 303,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "rt",
              "variable" : 121
            }
          }, {
            "go-type" : 7,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "dimSize",
              "variable" : 21
            }
          }, {
            "go-type" : 301,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "def",
              "variable" : 119
            }
          }, {
            "go-type" : 311,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "f",
              "variable" : 122
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 306,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 48,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "reduceLastC128"
            }
          },
          "go-type" : 5,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 504,
      "code" : "reduceLastC128(dt, rt, dimSize, def, f)",
      "entry" : false,
      "use-vars" : [ 21, 119, 122, 120, 121 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 256 ],
      "in-vars" : [ 21, 121, 119, 120, 123 ],
      "exit" : false,
      "out-vars" : [ 21, 121, 119, 120, 123 ],
      "decl-vars" : [ ],
      "line-start" : 505,
      "ast" : {
        "expressions" : [ {
          "go-type" : 314,
          "kind" : "type",
          "params" : [ {
            "declared-type" : {
              "go-type" : 301,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 301,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "complex128"
              }
            },
            "kind" : "field",
            "names" : [ ],
            "tag" : null
          }, {
            "declared-type" : {
              "go-type" : 301,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 301,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "complex128"
              }
            },
            "kind" : "field",
            "names" : [ ],
            "tag" : null
          } ],
          "results" : [ {
            "declared-type" : {
              "go-type" : 301,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 301,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "complex128"
              }
            },
            "kind" : "field",
            "names" : [ ],
            "tag" : null
          } ],
          "type" : "function",
          "variadic" : null
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 506,
      "code" : "case func(complex128, complex128) complex128:\n\tgenericReduceLastC128(dt, rt, dimSize, def, f)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 259 ],
      "in-vars" : [ 120, 123, 21, 121, 119 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 506,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 303,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "dt",
              "variable" : 120
            }
          }, {
            "go-type" : 303,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "rt",
              "variable" : 121
            }
          }, {
            "go-type" : 7,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "dimSize",
              "variable" : 21
            }
          }, {
            "go-type" : 301,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "def",
              "variable" : 119
            }
          }, {
            "go-type" : 314,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "f",
              "variable" : 123
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 312,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 49,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "genericReduceLastC128"
            }
          },
          "go-type" : 5,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 506,
      "code" : "genericReduceLastC128(dt, rt, dimSize, def, f)",
      "entry" : false,
      "use-vars" : [ 123, 120, 121, 21, 119 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 258 ],
      "in-vars" : [ 23 ],
      "exit" : false,
      "out-vars" : [ 23 ],
      "decl-vars" : [ ],
      "line-start" : 507,
      "ast" : {
        "expressions" : [ ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 508,
      "code" : "default:\n\treturn errors.Errorf(reductionErrMsg, fn)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 23 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 508,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "arguments" : [ {
            "go-type" : 23,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "Cannot reduce with function of type %T"
            }
          }, {
            "go-type" : 78,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "fn",
              "variable" : 23
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 85,
            "kind" : "expression",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 4,
              "value" : "errors"
            },
            "type" : "identifier",
            "value" : {
              "function" : 1,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "Errorf"
            }
          },
          "go-type" : 80,
          "kind" : "expression",
          "type" : "call"
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 508,
      "code" : "return errors.Errorf(reductionErrMsg, fn)",
      "entry" : false,
      "use-vars" : [ 23 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 510,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 100,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Nil",
            "kind" : "ident",
            "value" : "nil"
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 510,
      "code" : "return nil",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 261 ],
      "in-vars" : [ 20, 21, 22, 19, 39, 23 ],
      "exit" : false,
      "out-vars" : [ 23, 20, 21, 22, 19 ],
      "decl-vars" : [ ],
      "line-start" : 511,
      "ast" : {
        "expressions" : [ {
          "go-type" : 2,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "String",
            "variable" : 39
          }
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 527,
      "code" : "case String:\n\tvar def string\n\n\tif def, ok = defaultValue.(string); !ok {\n\t\treturn errors.Errorf(defaultValueErrMsg, def, defaultValue, defaultValue)\n\t}\n\tdt := data.Strings()\n\trt := retVal.Strings()\n\tswitch f := fn.(type) {\n\tcase func([]string) string:\n\t\treduceLastStr(dt, rt, dimSize, def, f)\n\tcase func(string, string) string:\n\t\tgenericReduceLastStr(dt, rt, dimSize, def, f)\n\tdefault:\n\t\treturn errors.Errorf(reductionErrMsg, fn)\n\t}\n\treturn nil",
      "entry" : false,
      "use-vars" : [ 39 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 263 ],
      "in-vars" : [ 23, 20, 21, 22, 19 ],
      "exit" : false,
      "out-vars" : [ 23, 20, 21, 22, 19 ],
      "decl-vars" : [ 124 ],
      "line-start" : 512,
      "ast" : {
        "kind" : "statement",
        "target" : {
          "kind" : "decl",
          "specs" : [ {
            "comments" : [ ],
            "declared-type" : {
              "go-type" : 23,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 23,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "string"
              }
            },
            "kind" : "spec",
            "names" : [ {
              "ident-kind" : "NoKind",
              "kind" : "ident",
              "value" : "def"
            } ],
            "type" : "var",
            "values" : [ ]
          } ],
          "type" : "var"
        },
        "type" : "declaration"
      },
      "assign-vars" : [ ],
      "line-end" : 512,
      "code" : "var def string",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 264, 265 ],
      "in-vars" : [ 21, 22, 19, 124, 43, 23, 20 ],
      "exit" : false,
      "out-vars" : [ 20, 21, 22, 19, 124, 23 ],
      "decl-vars" : [ ],
      "line-start" : 514,
      "ast" : {
        "condition" : {
          "go-type" : 11,
          "kind" : "expression",
          "operator" : "!",
          "target" : {
            "go-type" : 11,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "ok",
              "variable" : 43
            }
          },
          "type" : "unary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 516,
      "code" : "if def, ok = defaultValue.(string); !ok {\n\treturn errors.Errorf(defaultValueErrMsg, def, defaultValue, defaultValue)\n}",
      "entry" : false,
      "use-vars" : [ 43 ]
    }, {
      "update-vars" : [ 43, 124 ],
      "successors" : [ 262 ],
      "in-vars" : [ 23, 20, 21, 22, 19 ],
      "exit" : false,
      "out-vars" : [ 20, 21, 22, 19, 124, 43, 23 ],
      "decl-vars" : [ ],
      "line-start" : 514,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 23,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "def",
            "variable" : 124
          }
        }, {
          "go-type" : 11,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "ok",
            "variable" : 43
          }
        } ],
        "right" : [ {
          "asserted" : {
            "go-type" : 23,
            "kind" : "type",
            "type" : "identifier",
            "value" : {
              "go-type" : 23,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "string"
            }
          },
          "go-type" : 316,
          "kind" : "expression",
          "target" : {
            "go-type" : 78,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "defaultValue",
              "variable" : 22
            }
          },
          "type" : "type-assert"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 43, 124 ],
      "line-end" : 514,
      "code" : "def, ok = defaultValue.(string)",
      "entry" : false,
      "use-vars" : [ 22 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 124, 22 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 515,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "arguments" : [ {
            "go-type" : 23,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "Expected default value of type %T. Got %v of %T instead"
            }
          }, {
            "go-type" : 23,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "def",
              "variable" : 124
            }
          }, {
            "go-type" : 78,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "defaultValue",
              "variable" : 22
            }
          }, {
            "go-type" : 78,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "defaultValue",
              "variable" : 22
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 85,
            "kind" : "expression",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 4,
              "value" : "errors"
            },
            "type" : "identifier",
            "value" : {
              "function" : 1,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "Errorf"
            }
          },
          "go-type" : 80,
          "kind" : "expression",
          "type" : "call"
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 515,
      "code" : "return errors.Errorf(defaultValueErrMsg, def, defaultValue, defaultValue)",
      "entry" : false,
      "use-vars" : [ 124, 22 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 266 ],
      "in-vars" : [ 23, 20, 21, 19, 124 ],
      "exit" : false,
      "out-vars" : [ 20, 21, 124, 125, 23 ],
      "decl-vars" : [ 125 ],
      "line-start" : 517,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "dt"
          }
        } ],
        "right" : [ {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "function" : 50,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "Strings"
            },
            "go-type" : 318,
            "kind" : "expression",
            "target" : {
              "go-type" : 75,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "data",
                "variable" : 19
              }
            },
            "type" : "selector"
          },
          "go-type" : 317,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 517,
      "code" : "dt := data.Strings()",
      "entry" : false,
      "use-vars" : [ 19 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 267 ],
      "in-vars" : [ 21, 124, 125, 23, 20 ],
      "exit" : false,
      "out-vars" : [ 21, 126, 124, 125, 23 ],
      "decl-vars" : [ 126 ],
      "line-start" : 518,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "rt"
          }
        } ],
        "right" : [ {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "function" : 50,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "Strings"
            },
            "go-type" : 318,
            "kind" : "expression",
            "target" : {
              "go-type" : 75,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "retVal",
                "variable" : 20
              }
            },
            "type" : "selector"
          },
          "go-type" : 317,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 518,
      "code" : "rt := retVal.Strings()",
      "entry" : false,
      "use-vars" : [ 20 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 268 ],
      "in-vars" : [ 126, 124, 125, 23, 21 ],
      "exit" : false,
      "out-vars" : [ 127, 128, 124, 125, 23, 21, 126 ],
      "decl-vars" : [ 127, 128, 150 ],
      "line-start" : 519,
      "ast" : {
        "kind" : "statement",
        "type" : "type-switch"
      },
      "assign-vars" : [ ],
      "line-end" : 526,
      "code" : "switch f := fn.(type) {\ncase func([]string) string:\n\treduceLastStr(dt, rt, dimSize, def, f)\ncase func(string, string) string:\n\tgenericReduceLastStr(dt, rt, dimSize, def, f)\ndefault:\n\treturn errors.Errorf(reductionErrMsg, fn)\n}",
      "entry" : false,
      "use-vars" : [ 23 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 269, 271, 273 ],
      "in-vars" : [ 128, 124, 125, 23, 21, 126, 127 ],
      "exit" : false,
      "out-vars" : [ 124, 125, 23, 21, 126, 127, 128 ],
      "decl-vars" : [ ],
      "line-start" : 519,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "f"
          }
        } ],
        "right" : [ {
          "asserted" : null,
          "go-type" : -1,
          "kind" : "expression",
          "target" : {
            "go-type" : 78,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "fn",
              "variable" : 23
            }
          },
          "type" : "type-assert"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 519,
      "code" : "f := fn.(type)",
      "entry" : false,
      "use-vars" : [ 23 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 270 ],
      "in-vars" : [ 21, 126, 127, 124, 125 ],
      "exit" : false,
      "out-vars" : [ 21, 126, 127, 124, 125 ],
      "decl-vars" : [ ],
      "line-start" : 520,
      "ast" : {
        "expressions" : [ {
          "go-type" : 324,
          "kind" : "type",
          "params" : [ {
            "declared-type" : {
              "element" : {
                "go-type" : 23,
                "kind" : "type",
                "type" : "identifier",
                "value" : {
                  "go-type" : 23,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "string"
                }
              },
              "go-type" : 317,
              "kind" : "type",
              "type" : "slice"
            },
            "kind" : "field",
            "names" : [ ],
            "tag" : null
          } ],
          "results" : [ {
            "declared-type" : {
              "go-type" : 23,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 23,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "string"
              }
            },
            "kind" : "field",
            "names" : [ ],
            "tag" : null
          } ],
          "type" : "function",
          "variadic" : null
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 521,
      "code" : "case func([]string) string:\n\treduceLastStr(dt, rt, dimSize, def, f)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 275 ],
      "in-vars" : [ 124, 125, 21, 126, 127 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 521,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 317,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "dt",
              "variable" : 125
            }
          }, {
            "go-type" : 317,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "rt",
              "variable" : 126
            }
          }, {
            "go-type" : 7,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "dimSize",
              "variable" : 21
            }
          }, {
            "go-type" : 23,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "def",
              "variable" : 124
            }
          }, {
            "go-type" : 324,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "f",
              "variable" : 127
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 320,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 51,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "reduceLastStr"
            }
          },
          "go-type" : 5,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 521,
      "code" : "reduceLastStr(dt, rt, dimSize, def, f)",
      "entry" : false,
      "use-vars" : [ 125, 126, 21, 124, 127 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 272 ],
      "in-vars" : [ 124, 125, 21, 126, 128 ],
      "exit" : false,
      "out-vars" : [ 21, 126, 128, 124, 125 ],
      "decl-vars" : [ ],
      "line-start" : 522,
      "ast" : {
        "expressions" : [ {
          "go-type" : 327,
          "kind" : "type",
          "params" : [ {
            "declared-type" : {
              "go-type" : 23,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 23,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "string"
              }
            },
            "kind" : "field",
            "names" : [ ],
            "tag" : null
          }, {
            "declared-type" : {
              "go-type" : 23,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 23,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "string"
              }
            },
            "kind" : "field",
            "names" : [ ],
            "tag" : null
          } ],
          "results" : [ {
            "declared-type" : {
              "go-type" : 23,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 23,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "string"
              }
            },
            "kind" : "field",
            "names" : [ ],
            "tag" : null
          } ],
          "type" : "function",
          "variadic" : null
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 523,
      "code" : "case func(string, string) string:\n\tgenericReduceLastStr(dt, rt, dimSize, def, f)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 275 ],
      "in-vars" : [ 128, 124, 125, 21, 126 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 523,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 317,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "dt",
              "variable" : 125
            }
          }, {
            "go-type" : 317,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "rt",
              "variable" : 126
            }
          }, {
            "go-type" : 7,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "dimSize",
              "variable" : 21
            }
          }, {
            "go-type" : 23,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "def",
              "variable" : 124
            }
          }, {
            "go-type" : 327,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "f",
              "variable" : 128
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 325,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 52,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "genericReduceLastStr"
            }
          },
          "go-type" : 5,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 523,
      "code" : "genericReduceLastStr(dt, rt, dimSize, def, f)",
      "entry" : false,
      "use-vars" : [ 126, 21, 124, 128, 125 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 274 ],
      "in-vars" : [ 23 ],
      "exit" : false,
      "out-vars" : [ 23 ],
      "decl-vars" : [ ],
      "line-start" : 524,
      "ast" : {
        "expressions" : [ ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 525,
      "code" : "default:\n\treturn errors.Errorf(reductionErrMsg, fn)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 23 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 525,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "arguments" : [ {
            "go-type" : 23,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "Cannot reduce with function of type %T"
            }
          }, {
            "go-type" : 78,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "fn",
              "variable" : 23
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 85,
            "kind" : "expression",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 4,
              "value" : "errors"
            },
            "type" : "identifier",
            "value" : {
              "function" : 1,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "Errorf"
            }
          },
          "go-type" : 80,
          "kind" : "expression",
          "type" : "call"
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 525,
      "code" : "return errors.Errorf(reductionErrMsg, fn)",
      "entry" : false,
      "use-vars" : [ 23 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 527,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 100,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Nil",
            "kind" : "ident",
            "value" : "nil"
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 527,
      "code" : "return nil",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 277 ],
      "in-vars" : [ 23, 20, 21, 22, 19, 25 ],
      "exit" : false,
      "out-vars" : [ 23, 20, 21, 22, 19 ],
      "decl-vars" : [ ],
      "line-start" : 528,
      "ast" : {
        "expressions" : [ {
          "go-type" : 2,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "UnsafePointer",
            "variable" : 25
          }
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 544,
      "code" : "case UnsafePointer:\n\tvar def unsafe.Pointer\n\n\tif def, ok = defaultValue.(unsafe.Pointer); !ok {\n\t\treturn errors.Errorf(defaultValueErrMsg, def, defaultValue, defaultValue)\n\t}\n\tdt := data.UnsafePointers()\n\trt := retVal.UnsafePointers()\n\tswitch f := fn.(type) {\n\tcase func([]unsafe.Pointer) unsafe.Pointer:\n\t\treduceLastUnsafePointer(dt, rt, dimSize, def, f)\n\tcase func(unsafe.Pointer, unsafe.Pointer) unsafe.Pointer:\n\t\tgenericReduceLastUnsafePointer(dt, rt, dimSize, def, f)\n\tdefault:\n\t\treturn errors.Errorf(reductionErrMsg, fn)\n\t}\n\treturn nil",
      "entry" : false,
      "use-vars" : [ 25 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 279 ],
      "in-vars" : [ 23, 20, 21, 22, 19 ],
      "exit" : false,
      "out-vars" : [ 23, 20, 21, 22, 19 ],
      "decl-vars" : [ 129 ],
      "line-start" : 529,
      "ast" : {
        "kind" : "statement",
        "target" : {
          "kind" : "decl",
          "specs" : [ {
            "comments" : [ ],
            "declared-type" : {
              "go-type" : 55,
              "kind" : "type",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 2,
                "value" : "unsafe"
              },
              "type" : "identifier",
              "value" : {
                "go-type" : 55,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "Pointer"
              }
            },
            "kind" : "spec",
            "names" : [ {
              "ident-kind" : "NoKind",
              "kind" : "ident",
              "value" : "def"
            } ],
            "type" : "var",
            "values" : [ ]
          } ],
          "type" : "var"
        },
        "type" : "declaration"
      },
      "assign-vars" : [ ],
      "line-end" : 529,
      "code" : "var def unsafe.Pointer",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 280, 281 ],
      "in-vars" : [ 43, 23, 20, 21, 22, 129, 19 ],
      "exit" : false,
      "out-vars" : [ 23, 20, 21, 22, 129, 19 ],
      "decl-vars" : [ ],
      "line-start" : 531,
      "ast" : {
        "condition" : {
          "go-type" : 11,
          "kind" : "expression",
          "operator" : "!",
          "target" : {
            "go-type" : 11,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "ok",
              "variable" : 43
            }
          },
          "type" : "unary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 533,
      "code" : "if def, ok = defaultValue.(unsafe.Pointer); !ok {\n\treturn errors.Errorf(defaultValueErrMsg, def, defaultValue, defaultValue)\n}",
      "entry" : false,
      "use-vars" : [ 43 ]
    }, {
      "update-vars" : [ 43, 129 ],
      "successors" : [ 278 ],
      "in-vars" : [ 19, 23, 20, 21, 22 ],
      "exit" : false,
      "out-vars" : [ 129, 19, 43, 23, 20, 21, 22 ],
      "decl-vars" : [ ],
      "line-start" : 531,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 55,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "def",
            "variable" : 129
          }
        }, {
          "go-type" : 11,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "ok",
            "variable" : 43
          }
        } ],
        "right" : [ {
          "asserted" : {
            "go-type" : 55,
            "kind" : "type",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 2,
              "value" : "unsafe"
            },
            "type" : "identifier",
            "value" : {
              "go-type" : 55,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "Pointer"
            }
          },
          "go-type" : 329,
          "kind" : "expression",
          "target" : {
            "go-type" : 78,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "defaultValue",
              "variable" : 22
            }
          },
          "type" : "type-assert"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 43, 129 ],
      "line-end" : 531,
      "code" : "def, ok = defaultValue.(unsafe.Pointer)",
      "entry" : false,
      "use-vars" : [ 22 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 22, 129 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 532,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "arguments" : [ {
            "go-type" : 23,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "Expected default value of type %T. Got %v of %T instead"
            }
          }, {
            "go-type" : 55,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "def",
              "variable" : 129
            }
          }, {
            "go-type" : 78,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "defaultValue",
              "variable" : 22
            }
          }, {
            "go-type" : 78,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "defaultValue",
              "variable" : 22
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 85,
            "kind" : "expression",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 4,
              "value" : "errors"
            },
            "type" : "identifier",
            "value" : {
              "function" : 1,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "Errorf"
            }
          },
          "go-type" : 80,
          "kind" : "expression",
          "type" : "call"
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 532,
      "code" : "return errors.Errorf(defaultValueErrMsg, def, defaultValue, defaultValue)",
      "entry" : false,
      "use-vars" : [ 129, 22 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 282 ],
      "in-vars" : [ 19, 23, 20, 21, 129 ],
      "exit" : false,
      "out-vars" : [ 23, 20, 21, 129, 130 ],
      "decl-vars" : [ 130 ],
      "line-start" : 534,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "dt"
          }
        } ],
        "right" : [ {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "function" : 53,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "UnsafePointers"
            },
            "go-type" : 331,
            "kind" : "expression",
            "target" : {
              "go-type" : 75,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "data",
                "variable" : 19
              }
            },
            "type" : "selector"
          },
          "go-type" : 330,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 534,
      "code" : "dt := data.UnsafePointers()",
      "entry" : false,
      "use-vars" : [ 19 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 283 ],
      "in-vars" : [ 21, 129, 130, 23, 20 ],
      "exit" : false,
      "out-vars" : [ 23, 21, 129, 131, 130 ],
      "decl-vars" : [ 131 ],
      "line-start" : 535,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "rt"
          }
        } ],
        "right" : [ {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "function" : 53,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "UnsafePointers"
            },
            "go-type" : 331,
            "kind" : "expression",
            "target" : {
              "go-type" : 75,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "retVal",
                "variable" : 20
              }
            },
            "type" : "selector"
          },
          "go-type" : 330,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 535,
      "code" : "rt := retVal.UnsafePointers()",
      "entry" : false,
      "use-vars" : [ 20 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 284 ],
      "in-vars" : [ 23, 21, 129, 131, 130 ],
      "exit" : false,
      "out-vars" : [ 23, 21, 129, 132, 133, 131, 130 ],
      "decl-vars" : [ 132, 133, 151 ],
      "line-start" : 536,
      "ast" : {
        "kind" : "statement",
        "type" : "type-switch"
      },
      "assign-vars" : [ ],
      "line-end" : 543,
      "code" : "switch f := fn.(type) {\ncase func([]unsafe.Pointer) unsafe.Pointer:\n\treduceLastUnsafePointer(dt, rt, dimSize, def, f)\ncase func(unsafe.Pointer, unsafe.Pointer) unsafe.Pointer:\n\tgenericReduceLastUnsafePointer(dt, rt, dimSize, def, f)\ndefault:\n\treturn errors.Errorf(reductionErrMsg, fn)\n}",
      "entry" : false,
      "use-vars" : [ 23 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 285, 287, 289 ],
      "in-vars" : [ 132, 133, 131, 130, 23, 21, 129 ],
      "exit" : false,
      "out-vars" : [ 133, 131, 130, 23, 21, 129, 132 ],
      "decl-vars" : [ ],
      "line-start" : 536,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "f"
          }
        } ],
        "right" : [ {
          "asserted" : null,
          "go-type" : -1,
          "kind" : "expression",
          "target" : {
            "go-type" : 78,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "fn",
              "variable" : 23
            }
          },
          "type" : "type-assert"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 536,
      "code" : "f := fn.(type)",
      "entry" : false,
      "use-vars" : [ 23 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 286 ],
      "in-vars" : [ 21, 129, 132, 131, 130 ],
      "exit" : false,
      "out-vars" : [ 130, 21, 129, 132, 131 ],
      "decl-vars" : [ ],
      "line-start" : 537,
      "ast" : {
        "expressions" : [ {
          "go-type" : 338,
          "kind" : "type",
          "params" : [ {
            "declared-type" : {
              "element" : {
                "go-type" : 55,
                "kind" : "type",
                "qualifier" : {
                  "ident-kind" : "PkgName",
                  "kind" : "ident",
                  "package" : 2,
                  "value" : "unsafe"
                },
                "type" : "identifier",
                "value" : {
                  "go-type" : 55,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "Pointer"
                }
              },
              "go-type" : 330,
              "kind" : "type",
              "type" : "slice"
            },
            "kind" : "field",
            "names" : [ ],
            "tag" : null
          } ],
          "results" : [ {
            "declared-type" : {
              "go-type" : 55,
              "kind" : "type",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 2,
                "value" : "unsafe"
              },
              "type" : "identifier",
              "value" : {
                "go-type" : 55,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "Pointer"
              }
            },
            "kind" : "field",
            "names" : [ ],
            "tag" : null
          } ],
          "type" : "function",
          "variadic" : null
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 538,
      "code" : "case func([]unsafe.Pointer) unsafe.Pointer:\n\treduceLastUnsafePointer(dt, rt, dimSize, def, f)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 291 ],
      "in-vars" : [ 21, 129, 132, 131, 130 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 538,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 330,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "dt",
              "variable" : 130
            }
          }, {
            "go-type" : 330,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "rt",
              "variable" : 131
            }
          }, {
            "go-type" : 7,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "dimSize",
              "variable" : 21
            }
          }, {
            "go-type" : 55,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "def",
              "variable" : 129
            }
          }, {
            "go-type" : 338,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "f",
              "variable" : 132
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 333,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 54,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "reduceLastUnsafePointer"
            }
          },
          "go-type" : 5,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 538,
      "code" : "reduceLastUnsafePointer(dt, rt, dimSize, def, f)",
      "entry" : false,
      "use-vars" : [ 129, 132, 130, 131, 21 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 288 ],
      "in-vars" : [ 130, 21, 129, 133, 131 ],
      "exit" : false,
      "out-vars" : [ 131, 130, 21, 129, 133 ],
      "decl-vars" : [ ],
      "line-start" : 539,
      "ast" : {
        "expressions" : [ {
          "go-type" : 341,
          "kind" : "type",
          "params" : [ {
            "declared-type" : {
              "go-type" : 55,
              "kind" : "type",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 2,
                "value" : "unsafe"
              },
              "type" : "identifier",
              "value" : {
                "go-type" : 55,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "Pointer"
              }
            },
            "kind" : "field",
            "names" : [ ],
            "tag" : null
          }, {
            "declared-type" : {
              "go-type" : 55,
              "kind" : "type",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 2,
                "value" : "unsafe"
              },
              "type" : "identifier",
              "value" : {
                "go-type" : 55,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "Pointer"
              }
            },
            "kind" : "field",
            "names" : [ ],
            "tag" : null
          } ],
          "results" : [ {
            "declared-type" : {
              "go-type" : 55,
              "kind" : "type",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 2,
                "value" : "unsafe"
              },
              "type" : "identifier",
              "value" : {
                "go-type" : 55,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "Pointer"
              }
            },
            "kind" : "field",
            "names" : [ ],
            "tag" : null
          } ],
          "type" : "function",
          "variadic" : null
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 540,
      "code" : "case func(unsafe.Pointer, unsafe.Pointer) unsafe.Pointer:\n\tgenericReduceLastUnsafePointer(dt, rt, dimSize, def, f)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 291 ],
      "in-vars" : [ 130, 21, 129, 133, 131 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 540,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 330,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "dt",
              "variable" : 130
            }
          }, {
            "go-type" : 330,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "rt",
              "variable" : 131
            }
          }, {
            "go-type" : 7,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "dimSize",
              "variable" : 21
            }
          }, {
            "go-type" : 55,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "def",
              "variable" : 129
            }
          }, {
            "go-type" : 341,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "f",
              "variable" : 133
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 339,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "function" : 55,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "genericReduceLastUnsafePointer"
            }
          },
          "go-type" : 5,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 540,
      "code" : "genericReduceLastUnsafePointer(dt, rt, dimSize, def, f)",
      "entry" : false,
      "use-vars" : [ 133, 130, 131, 21, 129 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 290 ],
      "in-vars" : [ 23 ],
      "exit" : false,
      "out-vars" : [ 23 ],
      "decl-vars" : [ ],
      "line-start" : 541,
      "ast" : {
        "expressions" : [ ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 542,
      "code" : "default:\n\treturn errors.Errorf(reductionErrMsg, fn)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 23 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 542,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "arguments" : [ {
            "go-type" : 23,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "Cannot reduce with function of type %T"
            }
          }, {
            "go-type" : 78,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "fn",
              "variable" : 23
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 85,
            "kind" : "expression",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 4,
              "value" : "errors"
            },
            "type" : "identifier",
            "value" : {
              "function" : 1,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "Errorf"
            }
          },
          "go-type" : 80,
          "kind" : "expression",
          "type" : "call"
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 542,
      "code" : "return errors.Errorf(reductionErrMsg, fn)",
      "entry" : false,
      "use-vars" : [ 23 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 544,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "go-type" : 100,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Nil",
            "kind" : "ident",
            "value" : "nil"
          }
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 544,
      "code" : "return nil",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 293 ],
      "in-vars" : [ 18 ],
      "exit" : false,
      "out-vars" : [ 18 ],
      "decl-vars" : [ ],
      "line-start" : 545,
      "ast" : {
        "expressions" : [ ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 546,
      "code" : "default:\n\treturn errors.Errorf(\"Unsupported type %v for ReduceLast\", t)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 18 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 546,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "arguments" : [ {
            "go-type" : 23,
            "kind" : "constant",
            "value" : {
              "type" : "STRING",
              "value" : "Unsupported type %v for ReduceLast"
            }
          }, {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "t",
              "variable" : 18
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 85,
            "kind" : "expression",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 4,
              "value" : "errors"
            },
            "type" : "identifier",
            "value" : {
              "function" : 1,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "Errorf"
            }
          },
          "go-type" : 80,
          "kind" : "expression",
          "type" : "call"
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 546,
      "code" : "return errors.Errorf(\"Unsupported type %v for ReduceLast\", t)",
      "entry" : false,
      "use-vars" : [ 18 ]
    } ],
    "code" : "func (e E) ReduceLast(t reflect.Type, data *storage.Header, retVal *storage.Header, dimSize int, defaultValue interface{}, fn interface{}) (err error) {\n\tvar ok bool\n\tswitch t {\n\tcase Bool:\n\t\tvar def bool\n\n\t\tif def, ok = defaultValue.(bool); !ok {\n\t\t\treturn errors.Errorf(defaultValueErrMsg, def, defaultValue, defaultValue)\n\t\t}\n\t\tdt := data.Bools()\n\t\trt := retVal.Bools()\n\t\tswitch f := fn.(type) {\n\t\tcase func([]bool) bool:\n\t\t\treduceLastB(dt, rt, dimSize, def, f)\n\t\tcase func(bool, bool) bool:\n\t\t\tgenericReduceLastB(dt, rt, dimSize, def, f)\n\t\tdefault:\n\t\t\treturn errors.Errorf(reductionErrMsg, fn)\n\t\t}\n\t\treturn nil\n\tcase Int:\n\t\tvar def int\n\n\t\tif def, ok = defaultValue.(int); !ok {\n\t\t\treturn errors.Errorf(defaultValueErrMsg, def, defaultValue, defaultValue)\n\t\t}\n\t\tdt := data.Ints()\n\t\trt := retVal.Ints()\n\t\tswitch f := fn.(type) {\n\t\tcase func([]int) int:\n\t\t\treduceLastI(dt, rt, dimSize, def, f)\n\t\tcase func(int, int) int:\n\t\t\tgenericReduceLastI(dt, rt, dimSize, def, f)\n\t\tdefault:\n\t\t\treturn errors.Errorf(reductionErrMsg, fn)\n\t\t}\n\t\treturn nil\n\tcase Int8:\n\t\tvar def int8\n\n\t\tif def, ok = defaultValue.(int8); !ok {\n\t\t\treturn errors.Errorf(defaultValueErrMsg, def, defaultValue, defaultValue)\n\t\t}\n\t\tdt := data.Int8s()\n\t\trt := retVal.Int8s()\n\t\tswitch f := fn.(type) {\n\t\tcase func([]int8) int8:\n\t\t\treduceLastI8(dt, rt, dimSize, def, f)\n\t\tcase func(int8, int8) int8:\n\t\t\tgenericReduceLastI8(dt, rt, dimSize, def, f)\n\t\tdefault:\n\t\t\treturn errors.Errorf(reductionErrMsg, fn)\n\t\t}\n\t\treturn nil\n\tcase Int16:\n\t\tvar def int16\n\n\t\tif def, ok = defaultValue.(int16); !ok {\n\t\t\treturn errors.Errorf(defaultValueErrMsg, def, defaultValue, defaultValue)\n\t\t}\n\t\tdt := data.Int16s()\n\t\trt := retVal.Int16s()\n\t\tswitch f := fn.(type) {\n\t\tcase func([]int16) int16:\n\t\t\treduceLastI16(dt, rt, dimSize, def, f)\n\t\tcase func(int16, int16) int16:\n\t\t\tgenericReduceLastI16(dt, rt, dimSize, def, f)\n\t\tdefault:\n\t\t\treturn errors.Errorf(reductionErrMsg, fn)\n\t\t}\n\t\treturn nil\n\tcase Int32:\n\t\tvar def int32\n\n\t\tif def, ok = defaultValue.(int32); !ok {\n\t\t\treturn errors.Errorf(defaultValueErrMsg, def, defaultValue, defaultValue)\n\t\t}\n\t\tdt := data.Int32s()\n\t\trt := retVal.Int32s()\n\t\tswitch f := fn.(type) {\n\t\tcase func([]int32) int32:\n\t\t\treduceLastI32(dt, rt, dimSize, def, f)\n\t\tcase func(int32, int32) int32:\n\t\t\tgenericReduceLastI32(dt, rt, dimSize, def, f)\n\t\tdefault:\n\t\t\treturn errors.Errorf(reductionErrMsg, fn)\n\t\t}\n\t\treturn nil\n\tcase Int64:\n\t\tvar def int64\n\n\t\tif def, ok = defaultValue.(int64); !ok {\n\t\t\treturn errors.Errorf(defaultValueErrMsg, def, defaultValue, defaultValue)\n\t\t}\n\t\tdt := data.Int64s()\n\t\trt := retVal.Int64s()\n\t\tswitch f := fn.(type) {\n\t\tcase func([]int64) int64:\n\t\t\treduceLastI64(dt, rt, dimSize, def, f)\n\t\tcase func(int64, int64) int64:\n\t\t\tgenericReduceLastI64(dt, rt, dimSize, def, f)\n\t\tdefault:\n\t\t\treturn errors.Errorf(reductionErrMsg, fn)\n\t\t}\n\t\treturn nil\n\tcase Uint:\n\t\tvar def uint\n\n\t\tif def, ok = defaultValue.(uint); !ok {\n\t\t\treturn errors.Errorf(defaultValueErrMsg, def, defaultValue, defaultValue)\n\t\t}\n\t\tdt := data.Uints()\n\t\trt := retVal.Uints()\n\t\tswitch f := fn.(type) {\n\t\tcase func([]uint) uint:\n\t\t\treduceLastU(dt, rt, dimSize, def, f)\n\t\tcase func(uint, uint) uint:\n\t\t\tgenericReduceLastU(dt, rt, dimSize, def, f)\n\t\tdefault:\n\t\t\treturn errors.Errorf(reductionErrMsg, fn)\n\t\t}\n\t\treturn nil\n\tcase Uint8:\n\t\tvar def uint8\n\n\t\tif def, ok = defaultValue.(uint8); !ok {\n\t\t\treturn errors.Errorf(defaultValueErrMsg, def, defaultValue, defaultValue)\n\t\t}\n\t\tdt := data.Uint8s()\n\t\trt := retVal.Uint8s()\n\t\tswitch f := fn.(type) {\n\t\tcase func([]uint8) uint8:\n\t\t\treduceLastU8(dt, rt, dimSize, def, f)\n\t\tcase func(uint8, uint8) uint8:\n\t\t\tgenericReduceLastU8(dt, rt, dimSize, def, f)\n\t\tdefault:\n\t\t\treturn errors.Errorf(reductionErrMsg, fn)\n\t\t}\n\t\treturn nil\n\tcase Uint16:\n\t\tvar def uint16\n\n\t\tif def, ok = defaultValue.(uint16); !ok {\n\t\t\treturn errors.Errorf(defaultValueErrMsg, def, defaultValue, defaultValue)\n\t\t}\n\t\tdt := data.Uint16s()\n\t\trt := retVal.Uint16s()\n\t\tswitch f := fn.(type) {\n\t\tcase func([]uint16) uint16:\n\t\t\treduceLastU16(dt, rt, dimSize, def, f)\n\t\tcase func(uint16, uint16) uint16:\n\t\t\tgenericReduceLastU16(dt, rt, dimSize, def, f)\n\t\tdefault:\n\t\t\treturn errors.Errorf(reductionErrMsg, fn)\n\t\t}\n\t\treturn nil\n\tcase Uint32:\n\t\tvar def uint32\n\n\t\tif def, ok = defaultValue.(uint32); !ok {\n\t\t\treturn errors.Errorf(defaultValueErrMsg, def, defaultValue, defaultValue)\n\t\t}\n\t\tdt := data.Uint32s()\n\t\trt := retVal.Uint32s()\n\t\tswitch f := fn.(type) {\n\t\tcase func([]uint32) uint32:\n\t\t\treduceLastU32(dt, rt, dimSize, def, f)\n\t\tcase func(uint32, uint32) uint32:\n\t\t\tgenericReduceLastU32(dt, rt, dimSize, def, f)\n\t\tdefault:\n\t\t\treturn errors.Errorf(reductionErrMsg, fn)\n\t\t}\n\t\treturn nil\n\tcase Uint64:\n\t\tvar def uint64\n\n\t\tif def, ok = defaultValue.(uint64); !ok {\n\t\t\treturn errors.Errorf(defaultValueErrMsg, def, defaultValue, defaultValue)\n\t\t}\n\t\tdt := data.Uint64s()\n\t\trt := retVal.Uint64s()\n\t\tswitch f := fn.(type) {\n\t\tcase func([]uint64) uint64:\n\t\t\treduceLastU64(dt, rt, dimSize, def, f)\n\t\tcase func(uint64, uint64) uint64:\n\t\t\tgenericReduceLastU64(dt, rt, dimSize, def, f)\n\t\tdefault:\n\t\t\treturn errors.Errorf(reductionErrMsg, fn)\n\t\t}\n\t\treturn nil\n\tcase Uintptr:\n\t\tvar def uintptr\n\n\t\tif def, ok = defaultValue.(uintptr); !ok {\n\t\t\treturn errors.Errorf(defaultValueErrMsg, def, defaultValue, defaultValue)\n\t\t}\n\t\tdt := data.Uintptrs()\n\t\trt := retVal.Uintptrs()\n\t\tswitch f := fn.(type) {\n\t\tcase func([]uintptr) uintptr:\n\t\t\treduceLastUintptr(dt, rt, dimSize, def, f)\n\t\tcase func(uintptr, uintptr) uintptr:\n\t\t\tgenericReduceLastUintptr(dt, rt, dimSize, def, f)\n\t\tdefault:\n\t\t\treturn errors.Errorf(reductionErrMsg, fn)\n\t\t}\n\t\treturn nil\n\tcase Float32:\n\t\tvar def float32\n\n\t\tif def, ok = defaultValue.(float32); !ok {\n\t\t\treturn errors.Errorf(defaultValueErrMsg, def, defaultValue, defaultValue)\n\t\t}\n\t\tdt := data.Float32s()\n\t\trt := retVal.Float32s()\n\t\tswitch f := fn.(type) {\n\t\tcase func([]float32) float32:\n\t\t\treduceLastF32(dt, rt, dimSize, def, f)\n\t\tcase func(float32, float32) float32:\n\t\t\tgenericReduceLastF32(dt, rt, dimSize, def, f)\n\t\tdefault:\n\t\t\treturn errors.Errorf(reductionErrMsg, fn)\n\t\t}\n\t\treturn nil\n\tcase Float64:\n\t\tvar def float64\n\n\t\tif def, ok = defaultValue.(float64); !ok {\n\t\t\treturn errors.Errorf(defaultValueErrMsg, def, defaultValue, defaultValue)\n\t\t}\n\t\tdt := data.Float64s()\n\t\trt := retVal.Float64s()\n\t\tswitch f := fn.(type) {\n\t\tcase func([]float64) float64:\n\t\t\treduceLastF64(dt, rt, dimSize, def, f)\n\t\tcase func(float64, float64) float64:\n\t\t\tgenericReduceLastF64(dt, rt, dimSize, def, f)\n\t\tdefault:\n\t\t\treturn errors.Errorf(reductionErrMsg, fn)\n\t\t}\n\t\treturn nil\n\tcase Complex64:\n\t\tvar def complex64\n\n\t\tif def, ok = defaultValue.(complex64); !ok {\n\t\t\treturn errors.Errorf(defaultValueErrMsg, def, defaultValue, defaultValue)\n\t\t}\n\t\tdt := data.Complex64s()\n\t\trt := retVal.Complex64s()\n\t\tswitch f := fn.(type) {\n\t\tcase func([]complex64) complex64:\n\t\t\treduceLastC64(dt, rt, dimSize, def, f)\n\t\tcase func(complex64, complex64) complex64:\n\t\t\tgenericReduceLastC64(dt, rt, dimSize, def, f)\n\t\tdefault:\n\t\t\treturn errors.Errorf(reductionErrMsg, fn)\n\t\t}\n\t\treturn nil\n\tcase Complex128:\n\t\tvar def complex128\n\n\t\tif def, ok = defaultValue.(complex128); !ok {\n\t\t\treturn errors.Errorf(defaultValueErrMsg, def, defaultValue, defaultValue)\n\t\t}\n\t\tdt := data.Complex128s()\n\t\trt := retVal.Complex128s()\n\t\tswitch f := fn.(type) {\n\t\tcase func([]complex128) complex128:\n\t\t\treduceLastC128(dt, rt, dimSize, def, f)\n\t\tcase func(complex128, complex128) complex128:\n\t\t\tgenericReduceLastC128(dt, rt, dimSize, def, f)\n\t\tdefault:\n\t\t\treturn errors.Errorf(reductionErrMsg, fn)\n\t\t}\n\t\treturn nil\n\tcase String:\n\t\tvar def string\n\n\t\tif def, ok = defaultValue.(string); !ok {\n\t\t\treturn errors.Errorf(defaultValueErrMsg, def, defaultValue, defaultValue)\n\t\t}\n\t\tdt := data.Strings()\n\t\trt := retVal.Strings()\n\t\tswitch f := fn.(type) {\n\t\tcase func([]string) string:\n\t\t\treduceLastStr(dt, rt, dimSize, def, f)\n\t\tcase func(string, string) string:\n\t\t\tgenericReduceLastStr(dt, rt, dimSize, def, f)\n\t\tdefault:\n\t\t\treturn errors.Errorf(reductionErrMsg, fn)\n\t\t}\n\t\treturn nil\n\tcase UnsafePointer:\n\t\tvar def unsafe.Pointer\n\n\t\tif def, ok = defaultValue.(unsafe.Pointer); !ok {\n\t\t\treturn errors.Errorf(defaultValueErrMsg, def, defaultValue, defaultValue)\n\t\t}\n\t\tdt := data.UnsafePointers()\n\t\trt := retVal.UnsafePointers()\n\t\tswitch f := fn.(type) {\n\t\tcase func([]unsafe.Pointer) unsafe.Pointer:\n\t\t\treduceLastUnsafePointer(dt, rt, dimSize, def, f)\n\t\tcase func(unsafe.Pointer, unsafe.Pointer) unsafe.Pointer:\n\t\t\tgenericReduceLastUnsafePointer(dt, rt, dimSize, def, f)\n\t\tdefault:\n\t\t\treturn errors.Errorf(reductionErrMsg, fn)\n\t\t}\n\t\treturn nil\n\tdefault:\n\t\treturn errors.Errorf(\"Unsupported type %v for ReduceLast\", t)\n\t}\n}",
    "defines" : [ 0 ],
    "functions" : [ {
      "name" : "ReduceLast",
      "package" : 0,
      "type" : 0,
      "exported" : true
    }, {
      "name" : "Errorf",
      "package" : 4,
      "type" : 85,
      "exported" : true
    }, {
      "name" : "Bools",
      "package" : 3,
      "type" : 90,
      "exported" : true
    }, {
      "name" : "reduceLastB",
      "package" : 0,
      "type" : 92,
      "exported" : false
    }, {
      "name" : "genericReduceLastB",
      "package" : 0,
      "type" : 97,
      "exported" : false
    }, {
      "name" : "Ints",
      "package" : 3,
      "type" : 102,
      "exported" : true
    }, {
      "name" : "reduceLastI",
      "package" : 0,
      "type" : 104,
      "exported" : false
    }, {
      "name" : "genericReduceLastI",
      "package" : 0,
      "type" : 109,
      "exported" : false
    }, {
      "name" : "Int8s",
      "package" : 3,
      "type" : 116,
      "exported" : true
    }, {
      "name" : "reduceLastI8",
      "package" : 0,
      "type" : 118,
      "exported" : false
    }, {
      "name" : "genericReduceLastI8",
      "package" : 0,
      "type" : 124,
      "exported" : false
    }, {
      "name" : "Int16s",
      "package" : 3,
      "type" : 131,
      "exported" : true
    }, {
      "name" : "reduceLastI16",
      "package" : 0,
      "type" : 133,
      "exported" : false
    }, {
      "name" : "genericReduceLastI16",
      "package" : 0,
      "type" : 139,
      "exported" : false
    }, {
      "name" : "Int32s",
      "package" : 3,
      "type" : 145,
      "exported" : true
    }, {
      "name" : "reduceLastI32",
      "package" : 0,
      "type" : 147,
      "exported" : false
    }, {
      "name" : "genericReduceLastI32",
      "package" : 0,
      "type" : 153,
      "exported" : false
    }, {
      "name" : "Int64s",
      "package" : 3,
      "type" : 160,
      "exported" : true
    }, {
      "name" : "reduceLastI64",
      "package" : 0,
      "type" : 162,
      "exported" : false
    }, {
      "name" : "genericReduceLastI64",
      "package" : 0,
      "type" : 168,
      "exported" : false
    }, {
      "name" : "Uints",
      "package" : 3,
      "type" : 174,
      "exported" : true
    }, {
      "name" : "reduceLastU",
      "package" : 0,
      "type" : 176,
      "exported" : false
    }, {
      "name" : "genericReduceLastU",
      "package" : 0,
      "type" : 182,
      "exported" : false
    }, {
      "name" : "Uint8s",
      "package" : 3,
      "type" : 188,
      "exported" : true
    }, {
      "name" : "reduceLastU8",
      "package" : 0,
      "type" : 190,
      "exported" : false
    }, {
      "name" : "genericReduceLastU8",
      "package" : 0,
      "type" : 196,
      "exported" : false
    }, {
      "name" : "Uint16s",
      "package" : 3,
      "type" : 202,
      "exported" : true
    }, {
      "name" : "reduceLastU16",
      "package" : 0,
      "type" : 204,
      "exported" : false
    }, {
      "name" : "genericReduceLastU16",
      "package" : 0,
      "type" : 210,
      "exported" : false
    }, {
      "name" : "Uint32s",
      "package" : 3,
      "type" : 216,
      "exported" : true
    }, {
      "name" : "reduceLastU32",
      "package" : 0,
      "type" : 218,
      "exported" : false
    }, {
      "name" : "genericReduceLastU32",
      "package" : 0,
      "type" : 224,
      "exported" : false
    }, {
      "name" : "Uint64s",
      "package" : 3,
      "type" : 231,
      "exported" : true
    }, {
      "name" : "reduceLastU64",
      "package" : 0,
      "type" : 233,
      "exported" : false
    }, {
      "name" : "genericReduceLastU64",
      "package" : 0,
      "type" : 239,
      "exported" : false
    }, {
      "name" : "Uintptrs",
      "package" : 3,
      "type" : 245,
      "exported" : true
    }, {
      "name" : "reduceLastUintptr",
      "package" : 0,
      "type" : 247,
      "exported" : false
    }, {
      "name" : "genericReduceLastUintptr",
      "package" : 0,
      "type" : 252,
      "exported" : false
    }, {
      "name" : "Float32s",
      "package" : 3,
      "type" : 259,
      "exported" : true
    }, {
      "name" : "reduceLastF32",
      "package" : 0,
      "type" : 261,
      "exported" : false
    }, {
      "name" : "genericReduceLastF32",
      "package" : 0,
      "type" : 267,
      "exported" : false
    }, {
      "name" : "Float64s",
      "package" : 3,
      "type" : 274,
      "exported" : true
    }, {
      "name" : "reduceLastF64",
      "package" : 0,
      "type" : 276,
      "exported" : false
    }, {
      "name" : "genericReduceLastF64",
      "package" : 0,
      "type" : 282,
      "exported" : false
    }, {
      "name" : "Complex64s",
      "package" : 3,
      "type" : 289,
      "exported" : true
    }, {
      "name" : "reduceLastC64",
      "package" : 0,
      "type" : 291,
      "exported" : false
    }, {
      "name" : "genericReduceLastC64",
      "package" : 0,
      "type" : 297,
      "exported" : false
    }, {
      "name" : "Complex128s",
      "package" : 3,
      "type" : 304,
      "exported" : true
    }, {
      "name" : "reduceLastC128",
      "package" : 0,
      "type" : 306,
      "exported" : false
    }, {
      "name" : "genericReduceLastC128",
      "package" : 0,
      "type" : 312,
      "exported" : false
    }, {
      "name" : "Strings",
      "package" : 3,
      "type" : 318,
      "exported" : true
    }, {
      "name" : "reduceLastStr",
      "package" : 0,
      "type" : 320,
      "exported" : false
    }, {
      "name" : "genericReduceLastStr",
      "package" : 0,
      "type" : 325,
      "exported" : false
    }, {
      "name" : "UnsafePointers",
      "package" : 3,
      "type" : 331,
      "exported" : true
    }, {
      "name" : "reduceLastUnsafePointer",
      "package" : 0,
      "type" : 333,
      "exported" : false
    }, {
      "name" : "genericReduceLastUnsafePointer",
      "package" : 0,
      "type" : 339,
      "exported" : false
    } ],
    "line-end" : 548,
    "line-start" : 236,
    "names" : [ "ReduceLast" ],
    "package" : 0,
    "packages" : [ {
      "name" : "execution",
      "path" : "gorgonia.org/tensor/internal/execution"
    }, {
      "name" : "reflect",
      "path" : "reflect"
    }, {
      "name" : "unsafe",
      "path" : "unsafe"
    }, {
      "name" : "storage",
      "path" : "gorgonia.org/tensor/internal/storage"
    }, {
      "name" : "errors",
      "path" : "github.com/pkg/errors"
    } ],
    "params" : [ 18, 19, 20, 21, 22, 23 ],
    "receivers" : [ 17 ],
    "results" : [ 24 ],
    "type" : "function",
    "types" : [ {
      "name" : "func(t reflect.Type, data *gorgonia.org/tensor/internal/storage.Header, retVal *gorgonia.org/tensor/internal/storage.Header, dimSize int, defaultValue interface{}, fn interface{}) (err error)",
      "params" : 1,
      "recv" : 17,
      "results" : 79,
      "type" : "Signature",
      "underlying" : 0,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "t",
        "type" : 2
      }, {
        "name" : "data",
        "type" : 75
      }, {
        "name" : "retVal",
        "type" : 75
      }, {
        "name" : "dimSize",
        "type" : 7
      }, {
        "name" : "defaultValue",
        "type" : 78
      }, {
        "name" : "fn",
        "type" : 78
      } ],
      "name" : "(t reflect.Type, data *gorgonia.org/tensor/internal/storage.Header, retVal *gorgonia.org/tensor/internal/storage.Header, dimSize int, defaultValue interface{}, fn interface{})",
      "type" : "Tuple",
      "underlying" : 1
    }, {
      "local-name" : "Type",
      "name" : "reflect.Type",
      "package" : 1,
      "type" : "Named",
      "underlying" : 3
    }, {
      "methods" : [ {
        "name" : "Align",
        "type" : 4
      }, {
        "name" : "AssignableTo",
        "type" : 8
      }, {
        "name" : "Bits",
        "type" : 4
      }, {
        "name" : "ChanDir",
        "type" : 12
      }, {
        "name" : "Comparable",
        "type" : 15
      }, {
        "name" : "ConvertibleTo",
        "type" : 8
      }, {
        "name" : "Elem",
        "type" : 16
      }, {
        "name" : "Field",
        "type" : 18
      }, {
        "name" : "FieldAlign",
        "type" : 4
      }, {
        "name" : "FieldByIndex",
        "type" : 27
      }, {
        "name" : "FieldByName",
        "type" : 29
      }, {
        "name" : "FieldByNameFunc",
        "type" : 32
      }, {
        "name" : "Implements",
        "type" : 8
      }, {
        "name" : "In",
        "type" : 36
      }, {
        "name" : "IsVariadic",
        "type" : 15
      }, {
        "name" : "Key",
        "type" : 16
      }, {
        "name" : "Kind",
        "type" : 37
      }, {
        "name" : "Len",
        "type" : 4
      }, {
        "name" : "Method",
        "type" : 41
      }, {
        "name" : "MethodByName",
        "type" : 62
      }, {
        "name" : "Name",
        "type" : 64
      }, {
        "name" : "NumField",
        "type" : 4
      }, {
        "name" : "NumIn",
        "type" : 4
      }, {
        "name" : "NumMethod",
        "type" : 4
      }, {
        "name" : "NumOut",
        "type" : 4
      }, {
        "name" : "Out",
        "type" : 36
      }, {
        "name" : "PkgPath",
        "type" : 64
      }, {
        "name" : "Size",
        "type" : 65
      }, {
        "name" : "String",
        "type" : 64
      }, {
        "name" : "common",
        "type" : 67
      }, {
        "name" : "uncommon",
        "type" : 69
      } ],
      "name" : "interface{Align() int; AssignableTo(u reflect.Type) bool; Bits() int; ChanDir() reflect.ChanDir; Comparable() bool; ConvertibleTo(u reflect.Type) bool; Elem() reflect.Type; Field(i int) reflect.StructField; FieldAlign() int; FieldByIndex(index []int) reflect.StructField; FieldByName(name string) (reflect.StructField, bool); FieldByNameFunc(match func(string) bool) (reflect.StructField, bool); Implements(u reflect.Type) bool; In(i int) reflect.Type; IsVariadic() bool; Key() reflect.Type; Kind() reflect.Kind; Len() int; Method(int) reflect.Method; MethodByName(string) (reflect.Method, bool); Name() string; NumField() int; NumIn() int; NumMethod() int; NumOut() int; Out(i int) reflect.Type; PkgPath() string; Size() uintptr; String() string; common() *reflect.rtype; uncommon() *reflect.uncommonType}",
      "type" : "Interface",
      "underlying" : 3
    }, {
      "name" : "func() int",
      "params" : 5,
      "recv" : 0,
      "results" : 6,
      "type" : "Signature",
      "underlying" : 4,
      "variadic" : false
    }, {
      "fields" : [ ],
      "name" : "()",
      "type" : "Tuple",
      "underlying" : 5
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 7
      } ],
      "name" : "(int)",
      "type" : "Tuple",
      "underlying" : 6
    }, {
      "name" : "int",
      "type" : "Basic",
      "underlying" : 7
    }, {
      "name" : "func(u reflect.Type) bool",
      "params" : 9,
      "recv" : 1,
      "results" : 10,
      "type" : "Signature",
      "underlying" : 8,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "u",
        "type" : 2
      } ],
      "name" : "(u reflect.Type)",
      "type" : "Tuple",
      "underlying" : 9
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 11
      } ],
      "name" : "(bool)",
      "type" : "Tuple",
      "underlying" : 10
    }, {
      "name" : "bool",
      "type" : "Basic",
      "underlying" : 11
    }, {
      "name" : "func() reflect.ChanDir",
      "params" : 5,
      "recv" : 2,
      "results" : 13,
      "type" : "Signature",
      "underlying" : 12,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 14
      } ],
      "name" : "(reflect.ChanDir)",
      "type" : "Tuple",
      "underlying" : 13
    }, {
      "local-name" : "ChanDir",
      "name" : "reflect.ChanDir",
      "package" : 1,
      "type" : "Named",
      "underlying" : 7
    }, {
      "name" : "func() bool",
      "params" : 5,
      "recv" : 3,
      "results" : 10,
      "type" : "Signature",
      "underlying" : 15,
      "variadic" : false
    }, {
      "name" : "func() reflect.Type",
      "params" : 5,
      "recv" : 4,
      "results" : 17,
      "type" : "Signature",
      "underlying" : 16,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 2
      } ],
      "name" : "(reflect.Type)",
      "type" : "Tuple",
      "underlying" : 17
    }, {
      "name" : "func(i int) reflect.StructField",
      "params" : 19,
      "recv" : 5,
      "results" : 20,
      "type" : "Signature",
      "underlying" : 18,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "i",
        "type" : 7
      } ],
      "name" : "(i int)",
      "type" : "Tuple",
      "underlying" : 19
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 21
      } ],
      "name" : "(reflect.StructField)",
      "type" : "Tuple",
      "underlying" : 20
    }, {
      "local-name" : "StructField",
      "name" : "reflect.StructField",
      "package" : 1,
      "type" : "Named",
      "underlying" : 22
    }, {
      "fields" : [ {
        "name" : "Name",
        "type" : 23
      }, {
        "name" : "PkgPath",
        "type" : 23
      }, {
        "name" : "Type",
        "type" : 2
      }, {
        "name" : "Tag",
        "type" : 24
      }, {
        "name" : "Offset",
        "type" : 25
      }, {
        "name" : "Index",
        "type" : 26
      }, {
        "name" : "Anonymous",
        "type" : 11
      } ],
      "name" : "struct{Name string; PkgPath string; Type reflect.Type; Tag reflect.StructTag; Offset uintptr; Index []int; Anonymous bool}",
      "type" : "Struct",
      "underlying" : 22
    }, {
      "name" : "string",
      "type" : "Basic",
      "underlying" : 23
    }, {
      "local-name" : "StructTag",
      "name" : "reflect.StructTag",
      "package" : 1,
      "type" : "Named",
      "underlying" : 23
    }, {
      "name" : "uintptr",
      "type" : "Basic",
      "underlying" : 25
    }, {
      "elem" : 7,
      "name" : "[]int",
      "type" : "Slice",
      "underlying" : 26
    }, {
      "name" : "func(index []int) reflect.StructField",
      "params" : 28,
      "recv" : 6,
      "results" : 20,
      "type" : "Signature",
      "underlying" : 27,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "index",
        "type" : 26
      } ],
      "name" : "(index []int)",
      "type" : "Tuple",
      "underlying" : 28
    }, {
      "name" : "func(name string) (reflect.StructField, bool)",
      "params" : 30,
      "recv" : 7,
      "results" : 31,
      "type" : "Signature",
      "underlying" : 29,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "name",
        "type" : 23
      } ],
      "name" : "(name string)",
      "type" : "Tuple",
      "underlying" : 30
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 21
      }, {
        "name" : "",
        "type" : 11
      } ],
      "name" : "(reflect.StructField, bool)",
      "type" : "Tuple",
      "underlying" : 31
    }, {
      "name" : "func(match func(string) bool) (reflect.StructField, bool)",
      "params" : 33,
      "recv" : 8,
      "results" : 31,
      "type" : "Signature",
      "underlying" : 32,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "match",
        "type" : 34
      } ],
      "name" : "(match func(string) bool)",
      "type" : "Tuple",
      "underlying" : 33
    }, {
      "name" : "func(string) bool",
      "params" : 35,
      "recv" : -1,
      "results" : 10,
      "type" : "Signature",
      "underlying" : 34,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 23
      } ],
      "name" : "(string)",
      "type" : "Tuple",
      "underlying" : 35
    }, {
      "name" : "func(i int) reflect.Type",
      "params" : 19,
      "recv" : 9,
      "results" : 17,
      "type" : "Signature",
      "underlying" : 36,
      "variadic" : false
    }, {
      "name" : "func() reflect.Kind",
      "params" : 5,
      "recv" : 10,
      "results" : 38,
      "type" : "Signature",
      "underlying" : 37,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 39
      } ],
      "name" : "(reflect.Kind)",
      "type" : "Tuple",
      "underlying" : 38
    }, {
      "local-name" : "Kind",
      "name" : "reflect.Kind",
      "package" : 1,
      "type" : "Named",
      "underlying" : 40
    }, {
      "name" : "uint",
      "type" : "Basic",
      "underlying" : 40
    }, {
      "name" : "func(int) reflect.Method",
      "params" : 6,
      "recv" : 11,
      "results" : 42,
      "type" : "Signature",
      "underlying" : 41,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 43
      } ],
      "name" : "(reflect.Method)",
      "type" : "Tuple",
      "underlying" : 42
    }, {
      "local-name" : "Method",
      "name" : "reflect.Method",
      "package" : 1,
      "type" : "Named",
      "underlying" : 44
    }, {
      "fields" : [ {
        "name" : "Name",
        "type" : 23
      }, {
        "name" : "PkgPath",
        "type" : 23
      }, {
        "name" : "Type",
        "type" : 2
      }, {
        "name" : "Func",
        "type" : 45
      }, {
        "name" : "Index",
        "type" : 7
      } ],
      "name" : "struct{Name string; PkgPath string; Type reflect.Type; Func reflect.Value; Index int}",
      "type" : "Struct",
      "underlying" : 44
    }, {
      "local-name" : "Value",
      "name" : "reflect.Value",
      "package" : 1,
      "type" : "Named",
      "underlying" : 46
    }, {
      "fields" : [ {
        "name" : "typ",
        "type" : 47
      }, {
        "name" : "ptr",
        "type" : 55
      }, {
        "name" : "flag",
        "type" : 61
      } ],
      "name" : "struct{typ *reflect.rtype; ptr unsafe.Pointer; reflect.flag}",
      "type" : "Struct",
      "underlying" : 46
    }, {
      "elem" : 48,
      "name" : "*reflect.rtype",
      "type" : "Pointer",
      "underlying" : 47
    }, {
      "local-name" : "rtype",
      "name" : "reflect.rtype",
      "package" : 1,
      "type" : "Named",
      "underlying" : 49
    }, {
      "fields" : [ {
        "name" : "size",
        "type" : 25
      }, {
        "name" : "ptrdata",
        "type" : 25
      }, {
        "name" : "hash",
        "type" : 50
      }, {
        "name" : "tflag",
        "type" : 51
      }, {
        "name" : "align",
        "type" : 52
      }, {
        "name" : "fieldAlign",
        "type" : 52
      }, {
        "name" : "kind",
        "type" : 52
      }, {
        "name" : "equal",
        "type" : 53
      }, {
        "name" : "gcdata",
        "type" : 56
      }, {
        "name" : "str",
        "type" : 58
      }, {
        "name" : "ptrToThis",
        "type" : 60
      } ],
      "name" : "struct{size uintptr; ptrdata uintptr; hash uint32; tflag reflect.tflag; align uint8; fieldAlign uint8; kind uint8; equal func(unsafe.Pointer, unsafe.Pointer) bool; gcdata *byte; str reflect.nameOff; ptrToThis reflect.typeOff}",
      "type" : "Struct",
      "underlying" : 49
    }, {
      "name" : "uint32",
      "type" : "Basic",
      "underlying" : 50
    }, {
      "local-name" : "tflag",
      "name" : "reflect.tflag",
      "package" : 1,
      "type" : "Named",
      "underlying" : 52
    }, {
      "name" : "uint8",
      "type" : "Basic",
      "underlying" : 52
    }, {
      "name" : "func(unsafe.Pointer, unsafe.Pointer) bool",
      "params" : 54,
      "recv" : -1,
      "results" : 10,
      "type" : "Signature",
      "underlying" : 53,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 55
      }, {
        "name" : "",
        "type" : 55
      } ],
      "name" : "(unsafe.Pointer, unsafe.Pointer)",
      "type" : "Tuple",
      "underlying" : 54
    }, {
      "local-name" : "Pointer",
      "name" : "unsafe.Pointer",
      "package" : 2,
      "type" : "Basic",
      "underlying" : 55
    }, {
      "elem" : 57,
      "name" : "*byte",
      "type" : "Pointer",
      "underlying" : 56
    }, {
      "name" : "byte",
      "type" : "Basic",
      "underlying" : 57
    }, {
      "local-name" : "nameOff",
      "name" : "reflect.nameOff",
      "package" : 1,
      "type" : "Named",
      "underlying" : 59
    }, {
      "name" : "int32",
      "type" : "Basic",
      "underlying" : 59
    }, {
      "local-name" : "typeOff",
      "name" : "reflect.typeOff",
      "package" : 1,
      "type" : "Named",
      "underlying" : 59
    }, {
      "local-name" : "flag",
      "name" : "reflect.flag",
      "package" : 1,
      "type" : "Named",
      "underlying" : 25
    }, {
      "name" : "func(string) (reflect.Method, bool)",
      "params" : 35,
      "recv" : 12,
      "results" : 63,
      "type" : "Signature",
      "underlying" : 62,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 43
      }, {
        "name" : "",
        "type" : 11
      } ],
      "name" : "(reflect.Method, bool)",
      "type" : "Tuple",
      "underlying" : 63
    }, {
      "name" : "func() string",
      "params" : 5,
      "recv" : 13,
      "results" : 35,
      "type" : "Signature",
      "underlying" : 64,
      "variadic" : false
    }, {
      "name" : "func() uintptr",
      "params" : 5,
      "recv" : 14,
      "results" : 66,
      "type" : "Signature",
      "underlying" : 65,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 25
      } ],
      "name" : "(uintptr)",
      "type" : "Tuple",
      "underlying" : 66
    }, {
      "name" : "func() *reflect.rtype",
      "params" : 5,
      "recv" : 15,
      "results" : 68,
      "type" : "Signature",
      "underlying" : 67,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 47
      } ],
      "name" : "(*reflect.rtype)",
      "type" : "Tuple",
      "underlying" : 68
    }, {
      "name" : "func() *reflect.uncommonType",
      "params" : 5,
      "recv" : 16,
      "results" : 70,
      "type" : "Signature",
      "underlying" : 69,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 71
      } ],
      "name" : "(*reflect.uncommonType)",
      "type" : "Tuple",
      "underlying" : 70
    }, {
      "elem" : 72,
      "name" : "*reflect.uncommonType",
      "type" : "Pointer",
      "underlying" : 71
    }, {
      "local-name" : "uncommonType",
      "name" : "reflect.uncommonType",
      "package" : 1,
      "type" : "Named",
      "underlying" : 73
    }, {
      "fields" : [ {
        "name" : "pkgPath",
        "type" : 58
      }, {
        "name" : "mcount",
        "type" : 74
      }, {
        "name" : "xcount",
        "type" : 74
      }, {
        "name" : "moff",
        "type" : 50
      }, {
        "name" : "_",
        "type" : 50
      } ],
      "name" : "struct{pkgPath reflect.nameOff; mcount uint16; xcount uint16; moff uint32; _ uint32}",
      "type" : "Struct",
      "underlying" : 73
    }, {
      "name" : "uint16",
      "type" : "Basic",
      "underlying" : 74
    }, {
      "elem" : 76,
      "name" : "*gorgonia.org/tensor/internal/storage.Header",
      "type" : "Pointer",
      "underlying" : 75
    }, {
      "local-name" : "Header",
      "name" : "gorgonia.org/tensor/internal/storage.Header",
      "package" : 3,
      "type" : "Named",
      "underlying" : 77
    }, {
      "fields" : [ {
        "name" : "Ptr",
        "type" : 55
      }, {
        "name" : "L",
        "type" : 7
      }, {
        "name" : "C",
        "type" : 7
      } ],
      "name" : "struct{Ptr unsafe.Pointer; L int; C int}",
      "type" : "Struct",
      "underlying" : 77
    }, {
      "methods" : [ ],
      "name" : "interface{}",
      "type" : "Interface",
      "underlying" : 78
    }, {
      "fields" : [ {
        "name" : "err",
        "type" : 80
      } ],
      "name" : "(err error)",
      "type" : "Tuple",
      "underlying" : 79
    }, {
      "local-name" : "error",
      "name" : "error",
      "package" : -1,
      "type" : "Named",
      "underlying" : 81
    }, {
      "methods" : [ {
        "name" : "Error",
        "type" : 64
      } ],
      "name" : "interface{Error() string}",
      "type" : "Interface",
      "underlying" : 81
    }, {
      "local-name" : "E",
      "name" : "gorgonia.org/tensor/internal/execution.E",
      "package" : 0,
      "type" : "Named",
      "underlying" : 83
    }, {
      "fields" : [ ],
      "name" : "struct{}",
      "type" : "Struct",
      "underlying" : 83
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 11
      }, {
        "name" : "",
        "type" : 11
      } ],
      "name" : "(bool, bool)",
      "type" : "Tuple",
      "underlying" : 84
    }, {
      "name" : "func(format string, args ...interface{}) error",
      "params" : 86,
      "recv" : -1,
      "results" : 88,
      "type" : "Signature",
      "underlying" : 85,
      "variadic" : true
    }, {
      "fields" : [ {
        "name" : "format",
        "type" : 23
      }, {
        "name" : "args",
        "type" : 87
      } ],
      "name" : "(format string, args []interface{})",
      "type" : "Tuple",
      "underlying" : 86
    }, {
      "elem" : 78,
      "name" : "[]interface{}",
      "type" : "Slice",
      "underlying" : 87
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 80
      } ],
      "name" : "(error)",
      "type" : "Tuple",
      "underlying" : 88
    }, {
      "elem" : 11,
      "name" : "[]bool",
      "type" : "Slice",
      "underlying" : 89
    }, {
      "name" : "func() []bool",
      "params" : 5,
      "recv" : -1,
      "results" : 91,
      "type" : "Signature",
      "underlying" : 90,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 89
      } ],
      "name" : "([]bool)",
      "type" : "Tuple",
      "underlying" : 91
    }, {
      "name" : "func(a []bool, retVal []bool, dimSize int, defaultValue bool, fn func(a []bool) bool)",
      "params" : 93,
      "recv" : -1,
      "results" : 5,
      "type" : "Signature",
      "underlying" : 92,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "a",
        "type" : 89
      }, {
        "name" : "retVal",
        "type" : 89
      }, {
        "name" : "dimSize",
        "type" : 7
      }, {
        "name" : "defaultValue",
        "type" : 11
      }, {
        "name" : "fn",
        "type" : 94
      } ],
      "name" : "(a []bool, retVal []bool, dimSize int, defaultValue bool, fn func(a []bool) bool)",
      "type" : "Tuple",
      "underlying" : 93
    }, {
      "name" : "func(a []bool) bool",
      "params" : 95,
      "recv" : -1,
      "results" : 10,
      "type" : "Signature",
      "underlying" : 94,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "a",
        "type" : 89
      } ],
      "name" : "(a []bool)",
      "type" : "Tuple",
      "underlying" : 95
    }, {
      "name" : "func([]bool) bool",
      "params" : 91,
      "recv" : -1,
      "results" : 10,
      "type" : "Signature",
      "underlying" : 96,
      "variadic" : false
    }, {
      "name" : "func(a []bool, retVal []bool, dimSize int, defaultValue bool, fn func(bool, bool) bool)",
      "params" : 98,
      "recv" : -1,
      "results" : 5,
      "type" : "Signature",
      "underlying" : 97,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "a",
        "type" : 89
      }, {
        "name" : "retVal",
        "type" : 89
      }, {
        "name" : "dimSize",
        "type" : 7
      }, {
        "name" : "defaultValue",
        "type" : 11
      }, {
        "name" : "fn",
        "type" : 99
      } ],
      "name" : "(a []bool, retVal []bool, dimSize int, defaultValue bool, fn func(bool, bool) bool)",
      "type" : "Tuple",
      "underlying" : 98
    }, {
      "name" : "func(bool, bool) bool",
      "params" : 84,
      "recv" : -1,
      "results" : 10,
      "type" : "Signature",
      "underlying" : 99,
      "variadic" : false
    }, {
      "name" : "untyped nil",
      "type" : "Basic",
      "underlying" : 100
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 7
      }, {
        "name" : "",
        "type" : 11
      } ],
      "name" : "(int, bool)",
      "type" : "Tuple",
      "underlying" : 101
    }, {
      "name" : "func() []int",
      "params" : 5,
      "recv" : -1,
      "results" : 103,
      "type" : "Signature",
      "underlying" : 102,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 26
      } ],
      "name" : "([]int)",
      "type" : "Tuple",
      "underlying" : 103
    }, {
      "name" : "func(a []int, retVal []int, dimSize int, defaultValue int, fn func(a []int) int)",
      "params" : 105,
      "recv" : -1,
      "results" : 5,
      "type" : "Signature",
      "underlying" : 104,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "a",
        "type" : 26
      }, {
        "name" : "retVal",
        "type" : 26
      }, {
        "name" : "dimSize",
        "type" : 7
      }, {
        "name" : "defaultValue",
        "type" : 7
      }, {
        "name" : "fn",
        "type" : 106
      } ],
      "name" : "(a []int, retVal []int, dimSize int, defaultValue int, fn func(a []int) int)",
      "type" : "Tuple",
      "underlying" : 105
    }, {
      "name" : "func(a []int) int",
      "params" : 107,
      "recv" : -1,
      "results" : 6,
      "type" : "Signature",
      "underlying" : 106,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "a",
        "type" : 26
      } ],
      "name" : "(a []int)",
      "type" : "Tuple",
      "underlying" : 107
    }, {
      "name" : "func([]int) int",
      "params" : 103,
      "recv" : -1,
      "results" : 6,
      "type" : "Signature",
      "underlying" : 108,
      "variadic" : false
    }, {
      "name" : "func(a []int, retVal []int, dimSize int, defaultValue int, fn func(int, int) int)",
      "params" : 110,
      "recv" : -1,
      "results" : 5,
      "type" : "Signature",
      "underlying" : 109,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "a",
        "type" : 26
      }, {
        "name" : "retVal",
        "type" : 26
      }, {
        "name" : "dimSize",
        "type" : 7
      }, {
        "name" : "defaultValue",
        "type" : 7
      }, {
        "name" : "fn",
        "type" : 111
      } ],
      "name" : "(a []int, retVal []int, dimSize int, defaultValue int, fn func(int, int) int)",
      "type" : "Tuple",
      "underlying" : 110
    }, {
      "name" : "func(int, int) int",
      "params" : 112,
      "recv" : -1,
      "results" : 6,
      "type" : "Signature",
      "underlying" : 111,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 7
      }, {
        "name" : "",
        "type" : 7
      } ],
      "name" : "(int, int)",
      "type" : "Tuple",
      "underlying" : 112
    }, {
      "name" : "int8",
      "type" : "Basic",
      "underlying" : 113
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 113
      }, {
        "name" : "",
        "type" : 11
      } ],
      "name" : "(int8, bool)",
      "type" : "Tuple",
      "underlying" : 114
    }, {
      "elem" : 113,
      "name" : "[]int8",
      "type" : "Slice",
      "underlying" : 115
    }, {
      "name" : "func() []int8",
      "params" : 5,
      "recv" : -1,
      "results" : 117,
      "type" : "Signature",
      "underlying" : 116,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 115
      } ],
      "name" : "([]int8)",
      "type" : "Tuple",
      "underlying" : 117
    }, {
      "name" : "func(a []int8, retVal []int8, dimSize int, defaultValue int8, fn func(a []int8) int8)",
      "params" : 119,
      "recv" : -1,
      "results" : 5,
      "type" : "Signature",
      "underlying" : 118,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "a",
        "type" : 115
      }, {
        "name" : "retVal",
        "type" : 115
      }, {
        "name" : "dimSize",
        "type" : 7
      }, {
        "name" : "defaultValue",
        "type" : 113
      }, {
        "name" : "fn",
        "type" : 120
      } ],
      "name" : "(a []int8, retVal []int8, dimSize int, defaultValue int8, fn func(a []int8) int8)",
      "type" : "Tuple",
      "underlying" : 119
    }, {
      "name" : "func(a []int8) int8",
      "params" : 121,
      "recv" : -1,
      "results" : 122,
      "type" : "Signature",
      "underlying" : 120,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "a",
        "type" : 115
      } ],
      "name" : "(a []int8)",
      "type" : "Tuple",
      "underlying" : 121
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 113
      } ],
      "name" : "(int8)",
      "type" : "Tuple",
      "underlying" : 122
    }, {
      "name" : "func([]int8) int8",
      "params" : 117,
      "recv" : -1,
      "results" : 122,
      "type" : "Signature",
      "underlying" : 123,
      "variadic" : false
    }, {
      "name" : "func(a []int8, retVal []int8, dimSize int, defaultValue int8, fn func(int8, int8) int8)",
      "params" : 125,
      "recv" : -1,
      "results" : 5,
      "type" : "Signature",
      "underlying" : 124,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "a",
        "type" : 115
      }, {
        "name" : "retVal",
        "type" : 115
      }, {
        "name" : "dimSize",
        "type" : 7
      }, {
        "name" : "defaultValue",
        "type" : 113
      }, {
        "name" : "fn",
        "type" : 126
      } ],
      "name" : "(a []int8, retVal []int8, dimSize int, defaultValue int8, fn func(int8, int8) int8)",
      "type" : "Tuple",
      "underlying" : 125
    }, {
      "name" : "func(int8, int8) int8",
      "params" : 127,
      "recv" : -1,
      "results" : 122,
      "type" : "Signature",
      "underlying" : 126,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 113
      }, {
        "name" : "",
        "type" : 113
      } ],
      "name" : "(int8, int8)",
      "type" : "Tuple",
      "underlying" : 127
    }, {
      "name" : "int16",
      "type" : "Basic",
      "underlying" : 128
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 128
      }, {
        "name" : "",
        "type" : 11
      } ],
      "name" : "(int16, bool)",
      "type" : "Tuple",
      "underlying" : 129
    }, {
      "elem" : 128,
      "name" : "[]int16",
      "type" : "Slice",
      "underlying" : 130
    }, {
      "name" : "func() []int16",
      "params" : 5,
      "recv" : -1,
      "results" : 132,
      "type" : "Signature",
      "underlying" : 131,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 130
      } ],
      "name" : "([]int16)",
      "type" : "Tuple",
      "underlying" : 132
    }, {
      "name" : "func(a []int16, retVal []int16, dimSize int, defaultValue int16, fn func(a []int16) int16)",
      "params" : 134,
      "recv" : -1,
      "results" : 5,
      "type" : "Signature",
      "underlying" : 133,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "a",
        "type" : 130
      }, {
        "name" : "retVal",
        "type" : 130
      }, {
        "name" : "dimSize",
        "type" : 7
      }, {
        "name" : "defaultValue",
        "type" : 128
      }, {
        "name" : "fn",
        "type" : 135
      } ],
      "name" : "(a []int16, retVal []int16, dimSize int, defaultValue int16, fn func(a []int16) int16)",
      "type" : "Tuple",
      "underlying" : 134
    }, {
      "name" : "func(a []int16) int16",
      "params" : 136,
      "recv" : -1,
      "results" : 137,
      "type" : "Signature",
      "underlying" : 135,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "a",
        "type" : 130
      } ],
      "name" : "(a []int16)",
      "type" : "Tuple",
      "underlying" : 136
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 128
      } ],
      "name" : "(int16)",
      "type" : "Tuple",
      "underlying" : 137
    }, {
      "name" : "func([]int16) int16",
      "params" : 132,
      "recv" : -1,
      "results" : 137,
      "type" : "Signature",
      "underlying" : 138,
      "variadic" : false
    }, {
      "name" : "func(a []int16, retVal []int16, dimSize int, defaultValue int16, fn func(int16, int16) int16)",
      "params" : 140,
      "recv" : -1,
      "results" : 5,
      "type" : "Signature",
      "underlying" : 139,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "a",
        "type" : 130
      }, {
        "name" : "retVal",
        "type" : 130
      }, {
        "name" : "dimSize",
        "type" : 7
      }, {
        "name" : "defaultValue",
        "type" : 128
      }, {
        "name" : "fn",
        "type" : 141
      } ],
      "name" : "(a []int16, retVal []int16, dimSize int, defaultValue int16, fn func(int16, int16) int16)",
      "type" : "Tuple",
      "underlying" : 140
    }, {
      "name" : "func(int16, int16) int16",
      "params" : 142,
      "recv" : -1,
      "results" : 137,
      "type" : "Signature",
      "underlying" : 141,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 128
      }, {
        "name" : "",
        "type" : 128
      } ],
      "name" : "(int16, int16)",
      "type" : "Tuple",
      "underlying" : 142
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 59
      }, {
        "name" : "",
        "type" : 11
      } ],
      "name" : "(int32, bool)",
      "type" : "Tuple",
      "underlying" : 143
    }, {
      "elem" : 59,
      "name" : "[]int32",
      "type" : "Slice",
      "underlying" : 144
    }, {
      "name" : "func() []int32",
      "params" : 5,
      "recv" : -1,
      "results" : 146,
      "type" : "Signature",
      "underlying" : 145,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 144
      } ],
      "name" : "([]int32)",
      "type" : "Tuple",
      "underlying" : 146
    }, {
      "name" : "func(a []int32, retVal []int32, dimSize int, defaultValue int32, fn func(a []int32) int32)",
      "params" : 148,
      "recv" : -1,
      "results" : 5,
      "type" : "Signature",
      "underlying" : 147,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "a",
        "type" : 144
      }, {
        "name" : "retVal",
        "type" : 144
      }, {
        "name" : "dimSize",
        "type" : 7
      }, {
        "name" : "defaultValue",
        "type" : 59
      }, {
        "name" : "fn",
        "type" : 149
      } ],
      "name" : "(a []int32, retVal []int32, dimSize int, defaultValue int32, fn func(a []int32) int32)",
      "type" : "Tuple",
      "underlying" : 148
    }, {
      "name" : "func(a []int32) int32",
      "params" : 150,
      "recv" : -1,
      "results" : 151,
      "type" : "Signature",
      "underlying" : 149,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "a",
        "type" : 144
      } ],
      "name" : "(a []int32)",
      "type" : "Tuple",
      "underlying" : 150
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 59
      } ],
      "name" : "(int32)",
      "type" : "Tuple",
      "underlying" : 151
    }, {
      "name" : "func([]int32) int32",
      "params" : 146,
      "recv" : -1,
      "results" : 151,
      "type" : "Signature",
      "underlying" : 152,
      "variadic" : false
    }, {
      "name" : "func(a []int32, retVal []int32, dimSize int, defaultValue int32, fn func(int32, int32) int32)",
      "params" : 154,
      "recv" : -1,
      "results" : 5,
      "type" : "Signature",
      "underlying" : 153,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "a",
        "type" : 144
      }, {
        "name" : "retVal",
        "type" : 144
      }, {
        "name" : "dimSize",
        "type" : 7
      }, {
        "name" : "defaultValue",
        "type" : 59
      }, {
        "name" : "fn",
        "type" : 155
      } ],
      "name" : "(a []int32, retVal []int32, dimSize int, defaultValue int32, fn func(int32, int32) int32)",
      "type" : "Tuple",
      "underlying" : 154
    }, {
      "name" : "func(int32, int32) int32",
      "params" : 156,
      "recv" : -1,
      "results" : 151,
      "type" : "Signature",
      "underlying" : 155,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 59
      }, {
        "name" : "",
        "type" : 59
      } ],
      "name" : "(int32, int32)",
      "type" : "Tuple",
      "underlying" : 156
    }, {
      "name" : "int64",
      "type" : "Basic",
      "underlying" : 157
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 157
      }, {
        "name" : "",
        "type" : 11
      } ],
      "name" : "(int64, bool)",
      "type" : "Tuple",
      "underlying" : 158
    }, {
      "elem" : 157,
      "name" : "[]int64",
      "type" : "Slice",
      "underlying" : 159
    }, {
      "name" : "func() []int64",
      "params" : 5,
      "recv" : -1,
      "results" : 161,
      "type" : "Signature",
      "underlying" : 160,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 159
      } ],
      "name" : "([]int64)",
      "type" : "Tuple",
      "underlying" : 161
    }, {
      "name" : "func(a []int64, retVal []int64, dimSize int, defaultValue int64, fn func(a []int64) int64)",
      "params" : 163,
      "recv" : -1,
      "results" : 5,
      "type" : "Signature",
      "underlying" : 162,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "a",
        "type" : 159
      }, {
        "name" : "retVal",
        "type" : 159
      }, {
        "name" : "dimSize",
        "type" : 7
      }, {
        "name" : "defaultValue",
        "type" : 157
      }, {
        "name" : "fn",
        "type" : 164
      } ],
      "name" : "(a []int64, retVal []int64, dimSize int, defaultValue int64, fn func(a []int64) int64)",
      "type" : "Tuple",
      "underlying" : 163
    }, {
      "name" : "func(a []int64) int64",
      "params" : 165,
      "recv" : -1,
      "results" : 166,
      "type" : "Signature",
      "underlying" : 164,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "a",
        "type" : 159
      } ],
      "name" : "(a []int64)",
      "type" : "Tuple",
      "underlying" : 165
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 157
      } ],
      "name" : "(int64)",
      "type" : "Tuple",
      "underlying" : 166
    }, {
      "name" : "func([]int64) int64",
      "params" : 161,
      "recv" : -1,
      "results" : 166,
      "type" : "Signature",
      "underlying" : 167,
      "variadic" : false
    }, {
      "name" : "func(a []int64, retVal []int64, dimSize int, defaultValue int64, fn func(int64, int64) int64)",
      "params" : 169,
      "recv" : -1,
      "results" : 5,
      "type" : "Signature",
      "underlying" : 168,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "a",
        "type" : 159
      }, {
        "name" : "retVal",
        "type" : 159
      }, {
        "name" : "dimSize",
        "type" : 7
      }, {
        "name" : "defaultValue",
        "type" : 157
      }, {
        "name" : "fn",
        "type" : 170
      } ],
      "name" : "(a []int64, retVal []int64, dimSize int, defaultValue int64, fn func(int64, int64) int64)",
      "type" : "Tuple",
      "underlying" : 169
    }, {
      "name" : "func(int64, int64) int64",
      "params" : 171,
      "recv" : -1,
      "results" : 166,
      "type" : "Signature",
      "underlying" : 170,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 157
      }, {
        "name" : "",
        "type" : 157
      } ],
      "name" : "(int64, int64)",
      "type" : "Tuple",
      "underlying" : 171
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 40
      }, {
        "name" : "",
        "type" : 11
      } ],
      "name" : "(uint, bool)",
      "type" : "Tuple",
      "underlying" : 172
    }, {
      "elem" : 40,
      "name" : "[]uint",
      "type" : "Slice",
      "underlying" : 173
    }, {
      "name" : "func() []uint",
      "params" : 5,
      "recv" : -1,
      "results" : 175,
      "type" : "Signature",
      "underlying" : 174,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 173
      } ],
      "name" : "([]uint)",
      "type" : "Tuple",
      "underlying" : 175
    }, {
      "name" : "func(a []uint, retVal []uint, dimSize int, defaultValue uint, fn func(a []uint) uint)",
      "params" : 177,
      "recv" : -1,
      "results" : 5,
      "type" : "Signature",
      "underlying" : 176,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "a",
        "type" : 173
      }, {
        "name" : "retVal",
        "type" : 173
      }, {
        "name" : "dimSize",
        "type" : 7
      }, {
        "name" : "defaultValue",
        "type" : 40
      }, {
        "name" : "fn",
        "type" : 178
      } ],
      "name" : "(a []uint, retVal []uint, dimSize int, defaultValue uint, fn func(a []uint) uint)",
      "type" : "Tuple",
      "underlying" : 177
    }, {
      "name" : "func(a []uint) uint",
      "params" : 179,
      "recv" : -1,
      "results" : 180,
      "type" : "Signature",
      "underlying" : 178,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "a",
        "type" : 173
      } ],
      "name" : "(a []uint)",
      "type" : "Tuple",
      "underlying" : 179
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 40
      } ],
      "name" : "(uint)",
      "type" : "Tuple",
      "underlying" : 180
    }, {
      "name" : "func([]uint) uint",
      "params" : 175,
      "recv" : -1,
      "results" : 180,
      "type" : "Signature",
      "underlying" : 181,
      "variadic" : false
    }, {
      "name" : "func(a []uint, retVal []uint, dimSize int, defaultValue uint, fn func(uint, uint) uint)",
      "params" : 183,
      "recv" : -1,
      "results" : 5,
      "type" : "Signature",
      "underlying" : 182,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "a",
        "type" : 173
      }, {
        "name" : "retVal",
        "type" : 173
      }, {
        "name" : "dimSize",
        "type" : 7
      }, {
        "name" : "defaultValue",
        "type" : 40
      }, {
        "name" : "fn",
        "type" : 184
      } ],
      "name" : "(a []uint, retVal []uint, dimSize int, defaultValue uint, fn func(uint, uint) uint)",
      "type" : "Tuple",
      "underlying" : 183
    }, {
      "name" : "func(uint, uint) uint",
      "params" : 185,
      "recv" : -1,
      "results" : 180,
      "type" : "Signature",
      "underlying" : 184,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 40
      }, {
        "name" : "",
        "type" : 40
      } ],
      "name" : "(uint, uint)",
      "type" : "Tuple",
      "underlying" : 185
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 52
      }, {
        "name" : "",
        "type" : 11
      } ],
      "name" : "(uint8, bool)",
      "type" : "Tuple",
      "underlying" : 186
    }, {
      "elem" : 52,
      "name" : "[]uint8",
      "type" : "Slice",
      "underlying" : 187
    }, {
      "name" : "func() []uint8",
      "params" : 5,
      "recv" : -1,
      "results" : 189,
      "type" : "Signature",
      "underlying" : 188,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 187
      } ],
      "name" : "([]uint8)",
      "type" : "Tuple",
      "underlying" : 189
    }, {
      "name" : "func(a []uint8, retVal []uint8, dimSize int, defaultValue uint8, fn func(a []uint8) uint8)",
      "params" : 191,
      "recv" : -1,
      "results" : 5,
      "type" : "Signature",
      "underlying" : 190,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "a",
        "type" : 187
      }, {
        "name" : "retVal",
        "type" : 187
      }, {
        "name" : "dimSize",
        "type" : 7
      }, {
        "name" : "defaultValue",
        "type" : 52
      }, {
        "name" : "fn",
        "type" : 192
      } ],
      "name" : "(a []uint8, retVal []uint8, dimSize int, defaultValue uint8, fn func(a []uint8) uint8)",
      "type" : "Tuple",
      "underlying" : 191
    }, {
      "name" : "func(a []uint8) uint8",
      "params" : 193,
      "recv" : -1,
      "results" : 194,
      "type" : "Signature",
      "underlying" : 192,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "a",
        "type" : 187
      } ],
      "name" : "(a []uint8)",
      "type" : "Tuple",
      "underlying" : 193
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 52
      } ],
      "name" : "(uint8)",
      "type" : "Tuple",
      "underlying" : 194
    }, {
      "name" : "func([]uint8) uint8",
      "params" : 189,
      "recv" : -1,
      "results" : 194,
      "type" : "Signature",
      "underlying" : 195,
      "variadic" : false
    }, {
      "name" : "func(a []uint8, retVal []uint8, dimSize int, defaultValue uint8, fn func(uint8, uint8) uint8)",
      "params" : 197,
      "recv" : -1,
      "results" : 5,
      "type" : "Signature",
      "underlying" : 196,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "a",
        "type" : 187
      }, {
        "name" : "retVal",
        "type" : 187
      }, {
        "name" : "dimSize",
        "type" : 7
      }, {
        "name" : "defaultValue",
        "type" : 52
      }, {
        "name" : "fn",
        "type" : 198
      } ],
      "name" : "(a []uint8, retVal []uint8, dimSize int, defaultValue uint8, fn func(uint8, uint8) uint8)",
      "type" : "Tuple",
      "underlying" : 197
    }, {
      "name" : "func(uint8, uint8) uint8",
      "params" : 199,
      "recv" : -1,
      "results" : 194,
      "type" : "Signature",
      "underlying" : 198,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 52
      }, {
        "name" : "",
        "type" : 52
      } ],
      "name" : "(uint8, uint8)",
      "type" : "Tuple",
      "underlying" : 199
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 74
      }, {
        "name" : "",
        "type" : 11
      } ],
      "name" : "(uint16, bool)",
      "type" : "Tuple",
      "underlying" : 200
    }, {
      "elem" : 74,
      "name" : "[]uint16",
      "type" : "Slice",
      "underlying" : 201
    }, {
      "name" : "func() []uint16",
      "params" : 5,
      "recv" : -1,
      "results" : 203,
      "type" : "Signature",
      "underlying" : 202,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 201
      } ],
      "name" : "([]uint16)",
      "type" : "Tuple",
      "underlying" : 203
    }, {
      "name" : "func(a []uint16, retVal []uint16, dimSize int, defaultValue uint16, fn func(a []uint16) uint16)",
      "params" : 205,
      "recv" : -1,
      "results" : 5,
      "type" : "Signature",
      "underlying" : 204,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "a",
        "type" : 201
      }, {
        "name" : "retVal",
        "type" : 201
      }, {
        "name" : "dimSize",
        "type" : 7
      }, {
        "name" : "defaultValue",
        "type" : 74
      }, {
        "name" : "fn",
        "type" : 206
      } ],
      "name" : "(a []uint16, retVal []uint16, dimSize int, defaultValue uint16, fn func(a []uint16) uint16)",
      "type" : "Tuple",
      "underlying" : 205
    }, {
      "name" : "func(a []uint16) uint16",
      "params" : 207,
      "recv" : -1,
      "results" : 208,
      "type" : "Signature",
      "underlying" : 206,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "a",
        "type" : 201
      } ],
      "name" : "(a []uint16)",
      "type" : "Tuple",
      "underlying" : 207
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 74
      } ],
      "name" : "(uint16)",
      "type" : "Tuple",
      "underlying" : 208
    }, {
      "name" : "func([]uint16) uint16",
      "params" : 203,
      "recv" : -1,
      "results" : 208,
      "type" : "Signature",
      "underlying" : 209,
      "variadic" : false
    }, {
      "name" : "func(a []uint16, retVal []uint16, dimSize int, defaultValue uint16, fn func(uint16, uint16) uint16)",
      "params" : 211,
      "recv" : -1,
      "results" : 5,
      "type" : "Signature",
      "underlying" : 210,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "a",
        "type" : 201
      }, {
        "name" : "retVal",
        "type" : 201
      }, {
        "name" : "dimSize",
        "type" : 7
      }, {
        "name" : "defaultValue",
        "type" : 74
      }, {
        "name" : "fn",
        "type" : 212
      } ],
      "name" : "(a []uint16, retVal []uint16, dimSize int, defaultValue uint16, fn func(uint16, uint16) uint16)",
      "type" : "Tuple",
      "underlying" : 211
    }, {
      "name" : "func(uint16, uint16) uint16",
      "params" : 213,
      "recv" : -1,
      "results" : 208,
      "type" : "Signature",
      "underlying" : 212,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 74
      }, {
        "name" : "",
        "type" : 74
      } ],
      "name" : "(uint16, uint16)",
      "type" : "Tuple",
      "underlying" : 213
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 50
      }, {
        "name" : "",
        "type" : 11
      } ],
      "name" : "(uint32, bool)",
      "type" : "Tuple",
      "underlying" : 214
    }, {
      "elem" : 50,
      "name" : "[]uint32",
      "type" : "Slice",
      "underlying" : 215
    }, {
      "name" : "func() []uint32",
      "params" : 5,
      "recv" : -1,
      "results" : 217,
      "type" : "Signature",
      "underlying" : 216,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 215
      } ],
      "name" : "([]uint32)",
      "type" : "Tuple",
      "underlying" : 217
    }, {
      "name" : "func(a []uint32, retVal []uint32, dimSize int, defaultValue uint32, fn func(a []uint32) uint32)",
      "params" : 219,
      "recv" : -1,
      "results" : 5,
      "type" : "Signature",
      "underlying" : 218,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "a",
        "type" : 215
      }, {
        "name" : "retVal",
        "type" : 215
      }, {
        "name" : "dimSize",
        "type" : 7
      }, {
        "name" : "defaultValue",
        "type" : 50
      }, {
        "name" : "fn",
        "type" : 220
      } ],
      "name" : "(a []uint32, retVal []uint32, dimSize int, defaultValue uint32, fn func(a []uint32) uint32)",
      "type" : "Tuple",
      "underlying" : 219
    }, {
      "name" : "func(a []uint32) uint32",
      "params" : 221,
      "recv" : -1,
      "results" : 222,
      "type" : "Signature",
      "underlying" : 220,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "a",
        "type" : 215
      } ],
      "name" : "(a []uint32)",
      "type" : "Tuple",
      "underlying" : 221
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 50
      } ],
      "name" : "(uint32)",
      "type" : "Tuple",
      "underlying" : 222
    }, {
      "name" : "func([]uint32) uint32",
      "params" : 217,
      "recv" : -1,
      "results" : 222,
      "type" : "Signature",
      "underlying" : 223,
      "variadic" : false
    }, {
      "name" : "func(a []uint32, retVal []uint32, dimSize int, defaultValue uint32, fn func(uint32, uint32) uint32)",
      "params" : 225,
      "recv" : -1,
      "results" : 5,
      "type" : "Signature",
      "underlying" : 224,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "a",
        "type" : 215
      }, {
        "name" : "retVal",
        "type" : 215
      }, {
        "name" : "dimSize",
        "type" : 7
      }, {
        "name" : "defaultValue",
        "type" : 50
      }, {
        "name" : "fn",
        "type" : 226
      } ],
      "name" : "(a []uint32, retVal []uint32, dimSize int, defaultValue uint32, fn func(uint32, uint32) uint32)",
      "type" : "Tuple",
      "underlying" : 225
    }, {
      "name" : "func(uint32, uint32) uint32",
      "params" : 227,
      "recv" : -1,
      "results" : 222,
      "type" : "Signature",
      "underlying" : 226,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 50
      }, {
        "name" : "",
        "type" : 50
      } ],
      "name" : "(uint32, uint32)",
      "type" : "Tuple",
      "underlying" : 227
    }, {
      "name" : "uint64",
      "type" : "Basic",
      "underlying" : 228
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 228
      }, {
        "name" : "",
        "type" : 11
      } ],
      "name" : "(uint64, bool)",
      "type" : "Tuple",
      "underlying" : 229
    }, {
      "elem" : 228,
      "name" : "[]uint64",
      "type" : "Slice",
      "underlying" : 230
    }, {
      "name" : "func() []uint64",
      "params" : 5,
      "recv" : -1,
      "results" : 232,
      "type" : "Signature",
      "underlying" : 231,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 230
      } ],
      "name" : "([]uint64)",
      "type" : "Tuple",
      "underlying" : 232
    }, {
      "name" : "func(a []uint64, retVal []uint64, dimSize int, defaultValue uint64, fn func(a []uint64) uint64)",
      "params" : 234,
      "recv" : -1,
      "results" : 5,
      "type" : "Signature",
      "underlying" : 233,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "a",
        "type" : 230
      }, {
        "name" : "retVal",
        "type" : 230
      }, {
        "name" : "dimSize",
        "type" : 7
      }, {
        "name" : "defaultValue",
        "type" : 228
      }, {
        "name" : "fn",
        "type" : 235
      } ],
      "name" : "(a []uint64, retVal []uint64, dimSize int, defaultValue uint64, fn func(a []uint64) uint64)",
      "type" : "Tuple",
      "underlying" : 234
    }, {
      "name" : "func(a []uint64) uint64",
      "params" : 236,
      "recv" : -1,
      "results" : 237,
      "type" : "Signature",
      "underlying" : 235,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "a",
        "type" : 230
      } ],
      "name" : "(a []uint64)",
      "type" : "Tuple",
      "underlying" : 236
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 228
      } ],
      "name" : "(uint64)",
      "type" : "Tuple",
      "underlying" : 237
    }, {
      "name" : "func([]uint64) uint64",
      "params" : 232,
      "recv" : -1,
      "results" : 237,
      "type" : "Signature",
      "underlying" : 238,
      "variadic" : false
    }, {
      "name" : "func(a []uint64, retVal []uint64, dimSize int, defaultValue uint64, fn func(uint64, uint64) uint64)",
      "params" : 240,
      "recv" : -1,
      "results" : 5,
      "type" : "Signature",
      "underlying" : 239,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "a",
        "type" : 230
      }, {
        "name" : "retVal",
        "type" : 230
      }, {
        "name" : "dimSize",
        "type" : 7
      }, {
        "name" : "defaultValue",
        "type" : 228
      }, {
        "name" : "fn",
        "type" : 241
      } ],
      "name" : "(a []uint64, retVal []uint64, dimSize int, defaultValue uint64, fn func(uint64, uint64) uint64)",
      "type" : "Tuple",
      "underlying" : 240
    }, {
      "name" : "func(uint64, uint64) uint64",
      "params" : 242,
      "recv" : -1,
      "results" : 237,
      "type" : "Signature",
      "underlying" : 241,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 228
      }, {
        "name" : "",
        "type" : 228
      } ],
      "name" : "(uint64, uint64)",
      "type" : "Tuple",
      "underlying" : 242
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 25
      }, {
        "name" : "",
        "type" : 11
      } ],
      "name" : "(uintptr, bool)",
      "type" : "Tuple",
      "underlying" : 243
    }, {
      "elem" : 25,
      "name" : "[]uintptr",
      "type" : "Slice",
      "underlying" : 244
    }, {
      "name" : "func() []uintptr",
      "params" : 5,
      "recv" : -1,
      "results" : 246,
      "type" : "Signature",
      "underlying" : 245,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 244
      } ],
      "name" : "([]uintptr)",
      "type" : "Tuple",
      "underlying" : 246
    }, {
      "name" : "func(a []uintptr, retVal []uintptr, dimSize int, defaultValue uintptr, fn func(a []uintptr) uintptr)",
      "params" : 248,
      "recv" : -1,
      "results" : 5,
      "type" : "Signature",
      "underlying" : 247,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "a",
        "type" : 244
      }, {
        "name" : "retVal",
        "type" : 244
      }, {
        "name" : "dimSize",
        "type" : 7
      }, {
        "name" : "defaultValue",
        "type" : 25
      }, {
        "name" : "fn",
        "type" : 249
      } ],
      "name" : "(a []uintptr, retVal []uintptr, dimSize int, defaultValue uintptr, fn func(a []uintptr) uintptr)",
      "type" : "Tuple",
      "underlying" : 248
    }, {
      "name" : "func(a []uintptr) uintptr",
      "params" : 250,
      "recv" : -1,
      "results" : 66,
      "type" : "Signature",
      "underlying" : 249,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "a",
        "type" : 244
      } ],
      "name" : "(a []uintptr)",
      "type" : "Tuple",
      "underlying" : 250
    }, {
      "name" : "func([]uintptr) uintptr",
      "params" : 246,
      "recv" : -1,
      "results" : 66,
      "type" : "Signature",
      "underlying" : 251,
      "variadic" : false
    }, {
      "name" : "func(a []uintptr, retVal []uintptr, dimSize int, defaultValue uintptr, fn func(uintptr, uintptr) uintptr)",
      "params" : 253,
      "recv" : -1,
      "results" : 5,
      "type" : "Signature",
      "underlying" : 252,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "a",
        "type" : 244
      }, {
        "name" : "retVal",
        "type" : 244
      }, {
        "name" : "dimSize",
        "type" : 7
      }, {
        "name" : "defaultValue",
        "type" : 25
      }, {
        "name" : "fn",
        "type" : 254
      } ],
      "name" : "(a []uintptr, retVal []uintptr, dimSize int, defaultValue uintptr, fn func(uintptr, uintptr) uintptr)",
      "type" : "Tuple",
      "underlying" : 253
    }, {
      "name" : "func(uintptr, uintptr) uintptr",
      "params" : 255,
      "recv" : -1,
      "results" : 66,
      "type" : "Signature",
      "underlying" : 254,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 25
      }, {
        "name" : "",
        "type" : 25
      } ],
      "name" : "(uintptr, uintptr)",
      "type" : "Tuple",
      "underlying" : 255
    }, {
      "name" : "float32",
      "type" : "Basic",
      "underlying" : 256
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 256
      }, {
        "name" : "",
        "type" : 11
      } ],
      "name" : "(float32, bool)",
      "type" : "Tuple",
      "underlying" : 257
    }, {
      "elem" : 256,
      "name" : "[]float32",
      "type" : "Slice",
      "underlying" : 258
    }, {
      "name" : "func() []float32",
      "params" : 5,
      "recv" : -1,
      "results" : 260,
      "type" : "Signature",
      "underlying" : 259,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 258
      } ],
      "name" : "([]float32)",
      "type" : "Tuple",
      "underlying" : 260
    }, {
      "name" : "func(a []float32, retVal []float32, dimSize int, defaultValue float32, fn func(a []float32) float32)",
      "params" : 262,
      "recv" : -1,
      "results" : 5,
      "type" : "Signature",
      "underlying" : 261,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "a",
        "type" : 258
      }, {
        "name" : "retVal",
        "type" : 258
      }, {
        "name" : "dimSize",
        "type" : 7
      }, {
        "name" : "defaultValue",
        "type" : 256
      }, {
        "name" : "fn",
        "type" : 263
      } ],
      "name" : "(a []float32, retVal []float32, dimSize int, defaultValue float32, fn func(a []float32) float32)",
      "type" : "Tuple",
      "underlying" : 262
    }, {
      "name" : "func(a []float32) float32",
      "params" : 264,
      "recv" : -1,
      "results" : 265,
      "type" : "Signature",
      "underlying" : 263,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "a",
        "type" : 258
      } ],
      "name" : "(a []float32)",
      "type" : "Tuple",
      "underlying" : 264
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 256
      } ],
      "name" : "(float32)",
      "type" : "Tuple",
      "underlying" : 265
    }, {
      "name" : "func([]float32) float32",
      "params" : 260,
      "recv" : -1,
      "results" : 265,
      "type" : "Signature",
      "underlying" : 266,
      "variadic" : false
    }, {
      "name" : "func(a []float32, retVal []float32, dimSize int, defaultValue float32, fn func(float32, float32) float32)",
      "params" : 268,
      "recv" : -1,
      "results" : 5,
      "type" : "Signature",
      "underlying" : 267,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "a",
        "type" : 258
      }, {
        "name" : "retVal",
        "type" : 258
      }, {
        "name" : "dimSize",
        "type" : 7
      }, {
        "name" : "defaultValue",
        "type" : 256
      }, {
        "name" : "fn",
        "type" : 269
      } ],
      "name" : "(a []float32, retVal []float32, dimSize int, defaultValue float32, fn func(float32, float32) float32)",
      "type" : "Tuple",
      "underlying" : 268
    }, {
      "name" : "func(float32, float32) float32",
      "params" : 270,
      "recv" : -1,
      "results" : 265,
      "type" : "Signature",
      "underlying" : 269,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 256
      }, {
        "name" : "",
        "type" : 256
      } ],
      "name" : "(float32, float32)",
      "type" : "Tuple",
      "underlying" : 270
    }, {
      "name" : "float64",
      "type" : "Basic",
      "underlying" : 271
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 271
      }, {
        "name" : "",
        "type" : 11
      } ],
      "name" : "(float64, bool)",
      "type" : "Tuple",
      "underlying" : 272
    }, {
      "elem" : 271,
      "name" : "[]float64",
      "type" : "Slice",
      "underlying" : 273
    }, {
      "name" : "func() []float64",
      "params" : 5,
      "recv" : -1,
      "results" : 275,
      "type" : "Signature",
      "underlying" : 274,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 273
      } ],
      "name" : "([]float64)",
      "type" : "Tuple",
      "underlying" : 275
    }, {
      "name" : "func(a []float64, retVal []float64, dimSize int, defaultValue float64, fn func(a []float64) float64)",
      "params" : 277,
      "recv" : -1,
      "results" : 5,
      "type" : "Signature",
      "underlying" : 276,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "a",
        "type" : 273
      }, {
        "name" : "retVal",
        "type" : 273
      }, {
        "name" : "dimSize",
        "type" : 7
      }, {
        "name" : "defaultValue",
        "type" : 271
      }, {
        "name" : "fn",
        "type" : 278
      } ],
      "name" : "(a []float64, retVal []float64, dimSize int, defaultValue float64, fn func(a []float64) float64)",
      "type" : "Tuple",
      "underlying" : 277
    }, {
      "name" : "func(a []float64) float64",
      "params" : 279,
      "recv" : -1,
      "results" : 280,
      "type" : "Signature",
      "underlying" : 278,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "a",
        "type" : 273
      } ],
      "name" : "(a []float64)",
      "type" : "Tuple",
      "underlying" : 279
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 271
      } ],
      "name" : "(float64)",
      "type" : "Tuple",
      "underlying" : 280
    }, {
      "name" : "func([]float64) float64",
      "params" : 275,
      "recv" : -1,
      "results" : 280,
      "type" : "Signature",
      "underlying" : 281,
      "variadic" : false
    }, {
      "name" : "func(a []float64, retVal []float64, dimSize int, defaultValue float64, fn func(float64, float64) float64)",
      "params" : 283,
      "recv" : -1,
      "results" : 5,
      "type" : "Signature",
      "underlying" : 282,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "a",
        "type" : 273
      }, {
        "name" : "retVal",
        "type" : 273
      }, {
        "name" : "dimSize",
        "type" : 7
      }, {
        "name" : "defaultValue",
        "type" : 271
      }, {
        "name" : "fn",
        "type" : 284
      } ],
      "name" : "(a []float64, retVal []float64, dimSize int, defaultValue float64, fn func(float64, float64) float64)",
      "type" : "Tuple",
      "underlying" : 283
    }, {
      "name" : "func(float64, float64) float64",
      "params" : 285,
      "recv" : -1,
      "results" : 280,
      "type" : "Signature",
      "underlying" : 284,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 271
      }, {
        "name" : "",
        "type" : 271
      } ],
      "name" : "(float64, float64)",
      "type" : "Tuple",
      "underlying" : 285
    }, {
      "name" : "complex64",
      "type" : "Basic",
      "underlying" : 286
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 286
      }, {
        "name" : "",
        "type" : 11
      } ],
      "name" : "(complex64, bool)",
      "type" : "Tuple",
      "underlying" : 287
    }, {
      "elem" : 286,
      "name" : "[]complex64",
      "type" : "Slice",
      "underlying" : 288
    }, {
      "name" : "func() []complex64",
      "params" : 5,
      "recv" : -1,
      "results" : 290,
      "type" : "Signature",
      "underlying" : 289,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 288
      } ],
      "name" : "([]complex64)",
      "type" : "Tuple",
      "underlying" : 290
    }, {
      "name" : "func(a []complex64, retVal []complex64, dimSize int, defaultValue complex64, fn func(a []complex64) complex64)",
      "params" : 292,
      "recv" : -1,
      "results" : 5,
      "type" : "Signature",
      "underlying" : 291,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "a",
        "type" : 288
      }, {
        "name" : "retVal",
        "type" : 288
      }, {
        "name" : "dimSize",
        "type" : 7
      }, {
        "name" : "defaultValue",
        "type" : 286
      }, {
        "name" : "fn",
        "type" : 293
      } ],
      "name" : "(a []complex64, retVal []complex64, dimSize int, defaultValue complex64, fn func(a []complex64) complex64)",
      "type" : "Tuple",
      "underlying" : 292
    }, {
      "name" : "func(a []complex64) complex64",
      "params" : 294,
      "recv" : -1,
      "results" : 295,
      "type" : "Signature",
      "underlying" : 293,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "a",
        "type" : 288
      } ],
      "name" : "(a []complex64)",
      "type" : "Tuple",
      "underlying" : 294
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 286
      } ],
      "name" : "(complex64)",
      "type" : "Tuple",
      "underlying" : 295
    }, {
      "name" : "func([]complex64) complex64",
      "params" : 290,
      "recv" : -1,
      "results" : 295,
      "type" : "Signature",
      "underlying" : 296,
      "variadic" : false
    }, {
      "name" : "func(a []complex64, retVal []complex64, dimSize int, defaultValue complex64, fn func(complex64, complex64) complex64)",
      "params" : 298,
      "recv" : -1,
      "results" : 5,
      "type" : "Signature",
      "underlying" : 297,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "a",
        "type" : 288
      }, {
        "name" : "retVal",
        "type" : 288
      }, {
        "name" : "dimSize",
        "type" : 7
      }, {
        "name" : "defaultValue",
        "type" : 286
      }, {
        "name" : "fn",
        "type" : 299
      } ],
      "name" : "(a []complex64, retVal []complex64, dimSize int, defaultValue complex64, fn func(complex64, complex64) complex64)",
      "type" : "Tuple",
      "underlying" : 298
    }, {
      "name" : "func(complex64, complex64) complex64",
      "params" : 300,
      "recv" : -1,
      "results" : 295,
      "type" : "Signature",
      "underlying" : 299,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 286
      }, {
        "name" : "",
        "type" : 286
      } ],
      "name" : "(complex64, complex64)",
      "type" : "Tuple",
      "underlying" : 300
    }, {
      "name" : "complex128",
      "type" : "Basic",
      "underlying" : 301
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 301
      }, {
        "name" : "",
        "type" : 11
      } ],
      "name" : "(complex128, bool)",
      "type" : "Tuple",
      "underlying" : 302
    }, {
      "elem" : 301,
      "name" : "[]complex128",
      "type" : "Slice",
      "underlying" : 303
    }, {
      "name" : "func() []complex128",
      "params" : 5,
      "recv" : -1,
      "results" : 305,
      "type" : "Signature",
      "underlying" : 304,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 303
      } ],
      "name" : "([]complex128)",
      "type" : "Tuple",
      "underlying" : 305
    }, {
      "name" : "func(a []complex128, retVal []complex128, dimSize int, defaultValue complex128, fn func(a []complex128) complex128)",
      "params" : 307,
      "recv" : -1,
      "results" : 5,
      "type" : "Signature",
      "underlying" : 306,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "a",
        "type" : 303
      }, {
        "name" : "retVal",
        "type" : 303
      }, {
        "name" : "dimSize",
        "type" : 7
      }, {
        "name" : "defaultValue",
        "type" : 301
      }, {
        "name" : "fn",
        "type" : 308
      } ],
      "name" : "(a []complex128, retVal []complex128, dimSize int, defaultValue complex128, fn func(a []complex128) complex128)",
      "type" : "Tuple",
      "underlying" : 307
    }, {
      "name" : "func(a []complex128) complex128",
      "params" : 309,
      "recv" : -1,
      "results" : 310,
      "type" : "Signature",
      "underlying" : 308,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "a",
        "type" : 303
      } ],
      "name" : "(a []complex128)",
      "type" : "Tuple",
      "underlying" : 309
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 301
      } ],
      "name" : "(complex128)",
      "type" : "Tuple",
      "underlying" : 310
    }, {
      "name" : "func([]complex128) complex128",
      "params" : 305,
      "recv" : -1,
      "results" : 310,
      "type" : "Signature",
      "underlying" : 311,
      "variadic" : false
    }, {
      "name" : "func(a []complex128, retVal []complex128, dimSize int, defaultValue complex128, fn func(complex128, complex128) complex128)",
      "params" : 313,
      "recv" : -1,
      "results" : 5,
      "type" : "Signature",
      "underlying" : 312,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "a",
        "type" : 303
      }, {
        "name" : "retVal",
        "type" : 303
      }, {
        "name" : "dimSize",
        "type" : 7
      }, {
        "name" : "defaultValue",
        "type" : 301
      }, {
        "name" : "fn",
        "type" : 314
      } ],
      "name" : "(a []complex128, retVal []complex128, dimSize int, defaultValue complex128, fn func(complex128, complex128) complex128)",
      "type" : "Tuple",
      "underlying" : 313
    }, {
      "name" : "func(complex128, complex128) complex128",
      "params" : 315,
      "recv" : -1,
      "results" : 310,
      "type" : "Signature",
      "underlying" : 314,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 301
      }, {
        "name" : "",
        "type" : 301
      } ],
      "name" : "(complex128, complex128)",
      "type" : "Tuple",
      "underlying" : 315
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 23
      }, {
        "name" : "",
        "type" : 11
      } ],
      "name" : "(string, bool)",
      "type" : "Tuple",
      "underlying" : 316
    }, {
      "elem" : 23,
      "name" : "[]string",
      "type" : "Slice",
      "underlying" : 317
    }, {
      "name" : "func() []string",
      "params" : 5,
      "recv" : -1,
      "results" : 319,
      "type" : "Signature",
      "underlying" : 318,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 317
      } ],
      "name" : "([]string)",
      "type" : "Tuple",
      "underlying" : 319
    }, {
      "name" : "func(a []string, retVal []string, dimSize int, defaultValue string, fn func(a []string) string)",
      "params" : 321,
      "recv" : -1,
      "results" : 5,
      "type" : "Signature",
      "underlying" : 320,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "a",
        "type" : 317
      }, {
        "name" : "retVal",
        "type" : 317
      }, {
        "name" : "dimSize",
        "type" : 7
      }, {
        "name" : "defaultValue",
        "type" : 23
      }, {
        "name" : "fn",
        "type" : 322
      } ],
      "name" : "(a []string, retVal []string, dimSize int, defaultValue string, fn func(a []string) string)",
      "type" : "Tuple",
      "underlying" : 321
    }, {
      "name" : "func(a []string) string",
      "params" : 323,
      "recv" : -1,
      "results" : 35,
      "type" : "Signature",
      "underlying" : 322,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "a",
        "type" : 317
      } ],
      "name" : "(a []string)",
      "type" : "Tuple",
      "underlying" : 323
    }, {
      "name" : "func([]string) string",
      "params" : 319,
      "recv" : -1,
      "results" : 35,
      "type" : "Signature",
      "underlying" : 324,
      "variadic" : false
    }, {
      "name" : "func(a []string, retVal []string, dimSize int, defaultValue string, fn func(string, string) string)",
      "params" : 326,
      "recv" : -1,
      "results" : 5,
      "type" : "Signature",
      "underlying" : 325,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "a",
        "type" : 317
      }, {
        "name" : "retVal",
        "type" : 317
      }, {
        "name" : "dimSize",
        "type" : 7
      }, {
        "name" : "defaultValue",
        "type" : 23
      }, {
        "name" : "fn",
        "type" : 327
      } ],
      "name" : "(a []string, retVal []string, dimSize int, defaultValue string, fn func(string, string) string)",
      "type" : "Tuple",
      "underlying" : 326
    }, {
      "name" : "func(string, string) string",
      "params" : 328,
      "recv" : -1,
      "results" : 35,
      "type" : "Signature",
      "underlying" : 327,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 23
      }, {
        "name" : "",
        "type" : 23
      } ],
      "name" : "(string, string)",
      "type" : "Tuple",
      "underlying" : 328
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 55
      }, {
        "name" : "",
        "type" : 11
      } ],
      "name" : "(unsafe.Pointer, bool)",
      "type" : "Tuple",
      "underlying" : 329
    }, {
      "elem" : 55,
      "name" : "[]unsafe.Pointer",
      "type" : "Slice",
      "underlying" : 330
    }, {
      "name" : "func() []unsafe.Pointer",
      "params" : 5,
      "recv" : -1,
      "results" : 332,
      "type" : "Signature",
      "underlying" : 331,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 330
      } ],
      "name" : "([]unsafe.Pointer)",
      "type" : "Tuple",
      "underlying" : 332
    }, {
      "name" : "func(a []unsafe.Pointer, retVal []unsafe.Pointer, dimSize int, defaultValue unsafe.Pointer, fn func(a []unsafe.Pointer) unsafe.Pointer)",
      "params" : 334,
      "recv" : -1,
      "results" : 5,
      "type" : "Signature",
      "underlying" : 333,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "a",
        "type" : 330
      }, {
        "name" : "retVal",
        "type" : 330
      }, {
        "name" : "dimSize",
        "type" : 7
      }, {
        "name" : "defaultValue",
        "type" : 55
      }, {
        "name" : "fn",
        "type" : 335
      } ],
      "name" : "(a []unsafe.Pointer, retVal []unsafe.Pointer, dimSize int, defaultValue unsafe.Pointer, fn func(a []unsafe.Pointer) unsafe.Pointer)",
      "type" : "Tuple",
      "underlying" : 334
    }, {
      "name" : "func(a []unsafe.Pointer) unsafe.Pointer",
      "params" : 336,
      "recv" : -1,
      "results" : 337,
      "type" : "Signature",
      "underlying" : 335,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "a",
        "type" : 330
      } ],
      "name" : "(a []unsafe.Pointer)",
      "type" : "Tuple",
      "underlying" : 336
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 55
      } ],
      "name" : "(unsafe.Pointer)",
      "type" : "Tuple",
      "underlying" : 337
    }, {
      "name" : "func([]unsafe.Pointer) unsafe.Pointer",
      "params" : 332,
      "recv" : -1,
      "results" : 337,
      "type" : "Signature",
      "underlying" : 338,
      "variadic" : false
    }, {
      "name" : "func(a []unsafe.Pointer, retVal []unsafe.Pointer, dimSize int, defaultValue unsafe.Pointer, fn func(unsafe.Pointer, unsafe.Pointer) unsafe.Pointer)",
      "params" : 340,
      "recv" : -1,
      "results" : 5,
      "type" : "Signature",
      "underlying" : 339,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "a",
        "type" : 330
      }, {
        "name" : "retVal",
        "type" : 330
      }, {
        "name" : "dimSize",
        "type" : 7
      }, {
        "name" : "defaultValue",
        "type" : 55
      }, {
        "name" : "fn",
        "type" : 341
      } ],
      "name" : "(a []unsafe.Pointer, retVal []unsafe.Pointer, dimSize int, defaultValue unsafe.Pointer, fn func(unsafe.Pointer, unsafe.Pointer) unsafe.Pointer)",
      "type" : "Tuple",
      "underlying" : 340
    }, {
      "name" : "func(unsafe.Pointer, unsafe.Pointer) unsafe.Pointer",
      "params" : 54,
      "recv" : -1,
      "results" : 337,
      "type" : "Signature",
      "underlying" : 341,
      "variadic" : false
    } ],
    "variables" : [ {
      "name" : "",
      "package" : 1,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 1,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 1,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 1,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 1,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 1,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 1,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 1,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 1,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 1,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 1,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 1,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 1,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 1,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 1,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 1,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 1,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "e",
      "package" : 0,
      "type" : 82,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "t",
      "package" : 0,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "data",
      "package" : 0,
      "type" : 75,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "retVal",
      "package" : 0,
      "type" : 75,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "dimSize",
      "package" : 0,
      "type" : 7,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "defaultValue",
      "package" : 0,
      "type" : 78,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "fn",
      "package" : 0,
      "type" : 78,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "err",
      "package" : 0,
      "type" : 80,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "UnsafePointer",
      "package" : 0,
      "type" : 2,
      "exported" : true,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "Uint16",
      "package" : 0,
      "type" : 2,
      "exported" : true,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "Uint64",
      "package" : 0,
      "type" : 2,
      "exported" : true,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "Uint8",
      "package" : 0,
      "type" : 2,
      "exported" : true,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "Bool",
      "package" : 0,
      "type" : 2,
      "exported" : true,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "Uint",
      "package" : 0,
      "type" : 2,
      "exported" : true,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "Float32",
      "package" : 0,
      "type" : 2,
      "exported" : true,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "Int",
      "package" : 0,
      "type" : 2,
      "exported" : true,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "Int64",
      "package" : 0,
      "type" : 2,
      "exported" : true,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "Int32",
      "package" : 0,
      "type" : 2,
      "exported" : true,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "Uintptr",
      "package" : 0,
      "type" : 2,
      "exported" : true,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "Complex128",
      "package" : 0,
      "type" : 2,
      "exported" : true,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "Int8",
      "package" : 0,
      "type" : 2,
      "exported" : true,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "Uint32",
      "package" : 0,
      "type" : 2,
      "exported" : true,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "String",
      "package" : 0,
      "type" : 2,
      "exported" : true,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "Float64",
      "package" : 0,
      "type" : 2,
      "exported" : true,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "Complex64",
      "package" : 0,
      "type" : 2,
      "exported" : true,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "Int16",
      "package" : 0,
      "type" : 2,
      "exported" : true,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "ok",
      "package" : 0,
      "type" : 11,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "def",
      "package" : 0,
      "type" : 11,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "dt",
      "package" : 0,
      "type" : 89,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "rt",
      "package" : 0,
      "type" : 89,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "f",
      "package" : 0,
      "type" : 96,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "f",
      "package" : 0,
      "type" : 99,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "def",
      "package" : 0,
      "type" : 7,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "dt",
      "package" : 0,
      "type" : 26,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "rt",
      "package" : 0,
      "type" : 26,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "f",
      "package" : 0,
      "type" : 108,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "f",
      "package" : 0,
      "type" : 111,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "def",
      "package" : 0,
      "type" : 113,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "dt",
      "package" : 0,
      "type" : 115,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "rt",
      "package" : 0,
      "type" : 115,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "f",
      "package" : 0,
      "type" : 123,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "f",
      "package" : 0,
      "type" : 126,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "def",
      "package" : 0,
      "type" : 128,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "dt",
      "package" : 0,
      "type" : 130,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "rt",
      "package" : 0,
      "type" : 130,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "f",
      "package" : 0,
      "type" : 138,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "f",
      "package" : 0,
      "type" : 141,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "def",
      "package" : 0,
      "type" : 59,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "dt",
      "package" : 0,
      "type" : 144,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "rt",
      "package" : 0,
      "type" : 144,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "f",
      "package" : 0,
      "type" : 152,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "f",
      "package" : 0,
      "type" : 155,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "def",
      "package" : 0,
      "type" : 157,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "dt",
      "package" : 0,
      "type" : 159,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "rt",
      "package" : 0,
      "type" : 159,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "f",
      "package" : 0,
      "type" : 167,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "f",
      "package" : 0,
      "type" : 170,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "def",
      "package" : 0,
      "type" : 40,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "dt",
      "package" : 0,
      "type" : 173,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "rt",
      "package" : 0,
      "type" : 173,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "f",
      "package" : 0,
      "type" : 181,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "f",
      "package" : 0,
      "type" : 184,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "def",
      "package" : 0,
      "type" : 52,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "dt",
      "package" : 0,
      "type" : 187,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "rt",
      "package" : 0,
      "type" : 187,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "f",
      "package" : 0,
      "type" : 195,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "f",
      "package" : 0,
      "type" : 198,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "def",
      "package" : 0,
      "type" : 74,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "dt",
      "package" : 0,
      "type" : 201,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "rt",
      "package" : 0,
      "type" : 201,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "f",
      "package" : 0,
      "type" : 209,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "f",
      "package" : 0,
      "type" : 212,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "def",
      "package" : 0,
      "type" : 50,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "dt",
      "package" : 0,
      "type" : 215,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "rt",
      "package" : 0,
      "type" : 215,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "f",
      "package" : 0,
      "type" : 223,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "f",
      "package" : 0,
      "type" : 226,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "def",
      "package" : 0,
      "type" : 228,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "dt",
      "package" : 0,
      "type" : 230,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "rt",
      "package" : 0,
      "type" : 230,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "f",
      "package" : 0,
      "type" : 238,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "f",
      "package" : 0,
      "type" : 241,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "def",
      "package" : 0,
      "type" : 25,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "dt",
      "package" : 0,
      "type" : 244,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "rt",
      "package" : 0,
      "type" : 244,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "f",
      "package" : 0,
      "type" : 251,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "f",
      "package" : 0,
      "type" : 254,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "def",
      "package" : 0,
      "type" : 256,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "dt",
      "package" : 0,
      "type" : 258,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "rt",
      "package" : 0,
      "type" : 258,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "f",
      "package" : 0,
      "type" : 266,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "f",
      "package" : 0,
      "type" : 269,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "def",
      "package" : 0,
      "type" : 271,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "dt",
      "package" : 0,
      "type" : 273,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "rt",
      "package" : 0,
      "type" : 273,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "f",
      "package" : 0,
      "type" : 281,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "f",
      "package" : 0,
      "type" : 284,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "def",
      "package" : 0,
      "type" : 286,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "dt",
      "package" : 0,
      "type" : 288,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "rt",
      "package" : 0,
      "type" : 288,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "f",
      "package" : 0,
      "type" : 296,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "f",
      "package" : 0,
      "type" : 299,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "def",
      "package" : 0,
      "type" : 301,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "dt",
      "package" : 0,
      "type" : 303,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "rt",
      "package" : 0,
      "type" : 303,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "f",
      "package" : 0,
      "type" : 311,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "f",
      "package" : 0,
      "type" : 314,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "def",
      "package" : 0,
      "type" : 23,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "dt",
      "package" : 0,
      "type" : 317,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "rt",
      "package" : 0,
      "type" : 317,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "f",
      "package" : 0,
      "type" : 324,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "f",
      "package" : 0,
      "type" : 327,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "def",
      "package" : 0,
      "type" : 55,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "dt",
      "package" : 0,
      "type" : 330,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "rt",
      "package" : 0,
      "type" : 330,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "f",
      "package" : 0,
      "type" : 338,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "f",
      "package" : 0,
      "type" : 341,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "f",
      "package" : 0,
      "type" : 78,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "f",
      "package" : 0,
      "type" : 78,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "f",
      "package" : 0,
      "type" : 78,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "f",
      "package" : 0,
      "type" : 78,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "f",
      "package" : 0,
      "type" : 78,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "f",
      "package" : 0,
      "type" : 78,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "f",
      "package" : 0,
      "type" : 78,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "f",
      "package" : 0,
      "type" : 78,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "f",
      "package" : 0,
      "type" : 78,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "f",
      "package" : 0,
      "type" : 78,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "f",
      "package" : 0,
      "type" : 78,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "f",
      "package" : 0,
      "type" : 78,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "f",
      "package" : 0,
      "type" : 78,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "f",
      "package" : 0,
      "type" : 78,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "f",
      "package" : 0,
      "type" : 78,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "f",
      "package" : 0,
      "type" : 78,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "f",
      "package" : 0,
      "type" : 78,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "f",
      "package" : 0,
      "type" : 78,
      "exported" : false,
      "embedded" : false,
      "field" : false
    } ]
  },
  "go-version" : "1.14.3"
}