{
  "usage" : {
    "file" : "array_getset.go",
    "label1" : "delegate",
    "label2" : "generics",
    "line" : "72",
    "module" : "gorgonia.org/tensor",
    "pkg" : "gorgonia.org/tensor",
    "project" : "gorgonia/gorgonia",
    "snippet" : "val := reflect.NewAt(a.t.Type, unsafe.Pointer(want))",
    "version" : "v0.9.6"
  },
  "cfg" : {
    "blocks" : [ {
      "update-vars" : [ ],
      "successors" : [ 2 ],
      "in-vars" : [ 19, 17, 18 ],
      "exit" : false,
      "out-vars" : [ 19, 17, 18 ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[entry]",
      "entry" : true,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ ],
      "in-vars" : [ ],
      "exit" : true,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[exit]",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 33, 36, 39, 42, 45, 48, 51, 54, 57 ],
      "in-vars" : [ 17, 18, 19 ],
      "exit" : false,
      "out-vars" : [ 17, 18, 19 ],
      "decl-vars" : [ ],
      "line-start" : 14,
      "ast" : {
        "condition" : {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "function" : 1,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "Kind"
            },
            "go-type" : 83,
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "t",
                "variable" : 20
              },
              "go-type" : 11,
              "kind" : "expression",
              "target" : {
                "go-type" : 5,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "a",
                  "variable" : 17
                }
              },
              "type" : "selector"
            },
            "type" : "selector"
          },
          "go-type" : 48,
          "kind" : "expression",
          "type" : "call"
        },
        "kind" : "statement",
        "type" : "switch"
      },
      "assign-vars" : [ ],
      "line-end" : 75,
      "code" : "switch a.t.Kind() {\ncase reflect.Bool:\n\txv := x.(bool)\n\ta.SetB(i, xv)\ncase reflect.Int:\n\txv := x.(int)\n\ta.SetI(i, xv)\ncase reflect.Int8:\n\txv := x.(int8)\n\ta.SetI8(i, xv)\ncase reflect.Int16:\n\txv := x.(int16)\n\ta.SetI16(i, xv)\ncase reflect.Int32:\n\txv := x.(int32)\n\ta.SetI32(i, xv)\ncase reflect.Int64:\n\txv := x.(int64)\n\ta.SetI64(i, xv)\ncase reflect.Uint:\n\txv := x.(uint)\n\ta.SetU(i, xv)\ncase reflect.Uint8:\n\txv := x.(uint8)\n\ta.SetU8(i, xv)\ncase reflect.Uint16:\n\txv := x.(uint16)\n\ta.SetU16(i, xv)\ncase reflect.Uint32:\n\txv := x.(uint32)\n\ta.SetU32(i, xv)\ncase reflect.Uint64:\n\txv := x.(uint64)\n\ta.SetU64(i, xv)\ncase reflect.Uintptr:\n\txv := x.(uintptr)\n\ta.SetUintptr(i, xv)\ncase reflect.Float32:\n\txv := x.(float32)\n\ta.SetF32(i, xv)\ncase reflect.Float64:\n\txv := x.(float64)\n\ta.SetF64(i, xv)\ncase reflect.Complex64:\n\txv := x.(complex64)\n\ta.SetC64(i, xv)\ncase reflect.Complex128:\n\txv := x.(complex128)\n\ta.SetC128(i, xv)\ncase reflect.String:\n\txv := x.(string)\n\ta.SetStr(i, xv)\ncase reflect.UnsafePointer:\n\txv := x.(unsafe.Pointer)\n\ta.SetUnsafePointer(i, xv)\ndefault:\n\txv := reflect.ValueOf(x)\n\twant := unsafe.Pointer(uintptr(a.Ptr) + uintptr(i)*a.t.Size())\n\tval := reflect.NewAt(a.t.Type, unsafe.Pointer(want))\n\tval = reflect.Indirect(val)\n\tval.Set(xv)\n}",
      "entry" : false,
      "use-vars" : [ 17 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 4 ],
      "in-vars" : [ 17, 18, 19 ],
      "exit" : false,
      "out-vars" : [ 17, 18, 19 ],
      "decl-vars" : [ ],
      "line-start" : 15,
      "ast" : {
        "expressions" : [ {
          "go-type" : 48,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "1"
          }
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 17,
      "code" : "case reflect.Bool:\n\txv := x.(bool)\n\ta.SetB(i, xv)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 5 ],
      "in-vars" : [ 17, 18, 19 ],
      "exit" : false,
      "out-vars" : [ 22, 17, 18 ],
      "decl-vars" : [ 22 ],
      "line-start" : 16,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "xv"
          }
        } ],
        "right" : [ {
          "asserted" : {
            "go-type" : 20,
            "kind" : "type",
            "type" : "identifier",
            "value" : {
              "go-type" : 20,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "bool"
            }
          },
          "go-type" : 20,
          "kind" : "expression",
          "target" : {
            "go-type" : 3,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "x",
              "variable" : 19
            }
          },
          "type" : "type-assert"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 16,
      "code" : "xv := x.(bool)",
      "entry" : false,
      "use-vars" : [ 19 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 17, 18, 22 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 17,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "i",
              "variable" : 18
            }
          }, {
            "go-type" : 20,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "xv",
              "variable" : 22
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "function" : 2,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "SetB"
            },
            "go-type" : 84,
            "kind" : "expression",
            "target" : {
              "go-type" : 5,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "a",
                "variable" : 17
              }
            },
            "type" : "selector"
          },
          "go-type" : 4,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 17,
      "code" : "a.SetB(i, xv)",
      "entry" : false,
      "use-vars" : [ 18, 22, 17 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 7 ],
      "in-vars" : [ 19, 17, 18 ],
      "exit" : false,
      "out-vars" : [ 19, 17, 18 ],
      "decl-vars" : [ ],
      "line-start" : 18,
      "ast" : {
        "expressions" : [ {
          "go-type" : 48,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "2"
          }
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 20,
      "code" : "case reflect.Int:\n\txv := x.(int)\n\ta.SetI(i, xv)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 8 ],
      "in-vars" : [ 17, 18, 19 ],
      "exit" : false,
      "out-vars" : [ 17, 18, 24 ],
      "decl-vars" : [ 24 ],
      "line-start" : 19,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "xv"
          }
        } ],
        "right" : [ {
          "asserted" : {
            "go-type" : 2,
            "kind" : "type",
            "type" : "identifier",
            "value" : {
              "go-type" : 2,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "int"
            }
          },
          "go-type" : 2,
          "kind" : "expression",
          "target" : {
            "go-type" : 3,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "x",
              "variable" : 19
            }
          },
          "type" : "type-assert"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 19,
      "code" : "xv := x.(int)",
      "entry" : false,
      "use-vars" : [ 19 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 17, 18, 24 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 20,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "i",
              "variable" : 18
            }
          }, {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "xv",
              "variable" : 24
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "function" : 3,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "SetI"
            },
            "go-type" : 88,
            "kind" : "expression",
            "target" : {
              "go-type" : 5,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "a",
                "variable" : 17
              }
            },
            "type" : "selector"
          },
          "go-type" : 4,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 20,
      "code" : "a.SetI(i, xv)",
      "entry" : false,
      "use-vars" : [ 17, 18, 24 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 10 ],
      "in-vars" : [ 17, 18, 19 ],
      "exit" : false,
      "out-vars" : [ 19, 17, 18 ],
      "decl-vars" : [ ],
      "line-start" : 21,
      "ast" : {
        "expressions" : [ {
          "go-type" : 48,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "3"
          }
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 23,
      "code" : "case reflect.Int8:\n\txv := x.(int8)\n\ta.SetI8(i, xv)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 11 ],
      "in-vars" : [ 18, 19, 17 ],
      "exit" : false,
      "out-vars" : [ 17, 18, 26 ],
      "decl-vars" : [ 26 ],
      "line-start" : 22,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "xv"
          }
        } ],
        "right" : [ {
          "asserted" : {
            "go-type" : 91,
            "kind" : "type",
            "type" : "identifier",
            "value" : {
              "go-type" : 91,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "int8"
            }
          },
          "go-type" : 91,
          "kind" : "expression",
          "target" : {
            "go-type" : 3,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "x",
              "variable" : 19
            }
          },
          "type" : "type-assert"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 22,
      "code" : "xv := x.(int8)",
      "entry" : false,
      "use-vars" : [ 19 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 17, 18, 26 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 23,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "i",
              "variable" : 18
            }
          }, {
            "go-type" : 91,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "xv",
              "variable" : 26
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "function" : 4,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "SetI8"
            },
            "go-type" : 92,
            "kind" : "expression",
            "target" : {
              "go-type" : 5,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "a",
                "variable" : 17
              }
            },
            "type" : "selector"
          },
          "go-type" : 4,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 23,
      "code" : "a.SetI8(i, xv)",
      "entry" : false,
      "use-vars" : [ 17, 18, 26 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 13 ],
      "in-vars" : [ 19, 17, 18 ],
      "exit" : false,
      "out-vars" : [ 17, 18, 19 ],
      "decl-vars" : [ ],
      "line-start" : 24,
      "ast" : {
        "expressions" : [ {
          "go-type" : 48,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "4"
          }
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 26,
      "code" : "case reflect.Int16:\n\txv := x.(int16)\n\ta.SetI16(i, xv)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 14 ],
      "in-vars" : [ 17, 18, 19 ],
      "exit" : false,
      "out-vars" : [ 28, 17, 18 ],
      "decl-vars" : [ 28 ],
      "line-start" : 25,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "xv"
          }
        } ],
        "right" : [ {
          "asserted" : {
            "go-type" : 95,
            "kind" : "type",
            "type" : "identifier",
            "value" : {
              "go-type" : 95,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "int16"
            }
          },
          "go-type" : 95,
          "kind" : "expression",
          "target" : {
            "go-type" : 3,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "x",
              "variable" : 19
            }
          },
          "type" : "type-assert"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 25,
      "code" : "xv := x.(int16)",
      "entry" : false,
      "use-vars" : [ 19 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 17, 18, 28 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 26,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "i",
              "variable" : 18
            }
          }, {
            "go-type" : 95,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "xv",
              "variable" : 28
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "function" : 5,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "SetI16"
            },
            "go-type" : 96,
            "kind" : "expression",
            "target" : {
              "go-type" : 5,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "a",
                "variable" : 17
              }
            },
            "type" : "selector"
          },
          "go-type" : 4,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 26,
      "code" : "a.SetI16(i, xv)",
      "entry" : false,
      "use-vars" : [ 17, 18, 28 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 16 ],
      "in-vars" : [ 17, 18, 19 ],
      "exit" : false,
      "out-vars" : [ 17, 18, 19 ],
      "decl-vars" : [ ],
      "line-start" : 27,
      "ast" : {
        "expressions" : [ {
          "go-type" : 48,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "5"
          }
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 29,
      "code" : "case reflect.Int32:\n\txv := x.(int32)\n\ta.SetI32(i, xv)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 17 ],
      "in-vars" : [ 17, 18, 19 ],
      "exit" : false,
      "out-vars" : [ 17, 18, 30 ],
      "decl-vars" : [ 30 ],
      "line-start" : 28,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "xv"
          }
        } ],
        "right" : [ {
          "asserted" : {
            "go-type" : 67,
            "kind" : "type",
            "type" : "identifier",
            "value" : {
              "go-type" : 67,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "int32"
            }
          },
          "go-type" : 67,
          "kind" : "expression",
          "target" : {
            "go-type" : 3,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "x",
              "variable" : 19
            }
          },
          "type" : "type-assert"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 28,
      "code" : "xv := x.(int32)",
      "entry" : false,
      "use-vars" : [ 19 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 17, 18, 30 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 29,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "i",
              "variable" : 18
            }
          }, {
            "go-type" : 67,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "xv",
              "variable" : 30
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "function" : 6,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "SetI32"
            },
            "go-type" : 99,
            "kind" : "expression",
            "target" : {
              "go-type" : 5,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "a",
                "variable" : 17
              }
            },
            "type" : "selector"
          },
          "go-type" : 4,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 29,
      "code" : "a.SetI32(i, xv)",
      "entry" : false,
      "use-vars" : [ 17, 18, 30 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 19 ],
      "in-vars" : [ 17, 18, 19 ],
      "exit" : false,
      "out-vars" : [ 17, 18, 19 ],
      "decl-vars" : [ ],
      "line-start" : 30,
      "ast" : {
        "expressions" : [ {
          "go-type" : 48,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "6"
          }
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 32,
      "code" : "case reflect.Int64:\n\txv := x.(int64)\n\ta.SetI64(i, xv)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 20 ],
      "in-vars" : [ 19, 17, 18 ],
      "exit" : false,
      "out-vars" : [ 17, 18, 32 ],
      "decl-vars" : [ 32 ],
      "line-start" : 31,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "xv"
          }
        } ],
        "right" : [ {
          "asserted" : {
            "go-type" : 102,
            "kind" : "type",
            "type" : "identifier",
            "value" : {
              "go-type" : 102,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "int64"
            }
          },
          "go-type" : 102,
          "kind" : "expression",
          "target" : {
            "go-type" : 3,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "x",
              "variable" : 19
            }
          },
          "type" : "type-assert"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 31,
      "code" : "xv := x.(int64)",
      "entry" : false,
      "use-vars" : [ 19 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 17, 18, 32 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 32,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "i",
              "variable" : 18
            }
          }, {
            "go-type" : 102,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "xv",
              "variable" : 32
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "function" : 7,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "SetI64"
            },
            "go-type" : 103,
            "kind" : "expression",
            "target" : {
              "go-type" : 5,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "a",
                "variable" : 17
              }
            },
            "type" : "selector"
          },
          "go-type" : 4,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 32,
      "code" : "a.SetI64(i, xv)",
      "entry" : false,
      "use-vars" : [ 18, 32, 17 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 22 ],
      "in-vars" : [ 17, 18, 19 ],
      "exit" : false,
      "out-vars" : [ 17, 18, 19 ],
      "decl-vars" : [ ],
      "line-start" : 33,
      "ast" : {
        "expressions" : [ {
          "go-type" : 48,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "7"
          }
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 35,
      "code" : "case reflect.Uint:\n\txv := x.(uint)\n\ta.SetU(i, xv)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 23 ],
      "in-vars" : [ 17, 18, 19 ],
      "exit" : false,
      "out-vars" : [ 34, 17, 18 ],
      "decl-vars" : [ 34 ],
      "line-start" : 34,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "xv"
          }
        } ],
        "right" : [ {
          "asserted" : {
            "go-type" : 49,
            "kind" : "type",
            "type" : "identifier",
            "value" : {
              "go-type" : 49,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "uint"
            }
          },
          "go-type" : 49,
          "kind" : "expression",
          "target" : {
            "go-type" : 3,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "x",
              "variable" : 19
            }
          },
          "type" : "type-assert"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 34,
      "code" : "xv := x.(uint)",
      "entry" : false,
      "use-vars" : [ 19 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 17, 18, 34 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 35,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "i",
              "variable" : 18
            }
          }, {
            "go-type" : 49,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "xv",
              "variable" : 34
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "function" : 8,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "SetU"
            },
            "go-type" : 106,
            "kind" : "expression",
            "target" : {
              "go-type" : 5,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "a",
                "variable" : 17
              }
            },
            "type" : "selector"
          },
          "go-type" : 4,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 35,
      "code" : "a.SetU(i, xv)",
      "entry" : false,
      "use-vars" : [ 17, 18, 34 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 25 ],
      "in-vars" : [ 19, 17, 18 ],
      "exit" : false,
      "out-vars" : [ 17, 18, 19 ],
      "decl-vars" : [ ],
      "line-start" : 36,
      "ast" : {
        "expressions" : [ {
          "go-type" : 48,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "8"
          }
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 38,
      "code" : "case reflect.Uint8:\n\txv := x.(uint8)\n\ta.SetU8(i, xv)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 26 ],
      "in-vars" : [ 17, 18, 19 ],
      "exit" : false,
      "out-vars" : [ 36, 17, 18 ],
      "decl-vars" : [ 36 ],
      "line-start" : 37,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "xv"
          }
        } ],
        "right" : [ {
          "asserted" : {
            "go-type" : 61,
            "kind" : "type",
            "type" : "identifier",
            "value" : {
              "go-type" : 61,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "uint8"
            }
          },
          "go-type" : 61,
          "kind" : "expression",
          "target" : {
            "go-type" : 3,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "x",
              "variable" : 19
            }
          },
          "type" : "type-assert"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 37,
      "code" : "xv := x.(uint8)",
      "entry" : false,
      "use-vars" : [ 19 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 17, 18, 36 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 38,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "i",
              "variable" : 18
            }
          }, {
            "go-type" : 61,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "xv",
              "variable" : 36
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "function" : 9,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "SetU8"
            },
            "go-type" : 109,
            "kind" : "expression",
            "target" : {
              "go-type" : 5,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "a",
                "variable" : 17
              }
            },
            "type" : "selector"
          },
          "go-type" : 4,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 38,
      "code" : "a.SetU8(i, xv)",
      "entry" : false,
      "use-vars" : [ 17, 18, 36 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 28 ],
      "in-vars" : [ 18, 19, 17 ],
      "exit" : false,
      "out-vars" : [ 18, 19, 17 ],
      "decl-vars" : [ ],
      "line-start" : 39,
      "ast" : {
        "expressions" : [ {
          "go-type" : 48,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "9"
          }
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 41,
      "code" : "case reflect.Uint16:\n\txv := x.(uint16)\n\ta.SetU16(i, xv)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 29 ],
      "in-vars" : [ 17, 18, 19 ],
      "exit" : false,
      "out-vars" : [ 18, 38, 17 ],
      "decl-vars" : [ 38 ],
      "line-start" : 40,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "xv"
          }
        } ],
        "right" : [ {
          "asserted" : {
            "go-type" : 82,
            "kind" : "type",
            "type" : "identifier",
            "value" : {
              "go-type" : 82,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "uint16"
            }
          },
          "go-type" : 82,
          "kind" : "expression",
          "target" : {
            "go-type" : 3,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "x",
              "variable" : 19
            }
          },
          "type" : "type-assert"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 40,
      "code" : "xv := x.(uint16)",
      "entry" : false,
      "use-vars" : [ 19 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 17, 18, 38 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 41,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "i",
              "variable" : 18
            }
          }, {
            "go-type" : 82,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "xv",
              "variable" : 38
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "function" : 10,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "SetU16"
            },
            "go-type" : 112,
            "kind" : "expression",
            "target" : {
              "go-type" : 5,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "a",
                "variable" : 17
              }
            },
            "type" : "selector"
          },
          "go-type" : 4,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 41,
      "code" : "a.SetU16(i, xv)",
      "entry" : false,
      "use-vars" : [ 38, 17, 18 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 31 ],
      "in-vars" : [ 17, 18, 19 ],
      "exit" : false,
      "out-vars" : [ 18, 19, 17 ],
      "decl-vars" : [ ],
      "line-start" : 42,
      "ast" : {
        "expressions" : [ {
          "go-type" : 48,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "10"
          }
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 44,
      "code" : "case reflect.Uint32:\n\txv := x.(uint32)\n\ta.SetU32(i, xv)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 32 ],
      "in-vars" : [ 17, 18, 19 ],
      "exit" : false,
      "out-vars" : [ 17, 18, 40 ],
      "decl-vars" : [ 40 ],
      "line-start" : 43,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "xv"
          }
        } ],
        "right" : [ {
          "asserted" : {
            "go-type" : 59,
            "kind" : "type",
            "type" : "identifier",
            "value" : {
              "go-type" : 59,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "uint32"
            }
          },
          "go-type" : 59,
          "kind" : "expression",
          "target" : {
            "go-type" : 3,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "x",
              "variable" : 19
            }
          },
          "type" : "type-assert"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 43,
      "code" : "xv := x.(uint32)",
      "entry" : false,
      "use-vars" : [ 19 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 17, 18, 40 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 44,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "i",
              "variable" : 18
            }
          }, {
            "go-type" : 59,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "xv",
              "variable" : 40
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "function" : 11,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "SetU32"
            },
            "go-type" : 115,
            "kind" : "expression",
            "target" : {
              "go-type" : 5,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "a",
                "variable" : 17
              }
            },
            "type" : "selector"
          },
          "go-type" : 4,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 44,
      "code" : "a.SetU32(i, xv)",
      "entry" : false,
      "use-vars" : [ 17, 18, 40 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 34 ],
      "in-vars" : [ 17, 18, 19 ],
      "exit" : false,
      "out-vars" : [ 18, 19, 17 ],
      "decl-vars" : [ ],
      "line-start" : 45,
      "ast" : {
        "expressions" : [ {
          "go-type" : 48,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "11"
          }
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 47,
      "code" : "case reflect.Uint64:\n\txv := x.(uint64)\n\ta.SetU64(i, xv)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 35 ],
      "in-vars" : [ 17, 18, 19 ],
      "exit" : false,
      "out-vars" : [ 17, 18, 42 ],
      "decl-vars" : [ 42 ],
      "line-start" : 46,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "xv"
          }
        } ],
        "right" : [ {
          "asserted" : {
            "go-type" : 118,
            "kind" : "type",
            "type" : "identifier",
            "value" : {
              "go-type" : 118,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "uint64"
            }
          },
          "go-type" : 118,
          "kind" : "expression",
          "target" : {
            "go-type" : 3,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "x",
              "variable" : 19
            }
          },
          "type" : "type-assert"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 46,
      "code" : "xv := x.(uint64)",
      "entry" : false,
      "use-vars" : [ 19 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 17, 18, 42 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 47,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "i",
              "variable" : 18
            }
          }, {
            "go-type" : 118,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "xv",
              "variable" : 42
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "function" : 12,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "SetU64"
            },
            "go-type" : 119,
            "kind" : "expression",
            "target" : {
              "go-type" : 5,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "a",
                "variable" : 17
              }
            },
            "type" : "selector"
          },
          "go-type" : 4,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 47,
      "code" : "a.SetU64(i, xv)",
      "entry" : false,
      "use-vars" : [ 17, 18, 42 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 37 ],
      "in-vars" : [ 17, 18, 19 ],
      "exit" : false,
      "out-vars" : [ 18, 19, 17 ],
      "decl-vars" : [ ],
      "line-start" : 48,
      "ast" : {
        "expressions" : [ {
          "go-type" : 48,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "12"
          }
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 50,
      "code" : "case reflect.Uintptr:\n\txv := x.(uintptr)\n\ta.SetUintptr(i, xv)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 38 ],
      "in-vars" : [ 18, 19, 17 ],
      "exit" : false,
      "out-vars" : [ 17, 18, 44 ],
      "decl-vars" : [ 44 ],
      "line-start" : 49,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "xv"
          }
        } ],
        "right" : [ {
          "asserted" : {
            "go-type" : 34,
            "kind" : "type",
            "type" : "identifier",
            "value" : {
              "go-type" : 34,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "uintptr"
            }
          },
          "go-type" : 34,
          "kind" : "expression",
          "target" : {
            "go-type" : 3,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "x",
              "variable" : 19
            }
          },
          "type" : "type-assert"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 49,
      "code" : "xv := x.(uintptr)",
      "entry" : false,
      "use-vars" : [ 19 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 17, 18, 44 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 50,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "i",
              "variable" : 18
            }
          }, {
            "go-type" : 34,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "xv",
              "variable" : 44
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "function" : 13,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "SetUintptr"
            },
            "go-type" : 122,
            "kind" : "expression",
            "target" : {
              "go-type" : 5,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "a",
                "variable" : 17
              }
            },
            "type" : "selector"
          },
          "go-type" : 4,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 50,
      "code" : "a.SetUintptr(i, xv)",
      "entry" : false,
      "use-vars" : [ 18, 44, 17 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 40 ],
      "in-vars" : [ 17, 18, 19 ],
      "exit" : false,
      "out-vars" : [ 17, 18, 19 ],
      "decl-vars" : [ ],
      "line-start" : 51,
      "ast" : {
        "expressions" : [ {
          "go-type" : 48,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "13"
          }
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 53,
      "code" : "case reflect.Float32:\n\txv := x.(float32)\n\ta.SetF32(i, xv)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 41 ],
      "in-vars" : [ 17, 18, 19 ],
      "exit" : false,
      "out-vars" : [ 18, 46, 17 ],
      "decl-vars" : [ 46 ],
      "line-start" : 52,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "xv"
          }
        } ],
        "right" : [ {
          "asserted" : {
            "go-type" : 125,
            "kind" : "type",
            "type" : "identifier",
            "value" : {
              "go-type" : 125,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "float32"
            }
          },
          "go-type" : 125,
          "kind" : "expression",
          "target" : {
            "go-type" : 3,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "x",
              "variable" : 19
            }
          },
          "type" : "type-assert"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 52,
      "code" : "xv := x.(float32)",
      "entry" : false,
      "use-vars" : [ 19 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 17, 18, 46 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 53,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "i",
              "variable" : 18
            }
          }, {
            "go-type" : 125,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "xv",
              "variable" : 46
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "function" : 14,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "SetF32"
            },
            "go-type" : 126,
            "kind" : "expression",
            "target" : {
              "go-type" : 5,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "a",
                "variable" : 17
              }
            },
            "type" : "selector"
          },
          "go-type" : 4,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 53,
      "code" : "a.SetF32(i, xv)",
      "entry" : false,
      "use-vars" : [ 17, 18, 46 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 43 ],
      "in-vars" : [ 17, 18, 19 ],
      "exit" : false,
      "out-vars" : [ 19, 17, 18 ],
      "decl-vars" : [ ],
      "line-start" : 54,
      "ast" : {
        "expressions" : [ {
          "go-type" : 48,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "14"
          }
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 56,
      "code" : "case reflect.Float64:\n\txv := x.(float64)\n\ta.SetF64(i, xv)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 44 ],
      "in-vars" : [ 17, 18, 19 ],
      "exit" : false,
      "out-vars" : [ 17, 18, 48 ],
      "decl-vars" : [ 48 ],
      "line-start" : 55,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "xv"
          }
        } ],
        "right" : [ {
          "asserted" : {
            "go-type" : 129,
            "kind" : "type",
            "type" : "identifier",
            "value" : {
              "go-type" : 129,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "float64"
            }
          },
          "go-type" : 129,
          "kind" : "expression",
          "target" : {
            "go-type" : 3,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "x",
              "variable" : 19
            }
          },
          "type" : "type-assert"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 55,
      "code" : "xv := x.(float64)",
      "entry" : false,
      "use-vars" : [ 19 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 18, 48, 17 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 56,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "i",
              "variable" : 18
            }
          }, {
            "go-type" : 129,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "xv",
              "variable" : 48
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "function" : 15,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "SetF64"
            },
            "go-type" : 130,
            "kind" : "expression",
            "target" : {
              "go-type" : 5,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "a",
                "variable" : 17
              }
            },
            "type" : "selector"
          },
          "go-type" : 4,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 56,
      "code" : "a.SetF64(i, xv)",
      "entry" : false,
      "use-vars" : [ 48, 17, 18 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 46 ],
      "in-vars" : [ 18, 19, 17 ],
      "exit" : false,
      "out-vars" : [ 18, 19, 17 ],
      "decl-vars" : [ ],
      "line-start" : 57,
      "ast" : {
        "expressions" : [ {
          "go-type" : 48,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "15"
          }
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 59,
      "code" : "case reflect.Complex64:\n\txv := x.(complex64)\n\ta.SetC64(i, xv)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 47 ],
      "in-vars" : [ 19, 17, 18 ],
      "exit" : false,
      "out-vars" : [ 17, 18, 50 ],
      "decl-vars" : [ 50 ],
      "line-start" : 58,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "xv"
          }
        } ],
        "right" : [ {
          "asserted" : {
            "go-type" : 133,
            "kind" : "type",
            "type" : "identifier",
            "value" : {
              "go-type" : 133,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "complex64"
            }
          },
          "go-type" : 133,
          "kind" : "expression",
          "target" : {
            "go-type" : 3,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "x",
              "variable" : 19
            }
          },
          "type" : "type-assert"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 58,
      "code" : "xv := x.(complex64)",
      "entry" : false,
      "use-vars" : [ 19 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 50, 17, 18 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 59,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "i",
              "variable" : 18
            }
          }, {
            "go-type" : 133,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "xv",
              "variable" : 50
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "function" : 16,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "SetC64"
            },
            "go-type" : 134,
            "kind" : "expression",
            "target" : {
              "go-type" : 5,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "a",
                "variable" : 17
              }
            },
            "type" : "selector"
          },
          "go-type" : 4,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 59,
      "code" : "a.SetC64(i, xv)",
      "entry" : false,
      "use-vars" : [ 18, 50, 17 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 49 ],
      "in-vars" : [ 17, 18, 19 ],
      "exit" : false,
      "out-vars" : [ 17, 18, 19 ],
      "decl-vars" : [ ],
      "line-start" : 60,
      "ast" : {
        "expressions" : [ {
          "go-type" : 48,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "16"
          }
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 62,
      "code" : "case reflect.Complex128:\n\txv := x.(complex128)\n\ta.SetC128(i, xv)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 50 ],
      "in-vars" : [ 18, 19, 17 ],
      "exit" : false,
      "out-vars" : [ 17, 18, 52 ],
      "decl-vars" : [ 52 ],
      "line-start" : 61,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "xv"
          }
        } ],
        "right" : [ {
          "asserted" : {
            "go-type" : 137,
            "kind" : "type",
            "type" : "identifier",
            "value" : {
              "go-type" : 137,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "complex128"
            }
          },
          "go-type" : 137,
          "kind" : "expression",
          "target" : {
            "go-type" : 3,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "x",
              "variable" : 19
            }
          },
          "type" : "type-assert"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 61,
      "code" : "xv := x.(complex128)",
      "entry" : false,
      "use-vars" : [ 19 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 17, 18, 52 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 62,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "i",
              "variable" : 18
            }
          }, {
            "go-type" : 137,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "xv",
              "variable" : 52
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "function" : 17,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "SetC128"
            },
            "go-type" : 138,
            "kind" : "expression",
            "target" : {
              "go-type" : 5,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "a",
                "variable" : 17
              }
            },
            "type" : "selector"
          },
          "go-type" : 4,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 62,
      "code" : "a.SetC128(i, xv)",
      "entry" : false,
      "use-vars" : [ 17, 18, 52 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 52 ],
      "in-vars" : [ 17, 18, 19 ],
      "exit" : false,
      "out-vars" : [ 17, 18, 19 ],
      "decl-vars" : [ ],
      "line-start" : 63,
      "ast" : {
        "expressions" : [ {
          "go-type" : 48,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "24"
          }
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 65,
      "code" : "case reflect.String:\n\txv := x.(string)\n\ta.SetStr(i, xv)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 53 ],
      "in-vars" : [ 17, 18, 19 ],
      "exit" : false,
      "out-vars" : [ 17, 18, 54 ],
      "decl-vars" : [ 54 ],
      "line-start" : 64,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "xv"
          }
        } ],
        "right" : [ {
          "asserted" : {
            "go-type" : 32,
            "kind" : "type",
            "type" : "identifier",
            "value" : {
              "go-type" : 32,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "string"
            }
          },
          "go-type" : 32,
          "kind" : "expression",
          "target" : {
            "go-type" : 3,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "x",
              "variable" : 19
            }
          },
          "type" : "type-assert"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 64,
      "code" : "xv := x.(string)",
      "entry" : false,
      "use-vars" : [ 19 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 17, 18, 54 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 65,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "i",
              "variable" : 18
            }
          }, {
            "go-type" : 32,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "xv",
              "variable" : 54
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "function" : 18,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "SetStr"
            },
            "go-type" : 141,
            "kind" : "expression",
            "target" : {
              "go-type" : 5,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "a",
                "variable" : 17
              }
            },
            "type" : "selector"
          },
          "go-type" : 4,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 65,
      "code" : "a.SetStr(i, xv)",
      "entry" : false,
      "use-vars" : [ 18, 54, 17 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 55 ],
      "in-vars" : [ 17, 18, 19 ],
      "exit" : false,
      "out-vars" : [ 17, 18, 19 ],
      "decl-vars" : [ ],
      "line-start" : 66,
      "ast" : {
        "expressions" : [ {
          "go-type" : 48,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "26"
          }
        } ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 68,
      "code" : "case reflect.UnsafePointer:\n\txv := x.(unsafe.Pointer)\n\ta.SetUnsafePointer(i, xv)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 56 ],
      "in-vars" : [ 17, 18, 19 ],
      "exit" : false,
      "out-vars" : [ 17, 18, 56 ],
      "decl-vars" : [ 56 ],
      "line-start" : 67,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "xv"
          }
        } ],
        "right" : [ {
          "asserted" : {
            "go-type" : 10,
            "kind" : "type",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 2,
              "value" : "unsafe"
            },
            "type" : "identifier",
            "value" : {
              "go-type" : 10,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "Pointer"
            }
          },
          "go-type" : 10,
          "kind" : "expression",
          "target" : {
            "go-type" : 3,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "x",
              "variable" : 19
            }
          },
          "type" : "type-assert"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 67,
      "code" : "xv := x.(unsafe.Pointer)",
      "entry" : false,
      "use-vars" : [ 19 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 17, 18, 56 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 68,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "i",
              "variable" : 18
            }
          }, {
            "go-type" : 10,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "xv",
              "variable" : 56
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "function" : 19,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "SetUnsafePointer"
            },
            "go-type" : 144,
            "kind" : "expression",
            "target" : {
              "go-type" : 5,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "a",
                "variable" : 17
              }
            },
            "type" : "selector"
          },
          "go-type" : 4,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 68,
      "code" : "a.SetUnsafePointer(i, xv)",
      "entry" : false,
      "use-vars" : [ 18, 56, 17 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 58 ],
      "in-vars" : [ 17, 18, 19 ],
      "exit" : false,
      "out-vars" : [ 17, 18, 19 ],
      "decl-vars" : [ ],
      "line-start" : 69,
      "ast" : {
        "expressions" : [ ],
        "kind" : "statement",
        "type" : "case-clause"
      },
      "assign-vars" : [ ],
      "line-end" : 74,
      "code" : "default:\n\txv := reflect.ValueOf(x)\n\twant := unsafe.Pointer(uintptr(a.Ptr) + uintptr(i)*a.t.Size())\n\tval := reflect.NewAt(a.t.Type, unsafe.Pointer(want))\n\tval = reflect.Indirect(val)\n\tval.Set(xv)",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 59 ],
      "in-vars" : [ 19, 17, 18 ],
      "exit" : false,
      "out-vars" : [ 62, 17, 18 ],
      "decl-vars" : [ 62 ],
      "line-start" : 70,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "xv"
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 3,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "x",
              "variable" : 19
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 147,
            "kind" : "expression",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 3,
              "value" : "reflect"
            },
            "type" : "identifier",
            "value" : {
              "function" : 20,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "ValueOf"
            }
          },
          "go-type" : 54,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 70,
      "code" : "xv := reflect.ValueOf(x)",
      "entry" : false,
      "use-vars" : [ 19 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 60 ],
      "in-vars" : [ 62, 17, 18 ],
      "exit" : false,
      "out-vars" : [ 59, 62, 17 ],
      "decl-vars" : [ 59 ],
      "line-start" : 71,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "want"
          }
        } ],
        "right" : [ {
          "coerced-to" : {
            "go-type" : 10,
            "kind" : "type",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 2,
              "value" : "unsafe"
            },
            "type" : "identifier",
            "value" : {
              "go-type" : 10,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "Pointer"
            }
          },
          "go-type" : 10,
          "kind" : "expression",
          "target" : {
            "go-type" : 34,
            "kind" : "expression",
            "left" : {
              "coerced-to" : {
                "go-type" : 34,
                "kind" : "type",
                "type" : "identifier",
                "value" : {
                  "go-type" : 34,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "uintptr"
                }
              },
              "go-type" : 34,
              "kind" : "expression",
              "target" : {
                "field" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "Ptr",
                  "variable" : 57
                },
                "go-type" : 10,
                "kind" : "expression",
                "target" : {
                  "go-type" : 5,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "a",
                    "variable" : 17
                  }
                },
                "type" : "selector"
              },
              "type" : "cast"
            },
            "operator" : "+",
            "right" : {
              "go-type" : 34,
              "kind" : "expression",
              "left" : {
                "coerced-to" : {
                  "go-type" : 34,
                  "kind" : "type",
                  "type" : "identifier",
                  "value" : {
                    "go-type" : 34,
                    "ident-kind" : "TypeName",
                    "kind" : "ident",
                    "value" : "uintptr"
                  }
                },
                "go-type" : 34,
                "kind" : "expression",
                "target" : {
                  "go-type" : 2,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "i",
                    "variable" : 18
                  }
                },
                "type" : "cast"
              },
              "operator" : "*",
              "right" : {
                "arguments" : [ ],
                "ellipsis" : false,
                "function" : {
                  "field" : {
                    "function" : 21,
                    "ident-kind" : "Func",
                    "kind" : "ident",
                    "value" : "Size"
                  },
                  "go-type" : 150,
                  "kind" : "expression",
                  "target" : {
                    "field" : {
                      "ident-kind" : "Var",
                      "kind" : "ident",
                      "value" : "t",
                      "variable" : 20
                    },
                    "go-type" : 11,
                    "kind" : "expression",
                    "target" : {
                      "go-type" : 5,
                      "kind" : "expression",
                      "type" : "identifier",
                      "value" : {
                        "ident-kind" : "Var",
                        "kind" : "ident",
                        "value" : "a",
                        "variable" : 17
                      }
                    },
                    "type" : "selector"
                  },
                  "type" : "selector"
                },
                "go-type" : 34,
                "kind" : "expression",
                "type" : "call"
              },
              "type" : "binary"
            },
            "type" : "binary"
          },
          "type" : "cast"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 71,
      "code" : "want := unsafe.Pointer(uintptr(a.Ptr) + uintptr(i)*a.t.Size())",
      "entry" : false,
      "use-vars" : [ 18, 17 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 61 ],
      "in-vars" : [ 59, 62, 17 ],
      "exit" : false,
      "out-vars" : [ 60, 62 ],
      "decl-vars" : [ 60 ],
      "line-start" : 72,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "val"
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "Type",
              "variable" : 58
            },
            "go-type" : 13,
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "t",
                "variable" : 20
              },
              "go-type" : 11,
              "kind" : "expression",
              "target" : {
                "go-type" : 5,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "a",
                  "variable" : 17
                }
              },
              "type" : "selector"
            },
            "type" : "selector"
          }, {
            "coerced-to" : {
              "go-type" : 10,
              "kind" : "type",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 2,
                "value" : "unsafe"
              },
              "type" : "identifier",
              "value" : {
                "go-type" : 10,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "Pointer"
              }
            },
            "go-type" : 10,
            "kind" : "expression",
            "target" : {
              "go-type" : 10,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "want",
                "variable" : 59
              }
            },
            "type" : "cast"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 151,
            "kind" : "expression",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 3,
              "value" : "reflect"
            },
            "type" : "identifier",
            "value" : {
              "function" : 22,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "NewAt"
            }
          },
          "go-type" : 54,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 72,
      "code" : "val := reflect.NewAt(a.t.Type, unsafe.Pointer(want))",
      "entry" : false,
      "use-vars" : [ 59, 17 ]
    }, {
      "update-vars" : [ 60 ],
      "successors" : [ 62 ],
      "in-vars" : [ 62, 60 ],
      "exit" : false,
      "out-vars" : [ 60, 62 ],
      "decl-vars" : [ ],
      "line-start" : 73,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 54,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "val",
            "variable" : 60
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 54,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "val",
              "variable" : 60
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 153,
            "kind" : "expression",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 3,
              "value" : "reflect"
            },
            "type" : "identifier",
            "value" : {
              "function" : 23,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "Indirect"
            }
          },
          "go-type" : 54,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ 60 ],
      "line-end" : 73,
      "code" : "val = reflect.Indirect(val)",
      "entry" : false,
      "use-vars" : [ 60 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 62, 60 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 74,
      "ast" : {
        "kind" : "statement",
        "type" : "expression",
        "value" : {
          "arguments" : [ {
            "go-type" : 54,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "xv",
              "variable" : 62
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "function" : 24,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "Set"
            },
            "go-type" : 155,
            "kind" : "expression",
            "target" : {
              "go-type" : 54,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "val",
                "variable" : 60
              }
            },
            "type" : "selector"
          },
          "go-type" : 4,
          "kind" : "expression",
          "type" : "call"
        }
      },
      "assign-vars" : [ ],
      "line-end" : 74,
      "code" : "val.Set(xv)",
      "entry" : false,
      "use-vars" : [ 60, 62 ]
    } ],
    "code" : "// Set sets the value of the underlying array at the index i.\nfunc (a *array) Set(i int, x interface{}) {\n\tswitch a.t.Kind() {\n\tcase reflect.Bool:\n\t\txv := x.(bool)\n\t\ta.SetB(i, xv)\n\tcase reflect.Int:\n\t\txv := x.(int)\n\t\ta.SetI(i, xv)\n\tcase reflect.Int8:\n\t\txv := x.(int8)\n\t\ta.SetI8(i, xv)\n\tcase reflect.Int16:\n\t\txv := x.(int16)\n\t\ta.SetI16(i, xv)\n\tcase reflect.Int32:\n\t\txv := x.(int32)\n\t\ta.SetI32(i, xv)\n\tcase reflect.Int64:\n\t\txv := x.(int64)\n\t\ta.SetI64(i, xv)\n\tcase reflect.Uint:\n\t\txv := x.(uint)\n\t\ta.SetU(i, xv)\n\tcase reflect.Uint8:\n\t\txv := x.(uint8)\n\t\ta.SetU8(i, xv)\n\tcase reflect.Uint16:\n\t\txv := x.(uint16)\n\t\ta.SetU16(i, xv)\n\tcase reflect.Uint32:\n\t\txv := x.(uint32)\n\t\ta.SetU32(i, xv)\n\tcase reflect.Uint64:\n\t\txv := x.(uint64)\n\t\ta.SetU64(i, xv)\n\tcase reflect.Uintptr:\n\t\txv := x.(uintptr)\n\t\ta.SetUintptr(i, xv)\n\tcase reflect.Float32:\n\t\txv := x.(float32)\n\t\ta.SetF32(i, xv)\n\tcase reflect.Float64:\n\t\txv := x.(float64)\n\t\ta.SetF64(i, xv)\n\tcase reflect.Complex64:\n\t\txv := x.(complex64)\n\t\ta.SetC64(i, xv)\n\tcase reflect.Complex128:\n\t\txv := x.(complex128)\n\t\ta.SetC128(i, xv)\n\tcase reflect.String:\n\t\txv := x.(string)\n\t\ta.SetStr(i, xv)\n\tcase reflect.UnsafePointer:\n\t\txv := x.(unsafe.Pointer)\n\t\ta.SetUnsafePointer(i, xv)\n\tdefault:\n\t\txv := reflect.ValueOf(x)\n\t\twant := unsafe.Pointer(uintptr(a.Ptr) + uintptr(i)*a.t.Size())\n\t\tval := reflect.NewAt(a.t.Type, unsafe.Pointer(want))\n\t\tval = reflect.Indirect(val)\n\t\tval.Set(xv)\n\t}\n}",
    "defines" : [ 0 ],
    "functions" : [ {
      "name" : "Set",
      "package" : 0,
      "type" : 0,
      "exported" : true
    }, {
      "name" : "Kind",
      "package" : 3,
      "type" : 46,
      "exported" : true
    }, {
      "name" : "SetB",
      "package" : 1,
      "type" : 86,
      "exported" : true
    }, {
      "name" : "SetI",
      "package" : 1,
      "type" : 90,
      "exported" : true
    }, {
      "name" : "SetI8",
      "package" : 1,
      "type" : 94,
      "exported" : true
    }, {
      "name" : "SetI16",
      "package" : 1,
      "type" : 98,
      "exported" : true
    }, {
      "name" : "SetI32",
      "package" : 1,
      "type" : 101,
      "exported" : true
    }, {
      "name" : "SetI64",
      "package" : 1,
      "type" : 105,
      "exported" : true
    }, {
      "name" : "SetU",
      "package" : 1,
      "type" : 108,
      "exported" : true
    }, {
      "name" : "SetU8",
      "package" : 1,
      "type" : 111,
      "exported" : true
    }, {
      "name" : "SetU16",
      "package" : 1,
      "type" : 114,
      "exported" : true
    }, {
      "name" : "SetU32",
      "package" : 1,
      "type" : 117,
      "exported" : true
    }, {
      "name" : "SetU64",
      "package" : 1,
      "type" : 121,
      "exported" : true
    }, {
      "name" : "SetUintptr",
      "package" : 1,
      "type" : 124,
      "exported" : true
    }, {
      "name" : "SetF32",
      "package" : 1,
      "type" : 128,
      "exported" : true
    }, {
      "name" : "SetF64",
      "package" : 1,
      "type" : 132,
      "exported" : true
    }, {
      "name" : "SetC64",
      "package" : 1,
      "type" : 136,
      "exported" : true
    }, {
      "name" : "SetC128",
      "package" : 1,
      "type" : 140,
      "exported" : true
    }, {
      "name" : "SetStr",
      "package" : 1,
      "type" : 143,
      "exported" : true
    }, {
      "name" : "SetUnsafePointer",
      "package" : 1,
      "type" : 146,
      "exported" : true
    }, {
      "name" : "ValueOf",
      "package" : 3,
      "type" : 147,
      "exported" : true
    }, {
      "name" : "Size",
      "package" : 3,
      "type" : 73,
      "exported" : true
    }, {
      "name" : "NewAt",
      "package" : 3,
      "type" : 151,
      "exported" : true
    }, {
      "name" : "Indirect",
      "package" : 3,
      "type" : 153,
      "exported" : true
    }, {
      "name" : "Set",
      "package" : 3,
      "type" : 157,
      "exported" : true
    } ],
    "line-end" : 76,
    "line-start" : 13,
    "names" : [ "Set" ],
    "package" : 0,
    "packages" : [ {
      "name" : "tensor",
      "path" : "gorgonia.org/tensor"
    }, {
      "name" : "storage",
      "path" : "gorgonia.org/tensor/internal/storage"
    }, {
      "name" : "unsafe",
      "path" : "unsafe"
    }, {
      "name" : "reflect",
      "path" : "reflect"
    } ],
    "params" : [ 18, 19 ],
    "receivers" : [ 17 ],
    "results" : [ ],
    "type" : "function",
    "types" : [ {
      "name" : "(*gorgonia.org/tensor.array) func(i int, x interface{})",
      "params" : 1,
      "recv" : 17,
      "results" : 4,
      "type" : "Signature",
      "underlying" : 0,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "i",
        "type" : 2
      }, {
        "name" : "x",
        "type" : 3
      } ],
      "name" : "(i int, x interface{})",
      "type" : "Tuple",
      "underlying" : 1
    }, {
      "name" : "int",
      "type" : "Basic",
      "underlying" : 2
    }, {
      "methods" : [ ],
      "name" : "interface{}",
      "type" : "Interface",
      "underlying" : 3
    }, {
      "fields" : [ ],
      "name" : "()",
      "type" : "Tuple",
      "underlying" : 4
    }, {
      "elem" : 6,
      "name" : "*gorgonia.org/tensor.array",
      "type" : "Pointer",
      "underlying" : 5
    }, {
      "local-name" : "array",
      "name" : "gorgonia.org/tensor.array",
      "package" : 0,
      "type" : "Named",
      "underlying" : 7
    }, {
      "fields" : [ {
        "name" : "Header",
        "type" : 8
      }, {
        "name" : "t",
        "type" : 11
      }, {
        "name" : "v",
        "type" : 3
      } ],
      "name" : "struct{gorgonia.org/tensor/internal/storage.Header; t gorgonia.org/tensor.Dtype; v interface{}}",
      "type" : "Struct",
      "underlying" : 7
    }, {
      "local-name" : "Header",
      "name" : "gorgonia.org/tensor/internal/storage.Header",
      "package" : 1,
      "type" : "Named",
      "underlying" : 9
    }, {
      "fields" : [ {
        "name" : "Ptr",
        "type" : 10
      }, {
        "name" : "L",
        "type" : 2
      }, {
        "name" : "C",
        "type" : 2
      } ],
      "name" : "struct{Ptr unsafe.Pointer; L int; C int}",
      "type" : "Struct",
      "underlying" : 9
    }, {
      "local-name" : "Pointer",
      "name" : "unsafe.Pointer",
      "package" : 2,
      "type" : "Basic",
      "underlying" : 10
    }, {
      "local-name" : "Dtype",
      "name" : "gorgonia.org/tensor.Dtype",
      "package" : 0,
      "type" : "Named",
      "underlying" : 12
    }, {
      "fields" : [ {
        "name" : "Type",
        "type" : 13
      } ],
      "name" : "struct{reflect.Type}",
      "type" : "Struct",
      "underlying" : 12
    }, {
      "local-name" : "Type",
      "name" : "reflect.Type",
      "package" : 3,
      "type" : "Named",
      "underlying" : 14
    }, {
      "methods" : [ {
        "name" : "Align",
        "type" : 15
      }, {
        "name" : "AssignableTo",
        "type" : 17
      }, {
        "name" : "Bits",
        "type" : 15
      }, {
        "name" : "ChanDir",
        "type" : 21
      }, {
        "name" : "Comparable",
        "type" : 24
      }, {
        "name" : "ConvertibleTo",
        "type" : 17
      }, {
        "name" : "Elem",
        "type" : 25
      }, {
        "name" : "Field",
        "type" : 27
      }, {
        "name" : "FieldAlign",
        "type" : 15
      }, {
        "name" : "FieldByIndex",
        "type" : 36
      }, {
        "name" : "FieldByName",
        "type" : 38
      }, {
        "name" : "FieldByNameFunc",
        "type" : 41
      }, {
        "name" : "Implements",
        "type" : 17
      }, {
        "name" : "In",
        "type" : 45
      }, {
        "name" : "IsVariadic",
        "type" : 24
      }, {
        "name" : "Key",
        "type" : 25
      }, {
        "name" : "Kind",
        "type" : 46
      }, {
        "name" : "Len",
        "type" : 15
      }, {
        "name" : "Method",
        "type" : 50
      }, {
        "name" : "MethodByName",
        "type" : 70
      }, {
        "name" : "Name",
        "type" : 72
      }, {
        "name" : "NumField",
        "type" : 15
      }, {
        "name" : "NumIn",
        "type" : 15
      }, {
        "name" : "NumMethod",
        "type" : 15
      }, {
        "name" : "NumOut",
        "type" : 15
      }, {
        "name" : "Out",
        "type" : 45
      }, {
        "name" : "PkgPath",
        "type" : 72
      }, {
        "name" : "Size",
        "type" : 73
      }, {
        "name" : "String",
        "type" : 72
      }, {
        "name" : "common",
        "type" : 75
      }, {
        "name" : "uncommon",
        "type" : 77
      } ],
      "name" : "interface{Align() int; AssignableTo(u reflect.Type) bool; Bits() int; ChanDir() reflect.ChanDir; Comparable() bool; ConvertibleTo(u reflect.Type) bool; Elem() reflect.Type; Field(i int) reflect.StructField; FieldAlign() int; FieldByIndex(index []int) reflect.StructField; FieldByName(name string) (reflect.StructField, bool); FieldByNameFunc(match func(string) bool) (reflect.StructField, bool); Implements(u reflect.Type) bool; In(i int) reflect.Type; IsVariadic() bool; Key() reflect.Type; Kind() reflect.Kind; Len() int; Method(int) reflect.Method; MethodByName(string) (reflect.Method, bool); Name() string; NumField() int; NumIn() int; NumMethod() int; NumOut() int; Out(i int) reflect.Type; PkgPath() string; Size() uintptr; String() string; common() *reflect.rtype; uncommon() *reflect.uncommonType}",
      "type" : "Interface",
      "underlying" : 14
    }, {
      "name" : "(reflect.Type) func() int",
      "params" : 4,
      "recv" : 0,
      "results" : 16,
      "type" : "Signature",
      "underlying" : 15,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 2
      } ],
      "name" : "(int)",
      "type" : "Tuple",
      "underlying" : 16
    }, {
      "name" : "(reflect.Type) func(u reflect.Type) bool",
      "params" : 18,
      "recv" : 1,
      "results" : 19,
      "type" : "Signature",
      "underlying" : 17,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "u",
        "type" : 13
      } ],
      "name" : "(u reflect.Type)",
      "type" : "Tuple",
      "underlying" : 18
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 20
      } ],
      "name" : "(bool)",
      "type" : "Tuple",
      "underlying" : 19
    }, {
      "name" : "bool",
      "type" : "Basic",
      "underlying" : 20
    }, {
      "name" : "(reflect.Type) func() reflect.ChanDir",
      "params" : 4,
      "recv" : 2,
      "results" : 22,
      "type" : "Signature",
      "underlying" : 21,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 23
      } ],
      "name" : "(reflect.ChanDir)",
      "type" : "Tuple",
      "underlying" : 22
    }, {
      "local-name" : "ChanDir",
      "name" : "reflect.ChanDir",
      "package" : 3,
      "type" : "Named",
      "underlying" : 2
    }, {
      "name" : "(reflect.Type) func() bool",
      "params" : 4,
      "recv" : 3,
      "results" : 19,
      "type" : "Signature",
      "underlying" : 24,
      "variadic" : false
    }, {
      "name" : "(reflect.Type) func() reflect.Type",
      "params" : 4,
      "recv" : 4,
      "results" : 26,
      "type" : "Signature",
      "underlying" : 25,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 13
      } ],
      "name" : "(reflect.Type)",
      "type" : "Tuple",
      "underlying" : 26
    }, {
      "name" : "(reflect.Type) func(i int) reflect.StructField",
      "params" : 28,
      "recv" : 5,
      "results" : 29,
      "type" : "Signature",
      "underlying" : 27,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "i",
        "type" : 2
      } ],
      "name" : "(i int)",
      "type" : "Tuple",
      "underlying" : 28
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 30
      } ],
      "name" : "(reflect.StructField)",
      "type" : "Tuple",
      "underlying" : 29
    }, {
      "local-name" : "StructField",
      "name" : "reflect.StructField",
      "package" : 3,
      "type" : "Named",
      "underlying" : 31
    }, {
      "fields" : [ {
        "name" : "Name",
        "type" : 32
      }, {
        "name" : "PkgPath",
        "type" : 32
      }, {
        "name" : "Type",
        "type" : 13
      }, {
        "name" : "Tag",
        "type" : 33
      }, {
        "name" : "Offset",
        "type" : 34
      }, {
        "name" : "Index",
        "type" : 35
      }, {
        "name" : "Anonymous",
        "type" : 20
      } ],
      "name" : "struct{Name string; PkgPath string; Type reflect.Type; Tag reflect.StructTag; Offset uintptr; Index []int; Anonymous bool}",
      "type" : "Struct",
      "underlying" : 31
    }, {
      "name" : "string",
      "type" : "Basic",
      "underlying" : 32
    }, {
      "local-name" : "StructTag",
      "name" : "reflect.StructTag",
      "package" : 3,
      "type" : "Named",
      "underlying" : 32
    }, {
      "name" : "uintptr",
      "type" : "Basic",
      "underlying" : 34
    }, {
      "elem" : 2,
      "name" : "[]int",
      "type" : "Slice",
      "underlying" : 35
    }, {
      "name" : "(reflect.Type) func(index []int) reflect.StructField",
      "params" : 37,
      "recv" : 6,
      "results" : 29,
      "type" : "Signature",
      "underlying" : 36,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "index",
        "type" : 35
      } ],
      "name" : "(index []int)",
      "type" : "Tuple",
      "underlying" : 37
    }, {
      "name" : "(reflect.Type) func(name string) (reflect.StructField, bool)",
      "params" : 39,
      "recv" : 7,
      "results" : 40,
      "type" : "Signature",
      "underlying" : 38,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "name",
        "type" : 32
      } ],
      "name" : "(name string)",
      "type" : "Tuple",
      "underlying" : 39
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 30
      }, {
        "name" : "",
        "type" : 20
      } ],
      "name" : "(reflect.StructField, bool)",
      "type" : "Tuple",
      "underlying" : 40
    }, {
      "name" : "(reflect.Type) func(match func(string) bool) (reflect.StructField, bool)",
      "params" : 42,
      "recv" : 8,
      "results" : 40,
      "type" : "Signature",
      "underlying" : 41,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "match",
        "type" : 43
      } ],
      "name" : "(match func(string) bool)",
      "type" : "Tuple",
      "underlying" : 42
    }, {
      "name" : "func(string) bool",
      "params" : 44,
      "recv" : -1,
      "results" : 19,
      "type" : "Signature",
      "underlying" : 43,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 32
      } ],
      "name" : "(string)",
      "type" : "Tuple",
      "underlying" : 44
    }, {
      "name" : "(reflect.Type) func(i int) reflect.Type",
      "params" : 28,
      "recv" : 9,
      "results" : 26,
      "type" : "Signature",
      "underlying" : 45,
      "variadic" : false
    }, {
      "name" : "(reflect.Type) func() reflect.Kind",
      "params" : 4,
      "recv" : 10,
      "results" : 47,
      "type" : "Signature",
      "underlying" : 46,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 48
      } ],
      "name" : "(reflect.Kind)",
      "type" : "Tuple",
      "underlying" : 47
    }, {
      "local-name" : "Kind",
      "name" : "reflect.Kind",
      "package" : 3,
      "type" : "Named",
      "underlying" : 49
    }, {
      "name" : "uint",
      "type" : "Basic",
      "underlying" : 49
    }, {
      "name" : "(reflect.Type) func(int) reflect.Method",
      "params" : 16,
      "recv" : 11,
      "results" : 51,
      "type" : "Signature",
      "underlying" : 50,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 52
      } ],
      "name" : "(reflect.Method)",
      "type" : "Tuple",
      "underlying" : 51
    }, {
      "local-name" : "Method",
      "name" : "reflect.Method",
      "package" : 3,
      "type" : "Named",
      "underlying" : 53
    }, {
      "fields" : [ {
        "name" : "Name",
        "type" : 32
      }, {
        "name" : "PkgPath",
        "type" : 32
      }, {
        "name" : "Type",
        "type" : 13
      }, {
        "name" : "Func",
        "type" : 54
      }, {
        "name" : "Index",
        "type" : 2
      } ],
      "name" : "struct{Name string; PkgPath string; Type reflect.Type; Func reflect.Value; Index int}",
      "type" : "Struct",
      "underlying" : 53
    }, {
      "local-name" : "Value",
      "name" : "reflect.Value",
      "package" : 3,
      "type" : "Named",
      "underlying" : 55
    }, {
      "fields" : [ {
        "name" : "typ",
        "type" : 56
      }, {
        "name" : "ptr",
        "type" : 10
      }, {
        "name" : "flag",
        "type" : 69
      } ],
      "name" : "struct{typ *reflect.rtype; ptr unsafe.Pointer; reflect.flag}",
      "type" : "Struct",
      "underlying" : 55
    }, {
      "elem" : 57,
      "name" : "*reflect.rtype",
      "type" : "Pointer",
      "underlying" : 56
    }, {
      "local-name" : "rtype",
      "name" : "reflect.rtype",
      "package" : 3,
      "type" : "Named",
      "underlying" : 58
    }, {
      "fields" : [ {
        "name" : "size",
        "type" : 34
      }, {
        "name" : "ptrdata",
        "type" : 34
      }, {
        "name" : "hash",
        "type" : 59
      }, {
        "name" : "tflag",
        "type" : 60
      }, {
        "name" : "align",
        "type" : 61
      }, {
        "name" : "fieldAlign",
        "type" : 61
      }, {
        "name" : "kind",
        "type" : 61
      }, {
        "name" : "equal",
        "type" : 62
      }, {
        "name" : "gcdata",
        "type" : 64
      }, {
        "name" : "str",
        "type" : 66
      }, {
        "name" : "ptrToThis",
        "type" : 68
      } ],
      "name" : "struct{size uintptr; ptrdata uintptr; hash uint32; tflag reflect.tflag; align uint8; fieldAlign uint8; kind uint8; equal func(unsafe.Pointer, unsafe.Pointer) bool; gcdata *byte; str reflect.nameOff; ptrToThis reflect.typeOff}",
      "type" : "Struct",
      "underlying" : 58
    }, {
      "name" : "uint32",
      "type" : "Basic",
      "underlying" : 59
    }, {
      "local-name" : "tflag",
      "name" : "reflect.tflag",
      "package" : 3,
      "type" : "Named",
      "underlying" : 61
    }, {
      "name" : "uint8",
      "type" : "Basic",
      "underlying" : 61
    }, {
      "name" : "func(unsafe.Pointer, unsafe.Pointer) bool",
      "params" : 63,
      "recv" : -1,
      "results" : 19,
      "type" : "Signature",
      "underlying" : 62,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 10
      }, {
        "name" : "",
        "type" : 10
      } ],
      "name" : "(unsafe.Pointer, unsafe.Pointer)",
      "type" : "Tuple",
      "underlying" : 63
    }, {
      "elem" : 65,
      "name" : "*byte",
      "type" : "Pointer",
      "underlying" : 64
    }, {
      "name" : "byte",
      "type" : "Basic",
      "underlying" : 65
    }, {
      "local-name" : "nameOff",
      "name" : "reflect.nameOff",
      "package" : 3,
      "type" : "Named",
      "underlying" : 67
    }, {
      "name" : "int32",
      "type" : "Basic",
      "underlying" : 67
    }, {
      "local-name" : "typeOff",
      "name" : "reflect.typeOff",
      "package" : 3,
      "type" : "Named",
      "underlying" : 67
    }, {
      "local-name" : "flag",
      "name" : "reflect.flag",
      "package" : 3,
      "type" : "Named",
      "underlying" : 34
    }, {
      "name" : "(reflect.Type) func(string) (reflect.Method, bool)",
      "params" : 44,
      "recv" : 12,
      "results" : 71,
      "type" : "Signature",
      "underlying" : 70,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 52
      }, {
        "name" : "",
        "type" : 20
      } ],
      "name" : "(reflect.Method, bool)",
      "type" : "Tuple",
      "underlying" : 71
    }, {
      "name" : "(reflect.Type) func() string",
      "params" : 4,
      "recv" : 13,
      "results" : 44,
      "type" : "Signature",
      "underlying" : 72,
      "variadic" : false
    }, {
      "name" : "(reflect.Type) func() uintptr",
      "params" : 4,
      "recv" : 14,
      "results" : 74,
      "type" : "Signature",
      "underlying" : 73,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 34
      } ],
      "name" : "(uintptr)",
      "type" : "Tuple",
      "underlying" : 74
    }, {
      "name" : "(reflect.Type) func() *reflect.rtype",
      "params" : 4,
      "recv" : 15,
      "results" : 76,
      "type" : "Signature",
      "underlying" : 75,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 56
      } ],
      "name" : "(*reflect.rtype)",
      "type" : "Tuple",
      "underlying" : 76
    }, {
      "name" : "(reflect.Type) func() *reflect.uncommonType",
      "params" : 4,
      "recv" : 16,
      "results" : 78,
      "type" : "Signature",
      "underlying" : 77,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 79
      } ],
      "name" : "(*reflect.uncommonType)",
      "type" : "Tuple",
      "underlying" : 78
    }, {
      "elem" : 80,
      "name" : "*reflect.uncommonType",
      "type" : "Pointer",
      "underlying" : 79
    }, {
      "local-name" : "uncommonType",
      "name" : "reflect.uncommonType",
      "package" : 3,
      "type" : "Named",
      "underlying" : 81
    }, {
      "fields" : [ {
        "name" : "pkgPath",
        "type" : 66
      }, {
        "name" : "mcount",
        "type" : 82
      }, {
        "name" : "xcount",
        "type" : 82
      }, {
        "name" : "moff",
        "type" : 59
      }, {
        "name" : "_",
        "type" : 59
      } ],
      "name" : "struct{pkgPath reflect.nameOff; mcount uint16; xcount uint16; moff uint32; _ uint32}",
      "type" : "Struct",
      "underlying" : 81
    }, {
      "name" : "uint16",
      "type" : "Basic",
      "underlying" : 82
    }, {
      "name" : "func() reflect.Kind",
      "params" : 4,
      "recv" : -1,
      "results" : 47,
      "type" : "Signature",
      "underlying" : 83,
      "variadic" : false
    }, {
      "name" : "func(i int, x bool)",
      "params" : 85,
      "recv" : -1,
      "results" : 4,
      "type" : "Signature",
      "underlying" : 84,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "i",
        "type" : 2
      }, {
        "name" : "x",
        "type" : 20
      } ],
      "name" : "(i int, x bool)",
      "type" : "Tuple",
      "underlying" : 85
    }, {
      "name" : "(*gorgonia.org/tensor/internal/storage.Header) func(i int, x bool)",
      "params" : 85,
      "recv" : 21,
      "results" : 4,
      "type" : "Signature",
      "underlying" : 86,
      "variadic" : false
    }, {
      "elem" : 8,
      "name" : "*gorgonia.org/tensor/internal/storage.Header",
      "type" : "Pointer",
      "underlying" : 87
    }, {
      "name" : "func(i int, x int)",
      "params" : 89,
      "recv" : -1,
      "results" : 4,
      "type" : "Signature",
      "underlying" : 88,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "i",
        "type" : 2
      }, {
        "name" : "x",
        "type" : 2
      } ],
      "name" : "(i int, x int)",
      "type" : "Tuple",
      "underlying" : 89
    }, {
      "name" : "(*gorgonia.org/tensor/internal/storage.Header) func(i int, x int)",
      "params" : 89,
      "recv" : 23,
      "results" : 4,
      "type" : "Signature",
      "underlying" : 90,
      "variadic" : false
    }, {
      "name" : "int8",
      "type" : "Basic",
      "underlying" : 91
    }, {
      "name" : "func(i int, x int8)",
      "params" : 93,
      "recv" : -1,
      "results" : 4,
      "type" : "Signature",
      "underlying" : 92,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "i",
        "type" : 2
      }, {
        "name" : "x",
        "type" : 91
      } ],
      "name" : "(i int, x int8)",
      "type" : "Tuple",
      "underlying" : 93
    }, {
      "name" : "(*gorgonia.org/tensor/internal/storage.Header) func(i int, x int8)",
      "params" : 93,
      "recv" : 25,
      "results" : 4,
      "type" : "Signature",
      "underlying" : 94,
      "variadic" : false
    }, {
      "name" : "int16",
      "type" : "Basic",
      "underlying" : 95
    }, {
      "name" : "func(i int, x int16)",
      "params" : 97,
      "recv" : -1,
      "results" : 4,
      "type" : "Signature",
      "underlying" : 96,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "i",
        "type" : 2
      }, {
        "name" : "x",
        "type" : 95
      } ],
      "name" : "(i int, x int16)",
      "type" : "Tuple",
      "underlying" : 97
    }, {
      "name" : "(*gorgonia.org/tensor/internal/storage.Header) func(i int, x int16)",
      "params" : 97,
      "recv" : 27,
      "results" : 4,
      "type" : "Signature",
      "underlying" : 98,
      "variadic" : false
    }, {
      "name" : "func(i int, x int32)",
      "params" : 100,
      "recv" : -1,
      "results" : 4,
      "type" : "Signature",
      "underlying" : 99,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "i",
        "type" : 2
      }, {
        "name" : "x",
        "type" : 67
      } ],
      "name" : "(i int, x int32)",
      "type" : "Tuple",
      "underlying" : 100
    }, {
      "name" : "(*gorgonia.org/tensor/internal/storage.Header) func(i int, x int32)",
      "params" : 100,
      "recv" : 29,
      "results" : 4,
      "type" : "Signature",
      "underlying" : 101,
      "variadic" : false
    }, {
      "name" : "int64",
      "type" : "Basic",
      "underlying" : 102
    }, {
      "name" : "func(i int, x int64)",
      "params" : 104,
      "recv" : -1,
      "results" : 4,
      "type" : "Signature",
      "underlying" : 103,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "i",
        "type" : 2
      }, {
        "name" : "x",
        "type" : 102
      } ],
      "name" : "(i int, x int64)",
      "type" : "Tuple",
      "underlying" : 104
    }, {
      "name" : "(*gorgonia.org/tensor/internal/storage.Header) func(i int, x int64)",
      "params" : 104,
      "recv" : 31,
      "results" : 4,
      "type" : "Signature",
      "underlying" : 105,
      "variadic" : false
    }, {
      "name" : "func(i int, x uint)",
      "params" : 107,
      "recv" : -1,
      "results" : 4,
      "type" : "Signature",
      "underlying" : 106,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "i",
        "type" : 2
      }, {
        "name" : "x",
        "type" : 49
      } ],
      "name" : "(i int, x uint)",
      "type" : "Tuple",
      "underlying" : 107
    }, {
      "name" : "(*gorgonia.org/tensor/internal/storage.Header) func(i int, x uint)",
      "params" : 107,
      "recv" : 33,
      "results" : 4,
      "type" : "Signature",
      "underlying" : 108,
      "variadic" : false
    }, {
      "name" : "func(i int, x uint8)",
      "params" : 110,
      "recv" : -1,
      "results" : 4,
      "type" : "Signature",
      "underlying" : 109,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "i",
        "type" : 2
      }, {
        "name" : "x",
        "type" : 61
      } ],
      "name" : "(i int, x uint8)",
      "type" : "Tuple",
      "underlying" : 110
    }, {
      "name" : "(*gorgonia.org/tensor/internal/storage.Header) func(i int, x uint8)",
      "params" : 110,
      "recv" : 35,
      "results" : 4,
      "type" : "Signature",
      "underlying" : 111,
      "variadic" : false
    }, {
      "name" : "func(i int, x uint16)",
      "params" : 113,
      "recv" : -1,
      "results" : 4,
      "type" : "Signature",
      "underlying" : 112,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "i",
        "type" : 2
      }, {
        "name" : "x",
        "type" : 82
      } ],
      "name" : "(i int, x uint16)",
      "type" : "Tuple",
      "underlying" : 113
    }, {
      "name" : "(*gorgonia.org/tensor/internal/storage.Header) func(i int, x uint16)",
      "params" : 113,
      "recv" : 37,
      "results" : 4,
      "type" : "Signature",
      "underlying" : 114,
      "variadic" : false
    }, {
      "name" : "func(i int, x uint32)",
      "params" : 116,
      "recv" : -1,
      "results" : 4,
      "type" : "Signature",
      "underlying" : 115,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "i",
        "type" : 2
      }, {
        "name" : "x",
        "type" : 59
      } ],
      "name" : "(i int, x uint32)",
      "type" : "Tuple",
      "underlying" : 116
    }, {
      "name" : "(*gorgonia.org/tensor/internal/storage.Header) func(i int, x uint32)",
      "params" : 116,
      "recv" : 39,
      "results" : 4,
      "type" : "Signature",
      "underlying" : 117,
      "variadic" : false
    }, {
      "name" : "uint64",
      "type" : "Basic",
      "underlying" : 118
    }, {
      "name" : "func(i int, x uint64)",
      "params" : 120,
      "recv" : -1,
      "results" : 4,
      "type" : "Signature",
      "underlying" : 119,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "i",
        "type" : 2
      }, {
        "name" : "x",
        "type" : 118
      } ],
      "name" : "(i int, x uint64)",
      "type" : "Tuple",
      "underlying" : 120
    }, {
      "name" : "(*gorgonia.org/tensor/internal/storage.Header) func(i int, x uint64)",
      "params" : 120,
      "recv" : 41,
      "results" : 4,
      "type" : "Signature",
      "underlying" : 121,
      "variadic" : false
    }, {
      "name" : "func(i int, x uintptr)",
      "params" : 123,
      "recv" : -1,
      "results" : 4,
      "type" : "Signature",
      "underlying" : 122,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "i",
        "type" : 2
      }, {
        "name" : "x",
        "type" : 34
      } ],
      "name" : "(i int, x uintptr)",
      "type" : "Tuple",
      "underlying" : 123
    }, {
      "name" : "(*gorgonia.org/tensor/internal/storage.Header) func(i int, x uintptr)",
      "params" : 123,
      "recv" : 43,
      "results" : 4,
      "type" : "Signature",
      "underlying" : 124,
      "variadic" : false
    }, {
      "name" : "float32",
      "type" : "Basic",
      "underlying" : 125
    }, {
      "name" : "func(i int, x float32)",
      "params" : 127,
      "recv" : -1,
      "results" : 4,
      "type" : "Signature",
      "underlying" : 126,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "i",
        "type" : 2
      }, {
        "name" : "x",
        "type" : 125
      } ],
      "name" : "(i int, x float32)",
      "type" : "Tuple",
      "underlying" : 127
    }, {
      "name" : "(*gorgonia.org/tensor/internal/storage.Header) func(i int, x float32)",
      "params" : 127,
      "recv" : 45,
      "results" : 4,
      "type" : "Signature",
      "underlying" : 128,
      "variadic" : false
    }, {
      "name" : "float64",
      "type" : "Basic",
      "underlying" : 129
    }, {
      "name" : "func(i int, x float64)",
      "params" : 131,
      "recv" : -1,
      "results" : 4,
      "type" : "Signature",
      "underlying" : 130,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "i",
        "type" : 2
      }, {
        "name" : "x",
        "type" : 129
      } ],
      "name" : "(i int, x float64)",
      "type" : "Tuple",
      "underlying" : 131
    }, {
      "name" : "(*gorgonia.org/tensor/internal/storage.Header) func(i int, x float64)",
      "params" : 131,
      "recv" : 47,
      "results" : 4,
      "type" : "Signature",
      "underlying" : 132,
      "variadic" : false
    }, {
      "name" : "complex64",
      "type" : "Basic",
      "underlying" : 133
    }, {
      "name" : "func(i int, x complex64)",
      "params" : 135,
      "recv" : -1,
      "results" : 4,
      "type" : "Signature",
      "underlying" : 134,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "i",
        "type" : 2
      }, {
        "name" : "x",
        "type" : 133
      } ],
      "name" : "(i int, x complex64)",
      "type" : "Tuple",
      "underlying" : 135
    }, {
      "name" : "(*gorgonia.org/tensor/internal/storage.Header) func(i int, x complex64)",
      "params" : 135,
      "recv" : 49,
      "results" : 4,
      "type" : "Signature",
      "underlying" : 136,
      "variadic" : false
    }, {
      "name" : "complex128",
      "type" : "Basic",
      "underlying" : 137
    }, {
      "name" : "func(i int, x complex128)",
      "params" : 139,
      "recv" : -1,
      "results" : 4,
      "type" : "Signature",
      "underlying" : 138,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "i",
        "type" : 2
      }, {
        "name" : "x",
        "type" : 137
      } ],
      "name" : "(i int, x complex128)",
      "type" : "Tuple",
      "underlying" : 139
    }, {
      "name" : "(*gorgonia.org/tensor/internal/storage.Header) func(i int, x complex128)",
      "params" : 139,
      "recv" : 51,
      "results" : 4,
      "type" : "Signature",
      "underlying" : 140,
      "variadic" : false
    }, {
      "name" : "func(i int, x string)",
      "params" : 142,
      "recv" : -1,
      "results" : 4,
      "type" : "Signature",
      "underlying" : 141,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "i",
        "type" : 2
      }, {
        "name" : "x",
        "type" : 32
      } ],
      "name" : "(i int, x string)",
      "type" : "Tuple",
      "underlying" : 142
    }, {
      "name" : "(*gorgonia.org/tensor/internal/storage.Header) func(i int, x string)",
      "params" : 142,
      "recv" : 53,
      "results" : 4,
      "type" : "Signature",
      "underlying" : 143,
      "variadic" : false
    }, {
      "name" : "func(i int, x unsafe.Pointer)",
      "params" : 145,
      "recv" : -1,
      "results" : 4,
      "type" : "Signature",
      "underlying" : 144,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "i",
        "type" : 2
      }, {
        "name" : "x",
        "type" : 10
      } ],
      "name" : "(i int, x unsafe.Pointer)",
      "type" : "Tuple",
      "underlying" : 145
    }, {
      "name" : "(*gorgonia.org/tensor/internal/storage.Header) func(i int, x unsafe.Pointer)",
      "params" : 145,
      "recv" : 55,
      "results" : 4,
      "type" : "Signature",
      "underlying" : 146,
      "variadic" : false
    }, {
      "name" : "func(i interface{}) reflect.Value",
      "params" : 148,
      "recv" : -1,
      "results" : 149,
      "type" : "Signature",
      "underlying" : 147,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "i",
        "type" : 3
      } ],
      "name" : "(i interface{})",
      "type" : "Tuple",
      "underlying" : 148
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 54
      } ],
      "name" : "(reflect.Value)",
      "type" : "Tuple",
      "underlying" : 149
    }, {
      "name" : "func() uintptr",
      "params" : 4,
      "recv" : -1,
      "results" : 74,
      "type" : "Signature",
      "underlying" : 150,
      "variadic" : false
    }, {
      "name" : "func(typ reflect.Type, p unsafe.Pointer) reflect.Value",
      "params" : 152,
      "recv" : -1,
      "results" : 149,
      "type" : "Signature",
      "underlying" : 151,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "typ",
        "type" : 13
      }, {
        "name" : "p",
        "type" : 10
      } ],
      "name" : "(typ reflect.Type, p unsafe.Pointer)",
      "type" : "Tuple",
      "underlying" : 152
    }, {
      "name" : "func(v reflect.Value) reflect.Value",
      "params" : 154,
      "recv" : -1,
      "results" : 149,
      "type" : "Signature",
      "underlying" : 153,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "v",
        "type" : 54
      } ],
      "name" : "(v reflect.Value)",
      "type" : "Tuple",
      "underlying" : 154
    }, {
      "name" : "func(x reflect.Value)",
      "params" : 156,
      "recv" : -1,
      "results" : 4,
      "type" : "Signature",
      "underlying" : 155,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "x",
        "type" : 54
      } ],
      "name" : "(x reflect.Value)",
      "type" : "Tuple",
      "underlying" : 156
    }, {
      "name" : "(reflect.Value) func(x reflect.Value)",
      "params" : 156,
      "recv" : 61,
      "results" : 4,
      "type" : "Signature",
      "underlying" : 157,
      "variadic" : false
    } ],
    "variables" : [ {
      "name" : "",
      "package" : 3,
      "type" : 13,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 3,
      "type" : 13,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 3,
      "type" : 13,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 3,
      "type" : 13,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 3,
      "type" : 13,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 3,
      "type" : 13,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 3,
      "type" : 13,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 3,
      "type" : 13,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 3,
      "type" : 13,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 3,
      "type" : 13,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 3,
      "type" : 13,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 3,
      "type" : 13,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 3,
      "type" : 13,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 3,
      "type" : 13,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 3,
      "type" : 13,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 3,
      "type" : 13,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 3,
      "type" : 13,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "a",
      "package" : 0,
      "type" : 5,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "i",
      "package" : 0,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "x",
      "package" : 0,
      "type" : 3,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "t",
      "package" : 0,
      "type" : 11,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "h",
      "package" : 1,
      "type" : 87,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "xv",
      "package" : 0,
      "type" : 20,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "h",
      "package" : 1,
      "type" : 87,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "xv",
      "package" : 0,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "h",
      "package" : 1,
      "type" : 87,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "xv",
      "package" : 0,
      "type" : 91,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "h",
      "package" : 1,
      "type" : 87,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "xv",
      "package" : 0,
      "type" : 95,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "h",
      "package" : 1,
      "type" : 87,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "xv",
      "package" : 0,
      "type" : 67,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "h",
      "package" : 1,
      "type" : 87,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "xv",
      "package" : 0,
      "type" : 102,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "h",
      "package" : 1,
      "type" : 87,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "xv",
      "package" : 0,
      "type" : 49,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "h",
      "package" : 1,
      "type" : 87,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "xv",
      "package" : 0,
      "type" : 61,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "h",
      "package" : 1,
      "type" : 87,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "xv",
      "package" : 0,
      "type" : 82,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "h",
      "package" : 1,
      "type" : 87,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "xv",
      "package" : 0,
      "type" : 59,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "h",
      "package" : 1,
      "type" : 87,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "xv",
      "package" : 0,
      "type" : 118,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "h",
      "package" : 1,
      "type" : 87,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "xv",
      "package" : 0,
      "type" : 34,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "h",
      "package" : 1,
      "type" : 87,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "xv",
      "package" : 0,
      "type" : 125,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "h",
      "package" : 1,
      "type" : 87,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "xv",
      "package" : 0,
      "type" : 129,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "h",
      "package" : 1,
      "type" : 87,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "xv",
      "package" : 0,
      "type" : 133,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "h",
      "package" : 1,
      "type" : 87,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "xv",
      "package" : 0,
      "type" : 137,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "h",
      "package" : 1,
      "type" : 87,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "xv",
      "package" : 0,
      "type" : 32,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "h",
      "package" : 1,
      "type" : 87,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "xv",
      "package" : 0,
      "type" : 10,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "Ptr",
      "package" : 1,
      "type" : 10,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "Type",
      "package" : 0,
      "type" : 13,
      "exported" : true,
      "embedded" : true,
      "field" : true
    }, {
      "name" : "want",
      "package" : 0,
      "type" : 10,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "val",
      "package" : 0,
      "type" : 54,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "v",
      "package" : 3,
      "type" : 54,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "xv",
      "package" : 0,
      "type" : 54,
      "exported" : false,
      "embedded" : false,
      "field" : false
    } ]
  },
  "go-version" : "1.14.3"
}