{
  "usage" : {
    "file" : "generic_reduce.go",
    "label1" : "memory-access",
    "label2" : "efficiency",
    "line" : "1306",
    "module" : "gorgonia.org/tensor",
    "pkg" : "gorgonia.org/tensor/internal/execution",
    "project" : "gorgonia/gorgonia",
    "snippet" : "func reduceLastUnsafePointer(a, retVal []unsafe.Pointer, dimSize int, defaultValue unsafe.Pointer, fn func(a []unsafe.Pointer) unsafe.Pointer) {",
    "version" : "v0.9.6"
  },
  "cfg" : {
    "blocks" : [ {
      "update-vars" : [ ],
      "successors" : [ 2 ],
      "in-vars" : [ 1, 0, 2, 4 ],
      "exit" : false,
      "out-vars" : [ 1, 0, 2, 4 ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[entry]",
      "entry" : true,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ ],
      "in-vars" : [ ],
      "exit" : true,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[exit]",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 4 ],
      "in-vars" : [ 0, 2, 4, 1 ],
      "exit" : false,
      "out-vars" : [ 0, 2, 4, 1, 5 ],
      "decl-vars" : [ 5 ],
      "line-start" : 1307,
      "ast" : {
        "kind" : "statement",
        "target" : {
          "kind" : "decl",
          "specs" : [ {
            "comments" : [ ],
            "declared-type" : {
              "go-type" : 4,
              "kind" : "type",
              "type" : "identifier",
              "value" : {
                "go-type" : 4,
                "ident-kind" : "TypeName",
                "kind" : "ident",
                "value" : "int"
              }
            },
            "kind" : "spec",
            "names" : [ {
              "ident-kind" : "NoKind",
              "kind" : "ident",
              "value" : "at"
            } ],
            "type" : "var",
            "values" : [ ]
          } ],
          "type" : "var"
        },
        "type" : "declaration"
      },
      "assign-vars" : [ ],
      "line-end" : 1307,
      "code" : "var at int",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1, 6 ],
      "in-vars" : [ 4, 1, 5, 0, 2, 6 ],
      "exit" : false,
      "out-vars" : [ 1, 5, 0, 2, 6, 4 ],
      "decl-vars" : [ ],
      "line-start" : 1308,
      "ast" : {
        "condition" : {
          "go-type" : 9,
          "kind" : "expression",
          "left" : {
            "go-type" : 4,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "start",
              "variable" : 6
            }
          },
          "operator" : "<=",
          "right" : {
            "go-type" : 4,
            "kind" : "expression",
            "left" : {
              "arguments" : [ {
                "go-type" : 2,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "a",
                  "variable" : 0
                }
              } ],
              "ellipsis" : false,
              "function" : {
                "go-type" : 10,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Builtin",
                  "kind" : "ident",
                  "value" : "len"
                }
              },
              "go-type" : 4,
              "kind" : "expression",
              "type" : "call"
            },
            "operator" : "-",
            "right" : {
              "go-type" : 4,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "dimSize",
                "variable" : 2
              }
            },
            "type" : "binary"
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "for"
      },
      "assign-vars" : [ ],
      "line-end" : 1312,
      "code" : "for start := 0; start <= len(a)-dimSize; start += dimSize {\n\tr := fn(a[start : start+dimSize])\n\tretVal[at] = r\n\tat++\n}",
      "entry" : false,
      "use-vars" : [ 6, 0, 2 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 3 ],
      "in-vars" : [ 0, 2, 4, 1, 5 ],
      "exit" : false,
      "out-vars" : [ 1, 5, 0, 2, 6, 4 ],
      "decl-vars" : [ 6 ],
      "line-start" : 1308,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "start"
          }
        } ],
        "right" : [ {
          "go-type" : 4,
          "kind" : "constant",
          "value" : {
            "type" : "INT",
            "value" : "0"
          }
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 1308,
      "code" : "start := 0",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ 6 ],
      "successors" : [ 3 ],
      "in-vars" : [ 1, 5, 0, 2, 6, 4 ],
      "exit" : false,
      "out-vars" : [ 5, 0, 2, 6, 4, 1 ],
      "decl-vars" : [ ],
      "line-start" : 1308,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 4,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "start",
            "variable" : 6
          }
        } ],
        "operator" : "+",
        "right" : [ {
          "go-type" : 4,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "dimSize",
            "variable" : 2
          }
        } ],
        "type" : "assign-operator"
      },
      "assign-vars" : [ 6 ],
      "line-end" : 1308,
      "code" : "start += dimSize",
      "entry" : false,
      "use-vars" : [ 2, 6 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 7 ],
      "in-vars" : [ 5, 0, 2, 6, 4, 1 ],
      "exit" : false,
      "out-vars" : [ 1, 5, 7, 0, 2, 6, 4 ],
      "decl-vars" : [ 7 ],
      "line-start" : 1309,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "r"
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "go-type" : 2,
            "type" : "slice",
            "three" : false,
            "high" : {
              "go-type" : 4,
              "kind" : "expression",
              "left" : {
                "go-type" : 4,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "start",
                  "variable" : 6
                }
              },
              "operator" : "+",
              "right" : {
                "go-type" : 4,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "dimSize",
                  "variable" : 2
                }
              },
              "type" : "binary"
            },
            "max" : null,
            "kind" : "expression",
            "low" : {
              "go-type" : 4,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "start",
                "variable" : 6
              }
            },
            "target" : {
              "go-type" : 2,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "a",
                "variable" : 0
              }
            }
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 5,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "fn",
              "variable" : 4
            }
          },
          "go-type" : 3,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 1309,
      "code" : "r := fn(a[start : start+dimSize])",
      "entry" : false,
      "use-vars" : [ 4, 0, 6, 2 ]
    }, {
      "update-vars" : [ 1 ],
      "successors" : [ 8 ],
      "in-vars" : [ 7, 0, 2, 6, 4, 1, 5 ],
      "exit" : false,
      "out-vars" : [ 1, 5, 0, 2, 6, 4 ],
      "decl-vars" : [ ],
      "line-start" : 1310,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : 3,
          "index" : {
            "go-type" : 4,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "at",
              "variable" : 5
            }
          },
          "kind" : "expression",
          "target" : {
            "go-type" : 2,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "retVal",
              "variable" : 1
            }
          },
          "type" : "index"
        } ],
        "right" : [ {
          "go-type" : 3,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "r",
            "variable" : 7
          }
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 1310,
      "code" : "retVal[at] = r",
      "entry" : false,
      "use-vars" : [ 5, 1, 7 ]
    }, {
      "update-vars" : [ 5 ],
      "successors" : [ 5 ],
      "in-vars" : [ 4, 1, 5, 0, 2, 6 ],
      "exit" : false,
      "out-vars" : [ 1, 5, 0, 2, 6, 4 ],
      "decl-vars" : [ ],
      "line-start" : 1311,
      "ast" : {
        "kind" : "statement",
        "operation" : "++",
        "target" : {
          "go-type" : 4,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "at",
            "variable" : 5
          }
        },
        "type" : "crement"
      },
      "assign-vars" : [ 5 ],
      "line-end" : 1311,
      "code" : "at++",
      "entry" : false,
      "use-vars" : [ 5 ]
    } ],
    "code" : "func reduceLastUnsafePointer(a, retVal []unsafe.Pointer, dimSize int, defaultValue unsafe.Pointer, fn func(a []unsafe.Pointer) unsafe.Pointer) {\n\tvar at int\n\tfor start := 0; start <= len(a)-dimSize; start += dimSize {\n\t\tr := fn(a[start : start+dimSize])\n\t\tretVal[at] = r\n\t\tat++\n\t}\n}",
    "defines" : [ 0 ],
    "functions" : [ {
      "name" : "reduceLastUnsafePointer",
      "package" : 0,
      "type" : 0,
      "exported" : false
    } ],
    "line-end" : 1313,
    "line-start" : 1306,
    "names" : [ "reduceLastUnsafePointer" ],
    "package" : 0,
    "packages" : [ {
      "name" : "execution",
      "path" : "gorgonia.org/tensor/internal/execution"
    }, {
      "name" : "unsafe",
      "path" : "unsafe"
    } ],
    "params" : [ 0, 1, 2, 3, 4 ],
    "receivers" : [ ],
    "results" : [ ],
    "type" : "function",
    "types" : [ {
      "name" : "func(a []unsafe.Pointer, retVal []unsafe.Pointer, dimSize int, defaultValue unsafe.Pointer, fn func(a []unsafe.Pointer) unsafe.Pointer)",
      "params" : 1,
      "recv" : -1,
      "results" : 8,
      "type" : "Signature",
      "underlying" : 0,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "a",
        "type" : 2
      }, {
        "name" : "retVal",
        "type" : 2
      }, {
        "name" : "dimSize",
        "type" : 4
      }, {
        "name" : "defaultValue",
        "type" : 3
      }, {
        "name" : "fn",
        "type" : 5
      } ],
      "name" : "(a []unsafe.Pointer, retVal []unsafe.Pointer, dimSize int, defaultValue unsafe.Pointer, fn func(a []unsafe.Pointer) unsafe.Pointer)",
      "type" : "Tuple",
      "underlying" : 1
    }, {
      "elem" : 3,
      "name" : "[]unsafe.Pointer",
      "type" : "Slice",
      "underlying" : 2
    }, {
      "local-name" : "Pointer",
      "name" : "unsafe.Pointer",
      "package" : 1,
      "type" : "Basic",
      "underlying" : 3
    }, {
      "name" : "int",
      "type" : "Basic",
      "underlying" : 4
    }, {
      "name" : "func(a []unsafe.Pointer) unsafe.Pointer",
      "params" : 6,
      "recv" : -1,
      "results" : 7,
      "type" : "Signature",
      "underlying" : 5,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "a",
        "type" : 2
      } ],
      "name" : "(a []unsafe.Pointer)",
      "type" : "Tuple",
      "underlying" : 6
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 3
      } ],
      "name" : "(unsafe.Pointer)",
      "type" : "Tuple",
      "underlying" : 7
    }, {
      "fields" : [ ],
      "name" : "()",
      "type" : "Tuple",
      "underlying" : 8
    }, {
      "name" : "untyped bool",
      "type" : "Basic",
      "underlying" : 9
    }, {
      "name" : "func([]unsafe.Pointer) int",
      "params" : 11,
      "recv" : -1,
      "results" : 12,
      "type" : "Signature",
      "underlying" : 10,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 2
      } ],
      "name" : "([]unsafe.Pointer)",
      "type" : "Tuple",
      "underlying" : 11
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 4
      } ],
      "name" : "(int)",
      "type" : "Tuple",
      "underlying" : 12
    } ],
    "variables" : [ {
      "name" : "a",
      "package" : 0,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "retVal",
      "package" : 0,
      "type" : 2,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "dimSize",
      "package" : 0,
      "type" : 4,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "defaultValue",
      "package" : 0,
      "type" : 3,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "fn",
      "package" : 0,
      "type" : 5,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "at",
      "package" : 0,
      "type" : 4,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "start",
      "package" : 0,
      "type" : 4,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "r",
      "package" : 0,
      "type" : 3,
      "exported" : false,
      "embedded" : false,
      "field" : false
    } ]
  },
  "go-version" : "1.14.3"
}