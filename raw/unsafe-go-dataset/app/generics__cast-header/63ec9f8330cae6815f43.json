{
  "usage" : {
    "file" : "array.go",
    "label1" : "cast-header",
    "label2" : "generics",
    "line" : "257",
    "module" : "gorgonia.org/tensor",
    "pkg" : "gorgonia.org/tensor",
    "project" : "gorgonia/gorgonia",
    "snippet" : "ptr := unsafe.Pointer(&shdr)",
    "version" : "v0.9.6"
  },
  "cfg" : {
    "blocks" : [ {
      "update-vars" : [ ],
      "successors" : [ 2 ],
      "in-vars" : [ 17 ],
      "exit" : false,
      "out-vars" : [ 17 ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[entry]",
      "entry" : true,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ ],
      "in-vars" : [ ],
      "exit" : true,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : -1,
      "ast" : null,
      "assign-vars" : [ ],
      "line-end" : -1,
      "code" : "[exit]",
      "entry" : false,
      "use-vars" : [ ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 3, 8 ],
      "in-vars" : [ 17 ],
      "exit" : false,
      "out-vars" : [ 17 ],
      "decl-vars" : [ ],
      "line-start" : 249,
      "ast" : {
        "condition" : {
          "go-type" : 82,
          "kind" : "expression",
          "left" : {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "v",
              "variable" : 19
            },
            "go-type" : 3,
            "kind" : "expression",
            "target" : {
              "go-type" : 4,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "a",
                "variable" : 17
              }
            },
            "type" : "selector"
          },
          "operator" : "==",
          "right" : {
            "go-type" : 83,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Nil",
              "kind" : "ident",
              "value" : "nil"
            }
          },
          "type" : "binary"
        },
        "kind" : "statement",
        "type" : "if"
      },
      "assign-vars" : [ ],
      "line-end" : 261,
      "code" : "if a.v == nil {\n\n\tshdr := reflect.SliceHeader{\n\t\tData: uintptr(a.Header.Ptr),\n\t\tLen:  a.Header.L,\n\t\tCap:  a.Header.C,\n\t}\n\tsliceT := reflect.SliceOf(a.t.Type)\n\tptr := unsafe.Pointer(&shdr)\n\tval := reflect.Indirect(reflect.NewAt(sliceT, ptr))\n\ta.v = val.Interface()\n\n}",
      "entry" : false,
      "use-vars" : [ 17 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 4 ],
      "in-vars" : [ 17 ],
      "exit" : false,
      "out-vars" : [ 17, 29 ],
      "decl-vars" : [ 29 ],
      "line-start" : 251,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "shdr"
          }
        } ],
        "right" : [ {
          "declared" : {
            "go-type" : 84,
            "kind" : "type",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 3,
              "value" : "reflect"
            },
            "type" : "identifier",
            "value" : {
              "go-type" : 84,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "SliceHeader"
            }
          },
          "go-type" : 84,
          "kind" : "literal",
          "type" : "composite",
          "values" : [ {
            "go-type" : -1,
            "key" : {
              "go-type" : -1,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "Data",
                "variable" : 20
              }
            },
            "kind" : "expression",
            "type" : "key-value",
            "value" : {
              "coerced-to" : {
                "go-type" : 33,
                "kind" : "type",
                "type" : "identifier",
                "value" : {
                  "go-type" : 33,
                  "ident-kind" : "TypeName",
                  "kind" : "ident",
                  "value" : "uintptr"
                }
              },
              "go-type" : 33,
              "kind" : "expression",
              "target" : {
                "field" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "Ptr",
                  "variable" : 22
                },
                "go-type" : 8,
                "kind" : "expression",
                "target" : {
                  "field" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "Header",
                    "variable" : 21
                  },
                  "go-type" : 6,
                  "kind" : "expression",
                  "target" : {
                    "go-type" : 4,
                    "kind" : "expression",
                    "type" : "identifier",
                    "value" : {
                      "ident-kind" : "Var",
                      "kind" : "ident",
                      "value" : "a",
                      "variable" : 17
                    }
                  },
                  "type" : "selector"
                },
                "type" : "selector"
              },
              "type" : "cast"
            }
          }, {
            "go-type" : -1,
            "key" : {
              "go-type" : -1,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "Len",
                "variable" : 23
              }
            },
            "kind" : "expression",
            "type" : "key-value",
            "value" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "L",
                "variable" : 24
              },
              "go-type" : 9,
              "kind" : "expression",
              "target" : {
                "field" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "Header",
                  "variable" : 21
                },
                "go-type" : 6,
                "kind" : "expression",
                "target" : {
                  "go-type" : 4,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "a",
                    "variable" : 17
                  }
                },
                "type" : "selector"
              },
              "type" : "selector"
            }
          }, {
            "go-type" : -1,
            "key" : {
              "go-type" : -1,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "Cap",
                "variable" : 25
              }
            },
            "kind" : "expression",
            "type" : "key-value",
            "value" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "C",
                "variable" : 26
              },
              "go-type" : 9,
              "kind" : "expression",
              "target" : {
                "field" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "Header",
                  "variable" : 21
                },
                "go-type" : 6,
                "kind" : "expression",
                "target" : {
                  "go-type" : 4,
                  "kind" : "expression",
                  "type" : "identifier",
                  "value" : {
                    "ident-kind" : "Var",
                    "kind" : "ident",
                    "value" : "a",
                    "variable" : 17
                  }
                },
                "type" : "selector"
              },
              "type" : "selector"
            }
          } ]
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 255,
      "code" : "shdr := reflect.SliceHeader{\n\tData: uintptr(a.Header.Ptr),\n\tLen:  a.Header.L,\n\tCap:  a.Header.C,\n}",
      "entry" : false,
      "use-vars" : [ 17 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 5 ],
      "in-vars" : [ 17, 29 ],
      "exit" : false,
      "out-vars" : [ 29, 17, 30 ],
      "decl-vars" : [ 30 ],
      "line-start" : 256,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "sliceT"
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "field" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "Type",
              "variable" : 28
            },
            "go-type" : 12,
            "kind" : "expression",
            "target" : {
              "field" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "t",
                "variable" : 27
              },
              "go-type" : 10,
              "kind" : "expression",
              "target" : {
                "go-type" : 4,
                "kind" : "expression",
                "type" : "identifier",
                "value" : {
                  "ident-kind" : "Var",
                  "kind" : "ident",
                  "value" : "a",
                  "variable" : 17
                }
              },
              "type" : "selector"
            },
            "type" : "selector"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 86,
            "kind" : "expression",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 3,
              "value" : "reflect"
            },
            "type" : "identifier",
            "value" : {
              "function" : 1,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "SliceOf"
            }
          },
          "go-type" : 12,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 256,
      "code" : "sliceT := reflect.SliceOf(a.t.Type)",
      "entry" : false,
      "use-vars" : [ 17 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 6 ],
      "in-vars" : [ 30, 29, 17 ],
      "exit" : false,
      "out-vars" : [ 17, 30, 31 ],
      "decl-vars" : [ 31 ],
      "line-start" : 257,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "ptr"
          }
        } ],
        "right" : [ {
          "coerced-to" : {
            "go-type" : 8,
            "kind" : "type",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 2,
              "value" : "unsafe"
            },
            "type" : "identifier",
            "value" : {
              "go-type" : 8,
              "ident-kind" : "TypeName",
              "kind" : "ident",
              "value" : "Pointer"
            }
          },
          "go-type" : 8,
          "kind" : "expression",
          "target" : {
            "go-type" : 88,
            "kind" : "expression",
            "operator" : "&",
            "target" : {
              "go-type" : 84,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "shdr",
                "variable" : 29
              }
            },
            "type" : "unary"
          },
          "type" : "cast"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 257,
      "code" : "ptr := unsafe.Pointer(&shdr)",
      "entry" : false,
      "use-vars" : [ 29 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 7 ],
      "in-vars" : [ 31, 17, 30 ],
      "exit" : false,
      "out-vars" : [ 17, 32 ],
      "decl-vars" : [ 32 ],
      "line-start" : 258,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "go-type" : -1,
          "kind" : "expression",
          "type" : "identifier",
          "value" : {
            "ident-kind" : "NoKind",
            "kind" : "ident",
            "value" : "val"
          }
        } ],
        "right" : [ {
          "arguments" : [ {
            "arguments" : [ {
              "go-type" : 12,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "sliceT",
                "variable" : 30
              }
            }, {
              "go-type" : 8,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "ptr",
                "variable" : 31
              }
            } ],
            "ellipsis" : false,
            "function" : {
              "go-type" : 92,
              "kind" : "expression",
              "qualifier" : {
                "ident-kind" : "PkgName",
                "kind" : "ident",
                "package" : 3,
                "value" : "reflect"
              },
              "type" : "identifier",
              "value" : {
                "function" : 3,
                "ident-kind" : "Func",
                "kind" : "ident",
                "value" : "NewAt"
              }
            },
            "go-type" : 53,
            "kind" : "expression",
            "type" : "call"
          } ],
          "ellipsis" : false,
          "function" : {
            "go-type" : 89,
            "kind" : "expression",
            "qualifier" : {
              "ident-kind" : "PkgName",
              "kind" : "ident",
              "package" : 3,
              "value" : "reflect"
            },
            "type" : "identifier",
            "value" : {
              "function" : 2,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "Indirect"
            }
          },
          "go-type" : 53,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "define"
      },
      "assign-vars" : [ ],
      "line-end" : 258,
      "code" : "val := reflect.Indirect(reflect.NewAt(sliceT, ptr))",
      "entry" : false,
      "use-vars" : [ 30, 31 ]
    }, {
      "update-vars" : [ 17 ],
      "successors" : [ 8 ],
      "in-vars" : [ 32, 17 ],
      "exit" : false,
      "out-vars" : [ 17 ],
      "decl-vars" : [ ],
      "line-start" : 259,
      "ast" : {
        "kind" : "statement",
        "left" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "v",
            "variable" : 19
          },
          "go-type" : 3,
          "kind" : "expression",
          "target" : {
            "go-type" : 4,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "a",
              "variable" : 17
            }
          },
          "type" : "selector"
        } ],
        "right" : [ {
          "arguments" : [ ],
          "ellipsis" : false,
          "function" : {
            "field" : {
              "function" : 4,
              "ident-kind" : "Func",
              "kind" : "ident",
              "value" : "Interface"
            },
            "go-type" : 94,
            "kind" : "expression",
            "target" : {
              "go-type" : 53,
              "kind" : "expression",
              "type" : "identifier",
              "value" : {
                "ident-kind" : "Var",
                "kind" : "ident",
                "value" : "val",
                "variable" : 32
              }
            },
            "type" : "selector"
          },
          "go-type" : 3,
          "kind" : "expression",
          "type" : "call"
        } ],
        "type" : "assign"
      },
      "assign-vars" : [ ],
      "line-end" : 259,
      "code" : "a.v = val.Interface()",
      "entry" : false,
      "use-vars" : [ 32, 17 ]
    }, {
      "update-vars" : [ ],
      "successors" : [ 1 ],
      "in-vars" : [ 17 ],
      "exit" : false,
      "out-vars" : [ ],
      "decl-vars" : [ ],
      "line-start" : 262,
      "ast" : {
        "kind" : "statement",
        "type" : "return",
        "values" : [ {
          "field" : {
            "ident-kind" : "Var",
            "kind" : "ident",
            "value" : "v",
            "variable" : 19
          },
          "go-type" : 3,
          "kind" : "expression",
          "target" : {
            "go-type" : 4,
            "kind" : "expression",
            "type" : "identifier",
            "value" : {
              "ident-kind" : "Var",
              "kind" : "ident",
              "value" : "a",
              "variable" : 17
            }
          },
          "type" : "selector"
        } ]
      },
      "assign-vars" : [ ],
      "line-end" : 262,
      "code" : "return a.v",
      "entry" : false,
      "use-vars" : [ 17 ]
    } ],
    "code" : "// Data returns the representation of a slice.\nfunc (a array) Data() interface{} {\n\tif a.v == nil {\n\n\t\tshdr := reflect.SliceHeader{\n\t\t\tData: uintptr(a.Header.Ptr),\n\t\t\tLen:  a.Header.L,\n\t\t\tCap:  a.Header.C,\n\t\t}\n\t\tsliceT := reflect.SliceOf(a.t.Type)\n\t\tptr := unsafe.Pointer(&shdr)\n\t\tval := reflect.Indirect(reflect.NewAt(sliceT, ptr))\n\t\ta.v = val.Interface()\n\n\t}\n\treturn a.v\n}",
    "defines" : [ 0 ],
    "functions" : [ {
      "name" : "Data",
      "package" : 0,
      "type" : 0,
      "exported" : true
    }, {
      "name" : "SliceOf",
      "package" : 3,
      "type" : 86,
      "exported" : true
    }, {
      "name" : "Indirect",
      "package" : 3,
      "type" : 89,
      "exported" : true
    }, {
      "name" : "NewAt",
      "package" : 3,
      "type" : 92,
      "exported" : true
    }, {
      "name" : "Interface",
      "package" : 3,
      "type" : 96,
      "exported" : true
    } ],
    "line-end" : 263,
    "line-start" : 248,
    "names" : [ "Data" ],
    "package" : 0,
    "packages" : [ {
      "name" : "tensor",
      "path" : "gorgonia.org/tensor"
    }, {
      "name" : "storage",
      "path" : "gorgonia.org/tensor/internal/storage"
    }, {
      "name" : "unsafe",
      "path" : "unsafe"
    }, {
      "name" : "reflect",
      "path" : "reflect"
    } ],
    "params" : [ ],
    "receivers" : [ 17 ],
    "results" : [ 18 ],
    "type" : "function",
    "types" : [ {
      "name" : "(gorgonia.org/tensor.array) func() interface{}",
      "params" : 1,
      "recv" : 17,
      "results" : 2,
      "type" : "Signature",
      "underlying" : 0,
      "variadic" : false
    }, {
      "fields" : [ ],
      "name" : "()",
      "type" : "Tuple",
      "underlying" : 1
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 3
      } ],
      "name" : "(interface{})",
      "type" : "Tuple",
      "underlying" : 2
    }, {
      "methods" : [ ],
      "name" : "interface{}",
      "type" : "Interface",
      "underlying" : 3
    }, {
      "local-name" : "array",
      "name" : "gorgonia.org/tensor.array",
      "package" : 0,
      "type" : "Named",
      "underlying" : 5
    }, {
      "fields" : [ {
        "name" : "Header",
        "type" : 6
      }, {
        "name" : "t",
        "type" : 10
      }, {
        "name" : "v",
        "type" : 3
      } ],
      "name" : "struct{gorgonia.org/tensor/internal/storage.Header; t gorgonia.org/tensor.Dtype; v interface{}}",
      "type" : "Struct",
      "underlying" : 5
    }, {
      "local-name" : "Header",
      "name" : "gorgonia.org/tensor/internal/storage.Header",
      "package" : 1,
      "type" : "Named",
      "underlying" : 7
    }, {
      "fields" : [ {
        "name" : "Ptr",
        "type" : 8
      }, {
        "name" : "L",
        "type" : 9
      }, {
        "name" : "C",
        "type" : 9
      } ],
      "name" : "struct{Ptr unsafe.Pointer; L int; C int}",
      "type" : "Struct",
      "underlying" : 7
    }, {
      "local-name" : "Pointer",
      "name" : "unsafe.Pointer",
      "package" : 2,
      "type" : "Basic",
      "underlying" : 8
    }, {
      "name" : "int",
      "type" : "Basic",
      "underlying" : 9
    }, {
      "local-name" : "Dtype",
      "name" : "gorgonia.org/tensor.Dtype",
      "package" : 0,
      "type" : "Named",
      "underlying" : 11
    }, {
      "fields" : [ {
        "name" : "Type",
        "type" : 12
      } ],
      "name" : "struct{reflect.Type}",
      "type" : "Struct",
      "underlying" : 11
    }, {
      "local-name" : "Type",
      "name" : "reflect.Type",
      "package" : 3,
      "type" : "Named",
      "underlying" : 13
    }, {
      "methods" : [ {
        "name" : "Align",
        "type" : 14
      }, {
        "name" : "AssignableTo",
        "type" : 16
      }, {
        "name" : "Bits",
        "type" : 14
      }, {
        "name" : "ChanDir",
        "type" : 20
      }, {
        "name" : "Comparable",
        "type" : 23
      }, {
        "name" : "ConvertibleTo",
        "type" : 16
      }, {
        "name" : "Elem",
        "type" : 24
      }, {
        "name" : "Field",
        "type" : 26
      }, {
        "name" : "FieldAlign",
        "type" : 14
      }, {
        "name" : "FieldByIndex",
        "type" : 35
      }, {
        "name" : "FieldByName",
        "type" : 37
      }, {
        "name" : "FieldByNameFunc",
        "type" : 40
      }, {
        "name" : "Implements",
        "type" : 16
      }, {
        "name" : "In",
        "type" : 44
      }, {
        "name" : "IsVariadic",
        "type" : 23
      }, {
        "name" : "Key",
        "type" : 24
      }, {
        "name" : "Kind",
        "type" : 45
      }, {
        "name" : "Len",
        "type" : 14
      }, {
        "name" : "Method",
        "type" : 49
      }, {
        "name" : "MethodByName",
        "type" : 69
      }, {
        "name" : "Name",
        "type" : 71
      }, {
        "name" : "NumField",
        "type" : 14
      }, {
        "name" : "NumIn",
        "type" : 14
      }, {
        "name" : "NumMethod",
        "type" : 14
      }, {
        "name" : "NumOut",
        "type" : 14
      }, {
        "name" : "Out",
        "type" : 44
      }, {
        "name" : "PkgPath",
        "type" : 71
      }, {
        "name" : "Size",
        "type" : 72
      }, {
        "name" : "String",
        "type" : 71
      }, {
        "name" : "common",
        "type" : 74
      }, {
        "name" : "uncommon",
        "type" : 76
      } ],
      "name" : "interface{Align() int; AssignableTo(u reflect.Type) bool; Bits() int; ChanDir() reflect.ChanDir; Comparable() bool; ConvertibleTo(u reflect.Type) bool; Elem() reflect.Type; Field(i int) reflect.StructField; FieldAlign() int; FieldByIndex(index []int) reflect.StructField; FieldByName(name string) (reflect.StructField, bool); FieldByNameFunc(match func(string) bool) (reflect.StructField, bool); Implements(u reflect.Type) bool; In(i int) reflect.Type; IsVariadic() bool; Key() reflect.Type; Kind() reflect.Kind; Len() int; Method(int) reflect.Method; MethodByName(string) (reflect.Method, bool); Name() string; NumField() int; NumIn() int; NumMethod() int; NumOut() int; Out(i int) reflect.Type; PkgPath() string; Size() uintptr; String() string; common() *reflect.rtype; uncommon() *reflect.uncommonType}",
      "type" : "Interface",
      "underlying" : 13
    }, {
      "name" : "(reflect.Type) func() int",
      "params" : 1,
      "recv" : 0,
      "results" : 15,
      "type" : "Signature",
      "underlying" : 14,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 9
      } ],
      "name" : "(int)",
      "type" : "Tuple",
      "underlying" : 15
    }, {
      "name" : "(reflect.Type) func(u reflect.Type) bool",
      "params" : 17,
      "recv" : 1,
      "results" : 18,
      "type" : "Signature",
      "underlying" : 16,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "u",
        "type" : 12
      } ],
      "name" : "(u reflect.Type)",
      "type" : "Tuple",
      "underlying" : 17
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 19
      } ],
      "name" : "(bool)",
      "type" : "Tuple",
      "underlying" : 18
    }, {
      "name" : "bool",
      "type" : "Basic",
      "underlying" : 19
    }, {
      "name" : "(reflect.Type) func() reflect.ChanDir",
      "params" : 1,
      "recv" : 2,
      "results" : 21,
      "type" : "Signature",
      "underlying" : 20,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 22
      } ],
      "name" : "(reflect.ChanDir)",
      "type" : "Tuple",
      "underlying" : 21
    }, {
      "local-name" : "ChanDir",
      "name" : "reflect.ChanDir",
      "package" : 3,
      "type" : "Named",
      "underlying" : 9
    }, {
      "name" : "(reflect.Type) func() bool",
      "params" : 1,
      "recv" : 3,
      "results" : 18,
      "type" : "Signature",
      "underlying" : 23,
      "variadic" : false
    }, {
      "name" : "(reflect.Type) func() reflect.Type",
      "params" : 1,
      "recv" : 4,
      "results" : 25,
      "type" : "Signature",
      "underlying" : 24,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 12
      } ],
      "name" : "(reflect.Type)",
      "type" : "Tuple",
      "underlying" : 25
    }, {
      "name" : "(reflect.Type) func(i int) reflect.StructField",
      "params" : 27,
      "recv" : 5,
      "results" : 28,
      "type" : "Signature",
      "underlying" : 26,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "i",
        "type" : 9
      } ],
      "name" : "(i int)",
      "type" : "Tuple",
      "underlying" : 27
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 29
      } ],
      "name" : "(reflect.StructField)",
      "type" : "Tuple",
      "underlying" : 28
    }, {
      "local-name" : "StructField",
      "name" : "reflect.StructField",
      "package" : 3,
      "type" : "Named",
      "underlying" : 30
    }, {
      "fields" : [ {
        "name" : "Name",
        "type" : 31
      }, {
        "name" : "PkgPath",
        "type" : 31
      }, {
        "name" : "Type",
        "type" : 12
      }, {
        "name" : "Tag",
        "type" : 32
      }, {
        "name" : "Offset",
        "type" : 33
      }, {
        "name" : "Index",
        "type" : 34
      }, {
        "name" : "Anonymous",
        "type" : 19
      } ],
      "name" : "struct{Name string; PkgPath string; Type reflect.Type; Tag reflect.StructTag; Offset uintptr; Index []int; Anonymous bool}",
      "type" : "Struct",
      "underlying" : 30
    }, {
      "name" : "string",
      "type" : "Basic",
      "underlying" : 31
    }, {
      "local-name" : "StructTag",
      "name" : "reflect.StructTag",
      "package" : 3,
      "type" : "Named",
      "underlying" : 31
    }, {
      "name" : "uintptr",
      "type" : "Basic",
      "underlying" : 33
    }, {
      "elem" : 9,
      "name" : "[]int",
      "type" : "Slice",
      "underlying" : 34
    }, {
      "name" : "(reflect.Type) func(index []int) reflect.StructField",
      "params" : 36,
      "recv" : 6,
      "results" : 28,
      "type" : "Signature",
      "underlying" : 35,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "index",
        "type" : 34
      } ],
      "name" : "(index []int)",
      "type" : "Tuple",
      "underlying" : 36
    }, {
      "name" : "(reflect.Type) func(name string) (reflect.StructField, bool)",
      "params" : 38,
      "recv" : 7,
      "results" : 39,
      "type" : "Signature",
      "underlying" : 37,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "name",
        "type" : 31
      } ],
      "name" : "(name string)",
      "type" : "Tuple",
      "underlying" : 38
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 29
      }, {
        "name" : "",
        "type" : 19
      } ],
      "name" : "(reflect.StructField, bool)",
      "type" : "Tuple",
      "underlying" : 39
    }, {
      "name" : "(reflect.Type) func(match func(string) bool) (reflect.StructField, bool)",
      "params" : 41,
      "recv" : 8,
      "results" : 39,
      "type" : "Signature",
      "underlying" : 40,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "match",
        "type" : 42
      } ],
      "name" : "(match func(string) bool)",
      "type" : "Tuple",
      "underlying" : 41
    }, {
      "name" : "func(string) bool",
      "params" : 43,
      "recv" : -1,
      "results" : 18,
      "type" : "Signature",
      "underlying" : 42,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 31
      } ],
      "name" : "(string)",
      "type" : "Tuple",
      "underlying" : 43
    }, {
      "name" : "(reflect.Type) func(i int) reflect.Type",
      "params" : 27,
      "recv" : 9,
      "results" : 25,
      "type" : "Signature",
      "underlying" : 44,
      "variadic" : false
    }, {
      "name" : "(reflect.Type) func() reflect.Kind",
      "params" : 1,
      "recv" : 10,
      "results" : 46,
      "type" : "Signature",
      "underlying" : 45,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 47
      } ],
      "name" : "(reflect.Kind)",
      "type" : "Tuple",
      "underlying" : 46
    }, {
      "local-name" : "Kind",
      "name" : "reflect.Kind",
      "package" : 3,
      "type" : "Named",
      "underlying" : 48
    }, {
      "name" : "uint",
      "type" : "Basic",
      "underlying" : 48
    }, {
      "name" : "(reflect.Type) func(int) reflect.Method",
      "params" : 15,
      "recv" : 11,
      "results" : 50,
      "type" : "Signature",
      "underlying" : 49,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 51
      } ],
      "name" : "(reflect.Method)",
      "type" : "Tuple",
      "underlying" : 50
    }, {
      "local-name" : "Method",
      "name" : "reflect.Method",
      "package" : 3,
      "type" : "Named",
      "underlying" : 52
    }, {
      "fields" : [ {
        "name" : "Name",
        "type" : 31
      }, {
        "name" : "PkgPath",
        "type" : 31
      }, {
        "name" : "Type",
        "type" : 12
      }, {
        "name" : "Func",
        "type" : 53
      }, {
        "name" : "Index",
        "type" : 9
      } ],
      "name" : "struct{Name string; PkgPath string; Type reflect.Type; Func reflect.Value; Index int}",
      "type" : "Struct",
      "underlying" : 52
    }, {
      "local-name" : "Value",
      "name" : "reflect.Value",
      "package" : 3,
      "type" : "Named",
      "underlying" : 54
    }, {
      "fields" : [ {
        "name" : "typ",
        "type" : 55
      }, {
        "name" : "ptr",
        "type" : 8
      }, {
        "name" : "flag",
        "type" : 68
      } ],
      "name" : "struct{typ *reflect.rtype; ptr unsafe.Pointer; reflect.flag}",
      "type" : "Struct",
      "underlying" : 54
    }, {
      "elem" : 56,
      "name" : "*reflect.rtype",
      "type" : "Pointer",
      "underlying" : 55
    }, {
      "local-name" : "rtype",
      "name" : "reflect.rtype",
      "package" : 3,
      "type" : "Named",
      "underlying" : 57
    }, {
      "fields" : [ {
        "name" : "size",
        "type" : 33
      }, {
        "name" : "ptrdata",
        "type" : 33
      }, {
        "name" : "hash",
        "type" : 58
      }, {
        "name" : "tflag",
        "type" : 59
      }, {
        "name" : "align",
        "type" : 60
      }, {
        "name" : "fieldAlign",
        "type" : 60
      }, {
        "name" : "kind",
        "type" : 60
      }, {
        "name" : "equal",
        "type" : 61
      }, {
        "name" : "gcdata",
        "type" : 63
      }, {
        "name" : "str",
        "type" : 65
      }, {
        "name" : "ptrToThis",
        "type" : 67
      } ],
      "name" : "struct{size uintptr; ptrdata uintptr; hash uint32; tflag reflect.tflag; align uint8; fieldAlign uint8; kind uint8; equal func(unsafe.Pointer, unsafe.Pointer) bool; gcdata *byte; str reflect.nameOff; ptrToThis reflect.typeOff}",
      "type" : "Struct",
      "underlying" : 57
    }, {
      "name" : "uint32",
      "type" : "Basic",
      "underlying" : 58
    }, {
      "local-name" : "tflag",
      "name" : "reflect.tflag",
      "package" : 3,
      "type" : "Named",
      "underlying" : 60
    }, {
      "name" : "uint8",
      "type" : "Basic",
      "underlying" : 60
    }, {
      "name" : "func(unsafe.Pointer, unsafe.Pointer) bool",
      "params" : 62,
      "recv" : -1,
      "results" : 18,
      "type" : "Signature",
      "underlying" : 61,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 8
      }, {
        "name" : "",
        "type" : 8
      } ],
      "name" : "(unsafe.Pointer, unsafe.Pointer)",
      "type" : "Tuple",
      "underlying" : 62
    }, {
      "elem" : 64,
      "name" : "*byte",
      "type" : "Pointer",
      "underlying" : 63
    }, {
      "name" : "byte",
      "type" : "Basic",
      "underlying" : 64
    }, {
      "local-name" : "nameOff",
      "name" : "reflect.nameOff",
      "package" : 3,
      "type" : "Named",
      "underlying" : 66
    }, {
      "name" : "int32",
      "type" : "Basic",
      "underlying" : 66
    }, {
      "local-name" : "typeOff",
      "name" : "reflect.typeOff",
      "package" : 3,
      "type" : "Named",
      "underlying" : 66
    }, {
      "local-name" : "flag",
      "name" : "reflect.flag",
      "package" : 3,
      "type" : "Named",
      "underlying" : 33
    }, {
      "name" : "(reflect.Type) func(string) (reflect.Method, bool)",
      "params" : 43,
      "recv" : 12,
      "results" : 70,
      "type" : "Signature",
      "underlying" : 69,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 51
      }, {
        "name" : "",
        "type" : 19
      } ],
      "name" : "(reflect.Method, bool)",
      "type" : "Tuple",
      "underlying" : 70
    }, {
      "name" : "(reflect.Type) func() string",
      "params" : 1,
      "recv" : 13,
      "results" : 43,
      "type" : "Signature",
      "underlying" : 71,
      "variadic" : false
    }, {
      "name" : "(reflect.Type) func() uintptr",
      "params" : 1,
      "recv" : 14,
      "results" : 73,
      "type" : "Signature",
      "underlying" : 72,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 33
      } ],
      "name" : "(uintptr)",
      "type" : "Tuple",
      "underlying" : 73
    }, {
      "name" : "(reflect.Type) func() *reflect.rtype",
      "params" : 1,
      "recv" : 15,
      "results" : 75,
      "type" : "Signature",
      "underlying" : 74,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 55
      } ],
      "name" : "(*reflect.rtype)",
      "type" : "Tuple",
      "underlying" : 75
    }, {
      "name" : "(reflect.Type) func() *reflect.uncommonType",
      "params" : 1,
      "recv" : 16,
      "results" : 77,
      "type" : "Signature",
      "underlying" : 76,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 78
      } ],
      "name" : "(*reflect.uncommonType)",
      "type" : "Tuple",
      "underlying" : 77
    }, {
      "elem" : 79,
      "name" : "*reflect.uncommonType",
      "type" : "Pointer",
      "underlying" : 78
    }, {
      "local-name" : "uncommonType",
      "name" : "reflect.uncommonType",
      "package" : 3,
      "type" : "Named",
      "underlying" : 80
    }, {
      "fields" : [ {
        "name" : "pkgPath",
        "type" : 65
      }, {
        "name" : "mcount",
        "type" : 81
      }, {
        "name" : "xcount",
        "type" : 81
      }, {
        "name" : "moff",
        "type" : 58
      }, {
        "name" : "_",
        "type" : 58
      } ],
      "name" : "struct{pkgPath reflect.nameOff; mcount uint16; xcount uint16; moff uint32; _ uint32}",
      "type" : "Struct",
      "underlying" : 80
    }, {
      "name" : "uint16",
      "type" : "Basic",
      "underlying" : 81
    }, {
      "name" : "untyped bool",
      "type" : "Basic",
      "underlying" : 82
    }, {
      "name" : "untyped nil",
      "type" : "Basic",
      "underlying" : 83
    }, {
      "local-name" : "SliceHeader",
      "name" : "reflect.SliceHeader",
      "package" : 3,
      "type" : "Named",
      "underlying" : 85
    }, {
      "fields" : [ {
        "name" : "Data",
        "type" : 33
      }, {
        "name" : "Len",
        "type" : 9
      }, {
        "name" : "Cap",
        "type" : 9
      } ],
      "name" : "struct{Data uintptr; Len int; Cap int}",
      "type" : "Struct",
      "underlying" : 85
    }, {
      "name" : "func(t reflect.Type) reflect.Type",
      "params" : 87,
      "recv" : -1,
      "results" : 25,
      "type" : "Signature",
      "underlying" : 86,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "t",
        "type" : 12
      } ],
      "name" : "(t reflect.Type)",
      "type" : "Tuple",
      "underlying" : 87
    }, {
      "elem" : 84,
      "name" : "*reflect.SliceHeader",
      "type" : "Pointer",
      "underlying" : 88
    }, {
      "name" : "func(v reflect.Value) reflect.Value",
      "params" : 90,
      "recv" : -1,
      "results" : 91,
      "type" : "Signature",
      "underlying" : 89,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "v",
        "type" : 53
      } ],
      "name" : "(v reflect.Value)",
      "type" : "Tuple",
      "underlying" : 90
    }, {
      "fields" : [ {
        "name" : "",
        "type" : 53
      } ],
      "name" : "(reflect.Value)",
      "type" : "Tuple",
      "underlying" : 91
    }, {
      "name" : "func(typ reflect.Type, p unsafe.Pointer) reflect.Value",
      "params" : 93,
      "recv" : -1,
      "results" : 91,
      "type" : "Signature",
      "underlying" : 92,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "typ",
        "type" : 12
      }, {
        "name" : "p",
        "type" : 8
      } ],
      "name" : "(typ reflect.Type, p unsafe.Pointer)",
      "type" : "Tuple",
      "underlying" : 93
    }, {
      "name" : "func() (i interface{})",
      "params" : 1,
      "recv" : -1,
      "results" : 95,
      "type" : "Signature",
      "underlying" : 94,
      "variadic" : false
    }, {
      "fields" : [ {
        "name" : "i",
        "type" : 3
      } ],
      "name" : "(i interface{})",
      "type" : "Tuple",
      "underlying" : 95
    }, {
      "name" : "(reflect.Value) func() (i interface{})",
      "params" : 1,
      "recv" : 33,
      "results" : 95,
      "type" : "Signature",
      "underlying" : 96,
      "variadic" : false
    } ],
    "variables" : [ {
      "name" : "",
      "package" : 3,
      "type" : 12,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 3,
      "type" : 12,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 3,
      "type" : 12,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 3,
      "type" : 12,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 3,
      "type" : 12,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 3,
      "type" : 12,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 3,
      "type" : 12,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 3,
      "type" : 12,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 3,
      "type" : 12,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 3,
      "type" : 12,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 3,
      "type" : 12,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 3,
      "type" : 12,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 3,
      "type" : 12,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 3,
      "type" : 12,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 3,
      "type" : 12,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 3,
      "type" : 12,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "",
      "package" : 3,
      "type" : 12,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "a",
      "package" : 0,
      "type" : 4,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "[res0]",
      "package" : 0,
      "type" : 3,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "v",
      "package" : 0,
      "type" : 3,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "Data",
      "package" : 3,
      "type" : 33,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "Header",
      "package" : 0,
      "type" : 6,
      "exported" : true,
      "embedded" : true,
      "field" : true
    }, {
      "name" : "Ptr",
      "package" : 1,
      "type" : 8,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "Len",
      "package" : 3,
      "type" : 9,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "L",
      "package" : 1,
      "type" : 9,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "Cap",
      "package" : 3,
      "type" : 9,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "C",
      "package" : 1,
      "type" : 9,
      "exported" : true,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "t",
      "package" : 0,
      "type" : 10,
      "exported" : false,
      "embedded" : false,
      "field" : true
    }, {
      "name" : "Type",
      "package" : 0,
      "type" : 12,
      "exported" : true,
      "embedded" : true,
      "field" : true
    }, {
      "name" : "shdr",
      "package" : 0,
      "type" : 84,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "sliceT",
      "package" : 0,
      "type" : 12,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "ptr",
      "package" : 0,
      "type" : 8,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "val",
      "package" : 0,
      "type" : 53,
      "exported" : false,
      "embedded" : false,
      "field" : false
    }, {
      "name" : "v",
      "package" : 3,
      "type" : 53,
      "exported" : false,
      "embedded" : false,
      "field" : false
    } ]
  },
  "go-version" : "1.14.3"
}